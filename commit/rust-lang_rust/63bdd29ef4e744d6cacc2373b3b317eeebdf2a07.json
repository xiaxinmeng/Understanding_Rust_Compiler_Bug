{"sha": "63bdd29ef4e744d6cacc2373b3b317eeebdf2a07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYmRkMjllZjRlNzQ0ZDZjYWNjMjM3M2IzYjMxN2VlZWJkZjJhMDc=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2019-02-21T22:02:56Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2019-02-28T22:11:21Z"}, "message": "add tests for doc coverage", "tree": {"sha": "30c74a89b6c0a815b0ebd9898276416671bfd59e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30c74a89b6c0a815b0ebd9898276416671bfd59e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07", "html_url": "https://github.com/rust-lang/rust/commit/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ce19b4a2c062a7a269bd2783a4a441d515b64c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ce19b4a2c062a7a269bd2783a4a441d515b64c8", "html_url": "https://github.com/rust-lang/rust/commit/3ce19b4a2c062a7a269bd2783a4a441d515b64c8"}], "stats": {"total": 251, "additions": 251, "deletions": 0}, "files": [{"sha": "4247fdf989556ffaea6c2a30c51d5e16d394905a", "filename": "src/test/rustdoc-ui/coverage/basic.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.rs?ref=63bdd29ef4e744d6cacc2373b3b317eeebdf2a07", "patch": "@@ -0,0 +1,50 @@\n+// compile-flags:-Z unstable-options --show-coverage\n+// compile-pass\n+\n+#![feature(extern_types)]\n+\n+//! Make sure to have some docs on your crate root\n+\n+/// This struct is documented, but its fields are not.\n+///\n+/// However, one field is private, so it shouldn't show in the total.\n+pub struct SomeStruct {\n+    pub some_field: usize,\n+    other_field: usize,\n+}\n+\n+impl SomeStruct {\n+    /// Method with docs\n+    pub fn this_fn(&self) {}\n+\n+    // Method without docs\n+    pub fn other_method(&self) {}\n+}\n+\n+// struct without docs\n+pub struct OtherStruct;\n+\n+// function with no docs\n+pub fn some_fn() {}\n+\n+/// Function with docs\n+pub fn other_fn() {}\n+\n+pub enum SomeEnum {\n+    /// Some of these variants are documented...\n+    VarOne,\n+    /// ...but some of them are not.\n+    VarTwo,\n+    // (like this one)\n+    VarThree,\n+}\n+\n+/// There's a macro here, too\n+#[macro_export]\n+macro_rules! some_macro {\n+    () => {};\n+}\n+\n+extern {\n+    pub type ExternType;\n+}"}, {"sha": "089ab6017d194af859e6680f1d91739295a90700", "filename": "src/test/rustdoc-ui/coverage/basic.stdout", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.stdout?ref=63bdd29ef4e744d6cacc2373b3b317eeebdf2a07", "patch": "@@ -0,0 +1,15 @@\n++---------------------------+------------+------------+------------+\n+| Item Type                 | Documented |      Total | Percentage |\n++---------------------------+------------+------------+------------+\n+| Modules                   |          1 |          1 |     100.0% |\n+| Functions                 |          1 |          2 |      50.0% |\n+| Structs                   |          1 |          2 |      50.0% |\n+| Struct Fields             |          0 |          1 |       0.0% |\n+| Enums                     |          0 |          1 |       0.0% |\n+| Enum Variants             |          2 |          3 |      66.7% |\n+| Methods                   |          1 |          2 |      50.0% |\n+| Macros                    |          1 |          1 |     100.0% |\n+| Extern Types              |          0 |          1 |       0.0% |\n++---------------------------+------------+------------+------------+\n+| Total                     |          7 |         14 |      50.0% |\n++---------------------------+------------+------------+------------+"}, {"sha": "463617a1143df4795a7829b884577fa2a5724fa8", "filename": "src/test/rustdoc-ui/coverage/empty.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.rs?ref=63bdd29ef4e744d6cacc2373b3b317eeebdf2a07", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags:-Z unstable-options --show-coverage\n+// compile-pass\n+\n+// an empty crate still has one item to document: the crate root"}, {"sha": "df68205bbaa3f899bf1c5a9a038c5b814ff83bfe", "filename": "src/test/rustdoc-ui/coverage/empty.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fempty.stdout?ref=63bdd29ef4e744d6cacc2373b3b317eeebdf2a07", "patch": "@@ -0,0 +1,7 @@\n++---------------------------+------------+------------+------------+\n+| Item Type                 | Documented |      Total | Percentage |\n++---------------------------+------------+------------+------------+\n+| Modules                   |          0 |          1 |       0.0% |\n++---------------------------+------------+------------+------------+\n+| Total                     |          0 |          1 |       0.0% |\n++---------------------------+------------+------------+------------+"}, {"sha": "5cd7f490d1a9a82c593d81cf4bf2fcbea7d60b02", "filename": "src/test/rustdoc-ui/coverage/enums.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.rs?ref=63bdd29ef4e744d6cacc2373b3b317eeebdf2a07", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags:-Z unstable-options --show-coverage\n+// compile-pass\n+\n+//! (remember the crate root is still a module)\n+\n+/// so check out this enum here\n+pub enum ThisEnum {\n+    /// this variant has some weird stuff going on\n+    VarOne {\n+        /// like, it has some named fields inside\n+        field_one: usize,\n+        // (these show up as struct fields)\n+        field_two: usize,\n+    },\n+    /// here's another variant for you\n+    VarTwo(String),\n+    // but not all of them need to be documented as thoroughly\n+    VarThree,\n+}\n+\n+/// uninhabited enums? sure, let's throw one of those around\n+pub enum OtherEnum {}"}, {"sha": "651ea0953102f5dca02b6a14b617af679167aef4", "filename": "src/test/rustdoc-ui/coverage/enums.stdout", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.stdout?ref=63bdd29ef4e744d6cacc2373b3b317eeebdf2a07", "patch": "@@ -0,0 +1,10 @@\n++---------------------------+------------+------------+------------+\n+| Item Type                 | Documented |      Total | Percentage |\n++---------------------------+------------+------------+------------+\n+| Modules                   |          1 |          1 |     100.0% |\n+| Struct Fields             |          1 |          2 |      50.0% |\n+| Enums                     |          2 |          2 |     100.0% |\n+| Enum Variants             |          2 |          3 |      66.7% |\n++---------------------------+------------+------------+------------+\n+| Total                     |          6 |          8 |      75.0% |\n++---------------------------+------------+------------+------------+"}, {"sha": "b4adf45b90b8af983caf762c7dc32142d62f4f21", "filename": "src/test/rustdoc-ui/coverage/exotic.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.rs?ref=63bdd29ef4e744d6cacc2373b3b317eeebdf2a07", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags:-Z unstable-options --show-coverage\n+// compile-pass\n+\n+#![feature(doc_keyword)]\n+\n+//! the features only used in std also have entries in the table, so make sure those get pulled out\n+//! properly as well\n+\n+/// woo, check it out, we can write our own primitive docs lol\n+#[doc(primitive=\"unit\")]\n+mod prim_unit {}\n+\n+/// keywords? sure, pile them on\n+#[doc(keyword=\"where\")]\n+mod where_keyword {}"}, {"sha": "97eab50a55a486e0a0e450bf068ba219c8d4191c", "filename": "src/test/rustdoc-ui/coverage/exotic.stdout", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.stdout?ref=63bdd29ef4e744d6cacc2373b3b317eeebdf2a07", "patch": "@@ -0,0 +1,9 @@\n++---------------------------+------------+------------+------------+\n+| Item Type                 | Documented |      Total | Percentage |\n++---------------------------+------------+------------+------------+\n+| Modules                   |          1 |          1 |     100.0% |\n+| Primitives                |          1 |          1 |     100.0% |\n+| Keywords                  |          1 |          1 |     100.0% |\n++---------------------------+------------+------------+------------+\n+| Total                     |          3 |          3 |     100.0% |\n++---------------------------+------------+------------+------------+"}, {"sha": "9024185856daaec0fe9c91e31f1aed6d6f1d9610", "filename": "src/test/rustdoc-ui/coverage/private.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.rs?ref=63bdd29ef4e744d6cacc2373b3b317eeebdf2a07", "patch": "@@ -0,0 +1,21 @@\n+// compile-flags:-Z unstable-options --show-coverage --document-private-items\n+// compile-pass\n+\n+#![allow(unused)]\n+\n+//! when `--document-private-items` is passed, nothing is safe. everything must have docs or your\n+//! score will suffer the consequences\n+\n+mod this_mod {\n+    fn private_fn() {}\n+}\n+\n+/// See, our public items have docs!\n+pub struct SomeStruct {\n+    /// Look, all perfectly documented!\n+    pub field: usize,\n+    other: usize,\n+}\n+\n+/// Nothing shady going on here. Just a bunch of well-documented code. (cough)\n+pub fn public_fn() {}"}, {"sha": "f1a5461b836cf7e19d932e765ef238618d34529c", "filename": "src/test/rustdoc-ui/coverage/private.stdout", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fprivate.stdout?ref=63bdd29ef4e744d6cacc2373b3b317eeebdf2a07", "patch": "@@ -0,0 +1,10 @@\n++---------------------------+------------+------------+------------+\n+| Item Type                 | Documented |      Total | Percentage |\n++---------------------------+------------+------------+------------+\n+| Modules                   |          1 |          2 |      50.0% |\n+| Functions                 |          1 |          2 |      50.0% |\n+| Structs                   |          1 |          1 |     100.0% |\n+| Struct Fields             |          1 |          2 |      50.0% |\n++---------------------------+------------+------------+------------+\n+| Total                     |          4 |          7 |      57.1% |\n++---------------------------+------------+------------+------------+"}, {"sha": "3c1dd35dfe1ab8a66a59c7e9b783d496c10e24e1", "filename": "src/test/rustdoc-ui/coverage/statics-consts.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.rs?ref=63bdd29ef4e744d6cacc2373b3b317eeebdf2a07", "patch": "@@ -0,0 +1,23 @@\n+// compile-flags:-Z unstable-options --show-coverage\n+// compile-pass\n+\n+//! gotta make sure we can count statics and consts correctly, too\n+\n+/// static like electricity, right?\n+pub static THIS_STATIC: usize = 0;\n+\n+/// (it's not electricity, is it)\n+pub const THIS_CONST: usize = 1;\n+\n+/// associated consts show up separately, but let's throw them in as well\n+pub trait SomeTrait {\n+    /// just like that, yeah\n+    const ASSOC_CONST: usize;\n+}\n+\n+pub struct SomeStruct;\n+\n+impl SomeStruct {\n+    /// wait, structs can have them too, can't forget those\n+    pub const ASSOC_CONST: usize = 100;\n+}"}, {"sha": "54516fe613fb4b8c95c9c04b51e297c02f14d9f5", "filename": "src/test/rustdoc-ui/coverage/statics-consts.stdout", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fstatics-consts.stdout?ref=63bdd29ef4e744d6cacc2373b3b317eeebdf2a07", "patch": "@@ -0,0 +1,12 @@\n++---------------------------+------------+------------+------------+\n+| Item Type                 | Documented |      Total | Percentage |\n++---------------------------+------------+------------+------------+\n+| Modules                   |          1 |          1 |     100.0% |\n+| Structs                   |          0 |          1 |       0.0% |\n+| Traits                    |          1 |          1 |     100.0% |\n+| Associated Constants      |          2 |          2 |     100.0% |\n+| Statics                   |          1 |          1 |     100.0% |\n+| Constants                 |          1 |          1 |     100.0% |\n++---------------------------+------------+------------+------------+\n+| Total                     |          6 |          7 |      85.7% |\n++---------------------------+------------+------------+------------+"}, {"sha": "0a6defa17f85bc94ca076d48db3262e59e9f70b1", "filename": "src/test/rustdoc-ui/coverage/traits.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs?ref=63bdd29ef4e744d6cacc2373b3b317eeebdf2a07", "patch": "@@ -0,0 +1,37 @@\n+// compile-flags:-Z unstable-options --show-coverage\n+// compile-pass\n+\n+#![feature(trait_alias)]\n+\n+/// look at this trait right here\n+pub trait ThisTrait {\n+    /// that's a trait all right\n+    fn right_here(&self);\n+\n+    /// even the provided functions show up as trait methods\n+    fn aww_yeah(&self) {}\n+\n+    /// gotta check those associated types, they're slippery\n+    type SomeType;\n+}\n+\n+/// so what happens if we take some struct...\n+pub struct SomeStruct;\n+\n+/// ...and slap this trait on it?\n+impl ThisTrait for SomeStruct {\n+    /// what we get is a perfect combo!\n+    fn right_here(&self) {}\n+\n+    type SomeType = String;\n+}\n+\n+/// but what about those aliases? i hear they're pretty exotic\n+pub trait MyAlias = ThisTrait + Send + Sync;\n+\n+// FIXME(58624): once rustdoc can process existential types, we need to make sure they're counted\n+// /// woah, getting all existential in here\n+// pub existential type ThisExists: ThisTrait;\n+//\n+// /// why don't we get a little more concrete\n+// pub fn defines() -> ThisExists { SomeStruct {} }"}, {"sha": "6f5db8729efb3891b9b07438eece10d812d73e72", "filename": "src/test/rustdoc-ui/coverage/traits.stdout", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/63bdd29ef4e744d6cacc2373b3b317eeebdf2a07/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.stdout?ref=63bdd29ef4e744d6cacc2373b3b317eeebdf2a07", "patch": "@@ -0,0 +1,16 @@\n++---------------------------+------------+------------+------------+\n+| Item Type                 | Documented |      Total | Percentage |\n++---------------------------+------------+------------+------------+\n+| Modules                   |          0 |          1 |       0.0% |\n+| Structs                   |          1 |          1 |     100.0% |\n+| Traits                    |          1 |          1 |     100.0% |\n+| Trait Methods             |          2 |          2 |     100.0% |\n+| Associated Types          |          1 |          1 |     100.0% |\n+| Trait Aliases             |          1 |          1 |     100.0% |\n++---------------------------+------------+------------+------------+\n+| Total (non trait impls)   |          6 |          7 |      85.7% |\n++---------------------------+------------+------------+------------+\n+| Trait Impl Items          |          2 |          3 |      66.7% |\n++---------------------------+------------+------------+------------+\n+| Total                     |          8 |         10 |      80.0% |\n++---------------------------+------------+------------+------------+"}]}