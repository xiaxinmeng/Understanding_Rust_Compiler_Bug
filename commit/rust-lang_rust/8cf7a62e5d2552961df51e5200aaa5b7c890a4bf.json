{"sha": "8cf7a62e5d2552961df51e5200aaa5b7c890a4bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZjdhNjJlNWQyNTUyOTYxZGY1MWU1MjAwYWFhNWI3Yzg5MGE0YmY=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-09-09T00:01:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-09T00:01:16Z"}, "message": "Fix cargo features for nightly (#155)\n\n* Fix cargo features for nightly", "tree": {"sha": "456e06d7260af4d62a31ceef79422f5caee7126b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/456e06d7260af4d62a31ceef79422f5caee7126b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhOU7MCRBK7hj4Ov3rIwAAGfEIAID+2Bw4n55wS+Si0usE1Ihz\nCWxqhipI0E+aYO8LDPn4RmpiI0Fcot2NNzWoddDgo+Fo5D/5UqZsdcR0OVQnW/rM\nZNJm+/R9qNuL+9G5pPYas8IHWqk7DqSMP8FIZ1q7LEx57D7Gcf6Zs2ey+LtHH+Nm\nPimOe87cnCEUBec/zvrbl6tlGIEnQqB6hWEBLr2//k2kwzLdv12pmlO4E6pFy9Ls\n+5w0RFfE0Hn9bkAuKBCPZZHH7HdUmKt9jwsq2AhNSmGPFvaIOOKScZMsRCiL+D8H\no2/8xIULERsApjurrr2Gy4dNORdyomiYXH0S0Qwdy22Z0kTArieDqPBwTBwTyf8=\n=XZM8\n-----END PGP SIGNATURE-----\n", "payload": "tree 456e06d7260af4d62a31ceef79422f5caee7126b\nparent d42875302dd9e924f8d667b32e88989388989b79\nauthor Caleb Zulawski <caleb.zulawski@gmail.com> 1631145676 -0400\ncommitter GitHub <noreply@github.com> 1631145676 -0700\n\nFix cargo features for nightly (#155)\n\n* Fix cargo features for nightly"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf", "html_url": "https://github.com/rust-lang/rust/commit/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d42875302dd9e924f8d667b32e88989388989b79", "url": "https://api.github.com/repos/rust-lang/rust/commits/d42875302dd9e924f8d667b32e88989388989b79", "html_url": "https://github.com/rust-lang/rust/commit/d42875302dd9e924f8d667b32e88989388989b79"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "a9768f53852cd4a06695885c51b41a68068d36a7", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=8cf7a62e5d2552961df51e5200aaa5b7c890a4bf", "patch": "@@ -208,8 +208,8 @@ jobs:\n         features:\n           - \"\"\n           - \"--features std\"\n-          - \"--features const_evaluatable_checked\"\n-          - \"--features std --features const_evaluatable_checked\"\n+          - \"--features generic_const_exprs\"\n+          - \"--features std --features generic_const_exprs\"\n \n     steps:\n       - uses: actions/checkout@v2"}, {"sha": "9e8d742d83c72967f2c7e5da929cbc821318df22", "filename": "crates/core_simd/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf/crates%2Fcore_simd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf/crates%2Fcore_simd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2FCargo.toml?ref=8cf7a62e5d2552961df51e5200aaa5b7c890a4bf", "patch": "@@ -9,9 +9,9 @@ categories = [\"hardware-support\", \"no-std\"]\n license = \"MIT OR Apache-2.0\"\n \n [features]\n-default = [\"std\", \"const_evaluatable_checked\"]\n+default = [\"std\", \"generic_const_exprs\"]\n std = []\n-const_evaluatable_checked = []\n+generic_const_exprs = []\n \n [target.'cfg(target_arch = \"wasm32\")'.dev-dependencies.wasm-bindgen]\n version = \"0.2\""}, {"sha": "7f07aa6393e2a751bf83c35403afca1b629758fb", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=8cf7a62e5d2552961df51e5200aaa5b7c890a4bf", "patch": "@@ -1,15 +1,15 @@\n-#![no_std]\n+#![cfg_attr(not(feature = \"std\"), no_std)]\n #![allow(incomplete_features)]\n #![feature(\n-    const_evaluatable_checked,\n+    adt_const_params,\n     const_fn_trait_bound,\n-    const_generics,\n     platform_intrinsics,\n     repr_simd,\n     simd_ffi,\n     staged_api,\n     stdsimd\n )]\n+#![cfg_attr(feature = \"generic_const_exprs\", feature(generic_const_exprs))]\n #![warn(missing_docs)]\n #![unstable(feature = \"portable_simd\", issue = \"86656\")]\n //! Portable SIMD module.\n@@ -22,7 +22,7 @@ mod reduction;\n mod select;\n pub use select::Select;\n \n-#[cfg(feature = \"const_evaluatable_checked\")]\n+#[cfg(feature = \"generic_const_exprs\")]\n mod to_bytes;\n \n mod comparisons;"}, {"sha": "ebd394cd0408af2895cc88493439219c925a491a", "filename": "crates/core_simd/src/masks.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks.rs?ref=8cf7a62e5d2552961df51e5200aaa5b7c890a4bf", "patch": "@@ -178,11 +178,13 @@ where\n     }\n \n     /// Convert this mask to a bitmask, with one bit set per lane.\n+    #[cfg(feature = \"generic_const_exprs\")]\n     pub fn to_bitmask(self) -> [u8; LaneCount::<LANES>::BITMASK_LEN] {\n         self.0.to_bitmask()\n     }\n \n     /// Convert a bitmask to a mask.\n+    #[cfg(feature = \"generic_const_exprs\")]\n     pub fn from_bitmask(bitmask: [u8; LaneCount::<LANES>::BITMASK_LEN]) -> Self {\n         Self(mask_impl::Mask::from_bitmask(bitmask))\n     }"}, {"sha": "bc68b5076748dc91f28852fed566bdaa04be7f04", "filename": "crates/core_simd/src/masks/bitmask.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs?ref=8cf7a62e5d2552961df51e5200aaa5b7c890a4bf", "patch": "@@ -119,12 +119,14 @@ where\n         Self(core::mem::transmute_copy(&mask), PhantomData)\n     }\n \n+    #[cfg(feature = \"generic_const_exprs\")]\n     #[inline]\n     pub fn to_bitmask(self) -> [u8; LaneCount::<LANES>::BITMASK_LEN] {\n         // Safety: these are the same type and we are laundering the generic\n         unsafe { core::mem::transmute_copy(&self.0) }\n     }\n \n+    #[cfg(feature = \"generic_const_exprs\")]\n     #[inline]\n     pub fn from_bitmask(bitmask: [u8; LaneCount::<LANES>::BITMASK_LEN]) -> Self {\n         // Safety: these are the same type and we are laundering the generic"}, {"sha": "5b783a7b6a1234cabd9e43a923fa3648d8af1fb5", "filename": "crates/core_simd/src/masks/full_masks.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs?ref=8cf7a62e5d2552961df51e5200aaa5b7c890a4bf", "patch": "@@ -101,6 +101,7 @@ where\n         unsafe { Mask(crate::intrinsics::simd_cast(self.0)) }\n     }\n \n+    #[cfg(feature = \"generic_const_exprs\")]\n     #[inline]\n     pub fn to_bitmask(self) -> [u8; LaneCount::<LANES>::BITMASK_LEN] {\n         unsafe {\n@@ -127,6 +128,7 @@ where\n         }\n     }\n \n+    #[cfg(feature = \"generic_const_exprs\")]\n     #[inline]\n     pub fn from_bitmask(mut bitmask: [u8; LaneCount::<LANES>::BITMASK_LEN]) -> Self {\n         unsafe {"}, {"sha": "c2d400d79d4915534d5522a149757011a1e8bcec", "filename": "crates/core_simd/tests/masks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmasks.rs?ref=8cf7a62e5d2552961df51e5200aaa5b7c890a4bf", "patch": "@@ -68,6 +68,7 @@ macro_rules! test_mask_api {\n                 assert_eq!(core_simd::Mask::<$type, 8>::from_int(int), mask);\n             }\n \n+            #[cfg(feature = \"generic_const_exprs\")]\n             #[test]\n             fn roundtrip_bitmask_conversion() {\n                 let values = ["}, {"sha": "debb4335e2c9672d3b9c609f4290c1adcbc8addb", "filename": "crates/core_simd/tests/to_bytes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf/crates%2Fcore_simd%2Ftests%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf7a62e5d2552961df51e5200aaa5b7c890a4bf/crates%2Fcore_simd%2Ftests%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fto_bytes.rs?ref=8cf7a62e5d2552961df51e5200aaa5b7c890a4bf", "patch": "@@ -1,6 +1,6 @@\n-#![feature(portable_simd, const_generics, const_evaluatable_checked)]\n+#![feature(portable_simd, generic_const_exprs, adt_const_params)]\n #![allow(incomplete_features)]\n-#![cfg(feature = \"const_evaluatable_checked\")]\n+#![cfg(feature = \"generic_const_exprs\")]\n \n use core_simd::Simd;\n "}]}