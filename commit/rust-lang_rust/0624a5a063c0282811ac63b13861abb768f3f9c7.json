{"sha": "0624a5a063c0282811ac63b13861abb768f3f9c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MjRhNWEwNjNjMDI4MjgxMWFjNjNiMTM4NjFhYmI3NjhmM2Y5Yzc=", "commit": {"author": {"name": "Rakshith Ravi", "email": "rakshith.ravi@gmx.com", "date": "2020-06-20T07:30:16Z"}, "committer": {"name": "Rakshith Ravi", "email": "rakshith.ravi@gmx.com", "date": "2020-06-20T07:30:16Z"}, "message": "Squashed all commits", "tree": {"sha": "e687e20f6ab94114d13c9cb41ddaad273233f2e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e687e20f6ab94114d13c9cb41ddaad273233f2e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0624a5a063c0282811ac63b13861abb768f3f9c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0624a5a063c0282811ac63b13861abb768f3f9c7", "html_url": "https://github.com/rust-lang/rust/commit/0624a5a063c0282811ac63b13861abb768f3f9c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0624a5a063c0282811ac63b13861abb768f3f9c7/comments", "author": {"login": "rakshith-ravi", "id": 12864597, "node_id": "MDQ6VXNlcjEyODY0NTk3", "avatar_url": "https://avatars.githubusercontent.com/u/12864597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakshith-ravi", "html_url": "https://github.com/rakshith-ravi", "followers_url": "https://api.github.com/users/rakshith-ravi/followers", "following_url": "https://api.github.com/users/rakshith-ravi/following{/other_user}", "gists_url": "https://api.github.com/users/rakshith-ravi/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakshith-ravi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakshith-ravi/subscriptions", "organizations_url": "https://api.github.com/users/rakshith-ravi/orgs", "repos_url": "https://api.github.com/users/rakshith-ravi/repos", "events_url": "https://api.github.com/users/rakshith-ravi/events{/privacy}", "received_events_url": "https://api.github.com/users/rakshith-ravi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rakshith-ravi", "id": 12864597, "node_id": "MDQ6VXNlcjEyODY0NTk3", "avatar_url": "https://avatars.githubusercontent.com/u/12864597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakshith-ravi", "html_url": "https://github.com/rakshith-ravi", "followers_url": "https://api.github.com/users/rakshith-ravi/followers", "following_url": "https://api.github.com/users/rakshith-ravi/following{/other_user}", "gists_url": "https://api.github.com/users/rakshith-ravi/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakshith-ravi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakshith-ravi/subscriptions", "organizations_url": "https://api.github.com/users/rakshith-ravi/orgs", "repos_url": "https://api.github.com/users/rakshith-ravi/repos", "events_url": "https://api.github.com/users/rakshith-ravi/events{/privacy}", "received_events_url": "https://api.github.com/users/rakshith-ravi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d", "url": "https://api.github.com/repos/rust-lang/rust/commits/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d", "html_url": "https://github.com/rust-lang/rust/commit/680a4b2fbdca0dc6c5ceec826a8dbeabe28f305d"}], "stats": {"total": 76, "additions": 70, "deletions": 6}, "files": [{"sha": "1b06542871fc32431910544e67267342bd7aa618", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 67, "deletions": 6, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0624a5a063c0282811ac63b13861abb768f3f9c7/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0624a5a063c0282811ac63b13861abb768f3f9c7/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=0624a5a063c0282811ac63b13861abb768f3f9c7", "patch": "@@ -8,8 +8,7 @@\n use crate::collect::PlaceholderHirTyCollector;\n use crate::middle::resolve_lifetime as rl;\n use crate::require_c_abi_if_c_variadic;\n-use rustc_ast::ast::ParamKindOrd;\n-use rustc_ast::util::lev_distance::find_best_match_for_name;\n+use rustc_ast::{ast::ParamKindOrd, util::lev_distance::find_best_match_for_name};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::ErrorReported;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId, FatalError};\n@@ -27,7 +26,7 @@ use rustc_middle::ty::{GenericParamDef, GenericParamDefKind};\n use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, LATE_BOUND_LIFETIME_ARGUMENTS};\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n-use rustc_span::symbol::{sym, Ident, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use rustc_trait_selection::traits;\n@@ -475,7 +474,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n     /// Report an error that a generic argument did not match the generic parameter that was\n     /// expected.\n-    fn generic_arg_mismatch_err(sess: &Session, arg: &GenericArg<'_>, kind: &'static str) {\n+    fn generic_arg_mismatch_err(\n+        sess: &Session,\n+        arg: &GenericArg<'_>,\n+        kind: &'static str,\n+        help: Option<&str>,\n+    ) {\n         let mut err = struct_span_err!(\n             sess,\n             arg.span(),\n@@ -503,6 +507,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let (first, last) =\n             if kind_ord < arg_ord { (kind, arg.descr()) } else { (arg.descr(), kind) };\n         err.note(&format!(\"{} arguments must be provided before {} arguments\", first, last));\n+\n+        if let Some(help) = help {\n+            err.help(help);\n+        }\n         err.emit();\n     }\n \n@@ -648,7 +656,60 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 if arg_count.correct.is_ok()\n                                     && arg_count.explicit_late_bound == ExplicitLateBound::No\n                                 {\n-                                    Self::generic_arg_mismatch_err(tcx.sess, arg, kind.descr());\n+                                    // We're going to iterate over the parameters to sort them out, and\n+                                    // show that order to the user as a possible order for the parameters\n+                                    let mut param_types_present = defs\n+                                        .params\n+                                        .clone()\n+                                        .into_iter()\n+                                        .map(|param| {\n+                                            (\n+                                                match param.kind {\n+                                                    GenericParamDefKind::Lifetime => {\n+                                                        ParamKindOrd::Lifetime\n+                                                    }\n+                                                    GenericParamDefKind::Type { .. } => {\n+                                                        ParamKindOrd::Type\n+                                                    }\n+                                                    GenericParamDefKind::Const => {\n+                                                        ParamKindOrd::Const\n+                                                    }\n+                                                },\n+                                                param,\n+                                            )\n+                                        })\n+                                        .collect::<Vec<(ParamKindOrd, GenericParamDef)>>();\n+                                    param_types_present.sort_by_key(|(ord, _)| *ord);\n+                                    let (mut param_types_present, ordered_params): (\n+                                        Vec<ParamKindOrd>,\n+                                        Vec<GenericParamDef>,\n+                                    ) = param_types_present.into_iter().unzip();\n+                                    param_types_present.dedup();\n+\n+                                    Self::generic_arg_mismatch_err(\n+                                        tcx.sess,\n+                                        arg,\n+                                        kind.descr(),\n+                                        Some(&format!(\n+                                            \"reorder the arguments: {}: `<{}>`\",\n+                                            param_types_present\n+                                                .into_iter()\n+                                                .map(|ord| format!(\"{}s\", ord.to_string()))\n+                                                .collect::<Vec<String>>()\n+                                                .join(\", then \"),\n+                                            ordered_params\n+                                                .into_iter()\n+                                                .filter_map(|param| {\n+                                                    if param.name == kw::SelfUpper {\n+                                                        None\n+                                                    } else {\n+                                                        Some(param.name.to_string())\n+                                                    }\n+                                                })\n+                                                .collect::<Vec<String>>()\n+                                                .join(\", \")\n+                                        )),\n+                                    );\n                                 }\n \n                                 // We've reported the error, but we want to make sure that this\n@@ -680,7 +741,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             assert_eq!(kind, \"lifetime\");\n                             let provided =\n                                 force_infer_lt.expect(\"lifetimes ought to have been inferred\");\n-                            Self::generic_arg_mismatch_err(tcx.sess, provided, kind);\n+                            Self::generic_arg_mismatch_err(tcx.sess, provided, kind, None);\n                         }\n \n                         break;"}, {"sha": "4a6241de1b453658e2e5768ef6043b062f7f496e", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0624a5a063c0282811ac63b13861abb768f3f9c7/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0624a5a063c0282811ac63b13861abb768f3f9c7/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr?ref=0624a5a063c0282811ac63b13861abb768f3f9c7", "patch": "@@ -14,6 +14,7 @@ LL | fn foo<const N: usize>() -> Array<N, ()> {\n    |                                   ^\n    |\n    = note: type arguments must be provided before constant arguments\n+   = help: reorder the arguments: types, then consts: `<T, N>`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "3c2226574ee9e7ca42f3c6dbf06caf77d6267e1b", "filename": "src/test/ui/suggestions/suggest-move-types.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0624a5a063c0282811ac63b13861abb768f3f9c7/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0624a5a063c0282811ac63b13861abb768f3f9c7/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr?ref=0624a5a063c0282811ac63b13861abb768f3f9c7", "patch": "@@ -125,6 +125,7 @@ LL | struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), C=()\n    |                                                        ^^\n    |\n    = note: lifetime arguments must be provided before type arguments\n+   = help: reorder the arguments: lifetimes, then types: `<'a, 'b, 'c, T, U, V>`\n \n error[E0747]: lifetime provided when a type was expected\n   --> $DIR/suggest-move-types.rs:82:56\n@@ -133,6 +134,7 @@ LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), U, '\n    |                                                        ^^\n    |\n    = note: lifetime arguments must be provided before type arguments\n+   = help: reorder the arguments: lifetimes, then types: `<'a, 'b, 'c, T, U, V>`\n \n error: aborting due to 12 previous errors\n "}]}