{"sha": "fb9706338d56599ea3073b5f8e93c2e769431a48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiOTcwNjMzOGQ1NjU5OWVhMzA3M2I1ZjhlOTNjMmU3Njk0MzFhNDg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-09-30T15:32:12Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-09T11:22:42Z"}, "message": "std::rand: improve the task_rng code.\n\nIt now:\n- can be explicitly seeded from user code (`seed_task_rng`) or from the\n  environment (`RUST_SEED`, a positive integer)\n- automatically reseeds itself from the OS *unless* it was seeded by\n  either method above\n- has more documentation", "tree": {"sha": "67579a26d7628ffa70b486a6bb372cd8a84e3841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67579a26d7628ffa70b486a6bb372cd8a84e3841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb9706338d56599ea3073b5f8e93c2e769431a48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9706338d56599ea3073b5f8e93c2e769431a48", "html_url": "https://github.com/rust-lang/rust/commit/fb9706338d56599ea3073b5f8e93c2e769431a48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb9706338d56599ea3073b5f8e93c2e769431a48/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92725ae765a75b139d5d5fc27305f4436dbb456e", "url": "https://api.github.com/repos/rust-lang/rust/commits/92725ae765a75b139d5d5fc27305f4436dbb456e", "html_url": "https://github.com/rust-lang/rust/commit/92725ae765a75b139d5d5fc27305f4436dbb456e"}], "stats": {"total": 154, "additions": 134, "deletions": 20}, "files": [{"sha": "7f37077d5bb7079d3e67f26ae7e261cd6b845222", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 116, "deletions": 19, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/fb9706338d56599ea3073b5f8e93c2e769431a48/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9706338d56599ea3073b5f8e93c2e769431a48/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=fb9706338d56599ea3073b5f8e93c2e769431a48", "patch": "@@ -54,6 +54,7 @@ use u32;\n use u64;\n use uint;\n use vec;\n+use os::getenv;\n \n pub use self::isaac::{IsaacRng, Isaac64Rng};\n pub use self::os::OSRng;\n@@ -284,15 +285,15 @@ pub trait Rng {\n     ///\n     /// # Example\n     ///\n-    /// ~~~{.rust}\n+    /// ```rust\n     /// use std::rand::{task_rng, Rng};\n     ///\n     /// fn main() {\n     ///    let mut v = [0u8, .. 13579];\n     ///    task_rng().fill_bytes(v);\n     ///    printfln!(v);\n     /// }\n-    /// ~~~\n+    /// ```\n     fn fill_bytes(&mut self, mut dest: &mut [u8]) {\n         // this relies on the lengths being transferred correctly when\n         // transmuting between vectors like this.\n@@ -700,12 +701,16 @@ pub struct StdRng { priv rng: IsaacRng }\n pub struct StdRng { priv rng: Isaac64Rng }\n \n impl StdRng {\n+    /// Create a randomly seeded instance of `StdRng`. This reads\n+    /// randomness from the OS to seed the PRNG.\n     #[cfg(not(target_word_size=\"64\"))]\n-    fn new() -> StdRng {\n+    pub fn new() -> StdRng {\n         StdRng { rng: IsaacRng::new() }\n     }\n+    /// Create a randomly seeded instance of `StdRng`. This reads\n+    /// randomness from the OS to seed the PRNG.\n     #[cfg(target_word_size=\"64\")]\n-    fn new() -> StdRng {\n+    pub fn new() -> StdRng {\n         StdRng { rng: Isaac64Rng::new() }\n     }\n }\n@@ -830,27 +835,96 @@ pub unsafe fn seed<T: Clone>(n: uint) -> ~[T] {\n     s\n }\n \n+/// Controls how the task-local RNG is reseeded.\n+enum TaskRngReseeder {\n+    /// Reseed using the StdRng::new() function, i.e. reading new\n+    /// randomness.\n+    WithNew,\n+    /// Don't reseed at all, e.g. when it has been explicitly seeded\n+    /// by the user.\n+    DontReseed\n+}\n+\n+impl Default for TaskRngReseeder {\n+    fn default() -> TaskRngReseeder { WithNew }\n+}\n+\n+impl reseeding::Reseeder<StdRng> for TaskRngReseeder {\n+    fn reseed(&mut self, rng: &mut StdRng) {\n+        match *self {\n+            WithNew => *rng = StdRng::new(),\n+            DontReseed => {}\n+        }\n+    }\n+}\n+static TASK_RNG_RESEED_THRESHOLD: uint = 32_768;\n+/// The task-local RNG.\n+pub type TaskRng = reseeding::ReseedingRng<StdRng, TaskRngReseeder>;\n+\n // used to make space in TLS for a random number generator\n-local_data_key!(tls_rng_state: @mut StdRng)\n+local_data_key!(TASK_RNG_KEY: @mut TaskRng)\n \n-/**\n- * Gives back a lazily initialized task-local random number generator,\n- * seeded by the system. Intended to be used in method chaining style, ie\n- * `task_rng().gen::<int>()`.\n- */\n-#[inline]\n-pub fn task_rng() -> @mut StdRng {\n-    let r = local_data::get(tls_rng_state, |k| k.map(|&k| *k));\n+/// Retrieve the lazily-initialized task-local random number\n+/// generator, seeded by the system. Intended to be used in method\n+/// chaining style, e.g. `task_rng().gen::<int>()`.\n+///\n+/// The RNG provided will reseed itself from the operating system\n+/// after generating a certain amount of randomness, unless it was\n+/// explicitly seeded either by `seed_task_rng` or by setting the\n+/// `RUST_SEED` environmental variable to some integer.\n+///\n+/// The internal RNG used is platform and architecture dependent, so\n+/// may yield differing sequences on different computers, even when\n+/// explicitly seeded with `seed_task_rng`. If absolute consistency is\n+/// required, explicitly select an RNG, e.g. `IsaacRng` or\n+/// `Isaac64Rng`.\n+pub fn task_rng() -> @mut TaskRng {\n+    let r = local_data::get(TASK_RNG_KEY, |k| k.map(|&k| *k));\n     match r {\n         None => {\n-            let rng = @mut StdRng::new();\n-            local_data::set(tls_rng_state, rng);\n+            // check the environment\n+            let (sub_rng, reseeder) = match getenv(\"RUST_SEED\") {\n+                None => (StdRng::new(), WithNew),\n+\n+                Some(s) => match from_str::<uint>(s) {\n+                    None => fail2!(\"`RUST_SEED` is `{}`, should be a positive integer.\", s),\n+                    // explicitly seeded, so don't overwrite the seed later.\n+                    Some(seed) => (SeedableRng::from_seed(&[seed]), DontReseed),\n+                }\n+            };\n+\n+            let rng = @mut reseeding::ReseedingRng::new(sub_rng,\n+                                                        TASK_RNG_RESEED_THRESHOLD,\n+                                                        reseeder);\n+            local_data::set(TASK_RNG_KEY, rng);\n             rng\n         }\n         Some(rng) => rng\n     }\n }\n \n+/// Explicitly seed (or reseed) the task-local random number\n+/// generator. This stops the RNG from automatically reseeding itself.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::rand;\n+///\n+/// fn main() {\n+///     rand::seed_task_rng(&[10u]);\n+///     printfln!(\"Same every time: %u\", rand::random::<uint>());\n+///\n+///     rand::seed_task_rng(&[1u, 2, 3, 4, 5, 6, 7, 8]);\n+///     printfln!(\"Same every time: %f\", rand::random::<float>());\n+/// }\n+/// ```\n+pub fn seed_task_rng(seed: &[uint]) {\n+    let t_r = task_rng();\n+    (*t_r).reseed(seed);\n+    t_r.reseeder = DontReseed;\n+}\n+\n // Allow direct chaining with `task_rng`\n impl<R: Rng> Rng for @mut R {\n     #[inline]\n@@ -863,10 +937,23 @@ impl<R: Rng> Rng for @mut R {\n     }\n }\n \n-/**\n- * Returns a random value of a Rand type, using the task's random number\n- * generator.\n- */\n+/// Generate a random value using the task-local random number\n+/// generator.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::rand::random;\n+///\n+/// fn main() {\n+///     if random() {\n+///         let x = random();\n+///         printfln!(2u * x);\n+///     } else {\n+///         printfln!(random::<float>());\n+///     }\n+/// }\n+/// ```\n #[inline]\n pub fn random<T: Rand>() -> T {\n     task_rng().gen()\n@@ -1053,6 +1140,16 @@ mod test {\n             **e >= MIN_VAL && **e <= MAX_VAL\n         }));\n     }\n+\n+    #[test]\n+    fn test_seed_task_rng() {\n+        seed_task_rng([1]);\n+        let first = random::<uint>();\n+\n+        seed_task_rng([1]);\n+        let second = random::<uint>();\n+        assert_eq!(first, second);\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "b6c880841a147ba3b9cc2bd45de460a25e092e5e", "filename": "src/libstd/rand/reseeding.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fb9706338d56599ea3073b5f8e93c2e769431a48/src%2Flibstd%2Frand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9706338d56599ea3073b5f8e93c2e769431a48/src%2Flibstd%2Frand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freseeding.rs?ref=fb9706338d56599ea3073b5f8e93c2e769431a48", "patch": "@@ -11,7 +11,7 @@\n //! A wrapper around another RNG that reseeds it after it\n //! generates a certain number of random bytes.\n \n-use rand::Rng;\n+use rand::{Rng, SeedableRng};\n use default::Default;\n \n /// How many bytes of entropy the underling RNG is allowed to generate\n@@ -76,6 +76,23 @@ impl<R: Rng, Rsdr: Reseeder<R>> Rng for ReseedingRng<R, Rsdr> {\n     }\n }\n \n+impl<S, R: SeedableRng<S>, Rsdr: Reseeder<R> + Default> SeedableRng<S> for ReseedingRng<R, Rsdr> {\n+    fn reseed(&mut self, seed: S) {\n+        self.rng.reseed(seed);\n+        self.bytes_generated = 0;\n+    }\n+    /// Create a new `ReseedingRng` from the given seed. This uses\n+    /// default values for both `generation_threshold` and `reseeder`.\n+    fn from_seed(seed: S) -> ReseedingRng<R, Rsdr> {\n+        ReseedingRng {\n+            rng: SeedableRng::from_seed(seed),\n+            generation_threshold: DEFAULT_GENERATION_THRESHOLD,\n+            bytes_generated: 0,\n+            reseeder: Default::default()\n+        }\n+    }\n+}\n+\n /// Something that can be used to reseed an RNG via `ReseedingRng`.\n pub trait Reseeder<R> {\n     /// Reseed the given RNG."}]}