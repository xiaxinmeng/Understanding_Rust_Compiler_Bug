{"sha": "b45fb35ec4cff21d027fa25dd31b5045867ccf03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NWZiMzVlYzRjZmYyMWQwMjdmYTI1ZGQzMWI1MDQ1ODY3Y2NmMDM=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2018-06-07T20:03:15Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2018-06-07T20:13:24Z"}, "message": "Cleanup of driver code", "tree": {"sha": "c9c5908002fd4c9e38f3584c996cd052a9361db6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9c5908002fd4c9e38f3584c996cd052a9361db6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b45fb35ec4cff21d027fa25dd31b5045867ccf03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b45fb35ec4cff21d027fa25dd31b5045867ccf03", "html_url": "https://github.com/rust-lang/rust/commit/b45fb35ec4cff21d027fa25dd31b5045867ccf03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b45fb35ec4cff21d027fa25dd31b5045867ccf03/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3693a4ea53d15d268d74bc9773daa8702ea2d5ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/3693a4ea53d15d268d74bc9773daa8702ea2d5ba", "html_url": "https://github.com/rust-lang/rust/commit/3693a4ea53d15d268d74bc9773daa8702ea2d5ba"}], "stats": {"total": 158, "additions": 46, "deletions": 112}, "files": [{"sha": "830c8985660bf9b5f44b850fe6a48f7106a4f8ac", "filename": "src/driver.rs", "status": "modified", "additions": 46, "deletions": 112, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/b45fb35ec4cff21d027fa25dd31b5045867ccf03/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45fb35ec4cff21d027fa25dd31b5045867ccf03/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=b45fb35ec4cff21d027fa25dd31b5045867ccf03", "patch": "@@ -12,117 +12,8 @@ extern crate rustc_errors;\n extern crate rustc_plugin;\n extern crate syntax;\n \n-use rustc::session::config::{ErrorOutputType, Input};\n-use rustc::session::{config, Session};\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n-use rustc_driver::{driver, Compilation, CompilerCalls, RustcDefaultCalls};\n-use std::path::PathBuf;\n+use rustc_driver::{driver::CompileController, Compilation};\n use std::process::Command;\n-use syntax::ast;\n-\n-struct ClippyCompilerCalls {\n-    default: Box<RustcDefaultCalls>,\n-    run_lints: bool,\n-}\n-\n-impl ClippyCompilerCalls {\n-    fn new(run_lints: bool) -> Self {\n-        Self {\n-            default: Box::new(RustcDefaultCalls),\n-            run_lints,\n-        }\n-    }\n-}\n-\n-impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n-    fn early_callback(\n-        &mut self,\n-        matches: &getopts::Matches,\n-        sopts: &config::Options,\n-        cfg: &ast::CrateConfig,\n-        descriptions: &rustc_errors::registry::Registry,\n-        output: ErrorOutputType,\n-    ) -> Compilation {\n-        self.default.early_callback(matches, sopts, cfg, descriptions, output)\n-    }\n-    fn no_input(\n-        &mut self,\n-        matches: &getopts::Matches,\n-        sopts: &config::Options,\n-        cfg: &ast::CrateConfig,\n-        odir: &Option<PathBuf>,\n-        ofile: &Option<PathBuf>,\n-        descriptions: &rustc_errors::registry::Registry,\n-    ) -> Option<(Input, Option<PathBuf>)> {\n-        self.default.no_input(matches, sopts, cfg, odir, ofile, descriptions)\n-    }\n-    fn late_callback(\n-        &mut self,\n-        trans_crate: &CodegenBackend,\n-        matches: &getopts::Matches,\n-        sess: &Session,\n-        crate_stores: &rustc::middle::cstore::CrateStore,\n-        input: &Input,\n-        odir: &Option<PathBuf>,\n-        ofile: &Option<PathBuf>,\n-    ) -> Compilation {\n-        self.default\n-            .late_callback(trans_crate, matches, sess, crate_stores, input, odir, ofile)\n-    }\n-    fn build_controller(self: Box<Self>, sess: &Session, matches: &getopts::Matches) -> driver::CompileController<'a> {\n-        let mut control = self.default.clone().build_controller(sess, matches);\n-\n-        if self.run_lints {\n-            let old = std::mem::replace(&mut control.after_parse.callback, box |_| {});\n-            control.after_parse.callback = Box::new(move |state| {\n-                {\n-                    let mut registry = rustc_plugin::registry::Registry::new(\n-                        state.session,\n-                        state\n-                            .krate\n-                            .as_ref()\n-                            .expect(\n-                                \"at this compilation stage \\\n-                                 the crate must be parsed\",\n-                            )\n-                            .span,\n-                    );\n-                    registry.args_hidden = Some(Vec::new());\n-                    clippy_lints::register_plugins(&mut registry);\n-\n-                    let rustc_plugin::registry::Registry {\n-                        early_lint_passes,\n-                        late_lint_passes,\n-                        lint_groups,\n-                        llvm_passes,\n-                        attributes,\n-                        ..\n-                    } = registry;\n-                    let sess = &state.session;\n-                    let mut ls = sess.lint_store.borrow_mut();\n-                    for pass in early_lint_passes {\n-                        ls.register_early_pass(Some(sess), true, pass);\n-                    }\n-                    for pass in late_lint_passes {\n-                        ls.register_late_pass(Some(sess), true, pass);\n-                    }\n-\n-                    for (name, to) in lint_groups {\n-                        ls.register_group(Some(sess), true, name, to);\n-                    }\n-\n-                    sess.plugin_llvm_passes.borrow_mut().extend(llvm_passes);\n-                    sess.plugin_attributes.borrow_mut().extend(attributes);\n-                }\n-                old(state);\n-            });\n-\n-            control.compilation_done.stop = Compilation::Stop;\n-        }\n-\n-        control\n-    }\n-}\n \n #[allow(print_stdout)]\n fn show_version() {\n@@ -198,6 +89,49 @@ pub fn main() {\n         }\n     }\n \n-    let ccc = ClippyCompilerCalls::new(clippy_enabled);\n-    rustc_driver::run(move || rustc_driver::run_compiler(&args, Box::new(ccc), None, None));\n+    let mut controller = CompileController::basic();\n+    if clippy_enabled {\n+        controller.after_parse.callback = Box::new(move |state| {\n+            let mut registry = rustc_plugin::registry::Registry::new(\n+                state.session,\n+                state\n+                    .krate\n+                    .as_ref()\n+                    .expect(\n+                        \"at this compilation stage \\\n+                         the crate must be parsed\",\n+                    )\n+                    .span,\n+            );\n+            registry.args_hidden = Some(Vec::new());\n+            clippy_lints::register_plugins(&mut registry);\n+\n+            let rustc_plugin::registry::Registry {\n+                early_lint_passes,\n+                late_lint_passes,\n+                lint_groups,\n+                llvm_passes,\n+                attributes,\n+                ..\n+            } = registry;\n+            let sess = &state.session;\n+            let mut ls = sess.lint_store.borrow_mut();\n+            for pass in early_lint_passes {\n+                ls.register_early_pass(Some(sess), true, pass);\n+            }\n+            for pass in late_lint_passes {\n+                ls.register_late_pass(Some(sess), true, pass);\n+            }\n+\n+            for (name, to) in lint_groups {\n+                ls.register_group(Some(sess), true, name, to);\n+            }\n+\n+            sess.plugin_llvm_passes.borrow_mut().extend(llvm_passes);\n+            sess.plugin_attributes.borrow_mut().extend(attributes);\n+        });\n+    }\n+    controller.compilation_done.stop = Compilation::Stop;\n+\n+    rustc_driver::run_compiler(&args, Box::new(controller), None, None);\n }"}]}