{"sha": "eab060f4da1eeb302953b76d35278679bfeb76b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYjA2MGY0ZGExZWViMzAyOTUzYjc2ZDM1Mjc4Njc5YmZlYjc2YjA=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-09-26T16:09:51Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-09-29T16:17:46Z"}, "message": "clean ClosureSubsts in rustc::ty", "tree": {"sha": "0f506f1a321c983b64da97f91dcc658272466a2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f506f1a321c983b64da97f91dcc658272466a2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eab060f4da1eeb302953b76d35278679bfeb76b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eab060f4da1eeb302953b76d35278679bfeb76b0", "html_url": "https://github.com/rust-lang/rust/commit/eab060f4da1eeb302953b76d35278679bfeb76b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eab060f4da1eeb302953b76d35278679bfeb76b0/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ab82c147af31c1346c6e78c95722ce8bf27501b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab82c147af31c1346c6e78c95722ce8bf27501b", "html_url": "https://github.com/rust-lang/rust/commit/8ab82c147af31c1346c6e78c95722ce8bf27501b"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "6baf59a257734da97658861f0a4d79bdf82feba2", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eab060f4da1eeb302953b76d35278679bfeb76b0/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab060f4da1eeb302953b76d35278679bfeb76b0/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=eab060f4da1eeb302953b76d35278679bfeb76b0", "patch": "@@ -29,7 +29,7 @@ use crate::traits;\n use crate::traits::{Clause, Clauses, GoalKind, Goal, Goals};\n use crate::ty::{self, DefIdTree, Ty, TypeAndMut};\n use crate::ty::{TyS, TyKind, List};\n-use crate::ty::{AdtKind, AdtDef, ClosureSubsts, GeneratorSubsts, Region, Const};\n+use crate::ty::{AdtKind, AdtDef, GeneratorSubsts, Region, Const};\n use crate::ty::{PolyFnSig, InferTy, ParamTy, ProjectionTy, ExistentialPredicate, Predicate};\n use crate::ty::RegionKind;\n use crate::ty::{TyVar, TyVid, IntVar, IntVid, FloatVar, FloatVid, ConstVid};\n@@ -2482,7 +2482,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n \n     #[inline]\n-    pub fn mk_closure(self, closure_id: DefId, closure_substs: ClosureSubsts<'tcx>)\n+    pub fn mk_closure(self, closure_id: DefId, closure_substs: SubstsRef<'tcx>)\n                       -> Ty<'tcx> {\n         self.mk_ty(Closure(closure_id, closure_substs))\n     }"}, {"sha": "b513ef5a96670213afccf3b7a18f388526b0da18", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eab060f4da1eeb302953b76d35278679bfeb76b0/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab060f4da1eeb302953b76d35278679bfeb76b0/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=eab060f4da1eeb302953b76d35278679bfeb76b0", "patch": "@@ -106,7 +106,7 @@ impl FlagComputation {\n             &ty::Closure(_, ref substs) => {\n                 self.add_flags(TypeFlags::HAS_TY_CLOSURE);\n                 self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n-                self.add_substs(&substs.substs);\n+                self.add_substs(substs);\n             }\n \n             &ty::Bound(debruijn, _) => {"}, {"sha": "c0cd1fd0614c58ec5e017d2af62c54a11ffe936a", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eab060f4da1eeb302953b76d35278679bfeb76b0/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab060f4da1eeb302953b76d35278679bfeb76b0/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=eab060f4da1eeb302953b76d35278679bfeb76b0", "patch": "@@ -321,7 +321,7 @@ impl<'tcx> Instance<'tcx> {\n         let actual_kind = substs.closure_kind(def_id, tcx);\n \n         match needs_fn_once_adapter_shim(actual_kind, requested_kind) {\n-            Ok(true) => Instance::fn_once_adapter_instance(tcx, def_id, substs),\n+            Ok(true) => Instance::fn_once_adapter_instance(tcx, def_id, substs.substs),\n             _ => Instance::new(def_id, substs.substs)\n         }\n     }\n@@ -335,7 +335,7 @@ impl<'tcx> Instance<'tcx> {\n     pub fn fn_once_adapter_instance(\n         tcx: TyCtxt<'tcx>,\n         closure_did: DefId,\n-        substs: ty::ClosureSubsts<'tcx>,\n+        substs: ty::SubstsRef<'tcx>,\n     ) -> Instance<'tcx> {\n         debug!(\"fn_once_adapter_shim({:?}, {:?})\",\n                closure_did,"}, {"sha": "6f97006c71e3b862083b674097bc90e767c937c9", "filename": "src/librustc/ty/print/obsolete.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eab060f4da1eeb302953b76d35278679bfeb76b0/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab060f4da1eeb302953b76d35278679bfeb76b0/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs?ref=eab060f4da1eeb302953b76d35278679bfeb76b0", "patch": "@@ -8,7 +8,7 @@\n use rustc::hir::def_id::DefId;\n use rustc::mir::interpret::ConstValue;\n use rustc::ty::subst::SubstsRef;\n-use rustc::ty::{self, ClosureSubsts, Const, GeneratorSubsts, Instance, Ty, TyCtxt};\n+use rustc::ty::{self, Const, GeneratorSubsts, Instance, Ty, TyCtxt};\n use rustc::{bug, hir};\n use std::fmt::Write;\n use std::iter;\n@@ -154,8 +154,13 @@ impl DefPathBasedNames<'tcx> {\n                     self.push_type_name(sig.output(), output, debug);\n                 }\n             }\n-            ty::Generator(def_id, GeneratorSubsts { ref substs }, _)\n-            | ty::Closure(def_id, ClosureSubsts { ref substs }) => {\n+            ty::Generator(def_id, GeneratorSubsts { ref substs }, _) => {\n+                self.push_def_path(def_id, output);\n+                let generics = self.tcx.generics_of(self.tcx.closure_base_def_id(def_id));\n+                let substs = substs.truncate_to(self.tcx, generics);\n+                self.push_generic_params(substs, iter::empty(), output, debug);\n+            }\n+            ty::Closure(def_id, substs) => {\n                 self.push_def_path(def_id, output);\n                 let generics = self.tcx.generics_of(self.tcx.closure_base_def_id(def_id));\n                 let substs = substs.truncate_to(self.tcx, generics);"}, {"sha": "5cd89d231f939dc7441dedc56a8c4cd556919f4b", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eab060f4da1eeb302953b76d35278679bfeb76b0/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab060f4da1eeb302953b76d35278679bfeb76b0/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=eab060f4da1eeb302953b76d35278679bfeb76b0", "patch": "@@ -442,7 +442,7 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n             // the (anonymous) type of the same closure expression. So\n             // all of their regions should be equated.\n             let substs = relation.relate(&a_substs, &b_substs)?;\n-            Ok(tcx.mk_closure(a_id, substs))\n+            Ok(tcx.mk_closure(a_id, &substs))\n         }\n \n         (&ty::RawPtr(ref a_mt), &ty::RawPtr(ref b_mt)) =>"}, {"sha": "6e00c6b29ecf1a434d49c29e95cdb68c748b2dd3", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eab060f4da1eeb302953b76d35278679bfeb76b0/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab060f4da1eeb302953b76d35278679bfeb76b0/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=eab060f4da1eeb302953b76d35278679bfeb76b0", "patch": "@@ -384,22 +384,22 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n     /// Divides the closure substs into their respective\n     /// components. Single source of truth with respect to the\n     /// ordering.\n-    fn split(self, def_id: DefId, tcx: TyCtxt<'_>) -> SplitClosureSubsts<'tcx> {\n+    fn split(&self, def_id: DefId, tcx: TyCtxt<'_>) -> SplitClosureSubsts<'_> {\n         let generics = tcx.generics_of(def_id);\n         let parent_len = generics.parent_count;\n         SplitClosureSubsts {\n-            closure_kind_ty: self.substs.type_at(parent_len),\n-            closure_sig_ty: self.substs.type_at(parent_len + 1),\n-            upvar_kinds: &self.substs[parent_len + 2..],\n+            closure_kind_ty: self.type_at(parent_len),\n+            closure_sig_ty: self.type_at(parent_len + 1),\n+            upvar_kinds: &self[parent_len + 2..],\n         }\n     }\n \n     #[inline]\n     pub fn upvar_tys(\n-        &self,\n+        &'a self,\n         def_id: DefId,\n         tcx: TyCtxt<'_>,\n-    ) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n+    ) -> impl Iterator<Item = Ty<'a>> + 'a {\n         let SplitClosureSubsts { upvar_kinds, .. } = self.split(def_id, tcx);\n         upvar_kinds.iter().map(|t| {\n             if let UnpackedKind::Type(ty) = t.unpack() {\n@@ -413,15 +413,15 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n     /// Returns the closure kind for this closure; may return a type\n     /// variable during inference. To get the closure kind during\n     /// inference, use `infcx.closure_kind(def_id, substs)`.\n-    pub fn closure_kind_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n+    pub fn closure_kind_ty(&'a self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'a> {\n         self.split(def_id, tcx).closure_kind_ty\n     }\n \n     /// Returns the type representing the closure signature for this\n     /// closure; may contain type variables during inference. To get\n     /// the closure signature during inference, use\n     /// `infcx.fn_sig(def_id)`.\n-    pub fn closure_sig_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n+    pub fn closure_sig_ty(&'a self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'a> {\n         self.split(def_id, tcx).closure_sig_ty\n     }\n \n@@ -430,7 +430,7 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n     /// there are no type variables.\n     ///\n     /// If you have an inference context, use `infcx.closure_kind()`.\n-    pub fn closure_kind(self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::ClosureKind {\n+    pub fn closure_kind(&self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::ClosureKind {\n         self.split(def_id, tcx).closure_kind_ty.to_opt_closure_kind().unwrap()\n     }\n \n@@ -439,7 +439,7 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n     /// there are no type variables.\n     ///\n     /// If you have an inference context, use `infcx.closure_sig()`.\n-    pub fn closure_sig(self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {\n+    pub fn closure_sig(&'a self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'a> {\n         let ty = self.closure_sig_ty(def_id, tcx);\n         match ty.kind {\n             ty::FnPtr(sig) => sig,"}, {"sha": "05f0d164cc1c338545b193b645668a81b7d4a18c", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eab060f4da1eeb302953b76d35278679bfeb76b0/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab060f4da1eeb302953b76d35278679bfeb76b0/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=eab060f4da1eeb302953b76d35278679bfeb76b0", "patch": "@@ -642,7 +642,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// wrapped in a binder.\n     pub fn closure_env_ty(self,\n                           closure_def_id: DefId,\n-                          closure_substs: ty::ClosureSubsts<'tcx>)\n+                          closure_substs: SubstsRef<'tcx>)\n                           -> Option<ty::Binder<Ty<'tcx>>>\n     {\n         let closure_ty = self.mk_closure(closure_def_id, closure_substs);"}, {"sha": "1895ab83674eb634384c0c53734db9fb1bfaa385", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eab060f4da1eeb302953b76d35278679bfeb76b0/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab060f4da1eeb302953b76d35278679bfeb76b0/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=eab060f4da1eeb302953b76d35278679bfeb76b0", "patch": "@@ -111,7 +111,7 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n             stack.extend(substs.types().rev());\n         }\n         ty::Closure(_, ref substs) => {\n-            stack.extend(substs.substs.types().rev());\n+            stack.extend(substs.types().rev());\n         }\n         ty::Generator(_, ref substs, _) => {\n             stack.extend(substs.substs.types().rev());"}]}