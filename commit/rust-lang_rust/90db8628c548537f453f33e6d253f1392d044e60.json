{"sha": "90db8628c548537f453f33e6d253f1392d044e60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZGI4NjI4YzU0ODUzN2Y0NTNmMzNlNmQyNTNmMTM5MmQwNDRlNjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-10T18:46:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-10T18:46:41Z"}, "message": "auto merge of #7631 : MarkJr94/rust/ptr_arithmetic, r=thestinger\n\nAdded Add and Sub traits for pointer arithmetic. Any type that is a ```std::num::Int``` can be added to or subtracted from a pointer. Also my additions did not require any unsafe code, and the operators themselves are safe. Fixes #2122.", "tree": {"sha": "22a3c85baf0f2b800a6bfcd8a0eee2a5330051d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22a3c85baf0f2b800a6bfcd8a0eee2a5330051d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90db8628c548537f453f33e6d253f1392d044e60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90db8628c548537f453f33e6d253f1392d044e60", "html_url": "https://github.com/rust-lang/rust/commit/90db8628c548537f453f33e6d253f1392d044e60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90db8628c548537f453f33e6d253f1392d044e60/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fa09736efcd100ec675a2fe0e29906607996485", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa09736efcd100ec675a2fe0e29906607996485", "html_url": "https://github.com/rust-lang/rust/commit/8fa09736efcd100ec675a2fe0e29906607996485"}, {"sha": "294999c3508ef4cbc2d221f531a6255c82fb95d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/294999c3508ef4cbc2d221f531a6255c82fb95d3", "html_url": "https://github.com/rust-lang/rust/commit/294999c3508ef4cbc2d221f531a6255c82fb95d3"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "e1a62b26bbfac3d0ea4610a592fb0eab9f2c252b", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/90db8628c548537f453f33e6d253f1392d044e60/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90db8628c548537f453f33e6d253f1392d044e60/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=90db8628c548537f453f33e6d253f1392d044e60", "patch": "@@ -15,6 +15,8 @@ use option::{Option, Some, None};\n use sys;\n use unstable::intrinsics;\n use util::swap;\n+use ops::{Add,Sub};\n+use num::Int;\n \n #[cfg(not(test))] use cmp::{Eq, Ord};\n use uint;\n@@ -384,6 +386,46 @@ impl<T> Ord for *const T {\n     }\n }\n \n+#[cfg(not(test))]\n+impl<T, I: Int> Add<I, *T> for *T {\n+    /// Add an integer value to a pointer to get an offset pointer.\n+    /// Is calculated according to the size of the type pointed to.\n+    #[inline]\n+    pub fn add(&self, rhs: &I) -> *T {\n+        self.offset(rhs.to_int() as uint)\n+    }\n+}\n+\n+#[cfg(not(test))]\n+impl<T, I: Int> Sub<I, *T> for *T {\n+    /// Subtract an integer value from a pointer to get an offset pointer.\n+    /// Is calculated according to the size of the type pointed to.\n+    #[inline]\n+    pub fn sub(&self, rhs: &I) -> *T {\n+        self.offset(-rhs.to_int() as uint)\n+    }\n+}\n+\n+#[cfg(not(test))]\n+impl<T, I: Int> Add<I, *mut T> for *mut T {\n+    /// Add an integer value to a pointer to get an offset pointer.\n+    /// Is calculated according to the size of the type pointed to.\n+    #[inline]\n+    pub fn add(&self, rhs: &I) -> *mut T {\n+        self.offset(rhs.to_int() as uint)\n+    }\n+}\n+\n+#[cfg(not(test))]\n+impl<T, I: Int> Sub<I, *mut T> for *mut T {\n+    /// Subtract an integer value from a pointer to get an offset pointer.\n+    /// Is calculated according to the size of the type pointed to.\n+    #[inline]\n+    pub fn sub(&self, rhs: &I) -> *mut T {\n+        self.offset(-rhs.to_int() as uint)\n+    }\n+}\n+\n #[cfg(test)]\n pub mod ptr_tests {\n     use super::*;\n@@ -501,6 +543,60 @@ pub mod ptr_tests {\n         }\n     }\n \n+    #[test]\n+    fn test_ptr_addition() {\n+        use vec::raw::*;\n+\n+        unsafe {\n+            let xs = ~[5, ..16];\n+            let mut ptr = to_ptr(xs);\n+            let end = ptr + 16;\n+\n+            while ptr < end {\n+                assert_eq!(*ptr, 5);\n+                ptr = ptr + 1u;\n+            }\n+\n+            let mut xs_mut = xs.clone();\n+            let mut m_ptr = to_mut_ptr(xs_mut);\n+            let m_end = m_ptr + 16i16;\n+\n+            while m_ptr < m_end {\n+                *m_ptr += 5;\n+                m_ptr = m_ptr + 1u8;\n+            }\n+\n+            assert_eq!(xs_mut, ~[10, ..16]);\n+        }\n+    }\n+\n+    #[test]\n+    fn test_ptr_subtraction() {\n+        use vec::raw::*;\n+\n+        unsafe {\n+            let xs = ~[0,1,2,3,4,5,6,7,8,9];\n+            let mut idx = 9i8;\n+            let ptr = to_ptr(xs);\n+\n+            while idx >= 0i8 {\n+                assert_eq!(*(ptr + idx), idx as int);\n+                idx = idx - 1i8;\n+            }\n+\n+            let mut xs_mut = xs.clone();\n+            let mut m_start = to_mut_ptr(xs_mut);\n+            let mut m_ptr = m_start + 9u32;\n+\n+            while m_ptr >= m_start {\n+                *m_ptr += *m_ptr;\n+                m_ptr = m_ptr - 1i8;\n+            }\n+\n+            assert_eq!(xs_mut, ~[0,2,4,6,8,10,12,14,16,18]);\n+        }\n+    }\n+\n     #[test]\n     fn test_ptr_array_each_with_len() {\n         unsafe {"}]}