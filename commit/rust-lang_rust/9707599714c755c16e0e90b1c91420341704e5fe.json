{"sha": "9707599714c755c16e0e90b1c91420341704e5fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MDc1OTk3MTRjNzU1YzE2ZTBlOTBiMWM5MTQyMDM0MTcwNGU1ZmU=", "commit": {"author": {"name": "Andrea Nall", "email": "anall@andreanall.com", "date": "2021-03-09T14:30:33Z"}, "committer": {"name": "Andrea Nall", "email": "anall@andreanall.com", "date": "2021-03-09T14:30:33Z"}, "message": "add comment for when  can be removed", "tree": {"sha": "912f62b5bc704f70a080a08f3880cf682db5de3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/912f62b5bc704f70a080a08f3880cf682db5de3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9707599714c755c16e0e90b1c91420341704e5fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9707599714c755c16e0e90b1c91420341704e5fe", "html_url": "https://github.com/rust-lang/rust/commit/9707599714c755c16e0e90b1c91420341704e5fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9707599714c755c16e0e90b1c91420341704e5fe/comments", "author": {"login": "anall", "id": 12371, "node_id": "MDQ6VXNlcjEyMzcx", "avatar_url": "https://avatars.githubusercontent.com/u/12371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anall", "html_url": "https://github.com/anall", "followers_url": "https://api.github.com/users/anall/followers", "following_url": "https://api.github.com/users/anall/following{/other_user}", "gists_url": "https://api.github.com/users/anall/gists{/gist_id}", "starred_url": "https://api.github.com/users/anall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anall/subscriptions", "organizations_url": "https://api.github.com/users/anall/orgs", "repos_url": "https://api.github.com/users/anall/repos", "events_url": "https://api.github.com/users/anall/events{/privacy}", "received_events_url": "https://api.github.com/users/anall/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anall", "id": 12371, "node_id": "MDQ6VXNlcjEyMzcx", "avatar_url": "https://avatars.githubusercontent.com/u/12371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anall", "html_url": "https://github.com/anall", "followers_url": "https://api.github.com/users/anall/followers", "following_url": "https://api.github.com/users/anall/following{/other_user}", "gists_url": "https://api.github.com/users/anall/gists{/gist_id}", "starred_url": "https://api.github.com/users/anall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anall/subscriptions", "organizations_url": "https://api.github.com/users/anall/orgs", "repos_url": "https://api.github.com/users/anall/repos", "events_url": "https://api.github.com/users/anall/events{/privacy}", "received_events_url": "https://api.github.com/users/anall/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e812a8abdebd6e4d03aad84b4f7d671a0cb49fdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e812a8abdebd6e4d03aad84b4f7d671a0cb49fdf", "html_url": "https://github.com/rust-lang/rust/commit/e812a8abdebd6e4d03aad84b4f7d671a0cb49fdf"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "44eb37387e768a82bb59c35a6a5a7cc59cb8643e", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9707599714c755c16e0e90b1c91420341704e5fe/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9707599714c755c16e0e90b1c91420341704e5fe/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=9707599714c755c16e0e90b1c91420341704e5fe", "patch": "@@ -1486,6 +1486,9 @@ pub fn match_function_call<'tcx>(\n     None\n }\n \n+// FIXME: Per https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/infer/at/struct.At.html#method.normalize\n+// this function can be removed once the `normalizie` method does not panic when normalization does\n+// not succeed\n /// Checks if `Ty` is normalizable. This function is useful\n /// to avoid crashes on `layout_of`.\n pub fn is_normalizable<'tcx>(cx: &LateContext<'tcx>, param_env: ty::ParamEnv<'tcx>, ty: Ty<'tcx>) -> bool {\n@@ -1501,7 +1504,8 @@ fn is_normalizable_helper<'tcx>(\n     if let Some(&cached_result) = cache.get(ty) {\n         return cached_result;\n     }\n-    cache.insert(ty, false); // prevent recursive loops\n+    // prevent recursive loops, false-negative is better than endless loop leading to stack overflow\n+    cache.insert(ty, false);\n     let result = cx.tcx.infer_ctxt().enter(|infcx| {\n         let cause = rustc_middle::traits::ObligationCause::dummy();\n         if infcx.at(&cause, param_env).normalize(ty).is_ok() {"}]}