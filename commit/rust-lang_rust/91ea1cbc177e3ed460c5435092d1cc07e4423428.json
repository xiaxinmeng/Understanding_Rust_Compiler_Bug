{"sha": "91ea1cbc177e3ed460c5435092d1cc07e4423428", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZWExY2JjMTc3ZTNlZDQ2MGM1NDM1MDkyZDFjYzA3ZTQ0MjM0Mjg=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-30T04:36:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-30T04:36:44Z"}, "message": "Rollup merge of #80959 - jhpratt:unsigned_abs-stabilization, r=m-ou-se\n\nStabilize `unsigned_abs`\n\nResolves #74913.\n\nThis PR stabilizes the `i*::unsigned_abs()` method, which returns the absolute value of an integer _as its unsigned equivalent_. This has the advantage that it does not overflow on `i*::MIN`.\n\nI have gone ahead and used this in a couple locations throughout the repository.", "tree": {"sha": "bbbfedc01fcb61520e165a67efa8d99ca8ecab7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbbfedc01fcb61520e165a67efa8d99ca8ecab7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91ea1cbc177e3ed460c5435092d1cc07e4423428", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgFOJdCRBK7hj4Ov3rIwAAdHIIAFfw/NHkZYra60tGxXY+ducR\n/hTRrgUbFTKhATd4PzXC7sxH1DQSDa5+cH+ykditxpsYVdm9PE1zhzGfOfV0bnIH\n0x8bUhjXFaIoX12mSVPxsAyuM5voDlgjQtjWqtB6lgsC1OCKoMc0J7rkXhHSMwaB\n3L0uLGNxGGZEtQw6n8Xvc0TPqg93NqZ/yCNb2JTY2wni6PQk4fK1exNuPnAUwgLx\nPZ+dygXdlkGn1mdF56xJ73yb1XASnU+uS6frfZDGoWHNSKvsStcrQT/U9aERrVpi\nRw+8XWBpLB3fn/qXBiVDgYbsszNYJz9LwoEjqFEg7YZnXKM16FqpBemw6UsYyPc=\n=bhZB\n-----END PGP SIGNATURE-----\n", "payload": "tree bbbfedc01fcb61520e165a67efa8d99ca8ecab7a\nparent b94d84d38a3d306a54c5a23caa54d373a2202b9f\nparent edf2e3725e8d95b52784990a0c05978db5646bfb\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1611981404 +0900\ncommitter GitHub <noreply@github.com> 1611981404 +0900\n\nRollup merge of #80959 - jhpratt:unsigned_abs-stabilization, r=m-ou-se\n\nStabilize `unsigned_abs`\n\nResolves #74913.\n\nThis PR stabilizes the `i*::unsigned_abs()` method, which returns the absolute value of an integer _as its unsigned equivalent_. This has the advantage that it does not overflow on `i*::MIN`.\n\nI have gone ahead and used this in a couple locations throughout the repository.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91ea1cbc177e3ed460c5435092d1cc07e4423428", "html_url": "https://github.com/rust-lang/rust/commit/91ea1cbc177e3ed460c5435092d1cc07e4423428", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91ea1cbc177e3ed460c5435092d1cc07e4423428/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b94d84d38a3d306a54c5a23caa54d373a2202b9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b94d84d38a3d306a54c5a23caa54d373a2202b9f", "html_url": "https://github.com/rust-lang/rust/commit/b94d84d38a3d306a54c5a23caa54d373a2202b9f"}, {"sha": "edf2e3725e8d95b52784990a0c05978db5646bfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/edf2e3725e8d95b52784990a0c05978db5646bfb", "html_url": "https://github.com/rust-lang/rust/commit/edf2e3725e8d95b52784990a0c05978db5646bfb"}], "stats": {"total": 25, "additions": 8, "deletions": 17}, "files": [{"sha": "55fe5f971e718938c227a17d9943cb6c12f82463", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/91ea1cbc177e3ed460c5435092d1cc07e4423428/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ea1cbc177e3ed460c5435092d1cc07e4423428/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=91ea1cbc177e3ed460c5435092d1cc07e4423428", "patch": "@@ -588,12 +588,3 @@ pub fn read_target_uint(endianness: Endian, mut source: &[u8]) -> Result<u128, i\n     debug_assert!(source.len() == 0); // We should have consumed the source buffer.\n     uint\n }\n-\n-/// Computes the unsigned absolute value without wrapping or panicking.\n-#[inline]\n-pub fn uabs(value: i64) -> u64 {\n-    // The only tricky part here is if value == i64::MIN. In that case,\n-    // wrapping_abs() returns i64::MIN == -2^63. Casting this value to a u64\n-    // gives 2^63, the correct value.\n-    value.wrapping_abs() as u64\n-}"}, {"sha": "8774b48fb3e403665dae7b75ce9d3b96d2ff6d55", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91ea1cbc177e3ed460c5435092d1cc07e4423428/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ea1cbc177e3ed460c5435092d1cc07e4423428/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=91ea1cbc177e3ed460c5435092d1cc07e4423428", "patch": "@@ -1,4 +1,4 @@\n-use super::{uabs, AllocId, InterpResult};\n+use super::{AllocId, InterpResult};\n \n use rustc_macros::HashStable;\n use rustc_target::abi::{HasDataLayout, Size};\n@@ -57,7 +57,7 @@ pub trait PointerArithmetic: HasDataLayout {\n     #[inline]\n     fn overflowing_signed_offset(&self, val: u64, i: i64) -> (u64, bool) {\n         // We need to make sure that i fits in a machine isize.\n-        let n = uabs(i);\n+        let n = i.unsigned_abs();\n         if i >= 0 {\n             let (val, over) = self.overflowing_offset(val, n);\n             (val, over || i > self.machine_isize_max())"}, {"sha": "f4309c9cd9572d11e62f1eabc758cb78d1bd59b6", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91ea1cbc177e3ed460c5435092d1cc07e4423428/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ea1cbc177e3ed460c5435092d1cc07e4423428/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=91ea1cbc177e3ed460c5435092d1cc07e4423428", "patch": "@@ -7,7 +7,7 @@ use std::convert::TryFrom;\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::{\n     self,\n-    interpret::{uabs, ConstValue, GlobalId, InterpResult, Scalar},\n+    interpret::{ConstValue, GlobalId, InterpResult, Scalar},\n     BinOp,\n };\n use rustc_middle::ty;\n@@ -542,7 +542,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // memory between these pointers must be accessible. Note that we do not require the\n         // pointers to be properly aligned (unlike a read/write operation).\n         let min_ptr = if offset_bytes >= 0 { ptr } else { offset_ptr };\n-        let size: u64 = uabs(offset_bytes);\n+        let size = offset_bytes.unsigned_abs();\n         // This call handles checking for integer/NULL pointers.\n         self.memory.check_ptr_access_align(\n             min_ptr,"}, {"sha": "bbf7ecc39cfd99ee06789814f5e575f12558c63b", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91ea1cbc177e3ed460c5435092d1cc07e4423428/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ea1cbc177e3ed460c5435092d1cc07e4423428/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=91ea1cbc177e3ed460c5435092d1cc07e4423428", "patch": "@@ -530,7 +530,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n                     if val < 0 {\n                         neg = true;\n                     }\n-                    Some(val.wrapping_abs() as u128)\n+                    Some(val.unsigned_abs())\n                 })\n             }\n             _ => {"}, {"sha": "20ac165c6c7988faf3d9868de31dc094fe1fcb9c", "filename": "library/core/src/num/dec2flt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91ea1cbc177e3ed460c5435092d1cc07e4423428/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ea1cbc177e3ed460c5435092d1cc07e4423428/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs?ref=91ea1cbc177e3ed460c5435092d1cc07e4423428", "patch": "@@ -332,7 +332,7 @@ fn bound_intermediate_digits(decimal: &Decimal<'_>, e: i64) -> u64 {\n         // It tries to find a positive number k such that `f << k / 10^e` is an in-range\n         // significand. This will result in about `2^53 * f * 10^e` < `10^17 * f * 10^e`.\n         // One input that triggers this is 0.33...33 (375 x 3).\n-        f_len + (e.abs() as u64) + 17\n+        f_len + e.unsigned_abs() + 17\n     }\n }\n "}, {"sha": "8fdd7c9e5d7fbc105c5a560fe31d2e2c631492d8", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91ea1cbc177e3ed460c5435092d1cc07e4423428/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ea1cbc177e3ed460c5435092d1cc07e4423428/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=91ea1cbc177e3ed460c5435092d1cc07e4423428", "patch": "@@ -1158,12 +1158,12 @@ macro_rules! int_impl {\n         /// Basic usage:\n         ///\n         /// ```\n-        /// #![feature(unsigned_abs)]\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".unsigned_abs(), 100\", stringify!($UnsignedT), \");\")]\n         #[doc = concat!(\"assert_eq!((-100\", stringify!($SelfT), \").unsigned_abs(), 100\", stringify!($UnsignedT), \");\")]\n         /// assert_eq!((-128i8).unsigned_abs(), 128u8);\n         /// ```\n-        #[unstable(feature = \"unsigned_abs\", issue = \"74913\")]\n+        #[stable(feature = \"unsigned_abs\", since = \"1.51.0\")]\n+        #[rustc_const_stable(feature = \"unsigned_abs\", since = \"1.51.0\")]\n         #[inline]\n         pub const fn unsigned_abs(self) -> $UnsignedT {\n              self.wrapping_abs() as $UnsignedT"}]}