{"sha": "d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNzQxZTU5Y2I4N2QzYzhjNzk0ZWViZjZkNTQzMGQxYjM4M2Y1MWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-19T01:47:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-19T01:47:05Z"}, "message": "Auto merge of #77035 - mibac138:fn-fat-arrow-return, r=davidtwco\n\nGracefully handle mistyping -> as => in function return type\n\nFixes #77019", "tree": {"sha": "db1f9082578874b99629815bde7a05f3d4a12a03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db1f9082578874b99629815bde7a05f3d4a12a03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "html_url": "https://github.com/rust-lang/rust/commit/d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50a90975c0f78219db45d3bee0676a22695ec103", "url": "https://api.github.com/repos/rust-lang/rust/commits/50a90975c0f78219db45d3bee0676a22695ec103", "html_url": "https://github.com/rust-lang/rust/commit/50a90975c0f78219db45d3bee0676a22695ec103"}, {"sha": "e916641fd35bddabc8b018a5e51fe23b93875c66", "url": "https://api.github.com/repos/rust-lang/rust/commits/e916641fd35bddabc8b018a5e51fe23b93875c66", "html_url": "https://github.com/rust-lang/rust/commit/e916641fd35bddabc8b018a5e51fe23b93875c66"}], "stats": {"total": 280, "additions": 255, "deletions": 25}, "files": [{"sha": "4d2167442bed6ec28afde04197ed329eb377df50", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "patch": "@@ -1,5 +1,5 @@\n use super::pat::{GateOr, PARAM_EXPECTED};\n-use super::ty::{AllowPlus, RecoverQPath};\n+use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{BlockMode, Parser, PathStyle, Restrictions, TokenType};\n use super::{SemiColonMode, SeqSep, TokenExpectType};\n use crate::maybe_recover_from_interpolated_ty_qpath;\n@@ -1647,7 +1647,8 @@ impl<'a> Parser<'a> {\n             self.expect_or()?;\n             args\n         };\n-        let output = self.parse_ret_ty(AllowPlus::Yes, RecoverQPath::Yes)?;\n+        let output =\n+            self.parse_ret_ty(AllowPlus::Yes, RecoverQPath::Yes, RecoverReturnSign::Yes)?;\n \n         Ok(P(FnDecl { inputs, output }))\n     }"}, {"sha": "ed8d4f78426ac7a242c46952fe03f4ec0ea39a96", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "patch": "@@ -240,7 +240,7 @@ impl<'a> Parser<'a> {\n \n         // Parse type with mandatory colon and (possibly empty) bounds,\n         // or with mandatory equality sign and the second type.\n-        let ty = self.parse_ty()?;\n+        let ty = self.parse_ty_for_where_clause()?;\n         if self.eat(&token::Colon) {\n             let bounds = self.parse_generic_bounds(Some(self.prev_token.span))?;\n             Ok(ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate {"}, {"sha": "634cce403df96f86ef20e36a2d9055d48a57044b", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "patch": "@@ -1,5 +1,5 @@\n use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};\n-use super::ty::{AllowPlus, RecoverQPath};\n+use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{FollowedByType, Parser, PathStyle};\n \n use crate::maybe_whole;\n@@ -1549,7 +1549,7 @@ impl<'a> Parser<'a> {\n         let header = self.parse_fn_front_matter()?; // `const ... fn`\n         let ident = self.parse_ident()?; // `foo`\n         let mut generics = self.parse_generics()?; // `<'a, T, ...>`\n-        let decl = self.parse_fn_decl(req_name, AllowPlus::Yes)?; // `(p: u8, ...)`\n+        let decl = self.parse_fn_decl(req_name, AllowPlus::Yes, RecoverReturnSign::Yes)?; // `(p: u8, ...)`\n         generics.where_clause = self.parse_where_clause()?; // `where T: Ord`\n \n         let mut sig_hi = self.prev_token.span;\n@@ -1680,10 +1680,11 @@ impl<'a> Parser<'a> {\n         &mut self,\n         req_name: ReqName,\n         ret_allow_plus: AllowPlus,\n+        recover_return_sign: RecoverReturnSign,\n     ) -> PResult<'a, P<FnDecl>> {\n         Ok(P(FnDecl {\n             inputs: self.parse_fn_params(req_name)?,\n-            output: self.parse_ret_ty(ret_allow_plus, RecoverQPath::Yes)?,\n+            output: self.parse_ret_ty(ret_allow_plus, RecoverQPath::Yes, recover_return_sign)?,\n         }))\n     }\n "}, {"sha": "4510e86e0341fd899e8240eddb8884906acba5b3", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "patch": "@@ -1,4 +1,4 @@\n-use super::ty::{AllowPlus, RecoverQPath};\n+use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{Parser, TokenType};\n use crate::maybe_whole;\n use rustc_ast::ptr::P;\n@@ -231,7 +231,8 @@ impl<'a> Parser<'a> {\n                     // `(T, U) -> R`\n                     let (inputs, _) = self.parse_paren_comma_seq(|p| p.parse_ty())?;\n                     let span = ident.span.to(self.prev_token.span);\n-                    let output = self.parse_ret_ty(AllowPlus::No, RecoverQPath::No)?;\n+                    let output =\n+                        self.parse_ret_ty(AllowPlus::No, RecoverQPath::No, RecoverReturnSign::No)?;\n                     ParenthesizedArgs { inputs, output, span }.into()\n                 };\n "}, {"sha": "9553f5d09e83bec5afb6143a16c6ef63e00a081f", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 96, "deletions": 9, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "patch": "@@ -43,6 +43,37 @@ pub(super) enum RecoverQPath {\n     No,\n }\n \n+/// Signals whether parsing a type should recover `->`.\n+///\n+/// More specifically, when parsing a function like:\n+/// ```rust\n+/// fn foo() => u8 { 0 }\n+/// fn bar(): u8 { 0 }\n+/// ```\n+/// The compiler will try to recover interpreting `foo() => u8` as `foo() -> u8` when calling\n+/// `parse_ty` with anything except `RecoverReturnSign::No`, and it will try to recover `bar(): u8`\n+/// as `bar() -> u8` when passing `RecoverReturnSign::Yes` to `parse_ty`\n+#[derive(Copy, Clone, PartialEq)]\n+pub(super) enum RecoverReturnSign {\n+    Yes,\n+    OnlyFatArrow,\n+    No,\n+}\n+\n+impl RecoverReturnSign {\n+    /// [RecoverReturnSign::Yes] allows for recovering `fn foo() => u8` and `fn foo(): u8`,\n+    /// [RecoverReturnSign::OnlyFatArrow] allows for recovering only `fn foo() => u8` (recovering\n+    /// colons can cause problems when parsing where clauses), and\n+    /// [RecoverReturnSign::No] doesn't allow for any recovery of the return type arrow\n+    fn can_recover(self, token: &TokenKind) -> bool {\n+        match self {\n+            Self::Yes => matches!(token, token::FatArrow | token::Colon),\n+            Self::OnlyFatArrow => matches!(token, token::FatArrow),\n+            Self::No => false,\n+        }\n+    }\n+}\n+\n // Is `...` (`CVarArgs`) legal at this level of type parsing?\n #[derive(PartialEq)]\n enum AllowCVariadic {\n@@ -62,14 +93,24 @@ fn can_continue_type_after_non_fn_ident(t: &Token) -> bool {\n impl<'a> Parser<'a> {\n     /// Parses a type.\n     pub fn parse_ty(&mut self) -> PResult<'a, P<Ty>> {\n-        self.parse_ty_common(AllowPlus::Yes, RecoverQPath::Yes, AllowCVariadic::No)\n+        self.parse_ty_common(\n+            AllowPlus::Yes,\n+            AllowCVariadic::No,\n+            RecoverQPath::Yes,\n+            RecoverReturnSign::Yes,\n+        )\n     }\n \n     /// Parse a type suitable for a function or function pointer parameter.\n     /// The difference from `parse_ty` is that this version allows `...`\n     /// (`CVarArgs`) at the top level of the type.\n     pub(super) fn parse_ty_for_param(&mut self) -> PResult<'a, P<Ty>> {\n-        self.parse_ty_common(AllowPlus::Yes, RecoverQPath::Yes, AllowCVariadic::Yes)\n+        self.parse_ty_common(\n+            AllowPlus::Yes,\n+            AllowCVariadic::Yes,\n+            RecoverQPath::Yes,\n+            RecoverReturnSign::Yes,\n+        )\n     }\n \n     /// Parses a type in restricted contexts where `+` is not permitted.\n@@ -79,18 +120,58 @@ impl<'a> Parser<'a> {\n     /// Example 2: `value1 as TYPE + value2`\n     ///     `+` is prohibited to avoid interactions with expression grammar.\n     pub(super) fn parse_ty_no_plus(&mut self) -> PResult<'a, P<Ty>> {\n-        self.parse_ty_common(AllowPlus::No, RecoverQPath::Yes, AllowCVariadic::No)\n+        self.parse_ty_common(\n+            AllowPlus::No,\n+            AllowCVariadic::No,\n+            RecoverQPath::Yes,\n+            RecoverReturnSign::Yes,\n+        )\n+    }\n+\n+    /// Parse a type without recovering `:` as `->` to avoid breaking code such as `where fn() : for<'a>`\n+    pub(super) fn parse_ty_for_where_clause(&mut self) -> PResult<'a, P<Ty>> {\n+        self.parse_ty_common(\n+            AllowPlus::Yes,\n+            AllowCVariadic::Yes,\n+            RecoverQPath::Yes,\n+            RecoverReturnSign::OnlyFatArrow,\n+        )\n     }\n \n     /// Parses an optional return type `[ -> TY ]` in a function declaration.\n     pub(super) fn parse_ret_ty(\n         &mut self,\n         allow_plus: AllowPlus,\n         recover_qpath: RecoverQPath,\n+        recover_return_sign: RecoverReturnSign,\n     ) -> PResult<'a, FnRetTy> {\n         Ok(if self.eat(&token::RArrow) {\n             // FIXME(Centril): Can we unconditionally `allow_plus`?\n-            let ty = self.parse_ty_common(allow_plus, recover_qpath, AllowCVariadic::No)?;\n+            let ty = self.parse_ty_common(\n+                allow_plus,\n+                AllowCVariadic::No,\n+                recover_qpath,\n+                recover_return_sign,\n+            )?;\n+            FnRetTy::Ty(ty)\n+        } else if recover_return_sign.can_recover(&self.token.kind) {\n+            // Don't `eat` to prevent `=>` from being added as an expected token which isn't\n+            // actually expected and could only confuse users\n+            self.bump();\n+            self.struct_span_err(self.prev_token.span, \"return types are denoted using `->`\")\n+                .span_suggestion_short(\n+                    self.prev_token.span,\n+                    \"use `->` instead\",\n+                    \"->\".to_string(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+            let ty = self.parse_ty_common(\n+                allow_plus,\n+                AllowCVariadic::No,\n+                recover_qpath,\n+                recover_return_sign,\n+            )?;\n             FnRetTy::Ty(ty)\n         } else {\n             FnRetTy::Default(self.token.span.shrink_to_lo())\n@@ -100,8 +181,9 @@ impl<'a> Parser<'a> {\n     fn parse_ty_common(\n         &mut self,\n         allow_plus: AllowPlus,\n-        recover_qpath: RecoverQPath,\n         allow_c_variadic: AllowCVariadic,\n+        recover_qpath: RecoverQPath,\n+        recover_return_sign: RecoverReturnSign,\n     ) -> PResult<'a, P<Ty>> {\n         let allow_qpath_recovery = recover_qpath == RecoverQPath::Yes;\n         maybe_recover_from_interpolated_ty_qpath!(self, allow_qpath_recovery);\n@@ -129,14 +211,14 @@ impl<'a> Parser<'a> {\n             TyKind::Infer\n         } else if self.check_fn_front_matter() {\n             // Function pointer type\n-            self.parse_ty_bare_fn(lo, Vec::new())?\n+            self.parse_ty_bare_fn(lo, Vec::new(), recover_return_sign)?\n         } else if self.check_keyword(kw::For) {\n             // Function pointer type or bound list (trait object type) starting with a poly-trait.\n             //   `for<'lt> [unsafe] [extern \"ABI\"] fn (&'lt S) -> T`\n             //   `for<'lt> Trait1<'lt> + Trait2 + 'a`\n             let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n             if self.check_fn_front_matter() {\n-                self.parse_ty_bare_fn(lo, lifetime_defs)?\n+                self.parse_ty_bare_fn(lo, lifetime_defs, recover_return_sign)?\n             } else {\n                 let path = self.parse_path(PathStyle::Type)?;\n                 let parse_plus = allow_plus == AllowPlus::Yes && self.check_plus();\n@@ -338,9 +420,14 @@ impl<'a> Parser<'a> {\n     /// Function Style    ABI  Parameter types\n     /// ```\n     /// We actually parse `FnHeader FnDecl`, but we error on `const` and `async` qualifiers.\n-    fn parse_ty_bare_fn(&mut self, lo: Span, params: Vec<GenericParam>) -> PResult<'a, TyKind> {\n+    fn parse_ty_bare_fn(\n+        &mut self,\n+        lo: Span,\n+        params: Vec<GenericParam>,\n+        recover_return_sign: RecoverReturnSign,\n+    ) -> PResult<'a, TyKind> {\n         let ast::FnHeader { ext, unsafety, constness, asyncness } = self.parse_fn_front_matter()?;\n-        let decl = self.parse_fn_decl(|_| false, AllowPlus::No)?;\n+        let decl = self.parse_fn_decl(|_| false, AllowPlus::No, recover_return_sign)?;\n         let whole_span = lo.to(self.prev_token.span);\n         if let ast::Const::Yes(span) = constness {\n             self.error_fn_ptr_bad_qualifier(whole_span, span, \"const\");"}, {"sha": "076be6a35a4b7bf750be72464b0c4f12567f6fa6", "filename": "src/test/ui/fn/fn-recover-return-sign.fixed", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign.fixed?ref=d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "patch": "@@ -0,0 +1,28 @@\n+// run-rustfix\n+#![allow(unused)]\n+fn a() -> usize { 0 }\n+//~^ ERROR return types are denoted using `->`\n+\n+fn b()-> usize { 0 }\n+//~^ ERROR return types are denoted using `->`\n+\n+fn bar(_: u32) {}\n+\n+fn baz() -> *const dyn Fn(u32) { unimplemented!() }\n+\n+fn foo() {\n+    match () {\n+        _ if baz() == &bar as &dyn Fn(u32) => (),\n+        () => (),\n+    }\n+}\n+\n+fn main() {\n+    let foo = |a: bool| -> bool { a };\n+    //~^ ERROR return types are denoted using `->`\n+    dbg!(foo(false));\n+\n+    let bar = |a: bool|-> bool { a };\n+    //~^ ERROR return types are denoted using `->`\n+    dbg!(bar(false));\n+}"}, {"sha": "0656023c0f8989c0aa8f68317f8af88310e8fa1f", "filename": "src/test/ui/fn/fn-recover-return-sign.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign.rs?ref=d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "patch": "@@ -0,0 +1,28 @@\n+// run-rustfix\n+#![allow(unused)]\n+fn a() => usize { 0 }\n+//~^ ERROR return types are denoted using `->`\n+\n+fn b(): usize { 0 }\n+//~^ ERROR return types are denoted using `->`\n+\n+fn bar(_: u32) {}\n+\n+fn baz() -> *const dyn Fn(u32) { unimplemented!() }\n+\n+fn foo() {\n+    match () {\n+        _ if baz() == &bar as &dyn Fn(u32) => (),\n+        () => (),\n+    }\n+}\n+\n+fn main() {\n+    let foo = |a: bool| => bool { a };\n+    //~^ ERROR return types are denoted using `->`\n+    dbg!(foo(false));\n+\n+    let bar = |a: bool|: bool { a };\n+    //~^ ERROR return types are denoted using `->`\n+    dbg!(bar(false));\n+}"}, {"sha": "983109730ff3c4138d8b321d7fa5fb668ed5c93b", "filename": "src/test/ui/fn/fn-recover-return-sign.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign.stderr?ref=d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "patch": "@@ -0,0 +1,26 @@\n+error: return types are denoted using `->`\n+  --> $DIR/fn-recover-return-sign.rs:3:8\n+   |\n+LL | fn a() => usize { 0 }\n+   |        ^^ help: use `->` instead\n+\n+error: return types are denoted using `->`\n+  --> $DIR/fn-recover-return-sign.rs:6:7\n+   |\n+LL | fn b(): usize { 0 }\n+   |       ^ help: use `->` instead\n+\n+error: return types are denoted using `->`\n+  --> $DIR/fn-recover-return-sign.rs:21:25\n+   |\n+LL |     let foo = |a: bool| => bool { a };\n+   |                         ^^ help: use `->` instead\n+\n+error: return types are denoted using `->`\n+  --> $DIR/fn-recover-return-sign.rs:25:24\n+   |\n+LL |     let bar = |a: bool|: bool { a };\n+   |                        ^ help: use `->` instead\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "b6a6a1ec2a6ed573503041b771ac433d3380a323", "filename": "src/test/ui/fn/fn-recover-return-sign2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign2.rs?ref=d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "patch": "@@ -0,0 +1,8 @@\n+// Separate test file because `Fn() => bool` isn't getting fixed and rustfix complained that\n+// even though a fix was applied the code was still incorrect\n+\n+fn foo() => impl Fn() => bool {\n+    //~^ ERROR return types are denoted using `->`\n+    //~| ERROR expected one of `+`, `->`, `::`, `;`, `where`, or `{`, found `=>`\n+    unimplemented!()\n+}"}, {"sha": "d62cacd4bf531b3057e1ef04df875ad6ba46b41d", "filename": "src/test/ui/fn/fn-recover-return-sign2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-recover-return-sign2.stderr?ref=d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "patch": "@@ -0,0 +1,14 @@\n+error: return types are denoted using `->`\n+  --> $DIR/fn-recover-return-sign2.rs:4:10\n+   |\n+LL | fn foo() => impl Fn() => bool {\n+   |          ^^ help: use `->` instead\n+\n+error: expected one of `+`, `->`, `::`, `;`, `where`, or `{`, found `=>`\n+  --> $DIR/fn-recover-return-sign2.rs:4:23\n+   |\n+LL | fn foo() => impl Fn() => bool {\n+   |                       ^^ expected one of `+`, `->`, `::`, `;`, `where`, or `{`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "0001ef57c99024d997173271754a4468739aec17", "filename": "src/test/ui/parser/fn-colon-return-type.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/src%2Ftest%2Fui%2Fparser%2Ffn-colon-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/src%2Ftest%2Fui%2Fparser%2Ffn-colon-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-colon-return-type.rs?ref=d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "patch": "@@ -1,4 +1,5 @@\n-fn foo(x: i32): i32 { //~ ERROR expected one of `->`, `;`, `where`, or `{`, found `:`\n+fn foo(x: i32): i32 {\n+//~^ ERROR return types are denoted using `->`\n     x\n }\n "}, {"sha": "1de9187820560779ae5b79ea4f861576ba1b78b2", "filename": "src/test/ui/parser/fn-colon-return-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/src%2Ftest%2Fui%2Fparser%2Ffn-colon-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/src%2Ftest%2Fui%2Fparser%2Ffn-colon-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-colon-return-type.stderr?ref=d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `->`, `;`, `where`, or `{`, found `:`\n+error: return types are denoted using `->`\n   --> $DIR/fn-colon-return-type.rs:1:15\n    |\n LL | fn foo(x: i32): i32 {\n-   |               ^ expected one of `->`, `;`, `where`, or `{`\n+   |               ^ help: use `->` instead\n \n error: aborting due to previous error\n "}, {"sha": "5518b554d8e530e813126db6be82bc91777b692a", "filename": "src/test/ui/parser/not-a-pred.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/src%2Ftest%2Fui%2Fparser%2Fnot-a-pred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/src%2Ftest%2Fui%2Fparser%2Fnot-a-pred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnot-a-pred.rs?ref=d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "patch": "@@ -1,6 +1,15 @@\n fn f(a: isize, b: isize) : lt(a, b) { }\n-//~^ ERROR expected one of `->`, `;`, `where`, or `{`, found `:`\n+//~^ ERROR return types are denoted using `->`\n+//~| ERROR expected type, found function `lt` [E0573]\n+//~| ERROR expected type, found local variable `a` [E0573]\n+//~| ERROR expected type, found local variable `b` [E0573]\n \n fn lt(a: isize, b: isize) { }\n \n-fn main() { let a: isize = 10; let b: isize = 23; check (lt(a, b)); f(a, b); }\n+fn main() {\n+    let a: isize = 10;\n+    let b: isize = 23;\n+    check (lt(a, b));\n+    //~^ ERROR cannot find function `check` in this scope [E0425]\n+    f(a, b);\n+}"}, {"sha": "bcc64a687fd0cc108734a6a1bf0a4d0b6a960d9c", "filename": "src/test/ui/parser/not-a-pred.stderr", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/src%2Ftest%2Fui%2Fparser%2Fnot-a-pred.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1741e59cb87d3c8c794eebf6d5430d1b383f51f/src%2Ftest%2Fui%2Fparser%2Fnot-a-pred.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnot-a-pred.stderr?ref=d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "patch": "@@ -1,8 +1,34 @@\n-error: expected one of `->`, `;`, `where`, or `{`, found `:`\n+error: return types are denoted using `->`\n   --> $DIR/not-a-pred.rs:1:26\n    |\n LL | fn f(a: isize, b: isize) : lt(a, b) { }\n-   |                          ^ expected one of `->`, `;`, `where`, or `{`\n+   |                          ^ help: use `->` instead\n \n-error: aborting due to previous error\n+error[E0573]: expected type, found function `lt`\n+  --> $DIR/not-a-pred.rs:1:28\n+   |\n+LL | fn f(a: isize, b: isize) : lt(a, b) { }\n+   |                            ^^^^^^^^ not a type\n+\n+error[E0573]: expected type, found local variable `a`\n+  --> $DIR/not-a-pred.rs:1:31\n+   |\n+LL | fn f(a: isize, b: isize) : lt(a, b) { }\n+   |                               ^ not a type\n+\n+error[E0573]: expected type, found local variable `b`\n+  --> $DIR/not-a-pred.rs:1:34\n+   |\n+LL | fn f(a: isize, b: isize) : lt(a, b) { }\n+   |                                  ^ not a type\n+\n+error[E0425]: cannot find function `check` in this scope\n+  --> $DIR/not-a-pred.rs:12:5\n+   |\n+LL |     check (lt(a, b));\n+   |     ^^^^^ not found in this scope\n+\n+error: aborting due to 5 previous errors\n \n+Some errors have detailed explanations: E0425, E0573.\n+For more information about an error, try `rustc --explain E0425`."}]}