{"sha": "7181aa176393d601f43704d886e8e7afa4b14e45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxODFhYTE3NjM5M2Q2MDFmNDM3MDRkODg2ZThlN2FmYTRiMTRlNDU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T09:03:21Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T09:03:21Z"}, "message": "No need to export functions only used in the same module", "tree": {"sha": "8750a70f982e6dacd08661b23f80577f7c8d7a80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8750a70f982e6dacd08661b23f80577f7c8d7a80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7181aa176393d601f43704d886e8e7afa4b14e45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7181aa176393d601f43704d886e8e7afa4b14e45", "html_url": "https://github.com/rust-lang/rust/commit/7181aa176393d601f43704d886e8e7afa4b14e45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7181aa176393d601f43704d886e8e7afa4b14e45/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "982a9662c51b7746fd8aa1347034520667de2e8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/982a9662c51b7746fd8aa1347034520667de2e8a", "html_url": "https://github.com/rust-lang/rust/commit/982a9662c51b7746fd8aa1347034520667de2e8a"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "d54a1c9bb82f79a65e9e34681db57d6e3dbd3884", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7181aa176393d601f43704d886e8e7afa4b14e45/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7181aa176393d601f43704d886e8e7afa4b14e45/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=7181aa176393d601f43704d886e8e7afa4b14e45", "patch": "@@ -404,7 +404,7 @@ impl<'tcx> AllocMap<'tcx> {\n \n     /// Freeze an `AllocId` created with `reserve` by pointing it at an `Allocation`. May be called\n     /// twice for the same `(AllocId, Allocation)` pair.\n-    pub fn set_alloc_id_same_memory(&mut self, id: AllocId, mem: &'tcx Allocation) {\n+    fn set_alloc_id_same_memory(&mut self, id: AllocId, mem: &'tcx Allocation) {\n         self.id_to_kind.insert_same(id, AllocKind::Memory(mem));\n     }\n }"}]}