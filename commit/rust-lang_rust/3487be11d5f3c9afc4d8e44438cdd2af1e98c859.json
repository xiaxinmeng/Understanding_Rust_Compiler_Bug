{"sha": "3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ODdiZTExZDVmM2M5YWZjNGQ4ZTQ0NDM4Y2RkMmFmMWU5OGM4NTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-22T12:11:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-22T12:11:02Z"}, "message": "Auto merge of #86545 - JohnTitor:rollup-7sqdhpa, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #86393 (Add regression test for issue #52025)\n - #86402 (rustdoc: add optional woff2 versions of Source Serif and Source Code)\n - #86451 (Resolve intra-doc links in summary desc)\n - #86501 (Cleanup handling of `crate_name` for doctests)\n - #86517 (Fix `unused_unsafe` around `await`)\n - #86537 (Mark some edition tests as check-pass)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b36c3d6be79fbd32dee032d22998db4fc4c81374", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b36c3d6be79fbd32dee032d22998db4fc4c81374"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "html_url": "https://github.com/rust-lang/rust/commit/3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75ed34223adb02c7bbfa5ae5e62c48952ff29914", "url": "https://api.github.com/repos/rust-lang/rust/commits/75ed34223adb02c7bbfa5ae5e62c48952ff29914", "html_url": "https://github.com/rust-lang/rust/commit/75ed34223adb02c7bbfa5ae5e62c48952ff29914"}, {"sha": "00a7d5c08c03087f6b968ac641703a863294a1b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/00a7d5c08c03087f6b968ac641703a863294a1b0", "html_url": "https://github.com/rust-lang/rust/commit/00a7d5c08c03087f6b968ac641703a863294a1b0"}], "stats": {"total": 379, "additions": 279, "deletions": 100}, "files": [{"sha": "672686410f9bfcb3e4dc8382a2b44dff7ec957f0", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -494,6 +494,8 @@ impl<'tcx> Body<'tcx> {\n #[derive(Copy, Clone, PartialEq, Eq, Debug, TyEncodable, TyDecodable, HashStable)]\n pub enum Safety {\n     Safe,\n+    /// Unsafe because of compiler-generated unsafe code, like `await` desugaring\n+    BuiltinUnsafe,\n     /// Unsafe because of an unsafe fn\n     FnUnsafe,\n     /// Unsafe because of an `unsafe` block"}, {"sha": "6b2e542ee70517847b1dcfc0cdee9b9635e12fd0", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -114,6 +114,7 @@ pub struct Adt<'tcx> {\n #[derive(Copy, Clone, Debug, HashStable)]\n pub enum BlockSafety {\n     Safe,\n+    BuiltinUnsafe,\n     ExplicitUnsafe(hir::HirId),\n }\n "}, {"sha": "103ddda1a1d262c45069da1fab78d78404a7776b", "filename": "compiler/rustc_mir/src/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -321,6 +321,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                 }\n                 false\n             }\n+            Safety::BuiltinUnsafe => true,\n             Safety::ExplicitUnsafe(hir_id) => {\n                 // mark unsafe block as used if there are any unsafe operations inside\n                 if !violations.is_empty() {"}, {"sha": "df71379c1d88643c50813a1329565cc9c401bc90", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -214,6 +214,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         debug!(\"update_source_scope_for({:?}, {:?})\", span, safety_mode);\n         let new_unsafety = match safety_mode {\n             BlockSafety::Safe => None,\n+            BlockSafety::BuiltinUnsafe => Some(Safety::BuiltinUnsafe),\n             BlockSafety::ExplicitUnsafe(hir_id) => {\n                 match self.in_scope_unsafe {\n                     Safety::Safe => {}"}, {"sha": "4e80931ec037088c12772fb1e544a38d29ada7e5", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -29,11 +29,7 @@ struct UnsafetyVisitor<'a, 'tcx> {\n }\n \n impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n-    fn in_safety_context<R>(\n-        &mut self,\n-        safety_context: SafetyContext,\n-        f: impl FnOnce(&mut Self) -> R,\n-    ) {\n+    fn in_safety_context(&mut self, safety_context: SafetyContext, f: impl FnOnce(&mut Self)) {\n         if let (\n             SafetyContext::UnsafeBlock { span: enclosing_span, .. },\n             SafetyContext::UnsafeBlock { span: block_span, hir_id, .. },\n@@ -63,14 +59,14 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n                 );\n             }\n             self.safety_context = prev_context;\n-            return;\n         }\n     }\n \n     fn requires_unsafe(&mut self, span: Span, kind: UnsafeOpKind) {\n         let (description, note) = kind.description_and_note();\n         let unsafe_op_in_unsafe_fn_allowed = self.unsafe_op_in_unsafe_fn_allowed();\n         match self.safety_context {\n+            SafetyContext::BuiltinUnsafeBlock => {}\n             SafetyContext::UnsafeBlock { ref mut used, .. } => {\n                 if !self.body_unsafety.is_unsafe() || !unsafe_op_in_unsafe_fn_allowed {\n                     // Mark this block as useful\n@@ -142,13 +138,23 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n     }\n \n     fn visit_block(&mut self, block: &Block) {\n-        if let BlockSafety::ExplicitUnsafe(hir_id) = block.safety_mode {\n-            self.in_safety_context(\n-                SafetyContext::UnsafeBlock { span: block.span, hir_id, used: false },\n-                |this| visit::walk_block(this, block),\n-            );\n-        } else {\n-            visit::walk_block(self, block);\n+        match block.safety_mode {\n+            // compiler-generated unsafe code should not count towards the usefulness of\n+            // an outer unsafe block\n+            BlockSafety::BuiltinUnsafe => {\n+                self.in_safety_context(SafetyContext::BuiltinUnsafeBlock, |this| {\n+                    visit::walk_block(this, block)\n+                });\n+            }\n+            BlockSafety::ExplicitUnsafe(hir_id) => {\n+                self.in_safety_context(\n+                    SafetyContext::UnsafeBlock { span: block.span, hir_id, used: false },\n+                    |this| visit::walk_block(this, block),\n+                );\n+            }\n+            BlockSafety::Safe => {\n+                visit::walk_block(self, block);\n+            }\n         }\n     }\n \n@@ -250,6 +256,7 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n #[derive(Clone, Copy)]\n enum SafetyContext {\n     Safe,\n+    BuiltinUnsafeBlock,\n     UnsafeFn,\n     UnsafeBlock { span: Span, hir_id: hir::HirId, used: bool },\n }"}, {"sha": "2d9b5c1d98aab26f66c9db3f8f501e4948376455", "filename": "compiler/rustc_mir_build/src/thir/cx/block.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -26,7 +26,12 @@ impl<'tcx> Cx<'tcx> {\n             expr: block.expr.map(|expr| self.mirror_expr(expr)),\n             safety_mode: match block.rules {\n                 hir::BlockCheckMode::DefaultBlock => BlockSafety::Safe,\n-                hir::BlockCheckMode::UnsafeBlock(..) => BlockSafety::ExplicitUnsafe(block.hir_id),\n+                hir::BlockCheckMode::UnsafeBlock(hir::UnsafeSource::CompilerGenerated) => {\n+                    BlockSafety::BuiltinUnsafe\n+                }\n+                hir::BlockCheckMode::UnsafeBlock(hir::UnsafeSource::UserProvided) => {\n+                    BlockSafety::ExplicitUnsafe(block.hir_id)\n+                }\n             },\n         }\n     }"}, {"sha": "66f62d97b047d2242a76d68482bab813ed72f94e", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -523,6 +523,33 @@ impl Item {\n             .collect()\n     }\n \n+    /// Find a list of all link names, without finding their href.\n+    ///\n+    /// This is used for generating summary text, which does not include\n+    /// the link text, but does need to know which `[]`-bracketed names\n+    /// are actually links.\n+    crate fn link_names(&self, cache: &Cache) -> Vec<RenderedLink> {\n+        cache\n+            .intra_doc_links\n+            .get(&self.def_id)\n+            .map_or(&[][..], |v| v.as_slice())\n+            .iter()\n+            .filter_map(|ItemLink { link: s, link_text, did, fragment }| {\n+                // FIXME(83083): using fragments as a side-channel for\n+                // primitive names is very unfortunate\n+                if did.is_some() || fragment.is_some() {\n+                    Some(RenderedLink {\n+                        original_text: s.clone(),\n+                        new_text: link_text.clone(),\n+                        href: String::new(),\n+                    })\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect()\n+    }\n+\n     crate fn is_crate(&self) -> bool {\n         self.is_mod() && self.def_id.as_real().map_or(false, |did| did.index == CRATE_DEF_INDEX)\n     }"}, {"sha": "1750f05b4dcffa43bac275ae9314159b00c74acc", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -3,6 +3,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{ColorConfig, ErrorReported};\n use rustc_hir as hir;\n+use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::intravisit;\n use rustc_hir::{HirId, CRATE_HIR_ID};\n use rustc_interface::interface;\n@@ -13,6 +14,7 @@ use rustc_session::{lint, DiagnosticOutput, Session};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::sym;\n+use rustc_span::Symbol;\n use rustc_span::{BytePos, FileName, Pos, Span, DUMMY_SP};\n use rustc_target::spec::TargetTriple;\n use tempfile::Builder as TempFileBuilder;\n@@ -111,8 +113,6 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n     let res = interface::run_compiler(config, |compiler| {\n         compiler.enter(|queries| {\n             let _lower_to_hir = queries.lower_to_hir()?;\n-\n-            let crate_name = queries.crate_name()?.peek().to_string();\n             let mut global_ctxt = queries.global_ctxt()?.take();\n \n             let collector = global_ctxt.enter(|tcx| {\n@@ -123,7 +123,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n                 opts.display_warnings |= options.display_warnings;\n                 let enable_per_target_ignores = options.enable_per_target_ignores;\n                 let mut collector = Collector::new(\n-                    crate_name,\n+                    tcx.crate_name(LOCAL_CRATE),\n                     options,\n                     false,\n                     opts,\n@@ -293,7 +293,7 @@ struct UnusedExterns {\n \n fn run_test(\n     test: &str,\n-    cratename: &str,\n+    crate_name: &str,\n     line: usize,\n     options: Options,\n     should_panic: bool,\n@@ -312,7 +312,7 @@ fn run_test(\n     report_unused_externs: impl Fn(UnusedExterns),\n ) -> Result<(), TestFailure> {\n     let (test, line_offset, supports_color) =\n-        make_test(test, Some(cratename), as_test_harness, opts, edition, Some(test_id));\n+        make_test(test, Some(crate_name), as_test_harness, opts, edition, Some(test_id));\n \n     let output_file = outdir.path().join(\"rust_out\");\n \n@@ -479,7 +479,7 @@ fn run_test(\n /// lines before the test code begins as well as if the output stream supports colors or not.\n crate fn make_test(\n     s: &str,\n-    cratename: Option<&str>,\n+    crate_name: Option<&str>,\n     dont_insert_main: bool,\n     opts: &TestOptions,\n     edition: Edition,\n@@ -540,7 +540,7 @@ crate fn make_test(\n             let sess = ParseSess::with_span_handler(handler, sm);\n \n             let mut found_main = false;\n-            let mut found_extern_crate = cratename.is_none();\n+            let mut found_extern_crate = crate_name.is_none();\n             let mut found_macro = false;\n \n             let mut parser = match maybe_new_parser_from_source_str(&sess, filename, source) {\n@@ -567,13 +567,13 @@ crate fn make_test(\n \n                         if !found_extern_crate {\n                             if let ast::ItemKind::ExternCrate(original) = item.kind {\n-                                // This code will never be reached if `cratename` is none because\n+                                // This code will never be reached if `crate_name` is none because\n                                 // `found_extern_crate` is initialized to `true` if it is none.\n-                                let cratename = cratename.unwrap();\n+                                let crate_name = crate_name.unwrap();\n \n                                 match original {\n-                                    Some(name) => found_extern_crate = name.as_str() == cratename,\n-                                    None => found_extern_crate = item.ident.as_str() == cratename,\n+                                    Some(name) => found_extern_crate = name.as_str() == crate_name,\n+                                    None => found_extern_crate = item.ident.as_str() == crate_name,\n                                 }\n                             }\n                         }\n@@ -631,14 +631,14 @@ crate fn make_test(\n \n     // Don't inject `extern crate std` because it's already injected by the\n     // compiler.\n-    if !already_has_extern_crate && !opts.no_crate_inject && cratename != Some(\"std\") {\n-        if let Some(cratename) = cratename {\n+    if !already_has_extern_crate && !opts.no_crate_inject && crate_name != Some(\"std\") {\n+        if let Some(crate_name) = crate_name {\n             // Don't inject `extern crate` if the crate is never used.\n             // NOTE: this is terribly inaccurate because it doesn't actually\n             // parse the source, but only has false positives, not false\n             // negatives.\n-            if s.contains(cratename) {\n-                prog.push_str(&format!(\"extern crate r#{};\\n\", cratename));\n+            if s.contains(crate_name) {\n+                prog.push_str(&format!(\"extern crate r#{};\\n\", crate_name));\n                 line_offset += 1;\n             }\n         }\n@@ -797,7 +797,7 @@ crate struct Collector {\n     options: Options,\n     use_headers: bool,\n     enable_per_target_ignores: bool,\n-    cratename: String,\n+    crate_name: Symbol,\n     opts: TestOptions,\n     position: Span,\n     source_map: Option<Lrc<SourceMap>>,\n@@ -809,7 +809,7 @@ crate struct Collector {\n \n impl Collector {\n     crate fn new(\n-        cratename: String,\n+        crate_name: Symbol,\n         options: Options,\n         use_headers: bool,\n         opts: TestOptions,\n@@ -823,7 +823,7 @@ impl Collector {\n             options,\n             use_headers,\n             enable_per_target_ignores,\n-            cratename,\n+            crate_name,\n             opts,\n             position: DUMMY_SP,\n             source_map,\n@@ -871,7 +871,7 @@ impl Tester for Collector {\n     fn add_test(&mut self, test: String, config: LangString, line: usize) {\n         let filename = self.get_filename();\n         let name = self.generate_name(line, &filename);\n-        let cratename = self.cratename.to_string();\n+        let crate_name = self.crate_name.to_string();\n         let opts = self.opts.clone();\n         let edition = config.edition.unwrap_or(self.options.edition);\n         let options = self.options.clone();\n@@ -954,7 +954,7 @@ impl Tester for Collector {\n                 };\n                 let res = run_test(\n                     &test,\n-                    &cratename,\n+                    &crate_name,\n                     line,\n                     options,\n                     config.should_panic,"}, {"sha": "811f682920107a9ae37efa4ffbd2f189366944de", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -292,13 +292,14 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                     // which should not be indexed. The crate-item itself is\n                     // inserted later on when serializing the search-index.\n                     if item.def_id.index().map_or(false, |idx| idx != CRATE_DEF_INDEX) {\n+                        let desc = item.doc_value().map_or_else(String::new, |x| {\n+                            short_markdown_summary(&x.as_str(), &item.link_names(&self.cache))\n+                        });\n                         self.cache.search_index.push(IndexItem {\n                             ty: item.type_(),\n                             name: s.to_string(),\n                             path: path.join(\"::\"),\n-                            desc: item\n-                                .doc_value()\n-                                .map_or_else(String::new, |x| short_markdown_summary(&x.as_str())),\n+                            desc,\n                             parent,\n                             parent_idx: None,\n                             search_type: get_index_search_type(&item, &self.empty_cache, self.tcx),"}, {"sha": "bafb522f363383733ab5486e354be92f027fb9bd", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -1051,7 +1051,11 @@ impl MarkdownSummaryLine<'_> {\n ///\n /// Returns a tuple of the rendered HTML string and whether the output was shortened\n /// due to the provided `length_limit`.\n-fn markdown_summary_with_limit(md: &str, length_limit: usize) -> (String, bool) {\n+fn markdown_summary_with_limit(\n+    md: &str,\n+    link_names: &[RenderedLink],\n+    length_limit: usize,\n+) -> (String, bool) {\n     if md.is_empty() {\n         return (String::new(), false);\n     }\n@@ -1065,7 +1069,20 @@ fn markdown_summary_with_limit(md: &str, length_limit: usize) -> (String, bool)\n         *text_length += text.len();\n     }\n \n-    'outer: for event in Parser::new_ext(md, summary_opts()) {\n+    let mut replacer = |broken_link: BrokenLink<'_>| {\n+        if let Some(link) =\n+            link_names.iter().find(|link| &*link.original_text == broken_link.reference)\n+        {\n+            Some((link.href.as_str().into(), link.new_text.as_str().into()))\n+        } else {\n+            None\n+        }\n+    };\n+\n+    let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut replacer));\n+    let p = LinkReplacer::new(p, link_names);\n+\n+    'outer: for event in p {\n         match &event {\n             Event::Text(text) => {\n                 for word in text.split_inclusive(char::is_whitespace) {\n@@ -1121,8 +1138,8 @@ fn markdown_summary_with_limit(md: &str, length_limit: usize) -> (String, bool)\n /// Will shorten to 59 or 60 characters, including an ellipsis (\u2026) if it was shortened.\n ///\n /// See [`markdown_summary_with_limit`] for details about what is rendered and what is not.\n-crate fn short_markdown_summary(markdown: &str) -> String {\n-    let (mut s, was_shortened) = markdown_summary_with_limit(markdown, 59);\n+crate fn short_markdown_summary(markdown: &str, link_names: &[RenderedLink]) -> String {\n+    let (mut s, was_shortened) = markdown_summary_with_limit(markdown, link_names, 59);\n \n     if was_shortened {\n         s.push('\u2026');"}, {"sha": "d10da64ccfaa5447a50e4610d046e21e6e3dd520", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -221,7 +221,7 @@ fn test_header_ids_multiple_blocks() {\n #[test]\n fn test_short_markdown_summary() {\n     fn t(input: &str, expect: &str) {\n-        let output = short_markdown_summary(input);\n+        let output = short_markdown_summary(input, &[][..]);\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n@@ -232,6 +232,7 @@ fn test_short_markdown_summary() {\n     t(\"Hard-break  \\nsummary\", \"Hard-break summary\");\n     t(\"hello [Rust] :)\\n\\n[Rust]: https://www.rust-lang.org\", \"hello Rust :)\");\n     t(\"hello [Rust](https://www.rust-lang.org \\\"Rust\\\") :)\", \"hello Rust :)\");\n+    t(\"dud [link]\", \"dud [link]\");\n     t(\"code `let x = i32;` ...\", \"code <code>let x = i32;</code> \u2026\");\n     t(\"type `Type<'static>` ...\", \"type <code>Type<'static></code> \u2026\");\n     t(\"# top header\", \"top header\");\n@@ -259,6 +260,7 @@ fn test_plain_text_summary() {\n     t(\"Hard-break  \\nsummary\", \"Hard-break summary\");\n     t(\"hello [Rust] :)\\n\\n[Rust]: https://www.rust-lang.org\", \"hello Rust :)\");\n     t(\"hello [Rust](https://www.rust-lang.org \\\"Rust\\\") :)\", \"hello Rust :)\");\n+    t(\"dud [link]\", \"dud [link]\");\n     t(\"code `let x = i32;` ...\", \"code `let x = i32;` \u2026\");\n     t(\"type `Type<'static>` ...\", \"type `Type<'static>` \u2026\");\n     t(\"# top header\", \"top header\");"}, {"sha": "5b3c445013b54f4a6ecb6072a3b5bb702b9e2374", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -34,11 +34,14 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n     // has since been learned.\n     for &(did, ref item) in &cache.orphan_impl_items {\n         if let Some(&(ref fqp, _)) = cache.paths.get(&did) {\n+            let desc = item\n+                .doc_value()\n+                .map_or_else(String::new, |s| short_markdown_summary(&s, &item.link_names(&cache)));\n             cache.search_index.push(IndexItem {\n                 ty: item.type_(),\n                 name: item.name.unwrap().to_string(),\n                 path: fqp[..fqp.len() - 1].join(\"::\"),\n-                desc: item.doc_value().map_or_else(String::new, |s| short_markdown_summary(&s)),\n+                desc,\n                 parent: Some(did.into()),\n                 parent_idx: None,\n                 search_type: get_index_search_type(&item, cache, tcx),\n@@ -47,6 +50,11 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n         }\n     }\n \n+    let crate_doc = krate\n+        .module\n+        .doc_value()\n+        .map_or_else(String::new, |s| short_markdown_summary(&s, &krate.module.link_names(&cache)));\n+\n     let Cache { ref mut search_index, ref paths, .. } = *cache;\n \n     // Aliases added through `#[doc(alias = \"...\")]`. Since a few items can have the same alias,\n@@ -100,9 +108,6 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n         crate_items.push(&*item);\n     }\n \n-    let crate_doc =\n-        krate.module.doc_value().map_or_else(String::new, |s| short_markdown_summary(&s));\n-\n     struct CrateData<'a> {\n         doc: String,\n         items: Vec<&'a IndexItem>,"}, {"sha": "94a902a2d05225cb434b56454759d8b387457d31", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -25,10 +25,16 @@ static FILES_UNVERSIONED: Lazy<FxHashMap<&str, &[u8]>> = Lazy::new(|| {\n         \"FiraSans-Regular.woff\" => static_files::fira_sans::REGULAR,\n         \"FiraSans-Medium.woff\" => static_files::fira_sans::MEDIUM,\n         \"FiraSans-LICENSE.txt\" => static_files::fira_sans::LICENSE,\n+        \"SourceSerif4-Regular.ttf.woff2\" => static_files::source_serif_4::REGULAR2,\n+        \"SourceSerif4-Bold.ttf.woff2\" => static_files::source_serif_4::BOLD2,\n+        \"SourceSerif4-It.ttf.woff2\" => static_files::source_serif_4::ITALIC2,\n         \"SourceSerif4-Regular.ttf.woff\" => static_files::source_serif_4::REGULAR,\n         \"SourceSerif4-Bold.ttf.woff\" => static_files::source_serif_4::BOLD,\n         \"SourceSerif4-It.ttf.woff\" => static_files::source_serif_4::ITALIC,\n         \"SourceSerif4-LICENSE.md\" => static_files::source_serif_4::LICENSE,\n+        \"SourceCodePro-Regular.ttf.woff2\" => static_files::source_code_pro::REGULAR2,\n+        \"SourceCodePro-Semibold.ttf.woff2\" => static_files::source_code_pro::SEMIBOLD2,\n+        \"SourceCodePro-It.ttf.woff2\" => static_files::source_code_pro::ITALIC2,\n         \"SourceCodePro-Regular.ttf.woff\" => static_files::source_code_pro::REGULAR,\n         \"SourceCodePro-Semibold.ttf.woff\" => static_files::source_code_pro::SEMIBOLD,\n         \"SourceCodePro-It.ttf.woff\" => static_files::source_code_pro::ITALIC,"}, {"sha": "c2629a83f7092f112f3916d63a840be14d9ea759", "filename": "src/librustdoc/html/static/COPYRIGHT.txt", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -2,7 +2,8 @@ These documentation pages include resources by third parties. This copyright\n file applies only to those resources. The following third party resources are\n included, and carry their own copyright notices and license terms:\n \n-* Fira Sans (FiraSans-Regular.woff, FiraSans-Medium.woff):\n+* Fira Sans (FiraSans-Regular.woff2, FiraSans-Medium.woff2,\n+    FiraSans-Regular.woff, FiraSans-Medium.woff):\n \n     Copyright (c) 2014, Mozilla Foundation https://mozilla.org/\n     with Reserved Font Name Fira Sans.\n@@ -23,8 +24,10 @@ included, and carry their own copyright notices and license terms:\n     Copyright (c) Nicolas Gallagher and Jonathan Neal.\n     Licensed under the MIT license (see LICENSE-MIT.txt).\n \n-* Source Code Pro (SourceCodePro-Regular.ttf.woff,\n-    SourceCodePro-Semibold.ttf.woff, SourceCodePro-It.ttf.woff):\n+* Source Code Pro (SourceCodePro-Regular.ttf.woff2,\n+    SourceCodePro-Semibold.ttf.woff2, SourceCodePro-It.ttf.woff2,\n+    SourceCodePro-Regular.ttf.woff, SourceCodePro-Semibold.ttf.woff,\n+    SourceCodePro-It.ttf.woff):\n \n     Copyright 2010, 2012 Adobe Systems Incorporated (http://www.adobe.com/),\n     with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark\n@@ -33,8 +36,9 @@ included, and carry their own copyright notices and license terms:\n     Licensed under the SIL Open Font License, Version 1.1.\n     See SourceCodePro-LICENSE.txt.\n \n-* Source Serif 4 (SourceSerif4-Regular.ttf.woff, SourceSerif4-Bold.ttf.woff,\n-    SourceSerif4-It.ttf.woff):\n+* Source Serif 4 (SourceSerif4-Regular.ttf.woff2, SourceSerif4-Bold.ttf.woff2,\n+    SourceSerif4-It.ttf.woff2, SourceSerif4-Regular.ttf.woff,\n+    SourceSerif4-Bold.ttf.woff, SourceSerif4-It.ttf.woff):\n \n     Copyright 2014-2021 Adobe (http://www.adobe.com/), with Reserved Font Name\n     'Source'. All Rights Reserved. Source is a trademark of Adobe in the United"}, {"sha": "462c34efcd9d6b70b42359ca1a1d9476efe43eeb", "filename": "src/librustdoc/html/static/SourceCodePro-It.ttf.woff2", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-It.ttf.woff2", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-It.ttf.woff2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-It.ttf.woff2?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859"}, {"sha": "10b558e0b69a74b8329766fffbd5f64356c7230d", "filename": "src/librustdoc/html/static/SourceCodePro-Regular.ttf.woff2", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.ttf.woff2", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.ttf.woff2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.ttf.woff2?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859"}, {"sha": "5ec64eef0ec9423bf81951f21ff4aa0392415e98", "filename": "src/librustdoc/html/static/SourceCodePro-Semibold.ttf.woff2", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.ttf.woff2", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.ttf.woff2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.ttf.woff2?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859"}, {"sha": "db57d21455c94e80aa7cca25cac803a08e1b01ec", "filename": "src/librustdoc/html/static/SourceSerif4-Bold.ttf.woff2", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-Bold.ttf.woff2", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-Bold.ttf.woff2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-Bold.ttf.woff2?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859"}, {"sha": "1cbc021a3aa22e1469542d531e9115fb78d497ec", "filename": "src/librustdoc/html/static/SourceSerif4-It.ttf.woff2", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-It.ttf.woff2", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-It.ttf.woff2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-It.ttf.woff2?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859"}, {"sha": "2db73fe2b49e8cfcaaf1d5311a610e730b8ed502", "filename": "src/librustdoc/html/static/SourceSerif4-Regular.ttf.woff2", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-Regular.ttf.woff2", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-Regular.ttf.woff2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-Regular.ttf.woff2?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859"}, {"sha": "9e1fcb929c54d3f160ba3605f5b1f02ee0cb50c7", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -23,21 +23,27 @@\n \tfont-family: 'Source Serif 4';\n \tfont-style: normal;\n \tfont-weight: 400;\n-\tsrc: local('Source Serif 4'), url(\"SourceSerif4-Regular.ttf.woff\") format('woff');\n+\tsrc: local('Source Serif 4'),\n+\t\turl(\"SourceSerif4-Regular.ttf.woff2\") format(\"woff2\"),\n+\t\turl(\"SourceSerif4-Regular.ttf.woff\") format(\"woff\");\n \tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Serif 4';\n \tfont-style: italic;\n \tfont-weight: 400;\n-\tsrc: local('Source Serif 4 Italic'), url(\"SourceSerif4-It.ttf.woff\") format('woff');\n+\tsrc: local('Source Serif 4 Italic'),\n+\t\turl(\"SourceSerif4-It.ttf.woff2\") format(\"woff2\"),\n+\t\turl(\"SourceSerif4-It.ttf.woff\") format(\"woff\");\n \tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Serif 4';\n \tfont-style: normal;\n \tfont-weight: 700;\n-\tsrc: local('Source Serif 4 Bold'), url(\"SourceSerif4-Bold.ttf.woff\") format('woff');\n+\tsrc: local('Source Serif 4 Bold'),\n+\t\turl(\"SourceSerif4-Bold.ttf.woff2\") format(\"woff2\"),\n+\t\turl(\"SourceSerif4-Bold.ttf.woff\") format(\"woff\");\n \tfont-display: swap;\n }\n \n@@ -48,21 +54,24 @@\n \tfont-weight: 400;\n \t/* Avoid using locally installed font because bad versions are in circulation:\n \t * see https://github.com/rust-lang/rust/issues/24355 */\n-\tsrc: url(\"SourceCodePro-Regular.ttf.woff\") format('woff');\n+\tsrc: url(\"SourceCodePro-Regular.ttf.woff2\") format(\"woff2\"),\n+\t\turl(\"SourceCodePro-Regular.ttf.woff\") format(\"woff\");\n \tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Code Pro';\n \tfont-style: italic;\n \tfont-weight: 400;\n-\tsrc: url(\"SourceCodePro-It.ttf.woff\") format('woff');\n+\tsrc: url(\"SourceCodePro-It.ttf.woff2\") format(\"woff2\"),\n+\t\turl(\"SourceCodePro-It.ttf.woff\") format(\"woff\");\n \tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Code Pro';\n \tfont-style: normal;\n \tfont-weight: 600;\n-\tsrc: url(\"SourceCodePro-Semibold.ttf.woff\") format('woff');\n+\tsrc: url(\"SourceCodePro-Semibold.ttf.woff2\") format(\"woff2\"),\n+\t\turl(\"SourceCodePro-Semibold.ttf.woff\") format(\"woff\");\n \tfont-display: swap;\n }\n "}, {"sha": "4443c74834d04240729f90ec7530bf33442b0567", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -102,12 +102,24 @@ crate mod source_serif_4 {\n     /// The file `SourceSerif4-Regular.ttf.woff`, the Regular variant of the Source Serif 4 font.\n     crate static REGULAR: &[u8] = include_bytes!(\"static/SourceSerif4-Regular.ttf.woff\");\n \n+    /// The file `SourceSerif4-Regular.ttf.woff2`, the Regular variant of the Source Serif 4 font in\n+    /// woff2.\n+    crate static REGULAR2: &[u8] = include_bytes!(\"static/SourceSerif4-Regular.ttf.woff2\");\n+\n     /// The file `SourceSerif4-Bold.ttf.woff`, the Bold variant of the Source Serif 4 font.\n     crate static BOLD: &[u8] = include_bytes!(\"static/SourceSerif4-Bold.ttf.woff\");\n \n+    /// The file `SourceSerif4-Bold.ttf.woff2`, the Bold variant of the Source Serif 4 font in\n+    /// woff2.\n+    crate static BOLD2: &[u8] = include_bytes!(\"static/SourceSerif4-Bold.ttf.woff2\");\n+\n     /// The file `SourceSerif4-It.ttf.woff`, the Italic variant of the Source Serif 4 font.\n     crate static ITALIC: &[u8] = include_bytes!(\"static/SourceSerif4-It.ttf.woff\");\n \n+    /// The file `SourceSerif4-It.ttf.woff2`, the Italic variant of the Source Serif 4 font in\n+    /// woff2.\n+    crate static ITALIC2: &[u8] = include_bytes!(\"static/SourceSerif4-It.ttf.woff2\");\n+\n     /// The file `SourceSerif4-LICENSE.txt`, the license text for the Source Serif 4 font.\n     crate static LICENSE: &[u8] = include_bytes!(\"static/SourceSerif4-LICENSE.md\");\n }\n@@ -117,13 +129,25 @@ crate mod source_code_pro {\n     /// The file `SourceCodePro-Regular.ttf.woff`, the Regular variant of the Source Code Pro font.\n     crate static REGULAR: &[u8] = include_bytes!(\"static/SourceCodePro-Regular.ttf.woff\");\n \n+    /// The file `SourceCodePro-Regular.ttf.woff2`, the Regular variant of the Source Code Pro font\n+    /// in woff2.\n+    crate static REGULAR2: &[u8] = include_bytes!(\"static/SourceCodePro-Regular.ttf.woff2\");\n+\n     /// The file `SourceCodePro-Semibold.ttf.woff`, the Semibold variant of the Source Code Pro\n     /// font.\n     crate static SEMIBOLD: &[u8] = include_bytes!(\"static/SourceCodePro-Semibold.ttf.woff\");\n \n+    /// The file `SourceCodePro-Semibold.ttf.woff2`, the Semibold variant of the Source Code Pro\n+    /// font in woff2.\n+    crate static SEMIBOLD2: &[u8] = include_bytes!(\"static/SourceCodePro-Semibold.ttf.woff2\");\n+\n     /// The file `SourceCodePro-It.ttf.woff`, the Italic variant of the Source Code Pro font.\n     crate static ITALIC: &[u8] = include_bytes!(\"static/SourceCodePro-It.ttf.woff\");\n \n+    /// The file `SourceCodePro-It.ttf.woff2`, the Italic variant of the Source Code Pro font in\n+    /// woff2.\n+    crate static ITALIC2: &[u8] = include_bytes!(\"static/SourceCodePro-It.ttf.woff2\");\n+\n     /// The file `SourceCodePro-LICENSE.txt`, the license text of the Source Code Pro font.\n     crate static LICENSE: &[u8] = include_bytes!(\"static/SourceCodePro-LICENSE.txt\");\n }"}, {"sha": "5da3a75e876315ed2173c5c86280d8151daaa343", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -4,6 +4,7 @@ use std::path::Path;\n \n use rustc_span::edition::Edition;\n use rustc_span::source_map::DUMMY_SP;\n+use rustc_span::Symbol;\n \n use crate::config::{Options, RenderOptions};\n use crate::doctest::{Collector, TestOptions};\n@@ -121,7 +122,7 @@ crate fn test(mut options: Options) -> Result<(), String> {\n     opts.no_crate_inject = true;\n     opts.display_warnings = options.display_warnings;\n     let mut collector = Collector::new(\n-        options.input.display().to_string(),\n+        Symbol::intern(&options.input.display().to_string()),\n         options.clone(),\n         true,\n         opts,"}, {"sha": "dfb11e80414c1abc686766ad6575e1cc3fe20620", "filename": "src/test/rustdoc-js/summaries.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Frustdoc-js%2Fsummaries.js", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Frustdoc-js%2Fsummaries.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fsummaries.js?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -5,7 +5,7 @@ const QUERY = ['summaries', 'summaries::Sidebar', 'summaries::Sidebar2'];\n const EXPECTED = [\n     {\n         'others': [\n-           { 'path': '', 'name': 'summaries', 'desc': 'This <em>summary</em> has a link and <code>code</code>.' },\n+           { 'path': '', 'name': 'summaries', 'desc': 'This <em>summary</em> has a link, [<code>code</code>], and <code>Sidebar2</code> intra-doc.' },\n         ],\n     },\n     {"}, {"sha": "418c9f8d0edd02dd969fb56458f1002c652aee6e", "filename": "src/test/rustdoc-js/summaries.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Frustdoc-js%2Fsummaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Frustdoc-js%2Fsummaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fsummaries.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -1,9 +1,11 @@\n #![crate_type = \"lib\"]\n #![crate_name = \"summaries\"]\n \n-//! This *summary* has a [link] and `code`.\n+//! This *summary* has a [link], [`code`], and [`Sidebar2`] intra-doc.\n //!\n-//! This is the second paragraph.\n+//! This is the second paragraph. It should not be rendered.\n+//! To test that intra-doc links are resolved properly, [`code`] should render\n+//! the square brackets, and [`Sidebar2`] should not.\n //!\n //! [link]: https://example.com\n "}, {"sha": "4bbec203c4e6483a1169a0e451a88a4f136459b4", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.fixed?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -3,7 +3,8 @@\n // to detect or fix uses of `dyn` under a macro. Since we are testing\n // this file via `rustfix`, we want the rustfix output to be\n // compilable; so the macros here carefully use `dyn` \"correctly.\"\n-\n+//\n+// edition:2015\n // run-rustfix\n \n #![allow(non_camel_case_types)]"}, {"sha": "bc1dd4d1d08f7d7af8d86f0b6a80ffb2b65579d8", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -3,7 +3,8 @@\n // to detect or fix uses of `dyn` under a macro. Since we are testing\n // this file via `rustfix`, we want the rustfix output to be\n // compilable; so the macros here carefully use `dyn` \"correctly.\"\n-\n+//\n+// edition:2015\n // run-rustfix\n \n #![allow(non_camel_case_types)]"}, {"sha": "32d690fa563412080ed64060defafa59ff7ce36b", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -1,19 +1,19 @@\n error: `dyn` is a keyword in the 2018 edition\n-  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:13:13\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:14:13\n    |\n LL |     pub mod dyn {\n    |             ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n note: the lint level is defined here\n-  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:10:9\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:11:9\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n-  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:16:20\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:17:20\n    |\n LL |         pub struct dyn;\n    |                    ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n@@ -22,7 +22,7 @@ LL |         pub struct dyn;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n-  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:21:16\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:22:16\n    |\n LL | use outer_mod::dyn::dyn;\n    |                ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n@@ -31,7 +31,7 @@ LL | use outer_mod::dyn::dyn;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n-  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:21:21\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:22:21\n    |\n LL | use outer_mod::dyn::dyn;\n    |                     ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n@@ -40,7 +40,7 @@ LL | use outer_mod::dyn::dyn;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n-  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:28:11\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:29:11\n    |\n LL |     match dyn { dyn => {} }\n    |           ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n@@ -49,7 +49,7 @@ LL |     match dyn { dyn => {} }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n-  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:28:17\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:29:17\n    |\n LL |     match dyn { dyn => {} }\n    |                 ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n@@ -58,7 +58,7 @@ LL |     match dyn { dyn => {} }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n-  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:33:17\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:34:17\n    |\n LL |     macro_defn::dyn();\n    |                 ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n@@ -67,7 +67,7 @@ LL |     macro_defn::dyn();\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n-  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:43:18\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:44:18\n    |\n LL |     macro_rules! dyn {\n    |                  ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n@@ -76,7 +76,7 @@ LL |     macro_rules! dyn {\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n-  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:51:12\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:52:12\n    |\n LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n    |            ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n@@ -85,7 +85,7 @@ LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n-  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:51:34\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:52:34\n    |\n LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n    |                                  ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n@@ -94,7 +94,7 @@ LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n-  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:51:39\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:52:39\n    |\n LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n    |                                       ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n@@ -103,7 +103,7 @@ LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n-  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:58:22\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:59:22\n    |\n LL |         ::outer_mod::dyn::dyn\n    |                      ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n@@ -112,7 +112,7 @@ LL |         ::outer_mod::dyn::dyn\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n-  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:58:27\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:59:27\n    |\n LL |         ::outer_mod::dyn::dyn\n    |                           ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n@@ -121,7 +121,7 @@ LL |         ::outer_mod::dyn::dyn\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n-  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:67:23\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:68:23\n    |\n LL |     pub fn boxed() -> dyn!(\n    |                       ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`"}, {"sha": "bda2ed17ecfab458018ea611c51ec8626a80ce7a", "filename": "src/test/ui/dyn-keyword/dyn-2015-idents-in-decl-macros-unlinted.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-idents-in-decl-macros-unlinted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-idents-in-decl-macros-unlinted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-idents-in-decl-macros-unlinted.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -1,11 +1,12 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n-\n // Under the 2015 edition with the keyword_idents lint, `dyn` is\n // not entirely acceptable as an identifier.\n //\n // We currently do not attempt to detect or fix uses of `dyn` as an\n // identifier under a macro, including under the declarative `macro`\n // forms from macros 1.2 and macros 2.0.\n+//\n+// check-pass\n+// edition:2015\n \n #![feature(decl_macro)]\n #![allow(non_camel_case_types)]"}, {"sha": "472f6b5c8e5141fc59716eef3203b9d511c50720", "filename": "src/test/ui/dyn-keyword/dyn-2015-idents-in-macros-unlinted.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-idents-in-macros-unlinted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-idents-in-macros-unlinted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-idents-in-macros-unlinted.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -1,10 +1,11 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n-\n // Under the 2015 edition with the keyword_idents lint, `dyn` is\n // not entirely acceptable as an identifier.\n //\n // We currently do not attempt to detect or fix uses of `dyn` as an\n // identifier under a macro.\n+//\n+// check-pass\n+// edition:2015\n \n #![allow(non_camel_case_types)]\n #![deny(keyword_idents)]"}, {"sha": "d6a33c08d199faa6302cf98ce9798c379094f5f8", "filename": "src/test/ui/dyn-keyword/dyn-2015-no-warnings-without-lints.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-no-warnings-without-lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-no-warnings-without-lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-no-warnings-without-lints.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -1,7 +1,8 @@\n // Under the 2015 edition without the keyword_idents lint, `dyn` is\n // entirely acceptable as an identifier.\n-\n-// build-pass (FIXME(62277): could be check-pass?)\n+//\n+// check-pass\n+// edition:2015\n \n #![allow(non_camel_case_types)]\n "}, {"sha": "2b46f57c2e26f8f06f86f512f2768004b0d4a9a8", "filename": "src/test/ui/dyn-keyword/issue-56327-dyn-trait-in-macro-is-okay.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Fdyn-keyword%2Fissue-56327-dyn-trait-in-macro-is-okay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Fdyn-keyword%2Fissue-56327-dyn-trait-in-macro-is-okay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fissue-56327-dyn-trait-in-macro-is-okay.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -1,5 +1,6 @@\n // check-pass\n-\n+// edition:2015\n+//\n // rust-lang/rust#56327: Some occurrences of `dyn` within a macro are\n // not instances of identifiers, and thus should *not* be caught by the\n // keyword_ident lint."}, {"sha": "69242fd715cef30b81a032342f3137ca227e9ea4", "filename": "src/test/ui/editions/edition-feature-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Feditions%2Fedition-feature-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Feditions%2Fedition-feature-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-feature-ok.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rust_2018_preview)]\n "}, {"sha": "3fffb30c612d02d8e2caf0f7d416ce5d435c3466", "filename": "src/test/ui/editions/edition-imports-virtual-2015-ambiguity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-ambiguity.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // edition:2018\n // compile-flags:--extern edition_imports_2015\n // aux-build:edition-imports-2015.rs"}, {"sha": "b2695bea5c39dc0d408d2f0bf2eaf8ce4837625b", "filename": "src/test/ui/editions/edition-keywords-2015-2015-expansion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-expansion.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -1,6 +1,6 @@\n // edition:2015\n // aux-build:edition-kw-macro-2015.rs\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![allow(keyword_idents)]\n "}, {"sha": "707d8e95c14140a37e7dfa78f504b733ded708bd", "filename": "src/test/ui/editions/edition-keywords-2018-2015-expansion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-expansion.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n // aux-build:edition-kw-macro-2015.rs\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![allow(keyword_idents)]\n "}, {"sha": "7ce638832b06b4f10a97dcb327a783091a5acd1f", "filename": "src/test/ui/traits/operator-overloading-issue-52025.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Ftraits%2Foperator-overloading-issue-52025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Ftraits%2Foperator-overloading-issue-52025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Foperator-overloading-issue-52025.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -0,0 +1,57 @@\n+// only-x86_64\n+// build-pass\n+\n+use std::arch::x86_64::*;\n+use std::fmt::Debug;\n+use std::ops::*;\n+\n+pub trait Simd {\n+    type Vf32: Copy + Debug + Add<Self::Vf32, Output = Self::Vf32> + Add<f32, Output = Self::Vf32>;\n+\n+    unsafe fn set1_ps(a: f32) -> Self::Vf32;\n+    unsafe fn add_ps(a: Self::Vf32, b: Self::Vf32) -> Self::Vf32;\n+}\n+\n+#[derive(Copy, Debug, Clone)]\n+pub struct F32x4(pub __m128);\n+\n+impl Add<F32x4> for F32x4 {\n+    type Output = F32x4;\n+\n+    fn add(self, rhs: F32x4) -> F32x4 {\n+        F32x4(unsafe { _mm_add_ps(self.0, rhs.0) })\n+    }\n+}\n+\n+impl Add<f32> for F32x4 {\n+    type Output = F32x4;\n+    fn add(self, rhs: f32) -> F32x4 {\n+        F32x4(unsafe { _mm_add_ps(self.0, _mm_set1_ps(rhs)) })\n+    }\n+}\n+\n+pub struct Sse2;\n+impl Simd for Sse2 {\n+    type Vf32 = F32x4;\n+\n+    #[inline(always)]\n+    unsafe fn set1_ps(a: f32) -> Self::Vf32 {\n+        F32x4(_mm_set1_ps(a))\n+    }\n+\n+    #[inline(always)]\n+    unsafe fn add_ps(a: Self::Vf32, b: Self::Vf32) -> Self::Vf32 {\n+        F32x4(_mm_add_ps(a.0, b.0))\n+    }\n+}\n+\n+unsafe fn test<S: Simd>() -> S::Vf32 {\n+    let a = S::set1_ps(3.0);\n+    let b = S::set1_ps(2.0);\n+    let result = a + b;\n+    result\n+}\n+\n+fn main() {\n+    println!(\"{:?}\", unsafe { test::<Sse2>() });\n+}"}, {"sha": "29bd84cd0db53834fde1c6364b4eff790e89d4d5", "filename": "src/test/ui/unsafe/unsafe-around-compiler-generated-unsafe.mir.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.mir.stderr?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -1,11 +1,11 @@\n error: unnecessary `unsafe` block\n-  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:9:5\n+  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:9:9\n    |\n-LL |     unsafe { println!(\"foo\"); }\n-   |     ^^^^^^ unnecessary `unsafe` block\n+LL |         unsafe { async {}.await; }\n+   |         ^^^^^^ unnecessary `unsafe` block\n    |\n note: the lint level is defined here\n-  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:6:9\n+  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:5:9\n    |\n LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^"}, {"sha": "e9c7efb9e8b80e17bf07fa1d5ac633f417ef4904", "filename": "src/test/ui/unsafe/unsafe-around-compiler-generated-unsafe.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.rs?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -1,10 +1,11 @@\n-// issue #12418\n-\n+// edition:2018\n // revisions: mir thir\n // [thir]compile-flags: -Z thir-unsafeck\n \n #![deny(unused_unsafe)]\n \n fn main() {\n-    unsafe { println!(\"foo\"); } //~ ERROR unnecessary `unsafe`\n+    let _ = async {\n+        unsafe { async {}.await; } //~ ERROR unnecessary `unsafe`\n+    };\n }"}, {"sha": "29bd84cd0db53834fde1c6364b4eff790e89d4d5", "filename": "src/test/ui/unsafe/unsafe-around-compiler-generated-unsafe.thir.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3487be11d5f3c9afc4d8e44438cdd2af1e98c859/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-around-compiler-generated-unsafe.thir.stderr?ref=3487be11d5f3c9afc4d8e44438cdd2af1e98c859", "patch": "@@ -1,11 +1,11 @@\n error: unnecessary `unsafe` block\n-  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:9:5\n+  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:9:9\n    |\n-LL |     unsafe { println!(\"foo\"); }\n-   |     ^^^^^^ unnecessary `unsafe` block\n+LL |         unsafe { async {}.await; }\n+   |         ^^^^^^ unnecessary `unsafe` block\n    |\n note: the lint level is defined here\n-  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:6:9\n+  --> $DIR/unsafe-around-compiler-generated-unsafe.rs:5:9\n    |\n LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^"}]}