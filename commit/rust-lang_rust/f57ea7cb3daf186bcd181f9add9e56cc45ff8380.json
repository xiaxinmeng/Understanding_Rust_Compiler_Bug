{"sha": "f57ea7cb3daf186bcd181f9add9e56cc45ff8380", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1N2VhN2NiM2RhZjE4NmJjZDE4MWY5YWRkOWU1NmNjNDVmZjgzODA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-01-27T19:37:17Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-01-27T19:38:28Z"}, "message": "Make `+` in `impl/dyn Trait` non-associative", "tree": {"sha": "2bfbc11bacea93adb416094b11a8e79743f9533d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bfbc11bacea93adb416094b11a8e79743f9533d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f57ea7cb3daf186bcd181f9add9e56cc45ff8380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f57ea7cb3daf186bcd181f9add9e56cc45ff8380", "html_url": "https://github.com/rust-lang/rust/commit/f57ea7cb3daf186bcd181f9add9e56cc45ff8380", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f57ea7cb3daf186bcd181f9add9e56cc45ff8380/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d79f7cde061f18d354d914393640f9c1aacf45a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d79f7cde061f18d354d914393640f9c1aacf45a8", "html_url": "https://github.com/rust-lang/rust/commit/d79f7cde061f18d354d914393640f9c1aacf45a8"}], "stats": {"total": 116, "additions": 106, "deletions": 10}, "files": [{"sha": "0b57d781412f78c56e97dde9c7419f836fd8e7fa", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f57ea7cb3daf186bcd181f9add9e56cc45ff8380/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57ea7cb3daf186bcd181f9add9e56cc45ff8380/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f57ea7cb3daf186bcd181f9add9e56cc45ff8380", "patch": "@@ -1528,6 +1528,7 @@ impl<'a> Parser<'a> {\n         maybe_whole!(self, NtTy, |x| x);\n \n         let lo = self.span;\n+        let mut impl_dyn_multi = false;\n         let node = if self.eat(&token::OpenDelim(token::Paren)) {\n             // `(TYPE)` is a parenthesized type.\n             // `(TYPE,)` is a tuple with a single field of type TYPE.\n@@ -1614,12 +1615,17 @@ impl<'a> Parser<'a> {\n                 self.parse_remaining_bounds(lifetime_defs, path, lo, parse_plus)?\n             }\n         } else if self.eat_keyword(keywords::Impl) {\n-            TyKind::ImplTrait(self.parse_ty_param_bounds_common(allow_plus)?)\n+            // Always parse bounds greedily for better error recovery.\n+            let bounds = self.parse_ty_param_bounds()?;\n+            impl_dyn_multi = bounds.len() > 1 || self.prev_token_kind == PrevTokenKind::Plus;\n+            TyKind::ImplTrait(bounds)\n         } else if self.check_keyword(keywords::Dyn) &&\n                   self.look_ahead(1, |t| t.can_begin_bound() && !can_continue_type_after_ident(t)) {\n             self.bump(); // `dyn`\n-            TyKind::TraitObject(self.parse_ty_param_bounds_common(allow_plus)?,\n-                                TraitObjectSyntax::Dyn)\n+            // Always parse bounds greedily for better error recovery.\n+            let bounds = self.parse_ty_param_bounds()?;\n+            impl_dyn_multi = bounds.len() > 1 || self.prev_token_kind == PrevTokenKind::Plus;\n+            TyKind::TraitObject(bounds, TraitObjectSyntax::Dyn)\n         } else if self.check(&token::Question) ||\n                   self.check_lifetime() && self.look_ahead(1, |t| t == &token::BinOp(token::Plus)) {\n             // Bound list (trait object type)\n@@ -1655,6 +1661,7 @@ impl<'a> Parser<'a> {\n         let ty = Ty { node, span, id: ast::DUMMY_NODE_ID };\n \n         // Try to recover from use of `+` with incorrect priority.\n+        self.maybe_report_ambiguous_plus(allow_plus, impl_dyn_multi, &ty);\n         self.maybe_recover_from_bad_type_plus(allow_plus, &ty)?;\n         let ty = self.maybe_recover_from_bad_qpath(ty, allow_qpath_recovery)?;\n \n@@ -1672,6 +1679,15 @@ impl<'a> Parser<'a> {\n         Ok(TyKind::TraitObject(bounds, TraitObjectSyntax::None))\n     }\n \n+    fn maybe_report_ambiguous_plus(&mut self, allow_plus: bool, impl_dyn_multi: bool, ty: &Ty) {\n+        if !allow_plus && impl_dyn_multi {\n+            let sum_with_parens = format!(\"({})\", pprust::ty_to_string(&ty));\n+            self.struct_span_err(ty.span, \"ambiguous `+` in a type\")\n+                .span_suggestion(ty.span, \"use parentheses to disambiguate\", sum_with_parens)\n+                .emit();\n+        }\n+    }\n+\n     fn maybe_recover_from_bad_type_plus(&mut self, allow_plus: bool, ty: &Ty) -> PResult<'a, ()> {\n         // Do not add `+` to expected tokens.\n         if !allow_plus || self.token != token::BinOp(token::Plus) {"}, {"sha": "f451123ca27fd83e9dee2153b4997f8879f46a0d", "filename": "src/test/ui/impl-trait/impl-trait-plus-priority.rs", "status": "renamed", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f57ea7cb3daf186bcd181f9add9e56cc45ff8380/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-plus-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57ea7cb3daf186bcd181f9add9e56cc45ff8380/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-plus-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-plus-priority.rs?ref=f57ea7cb3daf186bcd181f9add9e56cc45ff8380", "patch": "@@ -10,11 +10,15 @@\n \n // compile-flags: -Z parse-only -Z continue-parse-after-error\n \n+fn f() -> impl A + {} // OK\n fn f() -> impl A + B {} // OK\n fn f() -> dyn A + B {} // OK\n fn f() -> A + B {} // OK\n \n impl S {\n+    fn f(self) -> impl A + { // OK\n+        let _ = |a, b| -> impl A + {}; // OK\n+    }\n     fn f(self) -> impl A + B { // OK\n         let _ = |a, b| -> impl A + B {}; // OK\n     }\n@@ -26,21 +30,29 @@ impl S {\n     }\n }\n \n+type A = fn() -> impl A +;\n+//~^ ERROR ambiguous `+` in a type\n type A = fn() -> impl A + B;\n-//~^ ERROR expected a path on the left-hand side of `+`, not `fn() -> impl A`\n+//~^ ERROR ambiguous `+` in a type\n type A = fn() -> dyn A + B;\n-//~^ ERROR expected a path on the left-hand side of `+`, not `fn() -> dyn A`\n+//~^ ERROR ambiguous `+` in a type\n type A = fn() -> A + B;\n //~^ ERROR expected a path on the left-hand side of `+`, not `fn() -> A`\n \n-type A = Fn() -> impl A + B; // OK, interpreted as `(Fn() -> impl A) + B`\n-type A = Fn() -> dyn A + B; // OK, interpreted as `(Fn() -> dyn A) + B`\n-type A = Fn() -> A + B; // OK, interpreted as `(Fn() -> A) + B`\n+type A = Fn() -> impl A +;\n+//~^ ERROR ambiguous `+` in a type\n+type A = Fn() -> impl A + B;\n+//~^ ERROR ambiguous `+` in a type\n+type A = Fn() -> dyn A + B;\n+//~^ ERROR ambiguous `+` in a type\n+type A = Fn() -> A + B; // OK, interpreted as `(Fn() -> A) + B` for compatibility\n \n+type A = &impl A +;\n+//~^ ERROR ambiguous `+` in a type\n type A = &impl A + B;\n-//~^ ERROR expected a path on the left-hand side of `+`, not `&impl A`\n+//~^ ERROR ambiguous `+` in a type\n type A = &dyn A + B;\n-//~^ ERROR expected a path on the left-hand side of `+`, not `&dyn A`\n+//~^ ERROR ambiguous `+` in a type\n type A = &A + B;\n //~^ ERROR expected a path on the left-hand side of `+`, not `&A`\n ", "previous_filename": "src/test/parse-fail/impl-trait-plus-priority.rs"}, {"sha": "885c3941971bdac51f0379e62971a3d3bd36f939", "filename": "src/test/ui/impl-trait/impl-trait-plus-priority.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f57ea7cb3daf186bcd181f9add9e56cc45ff8380/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-plus-priority.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f57ea7cb3daf186bcd181f9add9e56cc45ff8380/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-plus-priority.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-plus-priority.stderr?ref=f57ea7cb3daf186bcd181f9add9e56cc45ff8380", "patch": "@@ -0,0 +1,68 @@\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-trait-plus-priority.rs:33:18\n+   |\n+33 | type A = fn() -> impl A +;\n+   |                  ^^^^^^^^ help: use parentheses to disambiguate: `(impl A)`\n+\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-trait-plus-priority.rs:35:18\n+   |\n+35 | type A = fn() -> impl A + B;\n+   |                  ^^^^^^^^^^ help: use parentheses to disambiguate: `(impl A + B)`\n+\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-trait-plus-priority.rs:37:18\n+   |\n+37 | type A = fn() -> dyn A + B;\n+   |                  ^^^^^^^^^ help: use parentheses to disambiguate: `(dyn A + B)`\n+\n+error[E0178]: expected a path on the left-hand side of `+`, not `fn() -> A`\n+  --> $DIR/impl-trait-plus-priority.rs:39:10\n+   |\n+39 | type A = fn() -> A + B;\n+   |          ^^^^^^^^^^^^^ perhaps you forgot parentheses?\n+\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-trait-plus-priority.rs:42:18\n+   |\n+42 | type A = Fn() -> impl A +;\n+   |                  ^^^^^^^^ help: use parentheses to disambiguate: `(impl A)`\n+\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-trait-plus-priority.rs:44:18\n+   |\n+44 | type A = Fn() -> impl A + B;\n+   |                  ^^^^^^^^^^ help: use parentheses to disambiguate: `(impl A + B)`\n+\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-trait-plus-priority.rs:46:18\n+   |\n+46 | type A = Fn() -> dyn A + B;\n+   |                  ^^^^^^^^^ help: use parentheses to disambiguate: `(dyn A + B)`\n+\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-trait-plus-priority.rs:50:11\n+   |\n+50 | type A = &impl A +;\n+   |           ^^^^^^^^ help: use parentheses to disambiguate: `(impl A)`\n+\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-trait-plus-priority.rs:52:11\n+   |\n+52 | type A = &impl A + B;\n+   |           ^^^^^^^^^^ help: use parentheses to disambiguate: `(impl A + B)`\n+\n+error: ambiguous `+` in a type\n+  --> $DIR/impl-trait-plus-priority.rs:54:11\n+   |\n+54 | type A = &dyn A + B;\n+   |           ^^^^^^^^^ help: use parentheses to disambiguate: `(dyn A + B)`\n+\n+error[E0178]: expected a path on the left-hand side of `+`, not `&A`\n+  --> $DIR/impl-trait-plus-priority.rs:56:10\n+   |\n+56 | type A = &A + B;\n+   |          ^^^^^^ help: try adding parentheses: `&(A + B)`\n+\n+error: aborting due to 11 previous errors\n+"}]}