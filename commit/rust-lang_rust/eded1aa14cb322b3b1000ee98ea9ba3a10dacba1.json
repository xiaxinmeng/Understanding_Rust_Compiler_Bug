{"sha": "eded1aa14cb322b3b1000ee98ea9ba3a10dacba1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZWQxYWExNGNiMzIyYjNiMTAwMGVlOThlYTliYTNhMTBkYWNiYTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-04T14:12:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-04T14:12:14Z"}, "message": "Auto merge of #51870 - nnethercote:reuse-DefsUsesVisitor, r=nikomatsakis\n\nReuse the `DefsUsesVisitor` in `simulate_block()`.\n\nThis avoids a bunch of allocations for the bitsets within it,\nspeeding up a number of NLL benchmarks, the best by 1%.\n\nr? @nikomatsakis", "tree": {"sha": "f28d503bbf907b054b4c9a0af5bd2db2bade882a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f28d503bbf907b054b4c9a0af5bd2db2bade882a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eded1aa14cb322b3b1000ee98ea9ba3a10dacba1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eded1aa14cb322b3b1000ee98ea9ba3a10dacba1", "html_url": "https://github.com/rust-lang/rust/commit/eded1aa14cb322b3b1000ee98ea9ba3a10dacba1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eded1aa14cb322b3b1000ee98ea9ba3a10dacba1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a22bcd8aab2905f6f5496c1ae66a45ba60ca4c90", "url": "https://api.github.com/repos/rust-lang/rust/commits/a22bcd8aab2905f6f5496c1ae66a45ba60ca4c90", "html_url": "https://github.com/rust-lang/rust/commit/a22bcd8aab2905f6f5496c1ae66a45ba60ca4c90"}, {"sha": "b0c78120e3ecae5f4043781f7a3f79e2277293e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0c78120e3ecae5f4043781f7a3f79e2277293e7", "html_url": "https://github.com/rust-lang/rust/commit/b0c78120e3ecae5f4043781f7a3f79e2277293e7"}], "stats": {"total": 58, "additions": 34, "deletions": 24}, "files": [{"sha": "e1d5e302c3a062fad7142faec591004c7802a1f1", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/eded1aa14cb322b3b1000ee98ea9ba3a10dacba1/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eded1aa14cb322b3b1000ee98ea9ba3a10dacba1/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=eded1aa14cb322b3b1000ee98ea9ba3a10dacba1", "patch": "@@ -179,27 +179,6 @@ impl LivenessResult {\n             block,\n             statement_index,\n         };\n-        let terminator_defs_uses = self.defs_uses(mir, terminator_location, &data.terminator);\n-        terminator_defs_uses.apply(&mut bits);\n-        callback(terminator_location, &bits);\n-\n-        // Compute liveness before each statement (in rev order) and invoke callback.\n-        for statement in data.statements.iter().rev() {\n-            statement_index -= 1;\n-            let statement_location = Location {\n-                block,\n-                statement_index,\n-            };\n-            let statement_defs_uses = self.defs_uses(mir, statement_location, statement);\n-            statement_defs_uses.apply(&mut bits);\n-            callback(statement_location, &bits);\n-        }\n-    }\n-\n-    fn defs_uses<'tcx, V>(&self, mir: &Mir<'tcx>, location: Location, thing: &V) -> DefsUses\n-    where\n-        V: MirVisitable<'tcx>,\n-    {\n         let locals = mir.local_decls.len();\n         let mut visitor = DefsUsesVisitor {\n             mode: self.mode,\n@@ -208,12 +187,22 @@ impl LivenessResult {\n                 uses: LocalSet::new_empty(locals),\n             },\n         };\n-\n         // Visit the various parts of the basic block in reverse. If we go\n         // forward, the logic in `add_def` and `add_use` would be wrong.\n-        thing.apply(location, &mut visitor);\n+        visitor.update_bits_and_do_callback(terminator_location, &data.terminator, &mut bits,\n+                                            &mut callback);\n \n-        visitor.defs_uses\n+        // Compute liveness before each statement (in rev order) and invoke callback.\n+        for statement in data.statements.iter().rev() {\n+            statement_index -= 1;\n+            let statement_location = Location {\n+                block,\n+                statement_index,\n+            };\n+            visitor.defs_uses.clear();\n+            visitor.update_bits_and_do_callback(statement_location, statement, &mut bits,\n+                                                &mut callback);\n+        }\n     }\n }\n \n@@ -304,6 +293,11 @@ struct DefsUses {\n }\n \n impl DefsUses {\n+    fn clear(&mut self) {\n+        self.uses.clear();\n+        self.defs.clear();\n+    }\n+\n     fn apply(&self, bits: &mut LocalSet) -> bool {\n         bits.subtract(&self.defs) | bits.union(&self.uses)\n     }\n@@ -338,6 +332,22 @@ impl DefsUses {\n     }\n }\n \n+impl DefsUsesVisitor {\n+    /// Update `bits` with the effects of `value` and call `callback`. We\n+    /// should always visit in reverse order. This method assumes that we have\n+    /// not visited anything before; if you have, clear `bits` first.\n+    fn update_bits_and_do_callback<'tcx, OP>(&mut self, location: Location,\n+                                             value: &impl MirVisitable<'tcx>, bits: &mut LocalSet,\n+                                             callback: &mut OP)\n+    where\n+        OP: FnMut(Location, &LocalSet),\n+    {\n+        value.apply(location, self);\n+        self.defs_uses.apply(bits);\n+        callback(location, bits);\n+    }\n+}\n+\n impl<'tcx> Visitor<'tcx> for DefsUsesVisitor {\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext<'tcx>, _: Location) {\n         match categorize(context, self.mode) {"}]}