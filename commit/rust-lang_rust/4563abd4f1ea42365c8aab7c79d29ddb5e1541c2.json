{"sha": "4563abd4f1ea42365c8aab7c79d29ddb5e1541c2", "node_id": "C_kwDOAAsO6NoAKDQ1NjNhYmQ0ZjFlYTQyMzY1YzhhYWI3Yzc5ZDI5ZGRiNWUxNTQxYzI", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-16T11:14:53Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-16T11:14:53Z"}, "message": "Sync from rust a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "tree": {"sha": "4c0e8570d3ab21a982469a13b5b9f710221dee04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c0e8570d3ab21a982469a13b5b9f710221dee04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4563abd4f1ea42365c8aab7c79d29ddb5e1541c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4563abd4f1ea42365c8aab7c79d29ddb5e1541c2", "html_url": "https://github.com/rust-lang/rust/commit/4563abd4f1ea42365c8aab7c79d29ddb5e1541c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4563abd4f1ea42365c8aab7c79d29ddb5e1541c2/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4594457993600987b4370ab5b258d4276e12b37", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4594457993600987b4370ab5b258d4276e12b37", "html_url": "https://github.com/rust-lang/rust/commit/d4594457993600987b4370ab5b258d4276e12b37"}, {"sha": "06bc64df9213e928bf37c565f9c2f6b09391a384", "url": "https://api.github.com/repos/rust-lang/rust/commits/06bc64df9213e928bf37c565f9c2f6b09391a384", "html_url": "https://github.com/rust-lang/rust/commit/06bc64df9213e928bf37c565f9c2f6b09391a384"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "a0550860fa54531be5476ad9298b7333f4edfa72", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4563abd4f1ea42365c8aab7c79d29ddb5e1541c2/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4563abd4f1ea42365c8aab7c79d29ddb5e1541c2/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=4563abd4f1ea42365c8aab7c79d29ddb5e1541c2", "patch": "@@ -544,7 +544,7 @@ pub(crate) fn codegen_drop<'tcx>(\n                 let arg_value = drop_place.place_ref(\n                     fx,\n                     fx.layout_of(fx.tcx.mk_ref(\n-                        &ty::RegionKind::ReErased,\n+                        fx.tcx.lifetimes.re_erased,\n                         TypeAndMut { ty, mutbl: crate::rustc_hir::Mutability::Mut },\n                     )),\n                 );"}, {"sha": "0a6ef6441fa035625c2772480095ef02ef12942a", "filename": "src/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4563abd4f1ea42365c8aab7c79d29ddb5e1541c2/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4563abd4f1ea42365c8aab7c79d29ddb5e1541c2/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=4563abd4f1ea42365c8aab7c79d29ddb5e1541c2", "patch": "@@ -81,7 +81,7 @@ pub(crate) fn codegen_fn<'tcx>(\n     let arg_uninhabited = fx\n         .mir\n         .args_iter()\n-        .any(|arg| fx.layout_of(fx.monomorphize(&fx.mir.local_decls[arg].ty)).abi.is_uninhabited());\n+        .any(|arg| fx.layout_of(fx.monomorphize(fx.mir.local_decls[arg].ty)).abi.is_uninhabited());\n \n     if !crate::constant::check_constants(&mut fx) {\n         fx.bcx.append_block_params_for_function_params(fx.block_map[START_BLOCK]);\n@@ -692,7 +692,7 @@ fn codegen_stmt<'tcx>(\n                     let times = fx\n                         .monomorphize(times)\n                         .eval(fx.tcx, ParamEnv::reveal_all())\n-                        .val\n+                        .val()\n                         .try_to_bits(fx.tcx.data_layout.pointer_size)\n                         .unwrap();\n                     if operand.layout().size.bytes() == 0 {\n@@ -842,16 +842,16 @@ pub(crate) fn codegen_place<'tcx>(\n                 match cplace.layout().ty.kind() {\n                     ty::Array(elem_ty, _len) => {\n                         assert!(!from_end, \"array subslices are never `from_end`\");\n-                        let elem_layout = fx.layout_of(elem_ty);\n+                        let elem_layout = fx.layout_of(*elem_ty);\n                         let ptr = cplace.to_ptr();\n                         cplace = CPlace::for_ptr(\n                             ptr.offset_i64(fx, elem_layout.size.bytes() as i64 * (from as i64)),\n-                            fx.layout_of(fx.tcx.mk_array(elem_ty, to - from)),\n+                            fx.layout_of(fx.tcx.mk_array(*elem_ty, to - from)),\n                         );\n                     }\n                     ty::Slice(elem_ty) => {\n                         assert!(from_end, \"slice subslices should be `from_end`\");\n-                        let elem_layout = fx.layout_of(elem_ty);\n+                        let elem_layout = fx.layout_of(*elem_ty);\n                         let (ptr, len) = cplace.to_ptr_maybe_unsized();\n                         let len = len.unwrap();\n                         cplace = CPlace::for_ptr_with_extra("}, {"sha": "50f98965ab5d22ac31f735a56e18385e87bd2f69", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4563abd4f1ea42365c8aab7c79d29ddb5e1541c2/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4563abd4f1ea42365c8aab7c79d29ddb5e1541c2/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=4563abd4f1ea42365c8aab7c79d29ddb5e1541c2", "patch": "@@ -61,7 +61,7 @@ fn clif_type_from_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<types::Typ\n         },\n         ty::FnPtr(_) => pointer_ty(tcx),\n         ty::RawPtr(TypeAndMut { ty: pointee_ty, mutbl: _ }) | ty::Ref(_, pointee_ty, _) => {\n-            if has_ptr_meta(tcx, pointee_ty) {\n+            if has_ptr_meta(tcx, *pointee_ty) {\n                 return None;\n             } else {\n                 pointer_ty(tcx)\n@@ -100,7 +100,7 @@ fn clif_pair_type_from_ty<'tcx>(\n             (a, b)\n         }\n         ty::RawPtr(TypeAndMut { ty: pointee_ty, mutbl: _ }) | ty::Ref(_, pointee_ty, _) => {\n-            if has_ptr_meta(tcx, pointee_ty) {\n+            if has_ptr_meta(tcx, *pointee_ty) {\n                 (pointer_ty(tcx), pointer_ty(tcx))\n             } else {\n                 return None;"}, {"sha": "10bc83abbc9681dd8d582aa3aaee76e36e558e78", "filename": "src/constant.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4563abd4f1ea42365c8aab7c79d29ddb5e1541c2/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4563abd4f1ea42365c8aab7c79d29ddb5e1541c2/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=4563abd4f1ea42365c8aab7c79d29ddb5e1541c2", "patch": "@@ -46,7 +46,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n             ConstantKind::Ty(ct) => ct,\n             ConstantKind::Val(..) => continue,\n         };\n-        match const_.val {\n+        match const_.val() {\n             ConstKind::Value(_) => {}\n             ConstKind::Unevaluated(unevaluated) => {\n                 if let Err(err) =\n@@ -127,15 +127,15 @@ pub(crate) fn codegen_constant<'tcx>(\n         ConstantKind::Ty(ct) => ct,\n         ConstantKind::Val(val, ty) => return codegen_const_value(fx, val, ty),\n     };\n-    let const_val = match const_.val {\n+    let const_val = match const_.val() {\n         ConstKind::Value(const_val) => const_val,\n         ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n             if fx.tcx.is_static(def.did) =>\n         {\n             assert!(substs.is_empty());\n             assert!(promoted.is_none());\n \n-            return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty)).to_cvalue(fx);\n+            return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty())).to_cvalue(fx);\n         }\n         ConstKind::Unevaluated(unevaluated) => {\n             match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n@@ -152,7 +152,7 @@ pub(crate) fn codegen_constant<'tcx>(\n         | ConstKind::Error(_) => unreachable!(\"{:?}\", const_),\n     };\n \n-    codegen_const_value(fx, const_val, const_.ty)\n+    codegen_const_value(fx, const_val, const_.ty())\n }\n \n pub(crate) fn codegen_const_value<'tcx>(\n@@ -465,7 +465,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n     match operand {\n         Operand::Constant(const_) => match const_.literal {\n             ConstantKind::Ty(const_) => {\n-                fx.monomorphize(const_).eval(fx.tcx, ParamEnv::reveal_all()).val.try_to_value()\n+                fx.monomorphize(const_).eval(fx.tcx, ParamEnv::reveal_all()).val().try_to_value()\n             }\n             ConstantKind::Val(val, _) => Some(val),\n         },\n@@ -490,7 +490,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                                         return None;\n                                     }\n                                     let const_val = mir_operand_get_const_val(fx, operand)?;\n-                                    if fx.layout_of(ty).size\n+                                    if fx.layout_of(*ty).size\n                                         != const_val.try_to_scalar_int()?.size()\n                                     {\n                                         return None;"}, {"sha": "693092ba543ea947c5b448520fac7984935e697c", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4563abd4f1ea42365c8aab7c79d29ddb5e1541c2/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4563abd4f1ea42365c8aab7c79d29ddb5e1541c2/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=4563abd4f1ea42365c8aab7c79d29ddb5e1541c2", "patch": "@@ -114,7 +114,7 @@ impl<'tcx> DebugContext<'tcx> {\n     }\n \n     fn dwarf_ty(&mut self, ty: Ty<'tcx>) -> UnitEntryId {\n-        if let Some(type_id) = self.types.get(ty) {\n+        if let Some(type_id) = self.types.get(&ty) {\n             return *type_id;\n         }\n \n@@ -143,7 +143,7 @@ impl<'tcx> DebugContext<'tcx> {\n                 // Ensure that type is inserted before recursing to avoid duplicates\n                 self.types.insert(ty, type_id);\n \n-                let pointee = self.dwarf_ty(pointee_ty);\n+                let pointee = self.dwarf_ty(*pointee_ty);\n \n                 let type_entry = self.dwarf.unit.get_mut(type_id);\n "}, {"sha": "8cae506e0cb62362eb56b626d02814f3d69395b2", "filename": "src/unsize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4563abd4f1ea42365c8aab7c79d29ddb5e1541c2/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4563abd4f1ea42365c8aab7c79d29ddb5e1541c2/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=4563abd4f1ea42365c8aab7c79d29ddb5e1541c2", "patch": "@@ -66,7 +66,7 @@ fn unsize_ptr<'tcx>(\n         (&ty::Ref(_, a, _), &ty::Ref(_, b, _))\n         | (&ty::Ref(_, a, _), &ty::RawPtr(ty::TypeAndMut { ty: b, .. }))\n         | (&ty::RawPtr(ty::TypeAndMut { ty: a, .. }), &ty::RawPtr(ty::TypeAndMut { ty: b, .. })) => {\n-            (src, unsized_info(fx, a, b, old_info))\n+            (src, unsized_info(fx, *a, *b, old_info))\n         }\n         (&ty::Adt(def_a, _), &ty::Adt(def_b, _)) if def_a.is_box() && def_b.is_box() => {\n             let (a, b) = (src_layout.ty.boxed_ty(), dst_layout.ty.boxed_ty());"}, {"sha": "b016af5174e018630eddbb3b1ef5ae9bac8398ab", "filename": "src/value_and_place.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4563abd4f1ea42365c8aab7c79d29ddb5e1541c2/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4563abd4f1ea42365c8aab7c79d29ddb5e1541c2/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=4563abd4f1ea42365c8aab7c79d29ddb5e1541c2", "patch": "@@ -514,7 +514,7 @@ impl<'tcx> CPlace<'tcx> {\n                     // Can only happen for vector types\n                     let len =\n                         u16::try_from(len.eval_usize(fx.tcx, ParamEnv::reveal_all())).unwrap();\n-                    let vector_ty = fx.clif_type(element).unwrap().by(len).unwrap();\n+                    let vector_ty = fx.clif_type(*element).unwrap().by(len).unwrap();\n \n                     let data = match from.0 {\n                         CValueInner::ByRef(ptr, None) => {\n@@ -721,8 +721,8 @@ impl<'tcx> CPlace<'tcx> {\n         index: Value,\n     ) -> CPlace<'tcx> {\n         let (elem_layout, ptr) = match self.layout().ty.kind() {\n-            ty::Array(elem_ty, _) => (fx.layout_of(elem_ty), self.to_ptr()),\n-            ty::Slice(elem_ty) => (fx.layout_of(elem_ty), self.to_ptr_maybe_unsized().0),\n+            ty::Array(elem_ty, _) => (fx.layout_of(*elem_ty), self.to_ptr()),\n+            ty::Slice(elem_ty) => (fx.layout_of(*elem_ty), self.to_ptr_maybe_unsized().0),\n             _ => bug!(\"place_index({:?})\", self.layout().ty),\n         };\n \n@@ -781,11 +781,11 @@ pub(crate) fn assert_assignable<'tcx>(\n             ty::RawPtr(TypeAndMut { ty: a, mutbl: _ }),\n             ty::RawPtr(TypeAndMut { ty: b, mutbl: _ }),\n         ) => {\n-            assert_assignable(fx, a, b);\n+            assert_assignable(fx, *a, *b);\n         }\n         (ty::Ref(_, a, _), ty::RawPtr(TypeAndMut { ty: b, mutbl: _ }))\n         | (ty::RawPtr(TypeAndMut { ty: a, mutbl: _ }), ty::Ref(_, b, _)) => {\n-            assert_assignable(fx, a, b);\n+            assert_assignable(fx, *a, *b);\n         }\n         (ty::FnPtr(_), ty::FnPtr(_)) => {\n             let from_sig = fx.tcx.normalize_erasing_late_bound_regions("}]}