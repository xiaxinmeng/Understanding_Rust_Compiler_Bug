{"sha": "b837f5be70256aa47f948f79170d109a6fc8527c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MzdmNWJlNzAyNTZhYTQ3Zjk0OGY3OTE3MGQxMDlhNmZjODUyN2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-16T11:18:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-16T11:18:12Z"}, "message": "Auto merge of #53173 - alexcrichton:win-arm64, r=sfackler\n\nStart adding an `aarch64-pc-windows-msvc` target\n\nThis commit adds the necessary definitions for target specs and such as well as\nthe necessary support in libstd to compile basic `aarch64-pc-windows-msvc`\nbinaries. The target is not currently built on CI, but it can be built locally\nwith:\n\n    ./configure --target=aarch64-pc-windows-msvc --set rust.lld\n    ./x.py build src/libstd --target aarch64-pc-windows-msvc\n\nCurrently this fails to build `libtest` due to a linker bug (seemingly in LLD?)\nwhich hasn't been investigate yet. Otherwise though with libstd you can build a\nhello world program (linked with LLD). I've not tried to execute it yet, but it\nat least links!\n\nFull support for this target is still a long road ahead, but this is hopefully a\ngood stepping stone to get started.\n\nPoints of note about this target are:\n\n* Currently defaults to `panic=abort` as support is still landing in LLVM for\n  SEH on AArch64.\n* Currently defaults to LLD as a linker as I was able to get farther with it\n  than I was with `link.exe`", "tree": {"sha": "7f7d0ae3aa24de3a0b72ae43430e9859485dc5a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f7d0ae3aa24de3a0b72ae43430e9859485dc5a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b837f5be70256aa47f948f79170d109a6fc8527c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b837f5be70256aa47f948f79170d109a6fc8527c", "html_url": "https://github.com/rust-lang/rust/commit/b837f5be70256aa47f948f79170d109a6fc8527c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b837f5be70256aa47f948f79170d109a6fc8527c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "142bb27373126edf8367f526358b6c72ecf1d8df", "url": "https://api.github.com/repos/rust-lang/rust/commits/142bb27373126edf8367f526358b6c72ecf1d8df", "html_url": "https://github.com/rust-lang/rust/commit/142bb27373126edf8367f526358b6c72ecf1d8df"}, {"sha": "fccc04d3e72bb462cba1b492ba0e2cd4ab2aebec", "url": "https://api.github.com/repos/rust-lang/rust/commits/fccc04d3e72bb462cba1b492ba0e2cd4ab2aebec", "html_url": "https://github.com/rust-lang/rust/commit/fccc04d3e72bb462cba1b492ba0e2cd4ab2aebec"}], "stats": {"total": 234, "additions": 201, "deletions": 33}, "files": [{"sha": "7150560b4a13d809d29a0e4d0ab3cc2d3e9ad640", "filename": "src/libpanic_unwind/dummy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b837f5be70256aa47f948f79170d109a6fc8527c/src%2Flibpanic_unwind%2Fdummy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b837f5be70256aa47f948f79170d109a6fc8527c/src%2Flibpanic_unwind%2Fdummy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fdummy.rs?ref=b837f5be70256aa47f948f79170d109a6fc8527c", "previous_filename": "src/libpanic_unwind/wasm32.rs"}, {"sha": "9c3fc76c307a6f7696ba4ce2f163c1dea7812602", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b837f5be70256aa47f948f79170d109a6fc8527c/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b837f5be70256aa47f948f79170d109a6fc8527c/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=b837f5be70256aa47f948f79170d109a6fc8527c", "patch": "@@ -55,36 +55,33 @@ use core::mem;\n use core::raw;\n use core::panic::BoxMeUp;\n \n-// Rust runtime's startup objects depend on these symbols, so make them public.\n-#[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\"))]\n-pub use imp::eh_frame_registry::*;\n+#[macro_use]\n+mod macros;\n \n-// *-pc-windows-msvc\n-#[cfg(target_env = \"msvc\")]\n-#[path = \"seh.rs\"]\n-mod imp;\n-\n-// x86_64-pc-windows-gnu\n-#[cfg(all(windows, target_arch = \"x86_64\", target_env = \"gnu\"))]\n-#[path = \"seh64_gnu.rs\"]\n-mod imp;\n-\n-// i686-pc-windows-gnu and all others\n-#[cfg(any(all(unix, not(target_os = \"emscripten\")),\n-          target_os = \"cloudabi\",\n-          target_os = \"redox\",\n-          all(windows, target_arch = \"x86\", target_env = \"gnu\")))]\n-#[path = \"gcc.rs\"]\n-mod imp;\n-\n-// emscripten\n-#[cfg(target_os = \"emscripten\")]\n-#[path = \"emcc.rs\"]\n-mod imp;\n-\n-#[cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))]\n-#[path = \"wasm32.rs\"]\n-mod imp;\n+cfg_if! {\n+    if #[cfg(target_os = \"emscripten\")] {\n+        #[path = \"emcc.rs\"]\n+        mod imp;\n+    } else if #[cfg(target_arch = \"wasm32\")] {\n+        #[path = \"dummy.rs\"]\n+        mod imp;\n+    } else if #[cfg(all(target_env = \"msvc\", target_arch = \"aarch64\"))] {\n+        #[path = \"dummy.rs\"]\n+        mod imp;\n+    } else if #[cfg(target_env = \"msvc\")] {\n+        #[path = \"seh.rs\"]\n+        mod imp;\n+    } else if #[cfg(all(windows, target_arch = \"x86_64\", target_env = \"gnu\"))] {\n+        #[path = \"seh64_gnu.rs\"]\n+        mod imp;\n+    } else {\n+        // Rust runtime's startup objects depend on these symbols, so make them public.\n+        #[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\"))]\n+        pub use imp::eh_frame_registry::*;\n+        #[path = \"gcc.rs\"]\n+        mod imp;\n+    }\n+}\n \n mod dwarf;\n mod windows;"}, {"sha": "6ea79dc862bda27b92154d3399257d4b8c0234db", "filename": "src/libpanic_unwind/macros.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b837f5be70256aa47f948f79170d109a6fc8527c/src%2Flibpanic_unwind%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b837f5be70256aa47f948f79170d109a6fc8527c/src%2Flibpanic_unwind%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fmacros.rs?ref=b837f5be70256aa47f948f79170d109a6fc8527c", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// A macro for defining `#[cfg]` if-else statements.\n+///\n+/// This is similar to the `if/elif` C preprocessor macro by allowing definition\n+/// of a cascade of `#[cfg]` cases, emitting the implementation which matches\n+/// first.\n+///\n+/// This allows you to conveniently provide a long list `#[cfg]`'d blocks of code\n+/// without having to rewrite each clause multiple times.\n+macro_rules! cfg_if {\n+    ($(\n+        if #[cfg($($meta:meta),*)] { $($it:item)* }\n+    ) else * else {\n+        $($it2:item)*\n+    }) => {\n+        __cfg_if_items! {\n+            () ;\n+            $( ( ($($meta),*) ($($it)*) ), )*\n+            ( () ($($it2)*) ),\n+        }\n+    }\n+}\n+\n+macro_rules! __cfg_if_items {\n+    (($($not:meta,)*) ; ) => {};\n+    (($($not:meta,)*) ; ( ($($m:meta),*) ($($it:item)*) ), $($rest:tt)*) => {\n+        __cfg_if_apply! { cfg(all(not(any($($not),*)), $($m,)*)), $($it)* }\n+        __cfg_if_items! { ($($not,)* $($m,)*) ; $($rest)* }\n+    }\n+}\n+\n+macro_rules! __cfg_if_apply {\n+    ($m:meta, $($it:item)*) => {\n+        $(#[$m] $it)*\n+    }\n+}"}, {"sha": "8747f239d3418885b9bbc3f1b1a2e1f0212a9d53", "filename": "src/librustc_target/spec/aarch64_pc_windows_msvc.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b837f5be70256aa47f948f79170d109a6fc8527c/src%2Flibrustc_target%2Fspec%2Faarch64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b837f5be70256aa47f948f79170d109a6fc8527c/src%2Flibrustc_target%2Fspec%2Faarch64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_pc_windows_msvc.rs?ref=b837f5be70256aa47f948f79170d109a6fc8527c", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use spec::{LinkerFlavor, Target, TargetResult, PanicStrategy, LldFlavor};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::windows_msvc_base::opts();\n+    base.max_atomic_width = Some(64);\n+    base.has_elf_tls = true;\n+\n+    // FIXME: this shouldn't be panic=abort, it should be panic=unwind\n+    base.panic_strategy = PanicStrategy::Abort;\n+    base.linker = Some(\"rust-lld\".to_owned());\n+\n+    Ok(Target {\n+        llvm_target: \"aarch64-pc-windows-msvc\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:w-p:64:64-i32:32-i64:64-i128:128-n32:64-S128\".to_string(),\n+        arch: \"aarch64\".to_string(),\n+        target_os: \"windows\".to_string(),\n+        target_env: \"msvc\".to_string(),\n+        target_vendor: \"pc\".to_string(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Link),\n+        options: base,\n+    })\n+}"}, {"sha": "3a18c56f4fc5960f1accb22743d6c25fe896869b", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b837f5be70256aa47f948f79170d109a6fc8527c/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b837f5be70256aa47f948f79170d109a6fc8527c/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=b837f5be70256aa47f948f79170d109a6fc8527c", "patch": "@@ -355,6 +355,7 @@ supported_targets! {\n     (\"x86_64-pc-windows-gnu\", x86_64_pc_windows_gnu),\n     (\"i686-pc-windows-gnu\", i686_pc_windows_gnu),\n \n+    (\"aarch64-pc-windows-msvc\", aarch64_pc_windows_msvc),\n     (\"x86_64-pc-windows-msvc\", x86_64_pc_windows_msvc),\n     (\"i686-pc-windows-msvc\", i686_pc_windows_msvc),\n     (\"i586-pc-windows-msvc\", i586_pc_windows_msvc),"}, {"sha": "f64cae810b9ac76bf5a54b317e1bf0df1a6b9b1e", "filename": "src/libstd/sys/windows/backtrace/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b837f5be70256aa47f948f79170d109a6fc8527c/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b837f5be70256aa47f948f79170d109a6fc8527c/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs?ref=b837f5be70256aa47f948f79170d109a6fc8527c", "patch": "@@ -229,6 +229,7 @@ impl StackFrame for c::STACKFRAME_EX {\n         self.AddrFrame.Mode = c::ADDRESS_MODE::AddrModeFlat;\n         c::IMAGE_FILE_MACHINE_I386\n     }\n+\n     #[cfg(target_arch = \"x86_64\")]\n     fn init(&mut self, ctx: &c::CONTEXT) -> c::DWORD {\n         self.AddrPC.Offset = ctx.Rip as u64;\n@@ -240,6 +241,17 @@ impl StackFrame for c::STACKFRAME_EX {\n         c::IMAGE_FILE_MACHINE_AMD64\n     }\n \n+    #[cfg(target_arch = \"aarch64\")]\n+    fn init(&mut self, ctx: &c::CONTEXT) -> c::DWORD {\n+        self.AddrPC.Offset = ctx.Pc as u64;\n+        self.AddrPC.Mode = c::ADDRESS_MODE::AddrModeFlat;\n+        self.AddrStack.Offset = ctx.Sp as u64;\n+        self.AddrStack.Mode = c::ADDRESS_MODE::AddrModeFlat;\n+        self.AddrFrame.Offset = ctx.Fp as u64;\n+        self.AddrFrame.Mode = c::ADDRESS_MODE::AddrModeFlat;\n+        c::IMAGE_FILE_MACHINE_ARM64\n+    }\n+\n     fn get_addr(&self) -> *const u8 {\n         (self.AddrPC.Offset - 1) as *const u8\n     }\n@@ -260,6 +272,7 @@ impl StackFrame for c::STACKFRAME64 {\n         self.AddrFrame.Mode = c::ADDRESS_MODE::AddrModeFlat;\n         c::IMAGE_FILE_MACHINE_I386\n     }\n+\n     #[cfg(target_arch = \"x86_64\")]\n     fn init(&mut self, ctx: &c::CONTEXT) -> c::DWORD {\n         self.AddrPC.Offset = ctx.Rip as u64;\n@@ -271,6 +284,17 @@ impl StackFrame for c::STACKFRAME64 {\n         c::IMAGE_FILE_MACHINE_AMD64\n     }\n \n+    #[cfg(target_arch = \"aarch64\")]\n+    fn init(&mut self, ctx: &c::CONTEXT) -> c::DWORD {\n+        self.AddrPC.Offset = ctx.Pc as u64;\n+        self.AddrPC.Mode = c::ADDRESS_MODE::AddrModeFlat;\n+        self.AddrStack.Offset = ctx.Sp as u64;\n+        self.AddrStack.Mode = c::ADDRESS_MODE::AddrModeFlat;\n+        self.AddrFrame.Offset = ctx.Fp as u64;\n+        self.AddrFrame.Mode = c::ADDRESS_MODE::AddrModeFlat;\n+        c::IMAGE_FILE_MACHINE_ARM64\n+    }\n+\n     fn get_addr(&self) -> *const u8 {\n         (self.AddrPC.Offset - 1) as *const u8\n     }"}, {"sha": "e514a56dcc43681dcb3fd8875e0b900402fa3d9f", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b837f5be70256aa47f948f79170d109a6fc8527c/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b837f5be70256aa47f948f79170d109a6fc8527c/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=b837f5be70256aa47f948f79170d109a6fc8527c", "patch": "@@ -280,6 +280,9 @@ pub const IMAGE_FILE_MACHINE_I386: DWORD = 0x014c;\n #[cfg(target_arch = \"x86_64\")]\n #[cfg(feature = \"backtrace\")]\n pub const IMAGE_FILE_MACHINE_AMD64: DWORD = 0x8664;\n+#[cfg(target_arch = \"aarch64\")]\n+#[cfg(feature = \"backtrace\")]\n+pub const IMAGE_FILE_MACHINE_ARM64: DWORD = 0xAA64;\n \n pub const EXCEPTION_CONTINUE_SEARCH: LONG = 0;\n pub const EXCEPTION_STACK_OVERFLOW: DWORD = 0xc00000fd;\n@@ -791,9 +794,68 @@ pub struct FLOATING_SAVE_AREA {\n // will not appear in the final documentation. This should be also defined for\n // other architectures supported by Windows such as ARM, and for historical\n // interest, maybe MIPS and PowerPC as well.\n-#[cfg(all(dox, not(any(target_arch = \"x86_64\", target_arch = \"x86\"))))]\n+#[cfg(all(dox, not(any(target_arch = \"x86_64\", target_arch = \"x86\", target_arch = \"aarch64\"))))]\n pub enum CONTEXT {}\n \n+#[cfg(target_arch = \"aarch64\")]\n+pub const ARM64_MAX_BREAKPOINTS: usize = 8;\n+\n+#[cfg(target_arch = \"aarch64\")]\n+pub const ARM64_MAX_WATCHPOINTS: usize = 2;\n+\n+#[cfg(target_arch = \"aarch64\")]\n+#[repr(C)]\n+pub struct ARM64_NT_NEON128 {\n+    pub D: [f64; 2],\n+}\n+\n+#[cfg(target_arch = \"aarch64\")]\n+#[repr(C, align(16))]\n+pub struct CONTEXT {\n+    pub ContextFlags: DWORD,\n+    pub Cpsr: DWORD,\n+    pub X0: u64,\n+    pub X1: u64,\n+    pub X2: u64,\n+    pub X3: u64,\n+    pub X4: u64,\n+    pub X5: u64,\n+    pub X6: u64,\n+    pub X7: u64,\n+    pub X8: u64,\n+    pub X9: u64,\n+    pub X10: u64,\n+    pub X11: u64,\n+    pub X12: u64,\n+    pub X13: u64,\n+    pub X14: u64,\n+    pub X15: u64,\n+    pub X16: u64,\n+    pub X17: u64,\n+    pub X18: u64,\n+    pub X19: u64,\n+    pub X20: u64,\n+    pub X21: u64,\n+    pub X22: u64,\n+    pub X23: u64,\n+    pub X24: u64,\n+    pub X25: u64,\n+    pub X26: u64,\n+    pub X27: u64,\n+    pub X28: u64,\n+    pub Fp: u64,\n+    pub Lr: u64,\n+    pub Sp: u64,\n+    pub Pc: u64,\n+    pub V: [ARM64_NT_NEON128; 32],\n+    pub Fpcr: DWORD,\n+    pub Fpsr: DWORD,\n+    pub Bcr: [DWORD; ARM64_MAX_BREAKPOINTS],\n+    pub Bvr: [DWORD; ARM64_MAX_BREAKPOINTS],\n+    pub Wcr: [DWORD; ARM64_MAX_WATCHPOINTS],\n+    pub Wvr: [DWORD; ARM64_MAX_WATCHPOINTS],\n+}\n+\n #[repr(C)]\n pub struct SOCKADDR_STORAGE_LH {\n     pub ss_family: ADDRESS_FAMILY,"}, {"sha": "ccf79de909fa9dd4ca6b51ecafa0f53dce4e8918", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b837f5be70256aa47f948f79170d109a6fc8527c/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b837f5be70256aa47f948f79170d109a6fc8527c/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=b837f5be70256aa47f948f79170d109a6fc8527c", "patch": "@@ -266,8 +266,12 @@ pub fn dur2timeout(dur: Duration) -> c::DWORD {\n // handlers.\n //\n // https://msdn.microsoft.com/en-us/library/dn774154.aspx\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+#[allow(unreachable_code)]\n pub unsafe fn abort_internal() -> ! {\n-    asm!(\"int $$0x29\" :: \"{ecx}\"(7) ::: volatile); // 7 is FAST_FAIL_FATAL_APP_EXIT\n-    ::intrinsics::unreachable();\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+    {\n+        asm!(\"int $$0x29\" :: \"{ecx}\"(7) ::: volatile); // 7 is FAST_FAIL_FATAL_APP_EXIT\n+        ::intrinsics::unreachable();\n+    }\n+    ::intrinsics::abort();\n }"}]}