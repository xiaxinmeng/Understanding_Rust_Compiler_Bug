{"sha": "b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyM2VjZDQ3Y2ViNzQ2OGQ1MTMyYjliZjgxZDFkOWM0ZTNmZDEwODQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-08T01:00:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-08T16:37:00Z"}, "message": "Introduce metadata::cstore\n\nI intend for this to be the location for storing all the data retrieved by\ncreader, most of which is currently in the session.", "tree": {"sha": "79491342bc8070b2f54a8e43173c4ea5d4edd95d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79491342bc8070b2f54a8e43173c4ea5d4edd95d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084", "html_url": "https://github.com/rust-lang/rust/commit/b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7bfef43c8c9eed4ff39f2e68b5a224d19876439", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7bfef43c8c9eed4ff39f2e68b5a224d19876439", "html_url": "https://github.com/rust-lang/rust/commit/c7bfef43c8c9eed4ff39f2e68b5a224d19876439"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "4c6615f11b3b8aadfdb8eeaf00d30473d6a6b7d3", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084", "patch": "@@ -352,8 +352,9 @@ fn build_session_options(str binary, getopts::match match, str binary_dir) ->\n \n fn build_session(@session::options sopts) -> session::session {\n     auto target_cfg = build_target_config();\n+    auto cstore = metadata::cstore::mk_cstore();\n     auto crate_cache = std::map::new_int_hash[session::crate_metadata]();\n-    ret session::session(target_cfg, sopts, crate_cache, [],\n+    ret session::session(target_cfg, sopts, cstore, crate_cache, [],\n                          [], [], codemap::new_codemap(), 0u);\n }\n "}, {"sha": "d0112704e243b39a223232bd0cfdef4272f71772", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084", "patch": "@@ -45,6 +45,7 @@ type crate_metadata = rec(str name, vec[u8] data);\n \n obj session(@config targ_cfg,\n             @options opts,\n+            metadata::cstore::cstore cstore,\n             map::hashmap[int, crate_metadata] crates,\n             mutable vec[str] used_crate_files,\n             mutable vec[str] used_libraries,\n@@ -53,6 +54,7 @@ obj session(@config targ_cfg,\n             mutable uint err_count) {\n     fn get_targ_cfg() -> @config { ret targ_cfg; }\n     fn get_opts() -> @options { ret opts; }\n+    fn get_cstore() -> metadata::cstore::cstore { cstore }\n     fn span_fatal(span sp, str msg) -> ! {\n         // FIXME: Use constants, but rustboot doesn't know how to export them.\n         codemap::emit_error(some(sp), msg, cm);"}, {"sha": "553a9cded579f9fde7a7d8c3bfad319b183a9cc3", "filename": "src/comp/metadata/cstore.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084/src%2Fcomp%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084/src%2Fcomp%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcstore.rs?ref=b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084", "patch": "@@ -0,0 +1,37 @@\n+import std::map;\n+\n+type crate_metadata = rec(str name, vec[u8] data);\n+\n+type cstore = @rec(map::hashmap[int, crate_metadata] metas,\n+                   vec[str] used_crate_files,\n+                   vec[str] used_libraries,\n+                   vec[str] used_link_args);\n+\n+fn mk_cstore() -> cstore {\n+    auto meta_cache = map::new_int_hash[crate_metadata]();\n+    ret @rec(metas = meta_cache,\n+             used_crate_files = [],\n+             used_libraries = [],\n+             used_link_args = []);\n+}\n+\n+fn get_crate_data(&cstore cstore, int cnum) -> crate_metadata {\n+    ret cstore.metas.get(cnum);\n+}\n+\n+fn set_crate_data(&cstore cstore, int cnum, &crate_metadata data) {\n+    cstore.metas.insert(cnum, data);\n+}\n+\n+fn have_crate_data(&cstore cstore, int cnum) -> bool {\n+    ret cstore.metas.contains_key(cnum);\n+}\n+\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:"}, {"sha": "62e9a9598574042221ba74b042569b9df63bbb90", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=b23ecd47ceb7468d5132b9bf81d1d9c4e3fd1084", "patch": "@@ -81,13 +81,15 @@ mod metadata {\n     export encoder;\n     export decoder;\n     export creader;\n+    export cstore;\n \n     mod common;\n     mod tyencode;\n     mod tydecode;\n     mod encoder;\n     mod decoder;\n     mod creader;\n+    mod cstore;\n }\n \n mod driver {"}]}