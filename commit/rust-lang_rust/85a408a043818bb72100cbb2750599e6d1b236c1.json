{"sha": "85a408a043818bb72100cbb2750599e6d1b236c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YTQwOGEwNDM4MThiYjcyMTAwY2JiMjc1MDU5OWU2ZDFiMjM2YzE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-27T01:02:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-27T01:02:12Z"}, "message": "Rollup merge of #85725 - Smittyvb:rm-24159-workaround, r=RalfJung\n\nRemove unneeded workaround\n\nThis removes a workaround for #24159, which has been fixed.", "tree": {"sha": "321a8dbeaf65a588277ed23a395cc031d1d5e66c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/321a8dbeaf65a588277ed23a395cc031d1d5e66c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85a408a043818bb72100cbb2750599e6d1b236c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgru+UCRBK7hj4Ov3rIwAAfe0IADOxm6dgHnPymtDHUNty3G40\nSraobtKfYDT/nba/PoK5FNNiW+8emFD5MCCHgvo1CvcsFFnbw072q2bZOnLhYSNy\nzXbYgZ3SK8S6+Ed1qrXbpWMXi0n/4H5ZSHaMjac0ZgfL25w6KUNsWvqOpukZpdac\naT2A2fVhdc2bdg47p9w47eC0o5IU7Hxk8uX6DZt4VmK7VXaK4JSL8jv59GLBLTIS\ngJQTq93V7JnFEmi6YP1HhbKbBxbAvt+fDMus4NHK6k0SKhf9ON5wxdaeQsLLTXZ6\n1tjMVjfWa7avWpfXTka+O/UxcRM0+Q5HDEXjPLFKFJrOMNK5K3v6IPRuZRkAS8Y=\n=UHuB\n-----END PGP SIGNATURE-----\n", "payload": "tree 321a8dbeaf65a588277ed23a395cc031d1d5e66c\nparent 955e0f42fc098430293ffa6acba61db135114e81\nparent ff8a3874901303c22bf8d65e5fad870a91ad6121\nauthor Dylan DPC <dylan.dpc@gmail.com> 1622077332 +0200\ncommitter GitHub <noreply@github.com> 1622077332 +0200\n\nRollup merge of #85725 - Smittyvb:rm-24159-workaround, r=RalfJung\n\nRemove unneeded workaround\n\nThis removes a workaround for #24159, which has been fixed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85a408a043818bb72100cbb2750599e6d1b236c1", "html_url": "https://github.com/rust-lang/rust/commit/85a408a043818bb72100cbb2750599e6d1b236c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85a408a043818bb72100cbb2750599e6d1b236c1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "955e0f42fc098430293ffa6acba61db135114e81", "url": "https://api.github.com/repos/rust-lang/rust/commits/955e0f42fc098430293ffa6acba61db135114e81", "html_url": "https://github.com/rust-lang/rust/commit/955e0f42fc098430293ffa6acba61db135114e81"}, {"sha": "ff8a3874901303c22bf8d65e5fad870a91ad6121", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff8a3874901303c22bf8d65e5fad870a91ad6121", "html_url": "https://github.com/rust-lang/rust/commit/ff8a3874901303c22bf8d65e5fad870a91ad6121"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "4c53510ed00eed86df702bad1068e68eba528c1f", "filename": "compiler/rustc_mir/src/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85a408a043818bb72100cbb2750599e6d1b236c1/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a408a043818bb72100cbb2750599e6d1b236c1/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs?ref=85a408a043818bb72100cbb2750599e6d1b236c1", "patch": "@@ -15,9 +15,9 @@ use rustc_target::abi::{Abi, Align, FieldsShape, TagEncoding};\n use rustc_target::abi::{HasDataLayout, LayoutOf, Size, VariantIdx, Variants};\n \n use super::{\n-    alloc_range, mir_assign_valid_types, AllocId, AllocMap, AllocRef, AllocRefMut, Allocation,\n-    ConstAlloc, ImmTy, Immediate, InterpCx, InterpResult, LocalValue, Machine, MemoryKind, OpTy,\n-    Operand, Pointer, PointerArithmetic, Scalar, ScalarMaybeUninit,\n+    alloc_range, mir_assign_valid_types, AllocRef, AllocRefMut, ConstAlloc, ImmTy, Immediate,\n+    InterpCx, InterpResult, LocalValue, Machine, MemoryKind, OpTy, Operand, Pointer,\n+    PointerArithmetic, Scalar, ScalarMaybeUninit,\n };\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable)]\n@@ -292,8 +292,6 @@ where\n     // FIXME: Working around https://github.com/rust-lang/rust/issues/54385\n     Tag: Debug + Copy + Eq + Hash + 'static,\n     M: Machine<'mir, 'tcx, PointerTag = Tag>,\n-    // FIXME: Working around https://github.com/rust-lang/rust/issues/24159\n-    M::MemoryMap: AllocMap<AllocId, (MemoryKind<M::MemoryKind>, Allocation<Tag, M::AllocExtra>)>,\n {\n     /// Take a value, which represents a (thin or wide) reference, and make it a place.\n     /// Alignment is just based on the type.  This is the inverse of `MemPlace::to_ref()`."}]}