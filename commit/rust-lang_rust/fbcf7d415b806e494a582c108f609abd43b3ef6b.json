{"sha": "fbcf7d415b806e494a582c108f609abd43b3ef6b", "node_id": "C_kwDOAAsO6NoAKGZiY2Y3ZDQxNWI4MDZlNDk0YTU4MmMxMDhmNjA5YWJkNDNiM2VmNmI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-01-16T15:25:47Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-03T17:08:30Z"}, "message": "Move the set of features to the `features` query.", "tree": {"sha": "99bf41d7250a462dded6ad8af7e2f927cda607e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99bf41d7250a462dded6ad8af7e2f927cda607e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbcf7d415b806e494a582c108f609abd43b3ef6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbcf7d415b806e494a582c108f609abd43b3ef6b", "html_url": "https://github.com/rust-lang/rust/commit/fbcf7d415b806e494a582c108f609abd43b3ef6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbcf7d415b806e494a582c108f609abd43b3ef6b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45660949132222ba7ec0905649b2affd68e0e13c", "url": "https://api.github.com/repos/rust-lang/rust/commits/45660949132222ba7ec0905649b2affd68e0e13c", "html_url": "https://github.com/rust-lang/rust/commit/45660949132222ba7ec0905649b2affd68e0e13c"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "762198887cf8cccb794a288c841249b385f6442b", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fbcf7d415b806e494a582c108f609abd43b3ef6b/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbcf7d415b806e494a582c108f609abd43b3ef6b/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=fbcf7d415b806e494a582c108f609abd43b3ef6b", "patch": "@@ -167,6 +167,7 @@ fn get_features(\n             if let Some(Feature { since, .. }) = ACCEPTED_FEATURES.iter().find(|f| name == f.name) {\n                 let since = Some(Symbol::intern(since));\n                 features.declared_lang_features.push((name, mi.span(), since));\n+                features.active_features.insert(name);\n                 continue;\n             }\n \n@@ -187,10 +188,12 @@ fn get_features(\n             if let Some(f) = ACTIVE_FEATURES.iter().find(|f| name == f.name) {\n                 f.set(&mut features, mi.span());\n                 features.declared_lang_features.push((name, mi.span(), None));\n+                features.active_features.insert(name);\n                 continue;\n             }\n \n             features.declared_lib_features.push((name, mi.span()));\n+            features.active_features.insert(name);\n         }\n     }\n "}, {"sha": "1f7dc769512bbea2d3581a352b75a98dea5eb305", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fbcf7d415b806e494a582c108f609abd43b3ef6b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbcf7d415b806e494a582c108f609abd43b3ef6b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=fbcf7d415b806e494a582c108f609abd43b3ef6b", "patch": "@@ -2,6 +2,7 @@\n \n use super::{to_nonzero, Feature, State};\n \n+use rustc_data_structures::fx::FxHashSet;\n use rustc_span::edition::Edition;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n@@ -47,6 +48,8 @@ macro_rules! declare_features {\n             pub declared_lang_features: Vec<(Symbol, Span, Option<Symbol>)>,\n             /// `#![feature]` attrs for non-language (library) features.\n             pub declared_lib_features: Vec<(Symbol, Span)>,\n+            /// Features enabled for this crate.\n+            pub active_features: FxHashSet<Symbol>,\n             $(\n                 $(#[doc = $doc])*\n                 pub $feature: bool\n@@ -58,6 +61,11 @@ macro_rules! declare_features {\n                 $(f(stringify!($feature), self.$feature);)+\n             }\n \n+            /// Is the given feature active?\n+            pub fn active(&self, feature: Symbol) -> bool {\n+                self.active_features.contains(&feature)\n+            }\n+\n             /// Is the given feature enabled?\n             ///\n             /// Panics if the symbol doesn't correspond to a declared feature."}, {"sha": "35b2796f9728d2322a21f30d86dc9970408057e3", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fbcf7d415b806e494a582c108f609abd43b3ef6b/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbcf7d415b806e494a582c108f609abd43b3ef6b/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=fbcf7d415b806e494a582c108f609abd43b3ef6b", "patch": "@@ -6,7 +6,7 @@ pub use self::StabilityLevel::*;\n use crate::ty::{self, DefIdTree, TyCtxt};\n use rustc_ast::NodeId;\n use rustc_attr::{self as attr, ConstStability, Deprecation, Stability};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_feature::GateIssue;\n use rustc_hir as hir;\n@@ -66,9 +66,6 @@ pub struct Index {\n \n     /// Maps for each crate whether it is part of the staged API.\n     pub staged_api: FxHashMap<CrateNum, bool>,\n-\n-    /// Features enabled for this crate.\n-    pub active_features: FxHashSet<Symbol>,\n }\n \n impl Index {\n@@ -423,7 +420,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     debug!(\"stability: skipping span={:?} since it is internal\", span);\n                     return EvalResult::Allow;\n                 }\n-                if self.stability().active_features.contains(&feature) {\n+                if self.features().active(feature) {\n                     return EvalResult::Allow;\n                 }\n "}, {"sha": "592dc8ce27f9c7bdc29a07982a34b5e8b8dd1224", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fbcf7d415b806e494a582c108f609abd43b3ef6b/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbcf7d415b806e494a582c108f609abd43b3ef6b/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=fbcf7d415b806e494a582c108f609abd43b3ef6b", "patch": "@@ -663,19 +663,8 @@ fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n         stab_map: Default::default(),\n         const_stab_map: Default::default(),\n         depr_map: Default::default(),\n-        active_features: Default::default(),\n     };\n \n-    let active_lib_features = &tcx.features().declared_lib_features;\n-    let active_lang_features = &tcx.features().declared_lang_features;\n-\n-    // Put the active features into a map for quick lookup.\n-    index.active_features = active_lib_features\n-        .iter()\n-        .map(|&(s, ..)| s)\n-        .chain(active_lang_features.iter().map(|&(s, ..)| s))\n-        .collect();\n-\n     {\n         let mut annotator = Annotator {\n             tcx,"}]}