{"sha": "bc638b8635a1a6183d891f28d1edb573efb8e4d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNjM4Yjg2MzVhMWE2MTgzZDg5MWYyOGQxZWRiNTczZWZiOGU0ZDA=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2017-09-17T11:19:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-17T11:19:00Z"}, "message": "Rollup merge of #44088 - bjorn3:better_trace_macros, r=jseyfried\n\nFix \"new trace_macros doesn't work if there's an error during expansion\"\n\nFixes #43493", "tree": {"sha": "488e67b2b8b68b5eda38f6f24bbce557388493c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/488e67b2b8b68b5eda38f6f24bbce557388493c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc638b8635a1a6183d891f28d1edb573efb8e4d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc638b8635a1a6183d891f28d1edb573efb8e4d0", "html_url": "https://github.com/rust-lang/rust/commit/bc638b8635a1a6183d891f28d1edb573efb8e4d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc638b8635a1a6183d891f28d1edb573efb8e4d0/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0edcb4b0384db91f159a9f8c77db3fbd098b2db", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0edcb4b0384db91f159a9f8c77db3fbd098b2db", "html_url": "https://github.com/rust-lang/rust/commit/a0edcb4b0384db91f159a9f8c77db3fbd098b2db"}, {"sha": "0a2c95b6eb4ef40be166cc690bf2f4f00e37d7c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a2c95b6eb4ef40be166cc690bf2f4f00e37d7c5", "html_url": "https://github.com/rust-lang/rust/commit/0a2c95b6eb4ef40be166cc690bf2f4f00e37d7c5"}], "stats": {"total": 129, "additions": 126, "deletions": 3}, "files": [{"sha": "c139cfeaebf4a42c115293c80fd7849073d5dc68", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc638b8635a1a6183d891f28d1edb573efb8e4d0/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc638b8635a1a6183d891f28d1edb573efb8e4d0/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=bc638b8635a1a6183d891f28d1edb573efb8e4d0", "patch": "@@ -792,14 +792,16 @@ impl<'a> ExtCtxt<'a> {\n     pub fn span_bug(&self, sp: Span, msg: &str) -> ! {\n         self.parse_sess.span_diagnostic.span_bug(sp, msg);\n     }\n-    pub fn trace_macros_diag(&self) {\n+    pub fn trace_macros_diag(&mut self) {\n         for (sp, notes) in self.expansions.iter() {\n             let mut db = self.parse_sess.span_diagnostic.span_note_diag(*sp, \"trace_macro\");\n             for note in notes {\n                 db.note(note);\n             }\n             db.emit();\n         }\n+        // Fixme: does this result in errors?\n+        self.expansions.clear();\n     }\n     pub fn bug(&self, msg: &str) -> ! {\n         self.parse_sess.span_diagnostic.bug(msg);"}, {"sha": "de9c085cc78177e62f24198c68152e0eca80b708", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bc638b8635a1a6183d891f28d1edb573efb8e4d0/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc638b8635a1a6183d891f28d1edb573efb8e4d0/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=bc638b8635a1a6183d891f28d1edb573efb8e4d0", "patch": "@@ -384,13 +384,14 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         if self.cx.current_expansion.depth > self.cx.ecfg.recursion_limit {\n             let info = self.cx.current_expansion.mark.expn_info().unwrap();\n             let suggested_limit = self.cx.ecfg.recursion_limit * 2;\n-            let mut err = self.cx.struct_span_fatal(info.call_site,\n+            let mut err = self.cx.struct_span_err(info.call_site,\n                 &format!(\"recursion limit reached while expanding the macro `{}`\",\n                          info.callee.name()));\n             err.help(&format!(\n                 \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate\",\n                 suggested_limit));\n             err.emit();\n+            self.cx.trace_macros_diag();\n             panic!(FatalError);\n         }\n \n@@ -439,11 +440,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             }\n             ProcMacroDerive(..) | BuiltinDerive(..) => {\n                 self.cx.span_err(attr.span, &format!(\"`{}` is a derive mode\", attr.path));\n+                self.cx.trace_macros_diag();\n                 kind.dummy(attr.span)\n             }\n             _ => {\n                 let msg = &format!(\"macro `{}` may not be used in attributes\", attr.path);\n                 self.cx.span_err(attr.span, msg);\n+                self.cx.trace_macros_diag();\n                 kind.dummy(attr.span)\n             }\n         }\n@@ -482,6 +485,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 if let Err(msg) = validate_and_set_expn_info(def_span.map(|(_, s)| s),\n                                                              false, false) {\n                     self.cx.span_err(path.span, &msg);\n+                    self.cx.trace_macros_diag();\n                     return kind.dummy(span);\n                 }\n                 kind.make_from(expand.expand(self.cx, span, mac.node.stream()))\n@@ -497,6 +501,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                                                              allow_internal_unstable,\n                                                              allow_internal_unsafe) {\n                     self.cx.span_err(path.span, &msg);\n+                    self.cx.trace_macros_diag();\n                     return kind.dummy(span);\n                 }\n                 kind.make_from(expander.expand(self.cx, span, mac.node.stream()))\n@@ -506,6 +511,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 if ident.name == keywords::Invalid.name() {\n                     self.cx.span_err(path.span,\n                                     &format!(\"macro {}! expects an ident argument\", path));\n+                    self.cx.trace_macros_diag();\n                     return kind.dummy(span);\n                 };\n \n@@ -526,11 +532,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             MultiDecorator(..) | MultiModifier(..) | AttrProcMacro(..) => {\n                 self.cx.span_err(path.span,\n                                  &format!(\"`{}` can only be used in attributes\", path));\n+                self.cx.trace_macros_diag();\n                 return kind.dummy(span);\n             }\n \n             ProcMacroDerive(..) | BuiltinDerive(..) => {\n                 self.cx.span_err(path.span, &format!(\"`{}` is a derive mode\", path));\n+                self.cx.trace_macros_diag();\n                 return kind.dummy(span);\n             }\n \n@@ -539,6 +547,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     let msg =\n                         format!(\"macro {}! expects no ident argument, given '{}'\", path, ident);\n                     self.cx.span_err(path.span, &msg);\n+                    self.cx.trace_macros_diag();\n                     return kind.dummy(span);\n                 }\n \n@@ -564,6 +573,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             let msg = format!(\"non-{kind} macro in {kind} position: {name}\",\n                               name = path.segments[0].identifier.name, kind = kind.name());\n             self.cx.span_err(path.span, &msg);\n+            self.cx.trace_macros_diag();\n             kind.dummy(span)\n         })\n     }\n@@ -617,6 +627,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             _ => {\n                 let msg = &format!(\"macro `{}` may not be used for derive attributes\", attr.path);\n                 self.cx.span_err(span, msg);\n+                self.cx.trace_macros_diag();\n                 kind.dummy(span)\n             }\n         }\n@@ -629,6 +640,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             Ok(expansion) => expansion,\n             Err(mut err) => {\n                 err.emit();\n+                self.cx.trace_macros_diag();\n                 return kind.dummy(span);\n             }\n         };\n@@ -739,6 +751,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         if !traits.is_empty() &&\n            (kind == ExpansionKind::TraitItems || kind == ExpansionKind::ImplItems) {\n             self.cx.span_err(traits[0].span, \"`derive` can be only be applied to items\");\n+            self.cx.trace_macros_diag();\n             return kind.expect_from_annotatables(::std::iter::once(item));\n         }\n         self.collect(kind, InvocationKind::Attr { attr: attr, traits: traits, item: item })"}, {"sha": "5e58f003c2be7479c27d827dea1d25a62e6f0a43", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc638b8635a1a6183d891f28d1edb573efb8e4d0/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc638b8635a1a6183d891f28d1edb573efb8e4d0/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=bc638b8635a1a6183d891f28d1edb573efb8e4d0", "patch": "@@ -172,7 +172,9 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n     }\n \n     let best_fail_msg = parse_failure_msg(best_fail_tok.expect(\"ran no matchers\"));\n-    cx.span_fatal(best_fail_spot.substitute_dummy(sp), &best_fail_msg);\n+    cx.span_err(best_fail_spot.substitute_dummy(sp), &best_fail_msg);\n+    cx.trace_macros_diag();\n+    DummyResult::any(sp)\n }\n \n // Note that macro-by-example's input is also matched against a token tree:"}, {"sha": "1b46e94584e6b33d507b03b99fa0dc8734102a11", "filename": "src/test/ui/macros/assert_eq_trailing_comma.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc638b8635a1a6183d891f28d1edb573efb8e4d0/src%2Ftest%2Fui%2Fmacros%2Fassert_eq_trailing_comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc638b8635a1a6183d891f28d1edb573efb8e4d0/src%2Ftest%2Fui%2Fmacros%2Fassert_eq_trailing_comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert_eq_trailing_comma.stderr?ref=bc638b8635a1a6183d891f28d1edb573efb8e4d0", "patch": "@@ -4,3 +4,5 @@ error: unexpected end of macro invocation\n 12 |     assert_eq!(1, 1,);\n    |                    ^\n \n+error: aborting due to previous error\n+"}, {"sha": "33d2cb0ed82429207921e38d6e35563e82c83175", "filename": "src/test/ui/macros/assert_ne_trailing_comma.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc638b8635a1a6183d891f28d1edb573efb8e4d0/src%2Ftest%2Fui%2Fmacros%2Fassert_ne_trailing_comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc638b8635a1a6183d891f28d1edb573efb8e4d0/src%2Ftest%2Fui%2Fmacros%2Fassert_ne_trailing_comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert_ne_trailing_comma.stderr?ref=bc638b8635a1a6183d891f28d1edb573efb8e4d0", "patch": "@@ -4,3 +4,5 @@ error: unexpected end of macro invocation\n 12 |     assert_ne!(1, 2,);\n    |                    ^\n \n+error: aborting due to previous error\n+"}, {"sha": "eb7292b0a652bd3b28d2e361e8cf5b3750ae11ec", "filename": "src/test/ui/macros/trace_faulty_macros.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/bc638b8635a1a6183d891f28d1edb573efb8e4d0/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc638b8635a1a6183d891f28d1edb573efb8e4d0/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.rs?ref=bc638b8635a1a6183d891f28d1edb573efb8e4d0", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z trace-macros\n+\n+#![recursion_limit=\"4\"]\n+\n+macro_rules! my_faulty_macro {\n+    () => {\n+        my_faulty_macro!(bcd);\n+    };\n+}\n+\n+macro_rules! pat_macro {\n+    () => {\n+        pat_macro!(A{a:a, b:0, c:_, ..});\n+    };\n+    ($a:pat) => {\n+        $a\n+    };\n+}\n+\n+macro_rules! my_recursive_macro {\n+    () => {\n+        my_recursive_macro!();\n+    };\n+}\n+\n+macro_rules! my_macro {\n+    () => {\n+\n+    };\n+}\n+\n+fn main() {\n+    my_faulty_macro!();\n+    my_recursive_macro!();\n+    test!();\n+    non_exisiting!();\n+    derive!(Debug);\n+    let a = pat_macro!();\n+}\n+\n+#[my_macro]\n+fn use_bang_macro_as_attr(){}\n+\n+#[derive(Debug)]\n+fn use_derive_macro_as_attr(){}"}, {"sha": "f4aeb8332f0b0643af61e8e8edf321e2159555a6", "filename": "src/test/ui/macros/trace_faulty_macros.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bc638b8635a1a6183d891f28d1edb573efb8e4d0/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc638b8635a1a6183d891f28d1edb573efb8e4d0/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr?ref=bc638b8635a1a6183d891f28d1edb573efb8e4d0", "patch": "@@ -0,0 +1,47 @@\n+error: no rules expected the token `bcd`\n+  --> $DIR/trace_faulty_macros.rs:17:26\n+   |\n+17 |         my_faulty_macro!(bcd);\n+   |                          ^^^\n+...\n+43 |     my_faulty_macro!();\n+   |     ------------------- in this macro invocation\n+\n+note: trace_macro\n+  --> $DIR/trace_faulty_macros.rs:43:5\n+   |\n+43 |     my_faulty_macro!();\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: expanding `my_faulty_macro! {  }`\n+   = note: to `my_faulty_macro ! ( bcd ) ;`\n+   = note: expanding `my_faulty_macro! { bcd }`\n+\n+error: recursion limit reached while expanding the macro `my_recursive_macro`\n+  --> $DIR/trace_faulty_macros.rs:32:9\n+   |\n+32 |         my_recursive_macro!();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+...\n+44 |     my_recursive_macro!();\n+   |     ---------------------- in this macro invocation\n+   |\n+   = help: consider adding a `#![recursion_limit=\"8\"]` attribute to your crate\n+\n+note: trace_macro\n+  --> $DIR/trace_faulty_macros.rs:44:5\n+   |\n+44 |     my_recursive_macro!();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: expanding `my_recursive_macro! {  }`\n+   = note: to `my_recursive_macro ! (  ) ;`\n+   = note: expanding `my_recursive_macro! {  }`\n+   = note: to `my_recursive_macro ! (  ) ;`\n+   = note: expanding `my_recursive_macro! {  }`\n+   = note: to `my_recursive_macro ! (  ) ;`\n+   = note: expanding `my_recursive_macro! {  }`\n+   = note: to `my_recursive_macro ! (  ) ;`\n+   = note: expanding `my_recursive_macro! {  }`\n+   = note: to `my_recursive_macro ! (  ) ;`\n+"}]}