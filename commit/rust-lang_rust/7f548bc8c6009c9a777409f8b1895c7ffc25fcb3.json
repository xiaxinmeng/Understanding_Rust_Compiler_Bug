{"sha": "7f548bc8c6009c9a777409f8b1895c7ffc25fcb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNTQ4YmM4YzYwMDljOWE3Nzc0MDlmOGIxODk1YzdmZmMyNWZjYjM=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-03-27T14:31:19Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-03-27T14:31:19Z"}, "message": "add --edition flag to rustdoc", "tree": {"sha": "9216a2c8cbbf3aa54c0ee52f06a10f7c7b96262a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9216a2c8cbbf3aa54c0ee52f06a10f7c7b96262a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f548bc8c6009c9a777409f8b1895c7ffc25fcb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f548bc8c6009c9a777409f8b1895c7ffc25fcb3", "html_url": "https://github.com/rust-lang/rust/commit/7f548bc8c6009c9a777409f8b1895c7ffc25fcb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f548bc8c6009c9a777409f8b1895c7ffc25fcb3/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14ac1b5faab32d268a85dfde6c6592b7183c5864", "url": "https://api.github.com/repos/rust-lang/rust/commits/14ac1b5faab32d268a85dfde6c6592b7183c5864", "html_url": "https://github.com/rust-lang/rust/commit/14ac1b5faab32d268a85dfde6c6592b7183c5864"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "02d65c194f99bc518394c270f9ba7547973e8cfb", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f548bc8c6009c9a777409f8b1895c7ffc25fcb3/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f548bc8c6009c9a777409f8b1895c7ffc25fcb3/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=7f548bc8c6009c9a777409f8b1895c7ffc25fcb3", "patch": "@@ -25,6 +25,7 @@ use rustc_metadata::cstore::CStore;\n \n use syntax::ast::NodeId;\n use syntax::codemap;\n+use syntax::edition::Edition;\n use syntax::feature_gate::UnstableFeatures;\n use errors;\n use errors::emitter::ColorConfig;\n@@ -120,7 +121,8 @@ pub fn run_core(search_paths: SearchPaths,\n                 maybe_sysroot: Option<PathBuf>,\n                 allow_warnings: bool,\n                 crate_name: Option<String>,\n-                force_unstable_if_unmarked: bool) -> (clean::Crate, RenderInfo)\n+                force_unstable_if_unmarked: bool,\n+                edition: Edition) -> (clean::Crate, RenderInfo)\n {\n     // Parse, resolve, and typecheck the given crate.\n \n@@ -144,6 +146,7 @@ pub fn run_core(search_paths: SearchPaths,\n         actually_rustdoc: true,\n         debugging_opts: config::DebuggingOptions {\n             force_unstable_if_unmarked,\n+            edition,\n             ..config::basic_debugging_options()\n         },\n         ..config::basic_options().clone()"}, {"sha": "c22269cbab428d86029160a8326842a0b86903b1", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7f548bc8c6009c9a777409f8b1895c7ffc25fcb3/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f548bc8c6009c9a777409f8b1895c7ffc25fcb3/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=7f548bc8c6009c9a777409f8b1895c7ffc25fcb3", "patch": "@@ -61,6 +61,7 @@ use std::path::{Path, PathBuf};\n use std::process;\n use std::sync::mpsc::channel;\n \n+use syntax::edition::Edition;\n use externalfiles::ExternalHtml;\n use rustc::session::search_paths::SearchPaths;\n use rustc::session::config::{ErrorOutputType, RustcOptGroup, nightly_options, Externs};\n@@ -270,6 +271,11 @@ pub fn opts() -> Vec<RustcOptGroup> {\n                       \\\"main-suffix.css\\\"\",\n                      \"PATH\")\n         }),\n+        unstable(\"edition\", |o| {\n+            o.optopt(\"\", \"edition\",\n+                     \"edition to use when compiling rust code (default: 2015)\",\n+                     \"EDITION\")\n+        }),\n     ]\n }\n \n@@ -428,14 +434,23 @@ pub fn main_args(args: &[String]) -> isize {\n     let sort_modules_alphabetically = !matches.opt_present(\"sort-modules-by-appearance\");\n     let resource_suffix = matches.opt_str(\"resource-suffix\");\n \n+    let edition = matches.opt_str(\"edition\").unwrap_or(\"2015\".to_string());\n+    let edition = match edition.parse() {\n+        Ok(e) => e,\n+        Err(_) => {\n+            print_error(\"could not parse edition\");\n+            return 1;\n+        }\n+    };\n+\n     match (should_test, markdown_input) {\n         (true, true) => {\n             return markdown::test(input, cfgs, libs, externs, test_args, maybe_sysroot,\n                                   display_warnings, linker)\n         }\n         (true, false) => {\n             return test::run(Path::new(input), cfgs, libs, externs, test_args, crate_name,\n-                             maybe_sysroot, display_warnings, linker)\n+                             maybe_sysroot, display_warnings, linker, edition)\n         }\n         (false, true) => return markdown::render(Path::new(input),\n                                                  output.unwrap_or(PathBuf::from(\"doc\")),\n@@ -445,7 +460,7 @@ pub fn main_args(args: &[String]) -> isize {\n     }\n \n     let output_format = matches.opt_str(\"w\");\n-    let res = acquire_input(PathBuf::from(input), externs, &matches, move |out| {\n+    let res = acquire_input(PathBuf::from(input), externs, edition, &matches, move |out| {\n         let Output { krate, passes, renderinfo } = out;\n         info!(\"going to format\");\n         match output_format.as_ref().map(|s| &**s) {\n@@ -486,14 +501,15 @@ fn print_error<T>(error_message: T) where T: Display {\n /// and files and then generates the necessary rustdoc output for formatting.\n fn acquire_input<R, F>(input: PathBuf,\n                        externs: Externs,\n+                       edition: Edition,\n                        matches: &getopts::Matches,\n                        f: F)\n                        -> Result<R, String>\n where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n     match matches.opt_str(\"r\").as_ref().map(|s| &**s) {\n-        Some(\"rust\") => Ok(rust_input(input, externs, matches, f)),\n+        Some(\"rust\") => Ok(rust_input(input, externs, edition, matches, f)),\n         Some(s) => Err(format!(\"unknown input format: {}\", s)),\n-        None => Ok(rust_input(input, externs, matches, f))\n+        None => Ok(rust_input(input, externs, edition, matches, f))\n     }\n }\n \n@@ -519,7 +535,7 @@ fn parse_externs(matches: &getopts::Matches) -> Result<Externs, String> {\n /// generated from the cleaned AST of the crate.\n ///\n /// This form of input will run all of the plug/cleaning passes\n-fn rust_input<R, F>(cratefile: PathBuf, externs: Externs, matches: &getopts::Matches, f: F) -> R\n+fn rust_input<R, F>(cratefile: PathBuf, externs: Externs, edition: Edition, matches: &getopts::Matches, f: F) -> R\n where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n     let mut default_passes = !matches.opt_present(\"no-defaults\");\n     let mut passes = matches.opt_strs(\"passes\");\n@@ -563,7 +579,7 @@ where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n         let (mut krate, renderinfo) =\n             core::run_core(paths, cfgs, externs, Input::File(cratefile), triple, maybe_sysroot,\n                            display_warnings, crate_name.clone(),\n-                           force_unstable_if_unmarked);\n+                           force_unstable_if_unmarked, edition);\n \n         info!(\"finished with rustc\");\n "}, {"sha": "ba0060521b7bfb4a2a1e1d008806ec30de34a0c3", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f548bc8c6009c9a777409f8b1895c7ffc25fcb3/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f548bc8c6009c9a777409f8b1895c7ffc25fcb3/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=7f548bc8c6009c9a777409f8b1895c7ffc25fcb3", "patch": "@@ -34,6 +34,7 @@ use rustc_metadata::cstore::CStore;\n use rustc_resolve::MakeGlobMap;\n use syntax::ast;\n use syntax::codemap::CodeMap;\n+use syntax::edition::Edition;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::with_globals;\n use syntax_pos::{BytePos, DUMMY_SP, Pos, Span, FileName};\n@@ -57,7 +58,8 @@ pub fn run(input_path: &Path,\n            crate_name: Option<String>,\n            maybe_sysroot: Option<PathBuf>,\n            display_warnings: bool,\n-           linker: Option<PathBuf>)\n+           linker: Option<PathBuf>,\n+           edition: Edition)\n            -> isize {\n     let input = config::Input::File(input_path.to_owned());\n \n@@ -70,6 +72,10 @@ pub fn run(input_path: &Path,\n         unstable_features: UnstableFeatures::from_environment(),\n         lint_cap: Some(::rustc::lint::Level::Allow),\n         actually_rustdoc: true,\n+        debugging_opts: config::DebuggingOptions {\n+            edition,\n+            ..config::basic_debugging_options()\n+        },\n         ..config::basic_options().clone()\n     };\n "}]}