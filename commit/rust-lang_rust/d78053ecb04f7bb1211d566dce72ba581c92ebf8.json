{"sha": "d78053ecb04f7bb1211d566dce72ba581c92ebf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ODA1M2VjYjA0ZjdiYjEyMTFkNTY2ZGNlNzJiYTU4MWM5MmViZjg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-07T22:39:29Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-07T22:39:47Z"}, "message": "syntax: try to fix pattern printing yet again, r=burningtree.", "tree": {"sha": "630fd9c1a9b5098aefb75452f47a79cc5ce08bca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/630fd9c1a9b5098aefb75452f47a79cc5ce08bca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d78053ecb04f7bb1211d566dce72ba581c92ebf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d78053ecb04f7bb1211d566dce72ba581c92ebf8", "html_url": "https://github.com/rust-lang/rust/commit/d78053ecb04f7bb1211d566dce72ba581c92ebf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d78053ecb04f7bb1211d566dce72ba581c92ebf8/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a3170a24c6bee2b54d718b86fb20c71d663b3fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a3170a24c6bee2b54d718b86fb20c71d663b3fa", "html_url": "https://github.com/rust-lang/rust/commit/4a3170a24c6bee2b54d718b86fb20c71d663b3fa"}], "stats": {"total": 53, "additions": 31, "deletions": 22}, "files": [{"sha": "47f9af5986c88dd9c822946bea10f143ffa57853", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d78053ecb04f7bb1211d566dce72ba581c92ebf8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78053ecb04f7bb1211d566dce72ba581c92ebf8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d78053ecb04f7bb1211d566dce72ba581c92ebf8", "patch": "@@ -107,7 +107,7 @@ fn ty_to_str(ty: @ast::Ty, intr: @ident_interner) -> ~str {\n }\n \n fn pat_to_str(pat: @ast::pat, intr: @ident_interner) -> ~str {\n-    to_str(pat, print_pat, intr)\n+    to_str(pat, print_irrefutable_pat, intr)\n }\n \n fn expr_to_str(e: @ast::expr, intr: @ident_interner) -> ~str {\n@@ -1266,7 +1266,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n                 if first {\n                     first = false;\n                 } else { space(s.s); word_space(s, ~\"|\"); }\n-                print_pat(s, *p);\n+                print_refutable_pat(s, *p);\n             }\n             space(s.s);\n             match arm.guard {\n@@ -1461,7 +1461,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n }\n \n fn print_local_decl(s: ps, loc: @ast::local) {\n-    print_pat(s, loc.node.pat);\n+    print_irrefutable_pat(s, loc.node.pat);\n     match loc.node.ty.node {\n       ast::ty_infer => (),\n       _ => { word_space(s, ~\":\"); print_type(s, loc.node.ty); }\n@@ -1538,11 +1538,15 @@ fn print_path(s: ps, &&path: @ast::path, colons_before_params: bool) {\n     }\n }\n \n-fn print_pat(s: ps, &&pat: @ast::pat) {\n-    print_pat_full(s, pat, true)\n+fn print_irrefutable_pat(s: ps, &&pat: @ast::pat) {\n+    print_pat(s, pat, false)\n }\n \n-fn print_pat_full(s: ps, &&pat: @ast::pat, print_binding_mode: bool) {\n+fn print_refutable_pat(s: ps, &&pat: @ast::pat) {\n+    print_pat(s, pat, true)\n+}\n+\n+fn print_pat(s: ps, &&pat: @ast::pat, refutable: bool) {\n     maybe_print_comment(s, pat.span.lo);\n     let ann_node = node_pat(s, pat);\n     (s.ann.pre)(ann_node);\n@@ -1551,7 +1555,7 @@ fn print_pat_full(s: ps, &&pat: @ast::pat, print_binding_mode: bool) {\n     match pat.node {\n       ast::pat_wild => word(s.s, ~\"_\"),\n       ast::pat_ident(binding_mode, path, sub) => {\n-          if print_binding_mode {\n+          if refutable {\n               match binding_mode {\n                   ast::bind_by_ref(mutbl) => {\n                       word_nbsp(s, ~\"ref\");\n@@ -1570,7 +1574,7 @@ fn print_pat_full(s: ps, &&pat: @ast::pat, print_binding_mode: bool) {\n           match sub {\n               Some(p) => {\n                   word(s.s, ~\"@\");\n-                  print_pat(s, p);\n+                  print_pat(s, p, refutable);\n               }\n               None => ()\n           }\n@@ -1582,23 +1586,26 @@ fn print_pat_full(s: ps, &&pat: @ast::pat, print_binding_mode: bool) {\n           Some(args) => {\n             if args.is_not_empty() {\n               popen(s);\n-              commasep(s, inconsistent, args, print_pat);\n+              commasep(s, inconsistent, args,\n+                       |s, p| print_pat(s, p, refutable));\n               pclose(s);\n             } else { }\n           }\n         }\n       }\n       ast::pat_rec(fields, etc) => {\n         word(s.s, ~\"{\");\n-        fn print_field(s: ps, f: ast::field_pat) {\n+        fn print_field(s: ps, f: ast::field_pat, refutable: bool) {\n             cbox(s, indent_unit);\n             print_ident(s, f.ident);\n             word_space(s, ~\":\");\n-            print_pat(s, f.pat);\n+            print_pat(s, f.pat, refutable);\n             end(s);\n         }\n         fn get_span(f: ast::field_pat) -> codemap::span { return f.pat.span; }\n-        commasep_cmnt(s, consistent, fields, print_field, get_span);\n+        commasep_cmnt(s, consistent, fields,\n+                      |s, f| print_field(s, f, refutable),\n+                      get_span);\n         if etc {\n             if vec::len(fields) != 0u { word_space(s, ~\",\"); }\n             word(s.s, ~\"_\");\n@@ -1608,15 +1615,17 @@ fn print_pat_full(s: ps, &&pat: @ast::pat, print_binding_mode: bool) {\n       ast::pat_struct(path, fields, etc) => {\n         print_path(s, path, true);\n         word(s.s, ~\"{\");\n-        fn print_field(s: ps, f: ast::field_pat) {\n+        fn print_field(s: ps, f: ast::field_pat, refutable: bool) {\n             cbox(s, indent_unit);\n             print_ident(s, f.ident);\n             word_space(s, ~\":\");\n-            print_pat(s, f.pat);\n+            print_pat(s, f.pat, refutable);\n             end(s);\n         }\n         fn get_span(f: ast::field_pat) -> codemap::span { return f.pat.span; }\n-        commasep_cmnt(s, consistent, fields, print_field, get_span);\n+        commasep_cmnt(s, consistent, fields,\n+                      |s, f| print_field(s,f,refutable),\n+                      get_span);\n         if etc {\n             if vec::len(fields) != 0u { word_space(s, ~\",\"); }\n             word(s.s, ~\"_\");\n@@ -1625,20 +1634,20 @@ fn print_pat_full(s: ps, &&pat: @ast::pat, print_binding_mode: bool) {\n       }\n       ast::pat_tup(elts) => {\n         popen(s);\n-        commasep(s, inconsistent, elts, print_pat);\n+        commasep(s, inconsistent, elts, |s, p| print_pat(s, p, refutable));\n         pclose(s);\n       }\n       ast::pat_box(inner) => {\n           word(s.s, ~\"@\");\n-          print_pat(s, inner);\n+          print_pat(s, inner, refutable);\n       }\n       ast::pat_uniq(inner) => {\n           word(s.s, ~\"~\");\n-          print_pat(s, inner);\n+          print_pat(s, inner, refutable);\n       }\n       ast::pat_region(inner) => {\n           word(s.s, ~\"&\");\n-          print_pat(s, inner);\n+          print_pat(s, inner, refutable);\n       }\n       ast::pat_lit(e) => print_expr(s, e),\n       ast::pat_range(begin, end) => {\n@@ -1885,7 +1894,7 @@ fn print_arg(s: ps, input: ast::arg) {\n     ibox(s, indent_unit);\n     print_arg_mode(s, input.mode);\n     match input.ty.node {\n-      ast::ty_infer => print_pat_full(s, input.pat, false),\n+      ast::ty_infer => print_irrefutable_pat(s, input.pat),\n       _ => {\n         match input.pat.node {\n             ast::pat_ident(_, path, _) if\n@@ -1894,7 +1903,7 @@ fn print_arg(s: ps, input: ast::arg) {\n                 // Do nothing.\n             }\n             _ => {\n-                print_pat_full(s, input.pat, false);\n+                print_irrefutable_pat(s, input.pat);\n                 word(s.s, ~\":\");\n                 space(s.s);\n             }"}, {"sha": "f1581b0043120528548e186bf0912f4f60501a5a", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d78053ecb04f7bb1211d566dce72ba581c92ebf8/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78053ecb04f7bb1211d566dce72ba581c92ebf8/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=d78053ecb04f7bb1211d566dce72ba581c92ebf8", "patch": "@@ -61,7 +61,7 @@ fn main() {\n     check_pp(ext_cx, *stmt2, pprust::print_stmt, ~\"let x: int = 23;\");\n \n     let pat = #ast[pat]{some(_)};\n-    check_pp(ext_cx, pat, pprust::print_pat, ~\"some(_)\");\n+    check_pp(ext_cx, pat, pprust::print_refutable_pat, ~\"some(_)\");\n \n     // issue #1785\n     let x = #ast{1};"}]}