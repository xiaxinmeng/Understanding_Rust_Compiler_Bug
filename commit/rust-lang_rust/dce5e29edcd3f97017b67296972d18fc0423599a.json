{"sha": "dce5e29edcd3f97017b67296972d18fc0423599a", "node_id": "C_kwDOAAsO6NoAKGRjZTVlMjllZGNkM2Y5NzAxN2I2NzI5Njk3MmQxOGZjMDQyMzU5OWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-11T20:08:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-11T20:08:09Z"}, "message": "Rollup merge of #106726 - cmorin6:fix-comment-typos, r=Nilstrieb\n\nFix some typos in code comments.", "tree": {"sha": "491563ed9af0d3829b52fe3aebf63edb323b8a3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/491563ed9af0d3829b52fe3aebf63edb323b8a3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dce5e29edcd3f97017b67296972d18fc0423599a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjvxcpCRBK7hj4Ov3rIwAAGh8IAJ1SQOZjRXEApvsoo5NJLOtY\nmMfK+36+8ryodmHBLX2dt7wG6UzTmmXF4DGa0bb9Q36A4ZTmdtdLdPYBN48WggS9\nU8XH4iOBeHDBqTCZVwLWsRurbjO1jemTmtGPbaGwMr1EcmDCl9XLF4NN2lpr3yz9\n0mDbMRvHKO90myjRWA7PJAp4sN4Jl8ijeUGGntthVGWBXKnrHf/HpH56POVsAXuC\nDUv9KlB0GN2CktiJkvKlQEnDk09ssfFOHrrKrhiKOudspLH/eFCkhtgU4j/1JkcI\n8bbMJoY28TOXkmXv3l72umALxfEBbcErHWx0TQ/NpjScWmrHjN3fsNenHphBj54=\n=yU/L\n-----END PGP SIGNATURE-----\n", "payload": "tree 491563ed9af0d3829b52fe3aebf63edb323b8a3e\nparent 865d83e87ab489f2915802e70a5c4a3f2424ff67\nparent 33ebe04183c569b219d6ec379727646bba78e744\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673467689 +0100\ncommitter GitHub <noreply@github.com> 1673467689 +0100\n\nRollup merge of #106726 - cmorin6:fix-comment-typos, r=Nilstrieb\n\nFix some typos in code comments.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dce5e29edcd3f97017b67296972d18fc0423599a", "html_url": "https://github.com/rust-lang/rust/commit/dce5e29edcd3f97017b67296972d18fc0423599a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dce5e29edcd3f97017b67296972d18fc0423599a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "865d83e87ab489f2915802e70a5c4a3f2424ff67", "url": "https://api.github.com/repos/rust-lang/rust/commits/865d83e87ab489f2915802e70a5c4a3f2424ff67", "html_url": "https://github.com/rust-lang/rust/commit/865d83e87ab489f2915802e70a5c4a3f2424ff67"}, {"sha": "33ebe04183c569b219d6ec379727646bba78e744", "url": "https://api.github.com/repos/rust-lang/rust/commits/33ebe04183c569b219d6ec379727646bba78e744", "html_url": "https://github.com/rust-lang/rust/commit/33ebe04183c569b219d6ec379727646bba78e744"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "25dc88c535da9c69c110a27dbf2143e7c7af3f56", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dce5e29edcd3f97017b67296972d18fc0423599a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce5e29edcd3f97017b67296972d18fc0423599a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=dce5e29edcd3f97017b67296972d18fc0423599a", "patch": "@@ -1098,7 +1098,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     // There are a few environmental pre-conditions that shape how the system\n     // is set up:\n     //\n-    // - Error reporting only can happen on the main thread because that's the\n+    // - Error reporting can only happen on the main thread because that's the\n     //   only place where we have access to the compiler `Session`.\n     // - LLVM work can be done on any thread.\n     // - Codegen can only happen on the main thread.\n@@ -1110,16 +1110,16 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     // Error Reporting\n     // ===============\n     // The error reporting restriction is handled separately from the rest: We\n-    // set up a `SharedEmitter` the holds an open channel to the main thread.\n+    // set up a `SharedEmitter` that holds an open channel to the main thread.\n     // When an error occurs on any thread, the shared emitter will send the\n     // error message to the receiver main thread (`SharedEmitterMain`). The\n     // main thread will periodically query this error message queue and emit\n     // any error messages it has received. It might even abort compilation if\n-    // has received a fatal error. In this case we rely on all other threads\n+    // it has received a fatal error. In this case we rely on all other threads\n     // being torn down automatically with the main thread.\n     // Since the main thread will often be busy doing codegen work, error\n     // reporting will be somewhat delayed, since the message queue can only be\n-    // checked in between to work packages.\n+    // checked in between two work packages.\n     //\n     // Work Processing Infrastructure\n     // ==============================\n@@ -1133,7 +1133,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     // thread about what work to do when, and it will spawn off LLVM worker\n     // threads as open LLVM WorkItems become available.\n     //\n-    // The job of the main thread is to codegen CGUs into LLVM work package\n+    // The job of the main thread is to codegen CGUs into LLVM work packages\n     // (since the main thread is the only thread that can do this). The main\n     // thread will block until it receives a message from the coordinator, upon\n     // which it will codegen one CGU, send it to the coordinator and block\n@@ -1142,10 +1142,10 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     //\n     // The coordinator keeps a queue of LLVM WorkItems, and when a `Token` is\n     // available, it will spawn off a new LLVM worker thread and let it process\n-    // that a WorkItem. When a LLVM worker thread is done with its WorkItem,\n+    // a WorkItem. When a LLVM worker thread is done with its WorkItem,\n     // it will just shut down, which also frees all resources associated with\n     // the given LLVM module, and sends a message to the coordinator that the\n-    // has been completed.\n+    // WorkItem has been completed.\n     //\n     // Work Scheduling\n     // ===============\n@@ -1165,7 +1165,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     //\n     // Doing LLVM Work on the Main Thread\n     // ----------------------------------\n-    // Since the main thread owns the compiler processes implicit `Token`, it is\n+    // Since the main thread owns the compiler process's implicit `Token`, it is\n     // wasteful to keep it blocked without doing any work. Therefore, what we do\n     // in this case is: We spawn off an additional LLVM worker thread that helps\n     // reduce the queue. The work it is doing corresponds to the implicit\n@@ -1216,7 +1216,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     // ------------------------------\n     //\n     // The final job the coordinator thread is responsible for is managing LTO\n-    // and how that works. When LTO is requested what we'll to is collect all\n+    // and how that works. When LTO is requested what we'll do is collect all\n     // optimized LLVM modules into a local vector on the coordinator. Once all\n     // modules have been codegened and optimized we hand this to the `lto`\n     // module for further optimization. The `lto` module will return back a list"}]}