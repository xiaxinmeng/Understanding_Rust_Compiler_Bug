{"sha": "b9f1a0762a7c08c71f485fa4b152ed2477b07560", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ZjFhMDc2MmE3YzA4YzcxZjQ4NWZhNGIxNTJlZDI0NzdiMDc1NjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-10T22:40:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-10T22:40:17Z"}, "message": "Auto merge of #52229 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #51612 (NLL: fix E0594 \"change to mutable ref\" suggestion)\n - #51722 (Updated RELEASES for 1.28.0)\n - #52064 (Clarifying how the alignment of the struct works)\n - #52149 (Add #[repr(transparent)] to Atomic* types)\n - #52151 (Trait impl settings)\n - #52171 (Correct some codegen stats counter inconsistencies)\n - #52195 (rustc: Avoid /tmp/ in graphviz writing)\n\nFailed merges:\n\n - #52164 (use proper footnote syntax for references)\n\nr? @ghost", "tree": {"sha": "8b8267daa0ccd6803ff1c902a384932d20c5bee6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b8267daa0ccd6803ff1c902a384932d20c5bee6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9f1a0762a7c08c71f485fa4b152ed2477b07560", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9f1a0762a7c08c71f485fa4b152ed2477b07560", "html_url": "https://github.com/rust-lang/rust/commit/b9f1a0762a7c08c71f485fa4b152ed2477b07560", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9f1a0762a7c08c71f485fa4b152ed2477b07560/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5f6498d3d5c9dac841009d7b49738923826af75", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f6498d3d5c9dac841009d7b49738923826af75", "html_url": "https://github.com/rust-lang/rust/commit/e5f6498d3d5c9dac841009d7b49738923826af75"}, {"sha": "d5c907890b0e9e05c66f49dc38318a256812e252", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5c907890b0e9e05c66f49dc38318a256812e252", "html_url": "https://github.com/rust-lang/rust/commit/d5c907890b0e9e05c66f49dc38318a256812e252"}], "stats": {"total": 200, "additions": 177, "deletions": 23}, "files": [{"sha": "cf80c166759bfbef1f66cfd4e77ce7df5b818947", "filename": "RELEASES.md", "status": "modified", "additions": 145, "deletions": 2, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/b9f1a0762a7c08c71f485fa4b152ed2477b07560/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/b9f1a0762a7c08c71f485fa4b152ed2477b07560/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=b9f1a0762a7c08c71f485fa4b152ed2477b07560", "patch": "@@ -1,3 +1,146 @@\n+Version 1.28.0 (2018-08-02)\n+===========================\n+\n+Language\n+--------\n+- [The `#[repr(transparent)]` attribute is now stable.][51562] This attribute\n+  allows a Rust newtype wrapper (`struct NewType<T>(T);`) to be represented as\n+  the inner type across Foreign Function Interface (FFI) boundaries.\n+- [The keywords `pure`, `sizeof`, `alignof`, and `offsetof` have been unreserved\n+  and can now be used as identifiers.][51196]\n+- [The `GlobalAlloc` trait and `#[global_allocator]` attribute are now\n+  stable.][51241] This will allow users to specify a global allocator for\n+  their program.\n+- [Unit test functions marked with the `#[test]` attribute can now return\n+  `Result<(), E: Debug>` in addition to `()`.][51298]\n+- [The `lifetime` specifier for `macro_rules!` is now stable.][50385] This\n+  allows macros to easily target lifetimes.\n+\n+Compiler\n+--------\n+- [The `s` and `z` optimisation levels are now stable.][50265] These optimisations\n+  prioritise making smaller binary sizes. `z` is the same as `s` with the\n+  exception that it does not vectorise loops, which typically results in an even\n+  smaller binary.\n+- [The short error format is now stable.][49546] Specified with\n+  `--error-format=short` this option will provide a more compressed output of\n+  rust error messages.\n+- [Added a lint warning when you have duplicated `macro_export`s.][50143]\n+- [Reduced the number of allocations in the macro parser.][50855] This can\n+  improve compile times of macro heavy crates on average by 5%.\n+\n+Libraries\n+---------\n+- [Implemented `Default` for `&mut str`.][51306]\n+- [Implemented `From<bool>` for all integer and unsigned number types.][50554]\n+- [Implemented `Extend` for `()`.][50234]\n+- [The `Debug` implementation of `time::Duration` should now be more easily\n+  human readable.][50364] Previously a `Duration` of one second would printed as\n+  `Duration { secs: 1, nanos: 0 }` and will now be printed as `1s`.\n+- [Implemented `From<&String>` for `Cow<str>`, `From<&Vec<T>>` for `Cow<[T]>`,\n+  `From<Cow<CStr>>` for `CString`, `From<CString>, From<CStr>, From<&CString>`\n+  for `Cow<CStr>`, `From<OsString>, From<OsStr>, From<&OsString>` for\n+  `Cow<OsStr>`, `From<&PathBuf>` for `Cow<Path>`, and `From<Cow<Path>>`\n+  for `PathBuf`.][50170]\n+- [Implemented `Shl` and `Shr` for `Wrapping<u128>`\n+  and `Wrapping<i128>`.][50465]\n+- [`DirEntry::metadata` now uses `fstatat` instead of `lstat` when\n+  possible.][51050] This can provide up to a 40% speed increase.\n+- [Improved error messages when using `format!`.][50610]\n+\n+Stabilized APIs\n+---------------\n+- [`Iterator::step_by`]\n+- [`Path::ancestors`]\n+- [`btree_map::Entry::or_default`]\n+- [`fmt::Alignment`]\n+- [`hash_map::Entry::or_default`]\n+- [`iter::repeat_with`]\n+- [`num::NonZeroUsize`]\n+- [`num::NonZeroU128`]\n+- [`num::NonZeroU16`]\n+- [`num::NonZeroU32`]\n+- [`num::NonZeroU64`]\n+- [`num::NonZeroU8`]\n+- [`ops::RangeBounds`]\n+- [`slice::SliceIndex`]\n+- [`slice::from_mut`]\n+- [`slice::from_ref`]\n+- [`{Any + Send + Sync}::downcast_mut`]\n+- [`{Any + Send + Sync}::downcast_ref`]\n+- [`{Any + Send + Sync}::is`]\n+\n+Cargo\n+-----\n+- [Cargo will now no longer allow you to publish crates with build scripts that\n+  modify the `src` directory.][cargo/5584] The `src` directory in a crate should be\n+  considered to be immutable.\n+\n+Misc\n+----\n+- [The `suggestion_applicability` field in `rustc`'s json output is now\n+  stable.][50486] This will allow dev tools to check whether a code suggestion\n+  would apply to them.\n+\n+Compatibility Notes\n+-------------------\n+- [Rust will no longer consider trait objects with duplicated constraints to\n+  have implementations.][51276] For example the below code will now fail\n+  to compile.\n+  ```rust\n+  trait Trait {}\n+\n+  impl Trait + Send {\n+      fn test(&self) { println!(\"one\"); } //~ ERROR duplicate definitions with name `test`\n+  }\n+\n+  impl Trait + Send + Send {\n+      fn test(&self) { println!(\"two\"); }\n+  }\n+  ```\n+\n+[49546]: https://github.com/rust-lang/rust/pull/49546/\n+[50143]: https://github.com/rust-lang/rust/pull/50143/\n+[50170]: https://github.com/rust-lang/rust/pull/50170/\n+[50234]: https://github.com/rust-lang/rust/pull/50234/\n+[50265]: https://github.com/rust-lang/rust/pull/50265/\n+[50364]: https://github.com/rust-lang/rust/pull/50364/\n+[50385]: https://github.com/rust-lang/rust/pull/50385/\n+[50465]: https://github.com/rust-lang/rust/pull/50465/\n+[50486]: https://github.com/rust-lang/rust/pull/50486/\n+[50554]: https://github.com/rust-lang/rust/pull/50554/\n+[50610]: https://github.com/rust-lang/rust/pull/50610/\n+[50855]: https://github.com/rust-lang/rust/pull/50855/\n+[51050]: https://github.com/rust-lang/rust/pull/51050/\n+[51196]: https://github.com/rust-lang/rust/pull/51196/\n+[51200]: https://github.com/rust-lang/rust/pull/51200/\n+[51241]: https://github.com/rust-lang/rust/pull/51241/\n+[51276]: https://github.com/rust-lang/rust/pull/51276/\n+[51298]: https://github.com/rust-lang/rust/pull/51298/\n+[51306]: https://github.com/rust-lang/rust/pull/51306/\n+[51562]: https://github.com/rust-lang/rust/pull/51562/\n+[cargo/5584]: https://github.com/rust-lang/cargo/pull/5584/\n+[`Iterator::step_by`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.step_by\n+[`Path::ancestors`]: https://doc.rust-lang.org/std/path/struct.Path.html#method.ancestors\n+[`btree_map::Entry::or_default`]: https://doc.rust-lang.org/std/collections/btree_map/enum.Entry.html#method.or_default\n+[`fmt::Alignment`]: https://doc.rust-lang.org/std/fmt/enum.Alignment.html\n+[`hash_map::Entry::or_default`]: https://doc.rust-lang.org/std/collections/btree_map/enum.Entry.html#method.or_default\n+[`iter::repeat_with`]: https://doc.rust-lang.org/std/iter/fn.repeat_with.html\n+[`num::NonZeroUsize`]: https://doc.rust-lang.org/std/num/struct.NonZeroUsize.html\n+[`num::NonZeroU128`]: https://doc.rust-lang.org/std/num/struct.NonZeroU128.html\n+[`num::NonZeroU16`]: https://doc.rust-lang.org/std/num/struct.NonZeroU16.html\n+[`num::NonZeroU32`]: https://doc.rust-lang.org/std/num/struct.NonZeroU32.html\n+[`num::NonZeroU64`]: https://doc.rust-lang.org/std/num/struct.NonZeroU64.html\n+[`num::NonZeroU8`]: https://doc.rust-lang.org/std/num/struct.NonZeroU8.html\n+[`ops::RangeBounds`]: https://doc.rust-lang.org/std/ops/trait.RangeBounds.html\n+[`slice::SliceIndex`]: https://doc.rust-lang.org/std/slice/trait.SliceIndex.html\n+[`slice::from_mut`]: https://doc.rust-lang.org/std/slice/fn.from_mut.html\n+[`slice::from_ref`]: https://doc.rust-lang.org/std/slice/fn.from_ref.html\n+[`{Any + Send + Sync}::downcast_mut`]: https://doc.rust-lang.org/std/any/trait.Any.html#method.downcast_mut-2\n+[`{Any + Send + Sync}::downcast_ref`]: https://doc.rust-lang.org/std/any/trait.Any.html#method.downcast_ref-2\n+[`{Any + Send + Sync}::is`]: https://doc.rust-lang.org/std/any/trait.Any.html#method.is-2\n+\n+\n Version 1.27.0 (2018-06-21)\n ==========================\n \n@@ -188,7 +331,7 @@ Language\n - [Closures now implement `Copy` and/or `Clone` if all captured variables\n   implement either or both traits.][49299]\n - [The inclusive range syntax e.g. `for x in 0..=10` is now stable.][47813]\n-- [Stablise `'_`. The underscore lifetime can be used anywhere where a\n+- [The `'_` lifetime is now stable. The underscore lifetime can be used anywhere where a\n   lifetime can be elided.][49458]\n - [`impl Trait` is now stable allowing you to have abstract types in returns\n    or in function parameters.][49255] e.g. `fn foo() -> impl Iterator<Item=u8>` or\n@@ -389,7 +532,7 @@ Version 1.25.0 (2018-03-29)\n \n Language\n --------\n-- [Stabilised `#[repr(align(x))]`.][47006] [RFC 1358]\n+- [The `#[repr(align(x))]` attribute is now stable.][47006] [RFC 1358]\n - [You can now use nested groups of imports.][47948]\n   e.g. `use std::{fs::File, io::Read, path::{Path, PathBuf}};`\n - [You can now have `|` at the start of a match arm.][47947] e.g."}, {"sha": "8fb4e0d6a02e35cb0e13a7e58851281fc58df04f", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b9f1a0762a7c08c71f485fa4b152ed2477b07560/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f1a0762a7c08c71f485fa4b152ed2477b07560/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=b9f1a0762a7c08c71f485fa4b152ed2477b07560", "patch": "@@ -229,6 +229,8 @@ pub fn forget<T>(t: T) {\n /// 2. Round up the current size to the nearest multiple of the next field's [alignment].\n ///\n /// Finally, round the size of the struct to the nearest multiple of its [alignment].\n+/// The alignment of the struct is usually the largest alignment of all its\n+/// fields; this can be changed with the use of `repr(align(N))`.\n ///\n /// Unlike `C`, zero sized structs are not rounded up to one byte in size.\n ///\n@@ -283,7 +285,8 @@ pub fn forget<T>(t: T) {\n /// // The size of the second field is 2, so add 2 to the size. Size is 4.\n /// // The alignment of the third field is 1, so add 0 to the size for padding. Size is 4.\n /// // The size of the third field is 1, so add 1 to the size. Size is 5.\n-/// // Finally, the alignment of the struct is 2, so add 1 to the size for padding. Size is 6.\n+/// // Finally, the alignment of the struct is 2 (because the largest alignment amongst its\n+/// // fields is 2), so add 1 to the size for padding. Size is 6.\n /// assert_eq!(6, mem::size_of::<FieldStruct>());\n ///\n /// #[repr(C)]"}, {"sha": "9c9e531c593c6cf44ea501a07e183785413c2a36", "filename": "src/libcore/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9f1a0762a7c08c71f485fa4b152ed2477b07560/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f1a0762a7c08c71f485fa4b152ed2477b07560/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=b9f1a0762a7c08c71f485fa4b152ed2477b07560", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n /*!\n-Almost direct (but slightly optimized) Rust translation of Figure 3 of [1].\n+Almost direct (but slightly optimized) Rust translation of Figure 3 of \\[1\\].\n \n-[1] Burger, R. G. and Dybvig, R. K. 1996. Printing floating-point numbers\n+\\[1\\] Burger, R. G. and Dybvig, R. K. 1996. Printing floating-point numbers\n     quickly and accurately. SIGPLAN Not. 31, 5 (May. 1996), 108-116.\n */\n "}, {"sha": "5c023a191db555fef2f38fee801a0b04fa9c08ae", "filename": "src/libcore/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9f1a0762a7c08c71f485fa4b152ed2477b07560/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f1a0762a7c08c71f485fa4b152ed2477b07560/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=b9f1a0762a7c08c71f485fa4b152ed2477b07560", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n /*!\n-Rust adaptation of Grisu3 algorithm described in [1]. It uses about\n+Rust adaptation of Grisu3 algorithm described in \\[1\\]. It uses about\n 1KB of precomputed table, and in turn, it's very quick for most inputs.\n \n-[1] Florian Loitsch. 2010. Printing floating-point numbers quickly and\n+\\[1\\] Florian Loitsch. 2010. Printing floating-point numbers quickly and\n     accurately with integers. SIGPLAN Not. 45, 6 (June 2010), 233-243.\n */\n "}, {"sha": "1e2b18bf9b038fc83fa0485474db7aecaca1e232", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b9f1a0762a7c08c71f485fa4b152ed2477b07560/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f1a0762a7c08c71f485fa4b152ed2477b07560/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=b9f1a0762a7c08c71f485fa4b152ed2477b07560", "patch": "@@ -124,6 +124,7 @@ pub fn spin_loop_hint() {\n /// [`bool`]: ../../../std/primitive.bool.html\n #[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[repr(transparent)]\n pub struct AtomicBool {\n     v: UnsafeCell<u8>,\n }\n@@ -147,6 +148,7 @@ unsafe impl Sync for AtomicBool {}\n /// This type has the same in-memory representation as a `*mut T`.\n #[cfg(target_has_atomic = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[repr(transparent)]\n pub struct AtomicPtr<T> {\n     p: UnsafeCell<*mut T>,\n }\n@@ -976,6 +978,7 @@ macro_rules! atomic_int {\n         ///\n         /// [module-level documentation]: index.html\n         #[$stable]\n+        #[repr(transparent)]\n         pub struct $atomic_type {\n             v: UnsafeCell<$int_type>,\n         }"}, {"sha": "d76d33b99022275e3d49b1c2a1cecc46e7fdfa45", "filename": "src/librustc/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b9f1a0762a7c08c71f485fa4b152ed2477b07560/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f1a0762a7c08c71f485fa4b152ed2477b07560/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=b9f1a0762a7c08c71f485fa4b152ed2477b07560", "patch": "@@ -39,14 +39,14 @@ use std::sync::atomic::{AtomicBool, Ordering};\n fn print_help_message() {\n     println!(\"\\\n -Z print-region-graph by default prints a region constraint graph for every \\n\\\n-function body, to the path `/tmp/constraints.nodeXXX.dot`, where the XXX is \\n\\\n+function body, to the path `constraints.nodeXXX.dot`, where the XXX is \\n\\\n replaced with the node id of the function under analysis.                   \\n\\\n                                                                             \\n\\\n To select one particular function body, set `RUST_REGION_GRAPH_NODE=XXX`,   \\n\\\n where XXX is the node id desired.                                           \\n\\\n                                                                             \\n\\\n To generate output to some path other than the default                      \\n\\\n-`/tmp/constraints.nodeXXX.dot`, set `RUST_REGION_GRAPH=/path/desired.dot`;  \\n\\\n+`constraints.nodeXXX.dot`, set `RUST_REGION_GRAPH=/path/desired.dot`;  \\n\\\n occurrences of the character `%` in the requested path will be replaced with\\n\\\n the node id of the function under analysis.                                 \\n\\\n                                                                             \\n\\\n@@ -90,7 +90,7 @@ pub fn maybe_print_constraints_for<'a, 'gcx, 'tcx>(\n             }\n \n             Ok(other_path) => other_path,\n-            Err(_) => \"/tmp/constraints.node%.dot\".to_string(),\n+            Err(_) => \"constraints.node%.dot\".to_string(),\n         };\n \n         if output_template.is_empty() {"}, {"sha": "c71e49b0d8821888b952f700ed09868c3f337853", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9f1a0762a7c08c71f485fa4b152ed2477b07560/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f1a0762a7c08c71f485fa4b152ed2477b07560/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=b9f1a0762a7c08c71f485fa4b152ed2477b07560", "patch": "@@ -277,7 +277,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     }\n \n     pub fn nswsub(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef {\n-        self.count_insn(\"nwsub\");\n+        self.count_insn(\"nswsub\");\n         unsafe {\n             llvm::LLVMBuildNSWSub(self.llbuilder, lhs, rhs, noname())\n         }\n@@ -291,14 +291,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     }\n \n     pub fn fsub(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef {\n-        self.count_insn(\"sub\");\n+        self.count_insn(\"fsub\");\n         unsafe {\n             llvm::LLVMBuildFSub(self.llbuilder, lhs, rhs, noname())\n         }\n     }\n \n     pub fn fsub_fast(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef {\n-        self.count_insn(\"sub\");\n+        self.count_insn(\"fsub\");\n         unsafe {\n             let instr = llvm::LLVMBuildFSub(self.llbuilder, lhs, rhs, noname());\n             llvm::LLVMRustSetHasUnsafeAlgebra(instr);\n@@ -1315,6 +1315,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     }\n \n     pub fn add_incoming_to_phi(&self, phi: ValueRef, val: ValueRef, bb: BasicBlockRef) {\n+        self.count_insn(\"addincoming\");\n         unsafe {\n             llvm::LLVMAddIncoming(phi, &val, &bb, 1 as c_uint);\n         }"}, {"sha": "41c08dbf4ab6552121e50eed28eeb3b689978795", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9f1a0762a7c08c71f485fa4b152ed2477b07560/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f1a0762a7c08c71f485fa4b152ed2477b07560/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b9f1a0762a7c08c71f485fa4b152ed2477b07560", "patch": "@@ -1669,6 +1669,8 @@ impl<'a> Settings<'a> {\n             settings: vec![\n                 (\"item-declarations\", \"Auto-hide item declarations.\", true),\n                 (\"item-attributes\", \"Auto-hide item attributes.\", true),\n+                (\"trait-implementations\", \"Auto-hide trait implementations documentation\",\n+                 true),\n                 (\"go-to-only-result\", \"Directly go to item in search if there is only one result\",\n                  false),\n             ],"}, {"sha": "3bd343c0c0b6813d93804bf02e8268133d0cace2", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b9f1a0762a7c08c71f485fa4b152ed2477b07560/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/b9f1a0762a7c08c71f485fa4b152ed2477b07560/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=b9f1a0762a7c08c71f485fa4b152ed2477b07560", "patch": "@@ -1938,17 +1938,19 @@\n         if (collapse) {\n             toggleAllDocs(pageId, true);\n         }\n-        onEach(document.getElementsByClassName(\"collapse-toggle\"), function(e) {\n-            // inherent impl ids are like 'impl' or impl-<number>'.\n-            // they will never be hidden by default.\n-            var n = e.parentNode;\n-            if (n.id.match(/^impl(?:-\\d+)?$/) === null) {\n-                // Automatically minimize all non-inherent impls\n-                if (collapse || hasClass(n, 'impl')) {\n-                    collapseDocs(e, \"hide\", pageId);\n+        if (getCurrentValue('rustdoc-trait-implementations') !== \"false\") {\n+            onEach(document.getElementsByClassName(\"collapse-toggle\"), function(e) {\n+                // inherent impl ids are like 'impl' or impl-<number>'.\n+                // they will never be hidden by default.\n+                var n = e.parentNode;\n+                if (n.id.match(/^impl(?:-\\d+)?$/) === null) {\n+                    // Automatically minimize all non-inherent impls\n+                    if (collapse || hasClass(n, 'impl')) {\n+                        collapseDocs(e, \"hide\", pageId);\n+                    }\n                 }\n-            }\n-        });\n+            });\n+        }\n     }\n \n     var x = document.getElementById('toggle-all-docs');"}]}