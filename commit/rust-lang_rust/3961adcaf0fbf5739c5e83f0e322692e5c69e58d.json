{"sha": "3961adcaf0fbf5739c5e83f0e322692e5c69e58d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NjFhZGNhZjBmYmY1NzM5YzVlODNmMGUzMjI2OTJlNWM2OWU1OGQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-20T21:37:25Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-27T21:55:14Z"}, "message": "syntax: use std::string::String unqualified in format.", "tree": {"sha": "1dc73a3557888af11c404889e9a848dadd63222b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dc73a3557888af11c404889e9a848dadd63222b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3961adcaf0fbf5739c5e83f0e322692e5c69e58d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3961adcaf0fbf5739c5e83f0e322692e5c69e58d", "html_url": "https://github.com/rust-lang/rust/commit/3961adcaf0fbf5739c5e83f0e322692e5c69e58d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3961adcaf0fbf5739c5e83f0e322692e5c69e58d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68a7f1b5e37f3b8a83def4e9cb4d02aef33b8dbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/68a7f1b5e37f3b8a83def4e9cb4d02aef33b8dbf", "html_url": "https://github.com/rust-lang/rust/commit/68a7f1b5e37f3b8a83def4e9cb4d02aef33b8dbf"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "771438342ee37881dd1ca13c13d8ccd942eb23ed", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3961adcaf0fbf5739c5e83f0e322692e5c69e58d/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3961adcaf0fbf5739c5e83f0e322692e5c69e58d/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=3961adcaf0fbf5739c5e83f0e322692e5c69e58d", "patch": "@@ -23,17 +23,16 @@ use parse::token;\n use ptr::P;\n \n use std::collections::HashMap;\n-use std::string;\n \n #[deriving(PartialEq)]\n enum ArgumentType {\n-    Known(string::String),\n+    Known(String),\n     Unsigned\n }\n \n enum Position {\n     Exact(uint),\n-    Named(string::String),\n+    Named(String),\n }\n \n struct Context<'a, 'b:'a> {\n@@ -48,12 +47,12 @@ struct Context<'a, 'b:'a> {\n     /// Note that we keep a side-array of the ordering of the named arguments\n     /// found to be sure that we can translate them in the same order that they\n     /// were declared in.\n-    names: HashMap<string::String, P<ast::Expr>>,\n-    name_types: HashMap<string::String, ArgumentType>,\n-    name_ordering: Vec<string::String>,\n+    names: HashMap<String, P<ast::Expr>>,\n+    name_types: HashMap<String, ArgumentType>,\n+    name_ordering: Vec<String>,\n \n     /// The latest consecutive literal strings, or empty if there weren't any.\n-    literal: string::String,\n+    literal: String,\n \n     /// Collection of the compiled `rt::Argument` structures\n     pieces: Vec<P<ast::Expr>>,\n@@ -62,7 +61,7 @@ struct Context<'a, 'b:'a> {\n     /// Stays `true` if all formatting parameters are default (as in \"{}{}\").\n     all_pieces_simple: bool,\n \n-    name_positions: HashMap<string::String, uint>,\n+    name_positions: HashMap<String, uint>,\n \n     /// Updated as arguments are consumed or methods are entered\n     nest_level: uint,\n@@ -84,10 +83,10 @@ pub enum Invocation {\n ///           named arguments))\n fn parse_args(ecx: &mut ExtCtxt, sp: Span, allow_method: bool,\n               tts: &[ast::TokenTree])\n-    -> (Invocation, Option<(P<ast::Expr>, Vec<P<ast::Expr>>, Vec<string::String>,\n-                            HashMap<string::String, P<ast::Expr>>)>) {\n+    -> (Invocation, Option<(P<ast::Expr>, Vec<P<ast::Expr>>, Vec<String>,\n+                            HashMap<String, P<ast::Expr>>)>) {\n     let mut args = Vec::new();\n-    let mut names = HashMap::<string::String, P<ast::Expr>>::new();\n+    let mut names = HashMap::<String, P<ast::Expr>>::new();\n     let mut order = Vec::new();\n \n     let mut p = ecx.new_parser_from_tts(tts);\n@@ -224,7 +223,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         }\n     }\n \n-    fn describe_num_args(&self) -> string::String {\n+    fn describe_num_args(&self) -> String {\n         match self.args.len() {\n             0 => \"no arguments given\".to_string(),\n             1 => \"there is 1 argument\".to_string(),\n@@ -715,7 +714,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n         name_ordering: name_ordering,\n         nest_level: 0,\n         next_arg: 0,\n-        literal: string::String::new(),\n+        literal: String::new(),\n         pieces: Vec::new(),\n         str_pieces: Vec::new(),\n         all_pieces_simple: true,"}]}