{"sha": "8577bb49bf0ba789e6eca6d6b328a65ca5d70695", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NzdiYjQ5YmYwYmE3ODllNmVjYTZkNmIzMjhhNjVjYTVkNzA2OTU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-31T21:52:35Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-06-05T15:45:16Z"}, "message": "Refactor `ConstVariableOrigin` into `ConstVariableOrigin` and `ConstVariableOriginKind`", "tree": {"sha": "f2d42aa7e67a9a6eda1c72b024b039a25d1e4a6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2d42aa7e67a9a6eda1c72b024b039a25d1e4a6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8577bb49bf0ba789e6eca6d6b328a65ca5d70695", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8577bb49bf0ba789e6eca6d6b328a65ca5d70695", "html_url": "https://github.com/rust-lang/rust/commit/8577bb49bf0ba789e6eca6d6b328a65ca5d70695", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8577bb49bf0ba789e6eca6d6b328a65ca5d70695/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dcc49c68509d46d57a5f8001c6de191d7d15e51", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dcc49c68509d46d57a5f8001c6de191d7d15e51", "html_url": "https://github.com/rust-lang/rust/commit/4dcc49c68509d46d57a5f8001c6de191d7d15e51"}], "stats": {"total": 74, "additions": 54, "deletions": 20}, "files": [{"sha": "42f53bf1e95e8176cd3e7d4e3ff82bb35ac1d742", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8577bb49bf0ba789e6eca6d6b328a65ca5d70695/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8577bb49bf0ba789e6eca6d6b328a65ca5d70695/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=8577bb49bf0ba789e6eca6d6b328a65ca5d70695", "patch": "@@ -22,7 +22,7 @@\n //! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n \n use crate::infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin, TypeVariableOriginKind};\n-use crate::infer::ConstVariableOrigin;\n+use crate::infer::{ConstVariableOrigin, ConstVariableOriginKind};\n use crate::mir::interpret::ConstValue;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_macros::HashStable;\n@@ -407,10 +407,16 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             CanonicalVarKind::Const(ui) => {\n                 self.next_const_var_in_universe(\n                     self.next_ty_var_in_universe(\n-                        TypeVariableOrigin::MiscVariable(span),\n+                        TypeVariableOrigin {\n+                            kind: TypeVariableOriginKind::MiscVariable,\n+                            span,\n+                        },\n                         universe_map(ui),\n                     ),\n-                    ConstVariableOrigin::MiscVariable(span),\n+                    ConstVariableOrigin {\n+                        kind: ConstVariableOriginKind::MiscVariable,\n+                        span,\n+                    },\n                     universe_map(ui),\n                 ).into()\n             }"}, {"sha": "4e6d534b940c19643caae6b54feed7188007e3ad", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8577bb49bf0ba789e6eca6d6b328a65ca5d70695/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8577bb49bf0ba789e6eca6d6b328a65ca5d70695/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=8577bb49bf0ba789e6eca6d6b328a65ca5d70695", "patch": "@@ -28,7 +28,8 @@ use super::{InferCtxt, MiscVariable, TypeTrace};\n use super::lub::Lub;\n use super::sub::Sub;\n use super::type_variable::TypeVariableValue;\n-use super::unify_key::{ConstVarValue, ConstVariableValue, ConstVariableOrigin};\n+use super::unify_key::{ConstVarValue, ConstVariableValue};\n+use super::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n \n use crate::hir::def_id::DefId;\n use crate::mir::interpret::ConstValue;\n@@ -165,7 +166,10 @@ impl<'infcx, 'gcx, 'tcx> InferCtxt<'infcx, 'gcx, 'tcx> {\n         self.const_unification_table\n             .borrow_mut()\n             .unify_var_value(vid, ConstVarValue {\n-                origin: ConstVariableOrigin::ConstInference(DUMMY_SP),\n+                origin: ConstVariableOrigin {\n+                    kind: ConstVariableOriginKind::ConstInference,\n+                    span: DUMMY_SP,\n+                },\n                 val: ConstVariableValue::Known { value },\n             })\n             .map_err(|e| const_unification_error(vid_is_expected, e))?;"}, {"sha": "0a422c66433977588520b7ec0e4339ab5daf496e", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8577bb49bf0ba789e6eca6d6b328a65ca5d70695/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8577bb49bf0ba789e6eca6d6b328a65ca5d70695/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=8577bb49bf0ba789e6eca6d6b328a65ca5d70695", "patch": "@@ -40,7 +40,7 @@ use self::outlives::env::OutlivesEnvironment;\n use self::region_constraints::{GenericKind, RegionConstraintData, VarInfos, VerifyBound};\n use self::region_constraints::{RegionConstraintCollector, RegionSnapshot};\n use self::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use self::unify_key::{ToType, ConstVariableOrigin};\n+use self::unify_key::{ToType, ConstVariableOrigin, ConstVariableOriginKind};\n \n pub mod at;\n pub mod canonical;\n@@ -1119,7 +1119,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 self.tcx.mk_ty_var(ty_var_id).into()\n             }\n             GenericParamDefKind::Const { .. } => {\n-                let origin = ConstVariableOrigin::ConstParameterDefinition(span, param.name);\n+                let origin = ConstVariableOrigin {\n+                    kind: ConstVariableOriginKind::ConstParameterDefinition(param.name),\n+                    span,\n+                };\n                 let const_var_id =\n                     self.const_unification_table\n                         .borrow_mut()\n@@ -1421,7 +1424,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 span,\n             })\n         };\n-        let fld_c = |_, ty| self.next_const_var(ty, ConstVariableOrigin::MiscVariable(span));\n+        let fld_c = |_, ty| self.next_const_var(ty, ConstVariableOrigin {\n+            kind: ConstVariableOriginKind:: MiscVariable,\n+            span,\n+        });\n         self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)\n     }\n "}, {"sha": "f487e7c8def0c56ba68fec2f60e3912f22300792", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8577bb49bf0ba789e6eca6d6b328a65ca5d70695/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8577bb49bf0ba789e6eca6d6b328a65ca5d70695/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=8577bb49bf0ba789e6eca6d6b328a65ca5d70695", "patch": "@@ -1,4 +1,5 @@\n-use super::{InferCtxt, FixupError, FixupResult, Span, type_variable::TypeVariableOrigin};\n+use super::{InferCtxt, FixupError, FixupResult, Span};\n+use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::mir::interpret::ConstValue;\n use crate::ty::{self, Ty, Const, TyCtxt, TypeFoldable, InferConst, TypeFlags};\n use crate::ty::fold::{TypeFolder, TypeVisitor};\n@@ -123,8 +124,10 @@ impl<'a, 'gcx, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeFinder<'a, 'gcx, 'tcx>\n                 let ty_var_span =\n                 if let ty::TyVar(ty_vid) = infer_ty {\n                     let ty_vars = self.infcx.type_variables.borrow();\n-                    if let TypeVariableOrigin::TypeParameterDefinition(span, _name)\n-                        = *ty_vars.var_origin(ty_vid)\n+                    if let TypeVariableOrigin {\n+                        kind: TypeVariableOriginKind::TypeParameterDefinition(_),\n+                        span,\n+                    } = *ty_vars.var_origin(ty_vid)\n                     {\n                         Some(span)\n                     } else {"}, {"sha": "287a666fc804382237f05efd4beb0299797ab250", "filename": "src/librustc/infer/unify_key.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8577bb49bf0ba789e6eca6d6b328a65ca5d70695/src%2Flibrustc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8577bb49bf0ba789e6eca6d6b328a65ca5d70695/src%2Flibrustc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Funify_key.rs?ref=8577bb49bf0ba789e6eca6d6b328a65ca5d70695", "patch": "@@ -79,13 +79,19 @@ impl ToType for FloatVarValue {\n \n // Generic consts.\n \n+#[derive(Copy, Clone, Debug)]\n+pub struct ConstVariableOrigin {\n+    pub kind: ConstVariableOriginKind,\n+    pub span: Span,\n+}\n+\n /// Reasons to create a const inference variable\n #[derive(Copy, Clone, Debug)]\n-pub enum ConstVariableOrigin {\n-    MiscVariable(Span),\n-    ConstInference(Span),\n-    ConstParameterDefinition(Span, InternedString),\n-    SubstitutionPlaceholder(Span),\n+pub enum ConstVariableOriginKind {\n+    MiscVariable,\n+    ConstInference,\n+    ConstParameterDefinition(InternedString),\n+    SubstitutionPlaceholder,\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -159,7 +165,10 @@ impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n         }?;\n \n         Ok(ConstVarValue {\n-            origin: ConstVariableOrigin::ConstInference(DUMMY_SP),\n+            origin: ConstVariableOrigin {\n+                kind: ConstVariableOriginKind::ConstInference,\n+                span: DUMMY_SP,\n+            },\n             val,\n         })\n     }"}, {"sha": "3fea080f299e5c1f76ef0c61484aeb776a944c6c", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8577bb49bf0ba789e6eca6d6b328a65ca5d70695/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8577bb49bf0ba789e6eca6d6b328a65ca5d70695/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=8577bb49bf0ba789e6eca6d6b328a65ca5d70695", "patch": "@@ -1009,7 +1009,10 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n             // ...but otherwise we want to use any supertype of the\n             // discriminant. This is sort of a workaround, see note (*) in\n             // `check_pat` for some details.\n-            let discrim_ty = self.next_ty_var(TypeVariableOrigin::TypeInference(discrim.span));\n+            let discrim_ty = self.next_ty_var(TypeVariableOrigin {\n+                kind: TypeVariableOriginKind::TypeInference,\n+                span: discrim.span,\n+            });\n             self.check_expr_has_type_or_error(discrim, discrim_ty);\n             discrim_ty\n         }"}, {"sha": "e55da40a4c21c89ddf6e60a0ffb186d5b16df86c", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8577bb49bf0ba789e6eca6d6b328a65ca5d70695/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8577bb49bf0ba789e6eca6d6b328a65ca5d70695/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=8577bb49bf0ba789e6eca6d6b328a65ca5d70695", "patch": "@@ -21,7 +21,7 @@ use rustc::traits::query::method_autoderef::{MethodAutoderefBadTy};\n use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt, ToPolyTraitRef, ToPredicate, TraitRef, TypeFoldable};\n use rustc::ty::GenericParamDefKind;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc::infer::unify_key::ConstVariableOrigin;\n+use rustc::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc::util::nodemap::FxHashSet;\n use rustc::infer::{self, InferOk};\n use rustc::infer::canonical::{Canonical, QueryResponse};\n@@ -1580,7 +1580,10 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 }\n                 GenericParamDefKind::Const { .. } => {\n                     let span = self.tcx.def_span(def_id);\n-                    let origin = ConstVariableOrigin::SubstitutionPlaceholder(span);\n+                    let origin = ConstVariableOrigin {\n+                        kind: ConstVariableOriginKind::SubstitutionPlaceholder,\n+                        span,\n+                    };\n                     self.next_const_var(self.tcx.type_of(param.def_id), origin).into()\n                 }\n             }"}]}