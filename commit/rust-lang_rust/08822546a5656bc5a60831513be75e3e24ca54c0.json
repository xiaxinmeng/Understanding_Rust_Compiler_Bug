{"sha": "08822546a5656bc5a60831513be75e3e24ca54c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ODIyNTQ2YTU2NTZiYzVhNjA4MzE1MTNiZTc1ZTNlMjRjYTU0YzA=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-01T22:59:15Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-18T13:41:33Z"}, "message": "Implement att_syntax option", "tree": {"sha": "95b0dbe225e1f85f53c195d56d838a286d0163da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95b0dbe225e1f85f53c195d56d838a286d0163da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08822546a5656bc5a60831513be75e3e24ca54c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08822546a5656bc5a60831513be75e3e24ca54c0", "html_url": "https://github.com/rust-lang/rust/commit/08822546a5656bc5a60831513be75e3e24ca54c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08822546a5656bc5a60831513be75e3e24ca54c0/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3590f4cf5745b609fbdbb8b4249f93a3df81c80e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3590f4cf5745b609fbdbb8b4249f93a3df81c80e", "html_url": "https://github.com/rust-lang/rust/commit/3590f4cf5745b609fbdbb8b4249f93a3df81c80e"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "72ca8418f83d267cf18a7e1d3962e21f96b2cdfa", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/08822546a5656bc5a60831513be75e3e24ca54c0/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08822546a5656bc5a60831513be75e3e24ca54c0/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=08822546a5656bc5a60831513be75e3e24ca54c0", "patch": "@@ -980,6 +980,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             struct_span_err!(self.sess, sp, E0472, \"asm! is unsupported on this target\").emit();\n             return hir::ExprKind::Err;\n         };\n+        if asm.options.contains(asm::InlineAsmOptions::ATT_SYNTAX) {\n+            match asm_arch {\n+                asm::InlineAsmArch::X86 | asm::InlineAsmArch::X86_64 => {}\n+                _ => self\n+                    .sess\n+                    .struct_span_err(sp, \"the `att_syntax` option is only supported on x86\")\n+                    .emit(),\n+            }\n+        }\n \n         // Lower operands to HIR, filter_map skips any operands with invalid\n         // register classes."}, {"sha": "432f8d47276b797ce7c7dbc85e9e353ef228ae0f", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08822546a5656bc5a60831513be75e3e24ca54c0/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08822546a5656bc5a60831513be75e3e24ca54c0/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=08822546a5656bc5a60831513be75e3e24ca54c0", "patch": "@@ -2118,6 +2118,9 @@ impl<'a> State<'a> {\n                         if opts.contains(InlineAsmOptions::NOSTACK) {\n                             options.push(\"nostack\");\n                         }\n+                        if opts.contains(InlineAsmOptions::ATT_SYNTAX) {\n+                            options.push(\"att_syntax\");\n+                        }\n                         s.commasep(Inconsistent, &options, |s, &opt| {\n                             s.word(opt);\n                         });"}, {"sha": "bc068cdcde0958456ddb83a90b9c55b16b9ae957", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08822546a5656bc5a60831513be75e3e24ca54c0/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08822546a5656bc5a60831513be75e3e24ca54c0/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=08822546a5656bc5a60831513be75e3e24ca54c0", "patch": "@@ -279,9 +279,11 @@ fn parse_options<'a>(p: &mut Parser<'a>, args: &mut AsmArgs) -> Result<(), Diagn\n             args.options |= InlineAsmOptions::PRESERVES_FLAGS;\n         } else if p.eat(&token::Ident(sym::noreturn, false)) {\n             args.options |= InlineAsmOptions::NORETURN;\n-        } else {\n-            p.expect(&token::Ident(sym::nostack, false))?;\n+        } else if p.eat(&token::Ident(sym::nostack, false)) {\n             args.options |= InlineAsmOptions::NOSTACK;\n+        } else {\n+            p.expect(&token::Ident(sym::att_syntax, false))?;\n+            args.options |= InlineAsmOptions::ATT_SYNTAX;\n         }\n \n         // Allow trailing commas"}, {"sha": "0ad304d5a6721f88ca53de13bd8a2956c35401b8", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08822546a5656bc5a60831513be75e3e24ca54c0/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08822546a5656bc5a60831513be75e3e24ca54c0/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=08822546a5656bc5a60831513be75e3e24ca54c0", "patch": "@@ -269,7 +269,11 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             tys => self.type_struct(&tys, false),\n         };\n         let dialect = match asm_arch {\n-            InlineAsmArch::X86 | InlineAsmArch::X86_64 => LlvmAsmDialect::Intel,\n+            InlineAsmArch::X86 | InlineAsmArch::X86_64\n+                if !options.contains(InlineAsmOptions::ATT_SYNTAX) =>\n+            {\n+                LlvmAsmDialect::Intel\n+            }\n             _ => LlvmAsmDialect::Att,\n         };\n         let result = inline_asm_call("}, {"sha": "312b8edfe2389a1b781aee6e9b7bd28e08286d36", "filename": "src/librustc_hir_pretty/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08822546a5656bc5a60831513be75e3e24ca54c0/src%2Flibrustc_hir_pretty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08822546a5656bc5a60831513be75e3e24ca54c0/src%2Flibrustc_hir_pretty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir_pretty%2Flib.rs?ref=08822546a5656bc5a60831513be75e3e24ca54c0", "patch": "@@ -1503,6 +1503,9 @@ impl<'a> State<'a> {\n                         if opts.contains(InlineAsmOptions::NOSTACK) {\n                             options.push(\"nostack\");\n                         }\n+                        if opts.contains(InlineAsmOptions::ATT_SYNTAX) {\n+                            options.push(\"att_syntax\");\n+                        }\n                         s.commasep(Inconsistent, &options, |s, &opt| {\n                             s.word(opt);\n                         });"}, {"sha": "a38f594920410700704749bd2edfc5a0e4abd6ec", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08822546a5656bc5a60831513be75e3e24ca54c0/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08822546a5656bc5a60831513be75e3e24ca54c0/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=08822546a5656bc5a60831513be75e3e24ca54c0", "patch": "@@ -160,6 +160,7 @@ symbols! {\n         attr,\n         attributes,\n         attr_literals,\n+        att_syntax,\n         augmented_assignments,\n         automatically_derived,\n         avx512_target_feature,"}, {"sha": "5bdfdfefedaa4da9cf5fffe53d12004f7bb8377e", "filename": "src/librustc_target/asm/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08822546a5656bc5a60831513be75e3e24ca54c0/src%2Flibrustc_target%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08822546a5656bc5a60831513be75e3e24ca54c0/src%2Flibrustc_target%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Fmod.rs?ref=08822546a5656bc5a60831513be75e3e24ca54c0", "patch": "@@ -426,6 +426,7 @@ bitflags::bitflags! {\n         const PRESERVES_FLAGS = 1 << 3;\n         const NORETURN = 1 << 4;\n         const NOSTACK = 1 << 5;\n+        const ATT_SYNTAX = 1 << 6;\n     }\n }\n "}, {"sha": "fa422f56bece56bf2053390654e56fad1ce7360c", "filename": "src/test/ui/asm/parse-error.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08822546a5656bc5a60831513be75e3e24ca54c0/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08822546a5656bc5a60831513be75e3e24ca54c0/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr?ref=08822546a5656bc5a60831513be75e3e24ca54c0", "patch": "@@ -64,23 +64,23 @@ error: argument to `sym` must be a path expression\n LL |         asm!(\"{}\", sym foo + bar);\n    |                        ^^^^^^^^^\n \n-error: expected one of `)`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, or `readonly`, found `foo`\n+error: expected one of `)`, `att_syntax`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, or `readonly`, found `foo`\n   --> $DIR/parse-error.rs:31:26\n    |\n LL |         asm!(\"\", options(foo));\n-   |                          ^^^ expected one of 7 possible tokens\n+   |                          ^^^ expected one of 8 possible tokens\n \n error: expected one of `)` or `,`, found `foo`\n   --> $DIR/parse-error.rs:33:32\n    |\n LL |         asm!(\"\", options(nomem foo));\n    |                                ^^^ expected one of `)` or `,`\n \n-error: expected one of `)`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, or `readonly`, found `foo`\n+error: expected one of `)`, `att_syntax`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, or `readonly`, found `foo`\n   --> $DIR/parse-error.rs:35:33\n    |\n LL |         asm!(\"\", options(nomem, foo));\n-   |                                 ^^^ expected one of 7 possible tokens\n+   |                                 ^^^ expected one of 8 possible tokens\n \n error: asm options cannot be specified multiple times\n   --> $DIR/parse-error.rs:37:29"}]}