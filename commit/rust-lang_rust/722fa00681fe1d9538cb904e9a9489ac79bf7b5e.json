{"sha": "722fa00681fe1d9538cb904e9a9489ac79bf7b5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMmZhMDA2ODFmZTFkOTUzOGNiOTA0ZTlhOTQ4OWFjNzliZjdiNWU=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-30T19:45:12Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-31T20:01:25Z"}, "message": "Get rid of the hack that ignores () typed things in fn tail position.\n\nCloses #868. Unfortunately, this causes certain invalid programs to\nfail type-checking instead of failing type-state when a type-state\nerror message would probably be more intuitive. (Although, by any\nreasonable interpretation of the static semantics, it technically\nought to be a type error.)", "tree": {"sha": "f15bd9d6adaf2874922949810a612654e8cac9fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f15bd9d6adaf2874922949810a612654e8cac9fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/722fa00681fe1d9538cb904e9a9489ac79bf7b5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/722fa00681fe1d9538cb904e9a9489ac79bf7b5e", "html_url": "https://github.com/rust-lang/rust/commit/722fa00681fe1d9538cb904e9a9489ac79bf7b5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/722fa00681fe1d9538cb904e9a9489ac79bf7b5e/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "498e38b705348333df9ab02059d07f114baccc45", "url": "https://api.github.com/repos/rust-lang/rust/commits/498e38b705348333df9ab02059d07f114baccc45", "html_url": "https://github.com/rust-lang/rust/commit/498e38b705348333df9ab02059d07f114baccc45"}], "stats": {"total": 45, "additions": 15, "deletions": 30}, "files": [{"sha": "56d3d19553f55e52d87270b0a17ff990288f47de", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/722fa00681fe1d9538cb904e9a9489ac79bf7b5e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722fa00681fe1d9538cb904e9a9489ac79bf7b5e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=722fa00681fe1d9538cb904e9a9489ac79bf7b5e", "patch": "@@ -5271,8 +5271,7 @@ fn trans_closure(bcx_maybe: &option::t<@block_ctxt>,\n     // trans_mod, trans_item, trans_obj, et cetera) and those that do\n     // (trans_block, trans_expr, et cetera).\n     let rslt =\n-        if !ty::type_is_nil(cx.ccx.tcx, block_ty) &&\n-               !ty::type_is_bot(cx.ccx.tcx, block_ty) &&\n+        if !ty::type_is_bot(cx.ccx.tcx, block_ty) &&\n                f.proto != ast::proto_iter {\n             trans_block(bcx, f.body, save_in(fcx.llretptr))\n         } else { trans_block(bcx, f.body, return) };"}, {"sha": "915a9d6b94135449867cc43740261b1d9ebfae40", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/722fa00681fe1d9538cb904e9a9489ac79bf7b5e/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722fa00681fe1d9538cb904e9a9489ac79bf7b5e/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=722fa00681fe1d9538cb904e9a9489ac79bf7b5e", "patch": "@@ -716,7 +716,6 @@ fn find_pre_post_state_block(fcx: &fn_ctxt, pres0: &prestate, b: &blk) ->\n }\n \n fn find_pre_post_state_fn(fcx: &fn_ctxt, f: &_fn) -> bool {\n-\n     let num_constrs = num_constraints(fcx.enclosing);\n     // All constraints are considered false until proven otherwise.\n     // This ensures that intersect works correctly.\n@@ -729,25 +728,20 @@ fn find_pre_post_state_fn(fcx: &fn_ctxt, f: &_fn) -> bool {\n     }\n \n     // Instantiate any constraints on the arguments so we can use them\n-    let tsc;\n     for c: @constr in f.decl.constraints {\n-        tsc = ast_constr_to_ts_constr(fcx.ccx.tcx, f.decl.inputs, c);\n+        let tsc = ast_constr_to_ts_constr(fcx.ccx.tcx, f.decl.inputs, c);\n         set_in_prestate_constr(fcx, tsc, block_pre);\n     }\n \n     let changed = find_pre_post_state_block(fcx, block_pre, f.body);\n-    // Treat the tail expression as a return statement\n \n+    // Treat the tail expression as a return statement\n     alt f.body.node.expr {\n       some(tailexpr) {\n-        let tailty = expr_ty(fcx.ccx.tcx, tailexpr);\n-\n-        // Since blocks and alts and ifs that don't have results\n-        // implicitly result in nil, we have to be careful to not\n-        // interpret nil-typed block results as the result of a\n-        // function with some other return type\n-        if !type_is_nil(fcx.ccx.tcx, tailty) &&\n-               !type_is_bot(fcx.ccx.tcx, tailty) {\n+        // We don't want to clear the diverges bit for bottom typed things,\n+        // which really do diverge. I feel like there is a cleaner way\n+        // to do this than checking the type.\n+        if !type_is_bot(fcx.ccx.tcx, expr_ty(fcx.ccx.tcx, tailexpr)) {\n             let post = false_postcond(num_constrs);\n             // except for the \"diverges\" bit...\n             kill_poststate_(fcx, fcx.enclosing.i_diverge, post);"}, {"sha": "215b042331b433865182f1876f014540c57bcfc6", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/722fa00681fe1d9538cb904e9a9489ac79bf7b5e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722fa00681fe1d9538cb904e9a9489ac79bf7b5e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=722fa00681fe1d9538cb904e9a9489ac79bf7b5e", "patch": "@@ -2692,22 +2692,14 @@ fn check_fn(ccx: &@crate_ctxt, f: &ast::_fn, id: &ast::node_id,\n     // function result type, if there is a tail expr.\n     // We don't do this check for an iterator, as the tail expr doesn't\n     // have to have the result type of the iterator.\n-    if option::is_some(body.node.expr) && f.proto != ast::proto_iter {\n-        let tail_expr = option::get(body.node.expr);\n-        // The use of resolve_type_vars_if_possible makes me very\n-        // afraid :-(\n-        let tail_expr_ty =\n-            resolve_type_vars_if_possible(fcx, expr_ty(ccx.tcx, tail_expr));\n-\n-        // Hacky compromise: use eq and not are_compatible\n-        // This allows things like while loops and ifs with no\n-        // else to appear in tail position without a trailing\n-        // semicolon when the return type is non-nil, while\n-        // making sure to unify the tailexpr-type with the result\n-        // type when the tailexpr-type is just a type variable.\n-        if !ty::eq_ty(tail_expr_ty, ty::mk_nil(ccx.tcx)) {\n+    alt (body.node.expr) {\n+      some(tail_expr) {\n+        if f.proto != ast::proto_iter {\n+            let tail_expr_ty = expr_ty(ccx.tcx, tail_expr);\n             demand::simple(fcx, tail_expr.span, fcx.ret_ty, tail_expr_ty);\n         }\n+      }\n+      none. {}\n     }\n \n     // If we don't have any enclosing function scope, it is time to"}, {"sha": "65d7db8b30e94bed7a6729900d7ed733329f0c3c", "filename": "src/test/compile-fail/forgot-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/722fa00681fe1d9538cb904e9a9489ac79bf7b5e/src%2Ftest%2Fcompile-fail%2Fforgot-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722fa00681fe1d9538cb904e9a9489ac79bf7b5e/src%2Ftest%2Fcompile-fail%2Fforgot-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforgot-ret.rs?ref=722fa00681fe1d9538cb904e9a9489ac79bf7b5e", "patch": "@@ -1,5 +1,5 @@\n // -*- rust -*-\n-// error-pattern: not all control paths return\n+// error-pattern: mismatched types\n \n fn god_exists(a: int) -> bool { be god_exists(a); }\n "}, {"sha": "446dacdf4f9c1ab2db57bfa977628fa61d5cc6bd", "filename": "src/test/compile-fail/missing-return2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/722fa00681fe1d9538cb904e9a9489ac79bf7b5e/src%2Ftest%2Fcompile-fail%2Fmissing-return2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722fa00681fe1d9538cb904e9a9489ac79bf7b5e/src%2Ftest%2Fcompile-fail%2Fmissing-return2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-return2.rs?ref=722fa00681fe1d9538cb904e9a9489ac79bf7b5e", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: return\n+// error-pattern: mismatched types\n \n fn f() -> int {\n "}]}