{"sha": "8eed8ed9675b264cbacc3e589950368000b2664d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZWQ4ZWQ5Njc1YjI2NGNiYWNjM2U1ODk5NTAzNjgwMDBiMjY2NGQ=", "commit": {"author": {"name": "liudingming", "email": "liudingming@bytedance.com", "date": "2021-04-03T16:05:17Z"}, "committer": {"name": "liudingming", "email": "liudingming@bytedance.com", "date": "2021-04-03T16:05:17Z"}, "message": "Move log's short part to first", "tree": {"sha": "0612382f4d87507c821188e9af7a64962dccc6be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0612382f4d87507c821188e9af7a64962dccc6be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eed8ed9675b264cbacc3e589950368000b2664d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eed8ed9675b264cbacc3e589950368000b2664d", "html_url": "https://github.com/rust-lang/rust/commit/8eed8ed9675b264cbacc3e589950368000b2664d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eed8ed9675b264cbacc3e589950368000b2664d/comments", "author": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36bcf4069717b9dff90270d13b53a3b130329960", "url": "https://api.github.com/repos/rust-lang/rust/commits/36bcf4069717b9dff90270d13b53a3b130329960", "html_url": "https://github.com/rust-lang/rust/commit/36bcf4069717b9dff90270d13b53a3b130329960"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "67714b714c9d02ee9aa8fdc4bf6f617fc376dc1d", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eed8ed9675b264cbacc3e589950368000b2664d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eed8ed9675b264cbacc3e589950368000b2664d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=8eed8ed9675b264cbacc3e589950368000b2664d", "patch": "@@ -161,7 +161,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr<'tcx>,\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n-        debug!(\">> type-checking: expr={:?} expected={:?}\", expr, expected);\n+        debug!(\">> type-checking: expected={:?}, expr={:?} \", expected, expr);\n \n         // True if `expr` is a `Try::from_ok(())` that is a result of desugaring a try block\n         // without the final expr (e.g. `try { return; }`). We don't want to generate an\n@@ -224,7 +224,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr<'tcx>,\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n-        debug!(\"check_expr_kind(expr={:?}, expected={:?})\", expr, expected);\n+        debug!(\"check_expr_kind(expected={:?}, expr={:?})\", expected, expr);\n \n         let tcx = self.tcx;\n         match expr.kind {"}]}