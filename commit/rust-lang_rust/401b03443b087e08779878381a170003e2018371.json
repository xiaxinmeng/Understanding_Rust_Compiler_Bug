{"sha": "401b03443b087e08779878381a170003e2018371", "node_id": "C_kwDOAAsO6NoAKDQwMWIwMzQ0M2IwODdlMDg3Nzk4NzgzODFhMTcwMDAzZTIwMTgzNzE", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-08T19:00:11Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-08T19:00:11Z"}, "message": "Fix Box deref for non-ZST allocators", "tree": {"sha": "6cf828aaadda06009676f15144c3286e39f73b60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cf828aaadda06009676f15144c3286e39f73b60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/401b03443b087e08779878381a170003e2018371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/401b03443b087e08779878381a170003e2018371", "html_url": "https://github.com/rust-lang/rust/commit/401b03443b087e08779878381a170003e2018371", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/401b03443b087e08779878381a170003e2018371/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5841caa6ef290c6a6dd8ace37df574ae1464cbb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5841caa6ef290c6a6dd8ace37df574ae1464cbb3", "html_url": "https://github.com/rust-lang/rust/commit/5841caa6ef290c6a6dd8ace37df574ae1464cbb3"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "de6aea4c697da6eae7f0ba4a613b0841ef6cbd2d", "filename": "example/mini_core.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/401b03443b087e08779878381a170003e2018371/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401b03443b087e08779878381a170003e2018371/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=401b03443b087e08779878381a170003e2018371", "patch": "@@ -483,8 +483,17 @@ pub trait Deref {\n     fn deref(&self) -> &Self::Target;\n }\n \n+pub struct Unique<T: ?Sized> {\n+    pub pointer: *const T,\n+    pub _marker: PhantomData<T>,\n+}\n+\n+impl<T: ?Sized, U: ?Sized> CoerceUnsized<Unique<U>> for Unique<T> where T: Unsize<U> {}\n+\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Unique<U>> for Unique<T> where T: Unsize<U> {}\n+\n #[lang = \"owned_box\"]\n-pub struct Box<T: ?Sized>(*mut T);\n+pub struct Box<T: ?Sized>(Unique<T>, ());\n \n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Box<U>> for Box<T> {}\n \n@@ -508,8 +517,8 @@ unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n }\n \n #[lang = \"box_free\"]\n-unsafe fn box_free<T: ?Sized>(ptr: *mut T) {\n-    libc::free(ptr as *mut u8);\n+unsafe fn box_free<T: ?Sized>(ptr: Unique<T>, alloc: ()) {\n+    libc::free(ptr.pointer as *mut u8);\n }\n \n #[lang = \"drop\"]"}, {"sha": "02af6fb78f71842498b0968e288666a2f8b3aed5", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/401b03443b087e08779878381a170003e2018371/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401b03443b087e08779878381a170003e2018371/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=401b03443b087e08779878381a170003e2018371", "patch": "@@ -105,12 +105,6 @@ fn start<T: Termination + 'static>(\n static mut NUM: u8 = 6 * 7;\n static NUM_REF: &'static u8 = unsafe { &NUM };\n \n-struct Unique<T: ?Sized> {\n-    pointer: *const T,\n-    _marker: PhantomData<T>,\n-}\n-\n-impl<T: ?Sized, U: ?Sized> CoerceUnsized<Unique<U>> for Unique<T> where T: Unsize<U> {}\n \n unsafe fn zeroed<T>() -> T {\n     let mut uninit = MaybeUninit { uninit: () };"}, {"sha": "c7c9c5eefad1ba0ff394ad87850d56648c2042dd", "filename": "src/base.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/401b03443b087e08779878381a170003e2018371/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401b03443b087e08779878381a170003e2018371/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=401b03443b087e08779878381a170003e2018371", "patch": "@@ -25,7 +25,7 @@ pub(crate) fn codegen_fn<'tcx>(\n     let mir = tcx.instance_mir(instance.def);\n     let _mir_guard = crate::PrintOnPanic(|| {\n         let mut buf = Vec::new();\n-        rustc_middle::mir::write_mir_pretty(tcx, Some(instance.def_id()), &mut buf).unwrap();\n+        rustc_middle::mir::pretty::write_mir_fn(tcx, mir, &mut |_, _| Ok(()), &mut buf).unwrap();\n         String::from_utf8_lossy(&buf).into_owned()\n     });\n \n@@ -813,7 +813,14 @@ pub(crate) fn codegen_place<'tcx>(\n     for elem in place.projection {\n         match elem {\n             PlaceElem::Deref => {\n-                cplace = cplace.place_deref(fx);\n+                if cplace.layout().ty.is_box() {\n+                    cplace = cplace\n+                        .place_field(fx, Field::new(0)) // Box<T> -> Unique<T>\n+                        .place_field(fx, Field::new(0)) // Unique<T> -> *const T\n+                        .place_deref(fx);\n+                } else {\n+                    cplace = cplace.place_deref(fx);\n+                }\n             }\n             PlaceElem::Field(field, _ty) => {\n                 cplace = cplace.place_field(fx, field);"}]}