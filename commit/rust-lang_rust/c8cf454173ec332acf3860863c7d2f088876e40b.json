{"sha": "c8cf454173ec332acf3860863c7d2f088876e40b", "node_id": "C_kwDOAAsO6NoAKGM4Y2Y0NTQxNzNlYzMzMmFjZjM4NjA4NjNjN2QyZjA4ODg3NmU0MGI", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2021-12-21T01:38:00Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-12-21T16:55:39Z"}, "message": "refactor: move lazy_static parsing to parse mod", "tree": {"sha": "98952703ec1851d8eee3e6d514d6f0c93f998b3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98952703ec1851d8eee3e6d514d6f0c93f998b3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8cf454173ec332acf3860863c7d2f088876e40b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8cf454173ec332acf3860863c7d2f088876e40b", "html_url": "https://github.com/rust-lang/rust/commit/c8cf454173ec332acf3860863c7d2f088876e40b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8cf454173ec332acf3860863c7d2f088876e40b/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ce5470a8ce0abdfdb5b19c8f9a2b0773f0b6432", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce5470a8ce0abdfdb5b19c8f9a2b0773f0b6432", "html_url": "https://github.com/rust-lang/rust/commit/9ce5470a8ce0abdfdb5b19c8f9a2b0773f0b6432"}], "stats": {"total": 95, "additions": 58, "deletions": 37}, "files": [{"sha": "b14b67f2a0aecaa236841e5bc1fd10ff74517d35", "filename": "src/macros.rs", "status": "modified", "additions": 6, "deletions": 37, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c8cf454173ec332acf3860863c7d2f088876e40b/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8cf454173ec332acf3860863c7d2f088876e40b/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=c8cf454173ec332acf3860863c7d2f088876e40b", "patch": "@@ -28,6 +28,7 @@ use crate::config::lists::*;\n use crate::expr::{rewrite_array, rewrite_assign_rhs, RhsAssignKind};\n use crate::lists::{itemize_list, write_list, ListFormatting};\n use crate::overflow;\n+use crate::parse::macros::lazy_static::parse_lazy_static;\n use crate::parse::macros::{build_parser, parse_macro_args, ParsedMacroArgs};\n use crate::rewrite::{Rewrite, RewriteContext};\n use crate::shape::{Indent, Shape};\n@@ -1297,50 +1298,18 @@ fn format_lazy_static(\n     ts: TokenStream,\n ) -> Option<String> {\n     let mut result = String::with_capacity(1024);\n-    let mut parser = build_parser(context, ts);\n     let nested_shape = shape\n         .block_indent(context.config.tab_spaces())\n         .with_max_width(context.config);\n \n     result.push_str(\"lazy_static! {\");\n     result.push_str(&nested_shape.indent.to_string_with_newline(context.config));\n \n-    macro_rules! parse_or {\n-        ($method:ident $(,)* $($arg:expr),* $(,)*) => {\n-            match parser.$method($($arg,)*) {\n-                Ok(val) => {\n-                    if parser.sess.span_diagnostic.has_errors() {\n-                        parser.sess.span_diagnostic.reset_err_count();\n-                        return None;\n-                    } else {\n-                        val\n-                    }\n-                }\n-                Err(mut err) => {\n-                    err.cancel();\n-                    parser.sess.span_diagnostic.reset_err_count();\n-                    return None;\n-                }\n-            }\n-        }\n-    }\n-\n-    while parser.token.kind != TokenKind::Eof {\n-        // Parse a `lazy_static!` item.\n-        let vis = crate::utils::format_visibility(\n-            context,\n-            &parse_or!(parse_visibility, rustc_parse::parser::FollowedByType::No),\n-        );\n-        parser.eat_keyword(kw::Static);\n-        parser.eat_keyword(kw::Ref);\n-        let id = parse_or!(parse_ident);\n-        parser.eat(&TokenKind::Colon);\n-        let ty = parse_or!(parse_ty);\n-        parser.eat(&TokenKind::Eq);\n-        let expr = parse_or!(parse_expr);\n-        parser.eat(&TokenKind::Semi);\n-\n+    let parsed_elems = parse_lazy_static(context, ts)?;\n+    let last = parsed_elems.len() - 1;\n+    for (i, (vis, id, ty, expr)) in parsed_elems.iter().enumerate() {\n         // Rewrite as a static item.\n+        let vis = crate::utils::format_visibility(context, vis);\n         let mut stmt = String::with_capacity(128);\n         stmt.push_str(&format!(\n             \"{}static ref {}: {} =\",\n@@ -1356,7 +1325,7 @@ fn format_lazy_static(\n             nested_shape.sub_width(1)?,\n         )?);\n         result.push(';');\n-        if parser.token.kind != TokenKind::Eof {\n+        if i != last {\n             result.push_str(&nested_shape.indent.to_string_with_newline(context.config));\n         }\n     }"}, {"sha": "9c8651aa3faf78c68b8de3cfe9a11f4423624cbb", "filename": "src/parse/macros/lazy_static.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c8cf454173ec332acf3860863c7d2f088876e40b/src%2Fparse%2Fmacros%2Flazy_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8cf454173ec332acf3860863c7d2f088876e40b/src%2Fparse%2Fmacros%2Flazy_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparse%2Fmacros%2Flazy_static.rs?ref=c8cf454173ec332acf3860863c7d2f088876e40b", "patch": "@@ -0,0 +1,50 @@\n+use rustc_ast::ast;\n+use rustc_ast::ptr::P;\n+use rustc_ast::token::TokenKind;\n+use rustc_ast::tokenstream::TokenStream;\n+use rustc_span::symbol::{self, kw};\n+\n+use crate::rewrite::RewriteContext;\n+\n+pub(crate) fn parse_lazy_static(\n+    context: &RewriteContext<'_>,\n+    ts: TokenStream,\n+) -> Option<Vec<(ast::Visibility, symbol::Ident, P<ast::Ty>, P<ast::Expr>)>> {\n+    let mut result = vec![];\n+    let mut parser = super::build_parser(context, ts);\n+    macro_rules! parse_or {\n+        ($method:ident $(,)* $($arg:expr),* $(,)*) => {\n+            match parser.$method($($arg,)*) {\n+                Ok(val) => {\n+                    if parser.sess.span_diagnostic.has_errors() {\n+                        parser.sess.span_diagnostic.reset_err_count();\n+                        return None;\n+                    } else {\n+                        val\n+                    }\n+                }\n+                Err(mut err) => {\n+                    err.cancel();\n+                    parser.sess.span_diagnostic.reset_err_count();\n+                    return None;\n+                }\n+            }\n+        }\n+    }\n+\n+    while parser.token.kind != TokenKind::Eof {\n+        // Parse a `lazy_static!` item.\n+        let vis = parse_or!(parse_visibility, rustc_parse::parser::FollowedByType::No);\n+        parser.eat_keyword(kw::Static);\n+        parser.eat_keyword(kw::Ref);\n+        let id = parse_or!(parse_ident);\n+        parser.eat(&TokenKind::Colon);\n+        let ty = parse_or!(parse_ty);\n+        parser.eat(&TokenKind::Eq);\n+        let expr = parse_or!(parse_expr);\n+        parser.eat(&TokenKind::Semi);\n+        result.push((vis, id, ty, expr));\n+    }\n+\n+    Some(result)\n+}"}, {"sha": "7115302a479e1d6c7d1684bfcb3e95928e7cbe47", "filename": "src/parse/macros/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8cf454173ec332acf3860863c7d2f088876e40b/src%2Fparse%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8cf454173ec332acf3860863c7d2f088876e40b/src%2Fparse%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparse%2Fmacros%2Fmod.rs?ref=c8cf454173ec332acf3860863c7d2f088876e40b", "patch": "@@ -11,6 +11,8 @@ use rustc_span::{\n use crate::macros::MacroArg;\n use crate::rewrite::{Rewrite, RewriteContext};\n \n+pub(crate) mod lazy_static;\n+\n pub(crate) fn build_parser<'a>(context: &RewriteContext<'a>, tokens: TokenStream) -> Parser<'a> {\n     stream_to_parser(context.parse_sess.inner(), tokens, MACRO_ARGUMENTS)\n }"}]}