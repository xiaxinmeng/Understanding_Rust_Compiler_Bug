{"sha": "c37fe779c657091ac4cb0fcfff43659972987303", "node_id": "C_kwDOAAsO6NoAKGMzN2ZlNzc5YzY1NzA5MWFjNGNiMGZjZmZmNDM2NTk5NzI5ODczMDM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-08T23:41:54Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-08T23:41:54Z"}, "message": "Add data queries for macros", "tree": {"sha": "3970ec78abaea6c80fcec0668dad0d4a7be3e685", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3970ec78abaea6c80fcec0668dad0d4a7be3e685"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c37fe779c657091ac4cb0fcfff43659972987303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c37fe779c657091ac4cb0fcfff43659972987303", "html_url": "https://github.com/rust-lang/rust/commit/c37fe779c657091ac4cb0fcfff43659972987303", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c37fe779c657091ac4cb0fcfff43659972987303/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55ec93a3370d4c801a74272128e6d696108e9cb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/55ec93a3370d4c801a74272128e6d696108e9cb1", "html_url": "https://github.com/rust-lang/rust/commit/55ec93a3370d4c801a74272128e6d696108e9cb1"}], "stats": {"total": 121, "additions": 102, "deletions": 19}, "files": [{"sha": "68f3e3ae61fbc7b868e84fb28168af526bcbd86e", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c37fe779c657091ac4cb0fcfff43659972987303/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37fe779c657091ac4cb0fcfff43659972987303/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=c37fe779c657091ac4cb0fcfff43659972987303", "patch": "@@ -340,7 +340,7 @@ impl ModuleDef {\n             ModuleDef::Variant(it) => it.name(db),\n             ModuleDef::TypeAlias(it) => it.name(db),\n             ModuleDef::Static(it) => it.name(db),\n-            ModuleDef::Macro(it) => it.name(db)?,\n+            ModuleDef::Macro(it) => it.name(db),\n             ModuleDef::BuiltinType(it) => it.name(),\n         };\n         Some(name)\n@@ -426,8 +426,7 @@ impl HasVisibility for ModuleDef {\n             ModuleDef::Trait(it) => it.visibility(db),\n             ModuleDef::TypeAlias(it) => it.visibility(db),\n             ModuleDef::Variant(it) => it.visibility(db),\n-            // FIXME\n-            ModuleDef::Macro(_) => Visibility::Public,\n+            ModuleDef::Macro(it) => it.visibility(db),\n             ModuleDef::BuiltinType(_) => Visibility::Public,\n         }\n     }\n@@ -1766,14 +1765,12 @@ impl Macro {\n         Module { id: self.id.module(db.upcast()) }\n     }\n \n-    pub fn name(self, _db: &dyn HirDatabase) -> Option<Name> {\n-        // match self.id {\n-        //     MacroId::Macro2Id(id) => db.macro2_data(id).name.clone(),\n-        //     MacroId::MacroRulesId(id) => db.macro_rules_data(id).name.clone(),\n-        //     MacroId::ProcMacroId(id) => db.proc_macro_data(id).name.clone(),\n-        // }\n-        // FIXME\n-        None\n+    pub fn name(self, db: &dyn HirDatabase) -> Name {\n+        match self.id {\n+            MacroId::Macro2Id(id) => db.macro2_data(id).name.clone(),\n+            MacroId::MacroRulesId(id) => db.macro_rules_data(id).name.clone(),\n+            MacroId::ProcMacroId(id) => db.proc_macro_data(id).name.clone(),\n+        }\n     }\n \n     pub fn kind(&self, db: &dyn HirDatabase) -> MacroKind {\n@@ -1826,6 +1823,20 @@ impl Macro {\n     }\n }\n \n+impl HasVisibility for Macro {\n+    fn visibility(&self, db: &dyn HirDatabase) -> Visibility {\n+        match self.id {\n+            MacroId::Macro2Id(id) => {\n+                let data = db.macro2_data(id);\n+                let visibility = &data.visibility;\n+                visibility.resolve(db.upcast(), &self.id.resolver(db.upcast()))\n+            }\n+            MacroId::MacroRulesId(_) => Visibility::Public,\n+            MacroId::ProcMacroId(_) => Visibility::Public,\n+        }\n+    }\n+}\n+\n #[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]\n pub enum ItemInNs {\n     Types(ModuleDef),\n@@ -3374,3 +3385,9 @@ impl HasCrate for Type {\n         self.krate.into()\n     }\n }\n+\n+impl HasCrate for Macro {\n+    fn krate(&self, db: &dyn HirDatabase) -> Crate {\n+        self.module(db).krate()\n+    }\n+}"}, {"sha": "5cef7ecb374df362682ecf122f1092f447803e93", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c37fe779c657091ac4cb0fcfff43659972987303/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37fe779c657091ac4cb0fcfff43659972987303/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=c37fe779c657091ac4cb0fcfff43659972987303", "patch": "@@ -15,7 +15,8 @@ use crate::{\n     type_ref::{TraitRef, TypeBound, TypeRef},\n     visibility::RawVisibility,\n     AssocItemId, AstIdWithPath, ConstId, ConstLoc, FunctionId, FunctionLoc, HasModule, ImplId,\n-    Intern, ItemContainerId, Lookup, ModuleId, StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n+    Intern, ItemContainerId, Lookup, Macro2Id, MacroRulesId, ModuleId, ProcMacroId, StaticId,\n+    TraitId, TypeAliasId, TypeAliasLoc,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -293,6 +294,59 @@ impl ImplData {\n     }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct Macro2Data {\n+    pub name: Name,\n+    pub visibility: RawVisibility,\n+}\n+\n+impl Macro2Data {\n+    pub(crate) fn macro2_data_query(db: &dyn DefDatabase, makro: Macro2Id) -> Arc<Macro2Data> {\n+        let loc = makro.lookup(db);\n+        let item_tree = loc.id.item_tree(db);\n+        let makro = &item_tree[loc.id.value];\n+\n+        Arc::new(Macro2Data {\n+            name: makro.name.clone(),\n+            visibility: item_tree[makro.visibility].clone(),\n+        })\n+    }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct MacroRulesData {\n+    pub name: Name,\n+}\n+\n+impl MacroRulesData {\n+    pub(crate) fn macro_rules_data_query(\n+        db: &dyn DefDatabase,\n+        makro: MacroRulesId,\n+    ) -> Arc<MacroRulesData> {\n+        let loc = makro.lookup(db);\n+        let item_tree = loc.id.item_tree(db);\n+        let makro = &item_tree[loc.id.value];\n+\n+        Arc::new(MacroRulesData { name: makro.name.clone() })\n+    }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct ProcMacroData {\n+    pub name: Name,\n+}\n+\n+impl ProcMacroData {\n+    pub(crate) fn proc_macro_data_query(\n+        db: &dyn DefDatabase,\n+        makro: ProcMacroId,\n+    ) -> Arc<ProcMacroData> {\n+        let loc = makro.lookup(db);\n+        let item_tree = loc.id.item_tree(db);\n+        let makro = &item_tree[loc.id.value];\n+\n+        Arc::new(ProcMacroData { name: makro.name.clone() })\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ConstData {\n     /// `None` for `const _: () = ();`"}, {"sha": "934d13c0675841593cad6696b6d4a82f1818de34", "filename": "crates/hir_def/src/db.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c37fe779c657091ac4cb0fcfff43659972987303/crates%2Fhir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37fe779c657091ac4cb0fcfff43659972987303/crates%2Fhir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdb.rs?ref=c37fe779c657091ac4cb0fcfff43659972987303", "patch": "@@ -11,7 +11,10 @@ use crate::{\n     adt::{EnumData, StructData},\n     attr::{Attrs, AttrsWithOwner},\n     body::{scope::ExprScopes, Body, BodySourceMap},\n-    data::{ConstData, FunctionData, ImplData, StaticData, TraitData, TypeAliasData},\n+    data::{\n+        ConstData, FunctionData, ImplData, Macro2Data, MacroRulesData, ProcMacroData, StaticData,\n+        TraitData, TypeAliasData,\n+    },\n     generics::GenericParams,\n     import_map::ImportMap,\n     intern::Interned,\n@@ -118,6 +121,15 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n     #[salsa::invoke(StaticData::static_data_query)]\n     fn static_data(&self, konst: StaticId) -> Arc<StaticData>;\n \n+    #[salsa::invoke(Macro2Data::macro2_data_query)]\n+    fn macro2_data(&self, makro: Macro2Id) -> Arc<Macro2Data>;\n+\n+    #[salsa::invoke(MacroRulesData::macro_rules_data_query)]\n+    fn macro_rules_data(&self, makro: MacroRulesId) -> Arc<MacroRulesData>;\n+\n+    #[salsa::invoke(ProcMacroData::proc_macro_data_query)]\n+    fn proc_macro_data(&self, makro: ProcMacroId) -> Arc<ProcMacroData>;\n+\n     #[salsa::invoke(Body::body_with_source_map_query)]\n     fn body_with_source_map(&self, def: DefWithBodyId) -> (Arc<Body>, Arc<BodySourceMap>);\n "}, {"sha": "a98cd214c30da51a2704b8bd7269250991f5f93f", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c37fe779c657091ac4cb0fcfff43659972987303/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37fe779c657091ac4cb0fcfff43659972987303/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=c37fe779c657091ac4cb0fcfff43659972987303", "patch": "@@ -472,7 +472,7 @@ fn filename_and_frag_for_def(\n         }\n         Definition::Const(c) => format!(\"const.{}.html\", c.name(db)?),\n         Definition::Static(s) => format!(\"static.{}.html\", s.name(db)),\n-        Definition::Macro(mac) => format!(\"macro.{}.html\", mac.name(db)?),\n+        Definition::Macro(mac) => format!(\"macro.{}.html\", mac.name(db)),\n         Definition::Field(field) => {\n             let def = match field.parent_def(db) {\n                 hir::VariantDef::Struct(it) => Definition::Adt(it.into()),"}, {"sha": "b4608d63c6c6a99d245217a049f41da85ceb97ad", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c37fe779c657091ac4cb0fcfff43659972987303/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37fe779c657091ac4cb0fcfff43659972987303/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=c37fe779c657091ac4cb0fcfff43659972987303", "patch": "@@ -75,7 +75,7 @@ pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<\n     for node in tok.ancestors() {\n         if let Some(item) = ast::Item::cast(node.clone()) {\n             if let Some(def) = sema.resolve_attr_macro_call(&item) {\n-                name = def.name(db).map(|name| name.to_string());\n+                name = Some(def.name(db).to_string());\n                 expanded = expand_attr_macro_recur(&sema, &item);\n                 break;\n             }"}, {"sha": "64f6e3989d259b906ff4a8b4b8aa2208f57175eb", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c37fe779c657091ac4cb0fcfff43659972987303/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37fe779c657091ac4cb0fcfff43659972987303/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=c37fe779c657091ac4cb0fcfff43659972987303", "patch": "@@ -36,7 +36,7 @@ pub(super) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext, at\n                         |&&dependency| {\n                             !existing_derives\n                                 .iter()\n-                                .filter_map(|it| it.name(ctx.db))\n+                                .map(|it| it.name(ctx.db))\n                                 .any(|it| it.to_smol_str() == dependency)\n                         },\n                     ));\n@@ -108,7 +108,7 @@ fn flyimport_derive(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n                 let mut item = CompletionItem::new(\n                     SymbolKind::Derive,\n                     ctx.source_range(),\n-                    mac.name(ctx.db)?.to_smol_str(),\n+                    mac.name(ctx.db).to_smol_str(),\n                 );\n                 item.add_import(ImportEdit { import, scope: import_scope.clone() });\n                 if let Some(docs) = mac.docs(ctx.db) {"}, {"sha": "d3d8ec6cbe1e444385c93bffe22b7284f2a655e5", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c37fe779c657091ac4cb0fcfff43659972987303/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37fe779c657091ac4cb0fcfff43659972987303/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=c37fe779c657091ac4cb0fcfff43659972987303", "patch": "@@ -94,7 +94,7 @@ impl Definition {\n \n     pub fn name(&self, db: &RootDatabase) -> Option<Name> {\n         let name = match self {\n-            Definition::Macro(it) => it.name(db)?,\n+            Definition::Macro(it) => it.name(db),\n             Definition::Field(it) => it.name(db),\n             Definition::Module(it) => it.name(db)?,\n             Definition::Function(it) => it.name(db),"}, {"sha": "c8dd64f61ca347ff637cf3961cebc28567356e93", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c37fe779c657091ac4cb0fcfff43659972987303/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37fe779c657091ac4cb0fcfff43659972987303/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=c37fe779c657091ac4cb0fcfff43659972987303", "patch": "@@ -15,7 +15,7 @@ pub fn item_name(db: &RootDatabase, item: ItemInNs) -> Option<Name> {\n     match item {\n         ItemInNs::Types(module_def_id) => ModuleDef::from(module_def_id).name(db),\n         ItemInNs::Values(module_def_id) => ModuleDef::from(module_def_id).name(db),\n-        ItemInNs::Macros(macro_def_id) => Macro::from(macro_def_id).name(db),\n+        ItemInNs::Macros(macro_def_id) => Some(Macro::from(macro_def_id).name(db)),\n     }\n }\n "}]}