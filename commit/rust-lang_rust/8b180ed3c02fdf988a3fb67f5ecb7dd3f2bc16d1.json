{"sha": "8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1", "node_id": "C_kwDOAAsO6NoAKDhiMTgwZWQzYzAyZmRmOTg4YTNmYjY3ZjVlY2I3ZGQzZjJiYzE2ZDE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-18T03:10:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-18T03:10:47Z"}, "message": "Rollup merge of #100651 - nidnogg:diagnostics_migration_expand_transcribe, r=davidtwco\n\nMigrations for rustc_expand transcribe.rs\n\nThis PR includes some migrations to the new diagnostics API for the `rustc_expand` module.\nr? ```@davidtwco```", "tree": {"sha": "21e49c0aef0b6c635888ba40187f5b599ecef589", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21e49c0aef0b6c635888ba40187f5b599ecef589"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi/a23CRBK7hj4Ov3rIwAAXm4IAHLqFTDVPLHbgdkL8BwyQ3oD\nklCNpNSPo7mCKQMc97Xd+jFXuuzjvMbv13UTJ0FnrOp888lOXKkZEBD/h9DtxaVj\nvFEl8TfLZm1KIQYqssv5OBa8o/RWWm+/M9kD4AinTTFFRg0KPgSNnGjciimRcVSE\nTkGFRG0UeFJW38qTa66kWKcOE92oZsUeAQkaxp6ZYCBOfmJfepUA9WtjgvigsT+e\nKkq4TmnsSnz3Y594WqOIWHDcNUYa6kVPfYcdm2i0w3DnhjYrG0N6G7Y3ZXK4ipfe\n0kejCyZlS6bz0fyXHaLhgp2UbZkxwxVkaXlvDEzbUvQPPWSmXT9xH2Ih+34cC+A=\n=xDQC\n-----END PGP SIGNATURE-----\n", "payload": "tree 21e49c0aef0b6c635888ba40187f5b599ecef589\nparent b295639f148e1807b043dd920112e2ec2596e225\nparent a468f131628341ff83bdabd1133f432c17fa1cbe\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660792247 +0200\ncommitter GitHub <noreply@github.com> 1660792247 +0200\n\nRollup merge of #100651 - nidnogg:diagnostics_migration_expand_transcribe, r=davidtwco\n\nMigrations for rustc_expand transcribe.rs\n\nThis PR includes some migrations to the new diagnostics API for the `rustc_expand` module.\nr? ```@davidtwco```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1", "html_url": "https://github.com/rust-lang/rust/commit/8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b295639f148e1807b043dd920112e2ec2596e225", "url": "https://api.github.com/repos/rust-lang/rust/commits/b295639f148e1807b043dd920112e2ec2596e225", "html_url": "https://github.com/rust-lang/rust/commit/b295639f148e1807b043dd920112e2ec2596e225"}, {"sha": "a468f131628341ff83bdabd1133f432c17fa1cbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/a468f131628341ff83bdabd1133f432c17fa1cbe", "html_url": "https://github.com/rust-lang/rust/commit/a468f131628341ff83bdabd1133f432c17fa1cbe"}], "stats": {"total": 103, "additions": 78, "deletions": 25}, "files": [{"sha": "ee76a4f45005d1c5ed71db9903ce3d5e541b14f3", "filename": "compiler/rustc_error_messages/locales/en-US/expand.ftl", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl?ref=8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1", "patch": "@@ -3,3 +3,20 @@ expand_explain_doc_comment_outer =\n \n expand_explain_doc_comment_inner =\n     inner doc comments expand to `#![doc = \"...\"]`, which is what this macro attempted to match\n+\n+expand_expr_repeat_no_syntax_vars = \n+    attempted to repeat an expression containing no syntax variables matched as repeating at this depth\n+\n+expand_must_repeat_once = \n+    this must repeat at least once\n+\n+expand_count_repetition_misplaced =\n+    `count` can not be placed inside the inner-most repetition\n+\n+expand_meta_var_expr_unrecognized_var =\n+    variable `{$key}` is not recognized in meta-variable expression\n+\n+expand_var_still_repeating =\n+    variable '{$ident}' is still repeating at this depth\n+\n+expand_meta_var_dif_seq_matchers = {$msg}\n\\ No newline at end of file"}, {"sha": "356f9dfdb3b2e79223109779322ac398108523eb", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1", "patch": "@@ -8,7 +8,7 @@ use rustc_error_messages::FluentValue;\n use rustc_hir as hir;\n use rustc_lint_defs::{Applicability, LintExpectationId};\n use rustc_span::edition::LATEST_STABLE_EDITION;\n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::symbol::{Ident, MacroRulesNormalizedIdent, Symbol};\n use rustc_span::{edition::Edition, Span, DUMMY_SP};\n use std::borrow::Cow;\n use std::fmt;\n@@ -87,6 +87,7 @@ into_diagnostic_arg_using_display!(\n     hir::Target,\n     Edition,\n     Ident,\n+    MacroRulesNormalizedIdent,\n );\n \n impl IntoDiagnosticArg for bool {"}, {"sha": "0d7e137c7dd0ce5ad099fa107ddd9efe9aa79673", "filename": "compiler/rustc_expand/src/errors.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs?ref=8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1", "patch": "@@ -0,0 +1,48 @@\n+use rustc_macros::SessionDiagnostic;\n+use rustc_span::symbol::MacroRulesNormalizedIdent;\n+use rustc_span::Span;\n+\n+#[derive(SessionDiagnostic)]\n+#[error(expand::expr_repeat_no_syntax_vars)]\n+pub(crate) struct NoSyntaxVarsExprRepeat {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(expand::must_repeat_once)]\n+pub(crate) struct MustRepeatOnce {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(expand::count_repetition_misplaced)]\n+pub(crate) struct CountRepetitionMisplaced {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(expand::meta_var_expr_unrecognized_var)]\n+pub(crate) struct MetaVarExprUnrecognizedVar {\n+    #[primary_span]\n+    pub span: Span,\n+    pub key: MacroRulesNormalizedIdent,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(expand::var_still_repeating)]\n+pub(crate) struct VarStillRepeating {\n+    #[primary_span]\n+    pub span: Span,\n+    pub ident: MacroRulesNormalizedIdent,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(expand::meta_var_dif_seq_matchers)]\n+pub(crate) struct MetaVarsDifSeqMatchers {\n+    #[primary_span]\n+    pub span: Span,\n+    pub msg: String,\n+}"}, {"sha": "e1dde1672c1905daa3677cbbd9d600ff32503fc9", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1", "patch": "@@ -25,6 +25,7 @@ pub mod base;\n pub mod build;\n #[macro_use]\n pub mod config;\n+pub mod errors;\n pub mod expand;\n pub mod module;\n pub mod proc_macro;"}, {"sha": "bec6d1a2df7d873301f1d9ebe3568fb8143f574e", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1", "patch": "@@ -1,4 +1,8 @@\n use crate::base::ExtCtxt;\n+use crate::errors::{\n+    CountRepetitionMisplaced, MetaVarExprUnrecognizedVar, MetaVarsDifSeqMatchers, MustRepeatOnce,\n+    NoSyntaxVarsExprRepeat, VarStillRepeating,\n+};\n use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, MatchedTokenTree, NamedMatch};\n use crate::mbe::{self, MetaVarExpr};\n use rustc_ast::mut_visit::{self, MutVisitor};\n@@ -165,19 +169,15 @@ pub(super) fn transcribe<'a>(\n             seq @ mbe::TokenTree::Sequence(_, delimited) => {\n                 match lockstep_iter_size(&seq, interp, &repeats) {\n                     LockstepIterSize::Unconstrained => {\n-                        return Err(cx.struct_span_err(\n-                            seq.span(), /* blame macro writer */\n-                            \"attempted to repeat an expression containing no syntax variables \\\n-                             matched as repeating at this depth\",\n-                        ));\n+                        return Err(cx.create_err(NoSyntaxVarsExprRepeat { span: seq.span() }));\n                     }\n \n                     LockstepIterSize::Contradiction(msg) => {\n                         // FIXME: this really ought to be caught at macro definition time... It\n                         // happens when two meta-variables are used in the same repetition in a\n                         // sequence, but they come from different sequence matchers and repeat\n                         // different amounts.\n-                        return Err(cx.struct_span_err(seq.span(), &msg));\n+                        return Err(cx.create_err(MetaVarsDifSeqMatchers { span: seq.span(), msg }));\n                     }\n \n                     LockstepIterSize::Constraint(len, _) => {\n@@ -193,10 +193,7 @@ pub(super) fn transcribe<'a>(\n                                 // FIXME: this really ought to be caught at macro definition\n                                 // time... It happens when the Kleene operator in the matcher and\n                                 // the body for the same meta-variable do not match.\n-                                return Err(cx.struct_span_err(\n-                                    sp.entire(),\n-                                    \"this must repeat at least once\",\n-                                ));\n+                                return Err(cx.create_err(MustRepeatOnce { span: sp.entire() }));\n                             }\n                         } else {\n                             // 0 is the initial counter (we have done 0 repetitions so far). `len`\n@@ -239,10 +236,7 @@ pub(super) fn transcribe<'a>(\n                         }\n                         MatchedSeq(..) => {\n                             // We were unable to descend far enough. This is an error.\n-                            return Err(cx.struct_span_err(\n-                                sp, /* blame the macro writer */\n-                                &format!(\"variable '{}' is still repeating at this depth\", ident),\n-                            ));\n+                            return Err(cx.create_err(VarStillRepeating { span: sp, ident }));\n                         }\n                     }\n                 } else {\n@@ -448,10 +442,7 @@ fn count_repetitions<'a>(\n         match matched {\n             MatchedTokenTree(_) | MatchedNonterminal(_) => {\n                 if declared_lhs_depth == 0 {\n-                    return Err(cx.struct_span_err(\n-                        sp.entire(),\n-                        \"`count` can not be placed inside the inner-most repetition\",\n-                    ));\n+                    return Err(cx.create_err(CountRepetitionMisplaced { span: sp.entire() }));\n                 }\n                 match depth_opt {\n                     None => Ok(1),\n@@ -499,12 +490,7 @@ where\n {\n     let span = ident.span;\n     let key = MacroRulesNormalizedIdent::new(ident);\n-    interp.get(&key).ok_or_else(|| {\n-        cx.struct_span_err(\n-            span,\n-            &format!(\"variable `{}` is not recognized in meta-variable expression\", key),\n-        )\n-    })\n+    interp.get(&key).ok_or_else(|| cx.create_err(MetaVarExprUnrecognizedVar { span, key }))\n }\n \n /// Used by meta-variable expressions when an user input is out of the actual declared bounds. For"}]}