{"sha": "25aa3605952719fbfc7ccb998a7980fad6df2eb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YWEzNjA1OTUyNzE5ZmJmYzdjY2I5OThhNzk4MGZhZDZkZjJlYjE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-22T04:46:43Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-22T05:20:09Z"}, "message": "[NEEDS SNAPSHOT] Port remainder of resources to classes in libcore", "tree": {"sha": "5eec340d02f7554e1cd3f2a0acbe4ded2bbf029c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eec340d02f7554e1cd3f2a0acbe4ded2bbf029c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25aa3605952719fbfc7ccb998a7980fad6df2eb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25aa3605952719fbfc7ccb998a7980fad6df2eb1", "html_url": "https://github.com/rust-lang/rust/commit/25aa3605952719fbfc7ccb998a7980fad6df2eb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25aa3605952719fbfc7ccb998a7980fad6df2eb1/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a141f58e9b34a3f8ab68b5d7f9db8b2d75492d78", "url": "https://api.github.com/repos/rust-lang/rust/commits/a141f58e9b34a3f8ab68b5d7f9db8b2d75492d78", "html_url": "https://github.com/rust-lang/rust/commit/a141f58e9b34a3f8ab68b5d7f9db8b2d75492d78"}], "stats": {"total": 88, "additions": 53, "deletions": 35}, "files": [{"sha": "7e8d69298bd02b020b31374fff762b54739444bf", "filename": "src/libcore/arc.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/25aa3605952719fbfc7ccb998a7980fad6df2eb1/src%2Flibcore%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25aa3605952719fbfc7ccb998a7980fad6df2eb1/src%2Flibcore%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farc.rs?ref=25aa3605952719fbfc7ccb998a7980fad6df2eb1", "patch": "@@ -24,17 +24,19 @@ type arc_data<T> = {\n     data: T\n };\n \n-resource arc_destruct<T>(data: *libc::c_void) {\n-    unsafe {\n-        let data: ~arc_data<T> = unsafe::reinterpret_cast(data);\n-        let new_count = rustrt::rust_atomic_decrement(&mut data.count);\n-        assert new_count >= 0;\n-        if new_count == 0 {\n-            // drop glue takes over.\n-        } else {\n-            unsafe::forget(data);\n-        }\n-    }\n+class arc_destruct<T> {\n+  let data: *libc::c_void;\n+  new(data: *libc::c_void) { self.data = data; }\n+  drop unsafe {\n+     let data: ~arc_data<T> = unsafe::reinterpret_cast(self.data);\n+     let new_count = rustrt::rust_atomic_decrement(&mut data.count);\n+     assert new_count >= 0;\n+     if new_count == 0 {\n+         // drop glue takes over.\n+     } else {\n+       unsafe::forget(data);\n+     }\n+  }\n }\n \n type arc<T: const> = arc_destruct<T>;\n@@ -52,7 +54,7 @@ fn arc<T: const>(-data: T) -> arc<T> {\n  wrapper.\"]\n fn get<T: const>(rc: &a.arc<T>) -> &a.T {\n     unsafe {\n-        let ptr: ~arc_data<T> = unsafe::reinterpret_cast(**rc);\n+        let ptr: ~arc_data<T> = unsafe::reinterpret_cast((*rc).data);\n         // Cast us back into the correct region\n         let r = unsafe::reinterpret_cast(&ptr.data);\n         unsafe::forget(ptr);\n@@ -67,12 +69,12 @@ object. However, one of the `arc` objects can be sent to another task,\n allowing them to share the underlying data.\"]\n fn clone<T: const>(rc: &arc<T>) -> arc<T> {\n     unsafe {\n-        let ptr: ~arc_data<T> = unsafe::reinterpret_cast(**rc);\n+        let ptr: ~arc_data<T> = unsafe::reinterpret_cast((*rc).data);\n         let new_count = rustrt::rust_atomic_increment(&mut ptr.count);\n         assert new_count >= 2;\n         unsafe::forget(ptr);\n     }\n-    arc_destruct(**rc)\n+    arc_destruct((*rc).data)\n }\n \n // An arc over mutable data that is protected by a lock.\n@@ -93,17 +95,19 @@ impl methods<T: send> for exclusive<T> {\n     fn clone() -> exclusive<T> {\n         unsafe {\n             // this makes me nervous...\n-            let ptr: ~arc_data<ex_data<T>> = unsafe::reinterpret_cast(*self);\n+            let ptr: ~arc_data<ex_data<T>> =\n+                  unsafe::reinterpret_cast(self.data);\n             let new_count = rustrt::rust_atomic_increment(&mut ptr.count);\n             assert new_count > 1;\n             unsafe::forget(ptr);\n         }\n-        arc_destruct(*self)\n+        arc_destruct(self.data)\n     }\n \n     fn with<U>(f: fn(sys::condition, x: &T) -> U) -> U {\n         unsafe {\n-            let ptr: ~arc_data<ex_data<T>> = unsafe::reinterpret_cast(*self);\n+            let ptr: ~arc_data<ex_data<T>> =\n+                  unsafe::reinterpret_cast(self.data);\n             let r = {\n                 let rec: &ex_data<T> = &(*ptr).data;\n                 rec.lock.lock_cond() {|c|\n@@ -123,8 +127,10 @@ type get_chan<T: const send> = chan<chan<arc<T>>>;\n // (terminate, get)\n type shared_arc<T: const send> = (shared_arc_res, get_chan<T>);\n \n-resource shared_arc_res(c: comm::chan<()>) {\n-    c.send(());\n+class shared_arc_res {\n+   let c: comm::chan<()>;\n+   new(c: comm::chan<()>) { self.c = c; }\n+   drop { self.c.send(()); }\n }\n \n fn shared_arc<T: send const>(-data: T) -> shared_arc<T> {"}, {"sha": "922d7c72819fa5209e466ff117cc973602e4833b", "filename": "src/libcore/priv.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25aa3605952719fbfc7ccb998a7980fad6df2eb1/src%2Flibcore%2Fpriv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25aa3605952719fbfc7ccb998a7980fad6df2eb1/src%2Flibcore%2Fpriv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpriv.rs?ref=25aa3605952719fbfc7ccb998a7980fad6df2eb1", "patch": "@@ -181,8 +181,12 @@ unsafe fn weaken_task(f: fn(comm::port<()>)) unsafe {\n     let _unweaken = unweaken(ch);\n     f(po);\n \n-    resource unweaken(ch: comm::chan<()>) unsafe {\n-        rustrt::rust_task_unweaken(unsafe::reinterpret_cast(ch));\n+    class unweaken {\n+      let ch: comm::chan<()>;\n+      new(ch: comm::chan<()>) { self.ch = ch; }\n+      drop unsafe {\n+        rustrt::rust_task_unweaken(unsafe::reinterpret_cast(self.ch));\n+      }\n     }\n }\n "}, {"sha": "99ac4addc789fa8752ea38862620a5c999b3220b", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25aa3605952719fbfc7ccb998a7980fad6df2eb1/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25aa3605952719fbfc7ccb998a7980fad6df2eb1/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=25aa3605952719fbfc7ccb998a7980fad6df2eb1", "patch": "@@ -230,10 +230,14 @@ impl extensions for rng {\n \n }\n \n-resource rand_res(c: *rctx) { rustrt::rand_free(c); }\n+class rand_res {\n+    let c: *rctx;\n+    new(c: *rctx) { self.c = c; }\n+    drop { rustrt::rand_free(self.c); }\n+}\n \n impl of rng for @rand_res {\n-    fn next() -> u32 { ret rustrt::rand_next(**self); }\n+    fn next() -> u32 { ret rustrt::rand_next((*self).c); }\n }\n \n #[doc = \"Create a new random seed for seeded_rng\"]"}, {"sha": "4183056b74165b2b309b86b7f9bab64539977914", "filename": "src/libcore/run.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/25aa3605952719fbfc7ccb998a7980fad6df2eb1/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25aa3605952719fbfc7ccb998a7980fad6df2eb1/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=25aa3605952719fbfc7ccb998a7980fad6df2eb1", "patch": "@@ -170,9 +170,9 @@ fn run_program(prog: str, args: [str]) -> int {\n #[doc =\"\n Spawns a process and returns a program\n \n-The returned value is a boxed resource containing a <program> object that can\n-be used for sending and recieving data over the standard file descriptors.\n-The resource will ensure that file descriptors are closed properly.\n+The returned value is a boxed class containing a <program> object that can\n+be used for sending and receiving data over the standard file descriptors.\n+The class will ensure that file descriptors are closed properly.\n \n # Arguments\n \n@@ -181,7 +181,7 @@ The resource will ensure that file descriptors are closed properly.\n \n # Return value\n \n-A boxed resource of <program>\n+A class with a <program> field\n \"]\n fn start_program(prog: str, args: [str]) -> program {\n     let pipe_input = os::pipe();\n@@ -221,16 +221,20 @@ fn start_program(prog: str, args: [str]) -> program {\n        libc::fclose(r.out_file);\n        libc::fclose(r.err_file);\n     }\n-    resource prog_res(r: prog_repr) { destroy_repr(r); }\n+    class prog_res {\n+        let r: prog_repr;\n+        new(-r: prog_repr) { self.r = r; }\n+        drop { destroy_repr(self.r); }\n+    }\n \n     impl of program for prog_res {\n-        fn get_id() -> pid_t { ret self.pid; }\n-        fn input() -> io::writer { io::fd_writer(self.in_fd, false) }\n-        fn output() -> io::reader { io::FILE_reader(self.out_file, false) }\n-        fn err() -> io::reader { io::FILE_reader(self.err_file, false) }\n-        fn close_input() { close_repr_input(*self); }\n-        fn finish() -> int { finish_repr(*self) }\n-        fn destroy() { destroy_repr(*self); }\n+        fn get_id() -> pid_t { ret self.r.pid; }\n+        fn input() -> io::writer { io::fd_writer(self.r.in_fd, false) }\n+        fn output() -> io::reader { io::FILE_reader(self.r.out_file, false) }\n+        fn err() -> io::reader { io::FILE_reader(self.r.err_file, false) }\n+        fn close_input() { close_repr_input(self.r); }\n+        fn finish() -> int { finish_repr(self.r) }\n+        fn destroy() { destroy_repr(self.r); }\n     }\n     let repr = {pid: pid,\n                 mut in_fd: pipe_input.out,"}]}