{"sha": "744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "node_id": "C_kwDOAAsO6NoAKDc0NGUzOTdkODg1NWY3ZGE4N2Q3MGFhOGQwYmQ5ZTBmNWYwYjUxYTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-01T10:44:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-01T10:44:25Z"}, "message": "Auto merge of #101986 - WaffleLapkin:move_lint_note_to_the_bottom, r=estebank\n\nMove lint level source explanation to the bottom\n\nSo, uhhhhh\n\nr? `@estebank`\n\n## User-facing change\n\n\"note: `#[warn(...)]` on by default\" and such are moved to the bottom of the diagnostic:\n```diff\n-   = note: `#[warn(unsupported_calling_conventions)]` on by default\n   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n   = note: for more information, see issue #87678 <https://github.com/rust-lang/rust/issues/87678>\n+   = note: `#[warn(unsupported_calling_conventions)]` on by default\n```\n\nWhy warning is enabled is the least important thing, so it shouldn't be the first note the user reads, IMO.\n\n## Developer-facing change\n\n`struct_span_lint` and similar methods have a different signature.\n\nBefore: `..., impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>)`\nAfter: `..., impl Into<DiagnosticMessage>, impl for<'a, 'b> FnOnce(&'b mut DiagnosticBuilder<'a, ()>) -> &'b mut DiagnosticBuilder<'a, ()>`\n\nThe reason for this is that `struct_span_lint` needs to edit the diagnostic _after_ `decorate` closure is called. This also makes lint code a little bit nicer in my opinion.\n\nAnother option is to use `impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>) -> DiagnosticBuilder<'a, ()>` altough I don't _really_ see reasons to do `let lint = lint.build(message)` everywhere.\n\n## Subtle problem\n\nBy moving the message outside of the closure (that may not be called if the lint is disabled) `format!(...)` is executed earlier, possibly formatting `Ty` which may call a query that trims paths that crashes the compiler if there were no warnings...\n\nI don't think it's that big of a deal, considering that we move from `format!(...)` to `fluent` (which is lazy by-default) anyway, however this required adding a workaround which is unfortunate.\n\n## P.S.\n\nI'm sorry, I do not how to make this PR smaller/easier to review. Changes to the lint API affect SO MUCH \ud83d\ude22", "tree": {"sha": "1721987352b5f0a8548fc46984821d974b661934", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1721987352b5f0a8548fc46984821d974b661934"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "html_url": "https://github.com/rust-lang/rust/commit/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "277bb6653b55475b5fbce6309e9852fa2100dabe", "url": "https://api.github.com/repos/rust-lang/rust/commits/277bb6653b55475b5fbce6309e9852fa2100dabe", "html_url": "https://github.com/rust-lang/rust/commit/277bb6653b55475b5fbce6309e9852fa2100dabe"}, {"sha": "b5b3ffe3fc9cfb524a6432ec60a0fc95c514d2e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5b3ffe3fc9cfb524a6432ec60a0fc95c514d2e1", "html_url": "https://github.com/rust-lang/rust/commit/b5b3ffe3fc9cfb524a6432ec60a0fc95c514d2e1"}], "stats": {"total": 6578, "additions": 3369, "deletions": 3209}, "files": [{"sha": "09c92ae03619dcbb2195239edee7790af946b165", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -233,10 +233,10 @@ impl<'tcx> ConstEvalErr<'tcx> {\n                 rustc_session::lint::builtin::CONST_ERR,\n                 hir_id,\n                 tcx.span,\n+                message,\n                 |lint| {\n-                    let mut lint = lint.build(message);\n-                    finish(&mut lint, Some(err_msg));\n-                    lint.emit();\n+                    finish(lint, Some(err_msg));\n+                    lint\n                 },\n             );\n             ErrorHandled::Linted"}, {"sha": "bf9248f99b695dd65d23bb38134359abdc268a89", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -358,6 +358,17 @@ impl<S: Into<String>> From<S> for DiagnosticMessage {\n     }\n }\n \n+/// A workaround for \"good path\" ICEs when formatting types in disables lints.\n+///\n+/// Delays formatting until `.into(): DiagnosticMessage` is used.\n+pub struct DelayDm<F>(pub F);\n+\n+impl<F: FnOnce() -> String> From<DelayDm<F>> for DiagnosticMessage {\n+    fn from(DelayDm(f): DelayDm<F>) -> Self {\n+        DiagnosticMessage::from(f())\n+    }\n+}\n+\n /// Translating *into* a subdiagnostic message from a diagnostic message is a little strange - but\n /// the subdiagnostic functions (e.g. `span_label`) take a `SubdiagnosticMessage` and the\n /// subdiagnostic derive refers to typed identifiers that are `DiagnosticMessage`s, so need to be"}, {"sha": "49dcc2ba021e4f94f01e6dd96a5f90599717c58c", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -1,6 +1,6 @@\n use crate::snippet::Style;\n use crate::{\n-    CodeSuggestion, DiagnosticMessage, EmissionGuarantee, Level, LintDiagnosticBuilder, MultiSpan,\n+    CodeSuggestion, DiagnosticBuilder, DiagnosticMessage, EmissionGuarantee, Level, MultiSpan,\n     SubdiagnosticMessage, Substitution, SubstitutionPart, SuggestionStyle,\n };\n use rustc_ast as ast;\n@@ -209,7 +209,12 @@ pub trait AddToDiagnostic {\n #[rustc_diagnostic_item = \"DecorateLint\"]\n pub trait DecorateLint<'a, G: EmissionGuarantee> {\n     /// Decorate and emit a lint.\n-    fn decorate_lint(self, diag: LintDiagnosticBuilder<'a, G>);\n+    fn decorate_lint<'b>(\n+        self,\n+        diag: &'b mut DiagnosticBuilder<'a, G>,\n+    ) -> &'b mut DiagnosticBuilder<'a, G>;\n+\n+    fn msg(&self) -> DiagnosticMessage;\n }\n \n #[must_use]"}, {"sha": "bbe6435be59f4c94365fa9a4b3797c36cb6a6636", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -642,27 +642,3 @@ macro_rules! struct_span_err {\n macro_rules! error_code {\n     ($code:ident) => {{ $crate::DiagnosticId::Error(stringify!($code).to_owned()) }};\n }\n-\n-/// Wrapper around a `DiagnosticBuilder` for creating lints.\n-pub struct LintDiagnosticBuilder<'a, G: EmissionGuarantee>(DiagnosticBuilder<'a, G>);\n-\n-impl<'a, G: EmissionGuarantee> LintDiagnosticBuilder<'a, G> {\n-    #[rustc_lint_diagnostics]\n-    /// Return the inner `DiagnosticBuilder`, first setting the primary message to `msg`.\n-    pub fn build(mut self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'a, G> {\n-        self.0.set_primary_message(msg);\n-        self.0.set_is_lint();\n-        self.0\n-    }\n-\n-    /// Create a `LintDiagnosticBuilder` from some existing `DiagnosticBuilder`.\n-    pub fn new(err: DiagnosticBuilder<'a, G>) -> LintDiagnosticBuilder<'a, G> {\n-        LintDiagnosticBuilder(err)\n-    }\n-}\n-\n-impl<'a> LintDiagnosticBuilder<'a, ErrorGuaranteed> {\n-    pub fn forget_guarantee(self) -> LintDiagnosticBuilder<'a, ()> {\n-        LintDiagnosticBuilder(self.0.forget_guarantee())\n-    }\n-}"}, {"sha": "c8711ec6e253bdcd2b5990f4ac7b3208f3f9eb72", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -30,7 +30,7 @@ use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{self, Lock, Lrc};\n use rustc_data_structures::AtomicRef;\n pub use rustc_error_messages::{\n-    fallback_fluent_bundle, fluent, fluent_bundle, DiagnosticMessage, FluentBundle,\n+    fallback_fluent_bundle, fluent, fluent_bundle, DelayDm, DiagnosticMessage, FluentBundle,\n     LanguageIdentifier, LazyFallbackBundle, MultiSpan, SpanLabel, SubdiagnosticMessage,\n     DEFAULT_LOCALE_RESOURCES,\n };\n@@ -374,7 +374,7 @@ pub use diagnostic::{\n     AddToDiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgFromDisplay,\n     DiagnosticArgValue, DiagnosticId, DiagnosticStyledString, IntoDiagnosticArg, SubDiagnostic,\n };\n-pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee, LintDiagnosticBuilder};\n+pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee};\n use std::backtrace::Backtrace;\n \n /// A handler deals with errors and other compiler output."}, {"sha": "b66e59d8ac6ec87717e61556a3f6bace2edb3556", "filename": "compiler/rustc_hir_analysis/src/astconv/generics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -649,9 +649,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     LATE_BOUND_LIFETIME_ARGUMENTS,\n                     args.args[0].hir_id(),\n                     multispan,\n-                    |lint| {\n-                        lint.build(msg).emit();\n-                    },\n+                    msg,\n+                    |lint| lint,\n                 );\n             }\n "}, {"sha": "6e373e41b4c026046e0725e702a6edca7e07790e", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -2010,30 +2010,35 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         tcx.check_stability(item.def_id, Some(hir_ref_id), span, None);\n \n         if let Some(variant_def_id) = variant_resolution {\n-            tcx.struct_span_lint_hir(AMBIGUOUS_ASSOCIATED_ITEMS, hir_ref_id, span, |lint| {\n-                let mut err = lint.build(\"ambiguous associated item\");\n-                let mut could_refer_to = |kind: DefKind, def_id, also| {\n-                    let note_msg = format!(\n-                        \"`{}` could{} refer to the {} defined here\",\n-                        assoc_ident,\n-                        also,\n-                        kind.descr(def_id)\n-                    );\n-                    err.span_note(tcx.def_span(def_id), &note_msg);\n-                };\n+            tcx.struct_span_lint_hir(\n+                AMBIGUOUS_ASSOCIATED_ITEMS,\n+                hir_ref_id,\n+                span,\n+                \"ambiguous associated item\",\n+                |lint| {\n+                    let mut could_refer_to = |kind: DefKind, def_id, also| {\n+                        let note_msg = format!(\n+                            \"`{}` could{} refer to the {} defined here\",\n+                            assoc_ident,\n+                            also,\n+                            kind.descr(def_id)\n+                        );\n+                        lint.span_note(tcx.def_span(def_id), &note_msg);\n+                    };\n \n-                could_refer_to(DefKind::Variant, variant_def_id, \"\");\n-                could_refer_to(kind, item.def_id, \" also\");\n+                    could_refer_to(DefKind::Variant, variant_def_id, \"\");\n+                    could_refer_to(kind, item.def_id, \" also\");\n \n-                err.span_suggestion(\n-                    span,\n-                    \"use fully-qualified syntax\",\n-                    format!(\"<{} as {}>::{}\", qself_ty, tcx.item_name(trait_did), assoc_ident),\n-                    Applicability::MachineApplicable,\n-                );\n+                    lint.span_suggestion(\n+                        span,\n+                        \"use fully-qualified syntax\",\n+                        format!(\"<{} as {}>::{}\", qself_ty, tcx.item_name(trait_did), assoc_ident),\n+                        Applicability::MachineApplicable,\n+                    );\n \n-                err.emit();\n-            });\n+                    lint\n+                },\n+            );\n         }\n         Ok((ty, kind, item.def_id))\n     }\n@@ -3079,15 +3084,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     BARE_TRAIT_OBJECTS,\n                     self_ty.hir_id,\n                     self_ty.span,\n+                    msg,\n                     |lint| {\n-                        let mut diag = lint.build(msg);\n-                        diag.multipart_suggestion_verbose(\n+                        lint.multipart_suggestion_verbose(\n                             \"use `dyn`\",\n                             sugg,\n                             Applicability::MachineApplicable,\n                         );\n-                        self.maybe_lint_blanket_trait_impl(&self_ty, &mut diag);\n-                        diag.emit();\n+                        self.maybe_lint_blanket_trait_impl(&self_ty, lint);\n+                        lint\n                     },\n                 );\n             }"}, {"sha": "01badc133c918cb1a019d26a1325eb99ccee1c0c", "filename": "compiler/rustc_hir_analysis/src/check/cast.rs", "status": "modified", "additions": 41, "deletions": 36, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcast.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -33,7 +33,7 @@ use super::FnCtxt;\n use crate::hir::def_id::DefId;\n use crate::type_error_struct;\n use hir::def_id::LOCAL_CRATE;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{struct_span_err, Applicability, DelayDm, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_infer::traits::{Obligation, ObligationCause, ObligationCauseCode};\n use rustc_middle::mir::Mutability;\n@@ -754,19 +754,25 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         } else {\n             (\"\", lint::builtin::TRIVIAL_CASTS)\n         };\n-        fcx.tcx.struct_span_lint_hir(lint, self.expr.hir_id, self.span, |err| {\n-            err.build(&format!(\n-                \"trivial {}cast: `{}` as `{}`\",\n-                adjective,\n-                fcx.ty_to_string(t_expr),\n-                fcx.ty_to_string(t_cast)\n-            ))\n-            .help(&format!(\n-                \"cast can be replaced by coercion; this might \\\n-                                   require {type_asc_or}a temporary variable\"\n-            ))\n-            .emit();\n-        });\n+        fcx.tcx.struct_span_lint_hir(\n+            lint,\n+            self.expr.hir_id,\n+            self.span,\n+            DelayDm(|| {\n+                format!(\n+                    \"trivial {}cast: `{}` as `{}`\",\n+                    adjective,\n+                    fcx.ty_to_string(t_expr),\n+                    fcx.ty_to_string(t_cast)\n+                )\n+            }),\n+            |lint| {\n+                lint.help(format!(\n+                    \"cast can be replaced by coercion; this might \\\n+                     require {type_asc_or}a temporary variable\"\n+                ))\n+            },\n+        );\n     }\n \n     #[instrument(skip(fcx), level = \"debug\")]\n@@ -1074,12 +1080,12 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 lint::builtin::CENUM_IMPL_DROP_CAST,\n                 self.expr.hir_id,\n                 self.span,\n-                |err| {\n-                    err.build(&format!(\n-                        \"cannot cast enum `{}` into integer `{}` because it implements `Drop`\",\n-                        self.expr_ty, self.cast_ty\n-                    ))\n-                    .emit();\n+                DelayDm(|| format!(\n+                    \"cannot cast enum `{}` into integer `{}` because it implements `Drop`\",\n+                    self.expr_ty, self.cast_ty\n+                )),\n+                |lint| {\n+                    lint\n                 },\n             );\n         }\n@@ -1090,12 +1096,11 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n             lint::builtin::LOSSY_PROVENANCE_CASTS,\n             self.expr.hir_id,\n             self.span,\n-            |err| {\n-                let mut err = err.build(&format!(\n+            DelayDm(|| format!(\n                     \"under strict provenance it is considered bad style to cast pointer `{}` to integer `{}`\",\n                     self.expr_ty, self.cast_ty\n-                ));\n-\n+                )),\n+            |lint| {\n                 let msg = \"use `.addr()` to obtain the address of a pointer\";\n \n                 let expr_prec = self.expr.precedence().order();\n@@ -1114,22 +1119,22 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                         (cast_span, format!(\").addr(){scalar_cast}\")),\n                     ];\n \n-                    err.multipart_suggestion(msg, suggestions, Applicability::MaybeIncorrect);\n+                    lint.multipart_suggestion(msg, suggestions, Applicability::MaybeIncorrect);\n                 } else {\n-                    err.span_suggestion(\n+                    lint.span_suggestion(\n                         cast_span,\n                         msg,\n                         format!(\".addr(){scalar_cast}\"),\n                         Applicability::MaybeIncorrect,\n                     );\n                 }\n \n-                err.help(\n+                lint.help(\n                     \"if you can't comply with strict provenance and need to expose the pointer \\\n                     provenance you can use `.expose_addr()` instead\"\n                 );\n \n-                err.emit();\n+                lint\n             },\n         );\n     }\n@@ -1139,24 +1144,24 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n             lint::builtin::FUZZY_PROVENANCE_CASTS,\n             self.expr.hir_id,\n             self.span,\n-            |err| {\n-                let mut err = err.build(&format!(\n-                    \"strict provenance disallows casting integer `{}` to pointer `{}`\",\n-                    self.expr_ty, self.cast_ty\n-                ));\n+            DelayDm(|| format!(\n+                \"strict provenance disallows casting integer `{}` to pointer `{}`\",\n+                self.expr_ty, self.cast_ty\n+            )),\n+            |lint| {\n                 let msg = \"use `.with_addr()` to adjust a valid pointer in the same allocation, to this address\";\n                 let suggestions = vec![\n                     (self.expr_span.shrink_to_lo(), String::from(\"(...).with_addr(\")),\n                     (self.expr_span.shrink_to_hi().to(self.cast_span), String::from(\")\")),\n                 ];\n \n-                err.multipart_suggestion(msg, suggestions, Applicability::MaybeIncorrect);\n-                err.help(\n+                lint.multipart_suggestion(msg, suggestions, Applicability::MaybeIncorrect);\n+                lint.help(\n                     \"if you can't comply with strict provenance and don't have a pointer with \\\n                     the correct provenance you can use `std::ptr::from_exposed_addr()` instead\"\n                  );\n \n-                err.emit();\n+                lint\n             },\n         );\n     }"}, {"sha": "824144aeac004917293dc7e166931f36fb07e7ef", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -48,9 +48,13 @@ pub(super) fn check_abi(tcx: TyCtxt<'_>, hir_id: hir::HirId, span: Span, abi: Ab\n             .emit();\n         }\n         None => {\n-            tcx.struct_span_lint_hir(UNSUPPORTED_CALLING_CONVENTIONS, hir_id, span, |lint| {\n-                lint.build(\"use of calling convention not supported on this target\").emit();\n-            });\n+            tcx.struct_span_lint_hir(\n+                UNSUPPORTED_CALLING_CONVENTIONS,\n+                hir_id,\n+                span,\n+                \"use of calling convention not supported on this target\",\n+                |lint| lint,\n+            );\n         }\n     }\n \n@@ -510,10 +514,10 @@ fn check_static_inhabited<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) {\n             UNINHABITED_STATIC,\n             tcx.hir().local_def_id_to_hir_id(def_id),\n             span,\n+            \"static of uninhabited type\",\n             |lint| {\n-                lint.build(\"static of uninhabited type\")\n+                lint\n                 .note(\"uninhabited statics cannot be initialized, and any access would be an immediate error\")\n-                .emit();\n             },\n         );\n     }\n@@ -1437,17 +1441,17 @@ pub(super) fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, adt: ty::AdtD\n                 REPR_TRANSPARENT_EXTERNAL_PRIVATE_FIELDS,\n                 tcx.hir().local_def_id_to_hir_id(adt.did().expect_local()),\n                 span,\n+                \"zero-sized fields in `repr(transparent)` cannot contain external non-exhaustive types\",\n                 |lint| {\n                     let note = if non_exhaustive {\n                         \"is marked with `#[non_exhaustive]`\"\n                     } else {\n                         \"contains private fields\"\n                     };\n                     let field_ty = tcx.def_path_str_with_substs(def_id, substs);\n-                    lint.build(\"zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\")\n+                    lint\n                         .note(format!(\"this {descr} contains `{field_ty}`, which {note}, \\\n                             and makes it not a breaking change to become non-zero-sized in the future.\"))\n-                        .emit();\n                 },\n             )\n         }"}, {"sha": "4bd5e9f6ab5797717435c00382acd4e8684c38bf", "filename": "compiler/rustc_hir_analysis/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -58,17 +58,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 debug!(\"warn_if_unreachable: id={:?} span={:?} kind={}\", id, span, kind);\n \n-                self.tcx().struct_span_lint_hir(lint::builtin::UNREACHABLE_CODE, id, span, |lint| {\n-                    let msg = format!(\"unreachable {}\", kind);\n-                    lint.build(&msg)\n-                        .span_label(span, &msg)\n-                        .span_label(\n+                let msg = format!(\"unreachable {}\", kind);\n+                self.tcx().struct_span_lint_hir(\n+                    lint::builtin::UNREACHABLE_CODE,\n+                    id,\n+                    span,\n+                    &msg,\n+                    |lint| {\n+                        lint.span_label(span, &msg).span_label(\n                             orig_span,\n                             custom_note\n                                 .unwrap_or(\"any code following this expression is unreachable\"),\n                         )\n-                        .emit();\n-                })\n+                    },\n+                )\n             }\n         }\n     }"}, {"sha": "898419b5b237450ec2b62f9bc95001bbf6dbfaeb", "filename": "compiler/rustc_hir_analysis/src/check/generator_interior.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -6,7 +6,7 @@\n use self::drop_ranges::DropRanges;\n use super::FnCtxt;\n use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n-use rustc_errors::pluralize;\n+use rustc_errors::{pluralize, DelayDm};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -610,33 +610,33 @@ fn check_must_not_suspend_def(\n             rustc_session::lint::builtin::MUST_NOT_SUSPEND,\n             hir_id,\n             data.source_span,\n-            |lint| {\n-                let msg = format!(\n+            DelayDm(|| {\n+                format!(\n                     \"{}`{}`{} held across a suspend point, but should not be\",\n                     data.descr_pre,\n                     tcx.def_path_str(def_id),\n                     data.descr_post,\n-                );\n-                let mut err = lint.build(&msg);\n-\n+                )\n+            }),\n+            |lint| {\n                 // add span pointing to the offending yield/await\n-                err.span_label(data.yield_span, \"the value is held across this suspend point\");\n+                lint.span_label(data.yield_span, \"the value is held across this suspend point\");\n \n                 // Add optional reason note\n                 if let Some(note) = attr.value_str() {\n                     // FIXME(guswynn): consider formatting this better\n-                    err.span_note(data.source_span, note.as_str());\n+                    lint.span_note(data.source_span, note.as_str());\n                 }\n \n                 // Add some quick suggestions on what to do\n                 // FIXME: can `drop` work as a suggestion here as well?\n-                err.span_help(\n+                lint.span_help(\n                     data.source_span,\n                     \"consider using a block (`{ ... }`) \\\n                     to shrink the value's scope, ending before the suspend point\",\n                 );\n \n-                err.emit();\n+                lint\n             },\n         );\n "}, {"sha": "c604c8af8d25d6aff1f664f9637735484083e622", "filename": "compiler/rustc_hir_analysis/src/check/intrinsicck.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -328,17 +328,16 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n                     lint::builtin::ASM_SUB_REGISTER,\n                     expr.hir_id,\n                     spans,\n+                    \"formatting may not be suitable for sub-register argument\",\n                     |lint| {\n-                        let msg = \"formatting may not be suitable for sub-register argument\";\n-                        let mut err = lint.build(msg);\n-                        err.span_label(expr.span, \"for this argument\");\n-                        err.help(&format!(\n+                        lint.span_label(expr.span, \"for this argument\");\n+                        lint.help(&format!(\n                             \"use `{{{idx}:{suggested_modifier}}}` to have the register formatted as `{suggested_result}`\",\n                         ));\n-                        err.help(&format!(\n+                        lint.help(&format!(\n                             \"or use `{{{idx}:{default_modifier}}}` to keep the default formatting of `{default_result}`\",\n                         ));\n-                        err.emit();\n+                        lint\n                     },\n                 );\n             }"}, {"sha": "ca4cdf5a0d01c9b010216e0936f8d33f1ae10303", "filename": "compiler/rustc_hir_analysis/src/check/method/prelude2021.rs", "status": "modified", "additions": 55, "deletions": 57, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -82,14 +82,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 prelude_or_array_lint,\n                 self_expr.hir_id,\n                 self_expr.span,\n+                format!(\"trait method `{}` will become ambiguous in Rust 2021\", segment.ident.name),\n                 |lint| {\n                     let sp = self_expr.span;\n \n-                    let mut lint = lint.build(&format!(\n-                        \"trait method `{}` will become ambiguous in Rust 2021\",\n-                        segment.ident.name\n-                    ));\n-\n                     let derefs = \"*\".repeat(pick.autoderefs);\n \n                     let autoref = match pick.autoref_or_ptr_adjustment {\n@@ -133,7 +129,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         );\n                     }\n \n-                    lint.emit();\n+                    lint\n                 },\n             );\n         } else {\n@@ -143,6 +139,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 prelude_or_array_lint,\n                 call_expr.hir_id,\n                 call_expr.span,\n+                format!(\"trait method `{}` will become ambiguous in Rust 2021\", segment.ident.name),\n                 |lint| {\n                     let sp = call_expr.span;\n                     let trait_name = self.trait_path_or_bare_name(\n@@ -151,11 +148,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         pick.item.container_id(self.tcx),\n                     );\n \n-                    let mut lint = lint.build(&format!(\n-                        \"trait method `{}` will become ambiguous in Rust 2021\",\n-                        segment.ident.name\n-                    ));\n-\n                     let (self_adjusted, precise) = self.adjust_expr(pick, self_expr, sp);\n                     if precise {\n                         let args = args\n@@ -202,7 +194,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         );\n                     }\n \n-                    lint.emit();\n+                    lint\n                 },\n             );\n         }\n@@ -257,15 +249,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return;\n         }\n \n-        self.tcx.struct_span_lint_hir(RUST_2021_PRELUDE_COLLISIONS, expr_id, span, |lint| {\n-            // \"type\" refers to either a type or, more likely, a trait from which\n-            // the associated function or method is from.\n-            let container_id = pick.item.container_id(self.tcx);\n-            let trait_path = self.trait_path_or_bare_name(span, expr_id, container_id);\n-            let trait_generics = self.tcx.generics_of(container_id);\n-\n-            let trait_name =\n-                if trait_generics.params.len() <= trait_generics.has_self as usize {\n+        self.tcx.struct_span_lint_hir(\n+            RUST_2021_PRELUDE_COLLISIONS,\n+            expr_id,\n+            span,\n+            format!(\n+                \"trait-associated function `{}` will become ambiguous in Rust 2021\",\n+                method_name.name\n+            ),\n+            |lint| {\n+                // \"type\" refers to either a type or, more likely, a trait from which\n+                // the associated function or method is from.\n+                let container_id = pick.item.container_id(self.tcx);\n+                let trait_path = self.trait_path_or_bare_name(span, expr_id, container_id);\n+                let trait_generics = self.tcx.generics_of(container_id);\n+\n+                let trait_name = if trait_generics.params.len() <= trait_generics.has_self as usize\n+                {\n                     trait_path\n                 } else {\n                     let counts = trait_generics.own_counts();\n@@ -282,44 +282,42 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     )\n                 };\n \n-            let mut lint = lint.build(&format!(\n-                \"trait-associated function `{}` will become ambiguous in Rust 2021\",\n-                method_name.name\n-            ));\n-\n-            let mut self_ty_name = self_ty_span\n-                .find_ancestor_inside(span)\n-                .and_then(|span| self.sess().source_map().span_to_snippet(span).ok())\n-                .unwrap_or_else(|| self_ty.to_string());\n-\n-            // Get the number of generics the self type has (if an Adt) unless we can determine that\n-            // the user has written the self type with generics already which we (naively) do by looking\n-            // for a \"<\" in `self_ty_name`.\n-            if !self_ty_name.contains('<') {\n-                if let Adt(def, _) = self_ty.kind() {\n-                    let generics = self.tcx.generics_of(def.did());\n-                    if !generics.params.is_empty() {\n-                        let counts = generics.own_counts();\n-                        self_ty_name += &format!(\n-                            \"<{}>\",\n-                            std::iter::repeat(\"'_\")\n-                                .take(counts.lifetimes)\n-                                .chain(std::iter::repeat(\"_\").take(counts.types + counts.consts))\n-                                .collect::<Vec<_>>()\n-                                .join(\", \")\n-                        );\n+                let mut self_ty_name = self_ty_span\n+                    .find_ancestor_inside(span)\n+                    .and_then(|span| self.sess().source_map().span_to_snippet(span).ok())\n+                    .unwrap_or_else(|| self_ty.to_string());\n+\n+                // Get the number of generics the self type has (if an Adt) unless we can determine that\n+                // the user has written the self type with generics already which we (naively) do by looking\n+                // for a \"<\" in `self_ty_name`.\n+                if !self_ty_name.contains('<') {\n+                    if let Adt(def, _) = self_ty.kind() {\n+                        let generics = self.tcx.generics_of(def.did());\n+                        if !generics.params.is_empty() {\n+                            let counts = generics.own_counts();\n+                            self_ty_name += &format!(\n+                                \"<{}>\",\n+                                std::iter::repeat(\"'_\")\n+                                    .take(counts.lifetimes)\n+                                    .chain(\n+                                        std::iter::repeat(\"_\").take(counts.types + counts.consts)\n+                                    )\n+                                    .collect::<Vec<_>>()\n+                                    .join(\", \")\n+                            );\n+                        }\n                     }\n                 }\n-            }\n-            lint.span_suggestion(\n-                span,\n-                \"disambiguate the associated function\",\n-                format!(\"<{} as {}>::{}\", self_ty_name, trait_name, method_name.name,),\n-                Applicability::MachineApplicable,\n-            );\n-\n-            lint.emit();\n-        });\n+                lint.span_suggestion(\n+                    span,\n+                    \"disambiguate the associated function\",\n+                    format!(\"<{} as {}>::{}\", self_ty_name, trait_name, method_name.name,),\n+                    Applicability::MachineApplicable,\n+                );\n+\n+                lint\n+            },\n+        );\n     }\n \n     fn trait_path_or_bare_name("}, {"sha": "a761a93dea4b6882b9987218631c9f7f418a9f47", "filename": "compiler/rustc_hir_analysis/src/check/method/probe.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -409,9 +409,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         lint::builtin::TYVAR_BEHIND_RAW_POINTER,\n                         scope_expr_id,\n                         span,\n-                        |lint| {\n-                            lint.build(\"type annotations needed\").emit();\n-                        },\n+                        \"type annotations needed\",\n+                        |lint| lint,\n                     );\n                 }\n             } else {\n@@ -1358,32 +1357,32 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         stable_pick: &Pick<'_>,\n         unstable_candidates: &[(Candidate<'tcx>, Symbol)],\n     ) {\n+        let def_kind = stable_pick.item.kind.as_def_kind();\n         self.tcx.struct_span_lint_hir(\n             lint::builtin::UNSTABLE_NAME_COLLISIONS,\n             self.scope_expr_id,\n             self.span,\n+            format!(\n+                \"{} {} with this name may be added to the standard library in the future\",\n+                def_kind.article(),\n+                def_kind.descr(stable_pick.item.def_id),\n+            ),\n             |lint| {\n-                let def_kind = stable_pick.item.kind.as_def_kind();\n-                let mut diag = lint.build(&format!(\n-                    \"{} {} with this name may be added to the standard library in the future\",\n-                    def_kind.article(),\n-                    def_kind.descr(stable_pick.item.def_id),\n-                ));\n                 match (stable_pick.item.kind, stable_pick.item.container) {\n                     (ty::AssocKind::Fn, _) => {\n                         // FIXME: This should be a `span_suggestion` instead of `help`\n                         // However `self.span` only\n                         // highlights the method name, so we can't use it. Also consider reusing\n                         // the code from `report_method_error()`.\n-                        diag.help(&format!(\n+                        lint.help(&format!(\n                             \"call with fully qualified syntax `{}(...)` to keep using the current \\\n                              method\",\n                             self.tcx.def_path_str(stable_pick.item.def_id),\n                         ));\n                     }\n                     (ty::AssocKind::Const, ty::AssocItemContainer::TraitContainer) => {\n                         let def_id = stable_pick.item.container_id(self.tcx);\n-                        diag.span_suggestion(\n+                        lint.span_suggestion(\n                             self.span,\n                             \"use the fully qualified path to the associated const\",\n                             format!(\n@@ -1399,15 +1398,15 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 }\n                 if self.tcx.sess.is_nightly_build() {\n                     for (candidate, feature) in unstable_candidates {\n-                        diag.help(&format!(\n+                        lint.help(&format!(\n                             \"add `#![feature({})]` to the crate attributes to enable `{}`\",\n                             feature,\n                             self.tcx.def_path_str(candidate.item.def_id),\n                         ));\n                     }\n                 }\n \n-                diag.emit();\n+                lint\n             },\n         );\n     }"}, {"sha": "178326cfdc4fb96e79b030a69b94eb7696047441", "filename": "compiler/rustc_hir_analysis/src/check/pat.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fpat.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -1790,18 +1790,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             &unmentioned_fields.iter().map(|(_, i)| i).collect::<Vec<_>>(),\n         );\n \n-        self.tcx.struct_span_lint_hir(NON_EXHAUSTIVE_OMITTED_PATTERNS, pat.hir_id, pat.span, |build| {\n-        let mut lint = build.build(\"some fields are not explicitly listed\");\n+        self.tcx.struct_span_lint_hir(NON_EXHAUSTIVE_OMITTED_PATTERNS, pat.hir_id, pat.span, \"some fields are not explicitly listed\", |lint| {\n         lint.span_label(pat.span, format!(\"field{} {} not listed\", rustc_errors::pluralize!(unmentioned_fields.len()), joined_patterns));\n-\n         lint.help(\n             \"ensure that all fields are mentioned explicitly by adding the suggested fields\",\n         );\n         lint.note(&format!(\n             \"the pattern is of type `{}` and the `non_exhaustive_omitted_patterns` attribute was found\",\n             ty,\n         ));\n-        lint.emit();\n+\n+        lint\n     });\n     }\n "}, {"sha": "4f4956416917331b61a62f8eddce02459bc4eaa6", "filename": "compiler/rustc_hir_analysis/src/check/upvar.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fupvar.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -749,24 +749,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 lint::builtin::RUST_2021_INCOMPATIBLE_CLOSURE_CAPTURES,\n                 closure_hir_id,\n                 closure_head_span,\n+                reasons.migration_message(),\n                 |lint| {\n-                    let mut diagnostics_builder = lint.build(\n-                        &reasons.migration_message(),\n-                    );\n                     for NeededMigration { var_hir_id, diagnostics_info } in &need_migrations {\n                         // Labels all the usage of the captured variable and why they are responsible\n                         // for migration being needed\n                         for lint_note in diagnostics_info.iter() {\n                             match &lint_note.captures_info {\n                                 UpvarMigrationInfo::CapturingPrecise { source_expr: Some(capture_expr_id), var_name: captured_name } => {\n                                     let cause_span = self.tcx.hir().span(*capture_expr_id);\n-                                    diagnostics_builder.span_label(cause_span, format!(\"in Rust 2018, this closure captures all of `{}`, but in Rust 2021, it will only capture `{}`\",\n+                                    lint.span_label(cause_span, format!(\"in Rust 2018, this closure captures all of `{}`, but in Rust 2021, it will only capture `{}`\",\n                                         self.tcx.hir().name(*var_hir_id),\n                                         captured_name,\n                                     ));\n                                 }\n                                 UpvarMigrationInfo::CapturingNothing { use_span } => {\n-                                    diagnostics_builder.span_label(*use_span, format!(\"in Rust 2018, this causes the closure to capture `{}`, but in Rust 2021, it has no effect\",\n+                                    lint.span_label(*use_span, format!(\"in Rust 2018, this causes the closure to capture `{}`, but in Rust 2021, it has no effect\",\n                                         self.tcx.hir().name(*var_hir_id),\n                                     ));\n                                 }\n@@ -781,13 +779,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                                 match &lint_note.captures_info {\n                                     UpvarMigrationInfo::CapturingPrecise { var_name: captured_name, .. } => {\n-                                        diagnostics_builder.span_label(drop_location_span, format!(\"in Rust 2018, `{}` is dropped here, but in Rust 2021, only `{}` will be dropped here as part of the closure\",\n+                                        lint.span_label(drop_location_span, format!(\"in Rust 2018, `{}` is dropped here, but in Rust 2021, only `{}` will be dropped here as part of the closure\",\n                                             self.tcx.hir().name(*var_hir_id),\n                                             captured_name,\n                                         ));\n                                     }\n                                     UpvarMigrationInfo::CapturingNothing { use_span: _ } => {\n-                                        diagnostics_builder.span_label(drop_location_span, format!(\"in Rust 2018, `{v}` is dropped here along with the closure, but in Rust 2021 `{v}` is not part of the closure\",\n+                                        lint.span_label(drop_location_span, format!(\"in Rust 2018, `{v}` is dropped here along with the closure, but in Rust 2021 `{v}` is not part of the closure\",\n                                             v = self.tcx.hir().name(*var_hir_id),\n                                         ));\n                                     }\n@@ -800,7 +798,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 match &lint_note.captures_info {\n                                     UpvarMigrationInfo::CapturingPrecise { var_name: captured_name, .. } => {\n                                         let var_name = self.tcx.hir().name(*var_hir_id);\n-                                        diagnostics_builder.span_label(closure_head_span, format!(\"\\\n+                                        lint.span_label(closure_head_span, format!(\"\\\n                                         in Rust 2018, this closure implements {missing_trait} \\\n                                         as `{var_name}` implements {missing_trait}, but in Rust 2021, \\\n                                         this closure will no longer implement {missing_trait} \\\n@@ -814,7 +812,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                    diagnostics_builder.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\");\n+                    lint.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\");\n \n                     let diagnostic_msg = format!(\n                         \"add a dummy let to cause {} to be fully captured\",\n@@ -857,7 +855,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             // We take the indentation from the next non-empty line.\n                             let line2 = lines.find(|line| !line.is_empty()).unwrap_or_default();\n                             let indent = line2.split_once(|c: char| !c.is_whitespace()).unwrap_or_default().0;\n-                            diagnostics_builder.span_suggestion(\n+                            lint.span_suggestion(\n                                 closure_body_span.with_lo(closure_body_span.lo() + BytePos::from_usize(line1.len())).shrink_to_lo(),\n                                 &diagnostic_msg,\n                                 format!(\"\\n{indent}{migration_string};\"),\n@@ -868,7 +866,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             // braces, but with more than just the opening\n                             // brace on the first line. We put the `let`\n                             // directly after the `{`.\n-                            diagnostics_builder.span_suggestion(\n+                            lint.span_suggestion(\n                                 closure_body_span.with_lo(closure_body_span.lo() + BytePos(1)).shrink_to_lo(),\n                                 &diagnostic_msg,\n                                 format!(\" {migration_string};\"),\n@@ -877,7 +875,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         } else {\n                             // This is a closure without braces around the body.\n                             // We add braces to add the `let` before the body.\n-                            diagnostics_builder.multipart_suggestion(\n+                            lint.multipart_suggestion(\n                                 &diagnostic_msg,\n                                 vec![\n                                     (closure_body_span.shrink_to_lo(), format!(\"{{ {migration_string}; \")),\n@@ -887,15 +885,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             );\n                         }\n                     } else {\n-                        diagnostics_builder.span_suggestion(\n+                        lint.span_suggestion(\n                             closure_span,\n                             &diagnostic_msg,\n                             migration_string,\n                             Applicability::HasPlaceholders\n                         );\n                     }\n \n-                    diagnostics_builder.emit();\n+                    lint\n                 },\n             );\n         }"}, {"sha": "922833f85806cb30fae864152be3d04e0d02e00e", "filename": "compiler/rustc_hir_analysis/src/check_unused.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck_unused.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -29,14 +29,18 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n             continue;\n         }\n         let hir::ItemKind::Use(path, _) = item.kind else { unreachable!() };\n-        tcx.struct_span_lint_hir(lint::builtin::UNUSED_IMPORTS, item.hir_id(), path.span, |lint| {\n-            let msg = if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(path.span) {\n-                format!(\"unused import: `{}`\", snippet)\n-            } else {\n-                \"unused import\".to_owned()\n-            };\n-            lint.build(&msg).emit();\n-        });\n+        let msg = if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(path.span) {\n+            format!(\"unused import: `{}`\", snippet)\n+        } else {\n+            \"unused import\".to_owned()\n+        };\n+        tcx.struct_span_lint_hir(\n+            lint::builtin::UNUSED_IMPORTS,\n+            item.hir_id(),\n+            path.span,\n+            msg,\n+            |lint| lint,\n+        );\n     }\n \n     unused_crates_lint(tcx);"}, {"sha": "1307f74f2107196135377179bc27ddde2130440f", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -2,7 +2,7 @@\n //! crate or pertains to a type defined in this crate.\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::struct_span_err;\n+use rustc_errors::{struct_span_err, DelayDm};\n use rustc_errors::{Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_middle::ty::subst::GenericArgKind;\n@@ -412,30 +412,31 @@ fn lint_auto_trait_impl<'tcx>(\n         lint::builtin::SUSPICIOUS_AUTO_TRAIT_IMPLS,\n         tcx.hir().local_def_id_to_hir_id(impl_def_id),\n         tcx.def_span(impl_def_id),\n-        |err| {\n-            let item_span = tcx.def_span(self_type_did);\n-            let self_descr = tcx.def_kind(self_type_did).descr(self_type_did);\n-            let mut err = err.build(&format!(\n+        DelayDm(|| {\n+            format!(\n                 \"cross-crate traits with a default impl, like `{}`, \\\n                          should not be specialized\",\n                 tcx.def_path_str(trait_ref.def_id),\n-            ));\n+            )\n+        }),\n+        |lint| {\n+            let item_span = tcx.def_span(self_type_did);\n+            let self_descr = tcx.def_kind(self_type_did).descr(self_type_did);\n             match arg {\n                 ty::util::NotUniqueParam::DuplicateParam(arg) => {\n-                    err.note(&format!(\"`{}` is mentioned multiple times\", arg));\n+                    lint.note(&format!(\"`{}` is mentioned multiple times\", arg));\n                 }\n                 ty::util::NotUniqueParam::NotParam(arg) => {\n-                    err.note(&format!(\"`{}` is not a generic parameter\", arg));\n+                    lint.note(&format!(\"`{}` is not a generic parameter\", arg));\n                 }\n             }\n-            err.span_note(\n+            lint.span_note(\n                 item_span,\n                 &format!(\n                     \"try using the same sequence of generic parameters as the {} definition\",\n                     self_descr,\n                 ),\n-            );\n-            err.emit();\n+            )\n         },\n     );\n }"}, {"sha": "ab4b861b6cb6081299a2dff365f08c3b120ac205", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -2067,11 +2067,8 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n                     lint::builtin::INLINE_NO_SANITIZE,\n                     hir_id,\n                     no_sanitize_span,\n-                    |lint| {\n-                        lint.build(\"`no_sanitize` will have no effect after inlining\")\n-                            .span_note(inline_span, \"inlining requested here\")\n-                            .emit();\n-                    },\n+                    \"`no_sanitize` will have no effect after inlining\",\n+                    |lint| lint.span_note(inline_span, \"inlining requested here\"),\n                 )\n             }\n         }"}, {"sha": "7ffacbecf5f021d2cbfb8e3709c13e70f59650b7", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -266,9 +266,8 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                             lint::builtin::INVALID_TYPE_PARAM_DEFAULT,\n                             param.hir_id,\n                             param.span,\n-                            |lint| {\n-                                lint.build(TYPE_DEFAULT_NOT_ALLOWED).emit();\n-                            },\n+                            TYPE_DEFAULT_NOT_ALLOWED,\n+                            |lint| lint,\n                         );\n                     }\n                     Defaults::Deny => {"}, {"sha": "bd6b637f76fcdd88a9526b2cff54c7ada93343df", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -118,37 +118,41 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n                 // to an array or to a slice.\n                 _ => bug!(\"array type coerced to something other than array or slice\"),\n             };\n-            cx.struct_span_lint(ARRAY_INTO_ITER, call.ident.span, |lint| {\n-                let mut diag = lint.build(fluent::lint::array_into_iter);\n-                diag.set_arg(\"target\", target);\n-                diag.span_suggestion(\n-                    call.ident.span,\n-                    fluent::lint::use_iter_suggestion,\n-                    \"iter\",\n-                    Applicability::MachineApplicable,\n-                );\n-                if self.for_expr_span == expr.span {\n+            cx.struct_span_lint(\n+                ARRAY_INTO_ITER,\n+                call.ident.span,\n+                fluent::lint::array_into_iter,\n+                |diag| {\n+                    diag.set_arg(\"target\", target);\n                     diag.span_suggestion(\n-                        receiver_arg.span.shrink_to_hi().to(expr.span.shrink_to_hi()),\n-                        fluent::lint::remove_into_iter_suggestion,\n-                        \"\",\n-                        Applicability::MaybeIncorrect,\n+                        call.ident.span,\n+                        fluent::lint::use_iter_suggestion,\n+                        \"iter\",\n+                        Applicability::MachineApplicable,\n                     );\n-                } else if receiver_ty.is_array() {\n-                    diag.multipart_suggestion(\n-                        fluent::lint::use_explicit_into_iter_suggestion,\n-                        vec![\n-                            (expr.span.shrink_to_lo(), \"IntoIterator::into_iter(\".into()),\n-                            (\n-                                receiver_arg.span.shrink_to_hi().to(expr.span.shrink_to_hi()),\n-                                \")\".into(),\n-                            ),\n-                        ],\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n-                diag.emit();\n-            })\n+                    if self.for_expr_span == expr.span {\n+                        diag.span_suggestion(\n+                            receiver_arg.span.shrink_to_hi().to(expr.span.shrink_to_hi()),\n+                            fluent::lint::remove_into_iter_suggestion,\n+                            \"\",\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    } else if receiver_ty.is_array() {\n+                        diag.multipart_suggestion(\n+                            fluent::lint::use_explicit_into_iter_suggestion,\n+                            vec![\n+                                (expr.span.shrink_to_lo(), \"IntoIterator::into_iter(\".into()),\n+                                (\n+                                    receiver_arg.span.shrink_to_hi().to(expr.span.shrink_to_hi()),\n+                                    \")\".into(),\n+                                ),\n+                            ],\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                    diag\n+                },\n+            )\n         }\n     }\n }"}, {"sha": "f28cfbd8b4c46ada549d67685bc848a72bebc933", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 341, "deletions": 282, "changes": 623, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -33,8 +33,8 @@ use rustc_ast_pretty::pprust::{self, expr_to_string};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{\n-    fluent, Applicability, Diagnostic, DiagnosticMessage, DiagnosticStyledString,\n-    LintDiagnosticBuilder, MultiSpan,\n+    fluent, Applicability, DelayDm, Diagnostic, DiagnosticBuilder, DiagnosticMessage,\n+    DiagnosticStyledString, MultiSpan,\n };\n use rustc_feature::{deprecated_attributes, AttributeGate, BuiltinAttribute, GateIssue, Stability};\n use rustc_hir as hir;\n@@ -103,9 +103,12 @@ impl EarlyLintPass for WhileTrue {\n             && !lit.span.from_expansion()\n         {\n             let condition_span = e.span.with_hi(cond.span.hi());\n-            cx.struct_span_lint(WHILE_TRUE, condition_span, |lint| {\n-                lint.build(fluent::lint::builtin_while_true)\n-                    .span_suggestion_short(\n+            cx.struct_span_lint(\n+                            WHILE_TRUE,\n+                            condition_span,\n+                fluent::lint::builtin_while_true,\n+                            |lint| {\n+                    lint.span_suggestion_short(\n                         condition_span,\n                         fluent::lint::suggestion,\n                         format!(\n@@ -117,8 +120,8 @@ impl EarlyLintPass for WhileTrue {\n                         ),\n                         Applicability::MachineApplicable,\n                     )\n-                    .emit();\n-            })\n+                },\n+            )\n         }\n     }\n }\n@@ -154,9 +157,12 @@ impl BoxPointers {\n         for leaf in ty.walk() {\n             if let GenericArgKind::Type(leaf_ty) = leaf.unpack() {\n                 if leaf_ty.is_box() {\n-                    cx.struct_span_lint(BOX_POINTERS, span, |lint| {\n-                        lint.build(fluent::lint::builtin_box_pointers).set_arg(\"ty\", ty).emit();\n-                    });\n+                    cx.struct_span_lint(\n+                        BOX_POINTERS,\n+                        span,\n+                        fluent::lint::builtin_box_pointers,\n+                        |lint| lint.set_arg(\"ty\", ty),\n+                    );\n                 }\n             }\n         }\n@@ -255,19 +261,21 @@ impl<'tcx> LateLintPass<'tcx> for NonShorthandFieldPatterns {\n                     if cx.tcx.find_field_index(ident, &variant)\n                         == Some(cx.tcx.field_index(fieldpat.hir_id, cx.typeck_results()))\n                     {\n-                        cx.struct_span_lint(NON_SHORTHAND_FIELD_PATTERNS, fieldpat.span, |lint| {\n-                            let suggested_ident =\n-                                format!(\"{}{}\", binding_annot.prefix_str(), ident);\n-                            lint.build(fluent::lint::builtin_non_shorthand_field_patterns)\n-                                .set_arg(\"ident\", ident.clone())\n-                                .span_suggestion(\n+                        cx.struct_span_lint(\n+                            NON_SHORTHAND_FIELD_PATTERNS,\n+                            fieldpat.span,\n+                            fluent::lint::builtin_non_shorthand_field_patterns,\n+                            |lint| {\n+                                let suggested_ident =\n+                                    format!(\"{}{}\", binding_annot.prefix_str(), ident);\n+                                lint.set_arg(\"ident\", ident.clone()).span_suggestion(\n                                     fieldpat.span,\n                                     fluent::lint::suggestion,\n                                     suggested_ident,\n                                     Applicability::MachineApplicable,\n                                 )\n-                                .emit();\n-                        });\n+                            },\n+                        );\n                     }\n                 }\n             }\n@@ -307,14 +315,17 @@ impl UnsafeCode {\n         &self,\n         cx: &EarlyContext<'_>,\n         span: Span,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n+        msg: impl Into<DiagnosticMessage>,\n+        decorate: impl for<'a, 'b> FnOnce(\n+            &'b mut DiagnosticBuilder<'a, ()>,\n+        ) -> &'b mut DiagnosticBuilder<'a, ()>,\n     ) {\n         // This comes from a macro that has `#[allow_internal_unsafe]`.\n         if span.allows_unsafe() {\n             return;\n         }\n \n-        cx.struct_span_lint(UNSAFE_CODE, span, decorate);\n+        cx.struct_span_lint(UNSAFE_CODE, span, msg, decorate);\n     }\n \n     fn report_overridden_symbol_name(\n@@ -323,8 +334,8 @@ impl UnsafeCode {\n         span: Span,\n         msg: DiagnosticMessage,\n     ) {\n-        self.report_unsafe(cx, span, |lint| {\n-            lint.build(msg).note(fluent::lint::builtin_overridden_symbol_name).emit();\n+        self.report_unsafe(cx, span, msg, |lint| {\n+            lint.note(fluent::lint::builtin_overridden_symbol_name)\n         })\n     }\n \n@@ -334,43 +345,42 @@ impl UnsafeCode {\n         span: Span,\n         msg: DiagnosticMessage,\n     ) {\n-        self.report_unsafe(cx, span, |lint| {\n-            lint.build(msg).note(fluent::lint::builtin_overridden_symbol_section).emit();\n+        self.report_unsafe(cx, span, msg, |lint| {\n+            lint.note(fluent::lint::builtin_overridden_symbol_section)\n         })\n     }\n }\n \n impl EarlyLintPass for UnsafeCode {\n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n         if attr.has_name(sym::allow_internal_unsafe) {\n-            self.report_unsafe(cx, attr.span, |lint| {\n-                lint.build(fluent::lint::builtin_allow_internal_unsafe).emit();\n-            });\n+            self.report_unsafe(\n+                cx,\n+                attr.span,\n+                fluent::lint::builtin_allow_internal_unsafe,\n+                |lint| lint,\n+            );\n         }\n     }\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         if let ast::ExprKind::Block(ref blk, _) = e.kind {\n             // Don't warn about generated blocks; that'll just pollute the output.\n             if blk.rules == ast::BlockCheckMode::Unsafe(ast::UserProvided) {\n-                self.report_unsafe(cx, blk.span, |lint| {\n-                    lint.build(fluent::lint::builtin_unsafe_block).emit();\n-                });\n+                self.report_unsafe(cx, blk.span, fluent::lint::builtin_unsafe_block, |lint| lint);\n             }\n         }\n     }\n \n     fn check_item(&mut self, cx: &EarlyContext<'_>, it: &ast::Item) {\n         match it.kind {\n-            ast::ItemKind::Trait(box ast::Trait { unsafety: ast::Unsafe::Yes(_), .. }) => self\n-                .report_unsafe(cx, it.span, |lint| {\n-                    lint.build(fluent::lint::builtin_unsafe_trait).emit();\n-                }),\n+            ast::ItemKind::Trait(box ast::Trait { unsafety: ast::Unsafe::Yes(_), .. }) => {\n+                self.report_unsafe(cx, it.span, fluent::lint::builtin_unsafe_trait, |lint| lint)\n+            }\n \n-            ast::ItemKind::Impl(box ast::Impl { unsafety: ast::Unsafe::Yes(_), .. }) => self\n-                .report_unsafe(cx, it.span, |lint| {\n-                    lint.build(fluent::lint::builtin_unsafe_impl).emit();\n-                }),\n+            ast::ItemKind::Impl(box ast::Impl { unsafety: ast::Unsafe::Yes(_), .. }) => {\n+                self.report_unsafe(cx, it.span, fluent::lint::builtin_unsafe_impl, |lint| lint)\n+            }\n \n             ast::ItemKind::Fn(..) => {\n                 if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {\n@@ -463,9 +473,7 @@ impl EarlyLintPass for UnsafeCode {\n                 FnCtxt::Assoc(_) if body.is_none() => fluent::lint::builtin_decl_unsafe_method,\n                 FnCtxt::Assoc(_) => fluent::lint::builtin_impl_unsafe_method,\n             };\n-            self.report_unsafe(cx, span, |lint| {\n-                lint.build(msg).emit();\n-            });\n+            self.report_unsafe(cx, span, msg, |lint| lint);\n         }\n     }\n }\n@@ -566,12 +574,12 @@ impl MissingDoc {\n         let attrs = cx.tcx.hir().attrs(cx.tcx.hir().local_def_id_to_hir_id(def_id));\n         let has_doc = attrs.iter().any(has_doc);\n         if !has_doc {\n-            cx.struct_span_lint(MISSING_DOCS, cx.tcx.def_span(def_id), |lint| {\n-                lint.build(fluent::lint::builtin_missing_doc)\n-                    .set_arg(\"article\", article)\n-                    .set_arg(\"desc\", desc)\n-                    .emit();\n-            });\n+            cx.struct_span_lint(\n+                MISSING_DOCS,\n+                cx.tcx.def_span(def_id),\n+                fluent::lint::builtin_missing_doc,\n+                |lint| lint.set_arg(\"article\", article).set_arg(\"desc\", desc),\n+            );\n         }\n     }\n }\n@@ -758,9 +766,12 @@ impl<'tcx> LateLintPass<'tcx> for MissingCopyImplementations {\n         )\n         .is_ok()\n         {\n-            cx.struct_span_lint(MISSING_COPY_IMPLEMENTATIONS, item.span, |lint| {\n-                lint.build(fluent::lint::builtin_missing_copy_impl).emit();\n-            })\n+            cx.struct_span_lint(\n+                MISSING_COPY_IMPLEMENTATIONS,\n+                item.span,\n+                fluent::lint::builtin_missing_copy_impl,\n+                |lint| lint,\n+            )\n         }\n     }\n }\n@@ -834,11 +845,12 @@ impl<'tcx> LateLintPass<'tcx> for MissingDebugImplementations {\n         }\n \n         if !self.impling_types.as_ref().unwrap().contains(&item.def_id.def_id) {\n-            cx.struct_span_lint(MISSING_DEBUG_IMPLEMENTATIONS, item.span, |lint| {\n-                lint.build(fluent::lint::builtin_missing_debug_impl)\n-                    .set_arg(\"debug\", cx.tcx.def_path_str(debug))\n-                    .emit();\n-            });\n+            cx.struct_span_lint(\n+                MISSING_DEBUG_IMPLEMENTATIONS,\n+                item.span,\n+                fluent::lint::builtin_missing_debug_impl,\n+                |lint| lint.set_arg(\"debug\", cx.tcx.def_path_str(debug)),\n+            );\n         }\n     }\n }\n@@ -906,24 +918,26 @@ impl EarlyLintPass for AnonymousParameters {\n             for arg in sig.decl.inputs.iter() {\n                 if let ast::PatKind::Ident(_, ident, None) = arg.pat.kind {\n                     if ident.name == kw::Empty {\n-                        cx.struct_span_lint(ANONYMOUS_PARAMETERS, arg.pat.span, |lint| {\n-                            let ty_snip = cx.sess().source_map().span_to_snippet(arg.ty.span);\n-\n-                            let (ty_snip, appl) = if let Ok(ref snip) = ty_snip {\n-                                (snip.as_str(), Applicability::MachineApplicable)\n-                            } else {\n-                                (\"<type>\", Applicability::HasPlaceholders)\n-                            };\n+                        let ty_snip = cx.sess().source_map().span_to_snippet(arg.ty.span);\n \n-                            lint.build(fluent::lint::builtin_anonymous_params)\n-                                .span_suggestion(\n+                        let (ty_snip, appl) = if let Ok(ref snip) = ty_snip {\n+                            (snip.as_str(), Applicability::MachineApplicable)\n+                        } else {\n+                            (\"<type>\", Applicability::HasPlaceholders)\n+                        };\n+                        cx.struct_span_lint(\n+                            ANONYMOUS_PARAMETERS,\n+                            arg.pat.span,\n+                            fluent::lint::builtin_anonymous_params,\n+                            |lint| {\n+                                lint.span_suggestion(\n                                     arg.pat.span,\n                                     fluent::lint::suggestion,\n                                     format!(\"_: {}\", ty_snip),\n                                     appl,\n                                 )\n-                                .emit();\n-                        })\n+                            },\n+                        )\n                     }\n                 }\n             }\n@@ -958,38 +972,44 @@ impl EarlyLintPass for DeprecatedAttr {\n                     _,\n                 ) = gate\n                 {\n-                    cx.struct_span_lint(DEPRECATED, attr.span, |lint| {\n-                        // FIXME(davidtwco) translatable deprecated attr\n-                        lint.build(fluent::lint::builtin_deprecated_attr_link)\n-                            .set_arg(\"name\", name)\n-                            .set_arg(\"reason\", reason)\n-                            .set_arg(\"link\", link)\n-                            .span_suggestion_short(\n-                                attr.span,\n-                                suggestion.map(|s| s.into()).unwrap_or(\n-                                    fluent::lint::builtin_deprecated_attr_default_suggestion,\n-                                ),\n-                                \"\",\n-                                Applicability::MachineApplicable,\n-                            )\n-                            .emit();\n-                    });\n+                    // FIXME(davidtwco) translatable deprecated attr\n+                    cx.struct_span_lint(\n+                        DEPRECATED,\n+                        attr.span,\n+                        fluent::lint::builtin_deprecated_attr_link,\n+                        |lint| {\n+                            lint.set_arg(\"name\", name)\n+                                .set_arg(\"reason\", reason)\n+                                .set_arg(\"link\", link)\n+                                .span_suggestion_short(\n+                                    attr.span,\n+                                    suggestion.map(|s| s.into()).unwrap_or(\n+                                        fluent::lint::builtin_deprecated_attr_default_suggestion,\n+                                    ),\n+                                    \"\",\n+                                    Applicability::MachineApplicable,\n+                                )\n+                        },\n+                    );\n                 }\n                 return;\n             }\n         }\n         if attr.has_name(sym::no_start) || attr.has_name(sym::crate_id) {\n-            cx.struct_span_lint(DEPRECATED, attr.span, |lint| {\n-                lint.build(fluent::lint::builtin_deprecated_attr_used)\n-                    .set_arg(\"name\", pprust::path_to_string(&attr.get_normal_item().path))\n-                    .span_suggestion_short(\n-                        attr.span,\n-                        fluent::lint::builtin_deprecated_attr_default_suggestion,\n-                        \"\",\n-                        Applicability::MachineApplicable,\n-                    )\n-                    .emit();\n-            });\n+            cx.struct_span_lint(\n+                DEPRECATED,\n+                attr.span,\n+                fluent::lint::builtin_deprecated_attr_used,\n+                |lint| {\n+                    lint.set_arg(\"name\", pprust::path_to_string(&attr.get_normal_item().path))\n+                        .span_suggestion_short(\n+                            attr.span,\n+                            fluent::lint::builtin_deprecated_attr_default_suggestion,\n+                            \"\",\n+                            Applicability::MachineApplicable,\n+                        )\n+                },\n+            );\n         }\n     }\n }\n@@ -1016,20 +1036,21 @@ fn warn_if_doc(cx: &EarlyContext<'_>, node_span: Span, node_kind: &str, attrs: &\n         let span = sugared_span.take().unwrap_or(attr.span);\n \n         if is_doc_comment || attr.has_name(sym::doc) {\n-            cx.struct_span_lint(UNUSED_DOC_COMMENTS, span, |lint| {\n-                let mut err = lint.build(fluent::lint::builtin_unused_doc_comment);\n-                err.set_arg(\"kind\", node_kind);\n-                err.span_label(node_span, fluent::lint::label);\n-                match attr.kind {\n-                    AttrKind::DocComment(CommentKind::Line, _) | AttrKind::Normal(..) => {\n-                        err.help(fluent::lint::plain_help);\n-                    }\n-                    AttrKind::DocComment(CommentKind::Block, _) => {\n-                        err.help(fluent::lint::block_help);\n-                    }\n-                }\n-                err.emit();\n-            });\n+            cx.struct_span_lint(\n+                UNUSED_DOC_COMMENTS,\n+                span,\n+                fluent::lint::builtin_unused_doc_comment,\n+                |lint| {\n+                    lint.set_arg(\"kind\", node_kind).span_label(node_span, fluent::lint::label).help(\n+                        match attr.kind {\n+                            AttrKind::DocComment(CommentKind::Line, _) | AttrKind::Normal(..) => {\n+                                fluent::lint::plain_help\n+                            }\n+                            AttrKind::DocComment(CommentKind::Block, _) => fluent::lint::block_help,\n+                        },\n+                    )\n+                },\n+            );\n         }\n     }\n }\n@@ -1143,18 +1164,21 @@ impl<'tcx> LateLintPass<'tcx> for InvalidNoMangleItems {\n                 match param.kind {\n                     GenericParamKind::Lifetime { .. } => {}\n                     GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => {\n-                        cx.struct_span_lint(NO_MANGLE_GENERIC_ITEMS, span, |lint| {\n-                            lint.build(fluent::lint::builtin_no_mangle_generic)\n-                                .span_suggestion_short(\n+                        cx.struct_span_lint(\n+                            NO_MANGLE_GENERIC_ITEMS,\n+                            span,\n+                            fluent::lint::builtin_no_mangle_generic,\n+                            |lint| {\n+                                lint.span_suggestion_short(\n                                     no_mangle_attr.span,\n                                     fluent::lint::suggestion,\n                                     \"\",\n                                     // Use of `#[no_mangle]` suggests FFI intent; correct\n                                     // fix may be to monomorphize source by hand\n                                     Applicability::MaybeIncorrect,\n                                 )\n-                                .emit();\n-                        });\n+                            },\n+                        );\n                         break;\n                     }\n                 }\n@@ -1170,27 +1194,29 @@ impl<'tcx> LateLintPass<'tcx> for InvalidNoMangleItems {\n                 if cx.sess().contains_name(attrs, sym::no_mangle) {\n                     // Const items do not refer to a particular location in memory, and therefore\n                     // don't have anything to attach a symbol to\n-                    cx.struct_span_lint(NO_MANGLE_CONST_ITEMS, it.span, |lint| {\n-                        let mut err = lint.build(fluent::lint::builtin_const_no_mangle);\n-\n-                        // account for \"pub const\" (#45562)\n-                        let start = cx\n-                            .tcx\n-                            .sess\n-                            .source_map()\n-                            .span_to_snippet(it.span)\n-                            .map(|snippet| snippet.find(\"const\").unwrap_or(0))\n-                            .unwrap_or(0) as u32;\n-                        // `const` is 5 chars\n-                        let const_span = it.span.with_hi(BytePos(it.span.lo().0 + start + 5));\n-                        err.span_suggestion(\n-                            const_span,\n-                            fluent::lint::suggestion,\n-                            \"pub static\",\n-                            Applicability::MachineApplicable,\n-                        );\n-                        err.emit();\n-                    });\n+                    cx.struct_span_lint(\n+                        NO_MANGLE_CONST_ITEMS,\n+                        it.span,\n+                        fluent::lint::builtin_const_no_mangle,\n+                        |lint| {\n+                            // account for \"pub const\" (#45562)\n+                            let start = cx\n+                                .tcx\n+                                .sess\n+                                .source_map()\n+                                .span_to_snippet(it.span)\n+                                .map(|snippet| snippet.find(\"const\").unwrap_or(0))\n+                                .unwrap_or(0) as u32;\n+                            // `const` is 5 chars\n+                            let const_span = it.span.with_hi(BytePos(it.span.lo().0 + start + 5));\n+                            lint.span_suggestion(\n+                                const_span,\n+                                fluent::lint::suggestion,\n+                                \"pub static\",\n+                                Applicability::MachineApplicable,\n+                            )\n+                        },\n+                    );\n                 }\n             }\n             hir::ItemKind::Impl(hir::Impl { generics, items, .. }) => {\n@@ -1250,9 +1276,12 @@ impl<'tcx> LateLintPass<'tcx> for MutableTransmutes {\n             get_transmute_from_to(cx, expr).map(|(ty1, ty2)| (ty1.kind(), ty2.kind()))\n         {\n             if to_mt == hir::Mutability::Mut && from_mt == hir::Mutability::Not {\n-                cx.struct_span_lint(MUTABLE_TRANSMUTES, expr.span, |lint| {\n-                    lint.build(fluent::lint::builtin_mutable_transmutes).emit();\n-                });\n+                cx.struct_span_lint(\n+                    MUTABLE_TRANSMUTES,\n+                    expr.span,\n+                    fluent::lint::builtin_mutable_transmutes,\n+                    |lint| lint,\n+                );\n             }\n         }\n \n@@ -1300,9 +1329,12 @@ impl<'tcx> LateLintPass<'tcx> for UnstableFeatures {\n         if attr.has_name(sym::feature) {\n             if let Some(items) = attr.meta_item_list() {\n                 for item in items {\n-                    cx.struct_span_lint(UNSTABLE_FEATURES, item.span(), |lint| {\n-                        lint.build(fluent::lint::builtin_unstable_features).emit();\n-                    });\n+                    cx.struct_span_lint(\n+                        UNSTABLE_FEATURES,\n+                        item.span(),\n+                        fluent::lint::builtin_unstable_features,\n+                        |lint| lint,\n+                    );\n                 }\n             }\n         }\n@@ -1361,21 +1393,25 @@ impl UnreachablePub {\n                 applicability = Applicability::MaybeIncorrect;\n             }\n             let def_span = cx.tcx.def_span(def_id);\n-            cx.struct_span_lint(UNREACHABLE_PUB, def_span, |lint| {\n-                let mut err = lint.build(fluent::lint::builtin_unreachable_pub);\n-                err.set_arg(\"what\", what);\n-\n-                err.span_suggestion(\n-                    vis_span,\n-                    fluent::lint::suggestion,\n-                    \"pub(crate)\",\n-                    applicability,\n-                );\n-                if exportable {\n-                    err.help(fluent::lint::help);\n-                }\n-                err.emit();\n-            });\n+            cx.struct_span_lint(\n+                UNREACHABLE_PUB,\n+                def_span,\n+                fluent::lint::builtin_unreachable_pub,\n+                |lint| {\n+                    lint.set_arg(\"what\", what);\n+\n+                    lint.span_suggestion(\n+                        vis_span,\n+                        fluent::lint::suggestion,\n+                        \"pub(crate)\",\n+                        applicability,\n+                    );\n+                    if exportable {\n+                        lint.help(fluent::lint::help);\n+                    }\n+                    lint\n+                },\n+            );\n         }\n     }\n }\n@@ -1505,36 +1541,34 @@ impl<'tcx> LateLintPass<'tcx> for TypeAliasBounds {\n \n         let mut suggested_changing_assoc_types = false;\n         if !where_spans.is_empty() {\n-            cx.lint(TYPE_ALIAS_BOUNDS, |lint| {\n-                let mut err = lint.build(fluent::lint::builtin_type_alias_where_clause);\n-                err.set_span(where_spans);\n-                err.span_suggestion(\n+            cx.lint(TYPE_ALIAS_BOUNDS, fluent::lint::builtin_type_alias_where_clause, |lint| {\n+                lint.set_span(where_spans);\n+                lint.span_suggestion(\n                     type_alias_generics.where_clause_span,\n                     fluent::lint::suggestion,\n                     \"\",\n                     Applicability::MachineApplicable,\n                 );\n                 if !suggested_changing_assoc_types {\n-                    TypeAliasBounds::suggest_changing_assoc_types(ty, &mut err);\n+                    TypeAliasBounds::suggest_changing_assoc_types(ty, lint);\n                     suggested_changing_assoc_types = true;\n                 }\n-                err.emit();\n+                lint\n             });\n         }\n \n         if !inline_spans.is_empty() {\n-            cx.lint(TYPE_ALIAS_BOUNDS, |lint| {\n-                let mut err = lint.build(fluent::lint::builtin_type_alias_generic_bounds);\n-                err.set_span(inline_spans);\n-                err.multipart_suggestion(\n+            cx.lint(TYPE_ALIAS_BOUNDS, fluent::lint::builtin_type_alias_generic_bounds, |lint| {\n+                lint.set_span(inline_spans);\n+                lint.multipart_suggestion(\n                     fluent::lint::suggestion,\n                     inline_sugg,\n                     Applicability::MachineApplicable,\n                 );\n                 if !suggested_changing_assoc_types {\n-                    TypeAliasBounds::suggest_changing_assoc_types(ty, &mut err);\n+                    TypeAliasBounds::suggest_changing_assoc_types(ty, lint);\n                 }\n-                err.emit();\n+                lint\n             });\n         }\n     }\n@@ -1633,12 +1667,15 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n                     TypeWellFormedFromEnv(..) => continue,\n                 };\n                 if predicate.is_global() {\n-                    cx.struct_span_lint(TRIVIAL_BOUNDS, span, |lint| {\n-                        lint.build(fluent::lint::builtin_trivial_bounds)\n-                            .set_arg(\"predicate_kind_name\", predicate_kind_name)\n-                            .set_arg(\"predicate\", predicate)\n-                            .emit();\n-                    });\n+                    cx.struct_span_lint(\n+                        TRIVIAL_BOUNDS,\n+                        span,\n+                        fluent::lint::builtin_trivial_bounds,\n+                        |lint| {\n+                            lint.set_arg(\"predicate_kind_name\", predicate_kind_name)\n+                                .set_arg(\"predicate\", predicate)\n+                        },\n+                    );\n                 }\n             }\n         }\n@@ -1754,15 +1791,13 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n                         replace,\n                     });\n                 } else {\n-                    cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, pat.span, |lint| {\n-                        lint.build(msg)\n-                            .span_suggestion(\n-                                pat.span,\n-                                suggestion,\n-                                replace,\n-                                Applicability::MachineApplicable,\n-                            )\n-                            .emit();\n+                    cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, pat.span, msg, |lint| {\n+                        lint.span_suggestion(\n+                            pat.span,\n+                            suggestion,\n+                            replace,\n+                            Applicability::MachineApplicable,\n+                        )\n                     });\n                 }\n             } else {\n@@ -1774,15 +1809,13 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n                         replace: replace.to_string(),\n                     });\n                 } else {\n-                    cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, join, |lint| {\n-                        lint.build(msg)\n-                            .span_suggestion_short(\n-                                join,\n-                                suggestion,\n-                                replace,\n-                                Applicability::MachineApplicable,\n-                            )\n-                            .emit();\n+                    cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, join, msg, |lint| {\n+                        lint.span_suggestion_short(\n+                            join,\n+                            suggestion,\n+                            replace,\n+                            Applicability::MachineApplicable,\n+                        )\n                     });\n                 }\n             };\n@@ -1863,9 +1896,12 @@ impl<'tcx> LateLintPass<'tcx> for UnnameableTestItems {\n \n         let attrs = cx.tcx.hir().attrs(it.hir_id());\n         if let Some(attr) = cx.sess().find_by_name(attrs, sym::rustc_test_marker) {\n-            cx.struct_span_lint(UNNAMEABLE_TEST_ITEMS, attr.span, |lint| {\n-                lint.build(fluent::lint::builtin_unnameable_test_items).emit();\n-            });\n+            cx.struct_span_lint(\n+                UNNAMEABLE_TEST_ITEMS,\n+                attr.span,\n+                fluent::lint::builtin_unnameable_test_items,\n+                |lint| lint,\n+            );\n         }\n     }\n \n@@ -1981,18 +2017,19 @@ impl KeywordIdents {\n             return;\n         }\n \n-        cx.struct_span_lint(KEYWORD_IDENTS, ident.span, |lint| {\n-            lint.build(fluent::lint::builtin_keyword_idents)\n-                .set_arg(\"kw\", ident.clone())\n-                .set_arg(\"next\", next_edition)\n-                .span_suggestion(\n+        cx.struct_span_lint(\n+            KEYWORD_IDENTS,\n+            ident.span,\n+            fluent::lint::builtin_keyword_idents,\n+            |lint| {\n+                lint.set_arg(\"kw\", ident.clone()).set_arg(\"next\", next_edition).span_suggestion(\n                     ident.span,\n                     fluent::lint::suggestion,\n                     format!(\"r#{}\", ident),\n                     Applicability::MachineApplicable,\n                 )\n-                .emit();\n-        });\n+            },\n+        );\n     }\n }\n \n@@ -2243,19 +2280,21 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n             }\n \n             if !lint_spans.is_empty() {\n-                cx.struct_span_lint(EXPLICIT_OUTLIVES_REQUIREMENTS, lint_spans.clone(), |lint| {\n-                    lint.build(fluent::lint::builtin_explicit_outlives)\n-                        .set_arg(\"count\", bound_count)\n-                        .multipart_suggestion(\n+                cx.struct_span_lint(\n+                    EXPLICIT_OUTLIVES_REQUIREMENTS,\n+                    lint_spans.clone(),\n+                    fluent::lint::builtin_explicit_outlives,\n+                    |lint| {\n+                        lint.set_arg(\"count\", bound_count).multipart_suggestion(\n                             fluent::lint::suggestion,\n                             lint_spans\n                                 .into_iter()\n                                 .map(|span| (span, String::new()))\n                                 .collect::<Vec<_>>(),\n                             Applicability::MachineApplicable,\n                         )\n-                        .emit();\n-                });\n+                    },\n+                );\n             }\n         }\n     }\n@@ -2302,18 +2341,24 @@ impl EarlyLintPass for IncompleteFeatures {\n             .chain(features.declared_lib_features.iter().map(|(name, span)| (name, span)))\n             .filter(|(&name, _)| features.incomplete(name))\n             .for_each(|(&name, &span)| {\n-                cx.struct_span_lint(INCOMPLETE_FEATURES, span, |lint| {\n-                    let mut builder = lint.build(fluent::lint::builtin_incomplete_features);\n-                    builder.set_arg(\"name\", name);\n-                    if let Some(n) = rustc_feature::find_feature_issue(name, GateIssue::Language) {\n-                        builder.set_arg(\"n\", n);\n-                        builder.note(fluent::lint::note);\n-                    }\n-                    if HAS_MIN_FEATURES.contains(&name) {\n-                        builder.help(fluent::lint::help);\n-                    }\n-                    builder.emit();\n-                })\n+                cx.struct_span_lint(\n+                    INCOMPLETE_FEATURES,\n+                    span,\n+                    fluent::lint::builtin_incomplete_features,\n+                    |lint| {\n+                        lint.set_arg(\"name\", name);\n+                        if let Some(n) =\n+                            rustc_feature::find_feature_issue(name, GateIssue::Language)\n+                        {\n+                            lint.set_arg(\"n\", n);\n+                            lint.note(fluent::lint::note);\n+                        }\n+                        if HAS_MIN_FEATURES.contains(&name) {\n+                            lint.help(fluent::lint::help);\n+                        }\n+                        lint\n+                    },\n+                )\n             });\n     }\n }\n@@ -2628,28 +2673,37 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                 with_no_trimmed_paths!(ty_find_init_error(cx, conjured_ty, init))\n             {\n                 // FIXME(davidtwco): make translatable\n-                cx.struct_span_lint(INVALID_VALUE, expr.span, |lint| {\n-                    let mut err = lint.build(&format!(\n-                        \"the type `{}` does not permit {}\",\n-                        conjured_ty,\n-                        match init {\n-                            InitKind::Zeroed => \"zero-initialization\",\n-                            InitKind::Uninit => \"being left uninitialized\",\n-                        },\n-                    ));\n-                    err.span_label(expr.span, \"this code causes undefined behavior when executed\");\n-                    err.span_label(\n-                        expr.span,\n-                        \"help: use `MaybeUninit<T>` instead, \\\n+                cx.struct_span_lint(\n+                    INVALID_VALUE,\n+                    expr.span,\n+                    DelayDm(|| {\n+                        format!(\n+                            \"the type `{}` does not permit {}\",\n+                            conjured_ty,\n+                            match init {\n+                                InitKind::Zeroed => \"zero-initialization\",\n+                                InitKind::Uninit => \"being left uninitialized\",\n+                            },\n+                        )\n+                    }),\n+                    |lint| {\n+                        lint.span_label(\n+                            expr.span,\n+                            \"this code causes undefined behavior when executed\",\n+                        );\n+                        lint.span_label(\n+                            expr.span,\n+                            \"help: use `MaybeUninit<T>` instead, \\\n                             and only call `assume_init` after initialization is done\",\n-                    );\n-                    if let Some(span) = span {\n-                        err.span_note(span, &msg);\n-                    } else {\n-                        err.note(&msg);\n-                    }\n-                    err.emit();\n-                });\n+                        );\n+                        if let Some(span) = span {\n+                            lint.span_note(span, &msg);\n+                        } else {\n+                            lint.note(&msg);\n+                        }\n+                        lint\n+                    },\n+                );\n             }\n         }\n     }\n@@ -2995,31 +3049,35 @@ impl<'tcx> LateLintPass<'tcx> for ClashingExternDeclarations {\n                             SymbolName::Link(_, annot_span) => fi.span.to(annot_span),\n                         };\n                     // Finally, emit the diagnostic.\n+\n+                    let msg = if orig.get_name() == this_fi.ident.name {\n+                        fluent::lint::builtin_clashing_extern_same_name\n+                    } else {\n+                        fluent::lint::builtin_clashing_extern_diff_name\n+                    };\n                     tcx.struct_span_lint_hir(\n                         CLASHING_EXTERN_DECLARATIONS,\n                         this_fi.hir_id(),\n                         get_relevant_span(this_fi),\n+                        msg,\n                         |lint| {\n                             let mut expected_str = DiagnosticStyledString::new();\n                             expected_str.push(existing_decl_ty.fn_sig(tcx).to_string(), false);\n                             let mut found_str = DiagnosticStyledString::new();\n                             found_str.push(this_decl_ty.fn_sig(tcx).to_string(), true);\n \n-                            lint.build(if orig.get_name() == this_fi.ident.name {\n-                                fluent::lint::builtin_clashing_extern_same_name\n-                            } else {\n-                                fluent::lint::builtin_clashing_extern_diff_name\n-                            })\n-                            .set_arg(\"this_fi\", this_fi.ident.name)\n-                            .set_arg(\"orig\", orig.get_name())\n-                            .span_label(\n-                                get_relevant_span(orig_fi),\n-                                fluent::lint::previous_decl_label,\n-                            )\n-                            .span_label(get_relevant_span(this_fi), fluent::lint::mismatch_label)\n-                            // FIXME(davidtwco): translatable expected/found\n-                            .note_expected_found(&\"\", expected_str, &\"\", found_str)\n-                            .emit();\n+                            lint.set_arg(\"this_fi\", this_fi.ident.name)\n+                                .set_arg(\"orig\", orig.get_name())\n+                                .span_label(\n+                                    get_relevant_span(orig_fi),\n+                                    fluent::lint::previous_decl_label,\n+                                )\n+                                .span_label(\n+                                    get_relevant_span(this_fi),\n+                                    fluent::lint::mismatch_label,\n+                                )\n+                                // FIXME(davidtwco): translatable expected/found\n+                                .note_expected_found(&\"\", expected_str, &\"\", found_str)\n                         },\n                     );\n                 }\n@@ -3100,11 +3158,12 @@ impl<'tcx> LateLintPass<'tcx> for DerefNullPtr {\n \n         if let rustc_hir::ExprKind::Unary(rustc_hir::UnOp::Deref, expr_deref) = expr.kind {\n             if is_null_ptr(cx, expr_deref) {\n-                cx.struct_span_lint(DEREF_NULLPTR, expr.span, |lint| {\n-                    let mut err = lint.build(fluent::lint::builtin_deref_nullptr);\n-                    err.span_label(expr.span, fluent::lint::label);\n-                    err.emit();\n-                });\n+                cx.struct_span_lint(\n+                    DEREF_NULLPTR,\n+                    expr.span,\n+                    fluent::lint::builtin_deref_nullptr,\n+                    |lint| lint.span_label(expr.span, fluent::lint::label),\n+                );\n             }\n         }\n     }\n@@ -3214,9 +3273,8 @@ impl<'tcx> LateLintPass<'tcx> for NamedAsmLabels {\n                     cx.lookup_with_diagnostics(\n                             NAMED_ASM_LABELS,\n                             Some(target_spans),\n-                            |diag| {\n-                                diag.build(fluent::lint::builtin_asm_labels).emit();\n-                            },\n+                            fluent::lint::builtin_asm_labels,\n+                            |lint| lint,\n                             BuiltinLintDiagnostics::NamedAsmLabel(\n                                 \"only local labels of the form `<number>:` should be used in inline asm\"\n                                     .to_string(),\n@@ -3288,16 +3346,14 @@ impl EarlyLintPass for SpecialModuleName {\n                 }\n \n                 match item.ident.name.as_str() {\n-                    \"lib\" => cx.struct_span_lint(SPECIAL_MODULE_NAME, item.span, |lint| {\n-                        lint.build(\"found module declaration for lib.rs\")\n+                    \"lib\" => cx.struct_span_lint(SPECIAL_MODULE_NAME, item.span, \"found module declaration for lib.rs\", |lint| {\n+                        lint\n                             .note(\"lib.rs is the root of this crate's library target\")\n                             .help(\"to refer to it from other targets, use the library's name as the path\")\n-                            .emit()\n                     }),\n-                    \"main\" => cx.struct_span_lint(SPECIAL_MODULE_NAME, item.span, |lint| {\n-                        lint.build(\"found module declaration for main.rs\")\n+                    \"main\" => cx.struct_span_lint(SPECIAL_MODULE_NAME, item.span, \"found module declaration for main.rs\", |lint| {\n+                        lint\n                             .note(\"a binary crate cannot be used as library\")\n-                            .emit()\n                     }),\n                     _ => continue\n                 }\n@@ -3317,24 +3373,27 @@ impl EarlyLintPass for UnexpectedCfgs {\n         for &(name, value) in cfg {\n             if let Some(names_valid) = &check_cfg.names_valid {\n                 if !names_valid.contains(&name) {\n-                    cx.lookup(UNEXPECTED_CFGS, None::<MultiSpan>, |diag| {\n-                        diag.build(fluent::lint::builtin_unexpected_cli_config_name)\n-                            .help(fluent::lint::help)\n-                            .set_arg(\"name\", name)\n-                            .emit();\n-                    });\n+                    cx.lookup(\n+                        UNEXPECTED_CFGS,\n+                        None::<MultiSpan>,\n+                        fluent::lint::builtin_unexpected_cli_config_name,\n+                        |diag| diag.help(fluent::lint::help).set_arg(\"name\", name),\n+                    );\n                 }\n             }\n             if let Some(value) = value {\n                 if let Some(values) = &check_cfg.values_valid.get(&name) {\n                     if !values.contains(&value) {\n-                        cx.lookup(UNEXPECTED_CFGS, None::<MultiSpan>, |diag| {\n-                            diag.build(fluent::lint::builtin_unexpected_cli_config_value)\n-                                .help(fluent::lint::help)\n-                                .set_arg(\"name\", name)\n-                                .set_arg(\"value\", value)\n-                                .emit();\n-                        });\n+                        cx.lookup(\n+                            UNEXPECTED_CFGS,\n+                            None::<MultiSpan>,\n+                            fluent::lint::builtin_unexpected_cli_config_value,\n+                            |diag| {\n+                                diag.help(fluent::lint::help)\n+                                    .set_arg(\"name\", name)\n+                                    .set_arg(\"value\", value)\n+                            },\n+                        );\n                     }\n                 }\n             }"}, {"sha": "87007728e9df604d300a242c3e4bdf1cbd91720d", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 40, "deletions": 24, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -25,10 +25,8 @@ use crate::passes::{EarlyLintPassObject, LateLintPassObject};\n use rustc_ast::util::unicode::TEXT_FLOW_CONTROL_CHARS;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n-use rustc_errors::add_elided_lifetime_in_path_suggestion;\n-use rustc_errors::{\n-    Applicability, DecorateLint, LintDiagnosticBuilder, MultiSpan, SuggestionStyle,\n-};\n+use rustc_errors::{add_elided_lifetime_in_path_suggestion, DiagnosticBuilder, DiagnosticMessage};\n+use rustc_errors::{Applicability, DecorateLint, MultiSpan, SuggestionStyle};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::{CrateNum, DefId};\n@@ -580,13 +578,14 @@ pub trait LintContext: Sized {\n         &self,\n         lint: &'static Lint,\n         span: Option<impl Into<MultiSpan>>,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n+        msg: impl Into<DiagnosticMessage>,\n+        decorate: impl for<'a, 'b> FnOnce(\n+            &'b mut DiagnosticBuilder<'a, ()>,\n+        ) -> &'b mut DiagnosticBuilder<'a, ()>,\n         diagnostic: BuiltinLintDiagnostics,\n     ) {\n-        self.lookup(lint, span, |lint| {\n-            // We first generate a blank diagnostic.\n-            let mut db = lint.build(\"\");\n-\n+        // We first generate a blank diagnostic.\n+        self.lookup(lint, span, msg,|db| {\n             // Now, set up surrounding context.\n             let sess = self.sess();\n             match diagnostic {\n@@ -660,7 +659,7 @@ pub trait LintContext: Sized {\n                 ) => {\n                     add_elided_lifetime_in_path_suggestion(\n                         sess.source_map(),\n-                        &mut db,\n+                        db,\n                         n,\n                         path_span,\n                         incl_angl_brckt,\n@@ -696,7 +695,7 @@ pub trait LintContext: Sized {\n                     }\n                 }\n                 BuiltinLintDiagnostics::DeprecatedMacro(suggestion, span) => {\n-                    stability::deprecation_suggestion(&mut db, \"macro\", suggestion, span)\n+                    stability::deprecation_suggestion(db, \"macro\", suggestion, span)\n                 }\n                 BuiltinLintDiagnostics::UnusedDocComment(span) => {\n                     db.span_label(span, \"rustdoc does not generate documentation for macro invocations\");\n@@ -867,7 +866,7 @@ pub trait LintContext: Sized {\n                 }\n             }\n             // Rewrap `db`, and pass control to the user.\n-            decorate(LintDiagnosticBuilder::new(db));\n+            decorate(db)\n         });\n     }\n \n@@ -877,7 +876,10 @@ pub trait LintContext: Sized {\n         &self,\n         lint: &'static Lint,\n         span: Option<S>,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n+        msg: impl Into<DiagnosticMessage>,\n+        decorate: impl for<'a, 'b> FnOnce(\n+            &'b mut DiagnosticBuilder<'a, ()>,\n+        ) -> &'b mut DiagnosticBuilder<'a, ()>,\n     );\n \n     /// Emit a lint at `span` from a lint struct (some type that implements `DecorateLint`,\n@@ -888,31 +890,39 @@ pub trait LintContext: Sized {\n         span: S,\n         decorator: impl for<'a> DecorateLint<'a, ()>,\n     ) {\n-        self.lookup(lint, Some(span), |diag| decorator.decorate_lint(diag));\n+        self.lookup(lint, Some(span), decorator.msg(), |diag| decorator.decorate_lint(diag));\n     }\n \n     fn struct_span_lint<S: Into<MultiSpan>>(\n         &self,\n         lint: &'static Lint,\n         span: S,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n+        msg: impl Into<DiagnosticMessage>,\n+        decorate: impl for<'a, 'b> FnOnce(\n+            &'b mut DiagnosticBuilder<'a, ()>,\n+        ) -> &'b mut DiagnosticBuilder<'a, ()>,\n     ) {\n-        self.lookup(lint, Some(span), decorate);\n+        self.lookup(lint, Some(span), msg, decorate);\n     }\n \n     /// Emit a lint from a lint struct (some type that implements `DecorateLint`, typically\n     /// generated by `#[derive(LintDiagnostic)]`).\n     fn emit_lint(&self, lint: &'static Lint, decorator: impl for<'a> DecorateLint<'a, ()>) {\n-        self.lookup(lint, None as Option<Span>, |diag| decorator.decorate_lint(diag));\n+        self.lookup(lint, None as Option<Span>, decorator.msg(), |diag| {\n+            decorator.decorate_lint(diag)\n+        });\n     }\n \n     /// Emit a lint at the appropriate level, with no associated span.\n     fn lint(\n         &self,\n         lint: &'static Lint,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n+        msg: impl Into<DiagnosticMessage>,\n+        decorate: impl for<'a, 'b> FnOnce(\n+            &'b mut DiagnosticBuilder<'a, ()>,\n+        ) -> &'b mut DiagnosticBuilder<'a, ()>,\n     ) {\n-        self.lookup(lint, None as Option<Span>, decorate);\n+        self.lookup(lint, None as Option<Span>, msg, decorate);\n     }\n \n     /// This returns the lint level for the given lint at the current location.\n@@ -975,13 +985,16 @@ impl<'tcx> LintContext for LateContext<'tcx> {\n         &self,\n         lint: &'static Lint,\n         span: Option<S>,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n+        msg: impl Into<DiagnosticMessage>,\n+        decorate: impl for<'a, 'b> FnOnce(\n+            &'b mut DiagnosticBuilder<'a, ()>,\n+        ) -> &'b mut DiagnosticBuilder<'a, ()>,\n     ) {\n         let hir_id = self.last_node_with_lint_attrs;\n \n         match span {\n-            Some(s) => self.tcx.struct_span_lint_hir(lint, hir_id, s, decorate),\n-            None => self.tcx.struct_lint_node(lint, hir_id, decorate),\n+            Some(s) => self.tcx.struct_span_lint_hir(lint, hir_id, s, msg, decorate),\n+            None => self.tcx.struct_lint_node(lint, hir_id, msg, decorate),\n         }\n     }\n \n@@ -1006,9 +1019,12 @@ impl LintContext for EarlyContext<'_> {\n         &self,\n         lint: &'static Lint,\n         span: Option<S>,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n+        msg: impl Into<DiagnosticMessage>,\n+        decorate: impl for<'a, 'b> FnOnce(\n+            &'b mut DiagnosticBuilder<'a, ()>,\n+        ) -> &'b mut DiagnosticBuilder<'a, ()>,\n     ) {\n-        self.builder.struct_lint(lint, span.map(|s| s.into()), decorate)\n+        self.builder.struct_lint(lint, span.map(|s| s.into()), msg, decorate)\n     }\n \n     fn get_lint_level(&self, lint: &'static Lint) -> Level {"}, {"sha": "18d30e1435be8f74937e544d3ccfbe050ea2ea47", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -43,9 +43,8 @@ impl<'a, T: EarlyLintPass> EarlyContextAndPass<'a, T> {\n             self.context.lookup_with_diagnostics(\n                 lint_id.lint,\n                 Some(span),\n-                |lint| {\n-                    lint.build(msg).emit();\n-                },\n+                msg,\n+                |lint| lint,\n                 diagnostic,\n             );\n         }"}, {"sha": "e8d307814b9d50c6834cdfae1e15e41a660af470", "filename": "compiler/rustc_lint/src/enum_intrinsics_non_enums.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -50,26 +50,24 @@ fn enforce_mem_discriminant(\n ) {\n     let ty_param = cx.typeck_results().node_substs(func_expr.hir_id).type_at(0);\n     if is_non_enum(ty_param) {\n-        cx.struct_span_lint(ENUM_INTRINSICS_NON_ENUMS, expr_span, |builder| {\n-            builder\n-                .build(fluent::lint::enum_intrinsics_mem_discriminant)\n-                .set_arg(\"ty_param\", ty_param)\n-                .span_note(args_span, fluent::lint::note)\n-                .emit();\n-        });\n+        cx.struct_span_lint(\n+            ENUM_INTRINSICS_NON_ENUMS,\n+            expr_span,\n+            fluent::lint::enum_intrinsics_mem_discriminant,\n+            |lint| lint.set_arg(\"ty_param\", ty_param).span_note(args_span, fluent::lint::note),\n+        );\n     }\n }\n \n fn enforce_mem_variant_count(cx: &LateContext<'_>, func_expr: &hir::Expr<'_>, span: Span) {\n     let ty_param = cx.typeck_results().node_substs(func_expr.hir_id).type_at(0);\n     if is_non_enum(ty_param) {\n-        cx.struct_span_lint(ENUM_INTRINSICS_NON_ENUMS, span, |builder| {\n-            builder\n-                .build(fluent::lint::enum_intrinsics_mem_variant)\n-                .set_arg(\"ty_param\", ty_param)\n-                .note(fluent::lint::note)\n-                .emit();\n-        });\n+        cx.struct_span_lint(\n+            ENUM_INTRINSICS_NON_ENUMS,\n+            span,\n+            fluent::lint::enum_intrinsics_mem_variant,\n+            |lint| lint.set_arg(\"ty_param\", ty_param).note(fluent::lint::note),\n+        );\n     }\n }\n "}, {"sha": "af13f453a509842c7272078359464f8e5f53cda6", "filename": "compiler/rustc_lint/src/expect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -43,17 +43,17 @@ fn emit_unfulfilled_expectation_lint(\n         builtin::UNFULFILLED_LINT_EXPECTATIONS,\n         hir_id,\n         expectation.emission_span,\n-        |diag| {\n-            let mut diag = diag.build(fluent::lint::expectation);\n+        fluent::lint::expectation,\n+        |lint| {\n             if let Some(rationale) = expectation.reason {\n-                diag.note(rationale.as_str());\n+                lint.note(rationale.as_str());\n             }\n \n             if expectation.is_unfulfilled_lint_expectations {\n-                diag.note(fluent::lint::note);\n+                lint.note(fluent::lint::note);\n             }\n \n-            diag.emit();\n+            lint\n         },\n     );\n }"}, {"sha": "42557068bd3d7e585f4354acfeb327ad619e684e", "filename": "compiler/rustc_lint/src/hidden_unicode_codepoints.rs", "status": "modified", "additions": 49, "deletions": 45, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -60,52 +60,56 @@ impl HiddenUnicodeCodepoints {\n             })\n             .collect();\n \n-        cx.struct_span_lint(TEXT_DIRECTION_CODEPOINT_IN_LITERAL, span, |lint| {\n-            let mut err = lint.build(fluent::lint::hidden_unicode_codepoints);\n-            err.set_arg(\"label\", label);\n-            err.set_arg(\"count\", spans.len());\n-            err.span_label(span, fluent::lint::label);\n-            err.note(fluent::lint::note);\n-            if point_at_inner_spans {\n-                for (c, span) in &spans {\n-                    err.span_label(*span, format!(\"{:?}\", c));\n+        cx.struct_span_lint(\n+            TEXT_DIRECTION_CODEPOINT_IN_LITERAL,\n+            span,\n+            fluent::lint::hidden_unicode_codepoints,\n+            |lint| {\n+                lint.set_arg(\"label\", label);\n+                lint.set_arg(\"count\", spans.len());\n+                lint.span_label(span, fluent::lint::label);\n+                lint.note(fluent::lint::note);\n+                if point_at_inner_spans {\n+                    for (c, span) in &spans {\n+                        lint.span_label(*span, format!(\"{:?}\", c));\n+                    }\n                 }\n-            }\n-            if point_at_inner_spans && !spans.is_empty() {\n-                err.multipart_suggestion_with_style(\n-                    fluent::lint::suggestion_remove,\n-                    spans.iter().map(|(_, span)| (*span, \"\".to_string())).collect(),\n-                    Applicability::MachineApplicable,\n-                    SuggestionStyle::HideCodeAlways,\n-                );\n-                err.multipart_suggestion(\n-                    fluent::lint::suggestion_escape,\n-                    spans\n-                        .into_iter()\n-                        .map(|(c, span)| {\n-                            let c = format!(\"{:?}\", c);\n-                            (span, c[1..c.len() - 1].to_string())\n-                        })\n-                        .collect(),\n-                    Applicability::MachineApplicable,\n-                );\n-            } else {\n-                // FIXME: in other suggestions we've reversed the inner spans of doc comments. We\n-                // should do the same here to provide the same good suggestions as we do for\n-                // literals above.\n-                err.set_arg(\n-                    \"escaped\",\n-                    spans\n-                        .into_iter()\n-                        .map(|(c, _)| format!(\"{:?}\", c))\n-                        .collect::<Vec<String>>()\n-                        .join(\", \"),\n-                );\n-                err.note(fluent::lint::suggestion_remove);\n-                err.note(fluent::lint::no_suggestion_note_escape);\n-            }\n-            err.emit();\n-        });\n+                if point_at_inner_spans && !spans.is_empty() {\n+                    lint.multipart_suggestion_with_style(\n+                        fluent::lint::suggestion_remove,\n+                        spans.iter().map(|(_, span)| (*span, \"\".to_string())).collect(),\n+                        Applicability::MachineApplicable,\n+                        SuggestionStyle::HideCodeAlways,\n+                    );\n+                    lint.multipart_suggestion(\n+                        fluent::lint::suggestion_escape,\n+                        spans\n+                            .into_iter()\n+                            .map(|(c, span)| {\n+                                let c = format!(\"{:?}\", c);\n+                                (span, c[1..c.len() - 1].to_string())\n+                            })\n+                            .collect(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                } else {\n+                    // FIXME: in other suggestions we've reversed the inner spans of doc comments. We\n+                    // should do the same here to provide the same good suggestions as we do for\n+                    // literals above.\n+                    lint.set_arg(\n+                        \"escaped\",\n+                        spans\n+                            .into_iter()\n+                            .map(|(c, _)| format!(\"{:?}\", c))\n+                            .collect::<Vec<String>>()\n+                            .join(\", \"),\n+                    );\n+                    lint.note(fluent::lint::suggestion_remove);\n+                    lint.note(fluent::lint::no_suggestion_note_escape);\n+                }\n+                lint\n+            },\n+        );\n     }\n }\n impl EarlyLintPass for HiddenUnicodeCodepoints {"}, {"sha": "8f5e38fdbcc4989cb73ac74104a2c8ec9fbe816f", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 105, "deletions": 100, "changes": 205, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -34,13 +34,16 @@ impl LateLintPass<'_> for DefaultHashTypes {\n             Some(sym::HashSet) => \"FxHashSet\",\n             _ => return,\n         };\n-        cx.struct_span_lint(DEFAULT_HASH_TYPES, path.span, |lint| {\n-            lint.build(fluent::lint::default_hash_types)\n-                .set_arg(\"preferred\", replace)\n-                .set_arg(\"used\", cx.tcx.item_name(def_id))\n-                .note(fluent::lint::note)\n-                .emit();\n-        });\n+        cx.struct_span_lint(\n+            DEFAULT_HASH_TYPES,\n+            path.span,\n+            fluent::lint::default_hash_types,\n+            |lint| {\n+                lint.set_arg(\"preferred\", replace)\n+                    .set_arg(\"used\", cx.tcx.item_name(def_id))\n+                    .note(fluent::lint::note)\n+            },\n+        );\n     }\n }\n \n@@ -80,12 +83,12 @@ impl LateLintPass<'_> for QueryStability {\n         if let Ok(Some(instance)) = ty::Instance::resolve(cx.tcx, cx.param_env, def_id, substs) {\n             let def_id = instance.def_id();\n             if cx.tcx.has_attr(def_id, sym::rustc_lint_query_instability) {\n-                cx.struct_span_lint(POTENTIAL_QUERY_INSTABILITY, span, |lint| {\n-                    lint.build(fluent::lint::query_instability)\n-                        .set_arg(\"query\", cx.tcx.item_name(def_id))\n-                        .note(fluent::lint::note)\n-                        .emit();\n-                })\n+                cx.struct_span_lint(\n+                    POTENTIAL_QUERY_INSTABILITY,\n+                    span,\n+                    fluent::lint::query_instability,\n+                    |lint| lint.set_arg(\"query\", cx.tcx.item_name(def_id)).note(fluent::lint::note),\n+                )\n             }\n         }\n     }\n@@ -123,15 +126,14 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n             let span = path.span.with_hi(\n                 segment.args.map_or(segment.ident.span, |a| a.span_ext).hi()\n             );\n-            cx.struct_span_lint(USAGE_OF_TY_TYKIND, path.span, |lint| {\n-                lint.build(fluent::lint::tykind_kind)\n+            cx.struct_span_lint(USAGE_OF_TY_TYKIND, path.span, fluent::lint::tykind_kind, |lint| {\n+                lint\n                     .span_suggestion(\n                         span,\n                         fluent::lint::suggestion,\n                         \"ty\",\n                         Applicability::MaybeIncorrect, // ty maybe needs an import\n                     )\n-                    .emit();\n             });\n         }\n     }\n@@ -140,76 +142,77 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n         match &ty.kind {\n             TyKind::Path(QPath::Resolved(_, path)) => {\n                 if lint_ty_kind_usage(cx, &path.res) {\n-                    cx.struct_span_lint(USAGE_OF_TY_TYKIND, path.span, |lint| {\n-                        let hir = cx.tcx.hir();\n-                        match hir.find(hir.get_parent_node(ty.hir_id)) {\n-                            Some(Node::Pat(Pat {\n-                                kind:\n-                                    PatKind::Path(qpath)\n-                                    | PatKind::TupleStruct(qpath, ..)\n-                                    | PatKind::Struct(qpath, ..),\n-                                ..\n-                            })) => {\n-                                if let QPath::TypeRelative(qpath_ty, ..) = qpath\n-                                    && qpath_ty.hir_id == ty.hir_id\n-                                {\n-                                    lint.build(fluent::lint::tykind_kind)\n-                                        .span_suggestion(\n-                                            path.span,\n-                                            fluent::lint::suggestion,\n-                                            \"ty\",\n-                                            Applicability::MaybeIncorrect, // ty maybe needs an import\n-                                        )\n-                                        .emit();\n-                                    return;\n-                                }\n+                    let hir = cx.tcx.hir();\n+                    let span = match hir.find(hir.get_parent_node(ty.hir_id)) {\n+                        Some(Node::Pat(Pat {\n+                            kind:\n+                                PatKind::Path(qpath)\n+                                | PatKind::TupleStruct(qpath, ..)\n+                                | PatKind::Struct(qpath, ..),\n+                            ..\n+                        })) => {\n+                            if let QPath::TypeRelative(qpath_ty, ..) = qpath\n+                                && qpath_ty.hir_id == ty.hir_id\n+                            {\n+                                Some(path.span)\n+                            } else {\n+                                None\n                             }\n-                            Some(Node::Expr(Expr {\n-                                kind: ExprKind::Path(qpath),\n-                                ..\n-                            })) => {\n-                                if let QPath::TypeRelative(qpath_ty, ..) = qpath\n-                                    && qpath_ty.hir_id == ty.hir_id\n-                                {\n-                                    lint.build(fluent::lint::tykind_kind)\n-                                        .span_suggestion(\n-                                            path.span,\n-                                            fluent::lint::suggestion,\n-                                            \"ty\",\n-                                            Applicability::MaybeIncorrect, // ty maybe needs an import\n-                                        )\n-                                        .emit();\n-                                    return;\n-                                }\n+                        }\n+                        Some(Node::Expr(Expr {\n+                            kind: ExprKind::Path(qpath),\n+                            ..\n+                        })) => {\n+                            if let QPath::TypeRelative(qpath_ty, ..) = qpath\n+                                && qpath_ty.hir_id == ty.hir_id\n+                            {\n+                                Some(path.span)\n+                            } else {\n+                                None\n                             }\n-                            // Can't unify these two branches because qpath below is `&&` and above is `&`\n-                            // and `A | B` paths don't play well together with adjustments, apparently.\n-                            Some(Node::Expr(Expr {\n-                                kind: ExprKind::Struct(qpath, ..),\n-                                ..\n-                            })) => {\n-                                if let QPath::TypeRelative(qpath_ty, ..) = qpath\n-                                    && qpath_ty.hir_id == ty.hir_id\n-                                {\n-                                    lint.build(fluent::lint::tykind_kind)\n-                                        .span_suggestion(\n-                                            path.span,\n-                                            fluent::lint::suggestion,\n-                                            \"ty\",\n-                                            Applicability::MaybeIncorrect, // ty maybe needs an import\n-                                        )\n-                                        .emit();\n-                                    return;\n-                                }\n+                        }\n+                        // Can't unify these two branches because qpath below is `&&` and above is `&`\n+                        // and `A | B` paths don't play well together with adjustments, apparently.\n+                        Some(Node::Expr(Expr {\n+                            kind: ExprKind::Struct(qpath, ..),\n+                            ..\n+                        })) => {\n+                            if let QPath::TypeRelative(qpath_ty, ..) = qpath\n+                                && qpath_ty.hir_id == ty.hir_id\n+                            {\n+                                Some(path.span)\n+                            } else {\n+                                None\n                             }\n-                            _ => {}\n                         }\n-                        lint.build(fluent::lint::tykind).help(fluent::lint::help).emit();\n-                    })\n+                        _ => None\n+                    };\n+\n+                    match span {\n+                        Some(span) => {\n+                            cx.struct_span_lint(\n+                                USAGE_OF_TY_TYKIND,\n+                                path.span,\n+                                fluent::lint::tykind_kind,\n+                                |lint| lint.span_suggestion(\n+                                    span,\n+                                    fluent::lint::suggestion,\n+                                    \"ty\",\n+                                    Applicability::MaybeIncorrect, // ty maybe needs an import\n+                                )\n+                            )\n+                        },\n+                        None => cx.struct_span_lint(\n+                            USAGE_OF_TY_TYKIND,\n+                            path.span,\n+                            fluent::lint::tykind,\n+                            |lint| lint.help(fluent::lint::help)\n+                        )\n+                    }\n                 } else if !ty.span.from_expansion() && let Some(t) = is_ty_or_ty_ctxt(cx, &path) {\n                     if path.segments.len() > 1 {\n-                        cx.struct_span_lint(USAGE_OF_QUALIFIED_TY, path.span, |lint| {\n-                            lint.build(fluent::lint::ty_qualified)\n+                        cx.struct_span_lint(USAGE_OF_QUALIFIED_TY, path.span, fluent::lint::ty_qualified, |lint| {\n+                            lint\n                                 .set_arg(\"ty\", t.clone())\n                                 .span_suggestion(\n                                     path.span,\n@@ -218,7 +221,6 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n                                     // The import probably needs to be changed\n                                     Applicability::MaybeIncorrect,\n                                 )\n-                                .emit();\n                         })\n                     }\n                 }\n@@ -308,11 +310,8 @@ impl EarlyLintPass for LintPassImpl {\n                         cx.struct_span_lint(\n                             LINT_PASS_IMPL_WITHOUT_MACRO,\n                             lint_pass.path.span,\n-                            |lint| {\n-                                lint.build(fluent::lint::lintpass_by_hand)\n-                                    .help(fluent::lint::help)\n-                                    .emit();\n-                            },\n+                            fluent::lint::lintpass_by_hand,\n+                            |lint| lint.help(fluent::lint::help),\n                         )\n                     }\n                 }\n@@ -349,12 +348,12 @@ impl<'tcx> LateLintPass<'tcx> for ExistingDocKeyword {\n                         if is_doc_keyword(v) {\n                             return;\n                         }\n-                        cx.struct_span_lint(EXISTING_DOC_KEYWORD, attr.span, |lint| {\n-                            lint.build(fluent::lint::non_existant_doc_keyword)\n-                                .set_arg(\"keyword\", v)\n-                                .help(fluent::lint::help)\n-                                .emit();\n-                        });\n+                        cx.struct_span_lint(\n+                            EXISTING_DOC_KEYWORD,\n+                            attr.span,\n+                            fluent::lint::non_existant_doc_keyword,\n+                            |lint| lint.set_arg(\"keyword\", v).help(fluent::lint::help),\n+                        );\n                     }\n                 }\n             }\n@@ -412,9 +411,12 @@ impl LateLintPass<'_> for Diagnostics {\n         }\n         debug!(?found_impl);\n         if !found_parent_with_attr && !found_impl {\n-            cx.struct_span_lint(DIAGNOSTIC_OUTSIDE_OF_IMPL, span, |lint| {\n-                lint.build(fluent::lint::diag_out_of_impl).emit();\n-            })\n+            cx.struct_span_lint(\n+                DIAGNOSTIC_OUTSIDE_OF_IMPL,\n+                span,\n+                fluent::lint::diag_out_of_impl,\n+                |lint| lint,\n+            )\n         }\n \n         let mut found_diagnostic_message = false;\n@@ -430,9 +432,12 @@ impl LateLintPass<'_> for Diagnostics {\n         }\n         debug!(?found_diagnostic_message);\n         if !found_parent_with_attr && !found_diagnostic_message {\n-            cx.struct_span_lint(UNTRANSLATABLE_DIAGNOSTIC, span, |lint| {\n-                lint.build(fluent::lint::untranslatable_diag).emit();\n-            })\n+            cx.struct_span_lint(\n+                UNTRANSLATABLE_DIAGNOSTIC,\n+                span,\n+                fluent::lint::untranslatable_diag,\n+                |lint| lint,\n+            )\n         }\n     }\n }\n@@ -464,8 +469,8 @@ impl LateLintPass<'_> for BadOptAccess {\n                 let Some(literal) = item.literal()  &&\n                 let ast::LitKind::Str(val, _) = literal.kind\n             {\n-                cx.struct_span_lint(BAD_OPT_ACCESS, expr.span, |lint| {\n-                    lint.build(val.as_str()).emit(); }\n+                cx.struct_span_lint(BAD_OPT_ACCESS, expr.span, val.as_str(), |lint|\n+                    lint\n                 );\n             }\n         }"}, {"sha": "78f355ec3d0ae309716db0b02da3e1dc1e0161c0", "filename": "compiler/rustc_lint/src/let_underscore.rs", "status": "modified", "additions": 30, "deletions": 37, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -1,5 +1,5 @@\n use crate::{LateContext, LateLintPass, LintContext};\n-use rustc_errors::{Applicability, LintDiagnosticBuilder, MultiSpan};\n+use rustc_errors::{Applicability, DiagnosticBuilder, MultiSpan};\n use rustc_hir as hir;\n use rustc_middle::ty;\n use rustc_span::Symbol;\n@@ -128,48 +128,41 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                     init.span,\n                     \"this binding will immediately drop the value assigned to it\".to_string(),\n                 );\n-                cx.struct_span_lint(LET_UNDERSCORE_LOCK, span, |lint| {\n-                    build_and_emit_lint(\n-                        lint,\n-                        local,\n-                        init.span,\n-                        \"non-binding let on a synchronization lock\",\n-                    )\n-                })\n+                cx.struct_span_lint(\n+                    LET_UNDERSCORE_LOCK,\n+                    span,\n+                    \"non-binding let on a synchronization lock\",\n+                    |lint| build_lint(lint, local, init.span),\n+                )\n             } else {\n-                cx.struct_span_lint(LET_UNDERSCORE_DROP, local.span, |lint| {\n-                    build_and_emit_lint(\n-                        lint,\n-                        local,\n-                        init.span,\n-                        \"non-binding let on a type that implements `Drop`\",\n-                    );\n-                })\n+                cx.struct_span_lint(\n+                    LET_UNDERSCORE_DROP,\n+                    local.span,\n+                    \"non-binding let on a type that implements `Drop`\",\n+                    |lint| build_lint(lint, local, init.span),\n+                )\n             }\n         }\n     }\n }\n \n-fn build_and_emit_lint(\n-    lint: LintDiagnosticBuilder<'_, ()>,\n+fn build_lint<'a, 'b>(\n+    lint: &'a mut DiagnosticBuilder<'b, ()>,\n     local: &hir::Local<'_>,\n     init_span: rustc_span::Span,\n-    msg: &str,\n-) {\n-    lint.build(msg)\n-        .span_suggestion_verbose(\n-            local.pat.span,\n-            \"consider binding to an unused variable to avoid immediately dropping the value\",\n-            \"_unused\",\n-            Applicability::MachineApplicable,\n-        )\n-        .multipart_suggestion(\n-            \"consider immediately dropping the value\",\n-            vec![\n-                (local.span.until(init_span), \"drop(\".to_string()),\n-                (init_span.shrink_to_hi(), \")\".to_string()),\n-            ],\n-            Applicability::MachineApplicable,\n-        )\n-        .emit();\n+) -> &'a mut DiagnosticBuilder<'b, ()> {\n+    lint.span_suggestion_verbose(\n+        local.pat.span,\n+        \"consider binding to an unused variable to avoid immediately dropping the value\",\n+        \"_unused\",\n+        Applicability::MachineApplicable,\n+    )\n+    .multipart_suggestion(\n+        \"consider immediately dropping the value\",\n+        vec![\n+            (local.span.until(init_span), \"drop(\".to_string()),\n+            (init_span.shrink_to_hi(), \")\".to_string()),\n+        ],\n+        Applicability::MachineApplicable,\n+    )\n }"}, {"sha": "8238235082381729518cc1148b5742fc5e42d6ea", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 73, "deletions": 59, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -3,7 +3,7 @@ use crate::late::unerased_lint_store;\n use rustc_ast as ast;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{Applicability, Diagnostic, LintDiagnosticBuilder, MultiSpan};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, DiagnosticMessage, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::{intravisit, HirId};\n use rustc_middle::hir::nested_filter;\n@@ -214,14 +214,14 @@ impl<'s> LintLevelsBuilder<'s> {\n                     self.struct_lint(\n                         FORBIDDEN_LINT_GROUPS,\n                         Some(src.span().into()),\n-                        |diag_builder| {\n-                            let mut diag_builder = diag_builder.build(&format!(\n-                                \"{}({}) incompatible with previous forbid\",\n-                                level.as_str(),\n-                                src.name(),\n-                            ));\n-                            decorate_diag(&mut diag_builder);\n-                            diag_builder.emit();\n+                        format!(\n+                            \"{}({}) incompatible with previous forbid\",\n+                            level.as_str(),\n+                            src.name(),\n+                        ),\n+                        |lint| {\n+                            decorate_diag(lint);\n+                            lint\n                         },\n                     );\n                 }\n@@ -466,20 +466,18 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     lvl,\n                                     src,\n                                     Some(sp.into()),\n+                                    format!(\n+                                        \"lint name `{}` is deprecated \\\n+                                         and may not have an effect in the future.\",\n+                                        name\n+                                    ),\n                                     |lint| {\n-                                        let msg = format!(\n-                                            \"lint name `{}` is deprecated \\\n-                                             and may not have an effect in the future.\",\n-                                            name\n-                                        );\n-                                        lint.build(&msg)\n-                                            .span_suggestion(\n-                                                sp,\n-                                                \"change it to\",\n-                                                new_lint_name,\n-                                                Applicability::MachineApplicable,\n-                                            )\n-                                            .emit();\n+                                        lint.span_suggestion(\n+                                            sp,\n+                                            \"change it to\",\n+                                            new_lint_name,\n+                                            Applicability::MachineApplicable,\n+                                        )\n                                     },\n                                 );\n \n@@ -533,17 +531,17 @@ impl<'s> LintLevelsBuilder<'s> {\n                             renamed_lint_level,\n                             src,\n                             Some(sp.into()),\n+                            msg,\n                             |lint| {\n-                                let mut err = lint.build(msg);\n                                 if let Some(new_name) = &renamed {\n-                                    err.span_suggestion(\n+                                    lint.span_suggestion(\n                                         sp,\n                                         \"use the new name\",\n                                         new_name,\n                                         Applicability::MachineApplicable,\n                                     );\n                                 }\n-                                err.emit();\n+                                lint\n                             },\n                         );\n                     }\n@@ -555,23 +553,30 @@ impl<'s> LintLevelsBuilder<'s> {\n                             Some(self.current_specs()),\n                             self.sess,\n                         );\n-                        struct_lint_level(self.sess, lint, level, src, Some(sp.into()), |lint| {\n-                            let name = if let Some(tool_ident) = tool_ident {\n-                                format!(\"{}::{}\", tool_ident.name, name)\n-                            } else {\n-                                name.to_string()\n-                            };\n-                            let mut db = lint.build(format!(\"unknown lint: `{}`\", name));\n-                            if let Some(suggestion) = suggestion {\n-                                db.span_suggestion(\n-                                    sp,\n-                                    \"did you mean\",\n-                                    suggestion,\n-                                    Applicability::MachineApplicable,\n-                                );\n-                            }\n-                            db.emit();\n-                        });\n+                        let name = if let Some(tool_ident) = tool_ident {\n+                            format!(\"{}::{}\", tool_ident.name, name)\n+                        } else {\n+                            name.to_string()\n+                        };\n+                        struct_lint_level(\n+                            self.sess,\n+                            lint,\n+                            level,\n+                            src,\n+                            Some(sp.into()),\n+                            format!(\"unknown lint: `{}`\", name),\n+                            |lint| {\n+                                if let Some(suggestion) = suggestion {\n+                                    lint.span_suggestion(\n+                                        sp,\n+                                        \"did you mean\",\n+                                        suggestion,\n+                                        Applicability::MachineApplicable,\n+                                    );\n+                                }\n+                                lint\n+                            },\n+                        );\n                     }\n                 }\n                 // If this lint was renamed, apply the new lint instead of ignoring the attribute.\n@@ -621,14 +626,12 @@ impl<'s> LintLevelsBuilder<'s> {\n                     lint_level,\n                     lint_src,\n                     Some(lint_attr_span.into()),\n-                    |lint| {\n-                        let mut db = lint.build(&format!(\n-                            \"{}({}) is ignored unless specified at crate level\",\n-                            level.as_str(),\n-                            lint_attr_name\n-                        ));\n-                        db.emit();\n-                    },\n+                    format!(\n+                        \"{}({}) is ignored unless specified at crate level\",\n+                        level.as_str(),\n+                        lint_attr_name\n+                    ),\n+                    |lint| lint,\n                 );\n                 // don't set a separate error for every lint in the group\n                 break;\n@@ -665,13 +668,21 @@ impl<'s> LintLevelsBuilder<'s> {\n             if !self.sess.features_untracked().enabled(feature) {\n                 let lint = builtin::UNKNOWN_LINTS;\n                 let (level, src) = self.lint_level(builtin::UNKNOWN_LINTS);\n-                struct_lint_level(self.sess, lint, level, src, Some(span.into()), |lint_db| {\n-                    let mut db =\n-                        lint_db.build(&format!(\"unknown lint: `{}`\", lint_id.lint.name_lower()));\n-                    db.note(&format!(\"the `{}` lint is unstable\", lint_id.lint.name_lower(),));\n-                    add_feature_diagnostics(&mut db, &self.sess.parse_sess, feature);\n-                    db.emit();\n-                });\n+                struct_lint_level(\n+                    self.sess,\n+                    lint,\n+                    level,\n+                    src,\n+                    Some(span.into()),\n+                    format!(\"unknown lint: `{}`\", lint_id.lint.name_lower()),\n+                    |lint| {\n+                        lint.note(\n+                            &format!(\"the `{}` lint is unstable\", lint_id.lint.name_lower(),),\n+                        );\n+                        add_feature_diagnostics(lint, &self.sess.parse_sess, feature);\n+                        lint\n+                    },\n+                );\n                 return false;\n             }\n         }\n@@ -694,10 +705,13 @@ impl<'s> LintLevelsBuilder<'s> {\n         &self,\n         lint: &'static Lint,\n         span: Option<MultiSpan>,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n+        msg: impl Into<DiagnosticMessage>,\n+        decorate: impl for<'a, 'b> FnOnce(\n+            &'b mut DiagnosticBuilder<'a, ()>,\n+        ) -> &'b mut DiagnosticBuilder<'a, ()>,\n     ) {\n         let (level, src) = self.lint_level(lint);\n-        struct_lint_level(self.sess, lint, level, src, span, decorate)\n+        struct_lint_level(self.sess, lint, level, src, span, msg, decorate)\n     }\n \n     /// Registers the ID provided with the current set of lints stored in"}, {"sha": "313119637bc9c1a10686797a1d1ae43d1524bfca", "filename": "compiler/rustc_lint/src/methods.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -90,14 +90,17 @@ fn lint_cstring_as_ptr(\n         if cx.tcx.is_diagnostic_item(sym::Result, def.did()) {\n             if let ty::Adt(adt, _) = substs.type_at(0).kind() {\n                 if cx.tcx.is_diagnostic_item(sym::cstring_type, adt.did()) {\n-                    cx.struct_span_lint(TEMPORARY_CSTRING_AS_PTR, as_ptr_span, |diag| {\n-                        diag.build(fluent::lint::cstring_ptr)\n-                            .span_label(as_ptr_span, fluent::lint::as_ptr_label)\n-                            .span_label(unwrap.span, fluent::lint::unwrap_label)\n-                            .note(fluent::lint::note)\n-                            .help(fluent::lint::help)\n-                            .emit();\n-                    });\n+                    cx.struct_span_lint(\n+                        TEMPORARY_CSTRING_AS_PTR,\n+                        as_ptr_span,\n+                        fluent::lint::cstring_ptr,\n+                        |diag| {\n+                            diag.span_label(as_ptr_span, fluent::lint::as_ptr_label)\n+                                .span_label(unwrap.span, fluent::lint::unwrap_label)\n+                                .note(fluent::lint::note)\n+                                .help(fluent::lint::help)\n+                        },\n+                    );\n                 }\n             }\n         }"}, {"sha": "b2626efb6d73a901fec3b333fc14cb15bd8f5472", "filename": "compiler/rustc_lint/src/non_ascii_idents.rs", "status": "modified", "additions": 40, "deletions": 28, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -180,15 +180,21 @@ impl EarlyLintPass for NonAsciiIdents {\n                 continue;\n             }\n             has_non_ascii_idents = true;\n-            cx.struct_span_lint(NON_ASCII_IDENTS, sp, |lint| {\n-                lint.build(fluent::lint::identifier_non_ascii_char).emit();\n-            });\n+            cx.struct_span_lint(\n+                NON_ASCII_IDENTS,\n+                sp,\n+                fluent::lint::identifier_non_ascii_char,\n+                |lint| lint,\n+            );\n             if check_uncommon_codepoints\n                 && !symbol_str.chars().all(GeneralSecurityProfile::identifier_allowed)\n             {\n-                cx.struct_span_lint(UNCOMMON_CODEPOINTS, sp, |lint| {\n-                    lint.build(fluent::lint::identifier_uncommon_codepoints).emit();\n-                })\n+                cx.struct_span_lint(\n+                    UNCOMMON_CODEPOINTS,\n+                    sp,\n+                    fluent::lint::identifier_uncommon_codepoints,\n+                    |lint| lint,\n+                )\n             }\n         }\n \n@@ -216,13 +222,16 @@ impl EarlyLintPass for NonAsciiIdents {\n                     .entry(skeleton_sym)\n                     .and_modify(|(existing_symbol, existing_span, existing_is_ascii)| {\n                         if !*existing_is_ascii || !is_ascii {\n-                            cx.struct_span_lint(CONFUSABLE_IDENTS, sp, |lint| {\n-                                lint.build(fluent::lint::confusable_identifier_pair)\n-                                    .set_arg(\"existing_sym\", *existing_symbol)\n-                                    .set_arg(\"sym\", symbol)\n-                                    .span_label(*existing_span, fluent::lint::label)\n-                                    .emit();\n-                            });\n+                            cx.struct_span_lint(\n+                                CONFUSABLE_IDENTS,\n+                                sp,\n+                                fluent::lint::confusable_identifier_pair,\n+                                |lint| {\n+                                    lint.set_arg(\"existing_sym\", *existing_symbol)\n+                                        .set_arg(\"sym\", symbol)\n+                                        .span_label(*existing_span, fluent::lint::label)\n+                                },\n+                            );\n                         }\n                         if *existing_is_ascii && !is_ascii {\n                             *existing_symbol = symbol;\n@@ -322,22 +331,25 @@ impl EarlyLintPass for NonAsciiIdents {\n                 }\n \n                 for ((sp, ch_list), script_set) in lint_reports {\n-                    cx.struct_span_lint(MIXED_SCRIPT_CONFUSABLES, sp, |lint| {\n-                        let mut includes = String::new();\n-                        for (idx, ch) in ch_list.into_iter().enumerate() {\n-                            if idx != 0 {\n-                                includes += \", \";\n+                    cx.struct_span_lint(\n+                        MIXED_SCRIPT_CONFUSABLES,\n+                        sp,\n+                        fluent::lint::mixed_script_confusables,\n+                        |lint| {\n+                            let mut includes = String::new();\n+                            for (idx, ch) in ch_list.into_iter().enumerate() {\n+                                if idx != 0 {\n+                                    includes += \", \";\n+                                }\n+                                let char_info = format!(\"'{}' (U+{:04X})\", ch, ch as u32);\n+                                includes += &char_info;\n                             }\n-                            let char_info = format!(\"'{}' (U+{:04X})\", ch, ch as u32);\n-                            includes += &char_info;\n-                        }\n-                        lint.build(fluent::lint::mixed_script_confusables)\n-                            .set_arg(\"set\", script_set.to_string())\n-                            .set_arg(\"includes\", includes)\n-                            .note(fluent::lint::includes_note)\n-                            .note(fluent::lint::note)\n-                            .emit();\n-                    });\n+                            lint.set_arg(\"set\", script_set.to_string())\n+                                .set_arg(\"includes\", includes)\n+                                .note(fluent::lint::includes_note)\n+                                .note(fluent::lint::note)\n+                        },\n+                    );\n                 }\n             }\n         }"}, {"sha": "9d2a23f2b5fb644bfb1792556c9c898c74919528", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 55, "deletions": 49, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -119,21 +119,19 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n         arg_span = expn.call_site;\n     }\n \n-    cx.struct_span_lint(NON_FMT_PANICS, arg_span, |lint| {\n-        let mut l = lint.build(fluent::lint::non_fmt_panic);\n-        l.set_arg(\"name\", symbol);\n-        l.note(fluent::lint::note);\n-        l.note(fluent::lint::more_info_note);\n+    cx.struct_span_lint(NON_FMT_PANICS, arg_span, fluent::lint::non_fmt_panic, |lint| {\n+        lint.set_arg(\"name\", symbol);\n+        lint.note(fluent::lint::note);\n+        lint.note(fluent::lint::more_info_note);\n         if !is_arg_inside_call(arg_span, span) {\n             // No clue where this argument is coming from.\n-            l.emit();\n-            return;\n+            return lint;\n         }\n         if arg_macro.map_or(false, |id| cx.tcx.is_diagnostic_item(sym::format_macro, id)) {\n             // A case of `panic!(format!(..))`.\n-            l.note(fluent::lint::supports_fmt_note);\n+            lint.note(fluent::lint::supports_fmt_note);\n             if let Some((open, close, _)) = find_delimiters(cx, arg_span) {\n-                l.multipart_suggestion(\n+                lint.multipart_suggestion(\n                     fluent::lint::supports_fmt_suggestion,\n                     vec![\n                         (arg_span.until(open.shrink_to_hi()), \"\".into()),\n@@ -180,15 +178,15 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n             };\n \n             if suggest_display {\n-                l.span_suggestion_verbose(\n+                lint.span_suggestion_verbose(\n                     arg_span.shrink_to_lo(),\n                     fluent::lint::display_suggestion,\n                     \"\\\"{}\\\", \",\n                     fmt_applicability,\n                 );\n             } else if suggest_debug {\n-                l.set_arg(\"ty\", ty);\n-                l.span_suggestion_verbose(\n+                lint.set_arg(\"ty\", ty);\n+                lint.span_suggestion_verbose(\n                     arg_span.shrink_to_lo(),\n                     fluent::lint::debug_suggestion,\n                     \"\\\"{:?}\\\", \",\n@@ -198,8 +196,8 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n \n             if suggest_panic_any {\n                 if let Some((open, close, del)) = find_delimiters(cx, span) {\n-                    l.set_arg(\"already_suggested\", suggest_display || suggest_debug);\n-                    l.multipart_suggestion(\n+                    lint.set_arg(\"already_suggested\", suggest_display || suggest_debug);\n+                    lint.multipart_suggestion(\n                         fluent::lint::panic_suggestion,\n                         if del == '(' {\n                             vec![(span.until(open), \"std::panic::panic_any\".into())]\n@@ -214,7 +212,7 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n                 }\n             }\n         }\n-        l.emit();\n+        lint\n     });\n }\n \n@@ -258,26 +256,30 @@ fn check_panic_str<'tcx>(\n                 .map(|span| fmt_span.from_inner(InnerSpan::new(span.start, span.end)))\n                 .collect(),\n         };\n-        cx.struct_span_lint(NON_FMT_PANICS, arg_spans, |lint| {\n-            let mut l = lint.build(fluent::lint::non_fmt_panic_unused);\n-            l.set_arg(\"count\", n_arguments);\n-            l.note(fluent::lint::note);\n-            if is_arg_inside_call(arg.span, span) {\n-                l.span_suggestion(\n-                    arg.span.shrink_to_hi(),\n-                    fluent::lint::add_args_suggestion,\n-                    \", ...\",\n-                    Applicability::HasPlaceholders,\n-                );\n-                l.span_suggestion(\n-                    arg.span.shrink_to_lo(),\n-                    fluent::lint::add_fmt_suggestion,\n-                    \"\\\"{}\\\", \",\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-            l.emit();\n-        });\n+        cx.struct_span_lint(\n+            NON_FMT_PANICS,\n+            arg_spans,\n+            fluent::lint::non_fmt_panic_unused,\n+            |lint| {\n+                lint.set_arg(\"count\", n_arguments);\n+                lint.note(fluent::lint::note);\n+                if is_arg_inside_call(arg.span, span) {\n+                    lint.span_suggestion(\n+                        arg.span.shrink_to_hi(),\n+                        fluent::lint::add_args_suggestion,\n+                        \", ...\",\n+                        Applicability::HasPlaceholders,\n+                    );\n+                    lint.span_suggestion(\n+                        arg.span.shrink_to_lo(),\n+                        fluent::lint::add_fmt_suggestion,\n+                        \"\\\"{}\\\", \",\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+                lint\n+            },\n+        );\n     } else {\n         let brace_spans: Option<Vec<_>> =\n             snippet.filter(|s| s.starts_with('\"') || s.starts_with(\"r#\")).map(|s| {\n@@ -287,20 +289,24 @@ fn check_panic_str<'tcx>(\n                     .collect()\n             });\n         let count = brace_spans.as_ref().map(|v| v.len()).unwrap_or(/* any number >1 */ 2);\n-        cx.struct_span_lint(NON_FMT_PANICS, brace_spans.unwrap_or_else(|| vec![span]), |lint| {\n-            let mut l = lint.build(fluent::lint::non_fmt_panic_braces);\n-            l.set_arg(\"count\", count);\n-            l.note(fluent::lint::note);\n-            if is_arg_inside_call(arg.span, span) {\n-                l.span_suggestion(\n-                    arg.span.shrink_to_lo(),\n-                    fluent::lint::suggestion,\n-                    \"\\\"{}\\\", \",\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-            l.emit();\n-        });\n+        cx.struct_span_lint(\n+            NON_FMT_PANICS,\n+            brace_spans.unwrap_or_else(|| vec![span]),\n+            fluent::lint::non_fmt_panic_braces,\n+            |lint| {\n+                lint.set_arg(\"count\", count);\n+                lint.note(fluent::lint::note);\n+                if is_arg_inside_call(arg.span, span) {\n+                    lint.span_suggestion(\n+                        arg.span.shrink_to_lo(),\n+                        fluent::lint::suggestion,\n+                        \"\\\"{}\\\", \",\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+                lint\n+            },\n+        );\n     }\n }\n "}, {"sha": "9f800e9c8c9a19520f9c6852199b4665195ed363", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 55, "deletions": 48, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -136,26 +136,30 @@ impl NonCamelCaseTypes {\n         let name = ident.name.as_str();\n \n         if !is_camel_case(name) {\n-            cx.struct_span_lint(NON_CAMEL_CASE_TYPES, ident.span, |lint| {\n-                let mut err = lint.build(fluent::lint::non_camel_case_type);\n-                let cc = to_camel_case(name);\n-                // We cannot provide meaningful suggestions\n-                // if the characters are in the category of \"Lowercase Letter\".\n-                if *name != cc {\n-                    err.span_suggestion(\n-                        ident.span,\n-                        fluent::lint::suggestion,\n-                        to_camel_case(name),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                } else {\n-                    err.span_label(ident.span, fluent::lint::label);\n-                }\n+            cx.struct_span_lint(\n+                NON_CAMEL_CASE_TYPES,\n+                ident.span,\n+                fluent::lint::non_camel_case_type,\n+                |lint| {\n+                    let cc = to_camel_case(name);\n+                    // We cannot provide meaningful suggestions\n+                    // if the characters are in the category of \"Lowercase Letter\".\n+                    if *name != cc {\n+                        lint.span_suggestion(\n+                            ident.span,\n+                            fluent::lint::suggestion,\n+                            to_camel_case(name),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    } else {\n+                        lint.span_label(ident.span, fluent::lint::label);\n+                    }\n \n-                err.set_arg(\"sort\", sort);\n-                err.set_arg(\"name\", name);\n-                err.emit();\n-            })\n+                    lint.set_arg(\"sort\", sort);\n+                    lint.set_arg(\"name\", name);\n+                    lint\n+                },\n+            )\n         }\n     }\n }\n@@ -280,9 +284,8 @@ impl NonSnakeCase {\n         let name = ident.name.as_str();\n \n         if !is_snake_case(name) {\n-            cx.struct_span_lint(NON_SNAKE_CASE, ident.span, |lint| {\n+            cx.struct_span_lint(NON_SNAKE_CASE, ident.span, fluent::lint::non_snake_case, |lint| {\n                 let sc = NonSnakeCase::to_snake_case(name);\n-                let mut err = lint.build(fluent::lint::non_snake_case);\n                 // We cannot provide meaningful suggestions\n                 // if the characters are in the category of \"Uppercase Letter\".\n                 if name != sc {\n@@ -297,30 +300,30 @@ impl NonSnakeCase {\n                             if sc_ident.name.can_be_raw() {\n                                 (fluent::lint::rename_or_convert_suggestion, sc_ident.to_string())\n                             } else {\n-                                err.note(fluent::lint::cannot_convert_note);\n+                                lint.note(fluent::lint::cannot_convert_note);\n                                 (fluent::lint::rename_suggestion, String::new())\n                             }\n                         } else {\n                             (fluent::lint::convert_suggestion, sc.clone())\n                         };\n \n-                        err.span_suggestion(\n+                        lint.span_suggestion(\n                             ident.span,\n                             message,\n                             suggestion,\n                             Applicability::MaybeIncorrect,\n                         );\n                     } else {\n-                        err.help(fluent::lint::help);\n+                        lint.help(fluent::lint::help);\n                     }\n                 } else {\n-                    err.span_label(ident.span, fluent::lint::label);\n+                    lint.span_label(ident.span, fluent::lint::label);\n                 }\n \n-                err.set_arg(\"sort\", sort);\n-                err.set_arg(\"name\", name);\n-                err.set_arg(\"sc\", sc);\n-                err.emit();\n+                lint.set_arg(\"sort\", sort);\n+                lint.set_arg(\"name\", name);\n+                lint.set_arg(\"sc\", sc);\n+                lint\n             });\n         }\n     }\n@@ -478,26 +481,30 @@ impl NonUpperCaseGlobals {\n     fn check_upper_case(cx: &LateContext<'_>, sort: &str, ident: &Ident) {\n         let name = ident.name.as_str();\n         if name.chars().any(|c| c.is_lowercase()) {\n-            cx.struct_span_lint(NON_UPPER_CASE_GLOBALS, ident.span, |lint| {\n-                let uc = NonSnakeCase::to_snake_case(&name).to_uppercase();\n-                let mut err = lint.build(fluent::lint::non_upper_case_global);\n-                // We cannot provide meaningful suggestions\n-                // if the characters are in the category of \"Lowercase Letter\".\n-                if *name != uc {\n-                    err.span_suggestion(\n-                        ident.span,\n-                        fluent::lint::suggestion,\n-                        uc,\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                } else {\n-                    err.span_label(ident.span, fluent::lint::label);\n-                }\n+            cx.struct_span_lint(\n+                NON_UPPER_CASE_GLOBALS,\n+                ident.span,\n+                fluent::lint::non_upper_case_global,\n+                |lint| {\n+                    let uc = NonSnakeCase::to_snake_case(&name).to_uppercase();\n+                    // We cannot provide meaningful suggestions\n+                    // if the characters are in the category of \"Lowercase Letter\".\n+                    if *name != uc {\n+                        lint.span_suggestion(\n+                            ident.span,\n+                            fluent::lint::suggestion,\n+                            uc,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    } else {\n+                        lint.span_label(ident.span, fluent::lint::label);\n+                    }\n \n-                err.set_arg(\"sort\", sort);\n-                err.set_arg(\"name\", name);\n-                err.emit();\n-            })\n+                    lint.set_arg(\"sort\", sort);\n+                    lint.set_arg(\"name\", name);\n+                    lint\n+                },\n+            )\n         }\n     }\n }"}, {"sha": "19188d5c376513a418f392aee7f8baa4c7d4de38", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -90,13 +90,11 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n         }\n         let expr_span = expr.span;\n         let span = expr_span.with_lo(receiver.span.hi());\n-        cx.struct_span_lint(NOOP_METHOD_CALL, span, |lint| {\n-            lint.build(fluent::lint::noop_method_call)\n-                .set_arg(\"method\", call.ident.name)\n+        cx.struct_span_lint(NOOP_METHOD_CALL, span, fluent::lint::noop_method_call, |lint| {\n+            lint.set_arg(\"method\", call.ident.name)\n                 .set_arg(\"receiver_ty\", receiver_ty)\n                 .span_label(span, fluent::lint::label)\n                 .note(fluent::lint::note)\n-                .emit();\n         });\n     }\n }"}, {"sha": "349399b5964942dffa97e87212ccb8a8f10c2914", "filename": "compiler/rustc_lint/src/pass_by_value.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -29,18 +29,20 @@ impl<'tcx> LateLintPass<'tcx> for PassByValue {\n                     }\n                 }\n                 if let Some(t) = path_for_pass_by_value(cx, &inner_ty) {\n-                    cx.struct_span_lint(PASS_BY_VALUE, ty.span, |lint| {\n-                        lint.build(fluent::lint::pass_by_value)\n-                            .set_arg(\"ty\", t.clone())\n-                            .span_suggestion(\n+                    cx.struct_span_lint(\n+                        PASS_BY_VALUE,\n+                        ty.span,\n+                        fluent::lint::pass_by_value,\n+                        |lint| {\n+                            lint.set_arg(\"ty\", t.clone()).span_suggestion(\n                                 ty.span,\n                                 fluent::lint::suggestion,\n                                 t,\n                                 // Changing type of function argument\n                                 Applicability::MaybeIncorrect,\n                             )\n-                            .emit();\n-                    })\n+                        },\n+                    )\n                 }\n             }\n             _ => {}"}, {"sha": "46c84550e9f5f758b5be45d31fa13044b6b9d35f", "filename": "compiler/rustc_lint/src/redundant_semicolon.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fredundant_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Fredundant_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fredundant_semicolon.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -48,11 +48,18 @@ fn maybe_lint_redundant_semis(cx: &EarlyContext<'_>, seq: &mut Option<(Span, boo\n             return;\n         }\n \n-        cx.struct_span_lint(REDUNDANT_SEMICOLONS, span, |lint| {\n-            lint.build(fluent::lint::redundant_semicolons)\n-                .set_arg(\"multiple\", multiple)\n-                .span_suggestion(span, fluent::lint::suggestion, \"\", Applicability::MaybeIncorrect)\n-                .emit();\n-        });\n+        cx.struct_span_lint(\n+            REDUNDANT_SEMICOLONS,\n+            span,\n+            fluent::lint::redundant_semicolons,\n+            |lint| {\n+                lint.set_arg(\"multiple\", multiple).span_suggestion(\n+                    span,\n+                    fluent::lint::suggestion,\n+                    \"\",\n+                    Applicability::MaybeIncorrect,\n+                )\n+            },\n+        );\n     }\n }"}, {"sha": "078465bdce675548f132ce4aa32cd162fba03f02", "filename": "compiler/rustc_lint/src/traits.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -100,15 +100,18 @@ impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n                 if trait_predicate.trait_ref.self_ty().is_impl_trait() {\n                     continue;\n                 }\n-                cx.struct_span_lint(DROP_BOUNDS, span, |lint| {\n-                    let Some(needs_drop) = cx.tcx.get_diagnostic_item(sym::needs_drop) else {\n-                        return\n-                    };\n-                    lint.build(fluent::lint::drop_trait_constraints)\n-                        .set_arg(\"predicate\", predicate)\n-                        .set_arg(\"needs_drop\", cx.tcx.def_path_str(needs_drop))\n-                        .emit();\n-                });\n+                let Some(needs_drop) = cx.tcx.get_diagnostic_item(sym::needs_drop) else {\n+                    continue;\n+                };\n+                cx.struct_span_lint(\n+                    DROP_BOUNDS,\n+                    span,\n+                    fluent::lint::drop_trait_constraints,\n+                    |lint| {\n+                        lint.set_arg(\"predicate\", predicate)\n+                            .set_arg(\"needs_drop\", cx.tcx.def_path_str(needs_drop))\n+                    },\n+                );\n             }\n         }\n     }\n@@ -119,14 +122,11 @@ impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n         };\n         for bound in &bounds[..] {\n             let def_id = bound.trait_ref.trait_def_id();\n-            if cx.tcx.lang_items().drop_trait() == def_id {\n-                cx.struct_span_lint(DYN_DROP, bound.span, |lint| {\n-                    let Some(needs_drop) = cx.tcx.get_diagnostic_item(sym::needs_drop) else {\n-                        return\n-                    };\n-                    lint.build(fluent::lint::drop_glue)\n-                        .set_arg(\"needs_drop\", cx.tcx.def_path_str(needs_drop))\n-                        .emit();\n+            if cx.tcx.lang_items().drop_trait() == def_id\n+                && let Some(needs_drop) = cx.tcx.get_diagnostic_item(sym::needs_drop)\n+            {\n+                cx.struct_span_lint(DYN_DROP, bound.span, fluent::lint::drop_glue, |lint| {\n+                    lint.set_arg(\"needs_drop\", cx.tcx.def_path_str(needs_drop))\n                 });\n             }\n         }"}, {"sha": "b6009bd800a5f1b66d05b7f748b835cff5cccd7e", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 132, "deletions": 125, "changes": 257, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -144,12 +144,18 @@ fn lint_overflowing_range_endpoint<'tcx>(\n     // We can suggest using an inclusive range\n     // (`..=`) instead only if it is the `end` that is\n     // overflowing and only by 1.\n-    if eps[1].expr.hir_id == expr.hir_id && lit_val - 1 == max {\n-        cx.struct_span_lint(OVERFLOWING_LITERALS, struct_expr.span, |lint| {\n-            let mut err = lint.build(fluent::lint::range_endpoint_out_of_range);\n-            err.set_arg(\"ty\", ty);\n-            if let Ok(start) = cx.sess().source_map().span_to_snippet(eps[0].span) {\n+    if eps[1].expr.hir_id == expr.hir_id && lit_val - 1 == max\n+        && let Ok(start) = cx.sess().source_map().span_to_snippet(eps[0].span)\n+    {\n+        cx.struct_span_lint(\n+            OVERFLOWING_LITERALS,\n+            struct_expr.span,\n+            fluent::lint::range_endpoint_out_of_range,\n+            |lint| {\n                 use ast::{LitIntType, LitKind};\n+\n+                lint.set_arg(\"ty\", ty);\n+\n                 // We need to preserve the literal's suffix,\n                 // as it may determine typing information.\n                 let suffix = match lit.node {\n@@ -159,16 +165,17 @@ fn lint_overflowing_range_endpoint<'tcx>(\n                     _ => bug!(),\n                 };\n                 let suggestion = format!(\"{}..={}{}\", start, lit_val - 1, suffix);\n-                err.span_suggestion(\n+                lint.span_suggestion(\n                     struct_expr.span,\n                     fluent::lint::suggestion,\n                     suggestion,\n                     Applicability::MachineApplicable,\n                 );\n-                err.emit();\n                 overwritten = true;\n-            }\n-        });\n+\n+                lint\n+            },\n+        );\n     }\n     overwritten\n }\n@@ -221,52 +228,58 @@ fn report_bin_hex_error(\n     negative: bool,\n ) {\n     let size = Integer::from_attr(&cx.tcx, ty).size();\n-    cx.struct_span_lint(OVERFLOWING_LITERALS, expr.span, |lint| {\n-        let (t, actually) = match ty {\n-            attr::IntType::SignedInt(t) => {\n-                let actually = if negative {\n-                    -(size.sign_extend(val) as i128)\n-                } else {\n-                    size.sign_extend(val) as i128\n-                };\n-                (t.name_str(), actually.to_string())\n-            }\n-            attr::IntType::UnsignedInt(t) => {\n-                let actually = size.truncate(val);\n-                (t.name_str(), actually.to_string())\n-            }\n-        };\n-        let mut err = lint.build(fluent::lint::overflowing_bin_hex);\n-        if negative {\n-            // If the value is negative,\n-            // emits a note about the value itself, apart from the literal.\n-            err.note(fluent::lint::negative_note);\n-            err.note(fluent::lint::negative_becomes_note);\n-        } else {\n-            err.note(fluent::lint::positive_note);\n-        }\n-        if let Some(sugg_ty) =\n-            get_type_suggestion(cx.typeck_results().node_type(expr.hir_id), val, negative)\n-        {\n-            err.set_arg(\"suggestion_ty\", sugg_ty);\n-            if let Some(pos) = repr_str.chars().position(|c| c == 'i' || c == 'u') {\n-                let (sans_suffix, _) = repr_str.split_at(pos);\n-                err.span_suggestion(\n-                    expr.span,\n-                    fluent::lint::suggestion,\n-                    format!(\"{}{}\", sans_suffix, sugg_ty),\n-                    Applicability::MachineApplicable,\n-                );\n+    cx.struct_span_lint(\n+        OVERFLOWING_LITERALS,\n+        expr.span,\n+        fluent::lint::overflowing_bin_hex,\n+        |lint| {\n+            let (t, actually) = match ty {\n+                attr::IntType::SignedInt(t) => {\n+                    let actually = if negative {\n+                        -(size.sign_extend(val) as i128)\n+                    } else {\n+                        size.sign_extend(val) as i128\n+                    };\n+                    (t.name_str(), actually.to_string())\n+                }\n+                attr::IntType::UnsignedInt(t) => {\n+                    let actually = size.truncate(val);\n+                    (t.name_str(), actually.to_string())\n+                }\n+            };\n+\n+            if negative {\n+                // If the value is negative,\n+                // emits a note about the value itself, apart from the literal.\n+                lint.note(fluent::lint::negative_note);\n+                lint.note(fluent::lint::negative_becomes_note);\n             } else {\n-                err.help(fluent::lint::help);\n+                lint.note(fluent::lint::positive_note);\n             }\n-        }\n-        err.set_arg(\"ty\", t);\n-        err.set_arg(\"lit\", repr_str);\n-        err.set_arg(\"dec\", val);\n-        err.set_arg(\"actually\", actually);\n-        err.emit();\n-    });\n+            if let Some(sugg_ty) =\n+                get_type_suggestion(cx.typeck_results().node_type(expr.hir_id), val, negative)\n+            {\n+                lint.set_arg(\"suggestion_ty\", sugg_ty);\n+                if let Some(pos) = repr_str.chars().position(|c| c == 'i' || c == 'u') {\n+                    let (sans_suffix, _) = repr_str.split_at(pos);\n+                    lint.span_suggestion(\n+                        expr.span,\n+                        fluent::lint::suggestion,\n+                        format!(\"{}{}\", sans_suffix, sugg_ty),\n+                        Applicability::MachineApplicable,\n+                    );\n+                } else {\n+                    lint.help(fluent::lint::help);\n+                }\n+            }\n+            lint.set_arg(\"ty\", t)\n+                .set_arg(\"lit\", repr_str)\n+                .set_arg(\"dec\", val)\n+                .set_arg(\"actually\", actually);\n+\n+            lint\n+        },\n+    );\n }\n \n // This function finds the next fitting type and generates a suggestion string.\n@@ -349,26 +362,27 @@ fn lint_int_literal<'tcx>(\n             return;\n         }\n \n-        cx.struct_span_lint(OVERFLOWING_LITERALS, e.span, |lint| {\n-            let mut err = lint.build(fluent::lint::overflowing_int);\n-            err.set_arg(\"ty\", t.name_str());\n-            err.set_arg(\n-                \"lit\",\n-                cx.sess()\n-                    .source_map()\n-                    .span_to_snippet(lit.span)\n-                    .expect(\"must get snippet from literal\"),\n-            );\n-            err.set_arg(\"min\", min);\n-            err.set_arg(\"max\", max);\n-            err.note(fluent::lint::note);\n+        cx.struct_span_lint(OVERFLOWING_LITERALS, e.span, fluent::lint::overflowing_int, |lint| {\n+            lint.set_arg(\"ty\", t.name_str())\n+                .set_arg(\n+                    \"lit\",\n+                    cx.sess()\n+                        .source_map()\n+                        .span_to_snippet(lit.span)\n+                        .expect(\"must get snippet from literal\"),\n+                )\n+                .set_arg(\"min\", min)\n+                .set_arg(\"max\", max)\n+                .note(fluent::lint::note);\n+\n             if let Some(sugg_ty) =\n                 get_type_suggestion(cx.typeck_results().node_type(e.hir_id), v, negative)\n             {\n-                err.set_arg(\"suggestion_ty\", sugg_ty);\n-                err.help(fluent::lint::help);\n+                lint.set_arg(\"suggestion_ty\", sugg_ty);\n+                lint.help(fluent::lint::help);\n             }\n-            err.emit();\n+\n+            lint\n         });\n     }\n }\n@@ -393,16 +407,19 @@ fn lint_uint_literal<'tcx>(\n             match par_e.kind {\n                 hir::ExprKind::Cast(..) => {\n                     if let ty::Char = cx.typeck_results().expr_ty(par_e).kind() {\n-                        cx.struct_span_lint(OVERFLOWING_LITERALS, par_e.span, |lint| {\n-                            lint.build(fluent::lint::only_cast_u8_to_char)\n-                                .span_suggestion(\n+                        cx.struct_span_lint(\n+                            OVERFLOWING_LITERALS,\n+                            par_e.span,\n+                            fluent::lint::only_cast_u8_to_char,\n+                            |lint| {\n+                                lint.span_suggestion(\n                                     par_e.span,\n                                     fluent::lint::suggestion,\n                                     format!(\"'\\\\u{{{:X}}}'\", lit_val),\n                                     Applicability::MachineApplicable,\n                                 )\n-                                .emit();\n-                        });\n+                            },\n+                        );\n                         return;\n                     }\n                 }\n@@ -424,9 +441,8 @@ fn lint_uint_literal<'tcx>(\n             );\n             return;\n         }\n-        cx.struct_span_lint(OVERFLOWING_LITERALS, e.span, |lint| {\n-            lint.build(fluent::lint::overflowing_uint)\n-                .set_arg(\"ty\", t.name_str())\n+        cx.struct_span_lint(OVERFLOWING_LITERALS, e.span, fluent::lint::overflowing_uint, |lint| {\n+            lint.set_arg(\"ty\", t.name_str())\n                 .set_arg(\n                     \"lit\",\n                     cx.sess()\n@@ -437,7 +453,6 @@ fn lint_uint_literal<'tcx>(\n                 .set_arg(\"min\", min)\n                 .set_arg(\"max\", max)\n                 .note(fluent::lint::note)\n-                .emit();\n         });\n     }\n }\n@@ -467,19 +482,22 @@ fn lint_literal<'tcx>(\n                 _ => bug!(),\n             };\n             if is_infinite == Ok(true) {\n-                cx.struct_span_lint(OVERFLOWING_LITERALS, e.span, |lint| {\n-                    lint.build(fluent::lint::overflowing_literal)\n-                        .set_arg(\"ty\", t.name_str())\n-                        .set_arg(\n-                            \"lit\",\n-                            cx.sess()\n-                                .source_map()\n-                                .span_to_snippet(lit.span)\n-                                .expect(\"must get snippet from literal\"),\n-                        )\n-                        .note(fluent::lint::note)\n-                        .emit();\n-                });\n+                cx.struct_span_lint(\n+                    OVERFLOWING_LITERALS,\n+                    e.span,\n+                    fluent::lint::overflowing_literal,\n+                    |lint| {\n+                        lint.set_arg(\"ty\", t.name_str())\n+                            .set_arg(\n+                                \"lit\",\n+                                cx.sess()\n+                                    .source_map()\n+                                    .span_to_snippet(lit.span)\n+                                    .expect(\"must get snippet from literal\"),\n+                            )\n+                            .note(fluent::lint::note)\n+                    },\n+                );\n             }\n         }\n         _ => {}\n@@ -497,9 +515,12 @@ impl<'tcx> LateLintPass<'tcx> for TypeLimits {\n             }\n             hir::ExprKind::Binary(binop, ref l, ref r) => {\n                 if is_comparison(binop) && !check_limits(cx, binop, &l, &r) {\n-                    cx.struct_span_lint(UNUSED_COMPARISONS, e.span, |lint| {\n-                        lint.build(fluent::lint::unused_comparisons).emit();\n-                    });\n+                    cx.struct_span_lint(\n+                        UNUSED_COMPARISONS,\n+                        e.span,\n+                        fluent::lint::unused_comparisons,\n+                        |lint| lint,\n+                    );\n                 }\n             }\n             hir::ExprKind::Lit(ref lit) => lint_literal(cx, self, e, lit),\n@@ -1150,25 +1171,24 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             CItemKind::Definition => IMPROPER_CTYPES_DEFINITIONS,\n         };\n \n-        self.cx.struct_span_lint(lint, sp, |lint| {\n+        self.cx.struct_span_lint(lint, sp, fluent::lint::improper_ctypes, |lint| {\n             let item_description = match self.mode {\n                 CItemKind::Declaration => \"block\",\n                 CItemKind::Definition => \"fn\",\n             };\n-            let mut diag = lint.build(fluent::lint::improper_ctypes);\n-            diag.set_arg(\"ty\", ty);\n-            diag.set_arg(\"desc\", item_description);\n-            diag.span_label(sp, fluent::lint::label);\n+            lint.set_arg(\"ty\", ty);\n+            lint.set_arg(\"desc\", item_description);\n+            lint.span_label(sp, fluent::lint::label);\n             if let Some(help) = help {\n-                diag.help(help);\n+                lint.help(help);\n             }\n-            diag.note(note);\n+            lint.note(note);\n             if let ty::Adt(def, _) = ty.kind() {\n                 if let Some(sp) = self.cx.tcx.hir().span_if_local(def.did()) {\n-                    diag.span_note(sp, fluent::lint::note);\n+                    lint.span_note(sp, fluent::lint::note);\n                 }\n             }\n-            diag.emit();\n+            lint\n         });\n     }\n \n@@ -1381,11 +1401,8 @@ impl<'tcx> LateLintPass<'tcx> for VariantSizeDifferences {\n                 cx.struct_span_lint(\n                     VARIANT_SIZE_DIFFERENCES,\n                     enum_definition.variants[largest_index].span,\n-                    |lint| {\n-                        lint.build(fluent::lint::variant_size_differences)\n-                            .set_arg(\"largest\", largest)\n-                            .emit();\n-                    },\n+                    fluent::lint::variant_size_differences,\n+                    |lint| lint.set_arg(\"largest\", largest),\n                 );\n             }\n         }\n@@ -1493,25 +1510,16 @@ impl InvalidAtomicOrdering {\n \n     fn check_atomic_load_store(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if let Some((method, args)) = Self::inherent_atomic_method_call(cx, expr, &[sym::load, sym::store])\n-            && let Some((ordering_arg, invalid_ordering)) = match method {\n-                sym::load => Some((&args[0], sym::Release)),\n-                sym::store => Some((&args[1], sym::Acquire)),\n+            && let Some((ordering_arg, invalid_ordering, msg)) = match method {\n+                sym::load => Some((&args[0], sym::Release, fluent::lint::atomic_ordering_load)),\n+                sym::store => Some((&args[1], sym::Acquire, fluent::lint::atomic_ordering_store)),\n                 _ => None,\n             }\n             && let Some(ordering) = Self::match_ordering(cx, ordering_arg)\n             && (ordering == invalid_ordering || ordering == sym::AcqRel)\n         {\n-            cx.struct_span_lint(INVALID_ATOMIC_ORDERING, ordering_arg.span, |diag| {\n-                if method == sym::load {\n-                    diag.build(fluent::lint::atomic_ordering_load)\n-                        .help(fluent::lint::help)\n-                        .emit()\n-                } else {\n-                    debug_assert_eq!(method, sym::store);\n-                    diag.build(fluent::lint::atomic_ordering_store)\n-                        .help(fluent::lint::help)\n-                        .emit();\n-                }\n+            cx.struct_span_lint(INVALID_ATOMIC_ORDERING, ordering_arg.span, msg, |lint| {\n+                lint.help(fluent::lint::help)\n             });\n         }\n     }\n@@ -1523,10 +1531,9 @@ impl InvalidAtomicOrdering {\n             && matches!(cx.tcx.get_diagnostic_name(def_id), Some(sym::fence | sym::compiler_fence))\n             && Self::match_ordering(cx, &args[0]) == Some(sym::Relaxed)\n         {\n-            cx.struct_span_lint(INVALID_ATOMIC_ORDERING, args[0].span, |diag| {\n-                diag.build(fluent::lint::atomic_ordering_fence)\n+            cx.struct_span_lint(INVALID_ATOMIC_ORDERING, args[0].span, fluent::lint::atomic_ordering_fence, |lint| {\n+                lint\n                     .help(fluent::lint::help)\n-                    .emit();\n             });\n         }\n     }"}, {"sha": "787c9518b50893165ddd1091ce53b8b230dbf0a3", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 82, "deletions": 66, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -154,24 +154,22 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n         };\n \n         if let Some(must_use_op) = must_use_op {\n-            cx.struct_span_lint(UNUSED_MUST_USE, expr.span, |lint| {\n-                lint.build(fluent::lint::unused_op)\n-                    .set_arg(\"op\", must_use_op)\n+            cx.struct_span_lint(UNUSED_MUST_USE, expr.span, fluent::lint::unused_op, |lint| {\n+                lint.set_arg(\"op\", must_use_op)\n                     .span_label(expr.span, fluent::lint::label)\n                     .span_suggestion_verbose(\n                         expr.span.shrink_to_lo(),\n                         fluent::lint::suggestion,\n                         \"let _ = \",\n                         Applicability::MachineApplicable,\n                     )\n-                    .emit();\n             });\n             op_warned = true;\n         }\n \n         if !(type_permits_lack_of_use || fn_warned || op_warned) {\n-            cx.struct_span_lint(UNUSED_RESULTS, s.span, |lint| {\n-                lint.build(fluent::lint::unused_result).set_arg(\"ty\", ty).emit();\n+            cx.struct_span_lint(UNUSED_RESULTS, s.span, fluent::lint::unused_result, |lint| {\n+                lint.set_arg(\"ty\", ty)\n             });\n         }\n \n@@ -267,29 +265,35 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                     }\n                 },\n                 ty::Closure(..) => {\n-                    cx.struct_span_lint(UNUSED_MUST_USE, span, |lint| {\n-                        // FIXME(davidtwco): this isn't properly translatable because of the\n-                        // pre/post strings\n-                        lint.build(fluent::lint::unused_closure)\n-                            .set_arg(\"count\", plural_len)\n-                            .set_arg(\"pre\", descr_pre)\n-                            .set_arg(\"post\", descr_post)\n-                            .note(fluent::lint::note)\n-                            .emit();\n-                    });\n+                    cx.struct_span_lint(\n+                        UNUSED_MUST_USE,\n+                        span,\n+                        fluent::lint::unused_closure,\n+                        |lint| {\n+                            // FIXME(davidtwco): this isn't properly translatable because of the\n+                            // pre/post strings\n+                            lint.set_arg(\"count\", plural_len)\n+                                .set_arg(\"pre\", descr_pre)\n+                                .set_arg(\"post\", descr_post)\n+                                .note(fluent::lint::note)\n+                        },\n+                    );\n                     true\n                 }\n                 ty::Generator(..) => {\n-                    cx.struct_span_lint(UNUSED_MUST_USE, span, |lint| {\n-                        // FIXME(davidtwco): this isn't properly translatable because of the\n-                        // pre/post strings\n-                        lint.build(fluent::lint::unused_generator)\n-                            .set_arg(\"count\", plural_len)\n-                            .set_arg(\"pre\", descr_pre)\n-                            .set_arg(\"post\", descr_post)\n-                            .note(fluent::lint::note)\n-                            .emit();\n-                    });\n+                    cx.struct_span_lint(\n+                        UNUSED_MUST_USE,\n+                        span,\n+                        fluent::lint::unused_generator,\n+                        |lint| {\n+                            // FIXME(davidtwco): this isn't properly translatable because of the\n+                            // pre/post strings\n+                            lint.set_arg(\"count\", plural_len)\n+                                .set_arg(\"pre\", descr_pre)\n+                                .set_arg(\"post\", descr_post)\n+                                .note(fluent::lint::note)\n+                        },\n+                    );\n                     true\n                 }\n                 _ => false,\n@@ -309,18 +313,17 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n             descr_post_path: &str,\n         ) -> bool {\n             if let Some(attr) = cx.tcx.get_attr(def_id, sym::must_use) {\n-                cx.struct_span_lint(UNUSED_MUST_USE, span, |lint| {\n+                cx.struct_span_lint(UNUSED_MUST_USE, span, fluent::lint::unused_def, |lint| {\n                     // FIXME(davidtwco): this isn't properly translatable because of the pre/post\n                     // strings\n-                    let mut err = lint.build(fluent::lint::unused_def);\n-                    err.set_arg(\"pre\", descr_pre_path);\n-                    err.set_arg(\"post\", descr_post_path);\n-                    err.set_arg(\"def\", cx.tcx.def_path_str(def_id));\n+                    lint.set_arg(\"pre\", descr_pre_path);\n+                    lint.set_arg(\"post\", descr_post_path);\n+                    lint.set_arg(\"def\", cx.tcx.def_path_str(def_id));\n                     // check for #[must_use = \"...\"]\n                     if let Some(note) = attr.value_str() {\n-                        err.note(note.as_str());\n+                        lint.note(note.as_str());\n                     }\n-                    err.emit();\n+                    lint\n                 });\n                 true\n             } else {\n@@ -357,25 +360,34 @@ impl<'tcx> LateLintPass<'tcx> for PathStatements {\n     fn check_stmt(&mut self, cx: &LateContext<'_>, s: &hir::Stmt<'_>) {\n         if let hir::StmtKind::Semi(expr) = s.kind {\n             if let hir::ExprKind::Path(_) = expr.kind {\n-                cx.struct_span_lint(PATH_STATEMENTS, s.span, |lint| {\n-                    let ty = cx.typeck_results().expr_ty(expr);\n-                    if ty.needs_drop(cx.tcx, cx.param_env) {\n-                        let mut lint = lint.build(fluent::lint::path_statement_drop);\n-                        if let Ok(snippet) = cx.sess().source_map().span_to_snippet(expr.span) {\n-                            lint.span_suggestion(\n-                                s.span,\n-                                fluent::lint::suggestion,\n-                                format!(\"drop({});\", snippet),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        } else {\n-                            lint.span_help(s.span, fluent::lint::suggestion);\n-                        }\n-                        lint.emit();\n-                    } else {\n-                        lint.build(fluent::lint::path_statement_no_effect).emit();\n-                    }\n-                });\n+                let ty = cx.typeck_results().expr_ty(expr);\n+                if ty.needs_drop(cx.tcx, cx.param_env) {\n+                    cx.struct_span_lint(\n+                        PATH_STATEMENTS,\n+                        s.span,\n+                        fluent::lint::path_statement_drop,\n+                        |lint| {\n+                            if let Ok(snippet) = cx.sess().source_map().span_to_snippet(expr.span) {\n+                                lint.span_suggestion(\n+                                    s.span,\n+                                    fluent::lint::suggestion,\n+                                    format!(\"drop({});\", snippet),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            } else {\n+                                lint.span_help(s.span, fluent::lint::suggestion);\n+                            }\n+                            lint\n+                        },\n+                    );\n+                } else {\n+                    cx.struct_span_lint(\n+                        PATH_STATEMENTS,\n+                        s.span,\n+                        fluent::lint::path_statement_no_effect,\n+                        |lint| lint,\n+                    );\n+                }\n             }\n         }\n     }\n@@ -545,22 +557,21 @@ trait UnusedDelimLint {\n         } else {\n             MultiSpan::from(value_span)\n         };\n-        cx.struct_span_lint(self.lint(), primary_span, |lint| {\n-            let mut db = lint.build(fluent::lint::unused_delim);\n-            db.set_arg(\"delim\", Self::DELIM_STR);\n-            db.set_arg(\"item\", msg);\n+        cx.struct_span_lint(self.lint(), primary_span, fluent::lint::unused_delim, |lint| {\n+            lint.set_arg(\"delim\", Self::DELIM_STR);\n+            lint.set_arg(\"item\", msg);\n             if let Some((lo, hi)) = spans {\n                 let replacement = vec![\n                     (lo, if keep_space.0 { \" \".into() } else { \"\".into() }),\n                     (hi, if keep_space.1 { \" \".into() } else { \"\".into() }),\n                 ];\n-                db.multipart_suggestion(\n+                lint.multipart_suggestion(\n                     fluent::lint::suggestion,\n                     replacement,\n                     Applicability::MachineApplicable,\n                 );\n             }\n-            db.emit();\n+            lint\n         });\n     }\n \n@@ -1128,9 +1139,12 @@ impl UnusedImportBraces {\n                 ast::UseTreeKind::Nested(_) => return,\n             };\n \n-            cx.struct_span_lint(UNUSED_IMPORT_BRACES, item.span, |lint| {\n-                lint.build(fluent::lint::unused_import_braces).set_arg(\"node\", node_name).emit();\n-            });\n+            cx.struct_span_lint(\n+                UNUSED_IMPORT_BRACES,\n+                item.span,\n+                fluent::lint::unused_import_braces,\n+                |lint| lint.set_arg(\"node\", node_name),\n+            );\n         }\n     }\n }\n@@ -1179,15 +1193,17 @@ impl<'tcx> LateLintPass<'tcx> for UnusedAllocation {\n \n         for adj in cx.typeck_results().expr_adjustments(e) {\n             if let adjustment::Adjust::Borrow(adjustment::AutoBorrow::Ref(_, m)) = adj.kind {\n-                cx.struct_span_lint(UNUSED_ALLOCATION, e.span, |lint| {\n-                    lint.build(match m {\n+                cx.struct_span_lint(\n+                    UNUSED_ALLOCATION,\n+                    e.span,\n+                    match m {\n                         adjustment::AutoBorrowMutability::Not => fluent::lint::unused_allocation,\n                         adjustment::AutoBorrowMutability::Mut { .. } => {\n                             fluent::lint::unused_allocation_mut\n                         }\n-                    })\n-                    .emit();\n-                });\n+                    },\n+                    |lint| lint,\n+                );\n             }\n         }\n     }"}, {"sha": "3a0bd1ba50d3ba4b27f21d1e38558ebee8d8a851", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -96,38 +96,43 @@ impl<'a> LintDiagnosticDerive<'a> {\n             let body = builder.body(&variant);\n \n             let diag = &builder.parent.diag;\n-            let init = match builder.slug.value_ref() {\n+\n+            quote! {\n+                #preamble\n+                #body\n+                #diag\n+            }\n+        });\n+\n+        let msg = builder.each_variant(&mut structure, |mut builder, variant| {\n+            // HACK(wafflelapkin): initialize slug (???)\n+            let _preamble = builder.preamble(&variant);\n+\n+            match builder.slug.value_ref() {\n                 None => {\n                     span_err(builder.span, \"diagnostic slug not specified\")\n                         .help(&format!(\n                             \"specify the slug as the first argument to the attribute, such as \\\n-                             `#[diag(typeck::example_error)]`\",\n+                            `#[diag(typeck::example_error)]`\",\n                         ))\n                         .emit();\n                     return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n                 }\n-                Some(slug) => {\n-                    quote! {\n-                        let mut #diag = #diag.build(rustc_errors::fluent::#slug);\n-                    }\n-                }\n-            };\n-\n-            quote! {\n-                #init\n-                #preamble\n-                #body\n-                #diag.emit();\n+                Some(slug) => quote! { rustc_errors::fluent::#slug.into() },\n             }\n         });\n \n         let diag = &builder.diag;\n         structure.gen_impl(quote! {\n             gen impl<'__a> rustc_errors::DecorateLint<'__a, ()> for @Self {\n-                fn decorate_lint(self, #diag: rustc_errors::LintDiagnosticBuilder<'__a, ()>) {\n+                fn decorate_lint<'__b>(self, #diag: &'__b mut rustc_errors::DiagnosticBuilder<'__a, ()>) -> &'__b mut rustc_errors::DiagnosticBuilder<'__a, ()> {\n                     use rustc_errors::IntoDiagnosticArg;\n                     #implementation\n                 }\n+\n+                fn msg(&self) -> rustc_errors::DiagnosticMessage {\n+                    #msg\n+                }\n             }\n         })\n     }"}, {"sha": "328b7ad6a495404d80b5614bcd804d60ccbfb6f7", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -2,7 +2,7 @@ use std::cmp;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_errors::{Diagnostic, DiagnosticId, LintDiagnosticBuilder, MultiSpan};\n+use rustc_errors::{Diagnostic, DiagnosticBuilder, DiagnosticId, DiagnosticMessage, MultiSpan};\n use rustc_hir::HirId;\n use rustc_index::vec::IndexVec;\n use rustc_query_system::ich::StableHashingContext;\n@@ -283,7 +283,11 @@ pub fn struct_lint_level<'s, 'd>(\n     level: Level,\n     src: LintLevelSource,\n     span: Option<MultiSpan>,\n-    decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>) + 'd,\n+    msg: impl Into<DiagnosticMessage>,\n+    decorate: impl 'd\n+    + for<'a, 'b> FnOnce(\n+        &'b mut DiagnosticBuilder<'a, ()>,\n+    ) -> &'b mut DiagnosticBuilder<'a, ()>,\n ) {\n     // Avoid codegen bloat from monomorphization by immediately doing dyn dispatch of `decorate` to\n     // the \"real\" work.\n@@ -293,7 +297,13 @@ pub fn struct_lint_level<'s, 'd>(\n         level: Level,\n         src: LintLevelSource,\n         span: Option<MultiSpan>,\n-        decorate: Box<dyn for<'b> FnOnce(LintDiagnosticBuilder<'b, ()>) + 'd>,\n+        msg: impl Into<DiagnosticMessage>,\n+        decorate: Box<\n+            dyn 'd\n+                + for<'a, 'b> FnOnce(\n+                    &'b mut DiagnosticBuilder<'a, ()>,\n+                ) -> &'b mut DiagnosticBuilder<'a, ()>,\n+        >,\n     ) {\n         // Check for future incompatibility lints and issue a stronger warning.\n         let future_incompatible = lint.future_incompatible;\n@@ -344,6 +354,9 @@ pub fn struct_lint_level<'s, 'd>(\n             (Level::Deny | Level::Forbid, None) => sess.diagnostic().struct_err_lint(\"\"),\n         };\n \n+        err.set_primary_message(msg);\n+        err.set_is_lint();\n+\n         // If this code originates in a foreign macro, aka something that this crate\n         // did not itself author, then it's likely that there's nothing this crate\n         // can do about it. We probably want to skip the lint entirely.\n@@ -373,12 +386,12 @@ pub fn struct_lint_level<'s, 'd>(\n         if let Level::Expect(_) = level {\n             let name = lint.name_lower();\n             err.code(DiagnosticId::Lint { name, has_future_breakage, is_force_warn: false });\n-            decorate(LintDiagnosticBuilder::new(err));\n+\n+            decorate(&mut err);\n+            err.emit();\n             return;\n         }\n \n-        explain_lint_level_source(lint, level, src, &mut err);\n-\n         let name = lint.name_lower();\n         let is_force_warn = matches!(level, Level::ForceWarn(_));\n         err.code(DiagnosticId::Lint { name, has_future_breakage, is_force_warn });\n@@ -417,10 +430,12 @@ pub fn struct_lint_level<'s, 'd>(\n             }\n         }\n \n-        // Finally, run `decorate`. This function is also responsible for emitting the diagnostic.\n-        decorate(LintDiagnosticBuilder::new(err));\n+        // Finally, run `decorate`.\n+        decorate(&mut err);\n+        explain_lint_level_source(lint, level, src, &mut *err);\n+        err.emit()\n     }\n-    struct_lint_level_impl(sess, lint, level, src, span, Box::new(decorate))\n+    struct_lint_level_impl(sess, lint, level, src, span, msg, Box::new(decorate))\n }\n \n /// Returns whether `span` originates in a foreign crate's external macro."}, {"sha": "61bc089e431bb4e407d38337bc364629ab20d3aa", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -253,13 +253,12 @@ fn late_report_deprecation(\n         return;\n     }\n     let method_span = method_span.unwrap_or(span);\n-    tcx.struct_span_lint_hir(lint, hir_id, method_span, |lint| {\n-        let mut diag = lint.build(message);\n+    tcx.struct_span_lint_hir(lint, hir_id, method_span, message, |diag| {\n         if let hir::Node::Expr(_) = tcx.hir().get(hir_id) {\n             let kind = tcx.def_kind(def_id).descr(def_id);\n-            deprecation_suggestion(&mut diag, kind, suggestion, method_span);\n+            deprecation_suggestion(diag, kind, suggestion, method_span);\n         }\n-        diag.emit();\n+        diag\n     });\n }\n \n@@ -621,9 +620,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         unmarked: impl FnOnce(Span, DefId),\n     ) -> bool {\n         let soft_handler = |lint, span, msg: &_| {\n-            self.struct_span_lint_hir(lint, id.unwrap_or(hir::CRATE_HIR_ID), span, |lint| {\n-                lint.build(msg).emit();\n-            })\n+            self.struct_span_lint_hir(lint, id.unwrap_or(hir::CRATE_HIR_ID), span, msg, |lint| lint)\n         };\n         let eval_result =\n             self.eval_stability_allow_unstable(def_id, id, span, method_span, allow_unstable);"}, {"sha": "a3489226f62b00d0198007b3ef944c990d16f8a7", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -35,7 +35,9 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{self, Lock, Lrc, ReadGuard, RwLock, WorkerLocal};\n use rustc_data_structures::vec_map::VecMap;\n-use rustc_errors::{DecorateLint, ErrorGuaranteed, LintDiagnosticBuilder, MultiSpan};\n+use rustc_errors::{\n+    DecorateLint, DiagnosticBuilder, DiagnosticMessage, ErrorGuaranteed, MultiSpan,\n+};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n@@ -2857,18 +2859,23 @@ impl<'tcx> TyCtxt<'tcx> {\n         span: impl Into<MultiSpan>,\n         decorator: impl for<'a> DecorateLint<'a, ()>,\n     ) {\n-        self.struct_span_lint_hir(lint, hir_id, span, |diag| decorator.decorate_lint(diag))\n+        self.struct_span_lint_hir(lint, hir_id, span, decorator.msg(), |diag| {\n+            decorator.decorate_lint(diag)\n+        })\n     }\n \n     pub fn struct_span_lint_hir(\n         self,\n         lint: &'static Lint,\n         hir_id: HirId,\n         span: impl Into<MultiSpan>,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n+        msg: impl Into<DiagnosticMessage>,\n+        decorate: impl for<'a, 'b> FnOnce(\n+            &'b mut DiagnosticBuilder<'a, ()>,\n+        ) -> &'b mut DiagnosticBuilder<'a, ()>,\n     ) {\n         let (level, src) = self.lint_level_at_node(lint, hir_id);\n-        struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);\n+        struct_lint_level(self.sess, lint, level, src, Some(span.into()), msg, decorate);\n     }\n \n     /// Emit a lint from a lint struct (some type that implements `DecorateLint`, typically\n@@ -2879,17 +2886,20 @@ impl<'tcx> TyCtxt<'tcx> {\n         id: HirId,\n         decorator: impl for<'a> DecorateLint<'a, ()>,\n     ) {\n-        self.struct_lint_node(lint, id, |diag| decorator.decorate_lint(diag))\n+        self.struct_lint_node(lint, id, decorator.msg(), |diag| decorator.decorate_lint(diag))\n     }\n \n     pub fn struct_lint_node(\n         self,\n         lint: &'static Lint,\n         id: HirId,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n+        msg: impl Into<DiagnosticMessage>,\n+        decorate: impl for<'a, 'b> FnOnce(\n+            &'b mut DiagnosticBuilder<'a, ()>,\n+        ) -> &'b mut DiagnosticBuilder<'a, ()>,\n     ) {\n         let (level, src) = self.lint_level_at_node(lint, id);\n-        struct_lint_level(self.sess, lint, level, src, None, decorate);\n+        struct_lint_level(self.sess, lint, level, src, None, msg, decorate);\n     }\n \n     pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {"}, {"sha": "5e8ce65daf0fc451ae750d10923c5bdbe7fdb17c", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -89,15 +89,8 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n                     UNSAFE_OP_IN_UNSAFE_FN,\n                     self.hir_context,\n                     span,\n-                    |lint| {\n-                        lint.build(&format!(\n-                            \"{} is unsafe and requires unsafe block (error E0133)\",\n-                            description,\n-                        ))\n-                        .span_label(span, kind.simple_description())\n-                        .note(note)\n-                        .emit();\n-                    },\n+                    format!(\"{} is unsafe and requires unsafe block (error E0133)\", description,),\n+                    |lint| lint.span_label(span, kind.simple_description()).note(note),\n                 )\n             }\n             SafetyContext::Safe => {\n@@ -125,14 +118,13 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n         enclosing_unsafe: Option<(Span, &'static str)>,\n     ) {\n         let block_span = self.tcx.sess.source_map().guess_head_span(block_span);\n-        self.tcx.struct_span_lint_hir(UNUSED_UNSAFE, hir_id, block_span, |lint| {\n-            let msg = \"unnecessary `unsafe` block\";\n-            let mut db = lint.build(msg);\n-            db.span_label(block_span, msg);\n+        let msg = \"unnecessary `unsafe` block\";\n+        self.tcx.struct_span_lint_hir(UNUSED_UNSAFE, hir_id, block_span, msg, |lint| {\n+            lint.span_label(block_span, msg);\n             if let Some((span, kind)) = enclosing_unsafe {\n-                db.span_label(span, format!(\"because it's nested under this `unsafe` {}\", kind));\n+                lint.span_label(span, format!(\"because it's nested under this `unsafe` {}\", kind));\n             }\n-            db.emit();\n+            lint\n         });\n     }\n "}, {"sha": "b21f30efce8076dcd993c481dd5f78cbe517e515", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -36,16 +36,20 @@ pub(crate) fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n \n         let sp = tcx.def_span(def_id);\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-        tcx.struct_span_lint_hir(UNCONDITIONAL_RECURSION, hir_id, sp, |lint| {\n-            let mut db = lint.build(\"function cannot return without recursing\");\n-            db.span_label(sp, \"cannot return without recursing\");\n-            // offer some help to the programmer.\n-            for call_span in vis.reachable_recursive_calls {\n-                db.span_label(call_span, \"recursive call site\");\n-            }\n-            db.help(\"a `loop` may express intention better if this is on purpose\");\n-            db.emit();\n-        });\n+        tcx.struct_span_lint_hir(\n+            UNCONDITIONAL_RECURSION,\n+            hir_id,\n+            sp,\n+            \"function cannot return without recursing\",\n+            |lint| {\n+                lint.span_label(sp, \"cannot return without recursing\");\n+                // offer some help to the programmer.\n+                for call_span in vis.reachable_recursive_calls {\n+                    lint.span_label(call_span, \"recursive call site\");\n+                }\n+                lint.help(\"a `loop` may express intention better if this is on purpose\")\n+            },\n+        );\n     }\n }\n "}, {"sha": "8fca94119c2114b16cb56241ac7b4654a6bb4b6a", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 52, "deletions": 37, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,7 +7,7 @@ use super::{PatCtxt, PatternError};\n use rustc_arena::TypedArena;\n use rustc_ast::Mutability;\n use rustc_errors::{\n-    error_code, pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder,\n+    error_code, pluralize, struct_span_err, Applicability, DelayDm, Diagnostic, DiagnosticBuilder,\n     ErrorGuaranteed, MultiSpan,\n };\n use rustc_hir as hir;\n@@ -347,19 +347,23 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n             let span_end = affix.last().unwrap().unwrap().0;\n             let span = span_start.to(span_end);\n             let cnt = affix.len();\n-            cx.tcx.struct_span_lint_hir(IRREFUTABLE_LET_PATTERNS, top, span, |lint| {\n-                let s = pluralize!(cnt);\n-                let mut diag = lint.build(&format!(\"{kind} irrefutable pattern{s} in let chain\"));\n-                diag.note(&format!(\n-                    \"{these} pattern{s} will always match\",\n-                    these = pluralize!(\"this\", cnt),\n-                ));\n-                diag.help(&format!(\n-                    \"consider moving {} {suggestion}\",\n-                    if cnt > 1 { \"them\" } else { \"it\" }\n-                ));\n-                diag.emit()\n-            });\n+            let s = pluralize!(cnt);\n+            cx.tcx.struct_span_lint_hir(\n+                IRREFUTABLE_LET_PATTERNS,\n+                top,\n+                span,\n+                format!(\"{kind} irrefutable pattern{s} in let chain\"),\n+                |lint| {\n+                    lint.note(format!(\n+                        \"{these} pattern{s} will always match\",\n+                        these = pluralize!(\"this\", cnt),\n+                    ))\n+                    .help(format!(\n+                        \"consider moving {} {suggestion}\",\n+                        if cnt > 1 { \"them\" } else { \"it\" }\n+                    ))\n+                },\n+            );\n         };\n         if let Some(until) = chain_refutabilities.iter().position(|r| !matches!(*r, Some((_, false)))) && until > 0 {\n             // The chain has a non-zero prefix of irrefutable `let` statements.\n@@ -561,26 +565,28 @@ fn check_for_bindings_named_same_as_variants(\n                 BINDINGS_WITH_VARIANT_NAME,\n                 p.hir_id,\n                 p.span,\n+                DelayDm(|| format!(\n+                    \"pattern binding `{}` is named the same as one \\\n+                        of the variants of the type `{}`\",\n+                    ident, cx.tcx.def_path_str(edef.did())\n+                )),\n                 |lint| {\n                     let ty_path = cx.tcx.def_path_str(edef.did());\n-                    let mut err = lint.build(&format!(\n-                        \"pattern binding `{}` is named the same as one \\\n-                         of the variants of the type `{}`\",\n-                        ident, ty_path\n-                    ));\n-                    err.code(error_code!(E0170));\n+                    lint.code(error_code!(E0170));\n+\n                     // If this is an irrefutable pattern, and there's > 1 variant,\n                     // then we can't actually match on this. Applying the below\n                     // suggestion would produce code that breaks on `check_irrefutable`.\n                     if rf == Refutable || variant_count == 1 {\n-                        err.span_suggestion(\n+                        lint.span_suggestion(\n                             p.span,\n                             \"to match on the variant, qualify the path\",\n                             format!(\"{}::{}\", ty_path, ident),\n                             Applicability::MachineApplicable,\n                         );\n                     }\n-                    err.emit();\n+\n+                    lint\n                 },\n             )\n         }\n@@ -598,14 +604,13 @@ fn pat_is_catchall(pat: &DeconstructedPat<'_, '_>) -> bool {\n }\n \n fn unreachable_pattern(tcx: TyCtxt<'_>, span: Span, id: HirId, catchall: Option<Span>) {\n-    tcx.struct_span_lint_hir(UNREACHABLE_PATTERNS, id, span, |lint| {\n-        let mut err = lint.build(\"unreachable pattern\");\n+    tcx.struct_span_lint_hir(UNREACHABLE_PATTERNS, id, span, \"unreachable pattern\", |lint| {\n         if let Some(catchall) = catchall {\n             // We had a catchall pattern, hint at that.\n-            err.span_label(span, \"unreachable pattern\");\n-            err.span_label(catchall, \"matches any value\");\n+            lint.span_label(span, \"unreachable pattern\");\n+            lint.span_label(catchall, \"matches any value\");\n         }\n-        err.emit();\n+        lint\n     });\n }\n \n@@ -621,6 +626,11 @@ fn irrefutable_let_patterns(\n     count: usize,\n     span: Span,\n ) {\n+    let span = match source {\n+        LetSource::LetElse(span) => span,\n+        _ => span,\n+    };\n+\n     macro_rules! emit_diag {\n         (\n             $lint:expr,\n@@ -630,18 +640,23 @@ fn irrefutable_let_patterns(\n         ) => {{\n             let s = pluralize!(count);\n             let these = pluralize!(\"this\", count);\n-            let mut diag = $lint.build(&format!(\"irrefutable {} pattern{s}\", $source_name));\n-            diag.note(&format!(\"{these} pattern{s} will always match, so the {}\", $note_sufix));\n-            diag.help(concat!(\"consider \", $help_sufix));\n-            diag.emit()\n+            tcx.struct_span_lint_hir(\n+                IRREFUTABLE_LET_PATTERNS,\n+                id,\n+                span,\n+                format!(\"irrefutable {} pattern{s}\", $source_name),\n+                |lint| {\n+                    lint.note(&format!(\n+                        \"{these} pattern{s} will always match, so the {}\",\n+                        $note_sufix\n+                    ))\n+                    .help(concat!(\"consider \", $help_sufix))\n+                },\n+            )\n         }};\n     }\n \n-    let span = match source {\n-        LetSource::LetElse(span) => span,\n-        _ => span,\n-    };\n-    tcx.struct_span_lint_hir(IRREFUTABLE_LET_PATTERNS, id, span, |lint| match source {\n+    match source {\n         LetSource::GenericLet => {\n             emit_diag!(lint, \"`let`\", \"`let` is useless\", \"removing `let`\");\n         }\n@@ -677,7 +692,7 @@ fn irrefutable_let_patterns(\n                 \"instead using a `loop { ... }` with a `let` inside it\"\n             );\n         }\n-    });\n+    };\n }\n \n fn is_let_irrefutable<'p, 'tcx>("}, {"sha": "f2935ca0e3aecc1caed1dd45f528fb3f6c245625", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -1,3 +1,4 @@\n+use rustc_errors::DelayDm;\n use rustc_hir as hir;\n use rustc_index::vec::Idx;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n@@ -205,9 +206,8 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                         lint::builtin::INDIRECT_STRUCTURAL_MATCH,\n                         self.id,\n                         self.span,\n-                        |lint| {\n-                            lint.build(&msg).emit();\n-                        },\n+                        msg,\n+                        |lint| lint,\n                     );\n                 } else {\n                     debug!(\n@@ -286,9 +286,8 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                         lint::builtin::ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n                         id,\n                         span,\n-                        |lint| {\n-                            lint.build(\"floating-point types cannot be used in patterns\").emit();\n-                        },\n+                        \"floating-point types cannot be used in patterns\",\n+                        |lint| lint,\n                     );\n                 }\n                 PatKind::Constant { value: cv }\n@@ -340,15 +339,15 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                         lint::builtin::INDIRECT_STRUCTURAL_MATCH,\n                         id,\n                         span,\n-                        |lint| {\n-                            let msg = format!(\n+                        DelayDm(|| {\n+                            format!(\n                                 \"to use a constant of type `{}` in a pattern, \\\n                                  `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n                                 cv.ty(),\n                                 cv.ty(),\n-                            );\n-                            lint.build(&msg).emit();\n-                        },\n+                            )\n+                        }),\n+                        |lint| lint,\n                     );\n                 }\n                 // Since we are behind a reference, we can just bubble the error up so we get a\n@@ -488,7 +487,8 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                                 lint::builtin::INDIRECT_STRUCTURAL_MATCH,\n                                 self.id,\n                                 self.span,\n-                                |lint| {lint.build(&msg).emit();},\n+                                msg,\n+                                |lint| lint,\n                             );\n                         }\n                         PatKind::Constant { value: cv }\n@@ -556,9 +556,8 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                         lint::builtin::POINTER_STRUCTURAL_MATCH,\n                         id,\n                         span,\n-                        |lint| {\n-                            lint.build(msg).emit();\n-                        },\n+                        msg,\n+                        |lint| lint,\n                     );\n                 }\n                 PatKind::Constant { value: cv }\n@@ -594,9 +593,8 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 lint::builtin::NONTRIVIAL_STRUCTURAL_MATCH,\n                 id,\n                 span,\n-                |lint| {\n-                    lint.build(&msg).emit();\n-                },\n+                msg,\n+                |lint| lint,\n             );\n         }\n "}, {"sha": "91ecfccdb5f746f481ce2a2de514fa86842ec8da", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -299,20 +299,20 @@ impl IntRange {\n                 lint::builtin::OVERLAPPING_RANGE_ENDPOINTS,\n                 hir_id,\n                 pcx.span,\n+                \"multiple patterns overlap on their endpoints\",\n                 |lint| {\n-                    let mut err = lint.build(\"multiple patterns overlap on their endpoints\");\n                     for (int_range, span) in overlaps {\n-                        err.span_label(\n+                        lint.span_label(\n                             span,\n                             &format!(\n                                 \"this range overlaps on `{}`...\",\n                                 int_range.to_pat(pcx.cx.tcx, pcx.ty)\n                             ),\n                         );\n                     }\n-                    err.span_label(pcx.span, \"... with this range\");\n-                    err.note(\"you likely meant to write mutually exclusive ranges\");\n-                    err.emit();\n+                    lint.span_label(pcx.span, \"... with this range\");\n+                    lint.note(\"you likely meant to write mutually exclusive ranges\");\n+                    lint\n                 },\n             );\n         }"}, {"sha": "f127907284425e1e885c8642ddee85265fae6d04", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -754,9 +754,8 @@ fn lint_non_exhaustive_omitted_patterns<'p, 'tcx>(\n     hir_id: HirId,\n     witnesses: Vec<DeconstructedPat<'p, 'tcx>>,\n ) {\n-    cx.tcx.struct_span_lint_hir(NON_EXHAUSTIVE_OMITTED_PATTERNS, hir_id, sp, |build| {\n+    cx.tcx.struct_span_lint_hir(NON_EXHAUSTIVE_OMITTED_PATTERNS, hir_id, sp, \"some variants are not matched explicitly\", |lint| {\n         let joined_patterns = joined_uncovered_patterns(cx, &witnesses);\n-        let mut lint = build.build(\"some variants are not matched explicitly\");\n         lint.span_label(sp, pattern_not_covered_label(&witnesses, &joined_patterns));\n         lint.help(\n             \"ensure that all variants are matched explicitly by adding the suggested match arms\",\n@@ -765,7 +764,7 @@ fn lint_non_exhaustive_omitted_patterns<'p, 'tcx>(\n             \"the matched value is of type `{}` and the `non_exhaustive_omitted_patterns` attribute was found\",\n             scrut_ty,\n         ));\n-        lint.emit();\n+        lint\n     });\n }\n "}, {"sha": "fa5f392fa74f6cc03bf351690741aeb4bf642035", "filename": "compiler/rustc_mir_transform/src/check_const_item_mutation.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -1,4 +1,4 @@\n-use rustc_errors::{DiagnosticBuilder, LintDiagnosticBuilder};\n+use rustc_errors::{DiagnosticBuilder, DiagnosticMessage};\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n@@ -63,7 +63,10 @@ impl<'tcx> ConstMutationChecker<'_, 'tcx> {\n         place: &Place<'tcx>,\n         const_item: DefId,\n         location: Location,\n-        decorate: impl for<'b> FnOnce(LintDiagnosticBuilder<'b, ()>) -> DiagnosticBuilder<'b, ()>,\n+        msg: impl Into<DiagnosticMessage>,\n+        decorate: impl for<'a, 'b> FnOnce(\n+            &'a mut DiagnosticBuilder<'b, ()>,\n+        ) -> &'a mut DiagnosticBuilder<'b, ()>,\n     ) {\n         // Don't lint on borrowing/assigning when a dereference is involved.\n         // If we 'leave' the temporary via a dereference, we must\n@@ -84,10 +87,10 @@ impl<'tcx> ConstMutationChecker<'_, 'tcx> {\n                 CONST_ITEM_MUTATION,\n                 lint_root,\n                 source_info.span,\n+                msg,\n                 |lint| {\n                     decorate(lint)\n                         .span_note(self.tcx.def_span(const_item), \"`const` item defined here\")\n-                        .emit();\n                 },\n             );\n         }\n@@ -102,10 +105,8 @@ impl<'tcx> Visitor<'tcx> for ConstMutationChecker<'_, 'tcx> {\n             // so emitting a lint would be redundant.\n             if !lhs.projection.is_empty() {\n                 if let Some(def_id) = self.is_const_item_without_destructor(lhs.local) {\n-                    self.lint_const_item_usage(&lhs, def_id, loc, |lint| {\n-                        let mut lint = lint.build(\"attempting to modify a `const` item\");\n-                        lint.note(\"each usage of a `const` item creates a new temporary; the original `const` item will not be modified\");\n-                        lint\n+                    self.lint_const_item_usage(&lhs, def_id, loc, \"attempting to modify a `const` item\",|lint| {\n+                        lint.note(\"each usage of a `const` item creates a new temporary; the original `const` item will not be modified\")\n                     })\n                 }\n             }\n@@ -137,8 +138,7 @@ impl<'tcx> Visitor<'tcx> for ConstMutationChecker<'_, 'tcx> {\n                 });\n                 let lint_loc =\n                     if method_did.is_some() { self.body.terminator_loc(loc.block) } else { loc };\n-                self.lint_const_item_usage(place, def_id, lint_loc, |lint| {\n-                    let mut lint = lint.build(\"taking a mutable reference to a `const` item\");\n+                self.lint_const_item_usage(place, def_id, lint_loc, \"taking a mutable reference to a `const` item\", |lint| {\n                     lint\n                         .note(\"each usage of a `const` item creates a new temporary\")\n                         .note(\"the mutable reference will refer to this temporary, not the original `const` item\");"}, {"sha": "51abcf51189f62b92984d8db0838fa1741f5d6fb", "filename": "compiler/rustc_mir_transform/src/check_packed_ref.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -33,21 +33,27 @@ struct PackedRefChecker<'a, 'tcx> {\n fn unsafe_derive_on_repr_packed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let lint_hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n \n-    tcx.struct_span_lint_hir(UNALIGNED_REFERENCES, lint_hir_id, tcx.def_span(def_id), |lint| {\n-        // FIXME: when we make this a hard error, this should have its\n-        // own error code.\n-        let extra = if tcx.generics_of(def_id).own_requires_monomorphization() {\n-            \"with type or const parameters\"\n-        } else {\n-            \"that does not derive `Copy`\"\n-        };\n-        let message = format!(\n-            \"`{}` can't be derived on this `#[repr(packed)]` struct {}\",\n-            tcx.item_name(tcx.trait_id_of_impl(def_id.to_def_id()).expect(\"derived trait name\")),\n-            extra\n-        );\n-        lint.build(message).emit();\n-    });\n+    // FIXME: when we make this a hard error, this should have its\n+    // own error code.\n+\n+    let extra = if tcx.generics_of(def_id).own_requires_monomorphization() {\n+        \"with type or const parameters\"\n+    } else {\n+        \"that does not derive `Copy`\"\n+    };\n+    let message = format!(\n+        \"`{}` can't be derived on this `#[repr(packed)]` struct {}\",\n+        tcx.item_name(tcx.trait_id_of_impl(def_id.to_def_id()).expect(\"derived trait name\")),\n+        extra\n+    );\n+\n+    tcx.struct_span_lint_hir(\n+        UNALIGNED_REFERENCES,\n+        lint_hir_id,\n+        tcx.def_span(def_id),\n+        message,\n+        |lint| lint,\n+    );\n }\n \n impl<'tcx> Visitor<'tcx> for PackedRefChecker<'_, 'tcx> {\n@@ -86,8 +92,9 @@ impl<'tcx> Visitor<'tcx> for PackedRefChecker<'_, 'tcx> {\n                         UNALIGNED_REFERENCES,\n                         lint_root,\n                         source_info.span,\n+                        \"reference to packed field is unaligned\",\n                         |lint| {\n-                            lint.build(\"reference to packed field is unaligned\")\n+                            lint\n                                 .note(\n                                     \"fields of packed structs are not properly aligned, and creating \\\n                                     a misaligned reference is undefined behavior (even if that \\\n@@ -98,7 +105,6 @@ impl<'tcx> Visitor<'tcx> for PackedRefChecker<'_, 'tcx> {\n                                     reference with a raw pointer and use `read_unaligned`/`write_unaligned` \\\n                                     (loads and stores via `*p` must be properly aligned even when using raw pointers)\"\n                                 )\n-                                .emit();\n                         },\n                     );\n                 }"}, {"sha": "4730be1244bdaeb9320f190b91811727da477b3d", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -489,21 +489,20 @@ fn unsafety_check_result<'tcx>(\n \n fn report_unused_unsafe(tcx: TyCtxt<'_>, kind: UnusedUnsafe, id: HirId) {\n     let span = tcx.sess.source_map().guess_head_span(tcx.hir().span(id));\n-    tcx.struct_span_lint_hir(UNUSED_UNSAFE, id, span, |lint| {\n-        let msg = \"unnecessary `unsafe` block\";\n-        let mut db = lint.build(msg);\n-        db.span_label(span, msg);\n+    let msg = \"unnecessary `unsafe` block\";\n+    tcx.struct_span_lint_hir(UNUSED_UNSAFE, id, span, msg, |lint| {\n+        lint.span_label(span, msg);\n         match kind {\n             UnusedUnsafe::Unused => {}\n             UnusedUnsafe::InUnsafeBlock(id) => {\n-                db.span_label(\n+                lint.span_label(\n                     tcx.sess.source_map().guess_head_span(tcx.hir().span(id)),\n                     \"because it's nested under this `unsafe` block\",\n                 );\n             }\n         }\n \n-        db.emit();\n+        lint\n     });\n }\n \n@@ -543,15 +542,8 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                 UNSAFE_OP_IN_UNSAFE_FN,\n                 lint_root,\n                 source_info.span,\n-                |lint| {\n-                    lint.build(&format!(\n-                        \"{} is unsafe and requires unsafe block (error E0133)\",\n-                        description,\n-                    ))\n-                    .span_label(source_info.span, description)\n-                    .note(note)\n-                    .emit();\n-                },\n+                format!(\"{} is unsafe and requires unsafe block (error E0133)\", description,),\n+                |lint| lint.span_label(source_info.span, description).note(note),\n             ),\n         }\n     }"}, {"sha": "cda3702c83d1c262b7210af3ffef82236950c870", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -347,10 +347,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         panic: AssertKind<impl std::fmt::Debug>,\n     ) {\n         if let Some(lint_root) = self.lint_root(source_info) {\n-            self.tcx.struct_span_lint_hir(lint, lint_root, source_info.span, |lint| {\n-                let mut err = lint.build(message);\n-                err.span_label(source_info.span, format!(\"{:?}\", panic));\n-                err.emit();\n+            self.tcx.struct_span_lint_hir(lint, lint_root, source_info.span, message, |lint| {\n+                lint.span_label(source_info.span, format!(\"{:?}\", panic))\n             });\n         }\n     }"}, {"sha": "1244c18020ddd3985a002dbe97600c9fca83afc1", "filename": "compiler/rustc_mir_transform/src/ffi_unwind_calls.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -106,14 +106,12 @@ fn has_ffi_unwind_calls(tcx: TyCtxt<'_>, local_def_id: LocalDefId) -> bool {\n                 .lint_root;\n             let span = terminator.source_info.span;\n \n-            tcx.struct_span_lint_hir(FFI_UNWIND_CALLS, lint_root, span, |lint| {\n-                let msg = match fn_def_id {\n-                    Some(_) => \"call to foreign function with FFI-unwind ABI\",\n-                    None => \"call to function pointer with FFI-unwind ABI\",\n-                };\n-                let mut db = lint.build(msg);\n-                db.span_label(span, msg);\n-                db.emit();\n+            let msg = match fn_def_id {\n+                Some(_) => \"call to foreign function with FFI-unwind ABI\",\n+                None => \"call to function pointer with FFI-unwind ABI\",\n+            };\n+            tcx.struct_span_lint_hir(FFI_UNWIND_CALLS, lint_root, span, msg, |lint| {\n+                lint.span_label(span, msg)\n             });\n \n             tainted = true;"}, {"sha": "469566694a3ef6b366d807056f5ceca8192705ce", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -179,11 +179,15 @@ impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n         let num_args = fn_sig.inputs().map_bound(|inputs| inputs.len()).skip_binder();\n         let variadic = if fn_sig.c_variadic() { \", ...\" } else { \"\" };\n         let ret = if fn_sig.output().skip_binder().is_unit() { \"\" } else { \" -> _\" };\n-        self.tcx.struct_span_lint_hir(FUNCTION_ITEM_REFERENCES, lint_root, span, |lint| {\n-            lint.build(\"taking a reference to a function item does not give a function pointer\")\n-                .span_suggestion(\n+        self.tcx.struct_span_lint_hir(\n+            FUNCTION_ITEM_REFERENCES,\n+            lint_root,\n+            span,\n+            \"taking a reference to a function item does not give a function pointer\",\n+            |lint| {\n+                lint.span_suggestion(\n                     span,\n-                    &format!(\"cast `{}` to obtain a function pointer\", ident),\n+                    format!(\"cast `{}` to obtain a function pointer\", ident),\n                     format!(\n                         \"{} as {}{}fn({}{}){}\",\n                         if params.is_empty() { ident } else { format!(\"{}::<{}>\", ident, params) },\n@@ -195,7 +199,7 @@ impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n                     ),\n                     Applicability::Unspecified,\n                 )\n-                .emit();\n-        });\n+            },\n+        );\n     }\n }"}, {"sha": "87433538512b9dd974ebf7d2d99393a70ac951a4", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -370,10 +370,13 @@ impl CheckAttrVisitor<'_> {\n                 b.push_str(&(allowed_target.to_string() + \"s\"));\n                 b\n             });\n-            self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n-                lint.build(&format!(\"`#[{name}]` only has an effect on {}\", supported_names))\n-                    .emit();\n-            });\n+            self.tcx.struct_span_lint_hir(\n+                UNUSED_ATTRIBUTES,\n+                hir_id,\n+                attr.span,\n+                &format!(\"`#[{name}]` only has an effect on {}\", supported_names),\n+                |lint| lint,\n+            );\n         }\n     }\n \n@@ -877,25 +880,31 @@ impl CheckAttrVisitor<'_> {\n         hir_id: HirId,\n     ) -> bool {\n         if hir_id != CRATE_HIR_ID {\n-            self.tcx.struct_span_lint_hir(INVALID_DOC_ATTRIBUTES, hir_id, meta.span(), |lint| {\n-                let mut err = lint.build(fluent::passes::attr_crate_level);\n-                if attr.style == AttrStyle::Outer\n-                    && self.tcx.hir().get_parent_item(hir_id) == CRATE_OWNER_ID\n-                {\n-                    if let Ok(mut src) = self.tcx.sess.source_map().span_to_snippet(attr.span) {\n-                        src.insert(1, '!');\n-                        err.span_suggestion_verbose(\n-                            attr.span,\n-                            fluent::passes::suggestion,\n-                            src,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    } else {\n-                        err.span_help(attr.span, fluent::passes::help);\n+            self.tcx.struct_span_lint_hir(\n+                INVALID_DOC_ATTRIBUTES,\n+                hir_id,\n+                meta.span(),\n+                fluent::passes::attr_crate_level,\n+                |err| {\n+                    if attr.style == AttrStyle::Outer\n+                        && self.tcx.hir().get_parent_item(hir_id) == CRATE_OWNER_ID\n+                    {\n+                        if let Ok(mut src) = self.tcx.sess.source_map().span_to_snippet(attr.span) {\n+                            src.insert(1, '!');\n+                            err.span_suggestion_verbose(\n+                                attr.span,\n+                                fluent::passes::suggestion,\n+                                src,\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        } else {\n+                            err.span_help(attr.span, fluent::passes::help);\n+                        }\n                     }\n-                }\n-                err.note(fluent::passes::note).emit();\n-            });\n+                    err.note(fluent::passes::note);\n+                    err\n+                },\n+            );\n             return false;\n         }\n         true"}, {"sha": "08f704da62c2fd56d510b395a1aca63198fdd3b6", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,7 +4,7 @@\n \n use itertools::Itertools;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{pluralize, Applicability, MultiSpan};\n+use rustc_errors::{pluralize, Applicability, DelayDm, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -184,13 +184,14 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n                     lint::builtin::DEAD_CODE,\n                     assign.hir_id,\n                     assign.span,\n-                    |lint| {\n-                        lint.build(&format!(\n+                    DelayDm(|| format!(\n                             \"useless assignment of {} of type `{}` to itself\",\n                             if is_field_assign { \"field\" } else { \"variable\" },\n                             self.typeck_results().expr_ty(lhs),\n-                        ))\n-                        .emit();\n+                        )),\n+                    |lint| {\n+                        lint\n+\n                     },\n                 )\n         }\n@@ -717,6 +718,26 @@ impl<'tcx> DeadVisitor<'tcx> {\n                 })\n                 .collect();\n \n+            let descr = tcx.def_kind(first_id).descr(first_id.to_def_id());\n+            let span_len = dead_codes.len();\n+            let names = match &names[..] {\n+                _ if span_len > 6 => String::new(),\n+                [name] => format!(\"`{name}` \"),\n+                [names @ .., last] => {\n+                    format!(\n+                        \"{} and `{last}` \",\n+                        names.iter().map(|name| format!(\"`{name}`\")).join(\", \")\n+                    )\n+                }\n+                [] => unreachable!(),\n+            };\n+            let msg = format!(\n+                \"{these}{descr}{s} {names}{are} never {participle}\",\n+                these = if span_len > 6 { \"multiple \" } else { \"\" },\n+                s = pluralize!(span_len),\n+                are = pluralize!(\"is\", span_len),\n+            );\n+\n             tcx.struct_span_lint_hir(\n                 if is_positional {\n                     lint::builtin::UNUSED_TUPLE_STRUCT_FIELDS\n@@ -725,27 +746,8 @@ impl<'tcx> DeadVisitor<'tcx> {\n                 },\n                 tcx.hir().local_def_id_to_hir_id(first_id),\n                 MultiSpan::from_spans(spans.clone()),\n-                |lint| {\n-                    let descr = tcx.def_kind(first_id).descr(first_id.to_def_id());\n-                    let span_len = dead_codes.len();\n-                    let names = match &names[..] {\n-                        _ if span_len > 6 => String::new(),\n-                        [name] => format!(\"`{name}` \"),\n-                        [names @ .., last] => {\n-                            format!(\n-                                \"{} and `{last}` \",\n-                                names.iter().map(|name| format!(\"`{name}`\")).join(\", \")\n-                            )\n-                        }\n-                        [] => unreachable!(),\n-                    };\n-                    let mut err = lint.build(&format!(\n-                        \"{these}{descr}{s} {names}{are} never {participle}\",\n-                        these = if span_len > 6 { \"multiple \" } else { \"\" },\n-                        s = pluralize!(span_len),\n-                        are = pluralize!(\"is\", span_len),\n-                    ));\n-\n+                msg,\n+                |err| {\n                     if is_positional {\n                         err.multipart_suggestion(\n                             &format!(\n@@ -791,7 +793,7 @@ impl<'tcx> DeadVisitor<'tcx> {\n                         );\n                         err.note(&msg);\n                     }\n-                    err.emit();\n+                    err\n                 },\n             );\n         }"}, {"sha": "c6fe40f72fc634c4994661be8952e24018b7e4eb", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 23, "deletions": 42, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -1319,14 +1319,14 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             // that we do not emit the same warning twice if the uninhabited type\n             // is indeed `!`.\n \n+            let msg = format!(\"unreachable {}\", descr);\n             self.ir.tcx.struct_span_lint_hir(\n                 lint::builtin::UNREACHABLE_CODE,\n                 expr_id,\n                 expr_span,\n-                |lint| {\n-                    let msg = format!(\"unreachable {}\", descr);\n-                    lint.build(&msg)\n-                        .span_label(expr_span, &msg)\n+                &msg,\n+                |diag| {\n+                    diag.span_label(expr_span, &msg)\n                         .span_label(orig_span, \"any code following this expression is unreachable\")\n                         .span_note(\n                             orig_span,\n@@ -1335,7 +1335,6 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                                 orig_ty\n                             ),\n                         )\n-                        .emit();\n                 },\n             );\n         }\n@@ -1491,14 +1490,8 @@ impl<'tcx> Liveness<'_, 'tcx> {\n                                 lint::builtin::UNUSED_ASSIGNMENTS,\n                                 var_hir_id,\n                                 vec![span],\n-                                |lint| {\n-                                    lint.build(&format!(\n-                                        \"value captured by `{}` is never read\",\n-                                        name\n-                                    ))\n-                                    .help(\"did you mean to capture by reference instead?\")\n-                                    .emit();\n-                                },\n+                                format!(\"value captured by `{}` is never read\", name),\n+                                |lint| lint.help(\"did you mean to capture by reference instead?\"),\n                             );\n                         }\n                     }\n@@ -1508,11 +1501,8 @@ impl<'tcx> Liveness<'_, 'tcx> {\n                             lint::builtin::UNUSED_VARIABLES,\n                             var_hir_id,\n                             vec![span],\n-                            |lint| {\n-                                lint.build(&format!(\"unused variable: `{}`\", name))\n-                                    .help(\"did you mean to capture by reference instead?\")\n-                                    .emit();\n-                            },\n+                            format!(\"unused variable: `{}`\", name),\n+                            |lint| lint.help(\"did you mean to capture by reference instead?\"),\n                         );\n                     }\n                 }\n@@ -1601,20 +1591,17 @@ impl<'tcx> Liveness<'_, 'tcx> {\n                         .into_iter()\n                         .map(|(_, _, ident_span)| ident_span)\n                         .collect::<Vec<_>>(),\n-                    |lint| {\n-                        lint.build(&format!(\"variable `{}` is assigned to, but never used\", name))\n-                            .note(&format!(\"consider using `_{}` instead\", name))\n-                            .emit();\n-                    },\n+                    format!(\"variable `{}` is assigned to, but never used\", name),\n+                    |lint| lint.note(&format!(\"consider using `_{}` instead\", name)),\n                 )\n             } else if can_remove {\n                 self.ir.tcx.struct_span_lint_hir(\n                     lint::builtin::UNUSED_VARIABLES,\n                     first_hir_id,\n                     hir_ids_and_spans.iter().map(|(_, pat_span, _)| *pat_span).collect::<Vec<_>>(),\n+                    format!(\"unused variable: `{}`\", name),\n                     |lint| {\n-                        let mut err = lint.build(&format!(\"unused variable: `{}`\", name));\n-                        err.multipart_suggestion(\n+                        lint.multipart_suggestion(\n                             \"try removing the field\",\n                             hir_ids_and_spans\n                                 .iter()\n@@ -1629,8 +1616,7 @@ impl<'tcx> Liveness<'_, 'tcx> {\n                                 })\n                                 .collect(),\n                             Applicability::MachineApplicable,\n-                        );\n-                        err.emit();\n+                        )\n                     },\n                 );\n             } else {\n@@ -1661,14 +1647,13 @@ impl<'tcx> Liveness<'_, 'tcx> {\n                             .iter()\n                             .map(|(_, pat_span, _)| *pat_span)\n                             .collect::<Vec<_>>(),\n+                        format!(\"unused variable: `{}`\", name),\n                         |lint| {\n-                            let mut err = lint.build(&format!(\"unused variable: `{}`\", name));\n-                            err.multipart_suggestion(\n+                            lint.multipart_suggestion(\n                                 \"try ignoring the field\",\n                                 shorthands,\n                                 Applicability::MachineApplicable,\n-                            );\n-                            err.emit();\n+                            )\n                         },\n                     );\n                 } else {\n@@ -1684,17 +1669,16 @@ impl<'tcx> Liveness<'_, 'tcx> {\n                             .iter()\n                             .map(|(_, _, ident_span)| *ident_span)\n                             .collect::<Vec<_>>(),\n+                        format!(\"unused variable: `{}`\", name),\n                         |lint| {\n-                            let mut err = lint.build(&format!(\"unused variable: `{}`\", name));\n-                            if self.has_added_lit_match_name_span(&name, opt_body, &mut err) {\n-                                err.span_label(pat.span, \"unused variable\");\n+                            if self.has_added_lit_match_name_span(&name, opt_body, lint) {\n+                                lint.span_label(pat.span, \"unused variable\");\n                             }\n-                            err.multipart_suggestion(\n+                            lint.multipart_suggestion(\n                                 \"if this is intentional, prefix it with an underscore\",\n                                 non_shorthands,\n                                 Applicability::MachineApplicable,\n-                            );\n-                            err.emit();\n+                            )\n                         },\n                     );\n                 }\n@@ -1758,11 +1742,8 @@ impl<'tcx> Liveness<'_, 'tcx> {\n                 lint::builtin::UNUSED_ASSIGNMENTS,\n                 hir_id,\n                 spans,\n-                |lint| {\n-                    lint.build(&message(&name))\n-                        .help(\"maybe it is overwritten before being read?\")\n-                        .emit();\n-                },\n+                message(&name),\n+                |lint| lint.help(\"maybe it is overwritten before being read?\"),\n             )\n         }\n     }"}, {"sha": "2690be66c21e5ae8456dfad9330dfda967c574d7", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -65,9 +65,13 @@ fn check_abi(tcx: TyCtxt<'_>, def_id: LocalDefId, abi: Abi) {\n     if abi == Abi::Rust {\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n         let span = tcx.def_span(def_id);\n-        tcx.struct_span_lint_hir(UNDEFINED_NAKED_FUNCTION_ABI, hir_id, span, |lint| {\n-            lint.build(\"Rust ABI is unsupported in naked functions\").emit();\n-        });\n+        tcx.struct_span_lint_hir(\n+            UNDEFINED_NAKED_FUNCTION_ABI,\n+            hir_id,\n+            span,\n+            \"Rust ABI is unsupported in naked functions\",\n+            |lint| lint,\n+        );\n     }\n }\n "}, {"sha": "34fa80228df89d883b5e7f3b8ee18d4afcd7052d", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -752,10 +752,8 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                                 INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n                                 item.hir_id(),\n                                 span,\n-                                |lint| {lint\n-                                    .build(\"an `#[unstable]` annotation here has no effect\")\n-                                    .note(\"see issue #55436 <https://github.com/rust-lang/rust/issues/55436> for more information\")\n-                                    .emit();}\n+                                \"an `#[unstable]` annotation here has no effect\",\n+                                |lint| lint.note(\"see issue #55436 <https://github.com/rust-lang/rust/issues/55436> for more information\")\n                             );\n                         }\n                     }\n@@ -1081,11 +1079,16 @@ fn unnecessary_partially_stable_feature_lint(\n     implies: Symbol,\n     since: Symbol,\n ) {\n-    tcx.struct_span_lint_hir(lint::builtin::STABLE_FEATURES, hir::CRATE_HIR_ID, span, |lint| {\n-        lint.build(&format!(\n+    tcx.struct_span_lint_hir(\n+        lint::builtin::STABLE_FEATURES,\n+        hir::CRATE_HIR_ID,\n+        span,\n+        format!(\n             \"the feature `{feature}` has been partially stabilized since {since} and is succeeded \\\n              by the feature `{implies}`\"\n-        ))\n+        ),\n+        |lint| {\n+            lint\n         .span_suggestion(\n             span,\n             &format!(\n@@ -1100,8 +1103,8 @@ fn unnecessary_partially_stable_feature_lint(\n             \"\",\n             Applicability::MaybeIncorrect,\n         )\n-        .emit();\n-    });\n+        },\n+    );\n }\n \n fn unnecessary_stable_feature_lint(\n@@ -1113,12 +1116,8 @@ fn unnecessary_stable_feature_lint(\n     if since.as_str() == VERSION_PLACEHOLDER {\n         since = rust_version_symbol();\n     }\n-    tcx.struct_span_lint_hir(lint::builtin::STABLE_FEATURES, hir::CRATE_HIR_ID, span, |lint| {\n-        lint.build(&format!(\n-            \"the feature `{feature}` has been stable since {since} and no longer requires an \\\n-             attribute to enable\",\n-        ))\n-        .emit();\n+    tcx.struct_span_lint_hir(lint::builtin::STABLE_FEATURES, hir::CRATE_HIR_ID, span, format!(\"the feature `{feature}` has been stable since {since} and no longer requires an attribute to enable\"), |lint| {\n+        lint\n     });\n }\n "}, {"sha": "3f98db6b2a924adfb9de5ee661a5d683cc58fd53", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -235,38 +235,42 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                   .emit()\n             }\n \n-            Err(ErrorHandled::TooGeneric) => Err(if uv.has_infer_types_or_consts() {\n-                NotConstEvaluatable::MentionsInfer\n+            Err(ErrorHandled::TooGeneric) => {\n+                let err = if uv.has_infer_types_or_consts() {\n+                    NotConstEvaluatable::MentionsInfer\n                 } else if uv.has_param_types_or_consts() {\n-                NotConstEvaluatable::MentionsParam\n-            } else {\n-                let guar = infcx.tcx.sess.delay_span_bug(span, format!(\"Missing value for constant, but no error reported?\"));\n-                NotConstEvaluatable::Error(guar)\n-            }),\n+                    NotConstEvaluatable::MentionsParam\n+                } else {\n+                    let guar = infcx.tcx.sess.delay_span_bug(span, format!(\"Missing value for constant, but no error reported?\"));\n+                    NotConstEvaluatable::Error(guar)\n+                };\n+\n+                Err(err)\n+            },\n             Err(ErrorHandled::Linted) => {\n                 let reported =\n                     infcx.tcx.sess.delay_span_bug(span, \"constant in type had error reported as lint\");\n                 Err(NotConstEvaluatable::Error(reported))\n             }\n             Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n             Ok(_) => {\n-              if uv.substs.has_param_types_or_consts() {\n-                  assert!(matches!(infcx.tcx.def_kind(uv.def.did), DefKind::AnonConst));\n-                  let mir_body = infcx.tcx.mir_for_ctfe_opt_const_arg(uv.def);\n+                if uv.substs.has_param_types_or_consts() {\n+                    assert!(matches!(infcx.tcx.def_kind(uv.def.did), DefKind::AnonConst));\n+                    let mir_body = infcx.tcx.mir_for_ctfe_opt_const_arg(uv.def);\n \n-                  if mir_body.is_polymorphic {\n-                      let Some(local_def_id) = uv.def.did.as_local() else { return Ok(()) };\n-                      tcx.struct_span_lint_hir(\n-                          lint::builtin::CONST_EVALUATABLE_UNCHECKED,\n-                          tcx.hir().local_def_id_to_hir_id(local_def_id),\n-                          span,\n-                          |err| {\n-                              err.build(\"cannot use constants which depend on generic parameters in types\").emit();\n-                        })\n-                  }\n-              }\n+                    if mir_body.is_polymorphic {\n+                        let Some(local_def_id) = uv.def.did.as_local() else { return Ok(()) };\n+                        tcx.struct_span_lint_hir(\n+                            lint::builtin::CONST_EVALUATABLE_UNCHECKED,\n+                            tcx.hir().local_def_id_to_hir_id(local_def_id),\n+                            span,\n+                            \"cannot use constants which depend on generic parameters in types\",\n+                            |err| err\n+                        )\n+                    }\n+                }\n \n-              Ok(())\n+                Ok(())\n             },\n         }\n     }"}, {"sha": "8f87a7fdeba5eaf7ac69a83eeb9e6ba29fee22b2", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 36, "deletions": 31, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -14,7 +14,7 @@ use crate::infer::TyCtxtInferExt;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::{self, Obligation, ObligationCause};\n use hir::def::DefKind;\n-use rustc_errors::{FatalError, MultiSpan};\n+use rustc_errors::{DelayDm, FatalError, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::abstract_const::{walk_abstract_const, AbstractConst};\n@@ -164,37 +164,42 @@ fn lint_object_unsafe_trait(\n ) {\n     // Using `CRATE_NODE_ID` is wrong, but it's hard to get a more precise id.\n     // It's also hard to get a use site span, so we use the method definition span.\n-    tcx.struct_span_lint_hir(WHERE_CLAUSES_OBJECT_SAFETY, hir::CRATE_HIR_ID, span, |lint| {\n-        let mut err = lint.build(&format!(\n-            \"the trait `{}` cannot be made into an object\",\n-            tcx.def_path_str(trait_def_id)\n-        ));\n-        let node = tcx.hir().get_if_local(trait_def_id);\n-        let mut spans = MultiSpan::from_span(span);\n-        if let Some(hir::Node::Item(item)) = node {\n-            spans.push_span_label(item.ident.span, \"this trait cannot be made into an object...\");\n-            spans.push_span_label(span, format!(\"...because {}\", violation.error_msg()));\n-        } else {\n-            spans.push_span_label(\n-                span,\n-                format!(\n-                    \"the trait cannot be made into an object because {}\",\n-                    violation.error_msg()\n-                ),\n+    tcx.struct_span_lint_hir(\n+        WHERE_CLAUSES_OBJECT_SAFETY,\n+        hir::CRATE_HIR_ID,\n+        span,\n+        DelayDm(|| format!(\"the trait `{}` cannot be made into an object\", tcx.def_path_str(trait_def_id))),\n+        |err| {\n+            let node = tcx.hir().get_if_local(trait_def_id);\n+            let mut spans = MultiSpan::from_span(span);\n+            if let Some(hir::Node::Item(item)) = node {\n+                spans.push_span_label(\n+                    item.ident.span,\n+                    \"this trait cannot be made into an object...\",\n+                );\n+                spans.push_span_label(span, format!(\"...because {}\", violation.error_msg()));\n+            } else {\n+                spans.push_span_label(\n+                    span,\n+                    format!(\n+                        \"the trait cannot be made into an object because {}\",\n+                        violation.error_msg()\n+                    ),\n+                );\n+            };\n+            err.span_note(\n+                spans,\n+                \"for a trait to be \\\"object safe\\\" it needs to allow building a vtable to allow the \\\n+                call to be resolvable dynamically; for more information visit \\\n+                <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\",\n             );\n-        };\n-        err.span_note(\n-            spans,\n-            \"for a trait to be \\\"object safe\\\" it needs to allow building a vtable to allow the \\\n-             call to be resolvable dynamically; for more information visit \\\n-             <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\",\n-        );\n-        if node.is_some() {\n-            // Only provide the help if its a local trait, otherwise it's not\n-            violation.solution(&mut err);\n-        }\n-        err.emit();\n-    });\n+            if node.is_some() {\n+                // Only provide the help if its a local trait, otherwise it's not\n+                violation.solution(err);\n+            }\n+            err\n+        },\n+    );\n }\n \n fn sized_trait_bound_spans<'tcx>("}, {"sha": "6d856435355ed47fdaa94ed40040a7db69f98e4c", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -6,6 +6,7 @@\n //!\n //! [rustc dev guide]:https://rustc-dev-guide.rust-lang.org/traits/resolution.html#candidate-assembly\n use hir::LangItem;\n+use rustc_errors::DelayDm;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::ObligationCause;\n@@ -825,13 +826,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                     DEREF_INTO_DYN_SUPERTRAIT,\n                                     obligation.cause.body_id,\n                                     obligation.cause.span,\n-                                    |lint| {\n-                                        lint.build(&format!(\n-                                            \"`{}` implements `Deref` with supertrait `{}` as output\",\n-                                            source,\n-                                            deref_output_ty\n-                                        )).emit();\n-                                    },\n+                                    DelayDm(|| format!(\n+                                        \"`{}` implements `Deref` with supertrait `{}` as output\",\n+                                        source, deref_output_ty\n+                                    )),\n+                                    |lint| lint,\n                                 );\n                                 return;\n                             }"}, {"sha": "eac3f0f30e8b553e5dea47f44801a213e55c0fcf", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 25, "deletions": 33, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -17,7 +17,7 @@ use crate::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause};\n use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n-use rustc_errors::{struct_span_err, EmissionGuarantee, LintDiagnosticBuilder};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder, EmissionGuarantee};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::{self, ImplSubject, TyCtxt};\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n@@ -350,26 +350,12 @@ fn report_conflicting_impls(\n     // Work to be done after we've built the DiagnosticBuilder. We have to define it\n     // now because the struct_lint methods don't return back the DiagnosticBuilder\n     // that's passed in.\n-    fn decorate<G: EmissionGuarantee>(\n+    fn decorate<'a, 'b, G: EmissionGuarantee>(\n         tcx: TyCtxt<'_>,\n         overlap: OverlapError,\n-        used_to_be_allowed: Option<FutureCompatOverlapErrorKind>,\n         impl_span: Span,\n-        err: LintDiagnosticBuilder<'_, G>,\n-    ) -> G {\n-        let msg = format!(\n-            \"conflicting implementations of trait `{}`{}{}\",\n-            overlap.trait_desc,\n-            overlap\n-                .self_desc\n-                .clone()\n-                .map_or_else(String::new, |ty| { format!(\" for type `{}`\", ty) }),\n-            match used_to_be_allowed {\n-                Some(FutureCompatOverlapErrorKind::Issue33140) => \": (E0119)\",\n-                _ => \"\",\n-            }\n-        );\n-        let mut err = err.build(&msg);\n+        err: &'b mut DiagnosticBuilder<'a, G>,\n+    ) -> &'b mut DiagnosticBuilder<'a, G> {\n         match tcx.span_of_impl(overlap.with_impl) {\n             Ok(span) => {\n                 err.span_label(span, \"first implementation here\");\n@@ -384,36 +370,43 @@ fn report_conflicting_impls(\n             }\n             Err(cname) => {\n                 let msg = match to_pretty_impl_header(tcx, overlap.with_impl) {\n-                    Some(s) => format!(\"conflicting implementation in crate `{}`:\\n- {}\", cname, s),\n+                    Some(s) => {\n+                        format!(\"conflicting implementation in crate `{}`:\\n- {}\", cname, s)\n+                    }\n                     None => format!(\"conflicting implementation in crate `{}`\", cname),\n                 };\n                 err.note(&msg);\n             }\n         }\n \n         for cause in &overlap.intercrate_ambiguity_causes {\n-            cause.add_intercrate_ambiguity_hint(&mut err);\n+            cause.add_intercrate_ambiguity_hint(err);\n         }\n \n         if overlap.involves_placeholder {\n-            coherence::add_placeholder_note(&mut err);\n+            coherence::add_placeholder_note(err);\n         }\n-        err.emit()\n+        err\n     }\n \n+    let msg = format!(\n+        \"conflicting implementations of trait `{}`{}{}\",\n+        overlap.trait_desc,\n+        overlap.self_desc.as_deref().map_or_else(String::new, |ty| format!(\" for type `{ty}`\")),\n+        match used_to_be_allowed {\n+            Some(FutureCompatOverlapErrorKind::Issue33140) => \": (E0119)\",\n+            _ => \"\",\n+        }\n+    );\n+\n     match used_to_be_allowed {\n         None => {\n             let reported = if overlap.with_impl.is_local()\n                 || tcx.orphan_check_impl(impl_def_id).is_ok()\n             {\n-                let err = struct_span_err!(tcx.sess, impl_span, E0119, \"\");\n-                Some(decorate(\n-                    tcx,\n-                    overlap,\n-                    used_to_be_allowed,\n-                    impl_span,\n-                    LintDiagnosticBuilder::new(err),\n-                ))\n+                let mut err = struct_span_err!(tcx.sess, impl_span, E0119, \"{msg}\",);\n+                decorate(tcx, overlap, impl_span, &mut err);\n+                Some(err.emit())\n             } else {\n                 Some(tcx.sess.delay_span_bug(impl_span, \"impl should have failed the orphan check\"))\n             };\n@@ -428,9 +421,8 @@ fn report_conflicting_impls(\n                 lint,\n                 tcx.hir().local_def_id_to_hir_id(impl_def_id),\n                 impl_span,\n-                |ldb| {\n-                    decorate(tcx, overlap, used_to_be_allowed, impl_span, ldb);\n-                },\n+                msg,\n+                |err| decorate(tcx, overlap, impl_span, err),\n             );\n         }\n     };"}, {"sha": "b463b934e292d5e3ab54aa5e848ccdca8b22ce8b", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -404,12 +404,8 @@ pub(crate) fn run_global_ctxt(\n         tcx.struct_lint_node(\n             crate::lint::MISSING_CRATE_LEVEL_DOCS,\n             DocContext::as_local_hir_id(tcx, krate.module.item_id).unwrap(),\n-            |lint| {\n-                let mut diag =\n-                    lint.build(\"no documentation found for this crate's top-level module\");\n-                diag.help(&help);\n-                diag.emit();\n-            },\n+            \"no documentation found for this crate's top-level module\",\n+            |lint| lint.help(help),\n         );\n     }\n "}, {"sha": "68eb5008583ed82b110cc25eefa8a168f328711e", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -813,11 +813,8 @@ impl<'tcx> ExtraInfo<'tcx> {\n             crate::lint::INVALID_CODEBLOCK_ATTRIBUTES,\n             hir_id,\n             self.sp,\n-            |lint| {\n-                let mut diag = lint.build(msg);\n-                diag.help(help);\n-                diag.emit();\n-            },\n+            msg,\n+            |lint| lint.help(help),\n         );\n     }\n }"}, {"sha": "7ff3ccef945c2915c0b12833b0a69c70093187ea", "filename": "src/librustdoc/passes/bare_urls.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -71,16 +71,14 @@ impl<'a, 'tcx> DocVisitor for BareUrlsLinter<'a, 'tcx> {\n             let report_diag = |cx: &DocContext<'_>, msg: &str, url: &str, range: Range<usize>| {\n                 let sp = super::source_span_for_markdown_range(cx.tcx, &dox, &range, &item.attrs)\n                     .unwrap_or_else(|| item.attr_span(cx.tcx));\n-                cx.tcx.struct_span_lint_hir(crate::lint::BARE_URLS, hir_id, sp, |lint| {\n-                    lint.build(msg)\n-                        .note(\"bare URLs are not automatically turned into clickable links\")\n+                cx.tcx.struct_span_lint_hir(crate::lint::BARE_URLS, hir_id, sp, msg, |lint| {\n+                    lint.note(\"bare URLs are not automatically turned into clickable links\")\n                         .span_suggestion(\n                             sp,\n                             \"use an automatic link instead\",\n                             format!(\"<{}>\", url),\n                             Applicability::MachineApplicable,\n                         )\n-                        .emit();\n                 });\n             };\n "}, {"sha": "23f87838544df9a4115e46324787aa05925fb54d", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 41, "deletions": 44, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -2,7 +2,7 @@\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{\n     emitter::Emitter, translation::Translate, Applicability, Diagnostic, Handler,\n-    LazyFallbackBundle, LintDiagnosticBuilder,\n+    LazyFallbackBundle,\n };\n use rustc_parse::parse_stream_from_source_str;\n use rustc_session::parse::ParseSess;\n@@ -97,48 +97,10 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n             None => (item.attr_span(self.cx.tcx), false),\n         };\n \n-        // lambda that will use the lint to start a new diagnostic and add\n-        // a suggestion to it when needed.\n-        let diag_builder = |lint: LintDiagnosticBuilder<'_, ()>| {\n-            let explanation = if is_ignore {\n-                \"`ignore` code blocks require valid Rust code for syntax highlighting; \\\n-                    mark blocks that do not contain Rust code as text\"\n-            } else {\n-                \"mark blocks that do not contain Rust code as text\"\n-            };\n-            let msg = if buffer.has_errors {\n-                \"could not parse code block as Rust code\"\n-            } else {\n-                \"Rust code block is empty\"\n-            };\n-            let mut diag = lint.build(msg);\n-\n-            if precise_span {\n-                if is_ignore {\n-                    // giving an accurate suggestion is hard because `ignore` might not have come first in the list.\n-                    // just give a `help` instead.\n-                    diag.span_help(\n-                        sp.from_inner(InnerSpan::new(0, 3)),\n-                        &format!(\"{}: ```text\", explanation),\n-                    );\n-                } else if empty_block {\n-                    diag.span_suggestion(\n-                        sp.from_inner(InnerSpan::new(0, 3)).shrink_to_hi(),\n-                        explanation,\n-                        \"text\",\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-            } else if empty_block || is_ignore {\n-                diag.help(&format!(\"{}: ```text\", explanation));\n-            }\n-\n-            // FIXME(#67563): Provide more context for these errors by displaying the spans inline.\n-            for message in buffer.messages.iter() {\n-                diag.note(message);\n-            }\n-\n-            diag.emit();\n+        let msg = if buffer.has_errors {\n+            \"could not parse code block as Rust code\"\n+        } else {\n+            \"Rust code block is empty\"\n         };\n \n         // Finally build and emit the completed diagnostic.\n@@ -148,7 +110,42 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n             crate::lint::INVALID_RUST_CODEBLOCKS,\n             hir_id,\n             sp,\n-            diag_builder,\n+            msg,\n+            |lint| {\n+                let explanation = if is_ignore {\n+                    \"`ignore` code blocks require valid Rust code for syntax highlighting; \\\n+                    mark blocks that do not contain Rust code as text\"\n+                } else {\n+                    \"mark blocks that do not contain Rust code as text\"\n+                };\n+\n+                if precise_span {\n+                    if is_ignore {\n+                        // giving an accurate suggestion is hard because `ignore` might not have come first in the list.\n+                        // just give a `help` instead.\n+                        lint.span_help(\n+                            sp.from_inner(InnerSpan::new(0, 3)),\n+                            &format!(\"{}: ```text\", explanation),\n+                        );\n+                    } else if empty_block {\n+                        lint.span_suggestion(\n+                            sp.from_inner(InnerSpan::new(0, 3)).shrink_to_hi(),\n+                            explanation,\n+                            \"text\",\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n+                } else if empty_block || is_ignore {\n+                    lint.help(&format!(\"{}: ```text\", explanation));\n+                }\n+\n+                // FIXME(#67563): Provide more context for these errors by displaying the spans inline.\n+                for message in buffer.messages.iter() {\n+                    lint.note(message);\n+                }\n+\n+                lint\n+            },\n         );\n     }\n }"}, {"sha": "15982b40944e7989cbdaff441d0693cbde02578b", "filename": "src/librustdoc/passes/check_doc_test_visibility.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -125,9 +125,8 @@ pub(crate) fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item\n                 crate::lint::MISSING_DOC_CODE_EXAMPLES,\n                 hir_id,\n                 sp,\n-                |lint| {\n-                    lint.build(\"missing code example in this documentation\").emit();\n-                },\n+                \"missing code example in this documentation\",\n+                |lint| lint,\n             );\n         }\n     } else if tests.found_tests > 0\n@@ -137,9 +136,8 @@ pub(crate) fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item\n             crate::lint::PRIVATE_DOC_TESTS,\n             hir_id,\n             item.attr_span(cx.tcx),\n-            |lint| {\n-                lint.build(\"documentation test in private item\").emit();\n-            },\n+            \"documentation test in private item\",\n+            |lint| lint,\n         );\n     }\n }"}, {"sha": "3beda708bf2e16c34d9f5c8bb586bd34e741a47c", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -1609,9 +1609,7 @@ fn report_diagnostic(\n \n     let sp = item.attr_span(tcx);\n \n-    tcx.struct_span_lint_hir(lint, hir_id, sp, |lint| {\n-        let mut diag = lint.build(msg);\n-\n+    tcx.struct_span_lint_hir(lint, hir_id, sp, msg, |lint| {\n         let span =\n             super::source_span_for_markdown_range(tcx, dox, link_range, &item.attrs).map(|sp| {\n                 if dox.as_bytes().get(link_range.start) == Some(&b'`')\n@@ -1624,7 +1622,7 @@ fn report_diagnostic(\n             });\n \n         if let Some(sp) = span {\n-            diag.set_span(sp);\n+            lint.set_span(sp);\n         } else {\n             // blah blah blah\\nblah\\nblah [blah] blah blah\\nblah blah\n             //                       ^     ~~~~\n@@ -1634,7 +1632,7 @@ fn report_diagnostic(\n             let line = dox[last_new_line_offset..].lines().next().unwrap_or(\"\");\n \n             // Print the line containing the `link_range` and manually mark it with '^'s.\n-            diag.note(&format!(\n+            lint.note(&format!(\n                 \"the link appears in this line:\\n\\n{line}\\n\\\n                      {indicator: <before$}{indicator:^<found$}\",\n                 line = line,\n@@ -1644,9 +1642,9 @@ fn report_diagnostic(\n             ));\n         }\n \n-        decorate(&mut diag, span);\n+        decorate(lint, span);\n \n-        diag.emit();\n+        lint\n     });\n }\n "}, {"sha": "694b03161d929a59761492853dcd4a66d098686d", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -240,9 +240,8 @@ impl<'a, 'tcx> DocVisitor for InvalidHtmlTagsLinter<'a, 'tcx> {\n                     Some(sp) => sp,\n                     None => item.attr_span(tcx),\n                 };\n-                tcx.struct_span_lint_hir(crate::lint::INVALID_HTML_TAGS, hir_id, sp, |lint| {\n+                tcx.struct_span_lint_hir(crate::lint::INVALID_HTML_TAGS, hir_id, sp, msg, |lint| {\n                     use rustc_lint_defs::Applicability;\n-                    let mut diag = lint.build(msg);\n                     // If a tag looks like `<this>`, it might actually be a generic.\n                     // We don't try to detect stuff `<like, this>` because that's not valid HTML,\n                     // and we don't try to detect stuff `<like this>` because that's not valid Rust.\n@@ -305,11 +304,10 @@ impl<'a, 'tcx> DocVisitor for InvalidHtmlTagsLinter<'a, 'tcx> {\n                         if (generics_start > 0 && dox.as_bytes()[generics_start - 1] == b'<')\n                             || (generics_end < dox.len() && dox.as_bytes()[generics_end] == b'>')\n                         {\n-                            diag.emit();\n-                            return;\n+                            return lint;\n                         }\n                         // multipart form is chosen here because ``Vec<i32>`` would be confusing.\n-                        diag.multipart_suggestion(\n+                        lint.multipart_suggestion(\n                             \"try marking as source code\",\n                             vec![\n                                 (generics_sp.shrink_to_lo(), String::from(\"`\")),\n@@ -318,7 +316,8 @@ impl<'a, 'tcx> DocVisitor for InvalidHtmlTagsLinter<'a, 'tcx> {\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n-                    diag.emit()\n+\n+                    lint\n                 });\n             };\n "}, {"sha": "ccf52cd0b933f35edc9b0ee00d5bc7ebff46db10", "filename": "src/test/rustdoc-ui/bare-urls.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fbare-urls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fbare-urls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fbare-urls.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,12 +4,12 @@ error: this URL is not a hyperlink\n LL | /// https://somewhere.com\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com>`\n    |\n+   = note: bare URLs are not automatically turned into clickable links\n note: the lint level is defined here\n   --> $DIR/bare-urls.rs:3:9\n    |\n LL | #![deny(rustdoc::bare_urls)]\n    |         ^^^^^^^^^^^^^^^^^^\n-   = note: bare URLs are not automatically turned into clickable links\n \n error: this URL is not a hyperlink\n   --> $DIR/bare-urls.rs:7:5"}, {"sha": "01beba1ffc4a451f1427885e13095f99030763ca", "filename": "src/test/rustdoc-ui/check-attr-test.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -8,12 +8,12 @@ error: unknown attribute `compile-fail`. Did you mean `compile_fail`?\n 9 | | /// ```\n   | |_______^\n   |\n+  = help: the code block will either not be tested if not marked as a rust one or won't fail if it compiles successfully\n note: the lint level is defined here\n  --> $DIR/check-attr-test.rs:3:9\n   |\n 3 | #![deny(rustdoc::invalid_codeblock_attributes)]\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-  = help: the code block will either not be tested if not marked as a rust one or won't fail if it compiles successfully\n \n error: unknown attribute `compilefail`. Did you mean `compile_fail`?\n  --> $DIR/check-attr-test.rs:5:1"}, {"sha": "f66e63ab727eab3cd76883ebde3326dc25898246", "filename": "src/test/rustdoc-ui/check-attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -10,12 +10,12 @@ LL | | /// boo\n LL | | /// ```\n    | |_______^\n    |\n+   = help: the code block will either not be tested if not marked as a rust one or won't fail if it compiles successfully\n note: the lint level is defined here\n   --> $DIR/check-attr.rs:1:9\n    |\n LL | #![deny(rustdoc::invalid_codeblock_attributes)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: the code block will either not be tested if not marked as a rust one or won't fail if it compiles successfully\n \n error: unknown attribute `compilefail`. Did you mean `compile_fail`?\n   --> $DIR/check-attr.rs:3:1"}, {"sha": "9770be2f191f0b777bce8d1e74b752ed47d708a7", "filename": "src/test/rustdoc-ui/check-cfg-test.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg-test.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(feature = \"invalid\")]\n    |       ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unexpected_cfgs)]` on by default\n    = note: expected values for `feature` are: test\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "d8aeccbfc31a842021562ff915a39cb465d586fe", "filename": "src/test/rustdoc-ui/check-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-fail.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -32,8 +32,8 @@ LL | | //! let x = 12;\n LL | | //! ```\n    | |_______^\n    |\n-   = note: `#[deny(rustdoc::invalid_codeblock_attributes)]` implied by `#[deny(rustdoc::all)]`\n    = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n+   = note: `#[deny(rustdoc::invalid_codeblock_attributes)]` implied by `#[deny(rustdoc::all)]`\n \n error: unknown attribute `testharness`. Did you mean `test_harness`?\n   --> $DIR/check-fail.rs:16:1"}, {"sha": "d379f33f2bd5a5e1f916def278383b8c41f076f7", "filename": "src/test/rustdoc-ui/check.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -24,14 +24,14 @@ LL | pub fn foo() {}\n \n warning: no documentation found for this crate's top-level module\n    |\n+   = help: The following guide may be of use:\n+           https://doc.rust-lang.org/$CHANNEL/rustdoc/how-to-write-documentation.html\n note: the lint level is defined here\n   --> $DIR/check.rs:10:9\n    |\n LL | #![warn(rustdoc::all)]\n    |         ^^^^^^^^^^^^\n    = note: `#[warn(rustdoc::missing_crate_level_docs)]` implied by `#[warn(rustdoc::all)]`\n-   = help: The following guide may be of use:\n-           https://doc.rust-lang.org/$CHANNEL/rustdoc/how-to-write-documentation.html\n \n warning: missing code example in this documentation\n   --> $DIR/check.rs:5:1"}, {"sha": "3e08354a61dea7169c4f2bd8dbf37e5aaaa99d52", "filename": "src/test/rustdoc-ui/deny-intra-link-resolution-failure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,12 +4,12 @@ error: unresolved link to `v2`\n LL | /// [v2]\n    |      ^^ no item named `v2` in scope\n    |\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n note: the lint level is defined here\n   --> $DIR/deny-intra-link-resolution-failure.rs:1:9\n    |\n LL | #![deny(rustdoc::broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error\n "}, {"sha": "1a00d10d3fc6f455c655c37d36e1861408ac1345", "filename": "src/test/rustdoc-ui/diagnostic-width.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fdiagnostic-width.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fdiagnostic-width.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdiagnostic-width.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,12 +4,12 @@ error: this URL is not a hyperlink\n LL | ... a http://link.com\n    |       ^^^^^^^^^^^^^^^ help: use an automatic link instead: `<http://link.com>`\n    |\n+   = note: bare URLs are not automatically turned into clickable links\n note: the lint level is defined here\n   --> $DIR/diagnostic-width.rs:2:9\n    |\n LL | ...ny(rustdoc::bare_url...\n    |       ^^^^^^^^^^^^^^^^^^\n-   = note: bare URLs are not automatically turned into clickable links\n \n error: aborting due to previous error\n "}, {"sha": "68df2771fd7235c9f9b31037cb261dc4f1ac5881", "filename": "src/test/rustdoc-ui/doc-attr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,14 +4,14 @@ error: unknown `doc` attribute `as_ptr`\n LL | #[doc(as_ptr)]\n    |       ^^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n note: the lint level is defined here\n   --> $DIR/doc-attr.rs:2:9\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(invalid_doc_attributes)]` implied by `#[deny(warnings)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n \n error: invalid `doc` attribute\n   --> $DIR/doc-attr.rs:12:7"}, {"sha": "fcc93d0532aca77bf2e9f0e9f5fb1a21a2ac573a", "filename": "src/test/rustdoc-ui/doc-include-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fdoc-include-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fdoc-include-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-include-suggestion.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: unknown `doc` attribute `include`\n LL | #[doc(include = \"external-cross-doc.md\")]\n    | ------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-- help: use `doc = include_str!` instead: `#[doc = include_str!(\"external-cross-doc.md\")]`\n    |\n-   = note: `#[warn(invalid_doc_attributes)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: `#[warn(invalid_doc_attributes)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "58612327ff93ec7b288b86dcd6f886d2e5e769d8", "filename": "src/test/rustdoc-ui/doc-spotlight.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-spotlight.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,16 +4,16 @@ error: unknown `doc` attribute `spotlight`\n LL | #[doc(spotlight)]\n    |       ^^^^^^^^^ help: use `notable_trait` instead\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: `doc(spotlight)` was renamed to `doc(notable_trait)`\n+   = note: `doc(spotlight)` is now a no-op\n note: the lint level is defined here\n   --> $DIR/doc-spotlight.rs:2:9\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(invalid_doc_attributes)]` implied by `#[deny(warnings)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n-   = note: `doc(spotlight)` was renamed to `doc(notable_trait)`\n-   = note: `doc(spotlight)` is now a no-op\n \n error: aborting due to previous error\n "}, {"sha": "5e6014954a49bb438b58cb5a6ddd93ac6be25ae2", "filename": "src/test/rustdoc-ui/doc-test-attr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fdoc-test-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fdoc-test-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-test-attr.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ error: `#[doc(test(...)]` takes a list of attributes\n LL | #![doc(test)]\n    |        ^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n note: the lint level is defined here\n   --> $DIR/doc-test-attr.rs:2:9\n    |\n LL | #![deny(invalid_doc_attributes)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n \n error: `#[doc(test(...)]` takes a list of attributes\n   --> $DIR/doc-test-attr.rs:7:8"}, {"sha": "8a3329aa3ed9a4bd2832327904abb3c2152fd44d", "filename": "src/test/rustdoc-ui/doctest-edition.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fdoctest-edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fdoctest-edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoctest-edition.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,12 +7,12 @@ LL | | //! foo'b'\n LL | | //! ```\n    | |_______^\n    |\n+   = note: error from rustc: prefix `foo` is unknown\n note: the lint level is defined here\n   --> $DIR/doctest-edition.rs:3:9\n    |\n LL | #![deny(rustdoc::invalid_rust_codeblocks)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: error from rustc: prefix `foo` is unknown\n help: mark blocks that do not contain Rust code as text\n    |\n LL | //! ```text"}, {"sha": "cbe9a3d14af7ebc2c57618ba9b830893b1136ddc", "filename": "src/test/rustdoc-ui/feature-gate-rustdoc_missing_doc_code_examples.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Ffeature-gate-rustdoc_missing_doc_code_examples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Ffeature-gate-rustdoc_missing_doc_code_examples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffeature-gate-rustdoc_missing_doc_code_examples.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,14 +4,14 @@ error: unknown lint: `rustdoc::missing_doc_code_examples`\n LL | #![allow(rustdoc::missing_doc_code_examples)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: the `rustdoc::missing_doc_code_examples` lint is unstable\n+   = note: see issue #101730 <https://github.com/rust-lang/rust/issues/101730> for more information\n+   = help: add `#![feature(rustdoc_missing_doc_code_examples)]` to the crate attributes to enable\n note: the lint level is defined here\n   --> $DIR/feature-gate-rustdoc_missing_doc_code_examples.rs:1:9\n    |\n LL | #![deny(unknown_lints)]\n    |         ^^^^^^^^^^^^^\n-   = note: the `rustdoc::missing_doc_code_examples` lint is unstable\n-   = note: see issue #101730 <https://github.com/rust-lang/rust/issues/101730> for more information\n-   = help: add `#![feature(rustdoc_missing_doc_code_examples)]` to the crate attributes to enable\n \n error: unknown lint: `rustdoc::missing_doc_code_examples`\n   --> $DIR/feature-gate-rustdoc_missing_doc_code_examples.rs:4:1"}, {"sha": "a30ea51dd8a7f123ab9dc8a7f25dcef98aeddb79", "filename": "src/test/rustdoc-ui/ignore-block-help.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fignore-block-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fignore-block-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fignore-block-help.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,13 +7,13 @@ LL | | /// let heart = '\u2764\ufe0f';\n LL | | /// ```\n    | |_______^\n    |\n-   = note: `#[warn(rustdoc::invalid_rust_codeblocks)]` on by default\n help: `ignore` code blocks require valid Rust code for syntax highlighting; mark blocks that do not contain Rust code as text: ```text\n   --> $DIR/ignore-block-help.rs:3:5\n    |\n LL | /// ```ignore (to-prevent-tidy-error)\n    |     ^^^\n    = note: error from rustc: character literal may only contain one codepoint\n+   = note: `#[warn(rustdoc::invalid_rust_codeblocks)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "7c81044dbf81b256b2b8c310e067578603d7a2d4", "filename": "src/test/rustdoc-ui/intra-doc/html-as-generics-intra-doc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fhtml-as-generics-intra-doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fhtml-as-generics-intra-doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fhtml-as-generics-intra-doc.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,12 +4,12 @@ error: unresolved link to `NonExistentStruct`\n LL | /// This [test][NonExistentStruct<i32>] thing!\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ no item named `NonExistentStruct` in scope\n    |\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n note: the lint level is defined here\n   --> $DIR/html-as-generics-intra-doc.rs:2:9\n    |\n LL | #![deny(rustdoc::broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: unresolved link to `NonExistentStruct2`\n   --> $DIR/html-as-generics-intra-doc.rs:17:11"}, {"sha": "6ad8084b09c35ae899e1d7a895d79fa7383ee102", "filename": "src/test/rustdoc-ui/intra-doc/macro-rules-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,12 +4,12 @@ error: unresolved link to `before_but_limited_to_module`\n LL | /// [before_but_limited_to_module]\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no item named `before_but_limited_to_module` in scope\n    |\n+   = note: `macro_rules` named `before_but_limited_to_module` exists in this crate, but it is not in scope at this link's location\n note: the lint level is defined here\n   --> $DIR/macro-rules-error.rs:5:9\n    |\n LL | #![deny(rustdoc::broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: `macro_rules` named `before_but_limited_to_module` exists in this crate, but it is not in scope at this link's location\n \n error: unresolved link to `after`\n   --> $DIR/macro-rules-error.rs:15:6"}, {"sha": "8ec894d101b6c9af87991a7546c008921008d230", "filename": "src/test/rustdoc-ui/intra-doc/non-path-primitives.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fnon-path-primitives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fnon-path-primitives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fnon-path-primitives.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,12 +4,12 @@ error: unresolved link to `T`\n LL | //! [[T]::rotate_left]\n    |       ^ no item named `T` in scope\n    |\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n note: the lint level is defined here\n   --> $DIR/non-path-primitives.rs:1:9\n    |\n LL | #![deny(rustdoc::broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: unresolved link to `Z`\n   --> $DIR/non-path-primitives.rs:14:5"}, {"sha": "4d5bd70bff61ef3cfe477685ce6b992f4c596eee", "filename": "src/test/rustdoc-ui/intra-doc/private-from-crate-level.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate-from-crate-level.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate-from-crate-level.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate-from-crate-level.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: public documentation for `private_from_crate_level` links to private it\n LL | //! [my_module]\n    |      ^^^^^^^^^ this item is private\n    |\n-   = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default\n    = note: this link will resolve properly if you pass `--document-private-items`\n+   = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "6661e9021f8372c634b3a92f04afaaf022ee26f4", "filename": "src/test/rustdoc-ui/intra-doc/private.private.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.private.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: public documentation for `DocMe` links to private item `DontDocMe`\n LL | /// docs [DontDocMe] [DontDocMe::f] [DontDocMe::x]\n    |           ^^^^^^^^^ this item is private\n    |\n-   = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default\n    = note: this link resolves only because you passed `--document-private-items`, but will break without\n+   = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default\n \n warning: public documentation for `DocMe` links to private item `DontDocMe::f`\n   --> $DIR/private.rs:7:23"}, {"sha": "45b51e12edc7ec382b722955ed166791403fa887", "filename": "src/test/rustdoc-ui/intra-doc/private.public.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.public.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: public documentation for `DocMe` links to private item `DontDocMe`\n LL | /// docs [DontDocMe] [DontDocMe::f] [DontDocMe::x]\n    |           ^^^^^^^^^ this item is private\n    |\n-   = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default\n    = note: this link will resolve properly if you pass `--document-private-items`\n+   = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default\n \n warning: public documentation for `DocMe` links to private item `DontDocMe::f`\n   --> $DIR/private.rs:7:23"}, {"sha": "e8ee40ad4e874947c5a056d8a3372dfc9c87038b", "filename": "src/test/rustdoc-ui/intra-doc/span-ice-55723.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fspan-ice-55723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fspan-ice-55723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fspan-ice-55723.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,12 +4,12 @@ error: unresolved link to `i`\n LL | /// \uff08arr[i]\uff09\n    |           ^ no item named `i` in scope\n    |\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n note: the lint level is defined here\n   --> $DIR/span-ice-55723.rs:1:9\n    |\n LL | #![deny(rustdoc::broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error\n "}, {"sha": "508d0683d5dff1a37973f957ff7bc8a32ecf64a5", "filename": "src/test/rustdoc-ui/intra-doc/through-proc-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fthrough-proc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fthrough-proc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fthrough-proc-macro.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,12 +4,12 @@ warning: unresolved link to `Oooops`\n LL |     /// [Oooops]\n    |          ^^^^^^ no item named `Oooops` in scope\n    |\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n note: the lint level is defined here\n   --> $DIR/through-proc-macro.rs:7:9\n    |\n LL | #![warn(rustdoc::broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: 1 warning emitted\n "}, {"sha": "e7b4c43e790ed4878c4a77b95ae38514502c4a10", "filename": "src/test/rustdoc-ui/intra-doc/unknown-disambiguator.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ error: unknown disambiguator `foo`\n LL | //! Linking to [foo@banana] and [`bar@banana!()`].\n    |                 ^^^\n    |\n+   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n note: the lint level is defined here\n   --> $DIR/unknown-disambiguator.rs:2:9\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(warnings)]`\n-   = note: see https://doc.rust-lang.org/$CHANNEL/rustdoc/linking-to-items-by-name.html#namespaces-and-disambiguators for more info about disambiguators\n \n error: unknown disambiguator `bar`\n   --> $DIR/unknown-disambiguator.rs:4:35"}, {"sha": "815324563cb6739aa6770e945af140f80597584b", "filename": "src/test/rustdoc-ui/intra-doc/unused-extern-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funused-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funused-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funused-extern-crate.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,12 +4,12 @@ error: unresolved link to `zip`\n LL | /// See [zip] crate.\n    |          ^^^ no item named `zip` in scope\n    |\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n note: the lint level is defined here\n   --> $DIR/unused-extern-crate.rs:2:9\n    |\n LL | #![deny(rustdoc::broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error\n "}, {"sha": "c309a55f44dcb61feaaebaf54165b9b52a777407", "filename": "src/test/rustdoc-ui/intra-doc/warning-crlf.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning-crlf.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: unresolved link to `error`\n LL | /// [error]\n    |      ^^^^^ no item named `error` in scope\n    |\n-   = note: `#[warn(rustdoc::broken_intra_doc_links)]` on by default\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n+   = note: `#[warn(rustdoc::broken_intra_doc_links)]` on by default\n \n warning: unresolved link to `error1`\n   --> $DIR/warning-crlf.rs:12:11"}, {"sha": "3c66e587b470d4b6cf3d9f25fd0bc0dea9357112", "filename": "src/test/rustdoc-ui/invalid-doc-attr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Finvalid-doc-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Finvalid-doc-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-doc-attr.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,15 +4,15 @@ error: this attribute can only be applied at the crate level\n LL | #[doc(test(no_crate_inject))]\n    |       ^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read <https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level> for more information\n note: the lint level is defined here\n   --> $DIR/invalid-doc-attr.rs:2:9\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(invalid_doc_attributes)]` implied by `#[deny(warnings)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n-   = note: read <https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level> for more information\n help: to apply to the crate, use an inner attribute\n    |\n LL | #![doc(test(no_crate_inject))]"}, {"sha": "6388830cf1bae850b725f58d063ef9f2f957b422", "filename": "src/test/rustdoc-ui/invalid-syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,10 +7,10 @@ LL | | /// \\__________pkt->size___________/          \\_result->size_/ \\__pkt->si\n LL | | /// ```\n    | |_______^\n    |\n-   = note: `#[warn(rustdoc::invalid_rust_codeblocks)]` on by default\n    = note: error from rustc: unknown start of token: \\\n    = note: error from rustc: unknown start of token: \\\n    = note: error from rustc: unknown start of token: \\\n+   = note: `#[warn(rustdoc::invalid_rust_codeblocks)]` on by default\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text"}, {"sha": "44c88b6183a8ef924e56acbe1bb2a04dc70833dd", "filename": "src/test/rustdoc-ui/issue-74134.private.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fissue-74134.private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fissue-74134.private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-74134.private.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: public documentation for `public_item` links to private item `PrivateTy\n LL |     /// [`PrivateType`]\n    |           ^^^^^^^^^^^ this item is private\n    |\n-   = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default\n    = note: this link resolves only because you passed `--document-private-items`, but will break without\n+   = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "5b1887b8310847b8a6bab7db446fa23bfe540abf", "filename": "src/test/rustdoc-ui/issue-74134.public.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: public documentation for `public_item` links to private item `PrivateTy\n LL |     /// [`PrivateType`]\n    |           ^^^^^^^^^^^ this item is private\n    |\n-   = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default\n    = note: this link will resolve properly if you pass `--document-private-items`\n+   = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "4f2c96588916c3ac01d90d7f6f98cdbe21ada620", "filename": "src/test/rustdoc-ui/lint-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -35,8 +35,8 @@ error: unresolved link to `error`\n LL | /// what up, let's make an [error]\n    |                             ^^^^^ no item named `error` in scope\n    |\n-   = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(rustdoc::all)]`\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n+   = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(rustdoc::all)]`\n \n error: unclosed HTML tag `unknown`\n   --> $DIR/lint-group.rs:28:5"}, {"sha": "2b136f5be16b02adb5816e27ed319c10ebf73174", "filename": "src/test/rustdoc-ui/macro-docs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fmacro-docs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fmacro-docs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fmacro-docs.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,13 +7,13 @@ LL |         /// A\n LL | m!();\n    | ---- in this macro invocation\n    |\n-   = note: `#[warn(rustdoc::broken_intra_doc_links)]` on by default\n    = note: the link appears in this line:\n            \n            [`long_cat`] is really long\n             ^^^^^^^^^^\n    = note: no item named `long_cat` in scope\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n+   = note: `#[warn(rustdoc::broken_intra_doc_links)]` on by default\n    = note: this warning originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: 1 warning emitted"}, {"sha": "fb3a5e415dfee980045e41da3af519ce4b8b7f18", "filename": "src/test/rustdoc-ui/no-crate-level-doc-lint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fno-crate-level-doc-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fno-crate-level-doc-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fno-crate-level-doc-lint.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -1,12 +1,12 @@\n error: no documentation found for this crate's top-level module\n    |\n+   = help: The following guide may be of use:\n+           https://doc.rust-lang.org/$CHANNEL/rustdoc/how-to-write-documentation.html\n note: the lint level is defined here\n   --> $DIR/no-crate-level-doc-lint.rs:3:9\n    |\n LL | #![deny(rustdoc::missing_crate_level_docs)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: The following guide may be of use:\n-           https://doc.rust-lang.org/$CHANNEL/rustdoc/how-to-write-documentation.html\n \n error: aborting due to previous error\n "}, {"sha": "81ef799617ccdde9d7088b113c3cdafc97bec3bc", "filename": "src/test/rustdoc-ui/pub-export-lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fpub-export-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Fpub-export-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fpub-export-lint.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,12 +4,12 @@ error: unresolved link to `aloha`\n LL | /// [aloha]\n    |      ^^^^^ no item named `aloha` in scope\n    |\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n note: the lint level is defined here\n   --> $DIR/pub-export-lint.rs:1:9\n    |\n LL | #![deny(rustdoc::broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: aborting due to previous error\n "}, {"sha": "2ab67090f66e69c36c1c61ea36400ddde83ae08d", "filename": "src/test/rustdoc-ui/reference-link-reports-error-once.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Freference-link-reports-error-once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Freference-link-reports-error-once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Freference-link-reports-error-once.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,12 +4,12 @@ error: unresolved link to `ref`\n LL | /// [a]: ref\n    |          ^^^ no item named `ref` in scope\n    |\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n note: the lint level is defined here\n   --> $DIR/reference-link-reports-error-once.rs:1:9\n    |\n LL | #![deny(rustdoc::broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: unresolved link to `ref2`\n   --> $DIR/reference-link-reports-error-once.rs:15:10"}, {"sha": "ee9b67cb91be669648a1dba9dc003b07df7f60e2", "filename": "src/test/rustdoc-ui/renamed-lint-still-applies.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Frenamed-lint-still-applies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Frustdoc-ui%2Frenamed-lint-still-applies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Frenamed-lint-still-applies.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -18,25 +18,25 @@ error: unresolved link to `x`\n LL | //! [x]\n    |      ^ no item named `x` in scope\n    |\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n note: the lint level is defined here\n   --> $DIR/renamed-lint-still-applies.rs:2:9\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: this URL is not a hyperlink\n   --> $DIR/renamed-lint-still-applies.rs:9:5\n    |\n LL | //! http://example.com\n    |     ^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<http://example.com>`\n    |\n+   = note: bare URLs are not automatically turned into clickable links\n note: the lint level is defined here\n   --> $DIR/renamed-lint-still-applies.rs:7:9\n    |\n LL | #![deny(rustdoc::non_autolinks)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n-   = note: bare URLs are not automatically turned into clickable links\n \n error: aborting due to 2 previous errors; 2 warnings emitted\n "}, {"sha": "c05443488c3ea9748a5473d7641696e5d8520bf9", "filename": "src/test/ui-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -49,9 +49,11 @@ impl<'tcx> LateLintPass<'tcx> for MissingAllowedAttrPass {\n \n         let allowed = |attr| pprust::attribute_to_string(attr).contains(\"allowed_attr\");\n         if !cx.tcx.hir().attrs(item.hir_id()).iter().any(allowed) {\n-            cx.lint(MISSING_ALLOWED_ATTR, |lint| {\n-                lint.build(\"Missing 'allowed_attr' attribute\").set_span(span).emit();\n-            });\n+            cx.lint(\n+                MISSING_ALLOWED_ATTR,\n+                \"Missing 'allowed_attr' attribute\",\n+                |lint| lint.set_span(span)\n+            );\n         }\n     }\n }"}, {"sha": "073da688c7cd9d47c83b94056638c6bedbe2d707", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -29,9 +29,11 @@ impl<'tcx> LateLintPass<'tcx> for Pass {\n         let attrs = cx.tcx.hir().attrs(rustc_hir::CRATE_HIR_ID);\n         let span = cx.tcx.def_span(CRATE_DEF_ID);\n         if !cx.sess().contains_name(attrs, Symbol::intern(\"crate_okay\")) {\n-            cx.lint(CRATE_NOT_OKAY, |lint| {\n-                lint.build(\"crate is not marked with #![crate_okay]\").set_span(span).emit();\n-            });\n+            cx.lint(\n+                CRATE_NOT_OKAY,\n+                \"crate is not marked with #![crate_okay]\",\n+                |lint| lint.set_span(span)\n+            );\n         }\n     }\n }"}, {"sha": "4a41e7fbb72a1924af369a2d9b941f0bf56e86a5", "filename": "src/test/ui-fulldeps/auxiliary/lint-group-plugin-test.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -22,12 +22,10 @@ declare_lint_pass!(Pass => [TEST_LINT, PLEASE_LINT]);\n impl<'tcx> LateLintPass<'tcx> for Pass {\n     fn check_item(&mut self, cx: &LateContext, it: &rustc_hir::Item) {\n         match it.ident.as_str() {\n-            \"lintme\" => cx.lint(TEST_LINT, |lint| {\n-                lint.build(\"item is named 'lintme'\").set_span(it.span).emit();\n-            }),\n-            \"pleaselintme\" => cx.lint(PLEASE_LINT, |lint| {\n-                lint.build(\"item is named 'pleaselintme'\").set_span(it.span).emit();\n-            }),\n+            \"lintme\" => cx.lint(TEST_LINT, \"item is named 'lintme'\", |lint| lint.set_span(it.span)),\n+            \"pleaselintme\" => {\n+                cx.lint(PLEASE_LINT, \"item is named 'pleaselintme'\", |lint| lint.set_span(it.span))\n+            }\n             _ => {}\n         }\n     }"}, {"sha": "30956deb799ed0816a3a1fb5c28686efa12e4c22", "filename": "src/test/ui-fulldeps/auxiliary/lint-plugin-test.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -21,9 +21,7 @@ declare_lint_pass!(Pass => [TEST_LINT]);\n impl EarlyLintPass for Pass {\n     fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n         if it.ident.name.as_str() == \"lintme\" {\n-            cx.lint(TEST_LINT, |lint| {\n-                lint.build(\"item is named 'lintme'\").set_span(it.span).emit();\n-            });\n+            cx.lint(TEST_LINT, \"item is named 'lintme'\", |lint| lint.set_span(it.span));\n         }\n     }\n }"}, {"sha": "c2c024865e8a807f8b1e3e17d0d6d23affc71879", "filename": "src/test/ui-fulldeps/auxiliary/lint-tool-test.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -31,14 +31,10 @@ declare_lint_pass!(Pass => [TEST_LINT, TEST_GROUP, TEST_RUSTC_TOOL_LINT]);\n impl EarlyLintPass for Pass {\n     fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n         if it.ident.name.as_str() == \"lintme\" {\n-            cx.lint(TEST_LINT, |lint| {\n-                lint.build(\"item is named 'lintme'\").set_span(it.span).emit();\n-            });\n+            cx.lint(TEST_LINT, \"item is named 'lintme'\", |lint| lint.set_span(it.span));\n         }\n         if it.ident.name.as_str() == \"lintmetoo\" {\n-            cx.lint(TEST_GROUP, |lint| {\n-                lint.build(\"item is named 'lintmetoo'\").set_span(it.span).emit();\n-            });\n+            cx.lint(TEST_GROUP, \"item is named 'lintmetoo'\", |lint| lint.set_span(it.span));\n         }\n     }\n }"}, {"sha": "3cb13082f2501bd9034fe1673bc356d5e3b90bc9", "filename": "src/test/ui-fulldeps/internal-lints/default_hash_types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,12 +4,12 @@ error: prefer `FxHashMap` over `HashMap`, it has better performance\n LL |     let _map: HashMap<String, String> = HashMap::default();\n    |                                         ^^^^^^^\n    |\n+   = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n note: the lint level is defined here\n   --> $DIR/default_hash_types.rs:4:9\n    |\n LL | #![deny(rustc::default_hash_types)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n \n error: prefer `FxHashMap` over `HashMap`, it has better performance\n   --> $DIR/default_hash_types.rs:16:15"}, {"sha": "4e296fff6d0ba68bcdee6f4a9e44c862b01bfc16", "filename": "src/test/ui-fulldeps/internal-lints/existing_doc_keyword.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,12 +4,12 @@ error: found non-existing keyword `tadam` used in `#[doc(keyword = \\\"...\\\")]`\n LL | #[doc(keyword = \"tadam\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = help: only existing keywords are allowed in core/std\n note: the lint level is defined here\n   --> $DIR/existing_doc_keyword.rs:8:9\n    |\n LL | #![deny(rustc::existing_doc_keyword)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: only existing keywords are allowed in core/std\n \n error: aborting due to previous error\n "}, {"sha": "ad6e93334cdc4074a547c04ce8dedad866e426d3", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,12 +4,12 @@ error: implementing `LintPass` by hand\n LL | impl LintPass for Foo {\n    |      ^^^^^^^^\n    |\n+   = help: try using `declare_lint_pass!` or `impl_lint_pass!` instead\n note: the lint level is defined here\n   --> $DIR/lint_pass_impl_without_macro.rs:4:9\n    |\n LL | #![deny(rustc::lint_pass_impl_without_macro)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: try using `declare_lint_pass!` or `impl_lint_pass!` instead\n \n error: implementing `LintPass` by hand\n   --> $DIR/lint_pass_impl_without_macro.rs:30:14"}, {"sha": "ee4ef9982371e2903eb789af5381862e53d58ab5", "filename": "src/test/ui-fulldeps/internal-lints/query_stability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,12 +4,12 @@ error: using `drain` can result in unstable query results\n LL |     for _ in x.drain() {}\n    |                ^^^^^\n    |\n+   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n note: the lint level is defined here\n   --> $DIR/query_stability.rs:4:9\n    |\n LL | #![deny(rustc::potential_query_instability)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n \n error: using `iter` can result in unstable query results\n   --> $DIR/query_stability.rs:16:16"}, {"sha": "d425f6f34e938602a7dd8eee5c924b4c253cef6e", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -585,6 +585,7 @@ struct LintAttributeOnSessionDiag {}\n #[derive(LintDiagnostic)]\n #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n //~^ ERROR `#[lint(...)]` is not a valid attribute\n+//~| ERROR `#[lint(...)]` is not a valid attribute\n //~| ERROR diagnostic slug not specified\n //~| ERROR cannot find attribute `lint` in this scope\n struct LintAttributeOnLintDiag {}"}, {"sha": "17bab3a1d654a0252555cc34b7064bce379d3f21", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -440,86 +440,93 @@ error: `#[lint(...)]` is not a valid attribute\n LL | #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: `#[lint(...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:586:1\n+   |\n+LL | #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:586:1\n    |\n LL | / #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n LL | |\n LL | |\n LL | |\n+LL | |\n LL | | struct LintAttributeOnLintDiag {}\n    | |_________________________________^\n    |\n    = help: specify the slug as the first argument to the attribute, such as `#[diag(typeck::example_error)]`\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:595:52\n+  --> $DIR/diagnostic-derive.rs:596:52\n    |\n LL |     #[suggestion(typeck::suggestion, code = \"...\", code = \",,,\")]\n    |                                                    ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:595:38\n+  --> $DIR/diagnostic-derive.rs:596:38\n    |\n LL |     #[suggestion(typeck::suggestion, code = \"...\", code = \",,,\")]\n    |                                      ^^^^^^^^^^^^\n \n error: wrong types for suggestion\n-  --> $DIR/diagnostic-derive.rs:604:24\n+  --> $DIR/diagnostic-derive.rs:605:24\n    |\n LL |     suggestion: (Span, usize),\n    |                        ^^^^^\n    |\n    = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`\n \n error: wrong types for suggestion\n-  --> $DIR/diagnostic-derive.rs:612:17\n+  --> $DIR/diagnostic-derive.rs:613:17\n    |\n LL |     suggestion: (Span,),\n    |                 ^^^^^^^\n    |\n    = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:619:5\n+  --> $DIR/diagnostic-derive.rs:620:5\n    |\n LL |     #[suggestion(typeck::suggestion)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:626:1\n+  --> $DIR/diagnostic-derive.rs:627:1\n    |\n LL | #[multipart_suggestion(typeck::suggestion)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:629:1\n+  --> $DIR/diagnostic-derive.rs:630:1\n    |\n LL | #[multipart_suggestion()]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:633:5\n+  --> $DIR/diagnostic-derive.rs:634:5\n    |\n LL |     #[multipart_suggestion(typeck::suggestion)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:641:1\n+  --> $DIR/diagnostic-derive.rs:642:1\n    |\n LL | #[suggestion(typeck::suggestion, code = \"...\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[label]` and `#[suggestion]` can only be applied to fields\n \n error: `#[label]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:650:1\n+  --> $DIR/diagnostic-derive.rs:651:1\n    |\n LL | #[label]\n    | ^^^^^^^^\n@@ -563,19 +570,19 @@ LL | #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    |   ^^^^ help: a built-in attribute with a similar name exists: `link`\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:626:3\n+  --> $DIR/diagnostic-derive.rs:627:3\n    |\n LL | #[multipart_suggestion(typeck::suggestion)]\n    |   ^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:629:3\n+  --> $DIR/diagnostic-derive.rs:630:3\n    |\n LL | #[multipart_suggestion()]\n    |   ^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:633:7\n+  --> $DIR/diagnostic-derive.rs:634:7\n    |\n LL |     #[multipart_suggestion(typeck::suggestion)]\n    |       ^^^^^^^^^^^^^^^^^^^^\n@@ -600,7 +607,7 @@ LL |         arg: impl IntoDiagnosticArg,\n    |                   ^^^^^^^^^^^^^^^^^ required by this bound in `DiagnosticBuilder::<'a, G>::set_arg`\n    = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 74 previous errors\n+error: aborting due to 75 previous errors\n \n Some errors have detailed explanations: E0277, E0425.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "e86a73ea60f65090962a9e25f1b09a5fa637540c", "filename": "src/test/ui/abi/unsupported.aarch64.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fabi%2Funsupported.aarch64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fabi%2Funsupported.aarch64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Funsupported.aarch64.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -52,9 +52,9 @@ warning: use of calling convention not supported on this target\n LL | extern \"stdcall\" fn stdcall() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unsupported_calling_conventions)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #87678 <https://github.com/rust-lang/rust/issues/87678>\n+   = note: `#[warn(unsupported_calling_conventions)]` on by default\n \n error: aborting due to 8 previous errors; 1 warning emitted\n "}, {"sha": "f7569c8cdd797f2fcb277dd1d70c96d2bbdc767f", "filename": "src/test/ui/abi/unsupported.arm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fabi%2Funsupported.arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fabi%2Funsupported.arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Funsupported.arm.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -46,9 +46,9 @@ warning: use of calling convention not supported on this target\n LL | extern \"stdcall\" fn stdcall() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unsupported_calling_conventions)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #87678 <https://github.com/rust-lang/rust/issues/87678>\n+   = note: `#[warn(unsupported_calling_conventions)]` on by default\n \n error: aborting due to 7 previous errors; 1 warning emitted\n "}, {"sha": "26023a4584e4087f48a414c9dd48988150a618d3", "filename": "src/test/ui/abi/unsupported.x64.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fabi%2Funsupported.x64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fabi%2Funsupported.x64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Funsupported.x64.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -46,9 +46,9 @@ warning: use of calling convention not supported on this target\n LL | extern \"stdcall\" fn stdcall() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unsupported_calling_conventions)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #87678 <https://github.com/rust-lang/rust/issues/87678>\n+   = note: `#[warn(unsupported_calling_conventions)]` on by default\n \n error: aborting due to 7 previous errors; 1 warning emitted\n "}, {"sha": "691e2c7951249586938d1b20cdaca198f823ed9c", "filename": "src/test/ui/anon-params/anon-params-deprecated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ warning: anonymous parameters are deprecated and will be removed in the next edi\n LL |     fn foo(i32);\n    |            ^^^ help: try naming the parameter or explicitly ignoring it: `_: i32`\n    |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n+   = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n note: the lint level is defined here\n   --> $DIR/anon-params-deprecated.rs:1:9\n    |\n LL | #![warn(anonymous_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n warning: anonymous parameters are deprecated and will be removed in the next edition\n   --> $DIR/anon-params-deprecated.rs:12:30"}, {"sha": "154872915d6bdd87951de4313363f68a07532420", "filename": "src/test/ui/array-slice-vec/array_const_index-0.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-0.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL | const B: i32 = (&A)[1];\n    | ------------   ^^^^^^^ index out of bounds: the length is 0 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n \n@@ -17,7 +17,7 @@ error: any use of this value will cause an error\n LL | const B: i32 = (&A)[1];\n    | ------------   ^^^^^^^ index out of bounds: the length is 0 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "a13b5b4ccc1891b4f7dc162c9fd6541fb884abbe", "filename": "src/test/ui/array-slice-vec/array_const_index-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray_const_index-1.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL | const B: i32 = A[1];\n    | ------------   ^^^^ index out of bounds: the length is 0 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n \n@@ -17,7 +17,7 @@ error: any use of this value will cause an error\n LL | const B: i32 = A[1];\n    | ------------   ^^^^ index out of bounds: the length is 0 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "f710df2dcde96f50fac308aa63c79f0e877b8513", "filename": "src/test/ui/asm/aarch64/type-check-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: formatting may not be suitable for sub-register argument\n LL |         asm!(\"{}\", in(reg) 0u8);\n    |               ^^           --- for this argument\n    |\n-   = note: `#[warn(asm_sub_register)]` on by default\n    = help: use `{0:w}` to have the register formatted as `w0`\n    = help: or use `{0:x}` to keep the default formatting of `x0`\n+   = note: `#[warn(asm_sub_register)]` on by default\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:50:15"}, {"sha": "bb6a222b22ee7c2258becf6b8f61ea3403e90c31", "filename": "src/test/ui/asm/bad-template.aarch64_mirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -189,9 +189,9 @@ warning: formatting may not be suitable for sub-register argument\n LL |         asm!(\"{:foo}\", in(reg) foo);\n    |               ^^^^^^           --- for this argument\n    |\n-   = note: `#[warn(asm_sub_register)]` on by default\n    = help: use `{0:w}` to have the register formatted as `w0`\n    = help: or use `{0:x}` to keep the default formatting of `x0`\n+   = note: `#[warn(asm_sub_register)]` on by default\n \n error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "bb6a222b22ee7c2258becf6b8f61ea3403e90c31", "filename": "src/test/ui/asm/bad-template.aarch64_thirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -189,9 +189,9 @@ warning: formatting may not be suitable for sub-register argument\n LL |         asm!(\"{:foo}\", in(reg) foo);\n    |               ^^^^^^           --- for this argument\n    |\n-   = note: `#[warn(asm_sub_register)]` on by default\n    = help: use `{0:w}` to have the register formatted as `w0`\n    = help: or use `{0:x}` to keep the default formatting of `x0`\n+   = note: `#[warn(asm_sub_register)]` on by default\n \n error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "903b5e959f3efc8d313056b0aa0606b1df363d1d", "filename": "src/test/ui/asm/bad-template.x86_64_mirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -189,9 +189,9 @@ warning: formatting may not be suitable for sub-register argument\n LL |         asm!(\"{:foo}\", in(reg) foo);\n    |               ^^^^^^           --- for this argument\n    |\n-   = note: `#[warn(asm_sub_register)]` on by default\n    = help: use `{0:e}` to have the register formatted as `eax`\n    = help: or use `{0:r}` to keep the default formatting of `rax`\n+   = note: `#[warn(asm_sub_register)]` on by default\n \n error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "903b5e959f3efc8d313056b0aa0606b1df363d1d", "filename": "src/test/ui/asm/bad-template.x86_64_thirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -189,9 +189,9 @@ warning: formatting may not be suitable for sub-register argument\n LL |         asm!(\"{:foo}\", in(reg) foo);\n    |               ^^^^^^           --- for this argument\n    |\n-   = note: `#[warn(asm_sub_register)]` on by default\n    = help: use `{0:e}` to have the register formatted as `eax`\n    = help: or use `{0:r}` to keep the default formatting of `rax`\n+   = note: `#[warn(asm_sub_register)]` on by default\n \n error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "908881b1949992f44932193ab891c490cf078614", "filename": "src/test/ui/asm/naked-functions-ffi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: `extern` fn uses type `char`, which is not FFI-safe\n LL | pub extern \"C\" fn naked(p: char) -> u128 {\n    |                            ^^^^ not FFI-safe\n    |\n-   = note: `#[warn(improper_ctypes_definitions)]` on by default\n    = help: consider using `u32` or `libc::wchar_t` instead\n    = note: the `char` type has no C equivalent\n+   = note: `#[warn(improper_ctypes_definitions)]` on by default\n \n warning: `extern` fn uses type `u128`, which is not FFI-safe\n   --> $DIR/naked-functions-ffi.rs:9:37"}, {"sha": "c8380629e12ea429f4c1b907d128947c49195f16", "filename": "src/test/ui/asm/named-asm-labels.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ error: avoid using named labels in inline assembly\n LL |         asm!(\"bar: nop\");\n    |               ^^^\n    |\n-   = note: `#[deny(named_asm_labels)]` on by default\n    = help: only local labels of the form `<number>:` should be used in inline asm\n    = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n+   = note: `#[deny(named_asm_labels)]` on by default\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:27:15\n@@ -259,13 +259,13 @@ warning: avoid using named labels in inline assembly\n LL |             asm!(\"warned: nop\");\n    |                   ^^^^^^\n    |\n+   = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n note: the lint level is defined here\n   --> $DIR/named-asm-labels.rs:132:16\n    |\n LL |         #[warn(named_asm_labels)]\n    |                ^^^^^^^^^^^^^^^^\n-   = help: only local labels of the form `<number>:` should be used in inline asm\n-   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:143:20"}, {"sha": "1baf50ff6e0c75b8516b6d8e692b37db60cb17f2", "filename": "src/test/ui/asm/x86_64/type-check-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -44,9 +44,9 @@ warning: formatting may not be suitable for sub-register argument\n LL |         asm!(\"{0} {0}\", in(reg) 0i16);\n    |               ^^^ ^^^           ---- for this argument\n    |\n-   = note: `#[warn(asm_sub_register)]` on by default\n    = help: use `{0:x}` to have the register formatted as `ax`\n    = help: or use `{0:r}` to keep the default formatting of `rax`\n+   = note: `#[warn(asm_sub_register)]` on by default\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:36:15"}, {"sha": "8a7c16e6117520a9589e0590d2c7968568d686d6", "filename": "src/test/ui/associated-consts/defaults-not-assumed-fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL |     const B: u8 = Self::A + 1;\n    |     -----------   ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/defaults-not-assumed-fail.rs:34:16\n@@ -34,9 +34,9 @@ error: any use of this value will cause an error\n LL |     const B: u8 = Self::A + 1;\n    |     -----------   ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: erroneous constant used\n@@ -45,8 +45,8 @@ error: erroneous constant used\n LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "8df326351fa0cf48c82d755710bb9c91b7220448", "filename": "src/test/ui/associated-types/defaults-specialization.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: the feature `specialization` is incomplete and may not be safe to use a\n LL | #![feature(associated_type_defaults, specialization)]\n    |                                      ^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0053]: method `make` has an incompatible type for trait\n   --> $DIR/defaults-specialization.rs:19:18"}, {"sha": "d99967eb23ca6b0fccd30eb60ee6e19a8fa85e67", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-various-positions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ error: `await` is a keyword in the 2018 edition\n LL |     pub mod await {\n    |             ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n note: the lint level is defined here\n   --> $DIR/2015-edition-error-various-positions.rs:2:9\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n   --> $DIR/2015-edition-error-various-positions.rs:7:20"}, {"sha": "bf5c4d8d6aab3737bde8e6bd1973a80ae3ff7611", "filename": "src/test/ui/async-await/await-keyword/2015-edition-warning.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ error: `await` is a keyword in the 2018 edition\n LL |     pub mod await {\n    |             ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n note: the lint level is defined here\n   --> $DIR/2015-edition-warning.rs:4:9\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n   --> $DIR/2015-edition-warning.rs:10:20"}, {"sha": "da34f44b2d680550fe468ae13a85e8cc5c7f06ce", "filename": "src/test/ui/async-await/large_moves.attribute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.attribute.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -10,12 +10,12 @@ LL | |         dbg!(y);\n LL | |     };\n    | |_____^ value moved from here\n    |\n+   = note: The current maximum size is 1000, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\n note: the lint level is defined here\n   --> $DIR/large_moves.rs:1:9\n    |\n LL | #![deny(large_assignments)]\n    |         ^^^^^^^^^^^^^^^^^\n-   = note: The current maximum size is 1000, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\n \n error: moving 10024 bytes\n   --> $DIR/large_moves.rs:18:14"}, {"sha": "da34f44b2d680550fe468ae13a85e8cc5c7f06ce", "filename": "src/test/ui/async-await/large_moves.option.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.option.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -10,12 +10,12 @@ LL | |         dbg!(y);\n LL | |     };\n    | |_____^ value moved from here\n    |\n+   = note: The current maximum size is 1000, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\n note: the lint level is defined here\n   --> $DIR/large_moves.rs:1:9\n    |\n LL | #![deny(large_assignments)]\n    |         ^^^^^^^^^^^^^^^^^\n-   = note: The current maximum size is 1000, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\n \n error: moving 10024 bytes\n   --> $DIR/large_moves.rs:18:14"}, {"sha": "68df2771fd7235c9f9b31037cb261dc4f1ac5881", "filename": "src/test/ui/attributes/doc-attr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,14 +4,14 @@ error: unknown `doc` attribute `as_ptr`\n LL | #[doc(as_ptr)]\n    |       ^^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n note: the lint level is defined here\n   --> $DIR/doc-attr.rs:2:9\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(invalid_doc_attributes)]` implied by `#[deny(warnings)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n \n error: invalid `doc` attribute\n   --> $DIR/doc-attr.rs:12:7"}, {"sha": "3c66e587b470d4b6cf3d9f25fd0bc0dea9357112", "filename": "src/test/ui/attributes/invalid-doc-attr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fattributes%2Finvalid-doc-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fattributes%2Finvalid-doc-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Finvalid-doc-attr.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,15 +4,15 @@ error: this attribute can only be applied at the crate level\n LL | #[doc(test(no_crate_inject))]\n    |       ^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read <https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level> for more information\n note: the lint level is defined here\n   --> $DIR/invalid-doc-attr.rs:2:9\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n    = note: `#[deny(invalid_doc_attributes)]` implied by `#[deny(warnings)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n-   = note: read <https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level> for more information\n help: to apply to the crate, use an inner attribute\n    |\n LL | #![doc(test(no_crate_inject))]"}, {"sha": "9cd4e79f851ebb4ef59148789df1baaa8f86674a", "filename": "src/test/ui/auto-traits/suspicious-impls-lint.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,11 +4,6 @@ error: cross-crate traits with a default impl, like `Send`, should not be specia\n LL | unsafe impl<T: Send> Send for MayImplementSendErr<&T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/suspicious-impls-lint.rs:1:9\n-   |\n-LL | #![deny(suspicious_auto_trait_impls)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this will change its meaning in a future release!\n    = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n    = note: `&T` is not a generic parameter\n@@ -17,6 +12,11 @@ note: try using the same sequence of generic parameters as the struct definition\n    |\n LL | struct MayImplementSendErr<T>(T);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/suspicious-impls-lint.rs:1:9\n+   |\n+LL | #![deny(suspicious_auto_trait_impls)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cross-crate traits with a default impl, like `Send`, should not be specialized\n   --> $DIR/suspicious-impls-lint.rs:21:1"}, {"sha": "57a065d6d4d2f1a6fc22b3a806764132e88a56c3", "filename": "src/test/ui/binding/issue-53114-safety-checks.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,11 +4,11 @@ error: reference to packed field is unaligned\n LL |     let _ = &p.b;\n    |             ^^^^\n    |\n-   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+   = note: `#[deny(unaligned_references)]` on by default\n \n error: reference to packed field is unaligned\n   --> $DIR/issue-53114-safety-checks.rs:29:17\n@@ -109,11 +109,11 @@ error: reference to packed field is unaligned\n LL |     let _ = &p.b;\n    |             ^^^^\n    |\n-   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+   = note: `#[deny(unaligned_references)]` on by default\n \n Future breakage diagnostic:\n error: reference to packed field is unaligned\n@@ -122,11 +122,11 @@ error: reference to packed field is unaligned\n LL |     let (_,) = (&p.b,);\n    |                 ^^^^\n    |\n-   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+   = note: `#[deny(unaligned_references)]` on by default\n \n Future breakage diagnostic:\n error: reference to packed field is unaligned\n@@ -135,11 +135,11 @@ error: reference to packed field is unaligned\n LL |     match &p.b  { _ => { } }\n    |           ^^^^\n    |\n-   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+   = note: `#[deny(unaligned_references)]` on by default\n \n Future breakage diagnostic:\n error: reference to packed field is unaligned\n@@ -148,9 +148,9 @@ error: reference to packed field is unaligned\n LL |     match (&p.b,)  { (_,) => { } }\n    |            ^^^^\n    |\n-   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+   = note: `#[deny(unaligned_references)]` on by default\n "}, {"sha": "19cd323ce5748ce04734f79f13cf3222187a1e38", "filename": "src/test/ui/borrowck/issue-81899.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -18,9 +18,9 @@ error: any use of this value will cause an error\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n    | -------------------   ^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to 2 previous errors\n \n@@ -32,7 +32,7 @@ error: any use of this value will cause an error\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n    | -------------------   ^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "4492af7ec6bfbb98550dccf043ca093bc7ef0936", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -18,9 +18,9 @@ error: any use of this value will cause an error\n LL | const _CONST: &() = &f(&|_| {});\n    | -----------------   ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to 2 previous errors\n \n@@ -32,7 +32,7 @@ error: any use of this value will cause an error\n LL | const _CONST: &() = &f(&|_| {});\n    | -----------------   ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "a889e67f4ea0015164f0b3243b96f3080ad77e70", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -18,9 +18,9 @@ error: any use of this value will cause an error\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n    | -------------------   ^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to 2 previous errors\n \n@@ -32,7 +32,7 @@ error: any use of this value will cause an error\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n    | -------------------   ^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "b3f921c14edbc4218c8c6165c8d379439fa8ec37", "filename": "src/test/ui/cenum_impl_drop_cast.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcenum_impl_drop_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcenum_impl_drop_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcenum_impl_drop_cast.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ error: cannot cast enum `E` into integer `u32` because it implements `Drop`\n LL |     let i = e as u32;\n    |             ^^^^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #73333 <https://github.com/rust-lang/rust/issues/73333>\n note: the lint level is defined here\n   --> $DIR/cenum_impl_drop_cast.rs:1:9\n    |\n LL | #![deny(cenum_impl_drop_cast)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #73333 <https://github.com/rust-lang/rust/issues/73333>\n \n error: aborting due to previous error\n \n@@ -21,11 +21,11 @@ error: cannot cast enum `E` into integer `u32` because it implements `Drop`\n LL |     let i = e as u32;\n    |             ^^^^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #73333 <https://github.com/rust-lang/rust/issues/73333>\n note: the lint level is defined here\n   --> $DIR/cenum_impl_drop_cast.rs:1:9\n    |\n LL | #![deny(cenum_impl_drop_cast)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #73333 <https://github.com/rust-lang/rust/issues/73333>\n "}, {"sha": "9ce4710d69bc07b43850af795ead05e981e0d879", "filename": "src/test/ui/cfg/future-compat-crate-attributes-using-cfg_attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Ffuture-compat-crate-attributes-using-cfg_attr.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ error: `crate_type` within an `#![cfg_attr] attribute is deprecated`\n LL | #![cfg_attr(foo, crate_type=\"bin\")]\n    |                  ^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[deny(deprecated_cfg_attr_crate_type_name)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #91632 <https://github.com/rust-lang/rust/issues/91632>\n+   = note: `#[deny(deprecated_cfg_attr_crate_type_name)]` on by default\n \n error: `crate_name` within an `#![cfg_attr] attribute is deprecated`\n   --> $DIR/future-compat-crate-attributes-using-cfg_attr.rs:9:18"}, {"sha": "9864aa385f99ea97eeadef98b4edc32906b900f6", "filename": "src/test/ui/check-cfg/compact-values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcheck-cfg%2Fcompact-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcheck-cfg%2Fcompact-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fcompact-values.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(target(os = \"linux\", arch = \"X\"))]\n    |                            ^^^^^^^^^^\n    |\n-   = note: `#[warn(unexpected_cfgs)]` on by default\n    = note: expected values for `target_arch` are: aarch64, arm, avr, bpf, hexagon, m68k, mips, mips64, msp430, nvptx64, powerpc, powerpc64, riscv32, riscv64, s390x, sparc, sparc64, wasm32, wasm64, x86, x86_64\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "a0168b2caa8e3ca0dcbea08acbe7fef1698980fd", "filename": "src/test/ui/check-cfg/empty-values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -6,8 +6,8 @@ LL | #[cfg(test = \"value\")]\n    |           |\n    |           help: remove the value\n    |\n-   = note: `#[warn(unexpected_cfgs)]` on by default\n    = note: no expected value for `test`\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "60abcb18824bac5370c5fba5cffdb1322e6ea35b", "filename": "src/test/ui/check-cfg/invalid-cfg-value.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(feature = \"sedre\")]\n    |       ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unexpected_cfgs)]` on by default\n    = note: expected values for `feature` are: full, serde\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: unexpected `cfg` condition value\n   --> $DIR/invalid-cfg-value.rs:14:7"}, {"sha": "8c926d187fed4ae9d42912b9369b24f1cf416795", "filename": "src/test/ui/check-cfg/no-values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: unexpected `cfg` condition value\n LL | #[cfg(feature = \"foo\")]\n    |       ^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unexpected_cfgs)]` on by default\n    = note: no expected value for `feature`\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: unexpected `cfg` condition value\n   --> $DIR/no-values.rs:10:7"}, {"sha": "4ec74494fe09b446315f26a93b67f8b1d01e5a35", "filename": "src/test/ui/check-cfg/well-known-values.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-values.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -6,8 +6,8 @@ LL | #[cfg(target_os = \"linuz\")]\n    |                   |\n    |                   help: did you mean: `\"linux\"`\n    |\n-   = note: `#[warn(unexpected_cfgs)]` on by default\n    = note: expected values for `target_os` are: android, cuda, dragonfly, emscripten, espidf, freebsd, fuchsia, haiku, hermit, horizon, illumos, ios, l4re, linux, macos, netbsd, none, openbsd, psp, redox, solaris, solid_asp3, tvos, uefi, unknown, vxworks, wasi, watchos, windows, xous\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: unexpected `cfg` condition value\n   --> $DIR/well-known-values.rs:14:7"}, {"sha": "cf414adc0b943911576ba568ea59febedfbc83ae", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/liveness.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,22 +4,22 @@ warning: value captured by `a` is never read\n LL |         a = 1;\n    |         ^\n    |\n+   = help: did you mean to capture by reference instead?\n note: the lint level is defined here\n   --> $DIR/liveness.rs:5:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unused_assignments)]` implied by `#[warn(unused)]`\n-   = help: did you mean to capture by reference instead?\n \n warning: unused variable: `a`\n   --> $DIR/liveness.rs:33:9\n    |\n LL |         a += 1;\n    |         ^\n    |\n-   = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n    = help: did you mean to capture by reference instead?\n+   = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n \n warning: value assigned to `a` is never read\n   --> $DIR/liveness.rs:53:9"}, {"sha": "0410de4c7982a1174ee203ab60af4a92e9a46a74", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fliveness_unintentional_copy.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,22 +4,22 @@ warning: value assigned to `a` is never read\n LL |         a = s;\n    |         ^\n    |\n+   = help: maybe it is overwritten before being read?\n note: the lint level is defined here\n   --> $DIR/liveness_unintentional_copy.rs:4:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unused_assignments)]` implied by `#[warn(unused)]`\n-   = help: maybe it is overwritten before being read?\n \n warning: unused variable: `a`\n   --> $DIR/liveness_unintentional_copy.rs:20:9\n    |\n LL |         a = s;\n    |         ^\n    |\n-   = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n    = help: did you mean to capture by reference instead?\n+   = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n \n warning: unused variable: `a`\n   --> $DIR/liveness_unintentional_copy.rs:36:9"}, {"sha": "508c4b911b70b6f57f7ae78b46c75e8bb904c966", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/repr_packed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,11 +4,11 @@ error: reference to packed field is unaligned\n LL |         println!(\"{}\", foo.x);\n    |                        ^^^^^\n    |\n-   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+   = note: `#[deny(unaligned_references)]` on by default\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n@@ -20,10 +20,10 @@ error: reference to packed field is unaligned\n LL |         println!(\"{}\", foo.x);\n    |                        ^^^^^\n    |\n-   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n+   = note: `#[deny(unaligned_references)]` on by default\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "b3cb558f976795475f99b1198256ef6437bfcc93", "filename": "src/test/ui/closures/2229_closure_analysis/issue-88118-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-88118-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-88118-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-88118-2.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: irrefutable `if let` guard pattern\n LL |             Registry if let _ = registry.try_find_description() => { }\n    |                             ^\n    |\n-   = note: `#[warn(irrefutable_let_patterns)]` on by default\n    = note: this pattern will always match, so the guard is useless\n    = help: consider removing the guard and adding a `let` inside the match arm\n+   = note: `#[warn(irrefutable_let_patterns)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "c1679c6b637e523eaa1b50760bb24648e19bd21f", "filename": "src/test/ui/closures/2229_closure_analysis/issue-90465.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-90465.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-90465.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-90465.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -10,12 +10,12 @@ LL |         let _ = f0;\n LL | }\n    | - in Rust 2018, `f0` is dropped here along with the closure, but in Rust 2021 `f0` is not part of the closure\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/issue-90465.rs:3:9\n    |\n LL | #![deny(rust_2021_incompatible_closure_captures)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f0` to be fully captured\n    |\n LL ~     let c0 = move || {"}, {"sha": "38401085971316efcf649a298b3e21f5bc4099a7", "filename": "src/test/ui/closures/2229_closure_analysis/match/issue-87097.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -18,8 +18,8 @@ LL | |         Variant::B => (),\n LL | |     };\n    | |______^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: closures are lazy and do nothing unless called\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: unused closure that must be used\n   --> $DIR/issue-87097.rs:26:5"}, {"sha": "3a42cc8b8439b6247376cabd0fb0a58a422ca7cc", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,12 +7,12 @@ LL |     thread::spawn(move || unsafe {\n LL |         *fptr.0 = 20;\n    |         ------- in Rust 2018, this closure captures all of `fptr`, but in Rust 2021, it will only capture `fptr.0`\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/auto_traits.rs:2:9\n    |\n LL | #![deny(rust_2021_incompatible_closure_captures)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `fptr` to be fully captured\n    |\n LL ~     thread::spawn(move || { let _ = &fptr; unsafe {"}, {"sha": "bb17e3a34af61d29f926caa29e0ce08fd28726d6", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/closure-body-macro-fragment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fclosure-body-macro-fragment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fclosure-body-macro-fragment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fclosure-body-macro-fragment.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -15,13 +15,13 @@ LL | |         println!(\"{:?}\", x);\n LL | |     });\n    | |______- in this macro invocation\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/closure-body-macro-fragment.rs:4:9\n    |\n LL | #![warn(rust_2021_compatibility)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: `#[warn(rust_2021_incompatible_closure_captures)]` implied by `#[warn(rust_2021_compatibility)]`\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n    = note: this warning originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: add a dummy let to cause `a` to be fully captured\n    |"}, {"sha": "a0795c12928ff96a0607ba24a461caca3580528e", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -10,12 +10,12 @@ LL |         let _t = t.0;\n LL | }\n    | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/insignificant_drop_attr_migrations.rs:3:9\n    |\n LL | #![deny(rust_2021_incompatible_closure_captures)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {"}, {"sha": "36a80e694e82495acc2b3fd317fafb250b548fd6", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/issue-78720.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: irrefutable `if let` pattern\n LL |     if let a = \"\" {\n    |        ^^^^^^^^^^\n    |\n-   = note: `#[warn(irrefutable_let_patterns)]` on by default\n    = note: this pattern will always match, so the `if let` is useless\n    = help: consider replacing the `if let` with a `let`\n+   = note: `#[warn(irrefutable_let_patterns)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "c17edce72f9878b5d152f95e2c65408545cb7408", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmacro.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,12 +7,12 @@ LL |     let _ = || dbg!(a.0);\n LL | }\n    | - in Rust 2018, `a` is dropped here, but in Rust 2021, only `a.0` will be dropped here as part of the closure\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/macro.rs:5:9\n    |\n LL | #![deny(rust_2021_incompatible_closure_captures)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `a` to be fully captured\n    |\n LL |     let _ = || { let _ = &a; dbg!(a.0) };"}, {"sha": "94526487e6792248191b2a1295cccfb6355cced1", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -10,12 +10,12 @@ LL |         let _t = t.0;\n LL | }\n    | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/migrations_rustfix.rs:2:9\n    |\n LL | #![deny(rust_2021_incompatible_closure_captures)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {"}, {"sha": "e10898f984499ef7f04fbe274f3706736b9b0046", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -10,12 +10,12 @@ LL |     let result = panic::catch_unwind(move || {\n LL |         f.0()\n    |         --- in Rust 2018, this closure captures all of `f`, but in Rust 2021, it will only capture `f.0`\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/mir_calls_to_shims.rs:4:9\n    |\n LL | #![deny(rust_2021_incompatible_closure_captures)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f` to be fully captured\n    |\n LL ~     let result = panic::catch_unwind(move || {"}, {"sha": "efb264447f68d70e8fc93fd0b62c88e2159ffda9", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/multi_diagnostics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmulti_diagnostics.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -13,12 +13,12 @@ LL |         let _f_2 = f2.1;\n LL | }\n    | - in Rust 2018, `f2` is dropped here, but in Rust 2021, only `f2.1` will be dropped here as part of the closure\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/multi_diagnostics.rs:2:9\n    |\n LL | #![deny(rust_2021_incompatible_closure_captures)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f1`, `f2` to be fully captured\n    |\n LL ~     let c = || {"}, {"sha": "eff26a4d6f5f6fb6e7ad0da10807cc79e5e398d2", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -10,12 +10,12 @@ LL |         let _t = t.0;\n LL | }\n    | - in Rust 2018, `t` is dropped here, but in Rust 2021, only `t.0` will be dropped here as part of the closure\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/precise.rs:3:9\n    |\n LL | #![deny(rust_2021_incompatible_closure_captures)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL ~     let c = || {"}, {"sha": "54ad20f898338f10085ed8a37fe938bad444f329", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -20,12 +20,12 @@ LL | }\n    | in Rust 2018, `t1` is dropped here, but in Rust 2021, only `t1.0` will be dropped here as part of the closure\n    | in Rust 2018, `t2` is dropped here, but in Rust 2021, only `t2.0` will be dropped here as part of the closure\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n note: the lint level is defined here\n   --> $DIR/significant_drop.rs:2:9\n    |\n LL | #![deny(rust_2021_incompatible_closure_captures)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |\n LL ~     let c = || {"}, {"sha": "2018712043e235a8d7db415174a1a18767647706", "filename": "src/test/ui/coherence/coherence-fn-implied-bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,14 +7,14 @@ LL |\n LL | impl Trait for for<'c> fn(&'c &'c u32, &'c &'c u32) -> &'c u32 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a, 'b> fn(&'a &'b u32, &'b &'a u32) -> &'b u32`\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n+   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n note: the lint level is defined here\n   --> $DIR/coherence-fn-implied-bounds.rs:15:9\n    |\n LL | #![deny(coherence_leak_check)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n-   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n \n error: aborting due to previous error\n "}, {"sha": "e2d84b833200c5722b5f973fa6bc89d261bf72dc", "filename": "src/test/ui/coherence/coherence-free-vs-bound-region.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,14 +7,14 @@ LL |\n LL | impl TheTrait for fn(&u8) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `fn(&u8)`\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n+   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n note: the lint level is defined here\n   --> $DIR/coherence-free-vs-bound-region.rs:10:9\n    |\n LL | #![deny(coherence_leak_check)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n-   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n \n error: aborting due to previous error\n "}, {"sha": "7bd50649d6d09388b8aab835990ba9ab49bea64d", "filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: the feature `specialization` is incomplete and may not be safe to use a\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0391]: cycle detected when building specialization graph of trait `Trait`\n   --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:9:1"}, {"sha": "9d90019a50fd3c655f6be5c476ee3e91dad0557e", "filename": "src/test/ui/coherence/coherence-subtyping.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,10 +7,10 @@ LL |\n LL | impl TheTrait for for<'a> fn(&'a u8, &'a u8) -> &'a u8 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n    |\n-   = note: `#[warn(coherence_leak_check)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n    = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n+   = note: `#[warn(coherence_leak_check)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "cfcc21240e4ebf3b35f257eb5f0da8bf59d2659c", "filename": "src/test/ui/coherence/coherence-wasm-bindgen.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,15 +7,15 @@ LL | impl<'a, 'b, A, R> IntoWasmAbi for &'a (dyn Fn(A) -> R + 'b)\n LL | impl<'a, 'b, A, R> IntoWasmAbi for &'a (dyn for<'x> Fn(&'x A) -> R + 'b)\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `&dyn std::ops::Fn(&_) -> _`\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n+   = note: downstream crates may implement trait `FromWasmAbi` for type `&_`\n+   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n note: the lint level is defined here\n   --> $DIR/coherence-wasm-bindgen.rs:10:9\n    |\n LL | #![deny(coherence_leak_check)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n-   = note: downstream crates may implement trait `FromWasmAbi` for type `&_`\n-   = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n \n error: aborting due to previous error\n "}, {"sha": "4dcd8f4fc280a62f3b1279cc29fd759ec7832f3e", "filename": "src/test/ui/conflicting-repr-hints.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ error[E0566]: conflicting representation hints\n LL | #[repr(C, u64)]\n    |        ^  ^^^\n    |\n-   = note: `#[deny(conflicting_repr_hints)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #68585 <https://github.com/rust-lang/rust/issues/68585>\n+   = note: `#[deny(conflicting_repr_hints)]` on by default\n \n error[E0566]: conflicting representation hints\n   --> $DIR/conflicting-repr-hints.rs:19:8"}, {"sha": "828f0988a039f7b4b045d71bcbe687b482db11a0", "filename": "src/test/ui/const-generics/generic_const_exprs/dependence_lint.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.full.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -22,9 +22,9 @@ warning: cannot use constants which depend on generic parameters in types\n LL |     [0; size_of::<*mut T>()]; // lint on stable, error with `generic_const_exprs`\n    |         ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n \n warning: cannot use constants which depend on generic parameters in types\n   --> $DIR/dependence_lint.rs:16:9"}, {"sha": "8eb1fccc5f88e43667024a167384a2141490519f", "filename": "src/test/ui/const-generics/generic_const_exprs/eval-try-unify.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-try-unify.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-try-unify.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-try-unify.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: the feature `generic_const_exprs` is incomplete and may not be safe to\n LL | #![feature(generic_const_exprs)]\n    |            ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "796dc01043cd89afddf339bf970600d09d185424", "filename": "src/test/ui/const-generics/generic_const_exprs/function-call.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: cannot use constants which depend on generic parameters in types\n LL |     let _ = [0; foo::<T>()];\n    |                 ^^^^^^^^^^\n    |\n-   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "1cceaece715bbf3dd7d04dec59b9a89c6172d154", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-97047-ice-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-97047-ice-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-97047-ice-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-97047-ice-1.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: the feature `adt_const_params` is incomplete and may not be safe to use\n LL | #![feature(adt_const_params, generic_const_exprs)]\n    |            ^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #95174 <https://github.com/rust-lang/rust/issues/95174> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-97047-ice-1.rs:3:30"}, {"sha": "774e842bcbeab7ed68f863f2adfd443d115da0aa", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-97047-ice-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-97047-ice-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-97047-ice-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-97047-ice-2.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: the feature `adt_const_params` is incomplete and may not be safe to use\n LL | #![feature(adt_const_params, generic_const_exprs)]\n    |            ^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #95174 <https://github.com/rust-lang/rust/issues/95174> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-97047-ice-2.rs:3:30"}, {"sha": "440cf457e196ca026f2c45b5bc771dfcfb7cf38a", "filename": "src/test/ui/const-generics/generic_const_exprs/object-safety-err-where-bounds.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-where-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-where-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-where-bounds.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,11 +4,6 @@ error: the trait `Foo` cannot be made into an object\n LL |     fn test(&self) where [u8; bar::<Self>()]: Sized;\n    |        ^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/object-safety-err-where-bounds.rs:3:9\n-   |\n-LL | #![deny(where_clauses_object_safety)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #51443 <https://github.com/rust-lang/rust/issues/51443>\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n@@ -19,6 +14,11 @@ LL | trait Foo {\n LL |     fn test(&self) where [u8; bar::<Self>()]: Sized;\n    |        ^^^^ ...because method `test` references the `Self` type in its `where` clause\n    = help: consider moving `test` to another trait\n+note: the lint level is defined here\n+  --> $DIR/object-safety-err-where-bounds.rs:3:9\n+   |\n+LL | #![deny(where_clauses_object_safety)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "aabe4c93b3624dcef9d911a8f148697f34f25917", "filename": "src/test/ui/const-generics/invariant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,10 +7,10 @@ LL | impl SadBee for for<'a> fn(&'a ()) {\n LL | impl SadBee for fn(&'static ()) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a> fn(&'a ())`\n    |\n-   = note: `#[warn(coherence_leak_check)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56105 <https://github.com/rust-lang/rust/issues/56105>\n    = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n+   = note: `#[warn(coherence_leak_check)]` on by default\n \n error[E0308]: mismatched types\n   --> $DIR/invariant.rs:27:5"}, {"sha": "b89706710bcf20bb4fa4d4b8a2c1508b442f3593", "filename": "src/test/ui/const-generics/issue-80471.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fissue-80471.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fissue-80471.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-80471.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: the feature `adt_const_params` is incomplete and may not be safe to use\n LL | #![feature(adt_const_params)]\n    |            ^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #95174 <https://github.com/rust-lang/rust/issues/95174> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0741]: `Box<Nat>` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n   --> $DIR/issue-80471.rs:10:17"}, {"sha": "bcfd706398966f406bf8d8ac40c1ea8e6536fd3c", "filename": "src/test/ui/const-generics/issues/issue-83466.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83466.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83466.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83466.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,9 +7,9 @@ LL |     fn func<'a, U>(self) -> U {\n LL |     S.func::<'a, 10_u32>()\n    |              ^^\n    |\n-   = note: `#[warn(late_bound_lifetime_arguments)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42868 <https://github.com/rust-lang/rust/issues/42868>\n+   = note: `#[warn(late_bound_lifetime_arguments)]` on by default\n \n error[E0747]: constant provided when a type was expected\n   --> $DIR/issue-83466.rs:11:18"}, {"sha": "0b051c6131b85bf2f75f0fb534706865c5b52654", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -67,9 +67,9 @@ warning: cannot use constants which depend on generic parameters in types\n LL |     let _ = [0; size_of::<*mut T>() + 1];\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n \n error: aborting due to 7 previous errors; 1 warning emitted\n "}, {"sha": "f0ba7a39d1eafc7555b3ce512cc651276b788870", "filename": "src/test/ui/const-generics/min_const_generics/const-evaluatable-unchecked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: cannot use constants which depend on generic parameters in types\n LL |     [0; std::mem::size_of::<*mut T>()];\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n \n warning: cannot use constants which depend on generic parameters in types\n   --> $DIR/const-evaluatable-unchecked.rs:16:21"}, {"sha": "fe3f24a67a26053e69f39f424ab82688bd88c6f7", "filename": "src/test/ui/const-generics/occurs-check/unify-fixpoint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-fixpoint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-fixpoint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-fixpoint.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: the feature `generic_const_exprs` is incomplete and may not be safe to\n LL | #![feature(generic_const_exprs)]\n    |            ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "a183856dff8072e496e69f6fd78bfa0f759487f2", "filename": "src/test/ui/consts/assert-type-intrinsics.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassert-type-intrinsics.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -6,9 +6,9 @@ LL |     const _BAD1: () = unsafe {\n LL |         MaybeUninit::<!>::uninit().assume_init();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/assert-type-intrinsics.rs:17:9\n@@ -43,9 +43,9 @@ LL |     const _BAD1: () = unsafe {\n LL |         MaybeUninit::<!>::uninit().assume_init();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -56,9 +56,9 @@ LL |     const _BAD2: () = {\n LL |         intrinsics::assert_uninit_valid::<bool>();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to leave type `bool` uninitialized, which is invalid\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -69,7 +69,7 @@ LL |     const _BAD3: () = {\n LL |         intrinsics::assert_zero_valid::<&'static i32>();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to zero-initialize type `&i32`, which is invalid\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "ca6db350c75f4baa55b6c506006134ea51eef758", "filename": "src/test/ui/consts/assoc_const_generic_impl.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ warning: any use of this value will cause an error\n LL |     const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()];\n    |     -------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 4\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/assoc_const_generic_impl.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: erroneous constant encountered\n   --> $DIR/assoc_const_generic_impl.rs:14:18\n@@ -27,11 +27,11 @@ warning: any use of this value will cause an error\n LL |     const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()];\n    |     -------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 4\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/assoc_const_generic_impl.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "fce8f051061466a28c2833fe54d64b6f0f53ded0", "filename": "src/test/ui/consts/const-err-early.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ error: any use of this value will cause an error\n LL | pub const A: i8 = -i8::MIN;\n    | ---------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:5:19\n@@ -57,13 +57,13 @@ error: any use of this value will cause an error\n LL | pub const A: i8 = -i8::MIN;\n    | ---------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -72,13 +72,13 @@ error: any use of this value will cause an error\n LL | pub const B: u8 = 200u8 + 200u8;\n    | ---------------   ^^^^^^^^^^^^^ attempt to compute `200_u8 + 200_u8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -87,13 +87,13 @@ error: any use of this value will cause an error\n LL | pub const C: u8 = 200u8 * 4;\n    | ---------------   ^^^^^^^^^ attempt to compute `200_u8 * 4_u8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -102,13 +102,13 @@ error: any use of this value will cause an error\n LL | pub const D: u8 = 42u8 - (42u8 + 1);\n    | ---------------   ^^^^^^^^^^^^^^^^^ attempt to compute `42_u8 - 43_u8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -117,11 +117,11 @@ error: any use of this value will cause an error\n LL | pub const E: u8 = [5u8][1];\n    | ---------------   ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-early.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "16b912695a64c288f56389456970000a19b09748", "filename": "src/test/ui/consts/const-err-multi.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ error: any use of this value will cause an error\n LL | pub const A: i8 = -i8::MIN;\n    | ---------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-multi.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-err-multi.rs:6:19\n@@ -48,13 +48,13 @@ error: any use of this value will cause an error\n LL | pub const A: i8 = -i8::MIN;\n    | ---------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-multi.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -63,13 +63,13 @@ error: any use of this value will cause an error\n LL | pub const B: i8 = A;\n    | ---------------   ^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-multi.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -78,13 +78,13 @@ error: any use of this value will cause an error\n LL | pub const C: u8 = A as u8;\n    | ---------------   ^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-multi.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -93,11 +93,11 @@ error: any use of this value will cause an error\n LL | pub const D: i8 = 50 - A;\n    | ---------------        ^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err-multi.rs:1:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "f83a2cbb1908ad682fefb4749d5b3c7c2cfc61b0", "filename": "src/test/ui/consts/const-err.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ warning: any use of this value will cause an error\n LL | const FOO: u8 = [5u8][1];\n    | -------------   ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err.rs:5:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: erroneous constant used\n   --> $DIR/const-err.rs:16:16\n@@ -34,11 +34,11 @@ warning: any use of this value will cause an error\n LL | const FOO: u8 = [5u8][1];\n    | -------------   ^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-err.rs:5:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "84061e52d318ae5c2687bd0e3c1814da09d5ca10", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ warning: any use of this value will cause an error\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    | --------------    ^^^^^ attempt to compute `5_u32 - 6_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/conditional_array_execution.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/conditional_array_execution.rs:12:20\n@@ -38,13 +38,13 @@ warning: any use of this value will cause an error\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    | --------------    ^^^^^ attempt to compute `5_u32 - 6_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/conditional_array_execution.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: erroneous constant used\n@@ -53,12 +53,12 @@ warning: erroneous constant used\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/conditional_array_execution.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "b6d0898bb9229e96fa2dab60eb9dd6075bf66f71", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -19,11 +19,11 @@ warning: any use of this value will cause an error\n LL | const NEG_NEG_128: i8 = -NEG_128;\n    | ---------------------   ^^^^^^^^ attempt to negate `i8::MIN`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow-2.rs:4:36\n    |\n LL | #![allow(unused_imports, warnings, const_err)]\n    |                                    ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "8e3028c50f31f0dd0a081b0a172b2f9ba60eaf05", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,13 +7,13 @@ LL |     (\n LL |      i8::MIN - 1,\n    |      ^^^^^^^^^^^ attempt to compute `i8::MIN - 1_i8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:21:6\n@@ -109,13 +109,13 @@ LL |     (\n LL |      i8::MIN - 1,\n    |      ^^^^^^^^^^^ attempt to compute `i8::MIN - 1_i8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -127,13 +127,13 @@ LL |     (\n LL |      i16::MIN - 1,\n    |      ^^^^^^^^^^^^ attempt to compute `i16::MIN - 1_i16`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -145,13 +145,13 @@ LL |     (\n LL |      i32::MIN - 1,\n    |      ^^^^^^^^^^^^ attempt to compute `i32::MIN - 1_i32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -163,13 +163,13 @@ LL |     (\n LL |      i64::MIN - 1,\n    |      ^^^^^^^^^^^^ attempt to compute `i64::MIN - 1_i64`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -181,13 +181,13 @@ LL |     (\n LL |      u8::MIN - 1,\n    |      ^^^^^^^^^^^ attempt to compute `0_u8 - 1_u8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -198,13 +198,13 @@ LL | const VALS_U16: (u16,) = (\n LL |      u16::MIN - 1,\n    |      ^^^^^^^^^^^^ attempt to compute `0_u16 - 1_u16`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -215,13 +215,13 @@ LL | const VALS_U32: (u32,) = (\n LL |      u32::MIN - 1,\n    |      ^^^^^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -233,11 +233,11 @@ LL |     (\n LL |      u64::MIN - 1,\n    |      ^^^^^^^^^^^^ attempt to compute `0_u64 - 1_u64`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "b6dc85f416b17a73dd201f6154581223f6a62012", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,13 +7,13 @@ LL |     (\n LL |      i8::MAX + 1,\n    |      ^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:21:6\n@@ -109,13 +109,13 @@ LL |     (\n LL |      i8::MAX + 1,\n    |      ^^^^^^^^^^^ attempt to compute `i8::MAX + 1_i8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -127,13 +127,13 @@ LL |     (\n LL |      i16::MAX + 1,\n    |      ^^^^^^^^^^^^ attempt to compute `i16::MAX + 1_i16`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -145,13 +145,13 @@ LL |     (\n LL |      i32::MAX + 1,\n    |      ^^^^^^^^^^^^ attempt to compute `i32::MAX + 1_i32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -163,13 +163,13 @@ LL |     (\n LL |      i64::MAX + 1,\n    |      ^^^^^^^^^^^^ attempt to compute `i64::MAX + 1_i64`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -181,13 +181,13 @@ LL |     (\n LL |      u8::MAX + 1,\n    |      ^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -198,13 +198,13 @@ LL | const VALS_U16: (u16,) = (\n LL |      u16::MAX + 1,\n    |      ^^^^^^^^^^^^ attempt to compute `u16::MAX + 1_u16`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -215,13 +215,13 @@ LL | const VALS_U32: (u32,) = (\n LL |      u32::MAX + 1,\n    |      ^^^^^^^^^^^^ attempt to compute `u32::MAX + 1_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -233,11 +233,11 @@ LL |     (\n LL |      u64::MAX + 1,\n    |      ^^^^^^^^^^^^ attempt to compute `u64::MAX + 1_u64`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2b.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "df66fe1e5dee56af6d622ee21cacb27c715db3af", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,13 +7,13 @@ LL |     (\n LL |      i8::MIN * 2,\n    |      ^^^^^^^^^^^ attempt to compute `i8::MIN * 2_i8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:21:6\n@@ -109,13 +109,13 @@ LL |     (\n LL |      i8::MIN * 2,\n    |      ^^^^^^^^^^^ attempt to compute `i8::MIN * 2_i8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -127,13 +127,13 @@ LL |     (\n LL |      i16::MIN * 2,\n    |      ^^^^^^^^^^^^ attempt to compute `i16::MIN * 2_i16`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -145,13 +145,13 @@ LL |     (\n LL |      i32::MIN * 2,\n    |      ^^^^^^^^^^^^ attempt to compute `i32::MIN * 2_i32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -163,13 +163,13 @@ LL |     (\n LL |      i64::MIN * 2,\n    |      ^^^^^^^^^^^^ attempt to compute `i64::MIN * 2_i64`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -181,13 +181,13 @@ LL |     (\n LL |      u8::MAX * 2,\n    |      ^^^^^^^^^^^ attempt to compute `u8::MAX * 2_u8`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -198,13 +198,13 @@ LL | const VALS_U16: (u16,) = (\n LL |      u16::MAX * 2,\n    |      ^^^^^^^^^^^^ attempt to compute `u16::MAX * 2_u16`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -215,13 +215,13 @@ LL | const VALS_U32: (u32,) = (\n LL |      u32::MAX * 2,\n    |      ^^^^^^^^^^^^ attempt to compute `u32::MAX * 2_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -233,11 +233,11 @@ LL |     (\n LL |      u64::MAX * 2,\n    |      ^^^^^^^^^^^^ attempt to compute `u64::MAX * 2_u64`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-overflow2c.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "67d290bbcaa49d0be512c1dee678ba57fd958435", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ warning: any use of this value will cause an error\n LL | const X: i32 = 1 / 0;\n    | ------------   ^^^^^ attempt to divide `1_i32` by zero\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-query-stack.rs:18:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-eval-query-stack.rs:23:28\n@@ -24,9 +24,9 @@ error: erroneous constant used\n LL |     let x: &'static i32 = &X;\n    |                           ^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n query stack during panic:\n #0 [mir_drops_elaborated_and_const_checked] elaborating drops for `main`\n@@ -40,13 +40,13 @@ warning: any use of this value will cause an error\n LL | const X: i32 = 1 / 0;\n    | ------------   ^^^^^ attempt to divide `1_i32` by zero\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const-eval-query-stack.rs:18:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n error: erroneous constant used\n@@ -55,7 +55,7 @@ error: erroneous constant used\n LL |     let x: &'static i32 = &X;\n    |                           ^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "de717899dd8fa9c510b2399bdc9b06b39b9c8514", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.64bit.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,11 +4,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n    |     --------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:30:43\n@@ -318,11 +318,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n    |     --------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -331,11 +331,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n    |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -344,11 +344,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n    |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -357,11 +357,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n    |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -370,11 +370,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n    |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -383,11 +383,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n    |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -396,11 +396,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n    |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -409,11 +409,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n    |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -422,11 +422,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n    |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -435,11 +435,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n    |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -448,11 +448,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n    |     ----------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -461,11 +461,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n    |     ------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -474,11 +474,11 @@ error: any use of this value will cause an error\n LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n    |     ------------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -487,11 +487,11 @@ error: any use of this value will cause an error\n LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n    |     ----------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -500,11 +500,11 @@ error: any use of this value will cause an error\n LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n    |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -513,11 +513,11 @@ error: any use of this value will cause an error\n LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n    |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -526,11 +526,11 @@ error: any use of this value will cause an error\n LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n    |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -539,11 +539,11 @@ error: any use of this value will cause an error\n LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n    |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -552,11 +552,11 @@ error: any use of this value will cause an error\n LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n    |     ----------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -565,11 +565,11 @@ error: any use of this value will cause an error\n LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n    |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -578,11 +578,11 @@ error: any use of this value will cause an error\n LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n    |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -591,11 +591,11 @@ error: any use of this value will cause an error\n LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n    |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -604,11 +604,11 @@ error: any use of this value will cause an error\n LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n    |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -617,11 +617,11 @@ error: any use of this value will cause an error\n LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n    |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -630,11 +630,11 @@ error: any use of this value will cause an error\n LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n    |     ------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -643,11 +643,11 @@ error: any use of this value will cause an error\n LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n    |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -656,9 +656,9 @@ error: any use of this value will cause an error\n LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n    |     --------------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "6aacc6cffc97fd95c1a69006449654d2b918caa2", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -35,13 +35,13 @@ LL |     x(y)\n LL | const Y: usize = bar(X, 2); // FIXME: should fail to typeck someday\n    | --------------\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_fn_ptr_fail2.rs:4:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: any use of this value will cause an error\n@@ -57,13 +57,13 @@ LL |     x(y)\n LL | const Z: usize = bar(double, 2); // FIXME: should fail to typeck someday\n    | --------------\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_fn_ptr_fail2.rs:4:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: erroneous constant used\n@@ -72,13 +72,13 @@ warning: erroneous constant used\n LL |     assert_eq!(Y, 4);\n    |     ^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_fn_ptr_fail2.rs:4:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this warning originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n@@ -88,12 +88,12 @@ warning: erroneous constant used\n LL |     assert_eq!(Z, 4);\n    |     ^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_fn_ptr_fail2.rs:4:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this warning originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "3553a18d3883c71453e519d791d23a425bc8dd10", "filename": "src/test/ui/consts/const-eval/const_panic_stability.e2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_stability.e2018.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: panic message is not a string literal\n LL |     panic!({ \"foo\" });\n    |            ^^^^^^^^^\n    |\n-   = note: `#[warn(non_fmt_panics)]` on by default\n    = note: this usage of `panic!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+   = note: `#[warn(non_fmt_panics)]` on by default\n help: add a \"{}\" format string to `Display` the message\n    |\n LL |     panic!(\"{}\", { \"foo\" });"}, {"sha": "24428732a42b969a504d37cdcad780052e1e23f9", "filename": "src/test/ui/consts/const-eval/erroneous-const.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -16,13 +16,13 @@ warning: any use of this value will cause an error\n LL |     const VOID: () = [()][2];\n    |     --------------   ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/erroneous-const.rs:2:9\n    |\n LL | #![warn(const_err, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/erroneous-const.rs:15:17\n@@ -46,11 +46,11 @@ warning: any use of this value will cause an error\n LL |     const VOID: () = [()][2];\n    |     --------------   ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/erroneous-const.rs:2:9\n    |\n LL | #![warn(const_err, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "0eea5648a64c9be05cde23e6198bf94d57d29bf9", "filename": "src/test/ui/consts/const-eval/erroneous-const2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const2.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -16,13 +16,13 @@ warning: any use of this value will cause an error\n LL |     const VOID: () = [()][2];\n    |     --------------   ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/erroneous-const2.rs:2:9\n    |\n LL | #![warn(const_err, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/erroneous-const2.rs:15:17\n@@ -40,11 +40,11 @@ warning: any use of this value will cause an error\n LL |     const VOID: () = [()][2];\n    |     --------------   ^^^^^^^ index out of bounds: the length is 1 but the index is 2\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/erroneous-const2.rs:2:9\n    |\n LL | #![warn(const_err, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "f3f6f2bb028defc9f9cb76fb5ea5109ec01d1e47", "filename": "src/test/ui/consts/const-eval/format.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -40,9 +40,9 @@ error: erroneous constant used\n LL |     panic!(\"{:?}\", 0);\n    |            ^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: erroneous constant used\n   --> $DIR/format.rs:2:20\n@@ -83,9 +83,9 @@ error: erroneous constant used\n LL |     panic!(\"{:?}\", 0);\n    |            ^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: erroneous constant used\n@@ -94,9 +94,9 @@ error: erroneous constant used\n LL |     panic!(\"{:?}\", 0);\n    |                    ^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n    = note: this error originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n@@ -106,9 +106,9 @@ error: erroneous constant used\n LL |     println!(\"{:?}\", 0);\n    |              ^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: erroneous constant used\n@@ -117,8 +117,8 @@ error: erroneous constant used\n LL |     println!(\"{:?}\", 0);\n    |                      ^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "3f4739c56f0285e2a727a8f0ec78999cb5ddab6a", "filename": "src/test/ui/consts/const-eval/index-out-of-bounds-never-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ warning: any use of this value will cause an error\n LL |     const VOID: ! = { let x = 0 * std::mem::size_of::<T>(); [][x] };\n    |     -------------                                           ^^^^^ index out of bounds: the length is 0 but the index is 0\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/index-out-of-bounds-never-type.rs:4:9\n    |\n LL | #![warn(const_err, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: erroneous constant encountered\n   --> $DIR/index-out-of-bounds-never-type.rs:17:13\n@@ -27,11 +27,11 @@ warning: any use of this value will cause an error\n LL |     const VOID: ! = { let x = 0 * std::mem::size_of::<T>(); [][x] };\n    |     -------------                                           ^^^^^ index out of bounds: the length is 0 but the index is 0\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/index-out-of-bounds-never-type.rs:4:9\n    |\n LL | #![warn(const_err, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "ceeaa1baece65ad578340931ff59258c57548398", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ warning: any use of this value will cause an error\n LL |     const X: u32 = 0 - 1;\n    |     ------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/issue-43197.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n   --> $DIR/issue-43197.rs:13:24\n@@ -63,13 +63,13 @@ warning: any use of this value will cause an error\n LL |     const X: u32 = 0 - 1;\n    |     ------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/issue-43197.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: any use of this value will cause an error\n@@ -78,13 +78,13 @@ warning: any use of this value will cause an error\n LL |     const Y: u32 = foo(0 - 1);\n    |     ------------       ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/issue-43197.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: erroneous constant used\n@@ -93,13 +93,13 @@ warning: erroneous constant used\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/issue-43197.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n@@ -109,12 +109,12 @@ warning: erroneous constant used\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/issue-43197.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "c3a794d2fe3019b5934b458ee25ac10c06415556", "filename": "src/test/ui/consts/const-eval/issue-44578.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -14,13 +14,13 @@ warning: any use of this value will cause an error\n LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n    |     ----------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/issue-44578.rs:3:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: erroneous constant used\n@@ -29,12 +29,12 @@ warning: erroneous constant used\n LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/issue-44578.rs:3:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "bd860197720591bd55a546212d745beecb21a2e1", "filename": "src/test/ui/consts/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL |     const BAR: usize = [5, 6, 7][T::BOO];\n    |     ----------------   ^^^^^^^^^^^^^^^^^ index out of bounds: the length is 3 but the index is 42\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error[E0080]: evaluation of `foo::<()>` failed\n   --> $DIR/issue-50814-2.rs:19:6\n@@ -30,7 +30,7 @@ error: any use of this value will cause an error\n LL |     const BAR: usize = [5, 6, 7][T::BOO];\n    |     ----------------   ^^^^^^^^^^^^^^^^^ index out of bounds: the length is 3 but the index is 42\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "c8e5a169ff97b704fe1dfad817d498a463699a4b", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL |     const MAX: u8 = A::MAX + B::MAX;\n    |     -------------   ^^^^^^^^^^^^^^^ attempt to compute `u8::MAX + u8::MAX`, which would overflow\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error[E0080]: evaluation of `foo::<i32>` failed\n   --> $DIR/issue-50814.rs:21:6\n@@ -30,7 +30,7 @@ error: any use of this value will cause an error\n LL |     const MAX: u8 = A::MAX + B::MAX;\n    |     -------------   ^^^^^^^^^^^^^^^ attempt to compute `u8::MAX + u8::MAX`, which would overflow\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "f41fa1c1ee03d9f94c8389750e899d27254d8e76", "filename": "src/test/ui/consts/const-eval/partial_ptr_overwrite.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpartial_ptr_overwrite.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,11 +7,11 @@ LL | const PARTIAL_OVERWRITE: () = {\n LL |         *(ptr as *mut u8) = 123;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ unable to overwrite parts of a pointer in memory at alloc4\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n \n@@ -25,9 +25,9 @@ LL | const PARTIAL_OVERWRITE: () = {\n LL |         *(ptr as *mut u8) = 123;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ unable to overwrite parts of a pointer in memory at alloc4\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "d5f73dcd11f9bad2c69bdb0d3cb1b443dbd2fc69", "filename": "src/test/ui/consts/const-eval/promoted_errors.noopt.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -53,13 +53,13 @@ LL |     0 - 1\n LL | const X: () = {\n    | -----------\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n   --> $DIR/promoted_errors.rs:43:28\n@@ -88,13 +88,13 @@ LL |     0 - 1\n LL | const X: () = {\n    | -----------\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: any use of this value will cause an error\n@@ -105,11 +105,11 @@ LL | const X: () = {\n LL |     let _x: &'static u32 = &overflow();\n    |                            ^^^^^^^^^^^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "423103276926b853f2fc16fc532f632648d3a27e", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -53,13 +53,13 @@ LL |     1 / 0\n LL | const X: () = {\n    | -----------\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n   --> $DIR/promoted_errors.rs:46:28\n@@ -89,13 +89,13 @@ LL |     1 / 0\n LL | const X: () = {\n    | -----------\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: any use of this value will cause an error\n@@ -107,11 +107,11 @@ LL | const X: () = {\n LL |     let _x: &'static i32 = &div_by_zero1();\n    |                            ^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "d5f73dcd11f9bad2c69bdb0d3cb1b443dbd2fc69", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt_with_overflow_checks.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -53,13 +53,13 @@ LL |     0 - 1\n LL | const X: () = {\n    | -----------\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n   --> $DIR/promoted_errors.rs:43:28\n@@ -88,13 +88,13 @@ LL |     0 - 1\n LL | const X: () = {\n    | -----------\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: any use of this value will cause an error\n@@ -105,11 +105,11 @@ LL | const X: () = {\n LL |     let _x: &'static u32 = &overflow();\n    |                            ^^^^^^^^^^^ referenced constant has errors\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "d1081f9c2caa31b6f0e7be7c9a34f9285100ec0d", "filename": "src/test/ui/consts/const-eval/pub_const_err.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ warning: any use of this value will cause an error\n LL | pub const Z: u32 = 0 - 1;\n    | ----------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/pub_const_err.rs:2:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: 1 warning emitted\n \n@@ -21,11 +21,11 @@ warning: any use of this value will cause an error\n LL | pub const Z: u32 = 0 - 1;\n    | ----------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/pub_const_err.rs:2:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "93362a9375cc9c7872caaf32a4701ca1c4dfbe47", "filename": "src/test/ui/consts/const-eval/pub_const_err_bin.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ warning: any use of this value will cause an error\n LL | pub const Z: u32 = 0 - 1;\n    | ----------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/pub_const_err_bin.rs:2:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: 1 warning emitted\n \n@@ -21,11 +21,11 @@ warning: any use of this value will cause an error\n LL | pub const Z: u32 = 0 - 1;\n    | ----------------   ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/pub_const_err_bin.rs:2:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "02feb6a7832cd7cc93c18b585b4ee00ceefb1d92", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.32bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.32bit.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,11 +4,11 @@ error: any use of this value will cause an error\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n    | --------------            ^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: could not evaluate constant pattern\n   --> $DIR/ref_to_int_match.rs:7:14\n@@ -31,9 +31,9 @@ error: any use of this value will cause an error\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n    | --------------            ^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "02feb6a7832cd7cc93c18b585b4ee00ceefb1d92", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,11 +4,11 @@ error: any use of this value will cause an error\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n    | --------------            ^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: could not evaluate constant pattern\n   --> $DIR/ref_to_int_match.rs:7:14\n@@ -31,9 +31,9 @@ error: any use of this value will cause an error\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n    | --------------            ^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "ddfe1d5909fa03a4af93d7c8867dac50587e636e", "filename": "src/test/ui/consts/const-eval/ub-enum.32bit.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -15,11 +15,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:31:1\n@@ -137,11 +137,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -150,11 +150,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -163,11 +163,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -176,11 +176,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -189,9 +189,9 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "930f8130bc347f5cfd8b41a6a43636b5c394963f", "filename": "src/test/ui/consts/const-eval/ub-enum.64bit.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -15,11 +15,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/ub-enum.rs:31:1\n@@ -137,11 +137,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -150,11 +150,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -163,11 +163,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -176,11 +176,11 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -189,9 +189,9 @@ error: any use of this value will cause an error\n LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "66b993764e933a8422b978774c1a136023e8f8bf", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.32bit.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.32bit.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -48,11 +48,11 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:35:39\n@@ -171,11 +171,11 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -184,11 +184,11 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ----------------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -197,9 +197,9 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -208,11 +208,11 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    | ------------------------------------------                                           ^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -221,7 +221,7 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    | ------------------------------------------                                          ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "cbf120a397ecfbeb64fed373f7433e1f35acbc17", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.64bit.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -48,11 +48,11 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/ub-ref-ptr.rs:35:39\n@@ -171,11 +171,11 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -184,11 +184,11 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ----------------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -197,9 +197,9 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ----------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -208,11 +208,11 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    | ------------------------------------------                                           ^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -221,7 +221,7 @@ error: any use of this value will cause an error\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    | ------------------------------------------                                          ^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "2d4218a94f549f421bcba0c4428ca18d2a09f8b3", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.32bit.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -26,11 +26,11 @@ error: any use of this value will cause an error\n LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:46:1\n@@ -320,11 +320,11 @@ error: any use of this value will cause an error\n LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -333,11 +333,11 @@ error: any use of this value will cause an error\n LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -346,11 +346,11 @@ error: any use of this value will cause an error\n LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -359,11 +359,11 @@ error: any use of this value will cause an error\n LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -372,9 +372,9 @@ error: any use of this value will cause an error\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n    | ------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -383,9 +383,9 @@ error: any use of this value will cause an error\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n    | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -394,7 +394,7 @@ error: any use of this value will cause an error\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n    | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "9997b8fe5f225d9a5fefeca677a884b3d525e0eb", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.64bit.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -26,11 +26,11 @@ error: any use of this value will cause an error\n LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/ub-wide-ptr.rs:46:1\n@@ -320,11 +320,11 @@ error: any use of this value will cause an error\n LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -333,11 +333,11 @@ error: any use of this value will cause an error\n LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -346,11 +346,11 @@ error: any use of this value will cause an error\n LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -359,11 +359,11 @@ error: any use of this value will cause an error\n LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -372,9 +372,9 @@ error: any use of this value will cause an error\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n    | ------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -383,9 +383,9 @@ error: any use of this value will cause an error\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n    | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -394,7 +394,7 @@ error: any use of this value will cause an error\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n    | --------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "cdc1e9d97f4c6efd99fe9edced2aede051ae3fad", "filename": "src/test/ui/consts/const-eval/unused-broken-const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL | const FOO: i32 = [][0];\n    | --------------   ^^^^^ index out of bounds: the length is 0 but the index is 0\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n \n@@ -17,7 +17,7 @@ error: any use of this value will cause an error\n LL | const FOO: i32 = [][0];\n    | --------------   ^^^^^ index out of bounds: the length is 0 but the index is 0\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "dd948f9adb3794488edd227210904d8a482b5e9c", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,8 +7,8 @@ LL |     unsafe { std::mem::transmute(()) }\n    |              this code causes undefined behavior when executed\n    |              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: `#[warn(invalid_value)]` on by default\n    = note: the `!` type has no valid value\n+   = note: `#[warn(invalid_value)]` on by default\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/validate_uninhabited_zsts.rs:4:14"}, {"sha": "dd948f9adb3794488edd227210904d8a482b5e9c", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,8 +7,8 @@ LL |     unsafe { std::mem::transmute(()) }\n    |              this code causes undefined behavior when executed\n    |              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: `#[warn(invalid_value)]` on by default\n    = note: the `!` type has no valid value\n+   = note: `#[warn(invalid_value)]` on by default\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/validate_uninhabited_zsts.rs:4:14"}, {"sha": "b57615e9a7cf09a8a57808cad314b7e04fdfce8a", "filename": "src/test/ui/consts/const-external-macro-const-err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL |     static_assert!(2 + 2 == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n    = note: this error originates in the macro `static_assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n@@ -18,8 +18,8 @@ error: any use of this value will cause an error\n LL |     static_assert!(2 + 2 == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the length is 1 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n    = note: this error originates in the macro `static_assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "908fef7265df1fe3df4a73ebabe5a450efe30d8b", "filename": "src/test/ui/consts/const-float-bits-reject-conv.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -45,9 +45,9 @@ LL |             const _: () = assert!($a);\n LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:33:34\n@@ -184,9 +184,9 @@ LL |             const _: () = assert!($a);\n LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -198,9 +198,9 @@ LL |             const _: () = assert!($a);\n LL |     const_assert!(f32::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -212,9 +212,9 @@ LL |             const _: () = assert!($a == $b);\n LL |         const_assert!(f32::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n    |                                      ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -226,9 +226,9 @@ LL |             const _: () = assert!($a == $b);\n LL |         const_assert!(f32::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n    |                                      ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -240,9 +240,9 @@ LL |             const _: () = assert!($a);\n LL |     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -254,9 +254,9 @@ LL |             const _: () = assert!($a);\n LL |     const_assert!(f64::from_bits(MASKED_NAN1).is_nan());\n    |                                  ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -268,9 +268,9 @@ LL |             const _: () = assert!($a == $b);\n LL |         const_assert!(f64::from_bits(MASKED_NAN1).to_bits(), MASKED_NAN1);\n    |                                      ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -282,7 +282,7 @@ LL |             const _: () = assert!($a == $b);\n LL |         const_assert!(f64::from_bits(MASKED_NAN2).to_bits(), MASKED_NAN2);\n    |                                      ^^^^^^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "56645980b057343904e13ae6210d354427c3ecdb", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL | const LEN: usize = ONE - TWO;\n    | ----------------   ^^^^^^^^^ attempt to compute `1_usize - 2_usize`, which would overflow\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-len-underflow-separate-spans.rs:12:17\n@@ -24,7 +24,7 @@ error: any use of this value will cause an error\n LL | const LEN: usize = ONE - TWO;\n    | ----------------   ^^^^^^^^^ attempt to compute `1_usize - 2_usize`, which would overflow\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "389413310036117ec1719f4628aa4269e55ad8a3", "filename": "src/test/ui/consts/const-prop-read-static-in-const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL | const TEST: u8 = MY_STATIC;\n    | --------------   ^^^^^^^^^ constant accesses static\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n warning: skipping const checks\n    |\n@@ -25,7 +25,7 @@ error: any use of this value will cause an error\n LL | const TEST: u8 = MY_STATIC;\n    | --------------   ^^^^^^^^^ constant accesses static\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "0ed09ff8341674083fc618bbbcf2c3dbacf5f8e1", "filename": "src/test/ui/consts/const-size_of_val-align_of_val-extern-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL | const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque) };\n    | ------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `extern type` does not have known layout\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/const-size_of_val-align_of_val-extern-type.rs:13:32\n@@ -26,9 +26,9 @@ error: any use of this value will cause an error\n LL | const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque) };\n    | ------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `extern type` does not have known layout\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -37,7 +37,7 @@ error: any use of this value will cause an error\n LL | const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const Opaque) };\n    | -------------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `extern type` does not have known layout\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "167564549740b4386861857000073f0230f2f76f", "filename": "src/test/ui/consts/const-slice-oob.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL | const BAR: u32 = FOO[5];\n    | --------------   ^^^^^^ index out of bounds: the length is 3 but the index is 5\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n \n@@ -17,7 +17,7 @@ error: any use of this value will cause an error\n LL | const BAR: u32 = FOO[5];\n    | --------------   ^^^^^^ index out of bounds: the length is 3 but the index is 5\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "22348272275203f3a0c56623773c2733841cbb02", "filename": "src/test/ui/consts/const_in_pattern/custom-eq-branch-warn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: to use a constant of type `CustomEq` in a pattern, the constant's initi\n LL |         BAR_BAZ => panic!(),\n    |         ^^^^^^^\n    |\n-   = note: `#[warn(nontrivial_structural_match)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n+   = note: `#[warn(nontrivial_structural_match)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "ddc576ced8f360e7ea3bcccf47c9d99fa791de39", "filename": "src/test/ui/consts/const_in_pattern/incomplete-slice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fincomplete-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fincomplete-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fincomplete-slice.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: to use a constant of type `E` in a pattern, `E` must be annotated with\n LL |         E_SL => {}\n    |         ^^^^\n    |\n-   = note: `#[warn(indirect_structural_match)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: `#[warn(indirect_structural_match)]` on by default\n \n error[E0004]: non-exhaustive patterns: `&_` not covered\n   --> $DIR/incomplete-slice.rs:9:11"}, {"sha": "731ef509ccad4ef1a03c7c8ac50e1e3de45c4931", "filename": "src/test/ui/consts/const_in_pattern/issue-44333.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-44333.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-44333.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-44333.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ warning: function pointers and unsized pointers in patterns behave unpredictably\n LL |         FOO => println!(\"foo\"),\n    |         ^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/70861>\n note: the lint level is defined here\n   --> $DIR/issue-44333.rs:3:9\n    |\n LL | #![warn(pointer_structural_match)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/70861>\n \n warning: function pointers and unsized pointers in patterns behave unpredictably and should not be relied upon. See https://github.com/rust-lang/rust/issues/70861 for details.\n   --> $DIR/issue-44333.rs:21:9"}, {"sha": "6601983499779a0d59f9b56ae3d359fd54f1895f", "filename": "src/test/ui/consts/const_in_pattern/reject_non_structural.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -64,13 +64,13 @@ warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be a\n LL |     match &Some(NoDerive) { ADDR_OF => dbg!(ADDR_OF), _ => panic!(\"whoops\"), };\n    |                             ^^^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n note: the lint level is defined here\n   --> $DIR/reject_non_structural.rs:12:9\n    |\n LL | #![warn(indirect_structural_match)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n \n error: aborting due to 10 previous errors; 1 warning emitted\n "}, {"sha": "e957a43a13da5d53df93a4cda62574df6b6cff6a", "filename": "src/test/ui/consts/const_in_pattern/warn_corner_cases.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: to use a constant of type `NoDerive` in a pattern, the constant's initi\n LL |     match None { Some(_) => panic!(\"whoops\"), INDEX => dbg!(INDEX), };\n    |                                               ^^^^^\n    |\n-   = note: `#[warn(nontrivial_structural_match)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n+   = note: `#[warn(nontrivial_structural_match)]` on by default\n \n warning: to use a constant of type `NoDerive` in a pattern, the constant's initializer must be trivial or `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/warn_corner_cases.rs:32:47"}, {"sha": "0f7d93a3be3eddf1ec38a3213a72eb0e3673125c", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,9 +7,9 @@ LL |     let mut x = 0;\n LL |     while x != 1000 {\n    |           ^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n \n@@ -23,7 +23,7 @@ LL |     let mut x = 0;\n LL |     while x != 1000 {\n    |           ^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "a2d881f396e2faedaf6116909b59309207193d12", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.with_flag.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -12,11 +12,11 @@ LL | const INVALID_PTR_IN_INT: () = unsafe {\n LL |     let _x: usize = transmute(&3u8);\n    |                     ^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/detect-extra-ub.rs:22:30\n@@ -80,11 +80,11 @@ LL | const INVALID_PTR_IN_INT: () = unsafe {\n LL |     let _x: usize = transmute(&3u8);\n    |                     ^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -96,11 +96,11 @@ LL |     let x: &[u8] = &[0; 32];\n LL |     let _x: (usize, usize) = transmute(x);\n    |                              ^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -111,7 +111,7 @@ LL | const UNALIGNED_READ: () = {\n LL |     INNER;\n    |     ^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "f4d69c801abddbe731a825c9886464a6294cab7e", "filename": "src/test/ui/consts/invalid-union.32bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -15,9 +15,9 @@ error: erroneous constant used\n LL |     let _: &'static _ = &C;\n    |                         ^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to 2 previous errors\n \n@@ -29,7 +29,7 @@ error: erroneous constant used\n LL |     let _: &'static _ = &C;\n    |                         ^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "69b63d3ff92428a6b06875b747b683cf5a80fb05", "filename": "src/test/ui/consts/invalid-union.64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -15,9 +15,9 @@ error: erroneous constant used\n LL |     let _: &'static _ = &C;\n    |                         ^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to 2 previous errors\n \n@@ -29,7 +29,7 @@ error: erroneous constant used\n LL |     let _: &'static _ = &C;\n    |                         ^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "b672f5690da3e4203e390685bece6fe1cd6acfc5", "filename": "src/test/ui/consts/issue-56164.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -19,9 +19,9 @@ error: erroneous constant used\n LL | const fn foo() { (||{})() }\n    |                  ^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to 3 previous errors\n \n@@ -33,7 +33,7 @@ error: erroneous constant used\n LL | const fn foo() { (||{})() }\n    |                  ^^^^^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "5320da005620c89f4088e50b896025025dded7e0", "filename": "src/test/ui/consts/issue-66693.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -28,9 +28,9 @@ error: erroneous constant used\n LL |     panic!(&1);\n    |            ^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to 4 previous errors\n \n@@ -41,7 +41,7 @@ error: erroneous constant used\n LL |     panic!(&1);\n    |            ^^ referenced constant has errors\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "bfd5421a93c558cb36131c2dbbcc4cb3d5b6c403", "filename": "src/test/ui/consts/issue-miri-1910.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -14,11 +14,11 @@ LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n LL | const C: () = unsafe {\n    | -----------\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n \n@@ -39,9 +39,9 @@ LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n LL | const C: () = unsafe {\n    | -----------\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "c64107ee26e184037e51ab57b667e4e32653c2dd", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -32,11 +32,11 @@ LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n LL |     const F: u32 = (U::X, 42).1;\n    |     ------------\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/assoc_const.rs:4:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "950c3db1b7e460488cc544cd8bc24a892ac7cdb7", "filename": "src/test/ui/consts/miri_unleashed/assoc_const_2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -14,11 +14,11 @@ warning: any use of this value will cause an error\n LL |     const F: u32 = 100 / U::X;\n    |     ------------   ^^^^^^^^^^ attempt to divide `100_u32` by zero\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/assoc_const_2.rs:3:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "03359e62264e59be69cfd0878f46e4c9716a282e", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -57,13 +57,13 @@ LL |     static FOO: AtomicUsize = AtomicUsize::new(0);\n LL |     FOO.fetch_add(1, Ordering::Relaxed)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling non-const function `AtomicUsize::fetch_add`\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static.rs:3:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: any use of this value will cause an error\n@@ -75,13 +75,13 @@ LL |     static FOO: AtomicUsize = AtomicUsize::new(0);\n LL |     unsafe { *(&FOO as *const _ as *const usize) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static.rs:3:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: any use of this value will cause an error\n@@ -90,11 +90,11 @@ warning: any use of this value will cause an error\n LL | const READ_MUT: u32 = unsafe { MUTABLE };\n    | -------------------            ^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static.rs:3:10\n    |\n LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "f66a96ae3f1ee9cd7a47a8c70dcd44886ba6ce98", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -40,13 +40,13 @@ LL | const U8_MUT2: &u8 = {\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n   --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n@@ -62,13 +62,13 @@ LL | const U8_MUT3: &u8 = {\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n   --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n@@ -165,13 +165,13 @@ LL | const U8_MUT2: &u8 = {\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: any use of this value will cause an error\n@@ -182,11 +182,11 @@ LL | const U8_MUT3: &u8 = {\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "f919c36431035ad95002c427ef4b605f3e50022f", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -40,13 +40,13 @@ LL | const U8_MUT2: &u8 = {\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n   --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n@@ -62,13 +62,13 @@ LL | const U8_MUT3: &u8 = {\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n   --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n@@ -165,13 +165,13 @@ LL | const U8_MUT2: &u8 = {\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n Future breakage diagnostic:\n warning: any use of this value will cause an error\n@@ -182,11 +182,11 @@ LL | const U8_MUT3: &u8 = {\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n note: the lint level is defined here\n   --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "df9a8bf51b0eb769f8051169397a3017fd6d1a00", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -24,11 +24,11 @@ error: any use of this value will cause an error\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n    | --------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/ptr_comparisons.rs:62:27\n@@ -51,11 +51,11 @@ error: any use of this value will cause an error\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n    | --------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n \n Future breakage diagnostic:\n error: any use of this value will cause an error\n@@ -64,9 +64,9 @@ error: any use of this value will cause an error\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n    | --------------            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "65fb2a69d8f9258bd8b86d9fc1126db04b98d0f5", "filename": "src/test/ui/consts/recursive.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -6,8 +6,8 @@ LL | const fn f<T>(x: T) {\n LL |     f(x);\n    |     ---- recursive call site\n    |\n-   = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n+   = note: `#[warn(unconditional_recursion)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/recursive.rs:4:5\n@@ -23,9 +23,9 @@ LL |     f(x);\n LL | const X: () = f(1);\n    | -----------\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error; 1 warning emitted\n \n@@ -44,7 +44,7 @@ LL |     f(x);\n LL | const X: () = f(1);\n    | -----------\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "3855b5f2a68e007473bda434d1dbd62090a836bf", "filename": "src/test/ui/consts/refs_check_const_eq-issue-88384.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: the feature `adt_const_params` is incomplete and may not be safe to use\n LL | #![feature(adt_const_params)]\n    |            ^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #95174 <https://github.com/rust-lang/rust/issues/95174> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0741]: using function pointers as const generic parameters is forbidden\n   --> $DIR/refs_check_const_eq-issue-88384.rs:10:21"}, {"sha": "10bebe8ebc55ddd9f715e7f8dfb9fdfea49c9d4e", "filename": "src/test/ui/consts/trait_specialization.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftrait_specialization.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: the feature `specialization` is incomplete and may not be safe to use a\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "0848fbf1968dd3581e9b92beb1f5136e23ee5889", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -137,9 +137,9 @@ LL |     hint_unreachable()\n LL |     const CONSTANT: i32 = unsafe { fake_type() };\n    |     -------------------\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error[E0080]: erroneous constant used\n   --> $DIR/uninhabited-const-issue-61744.rs:19:10\n@@ -290,7 +290,7 @@ LL |     hint_unreachable()\n LL |     const CONSTANT: i32 = unsafe { fake_type() };\n    |     -------------------\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n "}, {"sha": "dcdf8f8430ff3a2c644f2d691070fbab1f85c05c", "filename": "src/test/ui/derive-uninhabited-enum-38885.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,8 +7,8 @@ LL |     Bar(u8),\n LL |     Void(Void),\n    |     ^^^^\n    |\n-   = note: `-W dead-code` implied by `-W unused`\n    = note: `Foo` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n+   = note: `-W dead-code` implied by `-W unused`\n \n warning: 1 warning emitted\n "}, {"sha": "512b870fa4b6c323fe117cefe2b3547477b289a5", "filename": "src/test/ui/derives/clone-debug-dead-code-in-the-same-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -13,12 +13,12 @@ LL |     field3: (),\n LL |     field4: (),\n    |     ^^^^^^\n    |\n+   = note: `Whatever` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n note: the lint level is defined here\n   --> $DIR/clone-debug-dead-code-in-the-same-struct.rs:1:11\n    |\n LL | #![forbid(dead_code)]\n    |           ^^^^^^^^^\n-   = note: `Whatever` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n \n error: aborting due to previous error\n "}, {"sha": "0ad800c398180af7c93fa4781578c8e001f0ee1b", "filename": "src/test/ui/derives/deriving-with-repr-packed.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ error: `Clone` can't be derived on this `#[repr(packed)]` struct with type or co\n LL | #[derive(Copy, Clone, Default, PartialEq, Eq)]\n    |                ^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n note: the lint level is defined here\n   --> $DIR/deriving-with-repr-packed.rs:1:9\n    |\n LL | #![deny(unaligned_references)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `PartialEq` can't be derived on this `#[repr(packed)]` struct with type or const parameters\n@@ -52,13 +52,13 @@ error: `Clone` can't be derived on this `#[repr(packed)]` struct with type or co\n LL | #[derive(Copy, Clone, Default, PartialEq, Eq)]\n    |                ^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n note: the lint level is defined here\n   --> $DIR/deriving-with-repr-packed.rs:1:9\n    |\n LL | #![deny(unaligned_references)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n@@ -68,13 +68,13 @@ error: `PartialEq` can't be derived on this `#[repr(packed)]` struct with type o\n LL | #[derive(Copy, Clone, Default, PartialEq, Eq)]\n    |                                ^^^^^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n note: the lint level is defined here\n   --> $DIR/deriving-with-repr-packed.rs:1:9\n    |\n LL | #![deny(unaligned_references)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n@@ -84,13 +84,13 @@ error: `Hash` can't be derived on this `#[repr(packed)]` struct that does not de\n LL | #[derive(Default, Hash)]\n    |                   ^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n note: the lint level is defined here\n   --> $DIR/deriving-with-repr-packed.rs:1:9\n    |\n LL | #![deny(unaligned_references)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n@@ -100,12 +100,12 @@ error: `Debug` can't be derived on this `#[repr(packed)]` struct that does not d\n LL | #[derive(Debug, Default)]\n    |          ^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n note: the lint level is defined here\n   --> $DIR/deriving-with-repr-packed.rs:1:9\n    |\n LL | #![deny(unaligned_references)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "e16625136acae2bc970d95cf63f90dcfccf40e5b", "filename": "src/test/ui/destructuring-assignment/warn-unused-duplication.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fwarn-unused-duplication.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fwarn-unused-duplication.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fwarn-unused-duplication.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,12 +4,12 @@ warning: value assigned to `a` is never read\n LL |     (a, a) = (0, 1);\n    |      ^\n    |\n+   = help: maybe it is overwritten before being read?\n note: the lint level is defined here\n   --> $DIR/warn-unused-duplication.rs:3:9\n    |\n LL | #![warn(unused_assignments)]\n    |         ^^^^^^^^^^^^^^^^^^\n-   = help: maybe it is overwritten before being read?\n \n warning: 1 warning emitted\n "}, {"sha": "21f957ab549a3832f1769c824d27a21992ae9d88", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -105,9 +105,9 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL | type H = Fn(u8) -> (u8)::Output;\n    |          ^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+   = note: `#[warn(bare_trait_objects)]` on by default\n help: use `dyn`\n    |\n LL | type H = <dyn Fn(u8) -> (u8)>::Output;"}, {"sha": "8fe38bf697287f71c2be37e9151fcb4a22fd90ca", "filename": "src/test/ui/did_you_mean/issue-31424.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -24,8 +24,8 @@ LL |     fn bar(self: &mut Self) {\n LL |         (&mut self).bar();\n    |         ----------------- recursive call site\n    |\n-   = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n+   = note: `#[warn(unconditional_recursion)]` on by default\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-31424.rs:16:9"}, {"sha": "89aded9134f9f95bb46e555f6941b83e4655c2ac", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     pub mod dyn {\n    |             ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n note: the lint level is defined here\n   --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:11:9\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n   --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:17:20"}, {"sha": "6bafff9192a3649010ee52905a63d6a6ba0942c7", "filename": "src/test/ui/dyn-keyword/dyn-2018-edition-lint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ error: trait objects without an explicit `dyn` are deprecated\n LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n    |                 ^^^^^^^^^\n    |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n note: the lint level is defined here\n   --> $DIR/dyn-2018-edition-lint.rs:2:8\n    |\n LL | #[deny(bare_trait_objects)]\n    |        ^^^^^^^^^^^^^^^^^^\n-   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n LL | fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {"}, {"sha": "0bb764d712e23ba2c8cbd4ea6e24e0a8fecfd7bf", "filename": "src/test/ui/dyn-keyword/dyn-angle-brackets.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ error: trait objects without an explicit `dyn` are deprecated\n LL |         <fmt::Debug>::fmt(self, f)\n    |          ^^^^^^^^^^\n    |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n note: the lint level is defined here\n   --> $DIR/dyn-angle-brackets.rs:4:9\n    |\n LL | #![deny(bare_trait_objects)]\n    |         ^^^^^^^^^^^^^^^^^^\n-   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n help: use `dyn`\n    |\n LL |         <dyn fmt::Debug>::fmt(self, f)"}, {"sha": "612dd17e71efc24b898223d395d91ff0c108afeb", "filename": "src/test/ui/editions/edition-raw-pointer-method-2015.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,14 +4,14 @@ error: type annotations needed\n LL |     let _ = y.is_null();\n    |               ^^^^^^^\n    |\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n+   = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n note: the lint level is defined here\n   --> $DIR/edition-raw-pointer-method-2015.rs:5:8\n    |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^\n    = note: `#[deny(tyvar_behind_raw_pointer)]` implied by `#[deny(warnings)]`\n-   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n-   = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n \n error: aborting due to previous error\n "}, {"sha": "01d0d5a6b48b55b27e26e9b45b579e88c40d4bae", "filename": "src/test/ui/empty/empty-attributes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fempty%2Fempty-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fempty%2Fempty-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-attributes.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,12 +4,12 @@ error: unused attribute\n LL | #[repr()]\n    | ^^^^^^^^^ help: remove this attribute\n    |\n+   = note: attribute `repr` with an empty list has no effect\n note: the lint level is defined here\n   --> $DIR/empty-attributes.rs:3:9\n    |\n LL | #![deny(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n-   = note: attribute `repr` with an empty list has no effect\n \n error: unused attribute\n   --> $DIR/empty-attributes.rs:14:1"}, {"sha": "9b1505b5c468d2cfb0b6acff2dc96e0df62fd962", "filename": "src/test/ui/enum-discriminant/discriminant_size.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_size.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: the feature `repr128` is incomplete and may not be safe to use and/or c\n LL | #![feature(core_intrinsics, repr128)]\n    |                             ^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #56071 <https://github.com/rust-lang/rust/issues/56071> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "fc7bbd06284346576d84c927910dee9e6576440c", "filename": "src/test/ui/enum-discriminant/issue-43398.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-43398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-43398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-43398.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: the feature `repr128` is incomplete and may not be safe to use and/or c\n LL | #![feature(repr128)]\n    |            ^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #56071 <https://github.com/rust-lang/rust/issues/56071> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "ac93badf2156b577c3a75d7eac36ee26ccffe911", "filename": "src/test/ui/enum-discriminant/issue-70509-partial_eq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: the feature `repr128` is incomplete and may not be safe to use and/or c\n LL | #![feature(repr128, arbitrary_enum_discriminant)]\n    |            ^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #56071 <https://github.com/rust-lang/rust/issues/56071> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "da8d75c11aff273fdb3604465f67b91cf4fdb4da", "filename": "src/test/ui/enum-discriminant/repr128.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fenum-discriminant%2Frepr128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fenum-discriminant%2Frepr128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Frepr128.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,8 +4,8 @@ warning: the feature `repr128` is incomplete and may not be safe to use and/or c\n LL | #![feature(repr128, core_intrinsics, discriminant_kind)]\n    |            ^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #56071 <https://github.com/rust-lang/rust/issues/56071> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "f79f7a043d6886c37cddeadf8a9d525f39f50ebe", "filename": "src/test/ui/enum/enum-discrim-too-small2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,13 +4,13 @@ error: literal out of range for `i8`\n LL |     Ci8 = 223,\n    |           ^^^\n    |\n+   = note: the literal `223` does not fit into the type `i8` whose range is `-128..=127`\n+   = help: consider using the type `u8` instead\n note: the lint level is defined here\n   --> $DIR/enum-discrim-too-small2.rs:1:9\n    |\n LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = note: the literal `223` does not fit into the type `i8` whose range is `-128..=127`\n-   = help: consider using the type `u8` instead\n \n error: literal out of range for `i16`\n   --> $DIR/enum-discrim-too-small2.rs:15:12"}, {"sha": "6e48f9582f1c050a8980f2472f12d4724e2100dd", "filename": "src/test/ui/error-codes/E0017.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,14 +4,14 @@ warning: taking a mutable reference to a `const` item\n LL | const CR: &'static mut i32 = &mut C;\n    |                              ^^^^^^\n    |\n-   = note: `#[warn(const_item_mutation)]` on by default\n    = note: each usage of a `const` item creates a new temporary\n    = note: the mutable reference will refer to this temporary, not the original `const` item\n note: `const` item defined here\n   --> $DIR/E0017.rs:2:1\n    |\n LL | const C: i32 = 2;\n    | ^^^^^^^^^^^^\n+   = note: `#[warn(const_item_mutation)]` on by default\n \n error[E0764]: mutable references are not allowed in the final value of constants\n   --> $DIR/E0017.rs:5:30"}, {"sha": "b51aa263d5e1cc6f9215faecd376908319e07a49", "filename": "src/test/ui/error-codes/E0388.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,14 +4,14 @@ warning: taking a mutable reference to a `const` item\n LL | const CR: &'static mut i32 = &mut C;\n    |                              ^^^^^^\n    |\n-   = note: `#[warn(const_item_mutation)]` on by default\n    = note: each usage of a `const` item creates a new temporary\n    = note: the mutable reference will refer to this temporary, not the original `const` item\n note: `const` item defined here\n   --> $DIR/E0388.rs:2:1\n    |\n LL | const C: i32 = 2;\n    | ^^^^^^^^^^^^\n+   = note: `#[warn(const_item_mutation)]` on by default\n \n error[E0764]: mutable references are not allowed in the final value of constants\n   --> $DIR/E0388.rs:4:30"}, {"sha": "12ecead13de5f4d544c47b5c6b2b3fcc4a4870fe", "filename": "src/test/ui/error-codes/E0520.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ferror-codes%2FE0520.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ferror-codes%2FE0520.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0520.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: the feature `specialization` is incomplete and may not be safe to use a\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0520]: `fly` specializes an item from a parent `impl`, but that item is not marked `default`\n   --> $DIR/E0520.rs:17:5"}, {"sha": "b759399a940bbe3bb0ca736e4ea694336487eb04", "filename": "src/test/ui/error-codes/E0771.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -12,8 +12,8 @@ warning: the feature `adt_const_params` is incomplete and may not be safe to use\n LL | #![feature(adt_const_params)]\n    |            ^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #95174 <https://github.com/rust-lang/rust/issues/95174> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "08eb8cfac49ce0679297c21e38e62c3afaa406be", "filename": "src/test/ui/errors/issue-89280-emitter-overflow-splice-lines.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ferrors%2Fissue-89280-emitter-overflow-splice-lines.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ferrors%2Fissue-89280-emitter-overflow-splice-lines.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferrors%2Fissue-89280-emitter-overflow-splice-lines.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -8,9 +8,9 @@ LL | |\n LL | |     )) {}\n    | |_____^\n    |\n-   = note: `#[warn(anonymous_parameters)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n+   = note: `#[warn(anonymous_parameters)]` on by default\n help: try naming the parameter or explicitly ignoring it\n    |\n LL ~     fn test(x: u32, _: ("}, {"sha": "c4bba3cb1a8a0366dbec17347502a8109e6888ce", "filename": "src/test/ui/expr/if/if-let.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -9,9 +9,9 @@ LL | |         println!(\"irrefutable pattern\");\n LL | |     });\n    | |______- in this macro invocation\n    |\n-   = note: `#[warn(irrefutable_let_patterns)]` on by default\n    = note: this pattern will always match, so the `if let` is useless\n    = help: consider replacing the `if let` with a `let`\n+   = note: `#[warn(irrefutable_let_patterns)]` on by default\n    = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable `if let` pattern"}, {"sha": "f20ee158ac4334288255a14c4ad23226ae3eecbb", "filename": "src/test/ui/extern/extern-no-mangle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fextern%2Fextern-no-mangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fextern%2Fextern-no-mangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-no-mangle.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,12 +7,12 @@ LL |     #[no_mangle]\n LL |     let x = 0_u8;\n    |     ------------- not a free function, impl method or static\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n note: the lint level is defined here\n   --> $DIR/extern-no-mangle.rs:1:9\n    |\n LL | #![warn(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: `#[no_mangle]` has no effect on a foreign static\n   --> $DIR/extern-no-mangle.rs:11:5"}, {"sha": "5f0aaf9251fb29f29a9edc971457f3055bcbfe43", "filename": "src/test/ui/feature-gates/bench.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ error: use of unstable library feature 'test': `bench` is a part of custom test\n LL | #[bench]\n    |   ^^^^^\n    |\n-   = note: `#[deny(soft_unstable)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #64266 <https://github.com/rust-lang/rust/issues/64266>\n+   = note: `#[deny(soft_unstable)]` on by default\n \n error: use of unstable library feature 'test': `bench` is a part of custom test frameworks which are unstable\n   --> $DIR/bench.rs:7:5"}, {"sha": "308de2692930d26f1605f45ab3b29b966b365a12", "filename": "src/test/ui/feature-gates/feature-gate-default_type_parameter_fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n LL | fn avg<T=i32>(_: T) {}\n    |        ^^^^^\n    |\n-   = note: `#[deny(invalid_type_param_default)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n+   = note: `#[deny(invalid_type_param_default)]` on by default\n \n error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n   --> $DIR/feature-gate-default_type_parameter_fallback.rs:8:6"}, {"sha": "4d79ce3c6594a68baf53e7b87104358651c29429", "filename": "src/test/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,10 +4,10 @@ warning: unknown lint: `non_exhaustive_omitted_patterns`\n LL | #![deny(non_exhaustive_omitted_patterns)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unknown_lints)]` on by default\n    = note: the `non_exhaustive_omitted_patterns` lint is unstable\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n+   = note: `#[warn(unknown_lints)]` on by default\n \n warning: unknown lint: `non_exhaustive_omitted_patterns`\n   --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:6:1"}, {"sha": "5b1270a19845fbd9902f273c787601a3420adca9", "filename": "src/test/ui/feature-gates/feature-gate-repr-simd.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -25,9 +25,9 @@ LL |\n LL | #[repr(simd)]\n    |        ^^^^\n    |\n-   = note: `#[deny(conflicting_repr_hints)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #68585 <https://github.com/rust-lang/rust/issues/68585>\n+   = note: `#[deny(conflicting_repr_hints)]` on by default\n \n error: aborting due to 3 previous errors\n "}, {"sha": "751da87cc0d0027789a80c94f6477313afe948e5", "filename": "src/test/ui/feature-gates/feature-gate-strict_provenance.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-strict_provenance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-strict_provenance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-strict_provenance.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,10 +4,10 @@ warning: unknown lint: `fuzzy_provenance_casts`\n LL | #![deny(fuzzy_provenance_casts)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unknown_lints)]` on by default\n    = note: the `fuzzy_provenance_casts` lint is unstable\n    = note: see issue #95228 <https://github.com/rust-lang/rust/issues/95228> for more information\n    = help: add `#![feature(strict_provenance)]` to the crate attributes to enable\n+   = note: `#[warn(unknown_lints)]` on by default\n \n warning: unknown lint: `lossy_provenance_casts`\n   --> $DIR/feature-gate-strict_provenance.rs:7:1"}, {"sha": "b4d6aa658e1bd181cfe12dfb72d6ef2e96226efb", "filename": "src/test/ui/feature-gates/feature-gate-test_unstable_lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-test_unstable_lint.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: unknown lint: `test_unstable_lint`\n LL | #![allow(test_unstable_lint)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(unknown_lints)]` on by default\n    = note: the `test_unstable_lint` lint is unstable\n    = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+   = note: `#[warn(unknown_lints)]` on by default\n \n warning: unknown lint: `test_unstable_lint`\n   --> $DIR/feature-gate-test_unstable_lint.rs:4:1"}, {"sha": "5a645cf4ef98782af41dd7d123569fd61c07a117", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-builtin-attrs-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs-error.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -12,9 +12,9 @@ error: attribute must be of the form `#[inline]` or `#[inline(always|never)]`\n LL |     #[inline = \"2100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[deny(ill_formed_attribute_input)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n+   = note: `#[deny(ill_formed_attribute_input)]` on by default\n \n error: `start` attribute can only be used on functions\n   --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:119:1"}, {"sha": "1b1cf6792433357251e338d3efe1a12a16a0cd29", "filename": "src/test/ui/for-loop-while/while-let-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffor-loop-while%2Fwhile-let-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffor-loop-while%2Fwhile-let-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Fwhile-let-2.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -9,9 +9,9 @@ LL | |         println!(\"irrefutable pattern\");\n LL | |     });\n    | |______- in this macro invocation\n    |\n-   = note: `#[warn(irrefutable_let_patterns)]` on by default\n    = note: this pattern will always match, so the loop will never exit\n    = help: consider instead using a `loop { ... }` with a `let` inside it\n+   = note: `#[warn(irrefutable_let_patterns)]` on by default\n    = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable `while let` pattern"}, {"sha": "a8fb100a74960c3efc4f19c36101a872d33b2a39", "filename": "src/test/ui/future-incompatible-lint-group.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,25 +4,25 @@ warning: anonymous parameters are deprecated and will be removed in the next edi\n LL |     fn f(u8) {}\n    |          ^^ help: try naming the parameter or explicitly ignoring it: `_: u8`\n    |\n-   = note: `#[warn(anonymous_parameters)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n+   = note: `#[warn(anonymous_parameters)]` on by default\n \n error: this attribute can only be applied at the crate level\n   --> $DIR/future-incompatible-lint-group.rs:13:12\n    |\n LL |     #![doc(test(some_test))]\n    |            ^^^^^^^^^^^^^^^\n    |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+   = note: read <https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level> for more information\n note: the lint level is defined here\n   --> $DIR/future-incompatible-lint-group.rs:3:9\n    |\n LL | #![deny(future_incompatible)]\n    |         ^^^^^^^^^^^^^^^^^^^\n    = note: `#[deny(invalid_doc_attributes)]` implied by `#[deny(future_incompatible)]`\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n-   = note: read <https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level> for more information\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "30a6732f75956d40042bbc34125fb9cbfb3060a3", "filename": "src/test/ui/generator/issue-52398.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgenerator%2Fissue-52398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgenerator%2Fissue-52398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-52398.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -6,8 +6,8 @@ LL | |         A.test(yield);\n LL | |     };\n    | |______^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: generators are lazy and do nothing unless resumed\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: unused generator that must be used\n   --> $DIR/issue-52398.rs:24:5"}, {"sha": "29aca94408a82174811f7edbbf976cc8ae58d9c0", "filename": "src/test/ui/generator/issue-57084.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgenerator%2Fissue-57084.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgenerator%2Fissue-57084.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-57084.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -9,8 +9,8 @@ LL | |         }\n LL | |     };\n    | |______^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: generators are lazy and do nothing unless resumed\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "b911b6661909a1fcb042a5bf467562130a42a3d3", "filename": "src/test/ui/generator/match-bindings.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgenerator%2Fmatch-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgenerator%2Fmatch-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmatch-bindings.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -10,8 +10,8 @@ LL | |         }\n LL | |     };\n    | |______^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: generators are lazy and do nothing unless resumed\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "e83dbf833bfa747de2eead4c79022333b5f07411", "filename": "src/test/ui/generator/reborrow-mut-upvar.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgenerator%2Freborrow-mut-upvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgenerator%2Freborrow-mut-upvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Freborrow-mut-upvar.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -10,8 +10,8 @@ LL | |         *bar = 2;\n LL | |     };\n    | |______^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: generators are lazy and do nothing unless resumed\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "5cb43067fee6bf067092a349e4dcb2ab332b671f", "filename": "src/test/ui/generator/too-live-local-in-immovable-gen.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -10,8 +10,8 @@ LL | |             let _ = &a;\n LL | |         };\n    | |__________^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: generators are lazy and do nothing unless resumed\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "c9e1ab722d47ff8d2931dc1dd25c4d1242492620", "filename": "src/test/ui/generator/yield-in-args-rev.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args-rev.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args-rev.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-args-rev.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,8 +7,8 @@ LL | |         foo(yield, &b);\n LL | |     };\n    | |______^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: generators are lazy and do nothing unless resumed\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "8587e1dc663bc9e4a7e85aa487fbfff02489367b", "filename": "src/test/ui/generator/yield-in-box.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-box.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -10,8 +10,8 @@ LL | |         }\n LL | |     };\n    | |______^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: generators are lazy and do nothing unless resumed\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "07de24662cf2e4034f18b0b76da77698fe58610b", "filename": "src/test/ui/generator/yield-in-initializer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -10,8 +10,8 @@ LL | |         }\n LL | |     };\n    | |______^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: generators are lazy and do nothing unless resumed\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "fe10477bf7380b17a845a010990b29cadef6cd09", "filename": "src/test/ui/generator/yield-subtype.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgenerator%2Fyield-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgenerator%2Fyield-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-subtype.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -7,8 +7,8 @@ LL | |         yield b;\n LL | |     };\n    | |______^\n    |\n-   = note: `#[warn(unused_must_use)]` on by default\n    = note: generators are lazy and do nothing unless resumed\n+   = note: `#[warn(unused_must_use)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "11c4ebf604e74cd1e246670e6d187bae56459056", "filename": "src/test/ui/generic-associated-types/issue-87429-specialization.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: the feature `specialization` is incomplete and may not be safe to use a\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0277]: can't compare `Foo` with `Foo`\n   --> $DIR/issue-87429-specialization.rs:20:31"}, {"sha": "727b9e6bec8e6aa01587077b370d4b2bf80dd4bc", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-perfect-forwarding.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-perfect-forwarding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-perfect-forwarding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-perfect-forwarding.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -9,8 +9,8 @@ LL | |     T: Bar<&'b isize>,\n LL |       no_hrtb(&mut t);\n    |       --------------- recursive call site\n    |\n-   = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n+   = note: `#[warn(unconditional_recursion)]` on by default\n \n warning: function cannot return without recursing\n   --> $DIR/hrtb-perfect-forwarding.rs:25:1"}, {"sha": "bde8362fdf81e64b8082ba4e8035d246a359e2ce", "filename": "src/test/ui/impl-trait/equality-rpass.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality-rpass.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: the feature `specialization` is incomplete and may not be safe to use a\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n \n warning: 1 warning emitted\n "}, {"sha": "1841b8e5dcd0849d7d659594f5081fc21a661279", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: the feature `specialization` is incomplete and may not be safe to use a\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0308]: mismatched types\n   --> $DIR/equality.rs:15:5"}, {"sha": "e399a61023d1eebfcdcee33b06badb4e71b5ad63", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -4,9 +4,9 @@ warning: the feature `specialization` is incomplete and may not be safe to use a\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:25:18"}]}