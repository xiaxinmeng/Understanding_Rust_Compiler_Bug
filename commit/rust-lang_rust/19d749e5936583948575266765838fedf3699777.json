{"sha": "19d749e5936583948575266765838fedf3699777", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZDc0OWU1OTM2NTgzOTQ4NTc1MjY2NzY1ODM4ZmVkZjM2OTk3Nzc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-22T18:46:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-22T18:46:12Z"}, "message": "Rollup merge of #67499 - Centril:mir-match-clean, r=matthewjasper\n\nMisc MIR building cleanups\n\nr? @matthewjasper", "tree": {"sha": "7a71b144be43c3502fc3a4897b7819402f2bb4f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a71b144be43c3502fc3a4897b7819402f2bb4f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19d749e5936583948575266765838fedf3699777", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/7n0CRBK7hj4Ov3rIwAAdHIIAAbKNDCFO798KJY4oVfqWnCc\ncJUL1iAmskzMjxLHOoPlVQmaWJihzbRe9U0Yd7Cm8MFbCiCHd1RognlNSnCXTNrD\nd6YGKKj3B1+f/yLBee4ea0UquXmXuxUrUdj8p60QQxwFOxe4u4Kgv+cTKKNz6dac\nXNQ4y4iSZLIHlXy9y0wBorW8nAUsfePQza41hGtPiX2q6LPjDAT8aJSwAx1UdkVI\nZK0FxbmC34Ei0PRYNiDRPekcN0Kk+yyzpoGErAjKm4CjMa7S7BnCHMr40RZQGJEJ\nsS7PQ91KS9/OLdwj4lQ3gdF3ihL+Yb7vfINw2CTpSGhoPbuihXODdHuMUSTcHhY=\n=lgnG\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a71b144be43c3502fc3a4897b7819402f2bb4f4\nparent 76db2e3cc469964b005e4c9dbf715f6dba25d9aa\nparent f5a8d1ab034c48b69eef8ee3618f7eb97d72810f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1577040372 +0100\ncommitter GitHub <noreply@github.com> 1577040372 +0100\n\nRollup merge of #67499 - Centril:mir-match-clean, r=matthewjasper\n\nMisc MIR building cleanups\n\nr? @matthewjasper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19d749e5936583948575266765838fedf3699777", "html_url": "https://github.com/rust-lang/rust/commit/19d749e5936583948575266765838fedf3699777", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19d749e5936583948575266765838fedf3699777/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76db2e3cc469964b005e4c9dbf715f6dba25d9aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/76db2e3cc469964b005e4c9dbf715f6dba25d9aa", "html_url": "https://github.com/rust-lang/rust/commit/76db2e3cc469964b005e4c9dbf715f6dba25d9aa"}, {"sha": "f5a8d1ab034c48b69eef8ee3618f7eb97d72810f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5a8d1ab034c48b69eef8ee3618f7eb97d72810f", "html_url": "https://github.com/rust-lang/rust/commit/f5a8d1ab034c48b69eef8ee3618f7eb97d72810f"}], "stats": {"total": 152, "additions": 49, "deletions": 103}, "files": [{"sha": "aceed09757e7e4e123058dc1bf9ea580ea2fcf3c", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19d749e5936583948575266765838fedf3699777/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d749e5936583948575266765838fedf3699777/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=19d749e5936583948575266765838fedf3699777", "patch": "@@ -33,8 +33,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             this.ast_block_stmts(destination, block, span, stmts, expr,\n                                                  safety_mode)\n                         });\n-                    this.cfg.terminate(unpack!(block_exit), source_info,\n-                                       TerminatorKind::Goto { target: exit_block });\n+                    this.cfg.goto(unpack!(block_exit), source_info, exit_block);\n                     exit_block.unit()\n                 } else {\n                     this.ast_block_stmts(destination, block, span, stmts, expr,"}, {"sha": "0e685486c3f996ad5d60a03fa926d39af07ea257", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/19d749e5936583948575266765838fedf3699777/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d749e5936583948575266765838fedf3699777/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=19d749e5936583948575266765838fedf3699777", "patch": "@@ -85,4 +85,9 @@ impl<'tcx> CFG<'tcx> {\n             kind,\n         });\n     }\n+\n+    /// In the `origin` block, push a `goto -> target` terminator.\n+    pub fn goto(&mut self, origin: BasicBlock, source_info: SourceInfo, target: BasicBlock) {\n+        self.terminate(origin, source_info, TerminatorKind::Goto { target })\n+    }\n }"}, {"sha": "a9fa7cfa04a89de7461d1ec5ac1ef8973cac7bc4", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/19d749e5936583948575266765838fedf3699777/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d749e5936583948575266765838fedf3699777/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=19d749e5936583948575266765838fedf3699777", "patch": "@@ -140,17 +140,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     },\n                 );\n \n-                this.cfg.terminate(\n-                    true_block,\n-                    source_info,\n-                    TerminatorKind::Goto { target: join_block },\n-                );\n-                this.cfg.terminate(\n-                    false_block,\n-                    source_info,\n-                    TerminatorKind::Goto { target: join_block },\n-                );\n-\n+                // Link up both branches:\n+                this.cfg.goto(true_block, source_info, join_block);\n+                this.cfg.goto(false_block, source_info, join_block);\n                 join_block.unit()\n             }\n             ExprKind::Loop { body } => {\n@@ -167,12 +159,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let loop_block = this.cfg.start_new_block();\n                 let exit_block = this.cfg.start_new_block();\n \n-                // start the loop\n-                this.cfg.terminate(\n-                    block,\n-                    source_info,\n-                    TerminatorKind::Goto { target: loop_block },\n-                );\n+                // Start the loop.\n+                this.cfg.goto(block, source_info, loop_block);\n \n                 this.in_breakable_scope(\n                     Some(loop_block),\n@@ -196,11 +184,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         let tmp = this.get_unit_temp();\n                         // Execute the body, branching back to the test.\n                         let body_block_end = unpack!(this.into(&tmp, body_block, body));\n-                        this.cfg.terminate(\n-                            body_block_end,\n-                            source_info,\n-                            TerminatorKind::Goto { target: loop_block },\n-                        );\n+                        this.cfg.goto(body_block_end, source_info, loop_block);\n                     },\n                 );\n                 exit_block.unit()"}, {"sha": "6869930509cbeacd86e27a7e9446ad412d6a87bb", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 26, "deletions": 51, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/19d749e5936583948575266765838fedf3699777/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d749e5936583948575266765838fedf3699777/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=19d749e5936583948575266765838fedf3699777", "patch": "@@ -26,6 +26,7 @@ mod simplify;\n mod test;\n mod util;\n \n+use itertools::Itertools;\n use std::convert::TryFrom;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n@@ -258,11 +259,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             scrutinee_span,\n                             match_scope,\n                         );\n-                        this.cfg.terminate(\n-                            binding_end,\n-                            source_info,\n-                            TerminatorKind::Goto { target: arm_block },\n-                        );\n+                        this.cfg.goto(binding_end, source_info, arm_block);\n                     }\n                 }\n \n@@ -278,11 +275,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let end_block = self.cfg.start_new_block();\n \n         for arm_block in arm_end_blocks {\n-            self.cfg.terminate(\n-                unpack!(arm_block),\n-                outer_source_info,\n-                TerminatorKind::Goto { target: end_block },\n-            );\n+            self.cfg.goto(unpack!(arm_block), outer_source_info, end_block);\n         }\n \n         self.source_scope = outer_source_info.scope;\n@@ -822,45 +815,34 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         );\n         let (matched_candidates, unmatched_candidates) = candidates.split_at_mut(fully_matched);\n \n-        let block: BasicBlock;\n-\n-        if !matched_candidates.is_empty() {\n+        let block: BasicBlock = if !matched_candidates.is_empty() {\n             let otherwise_block = self.select_matched_candidates(\n                 matched_candidates,\n                 start_block,\n                 fake_borrows,\n             );\n \n             if let Some(last_otherwise_block) = otherwise_block {\n-                block = last_otherwise_block\n+                last_otherwise_block\n             } else {\n                 // Any remaining candidates are unreachable.\n                 if unmatched_candidates.is_empty() {\n                     return;\n                 }\n-                block = self.cfg.start_new_block();\n-            };\n+                self.cfg.start_new_block()\n+            }\n         } else {\n-            block = *start_block.get_or_insert_with(|| self.cfg.start_new_block());\n-        }\n+            *start_block.get_or_insert_with(|| self.cfg.start_new_block())\n+        };\n \n         // If there are no candidates that still need testing, we're\n         // done. Since all matches are exhaustive, execution should\n         // never reach this point.\n         if unmatched_candidates.is_empty() {\n             let source_info = self.source_info(span);\n-            if let Some(otherwise) = otherwise_block {\n-                self.cfg.terminate(\n-                    block,\n-                    source_info,\n-                    TerminatorKind::Goto { target: otherwise },\n-                );\n-            } else {\n-                self.cfg.terminate(\n-                    block,\n-                    source_info,\n-                    TerminatorKind::Unreachable,\n-                )\n+            match otherwise_block {\n+                Some(otherwise) => self.cfg.goto(block, source_info, otherwise),\n+                None => self.cfg.terminate(block, source_info, TerminatorKind::Unreachable),\n             }\n             return;\n         }\n@@ -885,7 +867,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// ...\n     ///\n     /// We generate real edges from:\n-    /// * `block` to the prebinding_block of the first pattern,\n+    /// * `start_block` to the `prebinding_block` of the first pattern,\n     /// * the otherwise block of the first pattern to the second pattern,\n     /// * the otherwise block of the third pattern to the a block with an\n     ///   Unreachable terminator.\n@@ -948,32 +930,25 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let first_candidate = &reachable_candidates[0];\n         let first_prebinding_block = first_candidate.pre_binding_block;\n \n+        // `goto -> first_prebinding_block` from the `start_block` if there is one.\n         if let Some(start_block) = *start_block {\n             let source_info = self.source_info(first_candidate.span);\n-            self.cfg.terminate(\n-                start_block,\n-                source_info,\n-                TerminatorKind::Goto { target: first_prebinding_block },\n-            );\n+            self.cfg.goto(start_block, source_info, first_prebinding_block);\n         } else {\n             *start_block = Some(first_prebinding_block);\n         }\n \n-        for window in reachable_candidates.windows(2) {\n-            if let [first_candidate, second_candidate] = window {\n-                let source_info = self.source_info(first_candidate.span);\n-                if let Some(otherwise_block) = first_candidate.otherwise_block {\n-                    self.false_edges(\n-                        otherwise_block,\n-                        second_candidate.pre_binding_block,\n-                        first_candidate.next_candidate_pre_binding_block,\n-                        source_info,\n-                    );\n-                } else {\n-                    bug!(\"candidate other than the last has no guard\");\n-                }\n+        for (first_candidate, second_candidate) in reachable_candidates.iter().tuple_windows() {\n+            let source_info = self.source_info(first_candidate.span);\n+            if let Some(otherwise_block) = first_candidate.otherwise_block {\n+                self.false_edges(\n+                    otherwise_block,\n+                    second_candidate.pre_binding_block,\n+                    first_candidate.next_candidate_pre_binding_block,\n+                    source_info,\n+                );\n             } else {\n-                bug!(\"<[_]>::windows returned incorrectly sized window\");\n+                bug!(\"candidate other than the last has no guard\");\n             }\n         }\n \n@@ -992,8 +967,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         }\n \n-        let last_candidate = reachable_candidates.last().unwrap();\n \n+        let last_candidate = reachable_candidates.last().unwrap();\n         if let Some(otherwise) = last_candidate.otherwise_block {\n             let source_info = self.source_info(last_candidate.span);\n             let block = self.cfg.start_new_block();"}, {"sha": "bdc1bdd5b98552a71ba1fd74db1b766ee7ec79c6", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19d749e5936583948575266765838fedf3699777/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d749e5936583948575266765838fedf3699777/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=19d749e5936583948575266765838fedf3699777", "patch": "@@ -30,7 +30,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Test {\n                     span: match_pair.pattern.span,\n                     kind: TestKind::Switch {\n-                        adt_def: adt_def.clone(),\n+                        adt_def,\n                         variants: BitSet::new_empty(adt_def.variants.len()),\n                     },\n                 }"}, {"sha": "87481d1d69bc7eb80e2ca27cc0238a5d3ec1bd63", "filename": "src/librustc_mir/build/matches/util.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19d749e5936583948575266765838fedf3699777/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d749e5936583948575266765838fedf3699777/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs?ref=19d749e5936583948575266765838fedf3699777", "patch": "@@ -109,15 +109,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     },\n                 );\n             }\n-            _ => {\n-                self.cfg.terminate(\n-                    from_block,\n-                    source_info,\n-                    TerminatorKind::Goto {\n-                        target: real_target\n-                    }\n-                );\n-            }\n+            _ => self.cfg.goto(from_block, source_info, real_target),\n         }\n     }\n }"}, {"sha": "3b85a5d3c911bd10245080ee3e5c45bc2943b834", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/19d749e5936583948575266765838fedf3699777/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d749e5936583948575266765838fedf3699777/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=19d749e5936583948575266765838fedf3699777", "patch": "@@ -606,14 +606,11 @@ where\n         let fn_end = span.shrink_to_hi();\n         let source_info = builder.source_info(fn_end);\n         let return_block = builder.return_block();\n-        builder.cfg.terminate(block, source_info,\n-                              TerminatorKind::Goto { target: return_block });\n-        builder.cfg.terminate(return_block, source_info,\n-                              TerminatorKind::Return);\n+        builder.cfg.goto(block, source_info, return_block);\n+        builder.cfg.terminate(return_block, source_info, TerminatorKind::Return);\n         // Attribute any unreachable codepaths to the function's closing brace\n         if let Some(unreachable_block) = builder.cached_unreachable_block {\n-            builder.cfg.terminate(unreachable_block, source_info,\n-                                  TerminatorKind::Unreachable);\n+            builder.cfg.terminate(unreachable_block, source_info, TerminatorKind::Unreachable);\n         }\n         return_block.unit()\n     }));"}, {"sha": "9c5966263dfc0694c471e608c83dc693d5ed05ab", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/19d749e5936583948575266765838fedf3699777/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d749e5936583948575266765838fedf3699777/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=19d749e5936583948575266765838fedf3699777", "patch": "@@ -564,14 +564,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let source_info = scope.source_info(span);\n             block = match scope.cached_exits.entry((target, region_scope)) {\n                 Entry::Occupied(e) => {\n-                    self.cfg.terminate(block, source_info,\n-                                    TerminatorKind::Goto { target: *e.get() });\n+                    self.cfg.goto(block, source_info, *e.get());\n                     return;\n                 }\n                 Entry::Vacant(v) => {\n                     let b = self.cfg.start_new_block();\n-                    self.cfg.terminate(block, source_info,\n-                                    TerminatorKind::Goto { target: b });\n+                    self.cfg.goto(block, source_info, b);\n                     v.insert(b);\n                     b\n                 }\n@@ -596,8 +594,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             scope = next_scope;\n         }\n \n-        let source_info = self.scopes.source_info(scope_count, span);\n-        self.cfg.terminate(block, source_info, TerminatorKind::Goto { target });\n+        self.cfg.goto(block, self.scopes.source_info(scope_count, span), target);\n     }\n \n     /// Creates a path that performs all required cleanup for dropping a generator.\n@@ -616,14 +613,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         while let Some(scope) = scopes.next() {\n             block = if let Some(b) = scope.cached_generator_drop {\n-                self.cfg.terminate(block, src_info,\n-                                   TerminatorKind::Goto { target: b });\n+                self.cfg.goto(block, src_info, b);\n                 return Some(result);\n             } else {\n                 let b = self.cfg.start_new_block();\n                 scope.cached_generator_drop = Some(b);\n-                self.cfg.terminate(block, src_info,\n-                                   TerminatorKind::Goto { target: b });\n+                self.cfg.goto(block, src_info, b);\n                 b\n             };\n \n@@ -1243,8 +1238,7 @@ fn build_diverge_scope<'tcx>(cfg: &mut CFG<'tcx>,\n                     // block for our StorageDead statements.\n                     let block = cfg.start_new_cleanup_block();\n                     let source_info = SourceInfo { span: DUMMY_SP, scope: source_scope };\n-                    cfg.terminate(block, source_info,\n-                                    TerminatorKind::Goto { target: target });\n+                    cfg.goto(block, source_info, target);\n                     target = block;\n                     target_built_by_us = true;\n                 }"}]}