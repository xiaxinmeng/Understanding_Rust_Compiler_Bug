{"sha": "c1824b4933f7a30b4253116290a0a6b2935eedc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxODI0YjQ5MzNmN2EzMGI0MjUzMTE2MjkwYTBhNmIyOTM1ZWVkYzM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-07T16:21:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-07T16:21:51Z"}, "message": "Merge #6745\n\n6745: Some more proc macro cleanups r=jonas-schievink a=jonas-schievink\n\n* Remove `ProcMacroClient::dummy` and just use `Option<ProcMacroClient>` instead\r\n* Remember the type of proc macros (later allows us to reject using an incorrect macro type)\r\n* Prepare a few internals for procedural attribute macros\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "30b2e506e326af121a716c92d42fc90229179072", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30b2e506e326af121a716c92d42fc90229179072"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1824b4933f7a30b4253116290a0a6b2935eedc3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfzlafCRBK7hj4Ov3rIwAAdHIIAHlRUZu9gdv5B5Qn8TjQn69K\nWkCQ1+VCrmWPaPBXzhLBq0gLPZgFYR8x1W200apsxldwrsYLKXeQ9pLwv9ern0Xt\nRedspqP+tXJwxF+p7WmefnChRzSmyHevL8r0o0onG9tc2OwzgVpsMC5QSZf+6dSL\nhOEyOniHLC3/eg+VK+7AiMJ/N/EmfgnkrmaSKD9Rmr+bH5Zt9rw0rI+6skGKgBS1\nSE7THmzA9Kf7x3nuOeqVsSZScPjp7csDtdugHelFn7CqPZ1xmAKvI4lONq7iPuVj\nEk2RKXXbZCKnl+Q61LsCUkuciD05r89ukz+dOBILz+JxIKiq4bFTGi5j3IzNvog=\n=peI2\n-----END PGP SIGNATURE-----\n", "payload": "tree 30b2e506e326af121a716c92d42fc90229179072\nparent 9a88332452d661d4afea10f0063c893142e08019\nparent 577d5f1c337d5de8719bddcabd3d22a560a11b95\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607358111 +0000\ncommitter GitHub <noreply@github.com> 1607358111 +0000\n\nMerge #6745\n\n6745: Some more proc macro cleanups r=jonas-schievink a=jonas-schievink\n\n* Remove `ProcMacroClient::dummy` and just use `Option<ProcMacroClient>` instead\r\n* Remember the type of proc macros (later allows us to reject using an incorrect macro type)\r\n* Prepare a few internals for procedural attribute macros\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1824b4933f7a30b4253116290a0a6b2935eedc3", "html_url": "https://github.com/rust-lang/rust/commit/c1824b4933f7a30b4253116290a0a6b2935eedc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1824b4933f7a30b4253116290a0a6b2935eedc3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a88332452d661d4afea10f0063c893142e08019", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a88332452d661d4afea10f0063c893142e08019", "html_url": "https://github.com/rust-lang/rust/commit/9a88332452d661d4afea10f0063c893142e08019"}, {"sha": "577d5f1c337d5de8719bddcabd3d22a560a11b95", "url": "https://api.github.com/repos/rust-lang/rust/commits/577d5f1c337d5de8719bddcabd3d22a560a11b95", "html_url": "https://github.com/rust-lang/rust/commit/577d5f1c337d5de8719bddcabd3d22a560a11b95"}], "stats": {"total": 183, "additions": 84, "deletions": 99}, "files": [{"sha": "b73fb909c9eb4f4aac0df8785a3ebcc3d20a2dbc", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1824b4933f7a30b4253116290a0a6b2935eedc3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c1824b4933f7a30b4253116290a0a6b2935eedc3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c1824b4933f7a30b4253116290a0a6b2935eedc3", "patch": "@@ -1187,6 +1187,7 @@ dependencies = [\n name = \"proc_macro_api\"\n version = \"0.0.0\"\n dependencies = [\n+ \"base_db\",\n  \"crossbeam-channel 0.5.0\",\n  \"jod-thread\",\n  \"log\","}, {"sha": "cda5e57dc7125fc9945b64d70bb38b848ef2c173", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=c1824b4933f7a30b4253116290a0a6b2935eedc3", "patch": "@@ -143,9 +143,17 @@ impl CrateDisplayName {\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct ProcMacroId(pub u32);\n \n+#[derive(Copy, Clone, Eq, PartialEq, Debug)]\n+pub enum ProcMacroKind {\n+    CustomDerive,\n+    FuncLike,\n+    Attr,\n+}\n+\n #[derive(Debug, Clone)]\n pub struct ProcMacro {\n     pub name: SmolStr,\n+    pub kind: ProcMacroKind,\n     pub expander: Arc<dyn TokenExpander>,\n }\n \n@@ -198,11 +206,8 @@ impl CrateGraph {\n         display_name: Option<CrateDisplayName>,\n         cfg_options: CfgOptions,\n         env: Env,\n-        proc_macro: Vec<(SmolStr, Arc<dyn tt::TokenExpander>)>,\n+        proc_macro: Vec<ProcMacro>,\n     ) -> CrateId {\n-        let proc_macro =\n-            proc_macro.into_iter().map(|(name, it)| ProcMacro { name, expander: it }).collect();\n-\n         let data = CrateData {\n             root_file_id: file_id,\n             edition,"}, {"sha": "5571af4954035315abfe777889bed01008e9b794", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=c1824b4933f7a30b4253116290a0a6b2935eedc3", "patch": "@@ -14,7 +14,7 @@ pub use crate::{\n     change::Change,\n     input::{\n         CrateData, CrateDisplayName, CrateGraph, CrateId, CrateName, Dependency, Edition, Env,\n-        ProcMacroId, SourceRoot, SourceRootId,\n+        ProcMacro, ProcMacroId, ProcMacroKind, SourceRoot, SourceRootId,\n     },\n };\n pub use salsa;"}, {"sha": "38882d2b68b1f602ead7e59e627e688d1597e066", "filename": "crates/hir_expand/src/proc_macro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs?ref=c1824b4933f7a30b4253116290a0a6b2935eedc3", "patch": "@@ -26,7 +26,6 @@ impl ProcMacroExpander {\n \n     pub fn dummy(krate: CrateId) -> Self {\n         // FIXME: Should store the name for better errors\n-        // FIXME: I think this is the second layer of \"dummy\" expansion, we should reduce that\n         Self { krate, proc_macro_id: None }\n     }\n "}, {"sha": "1af2bbca782b163a9ac23430286cb0ac89ef0ac6", "filename": "crates/proc_macro_api/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Fproc_macro_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Fproc_macro_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2FCargo.toml?ref=c1824b4933f7a30b4253116290a0a6b2935eedc3", "patch": "@@ -17,3 +17,4 @@ crossbeam-channel = \"0.5.0\"\n jod-thread = \"0.1.1\"\n \n tt = { path = \"../tt\", version = \"0.0.0\" }\n+base_db = { path = \"../base_db\", version = \"0.0.0\" }"}, {"sha": "0d061fd536b2a59005dafaadd265c68b28b2c354", "filename": "crates/proc_macro_api/src/lib.rs", "status": "modified", "additions": 39, "deletions": 47, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Flib.rs?ref=c1824b4933f7a30b4253116290a0a6b2935eedc3", "patch": "@@ -16,14 +16,15 @@ use std::{\n     sync::Arc,\n };\n \n+use base_db::ProcMacro;\n use tt::{SmolStr, Subtree};\n \n use crate::process::{ProcMacroProcessSrv, ProcMacroProcessThread};\n \n pub use rpc::{ExpansionResult, ExpansionTask, ListMacrosResult, ListMacrosTask, ProcMacroKind};\n \n #[derive(Debug, Clone)]\n-pub struct ProcMacroProcessExpander {\n+struct ProcMacroProcessExpander {\n     process: Arc<ProcMacroProcessSrv>,\n     dylib_path: PathBuf,\n     name: SmolStr,\n@@ -42,21 +43,24 @@ impl tt::TokenExpander for ProcMacroProcessExpander {\n     fn expand(\n         &self,\n         subtree: &Subtree,\n-        _attr: Option<&Subtree>,\n+        attr: Option<&Subtree>,\n     ) -> Result<Subtree, tt::ExpansionError> {\n-        self.process.custom_derive(&self.dylib_path, subtree, &self.name)\n-    }\n-}\n+        let task = ExpansionTask {\n+            macro_body: subtree.clone(),\n+            macro_name: self.name.to_string(),\n+            attributes: attr.cloned(),\n+            lib: self.dylib_path.to_path_buf(),\n+        };\n \n-#[derive(Debug)]\n-enum ProcMacroClientKind {\n-    Process { process: Arc<ProcMacroProcessSrv>, thread: ProcMacroProcessThread },\n-    Dummy,\n+        let result: ExpansionResult = self.process.send_task(msg::Request::ExpansionMacro(task))?;\n+        Ok(result.expansion)\n+    }\n }\n \n #[derive(Debug)]\n pub struct ProcMacroClient {\n-    kind: ProcMacroClientKind,\n+    process: Arc<ProcMacroProcessSrv>,\n+    thread: ProcMacroProcessThread,\n }\n \n impl ProcMacroClient {\n@@ -65,47 +69,35 @@ impl ProcMacroClient {\n         args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n     ) -> io::Result<ProcMacroClient> {\n         let (thread, process) = ProcMacroProcessSrv::run(process_path, args)?;\n-        Ok(ProcMacroClient {\n-            kind: ProcMacroClientKind::Process { process: Arc::new(process), thread },\n-        })\n+        Ok(ProcMacroClient { process: Arc::new(process), thread })\n     }\n \n-    pub fn dummy() -> ProcMacroClient {\n-        ProcMacroClient { kind: ProcMacroClientKind::Dummy }\n-    }\n+    pub fn by_dylib_path(&self, dylib_path: &Path) -> Vec<ProcMacro> {\n+        let macros = match self.process.find_proc_macros(dylib_path) {\n+            Err(err) => {\n+                eprintln!(\"Failed to find proc macros. Error: {:#?}\", err);\n+                return vec![];\n+            }\n+            Ok(macros) => macros,\n+        };\n \n-    pub fn by_dylib_path(&self, dylib_path: &Path) -> Vec<(SmolStr, Arc<dyn tt::TokenExpander>)> {\n-        match &self.kind {\n-            ProcMacroClientKind::Dummy => vec![],\n-            ProcMacroClientKind::Process { process, .. } => {\n-                let macros = match process.find_proc_macros(dylib_path) {\n-                    Err(err) => {\n-                        eprintln!(\"Failed to find proc macros. Error: {:#?}\", err);\n-                        return vec![];\n-                    }\n-                    Ok(macros) => macros,\n+        macros\n+            .into_iter()\n+            .map(|(name, kind)| {\n+                let name = SmolStr::new(&name);\n+                let kind = match kind {\n+                    ProcMacroKind::CustomDerive => base_db::ProcMacroKind::CustomDerive,\n+                    ProcMacroKind::FuncLike => base_db::ProcMacroKind::FuncLike,\n+                    ProcMacroKind::Attr => base_db::ProcMacroKind::Attr,\n                 };\n+                let expander: Arc<dyn tt::TokenExpander> = Arc::new(ProcMacroProcessExpander {\n+                    process: self.process.clone(),\n+                    name: name.clone(),\n+                    dylib_path: dylib_path.into(),\n+                });\n \n-                macros\n-                    .into_iter()\n-                    .filter_map(|(name, kind)| {\n-                        match kind {\n-                            ProcMacroKind::CustomDerive | ProcMacroKind::FuncLike => {\n-                                let name = SmolStr::new(&name);\n-                                let expander: Arc<dyn tt::TokenExpander> =\n-                                    Arc::new(ProcMacroProcessExpander {\n-                                        process: process.clone(),\n-                                        name: name.clone(),\n-                                        dylib_path: dylib_path.into(),\n-                                    });\n-                                Some((name, expander))\n-                            }\n-                            // FIXME: Attribute macro are currently unsupported.\n-                            ProcMacroKind::Attr => None,\n-                        }\n-                    })\n-                    .collect()\n-            }\n-        }\n+                ProcMacro { name, kind, expander }\n+            })\n+            .collect()\n     }\n }"}, {"sha": "d68723ada36e82c1ea3fac4bdb7af6df9dfdf087", "filename": "crates/proc_macro_api/src/process.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs?ref=c1824b4933f7a30b4253116290a0a6b2935eedc3", "patch": "@@ -10,11 +10,10 @@ use std::{\n };\n \n use crossbeam_channel::{bounded, Receiver, Sender};\n-use tt::Subtree;\n \n use crate::{\n     msg::{ErrorCode, Message, Request, Response, ResponseError},\n-    rpc::{ExpansionResult, ExpansionTask, ListMacrosResult, ListMacrosTask, ProcMacroKind},\n+    rpc::{ListMacrosResult, ListMacrosTask, ProcMacroKind},\n };\n \n #[derive(Debug, Default)]\n@@ -58,23 +57,6 @@ impl ProcMacroProcessSrv {\n         Ok(result.macros)\n     }\n \n-    pub(crate) fn custom_derive(\n-        &self,\n-        dylib_path: &Path,\n-        subtree: &Subtree,\n-        derive_name: &str,\n-    ) -> Result<Subtree, tt::ExpansionError> {\n-        let task = ExpansionTask {\n-            macro_body: subtree.clone(),\n-            macro_name: derive_name.to_string(),\n-            attributes: None,\n-            lib: dylib_path.to_path_buf(),\n-        };\n-\n-        let result: ExpansionResult = self.send_task(Request::ExpansionMacro(task))?;\n-        Ok(result.expansion)\n-    }\n-\n     pub(crate) fn send_task<R>(&self, req: Request) -> Result<R, tt::ExpansionError>\n     where\n         R: TryFrom<Response, Error = &'static str>,"}, {"sha": "b85f92eeada9dc4bbd705df08c484d06b8a2dedd", "filename": "crates/proc_macro_api/src/rpc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Frpc.rs?ref=c1824b4933f7a30b4253116290a0a6b2935eedc3", "patch": "@@ -19,7 +19,7 @@ pub struct ListMacrosTask {\n     pub lib: PathBuf,\n }\n \n-#[derive(Clone, Eq, PartialEq, Debug, Serialize, Deserialize)]\n+#[derive(Copy, Clone, Eq, PartialEq, Debug, Serialize, Deserialize)]\n pub enum ProcMacroKind {\n     CustomDerive,\n     FuncLike,"}, {"sha": "ab5cbae11ea74cd4ce740ab949ddda45bdb646bb", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=c1824b4933f7a30b4253116290a0a6b2935eedc3", "patch": "@@ -2,10 +2,14 @@\n //! metadata` or `rust-project.json`) into representation stored in the salsa\n //! database -- `CrateGraph`.\n \n-use std::{fmt, fs, path::Component, process::Command};\n+use std::{\n+    fmt, fs,\n+    path::{Component, Path},\n+    process::Command,\n+};\n \n use anyhow::{Context, Result};\n-use base_db::{CrateDisplayName, CrateGraph, CrateId, CrateName, Edition, Env, FileId};\n+use base_db::{CrateDisplayName, CrateGraph, CrateId, CrateName, Edition, Env, FileId, ProcMacro};\n use cfg::CfgOptions;\n use paths::{AbsPath, AbsPathBuf};\n use proc_macro_api::ProcMacroClient;\n@@ -194,15 +198,20 @@ impl ProjectWorkspace {\n     pub fn to_crate_graph(\n         &self,\n         target: Option<&str>,\n-        proc_macro_client: &ProcMacroClient,\n+        proc_macro_client: Option<&ProcMacroClient>,\n         load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     ) -> CrateGraph {\n+        let proc_macro_loader = |path: &Path| match proc_macro_client {\n+            Some(client) => client.by_dylib_path(path),\n+            None => Vec::new(),\n+        };\n+\n         let mut crate_graph = match self {\n             ProjectWorkspace::Json { project, sysroot } => {\n-                project_json_to_crate_graph(target, proc_macro_client, load, project, sysroot)\n+                project_json_to_crate_graph(target, &proc_macro_loader, load, project, sysroot)\n             }\n             ProjectWorkspace::Cargo { cargo, sysroot, rustc } => {\n-                cargo_to_crate_graph(target, proc_macro_client, load, cargo, sysroot, rustc)\n+                cargo_to_crate_graph(target, &proc_macro_loader, load, cargo, sysroot, rustc)\n             }\n         };\n         if crate_graph.patch_cfg_if() {\n@@ -216,7 +225,7 @@ impl ProjectWorkspace {\n \n fn project_json_to_crate_graph(\n     target: Option<&str>,\n-    proc_macro_client: &ProcMacroClient,\n+    proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     project: &ProjectJson,\n     sysroot: &Option<Sysroot>,\n@@ -236,8 +245,7 @@ fn project_json_to_crate_graph(\n         })\n         .map(|(crate_id, krate, file_id)| {\n             let env = krate.env.clone().into_iter().collect();\n-            let proc_macro =\n-                krate.proc_macro_dylib_path.clone().map(|it| proc_macro_client.by_dylib_path(&it));\n+            let proc_macro = krate.proc_macro_dylib_path.clone().map(|it| proc_macro_loader(&it));\n \n             let target = krate.target.as_deref().or(target);\n             let target_cfgs =\n@@ -279,7 +287,7 @@ fn project_json_to_crate_graph(\n \n fn cargo_to_crate_graph(\n     target: Option<&str>,\n-    proc_macro_client: &ProcMacroClient,\n+    proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     cargo: &CargoWorkspace,\n     sysroot: &Sysroot,\n@@ -309,7 +317,7 @@ fn cargo_to_crate_graph(\n                     &mut crate_graph,\n                     &cargo[pkg],\n                     &cfg_options,\n-                    proc_macro_client,\n+                    proc_macro_loader,\n                     file_id,\n                 );\n                 if cargo[tgt].kind == TargetKind::Lib {\n@@ -385,7 +393,7 @@ fn cargo_to_crate_graph(\n                         &mut crate_graph,\n                         &rustc_workspace[pkg],\n                         &cfg_options,\n-                        proc_macro_client,\n+                        proc_macro_loader,\n                         file_id,\n                     );\n                     pkg_to_lib_crate.insert(pkg, crate_id);\n@@ -433,7 +441,7 @@ fn add_target_crate_root(\n     crate_graph: &mut CrateGraph,\n     pkg: &cargo_workspace::PackageData,\n     cfg_options: &CfgOptions,\n-    proc_macro_client: &ProcMacroClient,\n+    proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n     file_id: FileId,\n ) -> CrateId {\n     let edition = pkg.edition;\n@@ -452,11 +460,8 @@ fn add_target_crate_root(\n             env.set(\"OUT_DIR\", out_dir);\n         }\n     }\n-    let proc_macro = pkg\n-        .proc_macro_dylib_path\n-        .as_ref()\n-        .map(|it| proc_macro_client.by_dylib_path(&it))\n-        .unwrap_or_default();\n+    let proc_macro =\n+        pkg.proc_macro_dylib_path.as_ref().map(|it| proc_macro_loader(&it)).unwrap_or_default();\n \n     let display_name = CrateDisplayName::from_canonical_name(pkg.name.clone());\n     let crate_id = crate_graph.add_crate_root("}, {"sha": "d51f4a93ad018df8909596bac9a007adb4e6d5a5", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=c1824b4933f7a30b4253116290a0a6b2935eedc3", "patch": "@@ -33,12 +33,12 @@ pub fn load_cargo(\n \n     let proc_macro_client = if with_proc_macro {\n         let path = std::env::current_exe()?;\n-        ProcMacroClient::extern_process(path, &[\"proc-macro\"]).unwrap()\n+        Some(ProcMacroClient::extern_process(path, &[\"proc-macro\"]).unwrap())\n     } else {\n-        ProcMacroClient::dummy()\n+        None\n     };\n \n-    let crate_graph = ws.to_crate_graph(None, &proc_macro_client, &mut |path: &AbsPath| {\n+    let crate_graph = ws.to_crate_graph(None, proc_macro_client.as_ref(), &mut |path: &AbsPath| {\n         let contents = loader.load_sync(path);\n         let path = vfs::VfsPath::from(path.to_path_buf());\n         vfs.set_file_contents(path.clone(), contents);"}, {"sha": "a27495d0d80a3ba7fc5a6b185e4e615e5f379543", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=c1824b4933f7a30b4253116290a0a6b2935eedc3", "patch": "@@ -75,7 +75,7 @@ pub(crate) struct GlobalState {\n     pub(crate) shutdown_requested: bool,\n     pub(crate) status: Status,\n     pub(crate) source_root_config: SourceRootConfig,\n-    pub(crate) proc_macro_client: ProcMacroClient,\n+    pub(crate) proc_macro_client: Option<ProcMacroClient>,\n     pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n     latest_requests: Arc<RwLock<LatestRequests>>,\n }\n@@ -127,7 +127,7 @@ impl GlobalState {\n             shutdown_requested: false,\n             status: Status::default(),\n             source_root_config: SourceRootConfig::default(),\n-            proc_macro_client: ProcMacroClient::dummy(),\n+            proc_macro_client: None,\n             workspaces: Arc::new(Vec::new()),\n             latest_requests: Default::default(),\n         }"}, {"sha": "79e39e3a5986ec3ed67fe22c63605953b532946d", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1824b4933f7a30b4253116290a0a6b2935eedc3/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=c1824b4933f7a30b4253116290a0a6b2935eedc3", "patch": "@@ -171,16 +171,16 @@ impl GlobalState {\n         let project_folders = ProjectFolders::new(&workspaces);\n \n         self.proc_macro_client = match &self.config.proc_macro_srv {\n-            None => ProcMacroClient::dummy(),\n+            None => None,\n             Some((path, args)) => match ProcMacroClient::extern_process(path.into(), args) {\n-                Ok(it) => it,\n+                Ok(it) => Some(it),\n                 Err(err) => {\n                     log::error!(\n                         \"Failed to run proc_macro_srv from path {}, error: {:?}\",\n                         path.display(),\n                         err\n                     );\n-                    ProcMacroClient::dummy()\n+                    None\n                 }\n             },\n         };\n@@ -212,7 +212,7 @@ impl GlobalState {\n             for ws in workspaces.iter() {\n                 crate_graph.extend(ws.to_crate_graph(\n                     self.config.cargo.target.as_deref(),\n-                    &self.proc_macro_client,\n+                    self.proc_macro_client.as_ref(),\n                     &mut load,\n                 ));\n             }"}]}