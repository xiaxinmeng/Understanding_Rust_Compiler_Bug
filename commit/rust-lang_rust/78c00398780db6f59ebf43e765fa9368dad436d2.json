{"sha": "78c00398780db6f59ebf43e765fa9368dad436d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YzAwMzk4NzgwZGI2ZjU5ZWJmNDNlNzY1ZmE5MzY4ZGFkNDM2ZDI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-06T07:52:09Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-13T09:40:28Z"}, "message": "Expand generated test harnesses and macro registries.", "tree": {"sha": "64dbe7e0baeb32bbffef03c223adaa559a78808d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64dbe7e0baeb32bbffef03c223adaa559a78808d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78c00398780db6f59ebf43e765fa9368dad436d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78c00398780db6f59ebf43e765fa9368dad436d2", "html_url": "https://github.com/rust-lang/rust/commit/78c00398780db6f59ebf43e765fa9368dad436d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78c00398780db6f59ebf43e765fa9368dad436d2/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3c2dca3539e6edc745f9c91898cb97d281865c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3c2dca3539e6edc745f9c91898cb97d281865c1", "html_url": "https://github.com/rust-lang/rust/commit/f3c2dca3539e6edc745f9c91898cb97d281865c1"}], "stats": {"total": 55, "additions": 27, "deletions": 28}, "files": [{"sha": "36e9fccdf5fd8d3783cb64792a0ec29644e1d97f", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78c00398780db6f59ebf43e765fa9368dad436d2/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78c00398780db6f59ebf43e765fa9368dad436d2/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=78c00398780db6f59ebf43e765fa9368dad436d2", "patch": "@@ -690,6 +690,7 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n \n     krate = time(time_passes, \"maybe building test harness\", || {\n         syntax::test::modify_for_testing(&sess.parse_sess,\n+                                         &mut resolver,\n                                          sess.opts.test,\n                                          krate,\n                                          sess.diagnostic())\n@@ -700,6 +701,7 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n         let is_rustc_macro_crate = crate_types.contains(&config::CrateTypeRustcMacro);\n         let num_crate_types = crate_types.len();\n         syntax_ext::rustc_macro_registrar::modify(&sess.parse_sess,\n+                                                  &mut resolver,\n                                                   krate,\n                                                   is_rustc_macro_crate,\n                                                   num_crate_types,"}, {"sha": "46c9a4606ccef24ba4c50464754733916718fdd5", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/78c00398780db6f59ebf43e765fa9368dad436d2/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78c00398780db6f59ebf43e765fa9368dad436d2/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=78c00398780db6f59ebf43e765fa9368dad436d2", "patch": "@@ -28,7 +28,7 @@ use errors;\n use errors::snippet::{SnippetData};\n use config;\n use entry::{self, EntryPointType};\n-use ext::base::{ExtCtxt, DummyResolver};\n+use ext::base::{ExtCtxt, Resolver};\n use ext::build::AstBuilder;\n use ext::expand::ExpansionConfig;\n use fold::Folder;\n@@ -70,6 +70,7 @@ struct TestCtxt<'a> {\n // Traverse the crate, collecting all the test functions, eliding any\n // existing main functions, and synthesizing a main test harness\n pub fn modify_for_testing(sess: &ParseSess,\n+                          resolver: &mut Resolver,\n                           should_test: bool,\n                           krate: ast::Crate,\n                           span_diagnostic: &errors::Handler) -> ast::Crate {\n@@ -82,7 +83,7 @@ pub fn modify_for_testing(sess: &ParseSess,\n                                            \"reexport_test_harness_main\");\n \n     if should_test {\n-        generate_test_harness(sess, reexport_test_harness_main, krate, span_diagnostic)\n+        generate_test_harness(sess, resolver, reexport_test_harness_main, krate, span_diagnostic)\n     } else {\n         krate\n     }\n@@ -248,41 +249,39 @@ fn mk_reexport_mod(cx: &mut TestCtxt, tests: Vec<ast::Ident>,\n     }).chain(tested_submods.into_iter().map(|(r, sym)| {\n         let path = cx.ext_cx.path(DUMMY_SP, vec![super_, r, sym]);\n         cx.ext_cx.item_use_simple_(DUMMY_SP, ast::Visibility::Public, r, path)\n-    }));\n+    })).collect();\n \n     let reexport_mod = ast::Mod {\n         inner: DUMMY_SP,\n-        items: items.collect(),\n+        items: items,\n     };\n \n     let sym = token::gensym_ident(\"__test_reexports\");\n-    let it = P(ast::Item {\n+    let it = cx.ext_cx.expander().fold_item(P(ast::Item {\n         ident: sym.clone(),\n         attrs: Vec::new(),\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ItemKind::Mod(reexport_mod),\n         vis: ast::Visibility::Public,\n         span: DUMMY_SP,\n-    });\n+    })).pop().unwrap();\n \n     (it, sym)\n }\n \n fn generate_test_harness(sess: &ParseSess,\n+                         resolver: &mut Resolver,\n                          reexport_test_harness_main: Option<InternedString>,\n                          krate: ast::Crate,\n                          sd: &errors::Handler) -> ast::Crate {\n     // Remove the entry points\n     let mut cleaner = EntryPointCleaner { depth: 0 };\n     let krate = cleaner.fold_crate(krate);\n \n-    let mut resolver = DummyResolver;\n     let mut cx: TestCtxt = TestCtxt {\n         sess: sess,\n         span_diagnostic: sd,\n-        ext_cx: ExtCtxt::new(sess, vec![],\n-                             ExpansionConfig::default(\"test\".to_string()),\n-                             &mut resolver),\n+        ext_cx: ExtCtxt::new(sess, vec![], ExpansionConfig::default(\"test\".to_string()), resolver),\n         path: Vec::new(),\n         testfns: Vec::new(),\n         reexport_test_harness_main: reexport_test_harness_main,\n@@ -511,16 +510,17 @@ fn mk_test_module(cx: &mut TestCtxt) -> (P<ast::Item>, Option<P<ast::Item>>) {\n         items: vec![import, mainfn, tests],\n     };\n     let item_ = ast::ItemKind::Mod(testmod);\n-\n     let mod_ident = token::gensym_ident(\"__test\");\n-    let item = P(ast::Item {\n+\n+    let mut expander = cx.ext_cx.expander();\n+    let item = expander.fold_item(P(ast::Item {\n         id: ast::DUMMY_NODE_ID,\n         ident: mod_ident,\n         attrs: vec![],\n         node: item_,\n         vis: ast::Visibility::Public,\n         span: DUMMY_SP,\n-    });\n+    })).pop().unwrap();\n     let reexport = cx.reexport_test_harness_main.as_ref().map(|s| {\n         // building `use <ident> = __test::main`\n         let reexport_ident = token::str_to_ident(&s);\n@@ -529,14 +529,14 @@ fn mk_test_module(cx: &mut TestCtxt) -> (P<ast::Item>, Option<P<ast::Item>>) {\n             nospan(ast::ViewPathSimple(reexport_ident,\n                                        path_node(vec![mod_ident, token::str_to_ident(\"main\")])));\n \n-        P(ast::Item {\n+        expander.fold_item(P(ast::Item {\n             id: ast::DUMMY_NODE_ID,\n             ident: keywords::Invalid.ident(),\n             attrs: vec![],\n             node: ast::ItemKind::Use(P(use_path)),\n             vis: ast::Visibility::Inherited,\n             span: DUMMY_SP\n-        })\n+        })).pop().unwrap()\n     });\n \n     debug!(\"Synthetic test module:\\n{}\\n\", pprust::item_to_string(&item));"}, {"sha": "c07e79179398e4d6f4e60f08a2768a714d603b86", "filename": "src/libsyntax_ext/rustc_macro_registrar.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/78c00398780db6f59ebf43e765fa9368dad436d2/src%2Flibsyntax_ext%2Frustc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78c00398780db6f59ebf43e765fa9368dad436d2/src%2Flibsyntax_ext%2Frustc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Frustc_macro_registrar.rs?ref=78c00398780db6f59ebf43e765fa9368dad436d2", "patch": "@@ -13,12 +13,13 @@ use std::mem;\n use errors;\n use syntax::ast::{self, Ident, NodeId};\n use syntax::codemap::{ExpnInfo, NameAndSpan, MacroAttribute};\n-use syntax::ext::base::{ExtCtxt, DummyResolver};\n+use syntax::ext::base::ExtCtxt;\n use syntax::ext::build::AstBuilder;\n use syntax::ext::expand::ExpansionConfig;\n use syntax::parse::ParseSess;\n use syntax::parse::token::{self, InternedString};\n use syntax::feature_gate::Features;\n+use syntax::fold::Folder;\n use syntax::ptr::P;\n use syntax_pos::{Span, DUMMY_SP};\n use syntax::visit::{self, Visitor};\n@@ -39,16 +40,14 @@ struct CollectCustomDerives<'a> {\n }\n \n pub fn modify(sess: &ParseSess,\n+              resolver: &mut ::syntax::ext::base::Resolver,\n               mut krate: ast::Crate,\n               is_rustc_macro_crate: bool,\n               num_crate_types: usize,\n               handler: &errors::Handler,\n               features: &Features) -> ast::Crate {\n-    let mut loader = DummyResolver;\n-    let mut cx = ExtCtxt::new(sess,\n-                              Vec::new(),\n-                              ExpansionConfig::default(\"rustc_macro\".to_string()),\n-                              &mut loader);\n+    let ecfg = ExpansionConfig::default(\"rustc_macro\".to_string());\n+    let mut cx = ExtCtxt::new(sess, Vec::new(), ecfg, resolver);\n \n     let mut collect = CollectCustomDerives {\n         derives: Vec::new(),\n@@ -268,13 +267,11 @@ fn mk_registrar(cx: &mut ExtCtxt,\n         i.vis = ast::Visibility::Public;\n         i\n     });\n-    let module = cx.item_mod(span,\n-                             span,\n-                             ast::Ident::with_empty_ctxt(token::gensym(\"registrar\")),\n-                             Vec::new(),\n-                             vec![krate, func]);\n-    module.map(|mut i| {\n+    let ident = ast::Ident::with_empty_ctxt(token::gensym(\"registrar\"));\n+    let module = cx.item_mod(span, span, ident, Vec::new(), vec![krate, func]).map(|mut i| {\n         i.vis = ast::Visibility::Public;\n         i\n-    })\n+    });\n+\n+    cx.expander().fold_item(module).pop().unwrap()\n }"}]}