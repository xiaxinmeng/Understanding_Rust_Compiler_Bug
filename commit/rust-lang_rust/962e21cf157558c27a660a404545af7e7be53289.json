{"sha": "962e21cf157558c27a660a404545af7e7be53289", "node_id": "C_kwDOAAsO6NoAKDk2MmUyMWNmMTU3NTU4YzI3YTY2MGE0MDQ1NDVhZjdlN2JlNTMyODk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-27T14:37:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-27T14:37:54Z"}, "message": "Auto merge of #7875 - mbStavola:unit-hash, r=xFrednet\n\nAdd unit-hash lint\n\nchangelog: [`unit_hash`] Add lint for hashing unit values\n\nThis will lint for situations where the end user is attempting to hash a unit value (`()`), as the implementation in `std` simply [does nothing][impl]. Closes #7159 .\n\nExample:\n\n```rust\n().hash(&mut state);\n\n// Should (probably) be replaced with:\n0_u8.hash(&mut state);\n```\n\n[impl]: https://github.com/rust-lang/rust/blob/a5f164faad4a2fed606b8160fd7ecd2d5cbba381/library/core/src/hash/mod.rs#L656", "tree": {"sha": "4c5a12defb3a805fe661ea4aa19c1e0fab98382f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c5a12defb3a805fe661ea4aa19c1e0fab98382f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/962e21cf157558c27a660a404545af7e7be53289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/962e21cf157558c27a660a404545af7e7be53289", "html_url": "https://github.com/rust-lang/rust/commit/962e21cf157558c27a660a404545af7e7be53289", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/962e21cf157558c27a660a404545af7e7be53289/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "444ef3e4d5f794baf0ee063ca2bfe52971b73b2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/444ef3e4d5f794baf0ee063ca2bfe52971b73b2f", "html_url": "https://github.com/rust-lang/rust/commit/444ef3e4d5f794baf0ee063ca2bfe52971b73b2f"}, {"sha": "36d4a4ea82b235e65d5ec32bf8f7a81438cf0e10", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d4a4ea82b235e65d5ec32bf8f7a81438cf0e10", "html_url": "https://github.com/rust-lang/rust/commit/36d4a4ea82b235e65d5ec32bf8f7a81438cf0e10"}], "stats": {"total": 137, "additions": 137, "deletions": 0}, "files": [{"sha": "267bc07d8fa6169503adf0d819b89c28fe4b33fa", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/962e21cf157558c27a660a404545af7e7be53289/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/962e21cf157558c27a660a404545af7e7be53289/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=962e21cf157558c27a660a404545af7e7be53289", "patch": "@@ -3194,6 +3194,7 @@ Released 2018-09-13\n [`uninit_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#uninit_vec\n [`unit_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_arg\n [`unit_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_cmp\n+[`unit_hash`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_hash\n [`unit_return_expecting_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_return_expecting_ord\n [`unnecessary_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n [`unnecessary_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_filter_map"}, {"sha": "4e123f27ec0a66b01095d4dc9a65aa9943840b43", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/962e21cf157558c27a660a404545af7e7be53289/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/962e21cf157558c27a660a404545af7e7be53289/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=962e21cf157558c27a660a404545af7e7be53289", "patch": "@@ -283,6 +283,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n     LintId::of(unicode::INVISIBLE_CHARACTERS),\n     LintId::of(uninit_vec::UNINIT_VEC),\n+    LintId::of(unit_hash::UNIT_HASH),\n     LintId::of(unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n     LintId::of(unit_types::UNIT_ARG),\n     LintId::of(unit_types::UNIT_CMP),"}, {"sha": "4217fd3a3ea72c04af802f688f39d34f1f501c7a", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/962e21cf157558c27a660a404545af7e7be53289/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/962e21cf157558c27a660a404545af7e7be53289/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=962e21cf157558c27a660a404545af7e7be53289", "patch": "@@ -64,6 +64,7 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n     LintId::of(unicode::INVISIBLE_CHARACTERS),\n     LintId::of(uninit_vec::UNINIT_VEC),\n+    LintId::of(unit_hash::UNIT_HASH),\n     LintId::of(unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n     LintId::of(unit_types::UNIT_CMP),\n     LintId::of(unnamed_address::FN_ADDRESS_COMPARISONS),"}, {"sha": "249bf77a8f288821e279ba51d71846b6ecdf47c9", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/962e21cf157558c27a660a404545af7e7be53289/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/962e21cf157558c27a660a404545af7e7be53289/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=962e21cf157558c27a660a404545af7e7be53289", "patch": "@@ -477,6 +477,7 @@ store.register_lints(&[\n     unicode::NON_ASCII_LITERAL,\n     unicode::UNICODE_NOT_NFC,\n     uninit_vec::UNINIT_VEC,\n+    unit_hash::UNIT_HASH,\n     unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD,\n     unit_types::LET_UNIT_VALUE,\n     unit_types::UNIT_ARG,"}, {"sha": "fc15c591623e6cd8c063c380a8bedb1551f85454", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/962e21cf157558c27a660a404545af7e7be53289/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/962e21cf157558c27a660a404545af7e7be53289/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=962e21cf157558c27a660a404545af7e7be53289", "patch": "@@ -364,6 +364,7 @@ mod undocumented_unsafe_blocks;\n mod undropped_manually_drops;\n mod unicode;\n mod uninit_vec;\n+mod unit_hash;\n mod unit_return_expecting_ord;\n mod unit_types;\n mod unnamed_address;\n@@ -522,6 +523,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(collapsible_match::CollapsibleMatch));\n     store.register_late_pass(|| Box::new(unicode::Unicode));\n     store.register_late_pass(|| Box::new(uninit_vec::UninitVec));\n+    store.register_late_pass(|| Box::new(unit_hash::UnitHash));\n     store.register_late_pass(|| Box::new(unit_return_expecting_ord::UnitReturnExpectingOrd));\n     store.register_late_pass(|| Box::new(strings::StringAdd));\n     store.register_late_pass(|| Box::new(implicit_return::ImplicitReturn));"}, {"sha": "a3a3f2d41c7323354af7c50b4b7b46ffecd32879", "filename": "clippy_lints/src/unit_hash.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/962e21cf157558c27a660a404545af7e7be53289/clippy_lints%2Fsrc%2Funit_hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/962e21cf157558c27a660a404545af7e7be53289/clippy_lints%2Fsrc%2Funit_hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_hash.rs?ref=962e21cf157558c27a660a404545af7e7be53289", "patch": "@@ -0,0 +1,77 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Detects `().hash(_)`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Hashing a unit value doesn't do anything as the implementation of `Hash` for `()` is a no-op.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # use std::hash::Hash;\n+    /// # use std::collections::hash_map::DefaultHasher;\n+    /// # enum Foo { Empty, WithValue(u8) }\n+    /// # use Foo::*;\n+    /// # let mut state = DefaultHasher::new();\n+    /// # let my_enum = Foo::Empty;\n+    /// match my_enum {\n+    /// \tEmpty => ().hash(&mut state),\n+    /// \tWithValue(x) => x.hash(&mut state),\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::hash::Hash;\n+    /// # use std::collections::hash_map::DefaultHasher;\n+    /// # enum Foo { Empty, WithValue(u8) }\n+    /// # use Foo::*;\n+    /// # let mut state = DefaultHasher::new();\n+    /// # let my_enum = Foo::Empty;\n+    /// match my_enum {\n+    /// \tEmpty => 0_u8.hash(&mut state),\n+    /// \tWithValue(x) => x.hash(&mut state),\n+    /// }\n+    /// ```\n+    pub UNIT_HASH,\n+    correctness,\n+    \"hashing a unit value, which does nothing\"\n+}\n+declare_lint_pass!(UnitHash => [UNIT_HASH]);\n+\n+impl LateLintPass<'tcx> for UnitHash {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if_chain! {\n+            if let ExprKind::MethodCall(name_ident, _, args, _) = &expr.kind;\n+            if name_ident.ident.name == sym::hash;\n+            if let [recv, state_param] = args;\n+            if cx.typeck_results().expr_ty(recv).is_unit();\n+            then {\n+                span_lint_and_then(\n+                    cx,\n+                    UNIT_HASH,\n+                    expr.span,\n+                    \"this call to `hash` on the unit type will do nothing\",\n+                    |diag| {\n+                        diag.span_suggestion(\n+                            expr.span,\n+                            \"remove the call to `hash` or consider using\",\n+                            format!(\n+                                \"0_u8.hash({})\",\n+                                snippet(cx, state_param.span, \"..\"),\n+                            ),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                        diag.note(\"the implementation of `Hash` for `()` is a no-op\");\n+                    }\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "989916c239bad090ad71a54dcb6109220da07b3f", "filename": "tests/ui/unit_hash.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/962e21cf157558c27a660a404545af7e7be53289/tests%2Fui%2Funit_hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/962e21cf157558c27a660a404545af7e7be53289/tests%2Fui%2Funit_hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_hash.rs?ref=962e21cf157558c27a660a404545af7e7be53289", "patch": "@@ -0,0 +1,27 @@\n+#![warn(clippy::unit_hash)]\n+\n+use std::collections::hash_map::DefaultHasher;\n+use std::hash::Hash;\n+\n+enum Foo {\n+    Empty,\n+    WithValue(u8),\n+}\n+\n+fn do_nothing() {}\n+\n+fn main() {\n+    let mut state = DefaultHasher::new();\n+    let my_enum = Foo::Empty;\n+\n+    match my_enum {\n+        Foo::Empty => ().hash(&mut state),\n+        Foo::WithValue(x) => x.hash(&mut state),\n+    }\n+\n+    let res = ();\n+    res.hash(&mut state);\n+\n+    #[allow(clippy::unit_arg)]\n+    do_nothing().hash(&mut state);\n+}"}, {"sha": "da276296e0282507b446f629bb5ff051c2f2086f", "filename": "tests/ui/unit_hash.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/962e21cf157558c27a660a404545af7e7be53289/tests%2Fui%2Funit_hash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/962e21cf157558c27a660a404545af7e7be53289/tests%2Fui%2Funit_hash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_hash.stderr?ref=962e21cf157558c27a660a404545af7e7be53289", "patch": "@@ -0,0 +1,27 @@\n+error: this call to `hash` on the unit type will do nothing\n+  --> $DIR/unit_hash.rs:18:23\n+   |\n+LL |         Foo::Empty => ().hash(&mut state),\n+   |                       ^^^^^^^^^^^^^^^^^^^ help: remove the call to `hash` or consider using: `0_u8.hash(&mut state)`\n+   |\n+   = note: `-D clippy::unit-hash` implied by `-D warnings`\n+   = note: the implementation of `Hash` for `()` is a no-op\n+\n+error: this call to `hash` on the unit type will do nothing\n+  --> $DIR/unit_hash.rs:23:5\n+   |\n+LL |     res.hash(&mut state);\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: remove the call to `hash` or consider using: `0_u8.hash(&mut state)`\n+   |\n+   = note: the implementation of `Hash` for `()` is a no-op\n+\n+error: this call to `hash` on the unit type will do nothing\n+  --> $DIR/unit_hash.rs:26:5\n+   |\n+LL |     do_nothing().hash(&mut state);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove the call to `hash` or consider using: `0_u8.hash(&mut state)`\n+   |\n+   = note: the implementation of `Hash` for `()` is a no-op\n+\n+error: aborting due to 3 previous errors\n+"}]}