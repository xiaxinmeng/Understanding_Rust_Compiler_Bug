{"sha": "9add456618532976498043379f0e15a2a542a5a9", "node_id": "C_kwDOAAsO6NoAKDlhZGQ0NTY2MTg1MzI5NzY0OTgwNDMzNzlmMGUxNWEyYTU0MmE1YTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-31T15:40:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-31T15:40:03Z"}, "message": "Auto merge of #8876 - Alexendoo:cast-abs-to-different-uint, r=dswij,xFrednet\n\n`cast_abs_to_unsigned`: do not remove cast if it's required\n\nFixes #8873\n\nIf `iX` is not cast to `uX` then keep the cast rather than removing it\n\nchangelog: [`cast_abs_to_unsigned`]: do not remove cast if it's required", "tree": {"sha": "afeaf95c179d211740fb80f2710d732913ade302", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afeaf95c179d211740fb80f2710d732913ade302"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9add456618532976498043379f0e15a2a542a5a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9add456618532976498043379f0e15a2a542a5a9", "html_url": "https://github.com/rust-lang/rust/commit/9add456618532976498043379f0e15a2a542a5a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9add456618532976498043379f0e15a2a542a5a9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2466a0507cb0cc7d2a86f1c15bd08a135975abd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2466a0507cb0cc7d2a86f1c15bd08a135975abd6", "html_url": "https://github.com/rust-lang/rust/commit/2466a0507cb0cc7d2a86f1c15bd08a135975abd6"}, {"sha": "a342f52f9169af747f81b27505e5759511db4667", "url": "https://api.github.com/repos/rust-lang/rust/commits/a342f52f9169af747f81b27505e5759511db4667", "html_url": "https://github.com/rust-lang/rust/commit/a342f52f9169af747f81b27505e5759511db4667"}], "stats": {"total": 180, "additions": 157, "deletions": 23}, "files": [{"sha": "64ea326b75a0d3335f7407a9f3e17e9176457190", "filename": "clippy_lints/src/casts/cast_abs_to_unsigned.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9add456618532976498043379f0e15a2a542a5a9/clippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9add456618532976498043379f0e15a2a542a5a9/clippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs?ref=9add456618532976498043379f0e15a2a542a5a9", "patch": "@@ -1,11 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::sugg::Sugg;\n use clippy_utils::{meets_msrv, msrvs};\n-use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::Ty;\n+use rustc_middle::ty::{self, Ty};\n use rustc_semver::RustcVersion;\n \n use super::CAST_ABS_TO_UNSIGNED;\n@@ -18,25 +17,28 @@ pub(super) fn check(\n     cast_to: Ty<'_>,\n     msrv: Option<RustcVersion>,\n ) {\n-    if_chain! {\n-        if meets_msrv(msrv, msrvs::UNSIGNED_ABS);\n-        if cast_from.is_integral();\n-        if cast_to.is_integral();\n-        if cast_from.is_signed();\n-        if !cast_to.is_signed();\n-        if let ExprKind::MethodCall(method_path, args, _) = cast_expr.kind;\n-        if let method_name = method_path.ident.name.as_str();\n-        if method_name == \"abs\";\n-        then {\n-            span_lint_and_sugg(\n-                cx,\n-                CAST_ABS_TO_UNSIGNED,\n-                expr.span,\n-                &format!(\"casting the result of `{}::{}()` to {}\", cast_from, method_name, cast_to),\n-                \"replace with\",\n-                format!(\"{}.unsigned_abs()\", Sugg::hir(cx, &args[0], \"..\")),\n-                Applicability::MachineApplicable,\n-            );\n-        }\n+    if meets_msrv(msrv, msrvs::UNSIGNED_ABS)\n+        && let ty::Int(from) = cast_from.kind()\n+        && let ty::Uint(to) = cast_to.kind()\n+        && let ExprKind::MethodCall(method_path, args, _) = cast_expr.kind\n+        && method_path.ident.name.as_str() == \"abs\"\n+    {\n+        let span = if from.bit_width() == to.bit_width() {\n+            expr.span\n+        } else {\n+            // if the result of `.unsigned_abs` would be a different type, keep the cast\n+            // e.g. `i64 -> usize`, `i16 -> u8`\n+            cast_expr.span\n+        };\n+\n+        span_lint_and_sugg(\n+            cx,\n+            CAST_ABS_TO_UNSIGNED,\n+            span,\n+            &format!(\"casting the result of `{cast_from}::abs()` to {cast_to}\"),\n+            \"replace with\",\n+            format!(\"{}.unsigned_abs()\", Sugg::hir(cx, &args[0], \"..\")),\n+            Applicability::MachineApplicable,\n+        );\n     }\n }"}, {"sha": "a68b32b097e85ae9c0d0877e9b67c4d18bd501ee", "filename": "tests/ui/cast_abs_to_unsigned.fixed", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9add456618532976498043379f0e15a2a542a5a9/tests%2Fui%2Fcast_abs_to_unsigned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9add456618532976498043379f0e15a2a542a5a9/tests%2Fui%2Fcast_abs_to_unsigned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_abs_to_unsigned.fixed?ref=9add456618532976498043379f0e15a2a542a5a9", "patch": "@@ -5,4 +5,25 @@ fn main() {\n     let x: i32 = -42;\n     let y: u32 = x.unsigned_abs();\n     println!(\"The absolute value of {} is {}\", x, y);\n+\n+    let a: i32 = -3;\n+    let _: usize = a.unsigned_abs() as usize;\n+    let _: usize = a.unsigned_abs() as _;\n+    let _ = a.unsigned_abs() as usize;\n+\n+    let a: i64 = -3;\n+    let _ = a.unsigned_abs() as usize;\n+    let _ = a.unsigned_abs() as u8;\n+    let _ = a.unsigned_abs() as u16;\n+    let _ = a.unsigned_abs() as u32;\n+    let _ = a.unsigned_abs();\n+    let _ = a.unsigned_abs() as u128;\n+\n+    let a: isize = -3;\n+    let _ = a.unsigned_abs();\n+    let _ = a.unsigned_abs() as u8;\n+    let _ = a.unsigned_abs() as u16;\n+    let _ = a.unsigned_abs() as u32;\n+    let _ = a.unsigned_abs() as u64;\n+    let _ = a.unsigned_abs() as u128;\n }"}, {"sha": "110fbc6c2dfb637db23f49fd96e0b136e2bbd2bb", "filename": "tests/ui/cast_abs_to_unsigned.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9add456618532976498043379f0e15a2a542a5a9/tests%2Fui%2Fcast_abs_to_unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9add456618532976498043379f0e15a2a542a5a9/tests%2Fui%2Fcast_abs_to_unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_abs_to_unsigned.rs?ref=9add456618532976498043379f0e15a2a542a5a9", "patch": "@@ -5,4 +5,25 @@ fn main() {\n     let x: i32 = -42;\n     let y: u32 = x.abs() as u32;\n     println!(\"The absolute value of {} is {}\", x, y);\n+\n+    let a: i32 = -3;\n+    let _: usize = a.abs() as usize;\n+    let _: usize = a.abs() as _;\n+    let _ = a.abs() as usize;\n+\n+    let a: i64 = -3;\n+    let _ = a.abs() as usize;\n+    let _ = a.abs() as u8;\n+    let _ = a.abs() as u16;\n+    let _ = a.abs() as u32;\n+    let _ = a.abs() as u64;\n+    let _ = a.abs() as u128;\n+\n+    let a: isize = -3;\n+    let _ = a.abs() as usize;\n+    let _ = a.abs() as u8;\n+    let _ = a.abs() as u16;\n+    let _ = a.abs() as u32;\n+    let _ = a.abs() as u64;\n+    let _ = a.abs() as u128;\n }"}, {"sha": "02c24e10659aceb8a94a3d652f16156241e849cd", "filename": "tests/ui/cast_abs_to_unsigned.stderr", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/9add456618532976498043379f0e15a2a542a5a9/tests%2Fui%2Fcast_abs_to_unsigned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9add456618532976498043379f0e15a2a542a5a9/tests%2Fui%2Fcast_abs_to_unsigned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_abs_to_unsigned.stderr?ref=9add456618532976498043379f0e15a2a542a5a9", "patch": "@@ -6,5 +6,95 @@ LL |     let y: u32 = x.abs() as u32;\n    |\n    = note: `-D clippy::cast-abs-to-unsigned` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: casting the result of `i32::abs()` to usize\n+  --> $DIR/cast_abs_to_unsigned.rs:10:20\n+   |\n+LL |     let _: usize = a.abs() as usize;\n+   |                    ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `i32::abs()` to usize\n+  --> $DIR/cast_abs_to_unsigned.rs:11:20\n+   |\n+LL |     let _: usize = a.abs() as _;\n+   |                    ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `i32::abs()` to usize\n+  --> $DIR/cast_abs_to_unsigned.rs:12:13\n+   |\n+LL |     let _ = a.abs() as usize;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `i64::abs()` to usize\n+  --> $DIR/cast_abs_to_unsigned.rs:15:13\n+   |\n+LL |     let _ = a.abs() as usize;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `i64::abs()` to u8\n+  --> $DIR/cast_abs_to_unsigned.rs:16:13\n+   |\n+LL |     let _ = a.abs() as u8;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `i64::abs()` to u16\n+  --> $DIR/cast_abs_to_unsigned.rs:17:13\n+   |\n+LL |     let _ = a.abs() as u16;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `i64::abs()` to u32\n+  --> $DIR/cast_abs_to_unsigned.rs:18:13\n+   |\n+LL |     let _ = a.abs() as u32;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `i64::abs()` to u64\n+  --> $DIR/cast_abs_to_unsigned.rs:19:13\n+   |\n+LL |     let _ = a.abs() as u64;\n+   |             ^^^^^^^^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `i64::abs()` to u128\n+  --> $DIR/cast_abs_to_unsigned.rs:20:13\n+   |\n+LL |     let _ = a.abs() as u128;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `isize::abs()` to usize\n+  --> $DIR/cast_abs_to_unsigned.rs:23:13\n+   |\n+LL |     let _ = a.abs() as usize;\n+   |             ^^^^^^^^^^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `isize::abs()` to u8\n+  --> $DIR/cast_abs_to_unsigned.rs:24:13\n+   |\n+LL |     let _ = a.abs() as u8;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `isize::abs()` to u16\n+  --> $DIR/cast_abs_to_unsigned.rs:25:13\n+   |\n+LL |     let _ = a.abs() as u16;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `isize::abs()` to u32\n+  --> $DIR/cast_abs_to_unsigned.rs:26:13\n+   |\n+LL |     let _ = a.abs() as u32;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `isize::abs()` to u64\n+  --> $DIR/cast_abs_to_unsigned.rs:27:13\n+   |\n+LL |     let _ = a.abs() as u64;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: casting the result of `isize::abs()` to u128\n+  --> $DIR/cast_abs_to_unsigned.rs:28:13\n+   |\n+LL |     let _ = a.abs() as u128;\n+   |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n+\n+error: aborting due to 16 previous errors\n "}]}