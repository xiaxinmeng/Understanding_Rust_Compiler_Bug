{"sha": "de92da297466f974b63fb8157419c0616cbfd558", "node_id": "C_kwDOAAsO6NoAKGRlOTJkYTI5NzQ2NmY5NzRiNjNmYjgxNTc0MTljMDYxNmNiZmQ1NTg", "commit": {"author": {"name": "naosense", "email": "pingao777@gmail.com", "date": "2022-12-12T10:58:02Z"}, "committer": {"name": "naosense", "email": "pingao777@gmail.com", "date": "2022-12-13T08:52:55Z"}, "message": "add more test, limits check", "tree": {"sha": "5330e4617110dba93e8c289dc5a5f7d96cad39aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5330e4617110dba93e8c289dc5a5f7d96cad39aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de92da297466f974b63fb8157419c0616cbfd558", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de92da297466f974b63fb8157419c0616cbfd558", "html_url": "https://github.com/rust-lang/rust/commit/de92da297466f974b63fb8157419c0616cbfd558", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de92da297466f974b63fb8157419c0616cbfd558/comments", "author": {"login": "naosense", "id": 2225426, "node_id": "MDQ6VXNlcjIyMjU0MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2225426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/naosense", "html_url": "https://github.com/naosense", "followers_url": "https://api.github.com/users/naosense/followers", "following_url": "https://api.github.com/users/naosense/following{/other_user}", "gists_url": "https://api.github.com/users/naosense/gists{/gist_id}", "starred_url": "https://api.github.com/users/naosense/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/naosense/subscriptions", "organizations_url": "https://api.github.com/users/naosense/orgs", "repos_url": "https://api.github.com/users/naosense/repos", "events_url": "https://api.github.com/users/naosense/events{/privacy}", "received_events_url": "https://api.github.com/users/naosense/received_events", "type": "User", "site_admin": false}, "committer": {"login": "naosense", "id": 2225426, "node_id": "MDQ6VXNlcjIyMjU0MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2225426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/naosense", "html_url": "https://github.com/naosense", "followers_url": "https://api.github.com/users/naosense/followers", "following_url": "https://api.github.com/users/naosense/following{/other_user}", "gists_url": "https://api.github.com/users/naosense/gists{/gist_id}", "starred_url": "https://api.github.com/users/naosense/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/naosense/subscriptions", "organizations_url": "https://api.github.com/users/naosense/orgs", "repos_url": "https://api.github.com/users/naosense/repos", "events_url": "https://api.github.com/users/naosense/events{/privacy}", "received_events_url": "https://api.github.com/users/naosense/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25c9718c04e43b5aa18b6345e0c384f9d1236e2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/25c9718c04e43b5aa18b6345e0c384f9d1236e2c", "html_url": "https://github.com/rust-lang/rust/commit/25c9718c04e43b5aa18b6345e0c384f9d1236e2c"}], "stats": {"total": 60, "additions": 53, "deletions": 7}, "files": [{"sha": "eaaaf0c658128ebe299812aca87d20d8604e4b1a", "filename": "clippy_lints/src/manual_is_ascii_check.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de92da297466f974b63fb8157419c0616cbfd558/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de92da297466f974b63fb8157419c0616cbfd558/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs?ref=de92da297466f974b63fb8157419c0616cbfd558", "patch": "@@ -1,5 +1,6 @@\n use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::{diagnostics::span_lint_and_sugg, higher, in_constant, macros::root_macro_call, source::snippet};\n+use rustc_ast::ast::RangeLimits;\n use rustc_ast::LitKind::{Byte, Char};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, PatKind, RangeEnd};\n@@ -83,7 +84,8 @@ impl<'tcx> LateLintPass<'tcx> for ManualIsAsciiCheck {\n             }\n         } else if let ExprKind::MethodCall(path, receiver, [arg], ..) = expr.kind\n             && path.ident.name == sym!(contains)\n-            && let Some(higher::Range { start: Some(start), end: Some(end), .. }) = higher::Range::hir(receiver) {\n+            && let Some(higher::Range { start: Some(start), end: Some(end), limits: RangeLimits::Closed })\n+            = higher::Range::hir(receiver) {\n                 let range = check_range(start, end);\n                 check_is_ascii(cx, expr.span, arg, &range);\n         }"}, {"sha": "b2f45aba59aa1f6136c51c83bb4ce1c4b8dfe5dd", "filename": "tests/ui/manual_is_ascii_check.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de92da297466f974b63fb8157419c0616cbfd558/tests%2Fui%2Fmanual_is_ascii_check.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/de92da297466f974b63fb8157419c0616cbfd558/tests%2Fui%2Fmanual_is_ascii_check.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_is_ascii_check.fixed?ref=de92da297466f974b63fb8157419c0616cbfd558", "patch": "@@ -15,7 +15,14 @@ fn main() {\n     assert!('x'.is_ascii_alphabetic());\n \n     assert!(matches!('x', 'A'..='Z' | 'a'..='z' | '_'));\n+\n     assert!(&b'0'.is_ascii_digit());\n+    assert!(&b'a'.is_ascii_lowercase());\n+    assert!(&b'A'.is_ascii_uppercase());\n+\n+    assert!(&'0'.is_ascii_digit());\n+    assert!(&'a'.is_ascii_lowercase());\n+    assert!(&'A'.is_ascii_uppercase());\n }\n \n #[clippy::msrv = \"1.23\"]"}, {"sha": "7f1ee88fc7438f27edbb07ec57eb171b6eb95b5e", "filename": "tests/ui/manual_is_ascii_check.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de92da297466f974b63fb8157419c0616cbfd558/tests%2Fui%2Fmanual_is_ascii_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de92da297466f974b63fb8157419c0616cbfd558/tests%2Fui%2Fmanual_is_ascii_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_is_ascii_check.rs?ref=de92da297466f974b63fb8157419c0616cbfd558", "patch": "@@ -15,7 +15,14 @@ fn main() {\n     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n \n     assert!(matches!('x', 'A'..='Z' | 'a'..='z' | '_'));\n+\n     assert!((b'0'..=b'9').contains(&b'0'));\n+    assert!((b'a'..=b'z').contains(&b'a'));\n+    assert!((b'A'..=b'Z').contains(&b'A'));\n+\n+    assert!(('0'..='9').contains(&'0'));\n+    assert!(('a'..='z').contains(&'a'));\n+    assert!(('A'..='Z').contains(&'A'));\n }\n \n #[clippy::msrv = \"1.23\"]"}, {"sha": "797952a3aba5935d2c70173a31ceb9367376258d", "filename": "tests/ui/manual_is_ascii_check.stderr", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/de92da297466f974b63fb8157419c0616cbfd558/tests%2Fui%2Fmanual_is_ascii_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de92da297466f974b63fb8157419c0616cbfd558/tests%2Fui%2Fmanual_is_ascii_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_is_ascii_check.stderr?ref=de92da297466f974b63fb8157419c0616cbfd558", "patch": "@@ -43,34 +43,64 @@ LL |     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_alphabetic()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:18:13\n+  --> $DIR/manual_is_ascii_check.rs:19:13\n    |\n LL |     assert!((b'0'..=b'9').contains(&b'0'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&b'0'.is_ascii_digit()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:30:13\n+  --> $DIR/manual_is_ascii_check.rs:20:13\n+   |\n+LL |     assert!((b'a'..=b'z').contains(&b'a'));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&b'a'.is_ascii_lowercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:21:13\n+   |\n+LL |     assert!((b'A'..=b'Z').contains(&b'A'));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&b'A'.is_ascii_uppercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:23:13\n+   |\n+LL |     assert!(('0'..='9').contains(&'0'));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&'0'.is_ascii_digit()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:24:13\n+   |\n+LL |     assert!(('a'..='z').contains(&'a'));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&'a'.is_ascii_lowercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:25:13\n+   |\n+LL |     assert!(('A'..='Z').contains(&'A'));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&'A'.is_ascii_uppercase()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:37:13\n    |\n LL |     assert!(matches!(b'1', b'0'..=b'9'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b'1'.is_ascii_digit()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:31:13\n+  --> $DIR/manual_is_ascii_check.rs:38:13\n    |\n LL |     assert!(matches!('X', 'A'..='Z'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'X'.is_ascii_uppercase()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:32:13\n+  --> $DIR/manual_is_ascii_check.rs:39:13\n    |\n LL |     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_alphabetic()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:42:23\n+  --> $DIR/manual_is_ascii_check.rs:49:23\n    |\n LL |     const FOO: bool = matches!('x', '0'..='9');\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_digit()`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 17 previous errors\n "}]}