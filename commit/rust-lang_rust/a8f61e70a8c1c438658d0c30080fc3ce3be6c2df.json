{"sha": "a8f61e70a8c1c438658d0c30080fc3ce3be6c2df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZjYxZTcwYThjMWM0Mzg2NThkMGMzMDA4MGZjM2NlM2JlNmMyZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-05T10:12:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-05T10:12:53Z"}, "message": "Auto merge of #3844 - phansch:const_fn_external_macro, r=oli-obk\n\nFix two missing_const_for_fn false positives\n\nFixes #3841\n\n* Fixes false positive in external macros\n* Fixes false positive when implement trait methods", "tree": {"sha": "411427a73516f5d4fb63638d4b785edea82cbc1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/411427a73516f5d4fb63638d4b785edea82cbc1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8f61e70a8c1c438658d0c30080fc3ce3be6c2df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f61e70a8c1c438658d0c30080fc3ce3be6c2df", "html_url": "https://github.com/rust-lang/rust/commit/a8f61e70a8c1c438658d0c30080fc3ce3be6c2df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8f61e70a8c1c438658d0c30080fc3ce3be6c2df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caccf8bd4c3d490d6a4cf329a3411bbf68753642", "url": "https://api.github.com/repos/rust-lang/rust/commits/caccf8bd4c3d490d6a4cf329a3411bbf68753642", "html_url": "https://github.com/rust-lang/rust/commit/caccf8bd4c3d490d6a4cf329a3411bbf68753642"}, {"sha": "15cba2e9563bd736a6d18028b43482698775c23d", "url": "https://api.github.com/repos/rust-lang/rust/commits/15cba2e9563bd736a6d18028b43482698775c23d", "html_url": "https://github.com/rust-lang/rust/commit/15cba2e9563bd736a6d18028b43482698775c23d"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "633105ff60bb73959c1ba000442aeb3e35278a39", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a8f61e70a8c1c438658d0c30080fc3ce3be6c2df/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f61e70a8c1c438658d0c30080fc3ce3be6c2df/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=a8f61e70a8c1c438658d0c30080fc3ce3be6c2df", "patch": "@@ -1,8 +1,9 @@\n use crate::utils::{is_entrypoint_fn, span_lint};\n+use if_chain::if_chain;\n use rustc::hir;\n use rustc::hir::intravisit::FnKind;\n use rustc::hir::{Body, Constness, FnDecl, HirId};\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n use rustc_mir::transform::qualify_min_const_fn::is_min_const_fn;\n use syntax_pos::Span;\n@@ -82,7 +83,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n     ) {\n         let def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n \n-        if is_entrypoint_fn(cx, def_id) {\n+        if in_external_macro(cx.tcx.sess, span) || is_entrypoint_fn(cx, def_id) {\n             return;\n         }\n \n@@ -95,7 +96,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n                 }\n             },\n             FnKind::Method(_, sig, ..) => {\n-                if already_const(sig.header) {\n+                if is_trait_method(cx, hir_id) || already_const(sig.header) {\n                     return;\n                 }\n             },\n@@ -114,6 +115,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n     }\n }\n \n+fn is_trait_method(cx: &LateContext<'_, '_>, hir_id: HirId) -> bool {\n+    // Get the implemented trait for the current function\n+    let parent_impl = cx.tcx.hir().get_parent_item(hir_id);\n+    if_chain! {\n+        if parent_impl != hir::CRATE_HIR_ID;\n+        if let hir::Node::Item(item) = cx.tcx.hir().get_by_hir_id(parent_impl);\n+        if let hir::ItemKind::Impl(_, _, _, _, Some(_trait_ref), _, _) = &item.node;\n+        then { return true; }\n+    }\n+    false\n+}\n+\n // We don't have to lint on something that's already `const`\n fn already_const(header: hir::FnHeader) -> bool {\n     header.constness == Constness::Const"}, {"sha": "115cc954dc7860f0287a7419f9a96641a8fa1f01", "filename": "tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a8f61e70a8c1c438658d0c30080fc3ce3be6c2df/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f61e70a8c1c438658d0c30080fc3ce3be6c2df/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=a8f61e70a8c1c438658d0c30080fc3ce3be6c2df", "patch": "@@ -55,3 +55,16 @@ trait Foo {\n         33\n     }\n }\n+\n+// Don't lint in external macros (derive)\n+#[derive(PartialEq, Eq)]\n+struct Point(isize, isize);\n+\n+impl std::ops::Add for Point {\n+    type Output = Self;\n+\n+    // Don't lint in trait impls of derived methods\n+    fn add(self, other: Self) -> Self {\n+        Point(self.0 + other.0, self.1 + other.1)\n+    }\n+}"}]}