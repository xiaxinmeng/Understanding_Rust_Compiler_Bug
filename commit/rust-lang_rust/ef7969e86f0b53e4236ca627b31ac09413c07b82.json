{"sha": "ef7969e86f0b53e4236ca627b31ac09413c07b82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNzk2OWU4NmYwYjUzZTQyMzZjYTYyN2IzMWFjMDk0MTNjMDdiODI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-15T13:06:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-15T13:06:24Z"}, "message": "auto merge of #10974 : huonw/rust/spellck, r=alexcrichton", "tree": {"sha": "a8126b39b840ae330d92ac5e346d151fab32c291", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8126b39b840ae330d92ac5e346d151fab32c291"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef7969e86f0b53e4236ca627b31ac09413c07b82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef7969e86f0b53e4236ca627b31ac09413c07b82", "html_url": "https://github.com/rust-lang/rust/commit/ef7969e86f0b53e4236ca627b31ac09413c07b82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef7969e86f0b53e4236ca627b31ac09413c07b82/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09bfb3b47383d566a5bbf5aef9429e5c24a93b6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/09bfb3b47383d566a5bbf5aef9429e5c24a93b6d", "html_url": "https://github.com/rust-lang/rust/commit/09bfb3b47383d566a5bbf5aef9429e5c24a93b6d"}, {"sha": "b0bcbbb154f11aeb302b45e4ba0627604af181a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0bcbbb154f11aeb302b45e4ba0627604af181a0", "html_url": "https://github.com/rust-lang/rust/commit/b0bcbbb154f11aeb302b45e4ba0627604af181a0"}], "stats": {"total": 165, "additions": 83, "deletions": 82}, "files": [{"sha": "5700a299945923c2fa473b15f64a4d1db0d7a8a0", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -276,7 +276,7 @@ impl<T:Freeze + Send> MutexArc<T> {\n      * might contain nested MutexArcs inside.\n      *\n      * The purpose of this is to offer a safe implementation of MutexArc to be\n-     * used instead of RWArc in cases where no readers are needed and sightly\n+     * used instead of RWArc in cases where no readers are needed and slightly\n      * better performance is required.\n      *\n      * Both methods have the same failure behaviour as unsafe_access and"}, {"sha": "11afff168259c70dd0d007dccde68c105346e084", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -30,7 +30,7 @@\n //! file name following `-o`, and accepts both `-h` and `--help` as optional flags.\n //!\n //! ~~~{.rust}\n-//! exter mod extra;\n+//! extern mod extra;\n //! use extra::getopts::*;\n //! use std::os;\n //!\n@@ -114,7 +114,7 @@ pub enum Occur {\n pub struct Opt {\n     /// Name of the option\n     name: Name,\n-    /// Wheter it has an argument\n+    /// Whether it has an argument\n     hasarg: HasArg,\n     /// How often it can occur\n     occur: Occur,\n@@ -154,7 +154,7 @@ pub enum Fail_ {\n     UnexpectedArgument(~str),\n }\n \n-/// The type of failure that occured.\n+/// The type of failure that occurred.\n #[deriving(Eq)]\n #[allow(missing_doc)]\n pub enum FailType {"}, {"sha": "c9ea556f23a50e85ec541bdcf58724a3d596ec9e", "filename": "src/libextra/tempfile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibextra%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibextra%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftempfile.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -18,7 +18,7 @@ use std::io;\n use std::io::fs;\n \n /// A wrapper for a path to temporary directory implementing automatic\n-/// scope-pased deletion.\n+/// scope-based deletion.\n pub struct TempDir {\n     priv path: Option<Path>\n }"}, {"sha": "3af76a1e3d89cf3bc6ddce53021de2e3430ee9e1", "filename": "src/libextra/uuid.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibextra%2Fuuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibextra%2Fuuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuuid.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -17,7 +17,7 @@ identifiers to entities without requiring a central allocating authority.\n \n They are particularly useful in distributed systems, though can be used in\n disparate areas, such as databases and network protocols.  Typically a UUID is\n-displayed in a readable string form as a sequence of hexadecimals digits,\n+displayed in a readable string form as a sequence of hexadecimal digits,\n separated into groups by hyphens.\n \n The uniqueness property is not strictly guaranteed, however for all practical\n@@ -89,11 +89,11 @@ pub enum UuidVersion {\n /// The reserved variants of UUIDs\n #[deriving(Eq)]\n pub enum UuidVariant {\n-    /// Reserved by the NCS for backward compatability\n+    /// Reserved by the NCS for backward compatibility\n     VariantNCS,\n     /// As described in the RFC4122 Specification (default)\n     VariantRFC4122,\n-    /// Resreved by Microsoft for backward compatability\n+    /// Reserved by Microsoft for backward compatibility\n     VariantMicrosoft,\n     /// Reserved for future expansion\n     VariantFuture,\n@@ -313,7 +313,7 @@ impl Uuid {\n         str::from_utf8_owned(s)\n     }\n \n-    /// Returns a string of hexadecimal digits, separated into groups with a hypen\n+    /// Returns a string of hexadecimal digits, separated into groups with a hyphen.\n     ///\n     /// Example: `550e8400-e29b-41d4-a716-446655440000`\n     pub fn to_hyphenated_str(&self) -> ~str {"}, {"sha": "32c7699a30847b2a6b37bc29eb4574afaf8a1231", "filename": "src/librustuv/idle.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibrustuv%2Fidle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibrustuv%2Fidle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fidle.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -13,7 +13,7 @@ use std::libc::{c_int, c_void};\n \n use uvll;\n use super::{Loop, UvHandle};\n-use std::rt::rtio::{Callback, PausibleIdleCallback};\n+use std::rt::rtio::{Callback, PausableIdleCallback};\n \n pub struct IdleWatcher {\n     handle: *uvll::uv_idle_t,\n@@ -63,7 +63,7 @@ impl IdleWatcher {\n     }\n }\n \n-impl PausibleIdleCallback for IdleWatcher {\n+impl PausableIdleCallback for IdleWatcher {\n     fn pause(&mut self) {\n         if self.idle_flag == true {\n             assert_eq!(unsafe {uvll::uv_idle_stop(self.handle) }, 0);\n@@ -99,7 +99,7 @@ impl Drop for IdleWatcher {\n mod test {\n     use super::*;\n     use std::rt::tube::Tube;\n-    use std::rt::rtio::{Callback, PausibleIdleCallback};\n+    use std::rt::rtio::{Callback, PausableIdleCallback};\n     use super::super::local_loop;\n \n     struct MyCallback(Tube<int>, int);"}, {"sha": "c556b96671ab63c9dc24167b508c737c6db6bd2d", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -153,8 +153,8 @@ impl EventLoop for UvEventLoop {\n         IdleWatcher::onetime(self.uvio.uv_loop(), f);\n     }\n \n-    fn pausible_idle_callback(&mut self, cb: ~Callback) -> ~PausibleIdleCallback {\n-        IdleWatcher::new(self.uvio.uv_loop(), cb) as ~PausibleIdleCallback\n+    fn pausable_idle_callback(&mut self, cb: ~Callback) -> ~PausableIdleCallback {\n+        IdleWatcher::new(self.uvio.uv_loop(), cb) as ~PausableIdleCallback\n     }\n \n     fn remote_callback(&mut self, f: ~Callback) -> ~RemoteCallback {"}, {"sha": "cf886fbebe15e8363348ef2b38b18aa7f4816db4", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -81,7 +81,7 @@ impl<T> RefCell<T> {\n \n     /// Mutably borrows the wrapped value.\n     ///\n-    /// The borrow lasts untile the returned `RefMut` exits scope. The value\n+    /// The borrow lasts until the returned `RefMut` exits scope. The value\n     /// cannot be borrowed while this borrow is active.\n     ///\n     /// Returns `None` if the value is currently borrowed.\n@@ -98,7 +98,7 @@ impl<T> RefCell<T> {\n \n     /// Mutably borrows the wrapped value.\n     ///\n-    /// The borrow lasts untile the returned `RefMut` exits scope. The value\n+    /// The borrow lasts until the returned `RefMut` exits scope. The value\n     /// cannot be borrowed while this borrow is active.\n     ///\n     /// # Failure"}, {"sha": "93667bb6225ffd0bfa113a210489cc9e8d765f32", "filename": "src/libstd/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -256,7 +256,7 @@ fn decompose_hangul(s: char, f: |char|) {\n     }\n }\n \n-/// Returns the canonical decompostion of a character\n+/// Returns the canonical decomposition of a character.\n pub fn decompose_canonical(c: char, f: |char|) {\n     if (c as uint) < S_BASE || (c as uint) >= (S_BASE + S_COUNT) {\n         decompose::canonical(c, f);\n@@ -265,7 +265,7 @@ pub fn decompose_canonical(c: char, f: |char|) {\n     }\n }\n \n-/// Returns the compatibility decompostion of a character\n+/// Returns the compatibility decomposition of a character.\n pub fn decompose_compatible(c: char, f: |char|) {\n     if (c as uint) < S_BASE || (c as uint) >= (S_BASE + S_COUNT) {\n         decompose::compatibility(c, f);"}, {"sha": "6bff438bbc605ed93970c7497d051ca233f86731", "filename": "src/libstd/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fclone.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -33,7 +33,7 @@ pub trait Clone {\n     /// Perform copy-assignment from `source`.\n     ///\n     /// `a.clone_from(&b)` is equivalent to `a = b.clone()` in functionality,\n-    /// but can be overriden to reuse the resources of `a` to avoid unnecessary\n+    /// but can be overridden to reuse the resources of `a` to avoid unnecessary\n     /// allocations.\n     #[inline(always)]\n     fn clone_from(&mut self, source: &Self) {\n@@ -141,7 +141,7 @@ pub trait DeepClone: Clone {\n     /// Perform deep copy-assignment from `source`.\n     ///\n     /// `a.deep_clone_from(&b)` is equivalent to `a = b.deep_clone()` in\n-    /// functionality, but can be overriden to reuse the resources of `a` to\n+    /// functionality, but can be overridden to reuse the resources of `a` to\n     /// avoid unnecessary allocations.\n     #[inline(always)]\n     fn deep_clone_from(&mut self, source: &Self) {"}, {"sha": "1a4e9226ee8c11961ae74637ee483df455568f6d", "filename": "src/libstd/condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcondition.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -81,7 +81,7 @@ pub struct Handler<T, U> {\n /// the condition (useful for debugging).\n ///\n /// This struct should never be created directly, but rather only through the\n-/// `condition!` macro provided to all libraries using libstd.\n+/// `condition!` macro provided to all libraries using `std`.\n pub struct Condition<T, U> {\n     /// Name of the condition handler\n     name: &'static str,"}, {"sha": "b4f303117538663ecd28511cae9abc47b0fc0fa3", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -606,9 +606,9 @@ pub fn writeln(output: &mut io::Writer, args: &Arguments) {\n /// See the documentation for `format` for why this function is unsafe and care\n /// should be taken if calling it manually.\n ///\n-/// Thankfully the rust compiler provides the macro `fmtf!` which will perform\n-/// all of this validation at compile-time and provides a safe interface for\n-/// invoking this function.\n+/// Thankfully the rust compiler provides macros like `write!` and\n+/// `format_args!` which perform all of this validation at compile-time\n+/// and provide a safe interface for invoking this function.\n ///\n /// # Arguments\n ///"}, {"sha": "365866872eca38b4acf44452628520d3686d0845", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -202,8 +202,8 @@ impl<W: Writer> Decorator<W> for BufferedWriter<W> {\n     fn inner_mut_ref<'a>(&'a mut self) -> &'a mut W { &mut self.inner }\n }\n \n-/// Wraps a Writer and buffers output to it, flushing whenever a newline (0xa,\n-/// '\\n') is detected.\n+/// Wraps a Writer and buffers output to it, flushing whenever a newline (`0x0a`,\n+/// `'\\n'`) is detected.\n ///\n /// Note that this structure does NOT flush the output when dropped.\n pub struct LineBufferedWriter<W> {"}, {"sha": "a1465ca7b33a0068c67dc233570cf3f8ed5eb885", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -249,7 +249,7 @@ pub fn unlink(path: &Path) {\n /// directory, etc. This function will traverse symlinks to query\n /// information about the destination file.\n ///\n-/// Returns a fully-filled out stat structure on succes, and on failure it\n+/// Returns a fully-filled out stat structure on success, and on failure it\n /// will return a dummy stat structure (it is expected that the condition\n /// raised is handled as well).\n ///\n@@ -342,7 +342,7 @@ pub fn rename(from: &Path, to: &Path) {\n ///\n /// # Errors\n ///\n-/// Will raise an `io_error` condition is the following situtations, but is\n+/// Will raise an `io_error` condition is the following situations, but is\n /// not limited to just these cases:\n ///\n /// * The `from` path is not a file\n@@ -391,7 +391,7 @@ pub fn copy(from: &Path, to: &Path) {\n ///\n /// # Errors\n ///\n-/// If this funciton encounters an I/O error, it will raise on the `io_error`\n+/// If this function encounters an I/O error, it will raise on the `io_error`\n /// condition. Some possible error situations are not having the permission to\n /// change the attributes of a file or the file not existing.\n pub fn chmod(path: &Path, mode: io::FilePermission) {\n@@ -402,7 +402,7 @@ pub fn chmod(path: &Path, mode: io::FilePermission) {\n ///\n /// # Errors\n ///\n-/// This funtion will raise on the `io_error` condition on failure.\n+/// This function will raise on the `io_error` condition on failure.\n pub fn chown(path: &Path, uid: int, gid: int) {\n     io_raise(|io| io.fs_chown(&path.to_c_str(), uid, gid));\n }\n@@ -448,7 +448,7 @@ pub fn readlink(path: &Path) -> Option<Path> {\n ///\n ///     let p = Path::new(\"/some/dir\");\n ///     fs::mkdir(&p, S_IRWXU as int);\n-///     // If we got here, our directory exists! Horray!\n+///     // If we got here, our directory exists! Hooray!\n ///\n /// # Errors\n ///\n@@ -665,7 +665,7 @@ impl path::Path {\n         io::result(|| self.stat()).is_ok()\n     }\n \n-    /// Whether the underlying implemention (be it a file path, or something\n+    /// Whether the underlying implementation (be it a file path, or something\n     /// else) points at a \"regular file\" on the FS. Will return false for paths\n     /// to non-existent locations or directories or other non-regular files\n     /// (named pipes, etc).\n@@ -680,7 +680,7 @@ impl path::Path {\n         }\n     }\n \n-    /// Whether the underlying implemention (be it a file path,\n+    /// Whether the underlying implementation (be it a file path,\n     /// or something else) is pointing at a directory in the underlying FS.\n     /// Will return false for paths to non-existent locations or if the item is\n     /// not a directory (eg files, named pipes, links, etc)"}, {"sha": "1024f28f379922f73800ecf76fd73a2f04778c40", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -835,7 +835,7 @@ pub trait Writer {\n     /// Flush this output stream, ensuring that all intermediately buffered\n     /// contents reach their destination.\n     ///\n-    /// This is by default a no-op and implementors of the `Writer` trait should\n+    /// This is by default a no-op and implementers of the `Writer` trait should\n     /// decide whether their stream needs to be buffered or not.\n     fn flush(&mut self) {}\n \n@@ -1057,7 +1057,7 @@ pub trait Buffer: Reader {\n         }\n     }\n \n-    /// Reads a sequence of bytes leading up to a specified delimeter. Once the\n+    /// Reads a sequence of bytes leading up to a specified delimiter. Once the\n     /// specified byte is encountered, reading ceases and the bytes up to and\n     /// including the delimiter are returned.\n     ///\n@@ -1156,7 +1156,7 @@ pub trait Seek {\n /// A listener is a value that can consume itself to start listening for connections.\n /// Doing so produces some sort of Acceptor.\n pub trait Listener<T, A: Acceptor<T>> {\n-    /// Spin up the listener and start queueing incoming connections\n+    /// Spin up the listener and start queuing incoming connections\n     ///\n     /// # Failure\n     ///"}, {"sha": "a1f50b15f23b9b12184a5218d5007839499f39e4", "filename": "src/libstd/io/native/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fio%2Fnative%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fio%2Fnative%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnative%2Fprocess.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -50,7 +50,7 @@ impl Process {\n     /// * prog - the program to run\n     /// * args - the arguments to pass to the program, not including the program\n     ///          itself\n-    /// * env - an optional envrionment to specify for the child process. If\n+    /// * env - an optional environment to specify for the child process. If\n     ///         this value is `None`, then the child will inherit the parent's\n     ///         environment\n     /// * cwd - an optionally specified current working directory of the child,"}, {"sha": "3b6c6013dd2e60696d15662e9ade700a3a1d1e64", "filename": "src/libstd/io/signal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fio%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fio%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fsignal.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -34,7 +34,7 @@ pub enum Signum {\n     Break = 21i,\n     /// Equivalent to SIGHUP, delivered when the user closes the terminal\n     /// window. On delivery of HangUp, the program is given approximately\n-    /// 10 seconds to perfom any cleanup. After that, Windows will\n+    /// 10 seconds to perform any cleanup. After that, Windows will\n     /// unconditionally terminate it.\n     HangUp = 1i,\n     /// Equivalent to SIGINT, delivered when the user presses Ctrl-c."}, {"sha": "5fbb09eadcb09fe00b2e14157f39e011044506d7", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -15,7 +15,7 @@ Composable external iterators\n # The `Iterator` trait\n \n This module defines Rust's core iteration trait. The `Iterator` trait has one\n-un-implemented method, `next`. All other methods are derived through default\n+unimplemented method, `next`. All other methods are derived through default\n methods to perform operations such as `zip`, `chain`, `enumerate`, and `fold`.\n \n The goal of this module is to unify iteration across all containers in Rust.\n@@ -1688,7 +1688,7 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<A> for Fuse<T> {\n \n impl<T> Fuse<T> {\n     /// Resets the fuse such that the next call to .next() or .next_back() will\n-    /// call the underlying iterator again even if it prevously returned None.\n+    /// call the underlying iterator again even if it previously returned None.\n     #[inline]\n     pub fn reset_fuse(&mut self) {\n         self.done = false"}, {"sha": "c75e7dde2516641db779ac294d4509202d0e6e3f", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -18,7 +18,7 @@ the TLS slot.  Useful for dynamic variables, singletons, and interfacing with\n foreign code with bad callback interfaces.\n \n To declare a new key for storing local data of a particular type, use the\n-`local_data_key!` macro. This macro will expand to a `static` item apppriately\n+`local_data_key!` macro. This macro will expand to a `static` item appropriately\n named and annotated. This name is then passed to the functions in this module to\n modify/read the slot specified by the key.\n "}, {"sha": "c8c2ea8af81852bc84b2e2e3fb2b7e28aa168f3d", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -209,7 +209,7 @@ pub trait Fractional: Num\n pub trait Algebraic {\n     /// Raise a number to a power.\n     fn pow(&self, n: &Self) -> Self;\n-    /// Take the squre root of a number.\n+    /// Take the square root of a number.\n     fn sqrt(&self) -> Self;\n     /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n     fn rsqrt(&self) -> Self;\n@@ -229,7 +229,7 @@ pub trait Algebraic {\n /// assert_eq!(sixteen, 16.0);\n /// ```\n #[inline(always)] pub fn pow<T: Algebraic>(value: T, n: T) -> T { value.pow(&n) }\n-/// Take the squre root of a number.\n+/// Take the square root of a number.\n #[inline(always)] pub fn sqrt<T: Algebraic>(value: T) -> T { value.sqrt() }\n /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n #[inline(always)] pub fn rsqrt<T: Algebraic>(value: T) -> T { value.rsqrt() }"}, {"sha": "5bce884448a2133d25f4b678cb15fccd873e8d3c", "filename": "src/libstd/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fops.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -352,7 +352,7 @@ pub trait BitOr<RHS,Result> {\n  * # Example\n  *\n  * A trivial implementation of `BitXor`. When `Foo ^ Foo` happens, it ends up\n- * calling `bixtor`, and therefore, `main` prints `Bitwise Xor-ing!`.\n+ * calling `bitxor`, and therefore, `main` prints `Bitwise Xor-ing!`.\n  *\n  * ```\n  * struct Foo;"}, {"sha": "dd882f051d36375b2f10f3d5522a0e54764238ef", "filename": "src/libstd/rand/distributions/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -45,7 +45,7 @@ pub trait Sample<Support> {\n \n /// `Sample`s that do not require keeping track of state.\n ///\n-/// Since no state is recored, each sample is (statistically)\n+/// Since no state is recorded, each sample is (statistically)\n /// independent of all others, assuming the `Rng` used has this\n /// property.\n // XXX maybe having this separate is overkill (the only reason is to\n@@ -84,15 +84,15 @@ pub struct Weighted<T> {\n /// is to be chosen: higher weight is more likely.\n ///\n /// The `Clone` restriction is a limitation of the `Sample` and\n-/// `IndepedentSample` traits. Note that `&T` is (cheaply) `Clone` for\n+/// `IndependentSample` traits. Note that `&T` is (cheaply) `Clone` for\n /// all `T`, as is `uint`, so one can store references or indices into\n /// another vector.\n ///\n /// # Example\n ///\n /// ```rust\n /// use std::rand;\n-/// use std::rand::distributions::{Weighted, WeightedChoice, IndepedentSample};\n+/// use std::rand::distributions::{Weighted, WeightedChoice, IndependentSample};\n ///\n /// fn main() {\n ///     let wc = WeightedChoice::new(~[Weighted { weight: 2, item: 'a' },"}, {"sha": "e3929501e19e3ee60fb18011b1e15194c15e6c72", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -119,7 +119,7 @@ pub trait Rng {\n     /// Fill `dest` with random data.\n     ///\n     /// This has a default implementation in terms of `next_u64` and\n-    /// `next_u32`, but should be overriden by implementations that\n+    /// `next_u32`, but should be overridden by implementations that\n     /// offer a more efficient solution than just calling those\n     /// methods repeatedly.\n     ///"}, {"sha": "3589582357c56480d7e2ec36deee5a762fe7f960", "filename": "src/libstd/rt/basic.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Frt%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Frt%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbasic.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -15,7 +15,7 @@\n use prelude::*;\n \n use cast;\n-use rt::rtio::{EventLoop, IoFactory, RemoteCallback, PausibleIdleCallback,\n+use rt::rtio::{EventLoop, IoFactory, RemoteCallback, PausableIdleCallback,\n                Callback};\n use unstable::sync::Exclusive;\n use io::native;\n@@ -28,7 +28,7 @@ pub fn event_loop() -> ~EventLoop {\n \n struct BasicLoop {\n     work: ~[proc()],                  // pending work\n-    idle: Option<*mut BasicPausible>, // only one is allowed\n+    idle: Option<*mut BasicPausable>, // only one is allowed\n     remotes: ~[(uint, ~Callback)],\n     next_remote: uint,\n     messages: Exclusive<~[Message]>,\n@@ -142,14 +142,14 @@ impl EventLoop for BasicLoop {\n     }\n \n     // XXX: Seems like a really weird requirement to have an event loop provide.\n-    fn pausible_idle_callback(&mut self, cb: ~Callback) -> ~PausibleIdleCallback {\n-        let callback = ~BasicPausible::new(self, cb);\n+    fn pausable_idle_callback(&mut self, cb: ~Callback) -> ~PausableIdleCallback {\n+        let callback = ~BasicPausable::new(self, cb);\n         rtassert!(self.idle.is_none());\n         unsafe {\n-            let cb_ptr: &*mut BasicPausible = cast::transmute(&callback);\n+            let cb_ptr: &*mut BasicPausable = cast::transmute(&callback);\n             self.idle = Some(*cb_ptr);\n         }\n-        return callback as ~PausibleIdleCallback;\n+        return callback as ~PausableIdleCallback;\n     }\n \n     fn remote_callback(&mut self, f: ~Callback) -> ~RemoteCallback {\n@@ -196,23 +196,23 @@ impl Drop for BasicRemote {\n     }\n }\n \n-struct BasicPausible {\n+struct BasicPausable {\n     eloop: *mut BasicLoop,\n     work: ~Callback,\n     active: bool,\n }\n \n-impl BasicPausible {\n-    fn new(eloop: &mut BasicLoop, cb: ~Callback) -> BasicPausible {\n-        BasicPausible {\n+impl BasicPausable {\n+    fn new(eloop: &mut BasicLoop, cb: ~Callback) -> BasicPausable {\n+        BasicPausable {\n             active: false,\n             work: cb,\n             eloop: eloop,\n         }\n     }\n }\n \n-impl PausibleIdleCallback for BasicPausible {\n+impl PausableIdleCallback for BasicPausable {\n     fn pause(&mut self) {\n         self.active = false;\n     }\n@@ -221,7 +221,7 @@ impl PausibleIdleCallback for BasicPausible {\n     }\n }\n \n-impl Drop for BasicPausible {\n+impl Drop for BasicPausable {\n     fn drop(&mut self) {\n         unsafe {\n             (*self.eloop).idle = None;"}, {"sha": "557d9c998caea307b844154ddc86a8ef90085e08", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -35,7 +35,7 @@ pub trait Callback {\n pub trait EventLoop {\n     fn run(&mut self);\n     fn callback(&mut self, proc());\n-    fn pausible_idle_callback(&mut self, ~Callback) -> ~PausibleIdleCallback;\n+    fn pausable_idle_callback(&mut self, ~Callback) -> ~PausableIdleCallback;\n     fn remote_callback(&mut self, ~Callback) -> ~RemoteCallback;\n \n     /// The asynchronous I/O services. Not all event loops may provide one.\n@@ -265,7 +265,7 @@ pub trait RtioTTY {\n     fn isatty(&self) -> bool;\n }\n \n-pub trait PausibleIdleCallback {\n+pub trait PausableIdleCallback {\n     fn pause(&mut self);\n     fn resume(&mut self);\n }"}, {"sha": "fa17efc833bd0ce98e003e8b0b6a38f207f300a1", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -22,7 +22,7 @@ use rt::kill::BlockedTask;\n use rt::deque;\n use rt::local_ptr;\n use rt::local::Local;\n-use rt::rtio::{RemoteCallback, PausibleIdleCallback, Callback};\n+use rt::rtio::{RemoteCallback, PausableIdleCallback, Callback};\n use borrow::{to_uint};\n use rand::{XorShiftRng, Rng, Rand};\n use iter::range;\n@@ -75,8 +75,8 @@ pub struct Scheduler {\n     friend_handle: Option<SchedHandle>,\n     /// A fast XorShift rng for scheduler use\n     rng: XorShiftRng,\n-    /// A toggleable idle callback\n-    idle_callback: Option<~PausibleIdleCallback>,\n+    /// A togglable idle callback\n+    idle_callback: Option<~PausableIdleCallback>,\n     /// A countdown that starts at a random value and is decremented\n     /// every time a yield check is performed. When it hits 0 a task\n     /// will yield.\n@@ -86,7 +86,7 @@ pub struct Scheduler {\n     steal_for_yield: bool,\n \n     // n.b. currently destructors of an object are run in top-to-bottom in order\n-    //      of field declaration. Due to its nature, the pausible idle callback\n+    //      of field declaration. Due to its nature, the pausable idle callback\n     //      must have some sort of handle to the event loop, so it needs to get\n     //      destroyed before the event loop itself. For this reason, we destroy\n     //      the event loop last to ensure that any unsafe references to it are\n@@ -170,7 +170,7 @@ impl Scheduler {\n \n         // Build an Idle callback.\n         let cb = ~SchedRunner as ~Callback;\n-        self.idle_callback = Some(self.event_loop.pausible_idle_callback(cb));\n+        self.idle_callback = Some(self.event_loop.pausable_idle_callback(cb));\n \n         // Initialize the TLS key.\n         local_ptr::init();"}, {"sha": "caf0b535e052c3be1816e5f58040924485668a8d", "filename": "src/libstd/str.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -963,10 +963,9 @@ pub fn utf8_char_width(b: u8) -> uint {\n     return UTF8_CHAR_WIDTH[b] as uint;\n }\n \n-/// Struct that contains a `char` and\n-/// the index of the first byte of the next `char` in a string.\n-/// This is being used as a datastructure for iterating over\n-/// the utf8 bytes of a string.\n+/// Struct that contains a `char` and the index of the first byte of\n+/// the next `char` in a string.  This can be used as a data structure\n+/// for iterating over the UTF-8 bytes of a string.\n pub struct CharRange {\n     /// Current `char`\n     ch: char,\n@@ -1570,7 +1569,8 @@ pub trait StrSlice<'a> {\n     /// ```\n     fn is_whitespace(&self) -> bool;\n \n-    /// Returns true if the string contains only alphanumerics.\n+    /// Returns true if the string contains only alphanumeric code\n+    /// points.\n     ///\n     /// Alphanumeric characters are determined by `char::is_alphanumeric`.\n     ///\n@@ -2518,7 +2518,7 @@ impl<'a> StrSlice<'a> for &'a str {\n \n /// Methods for owned strings\n pub trait OwnedStr {\n-    /// Appends a string slice to the back of a string, without overallocating\n+    /// Appends a string slice to the back of a string, without overallocating.\n     fn push_str_no_overallocate(&mut self, rhs: &str);\n \n     /// Appends a string slice to the back of a string"}, {"sha": "3e7a861b3850183e1a95903e5b65d7bdfd4c6da8", "filename": "src/libstd/unstable/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Funstable%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Funstable%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmutex.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -37,7 +37,7 @@\n //!         lock.unlock();\n //!     }\n //!\n-//!     // Use a normally initialied mutex\n+//!     // Use a normally initialized mutex\n //!     let mut lock = Mutex::new();\n //!     unsafe {\n //!         lock.lock();"}, {"sha": "fbfd9accd0d3ae76060b4502f3d00450e35b7edf", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7969e86f0b53e4236ca627b31ac09413c07b82/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=ef7969e86f0b53e4236ca627b31ac09413c07b82", "patch": "@@ -402,7 +402,7 @@ pub fn unzip<T, U, V: Iterator<(T, U)>>(mut iter: V) -> (~[T], ~[U]) {\n ///\n /// The Steinhaus\u2013Johnson\u2013Trotter algorithm is used.\n ///\n-/// Generates even and odd permutations alternatingly.\n+/// Generates even and odd permutations alternately.\n ///\n /// The last generated swap is always (0, 1), and it returns the\n /// sequence to its initial order.\n@@ -480,7 +480,7 @@ impl Iterator<(uint, uint)> for ElementSwaps {\n /// then each successive element is the vector with one\n /// swap applied.\n ///\n-/// Generates even and odd permutations alternatingly.\n+/// Generates even and odd permutations alternately.\n pub struct Permutations<T> {\n     priv swaps: ElementSwaps,\n     priv v: ~[T],\n@@ -940,7 +940,7 @@ pub trait ImmutableVector<'a, T> {\n     fn tailn(&self, n: uint) -> &'a [T];\n     /// Returns all but the last element of a vector\n     fn init(&self) -> &'a [T];\n-    /// Returns all but the last `n' elemnts of a vector\n+    /// Returns all but the last `n' elements of a vector\n     fn initn(&self, n: uint) -> &'a [T];\n     /// Returns the last element of a vector, failing if the vector is empty.\n     fn last(&self) -> &'a T;\n@@ -958,9 +958,10 @@ pub trait ImmutableVector<'a, T> {\n     /**\n      * Binary search a sorted vector with a comparator function.\n      *\n-     * The comparator should implement an order consistent with the sort\n-     * order of the underlying vector, returning an order code that indicates\n-     * whether its argument is `Less`, `Equal` or `Greater` the desired target.\n+     * The comparator function should implement an order consistent\n+     * with the sort order of the underlying vector, returning an\n+     * order code that indicates whether its argument is `Less`,\n+     * `Equal` or `Greater` the desired target.\n      *\n      * Returns the index where the comparator returned `Equal`, or `None` if\n      * not found.\n@@ -1436,14 +1437,14 @@ pub trait OwnedVector<T> {\n \n     /**\n      * Expands a vector in place, initializing the new elements to the result of\n-     * a function\n+     * a function.\n      *\n      * Function `init_op` is called `n` times with the values [0..`n`)\n      *\n      * # Arguments\n      *\n      * * n - The number of elements to add\n-     * * init_op - A function to call to retreive each appended element's\n+     * * init_op - A function to call to retrieve each appended element's\n      *             value\n      */\n     fn grow_fn(&mut self, n: uint, op: |uint| -> T);"}]}