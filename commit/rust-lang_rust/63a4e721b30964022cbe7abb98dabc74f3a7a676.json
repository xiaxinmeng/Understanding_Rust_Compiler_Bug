{"sha": "63a4e721b30964022cbe7abb98dabc74f3a7a676", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYTRlNzIxYjMwOTY0MDIyY2JlN2FiYjk4ZGFiYzc0ZjNhN2E2NzY=", "commit": {"author": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2018-06-21T12:12:26Z"}, "committer": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2018-06-21T12:12:26Z"}, "message": "Share code between gather_used_muts and find_assignments", "tree": {"sha": "f44de78577d01f24b99449759eaa38549bf880c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f44de78577d01f24b99449759eaa38549bf880c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63a4e721b30964022cbe7abb98dabc74f3a7a676", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63a4e721b30964022cbe7abb98dabc74f3a7a676", "html_url": "https://github.com/rust-lang/rust/commit/63a4e721b30964022cbe7abb98dabc74f3a7a676", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63a4e721b30964022cbe7abb98dabc74f3a7a676/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71543836ab6c27c5a9368855053b36f40d3ed033", "url": "https://api.github.com/repos/rust-lang/rust/commits/71543836ab6c27c5a9368855053b36f40d3ed033", "html_url": "https://github.com/rust-lang/rust/commit/71543836ab6c27c5a9368855053b36f40d3ed033"}], "stats": {"total": 72, "additions": 30, "deletions": 42}, "files": [{"sha": "dbe19bc47859f917801e66bbfc279a34d2235b75", "filename": "src/librustc_mir/borrow_check/used_muts.rs", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/63a4e721b30964022cbe7abb98dabc74f3a7a676/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a4e721b30964022cbe7abb98dabc74f3a7a676/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs?ref=63a4e721b30964022cbe7abb98dabc74f3a7a676", "patch": "@@ -14,6 +14,7 @@ use rustc::mir::{Local, Location, Place};\n use rustc_data_structures::fx::FxHashSet;\n \n use borrow_check::MirBorrowckCtxt;\n+use util::collect_writes::is_place_assignment;\n \n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     /// Walks the MIR looking for assignments to a set of locals, as part of the unused mutable\n@@ -45,31 +46,19 @@ impl<'visit, 'cx, 'gcx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'c\n             return;\n         }\n \n-        match place_context {\n-            PlaceContext::Store | PlaceContext::Call => {\n-                // Propagate the Local assigned at this Location as a used mutable local variable\n-                for moi in &self.mbcx.move_data.loc_map[location] {\n-                    let mpi = &self.mbcx.move_data.moves[*moi].path;\n-                    let path = &self.mbcx.move_data.move_paths[*mpi];\n-                    debug!(\n-                        \"assignment of {:?} to {:?}, adding {:?} to used mutable set\",\n-                        path.place, local, path.place\n-                    );\n-                    if let Place::Local(user_local) = path.place {\n-                        self.mbcx.used_mut.insert(user_local);\n-                    }\n+        if is_place_assignment(&place_context) {\n+            // Propagate the Local assigned at this Location as a used mutable local variable\n+            for moi in &self.mbcx.move_data.loc_map[location] {\n+                let mpi = &self.mbcx.move_data.moves[*moi].path;\n+                let path = &self.mbcx.move_data.move_paths[*mpi];\n+                debug!(\n+                    \"assignment of {:?} to {:?}, adding {:?} to used mutable set\",\n+                    path.place, local, path.place\n+                );\n+                if let Place::Local(user_local) = path.place {\n+                    self.mbcx.used_mut.insert(user_local);\n                 }\n             }\n-            PlaceContext::AsmOutput\n-            | PlaceContext::Drop\n-            | PlaceContext::Inspect\n-            | PlaceContext::Borrow { .. }\n-            | PlaceContext::Projection(..)\n-            | PlaceContext::Copy\n-            | PlaceContext::Move\n-            | PlaceContext::StorageLive\n-            | PlaceContext::StorageDead\n-            | PlaceContext::Validate => {}\n         }\n     }\n }"}, {"sha": "23f753f8569bb780170cb0118e6c61a453106f48", "filename": "src/librustc_mir/util/collect_writes.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/63a4e721b30964022cbe7abb98dabc74f3a7a676/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a4e721b30964022cbe7abb98dabc74f3a7a676/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs?ref=63a4e721b30964022cbe7abb98dabc74f3a7a676", "patch": "@@ -43,25 +43,24 @@ impl<'tcx> Visitor<'tcx> for FindLocalAssignmentVisitor {\n             return;\n         }\n \n-        match place_context {\n-            PlaceContext::Store | PlaceContext::Call => {\n-                self.locations.push(location);\n-            }\n-            PlaceContext::AsmOutput |\n-            PlaceContext::Drop |\n-            PlaceContext::Inspect |\n-            PlaceContext::Borrow { .. } |\n-            PlaceContext::Projection(..) |\n-            PlaceContext::Copy |\n-            PlaceContext::Move |\n-            PlaceContext::StorageLive |\n-            PlaceContext::StorageDead |\n-            PlaceContext::Validate => {\n-                // TO-DO\n-                // self.super_local(local)\n-            }\n+        if is_place_assignment(&place_context) {\n+            self.locations.push(location);\n         }\n     }\n-    // TO-DO\n-    // fn super_local()\n+}\n+\n+/// Returns true if this place context represents an assignment statement\n+crate fn is_place_assignment(place_context: &PlaceContext) -> bool {\n+    match *place_context {\n+        PlaceContext::Store | PlaceContext::Call | PlaceContext::AsmOutput => true,\n+        PlaceContext::Drop\n+        | PlaceContext::Inspect\n+        | PlaceContext::Borrow { .. }\n+        | PlaceContext::Projection(..)\n+        | PlaceContext::Copy\n+        | PlaceContext::Move\n+        | PlaceContext::StorageLive\n+        | PlaceContext::StorageDead\n+        | PlaceContext::Validate => false,\n+    }\n }"}]}