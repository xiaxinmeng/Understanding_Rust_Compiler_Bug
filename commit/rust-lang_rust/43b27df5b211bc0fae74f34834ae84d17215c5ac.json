{"sha": "43b27df5b211bc0fae74f34834ae84d17215c5ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYjI3ZGY1YjIxMWJjMGZhZTc0ZjM0ODM0YWU4NGQxNzIxNWM1YWM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-07T11:37:38Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-09T09:42:41Z"}, "message": "rustc_ast: Introduce `Token::uninterpolate`", "tree": {"sha": "ca0eaf2f8ab7c7fe01e703fae2d020643dfd387a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca0eaf2f8ab7c7fe01e703fae2d020643dfd387a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43b27df5b211bc0fae74f34834ae84d17215c5ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43b27df5b211bc0fae74f34834ae84d17215c5ac", "html_url": "https://github.com/rust-lang/rust/commit/43b27df5b211bc0fae74f34834ae84d17215c5ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43b27df5b211bc0fae74f34834ae84d17215c5ac/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4a03c44d5859dea64dea7fdbaef5377f37c5dd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a03c44d5859dea64dea7fdbaef5377f37c5dd2", "html_url": "https://github.com/rust-lang/rust/commit/f4a03c44d5859dea64dea7fdbaef5377f37c5dd2"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "b80694ab6de84f85d6a69b6c8755158cd6ea52f3", "filename": "src/librustc_ast/token.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/43b27df5b211bc0fae74f34834ae84d17215c5ac/src%2Flibrustc_ast%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43b27df5b211bc0fae74f34834ae84d17215c5ac/src%2Flibrustc_ast%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Ftoken.rs?ref=43b27df5b211bc0fae74f34834ae84d17215c5ac", "patch": "@@ -14,8 +14,8 @@ use rustc_macros::HashStable_Generic;\n use rustc_span::symbol::kw;\n use rustc_span::symbol::Symbol;\n use rustc_span::{self, Span, DUMMY_SP};\n-use std::fmt;\n-use std::mem;\n+use std::borrow::Cow;\n+use std::{fmt, mem};\n \n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n #[derive(HashStable_Generic)]\n@@ -457,6 +457,22 @@ impl Token {\n         }\n     }\n \n+    // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token\n+    // into the regular identifier or lifetime token it refers to,\n+    // otherwise returns the original token.\n+    pub fn uninterpolate(&self) -> Cow<'_, Token> {\n+        match &self.kind {\n+            Interpolated(nt) => match **nt {\n+                NtIdent(ident, is_raw) => {\n+                    Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))\n+                }\n+                NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),\n+                _ => Cow::Borrowed(self),\n+            },\n+            _ => Cow::Borrowed(self),\n+        }\n+    }\n+\n     /// Returns an identifier if this token is an identifier.\n     pub fn ident(&self) -> Option<(ast::Ident, /* is_raw */ bool)> {\n         match self.kind {"}, {"sha": "f7cfb028a7a6681f6960167db894401bc81d12c5", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43b27df5b211bc0fae74f34834ae84d17215c5ac/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43b27df5b211bc0fae74f34834ae84d17215c5ac/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=43b27df5b211bc0fae74f34834ae84d17215c5ac", "patch": "@@ -435,7 +435,7 @@ impl<'a> Parser<'a> {\n         let attrs = self.parse_or_use_outer_attributes(attrs)?;\n         let lo = self.token.span;\n         // Note: when adding new unary operators, don't forget to adjust TokenKind::can_begin_expr()\n-        let (hi, ex) = match self.normalized_token.kind {\n+        let (hi, ex) = match self.token.uninterpolate().kind {\n             token::Not => self.parse_unary_expr(lo, UnOp::Not), // `!expr`\n             token::Tilde => self.recover_tilde_expr(lo),        // `~expr`\n             token::BinOp(token::Minus) => self.parse_unary_expr(lo, UnOp::Neg), // `-expr`\n@@ -755,7 +755,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_dot_suffix_expr(&mut self, lo: Span, base: P<Expr>) -> PResult<'a, P<Expr>> {\n-        match self.normalized_token.kind {\n+        match self.token.uninterpolate().kind {\n             token::Ident(..) => self.parse_dot_suffix(base, lo),\n             token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) => {\n                 Ok(self.parse_tuple_field_access_expr(lo, base, symbol, suffix))"}, {"sha": "08d71f03976d637cc5b4c871c1bde22c173f0fd3", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43b27df5b211bc0fae74f34834ae84d17215c5ac/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43b27df5b211bc0fae74f34834ae84d17215c5ac/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=43b27df5b211bc0fae74f34834ae84d17215c5ac", "patch": "@@ -1544,7 +1544,7 @@ impl<'a> Parser<'a> {\n \n         let is_name_required = match self.token.kind {\n             token::DotDotDot => false,\n-            _ => req_name(self.normalized_token.span.edition()),\n+            _ => req_name(self.token.uninterpolate().span.edition()),\n         };\n         let (pat, ty) = if is_name_required || self.is_named_param() {\n             debug!(\"parse_param_general parse_pat (is_name_required:{})\", is_name_required);\n@@ -1648,7 +1648,7 @@ impl<'a> Parser<'a> {\n         // Only a limited set of initial token sequences is considered `self` parameters; anything\n         // else is parsed as a normal function parameter list, so some lookahead is required.\n         let eself_lo = self.token.span;\n-        let (eself, eself_ident, eself_hi) = match self.normalized_token.kind {\n+        let (eself, eself_ident, eself_hi) = match self.token.uninterpolate().kind {\n             token::BinOp(token::And) => {\n                 let eself = if is_isolated_self(self, 1) {\n                     // `&self`"}]}