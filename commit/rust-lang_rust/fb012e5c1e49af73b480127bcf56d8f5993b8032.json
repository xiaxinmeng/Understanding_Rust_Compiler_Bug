{"sha": "fb012e5c1e49af73b480127bcf56d8f5993b8032", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMDEyZTVjMWU0OWFmNzNiNDgwMTI3YmNmNTZkOGY1OTkzYjgwMzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T15:19:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T15:19:09Z"}, "message": "remove cancelable from symbols", "tree": {"sha": "6a71bcb433b82e4c473238d439aad2ef76144157", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a71bcb433b82e4c473238d439aad2ef76144157"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb012e5c1e49af73b480127bcf56d8f5993b8032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb012e5c1e49af73b480127bcf56d8f5993b8032", "html_url": "https://github.com/rust-lang/rust/commit/fb012e5c1e49af73b480127bcf56d8f5993b8032", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb012e5c1e49af73b480127bcf56d8f5993b8032/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "url": "https://api.github.com/repos/rust-lang/rust/commits/11f3c8afb23d67acde8cc7642aea3a2ca06a2361", "html_url": "https://github.com/rust-lang/rust/commit/11f3c8afb23d67acde8cc7642aea3a2ca06a2361"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "efa320d83d0bf1ac4b0b1f155c66cef6a511600f", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb012e5c1e49af73b480127bcf56d8f5993b8032/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb012e5c1e49af73b480127bcf56d8f5993b8032/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=fb012e5c1e49af73b480127bcf56d8f5993b8032", "patch": "@@ -20,7 +20,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Cancelable\n     let name_ref = ctry!(calling_node.name_ref());\n \n     // Resolve the function's NameRef (NOTE: this isn't entirely accurate).\n-    let file_symbols = db.index_resolve(name_ref)?;\n+    let file_symbols = db.index_resolve(name_ref);\n     let symbol = ctry!(file_symbols.into_iter().find(|it| it.ptr.kind() == FN_DEF));\n     let fn_file = db.source_file(symbol.file_id);\n     let fn_def = symbol.ptr.resolve(&fn_file);"}, {"sha": "591f36ccec7daa90c42669dc37f0de862235f64f", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb012e5c1e49af73b480127bcf56d8f5993b8032/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb012e5c1e49af73b480127bcf56d8f5993b8032/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=fb012e5c1e49af73b480127bcf56d8f5993b8032", "patch": "@@ -95,7 +95,7 @@ pub(crate) fn reference_definition(\n     }\n     // If that fails try the index based approach.\n     let navs = db\n-        .index_resolve(name_ref)?\n+        .index_resolve(name_ref)\n         .into_iter()\n         .map(NavigationTarget::from_symbol)\n         .collect();"}, {"sha": "76cb312dddca3c086d86540bb173815f7d58e4c9", "filename": "crates/ra_ide_api/src/imp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb012e5c1e49af73b480127bcf56d8f5993b8032/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb012e5c1e49af73b480127bcf56d8f5993b8032/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimp.rs?ref=fb012e5c1e49af73b480127bcf56d8f5993b8032", "patch": "@@ -258,7 +258,7 @@ impl db::RootDatabase {\n             .collect::<Vec<_>>();\n         Ok(res)\n     }\n-    pub(crate) fn index_resolve(&self, name_ref: &ast::NameRef) -> Cancelable<Vec<FileSymbol>> {\n+    pub(crate) fn index_resolve(&self, name_ref: &ast::NameRef) -> Vec<FileSymbol> {\n         let name = name_ref.text();\n         let mut query = Query::new(name.to_string());\n         query.exact();"}, {"sha": "e0b8410d1f6c2bc485c4c76a3096d540b78eb703", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fb012e5c1e49af73b480127bcf56d8f5993b8032/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb012e5c1e49af73b480127bcf56d8f5993b8032/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=fb012e5c1e49af73b480127bcf56d8f5993b8032", "patch": "@@ -381,12 +381,11 @@ impl Analysis {\n     /// Fuzzy searches for a symbol.\n     pub fn symbol_search(&self, query: Query) -> Cancelable<Vec<NavigationTarget>> {\n         self.with_db(|db| {\n-            let res = symbol_index::world_symbols(db, query)?\n+            symbol_index::world_symbols(db, query)\n                 .into_iter()\n                 .map(NavigationTarget::from_symbol)\n-                .collect::<Vec<_>>();\n-            Ok(res)\n-        })?\n+                .collect::<Vec<_>>()\n+        })\n     }\n \n     pub fn goto_definition("}, {"sha": "74165d68fba7f7c6f174ee5e739bbc6019e0792f", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fb012e5c1e49af73b480127bcf56d8f5993b8032/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb012e5c1e49af73b480127bcf56d8f5993b8032/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=fb012e5c1e49af73b480127bcf56d8f5993b8032", "patch": "@@ -37,13 +37,13 @@ use salsa::ParallelDatabase;\n use rayon::prelude::*;\n \n use crate::{\n-    Cancelable, FileId, Query,\n+    FileId, Query,\n     db::RootDatabase,\n };\n \n salsa::query_group! {\n     pub(crate) trait SymbolsDatabase: hir::db::HirDatabase {\n-        fn file_symbols(file_id: FileId) -> Cancelable<Arc<SymbolIndex>> {\n+        fn file_symbols(file_id: FileId) -> Arc<SymbolIndex> {\n             type FileSymbolsQuery;\n         }\n         fn library_symbols(id: SourceRootId) -> Arc<SymbolIndex> {\n@@ -53,7 +53,7 @@ salsa::query_group! {\n     }\n }\n \n-fn file_symbols(db: &impl SymbolsDatabase, file_id: FileId) -> Cancelable<Arc<SymbolIndex>> {\n+fn file_symbols(db: &impl SymbolsDatabase, file_id: FileId) -> Arc<SymbolIndex> {\n     db.check_canceled();\n     let source_file = db.source_file(file_id);\n     let mut symbols = source_file\n@@ -69,10 +69,10 @@ fn file_symbols(db: &impl SymbolsDatabase, file_id: FileId) -> Cancelable<Arc<Sy\n         symbols.push(FileSymbol { file_id, name, ptr })\n     }\n \n-    Ok(Arc::new(SymbolIndex::new(symbols)))\n+    Arc::new(SymbolIndex::new(symbols))\n }\n \n-pub(crate) fn world_symbols(db: &RootDatabase, query: Query) -> Cancelable<Vec<FileSymbol>> {\n+pub(crate) fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n     /// Need to wrap Snapshot to provide `Clone` impl for `map_with`\n     struct Snap(salsa::Snapshot<RootDatabase>);\n     impl Clone for Snap {\n@@ -98,10 +98,9 @@ pub(crate) fn world_symbols(db: &RootDatabase, query: Query) -> Cancelable<Vec<F\n         files\n             .par_iter()\n             .map_with(snap, |db, &file_id| db.0.file_symbols(file_id))\n-            .filter_map(|it| it.ok())\n             .collect()\n     };\n-    Ok(query.search(&buf))\n+    query.search(&buf)\n }\n \n #[derive(Default, Debug)]"}]}