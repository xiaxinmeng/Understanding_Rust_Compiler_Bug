{"sha": "1bfa1d51fd220ee5281176f565581cd9dfeaa380", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZmExZDUxZmQyMjBlZTUyODExNzZmNTY1NTgxY2Q5ZGZlYWEzODA=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2016-10-15T17:28:12Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2016-10-15T17:28:40Z"}, "message": "introing one-time diagnostics: only emit \"lint level defined here\" once\n\nWe introduce a new `one_time_diagnostics` field on\n`rustc::session::Session` to hold a hashset of diagnostic messages we've\nset once but don't want to see again (as uniquified by span and message\ntext), \"lint level defined here\" being the motivating example dealt with\nhere.\n\nThis is in the matter of #24690.", "tree": {"sha": "e6e858e78f2b5cc7cd46045bcaaffe794e5511d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6e858e78f2b5cc7cd46045bcaaffe794e5511d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bfa1d51fd220ee5281176f565581cd9dfeaa380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bfa1d51fd220ee5281176f565581cd9dfeaa380", "html_url": "https://github.com/rust-lang/rust/commit/1bfa1d51fd220ee5281176f565581cd9dfeaa380", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bfa1d51fd220ee5281176f565581cd9dfeaa380/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e05e7ee3c19a5594b79d67c8390cef78970be7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e05e7ee3c19a5594b79d67c8390cef78970be7c", "html_url": "https://github.com/rust-lang/rust/commit/8e05e7ee3c19a5594b79d67c8390cef78970be7c"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "eebf4d32ab26fc2c0822d2ca243e72d0aa9a63e1", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1bfa1d51fd220ee5281176f565581cd9dfeaa380/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfa1d51fd220ee5281176f565581cd9dfeaa380/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=1bfa1d51fd220ee5281176f565581cd9dfeaa380", "patch": "@@ -452,8 +452,7 @@ pub fn raw_struct_lint<'a>(sess: &'a Session,\n     }\n \n     if let Some(span) = def {\n-        let explanation = \"lint level defined here\";\n-        err.span_note(span, &explanation);\n+        sess.diag_span_note_once(&mut err, span, \"lint level defined here\");\n     }\n \n     err"}, {"sha": "7917964c8f1b6da949dacb89e21120567caf5d3e", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1bfa1d51fd220ee5281176f565581cd9dfeaa380/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfa1d51fd220ee5281176f565581cd9dfeaa380/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=1bfa1d51fd220ee5281176f565581cd9dfeaa380", "patch": "@@ -17,7 +17,7 @@ use middle::dependency_format;\n use session::search_paths::PathKind;\n use session::config::DebugInfoLevel;\n use ty::tls;\n-use util::nodemap::{NodeMap, FnvHashMap};\n+use util::nodemap::{NodeMap, FnvHashMap, FnvHashSet};\n use util::common::duration_to_secs_str;\n use mir::transform as mir_pass;\n \n@@ -75,6 +75,10 @@ pub struct Session {\n     pub working_dir: PathBuf,\n     pub lint_store: RefCell<lint::LintStore>,\n     pub lints: RefCell<NodeMap<Vec<(lint::LintId, Span, String)>>>,\n+    /// Set of (span, message) tuples tracking lint (sub)diagnostics that have\n+    /// been set once, but should not be set again, in order to avoid\n+    /// redundantly verbose output (Issue #24690).\n+    pub one_time_diagnostics: RefCell<FnvHashSet<(Span, String)>>,\n     pub plugin_llvm_passes: RefCell<Vec<String>>,\n     pub mir_passes: RefCell<mir_pass::Passes>,\n     pub plugin_attributes: RefCell<Vec<(String, AttributeType)>>,\n@@ -288,6 +292,26 @@ impl Session {\n     pub fn diagnostic<'a>(&'a self) -> &'a errors::Handler {\n         &self.parse_sess.span_diagnostic\n     }\n+\n+    /// Analogous to calling `.span_note` on the given DiagnosticBuilder, but\n+    /// deduplicates on span and message for this `Session`.\n+    //\n+    // FIXME: if the need arises for one-time diagnostics other than\n+    // `span_note`, we almost certainly want to generalize this \"check the\n+    // one-time diagnostics map, then set message if it's not already there\"\n+    // code to accomodate all of them\n+    pub fn diag_span_note_once<'a, 'b>(&'a self,\n+                                       diag_builder: &'b mut DiagnosticBuilder<'a>,\n+                                       span: Span, message: &str) {\n+        let span_message = (span, message.to_owned());\n+        let already_noted: bool = self.one_time_diagnostics.borrow()\n+            .contains(&span_message);\n+        if !already_noted {\n+            diag_builder.span_note(span, &message);\n+            self.one_time_diagnostics.borrow_mut().insert(span_message);\n+        }\n+    }\n+\n     pub fn codemap<'a>(&'a self) -> &'a codemap::CodeMap {\n         self.parse_sess.codemap()\n     }\n@@ -561,6 +585,7 @@ pub fn build_session_(sopts: config::Options,\n         working_dir: env::current_dir().unwrap(),\n         lint_store: RefCell::new(lint::LintStore::new()),\n         lints: RefCell::new(NodeMap()),\n+        one_time_diagnostics: RefCell::new(FnvHashSet()),\n         plugin_llvm_passes: RefCell::new(Vec::new()),\n         mir_passes: RefCell::new(mir_pass::Passes::new()),\n         plugin_attributes: RefCell::new(Vec::new()),"}, {"sha": "a88e0c63ac374c0b4c3367a4d966ae131bd4ce7e", "filename": "src/test/compile-fail/lint-group-style.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bfa1d51fd220ee5281176f565581cd9dfeaa380/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfa1d51fd220ee5281176f565581cd9dfeaa380/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs?ref=1bfa1d51fd220ee5281176f565581cd9dfeaa380", "patch": "@@ -20,7 +20,6 @@ mod test {\n \n     #[forbid(bad_style)]\n     //~^ NOTE lint level defined here\n-    //~^^ NOTE lint level defined here\n     mod bad {\n         fn CamelCase() {} //~ ERROR function `CamelCase` should have a snake case name\n \n@@ -30,7 +29,6 @@ mod test {\n     mod warn {\n         #![warn(bad_style)]\n         //~^ NOTE lint level defined here\n-        //~| NOTE lint level defined here\n \n         fn CamelCase() {} //~ WARN function `CamelCase` should have a snake case name\n "}, {"sha": "bee5a2c45be6d4177a482f11aba8676f29da224c", "filename": "src/test/compile-fail/lint-unconditional-recursion.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bfa1d51fd220ee5281176f565581cd9dfeaa380/src%2Ftest%2Fcompile-fail%2Flint-unconditional-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfa1d51fd220ee5281176f565581cd9dfeaa380/src%2Ftest%2Fcompile-fail%2Flint-unconditional-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unconditional-recursion.rs?ref=1bfa1d51fd220ee5281176f565581cd9dfeaa380", "patch": "@@ -10,19 +10,7 @@\n \n #![deny(unconditional_recursion)]\n //~^ NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n-//~| NOTE lint level defined here\n+\n #![allow(dead_code)]\n fn foo() { //~ ERROR function cannot return without recurring\n     foo(); //~ NOTE recursive call site"}]}