{"sha": "705435fe0115e6a56112cbf4cbe8cb51bf061a18", "node_id": "C_kwDOAAsO6NoAKDcwNTQzNWZlMDExNWU2YTU2MTEyY2JmNGNiZThjYjUxYmYwNjFhMTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-26T06:39:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-26T06:39:27Z"}, "message": "Rollup merge of #109619 - compiler-errors:new-solver-still-further-specializable, r=BoxyUwU\n\nStill-further-specializable projections are ambiguous in new solver\n\nFixes https://github.com/rust-lang/rust/pull/108896/files#r1148450781\n\nr? ``@BoxyUwU`` (though feel free to re-roll)\n\n---\n\nThis can be used to create an unsound transmute function with the new solver:\n\n```rust\n#![feature(specialization)]\n\ntrait Default {\n   type Id;\n\n   fn intu(&self) -> &Self::Id;\n}\n\nimpl<T> Default for T {\n   default type Id = T;\n\n   fn intu(&self) -> &Self::Id {\n        self\n   }\n}\n\nfn transmute<T: Default<Id = U>, U: Copy>(t: T) -> U {\n    *t.intu()\n}\n\nuse std::num::NonZeroU8;\nfn main() {\n    let s = transmute::<u8, Option<NonZeroU8>>(0);\n    assert_eq!(s, None);\n}\n```", "tree": {"sha": "17f77772aba579e32335109fcd4dc5eb75c4a3bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17f77772aba579e32335109fcd4dc5eb75c4a3bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/705435fe0115e6a56112cbf4cbe8cb51bf061a18", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkH+ifCRBK7hj4Ov3rIwAAOT8IAD5yZE46UIJ1oAU8ATmV7Zsn\neFuJU6+WZTj8sNhuBwBTqL5LHtN5po33XE7VoTFfi5xTIoHPJm5gVsWqPv30vo2M\npMS5AAX+U0sCPo+11DDp6pJVjIFs6knP+eRX/Nh3tOyGQZIdPVjp7GB7czbuV3fY\n0lVR/hFarwMjo2LeDB3rIHjUwULdyZPnqxAk1pgGl76e9ctG9+k6wF0ig70vQsco\nlKoInVRc0eSXsHtNg2Y1nry9KNXWLdDoDCanQoFs2rCPnjA6D1BtpHLNDVAmmA2R\n+VFplbZPPfH06iZce88cjnpsOvWy9g1+8esWmQPLzAnUpHfdriShb79V9sRlhio=\n=NDWs\n-----END PGP SIGNATURE-----\n", "payload": "tree 17f77772aba579e32335109fcd4dc5eb75c4a3bd\nparent 236178698ab28fa9d9e9d979f42837ef468016e7\nparent 3310f72db9205d23f7900d85055c5cd0eec17814\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679812767 +0200\ncommitter GitHub <noreply@github.com> 1679812767 +0200\n\nRollup merge of #109619 - compiler-errors:new-solver-still-further-specializable, r=BoxyUwU\n\nStill-further-specializable projections are ambiguous in new solver\n\nFixes https://github.com/rust-lang/rust/pull/108896/files#r1148450781\n\nr? ``@BoxyUwU`` (though feel free to re-roll)\n\n---\n\nThis can be used to create an unsound transmute function with the new solver:\n\n```rust\n#![feature(specialization)]\n\ntrait Default {\n   type Id;\n\n   fn intu(&self) -> &Self::Id;\n}\n\nimpl<T> Default for T {\n   default type Id = T;\n\n   fn intu(&self) -> &Self::Id {\n        self\n   }\n}\n\nfn transmute<T: Default<Id = U>, U: Copy>(t: T) -> U {\n    *t.intu()\n}\n\nuse std::num::NonZeroU8;\nfn main() {\n    let s = transmute::<u8, Option<NonZeroU8>>(0);\n    assert_eq!(s, None);\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/705435fe0115e6a56112cbf4cbe8cb51bf061a18", "html_url": "https://github.com/rust-lang/rust/commit/705435fe0115e6a56112cbf4cbe8cb51bf061a18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/705435fe0115e6a56112cbf4cbe8cb51bf061a18/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "236178698ab28fa9d9e9d979f42837ef468016e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/236178698ab28fa9d9e9d979f42837ef468016e7", "html_url": "https://github.com/rust-lang/rust/commit/236178698ab28fa9d9e9d979f42837ef468016e7"}, {"sha": "3310f72db9205d23f7900d85055c5cd0eec17814", "url": "https://api.github.com/repos/rust-lang/rust/commits/3310f72db9205d23f7900d85055c5cd0eec17814", "html_url": "https://github.com/rust-lang/rust/commit/3310f72db9205d23f7900d85055c5cd0eec17814"}], "stats": {"total": 114, "additions": 111, "deletions": 3}, "files": [{"sha": "c6a56df5a5eeeb6160e3b15231781b58fac88343", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/705435fe0115e6a56112cbf4cbe8cb51bf061a18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705435fe0115e6a56112cbf4cbe8cb51bf061a18/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=705435fe0115e6a56112cbf4cbe8cb51bf061a18", "patch": "@@ -653,8 +653,8 @@ pub enum AliasRelationDirection {\n impl std::fmt::Display for AliasRelationDirection {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         match self {\n-            AliasRelationDirection::Equate => write!(f, \" == \"),\n-            AliasRelationDirection::Subtype => write!(f, \" <: \"),\n+            AliasRelationDirection::Equate => write!(f, \"==\"),\n+            AliasRelationDirection::Subtype => write!(f, \"<:\"),\n         }\n     }\n }"}, {"sha": "14c5b83c6ca72c264656ddb77ca59d1a2c31204c", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/705435fe0115e6a56112cbf4cbe8cb51bf061a18/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705435fe0115e6a56112cbf4cbe8cb51bf061a18/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=705435fe0115e6a56112cbf4cbe8cb51bf061a18", "patch": "@@ -174,7 +174,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 goal.predicate.def_id(),\n                 impl_def_id\n             )? else {\n-                return ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes);\n+                return ecx.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS);\n             };\n \n             if !assoc_def.item.defaultness(tcx).has_value() {"}, {"sha": "a54701df4ef7e70f1e7029616de196f361f60b8e", "filename": "tests/ui/traits/new-solver/specialization-transmute.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/705435fe0115e6a56112cbf4cbe8cb51bf061a18/tests%2Fui%2Ftraits%2Fnew-solver%2Fspecialization-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705435fe0115e6a56112cbf4cbe8cb51bf061a18/tests%2Fui%2Ftraits%2Fnew-solver%2Fspecialization-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fspecialization-transmute.rs?ref=705435fe0115e6a56112cbf4cbe8cb51bf061a18", "patch": "@@ -0,0 +1,30 @@\n+// compile-flags: -Ztrait-solver=next\n+\n+#![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n+\n+trait Default {\n+   type Id;\n+\n+   fn intu(&self) -> &Self::Id;\n+}\n+\n+impl<T> Default for T {\n+   default type Id = T;\n+\n+   fn intu(&self) -> &Self::Id {\n+        self\n+        //~^ ERROR cannot satisfy `T <: <T as Default>::Id`\n+   }\n+}\n+\n+fn transmute<T: Default<Id = U>, U: Copy>(t: T) -> U {\n+    *t.intu()\n+}\n+\n+use std::num::NonZeroU8;\n+fn main() {\n+    let s = transmute::<u8, Option<NonZeroU8>>(0);\n+    //~^ ERROR cannot satisfy `<u8 as Default>::Id == Option<NonZeroU8>\n+    assert_eq!(s, None);\n+}"}, {"sha": "e67c56afc0d0cf0f62a35abb121e7aa2507f7906", "filename": "tests/ui/traits/new-solver/specialization-transmute.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/705435fe0115e6a56112cbf4cbe8cb51bf061a18/tests%2Fui%2Ftraits%2Fnew-solver%2Fspecialization-transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/705435fe0115e6a56112cbf4cbe8cb51bf061a18/tests%2Fui%2Ftraits%2Fnew-solver%2Fspecialization-transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fspecialization-transmute.stderr?ref=705435fe0115e6a56112cbf4cbe8cb51bf061a18", "patch": "@@ -0,0 +1,31 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-transmute.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0284]: type annotations needed: cannot satisfy `T <: <T as Default>::Id`\n+  --> $DIR/specialization-transmute.rs:16:9\n+   |\n+LL |         self\n+   |         ^^^^ cannot satisfy `T <: <T as Default>::Id`\n+\n+error[E0284]: type annotations needed: cannot satisfy `<u8 as Default>::Id == Option<NonZeroU8>`\n+  --> $DIR/specialization-transmute.rs:27:13\n+   |\n+LL |     let s = transmute::<u8, Option<NonZeroU8>>(0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot satisfy `<u8 as Default>::Id == Option<NonZeroU8>`\n+   |\n+note: required by a bound in `transmute`\n+  --> $DIR/specialization-transmute.rs:21:25\n+   |\n+LL | fn transmute<T: Default<Id = U>, U: Copy>(t: T) -> U {\n+   |                         ^^^^^^ required by this bound in `transmute`\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0284`."}, {"sha": "02150689ee5c3668749f6c2421fa4da2ab25c958", "filename": "tests/ui/traits/new-solver/specialization-unconstrained.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/705435fe0115e6a56112cbf4cbe8cb51bf061a18/tests%2Fui%2Ftraits%2Fnew-solver%2Fspecialization-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705435fe0115e6a56112cbf4cbe8cb51bf061a18/tests%2Fui%2Ftraits%2Fnew-solver%2Fspecialization-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fspecialization-unconstrained.rs?ref=705435fe0115e6a56112cbf4cbe8cb51bf061a18", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: -Ztrait-solver=next\n+\n+#![feature(specialization)]\n+//~^ WARN the feature `specialization` is incomplete\n+\n+// Do not treat the RHS of a projection-goal as an unconstrained `Certainty::Yes` response\n+// if the impl is still further specializable.\n+\n+trait Default {\n+   type Id;\n+}\n+\n+impl<T> Default for T {\n+   default type Id = T;\n+}\n+\n+fn test<T: Default<Id = U>, U>() {}\n+\n+fn main() {\n+    test::<u32, ()>();\n+    //~^ ERROR cannot satisfy `<u32 as Default>::Id == ()`\n+}"}, {"sha": "910925cbaeb0de523b54b9c53035320438657769", "filename": "tests/ui/traits/new-solver/specialization-unconstrained.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/705435fe0115e6a56112cbf4cbe8cb51bf061a18/tests%2Fui%2Ftraits%2Fnew-solver%2Fspecialization-unconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/705435fe0115e6a56112cbf4cbe8cb51bf061a18/tests%2Fui%2Ftraits%2Fnew-solver%2Fspecialization-unconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fspecialization-unconstrained.stderr?ref=705435fe0115e6a56112cbf4cbe8cb51bf061a18", "patch": "@@ -0,0 +1,25 @@\n+warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/specialization-unconstrained.rs:3:12\n+   |\n+LL | #![feature(specialization)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n+   = help: consider using `min_specialization` instead, which is more stable and complete\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0284]: type annotations needed: cannot satisfy `<u32 as Default>::Id == ()`\n+  --> $DIR/specialization-unconstrained.rs:20:5\n+   |\n+LL |     test::<u32, ()>();\n+   |     ^^^^^^^^^^^^^^^ cannot satisfy `<u32 as Default>::Id == ()`\n+   |\n+note: required by a bound in `test`\n+  --> $DIR/specialization-unconstrained.rs:17:20\n+   |\n+LL | fn test<T: Default<Id = U>, U>() {}\n+   |                    ^^^^^^ required by this bound in `test`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0284`."}]}