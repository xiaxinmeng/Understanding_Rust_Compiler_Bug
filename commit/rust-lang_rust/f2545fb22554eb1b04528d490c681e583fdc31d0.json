{"sha": "f2545fb22554eb1b04528d490c681e583fdc31d0", "node_id": "C_kwDOAAsO6NoAKGYyNTQ1ZmIyMjU1NGViMWIwNDUyOGQ0OTBjNjgxZTU4M2ZkYzMxZDA", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-17T12:28:04Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-06-12T15:58:35Z"}, "message": "Collect VTable stats & add `-Zprint-vtable-sizes`", "tree": {"sha": "ea8549a633134a21e24d3d44a881a025d0fa229a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea8549a633134a21e24d3d44a881a025d0fa229a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2545fb22554eb1b04528d490c681e583fdc31d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2545fb22554eb1b04528d490c681e583fdc31d0", "html_url": "https://github.com/rust-lang/rust/commit/f2545fb22554eb1b04528d490c681e583fdc31d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2545fb22554eb1b04528d490c681e583fdc31d0/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb882fa998571e8a7ec1c06bb5d9dd9bc3423629", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb882fa998571e8a7ec1c06bb5d9dd9bc3423629", "html_url": "https://github.com/rust-lang/rust/commit/cb882fa998571e8a7ec1c06bb5d9dd9bc3423629"}], "stats": {"total": 156, "additions": 151, "deletions": 5}, "files": [{"sha": "f8dda23ef9cf6a6b530b34ec6a92f985c6d977d6", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2545fb22554eb1b04528d490c681e583fdc31d0/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2545fb22554eb1b04528d490c681e583fdc31d0/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=f2545fb22554eb1b04528d490c681e583fdc31d0", "patch": "@@ -430,6 +430,13 @@ fn run_compiler(\n                 sess.code_stats.print_type_sizes();\n             }\n \n+            if sess.opts.unstable_opts.print_vtable_sizes {\n+                let crate_name =\n+                    compiler.session().opts.crate_name.as_deref().unwrap_or(\"<UNKNOWN_CRATE>\");\n+\n+                sess.code_stats.print_vtable_sizes(crate_name);\n+            }\n+\n             let linker = queries.linker()?;\n             Ok(Some(linker))\n         })?;"}, {"sha": "5e3ea71f0e768ef9f23b598e9197417b73c9c838", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2545fb22554eb1b04528d490c681e583fdc31d0/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2545fb22554eb1b04528d490c681e583fdc31d0/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=f2545fb22554eb1b04528d490c681e583fdc31d0", "patch": "@@ -333,6 +333,7 @@ pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Se\n                 };\n \n                 let prof = compiler.sess.prof.clone();\n+\n                 prof.generic_activity(\"drop_compiler\").run(move || drop(compiler));\n                 r\n             })"}, {"sha": "be6bd913790217238057c12273a227dc3e56d415", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/f2545fb22554eb1b04528d490c681e583fdc31d0/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2545fb22554eb1b04528d490c681e583fdc31d0/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=f2545fb22554eb1b04528d490c681e583fdc31d0", "patch": "@@ -24,6 +24,7 @@ use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str, validate_a\n use rustc_passes::{self, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n use rustc_resolve::Resolver;\n+use rustc_session::code_stats::VTableSizeInfo;\n use rustc_session::config::{CrateType, Input, OutFileName, OutputFilenames, OutputType};\n use rustc_session::cstore::{MetadataLoader, Untracked};\n use rustc_session::output::filename_for_input;\n@@ -866,6 +867,99 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n         sess.time(\"check_lint_expectations\", || tcx.check_expectations(None));\n     });\n \n+    if sess.opts.unstable_opts.print_vtable_sizes {\n+        let traits = tcx.traits(LOCAL_CRATE);\n+\n+        for &tr in traits {\n+            if !tcx.check_is_object_safe(tr) {\n+                continue;\n+            }\n+\n+            let name = ty::print::with_no_trimmed_paths!(tcx.def_path_str(tr));\n+\n+            let mut first_dsa = true;\n+\n+            // Number of vtable entries, if we didn't have upcasting\n+            let mut unupcasted_cost = 0;\n+            // Number of vtable entries needed solely for upcasting\n+            let mut upcast_cost = 0;\n+\n+            let trait_ref = ty::Binder::dummy(ty::TraitRef::identity(tcx, tr));\n+\n+            // A slightly edited version of the code in `rustc_trait_selection::traits::vtable::vtable_entries`,\n+            // that works without self type and just counts number of entries.\n+            //\n+            // Note that this is technically wrong, for traits which have associated types in supertraits:\n+            //\n+            //   trait A: AsRef<Self::T> + AsRef<()> { type T; }\n+            //\n+            // Without self type we can't normalize `Self::T`, so we can't know if `AsRef<Self::T>` and\n+            // `AsRef<()>` are the same trait, thus we assume that those are different, and potentially\n+            // over-estimate how many vtable entries there are.\n+            //\n+            // Similarly this is wrong for traits that have methods with possibly-impossible bounds.\n+            // For example:\n+            //\n+            //   trait B<T> { fn f(&self) where T: Copy; }\n+            //\n+            // Here `dyn B<u8>` will have 4 entries, while `dyn B<String>` will only have 3.\n+            // However, since we don't know `T`, we can't know if `T: Copy` holds or not,\n+            // thus we lean on the bigger side and say it has 4 entries.\n+            traits::vtable::prepare_vtable_segments(tcx, trait_ref, |segment| {\n+                match segment {\n+                    traits::vtable::VtblSegment::MetadataDSA => {\n+                        // If this is the first dsa, it would be included either way,\n+                        // otherwise it's needed for upcasting\n+                        if std::mem::take(&mut first_dsa) {\n+                            unupcasted_cost += 3;\n+                        } else {\n+                            upcast_cost += 3;\n+                        }\n+                    }\n+\n+                    traits::vtable::VtblSegment::TraitOwnEntries { trait_ref, emit_vptr } => {\n+                        let existential_trait_ref = trait_ref.map_bound(|trait_ref| {\n+                            ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref)\n+                        });\n+\n+                        // Lookup the shape of vtable for the trait.\n+                        let own_existential_entries =\n+                            tcx.own_existential_vtable_entries(existential_trait_ref.def_id());\n+\n+                        let own_entries = own_existential_entries.iter().copied().map(|_def_id| {\n+                            // The original code here ignores the method if its predicates are impossible.\n+                            // We can't really do that as, for example, all not trivial bounds on generic\n+                            // parameters are impossible (since we don't know the parameters...),\n+                            // see the comment above.\n+\n+                            1\n+                        });\n+\n+                        unupcasted_cost += own_entries.sum::<usize>();\n+\n+                        if emit_vptr {\n+                            upcast_cost += 1;\n+                        }\n+                    }\n+                }\n+\n+                std::ops::ControlFlow::Continue::<std::convert::Infallible>(())\n+            });\n+\n+            sess.code_stats.record_vtable_size(\n+                tr,\n+                &name,\n+                VTableSizeInfo {\n+                    trait_name: name.clone(),\n+                    size_words_without_upcasting: unupcasted_cost,\n+                    size_words_with_upcasting: unupcasted_cost + upcast_cost,\n+                    difference_words: upcast_cost,\n+                    difference_percent: upcast_cost as f64 / unupcasted_cost as f64 * 100.,\n+                },\n+            )\n+        }\n+    }\n+\n     Ok(())\n }\n "}, {"sha": "f76263de13f62a6d3aeed61513054d0377b715f7", "filename": "compiler/rustc_session/src/code_stats.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f2545fb22554eb1b04528d490c681e583fdc31d0/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2545fb22554eb1b04528d490c681e583fdc31d0/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs?ref=f2545fb22554eb1b04528d490c681e583fdc31d0", "patch": "@@ -1,5 +1,6 @@\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lock;\n+use rustc_span::def_id::DefId;\n use rustc_span::Symbol;\n use rustc_target::abi::{Align, Size};\n use std::cmp;\n@@ -65,9 +66,18 @@ pub struct TypeSizeInfo {\n     pub variants: Vec<VariantInfo>,\n }\n \n+pub struct VTableSizeInfo {\n+    pub trait_name: String,\n+    pub size_words_without_upcasting: usize,\n+    pub size_words_with_upcasting: usize,\n+    pub difference_words: usize,\n+    pub difference_percent: f64,\n+}\n+\n #[derive(Default)]\n pub struct CodeStats {\n     type_sizes: Lock<FxHashSet<TypeSizeInfo>>,\n+    vtable_sizes: Lock<FxHashMap<DefId, VTableSizeInfo>>,\n }\n \n impl CodeStats {\n@@ -101,6 +111,14 @@ impl CodeStats {\n         self.type_sizes.borrow_mut().insert(info);\n     }\n \n+    pub fn record_vtable_size(&self, trait_did: DefId, trait_name: &str, info: VTableSizeInfo) {\n+        let prev = self.vtable_sizes.lock().insert(trait_did, info);\n+        assert!(\n+            prev.is_none(),\n+            \"size of vtable for `{trait_name}` ({trait_did:?}) is already recorded\"\n+        );\n+    }\n+\n     pub fn print_type_sizes(&self) {\n         let type_sizes = self.type_sizes.borrow();\n         let mut sorted: Vec<_> = type_sizes.iter().collect();\n@@ -196,4 +214,28 @@ impl CodeStats {\n             }\n         }\n     }\n+\n+    pub fn print_vtable_sizes(&self, crate_name: &str) {\n+        let mut rr = std::mem::take(&mut *self.vtable_sizes.lock()).into_iter().collect::<Vec<_>>();\n+\n+        rr.sort_by(|(_, stats_a), (_, stats_b)| {\n+            stats_b.difference_percent.total_cmp(&stats_a.difference_percent)\n+        });\n+\n+        for (\n+            _,\n+            VTableSizeInfo {\n+                trait_name,\n+                size_words_without_upcasting,\n+                size_words_with_upcasting,\n+                difference_words,\n+                difference_percent,\n+            },\n+        ) in rr\n+        {\n+            println!(\n+                r#\"print-vtable-sizes {{ \"crate_name\": \"{crate_name}\", \"trait_name\": \"{trait_name}\", \"size_unupcastable_words\": \"{size_words_without_upcasting}\", \"size_upcastable_words\": \"{size_words_with_upcasting}\", diff: \"{difference_words}\", diff_p: \"{difference_percent}\" }}\"#\n+            );\n+        }\n+    }\n }"}, {"sha": "d57aa820fcb47b180b4b9f85db20fc3a160d0c9f", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2545fb22554eb1b04528d490c681e583fdc31d0/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2545fb22554eb1b04528d490c681e583fdc31d0/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=f2545fb22554eb1b04528d490c681e583fdc31d0", "patch": "@@ -27,7 +27,7 @@ pub use lint::{declare_lint, declare_lint_pass, declare_tool_lint, impl_lint_pas\n pub use rustc_lint_defs as lint;\n pub mod parse;\n \n-mod code_stats;\n+pub mod code_stats;\n #[macro_use]\n pub mod config;\n pub mod cstore;"}, {"sha": "b626c721481dbd187097a9805dea59c6f77f0441", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2545fb22554eb1b04528d490c681e583fdc31d0/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2545fb22554eb1b04528d490c681e583fdc31d0/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=f2545fb22554eb1b04528d490c681e583fdc31d0", "patch": "@@ -1632,6 +1632,8 @@ options! {\n         \"print the result of the monomorphization collection pass\"),\n     print_type_sizes: bool = (false, parse_bool, [UNTRACKED],\n         \"print layout information for each type encountered (default: no)\"),\n+    print_vtable_sizes: bool = (false, parse_bool, [UNTRACKED],\n+        \"print size comparison between old and new vtable layouts (default: no)\"),\n     proc_macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n          \"show backtraces for panics during proc-macro execution (default: no)\"),\n     proc_macro_execution_strategy: ProcMacroExecutionStrategy = (ProcMacroExecutionStrategy::SameThread,"}, {"sha": "ab58684ffd9c49a772d9ffe0b89a7dacf0cd6d67", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2545fb22554eb1b04528d490c681e583fdc31d0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2545fb22554eb1b04528d490c681e583fdc31d0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=f2545fb22554eb1b04528d490c681e583fdc31d0", "patch": "@@ -21,7 +21,7 @@ mod structural_match;\n mod structural_normalize;\n #[cfg_attr(not(bootstrap), allow(hidden_glob_reexports))]\n mod util;\n-mod vtable;\n+pub mod vtable;\n pub mod wf;\n \n use crate::infer::outlives::env::OutlivesEnvironment;"}, {"sha": "96b8e0b82b6af62a4df6d1e5650730456f8e15d7", "filename": "compiler/rustc_trait_selection/src/traits/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2545fb22554eb1b04528d490c681e583fdc31d0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2545fb22554eb1b04528d490c681e583fdc31d0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs?ref=f2545fb22554eb1b04528d490c681e583fdc31d0", "patch": "@@ -15,13 +15,13 @@ use std::fmt::Debug;\n use std::ops::ControlFlow;\n \n #[derive(Clone, Debug)]\n-pub(super) enum VtblSegment<'tcx> {\n+pub enum VtblSegment<'tcx> {\n     MetadataDSA,\n     TraitOwnEntries { trait_ref: ty::PolyTraitRef<'tcx>, emit_vptr: bool },\n }\n \n /// Prepare the segments for a vtable\n-pub(super) fn prepare_vtable_segments<'tcx, T>(\n+pub fn prepare_vtable_segments<'tcx, T>(\n     tcx: TyCtxt<'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>,\n     mut segment_visitor: impl FnMut(VtblSegment<'tcx>) -> ControlFlow<T>,"}]}