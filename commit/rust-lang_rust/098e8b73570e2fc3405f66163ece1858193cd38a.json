{"sha": "098e8b73570e2fc3405f66163ece1858193cd38a", "node_id": "C_kwDOAAsO6NoAKDA5OGU4YjczNTcwZTJmYzM0MDVmNjYxNjNlY2UxODU4MTkzY2QzOGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-03T18:58:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-03T18:58:53Z"}, "message": "Rollup merge of #98218 - kpreid:nostdarc, r=joshtriplett\n\nDocument the conditional existence of `alloc::sync` and `alloc::task`.\n\n`alloc` declares\n\n```rust\n#[cfg(target_has_atomic = \"ptr\")]\npub mod sync;\n```\n\nbut there is no public documentation of this condition. This PR fixes that, so that users of `alloc` can understand how to make their code compile everywhere `alloc` does, if they are writing a library with impls for `Arc`.\n\nThe wording is copied from `std::sync::atomic::AtomicPtr`, with additional advice on how to `#[cfg]` for it.\n\nI feel quite uncertain about whether the paragraph I added to `Arc`'s documentation should actually be there, as it is a distraction for anyone using `std`. On the other hand, maybe more reminders that no_std exists would benefit the ecosystem.\n\nNote: `target_has_atomic` is [stabilized](https://github.com/rust-lang/rust/issues/32976) but [not yet documented in the reference](https://github.com/rust-lang/reference/pull/1171).", "tree": {"sha": "653f724165f7d1a1d4efaf259a2d8e1ccd2f07be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/653f724165f7d1a1d4efaf259a2d8e1ccd2f07be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/098e8b73570e2fc3405f66163ece1858193cd38a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjOzDtCRBK7hj4Ov3rIwAAtDIIAAbv1CgC5kvDcvjhW5TJWnp6\n62eH5lf126fpGP2QvhGnrMUoo2gSYvLOLB4d6lRSatNsLv891YtBnyQpcqBcVz7a\n/efeNVuL/EZgDK6VZmGXxfMH6rc3jQcqkUSTE8HWzC/N3BHE/Dw1xiDctB68m/Av\n0+cqsZBNYSBCqB+dJO2THfhEpzFdHfs6AEwAbIYMopj67JwbjMYAaqW2SsWjCXoM\ncoTe6+KvH7YakOs9v6j4U16aLQ/t7HRz5W2NFsCRr9bIhl9Vrc47nukbqWIhXzW5\nBxCl+2b/V1dt7vuaIzhxJtOzAv9D4qKkSrfwE2dBImWIHvkuRqKLb4crHFYG4/g=\n=RBRK\n-----END PGP SIGNATURE-----\n", "payload": "tree 653f724165f7d1a1d4efaf259a2d8e1ccd2f07be\nparent 33d351972ad9c43bc30e87edd2765de9a4898629\nparent 5dcc418f62e14580a319b2b8ec24645abbc1569e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1664823533 +0200\ncommitter GitHub <noreply@github.com> 1664823533 +0200\n\nRollup merge of #98218 - kpreid:nostdarc, r=joshtriplett\n\nDocument the conditional existence of `alloc::sync` and `alloc::task`.\n\n`alloc` declares\n\n```rust\n#[cfg(target_has_atomic = \"ptr\")]\npub mod sync;\n```\n\nbut there is no public documentation of this condition. This PR fixes that, so that users of `alloc` can understand how to make their code compile everywhere `alloc` does, if they are writing a library with impls for `Arc`.\n\nThe wording is copied from `std::sync::atomic::AtomicPtr`, with additional advice on how to `#[cfg]` for it.\n\nI feel quite uncertain about whether the paragraph I added to `Arc`'s documentation should actually be there, as it is a distraction for anyone using `std`. On the other hand, maybe more reminders that no_std exists would benefit the ecosystem.\n\nNote: `target_has_atomic` is [stabilized](https://github.com/rust-lang/rust/issues/32976) but [not yet documented in the reference](https://github.com/rust-lang/reference/pull/1171).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/098e8b73570e2fc3405f66163ece1858193cd38a", "html_url": "https://github.com/rust-lang/rust/commit/098e8b73570e2fc3405f66163ece1858193cd38a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/098e8b73570e2fc3405f66163ece1858193cd38a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33d351972ad9c43bc30e87edd2765de9a4898629", "url": "https://api.github.com/repos/rust-lang/rust/commits/33d351972ad9c43bc30e87edd2765de9a4898629", "html_url": "https://github.com/rust-lang/rust/commit/33d351972ad9c43bc30e87edd2765de9a4898629"}, {"sha": "5dcc418f62e14580a319b2b8ec24645abbc1569e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dcc418f62e14580a319b2b8ec24645abbc1569e", "html_url": "https://github.com/rust-lang/rust/commit/5dcc418f62e14580a319b2b8ec24645abbc1569e"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "df315dad8932405cd4f524d33a8113dfb21f36e7", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/098e8b73570e2fc3405f66163ece1858193cd38a/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/098e8b73570e2fc3405f66163ece1858193cd38a/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=098e8b73570e2fc3405f66163ece1858193cd38a", "patch": "@@ -3,6 +3,10 @@\n //! Thread-safe reference-counting pointers.\n //!\n //! See the [`Arc<T>`][Arc] documentation for more details.\n+//!\n+//! **Note**: This module is only available on platforms that support atomic\n+//! loads and stores of pointers. This may be detected at compile time using\n+//! `#[cfg(target_has_atomic = \"ptr\")]`.\n \n use core::any::Any;\n use core::borrow;\n@@ -82,6 +86,11 @@ macro_rules! acquire {\n /// [`Mutex`][mutex], [`RwLock`][rwlock], or one of the [`Atomic`][atomic]\n /// types.\n ///\n+/// **Note**: This type is only available on platforms that support atomic\n+/// loads and stores of pointers, which includes all platforms that support\n+/// the `std` crate but not all those which only support [`alloc`](crate).\n+/// This may be detected at compile time using `#[cfg(target_has_atomic = \"ptr\")]`.\n+///\n /// ## Thread Safety\n ///\n /// Unlike [`Rc<T>`], `Arc<T>` uses atomic operations for its reference"}, {"sha": "9d8e309a978d91e3245eeaf76268704cfcb0639f", "filename": "library/alloc/src/task.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/098e8b73570e2fc3405f66163ece1858193cd38a/library%2Falloc%2Fsrc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/098e8b73570e2fc3405f66163ece1858193cd38a/library%2Falloc%2Fsrc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftask.rs?ref=098e8b73570e2fc3405f66163ece1858193cd38a", "patch": "@@ -1,5 +1,11 @@\n #![stable(feature = \"wake_trait\", since = \"1.51.0\")]\n+\n //! Types and Traits for working with asynchronous tasks.\n+//!\n+//! **Note**: This module is only available on platforms that support atomic\n+//! loads and stores of pointers. This may be detected at compile time using\n+//! `#[cfg(target_has_atomic = \"ptr\")]`.\n+\n use core::mem::ManuallyDrop;\n use core::task::{RawWaker, RawWakerVTable, Waker};\n "}]}