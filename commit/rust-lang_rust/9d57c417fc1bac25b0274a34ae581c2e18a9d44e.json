{"sha": "9d57c417fc1bac25b0274a34ae581c2e18a9d44e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNTdjNDE3ZmMxYmFjMjViMDI3NGEzNGFlNTgxYzJlMThhOWQ0NGU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-10T01:03:24Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-10-21T01:43:56Z"}, "message": "rustc_codegen_llvm: create `DIFile`s from just `SourceFile`s.", "tree": {"sha": "b28da957c689dbcee54efea4f4cae81000688787", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b28da957c689dbcee54efea4f4cae81000688787"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d57c417fc1bac25b0274a34ae581c2e18a9d44e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d57c417fc1bac25b0274a34ae581c2e18a9d44e", "html_url": "https://github.com/rust-lang/rust/commit/9d57c417fc1bac25b0274a34ae581c2e18a9d44e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d57c417fc1bac25b0274a34ae581c2e18a9d44e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bfb462b58db63aaa0a43bacde39687928fe901e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bfb462b58db63aaa0a43bacde39687928fe901e", "html_url": "https://github.com/rust-lang/rust/commit/2bfb462b58db63aaa0a43bacde39687928fe901e"}], "stats": {"total": 75, "additions": 21, "deletions": 54}, "files": [{"sha": "4c352c7ae0c3ddd0bb0fb4122c510478281c6f90", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d57c417fc1bac25b0274a34ae581c2e18a9d44e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d57c417fc1bac25b0274a34ae581c2e18a9d44e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs?ref=9d57c417fc1bac25b0274a34ae581c2e18a9d44e", "patch": "@@ -76,7 +76,7 @@ fn make_mir_scope(\n     }\n \n     let loc = cx.lookup_debug_loc(scope_data.span.lo());\n-    let file_metadata = file_metadata(cx, &loc.file, debug_context.defining_crate);\n+    let file_metadata = file_metadata(cx, &loc.file);\n \n     let scope_metadata = unsafe {\n         Some(llvm::LLVMRustDIBuilderCreateLexicalBlock("}, {"sha": "10dd590652949a3e54d209ea0e23a8f1ac79a6d8", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d57c417fc1bac25b0274a34ae581c2e18a9d44e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d57c417fc1bac25b0274a34ae581c2e18a9d44e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fdoc.rs?ref=9d57c417fc1bac25b0274a34ae581c2e18a9d44e", "patch": "@@ -28,7 +28,7 @@\n //! utilizing a cache. The way to get a shared metadata node when needed is\n //! thus to just call the corresponding function in this module:\n //!\n-//!     let file_metadata = file_metadata(crate_context, path);\n+//!     let file_metadata = file_metadata(cx, file);\n //!\n //! The function will take care of probing the cache for an existing node for\n //! that exact file path."}, {"sha": "73c1f73ec7fe9fc00c9ebdfeba717a622085bfce", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9d57c417fc1bac25b0274a34ae581c2e18a9d44e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d57c417fc1bac25b0274a34ae581c2e18a9d44e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=9d57c417fc1bac25b0274a34ae581c2e18a9d44e", "patch": "@@ -26,7 +26,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_fs_util::path_to_c_string;\n use rustc_hir::def::CtorKind;\n-use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::ich::NodeIdHashingMode;\n use rustc_middle::mir::interpret::truncate;\n@@ -760,16 +760,12 @@ fn hex_encode(data: &[u8]) -> String {\n     hex_string\n }\n \n-pub fn file_metadata(\n-    cx: &CodegenCx<'ll, '_>,\n-    source_file: &SourceFile,\n-    defining_crate: CrateNum,\n-) -> &'ll DIFile {\n-    debug!(\"file_metadata: file_name: {}, defining_crate: {}\", source_file.name, defining_crate);\n+pub fn file_metadata(cx: &CodegenCx<'ll, '_>, source_file: &SourceFile) -> &'ll DIFile {\n+    debug!(\"file_metadata: file_name: {}\", source_file.name);\n \n     let hash = Some(&source_file.src_hash);\n     let file_name = Some(source_file.name.to_string());\n-    let directory = if defining_crate == LOCAL_CRATE {\n+    let directory = if source_file.is_real_file() && !source_file.is_imported() {\n         Some(cx.sess().working_dir.0.to_string_lossy().to_string())\n     } else {\n         // If the path comes from an upstream crate we assume it has been made\n@@ -1835,7 +1831,7 @@ impl<'tcx> VariantInfo<'_, 'tcx> {\n                 if !span.is_dummy() {\n                     let loc = cx.lookup_debug_loc(span.lo());\n                     return Some(SourceInfo {\n-                        file: file_metadata(cx, &loc.file, def_id.krate),\n+                        file: file_metadata(cx, &loc.file),\n                         line: loc.line.unwrap_or(UNKNOWN_LINE_NUMBER),\n                     });\n                 }\n@@ -2474,7 +2470,7 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n \n     let (file_metadata, line_number) = if !span.is_dummy() {\n         let loc = cx.lookup_debug_loc(span.lo());\n-        (file_metadata(cx, &loc.file, LOCAL_CRATE), loc.line)\n+        (file_metadata(cx, &loc.file), loc.line)\n     } else {\n         (unknown_file_metadata(cx), None)\n     };\n@@ -2576,9 +2572,8 @@ pub fn create_vtable_metadata(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>, vtable: &\n pub fn extend_scope_to_file(\n     cx: &CodegenCx<'ll, '_>,\n     scope_metadata: &'ll DIScope,\n-    file: &rustc_span::SourceFile,\n-    defining_crate: CrateNum,\n+    file: &SourceFile,\n ) -> &'ll DILexicalBlock {\n-    let file_metadata = file_metadata(cx, &file, defining_crate);\n+    let file_metadata = file_metadata(cx, file);\n     unsafe { llvm::LLVMRustDIBuilderCreateLexicalBlockFile(DIB(cx), scope_metadata, file_metadata) }\n }"}, {"sha": "32752fa61bae4efa5f2f1799eb1e7eb796f4a1c1", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d57c417fc1bac25b0274a34ae581c2e18a9d44e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d57c417fc1bac25b0274a34ae581c2e18a9d44e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=9d57c417fc1bac25b0274a34ae581c2e18a9d44e", "patch": "@@ -21,7 +21,7 @@ use rustc_codegen_ssa::debuginfo::type_names;\n use rustc_codegen_ssa::mir::debuginfo::{DebugScope, FunctionDebugContext, VariableKind};\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, DefIdMap, LOCAL_CRATE};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir;\n use rustc_middle::ty::layout::HasTyCtxt;\n@@ -246,7 +246,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         let def_id = instance.def_id();\n         let containing_scope = get_containing_scope(self, instance);\n         let loc = self.lookup_debug_loc(span.lo());\n-        let file_metadata = file_metadata(self, &loc.file, def_id.krate);\n+        let file_metadata = file_metadata(self, &loc.file);\n \n         let function_type_metadata = unsafe {\n             let fn_signature = get_function_signature(self, fn_abi);\n@@ -318,10 +318,8 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             file_start_pos: BytePos(0),\n             file_end_pos: BytePos(0),\n         };\n-        let mut fn_debug_context = FunctionDebugContext {\n-            scopes: IndexVec::from_elem(null_scope, &mir.source_scopes),\n-            defining_crate: def_id.krate,\n-        };\n+        let mut fn_debug_context =\n+            FunctionDebugContext { scopes: IndexVec::from_elem(null_scope, &mir.source_scopes) };\n \n         // Fill in all the scopes, with the information from the MIR body.\n         compute_mir_scopes(self, mir, fn_metadata, &mut fn_debug_context);\n@@ -509,9 +507,8 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         &self,\n         scope_metadata: &'ll DIScope,\n         file: &rustc_span::SourceFile,\n-        defining_crate: CrateNum,\n     ) -> &'ll DILexicalBlock {\n-        metadata::extend_scope_to_file(&self, scope_metadata, file, defining_crate)\n+        metadata::extend_scope_to_file(&self, scope_metadata, file)\n     }\n \n     fn debuginfo_finalize(&self) {\n@@ -522,15 +519,14 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     // names (choose between `dbg`, `debug`, `debuginfo`, `debug_info` etc.).\n     fn create_dbg_var(\n         &self,\n-        dbg_context: &FunctionDebugContext<&'ll DIScope>,\n         variable_name: Symbol,\n         variable_type: Ty<'tcx>,\n         scope_metadata: &'ll DIScope,\n         variable_kind: VariableKind,\n         span: Span,\n     ) -> &'ll DIVariable {\n         let loc = self.lookup_debug_loc(span.lo());\n-        let file_metadata = file_metadata(self, &loc.file, dbg_context.defining_crate);\n+        let file_metadata = file_metadata(self, &loc.file);\n \n         let type_metadata = type_metadata(self, variable_type, span);\n "}, {"sha": "09b6ba9a2ef6065358e62d1e921e056b90ed19cc", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9d57c417fc1bac25b0274a34ae581c2e18a9d44e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d57c417fc1bac25b0274a34ae581c2e18a9d44e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=9d57c417fc1bac25b0274a34ae581c2e18a9d44e", "patch": "@@ -1,5 +1,4 @@\n use crate::traits::*;\n-use rustc_hir::def_id::CrateNum;\n use rustc_index::vec::IndexVec;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir;\n@@ -15,7 +14,6 @@ use super::{FunctionCx, LocalRef};\n \n pub struct FunctionDebugContext<D> {\n     pub scopes: IndexVec<mir::SourceScope, DebugScope<D>>,\n-    pub defining_crate: CrateNum,\n }\n \n #[derive(Copy, Clone)]\n@@ -95,19 +93,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         pos: BytePos,\n     ) -> Option<Bx::DIScope> {\n         let debug_context = self.debug_context.as_ref()?;\n-        let scope_metadata = debug_context.scopes[scope_id].scope_metadata;\n+        let scope_metadata = debug_context.scopes[scope_id].scope_metadata?;\n         if pos < debug_context.scopes[scope_id].file_start_pos\n             || pos >= debug_context.scopes[scope_id].file_end_pos\n         {\n             let sm = self.cx.sess().source_map();\n-            let defining_crate = debug_context.defining_crate;\n-            Some(self.cx.extend_scope_to_file(\n-                scope_metadata.unwrap(),\n-                &sm.lookup_char_pos(pos).file,\n-                defining_crate,\n-            ))\n+            Some(self.cx.extend_scope_to_file(scope_metadata, &sm.lookup_char_pos(pos).file))\n         } else {\n-            scope_metadata\n+            Some(scope_metadata)\n         }\n     }\n \n@@ -158,14 +151,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     // FIXME(eddyb) is this `+ 1` needed at all?\n                     let kind = VariableKind::ArgumentVariable(arg_index + 1);\n \n-                    self.cx.create_dbg_var(\n-                        self.debug_context.as_ref().unwrap(),\n-                        name,\n-                        self.monomorphize(&decl.ty),\n-                        scope,\n-                        kind,\n-                        span,\n-                    )\n+                    self.cx.create_dbg_var(name, self.monomorphize(&decl.ty), scope, kind, span)\n                 });\n \n                 Some(PerLocalVarDebugInfo {\n@@ -340,14 +326,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 } else {\n                     VariableKind::LocalVariable\n                 };\n-                self.cx.create_dbg_var(\n-                    self.debug_context.as_ref().unwrap(),\n-                    var.name,\n-                    var_ty,\n-                    scope,\n-                    var_kind,\n-                    span,\n-                )\n+                self.cx.create_dbg_var(var.name, var_ty, scope, var_kind, span)\n             });\n \n             per_local[var.place.local].push(PerLocalVarDebugInfo {"}, {"sha": "79654dc3633d4f64fae8bcb749fd2518f581b4f8", "filename": "compiler/rustc_codegen_ssa/src/traits/debuginfo.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d57c417fc1bac25b0274a34ae581c2e18a9d44e/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d57c417fc1bac25b0274a34ae581c2e18a9d44e/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fdebuginfo.rs?ref=9d57c417fc1bac25b0274a34ae581c2e18a9d44e", "patch": "@@ -1,6 +1,5 @@\n use super::BackendTypes;\n use crate::mir::debuginfo::{FunctionDebugContext, VariableKind};\n-use rustc_hir::def_id::CrateNum;\n use rustc_middle::mir;\n use rustc_middle::ty::{Instance, Ty};\n use rustc_span::{SourceFile, Span, Symbol};\n@@ -26,15 +25,13 @@ pub trait DebugInfoMethods<'tcx>: BackendTypes {\n         &self,\n         scope_metadata: Self::DIScope,\n         file: &SourceFile,\n-        defining_crate: CrateNum,\n     ) -> Self::DIScope;\n     fn debuginfo_finalize(&self);\n \n     // FIXME(eddyb) find a common convention for all of the debuginfo-related\n     // names (choose between `dbg`, `debug`, `debuginfo`, `debug_info` etc.).\n     fn create_dbg_var(\n         &self,\n-        dbg_context: &FunctionDebugContext<Self::DIScope>,\n         variable_name: Symbol,\n         variable_type: Ty<'tcx>,\n         scope_metadata: Self::DIScope,"}]}