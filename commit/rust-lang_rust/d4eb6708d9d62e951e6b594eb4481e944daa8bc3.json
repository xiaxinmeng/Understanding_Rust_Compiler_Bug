{"sha": "d4eb6708d9d62e951e6b594eb4481e944daa8bc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZWI2NzA4ZDlkNjJlOTUxZTZiNTk0ZWI0NDgxZTk0NGRhYThiYzM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-19T21:35:09Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-19T21:35:09Z"}, "message": "Track in-scope derive helpers during nameres", "tree": {"sha": "fdb5a37e1cb811000e381aeacfe593edb193a0e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdb5a37e1cb811000e381aeacfe593edb193a0e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4eb6708d9d62e951e6b594eb4481e944daa8bc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4eb6708d9d62e951e6b594eb4481e944daa8bc3", "html_url": "https://github.com/rust-lang/rust/commit/d4eb6708d9d62e951e6b594eb4481e944daa8bc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4eb6708d9d62e951e6b594eb4481e944daa8bc3/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cb5920372017b81b954705c03d0b24e60c3e223", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cb5920372017b81b954705c03d0b24e60c3e223", "html_url": "https://github.com/rust-lang/rust/commit/7cb5920372017b81b954705c03d0b24e60c3e223"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "3896be25d8eb6dce043c2933cc94b19c0d179e06", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d4eb6708d9d62e951e6b594eb4481e944daa8bc3/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4eb6708d9d62e951e6b594eb4481e944daa8bc3/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=d4eb6708d9d62e951e6b594eb4481e944daa8bc3", "patch": "@@ -43,7 +43,7 @@ use crate::{\n     UnresolvedMacro,\n };\n \n-use super::proc_macro::ProcMacroDef;\n+use super::proc_macro::{ProcMacroDef, ProcMacroKind};\n \n const GLOB_RECURSION_LIMIT: usize = 100;\n const EXPANSION_DEPTH_LIMIT: usize = 128;\n@@ -101,6 +101,7 @@ pub(super) fn collect_defs(\n         exports_proc_macros: false,\n         from_glob_import: Default::default(),\n         ignore_attrs_on: FxHashSet::default(),\n+        derive_helpers_in_scope: FxHashMap::default(),\n     };\n     match block {\n         Some(block) => {\n@@ -247,6 +248,9 @@ struct DefCollector<'a> {\n     exports_proc_macros: bool,\n     from_glob_import: PerNsGlobImports,\n     ignore_attrs_on: FxHashSet<InFile<ModItem>>,\n+    /// Tracks which custom derives are in scope for an item, to allow resolution of derive helper\n+    /// attributes.\n+    derive_helpers_in_scope: FxHashMap<AstId<ast::Item>, Vec<Name>>,\n }\n \n impl DefCollector<'_> {\n@@ -950,21 +954,35 @@ impl DefCollector<'_> {\n         // First, fetch the raw expansion result for purposes of error reporting. This goes through\n         // `macro_expand_error` to avoid depending on the full expansion result (to improve\n         // incrementality).\n+        let loc: MacroCallLoc = self.db.lookup_intern_macro(macro_call_id);\n         let err = self.db.macro_expand_error(macro_call_id);\n         if let Some(err) = err {\n-            let loc: MacroCallLoc = self.db.lookup_intern_macro(macro_call_id);\n-\n             let diag = match err {\n                 hir_expand::ExpandError::UnresolvedProcMacro => {\n                     // Missing proc macros are non-fatal, so they are handled specially.\n-                    DefDiagnostic::unresolved_proc_macro(module_id, loc.kind)\n+                    DefDiagnostic::unresolved_proc_macro(module_id, loc.kind.clone())\n                 }\n-                _ => DefDiagnostic::macro_error(module_id, loc.kind, err.to_string()),\n+                _ => DefDiagnostic::macro_error(module_id, loc.kind.clone(), err.to_string()),\n             };\n \n             self.def_map.diagnostics.push(diag);\n         }\n \n+        // If we've just resolved a derive, record its helper attributes.\n+        if let MacroCallKind::Derive { ast_id, .. } = &loc.kind {\n+            if loc.def.krate != self.def_map.krate {\n+                let def_map = self.db.crate_def_map(loc.def.krate);\n+                if let Some(def) = def_map.exported_proc_macros.get(&loc.def) {\n+                    if let ProcMacroKind::CustomDerive { helpers } = &def.kind {\n+                        self.derive_helpers_in_scope\n+                            .entry(*ast_id)\n+                            .or_default()\n+                            .extend(helpers.iter().cloned());\n+                    }\n+                }\n+            }\n+        }\n+\n         // Then, fetch and process the item tree. This will reuse the expansion result from above.\n         let item_tree = self.db.file_item_tree(file_id);\n         let mod_dir = self.mod_dirs[&module_id].clone();\n@@ -1120,9 +1138,8 @@ impl ModCollector<'_, '_> {\n             }\n \n             if let Err(()) = self.resolve_attributes(&attrs, item) {\n-                // Do not process the item. It has at least one non-builtin attribute, which *must*\n-                // resolve to a proc macro (or fail to resolve), so we'll never see this item during\n-                // normal name resolution.\n+                // Do not process the item. It has at least one non-builtin attribute, so the\n+                // fixed-point algorithm is required to resolve the rest of them.\n                 continue;\n             }\n \n@@ -1721,6 +1738,7 @@ mod tests {\n             exports_proc_macros: false,\n             from_glob_import: Default::default(),\n             ignore_attrs_on: FxHashSet::default(),\n+            derive_helpers_in_scope: FxHashMap::default(),\n         };\n         collector.seed_with_top_level();\n         collector.collect();"}, {"sha": "92c679dd267380a38c7ce6dbd18afbaa80497fd6", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4eb6708d9d62e951e6b594eb4481e944daa8bc3/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4eb6708d9d62e951e6b594eb4481e944daa8bc3/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=d4eb6708d9d62e951e6b594eb4481e944daa8bc3", "patch": "@@ -237,7 +237,7 @@ struct EagerCallInfo {\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MacroCallLoc {\n-    pub(crate) def: MacroDefId,\n+    pub def: MacroDefId,\n     pub(crate) krate: CrateId,\n     eager: Option<EagerCallInfo>,\n     pub kind: MacroCallKind,"}]}