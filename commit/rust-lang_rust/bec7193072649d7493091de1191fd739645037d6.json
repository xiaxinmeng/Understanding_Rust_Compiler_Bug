{"sha": "bec7193072649d7493091de1191fd739645037d6", "node_id": "C_kwDOAAsO6NoAKGJlYzcxOTMwNzI2NDlkNzQ5MzA5MWRlMTE5MWZkNzM5NjQ1MDM3ZDY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-19T00:13:53Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-01T15:45:28Z"}, "message": "Don't use implied trait predicates in gather_explicit_predicates_of", "tree": {"sha": "f68c2785093dab61b867018796d0d7ae8865af58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f68c2785093dab61b867018796d0d7ae8865af58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bec7193072649d7493091de1191fd739645037d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bec7193072649d7493091de1191fd739645037d6", "html_url": "https://github.com/rust-lang/rust/commit/bec7193072649d7493091de1191fd739645037d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bec7193072649d7493091de1191fd739645037d6/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ea71f264e384877bc1f991ad232141b1b7808a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea71f264e384877bc1f991ad232141b1b7808a5", "html_url": "https://github.com/rust-lang/rust/commit/8ea71f264e384877bc1f991ad232141b1b7808a5"}], "stats": {"total": 398, "additions": 319, "deletions": 79}, "files": [{"sha": "83470342a7660bfd9e2c5cbcb2578df43b1de0ba", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -96,8 +96,9 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Gen\n             | ItemKind::Struct(_, generics)\n             | ItemKind::Union(_, generics) => generics,\n \n-            ItemKind::Trait(_, _, generics, ..) | ItemKind::TraitAlias(generics, _) => {\n-                is_trait = Some(ty::TraitRef::identity(tcx, def_id.to_def_id()));\n+            ItemKind::Trait(_, _, generics, self_bounds, ..)\n+            | ItemKind::TraitAlias(generics, self_bounds) => {\n+                is_trait = Some(self_bounds);\n                 generics\n             }\n             ItemKind::OpaqueTy(OpaqueTy { generics, .. }) => generics,\n@@ -119,10 +120,14 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Gen\n \n     // Below we'll consider the bounds on the type parameters (including `Self`)\n     // and the explicit where-clauses, but to get the full set of predicates\n-    // on a trait we need to add in the supertrait bounds and bounds found on\n-    // associated types.\n-    if let Some(_trait_ref) = is_trait {\n-        predicates.extend(tcx.implied_predicates_of(def_id).predicates.iter().cloned());\n+    // on a trait we must also consider the bounds that follow the trait's name,\n+    // like `trait Foo: A + B + C`.\n+    if let Some(self_bounds) = is_trait {\n+        predicates.extend(\n+            icx.astconv()\n+                .compute_bounds(tcx.types.self_param, self_bounds, OnlySelfBounds(false))\n+                .predicates(),\n+        );\n     }\n \n     // In default impls, we can assume that the self type implements"}, {"sha": "1fbb70c7808ee9a8e74a9d2e642ae47640ce7932", "filename": "tests/rustdoc-ui/issues/issue-105742.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.rs?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -19,13 +19,17 @@ pub trait SVec: Index<\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n     Output = <Index<<Self as SVec>::Item,\n     //~^ expected 1 lifetime argument\n     //~| expected 1 generic argument\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n     Output = <Self as SVec>::Item> as SVec>::Item,\n     //~^ expected 1 lifetime argument\n     //~| expected 1 generic argument\n@@ -34,11 +38,15 @@ pub trait SVec: Index<\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n     //~| expected 1 generic argument\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n     //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n > {\n     type Item<'a, T>;\n "}, {"sha": "b63176c914905e81f2a3f3c697ad53e0e8cb0b17", "filename": "tests/rustdoc-ui/issues/issue-105742.stderr", "status": "modified", "additions": 163, "deletions": 35, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissues%2Fissue-105742.stderr?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -5,7 +5,7 @@ LL |     <Self as SVec>::Item,\n    |                     ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -21,7 +21,7 @@ LL |     <Self as SVec>::Item,\n    |                     ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -31,13 +31,13 @@ LL |     <Self as SVec>::Item<T>,\n    |                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:37\n+  --> $DIR/issue-105742.rs:24:37\n    |\n LL |     Output = <Index<<Self as SVec>::Item,\n    |                                     ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -47,13 +47,13 @@ LL |     Output = <Index<<Self as SVec>::Item<'a>,\n    |                                         ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:37\n+  --> $DIR/issue-105742.rs:24:37\n    |\n LL |     Output = <Index<<Self as SVec>::Item,\n    |                                     ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -63,13 +63,13 @@ LL |     Output = <Index<<Self as SVec>::Item<T>,\n    |                                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:30\n+  --> $DIR/issue-105742.rs:33:30\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                              ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -79,13 +79,13 @@ LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n    |                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:30\n+  --> $DIR/issue-105742.rs:33:30\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                              ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -95,13 +95,13 @@ LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n    |                                  +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:46\n+  --> $DIR/issue-105742.rs:33:46\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                                              ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -111,13 +111,13 @@ LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n    |                                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:46\n+  --> $DIR/issue-105742.rs:33:46\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                                              ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -133,7 +133,7 @@ LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n    |                                        ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -149,7 +149,7 @@ LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n    |                                        ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -165,7 +165,7 @@ LL |     <Self as SVec>::Item,\n    |                     ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -181,7 +181,7 @@ LL |     <Self as SVec>::Item,\n    |                     ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -191,13 +191,13 @@ LL |     <Self as SVec>::Item<T>,\n    |                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:37\n+  --> $DIR/issue-105742.rs:24:37\n    |\n LL |     Output = <Index<<Self as SVec>::Item,\n    |                                     ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -207,13 +207,13 @@ LL |     Output = <Index<<Self as SVec>::Item<'a>,\n    |                                         ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:37\n+  --> $DIR/issue-105742.rs:24:37\n    |\n LL |     Output = <Index<<Self as SVec>::Item,\n    |                                     ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -223,13 +223,13 @@ LL |     Output = <Index<<Self as SVec>::Item<T>,\n    |                                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:30\n+  --> $DIR/issue-105742.rs:33:30\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                              ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -239,13 +239,13 @@ LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n    |                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:30\n+  --> $DIR/issue-105742.rs:33:30\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                              ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -255,13 +255,13 @@ LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n    |                                  +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:46\n+  --> $DIR/issue-105742.rs:33:46\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                                              ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -271,13 +271,13 @@ LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n    |                                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:29:46\n+  --> $DIR/issue-105742.rs:33:46\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                                              ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -317,13 +317,141 @@ LL | |  > {\n    | |__^ ...because it uses `Self` as a type parameter\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:45:38\n+  --> $DIR/issue-105742.rs:15:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     <Self as SVec>::Item<'a>,\n+   |                         ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:15:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     <Self as SVec>::Item<T>,\n+   |                         +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:24:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<'a>,\n+   |                                         ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:24:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<T>,\n+   |                                         +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:33:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n+   |                                  ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:33:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n+   |                                  +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:33:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n+   |                                                  ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:33:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:51:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<T>,\n+   |                                                  +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:53:38\n    |\n LL |     fn len(&self) -> <Self as SVec>::Item;\n    |                                      ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -333,13 +461,13 @@ LL |     fn len(&self) -> <Self as SVec>::Item<'_>;\n    |                                          ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:45:38\n+  --> $DIR/issue-105742.rs:53:38\n    |\n LL |     fn len(&self) -> <Self as SVec>::Item;\n    |                                      ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:43:10\n+  --> $DIR/issue-105742.rs:51:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -348,7 +476,7 @@ help: add missing generic argument\n LL |     fn len(&self) -> <Self as SVec>::Item<T>;\n    |                                          +++\n \n-error: aborting due to 21 previous errors\n+error: aborting due to 29 previous errors\n \n Some errors have detailed explanations: E0038, E0107.\n For more information about an error, try `rustc --explain E0038`."}, {"sha": "4b8bf52c374929d7dc96e44dff93d6d48e1cb3e9", "filename": "tests/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -193,10 +193,13 @@ trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRS1: Iterator<Item: Copy, Item: Send> {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRW1<T>\n where\n     T: Iterator<Item: Copy, Item: Send>,"}, {"sha": "08721eff7b0ced75456b0d1700bd7389b4c1691b", "filename": "tests/ui/associated-type-bounds/duplicate.stderr", "status": "modified", "additions": 42, "deletions": 18, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -367,141 +367,165 @@ LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:196:34\n+  --> $DIR/duplicate.rs:194:34\n+   |\n+LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:197:34\n+   |\n+LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:197:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:198:37\n+  --> $DIR/duplicate.rs:200:37\n+   |\n+LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n+   |                      -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/duplicate.rs:200:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:202:29\n+  --> $DIR/duplicate.rs:205:29\n    |\n LL |     T: Iterator<Item: Copy, Item: Send>,\n    |                 ----------  ^^^^^^^^^^ re-bound here\n    |                 |\n    |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:208:29\n+  --> $DIR/duplicate.rs:211:29\n    |\n LL |     T: Iterator<Item: Copy, Item: Copy>,\n    |                 ----------  ^^^^^^^^^^ re-bound here\n    |                 |\n    |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:214:32\n+  --> $DIR/duplicate.rs:217:32\n    |\n LL |     T: Iterator<Item: 'static, Item: 'static>,\n    |                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                 |\n    |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:220:32\n+  --> $DIR/duplicate.rs:223:32\n    |\n LL |     Self: Iterator<Item: Copy, Item: Send>,\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:220:32\n+  --> $DIR/duplicate.rs:223:32\n    |\n LL |     Self: Iterator<Item: Copy, Item: Send>,\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:227:32\n+  --> $DIR/duplicate.rs:230:32\n    |\n LL |     Self: Iterator<Item: Copy, Item: Copy>,\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:227:32\n+  --> $DIR/duplicate.rs:230:32\n    |\n LL |     Self: Iterator<Item: Copy, Item: Copy>,\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:234:35\n+  --> $DIR/duplicate.rs:237:35\n    |\n LL |     Self: Iterator<Item: 'static, Item: 'static>,\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:234:35\n+  --> $DIR/duplicate.rs:237:35\n    |\n LL |     Self: Iterator<Item: 'static, Item: 'static>,\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:252:40\n+  --> $DIR/duplicate.rs:255:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:254:44\n+  --> $DIR/duplicate.rs:257:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:256:43\n+  --> $DIR/duplicate.rs:259:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:240:34\n+  --> $DIR/duplicate.rs:243:34\n    |\n LL |     type A: Iterator<Item: Copy, Item: Send>;\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:244:34\n+  --> $DIR/duplicate.rs:247:34\n    |\n LL |     type A: Iterator<Item: Copy, Item: Copy>;\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:248:37\n+  --> $DIR/duplicate.rs:251:37\n    |\n LL |     type A: Iterator<Item: 'static, Item: 'static>;\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n-error: aborting due to 63 previous errors\n+error: aborting due to 66 previous errors\n \n For more information about this error, try `rustc --explain E0719`."}, {"sha": "bf8202ac15267e876507e96952eb9e08782e4110", "filename": "tests/ui/const-generics/assoc_const_eq_diagnostic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.rs?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -10,6 +10,7 @@ pub trait Parse {\n \n pub trait CoolStuff: Parse<MODE = Mode::Cool> {}\n //~^ ERROR expected associated constant bound\n+//~| ERROR expected associated constant bound\n //~| ERROR expected type\n \n fn no_help() -> Mode::Cool {}"}, {"sha": "d7e5e50cba82d61ae46d6653f2bec2588ee381a9", "filename": "tests/ui/const-generics/assoc_const_eq_diagnostic.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fassoc_const_eq_diagnostic.stderr?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -8,7 +8,7 @@ LL | pub trait CoolStuff: Parse<MODE = Mode::Cool> {}\n    |                                   help: try using the variant's enum: `Mode`\n \n error[E0573]: expected type, found variant `Mode::Cool`\n-  --> $DIR/assoc_const_eq_diagnostic.rs:15:17\n+  --> $DIR/assoc_const_eq_diagnostic.rs:16:17\n    |\n LL | fn no_help() -> Mode::Cool {}\n    |                 ^^^^^^^^^^\n@@ -28,6 +28,18 @@ note: associated constant defined here\n LL |     const MODE: Mode;\n    |     ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: expected associated constant bound, found type\n+  --> $DIR/assoc_const_eq_diagnostic.rs:11:28\n+   |\n+LL | pub trait CoolStuff: Parse<MODE = Mode::Cool> {}\n+   |                            ^^^^^^^^^^^^^^^^^ help: if equating a const, try wrapping with braces: `MODE = { const }`\n+   |\n+note: associated constant defined here\n+  --> $DIR/assoc_const_eq_diagnostic.rs:8:5\n+   |\n+LL |     const MODE: Mode;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0573`."}, {"sha": "cbf1bb219a07bc4258f372d8b45141570af968a0", "filename": "tests/ui/error-codes/E0719.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Ferror-codes%2FE0719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Ferror-codes%2FE0719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0719.rs?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -1,5 +1,6 @@\n trait Foo: Iterator<Item = i32, Item = i32> {}\n //~^ ERROR is already specified\n+//~| ERROR is already specified\n \n type Unit = ();\n "}, {"sha": "e302f406d02b0d098d5605cd2547f5407fd2bec0", "filename": "tests/ui/error-codes/E0719.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Ferror-codes%2FE0719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Ferror-codes%2FE0719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0719.stderr?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -7,13 +7,21 @@ LL | trait Foo: Iterator<Item = i32, Item = i32> {}\n    |                     `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/E0719.rs:6:42\n+  --> $DIR/E0719.rs:1:33\n+   |\n+LL | trait Foo: Iterator<Item = i32, Item = i32> {}\n+   |                     ----------  ^^^^^^^^^^ re-bound here\n+   |                     |\n+   |                     `Item` bound here first\n+\n+error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n+  --> $DIR/E0719.rs:7:42\n    |\n LL | fn test() -> Box<dyn Iterator<Item = (), Item = Unit>> {\n    |                               ---------  ^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0719`."}, {"sha": "97f346e8c1dba25587f3c523bb1d31a654e519ad", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-2.nn.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.nn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.nn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.nn.stderr?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -4,5 +4,11 @@ error: ~const can only be applied to `#[const_trait]` traits\n LL | trait Bar: ~const Foo {}\n    |                   ^^^\n \n-error: aborting due to previous error\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-2.rs:11:19\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |                   ^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "97f346e8c1dba25587f3c523bb1d31a654e519ad", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-2.ny.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.ny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.ny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.ny.stderr?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -4,5 +4,11 @@ error: ~const can only be applied to `#[const_trait]` traits\n LL | trait Bar: ~const Foo {}\n    |                   ^^^\n \n-error: aborting due to previous error\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-2.rs:11:19\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |                   ^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "ecb06271cd9b484f95972bf1851e5a1892d2989a", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -10,6 +10,7 @@ trait Foo {\n #[cfg_attr(any(yy, ny), const_trait)]\n trait Bar: ~const Foo {}\n //[ny,nn]~^ ERROR: ~const can only be applied to `#[const_trait]`\n+//[ny,nn]~| ERROR: ~const can only be applied to `#[const_trait]`\n \n const fn foo<T: Bar>(x: &T) {\n     x.a();"}, {"sha": "c9fa1955498d4e1bb7fd93ae8d4b7a67b92ce1a4", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-2.yn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yn.stderr?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: ~const Foo` is not satisfied\n-  --> $DIR/super-traits-fail-2.rs:15:7\n+  --> $DIR/super-traits-fail-2.rs:16:7\n    |\n LL |     x.a();\n    |       ^ the trait `~const Foo` is not implemented for `T`\n    |\n note: the trait `Foo` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/super-traits-fail-2.rs:15:5\n+  --> $DIR/super-traits-fail-2.rs:16:5\n    |\n LL |     x.a();\n    |     ^"}, {"sha": "c9fa1955498d4e1bb7fd93ae8d4b7a67b92ce1a4", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-2.yy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yy.stderr?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: ~const Foo` is not satisfied\n-  --> $DIR/super-traits-fail-2.rs:15:7\n+  --> $DIR/super-traits-fail-2.rs:16:7\n    |\n LL |     x.a();\n    |       ^ the trait `~const Foo` is not implemented for `T`\n    |\n note: the trait `Foo` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/super-traits-fail-2.rs:15:5\n+  --> $DIR/super-traits-fail-2.rs:16:5\n    |\n LL |     x.a();\n    |     ^"}, {"sha": "fdc6b805889ed7cc70b216fe050c8ab447233879", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-3.nn.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.nn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.nn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.nn.stderr?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -5,10 +5,16 @@ LL | trait Bar: ~const Foo {}\n    |                   ^^^\n \n error: ~const can only be applied to `#[const_trait]` traits\n-  --> $DIR/super-traits-fail-3.rs:15:24\n+  --> $DIR/super-traits-fail-3.rs:12:19\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |                   ^^^\n+\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-3.rs:16:24\n    |\n LL | const fn foo<T: ~const Bar>(x: &T) {\n    |                        ^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "7375b8c819ca74cd5703532c28e7b9a76c78219b", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-3.ny.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.ny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.ny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.ny.stderr?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -4,5 +4,11 @@ error: ~const can only be applied to `#[const_trait]` traits\n LL | trait Bar: ~const Foo {}\n    |                   ^^^\n \n-error: aborting due to previous error\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-3.rs:12:19\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |                   ^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "8cf64944ac1c3f32e2a6cecfec1fd93c9232f13d", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.rs?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -11,6 +11,7 @@ trait Foo {\n #[cfg_attr(any(yy, ny), const_trait)]\n trait Bar: ~const Foo {}\n //[ny,nn]~^ ERROR: ~const can only be applied to `#[const_trait]`\n+//[ny,nn]~| ERROR: ~const can only be applied to `#[const_trait]`\n \n const fn foo<T: ~const Bar>(x: &T) {\n     //[yn,nn]~^ ERROR: ~const can only be applied to `#[const_trait]`"}, {"sha": "7a152914b6964c475df28c22f40f3a17bf713dee", "filename": "tests/ui/rfc-2632-const-trait-impl/super-traits-fail-3.yn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.yn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.yn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.yn.stderr?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -1,5 +1,5 @@\n error: ~const can only be applied to `#[const_trait]` traits\n-  --> $DIR/super-traits-fail-3.rs:15:24\n+  --> $DIR/super-traits-fail-3.rs:16:24\n    |\n LL | const fn foo<T: ~const Bar>(x: &T) {\n    |                        ^^^"}, {"sha": "05921b2c36e46e16e0c940ee6ff480b9129b2c89", "filename": "tests/ui/traits/issue-38404.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Ftraits%2Fissue-38404.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Ftraits%2Fissue-38404.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-38404.rs?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -2,5 +2,6 @@ trait A<T>: std::ops::Add<Self> + Sized {}\n trait B<T>: A<T> {}\n trait C<T>: A<dyn B<T, Output=usize>> {}\n //~^ ERROR the trait `B` cannot be made into an object\n+//~| ERROR the trait `B` cannot be made into an object\n \n fn main() {}"}, {"sha": "f8625f53b78fa7c4aaf097c0f76b00b949af527a", "filename": "tests/ui/traits/issue-38404.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Ftraits%2Fissue-38404.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Ftraits%2Fissue-38404.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-38404.stderr?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -12,6 +12,20 @@ LL | trait A<T>: std::ops::Add<Self> + Sized {}\n LL | trait B<T>: A<T> {}\n    |       - this trait cannot be made into an object...\n \n-error: aborting due to previous error\n+error[E0038]: the trait `B` cannot be made into an object\n+  --> $DIR/issue-38404.rs:3:15\n+   |\n+LL | trait C<T>: A<dyn B<T, Output=usize>> {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^ `B` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-38404.rs:1:13\n+   |\n+LL | trait A<T>: std::ops::Add<Self> + Sized {}\n+   |             ^^^^^^^^^^^^^^^^^^^ ...because it uses `Self` as a type parameter\n+LL | trait B<T>: A<T> {}\n+   |       - this trait cannot be made into an object...\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0038`."}, {"sha": "e7e62c077394e8a3cd9f32a4303561db917df0fe", "filename": "tests/ui/typeck/typeck-builtin-bound-type-parameters.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -3,6 +3,7 @@ fn foo1<T:Copy<U>, U>(x: T) {}\n \n trait Trait: Copy<dyn Send> {}\n //~^ ERROR trait takes 0 generic arguments but 1 generic argument was supplied\n+//~| ERROR trait takes 0 generic arguments but 1 generic argument was supplied\n \n struct MyStruct1<T: Copy<T>>;\n //~^ ERROR trait takes 0 generic arguments but 1 generic argument was supplied"}, {"sha": "a3517af877cc727a7c60e8cefff5fb7e982cb9fb", "filename": "tests/ui/typeck/typeck-builtin-bound-type-parameters.stderr", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bec7193072649d7493091de1191fd739645037d6/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr?ref=bec7193072649d7493091de1191fd739645037d6", "patch": "@@ -15,37 +15,45 @@ LL | trait Trait: Copy<dyn Send> {}\n    |              expected 0 generic arguments\n \n error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:7:21\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:4:14\n+   |\n+LL | trait Trait: Copy<dyn Send> {}\n+   |              ^^^^---------- help: remove these generics\n+   |              |\n+   |              expected 0 generic arguments\n+\n+error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:8:21\n    |\n LL | struct MyStruct1<T: Copy<T>>;\n    |                     ^^^^--- help: remove these generics\n    |                     |\n    |                     expected 0 generic arguments\n \n error[E0107]: trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:10:25\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:11:25\n    |\n LL | struct MyStruct2<'a, T: Copy<'a>>;\n    |                         ^^^^---- help: remove these generics\n    |                         |\n    |                         expected 0 lifetime arguments\n \n error[E0107]: trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:13:15\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:14:15\n    |\n LL | fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n    |               ^^^^ -- help: remove this lifetime argument\n    |               |\n    |               expected 0 lifetime arguments\n \n error[E0107]: trait takes 0 generic arguments but 1 generic argument was supplied\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:13:15\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:14:15\n    |\n LL | fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n    |               ^^^^     - help: remove this generic argument\n    |               |\n    |               expected 0 generic arguments\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0107`."}]}