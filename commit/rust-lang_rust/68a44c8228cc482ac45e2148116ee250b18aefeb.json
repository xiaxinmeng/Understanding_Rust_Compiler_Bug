{"sha": "68a44c8228cc482ac45e2148116ee250b18aefeb", "node_id": "C_kwDOAAsO6NoAKDY4YTQ0YzgyMjhjYzQ4MmFjNDVlMjE0ODExNmVlMjUwYjE4YWVmZWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-23T18:28:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-23T18:28:06Z"}, "message": "Rollup merge of #90856 - ken-matsui:suggestion-to-wrap-vec-allocator-api-in-tuple, r=davidtwco\n\nSuggestion to wrap inner types using 'allocator_api' in tuple\n\nThis PR provides a suggestion to wrap the inner types in tuple when being along with 'allocator_api'.\n\nCloses https://github.com/rust-lang/rust/issues/83250\n\n```rust\nfn main() {\n    let _vec: Vec<u8, _> = vec![]; //~ ERROR use of unstable library feature 'allocator_api'\n}\n```\n\n```diff\n error[E0658]: use of unstable library feature 'allocator_api'\n   --> $DIR/suggest-vec-allocator-api.rs:2:23\n    |\n LL |     let _vec: Vec<u8, _> = vec![];\n-   |                       ^\n+   |                   ----^\n+   |                   |\n+   |                   help: consider wrapping the inner types in tuple: `(u8, _)`\n    |\n    = note: see issue #32838 <https://github.com/rust-lang/rust/issues/32838> for more information\n    = help: add `#![feature(allocator_api)]` to the crate attributes to enable\n```", "tree": {"sha": "819355936656256af34acf48f6e2ef408b0fac6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/819355936656256af34acf48f6e2ef408b0fac6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68a44c8228cc482ac45e2148116ee250b18aefeb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhnTK2CRBK7hj4Ov3rIwAAdwkIAENgPOsvSfXOUPZ7ds3PgQbY\nIk4kZvEZN0Ib+hKNvNUwO1oep1t6CbI2QEyBVSvxAglqhUDVMWcZHeiewJFWpcAs\n0S0ssXurygpgd8iUaDeu1sIu2tw5+T/4MRS0Ep6LDf7j7+icuVroYwTaBZqArsUa\nbdmP7hdNQpqVxmYeE0CFVaTz1kYyWYD6dHTh0CskbghzCo4NuejUjLaLbVchoeUW\n5smRglfx2+lMgZsS4BnRybzfwZXYcbXdhbJGYZQujZTN/M4whEmaPlpFdw4nxM0b\n8wV7TIl2d3UTCJq0D6XV8lSqDf2fTXXbjQHgCArc8tPHrJEDoSYGF3HBZBD9UNc=\n=Ymi9\n-----END PGP SIGNATURE-----\n", "payload": "tree 819355936656256af34acf48f6e2ef408b0fac6f\nparent 311fa1f14dd8ffbbe83b229a94b17f7f1ecaf33b\nparent 57494f7c75b4cdfa3cd4d586f606b0898cce4ebd\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637692086 +0100\ncommitter GitHub <noreply@github.com> 1637692086 +0100\n\nRollup merge of #90856 - ken-matsui:suggestion-to-wrap-vec-allocator-api-in-tuple, r=davidtwco\n\nSuggestion to wrap inner types using 'allocator_api' in tuple\n\nThis PR provides a suggestion to wrap the inner types in tuple when being along with 'allocator_api'.\n\nCloses https://github.com/rust-lang/rust/issues/83250\n\n```rust\nfn main() {\n    let _vec: Vec<u8, _> = vec![]; //~ ERROR use of unstable library feature 'allocator_api'\n}\n```\n\n```diff\n error[E0658]: use of unstable library feature 'allocator_api'\n   --> $DIR/suggest-vec-allocator-api.rs:2:23\n    |\n LL |     let _vec: Vec<u8, _> = vec![];\n-   |                       ^\n+   |                   ----^\n+   |                   |\n+   |                   help: consider wrapping the inner types in tuple: `(u8, _)`\n    |\n    = note: see issue #32838 <https://github.com/rust-lang/rust/issues/32838> for more information\n    = help: add `#![feature(allocator_api)]` to the crate attributes to enable\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68a44c8228cc482ac45e2148116ee250b18aefeb", "html_url": "https://github.com/rust-lang/rust/commit/68a44c8228cc482ac45e2148116ee250b18aefeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68a44c8228cc482ac45e2148116ee250b18aefeb/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "311fa1f14dd8ffbbe83b229a94b17f7f1ecaf33b", "url": "https://api.github.com/repos/rust-lang/rust/commits/311fa1f14dd8ffbbe83b229a94b17f7f1ecaf33b", "html_url": "https://github.com/rust-lang/rust/commit/311fa1f14dd8ffbbe83b229a94b17f7f1ecaf33b"}, {"sha": "57494f7c75b4cdfa3cd4d586f606b0898cce4ebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/57494f7c75b4cdfa3cd4d586f606b0898cce4ebd", "html_url": "https://github.com/rust-lang/rust/commit/57494f7c75b4cdfa3cd4d586f606b0898cce4ebd"}], "stats": {"total": 121, "additions": 113, "deletions": 8}, "files": [{"sha": "8a5fc5feeb71b2d65dc0192c2f7dea996db2e224", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 53, "deletions": 8, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/68a44c8228cc482ac45e2148116ee250b18aefeb/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a44c8228cc482ac45e2148116ee250b18aefeb/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=68a44c8228cc482ac45e2148116ee250b18aefeb", "patch": "@@ -3,7 +3,7 @@\n \n pub use self::StabilityLevel::*;\n \n-use crate::ty::{self, TyCtxt};\n+use crate::ty::{self, DefIdTree, TyCtxt};\n use rustc_ast::NodeId;\n use rustc_attr::{self as attr, ConstStability, Deprecation, Stability};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -90,6 +90,7 @@ pub fn report_unstable(\n     feature: Symbol,\n     reason: Option<Symbol>,\n     issue: Option<NonZeroU32>,\n+    suggestion: Option<(Span, String, String, Applicability)>,\n     is_soft: bool,\n     span: Span,\n     soft_handler: impl FnOnce(&'static Lint, Span, &str),\n@@ -116,8 +117,12 @@ pub fn report_unstable(\n         if is_soft {\n             soft_handler(SOFT_UNSTABLE, span, &msg)\n         } else {\n-            feature_err_issue(&sess.parse_sess, feature, span, GateIssue::Library(issue), &msg)\n-                .emit();\n+            let mut err =\n+                feature_err_issue(&sess.parse_sess, feature, span, GateIssue::Library(issue), &msg);\n+            if let Some((inner_types, ref msg, sugg, applicability)) = suggestion {\n+                err.span_suggestion(inner_types, msg, sugg, applicability);\n+            }\n+            err.emit();\n         }\n     }\n }\n@@ -271,7 +276,13 @@ pub enum EvalResult {\n     Allow,\n     /// We cannot use the item because it is unstable and we did not provide the\n     /// corresponding feature gate.\n-    Deny { feature: Symbol, reason: Option<Symbol>, issue: Option<NonZeroU32>, is_soft: bool },\n+    Deny {\n+        feature: Symbol,\n+        reason: Option<Symbol>,\n+        issue: Option<NonZeroU32>,\n+        suggestion: Option<(Span, String, String, Applicability)>,\n+        is_soft: bool,\n+    },\n     /// The item does not have the `#[stable]` or `#[unstable]` marker assigned.\n     Unmarked,\n }\n@@ -292,6 +303,32 @@ fn skip_stability_check_due_to_privacy(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     }\n }\n \n+// See issue #83250.\n+fn suggestion_for_allocator_api(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+    span: Span,\n+    feature: Symbol,\n+) -> Option<(Span, String, String, Applicability)> {\n+    if feature == sym::allocator_api {\n+        if let Some(trait_) = tcx.parent(def_id) {\n+            if tcx.is_diagnostic_item(sym::Vec, trait_) {\n+                let sm = tcx.sess.parse_sess.source_map();\n+                let inner_types = sm.span_extend_to_prev_char(span, '<', true);\n+                if let Ok(snippet) = sm.span_to_snippet(inner_types) {\n+                    return Some((\n+                        inner_types,\n+                        \"consider wrapping the inner types in tuple\".to_string(),\n+                        format!(\"({})\", snippet),\n+                        Applicability::MaybeIncorrect,\n+                    ));\n+                }\n+            }\n+        }\n+    }\n+    None\n+}\n+\n impl<'tcx> TyCtxt<'tcx> {\n     /// Evaluates the stability of an item.\n     ///\n@@ -406,7 +443,8 @@ impl<'tcx> TyCtxt<'tcx> {\n                     }\n                 }\n \n-                EvalResult::Deny { feature, reason, issue, is_soft }\n+                let suggestion = suggestion_for_allocator_api(self, def_id, span, feature);\n+                EvalResult::Deny { feature, reason, issue, suggestion, is_soft }\n             }\n             Some(_) => {\n                 // Stable APIs are always ok to call and deprecated APIs are\n@@ -457,9 +495,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         };\n         match self.eval_stability(def_id, id, span, method_span) {\n             EvalResult::Allow => {}\n-            EvalResult::Deny { feature, reason, issue, is_soft } => {\n-                report_unstable(self.sess, feature, reason, issue, is_soft, span, soft_handler)\n-            }\n+            EvalResult::Deny { feature, reason, issue, suggestion, is_soft } => report_unstable(\n+                self.sess,\n+                feature,\n+                reason,\n+                issue,\n+                suggestion,\n+                is_soft,\n+                span,\n+                soft_handler,\n+            ),\n             EvalResult::Unmarked => unmarked(span, def_id),\n         }\n     }"}, {"sha": "28dbce0471eaf87a92adf72e408c66799b9aad2a", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68a44c8228cc482ac45e2148116ee250b18aefeb/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a44c8228cc482ac45e2148116ee250b18aefeb/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=68a44c8228cc482ac45e2148116ee250b18aefeb", "patch": "@@ -1133,6 +1133,7 @@ impl<'a> Resolver<'a> {\n                         feature,\n                         reason,\n                         issue,\n+                        None,\n                         is_soft,\n                         span,\n                         soft_handler,"}, {"sha": "9064d0c4969ec56a70fdb6efc6b2b908486c4fdd", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68a44c8228cc482ac45e2148116ee250b18aefeb/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a44c8228cc482ac45e2148116ee250b18aefeb/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=68a44c8228cc482ac45e2148116ee250b18aefeb", "patch": "@@ -307,6 +307,7 @@ symbols! {\n         alloc_layout,\n         alloc_zeroed,\n         allocator,\n+        allocator_api,\n         allocator_internals,\n         allow,\n         allow_fail,"}, {"sha": "fac52ab77c68ca919fc358afe1444b0c88bf1d8f", "filename": "src/test/ui/stability-attribute/suggest-vec-allocator-api.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/68a44c8228cc482ac45e2148116ee250b18aefeb/src%2Ftest%2Fui%2Fstability-attribute%2Fsuggest-vec-allocator-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a44c8228cc482ac45e2148116ee250b18aefeb/src%2Ftest%2Fui%2Fstability-attribute%2Fsuggest-vec-allocator-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fsuggest-vec-allocator-api.rs?ref=68a44c8228cc482ac45e2148116ee250b18aefeb", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let _: Vec<u8, _> = vec![]; //~ ERROR use of unstable library feature 'allocator_api'\n+    #[rustfmt::skip]\n+    let _: Vec<\n+        String,\n+        _> = vec![]; //~ ERROR use of unstable library feature 'allocator_api'\n+    let _ = Vec::<u16, _>::new(); //~ ERROR use of unstable library feature 'allocator_api'\n+    let _boxed: Box<u32, _> = Box::new(10); //~ ERROR use of unstable library feature 'allocator_api'\n+}"}, {"sha": "41e5787b8c2debfde5ba550be9b33baf1568e286", "filename": "src/test/ui/stability-attribute/suggest-vec-allocator-api.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/68a44c8228cc482ac45e2148116ee250b18aefeb/src%2Ftest%2Fui%2Fstability-attribute%2Fsuggest-vec-allocator-api.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68a44c8228cc482ac45e2148116ee250b18aefeb/src%2Ftest%2Fui%2Fstability-attribute%2Fsuggest-vec-allocator-api.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fsuggest-vec-allocator-api.stderr?ref=68a44c8228cc482ac45e2148116ee250b18aefeb", "patch": "@@ -0,0 +1,49 @@\n+error[E0658]: use of unstable library feature 'allocator_api'\n+  --> $DIR/suggest-vec-allocator-api.rs:2:20\n+   |\n+LL |     let _: Vec<u8, _> = vec![];\n+   |                ----^\n+   |                |\n+   |                help: consider wrapping the inner types in tuple: `(u8, _)`\n+   |\n+   = note: see issue #32838 <https://github.com/rust-lang/rust/issues/32838> for more information\n+   = help: add `#![feature(allocator_api)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'allocator_api'\n+  --> $DIR/suggest-vec-allocator-api.rs:6:9\n+   |\n+LL |         _> = vec![];\n+   |         ^\n+   |\n+   = note: see issue #32838 <https://github.com/rust-lang/rust/issues/32838> for more information\n+   = help: add `#![feature(allocator_api)]` to the crate attributes to enable\n+help: consider wrapping the inner types in tuple\n+   |\n+LL ~     let _: Vec<(\n+LL +         String,\n+LL ~         _)> = vec![];\n+   |\n+\n+error[E0658]: use of unstable library feature 'allocator_api'\n+  --> $DIR/suggest-vec-allocator-api.rs:8:26\n+   |\n+LL |     let _boxed: Box<u32, _> = Box::new(10);\n+   |                          ^\n+   |\n+   = note: see issue #32838 <https://github.com/rust-lang/rust/issues/32838> for more information\n+   = help: add `#![feature(allocator_api)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'allocator_api'\n+  --> $DIR/suggest-vec-allocator-api.rs:7:24\n+   |\n+LL |     let _ = Vec::<u16, _>::new();\n+   |                   -----^\n+   |                   |\n+   |                   help: consider wrapping the inner types in tuple: `(u16, _)`\n+   |\n+   = note: see issue #32838 <https://github.com/rust-lang/rust/issues/32838> for more information\n+   = help: add `#![feature(allocator_api)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}