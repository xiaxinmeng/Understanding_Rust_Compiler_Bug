{"sha": "0c94ea0bf13f280c4d9606a027237d4d14befee9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjOTRlYTBiZjEzZjI4MGM0ZDk2MDZhMDI3MjM3ZDRkMTRiZWZlZTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-02-20T10:22:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-02-21T16:32:17Z"}, "message": "introduce a dummy leak check and invoke it in all the right places\n\nThis set of diffs was produced by combing through\nb68fad670bb3612cac26e50751e4fd9150e59977 and seeing where the\n`leak_check` used to be invoked and how.", "tree": {"sha": "f5c547742d87ef60a79ac0e1659f9b736901fcc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5c547742d87ef60a79ac0e1659f9b736901fcc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c94ea0bf13f280c4d9606a027237d4d14befee9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c94ea0bf13f280c4d9606a027237d4d14befee9", "html_url": "https://github.com/rust-lang/rust/commit/0c94ea0bf13f280c4d9606a027237d4d14befee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c94ea0bf13f280c4d9606a027237d4d14befee9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cbe07b5b3da7708c32d044b7d06bd81d568dab3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cbe07b5b3da7708c32d044b7d06bd81d568dab3", "html_url": "https://github.com/rust-lang/rust/commit/2cbe07b5b3da7708c32d044b7d06bd81d568dab3"}], "stats": {"total": 144, "additions": 105, "deletions": 39}, "files": [{"sha": "50487f488852d89b5d306e47006a57547e1b3ed5", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0c94ea0bf13f280c4d9606a027237d4d14befee9/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c94ea0bf13f280c4d9606a027237d4d14befee9/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=0c94ea0bf13f280c4d9606a027237d4d14befee9", "patch": "@@ -4,6 +4,7 @@\n use super::combine::CombineFields;\n use super::{HigherRankedType, InferCtxt, PlaceholderMap};\n \n+use crate::infer::CombinedSnapshot;\n use crate::ty::relate::{Relate, RelateResult, TypeRelation};\n use crate::ty::{self, Binder, TypeFoldable};\n \n@@ -29,10 +30,10 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n \n         let span = self.trace.cause.span;\n \n-        return self.infcx.commit_if_ok(|_snapshot| {\n+        return self.infcx.commit_if_ok(|snapshot| {\n             // First, we instantiate each bound region in the supertype with a\n             // fresh placeholder region.\n-            let (b_prime, _) = self.infcx.replace_bound_vars_with_placeholders(b);\n+            let (b_prime, placeholder_map) = self.infcx.replace_bound_vars_with_placeholders(b);\n \n             // Next, we instantiate each bound region in the subtype\n             // with a fresh region variable. These region variables --\n@@ -48,6 +49,9 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n             // Compare types now that bound regions have been replaced.\n             let result = self.sub(a_is_expected).relate(&a_prime, &b_prime)?;\n \n+            self.infcx\n+                .leak_check(!a_is_expected, &placeholder_map, snapshot)?;\n+\n             debug!(\"higher_ranked_sub: OK result={:?}\", result);\n \n             Ok(ty::Binder::bind(result))\n@@ -108,4 +112,22 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         (result, map)\n     }\n+\n+    /// Searches region constraints created since `snapshot` that\n+    /// affect one of the placeholders in `placeholder_map`, returning\n+    /// an error if any of the placeholders are related to another\n+    /// placeholder or would have to escape into some parent universe\n+    /// that cannot name them.\n+    ///\n+    /// This is a temporary backwards compatibility measure to try and\n+    /// retain the older (arguably incorrect) behavior of the\n+    /// compiler.\n+    pub fn leak_check(\n+        &self,\n+        _overly_polymorphic: bool,\n+        _placeholder_map: &PlaceholderMap<'tcx>,\n+        _snapshot: &CombinedSnapshot<'_, 'tcx>,\n+    ) -> RelateResult<'tcx, ()> {\n+        Ok(())\n+    }\n }"}, {"sha": "ac2ebece442c8f94e1b61377096e7bac0ac83782", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0c94ea0bf13f280c4d9606a027237d4d14befee9/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c94ea0bf13f280c4d9606a027237d4d14befee9/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=0c94ea0bf13f280c4d9606a027237d4d14befee9", "patch": "@@ -937,34 +937,41 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             return None;\n         }\n \n-        Some(self.commit_if_ok(|_snapshot| {\n+        Some(self.commit_if_ok(|snapshot| {\n             let (\n                 ty::SubtypePredicate {\n                     a_is_expected,\n                     a,\n                     b,\n                 },\n-                _,\n+                placeholder_map,\n             ) = self.replace_bound_vars_with_placeholders(predicate);\n \n-            Ok(\n-                self.at(cause, param_env)\n-                    .sub_exp(a_is_expected, a, b)?\n-                    .unit(),\n-            )\n+            let ok = self.at(cause, param_env)\n+                .sub_exp(a_is_expected, a, b)?;\n+\n+            self.leak_check(false, &placeholder_map, snapshot)?;\n+\n+            Ok(ok.unit())\n         }))\n     }\n \n     pub fn region_outlives_predicate(\n         &self,\n         cause: &traits::ObligationCause<'tcx>,\n         predicate: &ty::PolyRegionOutlivesPredicate<'tcx>,\n-    ) {\n-        let (ty::OutlivesPredicate(r_a, r_b), _) =\n-            self.replace_bound_vars_with_placeholders(predicate);\n-        let origin =\n-            SubregionOrigin::from_obligation_cause(cause, || RelateRegionParamBound(cause.span));\n-        self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`\n+    ) -> UnitResult<'tcx> {\n+        self.commit_if_ok(|snapshot| {\n+            let (ty::OutlivesPredicate(r_a, r_b), placeholder_map) =\n+                self.replace_bound_vars_with_placeholders(predicate);\n+            let origin = SubregionOrigin::from_obligation_cause(\n+                cause,\n+                || RelateRegionParamBound(cause.span),\n+            );\n+            self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`\n+            self.leak_check(false, &placeholder_map, snapshot)?;\n+            Ok(())\n+        })\n     }\n \n     pub fn next_ty_var_id(&self, diverging: bool, origin: TypeVariableOrigin) -> TyVid {"}, {"sha": "60a3777abf844257fc9eab1ae27fc36de885af16", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c94ea0bf13f280c4d9606a027237d4d14befee9/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c94ea0bf13f280c4d9606a027237d4d14befee9/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=0c94ea0bf13f280c4d9606a027237d4d14befee9", "patch": "@@ -771,7 +771,13 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     }\n                 }\n                 &ty::Predicate::RegionOutlives(ref binder) => {\n-                    let () = select.infcx().region_outlives_predicate(&dummy_cause, binder);\n+                    if select\n+                        .infcx()\n+                        .region_outlives_predicate(&dummy_cause, binder)\n+                        .is_err()\n+                    {\n+                        return false;\n+                    }\n                 }\n                 &ty::Predicate::TypeOutlives(ref binder) => {\n                     match ("}, {"sha": "3eb49092fed1d6af4f4abc02a83ece899ff6c8b8", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0c94ea0bf13f280c4d9606a027237d4d14befee9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c94ea0bf13f280c4d9606a027237d4d14befee9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=0c94ea0bf13f280c4d9606a027237d4d14befee9", "patch": "@@ -730,9 +730,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     }\n \n                     ty::Predicate::RegionOutlives(ref predicate) => {\n-                        // These errors should show up as region\n-                        // inference failures.\n-                        panic!(\"region outlives {:?} failed\", predicate);\n+                        let predicate = self.resolve_type_vars_if_possible(predicate);\n+                        let err = self.region_outlives_predicate(&obligation.cause,\n+                                                                 &predicate).err().unwrap();\n+                        struct_span_err!(\n+                            self.tcx.sess, span, E0279,\n+                            \"the requirement `{}` is not satisfied (`{}`)\",\n+                            predicate, err,\n+                        )\n                     }\n \n                     ty::Predicate::Projection(..) | ty::Predicate::TypeOutlives(..) => {"}, {"sha": "7648bde1d3c873e51cccf61f712d5e6045d5a317", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c94ea0bf13f280c4d9606a027237d4d14befee9/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c94ea0bf13f280c4d9606a027237d4d14befee9/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=0c94ea0bf13f280c4d9606a027237d4d14befee9", "patch": "@@ -331,8 +331,10 @@ impl<'a, 'b, 'gcx, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'gcx,\n             }\n \n             ty::Predicate::RegionOutlives(ref binder) => {\n-                let () = self.selcx.infcx().region_outlives_predicate(&obligation.cause, binder);\n-                ProcessResult::Changed(vec![])\n+                match self.selcx.infcx().region_outlives_predicate(&obligation.cause, binder) {\n+                    Ok(()) => ProcessResult::Changed(vec![]),\n+                    Err(_) => ProcessResult::Error(CodeSelectionError(Unimplemented)),\n+                }\n             }\n \n             ty::Predicate::TypeOutlives(ref binder) => {"}, {"sha": "05141c9daf1d4b23277e175497e270cc8dc42296", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c94ea0bf13f280c4d9606a027237d4d14befee9/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c94ea0bf13f280c4d9606a027237d4d14befee9/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=0c94ea0bf13f280c4d9606a027237d4d14befee9", "patch": "@@ -191,12 +191,15 @@ pub fn poly_project_and_unify_type<'cx, 'gcx, 'tcx>(\n            obligation);\n \n     let infcx = selcx.infcx();\n-    infcx.commit_if_ok(|_| {\n-        let (placeholder_predicate, _) =\n+    infcx.commit_if_ok(|snapshot| {\n+        let (placeholder_predicate, placeholder_map) =\n             infcx.replace_bound_vars_with_placeholders(&obligation.predicate);\n \n         let placeholder_obligation = obligation.with(placeholder_predicate);\n-        project_and_unify_type(selcx, &placeholder_obligation)\n+        let result = project_and_unify_type(selcx, &placeholder_obligation)?;\n+        infcx.leak_check(false, &placeholder_map, snapshot)\n+            .map_err(|err| MismatchedProjectionTypes { err })?;\n+        Ok(result)\n     })\n }\n \n@@ -1427,9 +1430,8 @@ fn confirm_callable_candidate<'cx, 'gcx, 'tcx>(\n fn confirm_param_env_candidate<'cx, 'gcx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'gcx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,\n-    poly_cache_entry: ty::PolyProjectionPredicate<'tcx>)\n-    -> Progress<'tcx>\n-{\n+    poly_cache_entry: ty::PolyProjectionPredicate<'tcx>,\n+) -> Progress<'tcx> {\n     let infcx = selcx.infcx();\n     let cause = &obligation.cause;\n     let param_env = obligation.param_env;"}, {"sha": "4a02b0331478ffc771880a701600a34b19dc7473", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0c94ea0bf13f280c4d9606a027237d4d14befee9/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c94ea0bf13f280c4d9606a027237d4d14befee9/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=0c94ea0bf13f280c4d9606a027237d4d14befee9", "patch": "@@ -29,7 +29,7 @@ use super::{\n \n use crate::dep_graph::{DepKind, DepNodeIndex};\n use crate::hir::def_id::DefId;\n-use crate::infer::{InferCtxt, InferOk, TypeFreshener};\n+use crate::infer::{CombinedSnapshot, InferCtxt, InferOk, PlaceholderMap, TypeFreshener};\n use crate::middle::lang_items;\n use crate::mir::interpret::GlobalId;\n use crate::ty::fast_reject;\n@@ -1667,8 +1667,11 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             _ => return,\n         }\n \n-        let result = self.infcx.probe(|_| {\n-            self.match_projection_obligation_against_definition_bounds(obligation)\n+        let result = self.infcx.probe(|snapshot| {\n+            self.match_projection_obligation_against_definition_bounds(\n+                obligation,\n+                snapshot,\n+            )\n         });\n \n         if result {\n@@ -1679,10 +1682,11 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     fn match_projection_obligation_against_definition_bounds(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n+        snapshot: &CombinedSnapshot<'_, 'tcx>,\n     ) -> bool {\n         let poly_trait_predicate = self.infcx()\n             .resolve_type_vars_if_possible(&obligation.predicate);\n-        let (placeholder_trait_predicate, _) = self.infcx()\n+        let (placeholder_trait_predicate, placeholder_map) = self.infcx()\n             .replace_bound_vars_with_placeholders(&poly_trait_predicate);\n         debug!(\n             \"match_projection_obligation_against_definition_bounds: \\\n@@ -1724,6 +1728,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                         obligation,\n                         bound.clone(),\n                         placeholder_trait_predicate.trait_ref.clone(),\n+                        &placeholder_map,\n+                        snapshot,\n                     )\n                 })\n             });\n@@ -1741,6 +1747,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     obligation,\n                     bound,\n                     placeholder_trait_predicate.trait_ref.clone(),\n+                    &placeholder_map,\n+                    snapshot,\n                 );\n \n                 assert!(result);\n@@ -1754,12 +1762,16 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         obligation: &TraitObligation<'tcx>,\n         trait_bound: ty::PolyTraitRef<'tcx>,\n         placeholder_trait_ref: ty::TraitRef<'tcx>,\n+        placeholder_map: &PlaceholderMap<'tcx>,\n+        snapshot: &CombinedSnapshot<'_, 'tcx>,\n     ) -> bool {\n         debug_assert!(!placeholder_trait_ref.has_escaping_bound_vars());\n         self.infcx\n             .at(&obligation.cause, obligation.param_env)\n             .sup(ty::Binder::dummy(placeholder_trait_ref), trait_bound)\n             .is_ok()\n+            &&\n+            self.infcx.leak_check(false, placeholder_map, snapshot).is_ok()\n     }\n \n     /// Given an obligation like `<SomeTrait for T>`, search the obligations that the caller\n@@ -1960,8 +1972,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             obligation.predicate.def_id(),\n             obligation.predicate.skip_binder().trait_ref.self_ty(),\n             |impl_def_id| {\n-                self.infcx.probe(|_| {\n-                    if let Ok(_substs) = self.match_impl(impl_def_id, obligation)\n+                self.infcx.probe(|snapshot| {\n+                    if let Ok(_substs) = self.match_impl(impl_def_id, obligation, snapshot)\n                     {\n                         candidates.vec.push(ImplCandidate(impl_def_id));\n                     }\n@@ -2758,9 +2770,12 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     }\n \n     fn confirm_projection_candidate(&mut self, obligation: &TraitObligation<'tcx>) {\n-        self.infcx.in_snapshot(|_| {\n+        self.infcx.in_snapshot(|snapshot| {\n             let result =\n-                self.match_projection_obligation_against_definition_bounds(obligation);\n+                self.match_projection_obligation_against_definition_bounds(\n+                    obligation,\n+                    snapshot,\n+                );\n             assert!(result);\n         })\n     }\n@@ -2912,8 +2927,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n         // First, create the substitutions by matching the impl again,\n         // this time not in a probe.\n-        self.infcx.in_snapshot(|_| {\n-            let substs = self.rematch_impl(impl_def_id, obligation);\n+        self.infcx.in_snapshot(|snapshot| {\n+            let substs = self.rematch_impl(impl_def_id, obligation, snapshot);\n             debug!(\"confirm_impl_candidate: substs={:?}\", substs);\n             let cause = obligation.derived_cause(ImplDerivedObligation);\n             self.vtable_impl(\n@@ -3504,8 +3519,9 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         &mut self,\n         impl_def_id: DefId,\n         obligation: &TraitObligation<'tcx>,\n+        snapshot: &CombinedSnapshot<'_, 'tcx>,\n     ) -> Normalized<'tcx, &'tcx Substs<'tcx>> {\n-        match self.match_impl(impl_def_id, obligation) {\n+        match self.match_impl(impl_def_id, obligation, snapshot) {\n             Ok(substs) => substs,\n             Err(()) => {\n                 bug!(\n@@ -3521,6 +3537,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         &mut self,\n         impl_def_id: DefId,\n         obligation: &TraitObligation<'tcx>,\n+        snapshot: &CombinedSnapshot<'_, 'tcx>,\n     ) -> Result<Normalized<'tcx, &'tcx Substs<'tcx>>, ()> {\n         let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();\n \n@@ -3531,7 +3548,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             return Err(());\n         }\n \n-        let (skol_obligation, _) = self.infcx()\n+        let (skol_obligation, placeholder_map) = self.infcx()\n             .replace_bound_vars_with_placeholders(&obligation.predicate);\n         let skol_obligation_trait_ref = skol_obligation.trait_ref;\n \n@@ -3563,6 +3580,11 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             .map_err(|e| debug!(\"match_impl: failed eq_trait_refs due to `{}`\", e))?;\n         nested_obligations.extend(obligations);\n \n+        if let Err(e) = self.infcx.leak_check(false, &placeholder_map, snapshot) {\n+            debug!(\"match_impl: failed leak check due to `{}`\", e);\n+            return Err(());\n+        }\n+\n         debug!(\"match_impl: success impl_substs={:?}\", impl_substs);\n         Ok(Normalized {\n             value: impl_substs,"}]}