{"sha": "d182c14247b05316f38809276098dc3bcf7b7f02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxODJjMTQyNDdiMDUzMTZmMzg4MDkyNzYwOThkYzNiY2Y3YjdmMDI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-08T22:35:55Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-08T22:36:02Z"}, "message": "Visit the substructure for classes and enums as well.", "tree": {"sha": "7ce20e5f92626b7350a463b37b96c308519bbd73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ce20e5f92626b7350a463b37b96c308519bbd73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d182c14247b05316f38809276098dc3bcf7b7f02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d182c14247b05316f38809276098dc3bcf7b7f02", "html_url": "https://github.com/rust-lang/rust/commit/d182c14247b05316f38809276098dc3bcf7b7f02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d182c14247b05316f38809276098dc3bcf7b7f02/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8af02e219f5c54f4a56ef20ca14bff48d708e96", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8af02e219f5c54f4a56ef20ca14bff48d708e96", "html_url": "https://github.com/rust-lang/rust/commit/b8af02e219f5c54f4a56ef20ca14bff48d708e96"}], "stats": {"total": 93, "additions": 85, "deletions": 8}, "files": [{"sha": "47559052cd42465d41e8c0eeae9353893cf39d92", "filename": "src/rustc/front/intrinsic.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d182c14247b05316f38809276098dc3bcf7b7f02/src%2Frustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182c14247b05316f38809276098dc3bcf7b7f02/src%2Frustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fintrinsic.rs?ref=d182c14247b05316f38809276098dc3bcf7b7f02", "patch": "@@ -62,11 +62,29 @@ mod intrinsic {\n                                  /*, name: str/& */) -> bool;\n         fn visit_leave_rec(n_fields: uint) -> bool;\n \n+        fn visit_enter_class(n_fields: uint) -> bool;\n+        fn visit_enter_class_field(mtbl: uint, i: uint\n+                                   /*, name: str/& */) -> bool;\n+        fn visit_leave_class_field(mtbl: uint, i: uint\n+                                   /*, name: str/& */) -> bool;\n+        fn visit_leave_class(n_fields: uint) -> bool;\n+\n         fn visit_enter_tup(n_fields: uint) -> bool;\n         fn visit_enter_tup_field(i: uint) -> bool;\n         fn visit_leave_tup_field(i: uint) -> bool;\n         fn visit_leave_tup(n_fields: uint) -> bool;\n \n+        fn visit_enter_enum(n_variants: uint) -> bool;\n+        fn visit_enter_enum_variant(variant: uint,\n+                                    disr_val: int,\n+                                    n_fields: uint) -> bool;\n+        fn visit_enter_enum_variant_field(i: uint) -> bool;\n+        fn visit_leave_enum_variant_field(i: uint) -> bool;\n+        fn visit_leave_enum_variant(variant: uint,\n+                                    disr_val: int,\n+                                    n_fields: uint) -> bool;\n+        fn visit_leave_enum(n_variants: uint) -> bool;\n+\n         fn visit_enter_fn(purity: uint, proto: uint,\n                           n_inputs: uint, retstyle: uint) -> bool;\n         fn visit_enter_fn_input(i: uint, mode: uint) -> bool;\n@@ -76,9 +94,6 @@ mod intrinsic {\n         fn visit_leave_fn(purity: uint, proto: uint,\n                           n_inputs: uint, retstyle: uint) -> bool;\n \n-        fn visit_class() -> bool;\n-        fn visit_enum() -> bool;\n-\n         fn visit_iface() -> bool;\n         fn visit_enter_res() -> bool;\n         fn visit_leave_res() -> bool;"}, {"sha": "0fbb7983281c5d8bf543910e545cf4fd28c165bd", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 50, "deletions": 3, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d182c14247b05316f38809276098dc3bcf7b7f02/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182c14247b05316f38809276098dc3bcf7b7f02/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=d182c14247b05316f38809276098dc3bcf7b7f02", "patch": "@@ -22,6 +22,10 @@ impl methods for reflector {\n         C_uint(self.bcx.ccx(), u)\n     }\n \n+    fn c_int(i: int) -> ValueRef {\n+        C_int(self.bcx.ccx(), i)\n+    }\n+\n     fn visit(ty_name: str, args: [ValueRef]) {\n         let tcx = self.bcx.tcx();\n         let mth_idx = option::get(ty::method_idx(\"visit_\" + ty_name,\n@@ -179,9 +183,52 @@ impl methods for reflector {\n             self.visit(\"leave_fn\", extra);\n           }\n \n-          // FIXME: these need substructure-walks\n-          ty::ty_class(_, _) { self.leaf(\"class\") }\n-          ty::ty_enum(_, _) { self.leaf(\"enum\") }\n+          ty::ty_class(did, substs) {\n+            let bcx = self.bcx;\n+            let tcx = bcx.ccx().tcx;\n+            let fields = ty::class_items_as_fields(tcx, did, substs);\n+            self.visit(\"enter_class\", [self.c_uint(vec::len(fields))]);\n+            for fields.eachi {|i, field|\n+                self.bracketed_mt(\"class_field\", field.mt,\n+                                  [self.c_uint(i)\n+                                   /*\n+                                   FIXME: doesn't work presently.\n+                                   C_estr_slice(self.bcx.ccx(),\n+                                                field.ident)\n+                                   */\n+                                  ]);\n+            }\n+            self.visit(\"leave_class\", [self.c_uint(vec::len(fields))]);\n+          }\n+\n+          // FIXME: visiting all the variants in turn is probably\n+          // not ideal. It'll work but will get costly on big enums.\n+          // Maybe let the visitor tell us if it wants to visit only\n+          // a particular variant?\n+          ty::ty_enum(did, substs) {\n+            let bcx = self.bcx;\n+            let tcx = bcx.ccx().tcx;\n+            let variants = ty::substd_enum_variants(tcx, did, substs);\n+\n+            self.visit(\"enter_enum\", [self.c_uint(vec::len(variants))]);\n+            for variants.eachi {|i, v|\n+                let extra = [self.c_uint(i),\n+                             self.c_int(v.disr_val),\n+                             self.c_uint(vec::len(v.args))\n+                             /*\n+                             FIXME: doesn't work presently.\n+                             C_estr_slice(self.bcx.ccx(),\n+                             v.name)\n+                             */];\n+                self.visit(\"enter_enum_variant\", extra);\n+                for v.args.eachi {|j, a|\n+                    self.bracketed_t(\"enum_variant_field\", a,\n+                                     [self.c_uint(j)]);\n+                }\n+                self.visit(\"leave_enum_variant\", extra);\n+            }\n+            self.visit(\"leave_enum\", [self.c_uint(vec::len(variants))]);\n+          }\n \n           // Miscallaneous extra types\n           ty::ty_iface(_, _) { self.leaf(\"iface\") }"}, {"sha": "9066f7999c2f2f6d7408743df9d778027ff64614", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d182c14247b05316f38809276098dc3bcf7b7f02/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d182c14247b05316f38809276098dc3bcf7b7f02/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=d182c14247b05316f38809276098dc3bcf7b7f02", "patch": "@@ -87,6 +87,13 @@ impl of intrinsic::ty_visitor for my_visitor {\n                              /*,name: str/&*/) -> bool { true }\n     fn visit_leave_rec(_n_fields: uint) -> bool { true }\n \n+    fn visit_enter_class(_n_fields: uint) -> bool { true }\n+    fn visit_enter_class_field(_mtbl: uint, _i: uint\n+                             /*,name: str/&*/) -> bool { true }\n+    fn visit_leave_class_field(_mtbl: uint, _i: uint\n+                             /*,name: str/&*/) -> bool { true }\n+    fn visit_leave_class(_n_fields: uint) -> bool { true }\n+\n     fn visit_enter_tup(_n_fields: uint) -> bool { true }\n     fn visit_enter_tup_field(_i: uint) -> bool { true }\n     fn visit_leave_tup_field(_i: uint) -> bool { true }\n@@ -101,8 +108,16 @@ impl of intrinsic::ty_visitor for my_visitor {\n     fn visit_leave_fn(_purity: uint, _proto: uint,\n                       _n_inputs: uint, _retstyle: uint) -> bool { true }\n \n-    fn visit_class() -> bool { true }\n-    fn visit_enum() -> bool { true }\n+    fn visit_enter_enum(_n_variants: uint) -> bool { true }\n+    fn visit_enter_enum_variant(_variant: uint,\n+                                _disr_val: int,\n+                                _n_fields: uint) -> bool { true }\n+    fn visit_enter_enum_variant_field(_i: uint) -> bool { true }\n+    fn visit_leave_enum_variant_field(_i: uint) -> bool { true }\n+    fn visit_leave_enum_variant(_variant: uint,\n+                                _disr_val: int,\n+                                _n_fields: uint) -> bool { true }\n+    fn visit_leave_enum(_n_variants: uint) -> bool { true }\n \n     fn visit_iface() -> bool { true }\n     fn visit_enter_res() -> bool { true }"}]}