{"sha": "3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZDdmMDY3ZGMwMzE5Y2Q5ZTdiYjZhODI1M2JhMDMxZDBiZGYxZjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-05T19:01:31Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-06T22:17:48Z"}, "message": "Fix fallout in libs. For the most part I just tagged impls as `#[old_impl_check]`.", "tree": {"sha": "95808c5d926278d257b53b2f8ccb7acc4c45494e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95808c5d926278d257b53b2f8ccb7acc4c45494e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3", "html_url": "https://github.com/rust-lang/rust/commit/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6539cb417f4a7c2d9d1afce44c196578d2b67f38", "url": "https://api.github.com/repos/rust-lang/rust/commits/6539cb417f4a7c2d9d1afce44c196578d2b67f38", "html_url": "https://github.com/rust-lang/rust/commit/6539cb417f4a7c2d9d1afce44c196578d2b67f38"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "1c646032bf15a2dc7e54ea7827367e0ff8f16630", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3", "patch": "@@ -1417,7 +1417,7 @@ pub type MutTraversal<'a, K, V> = AbsTraversal<ElemsAndEdges<Zip<slice::Iter<'a,\n /// An owning traversal over a node's entries and edges\n pub type MoveTraversal<K, V> = AbsTraversal<MoveTraversalImpl<K, V>>;\n \n-\n+#[old_impl_check]\n impl<K, V, E, Impl: TraversalImpl<K, V, E>> Iterator for AbsTraversal<Impl> {\n     type Item = TraversalItem<K, V, E>;\n \n@@ -1433,6 +1433,7 @@ impl<K, V, E, Impl: TraversalImpl<K, V, E>> Iterator for AbsTraversal<Impl> {\n     }\n }\n \n+#[old_impl_check]\n impl<K, V, E, Impl: TraversalImpl<K, V, E>> DoubleEndedIterator for AbsTraversal<Impl> {\n     fn next_back(&mut self) -> Option<TraversalItem<K, V, E>> {\n         let tail_is_edge = self.tail_is_edge;"}, {"sha": "00d3e795f743295db7f6801da0e1adce50838d8a", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3", "patch": "@@ -26,6 +26,7 @@\n #![feature(unsafe_destructor, slicing_syntax)]\n #![feature(unboxed_closures)]\n #![feature(old_orphan_check)]\n+#![feature(old_impl_check)]\n #![feature(associated_types)]\n #![no_std]\n "}, {"sha": "d22e3208bbef736c4b03f2bc6dbd3ad0e1728ac7", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3", "patch": "@@ -28,6 +28,7 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(unboxed_closures)]\n #![feature(old_orphan_check)]\n+#![feature(old_impl_check)]\n #![feature(associated_types)]\n \n extern crate arena;"}, {"sha": "e5e425c9c2699f50cd1b1f33b2853e9eecfc8bc9", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3", "patch": "@@ -1349,6 +1349,7 @@ impl<'tcx, T:Repr<'tcx>> Repr<'tcx> for ty::Binder<T> {\n     }\n }\n \n+#[old_impl_check]\n impl<'tcx, S, H, K, V> Repr<'tcx> for HashMap<K,V,H>\n     where K : Hash<S> + Eq + Repr<'tcx>,\n           V : Repr<'tcx>,"}, {"sha": "d89a4754d2efe0af8ccb921ed5a523e5795910c1", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3", "patch": "@@ -156,6 +156,7 @@ impl<\n     }\n }\n \n+#[old_impl_check]\n impl<\n     K: Encodable + Hash<X> + Eq,\n     V: Encodable,\n@@ -175,6 +176,7 @@ impl<\n     }\n }\n \n+#[old_impl_check]\n impl<\n     K: Decodable + Hash<S> + Eq,\n     V: Decodable,\n@@ -195,6 +197,7 @@ impl<\n     }\n }\n \n+#[old_impl_check]\n impl<\n     T: Encodable + Hash<X> + Eq,\n     X,\n@@ -212,6 +215,7 @@ impl<\n     }\n }\n \n+#[old_impl_check]\n impl<\n     T: Decodable + Hash<S> + Eq,\n     S,"}, {"sha": "ee94095bd158f45ca16999216489c14e4d51cf53", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3", "patch": "@@ -26,6 +26,7 @@ Core encoding and decoding interfaces.\n #![feature(macro_rules, default_type_params, phase, slicing_syntax, globs)]\n #![feature(unboxed_closures)]\n #![feature(associated_types)]\n+#![feature(old_impl_check)]\n \n // test harness access\n #[cfg(test)]"}, {"sha": "5372c51f95fff65f6003093cd30afba0558e04bf", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3", "patch": "@@ -439,6 +439,7 @@ impl<K, V, M> SearchResult<K, V, M> {\n     }\n }\n \n+#[old_impl_check]\n impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     fn make_hash<X: ?Sized + Hash<S>>(&self, x: &X) -> SafeHash {\n         table::make_hash(&self.hasher, x)\n@@ -517,6 +518,7 @@ impl<K: Hash + Eq, V> HashMap<K, V, RandomSipHasher> {\n     }\n }\n \n+#[old_impl_check]\n impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     /// Creates an empty hashmap which will use the given hasher to hash keys.\n     ///\n@@ -1191,6 +1193,7 @@ fn search_entry_hashed<'a, K, V, Q: ?Sized>(table: &'a mut RawTable<K,V>, hash:\n }\n \n #[stable]\n+#[old_impl_check]\n impl<K: Eq + Hash<S>, V: PartialEq, S, H: Hasher<S>> PartialEq for HashMap<K, V, H> {\n     fn eq(&self, other: &HashMap<K, V, H>) -> bool {\n         if self.len() != other.len() { return false; }\n@@ -1202,9 +1205,11 @@ impl<K: Eq + Hash<S>, V: PartialEq, S, H: Hasher<S>> PartialEq for HashMap<K, V,\n }\n \n #[stable]\n+#[old_impl_check]\n impl<K: Eq + Hash<S>, V: Eq, S, H: Hasher<S>> Eq for HashMap<K, V, H> {}\n \n #[stable]\n+#[old_impl_check]\n impl<K: Eq + Hash<S> + Show, V: Show, S, H: Hasher<S>> Show for HashMap<K, V, H> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));\n@@ -1219,6 +1224,7 @@ impl<K: Eq + Hash<S> + Show, V: Show, S, H: Hasher<S>> Show for HashMap<K, V, H>\n }\n \n #[stable]\n+#[old_impl_check]\n impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> Default for HashMap<K, V, H> {\n     #[stable]\n     fn default() -> HashMap<K, V, H> {\n@@ -1227,6 +1233,7 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> Default for HashMap<K, V, H>\n }\n \n #[stable]\n+#[old_impl_check]\n impl<K: Hash<S> + Eq, Q: ?Sized, V, S, H: Hasher<S>> Index<Q> for HashMap<K, V, H>\n     where Q: BorrowFrom<K> + Hash<S> + Eq\n {\n@@ -1239,6 +1246,7 @@ impl<K: Hash<S> + Eq, Q: ?Sized, V, S, H: Hasher<S>> Index<Q> for HashMap<K, V,\n }\n \n #[stable]\n+#[old_impl_check]\n impl<K: Hash<S> + Eq, Q: ?Sized, V, S, H: Hasher<S>> IndexMut<Q> for HashMap<K, V, H>\n     where Q: BorrowFrom<K> + Hash<S> + Eq\n {\n@@ -1472,6 +1480,7 @@ impl<'a, Q: ?Sized + 'a + ToOwned<K>, K: 'a, V: 'a> VacantEntry<'a, Q, K, V> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> FromIterator<(K, V)> for HashMap<K, V, H> {\n     fn from_iter<T: Iterator<Item=(K, V)>>(iter: T) -> HashMap<K, V, H> {\n         let lower = iter.size_hint().0;\n@@ -1482,6 +1491,7 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> FromIterator<(K, V)> for Has\n }\n \n #[stable]\n+#[old_impl_check]\n impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> Extend<(K, V)> for HashMap<K, V, H> {\n     fn extend<T: Iterator<Item=(K, V)>>(&mut self, mut iter: T) {\n         for (k, v) in iter {"}, {"sha": "1b3d401fb843573481586b33b4361fffef4766b6", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3", "patch": "@@ -128,6 +128,7 @@ impl<T: Hash + Eq> HashSet<T, RandomSipHasher> {\n     }\n }\n \n+#[old_impl_check]\n impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// Creates a new empty hash set which will use the given hasher to hash\n     /// keys.\n@@ -571,6 +572,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<T: Eq + Hash<S>, S, H: Hasher<S>> PartialEq for HashSet<T, H> {\n     fn eq(&self, other: &HashSet<T, H>) -> bool {\n         if self.len() != other.len() { return false; }\n@@ -580,9 +582,11 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> PartialEq for HashSet<T, H> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<T: Eq + Hash<S>, S, H: Hasher<S>> Eq for HashSet<T, H> {}\n \n #[stable]\n+#[old_impl_check]\n impl<T: Eq + Hash<S> + fmt::Show, S, H: Hasher<S>> fmt::Show for HashSet<T, H> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));\n@@ -597,6 +601,7 @@ impl<T: Eq + Hash<S> + fmt::Show, S, H: Hasher<S>> fmt::Show for HashSet<T, H> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> FromIterator<T> for HashSet<T, H> {\n     fn from_iter<I: Iterator<Item=T>>(iter: I) -> HashSet<T, H> {\n         let lower = iter.size_hint().0;\n@@ -607,6 +612,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> FromIterator<T> for HashSet<T,\n }\n \n #[stable]\n+#[old_impl_check]\n impl<T: Eq + Hash<S>, S, H: Hasher<S>> Extend<T> for HashSet<T, H> {\n     fn extend<I: Iterator<Item=T>>(&mut self, mut iter: I) {\n         for k in iter {\n@@ -616,6 +622,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> Extend<T> for HashSet<T, H> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Default for HashSet<T, H> {\n     #[stable]\n     fn default() -> HashSet<T, H> {\n@@ -624,6 +631,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Default for HashSet<T, H> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<'a, 'b, T: Eq + Hash<S> + Clone, S, H: Hasher<S> + Default>\n BitOr<&'b HashSet<T, H>> for &'a HashSet<T, H> {\n     type Output = HashSet<T, H>;\n@@ -654,6 +662,7 @@ BitOr<&'b HashSet<T, H>> for &'a HashSet<T, H> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<'a, 'b, T: Eq + Hash<S> + Clone, S, H: Hasher<S> + Default>\n BitAnd<&'b HashSet<T, H>> for &'a HashSet<T, H> {\n     type Output = HashSet<T, H>;\n@@ -684,6 +693,7 @@ BitAnd<&'b HashSet<T, H>> for &'a HashSet<T, H> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<'a, 'b, T: Eq + Hash<S> + Clone, S, H: Hasher<S> + Default>\n BitXor<&'b HashSet<T, H>> for &'a HashSet<T, H> {\n     type Output = HashSet<T, H>;\n@@ -714,6 +724,7 @@ BitXor<&'b HashSet<T, H>> for &'a HashSet<T, H> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<'a, 'b, T: Eq + Hash<S> + Clone, S, H: Hasher<S> + Default>\n Sub<&'b HashSet<T, H>> for &'a HashSet<T, H> {\n     type Output = HashSet<T, H>;\n@@ -816,6 +827,7 @@ impl<'a, K: 'a> Iterator for Drain<'a, K> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<'a, T, S, H> Iterator for Intersection<'a, T, H>\n     where T: Eq + Hash<S>, H: Hasher<S>\n {\n@@ -839,6 +851,7 @@ impl<'a, T, S, H> Iterator for Intersection<'a, T, H>\n }\n \n #[stable]\n+#[old_impl_check]\n impl<'a, T, S, H> Iterator for Difference<'a, T, H>\n     where T: Eq + Hash<S>, H: Hasher<S>\n {\n@@ -862,6 +875,7 @@ impl<'a, T, S, H> Iterator for Difference<'a, T, H>\n }\n \n #[stable]\n+#[old_impl_check]\n impl<'a, T, S, H> Iterator for SymmetricDifference<'a, T, H>\n     where T: Eq + Hash<S>, H: Hasher<S>\n {\n@@ -872,6 +886,7 @@ impl<'a, T, S, H> Iterator for SymmetricDifference<'a, T, H>\n }\n \n #[stable]\n+#[old_impl_check]\n impl<'a, T, S, H> Iterator for Union<'a, T, H>\n     where T: Eq + Hash<S>, H: Hasher<S>\n {"}, {"sha": "61ed387dd07eb718ab12196efd3f8e8a3cd7bebe", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3", "patch": "@@ -1604,6 +1604,7 @@ pub struct IncomingConnections<'a, A: ?Sized +'a> {\n     inc: &'a mut A,\n }\n \n+#[old_impl_check]\n impl<'a, T, A: ?Sized + Acceptor<T>> Iterator for IncomingConnections<'a, A> {\n     type Item = IoResult<T>;\n "}, {"sha": "592163e0e8c6bbb2ba11fe6df71a71dbeead7db0", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3", "patch": "@@ -108,6 +108,7 @@\n #![feature(default_type_params, phase, lang_items, unsafe_destructor)]\n #![feature(slicing_syntax, unboxed_closures)]\n #![feature(old_orphan_check)]\n+#![feature(old_impl_check)]\n #![feature(associated_types)]\n \n // Don't link to std. We are std."}, {"sha": "0054cb9509ac6a4e1836c996b6f23d13adc6291a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=3ed7f067dc0319cd9e7bb6a8253ba031d0bdf1f3", "patch": "@@ -982,8 +982,8 @@ pub enum Sign {\n     Plus\n }\n \n-impl<T> Sign where T: Int {\n-    pub fn new(n: T) -> Sign {\n+impl Sign {\n+    pub fn new<T:Int>(n: T) -> Sign {\n         if n < Int::zero() {\n             Minus\n         } else {"}]}