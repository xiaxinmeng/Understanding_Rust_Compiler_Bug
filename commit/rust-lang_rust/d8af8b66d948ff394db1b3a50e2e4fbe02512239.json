{"sha": "d8af8b66d948ff394db1b3a50e2e4fbe02512239", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YWY4YjY2ZDk0OGZmMzk0ZGIxYjNhNTBlMmU0ZmJlMDI1MTIyMzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-05T13:19:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-05T13:19:19Z"}, "message": "Auto merge of #53878 - alexcrichton:wasm-atomics-feature, r=eddyb\n\nrustc: Prepare the `atomics` feature for wasm\n\nThis commit adds a few changes for atomic instructions on the\n`wasm32-unknown-unknown` target. Atomic instructions are not yet stable in\nWebAssembly itself but there are multiple implementations and LLVM has support\nfor the proposed instruction set, so let's work on exposing it!\n\nHere there are a few inclusions:\n\n* The `atomics` feature was whitelisted for LLVM, allowing code in Rust to\n  enable/disable/gate on this.\n\n* The `singlethread` option is turned off for wasm when the `atomics` feature is\n  enabled. This means that by default wasm won't be lowering with atomics, but\n  when atomics are enabled globally we'll turn off single-threaded mode to\n  actually codegen atomics. This probably isn't what we'll want in the long term\n  but for now it should work.\n\n* Finally the maximum atomic width is increased to 64 to reflect the current\n  wasm spec.", "tree": {"sha": "79946ce7129c7829ca978f39dc1e2ea41626899d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79946ce7129c7829ca978f39dc1e2ea41626899d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8af8b66d948ff394db1b3a50e2e4fbe02512239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8af8b66d948ff394db1b3a50e2e4fbe02512239", "html_url": "https://github.com/rust-lang/rust/commit/d8af8b66d948ff394db1b3a50e2e4fbe02512239", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8af8b66d948ff394db1b3a50e2e4fbe02512239/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0297f3043e4ed592c63c0bcc11df3655ec8cf46", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0297f3043e4ed592c63c0bcc11df3655ec8cf46", "html_url": "https://github.com/rust-lang/rust/commit/b0297f3043e4ed592c63c0bcc11df3655ec8cf46"}, {"sha": "fc497d00263be103ca9d009206963d4a5763392d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc497d00263be103ca9d009206963d4a5763392d", "html_url": "https://github.com/rust-lang/rust/commit/fc497d00263be103ca9d009206963d4a5763392d"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "9c586504527cd352518771493d7594a04ddeb2bd", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d8af8b66d948ff394db1b3a50e2e4fbe02512239/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8af8b66d948ff394db1b3a50e2e4fbe02512239/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=d8af8b66d948ff394db1b3a50e2e4fbe02512239", "patch": "@@ -176,13 +176,22 @@ pub fn target_machine_factory(sess: &Session, find_features: bool)\n         None => llvm::CodeModel::None,\n     };\n \n-    let singlethread = sess.target.target.options.singlethread;\n+    let features = attributes::llvm_target_features(sess).collect::<Vec<_>>();\n+    let mut singlethread = sess.target.target.options.singlethread;\n+\n+    // On the wasm target once the `atomics` feature is enabled that means that\n+    // we're no longer single-threaded, or otherwise we don't want LLVM to\n+    // lower atomic operations to single-threaded operations.\n+    if singlethread &&\n+        sess.target.target.llvm_target.contains(\"wasm32\") &&\n+        features.iter().any(|s| *s == \"+atomics\")\n+    {\n+        singlethread = false;\n+    }\n \n     let triple = SmallCStr::new(&sess.target.target.llvm_target);\n     let cpu = SmallCStr::new(llvm_util::target_cpu(sess));\n-    let features = attributes::llvm_target_features(sess)\n-        .collect::<Vec<_>>()\n-        .join(\",\");\n+    let features = features.join(\",\");\n     let features = CString::new(features).unwrap();\n     let is_pie_binary = !find_features && is_pie_binary(sess);\n     let trap_unreachable = sess.target.target.options.trap_unreachable;"}, {"sha": "9e8ff2047036bc6767fe75c04dd97a57f81648ef", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8af8b66d948ff394db1b3a50e2e4fbe02512239/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8af8b66d948ff394db1b3a50e2e4fbe02512239/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=d8af8b66d948ff394db1b3a50e2e4fbe02512239", "patch": "@@ -177,6 +177,7 @@ const MIPS_WHITELIST: &[(&str, Option<&str>)] = &[\n \n const WASM_WHITELIST: &[(&str, Option<&str>)] = &[\n     (\"simd128\", Some(\"wasm_target_feature\")),\n+    (\"atomics\", Some(\"wasm_target_feature\")),\n ];\n \n /// When rustdoc is running, provide a list of all known features so that all their respective"}, {"sha": "c0455ceb8390ce669802e9bc9650153882e9ef08", "filename": "src/librustc_target/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8af8b66d948ff394db1b3a50e2e4fbe02512239/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8af8b66d948ff394db1b3a50e2e4fbe02512239/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs?ref=d8af8b66d948ff394db1b3a50e2e4fbe02512239", "patch": "@@ -36,8 +36,7 @@ pub fn target() -> Result<Target, String> {\n         dll_suffix: \".wasm\".to_string(),\n         linker_is_gnu: false,\n \n-        // A bit of a lie, but \"eh\"\n-        max_atomic_width: Some(32),\n+        max_atomic_width: Some(64),\n \n         // Unwinding doesn't work right now, so the whole target unconditionally\n         // defaults to panic=abort. Note that this is guaranteed to change in"}]}