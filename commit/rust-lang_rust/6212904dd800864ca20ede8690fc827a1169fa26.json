{"sha": "6212904dd800864ca20ede8690fc827a1169fa26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMTI5MDRkZDgwMDg2NGNhMjBlZGU4NjkwZmM4MjdhMTE2OWZhMjY=", "commit": {"author": {"name": "Bryan Drewery", "email": "bryan@shatow.net", "date": "2018-03-19T22:40:09Z"}, "committer": {"name": "Bryan Drewery", "email": "bryan@shatow.net", "date": "2018-03-19T22:40:09Z"}, "message": "Don't use posix_spawn() if PATH was modified in the environment.\n\nThe expected behavior is that the environment's PATH should be used\nto find the process.  posix_spawn() could be used if we iterated\nPATH to search for the binary to execute.  For now just skip\nposix_spawn() if PATH is modified.", "tree": {"sha": "81e4910d6abcf523fc599fcc3c926c4813d9c11d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81e4910d6abcf523fc599fcc3c926c4813d9c11d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6212904dd800864ca20ede8690fc827a1169fa26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6212904dd800864ca20ede8690fc827a1169fa26", "html_url": "https://github.com/rust-lang/rust/commit/6212904dd800864ca20ede8690fc827a1169fa26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6212904dd800864ca20ede8690fc827a1169fa26/comments", "author": {"login": "bdrewery", "id": 33693, "node_id": "MDQ6VXNlcjMzNjkz", "avatar_url": "https://avatars.githubusercontent.com/u/33693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bdrewery", "html_url": "https://github.com/bdrewery", "followers_url": "https://api.github.com/users/bdrewery/followers", "following_url": "https://api.github.com/users/bdrewery/following{/other_user}", "gists_url": "https://api.github.com/users/bdrewery/gists{/gist_id}", "starred_url": "https://api.github.com/users/bdrewery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bdrewery/subscriptions", "organizations_url": "https://api.github.com/users/bdrewery/orgs", "repos_url": "https://api.github.com/users/bdrewery/repos", "events_url": "https://api.github.com/users/bdrewery/events{/privacy}", "received_events_url": "https://api.github.com/users/bdrewery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bdrewery", "id": 33693, "node_id": "MDQ6VXNlcjMzNjkz", "avatar_url": "https://avatars.githubusercontent.com/u/33693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bdrewery", "html_url": "https://github.com/bdrewery", "followers_url": "https://api.github.com/users/bdrewery/followers", "following_url": "https://api.github.com/users/bdrewery/following{/other_user}", "gists_url": "https://api.github.com/users/bdrewery/gists{/gist_id}", "starred_url": "https://api.github.com/users/bdrewery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bdrewery/subscriptions", "organizations_url": "https://api.github.com/users/bdrewery/orgs", "repos_url": "https://api.github.com/users/bdrewery/repos", "events_url": "https://api.github.com/users/bdrewery/events{/privacy}", "received_events_url": "https://api.github.com/users/bdrewery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00dac20e017d321b9999b04fd6d3132c4a21a388", "url": "https://api.github.com/repos/rust-lang/rust/commits/00dac20e017d321b9999b04fd6d3132c4a21a388", "html_url": "https://github.com/rust-lang/rust/commit/00dac20e017d321b9999b04fd6d3132c4a21a388"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "48255489dd9161b663500c0e77cc8acd721052e1", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6212904dd800864ca20ede8690fc827a1169fa26/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212904dd800864ca20ede8690fc827a1169fa26/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=6212904dd800864ca20ede8690fc827a1169fa26", "patch": "@@ -184,6 +184,9 @@ impl Command {\n         let maybe_env = self.env.capture_if_changed();\n         maybe_env.map(|env| construct_envp(env, &mut self.saw_nul))\n     }\n+    pub fn env_saw_path(&self) -> bool {\n+        self.env.have_changed_path()\n+    }\n \n     pub fn setup_io(&self, default: Stdio, needs_stdin: bool)\n                 -> io::Result<(StdioPipes, ChildPipes)> {"}, {"sha": "9d6d607e3f3409127e08f99d95685c656de70de3", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6212904dd800864ca20ede8690fc827a1169fa26/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212904dd800864ca20ede8690fc827a1169fa26/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=6212904dd800864ca20ede8690fc827a1169fa26", "patch": "@@ -256,6 +256,7 @@ impl Command {\n         if self.get_cwd().is_some() ||\n             self.get_gid().is_some() ||\n             self.get_uid().is_some() ||\n+            self.env_saw_path() ||\n             self.get_closures().len() != 0 {\n             return Ok(None)\n         }"}, {"sha": "775491d762cdad5febfc400d85f722ad0a3ddcb1", "filename": "src/libstd/sys_common/process.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6212904dd800864ca20ede8690fc827a1169fa26/src%2Flibstd%2Fsys_common%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212904dd800864ca20ede8690fc827a1169fa26/src%2Flibstd%2Fsys_common%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fprocess.rs?ref=6212904dd800864ca20ede8690fc827a1169fa26", "patch": "@@ -47,13 +47,15 @@ impl EnvKey for DefaultEnvKey {}\n #[derive(Clone, Debug)]\n pub struct CommandEnv<K> {\n     clear: bool,\n+    saw_path: bool,\n     vars: BTreeMap<K, Option<OsString>>\n }\n \n impl<K: EnvKey> Default for CommandEnv<K> {\n     fn default() -> Self {\n         CommandEnv {\n             clear: false,\n+            saw_path: false,\n             vars: Default::default()\n         }\n     }\n@@ -108,9 +110,11 @@ impl<K: EnvKey> CommandEnv<K> {\n \n     // The following functions build up changes\n     pub fn set(&mut self, key: &OsStr, value: &OsStr) {\n+        self.maybe_saw_path(&key);\n         self.vars.insert(key.to_owned().into(), Some(value.to_owned()));\n     }\n     pub fn remove(&mut self, key: &OsStr) {\n+        self.maybe_saw_path(&key);\n         if self.clear {\n             self.vars.remove(key);\n         } else {\n@@ -121,4 +125,12 @@ impl<K: EnvKey> CommandEnv<K> {\n         self.clear = true;\n         self.vars.clear();\n     }\n+    pub fn have_changed_path(&self) -> bool {\n+        self.saw_path || self.clear\n+    }\n+    fn maybe_saw_path(&mut self, key: &OsStr) {\n+        if !self.saw_path && key.to_os_string() == OsString::from(\"PATH\") {\n+            self.saw_path = true;\n+        }\n+    }\n }"}]}