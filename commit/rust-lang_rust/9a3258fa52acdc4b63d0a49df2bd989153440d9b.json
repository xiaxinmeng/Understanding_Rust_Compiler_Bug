{"sha": "9a3258fa52acdc4b63d0a49df2bd989153440d9b", "node_id": "C_kwDOAAsO6NoAKDlhMzI1OGZhNTJhY2RjNGI2M2QwYTQ5ZGYyYmQ5ODkxNTM0NDBkOWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-28T00:17:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-28T00:17:47Z"}, "message": "Auto merge of #110801 - WaffleLapkin:io-tests, r=jyn514\n\nFix `ui/io-checks/inaccessbile-temp-dir.rs` test\n\nFixes #110794\n\nr? `@jyn514`", "tree": {"sha": "b15ae7232a08c10d0369d4cb84c99ace516935c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b15ae7232a08c10d0369d4cb84c99ace516935c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a3258fa52acdc4b63d0a49df2bd989153440d9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a3258fa52acdc4b63d0a49df2bd989153440d9b", "html_url": "https://github.com/rust-lang/rust/commit/9a3258fa52acdc4b63d0a49df2bd989153440d9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a3258fa52acdc4b63d0a49df2bd989153440d9b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a6ae3d692cfb52b21d0f45ba50b659486e53d6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6ae3d692cfb52b21d0f45ba50b659486e53d6c", "html_url": "https://github.com/rust-lang/rust/commit/1a6ae3d692cfb52b21d0f45ba50b659486e53d6c"}, {"sha": "1d847b86593d79511ddc78aa374c0f20536a449c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d847b86593d79511ddc78aa374c0f20536a449c", "html_url": "https://github.com/rust-lang/rust/commit/1d847b86593d79511ddc78aa374c0f20536a449c"}], "stats": {"total": 94, "additions": 38, "deletions": 56}, "files": [{"sha": "25b7b87a15ab734c21d028645439e3cf7b4dedc9", "filename": "tests/run-make/inaccessible-temp-dir/Makefile", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9a3258fa52acdc4b63d0a49df2bd989153440d9b/tests%2Frun-make%2Finaccessible-temp-dir%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9a3258fa52acdc4b63d0a49df2bd989153440d9b/tests%2Frun-make%2Finaccessible-temp-dir%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Finaccessible-temp-dir%2FMakefile?ref=9a3258fa52acdc4b63d0a49df2bd989153440d9b", "patch": "@@ -0,0 +1,32 @@\n+# only-linux\n+# ignore-arm - linker error on `armhf-gnu`\n+\n+include ../tools.mk\n+\n+# Issue #66530: We would ICE if someone compiled with `-o /dev/null`,\n+# because we would try to generate auxiliary files in `/dev/` (which\n+# at least the OS X file system rejects).\n+#\n+# An attempt to `-Ztemps-dir` into a directory we cannot write into should\n+# indeed be an error; but not an ICE.\n+#\n+# However, some folks run tests as root, which can write `/dev/` and end\n+# up clobbering `/dev/null`. Instead we'll use an inaccessible path, which\n+# also used to ICE, but even root can't magically write there.\n+#\n+# Note that `-Ztemps-dir` uses `create_dir_all` so it is not sufficient to\n+# use a directory with non-existing parent like `/does-not-exist/output`.\n+\n+all:\n+\t# Create an inaccessible directory\n+\tmkdir $(TMPDIR)/inaccessible\n+\tchmod 000 $(TMPDIR)/inaccessible\n+\n+\t# Run rustc with `-Ztemps-dir` set to a directory \n+\t# *inside* the inaccessible one, so that it can't create it\n+\t$(RUSTC) program.rs -Ztemps-dir=$(TMPDIR)/inaccessible/tmp 2>&1 \\\n+\t\t| $(CGREP) \"failed to find or create the directory specified by `--temps-dir`\"\n+\n+\t# Make the inaccessible directory accessible,\n+\t# so that compiletest can delete the temp dir\n+\tchmod +rw $(TMPDIR)/inaccessible"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "tests/run-make/inaccessible-temp-dir/program.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a3258fa52acdc4b63d0a49df2bd989153440d9b/tests%2Frun-make%2Finaccessible-temp-dir%2Fprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3258fa52acdc4b63d0a49df2bd989153440d9b/tests%2Frun-make%2Finaccessible-temp-dir%2Fprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Finaccessible-temp-dir%2Fprogram.rs?ref=9a3258fa52acdc4b63d0a49df2bd989153440d9b", "patch": "@@ -0,0 +1 @@\n+fn main() {}"}, {"sha": "9c0aa01357217294e70c38958be09ae0b411920c", "filename": "tests/ui/io-checks/inaccessbile-temp-dir.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1a6ae3d692cfb52b21d0f45ba50b659486e53d6c/tests%2Fui%2Fio-checks%2Finaccessbile-temp-dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6ae3d692cfb52b21d0f45ba50b659486e53d6c/tests%2Fui%2Fio-checks%2Finaccessbile-temp-dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fio-checks%2Finaccessbile-temp-dir.rs?ref=1a6ae3d692cfb52b21d0f45ba50b659486e53d6c", "patch": "@@ -1,39 +0,0 @@\n-// Issue #66530: We would ICE if someone compiled with `-o /dev/null`,\n-// because we would try to generate auxiliary files in `/dev/` (which\n-// at least the OS X file system rejects).\n-//\n-// An attempt to `-o` into a directory we cannot write into should indeed\n-// be an error; but not an ICE.\n-//\n-// However, some folks run tests as root, which can write `/dev/` and end\n-// up clobbering `/dev/null`. Instead we'll use a non-existent path, which\n-// also used to ICE, but even root can't magically write there.\n-\n-// compile-flags: -Z temps-dir=/does-not-exist/output\n-\n-// The error-pattern check occurs *before* normalization, and the error patterns\n-// are wildly different between build environments. So this is a cop-out (and we\n-// rely on the checking of the normalized stderr output as our actual\n-// \"verification\" of the diagnostic).\n-\n-// error-pattern: error\n-\n-// On Mac OS X, we get an error like the below\n-// normalize-stderr-test \"failed to write bytecode to /does-not-exist/output.non_ice_error_on_worker_io_fail.*\" -> \"io error modifying /does-not-exist/\"\n-\n-// On Linux, we get an error like the below\n-// normalize-stderr-test \"couldn't create a temp dir.*\" -> \"io error modifying /does-not-exist/\"\n-\n-// ignore-windows - this is a unix-specific test\n-// ignore-emscripten - the file-system issues do not replicate here\n-// ignore-wasm - the file-system issues do not replicate here\n-// ignore-arm - the file-system issues do not replicate here, at least on armhf-gnu\n-\n-#![crate_type = \"lib\"]\n-#![cfg_attr(not(feature = \"std\"), no_std)]\n-pub mod task {\n-    pub mod __internal {\n-        use crate::task::Waker;\n-    }\n-    pub use core::task::Waker;\n-}"}, {"sha": "2fc5f93ef791a11ed06c38dfc7f3bbf7034de4ba", "filename": "tests/ui/io-checks/inaccessbile-temp-dir.stderr", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a6ae3d692cfb52b21d0f45ba50b659486e53d6c/tests%2Fui%2Fio-checks%2Finaccessbile-temp-dir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a6ae3d692cfb52b21d0f45ba50b659486e53d6c/tests%2Fui%2Fio-checks%2Finaccessbile-temp-dir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fio-checks%2Finaccessbile-temp-dir.stderr?ref=1a6ae3d692cfb52b21d0f45ba50b659486e53d6c", "patch": "@@ -1,4 +0,0 @@\n-error: failed to find or create the directory specified by `--temps-dir`\n-\n-error: aborting due to previous error\n-"}, {"sha": "6ec81a943067b43519778d0ef88c96c08d9a75d1", "filename": "tests/ui/io-checks/non-ice-error-on-worker-io-fail.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9a3258fa52acdc4b63d0a49df2bd989153440d9b/tests%2Fui%2Fio-checks%2Fnon-ice-error-on-worker-io-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3258fa52acdc4b63d0a49df2bd989153440d9b/tests%2Fui%2Fio-checks%2Fnon-ice-error-on-worker-io-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fio-checks%2Fnon-ice-error-on-worker-io-fail.rs?ref=9a3258fa52acdc4b63d0a49df2bd989153440d9b", "patch": "@@ -9,7 +9,7 @@\n // up clobbering `/dev/null`. Instead we'll use a non-existent path, which\n // also used to ICE, but even root can't magically write there.\n \n-// compile-flags: -o /does-not-exist/output\n+// compile-flags: -o ./does-not-exist/output\n \n // The error-pattern check occurs *before* normalization, and the error patterns\n // are wildly different between build environments. So this is a cop-out (and we\n@@ -19,22 +19,14 @@\n // error-pattern: error\n \n // On Mac OS X, we get an error like the below\n-// normalize-stderr-test \"failed to write bytecode to /does-not-exist/output.non_ice_error_on_worker_io_fail.*\" -> \"io error modifying /does-not-exist/\"\n+// normalize-stderr-test \"failed to write bytecode to ./does-not-exist/output.non_ice_error_on_worker_io_fail.*\" -> \"io error modifying ./does-not-exist/\"\n \n // On Linux, we get an error like the below\n-// normalize-stderr-test \"couldn't create a temp dir.*\" -> \"io error modifying /does-not-exist/\"\n+// normalize-stderr-test \"couldn't create a temp dir.*\" -> \"io error modifying ./does-not-exist/\"\n \n // ignore-windows - this is a unix-specific test\n // ignore-emscripten - the file-system issues do not replicate here\n // ignore-wasm - the file-system issues do not replicate here\n // ignore-arm - the file-system issues do not replicate here, at least on armhf-gnu\n \n-#![crate_type=\"lib\"]\n-\n-#![cfg_attr(not(feature = \"std\"), no_std)]\n-pub mod task {\n-    pub mod __internal {\n-        use crate::task::Waker;\n-    }\n-    pub use core::task::Waker;\n-}\n+#![crate_type = \"lib\"]"}, {"sha": "f1d9ed8ac8b765974027b75d2d9e5c0535517dc7", "filename": "tests/ui/io-checks/non-ice-error-on-worker-io-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3258fa52acdc4b63d0a49df2bd989153440d9b/tests%2Fui%2Fio-checks%2Fnon-ice-error-on-worker-io-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a3258fa52acdc4b63d0a49df2bd989153440d9b/tests%2Fui%2Fio-checks%2Fnon-ice-error-on-worker-io-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fio-checks%2Fnon-ice-error-on-worker-io-fail.stderr?ref=9a3258fa52acdc4b63d0a49df2bd989153440d9b", "patch": "@@ -1,6 +1,6 @@\n warning: ignoring --out-dir flag due to -o flag\n \n-error: io error modifying /does-not-exist/\n+error: io error modifying ./does-not-exist/\n \n error: aborting due to previous error; 1 warning emitted\n "}]}