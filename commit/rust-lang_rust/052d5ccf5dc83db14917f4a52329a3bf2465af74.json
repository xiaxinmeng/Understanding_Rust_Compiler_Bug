{"sha": "052d5ccf5dc83db14917f4a52329a3bf2465af74", "node_id": "C_kwDOAAsO6NoAKDA1MmQ1Y2NmNWRjODNkYjE0OTE3ZjRhNTIzMjlhM2JmMjQ2NWFmNzQ", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-11-28T13:03:47Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-11-28T13:03:47Z"}, "message": "Implement __isb for AArch64\n\nThis is necessary for the mutex implementation of libstd when there is\ncontention. Seems like I hadn't hit this before by sheer luck.", "tree": {"sha": "06ce6195f2aea7185cddbe6dd5350df42255fd56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06ce6195f2aea7185cddbe6dd5350df42255fd56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/052d5ccf5dc83db14917f4a52329a3bf2465af74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/052d5ccf5dc83db14917f4a52329a3bf2465af74", "html_url": "https://github.com/rust-lang/rust/commit/052d5ccf5dc83db14917f4a52329a3bf2465af74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/052d5ccf5dc83db14917f4a52329a3bf2465af74/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26d48c9a378f20f817e779328affc6c2643a3505", "url": "https://api.github.com/repos/rust-lang/rust/commits/26d48c9a378f20f817e779328affc6c2643a3505", "html_url": "https://github.com/rust-lang/rust/commit/26d48c9a378f20f817e779328affc6c2643a3505"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "b431158d2690f02d5f3077820ec7c1f36070f7bf", "filename": "src/intrinsics/llvm_aarch64.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/052d5ccf5dc83db14917f4a52329a3bf2465af74/src%2Fintrinsics%2Fllvm_aarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052d5ccf5dc83db14917f4a52329a3bf2465af74/src%2Fintrinsics%2Fllvm_aarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm_aarch64.rs?ref=052d5ccf5dc83db14917f4a52329a3bf2465af74", "patch": "@@ -16,6 +16,10 @@ pub(crate) fn codegen_aarch64_llvm_intrinsic_call<'tcx>(\n     // llvm.aarch64.neon.sqshl.v*i*\n \n     match intrinsic {\n+        \"llvm.aarch64.isb\" => {\n+            fx.bcx.ins().fence();\n+        }\n+\n         _ if intrinsic.starts_with(\"llvm.aarch64.neon.abs.v\") => {\n             intrinsic_args!(fx, args => (a); intrinsic);\n "}]}