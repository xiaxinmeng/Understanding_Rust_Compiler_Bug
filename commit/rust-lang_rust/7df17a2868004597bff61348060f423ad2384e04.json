{"sha": "7df17a2868004597bff61348060f423ad2384e04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZjE3YTI4NjgwMDQ1OTdiZmY2MTM0ODA2MGY0MjNhZDIzODRlMDQ=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-12-22T13:25:58Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-12-26T16:26:33Z"}, "message": "Rename `UniquePtr` to `Unique`\n\nMostly following the convention in RFC 356", "tree": {"sha": "131c32ffdd74d95643ed2dc7dca6b01ff197e8fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/131c32ffdd74d95643ed2dc7dca6b01ff197e8fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7df17a2868004597bff61348060f423ad2384e04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7df17a2868004597bff61348060f423ad2384e04", "html_url": "https://github.com/rust-lang/rust/commit/7df17a2868004597bff61348060f423ad2384e04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7df17a2868004597bff61348060f423ad2384e04/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51d2fefd91bbbfa8572d30f9bd4374fe53514cd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/51d2fefd91bbbfa8572d30f9bd4374fe53514cd9", "html_url": "https://github.com/rust-lang/rust/commit/51d2fefd91bbbfa8572d30f9bd4374fe53514cd9"}], "stats": {"total": 106, "additions": 53, "deletions": 53}, "files": [{"sha": "3c6b2d2cbc068904bc2f87e6aa7b844eafb9f49b", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7df17a2868004597bff61348060f423ad2384e04/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df17a2868004597bff61348060f423ad2384e04/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=7df17a2868004597bff61348060f423ad2384e04", "patch": "@@ -19,7 +19,7 @@ use core::hash::{mod, Hash};\n use core::kinds::Sized;\n use core::mem;\n use core::option::Option;\n-use core::ptr::UniquePtr;\n+use core::ptr::Unique;\n use core::raw::TraitObject;\n use core::result::Result;\n use core::result::Result::{Ok, Err};\n@@ -45,7 +45,7 @@ pub static HEAP: () = ();\n /// A type that represents a uniquely-owned value.\n #[lang = \"owned_box\"]\n #[unstable = \"custom allocators will add an additional type parameter (with default)\"]\n-pub struct Box<T>(UniquePtr<T>);\n+pub struct Box<T>(Unique<T>);\n \n #[stable]\n impl<T: Default> Default for Box<T> {"}, {"sha": "d700b187e8a6d6265be52aede3006e0cdfaee8cb", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7df17a2868004597bff61348060f423ad2384e04/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df17a2868004597bff61348060f423ad2384e04/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=7df17a2868004597bff61348060f423ad2384e04", "patch": "@@ -58,7 +58,7 @@ use core::kinds::marker::{ContravariantLifetime, InvariantType};\n use core::mem;\n use core::num::{Int, UnsignedInt};\n use core::ops;\n-use core::ptr::{mod, UniquePtr};\n+use core::ptr::{mod, Unique};\n use core::raw::Slice as RawSlice;\n use core::uint;\n \n@@ -133,7 +133,7 @@ use slice::CloneSliceExt;\n #[unsafe_no_drop_flag]\n #[stable]\n pub struct Vec<T> {\n-    ptr: UniquePtr<T>,\n+    ptr: Unique<T>,\n     len: uint,\n     cap: uint,\n }\n@@ -176,7 +176,7 @@ impl<T> Vec<T> {\n         // non-null value which is fine since we never call deallocate on the ptr\n         // if cap is 0. The reason for this is because the pointer of a slice\n         // being NULL would break the null pointer optimization for enums.\n-        Vec { ptr: UniquePtr(EMPTY as *mut T), len: 0, cap: 0 }\n+        Vec { ptr: Unique(EMPTY as *mut T), len: 0, cap: 0 }\n     }\n \n     /// Constructs a new, empty `Vec<T>` with the specified capacity.\n@@ -209,15 +209,15 @@ impl<T> Vec<T> {\n     #[stable]\n     pub fn with_capacity(capacity: uint) -> Vec<T> {\n         if mem::size_of::<T>() == 0 {\n-            Vec { ptr: UniquePtr(EMPTY as *mut T), len: 0, cap: uint::MAX }\n+            Vec { ptr: Unique(EMPTY as *mut T), len: 0, cap: uint::MAX }\n         } else if capacity == 0 {\n             Vec::new()\n         } else {\n             let size = capacity.checked_mul(mem::size_of::<T>())\n                                .expect(\"capacity overflow\");\n             let ptr = unsafe { allocate(size, mem::min_align_of::<T>()) };\n             if ptr.is_null() { ::alloc::oom() }\n-            Vec { ptr: UniquePtr(ptr as *mut T), len: 0, cap: capacity }\n+            Vec { ptr: Unique(ptr as *mut T), len: 0, cap: capacity }\n         }\n     }\n \n@@ -284,7 +284,7 @@ impl<T> Vec<T> {\n     #[unstable = \"needs finalization\"]\n     pub unsafe fn from_raw_parts(ptr: *mut T, length: uint,\n                                  capacity: uint) -> Vec<T> {\n-        Vec { ptr: UniquePtr(ptr), len: length, cap: capacity }\n+        Vec { ptr: Unique(ptr), len: length, cap: capacity }\n     }\n \n     /// Creates a vector by copying the elements from a raw pointer.\n@@ -803,7 +803,7 @@ impl<T> Vec<T> {\n             unsafe {\n                 // Overflow check is unnecessary as the vector is already at\n                 // least this large.\n-                self.ptr = UniquePtr(reallocate(self.ptr.0 as *mut u8,\n+                self.ptr = Unique(reallocate(self.ptr.0 as *mut u8,\n                                                self.cap * mem::size_of::<T>(),\n                                                self.len * mem::size_of::<T>(),\n                                                mem::min_align_of::<T>()) as *mut T);\n@@ -1110,7 +1110,7 @@ impl<T> Vec<T> {\n             let size = max(old_size, 2 * mem::size_of::<T>()) * 2;\n             if old_size > size { panic!(\"capacity overflow\") }\n             unsafe {\n-                self.ptr = UniquePtr(alloc_or_realloc(self.ptr.0, old_size, size));\n+                self.ptr = Unique(alloc_or_realloc(self.ptr.0, old_size, size));\n                 if self.ptr.0.is_null() { ::alloc::oom() }\n             }\n             self.cap = max(self.cap, 2) * 2;\n@@ -1231,7 +1231,7 @@ impl<T> Vec<T> {\n             let size = capacity.checked_mul(mem::size_of::<T>())\n                                .expect(\"capacity overflow\");\n             unsafe {\n-                self.ptr = UniquePtr(alloc_or_realloc(self.ptr.0,\n+                self.ptr = Unique(alloc_or_realloc(self.ptr.0,\n                                                      self.cap * mem::size_of::<T>(),\n                                                      size));\n                 if self.ptr.0.is_null() { ::alloc::oom() }\n@@ -1420,7 +1420,7 @@ impl<T> IntoIter<T> {\n             for _x in self { }\n             let IntoIter { allocation, cap, ptr: _ptr, end: _end } = self;\n             mem::forget(self);\n-            Vec { ptr: UniquePtr(allocation), cap: cap, len: 0 }\n+            Vec { ptr: Unique(allocation), cap: cap, len: 0 }\n         }\n     }\n "}, {"sha": "8c9d77a0e9cd7f48789bda02c81fcb6d92921ae5", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7df17a2868004597bff61348060f423ad2384e04/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df17a2868004597bff61348060f423ad2384e04/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=7df17a2868004597bff61348060f423ad2384e04", "patch": "@@ -505,28 +505,28 @@ impl<T> PartialOrd for *mut T {\n \n /// A wrapper around a raw `*mut T` that indicates that the possessor\n /// of this wrapper owns the referent. This in turn implies that the\n-/// `UniquePtr<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a\n+/// `Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a\n /// raw `*mut T` (which conveys no particular ownership semantics).\n /// Useful for building abstractions like `Vec<T>` or `Box<T>`, which\n /// internally use raw pointers to manage the memory that they own.\n-pub struct UniquePtr<T>(pub *mut T);\n+pub struct Unique<T>(pub *mut T);\n \n-/// `UniquePtr` pointers are `Send` if `T` is `Send` because the data they\n+/// `Unique` pointers are `Send` if `T` is `Send` because the data they\n /// reference is unaliased. Note that this aliasing invariant is\n /// unenforced by the type system; the abstraction using the\n-/// `UniquePtr` must enforce it.\n-unsafe impl<T:Send> Send for UniquePtr<T> { }\n+/// `Unique` must enforce it.\n+unsafe impl<T:Send> Send for Unique<T> { }\n \n-/// `UniquePtr` pointers are `Sync` if `T` is `Sync` because the data they\n+/// `Unique` pointers are `Sync` if `T` is `Sync` because the data they\n /// reference is unaliased. Note that this aliasing invariant is\n /// unenforced by the type system; the abstraction using the\n-/// `UniquePtr` must enforce it.\n-unsafe impl<T:Sync> Sync for UniquePtr<T> { }\n+/// `Unique` must enforce it.\n+unsafe impl<T:Sync> Sync for Unique<T> { }\n \n-impl<T> UniquePtr<T> {\n-    /// Returns a null UniquePtr.\n-    pub fn null() -> UniquePtr<T> {\n-        UniquePtr(RawPtr::null())\n+impl<T> Unique<T> {\n+    /// Returns a null Unique.\n+    pub fn null() -> Unique<T> {\n+        Unique(RawPtr::null())\n     }\n \n     /// Return an (unsafe) pointer into the memory owned by `self`."}, {"sha": "8c4f74027a52f0a7a9ede9a5b4e7d8b17ebcadb5", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7df17a2868004597bff61348060f423ad2384e04/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df17a2868004597bff61348060f423ad2384e04/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=7df17a2868004597bff61348060f423ad2384e04", "patch": "@@ -29,7 +29,7 @@ extern crate libc;\n \n use libc::{c_void, size_t, c_int};\n use std::c_vec::CVec;\n-use std::ptr::UniquePtr;\n+use std::ptr::Unique;\n \n #[link(name = \"miniz\", kind = \"static\")]\n extern {\n@@ -60,7 +60,7 @@ fn deflate_bytes_internal(bytes: &[u8], flags: c_int) -> Option<CVec<u8>> {\n                                              &mut outsz,\n                                              flags);\n         if !res.is_null() {\n-            let res = UniquePtr(res);\n+            let res = Unique(res);\n             Some(CVec::new_with_dtor(res.0 as *mut u8, outsz as uint, move|:| libc::free(res.0)))\n         } else {\n             None\n@@ -86,7 +86,7 @@ fn inflate_bytes_internal(bytes: &[u8], flags: c_int) -> Option<CVec<u8>> {\n                                                &mut outsz,\n                                                flags);\n         if !res.is_null() {\n-            let res = UniquePtr(res);\n+            let res = Unique(res);\n             Some(CVec::new_with_dtor(res.0 as *mut u8, outsz as uint, move|:| libc::free(res.0)))\n         } else {\n             None"}, {"sha": "d81894a3dafca4e0ee6606102c757c2b51bd16f0", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7df17a2868004597bff61348060f423ad2384e04/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df17a2868004597bff61348060f423ad2384e04/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=7df17a2868004597bff61348060f423ad2384e04", "patch": "@@ -113,7 +113,7 @@ pub struct Upvar {\n // different kinds of pointers:\n #[deriving(Clone, Copy, PartialEq, Eq, Hash, Show)]\n pub enum PointerKind {\n-    UniquePtr,\n+    Unique,\n     BorrowedPtr(ty::BorrowKind, ty::Region),\n     Implicit(ty::BorrowKind, ty::Region),     // Implicit deref of a borrowed ptr.\n     UnsafePtr(ast::Mutability)\n@@ -199,7 +199,7 @@ pub fn opt_deref_kind(t: Ty) -> Option<deref_kind> {\n     match t.sty {\n         ty::ty_uniq(_) |\n         ty::ty_closure(box ty::ClosureTy {store: ty::UniqTraitStore, ..}) => {\n-            Some(deref_ptr(UniquePtr))\n+            Some(deref_ptr(Unique))\n         }\n \n         ty::ty_rptr(r, mt) => {\n@@ -315,7 +315,7 @@ impl MutabilityCategory {\n     pub fn from_pointer_kind(base_mutbl: MutabilityCategory,\n                              ptr: PointerKind) -> MutabilityCategory {\n         match ptr {\n-            UniquePtr => {\n+            Unique => {\n                 base_mutbl.inherit()\n             }\n             BorrowedPtr(borrow_kind, _) | Implicit(borrow_kind, _) => {\n@@ -1351,7 +1351,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n                           Implicit(..) => {\n                             \"dereference (dereference is implicit, due to indexing)\".to_string()\n                           }\n-                          UniquePtr => format!(\"dereference of `{}`\", ptr_sigil(pk)),\n+                          Unique => format!(\"dereference of `{}`\", ptr_sigil(pk)),\n                           _ => format!(\"dereference of `{}`-pointer\", ptr_sigil(pk))\n                       }\n                   }\n@@ -1412,7 +1412,7 @@ impl<'tcx> cmt_<'tcx> {\n             }\n             cat_downcast(ref b, _) |\n             cat_interior(ref b, _) |\n-            cat_deref(ref b, _, UniquePtr) => {\n+            cat_deref(ref b, _, Unique) => {\n                 b.guarantor()\n             }\n         }\n@@ -1431,7 +1431,7 @@ impl<'tcx> cmt_<'tcx> {\n             cat_deref(ref b, _, BorrowedPtr(ty::UniqueImmBorrow, _)) |\n             cat_deref(ref b, _, Implicit(ty::UniqueImmBorrow, _)) |\n             cat_downcast(ref b, _) |\n-            cat_deref(ref b, _, UniquePtr) |\n+            cat_deref(ref b, _, Unique) |\n             cat_interior(ref b, _) => {\n                 // Aliasability depends on base cmt\n                 b.freely_aliasable(ctxt)\n@@ -1523,7 +1523,7 @@ impl<'tcx> Repr<'tcx> for categorization<'tcx> {\n \n pub fn ptr_sigil(ptr: PointerKind) -> &'static str {\n     match ptr {\n-        UniquePtr => \"Box\",\n+        Unique => \"Box\",\n         BorrowedPtr(ty::ImmBorrow, _) |\n         Implicit(ty::ImmBorrow, _) => \"&\",\n         BorrowedPtr(ty::MutBorrow, _) |"}, {"sha": "4ad060202ee43149fa28ff42cf8442d7c41420fe", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7df17a2868004597bff61348060f423ad2384e04/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df17a2868004597bff61348060f423ad2384e04/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=7df17a2868004597bff61348060f423ad2384e04", "patch": "@@ -33,11 +33,11 @@ use std::rc::Rc;\n \n // FIXME (#16118): These functions are intended to allow the borrow checker to\n // be less precise in its handling of Box while still allowing moves out of a\n-// Box. They should be removed when UniquePtr is removed from LoanPath.\n+// Box. They should be removed when Unique is removed from LoanPath.\n \n fn owned_ptr_base_path<'a, 'tcx>(loan_path: &'a LoanPath<'tcx>) -> &'a LoanPath<'tcx> {\n-    //! Returns the base of the leftmost dereference of an UniquePtr in\n-    //! `loan_path`. If there is no dereference of an UniquePtr in `loan_path`,\n+    //! Returns the base of the leftmost dereference of an Unique in\n+    //! `loan_path`. If there is no dereference of an Unique in `loan_path`,\n     //! then it just returns `loan_path` itself.\n \n     return match helper(loan_path) {\n@@ -48,7 +48,7 @@ fn owned_ptr_base_path<'a, 'tcx>(loan_path: &'a LoanPath<'tcx>) -> &'a LoanPath<\n     fn helper<'a, 'tcx>(loan_path: &'a LoanPath<'tcx>) -> Option<&'a LoanPath<'tcx>> {\n         match loan_path.kind {\n             LpVar(_) | LpUpvar(_) => None,\n-            LpExtend(ref lp_base, _, LpDeref(mc::UniquePtr)) => {\n+            LpExtend(ref lp_base, _, LpDeref(mc::Unique)) => {\n                 match helper(&**lp_base) {\n                     v @ Some(_) => v,\n                     None => Some(&**lp_base)\n@@ -72,7 +72,7 @@ fn owned_ptr_base_path_rc<'tcx>(loan_path: &Rc<LoanPath<'tcx>>) -> Rc<LoanPath<'\n     fn helper<'tcx>(loan_path: &Rc<LoanPath<'tcx>>) -> Option<Rc<LoanPath<'tcx>>> {\n         match loan_path.kind {\n             LpVar(_) | LpUpvar(_) => None,\n-            LpExtend(ref lp_base, _, LpDeref(mc::UniquePtr)) => {\n+            LpExtend(ref lp_base, _, LpDeref(mc::Unique)) => {\n                 match helper(lp_base) {\n                     v @ Some(_) => v,\n                     None => Some(lp_base.clone())\n@@ -880,7 +880,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                         }\n                     }\n \n-                    mc::cat_deref(b, _, mc::UniquePtr) => {\n+                    mc::cat_deref(b, _, mc::Unique) => {\n                         assert_eq!(cmt.mutbl, mc::McInherited);\n                         cmt = b;\n                     }"}, {"sha": "ef9130bb607d816eb23aaa31579fafde4ab12910", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7df17a2868004597bff61348060f423ad2384e04/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df17a2868004597bff61348060f423ad2384e04/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=7df17a2868004597bff61348060f423ad2384e04", "patch": "@@ -291,9 +291,9 @@ fn add_fragment_siblings<'tcx>(this: &MoveData<'tcx>,\n             add_fragment_siblings(this, tcx, gathered_fragments, loan_parent.clone(), origin_id);\n         }\n \n-        // *LV for UniquePtr consumes the contents of the box (at\n+        // *LV for Unique consumes the contents of the box (at\n         // least when it is non-copy...), so propagate inward.\n-        LpExtend(ref loan_parent, _, LpDeref(mc::UniquePtr)) => {\n+        LpExtend(ref loan_parent, _, LpDeref(mc::Unique)) => {\n             add_fragment_siblings(this, tcx, gathered_fragments, loan_parent.clone(), origin_id);\n         }\n "}, {"sha": "ed5abda6f7cf694392e8cbd3b63ee99209236eb0", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7df17a2868004597bff61348060f423ad2384e04/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df17a2868004597bff61348060f423ad2384e04/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=7df17a2868004597bff61348060f423ad2384e04", "patch": "@@ -190,7 +190,7 @@ fn check_and_get_illegal_move_origin<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n             }\n         }\n \n-        mc::cat_deref(ref b, _, mc::UniquePtr) => {\n+        mc::cat_deref(ref b, _, mc::Unique) => {\n             check_and_get_illegal_move_origin(bccx, b)\n         }\n     }"}, {"sha": "1c57097ae26339a9c70626cc96617836836521a1", "filename": "src/librustc_borrowck/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7df17a2868004597bff61348060f423ad2384e04/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df17a2868004597bff61348060f423ad2384e04/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=7df17a2868004597bff61348060f423ad2384e04", "patch": "@@ -84,7 +84,7 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n             }\n \n             mc::cat_downcast(ref base, _) |\n-            mc::cat_deref(ref base, _, mc::UniquePtr) |     // L-Deref-Send\n+            mc::cat_deref(ref base, _, mc::Unique) |     // L-Deref-Send\n             mc::cat_interior(ref base, _) => {             // L-Field\n                 self.check(base, discr_scope)\n             }\n@@ -129,7 +129,7 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n                 r\n             }\n             mc::cat_downcast(ref cmt, _) |\n-            mc::cat_deref(ref cmt, _, mc::UniquePtr) |\n+            mc::cat_deref(ref cmt, _, mc::Unique) |\n             mc::cat_interior(ref cmt, _) => {\n                 self.scope(cmt)\n             }"}, {"sha": "1773e8cb2335401c281754b41416cc1b9cb18c4a", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7df17a2868004597bff61348060f423ad2384e04/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df17a2868004597bff61348060f423ad2384e04/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=7df17a2868004597bff61348060f423ad2384e04", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n \n             mc::cat_deref(cmt_base, _, pk) => {\n                 match pk {\n-                    mc::UniquePtr => {\n+                    mc::Unique => {\n                         // R-Deref-Send-Pointer\n                         //\n                         // When we borrow the interior of an owned pointer, we"}, {"sha": "87fa826157596f92cdc107541f5b9443bee46488", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7df17a2868004597bff61348060f423ad2384e04/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df17a2868004597bff61348060f423ad2384e04/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=7df17a2868004597bff61348060f423ad2384e04", "patch": "@@ -1460,7 +1460,7 @@ fn link_region<'a, 'tcx>(rcx: &Rcx<'a, 'tcx>,\n             }\n \n             mc::cat_downcast(cmt_base, _) |\n-            mc::cat_deref(cmt_base, _, mc::UniquePtr) |\n+            mc::cat_deref(cmt_base, _, mc::Unique) |\n             mc::cat_interior(cmt_base, _) => {\n                 // Borrowing interior or owned data requires the base\n                 // to be valid and borrowable in the same fashion.\n@@ -1684,7 +1684,7 @@ fn adjust_upvar_borrow_kind_for_mut<'a, 'tcx>(rcx: &Rcx<'a, 'tcx>,\n                cmt.repr(rcx.tcx()));\n \n         match cmt.cat.clone() {\n-            mc::cat_deref(base, _, mc::UniquePtr) |\n+            mc::cat_deref(base, _, mc::Unique) |\n             mc::cat_interior(base, _) |\n             mc::cat_downcast(base, _) => {\n                 // Interior or owned data is mutable if base is\n@@ -1731,7 +1731,7 @@ fn adjust_upvar_borrow_kind_for_unique<'a, 'tcx>(rcx: &Rcx<'a, 'tcx>, cmt: mc::c\n                cmt.repr(rcx.tcx()));\n \n         match cmt.cat.clone() {\n-            mc::cat_deref(base, _, mc::UniquePtr) |\n+            mc::cat_deref(base, _, mc::Unique) |\n             mc::cat_interior(base, _) |\n             mc::cat_downcast(base, _) => {\n                 // Interior or owned data is unique if base is"}, {"sha": "3ae3a8ffbad3bfe3399559851dbbecdbec3c1018", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7df17a2868004597bff61348060f423ad2384e04/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df17a2868004597bff61348060f423ad2384e04/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=7df17a2868004597bff61348060f423ad2384e04", "patch": "@@ -23,7 +23,7 @@ use num::{Int, UnsignedInt};\n use ops::{Deref, DerefMut, Drop};\n use option::Option;\n use option::Option::{Some, None};\n-use ptr::{UniquePtr, RawPtr, copy_nonoverlapping_memory, zero_memory};\n+use ptr::{Unique, RawPtr, copy_nonoverlapping_memory, zero_memory};\n use ptr;\n use rt::heap::{allocate, deallocate};\n \n@@ -69,7 +69,7 @@ const EMPTY_BUCKET: u64 = 0u64;\n pub struct RawTable<K, V> {\n     capacity: uint,\n     size:     uint,\n-    hashes:   UniquePtr<u64>,\n+    hashes:   Unique<u64>,\n     // Because K/V do not appear directly in any of the types in the struct,\n     // inform rustc that in fact instances of K and V are reachable from here.\n     marker:   marker::CovariantType<(K,V)>,\n@@ -563,7 +563,7 @@ impl<K, V> RawTable<K, V> {\n             return RawTable {\n                 size: 0,\n                 capacity: 0,\n-                hashes: UniquePtr::null(),\n+                hashes: Unique::null(),\n                 marker: marker::CovariantType,\n             };\n         }\n@@ -602,7 +602,7 @@ impl<K, V> RawTable<K, V> {\n         RawTable {\n             capacity: capacity,\n             size:     0,\n-            hashes:   UniquePtr(hashes),\n+            hashes:   Unique(hashes),\n             marker:   marker::CovariantType,\n         }\n     }"}]}