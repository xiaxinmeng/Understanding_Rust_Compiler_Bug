{"sha": "65f040031eeb1e3f0416290aaf6ab0aedb357443", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZjA0MDAzMWVlYjFlM2YwNDE2MjkwYWFmNmFiMGFlZGIzNTc0NDM=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-17T03:36:42Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:03:28Z"}, "message": "Remove FunctionContext.landingpad_alloca.", "tree": {"sha": "e8860bff4c7a4d79143e48dc9f0b0166b37a390f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8860bff4c7a4d79143e48dc9f0b0166b37a390f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65f040031eeb1e3f0416290aaf6ab0aedb357443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65f040031eeb1e3f0416290aaf6ab0aedb357443", "html_url": "https://github.com/rust-lang/rust/commit/65f040031eeb1e3f0416290aaf6ab0aedb357443", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65f040031eeb1e3f0416290aaf6ab0aedb357443/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05d107d4a186aab7f92bb6423e0a23a98a1395d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/05d107d4a186aab7f92bb6423e0a23a98a1395d5", "html_url": "https://github.com/rust-lang/rust/commit/05d107d4a186aab7f92bb6423e0a23a98a1395d5"}], "stats": {"total": 61, "additions": 17, "deletions": 44}, "files": [{"sha": "fbf380723e6332399ad87ccd8021e0aa9e262106", "filename": "src/librustc_trans/cleanup.rs", "status": "modified", "additions": 16, "deletions": 34, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/65f040031eeb1e3f0416290aaf6ab0aedb357443/src%2Flibrustc_trans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f040031eeb1e3f0416290aaf6ab0aedb357443/src%2Flibrustc_trans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcleanup.rs?ref=65f040031eeb1e3f0416290aaf6ab0aedb357443", "patch": "@@ -155,14 +155,12 @@ impl<'tcx> CleanupScope<'tcx> {\n         }\n     }\n \n-    /// Creates a landing pad for the top scope, if one does not exist. The\n-    /// landing pad will perform all cleanups necessary for an unwind and then\n-    /// `resume` to continue error propagation:\n+    /// Creates a landing pad for the top scope. The landing pad will perform all cleanups necessary\n+    /// for an unwind and then `resume` to continue error propagation:\n     ///\n     ///     landing_pad -> ... cleanups ... -> [resume]\n     ///\n-    /// (The cleanups and resume instruction are created by\n-    /// `trans_cleanups_to_exit_scope()`, not in this function itself.)\n+    /// This should only be called once per function, as it creates an alloca for the landingpad.\n     fn get_landing_pad<'a>(fcx: &FunctionContext<'a, 'tcx>, drop_val: &DropValue<'tcx>)\n         -> BasicBlockRef {\n         debug!(\"get_landing_pad\");\n@@ -171,6 +169,7 @@ impl<'tcx> CleanupScope<'tcx> {\n \n         let llpersonality = pad_bcx.fcx().eh_personality();\n \n+        let resume_bcx = fcx.build_new_block(\"resume\");\n         let val = if base::wants_msvc_seh(fcx.ccx.sess()) {\n             // A cleanup pad requires a personality function to be specified, so\n             // we do that here explicitly (happens implicitly below through\n@@ -179,6 +178,7 @@ impl<'tcx> CleanupScope<'tcx> {\n             // exceptions.\n             pad_bcx.set_personality_fn(llpersonality);\n             let llretval = pad_bcx.cleanup_pad(None, &[]);\n+            resume_bcx.cleanup_ret(resume_bcx.cleanup_pad(None, &[]), None);\n             UnwindKind::CleanupPad(llretval)\n         } else {\n             // The landing pad return type (the type being propagated). Not sure\n@@ -194,45 +194,27 @@ impl<'tcx> CleanupScope<'tcx> {\n             // The landing pad block is a cleanup\n             pad_bcx.set_cleanup(llretval);\n \n-            let addr = match fcx.landingpad_alloca.get() {\n-                Some(addr) => addr,\n-                None => {\n-                    let addr = pad_bcx.fcx().alloca(common::val_ty(llretval), \"\");\n-                    Lifetime::Start.call(&pad_bcx, addr);\n-                    fcx.landingpad_alloca.set(Some(addr));\n-                    addr\n-                }\n-            };\n+            let addr = pad_bcx.fcx().alloca(common::val_ty(llretval), \"\");\n+            Lifetime::Start.call(&pad_bcx, addr);\n             pad_bcx.store(llretval, addr);\n+            let lp = resume_bcx.load(addr);\n+            Lifetime::End.call(&resume_bcx, addr);\n+            if !resume_bcx.sess().target.target.options.custom_unwind_resume {\n+                resume_bcx.resume(lp);\n+            } else {\n+                let exc_ptr = resume_bcx.extract_value(lp, 0);\n+                resume_bcx.call(fcx.eh_unwind_resume().reify(fcx.ccx), &[exc_ptr], None);\n+            }\n             UnwindKind::LandingPad\n         };\n \n-        // Generate a block that will resume unwinding to the calling function\n-        let bcx = fcx.build_new_block(\"resume\");\n-        match val {\n-            UnwindKind::LandingPad => {\n-                let addr = fcx.landingpad_alloca.get().unwrap();\n-                let lp = bcx.load(addr);\n-                Lifetime::End.call(&bcx, addr);\n-                if !bcx.sess().target.target.options.custom_unwind_resume {\n-                    bcx.resume(lp);\n-                } else {\n-                    let exc_ptr = bcx.extract_value(lp, 0);\n-                    bcx.call(bcx.fcx().eh_unwind_resume().reify(bcx.ccx()), &[exc_ptr], None);\n-                }\n-            }\n-            UnwindKind::CleanupPad(_) => {\n-                bcx.cleanup_ret(bcx.cleanup_pad(None, &[]), None);\n-            }\n-        }\n-\n         let mut cleanup = fcx.build_new_block(\"clean_custom_\");\n \n         // Insert cleanup instructions into the cleanup block\n         drop_val.trans(val.get_funclet(&cleanup).as_ref(), &cleanup);\n \n         // Insert instruction into cleanup block to branch to the exit\n-        val.branch(&mut cleanup, bcx.llbb());\n+        val.branch(&mut cleanup, resume_bcx.llbb());\n \n         // Branch into the cleanup block\n         val.branch(&mut pad_bcx, cleanup.llbb());"}, {"sha": "a01d079c374ae6bc962e6c1c497472aea93b2adf", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65f040031eeb1e3f0416290aaf6ab0aedb357443/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65f040031eeb1e3f0416290aaf6ab0aedb357443/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=65f040031eeb1e3f0416290aaf6ab0aedb357443", "patch": "@@ -48,7 +48,7 @@ use std::borrow::Cow;\n use std::iter;\n use std::ops::Deref;\n use std::ffi::CString;\n-use std::cell::{Cell, Ref};\n+use std::cell::Ref;\n \n use syntax::ast;\n use syntax::symbol::{Symbol, InternedString};\n@@ -262,14 +262,6 @@ pub struct FunctionContext<'a, 'tcx: 'a> {\n     // allocas, so that LLVM will coalesce them into a single alloca call.\n     alloca_insert_pt: Option<ValueRef>,\n \n-    // When working with landingpad-based exceptions this value is alloca'd and\n-    // later loaded when using the resume instruction. This ends up being\n-    // critical to chaining landing pads and resuing already-translated\n-    // cleanups.\n-    //\n-    // Note that for cleanuppad-based exceptions this is not used.\n-    pub landingpad_alloca: Cell<Option<ValueRef>>,\n-\n     // Describes the return/argument LLVM types and their ABI handling.\n     pub fn_ty: FnType,\n \n@@ -331,7 +323,6 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n             llretslotptr: None,\n             param_env: ccx.tcx().empty_parameter_environment(),\n             alloca_insert_pt: None,\n-            landingpad_alloca: Cell::new(None),\n             fn_ty: fn_ty,\n             param_substs: param_substs,\n             ccx: ccx,"}]}