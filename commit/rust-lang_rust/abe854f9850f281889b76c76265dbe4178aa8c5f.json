{"sha": "abe854f9850f281889b76c76265dbe4178aa8c5f", "node_id": "C_kwDOAAsO6NoAKGFiZTg1NGY5ODUwZjI4MTg4OWI3NmM3NjI2NWRiZTQxNzhhYThjNWY", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-03-03T11:34:38Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-03-14T15:52:47Z"}, "message": "compiletest: Don't update PDB files of test cases in-place.", "tree": {"sha": "6ebb1c64c33140b559ecb69f884115b20ddef43e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ebb1c64c33140b559ecb69f884115b20ddef43e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abe854f9850f281889b76c76265dbe4178aa8c5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abe854f9850f281889b76c76265dbe4178aa8c5f", "html_url": "https://github.com/rust-lang/rust/commit/abe854f9850f281889b76c76265dbe4178aa8c5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abe854f9850f281889b76c76265dbe4178aa8c5f/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ad299aa670face2085d2abec6e8481fa582068a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ad299aa670face2085d2abec6e8481fa582068a", "html_url": "https://github.com/rust-lang/rust/commit/3ad299aa670face2085d2abec6e8481fa582068a"}], "stats": {"total": 57, "additions": 48, "deletions": 9}, "files": [{"sha": "cf9f5e1332ffa89d668175bf0e284dbe7b1e9101", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 48, "deletions": 9, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/abe854f9850f281889b76c76265dbe4178aa8c5f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe854f9850f281889b76c76265dbe4178aa8c5f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=abe854f9850f281889b76c76265dbe4178aa8c5f", "patch": "@@ -263,11 +263,19 @@ impl<'test> TestCx<'test> {\n             Ui | MirOpt => false,\n             mode => panic!(\"unimplemented for mode {:?}\", mode),\n         };\n-        if test_should_run { self.run_if_enabled() } else { WillExecute::No }\n+        if test_should_run {\n+            self.run_if_enabled()\n+        } else {\n+            WillExecute::No\n+        }\n     }\n \n     fn run_if_enabled(&self) -> WillExecute {\n-        if self.config.run_enabled() { WillExecute::Yes } else { WillExecute::Disabled }\n+        if self.config.run_enabled() {\n+            WillExecute::Yes\n+        } else {\n+            WillExecute::Disabled\n+        }\n     }\n \n     fn should_run_successfully(&self, pm: Option<PassMode>) -> bool {\n@@ -661,6 +669,19 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn run_debuginfo_cdb_test_no_opt(&self) {\n+        let exe_file = self.make_exe_name();\n+\n+        // Existing PDB files are update in-place. When changing the debuginfo\n+        // the compiler generates for something, this can lead to the situation\n+        // where both the old and the new version of the debuginfo for the same\n+        // type is present in the PDB, which is very confusing.\n+        // Therefore we delete any existing PDB file before compiling the test\n+        // case.\n+        let pdb_file = exe_file.with_extension(\".pdb\");\n+        if pdb_file.exists() {\n+            std::fs::remove_file(pdb_file).unwrap();\n+        }\n+\n         // compile test file (it should have 'compile-flags:-g' in the header)\n         let should_run = self.run_if_enabled();\n         let compile_result = self.compile_test(should_run, EmitMetadata::No);\n@@ -671,8 +692,6 @@ impl<'test> TestCx<'test> {\n             return;\n         }\n \n-        let exe_file = self.make_exe_name();\n-\n         let prefixes = {\n             static PREFIXES: &[&str] = &[\"cdb\", \"cdbg\"];\n             // No \"native rust support\" variation for CDB yet.\n@@ -2010,7 +2029,11 @@ impl<'test> TestCx<'test> {\n             Some(ref s) => s\n                 .split(' ')\n                 .filter_map(|s| {\n-                    if s.chars().all(|c| c.is_whitespace()) { None } else { Some(s.to_owned()) }\n+                    if s.chars().all(|c| c.is_whitespace()) {\n+                        None\n+                    } else {\n+                        Some(s.to_owned())\n+                    }\n                 })\n                 .collect(),\n             None => Vec::new(),\n@@ -2069,7 +2092,11 @@ impl<'test> TestCx<'test> {\n     /// The revision, ignored for incremental compilation since it wants all revisions in\n     /// the same directory.\n     fn safe_revision(&self) -> Option<&str> {\n-        if self.config.mode == Incremental { None } else { self.revision }\n+        if self.config.mode == Incremental {\n+            None\n+        } else {\n+            self.revision\n+        }\n     }\n \n     /// Gets the absolute path to the directory where all output for the given\n@@ -2224,7 +2251,11 @@ impl<'test> TestCx<'test> {\n \n     fn charset() -> &'static str {\n         // FreeBSD 10.1 defaults to GDB 6.1.1 which doesn't support \"auto\" charset\n-        if cfg!(target_os = \"freebsd\") { \"ISO-8859-1\" } else { \"UTF-8\" }\n+        if cfg!(target_os = \"freebsd\") {\n+            \"ISO-8859-1\"\n+        } else {\n+            \"UTF-8\"\n+        }\n     }\n \n     fn run_rustdoc_test(&self) {\n@@ -3014,7 +3045,11 @@ impl<'test> TestCx<'test> {\n         let (stderr_kind, stdout_kind) = match output_kind {\n             TestOutput::Compile => (\n                 {\n-                    if self.props.stderr_per_bitwidth { &stderr_bits } else { UI_STDERR }\n+                    if self.props.stderr_per_bitwidth {\n+                        &stderr_bits\n+                    } else {\n+                        UI_STDERR\n+                    }\n                 },\n                 UI_STDOUT,\n             ),\n@@ -3711,7 +3746,11 @@ impl<'test> TestCx<'test> {\n         for output_file in files {\n             println!(\"Actual {} saved to {}\", kind, output_file.display());\n         }\n-        if self.config.bless { 0 } else { 1 }\n+        if self.config.bless {\n+            0\n+        } else {\n+            1\n+        }\n     }\n \n     fn prune_duplicate_output(&self, mode: CompareMode, kind: &str, canon_content: &str) {"}]}