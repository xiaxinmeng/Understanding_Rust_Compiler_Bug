{"sha": "7c4baedb3a090f2dc9e653bd7c03165be84acad3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNGJhZWRiM2EwOTBmMmRjOWU2NTNiZDdjMDMxNjViZTg0YWNhZDM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-03-19T15:38:41Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-03-20T16:11:13Z"}, "message": "Dynamically choose best chunk size\n\nTry chunk sizes between 1 and 64, selecting the one which minimizes the number\nof bytes used. 16, the previous constant, turned out to be a rather good choice,\nwith 5/9 of the datasets still using it.\n\nAlphabetic     : 3036 bytes    (- 19 bytes)\nCase_Ignorable : 2136 bytes\nCased          : 934 bytes\nCc             : 32 bytes      (- 11 bytes)\nGrapheme_Extend: 1774 bytes\nLowercase      : 985 bytes\nN              : 1225 bytes    (- 41 bytes)\nUppercase      : 934 bytes\nWhite_Space    : 97 bytes      (- 43 bytes)\nTotal table sizes: 11153 bytes (-114 bytes)", "tree": {"sha": "d48af83ab011b2d64b03166453883168ae6ee233", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d48af83ab011b2d64b03166453883168ae6ee233"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c4baedb3a090f2dc9e653bd7c03165be84acad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c4baedb3a090f2dc9e653bd7c03165be84acad3", "html_url": "https://github.com/rust-lang/rust/commit/7c4baedb3a090f2dc9e653bd7c03165be84acad3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c4baedb3a090f2dc9e653bd7c03165be84acad3/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "903f67d599cf12d2d202d5177bb3edecb6cdab00", "url": "https://api.github.com/repos/rust-lang/rust/commits/903f67d599cf12d2d202d5177bb3edecb6cdab00", "html_url": "https://github.com/rust-lang/rust/commit/903f67d599cf12d2d202d5177bb3edecb6cdab00"}], "stats": {"total": 272, "additions": 134, "deletions": 138}, "files": [{"sha": "d1c68863e16326b9327e8bb4aa48b3057cff5f64", "filename": "src/libcore/unicode/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c4baedb3a090f2dc9e653bd7c03165be84acad3/src%2Flibcore%2Funicode%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c4baedb3a090f2dc9e653bd7c03165be84acad3/src%2Flibcore%2Funicode%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fmod.rs?ref=7c4baedb3a090f2dc9e653bd7c03165be84acad3", "patch": "@@ -34,16 +34,16 @@ pub use unicode_data::uppercase::lookup as Uppercase;\n pub use unicode_data::white_space::lookup as White_Space;\n \n #[inline(always)]\n-fn range_search<const N: usize, const N1: usize, const N2: usize>(\n+fn range_search<const N: usize, const CHUNK_SIZE: usize, const N1: usize, const N2: usize>(\n     needle: u32,\n     chunk_idx_map: &[u8; N],\n     (last_chunk_idx, last_chunk_mapping): (u16, u8),\n-    bitset_chunk_idx: &[[u8; 16]; N1],\n+    bitset_chunk_idx: &[[u8; CHUNK_SIZE]; N1],\n     bitset: &[u64; N2],\n ) -> bool {\n     let bucket_idx = (needle / 64) as usize;\n-    let chunk_map_idx = bucket_idx / 16;\n-    let chunk_piece = bucket_idx % 16;\n+    let chunk_map_idx = bucket_idx / CHUNK_SIZE;\n+    let chunk_piece = bucket_idx % CHUNK_SIZE;\n     let chunk_idx = if chunk_map_idx >= N {\n         if chunk_map_idx == last_chunk_idx as usize {\n             last_chunk_mapping"}, {"sha": "a89f3481f4957f048569ad0e005c20b74eb8a241", "filename": "src/libcore/unicode/unicode_data.rs", "status": "modified", "additions": 91, "deletions": 115, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/7c4baedb3a090f2dc9e653bd7c03165be84acad3/src%2Flibcore%2Funicode%2Funicode_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c4baedb3a090f2dc9e653bd7c03165be84acad3/src%2Flibcore%2Funicode%2Funicode_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Funicode_data.rs?ref=7c4baedb3a090f2dc9e653bd7c03165be84acad3", "patch": "@@ -5,69 +5,63 @@ pub const UNICODE_VERSION: (u32, u32, u32) = (13, 0, 0);\n \n #[rustfmt::skip]\n pub mod alphabetic {\n-    static BITSET_LAST_CHUNK_MAP: (u16, u8) = (196, 44);\n-    static BITSET_CHUNKS_MAP: [u8; 196] = [\n-        6, 32, 10, 18, 19, 23, 21, 12, 7, 5, 0, 20, 14, 50, 50, 50, 50, 50, 50, 37, 50, 50, 50, 50,\n-        50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 49, 50, 30, 8, 50, 50, 50, 50,\n-        50, 50, 50, 50, 50, 50, 46, 0, 0, 0, 0, 0, 0, 0, 0, 4, 36, 17, 31, 16, 25, 24, 26, 13, 15,\n-        45, 27, 0, 0, 50, 11, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 39, 1, 50, 50, 50, 50, 50, 48,\n-        50, 34, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 28, 0, 0, 0, 0, 0, 29, 0, 0, 9, 0, 33, 2, 3, 0, 0,\n-        0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n-        50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 42, 50, 50, 50,\n-        43, 22, 50, 50, 50, 50, 41, 50, 50, 50, 50, 50, 50, 47, 0, 0, 0, 38, 0, 50, 50, 50, 50,\n+    static BITSET_LAST_CHUNK_MAP: (u16, u8) = (393, 67);\n+    static BITSET_CHUNKS_MAP: [u8; 393] = [\n+        8, 60, 56, 38, 16, 33, 34, 24, 35, 50, 41, 49, 37, 39, 20, 66, 9, 0, 6, 0, 0, 0, 36, 18,\n+        26, 0, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 70, 74, 74, 74, 74, 74, 74, 74, 74,\n+        74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n+        74, 74, 74, 74, 74, 74, 74, 74, 74, 73, 74, 74, 52, 15, 13, 21, 74, 74, 74, 74, 74, 74, 74,\n+        74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 2, 48, 65, 10, 32, 7, 53, 64, 31, 19, 44, 5, 42, 27, 45, 30, 22, 29, 28, 4,\n+        74, 68, 46, 0, 0, 0, 0, 0, 74, 74, 17, 0, 0, 0, 0, 0, 0, 0, 74, 43, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 74, 23, 0, 11, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 72, 74,\n+        74, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 61, 0, 0, 0, 0, 47, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 51, 55, 0, 0, 0, 0, 14, 3, 0, 0, 57, 0, 0, 25, 1, 0, 0, 0, 0, 0, 0,\n+        0, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n+        74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n+        74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n+        74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 59, 74, 74, 74, 74, 74, 74, 74,\n+        63, 40, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 54, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n+        74, 74, 74, 71, 0, 0, 0, 0, 0, 0, 74, 12, 0, 0, 74, 74, 74, 74, 74, 74, 74, 74, 74,\n     ];\n-    static BITSET_INDEX_CHUNKS: [[u8; 16]; 51] = [\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 254, 247, 39, 68],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 111, 135, 113, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 195, 205, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 254, 254, 254, 254, 254, 210, 254, 25, 136, 251, 71, 243],\n-        [0, 0, 182, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 107, 103, 180, 254, 254, 254, 254, 254, 254, 254, 61, 0, 155, 222, 181],\n-        [0, 148, 30, 0, 172, 226, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [48, 80, 254, 169, 206, 123, 189, 139, 95, 179, 145, 86, 211, 204, 254, 56],\n-        [53, 0, 0, 0, 129, 17, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0],\n-        [59, 54, 185, 203, 171, 191, 161, 117, 158, 87, 164, 118, 162, 67, 159, 23],\n-        [62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [95, 131, 168, 105, 254, 254, 254, 82, 254, 254, 254, 254, 236, 130, 137, 120],\n-        [101, 0, 225, 146, 151, 2, 217, 45, 144, 246, 32, 101, 0, 0, 0, 0],\n-        [119, 253, 224, 175, 193, 254, 227, 195, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [143, 190, 91, 0, 153, 218, 24, 0, 0, 0, 0, 92, 0, 0, 66, 0],\n-        [150, 94, 37, 85, 102, 0, 157, 0, 88, 122, 31, 46, 89, 74, 20, 0],\n-        [154, 34, 254, 110, 0, 84, 0, 0, 0, 0, 233, 19, 216, 108, 237, 21],\n-        [166, 42, 165, 72, 167, 177, 126, 76, 109, 16, 127, 38, 1, 192, 124, 0],\n-        [176, 246, 234, 174, 254, 254, 254, 254, 254, 235, 140, 241, 240, 26, 228, 128],\n-        [213, 239, 254, 77, 209, 64, 142, 238, 63, 0, 0, 0, 0, 0, 0, 0],\n-        [225, 101, 207, 89, 98, 81, 208, 10, 232, 83, 147, 1, 188, 13, 178, 70],\n-        [237, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254],\n-        [253, 254, 254, 254, 254, 254, 254, 254, 254, 214, 231, 99, 79, 78, 183, 27],\n-        [254, 6, 100, 50, 75, 90, 254, 28, 134, 0, 202, 51, 163, 43, 0, 0],\n-        [254, 9, 75, 75, 49, 0, 0, 0, 0, 0, 69, 0, 199, 6, 195, 93],\n-        [254, 41, 254, 8, 0, 0, 141, 33, 145, 4, 97, 0, 55, 0, 0, 0],\n-        [254, 62, 254, 254, 254, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [254, 121, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [254, 242, 170, 252, 138, 245, 254, 254, 254, 254, 220, 173, 186, 212, 219, 14],\n-        [254, 254, 15, 132, 254, 254, 254, 254, 57, 149, 254, 65, 223, 254, 249, 187],\n-        [254, 254, 196, 114, 201, 44, 0, 0, 254, 254, 254, 254, 95, 47, 0, 0],\n-        [254, 254, 250, 254, 194, 229, 156, 73, 230, 215, 254, 152, 246, 248, 71, 104],\n-        [254, 254, 254, 5, 254, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [254, 254, 254, 22, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [254, 254, 254, 254, 37, 200, 254, 254, 254, 254, 254, 116, 0, 0, 0, 0],\n-        [254, 254, 254, 254, 133, 246, 244, 112, 0, 184, 254, 125, 106, 221, 145, 29],\n-        [254, 254, 254, 254, 254, 254, 254, 0, 254, 254, 254, 254, 254, 254, 254, 254],\n-        [254, 254, 254, 254, 254, 254, 254, 254, 35, 0, 0, 0, 0, 0, 0, 0],\n-        [254, 254, 254, 254, 254, 254, 254, 254, 101, 37, 0, 60, 65, 160, 18, 0],\n-        [254, 254, 254, 254, 254, 254, 254, 254, 254, 7, 0, 0, 0, 0, 0, 0],\n-        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 197, 254, 254, 254, 254, 254],\n-        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 35, 254, 254, 254, 254],\n-        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 84, 254, 254, 254],\n-        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 11, 0, 0],\n-        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 25, 0],\n-        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 198, 115],\n-        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 40],\n-        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 96],\n-        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 125],\n-        [254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254],\n+    static BITSET_INDEX_CHUNKS: [[u8; 8]; 75] = [\n+        [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 195, 205, 10, 0], [0, 0, 0, 0, 254, 254, 254, 254],\n+        [0, 0, 0, 58, 0, 0, 0, 0], [0, 0, 0, 92, 0, 0, 66, 0], [0, 0, 69, 0, 199, 6, 195, 93],\n+        [0, 0, 182, 52, 0, 0, 0, 0], [0, 0, 233, 19, 216, 108, 237, 21],\n+        [0, 107, 103, 180, 254, 254, 254, 254], [0, 148, 30, 0, 172, 226, 9, 0],\n+        [0, 184, 254, 125, 106, 221, 145, 29], [0, 254, 0, 0, 254, 247, 39, 68],\n+        [35, 0, 0, 0, 0, 0, 0, 0], [48, 80, 254, 169, 206, 123, 189, 139],\n+        [53, 0, 0, 0, 129, 17, 0, 0], [57, 149, 254, 65, 223, 254, 249, 187],\n+        [59, 54, 185, 203, 171, 191, 161, 117], [62, 0, 0, 0, 0, 0, 0, 0],\n+        [63, 0, 0, 0, 0, 0, 0, 0], [88, 122, 31, 46, 89, 74, 20, 0],\n+        [95, 131, 168, 105, 254, 254, 254, 82], [95, 179, 145, 86, 211, 204, 254, 56],\n+        [101, 0, 225, 146, 151, 2, 217, 45], [101, 37, 0, 60, 65, 160, 18, 0],\n+        [109, 16, 127, 38, 1, 192, 124, 0], [111, 135, 113, 0, 0, 0, 0, 0],\n+        [119, 253, 224, 175, 193, 254, 227, 195], [134, 0, 202, 51, 163, 43, 0, 0],\n+        [143, 190, 91, 0, 153, 218, 24, 0], [144, 246, 32, 101, 0, 0, 0, 0],\n+        [145, 4, 97, 0, 55, 0, 0, 0], [150, 94, 37, 85, 102, 0, 157, 0],\n+        [154, 34, 254, 110, 0, 84, 0, 0], [158, 87, 164, 118, 162, 67, 159, 23],\n+        [166, 42, 165, 72, 167, 177, 126, 76], [176, 246, 234, 174, 254, 254, 254, 254],\n+        [213, 239, 254, 77, 209, 64, 142, 238], [225, 101, 207, 89, 98, 81, 208, 10],\n+        [230, 215, 254, 152, 246, 248, 71, 104], [232, 83, 147, 1, 188, 13, 178, 70],\n+        [237, 254, 254, 254, 254, 254, 254, 254], [253, 254, 254, 254, 254, 254, 254, 254],\n+        [254, 6, 100, 50, 75, 90, 254, 28], [254, 7, 0, 0, 0, 0, 0, 0],\n+        [254, 9, 75, 75, 49, 0, 0, 0], [254, 41, 254, 8, 0, 0, 141, 33],\n+        [254, 62, 254, 254, 254, 3, 0, 0], [254, 121, 36, 0, 0, 0, 0, 0],\n+        [254, 210, 254, 25, 136, 251, 71, 243], [254, 214, 231, 99, 79, 78, 183, 27],\n+        [254, 235, 140, 241, 240, 26, 228, 128], [254, 242, 170, 252, 138, 245, 254, 254],\n+        [254, 254, 15, 132, 254, 254, 254, 254], [254, 254, 196, 114, 201, 44, 0, 0],\n+        [254, 254, 197, 254, 254, 254, 254, 254], [254, 254, 220, 173, 186, 212, 219, 14],\n+        [254, 254, 250, 254, 194, 229, 156, 73], [254, 254, 254, 5, 254, 12, 0, 0],\n+        [254, 254, 254, 22, 9, 0, 0, 0], [254, 254, 254, 35, 254, 254, 254, 254],\n+        [254, 254, 254, 61, 0, 155, 222, 181], [254, 254, 254, 116, 0, 0, 0, 0],\n+        [254, 254, 254, 254, 37, 200, 254, 254], [254, 254, 254, 254, 84, 254, 254, 254],\n+        [254, 254, 254, 254, 95, 47, 0, 0], [254, 254, 254, 254, 133, 246, 244, 112],\n+        [254, 254, 254, 254, 236, 130, 137, 120], [254, 254, 254, 254, 254, 11, 0, 0],\n+        [254, 254, 254, 254, 254, 254, 25, 0], [254, 254, 254, 254, 254, 254, 198, 115],\n+        [254, 254, 254, 254, 254, 254, 254, 0], [254, 254, 254, 254, 254, 254, 254, 40],\n+        [254, 254, 254, 254, 254, 254, 254, 96], [254, 254, 254, 254, 254, 254, 254, 125],\n+        [254, 254, 254, 254, 254, 254, 254, 254],\n     ];\n     static BITSET: [u64; 255] = [\n         0, 1, 7, 15, 17, 31, 63, 127, 179, 511, 1023, 2047, 2191, 4079, 4087, 8191, 8319, 16384,\n@@ -297,8 +291,8 @@ pub mod cc {\n     static BITSET_LAST_CHUNK_MAP: (u16, u8) = (0, 0);\n     static BITSET_CHUNKS_MAP: [u8; 0] = [\n     ];\n-    static BITSET_INDEX_CHUNKS: [[u8; 16]; 1] = [\n-        [1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+    static BITSET_INDEX_CHUNKS: [[u8; 5]; 1] = [\n+        [1, 2, 1, 0, 0],\n     ];\n     static BITSET: [u64; 3] = [\n         0, 4294967295, 9223372036854775808,\n@@ -460,49 +454,35 @@ pub mod lowercase {\n \n #[rustfmt::skip]\n pub mod n {\n-    static BITSET_LAST_CHUNK_MAP: (u16, u8) = (127, 0);\n-    static BITSET_CHUNKS_MAP: [u8; 127] = [\n-        31, 8, 11, 25, 19, 4, 29, 21, 24, 28, 0, 16, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 0, 3, 13, 18, 26, 17, 23, 20, 15, 22, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-        5, 2, 0, 0, 10, 0, 14, 27, 12, 0, 1,\n+    static BITSET_LAST_CHUNK_MAP: (u16, u8) = (254, 0);\n+    static BITSET_CHUNKS_MAP: [u8; 254] = [\n+        44, 0, 0, 29, 5, 31, 35, 26, 22, 6, 0, 12, 40, 20, 27, 0, 33, 0, 39, 7, 0, 0, 17, 0, 45,\n+        42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 43,\n+        23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 10, 16, 21, 0, 37, 34, 18, 36, 32, 15, 25, 24, 13, 0,\n+        30, 1, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        14, 0, 3, 0, 0, 0, 0, 4, 15, 0, 0, 11, 0, 38, 0, 8, 0, 0, 0, 0, 2,\n     ];\n-    static BITSET_INDEX_CHUNKS: [[u8; 16]; 34] = [\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 49],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 43, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 22, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 47, 0, 0, 0, 2],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 31, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 31, 0, 45, 0, 31, 0, 31, 0, 41, 0, 34],\n-        [0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 37, 44, 4, 0, 0, 0, 0, 52, 23, 3, 0, 13],\n-        [0, 0, 0, 7, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 35, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 62, 47, 0, 0, 0, 0, 60, 0, 0, 24, 10, 0, 5],\n-        [0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 2, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0],\n-        [0, 15, 0, 15, 0, 0, 0, 0, 0, 15, 0, 2, 51, 0, 0, 0],\n-        [0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 26, 0, 0, 0, 15, 25, 0, 0, 0, 0, 0, 0, 0, 0, 11],\n-        [0, 32, 0, 47, 65, 0, 0, 39, 0, 0, 0, 47, 0, 0, 0, 0],\n-        [0, 46, 2, 0, 0, 71, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 59, 0, 31, 0, 42, 0, 31, 0, 15, 0, 15, 36, 0, 0, 0],\n-        [0, 63, 30, 61, 18, 0, 55, 70, 0, 57, 20, 28, 0, 64, 29, 0],\n-        [0, 66, 38, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 69, 19, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 9, 0],\n-        [15, 0, 0, 0, 0, 8, 0, 17, 0, 0, 16, 0, 0, 15, 47, 0],\n-        [40, 0, 0, 15, 2, 0, 0, 48, 0, 15, 0, 0, 0, 0, 0, 47],\n-        [47, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [50, 0, 0, 0, 0, 0, 12, 0, 25, 21, 67, 0, 0, 0, 0, 0],\n-        [73, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+    static BITSET_INDEX_CHUNKS: [[u8; 8]; 47] = [\n+        [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 11], [0, 0, 0, 0, 0, 0, 0, 47],\n+        [0, 0, 0, 0, 0, 0, 0, 72], [0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 31, 0, 45],\n+        [0, 0, 0, 0, 0, 53, 0, 0], [0, 0, 0, 0, 0, 65, 9, 0], [0, 0, 0, 0, 6, 0, 0, 0],\n+        [0, 0, 0, 0, 15, 0, 0, 0], [0, 0, 0, 0, 37, 44, 4, 0], [0, 0, 0, 7, 0, 15, 0, 0],\n+        [0, 0, 0, 33, 0, 0, 0, 49], [0, 0, 0, 35, 0, 15, 0, 0], [0, 0, 0, 36, 0, 43, 0, 0],\n+        [0, 0, 0, 47, 0, 0, 0, 0], [0, 0, 0, 52, 23, 3, 0, 13], [0, 0, 0, 54, 0, 0, 0, 0],\n+        [0, 0, 0, 62, 47, 0, 0, 0], [0, 0, 14, 0, 0, 0, 0, 0], [0, 0, 16, 0, 0, 15, 47, 0],\n+        [0, 0, 25, 0, 0, 0, 0, 0], [0, 2, 15, 0, 0, 0, 0, 0], [0, 15, 0, 0, 0, 0, 0, 47],\n+        [0, 15, 0, 2, 51, 0, 0, 0], [0, 15, 0, 15, 0, 0, 0, 0], [0, 15, 0, 15, 36, 0, 0, 0],\n+        [0, 16, 0, 0, 0, 0, 0, 0], [0, 25, 0, 0, 0, 22, 0, 0], [0, 25, 0, 47, 0, 0, 0, 2],\n+        [0, 26, 0, 0, 0, 15, 25, 0], [0, 31, 0, 31, 0, 41, 0, 34], [0, 32, 0, 47, 65, 0, 0, 39],\n+        [0, 46, 2, 0, 0, 71, 1, 0], [0, 57, 20, 28, 0, 64, 29, 0], [0, 59, 0, 31, 0, 42, 0, 31],\n+        [0, 60, 0, 0, 24, 10, 0, 5], [0, 63, 30, 61, 18, 0, 55, 70], [0, 66, 38, 0, 56, 0, 0, 0],\n+        [0, 69, 19, 68, 0, 0, 0, 0], [15, 0, 0, 0, 0, 8, 0, 17], [25, 0, 0, 31, 0, 0, 0, 0],\n+        [25, 21, 67, 0, 0, 0, 0, 0], [40, 0, 0, 15, 2, 0, 0, 48], [47, 0, 58, 0, 0, 0, 0, 0],\n+        [50, 0, 0, 0, 0, 0, 12, 0], [73, 27, 0, 0, 0, 0, 0, 0],\n     ];\n     static BITSET: [u64; 74] = [\n         0, 999, 1023, 1026, 3072, 4064, 8191, 65408, 65472, 1048575, 1966080, 2097151, 3932160,\n@@ -591,16 +571,12 @@ pub mod uppercase {\n \n #[rustfmt::skip]\n pub mod white_space {\n-    static BITSET_LAST_CHUNK_MAP: (u16, u8) = (12, 2);\n-    static BITSET_CHUNKS_MAP: [u8; 9] = [\n-        3, 0, 0, 0, 0, 1, 0, 0, 4,\n+    static BITSET_LAST_CHUNK_MAP: (u16, u8) = (32, 2);\n+    static BITSET_CHUNKS_MAP: [u8; 22] = [\n+        3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1,\n     ];\n-    static BITSET_INDEX_CHUNKS: [[u8; 16]; 5] = [\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n-        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [4, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+    static BITSET_INDEX_CHUNKS: [[u8; 6]; 4] = [\n+        [0, 0, 0, 0, 0, 0], [0, 0, 5, 2, 0, 0], [1, 0, 0, 0, 0, 0], [4, 0, 3, 0, 0, 0],\n     ];\n     static BITSET: [u64; 6] = [\n         0, 1, 2147483648, 4294967328, 4294983168, 144036023240703,"}, {"sha": "5d4a4c0e0449880762069865b922431c62bbf8a0", "filename": "src/tools/unicode-table-generator/src/raw_emitter.rs", "status": "modified", "additions": 39, "deletions": 19, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7c4baedb3a090f2dc9e653bd7c03165be84acad3/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c4baedb3a090f2dc9e653bd7c03165be84acad3/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs?ref=7c4baedb3a090f2dc9e653bd7c03165be84acad3", "patch": "@@ -42,6 +42,7 @@ use std::convert::TryFrom;\n use std::fmt::Write;\n use std::ops::Range;\n \n+#[derive(Clone)]\n pub struct RawEmitter {\n     pub file: String,\n     pub bytes_used: usize,\n@@ -65,24 +66,51 @@ impl RawEmitter {\n         if unique_words.len() > u8::max_value() as usize {\n             panic!(\"cannot pack {} into 8 bits\", unique_words.len());\n         }\n+        // needed for the chunk mapping to work\n+        assert_eq!(unique_words[0], 0, \"first word is all zeros\");\n \n         let word_indices = unique_words\n             .iter()\n             .cloned()\n             .enumerate()\n             .map(|(idx, word)| (word, u8::try_from(idx).unwrap()))\n             .collect::<HashMap<_, _>>();\n+        let compressed_words = words.iter().map(|w| word_indices[w]).collect::<Vec<u8>>();\n+\n+        let mut best = None;\n+        for length in 1..=64 {\n+            let mut temp = self.clone();\n+            temp.emit_chunk_map(&compressed_words, length);\n+            if let Some((_, size)) = best {\n+                if temp.bytes_used < size {\n+                    best = Some((length, temp.bytes_used));\n+                }\n+            } else {\n+                best = Some((length, temp.bytes_used));\n+            }\n+        }\n+        self.emit_chunk_map(&compressed_words, best.unwrap().0);\n+\n+        writeln!(\n+            &mut self.file,\n+            \"static BITSET: [u64; {}] = [{}];\",\n+            unique_words.len(),\n+            fmt_list(&unique_words),\n+        )\n+        .unwrap();\n+        self.bytes_used += 8 * unique_words.len();\n+    }\n \n-        let mut idx = words.iter().map(|w| word_indices[w]).collect::<Vec<u8>>();\n-        let chunk_length = 16;\n-        for _ in 0..(chunk_length - (idx.len() % chunk_length)) {\n-            assert_eq!(unique_words[0], 0, \"first word is all zeros\");\n-            // pad out bitset index with zero words so we have all chunks of 16\n-            idx.push(0);\n+    fn emit_chunk_map(&mut self, compressed_words: &[u8], chunk_length: usize) {\n+        let mut compressed_words = compressed_words.to_vec();\n+        for _ in 0..(chunk_length - (compressed_words.len() % chunk_length)) {\n+            // pad out bitset index with zero words so we have all chunks of\n+            // chunkchunk_length\n+            compressed_words.push(0);\n         }\n \n         let mut chunks = BTreeSet::new();\n-        for chunk in idx.chunks(chunk_length) {\n+        for chunk in compressed_words.chunks(chunk_length) {\n             chunks.insert(chunk);\n         }\n         let chunk_map = chunks\n@@ -92,7 +120,7 @@ impl RawEmitter {\n             .map(|(idx, chunk)| (chunk, idx))\n             .collect::<HashMap<_, _>>();\n         let mut chunk_indices = Vec::new();\n-        for chunk in idx.chunks(chunk_length) {\n+        for chunk in compressed_words.chunks(chunk_length) {\n             chunk_indices.push(chunk_map[chunk]);\n         }\n         writeln!(\n@@ -105,7 +133,6 @@ impl RawEmitter {\n         self.bytes_used += 3;\n         // Strip out the empty pieces, presuming our above pop() made us now\n         // have some trailing zeros.\n-        assert_eq!(unique_words[0], 0, \"first word is all zeros\");\n         while let Some(0) = chunk_indices.last() {\n             chunk_indices.pop();\n         }\n@@ -119,20 +146,13 @@ impl RawEmitter {\n         self.bytes_used += chunk_indices.len();\n         writeln!(\n             &mut self.file,\n-            \"static BITSET_INDEX_CHUNKS: [[u8; 16]; {}] = [{}];\",\n+            \"static BITSET_INDEX_CHUNKS: [[u8; {}]; {}] = [{}];\",\n+            chunk_length,\n             chunks.len(),\n             fmt_list(chunks.iter()),\n         )\n         .unwrap();\n-        self.bytes_used += 16 * chunks.len();\n-        writeln!(\n-            &mut self.file,\n-            \"static BITSET: [u64; {}] = [{}];\",\n-            unique_words.len(),\n-            fmt_list(&unique_words),\n-        )\n-        .unwrap();\n-        self.bytes_used += 8 * unique_words.len();\n+        self.bytes_used += chunk_length * chunks.len();\n     }\n \n     pub fn emit_lookup(&mut self) {"}]}