{"sha": "c44826fdcd036982b955407677c5ec4ce1f834ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NDgyNmZkY2QwMzY5ODJiOTU1NDA3Njc3YzVlYzRjZTFmODM0Y2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-02T14:56:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-02T14:56:36Z"}, "message": "auto merge of #9677 : thestinger/rust/immediate, r=huonw\n\nC-like enums are excluded from this for now, because the code paths\r\nspecific to them need to be changed.\r\n\r\n    fn foo() -> Option<~int> { Some(~5) }\r\n\r\nBefore:\r\n\r\n    ; Function Attrs: uwtable\r\n    define void @_ZN3foo18hdec6e36682b87eeaf4v0.0E(%\"enum.std::option::Option<~int>[#1]\"* noalias nocapture sret, { i64, %tydesc*, i8*, i8*, i8 }* nocapture readnone) #0 {\r\n    \"function top level\":\r\n      %2 = tail call %\"enum.std::libc::types::common::c95::c_void[#1]\"* @\"_ZN2rt11global_heap10malloc_raw17h56c543b77f9b78aY11v0.9$x2dpreE\"({ i64, %tydesc*, i8*, i8*, i8 }* undef, i64 8)\r\n      %3 = bitcast %\"enum.std::libc::types::common::c95::c_void[#1]\"* %2 to i64*\r\n      store i64 5, i64* %3, align 8\r\n      %4 = getelementptr inbounds %\"enum.std::option::Option<~int>[#1]\"* %0, i64 0, i32 0\r\n      store i64* %3, i64** %4, align 8\r\n      ret void\r\n    }\r\n\r\nAfter:\r\n\r\n    ; Function Attrs: uwtable\r\n    define %\"enum.std::option::Option<~int>[#1]\" @_ZN3foo18h2cbf6557a3143edah4v0.0E({ i64, %tydesc*, i8*, i8*, i8 }* nocapture readnone) #0 {\r\n    \"function top level\":\r\n      %1 = tail call %\"enum.std::libc::types::common::c95::c_void[#1]\"* @\"_ZN2rt11global_heap10malloc_raw18hb1e9dd1beab35edau11v0.9$x2dpreE\"({ i64, %tydesc*, i8*, i8*, i8 }* undef, i64 8)\r\n      %2 = bitcast %\"enum.std::libc::types::common::c95::c_void[#1]\"* %1 to i64*\r\n      store i64 5, i64* %2, align 8\r\n      %oldret = insertvalue %\"enum.std::option::Option<~int>[#1]\" undef, i64* %2, 0\r\n      ret %\"enum.std::option::Option<~int>[#1]\" %oldret\r\n    }", "tree": {"sha": "b5a277bed46512e925d35213396ba2f6a9e7d184", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5a277bed46512e925d35213396ba2f6a9e7d184"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c44826fdcd036982b955407677c5ec4ce1f834ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c44826fdcd036982b955407677c5ec4ce1f834ce", "html_url": "https://github.com/rust-lang/rust/commit/c44826fdcd036982b955407677c5ec4ce1f834ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c44826fdcd036982b955407677c5ec4ce1f834ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17548378a707fae752dc722e2fb767a65195e422", "url": "https://api.github.com/repos/rust-lang/rust/commits/17548378a707fae752dc722e2fb767a65195e422", "html_url": "https://github.com/rust-lang/rust/commit/17548378a707fae752dc722e2fb767a65195e422"}, {"sha": "f2932e46614ab0f91f7dfd064cadf1e3db2a9667", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2932e46614ab0f91f7dfd064cadf1e3db2a9667", "html_url": "https://github.com/rust-lang/rust/commit/f2932e46614ab0f91f7dfd064cadf1e3db2a9667"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "dea86286279a0a3ff53217b0629058f43470a965", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c44826fdcd036982b955407677c5ec4ce1f834ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44826fdcd036982b955407677c5ec4ce1f834ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=c44826fdcd036982b955407677c5ec4ce1f834ce", "patch": "@@ -1733,7 +1733,7 @@ pub fn new_fn_ctxt_w_id(ccx: @mut CrateContext,\n         fcx.alloca_insert_pt = Some(llvm::LLVMGetFirstInstruction(entry_bcx.llbb));\n     }\n \n-    if !ty::type_is_voidish(substd_output_type) {\n+    if !ty::type_is_voidish(ccx.tcx, substd_output_type) {\n         // If the function returns nil/bot, there is no real return\n         // value, so do not set `llretptr`.\n         if !skip_retptr || uses_outptr {\n@@ -1964,7 +1964,7 @@ pub fn trans_closure(ccx: @mut CrateContext,\n     // translation calls that don't have a return value (trans_crate,\n     // trans_mod, trans_item, et cetera) and those that do\n     // (trans_block, trans_expr, et cetera).\n-    if body.expr.is_none() || ty::type_is_voidish(block_ty) {\n+    if body.expr.is_none() || ty::type_is_voidish(bcx.tcx(), block_ty) {\n         bcx = controlflow::trans_block(bcx, body, expr::Ignore);\n     } else {\n         let dest = expr::SaveIn(fcx.llretptr.unwrap());"}, {"sha": "839313f7bbe6621fc2e011b5b158a6dd5790a571", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c44826fdcd036982b955407677c5ec4ce1f834ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44826fdcd036982b955407677c5ec4ce1f834ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=c44826fdcd036982b955407677c5ec4ce1f834ce", "patch": "@@ -660,7 +660,7 @@ pub fn trans_call_inner(in_cx: @mut Block,\n             }\n             Some(expr::SaveIn(dst)) => Some(dst),\n             Some(expr::Ignore) => {\n-                if !ty::type_is_voidish(ret_ty) {\n+                if !ty::type_is_voidish(in_cx.tcx(), ret_ty) {\n                     Some(alloc_ty(bcx, ret_ty, \"__llret\"))\n                 } else {\n                     unsafe {\n@@ -735,7 +735,7 @@ pub fn trans_call_inner(in_cx: @mut Block,\n             match opt_llretslot {\n                 Some(llretslot) => {\n                     if !type_of::return_uses_outptr(bcx.ccx(), ret_ty) &&\n-                        !ty::type_is_voidish(ret_ty)\n+                        !ty::type_is_voidish(bcx.tcx(), ret_ty)\n                     {\n                         Store(bcx, llret, llretslot);\n                     }"}, {"sha": "bbed6324543f669feffe55c6d8386e42eabb5325", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c44826fdcd036982b955407677c5ec4ce1f834ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44826fdcd036982b955407677c5ec4ce1f834ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=c44826fdcd036982b955407677c5ec4ce1f834ce", "patch": "@@ -69,9 +69,13 @@ pub fn type_is_immediate(ccx: &mut CrateContext, ty: ty::t) -> bool {\n     if simple {\n         return true;\n     }\n+    // FIXME: #9651: C-like enums should also be immediate\n+    if ty::type_is_c_like_enum(ccx.tcx, ty) {\n+        return false;\n+    }\n     match ty::get(ty).sty {\n-        // FIXME: #9651: small `ty_struct` and `ty_enum` should also be immediate\n-        ty::ty_tup(*) => {\n+        // FIXME: #9651: small `ty_struct` should also be immediate\n+        ty::ty_enum(*) | ty::ty_tup(*) => {\n             let llty = sizing_type_of(ccx, ty);\n             llsize_of_alloc(ccx, llty) <= llsize_of_alloc(ccx, ccx.int_type)\n         }"}, {"sha": "a70b38fca173c4a1c4c33e620a157d608b2dfba4", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c44826fdcd036982b955407677c5ec4ce1f834ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44826fdcd036982b955407677c5ec4ce1f834ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=c44826fdcd036982b955407677c5ec4ce1f834ce", "patch": "@@ -195,7 +195,7 @@ pub fn appropriate_mode(ccx: &mut CrateContext, ty: ty::t) -> DatumMode {\n      * on whether type is immediate or not.\n      */\n \n-    if ty::type_is_voidish(ty) {\n+    if ty::type_is_voidish(ccx.tcx, ty) {\n         ByValue\n     } else if type_is_immediate(ccx, ty) {\n         ByValue\n@@ -271,7 +271,7 @@ impl Datum {\n \n         let _icx = push_ctxt(\"copy_to\");\n \n-        if ty::type_is_voidish(self.ty) {\n+        if ty::type_is_voidish(bcx.tcx(), self.ty) {\n             return bcx;\n         }\n \n@@ -343,7 +343,7 @@ impl Datum {\n         debug2!(\"move_to(self={}, action={:?}, dst={})\",\n                self.to_str(bcx.ccx()), action, bcx.val_to_str(dst));\n \n-        if ty::type_is_voidish(self.ty) {\n+        if ty::type_is_voidish(bcx.tcx(), self.ty) {\n             return bcx;\n         }\n \n@@ -432,7 +432,7 @@ impl Datum {\n          *\n          * Yields the value itself. */\n \n-        if ty::type_is_voidish(self.ty) {\n+        if ty::type_is_voidish(bcx.tcx(), self.ty) {\n             C_nil()\n         } else {\n             match self.mode {\n@@ -469,7 +469,7 @@ impl Datum {\n         match self.mode {\n             ByRef(_) => self.val,\n             ByValue => {\n-                if ty::type_is_voidish(self.ty) {\n+                if ty::type_is_voidish(bcx.tcx(), self.ty) {\n                     C_null(type_of::type_of(bcx.ccx(), self.ty).ptr_to())\n                 } else {\n                     let slot = alloc_ty(bcx, self.ty, \"\");"}, {"sha": "60a2b08758df45c65922adde9fdd59436daf5f80", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c44826fdcd036982b955407677c5ec4ce1f834ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44826fdcd036982b955407677c5ec4ce1f834ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=c44826fdcd036982b955407677c5ec4ce1f834ce", "patch": "@@ -440,7 +440,7 @@ pub fn trans_into(bcx: @mut Block, expr: &ast::Expr, dest: Dest) -> @mut Block {\n     debuginfo::set_source_location(bcx.fcx, expr.id, expr.span);\n \n     let dest = {\n-        if ty::type_is_voidish(ty) {\n+        if ty::type_is_voidish(bcx.tcx(), ty) {\n             Ignore\n         } else {\n             dest\n@@ -531,7 +531,7 @@ fn trans_to_datum_unadjusted(bcx: @mut Block, expr: &ast::Expr) -> DatumBlock {\n \n         ty::RvalueDpsExpr => {\n             let ty = expr_ty(bcx, expr);\n-            if ty::type_is_voidish(ty) {\n+            if ty::type_is_voidish(bcx.tcx(), ty) {\n                 bcx = trans_rvalue_dps_unadjusted(bcx, expr, Ignore);\n                 return nil(bcx, ty);\n             } else {"}, {"sha": "c5f9e8fdee0cfcfd14dd29fccff76d7a2c0f0fbf", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c44826fdcd036982b955407677c5ec4ce1f834ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44826fdcd036982b955407677c5ec4ce1f834ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=c44826fdcd036982b955407677c5ec4ce1f834ce", "patch": "@@ -177,7 +177,7 @@ pub fn trans_native_call(bcx: @mut Block,\n         _ => ccx.sess.bug(\"trans_native_call called on non-function type\")\n     };\n     let llsig = foreign_signature(ccx, &fn_sig);\n-    let ret_def = !ty::type_is_voidish(fn_sig.output);\n+    let ret_def = !ty::type_is_voidish(bcx.tcx(), fn_sig.output);\n     let fn_type = cabi::compute_abi_info(ccx,\n                                          llsig.llarg_tys,\n                                          llsig.llret_ty,\n@@ -718,7 +718,7 @@ fn foreign_types_for_fn_ty(ccx: &mut CrateContext,\n         _ => ccx.sess.bug(\"foreign_types_for_fn_ty called on non-function type\")\n     };\n     let llsig = foreign_signature(ccx, &fn_sig);\n-    let ret_def = !ty::type_is_voidish(fn_sig.output);\n+    let ret_def = !ty::type_is_voidish(ccx.tcx, fn_sig.output);\n     let fn_ty = cabi::compute_abi_info(ccx,\n                                        llsig.llarg_tys,\n                                        llsig.llret_ty,"}, {"sha": "fd097fdd0b451a4e56d6479feda851036f324b7c", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c44826fdcd036982b955407677c5ec4ce1f834ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44826fdcd036982b955407677c5ec4ce1f834ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=c44826fdcd036982b955407677c5ec4ce1f834ce", "patch": "@@ -321,7 +321,7 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n                                          pluralize(out_type_size)));\n             }\n \n-            if !ty::type_is_voidish(out_type) {\n+            if !ty::type_is_voidish(ccx.tcx, out_type) {\n                 let llsrcval = get_param(decl, first_real_arg);\n                 if type_is_immediate(ccx, in_type) {\n                     match fcx.llretptr {"}, {"sha": "8667d7224e7922565dd9a4f83d693669987b4be0", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c44826fdcd036982b955407677c5ec4ce1f834ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44826fdcd036982b955407677c5ec4ce1f834ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=c44826fdcd036982b955407677c5ec4ce1f834ce", "patch": "@@ -62,7 +62,7 @@ pub fn type_of_rust_fn(cx: &mut CrateContext,\n     atys.push_all(type_of_explicit_args(cx, inputs));\n \n     // Use the output as the actual return value if it's immediate.\n-    if !use_out_pointer && !ty::type_is_voidish(output) {\n+    if !use_out_pointer && !ty::type_is_voidish(cx.tcx, output) {\n         Type::func(atys, &lloutputtype)\n     } else {\n         Type::func(atys, &Type::void())"}, {"sha": "bd099e81a17e7675bffd28a95f2f3a06df608658", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c44826fdcd036982b955407677c5ec4ce1f834ce/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44826fdcd036982b955407677c5ec4ce1f834ce/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c44826fdcd036982b955407677c5ec4ce1f834ce", "patch": "@@ -1566,9 +1566,9 @@ pub fn subst(cx: ctxt,\n \n // Type utilities\n \n-pub fn type_is_voidish(ty: t) -> bool {\n+pub fn type_is_voidish(tcx: ctxt, ty: t) -> bool {\n     //! \"nil\" and \"bot\" are void types in that they represent 0 bits of information\n-    type_is_nil(ty) || type_is_bot(ty)\n+    type_is_nil(ty) || type_is_bot(ty) || type_is_empty(tcx, ty)\n }\n \n pub fn type_is_nil(ty: t) -> bool { get(ty).sty == ty_nil }"}]}