{"sha": "b4d387302416c90a3f70211770292d8d8ab5e07d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZDM4NzMwMjQxNmM5MGEzZjcwMjExNzcwMjkyZDhkOGFiNWUwN2Q=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-09-05T14:28:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-05T14:28:34Z"}, "message": "Rollup merge of #76263 - tmiasko:inline-codegen-fn-attrs, r=ecstatic-morse\n\ninliner: Check for codegen fn attributes compatibility\n\n* Check for target features compatibility\n* Check for no_sanitize attribute compatibility\n\nFixes #76259.", "tree": {"sha": "073b67192201ec0ec35e18a560a405e77847cbf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/073b67192201ec0ec35e18a560a405e77847cbf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4d387302416c90a3f70211770292d8d8ab5e07d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfU6CTCRBK7hj4Ov3rIwAAdHIIADmqGErzHe3iR4aU2AXYnG6k\nsfqPgT1zeHiXHlD6JlrzDaT1PV/QAOhmkZmDL4rQfBDXVa8A3yN40Yj6ZV4M+M3a\nXqaaCwVZuWJJJksSF40NWzQaPnalrMwpu8tX9etbPqhzKviyeTKJbvLS1fwQ+5o5\n2unHwtHsDEFWWNiVFj6JCMhgLdQp5x1OZ1t+Zyk6nltoJENE3t4yhDEDHKrSgrtB\nqdp1NhTT02YXPPp5RueFNdPtbWL3HYAi2fAGOpI8Hy+LYmJ1bWQ51ADAzCTuvLG1\noHohAGIx55J0z57NjPdUd3XDhIjWrFerF+x/98n31Zmr9doTX5f2y6wFfpwOctw=\n=CNLd\n-----END PGP SIGNATURE-----\n", "payload": "tree 073b67192201ec0ec35e18a560a405e77847cbf1\nparent 45bdee8fde3a47dd0316e1b2bc30641102ea7912\nparent c23151bdb1b242d96d545cfe4c5f3314b6ef448c\nauthor Dylan DPC <dylan.dpc@gmail.com> 1599316114 +0200\ncommitter GitHub <noreply@github.com> 1599316114 +0200\n\nRollup merge of #76263 - tmiasko:inline-codegen-fn-attrs, r=ecstatic-morse\n\ninliner: Check for codegen fn attributes compatibility\n\n* Check for target features compatibility\n* Check for no_sanitize attribute compatibility\n\nFixes #76259.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d387302416c90a3f70211770292d8d8ab5e07d", "html_url": "https://github.com/rust-lang/rust/commit/b4d387302416c90a3f70211770292d8d8ab5e07d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4d387302416c90a3f70211770292d8d8ab5e07d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45bdee8fde3a47dd0316e1b2bc30641102ea7912", "url": "https://api.github.com/repos/rust-lang/rust/commits/45bdee8fde3a47dd0316e1b2bc30641102ea7912", "html_url": "https://github.com/rust-lang/rust/commit/45bdee8fde3a47dd0316e1b2bc30641102ea7912"}, {"sha": "c23151bdb1b242d96d545cfe4c5f3314b6ef448c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c23151bdb1b242d96d545cfe4c5f3314b6ef448c", "html_url": "https://github.com/rust-lang/rust/commit/c23151bdb1b242d96d545cfe4c5f3314b6ef448c"}], "stats": {"total": 155, "additions": 150, "deletions": 5}, "files": [{"sha": "d6e6371e886c4c0bd1cb0b6b088d8e024ce79b74", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b4d387302416c90a3f70211770292d8d8ab5e07d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d387302416c90a3f70211770292d8d8ab5e07d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=b4d387302416c90a3f70211770292d8d8ab5e07d", "patch": "@@ -4,7 +4,7 @@ use rustc_attr as attr;\n use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n+use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n@@ -45,7 +45,8 @@ impl<'tcx> MirPass<'tcx> for Inline {\n                 // based function.\n                 debug!(\"function inlining is disabled when compiling with `instrument_coverage`\");\n             } else {\n-                Inliner { tcx, source }.run_pass(body);\n+                Inliner { tcx, source, codegen_fn_attrs: tcx.codegen_fn_attrs(source.def_id()) }\n+                    .run_pass(body);\n             }\n         }\n     }\n@@ -54,6 +55,7 @@ impl<'tcx> MirPass<'tcx> for Inline {\n struct Inliner<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     source: MirSource<'tcx>,\n+    codegen_fn_attrs: &'tcx CodegenFnAttrs,\n }\n \n impl Inliner<'tcx> {\n@@ -242,9 +244,19 @@ impl Inliner<'tcx> {\n             return false;\n         }\n \n-        // Avoid inlining functions marked as no_sanitize if sanitizer is enabled,\n-        // since instrumentation might be enabled and performed on the caller.\n-        if self.tcx.sess.opts.debugging_opts.sanitizer.intersects(codegen_fn_attrs.no_sanitize) {\n+        let self_features = &self.codegen_fn_attrs.target_features;\n+        let callee_features = &codegen_fn_attrs.target_features;\n+        if callee_features.iter().any(|feature| !self_features.contains(feature)) {\n+            debug!(\"`callee has extra target features - not inlining\");\n+            return false;\n+        }\n+\n+        let self_no_sanitize =\n+            self.codegen_fn_attrs.no_sanitize & self.tcx.sess.opts.debugging_opts.sanitizer;\n+        let callee_no_sanitize =\n+            codegen_fn_attrs.no_sanitize & self.tcx.sess.opts.debugging_opts.sanitizer;\n+        if self_no_sanitize != callee_no_sanitize {\n+            debug!(\"`callee has incompatible no_sanitize attribute - not inlining\");\n             return false;\n         }\n "}, {"sha": "ff9049edb4f2c53b584e5323d23e542393bdf036", "filename": "src/test/mir-opt/inline/inline-compatibility.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b4d387302416c90a3f70211770292d8d8ab5e07d/src%2Ftest%2Fmir-opt%2Finline%2Finline-compatibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d387302416c90a3f70211770292d8d8ab5e07d/src%2Ftest%2Fmir-opt%2Finline%2Finline-compatibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-compatibility.rs?ref=b4d387302416c90a3f70211770292d8d8ab5e07d", "patch": "@@ -0,0 +1,39 @@\n+// Checks that only functions with compatible attributes are inlined.\n+//\n+// only-x86_64\n+// needs-sanitizer-address\n+// compile-flags: -Zsanitizer=address\n+\n+#![crate_type = \"lib\"]\n+#![feature(no_sanitize)]\n+#![feature(target_feature_11)]\n+\n+// EMIT_MIR inline_compatibility.inlined_target_feature.Inline.diff\n+#[target_feature(enable = \"sse2\")]\n+pub unsafe fn inlined_target_feature() {\n+    target_feature();\n+}\n+\n+// EMIT_MIR inline_compatibility.not_inlined_target_feature.Inline.diff\n+pub unsafe fn not_inlined_target_feature() {\n+    target_feature();\n+}\n+\n+// EMIT_MIR inline_compatibility.inlined_no_sanitize.Inline.diff\n+#[no_sanitize(address)]\n+pub unsafe fn inlined_no_sanitize() {\n+    no_sanitize();\n+}\n+\n+// EMIT_MIR inline_compatibility.not_inlined_no_sanitize.Inline.diff\n+pub unsafe fn not_inlined_no_sanitize() {\n+    no_sanitize();\n+}\n+\n+#[inline]\n+#[target_feature(enable = \"sse2\")]\n+pub unsafe fn target_feature() {}\n+\n+#[inline]\n+#[no_sanitize(address, memory)]\n+pub unsafe fn no_sanitize() {}"}, {"sha": "7b0ecaffdd7cb6f18b3cf14f0a70664ada5baffa", "filename": "src/test/mir-opt/inline/inline_compatibility.inlined_no_sanitize.Inline.diff", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b4d387302416c90a3f70211770292d8d8ab5e07d/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b4d387302416c90a3f70211770292d8d8ab5e07d/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff?ref=b4d387302416c90a3f70211770292d8d8ab5e07d", "patch": "@@ -0,0 +1,25 @@\n+- // MIR for `inlined_no_sanitize` before Inline\n++ // MIR for `inlined_no_sanitize` after Inline\n+  \n+  fn inlined_no_sanitize() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:24:37: 24:37\n+      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:25:5: 25:18\n++     scope 1 {\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:25:5: 25:18\n+-         _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline-compatibility.rs:25:5: 25:18\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline-compatibility.rs:25:5: 25:16\n+-                                          // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(Scalar(<ZST>)) }\n+-     }\n+- \n+-     bb1: {\n++         _1 = const ();                   // scope 1 at $DIR/inline-compatibility.rs:39:29: 39:31\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:25:18: 25:19\n+          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:24:37: 26:2\n+          return;                          // scope 0 at $DIR/inline-compatibility.rs:26:2: 26:2\n+      }\n+  }\n+  "}, {"sha": "f55eae6c50a5f4855f99c06e7490b5d495844423", "filename": "src/test/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.diff", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b4d387302416c90a3f70211770292d8d8ab5e07d/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b4d387302416c90a3f70211770292d8d8ab5e07d/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff?ref=b4d387302416c90a3f70211770292d8d8ab5e07d", "patch": "@@ -0,0 +1,25 @@\n+- // MIR for `inlined_target_feature` before Inline\n++ // MIR for `inlined_target_feature` after Inline\n+  \n+  fn inlined_target_feature() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:13:40: 13:40\n+      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:14:5: 14:21\n++     scope 1 {\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:14:5: 14:21\n+-         _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline-compatibility.rs:14:5: 14:21\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline-compatibility.rs:14:5: 14:19\n+-                                          // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(Scalar(<ZST>)) }\n+-     }\n+- \n+-     bb1: {\n++         _1 = const ();                   // scope 1 at $DIR/inline-compatibility.rs:35:32: 35:34\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:14:21: 14:22\n+          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:13:40: 15:2\n+          return;                          // scope 0 at $DIR/inline-compatibility.rs:15:2: 15:2\n+      }\n+  }\n+  "}, {"sha": "651eadc1e849ca1b56613901b67a971089e86ed2", "filename": "src/test/mir-opt/inline/inline_compatibility.not_inlined_no_sanitize.Inline.diff", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b4d387302416c90a3f70211770292d8d8ab5e07d/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b4d387302416c90a3f70211770292d8d8ab5e07d/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff?ref=b4d387302416c90a3f70211770292d8d8ab5e07d", "patch": "@@ -0,0 +1,22 @@\n+- // MIR for `not_inlined_no_sanitize` before Inline\n++ // MIR for `not_inlined_no_sanitize` after Inline\n+  \n+  fn not_inlined_no_sanitize() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:29:41: 29:41\n+      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:30:5: 30:18\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:30:5: 30:18\n+          _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline-compatibility.rs:30:5: 30:18\n+                                           // mir::Constant\n+                                           // + span: $DIR/inline-compatibility.rs:30:5: 30:16\n+                                           // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:30:18: 30:19\n+          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:29:41: 31:2\n+          return;                          // scope 0 at $DIR/inline-compatibility.rs:31:2: 31:2\n+      }\n+  }\n+  "}, {"sha": "55b9edf3adc1f6b59b680173d91e69ed6c463d14", "filename": "src/test/mir-opt/inline/inline_compatibility.not_inlined_target_feature.Inline.diff", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b4d387302416c90a3f70211770292d8d8ab5e07d/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b4d387302416c90a3f70211770292d8d8ab5e07d/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff?ref=b4d387302416c90a3f70211770292d8d8ab5e07d", "patch": "@@ -0,0 +1,22 @@\n+- // MIR for `not_inlined_target_feature` before Inline\n++ // MIR for `not_inlined_target_feature` after Inline\n+  \n+  fn not_inlined_target_feature() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:18:44: 18:44\n+      let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:19:5: 19:21\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inline-compatibility.rs:19:5: 19:21\n+          _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline-compatibility.rs:19:5: 19:21\n+                                           // mir::Constant\n+                                           // + span: $DIR/inline-compatibility.rs:19:5: 19:19\n+                                           // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_1);                 // scope 0 at $DIR/inline-compatibility.rs:19:21: 19:22\n+          _0 = const ();                   // scope 0 at $DIR/inline-compatibility.rs:18:44: 20:2\n+          return;                          // scope 0 at $DIR/inline-compatibility.rs:20:2: 20:2\n+      }\n+  }\n+  "}]}