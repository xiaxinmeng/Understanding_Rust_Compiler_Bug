{"sha": "14f906f24e616c749e9056511e81c464f3c6df25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZjkwNmYyNGU2MTZjNzQ5ZTkwNTY1MTFlODFjNDY0ZjNjNmRmMjU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-08T01:16:18Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-01T22:10:57Z"}, "message": "Define `canonicalize_const_var`\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "dedc22b468790dc0e070d51eb47910b4713f4724", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dedc22b468790dc0e070d51eb47910b4713f4724"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14f906f24e616c749e9056511e81c464f3c6df25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14f906f24e616c749e9056511e81c464f3c6df25", "html_url": "https://github.com/rust-lang/rust/commit/14f906f24e616c749e9056511e81c464f3c6df25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14f906f24e616c749e9056511e81c464f3c6df25/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0728b62aca9f8c141ac90184c24f404a05f5a520", "url": "https://api.github.com/repos/rust-lang/rust/commits/0728b62aca9f8c141ac90184c24f404a05f5a520", "html_url": "https://github.com/rust-lang/rust/commit/0728b62aca9f8c141ac90184c24f404a05f5a520"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "9bd7f4c02d7beeeff068bfae71f37cd6fe6a9903", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/14f906f24e616c749e9056511e81c464f3c6df25/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f906f24e616c749e9056511e81c464f3c6df25/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=14f906f24e616c749e9056511e81c464f3c6df25", "patch": "@@ -633,4 +633,34 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n             self.tcx().mk_ty(ty::Bound(self.binder_index, var.into()))\n         }\n     }\n+\n+    /// Given a type variable `const_var` of the given kind, first check\n+    /// if `const_var` is bound to anything; if so, canonicalize\n+    /// *that*. Otherwise, create a new canonical variable for\n+    /// `const_var`.\n+    fn canonicalize_const_var(\n+        &mut self,\n+        info: CanonicalVarInfo,\n+        const_var: &'tcx ty::LazyConst<'tcx>\n+    ) -> &'tcx ty::LazyConst<'tcx> {\n+        let infcx = self.infcx.expect(\"encountered const-var without infcx\");\n+        let bound_to = infcx.resolve_const_var(const_var);\n+        if bound_to != const_var {\n+            self.fold_const(bound_to)\n+        } else {\n+            let ty = match const_var {\n+                ty::LazyConst::Unevaluated(def_id, _) => {\n+                    self.tcx.type_of(*def_id)\n+                }\n+                ty::LazyConst::Evaluated(ty::Const { ty, .. }) => ty,\n+            };\n+            let var = self.canonical_var(info, const_var.into());\n+            self.tcx().mk_lazy_const(\n+                ty::LazyConst::Evaluated(ty::Const {\n+                    val: ConstValue::Infer(InferConst::Canonical(self.binder_index, var.into())),\n+                    ty,\n+                })\n+            )\n+        }\n+    }\n }"}]}