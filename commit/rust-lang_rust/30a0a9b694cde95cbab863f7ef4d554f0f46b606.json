{"sha": "30a0a9b694cde95cbab863f7ef4d554f0f46b606", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYTBhOWI2OTRjZGU5NWNiYWI4NjNmN2VmNGQ1NTRmMGY0NmI2MDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-17T19:08:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-17T19:08:31Z"}, "message": "Auto merge of #86977 - vakaras:body_with_borrowck_facts, r=nikomatsakis\n\nEnable compiler consumers to obtain mir::Body with Polonius facts.\n\nThis PR adds a function (``get_body_with_borrowck_facts``) that can be used by compiler consumers to obtain ``mir::Body`` with accompanying borrow checker information.\n\nThe most important borrow checker information that [our verifier called Prusti](https://github.com/viperproject/prusti-dev) needs is lifetime constraints. I have not found a reasonable way to compute the lifetime constraints on the Prusti side. In the compiler, the constraints are computed during the borrow checking phase and then dropped. This PR adds an additional parameter to the `do_mir_borrowck` function that tells it to return the computed information instead of dropping it.\n\nThe additionally returned information by `do_mir_borrowck` contains a ``mir::Body`` with non-erased lifetime regions and Polonius facts. I have decided to reuse the Polonius facts because this way I needed fewer changes to the compiler and Polonius facts contains other useful information that we otherwise would need to recompute.\n\nJust FYI: up to now, Prusti was obtaining this information by [parsing the compiler logs](https://github.com/viperproject/prusti-dev/blob/b58ced8dfd14ef30582b503d517167ccd771eaff/prusti-interface/src/environment/borrowck/regions.rs#L25-L39). This is not only a hacky approach, but we also reached its limits.\n\nr? `@nikomatsakis`", "tree": {"sha": "e9d934aaf8f76049e69b07804e5809e527156292", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9d934aaf8f76049e69b07804e5809e527156292"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30a0a9b694cde95cbab863f7ef4d554f0f46b606", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30a0a9b694cde95cbab863f7ef4d554f0f46b606", "html_url": "https://github.com/rust-lang/rust/commit/30a0a9b694cde95cbab863f7ef4d554f0f46b606", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30a0a9b694cde95cbab863f7ef4d554f0f46b606/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d83da1d05dc75ff3452c068299f40e5d99589d71", "url": "https://api.github.com/repos/rust-lang/rust/commits/d83da1d05dc75ff3452c068299f40e5d99589d71", "html_url": "https://github.com/rust-lang/rust/commit/d83da1d05dc75ff3452c068299f40e5d99589d71"}, {"sha": "9142d6ddf0634066ce4905793aca22948f0d2225", "url": "https://api.github.com/repos/rust-lang/rust/commits/9142d6ddf0634066ce4905793aca22948f0d2225", "html_url": "https://github.com/rust-lang/rust/commit/9142d6ddf0634066ce4905793aca22948f0d2225"}], "stats": {"total": 359, "additions": 342, "deletions": 17}, "files": [{"sha": "f6e4e3888418fb22d848f7b63f1ebf6a7b13a5ec", "filename": "compiler/rustc_mir/src/borrow_check/consumers.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/30a0a9b694cde95cbab863f7ef4d554f0f46b606/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fconsumers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a0a9b694cde95cbab863f7ef4d554f0f46b606/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fconsumers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fconsumers.rs?ref=30a0a9b694cde95cbab863f7ef4d554f0f46b606", "patch": "@@ -0,0 +1,39 @@\n+//! This file provides API for compiler consumers.\n+\n+use rustc_hir::def_id::LocalDefId;\n+use rustc_index::vec::IndexVec;\n+use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_middle::mir::Body;\n+use rustc_middle::ty::{self, TyCtxt};\n+\n+pub use super::{\n+    facts::{AllFacts as PoloniusInput, RustcFacts},\n+    location::{LocationTable, RichLocation},\n+    nll::PoloniusOutput,\n+    BodyWithBorrowckFacts,\n+};\n+\n+/// This function computes Polonius facts for the given body. It makes a copy of\n+/// the body because it needs to regenerate the region identifiers.\n+///\n+/// Note:\n+/// *   This function will panic if the required body was already stolen. This\n+///     can, for example, happen when requesting a body of a `const` function\n+///     because they are evaluated during typechecking. The panic can be avoided\n+///     by overriding the `mir_borrowck` query. You can find a complete example\n+///     that shows how to do this at `src/test/run-make/obtain-borrowck/`.\n+/// *   This function will also panic if computation of Polonius facts\n+///     (`-Zpolonius` flag) is not enabled.\n+///\n+/// *   Polonius is highly unstable, so expect regular changes in its signature or other details.\n+pub fn get_body_with_borrowck_facts<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n+) -> BodyWithBorrowckFacts<'tcx> {\n+    let (input_body, promoted) = tcx.mir_promoted(def);\n+    tcx.infer_ctxt().enter(|infcx| {\n+        let input_body: &Body<'_> = &input_body.borrow();\n+        let promoted: &IndexVec<_, _> = &promoted.borrow();\n+        *super::do_mir_borrowck(&infcx, input_body, promoted, true).1.unwrap()\n+    })\n+}"}, {"sha": "daea5e538ed512b2417953e7734e02c1ddc020ed", "filename": "compiler/rustc_mir/src/borrow_check/facts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30a0a9b694cde95cbab863f7ef4d554f0f46b606/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a0a9b694cde95cbab863f7ef4d554f0f46b606/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ffacts.rs?ref=30a0a9b694cde95cbab863f7ef4d554f0f46b606", "patch": "@@ -12,7 +12,7 @@ use std::io::{BufWriter, Write};\n use std::path::Path;\n \n #[derive(Copy, Clone, Debug)]\n-crate struct RustcFacts;\n+pub struct RustcFacts;\n \n impl polonius_engine::FactTypes for RustcFacts {\n     type Origin = RegionVid;\n@@ -22,7 +22,7 @@ impl polonius_engine::FactTypes for RustcFacts {\n     type Path = MovePathIndex;\n }\n \n-crate type AllFacts = PoloniusFacts<RustcFacts>;\n+pub type AllFacts = PoloniusFacts<RustcFacts>;\n \n crate trait AllFactsExt {\n     /// Returns `true` if there is a need to gather `AllFacts` given the"}, {"sha": "d378a2cbea3e19dedeb5c1aead21582dab987dd5", "filename": "compiler/rustc_mir/src/borrow_check/location.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/30a0a9b694cde95cbab863f7ef4d554f0f46b606/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a0a9b694cde95cbab863f7ef4d554f0f46b606/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Flocation.rs?ref=30a0a9b694cde95cbab863f7ef4d554f0f46b606", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::mir::{BasicBlock, Body, Location};\n /// granularity through outlives relations; however, the rich location\n /// table serves another purpose: it compresses locations from\n /// multiple words into a single u32.\n-crate struct LocationTable {\n+pub struct LocationTable {\n     num_points: usize,\n     statements_before_block: IndexVec<BasicBlock, usize>,\n }\n@@ -24,7 +24,7 @@ rustc_index::newtype_index! {\n }\n \n #[derive(Copy, Clone, Debug)]\n-crate enum RichLocation {\n+pub enum RichLocation {\n     Start(Location),\n     Mid(Location),\n }\n@@ -48,23 +48,23 @@ impl LocationTable {\n         Self { num_points, statements_before_block }\n     }\n \n-    crate fn all_points(&self) -> impl Iterator<Item = LocationIndex> {\n+    pub fn all_points(&self) -> impl Iterator<Item = LocationIndex> {\n         (0..self.num_points).map(LocationIndex::new)\n     }\n \n-    crate fn start_index(&self, location: Location) -> LocationIndex {\n+    pub fn start_index(&self, location: Location) -> LocationIndex {\n         let Location { block, statement_index } = location;\n         let start_index = self.statements_before_block[block];\n         LocationIndex::new(start_index + statement_index * 2)\n     }\n \n-    crate fn mid_index(&self, location: Location) -> LocationIndex {\n+    pub fn mid_index(&self, location: Location) -> LocationIndex {\n         let Location { block, statement_index } = location;\n         let start_index = self.statements_before_block[block];\n         LocationIndex::new(start_index + statement_index * 2 + 1)\n     }\n \n-    crate fn to_location(&self, index: LocationIndex) -> RichLocation {\n+    pub fn to_location(&self, index: LocationIndex) -> RichLocation {\n         let point_index = index.index();\n \n         // Find the basic block. We have a vector with the"}, {"sha": "f0ffbe3a33fb957cfb2a9e98e5b10ad61e013cc3", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 51, "deletions": 7, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/30a0a9b694cde95cbab863f7ef4d554f0f46b606/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a0a9b694cde95cbab863f7ef4d554f0f46b606/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=30a0a9b694cde95cbab863f7ef4d554f0f46b606", "patch": "@@ -42,12 +42,14 @@ use self::diagnostics::{AccessKind, RegionName};\n use self::location::LocationTable;\n use self::prefixes::PrefixSet;\n use self::MutateMode::{JustWrite, WriteAndRead};\n+use facts::AllFacts;\n \n use self::path_utils::*;\n \n mod borrow_set;\n mod constraint_generation;\n mod constraints;\n+pub mod consumers;\n mod def_use;\n mod diagnostics;\n mod facts;\n@@ -108,22 +110,33 @@ fn mir_borrowck<'tcx>(\n     let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {\n         let input_body: &Body<'_> = &input_body.borrow();\n         let promoted: &IndexVec<_, _> = &promoted.borrow();\n-        do_mir_borrowck(&infcx, input_body, promoted)\n+        do_mir_borrowck(&infcx, input_body, promoted, false).0\n     });\n     debug!(\"mir_borrowck done\");\n \n     tcx.arena.alloc(opt_closure_req)\n }\n \n+/// Perform the actual borrow checking.\n+///\n+/// If `return_body_with_facts` is true, then return the body with non-erased\n+/// region ids on which the borrow checking was performed together with Polonius\n+/// facts.\n fn do_mir_borrowck<'a, 'tcx>(\n     infcx: &InferCtxt<'a, 'tcx>,\n     input_body: &Body<'tcx>,\n     input_promoted: &IndexVec<Promoted, Body<'tcx>>,\n-) -> BorrowCheckResult<'tcx> {\n+    return_body_with_facts: bool,\n+) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {\n     let def = input_body.source.with_opt_param().as_local().unwrap();\n \n     debug!(\"do_mir_borrowck(def = {:?})\", def);\n \n+    assert!(\n+        !return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius,\n+        \"borrowck facts can be requested only when Polonius is enabled\"\n+    );\n+\n     let tcx = infcx.tcx;\n     let param_env = tcx.param_env(def.did);\n     let id = tcx.hir().local_def_id_to_hir_id(def.did);\n@@ -169,12 +182,14 @@ fn do_mir_borrowck<'a, 'tcx>(\n     // requires first making our own copy of the MIR. This copy will\n     // be modified (in place) to contain non-lexical lifetimes. It\n     // will have a lifetime tied to the inference context.\n-    let mut body = input_body.clone();\n+    let mut body_owned = input_body.clone();\n     let mut promoted = input_promoted.clone();\n-    let free_regions = nll::replace_regions_in_mir(infcx, param_env, &mut body, &mut promoted);\n-    let body = &body; // no further changes\n+    let free_regions =\n+        nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);\n+    let body = &body_owned; // no further changes\n \n-    let location_table = &LocationTable::new(&body);\n+    let location_table_owned = LocationTable::new(body);\n+    let location_table = &location_table_owned;\n \n     let mut errors_buffer = Vec::new();\n     let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =\n@@ -202,6 +217,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     let nll::NllOutput {\n         regioncx,\n         opaque_type_values,\n+        polonius_input,\n         polonius_output,\n         opt_closure_req,\n         nll_errors,\n@@ -446,9 +462,37 @@ fn do_mir_borrowck<'a, 'tcx>(\n         used_mut_upvars: mbcx.used_mut_upvars,\n     };\n \n+    let body_with_facts = if return_body_with_facts {\n+        let output_facts = mbcx.polonius_output.expect(\"Polonius output was not computed\");\n+        Some(box BodyWithBorrowckFacts {\n+            body: body_owned,\n+            input_facts: *polonius_input.expect(\"Polonius input facts were not generated\"),\n+            output_facts,\n+            location_table: location_table_owned,\n+        })\n+    } else {\n+        None\n+    };\n+\n     debug!(\"do_mir_borrowck: result = {:#?}\", result);\n \n-    result\n+    (result, body_with_facts)\n+}\n+\n+/// A `Body` with information computed by the borrow checker. This struct is\n+/// intended to be consumed by compiler consumers.\n+///\n+/// We need to include the MIR body here because the region identifiers must\n+/// match the ones in the Polonius facts.\n+pub struct BodyWithBorrowckFacts<'tcx> {\n+    /// A mir body that contains region identifiers.\n+    pub body: Body<'tcx>,\n+    /// Polonius input facts.\n+    pub input_facts: AllFacts,\n+    /// Polonius output facts.\n+    pub output_facts: Rc<self::nll::PoloniusOutput>,\n+    /// The table that maps Polonius points to locations in the table.\n+    pub location_table: LocationTable,\n }\n \n crate struct MirBorrowckCtxt<'cx, 'tcx> {"}, {"sha": "7742b76d9a48b018a07a225684d040caffe496c2", "filename": "compiler/rustc_mir/src/borrow_check/nll.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30a0a9b694cde95cbab863f7ef4d554f0f46b606/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a0a9b694cde95cbab863f7ef4d554f0f46b606/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs?ref=30a0a9b694cde95cbab863f7ef4d554f0f46b606", "patch": "@@ -40,13 +40,14 @@ use crate::borrow_check::{\n     Upvar,\n };\n \n-crate type PoloniusOutput = Output<RustcFacts>;\n+pub type PoloniusOutput = Output<RustcFacts>;\n \n /// The output of `nll::compute_regions`. This includes the computed `RegionInferenceContext`, any\n /// closure requirements to propagate, and any generated errors.\n crate struct NllOutput<'tcx> {\n     pub regioncx: RegionInferenceContext<'tcx>,\n     pub opaque_type_values: VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n+    pub polonius_input: Option<Box<AllFacts>>,\n     pub polonius_output: Option<Rc<PoloniusOutput>>,\n     pub opt_closure_req: Option<ClosureRegionRequirements<'tcx>>,\n     pub nll_errors: RegionErrors<'tcx>,\n@@ -271,7 +272,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     let def_id = body.source.def_id();\n \n     // Dump facts if requested.\n-    let polonius_output = all_facts.and_then(|all_facts| {\n+    let polonius_output = all_facts.as_ref().and_then(|all_facts| {\n         if infcx.tcx.sess.opts.debugging_opts.nll_facts {\n             let def_path = infcx.tcx.def_path(def_id);\n             let dir_path = PathBuf::from(&infcx.tcx.sess.opts.debugging_opts.nll_facts_dir)\n@@ -305,6 +306,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     NllOutput {\n         regioncx,\n         opaque_type_values: remapped_opaque_tys,\n+        polonius_input: all_facts.map(Box::new),\n         polonius_output,\n         opt_closure_req: closure_region_requirements,\n         nll_errors,"}, {"sha": "eda33a5106d850085d9229a528442c7a0799ae83", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/30a0a9b694cde95cbab863f7ef4d554f0f46b606/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a0a9b694cde95cbab863f7ef4d554f0f46b606/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=30a0a9b694cde95cbab863f7ef4d554f0f46b606", "patch": "@@ -47,6 +47,9 @@ mod shim;\n pub mod transform;\n pub mod util;\n \n+// A public API provided for the Rust compiler consumers.\n+pub use self::borrow_check::consumers;\n+\n use rustc_middle::ty::query::Providers;\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "223993125c8094d9834454e6f240314de59da02a", "filename": "src/test/run-make-fulldeps/obtain-borrowck/Makefile", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/30a0a9b694cde95cbab863f7ef4d554f0f46b606/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/30a0a9b694cde95cbab863f7ef4d554f0f46b606/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2FMakefile?ref=30a0a9b694cde95cbab863f7ef4d554f0f46b606", "patch": "@@ -0,0 +1,26 @@\n+include ../tools.mk\n+\n+# This example shows how to implement a rustc driver that retrieves MIR bodies\n+# together with the borrow checker information.\n+\n+# How to run this\n+# $ ./x.py test src/test/run-make-fulldeps/obtain-borrowck\n+\n+DRIVER_BINARY := \"$(TMPDIR)\"/driver\n+SYSROOT := $(shell $(RUSTC) --print sysroot)\n+\n+ifdef IS_WINDOWS\n+LIBSTD := -L \"$(SYSROOT)\\\\lib\\\\rustlib\\\\$(TARGET)\\\\lib\"\n+else\n+LIBSTD :=\n+endif\n+\n+all:\n+\t$(RUSTC) driver.rs -o \"$(DRIVER_BINARY)\"\n+\t$(TARGET_RPATH_ENV) \"$(DRIVER_BINARY)\" --sysroot $(SYSROOT) $(LIBSTD) test.rs -o \"$(TMPDIR)/driver_test\" > \"$(TMPDIR)\"/output.stdout\n+\n+ifdef RUSTC_BLESS_TEST\n+\tcp \"$(TMPDIR)\"/output.stdout output.stdout\n+else\n+\t$(DIFF) output.stdout \"$(TMPDIR)\"/output.stdout\n+endif"}, {"sha": "308df0b030c27ec138e098e9b8816367a923ecd2", "filename": "src/test/run-make-fulldeps/obtain-borrowck/driver.rs", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/30a0a9b694cde95cbab863f7ef4d554f0f46b606/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a0a9b694cde95cbab863f7ef4d554f0f46b606/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs?ref=30a0a9b694cde95cbab863f7ef4d554f0f46b606", "patch": "@@ -0,0 +1,171 @@\n+#![feature(rustc_private)]\n+\n+//! This program implements a rustc driver that retrieves MIR bodies with\n+//! borrowck information. This cannot be done in a straightforward way because\n+//! `get_body_with_borrowck_facts`\u2013the function for retrieving a MIR body with\n+//! borrowck facts\u2013can panic if the body is stolen before it is invoked.\n+//! Therefore, the driver overrides `mir_borrowck` query (this is done in the\n+//! `config` callback), which retrieves the body that is about to be borrow\n+//! checked and stores it in a thread local `MIR_BODIES`. Then, `after_analysis`\n+//! callback triggers borrow checking of all MIR bodies by retrieving\n+//! `optimized_mir` and pulls out the MIR bodies with the borrowck information\n+//! from the thread local storage.\n+\n+extern crate rustc_driver;\n+extern crate rustc_hir;\n+extern crate rustc_interface;\n+extern crate rustc_middle;\n+extern crate rustc_mir;\n+extern crate rustc_session;\n+\n+use rustc_driver::Compilation;\n+use rustc_hir::def_id::LocalDefId;\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_interface::interface::Compiler;\n+use rustc_interface::{Config, Queries};\n+use rustc_middle::ty::query::query_values::mir_borrowck;\n+use rustc_middle::ty::query::Providers;\n+use rustc_middle::ty::{self, TyCtxt};\n+use rustc_mir::consumers::BodyWithBorrowckFacts;\n+use rustc_session::Session;\n+use std::cell::RefCell;\n+use std::collections::HashMap;\n+use std::thread_local;\n+\n+fn main() {\n+    let exit_code = rustc_driver::catch_with_exit_code(move || {\n+        let mut rustc_args: Vec<_> = std::env::args().collect();\n+        // We must pass -Zpolonius so that the borrowck information is computed.\n+        rustc_args.push(\"-Zpolonius\".to_owned());\n+        let mut callbacks = CompilerCalls::default();\n+        // Call the Rust compiler with our callbacks.\n+        rustc_driver::RunCompiler::new(&rustc_args, &mut callbacks).run()\n+    });\n+    std::process::exit(exit_code);\n+}\n+\n+#[derive(Default)]\n+pub struct CompilerCalls;\n+\n+impl rustc_driver::Callbacks for CompilerCalls {\n+\n+    // In this callback we override the mir_borrowck query.\n+    fn config(&mut self, config: &mut Config) {\n+        assert!(config.override_queries.is_none());\n+        config.override_queries = Some(override_queries);\n+    }\n+\n+    // In this callback we trigger borrow checking of all functions and obtain\n+    // the result.\n+    fn after_analysis<'tcx>(\n+        &mut self,\n+        compiler: &Compiler,\n+        queries: &'tcx Queries<'tcx>,\n+    ) -> Compilation {\n+        compiler.session().abort_if_errors();\n+        queries.global_ctxt().unwrap().peek_mut().enter(|tcx| {\n+\n+            // Collect definition ids of MIR bodies.\n+            let hir = tcx.hir();\n+            let krate = hir.krate();\n+            let mut visitor = HirVisitor { bodies: Vec::new() };\n+            krate.visit_all_item_likes(&mut visitor);\n+\n+            // Trigger borrow checking of all bodies.\n+            for def_id in visitor.bodies {\n+                let _ = tcx.optimized_mir(def_id);\n+            }\n+\n+            // See what bodies were borrow checked.\n+            let mut bodies = get_bodies(tcx);\n+            bodies.sort_by(|(def_id1, _), (def_id2, _)| def_id1.cmp(def_id2));\n+            println!(\"Bodies retrieved for:\");\n+            for (def_id, body) in bodies {\n+                println!(\"{}\", def_id);\n+                assert!(body.input_facts.cfg_edge.len() > 0);\n+            }\n+        });\n+\n+        Compilation::Continue\n+    }\n+}\n+\n+fn override_queries(_session: &Session, local: &mut Providers, external: &mut Providers) {\n+    local.mir_borrowck = mir_borrowck;\n+    external.mir_borrowck = mir_borrowck;\n+}\n+\n+// Since mir_borrowck does not have access to any other state, we need to use a\n+// thread-local for storing the obtained MIR bodies.\n+//\n+// Note: We are using 'static lifetime here, which is in general unsound.\n+// Unfortunately, that is the only lifetime allowed here. Our use is safe\n+// because we cast it back to `'tcx` before using.\n+thread_local! {\n+    pub static MIR_BODIES:\n+        RefCell<HashMap<LocalDefId, BodyWithBorrowckFacts<'static>>> =\n+        RefCell::new(HashMap::new());\n+}\n+\n+fn mir_borrowck<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> mir_borrowck<'tcx> {\n+    let body_with_facts = rustc_mir::consumers::get_body_with_borrowck_facts(\n+        tcx,\n+        ty::WithOptConstParam::unknown(def_id),\n+    );\n+    // SAFETY: The reader casts the 'static lifetime to 'tcx before using it.\n+    let body_with_facts: BodyWithBorrowckFacts<'static> =\n+        unsafe { std::mem::transmute(body_with_facts) };\n+    MIR_BODIES.with(|state| {\n+        let mut map = state.borrow_mut();\n+        assert!(map.insert(def_id, body_with_facts).is_none());\n+    });\n+    let mut providers = Providers::default();\n+    rustc_mir::provide(&mut providers);\n+    let original_mir_borrowck = providers.mir_borrowck;\n+    original_mir_borrowck(tcx, def_id)\n+}\n+\n+/// Visitor that collects all body definition ids mentioned in the program.\n+struct HirVisitor {\n+    bodies: Vec<LocalDefId>,\n+}\n+\n+impl<'tcx> ItemLikeVisitor<'tcx> for HirVisitor {\n+    fn visit_item(&mut self, item: &rustc_hir::Item) {\n+        if let rustc_hir::ItemKind::Fn(..) = item.kind {\n+            self.bodies.push(item.def_id);\n+        }\n+    }\n+\n+    fn visit_trait_item(&mut self, trait_item: &rustc_hir::TraitItem) {\n+        if let rustc_hir::TraitItemKind::Fn(_, trait_fn) = &trait_item.kind {\n+            if let rustc_hir::TraitFn::Provided(_) = trait_fn {\n+                self.bodies.push(trait_item.def_id);\n+            }\n+        }\n+    }\n+\n+    fn visit_impl_item(&mut self, impl_item: &rustc_hir::ImplItem) {\n+        if let rustc_hir::ImplItemKind::Fn(..) = impl_item.kind {\n+            self.bodies.push(impl_item.def_id);\n+        }\n+    }\n+\n+    fn visit_foreign_item(&mut self, _foreign_item: &rustc_hir::ForeignItem) {}\n+}\n+\n+/// Pull MIR bodies stored in the thread-local.\n+fn get_bodies<'tcx>(tcx: TyCtxt<'tcx>) -> Vec<(String, BodyWithBorrowckFacts<'tcx>)> {\n+    MIR_BODIES.with(|state| {\n+        let mut map = state.borrow_mut();\n+        map.drain()\n+            .map(|(def_id, body)| {\n+                let def_path = tcx.def_path(def_id.to_def_id());\n+                // SAFETY: For soundness we need to ensure that the bodies have\n+                // the same lifetime (`'tcx`), which they had before they were\n+                // stored in the thread local.\n+                (def_path.to_string_no_crate_verbose(), body)\n+            })\n+            .collect()\n+    })\n+}"}, {"sha": "e011622e6b2a3d7e7a5a0981725b055786995677", "filename": "src/test/run-make-fulldeps/obtain-borrowck/output.stdout", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30a0a9b694cde95cbab863f7ef4d554f0f46b606/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Foutput.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/30a0a9b694cde95cbab863f7ef4d554f0f46b606/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Foutput.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Foutput.stdout?ref=30a0a9b694cde95cbab863f7ef4d554f0f46b606", "patch": "@@ -0,0 +1,8 @@\n+Bodies retrieved for:\n+::X::provided\n+::foo\n+::main\n+::main::{constant#0}\n+::{impl#0}::new\n+::{impl#1}::provided\n+::{impl#1}::required"}, {"sha": "f7b4b41feaf9740d3fed2f87755ff14a12ffb15a", "filename": "src/test/run-make-fulldeps/obtain-borrowck/test.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/30a0a9b694cde95cbab863f7ef4d554f0f46b606/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a0a9b694cde95cbab863f7ef4d554f0f46b606/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Ftest.rs?ref=30a0a9b694cde95cbab863f7ef4d554f0f46b606", "patch": "@@ -0,0 +1,32 @@\n+trait X {\n+    fn provided(&self) -> usize {\n+        5\n+    }\n+    fn required(&self) -> u32;\n+}\n+\n+struct Bar;\n+\n+impl Bar {\n+    fn new() -> Self {\n+        Self\n+    }\n+}\n+\n+impl X for Bar {\n+    fn provided(&self) -> usize {\n+        1\n+    }\n+    fn required(&self) -> u32 {\n+        7\n+    }\n+}\n+\n+const fn foo() -> usize {\n+    1\n+}\n+\n+fn main() {\n+    let bar: [Bar; foo()] = [Bar::new()];\n+    assert_eq!(bar[0].provided(), foo());\n+}"}]}