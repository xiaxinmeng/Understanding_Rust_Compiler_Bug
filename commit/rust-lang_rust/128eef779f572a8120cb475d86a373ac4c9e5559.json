{"sha": "128eef779f572a8120cb475d86a373ac4c9e5559", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyOGVlZjc3OWY1NzJhODEyMGNiNDc1ZDg2YTM3M2FjNGM5ZTU1NTk=", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2020-08-12T21:51:15Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2020-08-20T18:34:53Z"}, "message": "Improve AST replacing in expand glob import", "tree": {"sha": "b7ef226cde7c59c0a6869b68519b814d3ead6f56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7ef226cde7c59c0a6869b68519b814d3ead6f56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/128eef779f572a8120cb475d86a373ac4c9e5559", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/128eef779f572a8120cb475d86a373ac4c9e5559", "html_url": "https://github.com/rust-lang/rust/commit/128eef779f572a8120cb475d86a373ac4c9e5559", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/128eef779f572a8120cb475d86a373ac4c9e5559/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71d2c4a0278c2200a88dad40de94681a1e9768fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/71d2c4a0278c2200a88dad40de94681a1e9768fc", "html_url": "https://github.com/rust-lang/rust/commit/71d2c4a0278c2200a88dad40de94681a1e9768fc"}], "stats": {"total": 267, "additions": 229, "deletions": 38}, "files": [{"sha": "0288d1c773a8cfed2445e7b16dc156f1f1ee3a87", "filename": "crates/assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 229, "deletions": 38, "changes": 267, "blob_url": "https://github.com/rust-lang/rust/blob/128eef779f572a8120cb475d86a373ac4c9e5559/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128eef779f572a8120cb475d86a373ac4c9e5559/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=128eef779f572a8120cb475d86a373ac4c9e5559", "patch": "@@ -4,7 +4,7 @@ use ide_db::{\n     defs::{classify_name_ref, Definition, NameRefClass},\n     RootDatabase,\n };\n-use syntax::{algo, ast, match_ast, AstNode, SyntaxNode, SyntaxToken, T};\n+use syntax::{ast, AstNode, SyntaxToken, T};\n \n use crate::{\n     assist_context::{AssistBuilder, AssistContext, Assists},\n@@ -38,7 +38,7 @@ use crate::{\n // ```\n pub(crate) fn expand_glob_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let star = ctx.find_token_at_offset(T![*])?;\n-    let mod_path = find_mod_path(&star)?;\n+    let (parent, mod_path) = find_parent_and_path(&star)?;\n     let module = match ctx.sema.resolve_path(&mod_path)? {\n         PathResolution::Def(ModuleDef::Module(it)) => it,\n         _ => return None,\n@@ -52,19 +52,23 @@ pub(crate) fn expand_glob_import(acc: &mut Assists, ctx: &AssistContext) -> Opti\n         source_file.syntax().descendants().filter_map(ast::NameRef::cast).collect();\n     let used_names = find_used_names(ctx, defs_in_mod, name_refs_in_source_file);\n \n-    let parent = star.parent().parent()?;\n+    let target = parent.syntax();\n     acc.add(\n         AssistId(\"expand_glob_import\", AssistKind::RefactorRewrite),\n         \"Expand glob import\",\n-        parent.text_range(),\n+        target.text_range(),\n         |builder| {\n-            replace_ast(builder, &parent, mod_path, used_names);\n+            replace_ast(builder, parent, mod_path, used_names);\n         },\n     )\n }\n \n-fn find_mod_path(star: &SyntaxToken) -> Option<ast::Path> {\n-    star.ancestors().find_map(|n| ast::UseTree::cast(n).and_then(|u| u.path()))\n+fn find_parent_and_path(star: &SyntaxToken) -> Option<(ast::UseTree, ast::Path)> {\n+    star.ancestors().find_map(|n| {\n+        let use_tree = ast::UseTree::cast(n)?;\n+        let path = use_tree.path()?;\n+        Some((use_tree, path))\n+    })\n }\n \n #[derive(PartialEq)]\n@@ -137,41 +141,28 @@ fn find_used_names(\n \n fn replace_ast(\n     builder: &mut AssistBuilder,\n-    node: &SyntaxNode,\n+    parent: ast::UseTree,\n     path: ast::Path,\n     used_names: Vec<Name>,\n ) {\n-    let replacement: Either<ast::UseTree, ast::UseTreeList> = match used_names.as_slice() {\n-        [name] => Either::Left(ast::make::use_tree(\n+    let replacement = match used_names.as_slice() {\n+        [name] => ast::make::use_tree(\n             ast::make::path_from_text(&format!(\"{}::{}\", path, name)),\n             None,\n             None,\n             false,\n-        )),\n-        names => Either::Right(ast::make::use_tree_list(names.iter().map(|n| {\n-            ast::make::use_tree(ast::make::path_from_text(&n.to_string()), None, None, false)\n-        }))),\n-    };\n-\n-    let mut replace_node = |replacement: Either<ast::UseTree, ast::UseTreeList>| {\n-        algo::diff(node, &replacement.either(|u| u.syntax().clone(), |ut| ut.syntax().clone()))\n-            .into_text_edit(builder.text_edit_builder());\n+        ),\n+        names => ast::make::use_tree(\n+            path,\n+            Some(ast::make::use_tree_list(names.iter().map(|n| {\n+                ast::make::use_tree(ast::make::path_from_text(&n.to_string()), None, None, false)\n+            }))),\n+            None,\n+            false,\n+        ),\n     };\n \n-    match_ast! {\n-        match node {\n-            ast::UseTree(use_tree) => {\n-                replace_node(replacement);\n-            },\n-            ast::UseTreeList(use_tree_list) => {\n-                replace_node(replacement);\n-            },\n-            ast::Use(use_item) => {\n-                builder.replace_ast(use_item, ast::make::use_(replacement.left_or_else(|ut| ast::make::use_tree(path, Some(ut), None, false))));\n-            },\n-            _ => {},\n-        }\n-    }\n+    builder.replace_ast(parent, replacement);\n }\n \n #[cfg(test)]\n@@ -260,15 +251,15 @@ fn qux(bar: Bar, baz: Baz) {\n             expand_glob_import,\n             r\"\n mod foo {\n-    mod bar {\n+    pub mod bar {\n         pub struct Bar;\n         pub struct Baz;\n         pub struct Qux;\n \n         pub fn f() {}\n     }\n \n-    mod baz {\n+    pub mod baz {\n         pub fn g() {}\n     }\n }\n@@ -282,15 +273,15 @@ fn qux(bar: Bar, baz: Baz) {\n \",\n             r\"\n mod foo {\n-    mod bar {\n+    pub mod bar {\n         pub struct Bar;\n         pub struct Baz;\n         pub struct Qux;\n \n         pub fn f() {}\n     }\n \n-    mod baz {\n+    pub mod baz {\n         pub fn g() {}\n     }\n }\n@@ -302,7 +293,207 @@ fn qux(bar: Bar, baz: Baz) {\n     g();\n }\n \",\n-        )\n+        );\n+\n+        check_assist(\n+            expand_glob_import,\n+            r\"\n+mod foo {\n+    pub mod bar {\n+        pub struct Bar;\n+        pub struct Baz;\n+        pub struct Qux;\n+\n+        pub fn f() {}\n+    }\n+\n+    pub mod baz {\n+        pub fn g() {}\n+    }\n+}\n+\n+use foo::{bar::{Bar, Baz, f}, baz::*<|>};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+    g();\n+}\n+\",\n+            r\"\n+mod foo {\n+    pub mod bar {\n+        pub struct Bar;\n+        pub struct Baz;\n+        pub struct Qux;\n+\n+        pub fn f() {}\n+    }\n+\n+    pub mod baz {\n+        pub fn g() {}\n+    }\n+}\n+\n+use foo::{bar::{Bar, Baz, f}, baz::g};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+    g();\n+}\n+\",\n+        );\n+\n+        check_assist(\n+            expand_glob_import,\n+            r\"\n+mod foo {\n+    pub mod bar {\n+        pub struct Bar;\n+        pub struct Baz;\n+        pub struct Qux;\n+\n+        pub fn f() {}\n+    }\n+\n+    pub mod baz {\n+        pub fn g() {}\n+\n+        pub mod qux {\n+            pub fn h() {}\n+            pub fn m() {}\n+\n+            pub mod q {\n+                pub fn j() {}\n+            }\n+        }\n+    }\n+}\n+\n+use foo::{\n+    bar::{*, f},\n+    baz::{g, qux::*<|>}\n+};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+    g();\n+    h();\n+    q::j();\n+}\n+\",\n+            r\"\n+mod foo {\n+    pub mod bar {\n+        pub struct Bar;\n+        pub struct Baz;\n+        pub struct Qux;\n+\n+        pub fn f() {}\n+    }\n+\n+    pub mod baz {\n+        pub fn g() {}\n+\n+        pub mod qux {\n+            pub fn h() {}\n+            pub fn m() {}\n+\n+            pub mod q {\n+                pub fn j() {}\n+            }\n+        }\n+    }\n+}\n+\n+use foo::{\n+    bar::{*, f},\n+    baz::{g, qux::{q, h}}\n+};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+    g();\n+    h();\n+    q::j();\n+}\n+\",\n+        );\n+\n+        check_assist(\n+            expand_glob_import,\n+            r\"\n+mod foo {\n+    pub mod bar {\n+        pub struct Bar;\n+        pub struct Baz;\n+        pub struct Qux;\n+\n+        pub fn f() {}\n+    }\n+\n+    pub mod baz {\n+        pub fn g() {}\n+\n+        pub mod qux {\n+            pub fn h() {}\n+            pub fn m() {}\n+\n+            pub mod q {\n+                pub fn j() {}\n+            }\n+        }\n+    }\n+}\n+\n+use foo::{\n+    bar::{*, f},\n+    baz::{g, qux::{h, q::*<|>}}\n+};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+    g();\n+    h();\n+    j();\n+}\n+\",\n+            r\"\n+mod foo {\n+    pub mod bar {\n+        pub struct Bar;\n+        pub struct Baz;\n+        pub struct Qux;\n+\n+        pub fn f() {}\n+    }\n+\n+    pub mod baz {\n+        pub fn g() {}\n+\n+        pub mod qux {\n+            pub fn h() {}\n+            pub fn m() {}\n+\n+            pub mod q {\n+                pub fn j() {}\n+            }\n+        }\n+    }\n+}\n+\n+use foo::{\n+    bar::{*, f},\n+    baz::{g, qux::{h, q::j}}\n+};\n+\n+fn qux(bar: Bar, baz: Baz) {\n+    f();\n+    g();\n+    h();\n+    j();\n+}\n+\",\n+        );\n     }\n \n     #[test]"}]}