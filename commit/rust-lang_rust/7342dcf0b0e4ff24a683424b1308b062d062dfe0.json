{"sha": "7342dcf0b0e4ff24a683424b1308b062d062dfe0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNDJkY2YwYjBlNGZmMjRhNjgzNDI0YjEzMDhiMDYyZDA2MmRmZTA=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-18T14:30:09Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-20T11:50:06Z"}, "message": "Fix runnables not seeing test and bench attributes", "tree": {"sha": "c7b88840698cac5334d760b861348d35706b4e34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7b88840698cac5334d760b861348d35706b4e34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7342dcf0b0e4ff24a683424b1308b062d062dfe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7342dcf0b0e4ff24a683424b1308b062d062dfe0", "html_url": "https://github.com/rust-lang/rust/commit/7342dcf0b0e4ff24a683424b1308b062d062dfe0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7342dcf0b0e4ff24a683424b1308b062d062dfe0/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "351cec0cb41ab9eba9e4085ba49dc70a9542eadf", "url": "https://api.github.com/repos/rust-lang/rust/commits/351cec0cb41ab9eba9e4085ba49dc70a9542eadf", "html_url": "https://github.com/rust-lang/rust/commit/351cec0cb41ab9eba9e4085ba49dc70a9542eadf"}], "stats": {"total": 60, "additions": 42, "deletions": 18}, "files": [{"sha": "e806208e16d41331fbfc15248e87f4b681a84637", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7342dcf0b0e4ff24a683424b1308b062d062dfe0/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7342dcf0b0e4ff24a683424b1308b062d062dfe0/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=7342dcf0b0e4ff24a683424b1308b062d062dfe0", "patch": "@@ -54,18 +54,12 @@ impl TokenExpander {\n             TokenExpander::MacroDef { mac, .. } => mac.expand(tt),\n             TokenExpander::Builtin(it) => it.expand(db, id, tt),\n             // FIXME switch these to ExpandResult as well\n-            TokenExpander::BuiltinAttr(it) => {\n-                let macro_arg = match db.macro_arg(id) {\n-                    Some(it) => it,\n-                    None => {\n-                        return mbe::ExpandResult::only_err(\n-                            mbe::ExpandError::Other(\"No item argument for attribute\".to_string())\n-                                .into(),\n-                        );\n-                    }\n-                };\n-                it.expand(db, id, tt, &macro_arg.0).into()\n-            }\n+            TokenExpander::BuiltinAttr(it) => match db.macro_arg(id) {\n+                Some(macro_arg) => it.expand(db, id, tt, &macro_arg.0).into(),\n+                None => mbe::ExpandResult::only_err(\n+                    mbe::ExpandError::Other(\"No item argument for attribute\".to_string()).into(),\n+                ),\n+            },\n             TokenExpander::BuiltinDerive(it) => it.expand(db, id, tt).into(),\n             TokenExpander::ProcMacro(_) => {\n                 // We store the result in salsa db to prevent non-deterministic behavior in"}, {"sha": "c9165a0cf609200ad230e36865357461910b133b", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7342dcf0b0e4ff24a683424b1308b062d062dfe0/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7342dcf0b0e4ff24a683424b1308b062d062dfe0/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=7342dcf0b0e4ff24a683424b1308b062d062dfe0", "patch": "@@ -562,6 +562,28 @@ impl<N: AstNode> InFile<N> {\n     pub fn syntax(&self) -> InFile<&SyntaxNode> {\n         self.with_value(self.value.syntax())\n     }\n+\n+    pub fn nodes_with_attributes<'db>(\n+        self,\n+        db: &'db dyn db::AstDatabase,\n+    ) -> impl Iterator<Item = InFile<N>> + 'db\n+    where\n+        N: 'db,\n+    {\n+        std::iter::successors(Some(self), move |node| {\n+            let InFile { file_id, value } = node.file_id.call_node(db)?;\n+            N::cast(value).map(|n| InFile::new(file_id, n))\n+        })\n+    }\n+\n+    pub fn node_with_attributes(self, db: &dyn db::AstDatabase) -> InFile<N> {\n+        std::iter::successors(Some(self), move |node| {\n+            let InFile { file_id, value } = node.file_id.call_node(db)?;\n+            N::cast(value).map(|n| InFile::new(file_id, n))\n+        })\n+        .last()\n+        .unwrap()\n+    }\n }\n \n /// Given a `MacroCallId`, return what `FragmentKind` it belongs to."}, {"sha": "ed220c9080c9c925c6e4571a2d5af12c6c24c28d", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7342dcf0b0e4ff24a683424b1308b062d062dfe0/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7342dcf0b0e4ff24a683424b1308b062d062dfe0/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=7342dcf0b0e4ff24a683424b1308b062d062dfe0", "patch": "@@ -232,22 +232,27 @@ fn find_related_tests(\n             let functions = refs.iter().filter_map(|(range, _)| {\n                 let token = file.token_at_offset(range.start()).next()?;\n                 let token = sema.descend_into_macros(token);\n-                token.ancestors().find_map(ast::Fn::cast)\n+                // FIXME: This is the wrong file_id\n+                token\n+                    .ancestors()\n+                    .find_map(ast::Fn::cast)\n+                    .map(|f| hir::InFile::new(file_id.into(), f))\n             });\n \n             for fn_def in functions {\n-                if let Some(runnable) = as_test_runnable(sema, &fn_def) {\n+                // #[test/bench] expands to just the item causing us to lose the attribute, so recover them by going out of the attribute\n+                let fn_def = fn_def.node_with_attributes(sema.db);\n+                if let Some(runnable) = as_test_runnable(sema, &fn_def.value) {\n                     // direct test\n                     tests.insert(runnable);\n-                } else if let Some(module) = parent_test_module(sema, &fn_def) {\n+                } else if let Some(module) = parent_test_module(sema, &fn_def.value) {\n                     // indirect test\n-                    find_related_tests_in_module(sema, &fn_def, &module, tests);\n+                    find_related_tests_in_module(sema, &fn_def.value, &module, tests);\n                 }\n             }\n         }\n     }\n }\n-\n fn find_related_tests_in_module(\n     sema: &Semantics<RootDatabase>,\n     fn_def: &ast::Fn,\n@@ -292,7 +297,8 @@ fn parent_test_module(sema: &Semantics<RootDatabase>, fn_def: &ast::Fn) -> Optio\n }\n \n pub(crate) fn runnable_fn(sema: &Semantics<RootDatabase>, def: hir::Function) -> Option<Runnable> {\n-    let func = def.source(sema.db)?;\n+    // #[test/bench] expands to just the item causing us to lose the attribute, so recover them by going out of the attribute\n+    let func = def.source(sema.db)?.node_with_attributes(sema.db);\n     let name_string = def.name(sema.db).to_string();\n \n     let root = def.module(sema.db).krate().root_module(sema.db);\n@@ -499,6 +505,8 @@ fn has_test_function_or_multiple_test_submodules(\n         match item {\n             hir::ModuleDef::Function(f) => {\n                 if let Some(it) = f.source(sema.db) {\n+                    // #[test/bench] expands to just the item causing us to lose the attribute, so recover them by going out of the attribute\n+                    let it = it.node_with_attributes(sema.db);\n                     if test_related_attribute(&it.value).is_some() {\n                         return true;\n                     }"}]}