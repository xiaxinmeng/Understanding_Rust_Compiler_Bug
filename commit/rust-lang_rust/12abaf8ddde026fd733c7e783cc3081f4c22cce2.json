{"sha": "12abaf8ddde026fd733c7e783cc3081f4c22cce2", "node_id": "C_kwDOAAsO6NoAKDEyYWJhZjhkZGRlMDI2ZmQ3MzNjN2U3ODNjYzMwODFmNGMyMmNjZTI", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-08-17T16:30:04Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-08-17T22:05:41Z"}, "message": "fix: resolve associated types of bare dyn types", "tree": {"sha": "82fb6fa0f2bf91154e9fcc5ef620a3e2393e20d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82fb6fa0f2bf91154e9fcc5ef620a3e2393e20d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12abaf8ddde026fd733c7e783cc3081f4c22cce2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmL9ZjUACgkQ4laYqTBY\nYXGiTw//aRf+/BRpeR5NEu4xw+CW82lhg+MRAXsu+TM+T3z15pVS/+3jjt3RvN+y\nA7cQznDiDECFMdgNDuEVCwlI3RL5OmRceXMTDvmEOGGbaQXxN2Ayg/Xmze2NcQH8\nxin+wKcYukUDE8UnUKp9zgnZL3OnDQUg+6vFUQMnT7TIZzDktXzwzDSinLDICYXX\npE71W7WCt8R5hUmDsoI4xZfgxAa7RUa32mAN7C6R5XSK9pXoW5O65rRRqdBppzNK\nDTi/hop/3I3PkfMYsRBGNhr22/sSlnnAuv2Bxu69u6Il9nmzq+VVrPiSRa/pp+wb\n5bC7SkQBnYTt4D+32ErI98QNBzwvG/g05gW/pqeEFqm4V/JOCcTVrX6xdMV90nz5\nmsbb+RGBtj5OLLlhWPO+TKGnUOWym2Vjb+Yc4X/C87HyWeLsBBNQCzYyKabAWwnk\nbIef4193ndWRlGKMm02ySyGb7YiN//hP1sJw3Nh3n4R0Rj7JPJfFvT67+yVJiiZY\nfv7x0pq0v9DDIv+boajY/fsayMiDpCSRvivyQr9xJzT/gHYSIehIUJZejPPG1DAZ\nX77xHNsi+YPnISch3WuM+a9LO3SNjnZwVsfTdwBHlsQ3GuOa1qHKGoO/24OzoDRV\nvE1/gW1PBNfJqQ9FcW2oAFd2NamzmYmdLx7Y67a2dACl07zllCg=\n=8f0G\n-----END PGP SIGNATURE-----", "payload": "tree 82fb6fa0f2bf91154e9fcc5ef620a3e2393e20d0\nparent d6412b58666ee399bdc56a868a79ed322d6a3fcd\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1660753804 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1660773941 +0900\n\nfix: resolve associated types of bare dyn types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12abaf8ddde026fd733c7e783cc3081f4c22cce2", "html_url": "https://github.com/rust-lang/rust/commit/12abaf8ddde026fd733c7e783cc3081f4c22cce2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12abaf8ddde026fd733c7e783cc3081f4c22cce2/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6412b58666ee399bdc56a868a79ed322d6a3fcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6412b58666ee399bdc56a868a79ed322d6a3fcd", "html_url": "https://github.com/rust-lang/rust/commit/d6412b58666ee399bdc56a868a79ed322d6a3fcd"}], "stats": {"total": 89, "additions": 54, "deletions": 35}, "files": [{"sha": "ae115c8c0da85ad7afa7a84dd4fbee7fbd01cc47", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 26, "deletions": 35, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/12abaf8ddde026fd733c7e783cc3081f4c22cce2/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12abaf8ddde026fd733c7e783cc3081f4c22cce2/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=12abaf8ddde026fd733c7e783cc3081f4c22cce2", "patch": "@@ -238,18 +238,7 @@ impl<'a> TyLoweringContext<'a> {\n                 })\n                 .intern(Interner)\n             }\n-            TypeRef::DynTrait(bounds) => {\n-                let self_ty =\n-                    TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0)).intern(Interner);\n-                let bounds = self.with_shifted_in(DebruijnIndex::ONE, |ctx| {\n-                    QuantifiedWhereClauses::from_iter(\n-                        Interner,\n-                        bounds.iter().flat_map(|b| ctx.lower_type_bound(b, self_ty.clone(), false)),\n-                    )\n-                });\n-                let bounds = crate::make_single_type_binders(bounds);\n-                TyKind::Dyn(DynTy { bounds, lifetime: static_lifetime() }).intern(Interner)\n-            }\n+            TypeRef::DynTrait(bounds) => self.lower_dyn_trait(bounds),\n             TypeRef::ImplTrait(bounds) => {\n                 match self.impl_trait_mode {\n                     ImplTraitLoweringMode::Opaque => {\n@@ -468,29 +457,10 @@ impl<'a> TyLoweringContext<'a> {\n                         }\n                     }\n                     0 => {\n-                        let self_ty = Some(\n-                            TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0))\n-                                .intern(Interner),\n-                        );\n-                        let trait_ref = self.with_shifted_in(DebruijnIndex::ONE, |ctx| {\n-                            ctx.lower_trait_ref_from_resolved_path(\n-                                trait_,\n-                                resolved_segment,\n-                                self_ty,\n-                            )\n-                        });\n-                        let dyn_ty = DynTy {\n-                            bounds: crate::make_single_type_binders(\n-                                QuantifiedWhereClauses::from_iter(\n-                                    Interner,\n-                                    Some(crate::wrap_empty_binders(WhereClause::Implemented(\n-                                        trait_ref,\n-                                    ))),\n-                                ),\n-                            ),\n-                            lifetime: static_lifetime(),\n-                        };\n-                        TyKind::Dyn(dyn_ty).intern(Interner)\n+                        // Trait object type without dyn; this should be handled in upstream. See\n+                        // `lower_path()`.\n+                        stdx::never!(\"unexpected fully resolved trait path\");\n+                        TyKind::Error.intern(Interner)\n                     }\n                     _ => {\n                         // FIXME report error (ambiguous associated type)\n@@ -555,11 +525,20 @@ impl<'a> TyLoweringContext<'a> {\n             let (ty, res) = self.lower_ty_ext(type_ref);\n             return self.lower_ty_relative_path(ty, res, path.segments());\n         }\n+\n         let (resolution, remaining_index) =\n             match self.resolver.resolve_path_in_type_ns(self.db.upcast(), path.mod_path()) {\n                 Some(it) => it,\n                 None => return (TyKind::Error.intern(Interner), None),\n             };\n+\n+        if matches!(resolution, TypeNs::TraitId(_)) && remaining_index.is_none() {\n+            // trait object type without dyn\n+            let bound = TypeBound::Path(path.clone(), TraitBoundModifier::None);\n+            let ty = self.lower_dyn_trait(&[Interned::new(bound)]);\n+            return (ty, None);\n+        }\n+\n         let (resolved_segment, remaining_segments) = match remaining_index {\n             None => (\n                 path.segments().last().expect(\"resolved path has at least one element\"),\n@@ -987,6 +966,18 @@ impl<'a> TyLoweringContext<'a> {\n             })\n     }\n \n+    fn lower_dyn_trait(&self, bounds: &[Interned<TypeBound>]) -> Ty {\n+        let self_ty = TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0)).intern(Interner);\n+        let bounds = self.with_shifted_in(DebruijnIndex::ONE, |ctx| {\n+            QuantifiedWhereClauses::from_iter(\n+                Interner,\n+                bounds.iter().flat_map(|b| ctx.lower_type_bound(b, self_ty.clone(), false)),\n+            )\n+        });\n+        let bounds = crate::make_single_type_binders(bounds);\n+        TyKind::Dyn(DynTy { bounds, lifetime: static_lifetime() }).intern(Interner)\n+    }\n+\n     fn lower_impl_trait(\n         &self,\n         bounds: &[Interned<TypeBound>],"}, {"sha": "c128a051f72bcdf00f17b949b09c0fd1a738b63c", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/12abaf8ddde026fd733c7e783cc3081f4c22cce2/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12abaf8ddde026fd733c7e783cc3081f4c22cce2/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=12abaf8ddde026fd733c7e783cc3081f4c22cce2", "patch": "@@ -1476,6 +1476,34 @@ fn test(x: Trait, y: &Trait) -> u64 {\n             165..172 'z.foo()': u64\n         \"#]],\n     );\n+\n+    check_infer_with_mismatches(\n+        r#\"\n+//- minicore: fn, coerce_unsized\n+struct S;\n+impl S {\n+    fn foo(&self) {}\n+}\n+fn f(_: &Fn(S)) {}\n+fn main() {\n+    f(&|number| number.foo());\n+}\n+        \"#,\n+        expect![[r#\"\n+            31..35 'self': &S\n+            37..39 '{}': ()\n+            47..48 '_': &dyn Fn(S)\n+            58..60 '{}': ()\n+            71..105 '{     ...()); }': ()\n+            77..78 'f': fn f(&dyn Fn(S))\n+            77..102 'f(&|nu...foo())': ()\n+            79..101 '&|numb....foo()': &|S| -> ()\n+            80..101 '|numbe....foo()': |S| -> ()\n+            81..87 'number': S\n+            89..95 'number': S\n+            89..101 'number.foo()': ()\n+        \"#]],\n+    )\n }\n \n #[test]"}]}