{"sha": "c97f11af7bc4a6d3578f6a953be04ab2449a5728", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5N2YxMWFmN2JjNGE2ZDM1NzhmNmE5NTNiZTA0YWIyNDQ5YTU3Mjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-10T20:48:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-10T20:48:27Z"}, "message": "Auto merge of #79414 - sasurau4:feature/add-suggestion-for-pattern-in-fns-without-body, r=matthewjasper\n\nAdd suggestion for PATTERNS_IN_FNS_WITHOUT_BODY\n\n## Overview\n\nFix #78927", "tree": {"sha": "b2807aa8e47b4bba69c429b98d637354f4ea1293", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2807aa8e47b4bba69c429b98d637354f4ea1293"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c97f11af7bc4a6d3578f6a953be04ab2449a5728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c97f11af7bc4a6d3578f6a953be04ab2449a5728", "html_url": "https://github.com/rust-lang/rust/commit/c97f11af7bc4a6d3578f6a953be04ab2449a5728", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c97f11af7bc4a6d3578f6a953be04ab2449a5728/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "080ee6f5d7e262b1c5fd51a0bdac62b62d0ee546", "url": "https://api.github.com/repos/rust-lang/rust/commits/080ee6f5d7e262b1c5fd51a0bdac62b62d0ee546", "html_url": "https://github.com/rust-lang/rust/commit/080ee6f5d7e262b1c5fd51a0bdac62b62d0ee546"}, {"sha": "e97b97ebcd778337e7ae6afb6868ca4c2f6ebbb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e97b97ebcd778337e7ae6afb6868ca4c2f6ebbb3", "html_url": "https://github.com/rust-lang/rust/commit/e97b97ebcd778337e7ae6afb6868ca4c2f6ebbb3"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "baeadb216dc3a6440a5ff752648e42bebbe78ddb", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c97f11af7bc4a6d3578f6a953be04ab2449a5728/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97f11af7bc4a6d3578f6a953be04ab2449a5728/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=c97f11af7bc4a6d3578f6a953be04ab2449a5728", "patch": "@@ -16,7 +16,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{error_code, pluralize, struct_span_err, Applicability};\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY;\n-use rustc_session::lint::LintBuffer;\n+use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::Session;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n@@ -213,14 +213,14 @@ impl<'a> AstValidator<'a> {\n         err.emit();\n     }\n \n-    fn check_decl_no_pat(decl: &FnDecl, mut report_err: impl FnMut(Span, bool)) {\n+    fn check_decl_no_pat(decl: &FnDecl, mut report_err: impl FnMut(Span, Option<Ident>, bool)) {\n         for Param { pat, .. } in &decl.inputs {\n             match pat.kind {\n                 PatKind::Ident(BindingMode::ByValue(Mutability::Not), _, None) | PatKind::Wild => {}\n-                PatKind::Ident(BindingMode::ByValue(Mutability::Mut), _, None) => {\n-                    report_err(pat.span, true)\n+                PatKind::Ident(BindingMode::ByValue(Mutability::Mut), ident, None) => {\n+                    report_err(pat.span, Some(ident), true)\n                 }\n-                _ => report_err(pat.span, false),\n+                _ => report_err(pat.span, None, false),\n             }\n         }\n     }\n@@ -834,7 +834,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         match ty.kind {\n             TyKind::BareFn(ref bfty) => {\n                 self.check_fn_decl(&bfty.decl, SelfSemantic::No);\n-                Self::check_decl_no_pat(&bfty.decl, |span, _| {\n+                Self::check_decl_no_pat(&bfty.decl, |span, _, _| {\n                     struct_span_err!(\n                         self.session,\n                         span,\n@@ -1289,7 +1289,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n         // Functions without bodies cannot have patterns.\n         if let FnKind::Fn(ctxt, _, sig, _, None) = fk {\n-            Self::check_decl_no_pat(&sig.decl, |span, mut_ident| {\n+            Self::check_decl_no_pat(&sig.decl, |span, ident, mut_ident| {\n                 let (code, msg, label) = match ctxt {\n                     FnCtxt::Foreign => (\n                         error_code!(E0130),\n@@ -1303,7 +1303,16 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     ),\n                 };\n                 if mut_ident && matches!(ctxt, FnCtxt::Assoc(_)) {\n-                    self.lint_buffer.buffer_lint(PATTERNS_IN_FNS_WITHOUT_BODY, id, span, msg);\n+                    if let Some(ident) = ident {\n+                        let diag = BuiltinLintDiagnostics::PatternsInFnsWithoutBody(span, ident);\n+                        self.lint_buffer.buffer_lint_with_diagnostic(\n+                            PATTERNS_IN_FNS_WITHOUT_BODY,\n+                            id,\n+                            span,\n+                            msg,\n+                            diag,\n+                        )\n+                    }\n                 } else {\n                     self.err_handler()\n                         .struct_span_err(span, msg)"}, {"sha": "f4740be34cb087569ccbb1346d27e777f5065e00", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c97f11af7bc4a6d3578f6a953be04ab2449a5728/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97f11af7bc4a6d3578f6a953be04ab2449a5728/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=c97f11af7bc4a6d3578f6a953be04ab2449a5728", "patch": "@@ -597,6 +597,9 @@ pub trait LintContext: Sized {\n                     db.help(\"to document an item produced by a macro, \\\n                                   the macro must produce the documentation as part of its expansion\");\n                 }\n+                BuiltinLintDiagnostics::PatternsInFnsWithoutBody(span, ident) => {\n+                    db.span_suggestion(span, \"remove `mut` from the parameter\", ident.to_string(), Applicability::MachineApplicable);\n+                }\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(LintDiagnosticBuilder::new(db));"}, {"sha": "2bfc6a8557691b54edc0488b915774bbc3a8fe76", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c97f11af7bc4a6d3578f6a953be04ab2449a5728/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97f11af7bc4a6d3578f6a953be04ab2449a5728/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=c97f11af7bc4a6d3578f6a953be04ab2449a5728", "patch": "@@ -253,6 +253,7 @@ pub enum BuiltinLintDiagnostics {\n     RedundantImport(Vec<(Span, bool)>, Ident),\n     DeprecatedMacro(Option<Symbol>, Span),\n     UnusedDocComment(Span),\n+    PatternsInFnsWithoutBody(Span, Ident),\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "98932349a7902a8a79a3a9164c9d21f886b0f105", "filename": "src/test/ui/no-patterns-in-args-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97f11af7bc4a6d3578f6a953be04ab2449a5728/src%2Ftest%2Fui%2Fno-patterns-in-args-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c97f11af7bc4a6d3578f6a953be04ab2449a5728/src%2Ftest%2Fui%2Fno-patterns-in-args-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-patterns-in-args-2.stderr?ref=c97f11af7bc4a6d3578f6a953be04ab2449a5728", "patch": "@@ -8,7 +8,7 @@ error: patterns aren't allowed in functions without bodies\n   --> $DIR/no-patterns-in-args-2.rs:4:11\n    |\n LL |     fn f1(mut arg: u8);\n-   |           ^^^^^^^\n+   |           ^^^^^^^ help: remove `mut` from the parameter: `arg`\n    |\n note: the lint level is defined here\n   --> $DIR/no-patterns-in-args-2.rs:1:9"}]}