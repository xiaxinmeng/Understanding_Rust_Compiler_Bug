{"sha": "8f504dc87384b0fa41a55327566f0db9c08eb98c", "node_id": "C_kwDOAAsO6NoAKDhmNTA0ZGM4NzM4NGIwZmE0MWE1NTMyNzU2NmYwZGI5YzA4ZWI5OGM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-05T11:31:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-05T11:31:29Z"}, "message": "Merge #11598\n\n11598: feat: Parse destructuring assignment r=Veykril a=ChayimFriedman2\n\nPart of #11532.\r\n\r\nLowering is not as easy and may not even be feasible right now as it requires generating identifiers: `(a, b) = (b, a)` is desugared into\r\n```rust\r\n{\r\n    let (<gensym_a>, <gensym_b>) = (b, a);\r\n    a = <gensym_a>;\r\n    b = <gensym_b>;\r\n}\r\n```\r\n\r\nrustc uses hygiene to implement that, but we don't support hygiene yet.\r\n\r\nHowever, I think parsing was the main problem as lowering will just affect type inference, and while `{unknown}` is not nice it's much better than a syntax error.\r\n\r\nI'm still looking for the best way to do lowering, though.\r\n\r\nFixes #11454.\n\nCo-authored-by: Chayim Refael Friedman <chayimfr@gmail.com>", "tree": {"sha": "4a2d8a06d385c45f17b4b40afe217ea125d137f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a2d8a06d385c45f17b4b40afe217ea125d137f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f504dc87384b0fa41a55327566f0db9c08eb98c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiI0oRCRBK7hj4Ov3rIwAAD6EIABOWTQuYbfHV+VUIxb0G3iw0\nh0Ci85I4BZgLL8xIWWAAHIhvfkBn7udkdViNLdleqkbJkK34N+hdI5pvYHqkzwts\nPKqCP4JUQ8YPy9470PNFW+0kMyhK7akwkKYgb3FRasCEynZs2MYd5JYIGaJ6rQ/i\nk+g8ZvbMiAVEVUFGYL8IXXwq+IAsxwBYg41x38VDCQv4d5JSf7KZq4UEYKz1RWiD\nY2NPWd23W5tjAcFImEzUal9w2xWY3rrAd017vBxMACfnJoCQCocw7vtq2x06D9Bz\nGsfHxPMquA/1xnT824ShXMD1VLNSpq1VNN75ALV1i3C60aOFtK4GoQledjIlBUo=\n=FNuj\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a2d8a06d385c45f17b4b40afe217ea125d137f7\nparent e844b1570a4ddf2ece7ed7c092eaa136ce1d3878\nparent 10d30be331a2975e89bdc5e45ec941bb00eb36ae\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1646479889 +0000\ncommitter GitHub <noreply@github.com> 1646479889 +0000\n\nMerge #11598\n\n11598: feat: Parse destructuring assignment r=Veykril a=ChayimFriedman2\n\nPart of #11532.\r\n\r\nLowering is not as easy and may not even be feasible right now as it requires generating identifiers: `(a, b) = (b, a)` is desugared into\r\n```rust\r\n{\r\n    let (<gensym_a>, <gensym_b>) = (b, a);\r\n    a = <gensym_a>;\r\n    b = <gensym_b>;\r\n}\r\n```\r\n\r\nrustc uses hygiene to implement that, but we don't support hygiene yet.\r\n\r\nHowever, I think parsing was the main problem as lowering will just affect type inference, and while `{unknown}` is not nice it's much better than a syntax error.\r\n\r\nI'm still looking for the best way to do lowering, though.\r\n\r\nFixes #11454.\n\nCo-authored-by: Chayim Refael Friedman <chayimfr@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f504dc87384b0fa41a55327566f0db9c08eb98c", "html_url": "https://github.com/rust-lang/rust/commit/8f504dc87384b0fa41a55327566f0db9c08eb98c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f504dc87384b0fa41a55327566f0db9c08eb98c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e844b1570a4ddf2ece7ed7c092eaa136ce1d3878", "url": "https://api.github.com/repos/rust-lang/rust/commits/e844b1570a4ddf2ece7ed7c092eaa136ce1d3878", "html_url": "https://github.com/rust-lang/rust/commit/e844b1570a4ddf2ece7ed7c092eaa136ce1d3878"}, {"sha": "10d30be331a2975e89bdc5e45ec941bb00eb36ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/10d30be331a2975e89bdc5e45ec941bb00eb36ae", "html_url": "https://github.com/rust-lang/rust/commit/10d30be331a2975e89bdc5e45ec941bb00eb36ae"}], "stats": {"total": 803, "additions": 582, "deletions": 221}, "files": [{"sha": "9cc5a73c9669b97159ba5acd199e7adcf1148deb", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f504dc87384b0fa41a55327566f0db9c08eb98c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8f504dc87384b0fa41a55327566f0db9c08eb98c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8f504dc87384b0fa41a55327566f0db9c08eb98c", "patch": "@@ -1833,9 +1833,9 @@ checksum = \"0685c84d5d54d1c26f7d3eb96cd41550adb97baed141a761cf335d3d33bcd0ae\"\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.15.0\"\n+version = \"1.16.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ed01567101450f7d600508e7680df6005ae4fe97119d79b0364cc5910ff39732\"\n+checksum = \"a62374cbbda72c1459ce5e7bfcdf1bd284c812a4faf2324aa083e5d9ea87880f\"\n \n [[package]]\n name = \"unicase\""}, {"sha": "f86f4f3c85b0de3c80995638a02d85da0cdf8877", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=8f504dc87384b0fa41a55327566f0db9c08eb98c", "patch": "@@ -525,6 +525,7 @@ impl ExprCollector<'_> {\n \n                 self.alloc_expr(Expr::MacroStmts { tail }, syntax_ptr)\n             }\n+            ast::Expr::UnderscoreExpr(_) => return None,\n         })\n     }\n "}, {"sha": "880617dd38d22d452f24aebe95239763c28d2f63", "filename": "crates/ide_assists/src/handlers/extract_module.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=8f504dc87384b0fa41a55327566f0db9c08eb98c", "patch": "@@ -179,7 +179,7 @@ impl Module {\n         //Here impl is not included as each item inside impl will be tied to the parent of\n         //implementing block(a struct, enum, etc), if the parent is in selected module, it will\n         //get updated by ADT section given below or if it is not, then we dont need to do any operation\n-        self.body_items.clone().into_iter().for_each(|item| {\n+        self.body_items.iter().cloned().for_each(|item| {\n             match_ast! {\n                 match (item.syntax()) {\n                     ast::Adt(it) => {\n@@ -240,6 +240,11 @@ impl Module {\n                             self.expand_and_group_usages_file_wise(ctx, node_def, &mut refs);\n                         }\n                     },\n+                    ast::Macro(it) => {\n+                        if let Some(nod) = ctx.sema.to_def(&it) {\n+                            self.expand_and_group_usages_file_wise(ctx, Definition::Macro(nod), &mut refs);\n+                        }\n+                    },\n                     _ => (),\n                 }\n             }\n@@ -781,7 +786,6 @@ fn get_replacements_for_visibilty_change(\n             ast::Item::Fn(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             //Associated item's visibility should not be changed\n             ast::Item::Impl(it) if it.for_token().is_none() => impls.push(it),\n-            ast::Item::MacroRules(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             ast::Item::MacroDef(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             ast::Item::Module(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             ast::Item::Static(it) => replacements.push((it.visibility(), it.syntax().clone())),\n@@ -1376,6 +1380,27 @@ mod modname {\n         )\n     }\n \n+    #[test]\n+    fn test_extract_module_macro_rules() {\n+        check_assist(\n+            extract_module,\n+            r\"\n+$0macro_rules! m {\n+    () => {};\n+}$0\n+m! {}\n+            \",\n+            r\"\n+mod modname {\n+    macro_rules! m {\n+        () => {};\n+    }\n+}\n+modname::m! {}\n+            \",\n+        );\n+    }\n+\n     #[test]\n     fn test_do_not_apply_visibility_modifier_to_trait_impl_items() {\n         check_assist("}, {"sha": "4a14a7f849b8a4ac3712945f32eeff8f34dd8dc0", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=8f504dc87384b0fa41a55327566f0db9c08eb98c", "patch": "@@ -187,6 +187,7 @@ pub fn for_each_tail_expr(expr: &ast::Expr, cb: &mut dyn FnMut(&ast::Expr)) {\n         | ast::Expr::TupleExpr(_)\n         | ast::Expr::WhileExpr(_)\n         | ast::Expr::LetExpr(_)\n+        | ast::Expr::UnderscoreExpr(_)\n         | ast::Expr::YieldExpr(_) => cb(expr),\n     }\n }"}, {"sha": "aefb3d059ff319c55b49515fca24de94031c1d3c", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=8f504dc87384b0fa41a55327566f0db9c08eb98c", "patch": "@@ -690,9 +690,19 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragmen\n         \"item\" => parser::PrefixEntryPoint::Item,\n         \"vis\" => parser::PrefixEntryPoint::Vis,\n         \"expr\" => {\n+            // `expr` should not match underscores.\n+            // HACK: Macro expansion should not be done using \"rollback and try another alternative\".\n+            // rustc [explicitly checks the next token][0].\n+            // [0]: https://github.com/rust-lang/rust/blob/f0c4da499/compiler/rustc_expand/src/mbe/macro_parser.rs#L576\n+            match input.peek_n(0) {\n+                Some(tt::TokenTree::Leaf(tt::Leaf::Ident(it))) if it.text == \"_\" => {\n+                    return ExpandResult::only_err(ExpandError::NoMatchingRule)\n+                }\n+                _ => {}\n+            };\n             return input\n                 .expect_fragment(parser::PrefixEntryPoint::Expr)\n-                .map(|tt| tt.map(Fragment::Expr))\n+                .map(|tt| tt.map(Fragment::Expr));\n         }\n         _ => {\n             let tt_result = match kind {"}, {"sha": "5d652fb8dc87d6a926c7f759b8efcafe69ebf6be", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=8f504dc87384b0fa41a55327566f0db9c08eb98c", "patch": "@@ -593,7 +593,16 @@ pub(crate) fn record_expr_field_list(p: &mut Parser) {\n             T![.] if p.at(T![..]) => {\n                 m.abandon(p);\n                 p.bump(T![..]);\n-                expr(p);\n+\n+                // test destructuring_assignment_struct_rest_pattern\n+                // fn foo() {\n+                //     S { .. } = S {};\n+                // }\n+\n+                // We permit `.. }` on the left-hand side of a destructuring assignment.\n+                if !p.at(T!['}']) {\n+                    expr(p);\n+                }\n             }\n             T!['{'] => {\n                 error_block(p, \"expected a field\");"}, {"sha": "e5f8e8199e1a73803fa504b79ace0eeff78f63a8", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=8f504dc87384b0fa41a55327566f0db9c08eb98c", "patch": "@@ -81,6 +81,17 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n         T![if] => if_expr(p),\n         T![let] => let_expr(p),\n \n+        T![_] => {\n+            // test destructuring_assignment_wildcard_pat\n+            // fn foo() {\n+            //     _ = 1;\n+            //     Some(_) = None;\n+            // }\n+            let m = p.start();\n+            p.bump(T![_]);\n+            m.complete(p, UNDERSCORE_EXPR)\n+        }\n+\n         T![loop] => loop_expr(p, None),\n         T![box] => box_expr(p, None),\n         T![for] => for_expr(p, None),"}, {"sha": "4e8a0cfe80ae3e622f4c99864567d28091a785b4", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=8f504dc87384b0fa41a55327566f0db9c08eb98c", "patch": "@@ -188,6 +188,7 @@ pub enum SyntaxKind {\n     RETURN_EXPR,\n     YIELD_EXPR,\n     LET_EXPR,\n+    UNDERSCORE_EXPR,\n     MATCH_EXPR,\n     MATCH_ARM_LIST,\n     MATCH_ARM,"}, {"sha": "b48b4aed8ddf994c3c5a1e4f90f2d5dcc98ec534", "filename": "crates/parser/test_data/parser/err/0025_nope.rast", "status": "removed", "additions": 0, "deletions": 204, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/e844b1570a4ddf2ece7ed7c092eaa136ce1d3878/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e844b1570a4ddf2ece7ed7c092eaa136ce1d3878/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast?ref=e844b1570a4ddf2ece7ed7c092eaa136ce1d3878", "patch": "@@ -1,204 +0,0 @@\n-SOURCE_FILE@0..575\n-  FN@0..574\n-    FN_KW@0..2 \"fn\"\n-    WHITESPACE@2..3 \" \"\n-    NAME@3..7\n-      IDENT@3..7 \"main\"\n-    PARAM_LIST@7..9\n-      L_PAREN@7..8 \"(\"\n-      R_PAREN@8..9 \")\"\n-    WHITESPACE@9..10 \" \"\n-    BLOCK_EXPR@10..574\n-      STMT_LIST@10..574\n-        L_CURLY@10..11 \"{\"\n-        WHITESPACE@11..16 \"\\n    \"\n-        ENUM@16..152\n-          ENUM_KW@16..20 \"enum\"\n-          WHITESPACE@20..21 \" \"\n-          NAME@21..25\n-            IDENT@21..25 \"Test\"\n-          WHITESPACE@25..26 \" \"\n-          VARIANT_LIST@26..152\n-            L_CURLY@26..27 \"{\"\n-            WHITESPACE@27..36 \"\\n        \"\n-            VARIANT@36..40\n-              NAME@36..40\n-                IDENT@36..40 \"Var1\"\n-            COMMA@40..41 \",\"\n-            WHITESPACE@41..50 \"\\n        \"\n-            VARIANT@50..62\n-              NAME@50..54\n-                IDENT@50..54 \"Var2\"\n-              TUPLE_FIELD_LIST@54..62\n-                L_PAREN@54..55 \"(\"\n-                TUPLE_FIELD@55..61\n-                  PATH_TYPE@55..61\n-                    PATH@55..61\n-                      PATH_SEGMENT@55..61\n-                        NAME_REF@55..61\n-                          IDENT@55..61 \"String\"\n-                R_PAREN@61..62 \")\"\n-            COMMA@62..63 \",\"\n-            WHITESPACE@63..72 \"\\n        \"\n-            VARIANT@72..145\n-              NAME@72..76\n-                IDENT@72..76 \"Var3\"\n-              WHITESPACE@76..77 \" \"\n-              RECORD_FIELD_LIST@77..145\n-                L_CURLY@77..78 \"{\"\n-                WHITESPACE@78..91 \"\\n            \"\n-                RECORD_FIELD@91..95\n-                  NAME@91..94\n-                    IDENT@91..94 \"abc\"\n-                  COLON@94..95 \":\"\n-                WHITESPACE@95..96 \" \"\n-                ERROR@96..98\n-                  L_CURLY@96..97 \"{\"\n-                  R_CURLY@97..98 \"}\"\n-                ERROR@98..99\n-                  COMMA@98..99 \",\"\n-                WHITESPACE@99..100 \" \"\n-                COMMENT@100..135 \"//~ ERROR: expected t ...\"\n-                WHITESPACE@135..144 \"\\n        \"\n-                R_CURLY@144..145 \"}\"\n-            COMMA@145..146 \",\"\n-            WHITESPACE@146..151 \"\\n    \"\n-            R_CURLY@151..152 \"}\"\n-        WHITESPACE@152..158 \"\\n\\n    \"\n-        COMMENT@158..171 \"// recover...\"\n-        WHITESPACE@171..176 \"\\n    \"\n-        LET_STMT@176..186\n-          LET_KW@176..179 \"let\"\n-          WHITESPACE@179..180 \" \"\n-          IDENT_PAT@180..181\n-            NAME@180..181\n-              IDENT@180..181 \"a\"\n-          WHITESPACE@181..182 \" \"\n-          EQ@182..183 \"=\"\n-          WHITESPACE@183..184 \" \"\n-          LITERAL@184..185\n-            INT_NUMBER@184..185 \"1\"\n-          SEMICOLON@185..186 \";\"\n-        WHITESPACE@186..191 \"\\n    \"\n-        ENUM@191..223\n-          ENUM_KW@191..195 \"enum\"\n-          WHITESPACE@195..196 \" \"\n-          NAME@196..201\n-            IDENT@196..201 \"Test2\"\n-          WHITESPACE@201..202 \" \"\n-          VARIANT_LIST@202..223\n-            L_CURLY@202..203 \"{\"\n-            WHITESPACE@203..212 \"\\n        \"\n-            VARIANT@212..216\n-              NAME@212..216\n-                IDENT@212..216 \"Fine\"\n-            COMMA@216..217 \",\"\n-            WHITESPACE@217..222 \"\\n    \"\n-            R_CURLY@222..223 \"}\"\n-        WHITESPACE@223..229 \"\\n\\n    \"\n-        ENUM@229..300\n-          ENUM_KW@229..233 \"enum\"\n-          WHITESPACE@233..234 \" \"\n-          NAME@234..239\n-            IDENT@234..239 \"Test3\"\n-          WHITESPACE@239..240 \" \"\n-          VARIANT_LIST@240..300\n-            L_CURLY@240..241 \"{\"\n-            WHITESPACE@241..250 \"\\n        \"\n-            VARIANT@250..293\n-              NAME@250..259\n-                IDENT@250..259 \"StillFine\"\n-              WHITESPACE@259..260 \" \"\n-              RECORD_FIELD_LIST@260..293\n-                L_CURLY@260..261 \"{\"\n-                WHITESPACE@261..274 \"\\n            \"\n-                RECORD_FIELD@274..282\n-                  NAME@274..277\n-                    IDENT@274..277 \"def\"\n-                  COLON@277..278 \":\"\n-                  WHITESPACE@278..279 \" \"\n-                  PATH_TYPE@279..282\n-                    PATH@279..282\n-                      PATH_SEGMENT@279..282\n-                        NAME_REF@279..282\n-                          IDENT@279..282 \"i32\"\n-                COMMA@282..283 \",\"\n-                WHITESPACE@283..292 \"\\n        \"\n-                R_CURLY@292..293 \"}\"\n-            COMMA@293..294 \",\"\n-            WHITESPACE@294..299 \"\\n    \"\n-            R_CURLY@299..300 \"}\"\n-        WHITESPACE@300..306 \"\\n\\n    \"\n-        EXPR_STMT@306..459\n-          BLOCK_EXPR@306..459\n-            STMT_LIST@306..459\n-              L_CURLY@306..307 \"{\"\n-              WHITESPACE@307..316 \"\\n        \"\n-              ENUM@316..453\n-                COMMENT@316..329 \"// fail again\"\n-                WHITESPACE@329..338 \"\\n        \"\n-                ENUM_KW@338..342 \"enum\"\n-                WHITESPACE@342..343 \" \"\n-                NAME@343..348\n-                  IDENT@343..348 \"Test4\"\n-                WHITESPACE@348..349 \" \"\n-                VARIANT_LIST@349..453\n-                  L_CURLY@349..350 \"{\"\n-                  WHITESPACE@350..363 \"\\n            \"\n-                  VARIANT@363..372\n-                    NAME@363..367\n-                      IDENT@363..367 \"Nope\"\n-                    TUPLE_FIELD_LIST@367..372\n-                      L_PAREN@367..368 \"(\"\n-                      TUPLE_FIELD@368..371\n-                        PATH_TYPE@368..371\n-                          PATH@368..371\n-                            PATH_SEGMENT@368..371\n-                              NAME_REF@368..371\n-                                IDENT@368..371 \"i32\"\n-                      WHITESPACE@371..372 \" \"\n-                      ERROR@372..372\n-                  ERROR@372..374\n-                    L_CURLY@372..373 \"{\"\n-                    R_CURLY@373..374 \"}\"\n-                  ERROR@374..375\n-                    R_PAREN@374..375 \")\"\n-                  WHITESPACE@375..376 \" \"\n-                  COMMENT@376..396 \"//~ ERROR: found `{`\"\n-                  WHITESPACE@396..422 \"\\n                     ...\"\n-                  COMMENT@422..443 \"//~^ ERROR: found `{`\"\n-                  WHITESPACE@443..452 \"\\n        \"\n-                  R_CURLY@452..453 \"}\"\n-              WHITESPACE@453..458 \"\\n    \"\n-              R_CURLY@458..459 \"}\"\n-        WHITESPACE@459..464 \"\\n    \"\n-        COMMENT@464..486 \"// still recover later\"\n-        WHITESPACE@486..491 \"\\n    \"\n-        LET_STMT@491..510\n-          LET_KW@491..494 \"let\"\n-          WHITESPACE@494..495 \" \"\n-          IDENT_PAT@495..505\n-            NAME@495..505\n-              IDENT@495..505 \"bad_syntax\"\n-          WHITESPACE@505..506 \" \"\n-          EQ@506..507 \"=\"\n-          WHITESPACE@507..508 \" \"\n-          ERROR@508..509\n-            UNDERSCORE@508..509 \"_\"\n-          SEMICOLON@509..510 \";\"\n-        WHITESPACE@510..511 \" \"\n-        COMMENT@511..572 \"//~ ERROR: expected e ...\"\n-        WHITESPACE@572..573 \"\\n\"\n-        R_CURLY@573..574 \"}\"\n-  WHITESPACE@574..575 \"\\n\"\n-error 95..95: expected type\n-error 95..95: expected COMMA\n-error 96..96: expected field\n-error 98..98: expected field declaration\n-error 371..371: expected COMMA\n-error 372..372: expected a type\n-error 372..372: expected R_PAREN\n-error 372..372: expected COMMA\n-error 372..372: expected enum variant\n-error 374..374: expected enum variant\n-error 508..508: expected expression"}, {"sha": "c78abe80ab7e109703cd3a126731b9e7242470e9", "filename": "crates/parser/test_data/parser/err/0025_nope.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rs?ref=8f504dc87384b0fa41a55327566f0db9c08eb98c", "patch": "@@ -27,5 +27,6 @@ fn main() {\n         }\n     }\n     // still recover later\n-    let bad_syntax = _; //~ ERROR: expected expression, found reserved identifier `_`\n+    let; //~ ERROR: expected pattern\n+    let _ = 0;\n }"}, {"sha": "6b49724ec9aa1f0b1e87b72f7f9f4bd349957544", "filename": "crates/parser/test_data/parser/err/0025_nope.txt", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0025_nope.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0025_nope.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0025_nope.txt?ref=8f504dc87384b0fa41a55327566f0db9c08eb98c", "patch": "@@ -174,20 +174,24 @@ SOURCE_FILE\n         WHITESPACE \"\\n    \"\n         COMMENT \"// still recover later\"\n         WHITESPACE \"\\n    \"\n+        LET_STMT\n+          LET_KW \"let\"\n+          ERROR\n+            SEMICOLON \";\"\n+        WHITESPACE \" \"\n+        COMMENT \"//~ ERROR: expected pattern\"\n+        WHITESPACE \"\\n    \"\n         LET_STMT\n           LET_KW \"let\"\n           WHITESPACE \" \"\n-          IDENT_PAT\n-            NAME\n-              IDENT \"bad_syntax\"\n+          WILDCARD_PAT\n+            UNDERSCORE \"_\"\n           WHITESPACE \" \"\n           EQ \"=\"\n           WHITESPACE \" \"\n-          ERROR\n-            UNDERSCORE \"_\"\n+          LITERAL\n+            INT_NUMBER \"0\"\n           SEMICOLON \";\"\n-        WHITESPACE \" \"\n-        COMMENT \"//~ ERROR: expected expression, found reserved identifier `_`\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\"\n@@ -201,4 +205,5 @@ error 372: expected R_PAREN\n error 372: expected COMMA\n error 372: expected enum variant\n error 374: expected enum variant\n-error 508: expected expression\n+error 494: expected pattern\n+error 495: expected SEMICOLON"}, {"sha": "22a5b5f3e31a02b7cacaa7d709c82dc81a1ae9ff", "filename": "crates/parser/test_data/parser/inline/ok/0197_destructuring_assignment_struct_rest_pattern.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0197_destructuring_assignment_struct_rest_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0197_destructuring_assignment_struct_rest_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0197_destructuring_assignment_struct_rest_pattern.rs?ref=8f504dc87384b0fa41a55327566f0db9c08eb98c", "patch": "@@ -0,0 +1,3 @@\n+fn foo() {\n+    S { .. } = S {};\n+}"}, {"sha": "fb8aa5accb5a7980b886b45185876bf48140fde9", "filename": "crates/parser/test_data/parser/inline/ok/0197_destructuring_assignment_struct_rest_pattern.txt", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0197_destructuring_assignment_struct_rest_pattern.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0197_destructuring_assignment_struct_rest_pattern.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0197_destructuring_assignment_struct_rest_pattern.txt?ref=8f504dc87384b0fa41a55327566f0db9c08eb98c", "patch": "@@ -0,0 +1,44 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"foo\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          BIN_EXPR\n+            RECORD_EXPR\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"S\"\n+              WHITESPACE \" \"\n+              RECORD_EXPR_FIELD_LIST\n+                L_CURLY \"{\"\n+                WHITESPACE \" \"\n+                DOT2 \"..\"\n+                WHITESPACE \" \"\n+                R_CURLY \"}\"\n+            WHITESPACE \" \"\n+            EQ \"=\"\n+            WHITESPACE \" \"\n+            RECORD_EXPR\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"S\"\n+              WHITESPACE \" \"\n+              RECORD_EXPR_FIELD_LIST\n+                L_CURLY \"{\"\n+                R_CURLY \"}\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n\"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\""}, {"sha": "91acfb3a0aedb02b01b9b72547eb6e480626fd31", "filename": "crates/parser/test_data/parser/inline/ok/0198_destructuring_assignment_wildcard_pat.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0198_destructuring_assignment_wildcard_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0198_destructuring_assignment_wildcard_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0198_destructuring_assignment_wildcard_pat.rs?ref=8f504dc87384b0fa41a55327566f0db9c08eb98c", "patch": "@@ -0,0 +1,4 @@\n+fn foo() {\n+    _ = 1;\n+    Some(_) = None;\n+}"}, {"sha": "5f53d34510e7262fe2f98fd5dec65747a257eac6", "filename": "crates/parser/test_data/parser/inline/ok/0198_destructuring_assignment_wildcard_pat.txt", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0198_destructuring_assignment_wildcard_pat.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0198_destructuring_assignment_wildcard_pat.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0198_destructuring_assignment_wildcard_pat.txt?ref=8f504dc87384b0fa41a55327566f0db9c08eb98c", "patch": "@@ -0,0 +1,50 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"foo\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          BIN_EXPR\n+            UNDERSCORE_EXPR\n+              UNDERSCORE \"_\"\n+            WHITESPACE \" \"\n+            EQ \"=\"\n+            WHITESPACE \" \"\n+            LITERAL\n+              INT_NUMBER \"1\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          BIN_EXPR\n+            CALL_EXPR\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"Some\"\n+              ARG_LIST\n+                L_PAREN \"(\"\n+                UNDERSCORE_EXPR\n+                  UNDERSCORE \"_\"\n+                R_PAREN \")\"\n+            WHITESPACE \" \"\n+            EQ \"=\"\n+            WHITESPACE \" \"\n+            PATH_EXPR\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"None\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n\"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\""}, {"sha": "9d3e86603f8810b7e182cc736a9449bcc15736a0", "filename": "crates/parser/test_data/parser/ok/0072_destructuring_assignment.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0072_destructuring_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0072_destructuring_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0072_destructuring_assignment.rs?ref=8f504dc87384b0fa41a55327566f0db9c08eb98c", "patch": "@@ -0,0 +1,14 @@\n+fn foo() {\n+    let (mut a, mut b) = (0, 1);\n+    (b, a, ..) = (a, b);\n+    (_) = ..;\n+    struct S { a: i32 }\n+    S { .. } = S { ..S::default() };\n+    Some(..) = Some(0).\n+    Ok(_) = 0;\n+    let (a, b);\n+    [a, .., b] = [1, .., 2];\n+    (_, _) = (a, b);\n+    (_) = (a, b);\n+    _ = (a, b);\n+}"}, {"sha": "e8b836dfbd09e0098e83f3980183bee9718e554a", "filename": "crates/parser/test_data/parser/ok/0072_destructuring_assignment.txt", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/rust-lang/rust/blob/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0072_destructuring_assignment.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0072_destructuring_assignment.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0072_destructuring_assignment.txt?ref=8f504dc87384b0fa41a55327566f0db9c08eb98c", "patch": "@@ -0,0 +1,352 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"foo\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \"\\n    \"\n+        LET_STMT\n+          LET_KW \"let\"\n+          WHITESPACE \" \"\n+          TUPLE_PAT\n+            L_PAREN \"(\"\n+            IDENT_PAT\n+              MUT_KW \"mut\"\n+              WHITESPACE \" \"\n+              NAME\n+                IDENT \"a\"\n+            COMMA \",\"\n+            WHITESPACE \" \"\n+            IDENT_PAT\n+              MUT_KW \"mut\"\n+              WHITESPACE \" \"\n+              NAME\n+                IDENT \"b\"\n+            R_PAREN \")\"\n+          WHITESPACE \" \"\n+          EQ \"=\"\n+          WHITESPACE \" \"\n+          TUPLE_EXPR\n+            L_PAREN \"(\"\n+            LITERAL\n+              INT_NUMBER \"0\"\n+            COMMA \",\"\n+            WHITESPACE \" \"\n+            LITERAL\n+              INT_NUMBER \"1\"\n+            R_PAREN \")\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          BIN_EXPR\n+            TUPLE_EXPR\n+              L_PAREN \"(\"\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"b\"\n+              COMMA \",\"\n+              WHITESPACE \" \"\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"a\"\n+              COMMA \",\"\n+              WHITESPACE \" \"\n+              RANGE_EXPR\n+                DOT2 \"..\"\n+              R_PAREN \")\"\n+            WHITESPACE \" \"\n+            EQ \"=\"\n+            WHITESPACE \" \"\n+            TUPLE_EXPR\n+              L_PAREN \"(\"\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"a\"\n+              COMMA \",\"\n+              WHITESPACE \" \"\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"b\"\n+              R_PAREN \")\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          BIN_EXPR\n+            PAREN_EXPR\n+              L_PAREN \"(\"\n+              UNDERSCORE_EXPR\n+                UNDERSCORE \"_\"\n+              R_PAREN \")\"\n+            WHITESPACE \" \"\n+            EQ \"=\"\n+            WHITESPACE \" \"\n+            RANGE_EXPR\n+              DOT2 \"..\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        STRUCT\n+          STRUCT_KW \"struct\"\n+          WHITESPACE \" \"\n+          NAME\n+            IDENT \"S\"\n+          WHITESPACE \" \"\n+          RECORD_FIELD_LIST\n+            L_CURLY \"{\"\n+            WHITESPACE \" \"\n+            RECORD_FIELD\n+              NAME\n+                IDENT \"a\"\n+              COLON \":\"\n+              WHITESPACE \" \"\n+              PATH_TYPE\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"i32\"\n+            WHITESPACE \" \"\n+            R_CURLY \"}\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          BIN_EXPR\n+            RECORD_EXPR\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"S\"\n+              WHITESPACE \" \"\n+              RECORD_EXPR_FIELD_LIST\n+                L_CURLY \"{\"\n+                WHITESPACE \" \"\n+                DOT2 \"..\"\n+                WHITESPACE \" \"\n+                R_CURLY \"}\"\n+            WHITESPACE \" \"\n+            EQ \"=\"\n+            WHITESPACE \" \"\n+            RECORD_EXPR\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"S\"\n+              WHITESPACE \" \"\n+              RECORD_EXPR_FIELD_LIST\n+                L_CURLY \"{\"\n+                WHITESPACE \" \"\n+                DOT2 \"..\"\n+                CALL_EXPR\n+                  PATH_EXPR\n+                    PATH\n+                      PATH\n+                        PATH_SEGMENT\n+                          NAME_REF\n+                            IDENT \"S\"\n+                      COLON2 \"::\"\n+                      PATH_SEGMENT\n+                        NAME_REF\n+                          IDENT \"default\"\n+                  ARG_LIST\n+                    L_PAREN \"(\"\n+                    R_PAREN \")\"\n+                WHITESPACE \" \"\n+                R_CURLY \"}\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          BIN_EXPR\n+            BIN_EXPR\n+              CALL_EXPR\n+                PATH_EXPR\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"Some\"\n+                ARG_LIST\n+                  L_PAREN \"(\"\n+                  RANGE_EXPR\n+                    DOT2 \"..\"\n+                  R_PAREN \")\"\n+              WHITESPACE \" \"\n+              EQ \"=\"\n+              WHITESPACE \" \"\n+              METHOD_CALL_EXPR\n+                CALL_EXPR\n+                  PATH_EXPR\n+                    PATH\n+                      PATH_SEGMENT\n+                        NAME_REF\n+                          IDENT \"Some\"\n+                  ARG_LIST\n+                    L_PAREN \"(\"\n+                    LITERAL\n+                      INT_NUMBER \"0\"\n+                    R_PAREN \")\"\n+                DOT \".\"\n+                WHITESPACE \"\\n    \"\n+                NAME_REF\n+                  IDENT \"Ok\"\n+                ARG_LIST\n+                  L_PAREN \"(\"\n+                  UNDERSCORE_EXPR\n+                    UNDERSCORE \"_\"\n+                  R_PAREN \")\"\n+            WHITESPACE \" \"\n+            EQ \"=\"\n+            WHITESPACE \" \"\n+            LITERAL\n+              INT_NUMBER \"0\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        LET_STMT\n+          LET_KW \"let\"\n+          WHITESPACE \" \"\n+          TUPLE_PAT\n+            L_PAREN \"(\"\n+            IDENT_PAT\n+              NAME\n+                IDENT \"a\"\n+            COMMA \",\"\n+            WHITESPACE \" \"\n+            IDENT_PAT\n+              NAME\n+                IDENT \"b\"\n+            R_PAREN \")\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          BIN_EXPR\n+            ARRAY_EXPR\n+              L_BRACK \"[\"\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"a\"\n+              COMMA \",\"\n+              WHITESPACE \" \"\n+              RANGE_EXPR\n+                DOT2 \"..\"\n+              COMMA \",\"\n+              WHITESPACE \" \"\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"b\"\n+              R_BRACK \"]\"\n+            WHITESPACE \" \"\n+            EQ \"=\"\n+            WHITESPACE \" \"\n+            ARRAY_EXPR\n+              L_BRACK \"[\"\n+              LITERAL\n+                INT_NUMBER \"1\"\n+              COMMA \",\"\n+              WHITESPACE \" \"\n+              RANGE_EXPR\n+                DOT2 \"..\"\n+              COMMA \",\"\n+              WHITESPACE \" \"\n+              LITERAL\n+                INT_NUMBER \"2\"\n+              R_BRACK \"]\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          BIN_EXPR\n+            TUPLE_EXPR\n+              L_PAREN \"(\"\n+              UNDERSCORE_EXPR\n+                UNDERSCORE \"_\"\n+              COMMA \",\"\n+              WHITESPACE \" \"\n+              UNDERSCORE_EXPR\n+                UNDERSCORE \"_\"\n+              R_PAREN \")\"\n+            WHITESPACE \" \"\n+            EQ \"=\"\n+            WHITESPACE \" \"\n+            TUPLE_EXPR\n+              L_PAREN \"(\"\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"a\"\n+              COMMA \",\"\n+              WHITESPACE \" \"\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"b\"\n+              R_PAREN \")\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          BIN_EXPR\n+            PAREN_EXPR\n+              L_PAREN \"(\"\n+              UNDERSCORE_EXPR\n+                UNDERSCORE \"_\"\n+              R_PAREN \")\"\n+            WHITESPACE \" \"\n+            EQ \"=\"\n+            WHITESPACE \" \"\n+            TUPLE_EXPR\n+              L_PAREN \"(\"\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"a\"\n+              COMMA \",\"\n+              WHITESPACE \" \"\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"b\"\n+              R_PAREN \")\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          BIN_EXPR\n+            UNDERSCORE_EXPR\n+              UNDERSCORE \"_\"\n+            WHITESPACE \" \"\n+            EQ \"=\"\n+            WHITESPACE \" \"\n+            TUPLE_EXPR\n+              L_PAREN \"(\"\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"a\"\n+              COMMA \",\"\n+              WHITESPACE \" \"\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"b\"\n+              R_PAREN \")\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n\"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\""}, {"sha": "8baea77075b5e9aa4bc00e104622e3b2ac3fd807", "filename": "crates/syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2FCargo.toml?ref=8f504dc87384b0fa41a55327566f0db9c08eb98c", "patch": "@@ -30,7 +30,7 @@ rayon = \"1\"\n expect-test = \"1.2.0-pre.1\"\n proc-macro2 = \"1.0.8\"\n quote = \"1.0.2\"\n-ungrammar = \"=1.15.0\"\n+ungrammar = \"=1.16.0\"\n \n test_utils = { path = \"../test_utils\" }\n sourcegen = { path = \"../sourcegen\" }"}, {"sha": "fc1ee6f601d2a4590be45e9d89cba896baffd43f", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=8f504dc87384b0fa41a55327566f0db9c08eb98c", "patch": "@@ -262,6 +262,7 @@ pub struct ExternBlock {\n impl ast::HasAttrs for ExternBlock {}\n impl ast::HasDocComments for ExternBlock {}\n impl ExternBlock {\n+    pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n     pub fn abi(&self) -> Option<Abi> { support::child(&self.syntax) }\n     pub fn extern_item_list(&self) -> Option<ExternItemList> { support::child(&self.syntax) }\n }\n@@ -1062,6 +1063,15 @@ impl LetExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct UnderscoreExpr {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::HasAttrs for UnderscoreExpr {}\n+impl UnderscoreExpr {\n+    pub fn underscore_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![_]) }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct StmtList {\n     pub(crate) syntax: SyntaxNode,\n@@ -1522,6 +1532,7 @@ pub enum Expr {\n     WhileExpr(WhileExpr),\n     YieldExpr(YieldExpr),\n     LetExpr(LetExpr),\n+    UnderscoreExpr(UnderscoreExpr),\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -2673,6 +2684,17 @@ impl AstNode for LetExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for UnderscoreExpr {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == UNDERSCORE_EXPR }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for StmtList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == STMT_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3337,6 +3359,9 @@ impl From<YieldExpr> for Expr {\n impl From<LetExpr> for Expr {\n     fn from(node: LetExpr) -> Expr { Expr::LetExpr(node) }\n }\n+impl From<UnderscoreExpr> for Expr {\n+    fn from(node: UnderscoreExpr) -> Expr { Expr::UnderscoreExpr(node) }\n+}\n impl AstNode for Expr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3345,7 +3370,7 @@ impl AstNode for Expr {\n             | INDEX_EXPR | LITERAL | LOOP_EXPR | MACRO_CALL | MACRO_STMTS | MATCH_EXPR\n             | METHOD_CALL_EXPR | PAREN_EXPR | PATH_EXPR | PREFIX_EXPR | RANGE_EXPR\n             | RECORD_EXPR | REF_EXPR | RETURN_EXPR | TRY_EXPR | TUPLE_EXPR | WHILE_EXPR\n-            | YIELD_EXPR | LET_EXPR => true,\n+            | YIELD_EXPR | LET_EXPR | UNDERSCORE_EXPR => true,\n             _ => false,\n         }\n     }\n@@ -3383,6 +3408,7 @@ impl AstNode for Expr {\n             WHILE_EXPR => Expr::WhileExpr(WhileExpr { syntax }),\n             YIELD_EXPR => Expr::YieldExpr(YieldExpr { syntax }),\n             LET_EXPR => Expr::LetExpr(LetExpr { syntax }),\n+            UNDERSCORE_EXPR => Expr::UnderscoreExpr(UnderscoreExpr { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -3421,6 +3447,7 @@ impl AstNode for Expr {\n             Expr::WhileExpr(it) => &it.syntax,\n             Expr::YieldExpr(it) => &it.syntax,\n             Expr::LetExpr(it) => &it.syntax,\n+            Expr::UnderscoreExpr(it) => &it.syntax,\n         }\n     }\n }\n@@ -3887,6 +3914,7 @@ impl AstNode for AnyHasAttrs {\n             | WHILE_EXPR\n             | YIELD_EXPR\n             | LET_EXPR\n+            | UNDERSCORE_EXPR\n             | STMT_LIST\n             | RECORD_EXPR_FIELD_LIST\n             | RECORD_EXPR_FIELD\n@@ -4546,6 +4574,11 @@ impl std::fmt::Display for LetExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for UnderscoreExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for StmtList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "3152137fb8cce25b947bc6483bd2f30e327057de", "filename": "crates/syntax/src/tests/ast_src.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f504dc87384b0fa41a55327566f0db9c08eb98c/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs?ref=8f504dc87384b0fa41a55327566f0db9c08eb98c", "patch": "@@ -143,6 +143,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"RETURN_EXPR\",\n         \"YIELD_EXPR\",\n         \"LET_EXPR\",\n+        \"UNDERSCORE_EXPR\",\n         \"MATCH_EXPR\",\n         \"MATCH_ARM_LIST\",\n         \"MATCH_ARM\","}]}