{"sha": "feeaa4db3cb990463871e35b16b3449023cb791d", "node_id": "C_kwDOAAsO6NoAKGZlZWFhNGRiM2NiOTkwNDYzODcxZTM1YjE2YjM0NDkwMjNjYjc5MWQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-26T00:37:51Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-26T00:45:45Z"}, "message": "Simplify arg capacity calculations.\n\nCurrently they try to be very precise. But they are wrong, i.e. they\ndon't match what's happening in the loop below. This code isn't hot\nenough for it to matter that much.", "tree": {"sha": "a9a8cd97aa0865b9745215abc473338f3e265355", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9a8cd97aa0865b9745215abc473338f3e265355"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feeaa4db3cb990463871e35b16b3449023cb791d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feeaa4db3cb990463871e35b16b3449023cb791d", "html_url": "https://github.com/rust-lang/rust/commit/feeaa4db3cb990463871e35b16b3449023cb791d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feeaa4db3cb990463871e35b16b3449023cb791d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b75b3b3afecfb6638c7c75ad665f8f3091aab1ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/b75b3b3afecfb6638c7c75ad665f8f3091aab1ae", "html_url": "https://github.com/rust-lang/rust/commit/b75b3b3afecfb6638c7c75ad665f8f3091aab1ae"}], "stats": {"total": 29, "additions": 5, "deletions": 24}, "files": [{"sha": "87b730d29cdf2118bd1d57595fbb4623c0146b1b", "filename": "compiler/rustc_codegen_gcc/src/abi.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/feeaa4db3cb990463871e35b16b3449023cb791d/compiler%2Frustc_codegen_gcc%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feeaa4db3cb990463871e35b16b3449023cb791d/compiler%2Frustc_codegen_gcc%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fabi.rs?ref=feeaa4db3cb990463871e35b16b3449023cb791d", "patch": "@@ -107,26 +107,10 @@ pub trait FnAbiGccExt<'gcc, 'tcx> {\n impl<'gcc, 'tcx> FnAbiGccExt<'gcc, 'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n     fn gcc_type(&self, cx: &CodegenCx<'gcc, 'tcx>) -> (Type<'gcc>, Vec<Type<'gcc>>, bool, FxHashSet<usize>) {\n         let mut on_stack_param_indices = FxHashSet::default();\n-        let args_capacity: usize = self.args.iter().map(|arg|\n-            if arg.pad.is_some() {\n-                1\n-            }\n-            else {\n-                0\n-            } +\n-            if let PassMode::Pair(_, _) = arg.mode {\n-                2\n-            } else {\n-                1\n-            }\n-        ).sum();\n+\n+        // This capacity calculation is approximate.\n         let mut argument_tys = Vec::with_capacity(\n-            if let PassMode::Indirect { .. } = self.ret.mode {\n-                1\n-            }\n-            else {\n-                0\n-            } + args_capacity,\n+            self.args.len() + if let PassMode::Indirect { .. } = self.ret.mode { 1 } else { 0 }\n         );\n \n         let return_ty ="}, {"sha": "a06b07c11498952b1585bdb868c58844f074d8e0", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/feeaa4db3cb990463871e35b16b3449023cb791d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feeaa4db3cb990463871e35b16b3449023cb791d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=feeaa4db3cb990463871e35b16b3449023cb791d", "patch": "@@ -328,12 +328,9 @@ impl<'ll, 'tcx> FnAbiLlvmExt<'ll, 'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n         let args =\n             if self.c_variadic { &self.args[..self.fixed_count as usize] } else { &self.args };\n \n-        let args_capacity: usize = args.iter().map(|arg|\n-            if arg.pad.is_some() { 1 } else { 0 } +\n-            if let PassMode::Pair(_, _) = arg.mode { 2 } else { 1 }\n-        ).sum();\n+        // This capacity calculation is approximate.\n         let mut llargument_tys = Vec::with_capacity(\n-            if let PassMode::Indirect { .. } = self.ret.mode { 1 } else { 0 } + args_capacity,\n+            self.args.len() + if let PassMode::Indirect { .. } = self.ret.mode { 1 } else { 0 },\n         );\n \n         let llreturn_ty = match &self.ret.mode {"}]}