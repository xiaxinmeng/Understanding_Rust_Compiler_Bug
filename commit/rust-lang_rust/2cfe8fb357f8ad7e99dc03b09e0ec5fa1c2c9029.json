{"sha": "2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZmU4ZmIzNTdmOGFkN2U5OWRjMDNiMDllMGVjNWZhMWMyYzkwMjk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-31T23:32:37Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-31T23:35:11Z"}, "message": "rustc: Check self types in method lookup; allow required trait methods to have self types; write self types into metadata", "tree": {"sha": "56af8b2f6feb43d3393caf47bcebaa8399712257", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56af8b2f6feb43d3393caf47bcebaa8399712257"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029", "html_url": "https://github.com/rust-lang/rust/commit/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "567f881fdf4053d4890929eb4cd46c67c4a011ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/567f881fdf4053d4890929eb4cd46c67c4a011ee", "html_url": "https://github.com/rust-lang/rust/commit/567f881fdf4053d4890929eb4cd46c67c4a011ee"}], "stats": {"total": 203, "additions": 181, "deletions": 22}, "files": [{"sha": "b9fae0697088a65fe8ec52562986fd77fe319cd7", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029", "patch": "@@ -23,7 +23,7 @@ syn keyword   rustKeyword     use while with\n syn keyword   rustKeyword     mod trait class struct enum type nextgroup=rustIdentifier skipwhite\n syn keyword   rustKeyword     fn nextgroup=rustFuncName skipwhite\n \n-syn match     rustIdentifier  \"\\%([^[:cntrl:][:space:][:punct:][:digit:]]\\|_\\)\\%([^[:cntrl:][:punct:][:space:]]\\|_\\)*\" display contained\n+syn match     rustIdentifier  contains=rustIdentifierPrime \"\\%([^[:cntrl:][:space:][:punct:][:digit:]]\\|_\\)\\%([^[:cntrl:][:punct:][:space:]]\\|_\\)*\" display contained\n syn match     rustFuncName    \"\\%([^[:cntrl:][:space:][:punct:][:digit:]]\\|_\\)\\%([^[:cntrl:][:punct:][:space:]]\\|_\\)*\" display contained\n \n \" Reserved words\n@@ -114,8 +114,11 @@ syn match rustFatArrowHead contained \">\" conceal cchar=\u2000\n syn match rustFatArrowTail contained \"=\" conceal cchar=\u27f9\n syn match rustFatArrowFull \"=>\" contains=rustFatArrowHead,rustFatArrowTail\n \n-hi def link rustHexNumber     rustNumber\n-hi def link rustBinNumber     rustNumber\n+syn match rustIdentifierPrime /\\<\\@!_\\(_*\\>\\)\\@=/ conceal cchar=\u2032\n+\n+hi def link rustHexNumber       rustNumber\n+hi def link rustBinNumber       rustNumber\n+hi def link rustIdentifierPrime rustIdentifier\n \n hi def link rustString        String\n hi def link rustCharacter     Character"}, {"sha": "6e56e5ca65a4cd5b64059c723a082874d9068cf6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029", "patch": "@@ -503,7 +503,8 @@ type ty_field = spanned<ty_field_>;\n \n #[auto_serialize]\n type ty_method = {ident: ident, attrs: ~[attribute],\n-                  decl: fn_decl, tps: ~[ty_param], span: span};\n+                  decl: fn_decl, tps: ~[ty_param], self_ty: self_ty,\n+                  span: span};\n \n #[auto_serialize]\n // A trait method is either required (meaning it doesn't have an"}, {"sha": "46a9f062645cd0a799fb71f510ce53c9e30e8459", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029", "patch": "@@ -286,6 +286,7 @@ class parser {\n                 // methods are ignored; this could change.\n                 required({ident: ident, attrs: attrs,\n                           decl: {purity: pur with d}, tps: tps,\n+                          self_ty: self_ty,\n                           span: mk_sp(lo, hi)})\n               }\n               token::LBRACE {"}, {"sha": "946f3c764fa4bf73adff0c0b8006fbd723277b98", "filename": "src/rustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Frustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Frustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcommon.rs?ref=2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029", "patch": "@@ -97,6 +97,8 @@ const tag_mod_impl_trait: uint = 0x47u;\n const tag_item_impl_method: uint = 0x48u;\n const tag_item_dtor: uint = 0x49u;\n const tag_paths_foreign_path: uint = 0x4a;\n+const tag_item_trait_method_self_ty: uint = 0x4b;\n+const tag_item_trait_method_self_ty_region: uint = 0x4c;\n \n // used to encode crate_ctxt side tables\n enum astencode_tag { // Reserves 0x50 -- 0x6f"}, {"sha": "37da481a82d80119f17a08c9de7c5d968ca4afb5", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029", "patch": "@@ -565,19 +565,70 @@ fn get_enum_variants(cdata: cmd, id: ast::node_id, tcx: ty::ctxt)\n }\n \n // NB: These types are duplicated in resolve.rs\n-type method_info = {did: ast::def_id, n_tps: uint, ident: ast::ident};\n+type method_info = {\n+    did: ast::def_id,\n+    n_tps: uint,\n+    ident: ast::ident,\n+    self_type: ast::self_ty_\n+};\n+\n type _impl = {did: ast::def_id, ident: ast::ident, methods: ~[@method_info]};\n \n+fn get_self_ty(item: ebml::doc) -> ast::self_ty_ {\n+    fn get_mutability(ch: u8) -> ast::mutability {\n+        alt ch as char {\n+            'i' => { ast::m_imm }\n+            'm' => { ast::m_mutbl }\n+            'c' => { ast::m_const }\n+            _ => {\n+                fail fmt!{\"unknown mutability character: `%c`\", ch as char}\n+            }\n+        }\n+    }\n+\n+    let self_type_doc = ebml::get_doc(item, tag_item_trait_method_self_ty);\n+    let string = ebml::doc_as_str(self_type_doc);\n+\n+    let self_ty_kind = string[0];\n+    alt self_ty_kind as char {\n+        'r' => { ret ast::sty_by_ref; }\n+        'v' => { ret ast::sty_value; }\n+        '@' => { ret ast::sty_box(get_mutability(string[1])); }\n+        '~' => { ret ast::sty_uniq(get_mutability(string[1])); }\n+        '&' => {\n+            let mutability = get_mutability(string[1]);\n+\n+            let region;\n+            let region_doc =\n+                ebml::get_doc(self_type_doc,\n+                              tag_item_trait_method_self_ty_region);\n+            let region_string = str::from_bytes(ebml::doc_data(region_doc));\n+            if str::eq(region_string, ~\"\") {\n+                region = ast::re_anon;\n+            } else {\n+                region = ast::re_named(@region_string);\n+            }\n+\n+            ret ast::sty_region(@{ id: 0, node: region }, mutability);\n+        }\n+        _ => {\n+            fail fmt!{\"unknown self type code: `%c`\", self_ty_kind as char};\n+        }\n+    }\n+}\n+\n fn item_impl_methods(cdata: cmd, item: ebml::doc, base_tps: uint)\n     -> ~[@method_info] {\n     let mut rslt = ~[];\n     for ebml::tagged_docs(item, tag_item_impl_method) |doc| {\n         let m_did = ebml::with_doc_data(doc, |d| parse_def_id(d));\n         let mth_item = lookup_item(m_did.node, cdata.data);\n+        let self_ty = get_self_ty(mth_item);\n         vec::push(rslt, @{did: translate_def_id(cdata, m_did),\n                     /* FIXME (maybe #2323) tjc: take a look at this. */\n                    n_tps: item_ty_param_count(mth_item) - base_tps,\n-                   ident: item_name(mth_item)});\n+                   ident: item_name(mth_item),\n+                   self_type: self_ty});\n     }\n     rslt\n }\n@@ -628,7 +679,9 @@ fn get_trait_methods(cdata: cmd, id: ast::node_id, tcx: ty::ctxt)\n             tcx.diag.handler().bug(\n                 ~\"get_trait_methods: id has non-function type\");\n         } };\n+        let self_ty = get_self_ty(mth);\n         vec::push(result, {ident: name, tps: bounds, fty: fty,\n+                    self_ty: self_ty,\n                     purity: alt check item_family(mth) {\n                       'u' { ast::unsafe_fn }\n                       'f' { ast::impure_fn }"}, {"sha": "49096e1fdf8f86fe6e8d344947caa046a9089e45", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029", "patch": "@@ -438,6 +438,58 @@ fn encode_visibility(ebml_w: ebml::writer, visibility: visibility) {\n     });\n }\n \n+fn encode_region(ebml_w: ebml::writer, region: region) {\n+    alt region.node {\n+        re_anon => {\n+            ebml_w.wr_tagged_str(tag_item_trait_method_self_ty, ~\"\");\n+        }\n+        re_named(ident) => {\n+            ebml_w.wr_tagged_str(tag_item_trait_method_self_ty, *ident);\n+        }\n+    }\n+}\n+\n+fn encode_self_type(ebml_w: ebml::writer, self_type: ast::self_ty_) {\n+    ebml_w.start_tag(tag_item_trait_method_self_ty);\n+\n+    // Encode the base self type.\n+    let ch;\n+    alt self_type {\n+        sty_by_ref =>       { ch = 'r' as u8; }\n+        sty_value =>        { ch = 'v' as u8; }\n+        sty_region(_, _) => { ch = '&' as u8; }\n+        sty_box(_) =>       { ch = '@' as u8; }\n+        sty_uniq(_) =>      { ch = '~' as u8; }\n+    }\n+    ebml_w.writer.write(&[ ch ]);\n+\n+    // Encode mutability.\n+    alt self_type {\n+        sty_by_ref | sty_value => { /* No-op. */ }\n+        sty_region(_, m_imm) | sty_box(m_imm) | sty_uniq(m_imm) => {\n+            ebml_w.writer.write(&[ 'i' as u8 ]);\n+        }\n+        sty_region(_, m_mutbl) | sty_box(m_mutbl) | sty_uniq(m_mutbl) => {\n+            ebml_w.writer.write(&[ 'm' as u8 ]);\n+        }\n+        sty_region(_, m_const) | sty_box(m_const) | sty_uniq(m_const) => {\n+            ebml_w.writer.write(&[ 'c' as u8 ]);\n+        }\n+    }\n+\n+    // Encode the region.\n+    alt self_type {\n+        sty_region(region, _) => {\n+            encode_region(ebml_w, *region);\n+        }\n+        sty_by_ref | sty_value | sty_box(*) | sty_uniq(*) => {\n+            // Nothing to do.\n+        }\n+    }\n+\n+    ebml_w.end_tag();\n+}\n+\n /* Returns an index of items in this class */\n fn encode_info_for_class(ecx: @encode_ctxt, ebml_w: ebml::writer,\n                          id: node_id, path: ast_map::path,\n@@ -523,6 +575,7 @@ fn encode_info_for_method(ecx: @encode_ctxt, ebml_w: ebml::writer,\n     encode_type(ecx, ebml_w, node_id_to_type(ecx.tcx, m.id));\n     encode_name(ebml_w, m.ident);\n     encode_path(ebml_w, impl_path, ast_map::path_name(m.ident));\n+    encode_self_type(ebml_w, m.self_ty.node);\n     if all_tps.len() > 0u || should_inline {\n         ecx.encode_inlined_item(\n            ecx, ebml_w, impl_path,\n@@ -712,9 +765,10 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n                 encode_type_param_bounds(ebml_w, ecx, m.tps);\n                 encode_type(ecx, ebml_w, node_id_to_type(tcx, m.id));\n                 encode_def_id(ebml_w, local_def(m.id));\n+                encode_self_type(ebml_w, m.self_ty.node);\n                 ebml_w.end_tag();\n                 /* Write the info that's needed when viewing this class\n-                   as an impl (just the method def_id) */\n+                   as an impl (just the method def_id and self type) */\n                 ebml_w.start_tag(tag_item_impl_method);\n                 ebml_w.writer.write(str::bytes(def_to_str(local_def(m.id))));\n                 ebml_w.end_tag();\n@@ -778,6 +832,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n                 encode_type_param_bounds(ebml_w, ecx, ty_m.tps);\n                 encode_type(ecx, ebml_w, ty::mk_fn(tcx, mty.fty));\n                 encode_family(ebml_w, purity_fn_family(mty.purity));\n+                encode_self_type(ebml_w, mty.self_ty);\n                 ebml_w.end_tag();\n               }\n               provided(m) {"}, {"sha": "7a7f80bf9dc49a807e81efc5d47a9e02782a0431", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029", "patch": "@@ -28,13 +28,13 @@ import syntax::ast::{item_mod, item_trait, item_ty, le, local, local_crate};\n import syntax::ast::{lt, method, mul, ne, neg, node_id, pat, pat_enum};\n import syntax::ast::{pat_ident, path, prim_ty, pat_box, pat_uniq, pat_lit};\n import syntax::ast::{pat_range, pat_rec, pat_tup, pat_wild, provided};\n-import syntax::ast::{required, rem, shl, stmt_decl, subtract, ty, ty_bool};\n-import syntax::ast::{ty_char, ty_f, ty_f32, ty_f64, ty_float, ty_i, ty_i16};\n-import syntax::ast::{ty_i32, ty_i64, ty_i8, ty_int, ty_param, ty_path};\n-import syntax::ast::{ty_str, ty_u, ty_u16, ty_u32, ty_u64, ty_u8, ty_uint};\n-import syntax::ast::{variant, view_item, view_item_export, view_item_import};\n-import syntax::ast::{view_item_use, view_path_glob, view_path_list};\n-import syntax::ast::{view_path_simple};\n+import syntax::ast::{required, rem, self_ty_, shl, stmt_decl, subtract, ty};\n+import syntax::ast::{ty_bool, ty_char, ty_f, ty_f32, ty_f64, ty_float, ty_i};\n+import syntax::ast::{ty_i16, ty_i32, ty_i64, ty_i8, ty_int, ty_param};\n+import syntax::ast::{ty_path, ty_str, ty_u, ty_u16, ty_u32, ty_u64, ty_u8};\n+import syntax::ast::{ty_uint, variant, view_item, view_item_export};\n+import syntax::ast::{view_item_import, view_item_use, view_path_glob};\n+import syntax::ast::{view_path_list, view_path_simple};\n import syntax::ast_util::{def_id_of_def, dummy_sp, local_def, new_def_hash};\n import syntax::ast_util::{walk_pat};\n import syntax::attr::{attr_metas, contains_name};\n@@ -59,7 +59,16 @@ import str_eq = str::eq;\n type DefMap = hashmap<node_id,def>;\n \n // Implementation resolution\n-type MethodInfo = { did: def_id, n_tps: uint, ident: ident };\n+\n+// XXX: This kind of duplicates information kept in ty::method. Maybe it\n+// should go away.\n+type MethodInfo = {\n+    did: def_id,\n+    n_tps: uint,\n+    ident: ident,\n+    self_type: self_ty_\n+};\n+\n type Impl = { did: def_id, ident: ident, methods: ~[@MethodInfo] };\n type ImplScope = @~[@Impl];\n type ImplScopes = @list<ImplScope>;\n@@ -925,7 +934,8 @@ class Resolver {\n                                 @{\n                                     did: local_def(method.id),\n                                     n_tps: method.tps.len(),\n-                                    ident: method.ident\n+                                    ident: method.ident,\n+                                    self_type: method.self_ty.node\n                                 }\n                             ];\n                         }\n@@ -962,7 +972,8 @@ class Resolver {\n                         @{\n                             did: local_def(method.id),\n                             n_tps: method.tps.len(),\n-                            ident: method.ident\n+                            ident: method.ident,\n+                            self_type: method.self_ty.node\n                         }\n                     ];\n                 }"}, {"sha": "71e0fedef61afc1f3dffe6fd574973d808e8b4e3", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029", "patch": "@@ -183,6 +183,7 @@ type param_bounds = @~[param_bound];\n type method = {ident: ast::ident,\n                tps: @~[param_bounds],\n                fty: fn_ty,\n+               self_ty: ast::self_ty_,\n                purity: ast::purity,\n                vis: ast::visibility};\n "}, {"sha": "08f36bdb256b7f3bd6971f574268c6c4b05229ea", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029", "patch": "@@ -1,12 +1,14 @@\n /* Code to handle method lookups (which can be quite complex) */\n \n import coherence::get_base_type_def_id;\n-import middle::resolve3::Impl;\n+import middle::resolve3::{Impl, MethodInfo};\n+import middle::ty::{mk_box, mk_rptr, mk_uniq};\n import middle::typeck::infer::methods; // next_ty_vars\n-import syntax::ast::def_id;\n+import syntax::ast::{def_id, sty_box, sty_by_ref, sty_region, sty_uniq};\n+import syntax::ast::{sty_value};\n import syntax::ast_map;\n import syntax::ast_map::node_id_to_str;\n-import syntax::ast_util::new_def_hash;\n+import syntax::ast_util::{dummy_sp, new_def_hash};\n import dvec::{dvec, extensions};\n \n type candidate = {\n@@ -18,6 +20,28 @@ type candidate = {\n     entry: method_map_entry\n };\n \n+fn transform_self_type_for_method(fcx: @fn_ctxt,\n+                                  impl_ty: ty::t,\n+                                  method_info: MethodInfo)\n+                               -> ty::t {\n+    alt method_info.self_type {\n+        sty_by_ref | sty_value => {\n+            impl_ty\n+        }\n+        sty_region(r, mutability) => {\n+            // XXX: dummy_sp is unfortunate here.\n+            let region = ast_region_to_region(fcx, fcx, dummy_sp(), r);\n+            mk_rptr(fcx.ccx.tcx, region, { ty: impl_ty, mutbl: mutability })\n+        }\n+        sty_box(mutability) => {\n+            mk_box(fcx.ccx.tcx, { ty: impl_ty, mutbl: mutability })\n+        }\n+        sty_uniq(mutability) => {\n+            mk_uniq(fcx.ccx.tcx, { ty: impl_ty, mutbl: mutability })\n+        }\n+    }\n+}\n+\n class lookup {\n     let fcx: @fn_ctxt;\n     let expr: @ast::expr;\n@@ -370,6 +394,10 @@ class lookup {\n             let {substs: impl_substs, ty: impl_ty} =\n                 impl_self_ty(self.fcx, im.did);\n \n+            let impl_ty = transform_self_type_for_method(self.fcx,\n+                                                         impl_ty,\n+                                                         *m);\n+\n             // Depending on our argument, we find potential\n             // matches either by checking subtypability or\n             // type assignability. Collect the matches."}, {"sha": "091980ceb398c3904fc5fc671263f5ef09896806", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029", "patch": "@@ -492,7 +492,8 @@ class CoherenceChecker {\n                     push(methods, @{\n                         did: local_def(ast_method.id),\n                         n_tps: ast_method.tps.len(),\n-                        ident: ast_method.ident\n+                        ident: ast_method.ident,\n+                        self_type: ast_method.self_ty.node\n                     });\n                 }\n \n@@ -513,7 +514,8 @@ class CoherenceChecker {\n                             push(methods, @{\n                                 did: local_def(ast_method.id),\n                                 n_tps: ast_method.tps.len(),\n-                                ident: ast_method.ident\n+                                ident: ast_method.ident,\n+                                self_type: ast_method.self_ty.node\n                             });\n                         }\n                     }"}, {"sha": "0c16fc16933995768e01760eac8d6c79acd5c6d4", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=2cfe8fb357f8ad7e99dc03b09e0ec5fa1c2c9029", "patch": "@@ -432,6 +432,7 @@ fn ty_of_method(ccx: @crate_ctxt,\n      tps: ty_param_bounds(ccx, m.tps),\n      fty: ty_of_fn_decl(ccx, type_rscope(rp), ast::proto_bare,\n                         m.decl, none),\n+     self_ty: m.self_ty.node,\n      purity: m.decl.purity,\n      vis: m.vis}\n }\n@@ -444,6 +445,7 @@ fn ty_of_ty_method(self: @crate_ctxt,\n      fty: ty_of_fn_decl(self, type_rscope(rp), ast::proto_bare,\n                                  m.decl, none),\n      // assume public, because this is only invoked on trait methods\n+     self_ty: m.self_ty.node,\n      purity: m.decl.purity, vis: ast::public}\n }\n "}]}