{"sha": "16790ae1f98692af59c37f6dd5db535fb3c5fe81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NzkwYWUxZjk4NjkyYWY1OWMzN2Y2ZGQ1ZGI1MzVmYjNjNWZlODE=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-21T00:00:39Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-21T00:00:39Z"}, "message": "Revert \"Rollup merge of #69280 - ecstatic-morse:promote-shuffle-no-special-case, r=petrochenkov\"\n\nThis reverts commit 61d3b6dedb1ec1f3e3cbd3d66b1a3453225bc37c, reversing\nchanges made to c6ad1e2c2a0c7e48537617d36085f866fa6a65a3.", "tree": {"sha": "65a43839f2bc9e56e63fae1bf99c95d19927ce74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65a43839f2bc9e56e63fae1bf99c95d19927ce74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16790ae1f98692af59c37f6dd5db535fb3c5fe81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16790ae1f98692af59c37f6dd5db535fb3c5fe81", "html_url": "https://github.com/rust-lang/rust/commit/16790ae1f98692af59c37f6dd5db535fb3c5fe81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16790ae1f98692af59c37f6dd5db535fb3c5fe81/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c462a2f776b899d46743b1b44eda976e846e61d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c462a2f776b899d46743b1b44eda976e846e61d", "html_url": "https://github.com/rust-lang/rust/commit/2c462a2f776b899d46743b1b44eda976e846e61d"}], "stats": {"total": 80, "additions": 41, "deletions": 39}, "files": [{"sha": "4d5464f774ff54dc2871cd731591a3b2dd0a4617", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16790ae1f98692af59c37f6dd5db535fb3c5fe81/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16790ae1f98692af59c37f6dd5db535fb3c5fe81/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=16790ae1f98692af59c37f6dd5db535fb3c5fe81", "patch": "@@ -72,8 +72,8 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     Ok(ret)\n }\n \n-/// The `InterpCx` is only meant to be used to do field and index projections into promoteds\n-/// and const patterns in match arms.\n+/// The `InterpCx` is only meant to be used to do field and index projections into constants for\n+/// `simd_shuffle` and const patterns in match arms.\n ///\n /// The function containing the `match` that is currently being analyzed may have generic bounds\n /// that inform us about the generic bounds of the constant. E.g., using an associated constant"}, {"sha": "a5d59860c3d16c6e7708994674f511ae34862ef8", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/16790ae1f98692af59c37f6dd5db535fb3c5fe81/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16790ae1f98692af59c37f6dd5db535fb3c5fe81/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=16790ae1f98692af59c37f6dd5db535fb3c5fe81", "patch": "@@ -24,6 +24,7 @@ use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::LitKind;\n \n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_target::spec::abi::Abi;\n \n use std::cell::Cell;\n use std::{cmp, iter, mem, usize};\n@@ -105,10 +106,11 @@ pub enum Candidate {\n     /// Promotion of the `x` in `[x; 32]`.\n     Repeat(Location),\n \n-    /// Function calls where the callee has the unstable\n-    /// `#[rustc_args_required_const]` attribute. The attribute requires that\n-    /// the arguments be constant, usually because they are encoded as an\n-    /// immediate operand in a platform intrinsic.\n+    /// Currently applied to function calls where the callee has the unstable\n+    /// `#[rustc_args_required_const]` attribute as well as the SIMD shuffle\n+    /// intrinsic. The intrinsic requires the arguments are indeed constant and\n+    /// the attribute currently provides the semantic requirement that arguments\n+    /// must be constant.\n     Argument { bb: BasicBlock, index: usize },\n }\n \n@@ -216,6 +218,17 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n \n         if let TerminatorKind::Call { ref func, .. } = *kind {\n             if let ty::FnDef(def_id, _) = func.ty(self.body, self.tcx).kind {\n+                let fn_sig = self.tcx.fn_sig(def_id);\n+                if let Abi::RustIntrinsic | Abi::PlatformIntrinsic = fn_sig.abi() {\n+                    let name = self.tcx.item_name(def_id);\n+                    // FIXME(eddyb) use `#[rustc_args_required_const(2)]` for shuffles.\n+                    if name.as_str().starts_with(\"simd_shuffle\") {\n+                        self.candidates.push(Candidate::Argument { bb: location.block, index: 2 });\n+\n+                        return; // Don't double count `simd_shuffle` candidates\n+                    }\n+                }\n+\n                 if let Some(constant_args) = args_required_const(self.tcx, def_id) {\n                     for index in constant_args {\n                         self.candidates.push(Candidate::Argument { bb: location.block, index });\n@@ -717,7 +730,8 @@ pub fn validate_candidates(\n         .filter(|&candidate| {\n             validator.explicit = candidate.forces_explicit_promotion();\n \n-            // FIXME(eddyb) also emit the errors for `#[rustc_args_required_const]` arguments here.\n+            // FIXME(eddyb) also emit the errors for shuffle indices\n+            // and `#[rustc_args_required_const]` arguments here.\n \n             let is_promotable = validator.validate_candidate(candidate).is_ok();\n             match candidate {"}, {"sha": "06b2957ac62c9778512404b61cc2680332627abb", "filename": "src/test/incremental/issue-61530.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16790ae1f98692af59c37f6dd5db535fb3c5fe81/src%2Ftest%2Fincremental%2Fissue-61530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16790ae1f98692af59c37f6dd5db535fb3c5fe81/src%2Ftest%2Fincremental%2Fissue-61530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-61530.rs?ref=16790ae1f98692af59c37f6dd5db535fb3c5fe81", "patch": "@@ -1,12 +1,11 @@\n-#![feature(repr_simd, platform_intrinsics, rustc_attrs)]\n+#![feature(repr_simd, platform_intrinsics)]\n \n // revisions:rpass1 rpass2\n \n #[repr(simd)]\n struct I32x2(i32, i32);\n \n extern \"platform-intrinsic\" {\n-    #[rustc_args_required_const(2)]\n     fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n }\n "}, {"sha": "214d6752cef1d0407f8f4ac07d3b0aaf1312d83c", "filename": "src/test/ui/issues/issue-38074.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16790ae1f98692af59c37f6dd5db535fb3c5fe81/src%2Ftest%2Fui%2Fissues%2Fissue-38074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16790ae1f98692af59c37f6dd5db535fb3c5fe81/src%2Ftest%2Fui%2Fissues%2Fissue-38074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38074.rs?ref=16790ae1f98692af59c37f6dd5db535fb3c5fe81", "patch": "@@ -1,10 +1,9 @@\n // run-pass\n // ignore-emscripten FIXME(#45351)\n \n-#![feature(platform_intrinsics, repr_simd, rustc_attrs)]\n+#![feature(platform_intrinsics, repr_simd)]\n \n extern \"platform-intrinsic\" {\n-    #[rustc_args_required_const(2)]\n     fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n }\n "}, {"sha": "5929d05f4de3169d4255f9cfd5c949ba75b5e274", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-elements.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16790ae1f98692af59c37f6dd5db535fb3c5fe81/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16790ae1f98692af59c37f6dd5db535fb3c5fe81/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.rs?ref=16790ae1f98692af59c37f6dd5db535fb3c5fe81", "patch": "@@ -42,13 +42,9 @@ extern \"platform-intrinsic\" {\n     fn simd_insert<T, E>(x: T, idx: u32, y: E) -> T;\n     fn simd_extract<T, E>(x: T, idx: u32) -> E;\n \n-    #[rustc_args_required_const(2)]\n     fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n-    #[rustc_args_required_const(2)]\n     fn simd_shuffle3<T, U>(x: T, y: T, idx: [u32; 3]) -> U;\n-    #[rustc_args_required_const(2)]\n     fn simd_shuffle4<T, U>(x: T, y: T, idx: [u32; 4]) -> U;\n-    #[rustc_args_required_const(2)]\n     fn simd_shuffle8<T, U>(x: T, y: T, idx: [u32; 8]) -> U;\n }\n "}, {"sha": "78022c0c8bd98c321f80043f9f6be99465d93fc5", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-elements.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/16790ae1f98692af59c37f6dd5db535fb3c5fe81/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16790ae1f98692af59c37f6dd5db535fb3c5fe81/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.stderr?ref=16790ae1f98692af59c37f6dd5db535fb3c5fe81", "patch": "@@ -1,89 +1,89 @@\n error[E0511]: invalid monomorphization of `simd_insert` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:59:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:55:9\n    |\n LL |         simd_insert(0, 0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_insert` intrinsic: expected inserted type `i32` (element of input `i32x4`), found `f64`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:61:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:57:9\n    |\n LL |         simd_insert(x, 0, 1.0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_extract` intrinsic: expected return type `i32` (element of input `i32x4`), found `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:63:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:59:9\n    |\n LL |         simd_extract::<_, f32>(x, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:66:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:62:9\n    |\n LL |         simd_shuffle2::<i32, i32>(0, 0, [0; 2]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle3` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:68:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:64:9\n    |\n LL |         simd_shuffle3::<i32, i32>(0, 0, [0; 3]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:70:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:66:9\n    |\n LL |         simd_shuffle4::<i32, i32>(0, 0, [0; 4]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:72:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:68:9\n    |\n LL |         simd_shuffle8::<i32, i32>(0, 0, [0; 8]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x2` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:75:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:71:9\n    |\n LL |         simd_shuffle2::<_, f32x2>(x, x, [0; 2]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle3` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x3` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:77:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:73:9\n    |\n LL |         simd_shuffle3::<_, f32x3>(x, x, [0; 3]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x4` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:79:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:75:9\n    |\n LL |         simd_shuffle4::<_, f32x4>(x, x, [0; 4]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x8` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:81:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:77:9\n    |\n LL |         simd_shuffle8::<_, f32x8>(x, x, [0; 8]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected return type of length 2, found `i32x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-elements.rs:84:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:80:9\n    |\n LL |         simd_shuffle2::<_, i32x8>(x, x, [0; 2]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle3` intrinsic: expected return type of length 3, found `i32x4` with length 4\n-  --> $DIR/simd-intrinsic-generic-elements.rs:86:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:82:9\n    |\n LL |         simd_shuffle3::<_, i32x4>(x, x, [0; 3]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected return type of length 4, found `i32x3` with length 3\n-  --> $DIR/simd-intrinsic-generic-elements.rs:88:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:84:9\n    |\n LL |         simd_shuffle4::<_, i32x3>(x, x, [0; 4]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected return type of length 8, found `i32x2` with length 2\n-  --> $DIR/simd-intrinsic-generic-elements.rs:90:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:86:9\n    |\n LL |         simd_shuffle8::<_, i32x2>(x, x, [0; 8]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "4c09ae25c5f3ea9e500c6ab7c2a6bafc419383e5", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-inlining-issue67557-ice.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16790ae1f98692af59c37f6dd5db535fb3c5fe81/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16790ae1f98692af59c37f6dd5db535fb3c5fe81/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557-ice.rs?ref=16790ae1f98692af59c37f6dd5db535fb3c5fe81", "patch": "@@ -3,10 +3,9 @@\n //\n // run-pass\n // compile-flags: -Zmir-opt-level=3\n-#![feature(platform_intrinsics, repr_simd, rustc_attrs)]\n+#![feature(platform_intrinsics, repr_simd)]\n \n extern \"platform-intrinsic\" {\n-    #[rustc_args_required_const(2)]\n     fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n }\n "}, {"sha": "7a0d955686bb6d4c2bc1cbefda9bd957cb5c49a2", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-inlining-issue67557.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16790ae1f98692af59c37f6dd5db535fb3c5fe81/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16790ae1f98692af59c37f6dd5db535fb3c5fe81/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-inlining-issue67557.rs?ref=16790ae1f98692af59c37f6dd5db535fb3c5fe81", "patch": "@@ -3,10 +3,9 @@\n //\n // run-pass\n // compile-flags: -Zmir-opt-level=3\n-#![feature(platform_intrinsics, repr_simd, rustc_attrs)]\n+#![feature(platform_intrinsics, repr_simd)]\n \n extern \"platform-intrinsic\" {\n-    #[rustc_args_required_const(2)]\n     fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n }\n "}, {"sha": "ea3d4b1894416eba4df1e0f84d2e26c1b41c3954", "filename": "src/test/ui/simd/simd-intrinsic-generic-elements.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16790ae1f98692af59c37f6dd5db535fb3c5fe81/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16790ae1f98692af59c37f6dd5db535fb3c5fe81/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-elements.rs?ref=16790ae1f98692af59c37f6dd5db535fb3c5fe81", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // ignore-emscripten FIXME(#45351) hits an LLVM assert\n \n-#![feature(repr_simd, platform_intrinsics, rustc_attrs)]\n+#![feature(repr_simd, platform_intrinsics)]\n \n #[repr(simd)]\n #[derive(Copy, Clone, Debug, PartialEq)]\n@@ -25,13 +25,9 @@ extern \"platform-intrinsic\" {\n     fn simd_insert<T, E>(x: T, idx: u32, y: E) -> T;\n     fn simd_extract<T, E>(x: T, idx: u32) -> E;\n \n-    #[rustc_args_required_const(2)]\n     fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n-    #[rustc_args_required_const(2)]\n     fn simd_shuffle3<T, U>(x: T, y: T, idx: [u32; 3]) -> U;\n-    #[rustc_args_required_const(2)]\n     fn simd_shuffle4<T, U>(x: T, y: T, idx: [u32; 4]) -> U;\n-    #[rustc_args_required_const(2)]\n     fn simd_shuffle8<T, U>(x: T, y: T, idx: [u32; 8]) -> U;\n }\n "}]}