{"sha": "c4fa35bb41f71c66db31a8526df18bf59900dea6", "node_id": "C_kwDOAAsO6NoAKGM0ZmEzNWJiNDFmNzFjNjZkYjMxYTg1MjZkZjE4YmY1OTkwMGRlYTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-20T17:32:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-20T17:32:10Z"}, "message": "Rollup merge of #100642 - mzohreva:mz/update-sgx-abi-cancel-queue, r=Mark-Simulacrum\n\nUpdate fortanix-sgx-abi and export some useful SGX usercall traits\n\nUpdate `fortanix-sgx-abi` to 0.5.0 to add support for cancel queue (see https://github.com/fortanix/rust-sgx/pull/405 and https://github.com/fortanix/rust-sgx/pull/404).\n\nExport some useful traits for processing SGX usercall. This is needed for https://github.com/fortanix/rust-sgx/pull/404 to avoid duplication.\n\ncc `@raoulstrackx` and `@jethrogb`", "tree": {"sha": "c6bf1fdebde1998dc7d3cd27c156b8c06c66edb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6bf1fdebde1998dc7d3cd27c156b8c06c66edb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4fa35bb41f71c66db31a8526df18bf59900dea6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjARqaCRBK7hj4Ov3rIwAA1XkIAKhz9L7chY3pDp1vjbMuc6Zk\n3lCRUeKq5G2QhefOYF7yIPda9jaliQRIPoet7SYlQH2OLa9Q9qcLFzkSGwW4zYHw\nCleYGeP3XeEsEwXilWavAFRx09pC65YGCgitIE+kj00pdfljiwgkgQhJLVhKnL5T\nGofF9m8H1tuz9N6FghRoBFUxe9KiCONcqnZqOKSRO6OHk4HPzQISM6xPBEo2jyVN\nqigvxfnA2gdmrFH/Ei9aFbwUVTA7Eg/OsRPeVOU8kECLT14xSGoK2mITju17ZvmR\nCb0hE4WqXDafECL04QEXuU8haLOtImKCZcG8Y0d/n3t05xUgZiNJnbH511wJux0=\n=U0qV\n-----END PGP SIGNATURE-----\n", "payload": "tree c6bf1fdebde1998dc7d3cd27c156b8c06c66edb4\nparent 23a603aa4c99ede4ab7d54063f606e23bb54772a\nparent 70dd980c8d27dbb748de0660ceed7cfdc2413914\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661016730 +0200\ncommitter GitHub <noreply@github.com> 1661016730 +0200\n\nRollup merge of #100642 - mzohreva:mz/update-sgx-abi-cancel-queue, r=Mark-Simulacrum\n\nUpdate fortanix-sgx-abi and export some useful SGX usercall traits\n\nUpdate `fortanix-sgx-abi` to 0.5.0 to add support for cancel queue (see https://github.com/fortanix/rust-sgx/pull/405 and https://github.com/fortanix/rust-sgx/pull/404).\n\nExport some useful traits for processing SGX usercall. This is needed for https://github.com/fortanix/rust-sgx/pull/404 to avoid duplication.\n\ncc `@raoulstrackx` and `@jethrogb`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4fa35bb41f71c66db31a8526df18bf59900dea6", "html_url": "https://github.com/rust-lang/rust/commit/c4fa35bb41f71c66db31a8526df18bf59900dea6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4fa35bb41f71c66db31a8526df18bf59900dea6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23a603aa4c99ede4ab7d54063f606e23bb54772a", "url": "https://api.github.com/repos/rust-lang/rust/commits/23a603aa4c99ede4ab7d54063f606e23bb54772a", "html_url": "https://github.com/rust-lang/rust/commit/23a603aa4c99ede4ab7d54063f606e23bb54772a"}, {"sha": "70dd980c8d27dbb748de0660ceed7cfdc2413914", "url": "https://api.github.com/repos/rust-lang/rust/commits/70dd980c8d27dbb748de0660ceed7cfdc2413914", "html_url": "https://github.com/rust-lang/rust/commit/70dd980c8d27dbb748de0660ceed7cfdc2413914"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "293fc30903df063f6a47077ce405b9a6d8f10852", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4fa35bb41f71c66db31a8526df18bf59900dea6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c4fa35bb41f71c66db31a8526df18bf59900dea6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c4fa35bb41f71c66db31a8526df18bf59900dea6", "patch": "@@ -1421,9 +1421,9 @@ dependencies = [\n \n [[package]]\n name = \"fortanix-sgx-abi\"\n-version = \"0.3.3\"\n+version = \"0.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c56c422ef86062869b2d57ae87270608dc5929969dd130a6e248979cf4fb6ca6\"\n+checksum = \"57cafc2274c10fab234f176b25903ce17e690fca7597090d50880e047a0389c5\"\n dependencies = [\n  \"compiler_builtins\",\n  \"rustc-std-workspace-core\","}, {"sha": "3da9565a86d78588282ca040d7a5e4a676f0b1a2", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4fa35bb41f71c66db31a8526df18bf59900dea6/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c4fa35bb41f71c66db31a8526df18bf59900dea6/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=c4fa35bb41f71c66db31a8526df18bf59900dea6", "patch": "@@ -39,7 +39,7 @@ rand = \"0.7\"\n dlmalloc = { version = \"0.2.3\", features = ['rustc-dep-of-std'] }\n \n [target.x86_64-fortanix-unknown-sgx.dependencies]\n-fortanix-sgx-abi = { version = \"0.3.2\", features = ['rustc-dep-of-std'] }\n+fortanix-sgx-abi = { version = \"0.5.0\", features = ['rustc-dep-of-std'] }\n \n [target.'cfg(target_os = \"hermit\")'.dependencies]\n hermit-abi = { version = \"0.2.0\", features = ['rustc-dep-of-std'] }"}, {"sha": "da100b689db847f4080808e670c82ef7b26b9c4e", "filename": "library/std/src/os/fortanix_sgx/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4fa35bb41f71c66db31a8526df18bf59900dea6/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fa35bb41f71c66db31a8526df18bf59900dea6/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Fmod.rs?ref=c4fa35bb41f71c66db31a8526df18bf59900dea6", "patch": "@@ -26,6 +26,7 @@ pub mod usercalls {\n             free, insecure_time, launch_thread, read, read_alloc, send, wait, write,\n         };\n         pub use crate::sys::abi::usercalls::raw::{do_usercall, Usercalls as UsercallNrs};\n+        pub use crate::sys::abi::usercalls::raw::{Register, RegisterArgument, ReturnValue};\n \n         // fortanix-sgx-abi re-exports\n         pub use crate::sys::abi::usercalls::raw::Error;"}, {"sha": "fe8392f78cd1ed2241971e29a8c1e95f369f928c", "filename": "library/std/src/sys/sgx/abi/usercalls/alloc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4fa35bb41f71c66db31a8526df18bf59900dea6/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fa35bb41f71c66db31a8526df18bf59900dea6/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs?ref=c4fa35bb41f71c66db31a8526df18bf59900dea6", "patch": "@@ -56,6 +56,8 @@ unsafe impl UserSafeSized for Usercall {}\n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n unsafe impl UserSafeSized for Return {}\n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+unsafe impl UserSafeSized for Cancel {}\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n unsafe impl<T: UserSafeSized> UserSafeSized for [T; 2] {}\n \n /// A type that can be represented in memory as one or more `UserSafeSized`s."}, {"sha": "e19e843267a909ce9ee61a65bb76a9575ea1c8a9", "filename": "library/std/src/sys/sgx/abi/usercalls/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4fa35bb41f71c66db31a8526df18bf59900dea6/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fa35bb41f71c66db31a8526df18bf59900dea6/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs?ref=c4fa35bb41f71c66db31a8526df18bf59900dea6", "patch": "@@ -292,12 +292,17 @@ fn check_os_error(err: Result) -> i32 {\n     }\n }\n \n-trait FromSgxResult {\n+/// Translate the raw result of an SGX usercall.\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+pub trait FromSgxResult {\n+    /// Return type\n     type Return;\n \n+    /// Translate the raw result of an SGX usercall.\n     fn from_sgx_result(self) -> IoResult<Self::Return>;\n }\n \n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n impl<T> FromSgxResult for (Result, T) {\n     type Return = T;\n \n@@ -310,6 +315,7 @@ impl<T> FromSgxResult for (Result, T) {\n     }\n }\n \n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n impl FromSgxResult for Result {\n     type Return = ();\n "}, {"sha": "10c1456d4fd051265db52fecdb67545c8348dabe", "filename": "library/std/src/sys/sgx/abi/usercalls/raw.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c4fa35bb41f71c66db31a8526df18bf59900dea6/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fa35bb41f71c66db31a8526df18bf59900dea6/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fraw.rs?ref=c4fa35bb41f71c66db31a8526df18bf59900dea6", "patch": "@@ -37,14 +37,23 @@ pub unsafe fn do_usercall(\n     (a, b)\n }\n \n-type Register = u64;\n+/// A value passed or returned in a CPU register.\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+pub type Register = u64;\n \n-trait RegisterArgument {\n+/// Translate a type from/to Register to be used as an argument.\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+pub trait RegisterArgument {\n+    /// Translate a Register to Self.\n     fn from_register(_: Register) -> Self;\n+    /// Translate self to a Register.\n     fn into_register(self) -> Register;\n }\n \n-trait ReturnValue {\n+/// Translate a pair of Registers to the raw usercall return value.\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+pub trait ReturnValue {\n+    /// Translate a pair of Registers to the raw usercall return value.\n     fn from_registers(call: &'static str, regs: (Register, Register)) -> Self;\n }\n \n@@ -68,6 +77,7 @@ macro_rules! define_usercalls {\n \n macro_rules! define_ra {\n     (< $i:ident > $t:ty) => {\n+        #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n         impl<$i> RegisterArgument for $t {\n             fn from_register(a: Register) -> Self {\n                 a as _\n@@ -78,6 +88,7 @@ macro_rules! define_ra {\n         }\n     };\n     ($i:ty as $t:ty) => {\n+        #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n         impl RegisterArgument for $t {\n             fn from_register(a: Register) -> Self {\n                 a as $i as _\n@@ -88,6 +99,7 @@ macro_rules! define_ra {\n         }\n     };\n     ($t:ty) => {\n+        #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n         impl RegisterArgument for $t {\n             fn from_register(a: Register) -> Self {\n                 a as _\n@@ -112,6 +124,7 @@ define_ra!(usize as isize);\n define_ra!(<T> *const T);\n define_ra!(<T> *mut T);\n \n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n impl RegisterArgument for bool {\n     fn from_register(a: Register) -> bool {\n         if a != 0 { true } else { false }\n@@ -121,6 +134,7 @@ impl RegisterArgument for bool {\n     }\n }\n \n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n impl<T: RegisterArgument> RegisterArgument for Option<NonNull<T>> {\n     fn from_register(a: Register) -> Option<NonNull<T>> {\n         NonNull::new(a as _)\n@@ -130,12 +144,14 @@ impl<T: RegisterArgument> RegisterArgument for Option<NonNull<T>> {\n     }\n }\n \n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n impl ReturnValue for ! {\n     fn from_registers(call: &'static str, _regs: (Register, Register)) -> Self {\n         rtabort!(\"Usercall {call}: did not expect to be re-entered\");\n     }\n }\n \n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n impl ReturnValue for () {\n     fn from_registers(call: &'static str, usercall_retval: (Register, Register)) -> Self {\n         rtassert!(usercall_retval.0 == 0);\n@@ -144,13 +160,15 @@ impl ReturnValue for () {\n     }\n }\n \n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n impl<T: RegisterArgument> ReturnValue for T {\n     fn from_registers(call: &'static str, usercall_retval: (Register, Register)) -> Self {\n         rtassert!(usercall_retval.1 == 0);\n         T::from_register(usercall_retval.0)\n     }\n }\n \n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n impl<T: RegisterArgument, U: RegisterArgument> ReturnValue for (T, U) {\n     fn from_registers(_call: &'static str, regs: (Register, Register)) -> Self {\n         (T::from_register(regs.0), U::from_register(regs.1))"}]}