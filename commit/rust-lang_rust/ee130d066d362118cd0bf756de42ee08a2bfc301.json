{"sha": "ee130d066d362118cd0bf756de42ee08a2bfc301", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMTMwZDA2NmQzNjIxMThjZDBiZjc1NmRlNDJlZTA4YTJiZmMzMDE=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-02-19T23:35:28Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-05-05T16:35:33Z"}, "message": "Metadata collection: Tracking Applicability mut borrows", "tree": {"sha": "3aafbcbc041a03099d0a2fc22812bae2f31950bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aafbcbc041a03099d0a2fc22812bae2f31950bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee130d066d362118cd0bf756de42ee08a2bfc301", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee130d066d362118cd0bf756de42ee08a2bfc301", "html_url": "https://github.com/rust-lang/rust/commit/ee130d066d362118cd0bf756de42ee08a2bfc301", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee130d066d362118cd0bf756de42ee08a2bfc301/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dca1b8f618fdec3f1b354d9bafa01b32ecc8ab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dca1b8f618fdec3f1b354d9bafa01b32ecc8ab6", "html_url": "https://github.com/rust-lang/rust/commit/8dca1b8f618fdec3f1b354d9bafa01b32ecc8ab6"}], "stats": {"total": 57, "additions": 48, "deletions": 9}, "files": [{"sha": "c8637531d942834fbb90925a0fe8a70ee68f0b72", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 48, "deletions": 9, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ee130d066d362118cd0bf756de42ee08a2bfc301/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee130d066d362118cd0bf756de42ee08a2bfc301/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=ee130d066d362118cd0bf756de42ee08a2bfc301", "patch": "@@ -38,7 +38,7 @@ use std::path::Path;\n use crate::utils::internal_lints::is_lint_ref_type;\n use crate::utils::{\n     get_enclosing_body, get_parent_expr_for_hir, last_path_segment, match_function_call, match_qpath, match_type,\n-    path_to_local_id, paths, span_lint, walk_ptrs_ty_depth,\n+    path_to_local_id, paths, span_lint, walk_ptrs_ty_depth, get_parent_expr\n };\n \n /// This is the output file of the lint collector.\n@@ -478,15 +478,15 @@ impl<'a, 'hir> ValueTracker<'a, 'hir> {\n                     self.value_mutations.push(ApplicabilityModifier::Producer(path));\n                 } else {\n                     let msg = format!(\n-                        \"Unsupported Call expression at: {}\",\n+                        \"Unsupported assign Call expression at: {}\",\n                         SerializableSpan::from_span(self.cx, func_expr.span)\n                     );\n                     self.value_mutations.push(ApplicabilityModifier::Unknown(msg));\n                 }\n             },\n             hir::ExprKind::MethodCall(..) => {\n                 let msg = format!(\n-                    \"Unsupported MethodCall expression at: {}\",\n+                    \"Unsupported assign MethodCall expression at: {}\",\n                     SerializableSpan::from_span(self.cx, expr.span)\n                 );\n                 self.value_mutations.push(ApplicabilityModifier::Unknown(msg));\n@@ -518,13 +518,56 @@ impl<'a, 'hir> ValueTracker<'a, 'hir> {\n             // hir::ExprKind::Index(expr, expr) => not supported\n             _ => {\n                 let msg = format!(\n-                    \"Unexpected expression at: {}\",\n+                    \"Unexpected assign expression at: {}\",\n                     SerializableSpan::from_span(self.cx, expr.span)\n                 );\n                 self.value_mutations.push(ApplicabilityModifier::Unknown(msg));\n             },\n         }\n     }\n+\n+    fn process_borrow_expr(&mut self, access_hir_id: hir::HirId) {\n+        let borrower: &rustc_hir::Expr<'_>;\n+        if let Some(addr_of_expr) = get_parent_expr_for_hir(self.cx, access_hir_id) {\n+            if let Some(borrower_expr) = get_parent_expr(self.cx, addr_of_expr) {\n+                borrower = borrower_expr\n+            } else {\n+                return;\n+            }\n+        } else {\n+            return;\n+        }\n+\n+        match &borrower.kind {\n+            hir::ExprKind::Call(func_expr, ..) => {\n+                // We only deal with resolved paths as this is the usual case. Other expression kinds like closures\n+                // etc. are hard to track but might be a worthy improvement in the future\n+                if let hir::ExprKind::Path(hir::QPath::Resolved(_, path)) = func_expr.kind {\n+                    self.value_mutations.push(ApplicabilityModifier::Modifier(path));\n+                } else {\n+                    let msg = format!(\n+                        \"Unsupported borrow in Call at: {}\",\n+                        SerializableSpan::from_span(self.cx, func_expr.span)\n+                    );\n+                    self.value_mutations.push(ApplicabilityModifier::Unknown(msg));\n+                }\n+            },\n+            hir::ExprKind::MethodCall(..) => {\n+                let msg = format!(\n+                    \"Unsupported borrow in MethodCall at: {}\",\n+                    SerializableSpan::from_span(self.cx, borrower.span)\n+                );\n+                self.value_mutations.push(ApplicabilityModifier::Unknown(msg));\n+            },\n+            _ => {\n+                let msg = format!(\n+                    \"Unexpected borrow at: {}\",\n+                    SerializableSpan::from_span(self.cx, borrower.span)\n+                );\n+                self.value_mutations.push(ApplicabilityModifier::Unknown(msg));\n+            },\n+        }\n+    }\n }\n \n impl<'a, 'hir> Delegate<'hir> for ValueTracker<'a, 'hir> {\n@@ -541,11 +584,7 @@ impl<'a, 'hir> Delegate<'hir> for ValueTracker<'a, 'hir> {\n     fn borrow(&mut self, _place_with_id: &PlaceWithHirId<'hir>, expr_id: hir::HirId, bk: BorrowKind) {\n         if self.is_value_expr(expr_id) {\n             if let BorrowKind::MutBorrow = bk {\n-                // TODO xFrednet 2021-02-17: Save the function\n-                if let Some(hir::Node::Expr(expr)) = self.cx.tcx.hir().find(expr_id) {\n-                    let span = SerializableSpan::from_span(self.cx, expr.span);\n-                    log_to_file(&format!(\"- &mut     {}\\n\", span));\n-                }\n+                self.process_borrow_expr(expr_id);\n             }\n         }\n     }"}]}