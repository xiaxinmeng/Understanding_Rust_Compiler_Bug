{"sha": "64ca0ba6e91249d911010ef22fb3ec9ccd84bba7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0Y2EwYmE2ZTkxMjQ5ZDkxMTAxMGVmMjJmYjNlYzljY2Q4NGJiYTc=", "commit": {"author": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2013-12-12T11:26:56Z"}, "committer": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2013-12-12T15:06:18Z"}, "message": "rewrite of shootout-fasta.rs\n\nimprovements:\n - no managed box\n - no virtual calls\n - no useless copy\n - optimizations (bisect is slower, limit tests, BufferedWriter...)\n - pass shootout test\n - should be as fast as the best official test\n\nThanks to @cmr and @eddyb for their help!", "tree": {"sha": "c35d27ed5ea5c6e716be2efcf7377f03de79f945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c35d27ed5ea5c6e716be2efcf7377f03de79f945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64ca0ba6e91249d911010ef22fb3ec9ccd84bba7", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64ca0ba6e91249d911010ef22fb3ec9ccd84bba7", "html_url": "https://github.com/rust-lang/rust/commit/64ca0ba6e91249d911010ef22fb3ec9ccd84bba7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64ca0ba6e91249d911010ef22fb3ec9ccd84bba7/comments", "author": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d441c5468814b0d8f9ccdba426baf1f16b5134fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d441c5468814b0d8f9ccdba426baf1f16b5134fc", "html_url": "https://github.com/rust-lang/rust/commit/d441c5468814b0d8f9ccdba426baf1f16b5134fc"}], "stats": {"total": 192, "additions": 80, "deletions": 112}, "files": [{"sha": "50138562fa31c9d31e28fbaa136ab9dacc82a71c", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 80, "deletions": 112, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/64ca0ba6e91249d911010ef22fb3ec9ccd84bba7/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ca0ba6e91249d911010ef22fb3ec9ccd84bba7/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=64ca0ba6e91249d911010ef22fb3ec9ccd84bba7", "patch": "@@ -8,148 +8,116 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n-\n /* -*- mode: rust; indent-tabs-mode: nil -*-\n  * Implementation of 'fasta' benchmark from\n  * Computer Language Benchmarks Game\n  * http://shootout.alioth.debian.org/\n  */\n-extern mod extra;\n \n-use std::int;\n use std::io;\n+use std::io::buffered::BufferedWriter;\n use std::io::File;\n+use std::num::min;\n use std::os;\n-use std::rand::Rng;\n-use std::rand;\n-use std::str;\n \n-static LINE_LENGTH: uint = 60u;\n+static LINE_LENGTH: uint = 60;\n+static IM: u32 = 139968;\n \n struct MyRandom {\n     last: u32\n }\n-\n-fn myrandom_next(r: @mut MyRandom, mx: u32) -> u32 {\n-    r.last = (r.last * 3877u32 + 29573u32) % 139968u32;\n-    mx * r.last / 139968u32\n-}\n-\n-#[deriving(Clone)]\n-struct AminoAcids {\n-    ch: char,\n-    prob: u32\n-}\n-\n-fn make_cumulative(aa: ~[AminoAcids]) -> ~[AminoAcids] {\n-    let mut cp: u32 = 0u32;\n-    let mut ans: ~[AminoAcids] = ~[];\n-    for a in aa.iter() {\n-        cp += a.prob;\n-        ans.push(AminoAcids {ch: a.ch, prob: cp});\n+impl MyRandom {\n+    fn new() -> MyRandom { MyRandom { last: 42 } }\n+    fn normalize(p: f32) -> u32 {(p * IM as f32).floor() as u32}\n+    fn gen(&mut self) -> u32 {\n+        self.last = (self.last * 3877 + 29573) % IM;\n+        self.last\n     }\n-    ans\n }\n \n-fn select_random(r: u32, genelist: ~[AminoAcids]) -> char {\n-    if r < genelist[0].prob { return genelist[0].ch; }\n-    fn bisect(v: ~[AminoAcids], lo: uint, hi: uint, target: u32) -> char {\n-        if hi > lo + 1u {\n-            let mid: uint = lo + (hi - lo) / 2u;\n-            if target < v[mid].prob {\n-                return bisect(v, lo, mid, target);\n-            } else {\n-                return bisect(v, mid, hi, target);\n-            }\n-        } else {\n-            return v[hi].ch;\n-        }\n+struct AAGen<'a> {\n+    rng: &'a mut MyRandom,\n+    data: ~[(u32, u8)]\n+}\n+impl<'a> AAGen<'a> {\n+    fn new<'b>(rng: &'b mut MyRandom, aa: &[(char, f32)]) -> AAGen<'b> {\n+        let mut cum = 0.;\n+        let data = aa.iter()\n+            .map(|&(ch, p)| { cum += p; (MyRandom::normalize(cum), ch as u8) })\n+            .collect();\n+        AAGen { rng: rng, data: data }\n     }\n-    bisect(genelist.clone(), 0, genelist.len() - 1, r)\n }\n-\n-fn make_random_fasta(wr: @mut io::Writer,\n-                     id: ~str,\n-                     desc: ~str,\n-                     genelist: ~[AminoAcids],\n-                     n: int) {\n-    writeln!(wr, \">{} {}\", id, desc);\n-    let mut rng = rand::rng();\n-    let rng = @mut MyRandom {\n-        last: rng.gen()\n-    };\n-    let mut op: ~str = ~\"\";\n-    for _ in range(0u, n as uint) {\n-        op.push_char(select_random(myrandom_next(rng, 100u32),\n-                                   genelist.clone()));\n-        if op.len() >= LINE_LENGTH {\n-            writeln!(wr, \"{}\", op);\n-            op = ~\"\";\n-        }\n+impl<'a> Iterator<u8> for AAGen<'a> {\n+    fn next(&mut self) -> Option<u8> {\n+        let r = self.rng.gen();\n+        self.data.iter()\n+            .skip_while(|pc| pc.n0() < r)\n+            .map(|&(_, c)| c)\n+            .next()\n     }\n-    if op.len() > 0u { writeln!(wr, \"{}\", op); }\n }\n \n-fn make_repeat_fasta(wr: @mut io::Writer, id: ~str, desc: ~str, s: ~str, n: int) {\n-    writeln!(wr, \">{} {}\", id, desc);\n-    let mut op = str::with_capacity( LINE_LENGTH );\n-    let sl = s.len();\n-    for i in range(0u, n as uint) {\n-        if (op.len() >= LINE_LENGTH) {\n-            writeln!(wr, \"{}\", op);\n-            op = str::with_capacity( LINE_LENGTH );\n+fn make_fasta<W: Writer, I: Iterator<u8>>(\n+    wr: &mut W, header: &str, mut it: I, mut n: uint)\n+{\n+    wr.write(header.as_bytes());\n+    let mut line = [0u8, .. LINE_LENGTH + 1];\n+    while n > 0 {\n+        let nb = min(LINE_LENGTH, n);\n+        for i in range(0, nb) {\n+            line[i] = it.next().unwrap();\n         }\n-        op.push_char( s[i % sl] as char );\n+        n -= nb;\n+        line[nb] = '\\n' as u8;\n+        wr.write(line.slice_to(nb + 1));\n     }\n-    if op.len() > 0 {\n-        writeln!(wr, \"{}\", op);\n-    }\n-}\n-\n-fn acid(ch: char, prob: u32) -> AminoAcids {\n-    AminoAcids {ch: ch, prob: prob}\n }\n \n-fn main() {\n+fn run<W: Writer>(writer: &mut W) {\n     let args = os::args();\n-    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        // alioth tests k-nucleotide with this data at 25,000,000\n-        ~[~\"\", ~\"5000000\"]\n+    let n = if os::getenv(\"RUST_BENCH\").is_some() {\n+        25000000\n     } else if args.len() <= 1u {\n-        ~[~\"\", ~\"1000\"]\n+        1000\n     } else {\n-        args\n+        from_str(args[1]).unwrap()\n     };\n \n-    let writer = if os::getenv(\"RUST_BENCH\").is_some() {\n-        let file = File::create(&Path::new(\"./shootout-fasta.data\"));\n-        @mut file as @mut io::Writer\n-    } else {\n-        @mut io::stdout() as @mut io::Writer\n-    };\n-\n-    let n = from_str::<int>(args[1]).unwrap();\n+    let rng = &mut MyRandom::new();\n+    let alu =\n+        \"GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\\\n+        GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\\\n+        CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\\\n+        ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\\\n+        GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\\\n+        AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\\\n+        AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA\";\n+    let iub = &[('a', 0.27), ('c', 0.12), ('g', 0.12),\n+                ('t', 0.27), ('B', 0.02), ('D', 0.02),\n+                ('H', 0.02), ('K', 0.02), ('M', 0.02),\n+                ('N', 0.02), ('R', 0.02), ('S', 0.02),\n+                ('V', 0.02), ('W', 0.02), ('Y', 0.02)];\n+    let homosapiens = &[('a', 0.3029549426680),\n+                        ('c', 0.1979883004921),\n+                        ('g', 0.1975473066391),\n+                        ('t', 0.3015094502008)];\n+\n+    make_fasta(writer, \">ONE Homo sapiens alu\\n\",\n+               alu.as_bytes().iter().cycle().map(|c| *c), n * 2);\n+    make_fasta(writer, \">TWO IUB ambiguity codes\\n\",\n+               AAGen::new(rng, iub), n * 3);\n+    make_fasta(writer, \">THREE Homo sapiens frequency\\n\",\n+               AAGen::new(rng, homosapiens), n * 5);\n+\n+    writer.flush();\n+}\n \n-    let iub: ~[AminoAcids] =\n-        make_cumulative(~[acid('a', 27u32), acid('c', 12u32), acid('g', 12u32),\n-                         acid('t', 27u32), acid('B', 2u32), acid('D', 2u32),\n-                         acid('H', 2u32), acid('K', 2u32), acid('M', 2u32),\n-                         acid('N', 2u32), acid('R', 2u32), acid('S', 2u32),\n-                         acid('V', 2u32), acid('W', 2u32), acid('Y', 2u32)]);\n-    let homosapiens: ~[AminoAcids] =\n-        make_cumulative(~[acid('a', 30u32), acid('c', 20u32), acid('g', 20u32),\n-                         acid('t', 30u32)]);\n-    let alu: ~str =\n-        ~\"GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\\\n-          GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\\\n-          CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\\\n-          ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\\\n-          GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\\\n-          AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\\\n-          AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA\";\n-    make_repeat_fasta(writer, ~\"ONE\", ~\"Homo sapiens alu\", alu, n * 2);\n-    make_random_fasta(writer, ~\"TWO\", ~\"IUB ambiguity codes\", iub, n * 3);\n-    make_random_fasta(writer, ~\"THREE\",\n-                      ~\"Homo sapiens frequency\", homosapiens, n * 5);\n+fn main() {\n+    if os::getenv(\"RUST_BENCH\").is_some() {\n+        let mut file = BufferedWriter::new(File::create(&Path::new(\"./shootout-fasta.data\")));\n+        run(&mut file);\n+    } else {\n+        run(&mut BufferedWriter::new(io::stdout()));\n+    }\n }"}]}