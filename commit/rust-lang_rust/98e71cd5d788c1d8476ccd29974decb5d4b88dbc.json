{"sha": "98e71cd5d788c1d8476ccd29974decb5d4b88dbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZTcxY2Q1ZDc4OGMxZDg0NzZjY2QyOTk3NGRlY2I1ZDRiODhkYmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-08T10:06:30Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-18T14:08:25Z"}, "message": "decouple eval_src_mod from Parser", "tree": {"sha": "b56f511f93fbacc7e7080f915368f597533b6914", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b56f511f93fbacc7e7080f915368f597533b6914"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98e71cd5d788c1d8476ccd29974decb5d4b88dbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98e71cd5d788c1d8476ccd29974decb5d4b88dbc", "html_url": "https://github.com/rust-lang/rust/commit/98e71cd5d788c1d8476ccd29974decb5d4b88dbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98e71cd5d788c1d8476ccd29974decb5d4b88dbc/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53a633fb445af045493f832fdce4f9d9ce48fbd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/53a633fb445af045493f832fdce4f9d9ce48fbd4", "html_url": "https://github.com/rust-lang/rust/commit/53a633fb445af045493f832fdce4f9d9ce48fbd4"}], "stats": {"total": 69, "additions": 29, "deletions": 40}, "files": [{"sha": "245d06333f7d19a71ba371fe2972697840f9372b", "filename": "src/librustc_parse/parser/module.rs", "status": "modified", "additions": 29, "deletions": 40, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/98e71cd5d788c1d8476ccd29974decb5d4b88dbc/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e71cd5d788c1d8476ccd29974decb5d4b88dbc/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmodule.rs?ref=98e71cd5d788c1d8476ccd29974decb5d4b88dbc", "patch": "@@ -52,7 +52,7 @@ impl<'a> Parser<'a> {\n                     self.directory.ownership,\n                     &self.directory.path,\n                 )?;\n-                self.eval_src_mod(path, directory_ownership, id.to_string(), id.span)?\n+                eval_src_mod(self.sess, self.cfg_mods, path, directory_ownership, id)?\n             } else {\n                 (ast::Mod { inner: DUMMY_SP, items: Vec::new(), inline: false }, Vec::new())\n             }\n@@ -100,48 +100,37 @@ impl<'a> Parser<'a> {\n \n         Ok(Mod { inner: inner_lo.to(hi), items, inline: true })\n     }\n+}\n \n-    /// Reads a module from a source file.\n-    fn eval_src_mod(\n-        &mut self,\n-        path: PathBuf,\n-        directory_ownership: DirectoryOwnership,\n-        name: String,\n-        id_sp: Span,\n-    ) -> PResult<'a, (Mod, Vec<Attribute>)> {\n-        let mut included_mod_stack = self.sess.included_mod_stack.borrow_mut();\n-        self.error_on_circular_module(id_sp, &path, &included_mod_stack)?;\n-        included_mod_stack.push(path.clone());\n-        drop(included_mod_stack);\n-\n-        let mut p0 =\n-            new_sub_parser_from_file(self.sess, &path, directory_ownership, Some(name), id_sp);\n-        p0.cfg_mods = self.cfg_mods;\n-        let mut module = p0.parse_mod(&token::Eof)?;\n-        module.0.inline = false;\n-\n-        self.sess.included_mod_stack.borrow_mut().pop();\n-        Ok(module)\n-    }\n-\n-    fn error_on_circular_module(\n-        &self,\n-        span: Span,\n-        path: &Path,\n-        included_mod_stack: &[PathBuf],\n-    ) -> PResult<'a, ()> {\n-        if let Some(i) = included_mod_stack.iter().position(|p| *p == path) {\n-            let mut err = String::from(\"circular modules: \");\n-            let len = included_mod_stack.len();\n-            for p in &included_mod_stack[i..len] {\n-                err.push_str(&p.to_string_lossy());\n-                err.push_str(\" -> \");\n-            }\n-            err.push_str(&path.to_string_lossy());\n-            return Err(self.struct_span_err(span, &err[..]));\n+/// Reads a module from a source file.\n+fn eval_src_mod<'a>(\n+    sess: &'a ParseSess,\n+    cfg_mods: bool,\n+    path: PathBuf,\n+    dir_ownership: DirectoryOwnership,\n+    id: ast::Ident,\n+) -> PResult<'a, (Mod, Vec<Attribute>)> {\n+    let mut included_mod_stack = sess.included_mod_stack.borrow_mut();\n+    if let Some(i) = included_mod_stack.iter().position(|p| *p == path) {\n+        let mut err = String::from(\"circular modules: \");\n+        for p in &included_mod_stack[i..] {\n+            err.push_str(&p.to_string_lossy());\n+            err.push_str(\" -> \");\n         }\n-        Ok(())\n+        err.push_str(&path.to_string_lossy());\n+        return Err(sess.span_diagnostic.struct_span_err(id.span, &err[..]));\n     }\n+    included_mod_stack.push(path.clone());\n+    drop(included_mod_stack);\n+\n+    let mut p0 =\n+        new_sub_parser_from_file(sess, &path, dir_ownership, Some(id.to_string()), id.span);\n+    p0.cfg_mods = cfg_mods;\n+    let mut module = p0.parse_mod(&token::Eof)?;\n+    module.0.inline = false;\n+\n+    sess.included_mod_stack.borrow_mut().pop();\n+    Ok(module)\n }\n \n fn push_directory("}]}