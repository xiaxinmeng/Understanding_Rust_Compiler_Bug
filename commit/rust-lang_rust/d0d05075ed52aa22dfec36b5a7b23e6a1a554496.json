{"sha": "d0d05075ed52aa22dfec36b5a7b23e6a1a554496", "node_id": "C_kwDOAAsO6NoAKGQwZDA1MDc1ZWQ1MmFhMjJkZmVjMzZiNWE3YjIzZTZhMWE1NTQ0OTY", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-19T14:36:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-25T19:02:26Z"}, "message": "internal: replace TreeSink with a data structure\n\nThe general theme of this is to make parser a better independent\nlibrary.\n\nThe specific thing we do here is replacing callback based TreeSink with\na data structure. That is, rather than calling user-provided tree\nconstruction methods, the parser now spits out a very bare-bones tree,\neffectively a log of a DFS traversal.\n\nThis makes the parser usable without any *specifc* tree sink, and allows\nus to, eg, move tests into this crate.\n\nNow, it's also true that this is a distinction without a difference, as\nthe old and the new interface are equivalent in expressiveness. Still,\nthis new thing seems somewhat simpler. But yeah, I admit I don't have a\nsuuper strong motivation here, just a hunch that this is better.", "tree": {"sha": "93dde405a9ff7c4fa48fd10219b53a52538e863a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93dde405a9ff7c4fa48fd10219b53a52538e863a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0d05075ed52aa22dfec36b5a7b23e6a1a554496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0d05075ed52aa22dfec36b5a7b23e6a1a554496", "html_url": "https://github.com/rust-lang/rust/commit/d0d05075ed52aa22dfec36b5a7b23e6a1a554496", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f63558dc5523005fd84dc272864a37bb3c1fa90", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f63558dc5523005fd84dc272864a37bb3c1fa90", "html_url": "https://github.com/rust-lang/rust/commit/2f63558dc5523005fd84dc272864a37bb3c1fa90"}], "stats": {"total": 282, "additions": 172, "deletions": 110}, "files": [{"sha": "39129b03056dca174224829daea1a6d26cb70110", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=d0d05075ed52aa22dfec36b5a7b23e6a1a554496", "patch": "@@ -1,6 +1,5 @@\n //! Conversions between [`SyntaxNode`] and [`tt::TokenTree`].\n \n-use parser::{ParseError, TreeSink};\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::{\n     ast::{self, make::tokens::doc_comment},\n@@ -56,8 +55,18 @@ pub fn token_tree_to_syntax_node(\n         _ => TokenBuffer::from_subtree(tt),\n     };\n     let parser_tokens = to_parser_tokens(&buffer);\n+    let tree_traversal = parser::parse(&parser_tokens, entry_point);\n     let mut tree_sink = TtTreeSink::new(buffer.begin());\n-    parser::parse(&parser_tokens, &mut tree_sink, entry_point);\n+    for event in tree_traversal.iter() {\n+        match event {\n+            parser::TraversalStep::Token { kind, n_raw_tokens } => {\n+                tree_sink.token(kind, n_raw_tokens)\n+            }\n+            parser::TraversalStep::EnterNode { kind } => tree_sink.start_node(kind),\n+            parser::TraversalStep::LeaveNode => tree_sink.finish_node(),\n+            parser::TraversalStep::Error { msg } => tree_sink.error(msg.to_string()),\n+        }\n+    }\n     if tree_sink.roots.len() != 1 {\n         return Err(ExpandError::ConversionError);\n     }\n@@ -643,7 +652,7 @@ fn delim_to_str(d: tt::DelimiterKind, closing: bool) -> &'static str {\n     &texts[idx..texts.len() - (1 - idx)]\n }\n \n-impl<'a> TreeSink for TtTreeSink<'a> {\n+impl<'a> TtTreeSink<'a> {\n     fn token(&mut self, kind: SyntaxKind, mut n_tokens: u8) {\n         if kind == LIFETIME_IDENT {\n             n_tokens = 2;\n@@ -741,7 +750,7 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n         *self.roots.last_mut().unwrap() -= 1;\n     }\n \n-    fn error(&mut self, error: ParseError) {\n+    fn error(&mut self, error: String) {\n         self.inner.error(error, self.text_pos)\n     }\n }"}, {"sha": "632b591f65e8a87b9f47ef38662ea826cbfdca4c", "filename": "crates/mbe/src/tt_iter.rs", "status": "modified", "additions": 21, "deletions": 28, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftt_iter.rs?ref=d0d05075ed52aa22dfec36b5a7b23e6a1a554496", "patch": "@@ -3,9 +3,8 @@\n \n use crate::{to_parser_tokens::to_parser_tokens, ExpandError, ExpandResult, ParserEntryPoint};\n \n-use parser::TreeSink;\n use syntax::SyntaxKind;\n-use tt::buffer::{Cursor, TokenBuffer};\n+use tt::buffer::TokenBuffer;\n \n macro_rules! err {\n     () => {\n@@ -94,34 +93,28 @@ impl<'a> TtIter<'a> {\n         &mut self,\n         entry_point: ParserEntryPoint,\n     ) -> ExpandResult<Option<tt::TokenTree>> {\n-        struct OffsetTokenSink<'a> {\n-            cursor: Cursor<'a>,\n-            error: bool,\n-        }\n-\n-        impl<'a> TreeSink for OffsetTokenSink<'a> {\n-            fn token(&mut self, kind: SyntaxKind, mut n_tokens: u8) {\n-                if kind == SyntaxKind::LIFETIME_IDENT {\n-                    n_tokens = 2;\n-                }\n-                for _ in 0..n_tokens {\n-                    self.cursor = self.cursor.bump_subtree();\n+        let buffer = TokenBuffer::from_tokens(self.inner.as_slice());\n+        let parser_tokens = to_parser_tokens(&buffer);\n+        let tree_traversal = parser::parse(&parser_tokens, entry_point);\n+\n+        let mut cursor = buffer.begin();\n+        let mut error = false;\n+        for step in tree_traversal.iter() {\n+            match step {\n+                parser::TraversalStep::Token { kind, mut n_raw_tokens } => {\n+                    if kind == SyntaxKind::LIFETIME_IDENT {\n+                        n_raw_tokens = 2;\n+                    }\n+                    for _ in 0..n_raw_tokens {\n+                        cursor = cursor.bump_subtree();\n+                    }\n                 }\n-            }\n-            fn start_node(&mut self, _kind: SyntaxKind) {}\n-            fn finish_node(&mut self) {}\n-            fn error(&mut self, _error: parser::ParseError) {\n-                self.error = true;\n+                parser::TraversalStep::EnterNode { .. } | parser::TraversalStep::LeaveNode => (),\n+                parser::TraversalStep::Error { .. } => error = true,\n             }\n         }\n \n-        let buffer = TokenBuffer::from_tokens(self.inner.as_slice());\n-        let parser_tokens = to_parser_tokens(&buffer);\n-        let mut sink = OffsetTokenSink { cursor: buffer.begin(), error: false };\n-\n-        parser::parse(&parser_tokens, &mut sink, entry_point);\n-\n-        let mut err = if !sink.cursor.is_root() || sink.error {\n+        let mut err = if !cursor.is_root() || error {\n             Some(err!(\"expected {:?}\", entry_point))\n         } else {\n             None\n@@ -130,8 +123,8 @@ impl<'a> TtIter<'a> {\n         let mut curr = buffer.begin();\n         let mut res = vec![];\n \n-        if sink.cursor.is_root() {\n-            while curr != sink.cursor {\n+        if cursor.is_root() {\n+            while curr != cursor {\n                 if let Some(token) = curr.token_tree() {\n                     res.push(token);\n                 }"}, {"sha": "ca4c38f2e6c4aac5570a60604ac64c8fbcc3b6fe", "filename": "crates/parser/src/event.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fparser%2Fsrc%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fparser%2Fsrc%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fevent.rs?ref=d0d05075ed52aa22dfec36b5a7b23e6a1a554496", "patch": "@@ -10,9 +10,8 @@\n use std::mem;\n \n use crate::{\n-    ParseError,\n+    tree_traversal::TreeTraversal,\n     SyntaxKind::{self, *},\n-    TreeSink,\n };\n \n /// `Parser` produces a flat list of `Event`s.\n@@ -77,7 +76,7 @@ pub(crate) enum Event {\n     },\n \n     Error {\n-        msg: ParseError,\n+        msg: String,\n     },\n }\n \n@@ -88,7 +87,8 @@ impl Event {\n }\n \n /// Generate the syntax tree with the control of events.\n-pub(super) fn process(sink: &mut dyn TreeSink, mut events: Vec<Event>) {\n+pub(super) fn process(mut events: Vec<Event>) -> TreeTraversal {\n+    let mut res = TreeTraversal::default();\n     let mut forward_parents = Vec::new();\n \n     for i in 0..events.len() {\n@@ -117,15 +117,17 @@ pub(super) fn process(sink: &mut dyn TreeSink, mut events: Vec<Event>) {\n \n                 for kind in forward_parents.drain(..).rev() {\n                     if kind != TOMBSTONE {\n-                        sink.start_node(kind);\n+                        res.enter_node(kind);\n                     }\n                 }\n             }\n-            Event::Finish => sink.finish_node(),\n+            Event::Finish => res.leave_node(),\n             Event::Token { kind, n_raw_tokens } => {\n-                sink.token(kind, n_raw_tokens);\n+                res.token(kind, n_raw_tokens);\n             }\n-            Event::Error { msg } => sink.error(msg),\n+            Event::Error { msg } => res.error(msg),\n         }\n     }\n+\n+    res\n }"}, {"sha": "67bc7d99065a8011ed0ca2dcbd1f25fa5c3f409f", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=d0d05075ed52aa22dfec36b5a7b23e6a1a554496", "patch": "@@ -25,31 +25,19 @@ mod event;\n mod parser;\n mod grammar;\n mod tokens;\n+mod tree_traversal;\n \n #[cfg(test)]\n mod tests;\n \n pub(crate) use token_set::TokenSet;\n \n-pub use crate::{lexed_str::LexedStr, syntax_kind::SyntaxKind, tokens::Tokens};\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ParseError(pub Box<String>);\n-\n-/// `TreeSink` abstracts details of a particular syntax tree implementation.\n-pub trait TreeSink {\n-    /// Adds new token to the current branch.\n-    fn token(&mut self, kind: SyntaxKind, n_tokens: u8);\n-\n-    /// Start new branch and make it current.\n-    fn start_node(&mut self, kind: SyntaxKind);\n-\n-    /// Finish current branch and restore previous\n-    /// branch as current.\n-    fn finish_node(&mut self);\n-\n-    fn error(&mut self, error: ParseError);\n-}\n+pub use crate::{\n+    lexed_str::LexedStr,\n+    syntax_kind::SyntaxKind,\n+    tokens::Tokens,\n+    tree_traversal::{TraversalStep, TreeTraversal},\n+};\n \n /// rust-analyzer parser allows you to choose one of the possible entry points.\n ///\n@@ -74,11 +62,11 @@ pub enum ParserEntryPoint {\n }\n \n /// Parse given tokens into the given sink as a rust file.\n-pub fn parse_source_file(tokens: &Tokens, tree_sink: &mut dyn TreeSink) {\n-    parse(tokens, tree_sink, ParserEntryPoint::SourceFile);\n+pub fn parse_source_file(tokens: &Tokens) -> TreeTraversal {\n+    parse(tokens, ParserEntryPoint::SourceFile)\n }\n \n-pub fn parse(tokens: &Tokens, tree_sink: &mut dyn TreeSink, entry_point: ParserEntryPoint) {\n+pub fn parse(tokens: &Tokens, entry_point: ParserEntryPoint) -> TreeTraversal {\n     let entry_point: fn(&'_ mut parser::Parser) = match entry_point {\n         ParserEntryPoint::SourceFile => grammar::entry_points::source_file,\n         ParserEntryPoint::Path => grammar::entry_points::path,\n@@ -99,7 +87,7 @@ pub fn parse(tokens: &Tokens, tree_sink: &mut dyn TreeSink, entry_point: ParserE\n     let mut p = parser::Parser::new(tokens);\n     entry_point(&mut p);\n     let events = p.finish();\n-    event::process(tree_sink, events);\n+    event::process(events)\n }\n \n /// A parsing function for a specific braced-block.\n@@ -119,11 +107,11 @@ impl Reparser {\n     ///\n     /// Tokens must start with `{`, end with `}` and form a valid brace\n     /// sequence.\n-    pub fn parse(self, tokens: &Tokens, tree_sink: &mut dyn TreeSink) {\n+    pub fn parse(self, tokens: &Tokens) -> TreeTraversal {\n         let Reparser(r) = self;\n         let mut p = parser::Parser::new(tokens);\n         r(&mut p);\n         let events = p.finish();\n-        event::process(tree_sink, events);\n+        event::process(events)\n     }\n }"}, {"sha": "4fc734f9c6db70d5d238e2a4cdd417cfd80cba35", "filename": "crates/parser/src/parser.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fparser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fparser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fparser.rs?ref=d0d05075ed52aa22dfec36b5a7b23e6a1a554496", "patch": "@@ -8,7 +8,6 @@ use limit::Limit;\n use crate::{\n     event::Event,\n     tokens::Tokens,\n-    ParseError,\n     SyntaxKind::{self, EOF, ERROR, TOMBSTONE},\n     TokenSet, T,\n };\n@@ -196,7 +195,7 @@ impl<'t> Parser<'t> {\n     /// structured errors with spans and notes, like rustc\n     /// does.\n     pub(crate) fn error<T: Into<String>>(&mut self, message: T) {\n-        let msg = ParseError(Box::new(message.into()));\n+        let msg = message.into();\n         self.push_event(Event::Error { msg });\n     }\n "}, {"sha": "4b3a64c85c1717d563072f6bbef6a01f440a046f", "filename": "crates/parser/src/tree_traversal.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fparser%2Fsrc%2Ftree_traversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fparser%2Fsrc%2Ftree_traversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftree_traversal.rs?ref=d0d05075ed52aa22dfec36b5a7b23e6a1a554496", "patch": "@@ -0,0 +1,67 @@\n+//! TODO\n+use crate::SyntaxKind;\n+\n+/// Output of the parser.\n+#[derive(Default)]\n+pub struct TreeTraversal {\n+    /// 32-bit encoding of events. If LSB is zero, then that's an index into the\n+    /// error vector. Otherwise, it's one of the thee other variants, with data encoded as\n+    ///\n+    ///     |16 bit kind|8 bit n_raw_tokens|4 bit tag|4 bit leftover|\n+    ///\n+    event: Vec<u32>,\n+    error: Vec<String>,\n+}\n+\n+pub enum TraversalStep<'a> {\n+    Token { kind: SyntaxKind, n_raw_tokens: u8 },\n+    EnterNode { kind: SyntaxKind },\n+    LeaveNode,\n+    Error { msg: &'a str },\n+}\n+\n+impl TreeTraversal {\n+    pub fn iter(&self) -> impl Iterator<Item = TraversalStep<'_>> {\n+        self.event.iter().map(|&event| {\n+            if event & 0b1 == 0 {\n+                return TraversalStep::Error { msg: self.error[(event as usize) >> 1].as_str() };\n+            }\n+            let tag = ((event & 0x0000_00F0) >> 4) as u8;\n+            match tag {\n+                0 => {\n+                    let kind: SyntaxKind = (((event & 0xFFFF_0000) >> 16) as u16).into();\n+                    let n_raw_tokens = ((event & 0x0000_FF00) >> 8) as u8;\n+                    TraversalStep::Token { kind, n_raw_tokens }\n+                }\n+                1 => {\n+                    let kind: SyntaxKind = (((event & 0xFFFF_0000) >> 16) as u16).into();\n+                    TraversalStep::EnterNode { kind }\n+                }\n+                2 => TraversalStep::LeaveNode,\n+                _ => unreachable!(),\n+            }\n+        })\n+    }\n+\n+    pub(crate) fn token(&mut self, kind: SyntaxKind, n_tokens: u8) {\n+        let e = ((kind as u16 as u32) << 16) | ((n_tokens as u32) << 8) | (0 << 4) | 1;\n+        self.event.push(e)\n+    }\n+\n+    pub(crate) fn enter_node(&mut self, kind: SyntaxKind) {\n+        let e = ((kind as u16 as u32) << 16) | (1 << 4) | 1;\n+        self.event.push(e)\n+    }\n+\n+    pub(crate) fn leave_node(&mut self) {\n+        let e = 2 << 4 | 1;\n+        self.event.push(e)\n+    }\n+\n+    pub(crate) fn error(&mut self, error: String) {\n+        let idx = self.error.len();\n+        self.error.push(error);\n+        let e = (idx as u32) << 1;\n+        self.event.push(e);\n+    }\n+}"}, {"sha": "6721e5aa81aacb565ce0005a4efcb9be2589d645", "filename": "crates/syntax/src/parsing.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fsyntax%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fsyntax%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing.rs?ref=d0d05075ed52aa22dfec36b5a7b23e6a1a554496", "patch": "@@ -4,24 +4,18 @@\n mod text_tree_sink;\n mod reparsing;\n \n-use parser::SyntaxKind;\n-use text_tree_sink::TextTreeSink;\n-\n-use crate::{syntax_node::GreenNode, AstNode, SyntaxError, SyntaxNode};\n+use crate::{\n+    parsing::text_tree_sink::build_tree, syntax_node::GreenNode, AstNode, SyntaxError, SyntaxNode,\n+};\n \n pub(crate) use crate::parsing::reparsing::incremental_reparse;\n \n pub(crate) fn parse_text(text: &str) -> (GreenNode, Vec<SyntaxError>) {\n     let lexed = parser::LexedStr::new(text);\n     let parser_tokens = lexed.to_tokens();\n-\n-    let mut tree_sink = TextTreeSink::new(lexed);\n-\n-    parser::parse_source_file(&parser_tokens, &mut tree_sink);\n-\n-    let (tree, parser_errors) = tree_sink.finish();\n-\n-    (tree, parser_errors)\n+    let tree_traversal = parser::parse_source_file(&parser_tokens);\n+    let (node, errors, _eof) = build_tree(lexed, tree_traversal, false);\n+    (node, errors)\n }\n \n /// Returns `text` parsed as a `T` provided there are no parse errors.\n@@ -34,20 +28,12 @@ pub(crate) fn parse_text_as<T: AstNode>(\n         return Err(());\n     }\n     let parser_tokens = lexed.to_tokens();\n+    let tree_traversal = parser::parse(&parser_tokens, entry_point);\n+    let (node, errors, eof) = build_tree(lexed, tree_traversal, true);\n \n-    let mut tree_sink = TextTreeSink::new(lexed);\n-\n-    // TextTreeSink assumes that there's at least some root node to which it can attach errors and\n-    // tokens. We arbitrarily give it a SourceFile.\n-    use parser::TreeSink;\n-    tree_sink.start_node(SyntaxKind::SOURCE_FILE);\n-    parser::parse(&parser_tokens, &mut tree_sink, entry_point);\n-    tree_sink.finish_node();\n-\n-    let (tree, parser_errors, eof) = tree_sink.finish_eof();\n-    if !parser_errors.is_empty() || !eof {\n+    if !errors.is_empty() || !eof {\n         return Err(());\n     }\n \n-    SyntaxNode::new_root(tree).first_child().and_then(T::cast).ok_or(())\n+    SyntaxNode::new_root(node).first_child().and_then(T::cast).ok_or(())\n }"}, {"sha": "dca97a7f583a96b1947c0c533c5baabd7116637f", "filename": "crates/syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=d0d05075ed52aa22dfec36b5a7b23e6a1a554496", "patch": "@@ -10,7 +10,7 @@ use parser::Reparser;\n use text_edit::Indel;\n \n use crate::{\n-    parsing::text_tree_sink::TextTreeSink,\n+    parsing::text_tree_sink::build_tree,\n     syntax_node::{GreenNode, GreenToken, NodeOrToken, SyntaxElement, SyntaxNode},\n     SyntaxError,\n     SyntaxKind::*,\n@@ -94,11 +94,9 @@ fn reparse_block(\n         return None;\n     }\n \n-    let mut tree_sink = TextTreeSink::new(lexed);\n+    let tree_traversal = reparser.parse(&parser_tokens);\n \n-    reparser.parse(&parser_tokens, &mut tree_sink);\n-\n-    let (green, new_parser_errors) = tree_sink.finish();\n+    let (green, new_parser_errors, _eof) = build_tree(lexed, tree_traversal, false);\n \n     Some((node.replace_with(green), new_parser_errors, node.text_range()))\n }"}, {"sha": "c435791746be023b27c241a7846dbafc028b6fe4", "filename": "crates/syntax/src/parsing/text_tree_sink.rs", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs?ref=d0d05075ed52aa22dfec36b5a7b23e6a1a554496", "patch": "@@ -2,7 +2,7 @@\n \n use std::mem;\n \n-use parser::{LexedStr, ParseError, TreeSink};\n+use parser::{LexedStr, TreeTraversal};\n \n use crate::{\n     ast,\n@@ -12,6 +12,36 @@ use crate::{\n     SyntaxTreeBuilder, TextRange,\n };\n \n+pub(crate) fn build_tree(\n+    lexed: LexedStr<'_>,\n+    tree_traversal: TreeTraversal,\n+    synthetic_root: bool,\n+) -> (GreenNode, Vec<SyntaxError>, bool) {\n+    let mut builder = TextTreeSink::new(lexed);\n+\n+    if synthetic_root {\n+        builder.start_node(SyntaxKind::SOURCE_FILE);\n+    }\n+\n+    for event in tree_traversal.iter() {\n+        match event {\n+            parser::TraversalStep::Token { kind, n_raw_tokens } => {\n+                builder.token(kind, n_raw_tokens)\n+            }\n+            parser::TraversalStep::EnterNode { kind } => builder.start_node(kind),\n+            parser::TraversalStep::LeaveNode => builder.finish_node(),\n+            parser::TraversalStep::Error { msg } => {\n+                let text_pos = builder.lexed.text_start(builder.pos).try_into().unwrap();\n+                builder.inner.error(msg.to_string(), text_pos);\n+            }\n+        }\n+    }\n+    if synthetic_root {\n+        builder.finish_node()\n+    }\n+    builder.finish_eof()\n+}\n+\n /// Bridges the parser with our specific syntax tree representation.\n ///\n /// `TextTreeSink` also handles attachment of trivia (whitespace) to nodes.\n@@ -28,7 +58,7 @@ enum State {\n     PendingFinish,\n }\n \n-impl<'a> TreeSink for TextTreeSink<'a> {\n+impl<'a> TextTreeSink<'a> {\n     fn token(&mut self, kind: SyntaxKind, n_tokens: u8) {\n         match mem::replace(&mut self.state, State::Normal) {\n             State::PendingStart => unreachable!(),\n@@ -70,11 +100,6 @@ impl<'a> TreeSink for TextTreeSink<'a> {\n             State::Normal => (),\n         }\n     }\n-\n-    fn error(&mut self, error: ParseError) {\n-        let text_pos = self.lexed.text_start(self.pos).try_into().unwrap();\n-        self.inner.error(error, text_pos);\n-    }\n }\n \n impl<'a> TextTreeSink<'a> {\n@@ -106,11 +131,6 @@ impl<'a> TextTreeSink<'a> {\n         (node, errors, is_eof)\n     }\n \n-    pub(super) fn finish(self) -> (GreenNode, Vec<SyntaxError>) {\n-        let (node, errors, _eof) = self.finish_eof();\n-        (node, errors)\n-    }\n-\n     fn eat_trivias(&mut self) {\n         while self.pos < self.lexed.len() {\n             let kind = self.lexed.kind(self.pos);"}, {"sha": "b96f10c1730e6ddef99209dab0bcb13831657209", "filename": "crates/syntax/src/syntax_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d05075ed52aa22dfec36b5a7b23e6a1a554496/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs?ref=d0d05075ed52aa22dfec36b5a7b23e6a1a554496", "patch": "@@ -69,7 +69,7 @@ impl SyntaxTreeBuilder {\n         self.inner.finish_node();\n     }\n \n-    pub fn error(&mut self, error: parser::ParseError, text_pos: TextSize) {\n-        self.errors.push(SyntaxError::new_at_offset(*error.0, text_pos));\n+    pub fn error(&mut self, error: String, text_pos: TextSize) {\n+        self.errors.push(SyntaxError::new_at_offset(error, text_pos));\n     }\n }"}]}