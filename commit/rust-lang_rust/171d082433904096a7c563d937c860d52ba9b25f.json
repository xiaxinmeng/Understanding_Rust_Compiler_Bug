{"sha": "171d082433904096a7c563d937c860d52ba9b25f", "node_id": "C_kwDOAAsO6NoAKDE3MWQwODI0MzM5MDQwOTZhN2M1NjNkOTM3Yzg2MGQ1MmJhOWIyNWY", "commit": {"author": {"name": "Allen Hsu", "email": "allen@thelookoutway.com", "date": "2022-07-12T12:29:12Z"}, "committer": {"name": "Allen Hsu", "email": "allen.hsusp+git@gmail.com", "date": "2022-08-02T12:00:04Z"}, "message": "Compare where predicates to trait bounds.\n\n- only compare where predicates to trait bounds when generating where\n  clause specific message to fix #9151\n- use comparable_trait_ref to account for trait bound generics to fix #8757", "tree": {"sha": "4087f0918955a4bf998faadd0dd12dfbc9c74912", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4087f0918955a4bf998faadd0dd12dfbc9c74912"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/171d082433904096a7c563d937c860d52ba9b25f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/171d082433904096a7c563d937c860d52ba9b25f", "html_url": "https://github.com/rust-lang/rust/commit/171d082433904096a7c563d937c860d52ba9b25f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/171d082433904096a7c563d937c860d52ba9b25f/comments", "author": {"login": "aldhsu", "id": 6347283, "node_id": "MDQ6VXNlcjYzNDcyODM=", "avatar_url": "https://avatars.githubusercontent.com/u/6347283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldhsu", "html_url": "https://github.com/aldhsu", "followers_url": "https://api.github.com/users/aldhsu/followers", "following_url": "https://api.github.com/users/aldhsu/following{/other_user}", "gists_url": "https://api.github.com/users/aldhsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldhsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldhsu/subscriptions", "organizations_url": "https://api.github.com/users/aldhsu/orgs", "repos_url": "https://api.github.com/users/aldhsu/repos", "events_url": "https://api.github.com/users/aldhsu/events{/privacy}", "received_events_url": "https://api.github.com/users/aldhsu/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d72e5f2e10d6b31bf2e3e26ecc389d1f53833655", "url": "https://api.github.com/repos/rust-lang/rust/commits/d72e5f2e10d6b31bf2e3e26ecc389d1f53833655", "html_url": "https://github.com/rust-lang/rust/commit/d72e5f2e10d6b31bf2e3e26ecc389d1f53833655"}], "stats": {"total": 121, "additions": 50, "deletions": 71}, "files": [{"sha": "537e6eafb175ecd71fe89b551c51346badc9c5ad", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 49, "deletions": 22, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/171d082433904096a7c563d937c860d52ba9b25f/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/171d082433904096a7c563d937c860d52ba9b25f/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=171d082433904096a7c563d937c860d52ba9b25f", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::{SpanlessEq, SpanlessHash};\n use core::hash::{Hash, Hasher};\n use if_chain::if_chain;\n use itertools::Itertools;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n@@ -238,31 +238,58 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n         return;\n     }\n \n-    let mut map = FxHashMap::<_, Vec<_>>::default();\n-    for predicate in gen.predicates {\n+    // Explanation:\n+    // fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n+    // where T: Clone + Default, { unimplemented!(); }\n+    //       ^^^^^^^^^^^^^^^^^^\n+    //       |\n+    // collects each of these where clauses into a set keyed by generic name and comparable trait\n+    // eg. (T, Clone)\n+    let where_predicates = gen\n+        .predicates\n+        .iter()\n+        .filter_map(|pred| {\n+            if_chain! {\n+                if pred.in_where_clause();\n+                if let WherePredicate::BoundPredicate(bound_predicate) = pred;\n+                if let TyKind::Path(QPath::Resolved(_, path)) =  bound_predicate.bounded_ty.kind;\n+                then {\n+                    return Some(bound_predicate.bounds.iter().filter_map(|t| {\n+                        Some((path.res, into_comparable_trait_ref(t.trait_ref()?)))\n+                    }))\n+                }\n+            }\n+            None\n+        })\n+        .flatten()\n+        .collect::<FxHashSet<_>>();\n+\n+    // Explanation:\n+    // fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z) ...\n+    //            ^^^^^^^^^^^^^^^^^^  ^^^^^^^\n+    //            |\n+    // compare trait bounds keyed by generic name and comparable trait to collected where\n+    // predicates eg. (T, Clone)\n+    for predicate in gen.predicates.iter().filter(|pred| !pred.in_where_clause()) {\n         if_chain! {\n-            if let WherePredicate::BoundPredicate(ref bound_predicate) = predicate;\n+            if let WherePredicate::BoundPredicate(bound_predicate) = predicate;\n             if bound_predicate.origin != PredicateOrigin::ImplTrait;\n             if !bound_predicate.span.from_expansion();\n-            if let TyKind::Path(QPath::Resolved(_, Path { segments, .. })) = bound_predicate.bounded_ty.kind;\n-            if let Some(segment) = segments.first();\n+            if let TyKind::Path(QPath::Resolved(_, path)) =  bound_predicate.bounded_ty.kind;\n             then {\n-                for (res_where, _, span_where) in bound_predicate.bounds.iter().filter_map(get_trait_info_from_bound) {\n-                    let trait_resolutions_direct = map.entry(segment.ident).or_default();\n-                    if let Some((_, span_direct)) = trait_resolutions_direct\n-                                                .iter()\n-                                                .find(|(res_direct, _)| *res_direct == res_where) {\n-                        span_lint_and_help(\n-                            cx,\n-                            TRAIT_DUPLICATION_IN_BOUNDS,\n-                            *span_direct,\n-                            \"this trait bound is already specified in the where clause\",\n-                            None,\n-                            \"consider removing this trait bound\",\n-                        );\n-                    }\n-                    else {\n-                        trait_resolutions_direct.push((res_where, span_where));\n+                for t in bound_predicate.bounds {\n+                    if let Some(trait_ref) = t.trait_ref() {\n+                        let key = (path.res, into_comparable_trait_ref(trait_ref));\n+                        if where_predicates.contains(&key) {\n+                            span_lint_and_help(\n+                                cx,\n+                                TRAIT_DUPLICATION_IN_BOUNDS,\n+                                t.span(),\n+                                \"this trait bound is already specified in the where clause\",\n+                                None,\n+                                \"consider removing this trait bound\",\n+                                );\n+                        }\n                     }\n                 }\n             }"}, {"sha": "9b603fdea32735887485cf39fc6487fb1ed3ca83", "filename": "tests/ui/trait_duplication_in_bounds.stderr", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/171d082433904096a7c563d937c860d52ba9b25f/tests%2Fui%2Ftrait_duplication_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/171d082433904096a7c563d937c860d52ba9b25f/tests%2Fui%2Ftrait_duplication_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.stderr?ref=171d082433904096a7c563d937c860d52ba9b25f", "patch": "@@ -67,28 +67,12 @@ LL |         Self: Iterator<Item = Foo>,\n    |\n    = help: consider removing this trait bound\n \n-error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds.rs:103:19\n-   |\n-LL |     fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {\n-   |                   ^^^^^\n-   |\n-   = help: consider removing this trait bound\n-\n error: these bounds contain repeated elements\n   --> $DIR/trait_duplication_in_bounds.rs:103:19\n    |\n LL |     fn bad_foo<T: Clone + Clone + Clone + Copy, U: Clone + Copy>(arg0: T, argo1: U) {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n \n-error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds.rs:109:12\n-   |\n-LL |         T: Clone + Clone + Clone + Copy,\n-   |            ^^^^^\n-   |\n-   = help: consider removing this trait bound\n-\n error: these where clauses contain repeated elements\n   --> $DIR/trait_duplication_in_bounds.rs:109:12\n    |\n@@ -107,14 +91,6 @@ error: these where clauses contain repeated elements\n LL |             Self: Clone + Clone + Clone;\n    |                   ^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone`\n \n-error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds.rs:158:28\n-   |\n-LL |     trait BadTraitBound<T: Clone + Clone + Clone + Copy, U: Clone + Copy> {\n-   |                            ^^^^^\n-   |\n-   = help: consider removing this trait bound\n-\n error: these bounds contain repeated elements\n   --> $DIR/trait_duplication_in_bounds.rs:158:28\n    |\n@@ -127,41 +103,17 @@ error: these where clauses contain repeated elements\n LL |             T: Clone + Clone + Clone + Copy,\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + Copy`\n \n-error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds.rs:195:24\n-   |\n-LL |     fn good_generic<T: GenericTrait<u64> + GenericTrait<u32>>(arg0: T) {\n-   |                        ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider removing this trait bound\n-\n-error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds.rs:199:23\n-   |\n-LL |     fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {\n-   |                       ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider removing this trait bound\n-\n error: these bounds contain repeated elements\n   --> $DIR/trait_duplication_in_bounds.rs:199:23\n    |\n LL |     fn bad_generic<T: GenericTrait<u64> + GenericTrait<u32> + GenericTrait<u64>>(arg0: T) {\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `GenericTrait<u32> + GenericTrait<u64>`\n \n-error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds.rs:207:26\n-   |\n-LL |     fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {\n-   |                          ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider removing this trait bound\n-\n error: these bounds contain repeated elements\n   --> $DIR/trait_duplication_in_bounds.rs:207:26\n    |\n LL |     fn qualified_path<T: std::clone::Clone + Clone + foo::Clone>(arg0: T) {\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Clone + foo::Clone`\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 16 previous errors\n "}]}