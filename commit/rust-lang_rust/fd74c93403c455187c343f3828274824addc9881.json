{"sha": "fd74c93403c455187c343f3828274824addc9881", "node_id": "C_kwDOAAsO6NoAKGZkNzRjOTM0MDNjNDU1MTg3YzM0M2YzODI4Mjc0ODI0YWRkYzk4ODE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-09T18:00:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-09T18:00:40Z"}, "message": "Rollup merge of #89561 - nbdd0121:const_typeck, r=nikomatsakis\n\nType inference for inline consts\n\nFixes #78132\nFixes #78174\nFixes #81857\nFixes #89964\n\nPerform type checking/inference of inline consts in the same context as the outer def, similar to what is currently done to closure.\n\nDoing so would require `closure_base_def_id` of the inline const to return the outer def, and since `closure_base_def_id` can be called on non-local crate (and thus have no HIR available), a new `DefKind` is created for inline consts.\n\nThe type of the generated anon const can capture lifetime of outer def, so we couldn't just use the typeck result as the type of the inline const's def. Closure has a similar issue, and it uses extra type params `CK, CS, U` to capture closure kind, input/output signature and upvars. I use a similar approach for inline consts, letting it have an extra type param `R`, and then `typeof(InlineConst<[paremt generics], R>)` would just be `R`. In borrowck region requirements are also propagated to the outer MIR body just like it's currently done for closure.\n\nWith this PR, inline consts in expression position are quitely usable now; however the usage in pattern position is still incomplete -- since those does not remain in the MIR borrowck couldn't verify the lifetime there. I have left an ignored test as a FIXME.\n\nSome disucssions can be found on [this Zulip thread](https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics/topic/inline.20consts.20typeck).\ncc `````@spastorino````` `````@lcnr`````\nr? `````@nikomatsakis`````\n\n`````@rustbot````` label A-inference F-inline_const T-compiler", "tree": {"sha": "bdcf50ae64468ad4e0e9e213b3b956cd0a2ed1e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdcf50ae64468ad4e0e9e213b3b956cd0a2ed1e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd74c93403c455187c343f3828274824addc9881", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhirdICRBK7hj4Ov3rIwAA1NMIABN9zzHC3zeDRwES43E2oFIH\nhWgTzQ1R2DC23+4LrSgahNTMHFpc6sS9mI6sabY62r0Hioz2Cv335WzNFom3ISEr\nphdL8OFlnIhxQVdCizFD9E1ySKv+zygTfo1wqK0KUQYI7xkh/QSa60EK7cbW66Lu\niVlNxORCTfPOkNHdjvBfu3SLi6/uQbS/kts+aKWQ2DFj9u7SgWUyBJpG2+sfBWpf\nU4oJg9+VcEL9a9i8XQkcpUgfwxG6UurPcRV5sss6rz8KzE66fWM6HkmsFiyHMZNU\neJNa7TiolKUTK/c/QRrmE02skVYxROHkQA+n/7oBITdypWHjXia3cC5qxn8DPnQ=\n=OPc7\n-----END PGP SIGNATURE-----\n", "payload": "tree bdcf50ae64468ad4e0e9e213b3b956cd0a2ed1e3\nparent 07acdb48a0e0b22d08a45e3ced0378e0027b40eb\nparent c4103d438fa922edbe5c40085f40b96656c6b18a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1636480840 +0100\ncommitter GitHub <noreply@github.com> 1636480840 +0100\n\nRollup merge of #89561 - nbdd0121:const_typeck, r=nikomatsakis\n\nType inference for inline consts\n\nFixes #78132\nFixes #78174\nFixes #81857\nFixes #89964\n\nPerform type checking/inference of inline consts in the same context as the outer def, similar to what is currently done to closure.\n\nDoing so would require `closure_base_def_id` of the inline const to return the outer def, and since `closure_base_def_id` can be called on non-local crate (and thus have no HIR available), a new `DefKind` is created for inline consts.\n\nThe type of the generated anon const can capture lifetime of outer def, so we couldn't just use the typeck result as the type of the inline const's def. Closure has a similar issue, and it uses extra type params `CK, CS, U` to capture closure kind, input/output signature and upvars. I use a similar approach for inline consts, letting it have an extra type param `R`, and then `typeof(InlineConst<[paremt generics], R>)` would just be `R`. In borrowck region requirements are also propagated to the outer MIR body just like it's currently done for closure.\n\nWith this PR, inline consts in expression position are quitely usable now; however the usage in pattern position is still incomplete -- since those does not remain in the MIR borrowck couldn't verify the lifetime there. I have left an ignored test as a FIXME.\n\nSome disucssions can be found on [this Zulip thread](https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics/topic/inline.20consts.20typeck).\ncc `````@spastorino````` `````@lcnr`````\nr? `````@nikomatsakis`````\n\n`````@rustbot````` label A-inference F-inline_const T-compiler\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd74c93403c455187c343f3828274824addc9881", "html_url": "https://github.com/rust-lang/rust/commit/fd74c93403c455187c343f3828274824addc9881", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd74c93403c455187c343f3828274824addc9881/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/07acdb48a0e0b22d08a45e3ced0378e0027b40eb", "html_url": "https://github.com/rust-lang/rust/commit/07acdb48a0e0b22d08a45e3ced0378e0027b40eb"}, {"sha": "c4103d438fa922edbe5c40085f40b96656c6b18a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4103d438fa922edbe5c40085f40b96656c6b18a", "html_url": "https://github.com/rust-lang/rust/commit/c4103d438fa922edbe5c40085f40b96656c6b18a"}], "stats": {"total": 775, "additions": 656, "deletions": 119}, "files": [{"sha": "46a3c0fa1015248cfcc806148757693432b26c00", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -408,7 +408,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     let param = generics.type_param(&param_ty, tcx);\n                     if let Some(generics) = tcx\n                         .hir()\n-                        .get_generics(tcx.closure_base_def_id(self.mir_def_id().to_def_id()))\n+                        .get_generics(tcx.typeck_root_def_id(self.mir_def_id().to_def_id()))\n                     {\n                         suggest_constraining_type_param(\n                             tcx,"}, {"sha": "6ffab16577908fcbc747a0a4ff2d5b72620628fb", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -376,7 +376,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n     errors_buffer: &mut Vec<Diagnostic>,\n ) {\n     let tcx = infcx.tcx;\n-    let base_def_id = tcx.closure_base_def_id(body.source.def_id());\n+    let base_def_id = tcx.typeck_root_def_id(body.source.def_id());\n     if !tcx.has_attr(base_def_id, sym::rustc_regions) {\n         return;\n     }"}, {"sha": "b39a28f79aaddc3f2eda6882bf5bd7b934fb2f9b", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -569,7 +569,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // to store those. Otherwise, we'll pass in `None` to the\n         // functions below, which will trigger them to report errors\n         // eagerly.\n-        let mut outlives_requirements = infcx.tcx.is_closure(mir_def_id).then(Vec::new);\n+        let mut outlives_requirements = infcx.tcx.is_typeck_child(mir_def_id).then(Vec::new);\n \n         self.check_type_tests(infcx, body, outlives_requirements.as_mut(), &mut errors_buffer);\n \n@@ -2229,7 +2229,7 @@ impl<'tcx> ClosureRegionRequirementsExt<'tcx> for ClosureRegionRequirements<'tcx\n             tcx,\n             closure_substs,\n             self.num_external_vids,\n-            tcx.closure_base_def_id(closure_def_id),\n+            tcx.typeck_root_def_id(closure_def_id),\n         );\n         debug!(\"apply_requirements: closure_mapping={:?}\", closure_mapping);\n "}, {"sha": "ddd077c22faf86662dfb93c482f2374dc249cd07", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 88, "deletions": 13, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -10,6 +10,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::{Idx, IndexVec};\n@@ -1343,13 +1344,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // though.\n                 let category = match place.as_local() {\n                     Some(RETURN_PLACE) => {\n-                        if let BorrowCheckContext {\n-                            universal_regions:\n-                                UniversalRegions { defining_ty: DefiningTy::Const(def_id, _), .. },\n-                            ..\n-                        } = self.borrowck_context\n-                        {\n-                            if tcx.is_static(*def_id) {\n+                        let defining_ty = &self.borrowck_context.universal_regions.defining_ty;\n+                        if defining_ty.is_const() {\n+                            if tcx.is_static(defining_ty.def_id()) {\n                                 ConstraintCategory::UseAsStatic\n                             } else {\n                                 ConstraintCategory::UseAsConst\n@@ -1527,6 +1524,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n             }\n             TerminatorKind::SwitchInt { ref discr, switch_ty, .. } => {\n+                self.check_operand(discr, term_location);\n+\n                 let discr_ty = discr.ty(body, tcx);\n                 if let Err(terr) = self.sub_types(\n                     discr_ty,\n@@ -1549,6 +1548,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // FIXME: check the values\n             }\n             TerminatorKind::Call { ref func, ref args, ref destination, from_hir_call, .. } => {\n+                self.check_operand(func, term_location);\n+                for arg in args {\n+                    self.check_operand(arg, term_location);\n+                }\n+\n                 let func_ty = func.ty(body, tcx);\n                 debug!(\"check_terminator: call, func_ty={:?}\", func_ty);\n                 let sig = match func_ty.kind() {\n@@ -1593,6 +1597,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 self.check_call_inputs(body, term, &sig, args, term_location, from_hir_call);\n             }\n             TerminatorKind::Assert { ref cond, ref msg, .. } => {\n+                self.check_operand(cond, term_location);\n+\n                 let cond_ty = cond.ty(body, tcx);\n                 if cond_ty != tcx.types.bool {\n                     span_mirbug!(self, term, \"bad Assert ({:?}, not bool\", cond_ty);\n@@ -1608,6 +1614,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n             }\n             TerminatorKind::Yield { ref value, .. } => {\n+                self.check_operand(value, term_location);\n+\n                 let value_ty = value.ty(body, tcx);\n                 match body.yield_ty() {\n                     None => span_mirbug!(self, term, \"yield in non-generator\"),\n@@ -1650,7 +1658,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     Some(RETURN_PLACE) => {\n                         if let BorrowCheckContext {\n                             universal_regions:\n-                                UniversalRegions { defining_ty: DefiningTy::Const(def_id, _), .. },\n+                                UniversalRegions {\n+                                    defining_ty:\n+                                        DefiningTy::Const(def_id, _)\n+                                        | DefiningTy::InlineConst(def_id, _),\n+                                    ..\n+                                },\n                             ..\n                         } = self.borrowck_context\n                         {\n@@ -1931,15 +1944,51 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         }\n     }\n \n+    fn check_operand(&mut self, op: &Operand<'tcx>, location: Location) {\n+        if let Operand::Constant(constant) = op {\n+            let maybe_uneval = match constant.literal {\n+                ConstantKind::Ty(ct) => match ct.val {\n+                    ty::ConstKind::Unevaluated(uv) => Some(uv),\n+                    _ => None,\n+                },\n+                _ => None,\n+            };\n+            if let Some(uv) = maybe_uneval {\n+                if uv.promoted.is_none() {\n+                    let tcx = self.tcx();\n+                    let def_id = uv.def.def_id_for_type_of();\n+                    if tcx.def_kind(def_id) == DefKind::InlineConst {\n+                        let predicates = self.prove_closure_bounds(\n+                            tcx,\n+                            def_id.expect_local(),\n+                            uv.substs(tcx),\n+                            location,\n+                        );\n+                        self.normalize_and_prove_instantiated_predicates(\n+                            def_id,\n+                            predicates,\n+                            location.to_locations(),\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     fn check_rvalue(&mut self, body: &Body<'tcx>, rvalue: &Rvalue<'tcx>, location: Location) {\n         let tcx = self.tcx();\n \n         match rvalue {\n             Rvalue::Aggregate(ak, ops) => {\n+                for op in ops {\n+                    self.check_operand(op, location);\n+                }\n                 self.check_aggregate_rvalue(&body, rvalue, ak, ops, location)\n             }\n \n             Rvalue::Repeat(operand, len) => {\n+                self.check_operand(operand, location);\n+\n                 // If the length cannot be evaluated we must assume that the length can be larger\n                 // than 1.\n                 // If the length is larger than 1, the repeat expression will need to copy the\n@@ -1990,7 +2039,22 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n             }\n \n-            Rvalue::NullaryOp(_, ty) | Rvalue::ShallowInitBox(_, ty) => {\n+            Rvalue::NullaryOp(_, ty) => {\n+                let trait_ref = ty::TraitRef {\n+                    def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n+                    substs: tcx.mk_substs_trait(ty, &[]),\n+                };\n+\n+                self.prove_trait_ref(\n+                    trait_ref,\n+                    location.to_locations(),\n+                    ConstraintCategory::SizedBound,\n+                );\n+            }\n+\n+            Rvalue::ShallowInitBox(operand, ty) => {\n+                self.check_operand(operand, location);\n+\n                 let trait_ref = ty::TraitRef {\n                     def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n                     substs: tcx.mk_substs_trait(ty, &[]),\n@@ -2004,6 +2068,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n \n             Rvalue::Cast(cast_kind, op, ty) => {\n+                self.check_operand(op, location);\n+\n                 match cast_kind {\n                     CastKind::Pointer(PointerCast::ReifyFnPointer) => {\n                         let fn_sig = op.ty(body, tcx).fn_sig(tcx);\n@@ -2250,6 +2316,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 BinOp::Eq | BinOp::Ne | BinOp::Lt | BinOp::Le | BinOp::Gt | BinOp::Ge,\n                 box (left, right),\n             ) => {\n+                self.check_operand(left, location);\n+                self.check_operand(right, location);\n+\n                 let ty_left = left.ty(body, tcx);\n                 match ty_left.kind() {\n                     // Types with regions are comparable if they have a common super-type.\n@@ -2300,13 +2369,19 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n             }\n \n+            Rvalue::Use(operand) | Rvalue::UnaryOp(_, operand) => {\n+                self.check_operand(operand, location);\n+            }\n+\n+            Rvalue::BinaryOp(_, box (left, right))\n+            | Rvalue::CheckedBinaryOp(_, box (left, right)) => {\n+                self.check_operand(left, location);\n+                self.check_operand(right, location);\n+            }\n+\n             Rvalue::AddressOf(..)\n             | Rvalue::ThreadLocalRef(..)\n-            | Rvalue::Use(..)\n             | Rvalue::Len(..)\n-            | Rvalue::BinaryOp(..)\n-            | Rvalue::CheckedBinaryOp(..)\n-            | Rvalue::UnaryOp(..)\n             | Rvalue::Discriminant(..) => {}\n         }\n     }"}, {"sha": "b986df403f9f3f2c97789bad02c2b9720708bd71", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 58, "deletions": 29, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -23,7 +23,7 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n-use rustc_middle::ty::{self, RegionVid, Ty, TyCtxt};\n+use rustc_middle::ty::{self, InlineConstSubsts, InlineConstSubstsParts, RegionVid, Ty, TyCtxt};\n use std::iter;\n \n use crate::nll::ToRegionVid;\n@@ -108,6 +108,10 @@ pub enum DefiningTy<'tcx> {\n     /// is that it has no inputs and a single return value, which is\n     /// the value of the constant.\n     Const(DefId, SubstsRef<'tcx>),\n+\n+    /// The MIR represents an inline const. The signature has no inputs and a\n+    /// single return value found via `InlineConstSubsts::ty`.\n+    InlineConst(DefId, SubstsRef<'tcx>),\n }\n \n impl<'tcx> DefiningTy<'tcx> {\n@@ -121,7 +125,7 @@ impl<'tcx> DefiningTy<'tcx> {\n             DefiningTy::Generator(_, substs, _) => {\n                 Either::Right(Either::Left(substs.as_generator().upvar_tys()))\n             }\n-            DefiningTy::FnDef(..) | DefiningTy::Const(..) => {\n+            DefiningTy::FnDef(..) | DefiningTy::Const(..) | DefiningTy::InlineConst(..) => {\n                 Either::Right(Either::Right(iter::empty()))\n             }\n         }\n@@ -133,7 +137,7 @@ impl<'tcx> DefiningTy<'tcx> {\n     pub fn implicit_inputs(self) -> usize {\n         match self {\n             DefiningTy::Closure(..) | DefiningTy::Generator(..) => 1,\n-            DefiningTy::FnDef(..) | DefiningTy::Const(..) => 0,\n+            DefiningTy::FnDef(..) | DefiningTy::Const(..) | DefiningTy::InlineConst(..) => 0,\n         }\n     }\n \n@@ -142,15 +146,16 @@ impl<'tcx> DefiningTy<'tcx> {\n     }\n \n     pub fn is_const(&self) -> bool {\n-        matches!(*self, DefiningTy::Const(..))\n+        matches!(*self, DefiningTy::Const(..) | DefiningTy::InlineConst(..))\n     }\n \n     pub fn def_id(&self) -> DefId {\n         match *self {\n             DefiningTy::Closure(def_id, ..)\n             | DefiningTy::Generator(def_id, ..)\n             | DefiningTy::FnDef(def_id, ..)\n-            | DefiningTy::Const(def_id, ..) => def_id,\n+            | DefiningTy::Const(def_id, ..)\n+            | DefiningTy::InlineConst(def_id, ..) => def_id,\n         }\n     }\n }\n@@ -242,15 +247,15 @@ impl<'tcx> UniversalRegions<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         closure_substs: SubstsRef<'tcx>,\n         expected_num_vars: usize,\n-        closure_base_def_id: DefId,\n+        typeck_root_def_id: DefId,\n     ) -> IndexVec<RegionVid, ty::Region<'tcx>> {\n         let mut region_mapping = IndexVec::with_capacity(expected_num_vars);\n         region_mapping.push(tcx.lifetimes.re_static);\n         tcx.for_each_free_region(&closure_substs, |fr| {\n             region_mapping.push(fr);\n         });\n \n-        for_each_late_bound_region_defined_on(tcx, closure_base_def_id, |r| {\n+        for_each_late_bound_region_defined_on(tcx, typeck_root_def_id, |r| {\n             region_mapping.push(r);\n         });\n \n@@ -344,8 +349,8 @@ impl<'tcx> UniversalRegions<'tcx> {\n                 // tests, and the resulting print-outs include def-ids\n                 // and other things that are not stable across tests!\n                 // So we just include the region-vid. Annoying.\n-                let closure_base_def_id = tcx.closure_base_def_id(def_id);\n-                for_each_late_bound_region_defined_on(tcx, closure_base_def_id, |r| {\n+                let typeck_root_def_id = tcx.typeck_root_def_id(def_id);\n+                for_each_late_bound_region_defined_on(tcx, typeck_root_def_id, |r| {\n                     err.note(&format!(\"late-bound region is {:?}\", self.to_region_vid(r),));\n                 });\n             }\n@@ -359,8 +364,8 @@ impl<'tcx> UniversalRegions<'tcx> {\n                 // FIXME: As above, we'd like to print out the region\n                 // `r` but doing so is not stable across architectures\n                 // and so forth.\n-                let closure_base_def_id = tcx.closure_base_def_id(def_id);\n-                for_each_late_bound_region_defined_on(tcx, closure_base_def_id, |r| {\n+                let typeck_root_def_id = tcx.typeck_root_def_id(def_id);\n+                for_each_late_bound_region_defined_on(tcx, typeck_root_def_id, |r| {\n                     err.note(&format!(\"late-bound region is {:?}\", self.to_region_vid(r),));\n                 });\n             }\n@@ -376,6 +381,12 @@ impl<'tcx> UniversalRegions<'tcx> {\n                     tcx.def_path_str_with_substs(def_id, substs),\n                 ));\n             }\n+            DefiningTy::InlineConst(def_id, substs) => {\n+                err.note(&format!(\n+                    \"defining inline constant type: {}\",\n+                    tcx.def_path_str_with_substs(def_id, substs),\n+                ));\n+            }\n         }\n     }\n }\n@@ -411,15 +422,15 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         let mut indices = self.compute_indices(fr_static, defining_ty);\n         debug!(\"build: indices={:?}\", indices);\n \n-        let closure_base_def_id = self.infcx.tcx.closure_base_def_id(self.mir_def.did.to_def_id());\n+        let typeck_root_def_id = self.infcx.tcx.typeck_root_def_id(self.mir_def.did.to_def_id());\n \n         // If this is a closure or generator, then the late-bound regions from the enclosing\n         // function are actually external regions to us. For example, here, 'a is not local\n         // to the closure c (although it is local to the fn foo):\n         // fn foo<'a>() {\n         //     let c = || { let x: &'a u32 = ...; }\n         // }\n-        if self.mir_def.did.to_def_id() != closure_base_def_id {\n+        if self.mir_def.did.to_def_id() != typeck_root_def_id {\n             self.infcx\n                 .replace_late_bound_regions_with_nll_infer_vars(self.mir_def.did, &mut indices)\n         }\n@@ -437,7 +448,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         );\n         // Converse of above, if this is a function then the late-bound regions declared on its\n         // signature are local to the fn.\n-        if self.mir_def.did.to_def_id() == closure_base_def_id {\n+        if self.mir_def.did.to_def_id() == typeck_root_def_id {\n             self.infcx\n                 .replace_late_bound_regions_with_nll_infer_vars(self.mir_def.did, &mut indices);\n         }\n@@ -502,12 +513,12 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n     /// see `DefiningTy` for details.\n     fn defining_ty(&self) -> DefiningTy<'tcx> {\n         let tcx = self.infcx.tcx;\n-        let closure_base_def_id = tcx.closure_base_def_id(self.mir_def.did.to_def_id());\n+        let typeck_root_def_id = tcx.typeck_root_def_id(self.mir_def.did.to_def_id());\n \n         match tcx.hir().body_owner_kind(self.mir_hir_id) {\n             BodyOwnerKind::Closure | BodyOwnerKind::Fn => {\n-                let defining_ty = if self.mir_def.did.to_def_id() == closure_base_def_id {\n-                    tcx.type_of(closure_base_def_id)\n+                let defining_ty = if self.mir_def.did.to_def_id() == typeck_root_def_id {\n+                    tcx.type_of(typeck_root_def_id)\n                 } else {\n                     let tables = tcx.typeck(self.mir_def.did);\n                     tables.node_type(self.mir_hir_id)\n@@ -534,11 +545,21 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             }\n \n             BodyOwnerKind::Const | BodyOwnerKind::Static(..) => {\n-                assert_eq!(self.mir_def.did.to_def_id(), closure_base_def_id);\n-                let identity_substs = InternalSubsts::identity_for_item(tcx, closure_base_def_id);\n-                let substs =\n-                    self.infcx.replace_free_regions_with_nll_infer_vars(FR, identity_substs);\n-                DefiningTy::Const(self.mir_def.did.to_def_id(), substs)\n+                let identity_substs = InternalSubsts::identity_for_item(tcx, typeck_root_def_id);\n+                if self.mir_def.did.to_def_id() == typeck_root_def_id {\n+                    let substs =\n+                        self.infcx.replace_free_regions_with_nll_infer_vars(FR, identity_substs);\n+                    DefiningTy::Const(self.mir_def.did.to_def_id(), substs)\n+                } else {\n+                    let ty = tcx.typeck(self.mir_def.did).node_type(self.mir_hir_id);\n+                    let substs = InlineConstSubsts::new(\n+                        tcx,\n+                        InlineConstSubstsParts { parent_substs: identity_substs, ty },\n+                    )\n+                    .substs;\n+                    let substs = self.infcx.replace_free_regions_with_nll_infer_vars(FR, substs);\n+                    DefiningTy::InlineConst(self.mir_def.did.to_def_id(), substs)\n+                }\n             }\n         }\n     }\n@@ -553,17 +574,19 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         defining_ty: DefiningTy<'tcx>,\n     ) -> UniversalRegionIndices<'tcx> {\n         let tcx = self.infcx.tcx;\n-        let closure_base_def_id = tcx.closure_base_def_id(self.mir_def.did.to_def_id());\n-        let identity_substs = InternalSubsts::identity_for_item(tcx, closure_base_def_id);\n+        let typeck_root_def_id = tcx.typeck_root_def_id(self.mir_def.did.to_def_id());\n+        let identity_substs = InternalSubsts::identity_for_item(tcx, typeck_root_def_id);\n         let fr_substs = match defining_ty {\n-            DefiningTy::Closure(_, ref substs) | DefiningTy::Generator(_, ref substs, _) => {\n+            DefiningTy::Closure(_, ref substs)\n+            | DefiningTy::Generator(_, ref substs, _)\n+            | DefiningTy::InlineConst(_, ref substs) => {\n                 // In the case of closures, we rely on the fact that\n                 // the first N elements in the ClosureSubsts are\n-                // inherited from the `closure_base_def_id`.\n+                // inherited from the `typeck_root_def_id`.\n                 // Therefore, when we zip together (below) with\n                 // `identity_substs`, we will get only those regions\n                 // that correspond to early-bound regions declared on\n-                // the `closure_base_def_id`.\n+                // the `typeck_root_def_id`.\n                 assert!(substs.len() >= identity_substs.len());\n                 assert_eq!(substs.regions().count(), identity_substs.regions().count());\n                 substs\n@@ -648,6 +671,12 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                 let ty = indices.fold_to_region_vids(tcx, ty);\n                 ty::Binder::dummy(tcx.intern_type_list(&[ty]))\n             }\n+\n+            DefiningTy::InlineConst(def_id, substs) => {\n+                assert_eq!(self.mir_def.did.to_def_id(), def_id);\n+                let ty = substs.as_inline_const().ty();\n+                ty::Binder::dummy(tcx.intern_type_list(&[ty]))\n+            }\n         }\n     }\n }\n@@ -736,8 +765,8 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n         indices: &mut UniversalRegionIndices<'tcx>,\n     ) {\n         debug!(\"replace_late_bound_regions_with_nll_infer_vars(mir_def_id={:?})\", mir_def_id);\n-        let closure_base_def_id = self.tcx.closure_base_def_id(mir_def_id.to_def_id());\n-        for_each_late_bound_region_defined_on(self.tcx, closure_base_def_id, |r| {\n+        let typeck_root_def_id = self.tcx.typeck_root_def_id(mir_def_id.to_def_id());\n+        for_each_late_bound_region_defined_on(self.tcx, typeck_root_def_id, |r| {\n             debug!(\"replace_late_bound_regions_with_nll_infer_vars: r={:?}\", r);\n             if !indices.indices.contains_key(&r) {\n                 let region_vid = self.next_nll_region_var(FR);"}, {"sha": "2a6bf7d9b1a4ddac535843a25a4c2e052bd79ac1", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -322,7 +322,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         type_names::push_item_name(self.tcx(), def_id, false, &mut name);\n \n         // Find the enclosing function, in case this is a closure.\n-        let enclosing_fn_def_id = self.tcx().closure_base_def_id(def_id);\n+        let enclosing_fn_def_id = self.tcx().typeck_root_def_id(def_id);\n \n         // Get_template_parameters() will append a `<...>` clause to the function\n         // name if necessary."}, {"sha": "6d3a89c0a8a5ba3927510556463c1b55d4397baa", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -42,6 +42,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n                     | DefKind::Static\n                     | DefKind::ConstParam\n                     | DefKind::AnonConst\n+                    | DefKind::InlineConst\n                     | DefKind::AssocConst\n             ),\n         \"Unexpected DefKind: {:?}\","}, {"sha": "60761a05de8270180810ca2d6995fab17eb59dac", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -104,8 +104,10 @@ pub enum DefKind {\n     Use,\n     /// An `extern` block.\n     ForeignMod,\n-    /// Anonymous constant, e.g. the `1 + 2` in `[u8; 1 + 2]`, or `const { 1 + 2}`\n+    /// Anonymous constant, e.g. the `1 + 2` in `[u8; 1 + 2]`\n     AnonConst,\n+    /// An inline constant, e.g. `const { 1 + 2 }`\n+    InlineConst,\n     /// Opaque type, aka `impl Trait`.\n     OpaqueTy,\n     Field,\n@@ -155,6 +157,7 @@ impl DefKind {\n             DefKind::Use => \"import\",\n             DefKind::ForeignMod => \"foreign module\",\n             DefKind::AnonConst => \"constant expression\",\n+            DefKind::InlineConst => \"inline constant\",\n             DefKind::Field => \"field\",\n             DefKind::Impl => \"implementation\",\n             DefKind::Closure => \"closure\",\n@@ -174,6 +177,7 @@ impl DefKind {\n             | DefKind::OpaqueTy\n             | DefKind::Impl\n             | DefKind::Use\n+            | DefKind::InlineConst\n             | DefKind::ExternCrate => \"an\",\n             DefKind::Macro(macro_kind) => macro_kind.article(),\n             _ => \"a\",\n@@ -207,6 +211,7 @@ impl DefKind {\n \n             // Not namespaced.\n             DefKind::AnonConst\n+            | DefKind::InlineConst\n             | DefKind::Field\n             | DefKind::LifetimeParam\n             | DefKind::ExternCrate"}, {"sha": "3947282aa6217f4dba820c79d75c6596e4294262", "filename": "compiler/rustc_infer/src/infer/outlives/env.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -99,7 +99,7 @@ impl<'a, 'tcx> OutlivesEnvironment<'tcx> {\n     /// function. We can then add implied bounds and the like from the\n     /// closure arguments into the environment -- these should only\n     /// apply in the closure body, so once we exit, we invoke\n-    /// `pop_snapshot_post_closure` to remove them.\n+    /// `pop_snapshot_post_typeck_child` to remove them.\n     ///\n     /// Example:\n     ///\n@@ -129,12 +129,12 @@ impl<'a, 'tcx> OutlivesEnvironment<'tcx> {\n     /// seems like it'd be readily fixed if we wanted. There are\n     /// similar leaks around givens that seem equally suspicious, to\n     /// be honest. --nmatsakis\n-    pub fn push_snapshot_pre_closure(&self) -> usize {\n+    pub fn push_snapshot_pre_typeck_child(&self) -> usize {\n         self.region_bound_pairs_accum.len()\n     }\n \n-    /// See `push_snapshot_pre_closure`.\n-    pub fn pop_snapshot_post_closure(&mut self, len: usize) {\n+    /// See `push_snapshot_pre_typeck_child`.\n+    pub fn pop_snapshot_post_typeck_child(&mut self, len: usize) {\n         self.region_bound_pairs_accum.truncate(len);\n     }\n "}, {"sha": "aff5e02d0c655dc5b27909eba4a84b26d7759a51", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -797,6 +797,7 @@ fn should_encode_visibility(def_kind: DefKind) -> bool {\n         | DefKind::ConstParam\n         | DefKind::LifetimeParam\n         | DefKind::AnonConst\n+        | DefKind::InlineConst\n         | DefKind::GlobalAsm\n         | DefKind::Closure\n         | DefKind::Generator\n@@ -832,6 +833,7 @@ fn should_encode_stability(def_kind: DefKind) -> bool {\n         DefKind::Use\n         | DefKind::LifetimeParam\n         | DefKind::AnonConst\n+        | DefKind::InlineConst\n         | DefKind::GlobalAsm\n         | DefKind::Closure\n         | DefKind::Generator\n@@ -856,9 +858,11 @@ fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {\n             (true, mir_opt_base)\n         }\n         // Constants\n-        DefKind::AnonConst | DefKind::AssocConst | DefKind::Static | DefKind::Const => {\n-            (true, false)\n-        }\n+        DefKind::AnonConst\n+        | DefKind::InlineConst\n+        | DefKind::AssocConst\n+        | DefKind::Static\n+        | DefKind::Const => (true, false),\n         // Full-fledged functions\n         DefKind::AssocFn | DefKind::Fn => {\n             let generics = tcx.generics_of(def_id);\n@@ -914,6 +918,7 @@ fn should_encode_variances(def_kind: DefKind) -> bool {\n         | DefKind::Use\n         | DefKind::LifetimeParam\n         | DefKind::AnonConst\n+        | DefKind::InlineConst\n         | DefKind::GlobalAsm\n         | DefKind::Closure\n         | DefKind::Generator\n@@ -939,6 +944,7 @@ fn should_encode_generics(def_kind: DefKind) -> bool {\n         | DefKind::AssocFn\n         | DefKind::AssocConst\n         | DefKind::AnonConst\n+        | DefKind::InlineConst\n         | DefKind::OpaqueTy\n         | DefKind::Impl\n         | DefKind::Field"}, {"sha": "d9d0781b37aacefe4afab97366de2b6448907d6e", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -266,7 +266,15 @@ impl<'hir> Map<'hir> {\n                 };\n                 DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))\n             }\n-            Node::AnonConst(_) => DefKind::AnonConst,\n+            Node::AnonConst(_) => {\n+                let inline = match self.find(self.get_parent_node(hir_id)) {\n+                    Some(Node::Expr(&Expr {\n+                        kind: ExprKind::ConstBlock(ref anon_const), ..\n+                    })) if anon_const.hir_id == hir_id => true,\n+                    _ => false,\n+                };\n+                if inline { DefKind::InlineConst } else { DefKind::AnonConst }\n+            }\n             Node::Field(_) => DefKind::Field,\n             Node::Expr(expr) => match expr.kind {\n                 ExprKind::Closure(.., None) => DefKind::Closure,"}, {"sha": "8e1b887f87da75695eb5c41a6156250db02171e8", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -958,7 +958,7 @@ fn write_mir_sig(tcx: TyCtxt<'_>, body: &Body<'_>, w: &mut dyn Write) -> io::Res\n             write!(w, \"static {}\", if tcx.is_mutable_static(def_id) { \"mut \" } else { \"\" })?\n         }\n         (_, _) if is_function => write!(w, \"fn \")?,\n-        (DefKind::AnonConst, _) => {} // things like anon const, not an item\n+        (DefKind::AnonConst | DefKind::InlineConst, _) => {} // things like anon const, not an item\n         _ => bug!(\"Unexpected def kind {:?}\", kind),\n     }\n "}, {"sha": "a9f94b74c5efb2ade9d3fb13dbefe222f31f8386", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -797,7 +797,7 @@ rustc_queries! {\n     /// additional requirements that the closure's creator must verify.\n     query mir_borrowck(key: LocalDefId) -> &'tcx mir::BorrowCheckResult<'tcx> {\n         desc { |tcx| \"borrow-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n-        cache_on_disk_if(tcx) { tcx.is_closure(key.to_def_id()) }\n+        cache_on_disk_if(tcx) { tcx.is_typeck_child(key.to_def_id()) }\n     }\n     query mir_borrowck_const_arg(key: (LocalDefId, DefId)) -> &'tcx mir::BorrowCheckResult<'tcx> {\n         desc {"}, {"sha": "27e22ccac02a7fb7c771700ada2318eeace3a841", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 68, "deletions": 11, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -1,7 +1,9 @@\n use crate::mir::interpret::ConstValue;\n use crate::mir::interpret::{LitToConstInput, Scalar};\n-use crate::ty::{self, Ty, TyCtxt};\n-use crate::ty::{ParamEnv, ParamEnvAnd};\n+use crate::ty::{\n+    self, InlineConstSubsts, InlineConstSubstsParts, InternalSubsts, ParamEnv, ParamEnvAnd, Ty,\n+    TyCtxt, TypeFoldable,\n+};\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -54,6 +56,24 @@ impl<'tcx> Const<'tcx> {\n \n         let ty = tcx.type_of(def.def_id_for_type_of());\n \n+        match Self::try_eval_lit_or_param(tcx, ty, expr) {\n+            Some(v) => v,\n+            None => tcx.mk_const(ty::Const {\n+                val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                    def: def.to_global(),\n+                    substs_: None,\n+                    promoted: None,\n+                }),\n+                ty,\n+            }),\n+        }\n+    }\n+\n+    fn try_eval_lit_or_param(\n+        tcx: TyCtxt<'tcx>,\n+        ty: Ty<'tcx>,\n+        expr: &'tcx hir::Expr<'tcx>,\n+    ) -> Option<&'tcx Self> {\n         let lit_input = match expr.kind {\n             hir::ExprKind::Lit(ref lit) => Some(LitToConstInput { lit: &lit.node, ty, neg: false }),\n             hir::ExprKind::Unary(hir::UnOp::Neg, ref expr) => match expr.kind {\n@@ -69,7 +89,7 @@ impl<'tcx> Const<'tcx> {\n             // If an error occurred, ignore that it's a literal and leave reporting the error up to\n             // mir.\n             if let Ok(c) = tcx.at(expr.span).lit_to_const(lit_input) {\n-                return c;\n+                return Some(c);\n             } else {\n                 tcx.sess.delay_span_bug(expr.span, \"Const::from_anon_const: couldn't lit_to_const\");\n             }\n@@ -85,7 +105,7 @@ impl<'tcx> Const<'tcx> {\n         };\n \n         use hir::{def::DefKind::ConstParam, def::Res, ExprKind, Path, QPath};\n-        let val = match expr.kind {\n+        match expr.kind {\n             ExprKind::Path(QPath::Resolved(_, &Path { res: Res::Def(ConstParam, def_id), .. })) => {\n                 // Find the name and index of the const parameter by indexing the generics of\n                 // the parent item and construct a `ParamConst`.\n@@ -95,16 +115,53 @@ impl<'tcx> Const<'tcx> {\n                 let generics = tcx.generics_of(item_def_id.to_def_id());\n                 let index = generics.param_def_id_to_index[&def_id];\n                 let name = tcx.hir().name(hir_id);\n-                ty::ConstKind::Param(ty::ParamConst::new(index, name))\n+                Some(tcx.mk_const(ty::Const {\n+                    val: ty::ConstKind::Param(ty::ParamConst::new(index, name)),\n+                    ty,\n+                }))\n             }\n-            _ => ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                def: def.to_global(),\n-                substs_: None,\n-                promoted: None,\n-            }),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn from_inline_const(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &'tcx Self {\n+        debug!(\"Const::from_inline_const(def_id={:?})\", def_id);\n+\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+\n+        let body_id = match tcx.hir().get(hir_id) {\n+            hir::Node::AnonConst(ac) => ac.body,\n+            _ => span_bug!(\n+                tcx.def_span(def_id.to_def_id()),\n+                \"from_inline_const can only process anonymous constants\"\n+            ),\n         };\n \n-        tcx.mk_const(ty::Const { val, ty })\n+        let expr = &tcx.hir().body(body_id).value;\n+\n+        let ty = tcx.typeck(def_id).node_type(hir_id);\n+\n+        let ret = match Self::try_eval_lit_or_param(tcx, ty, expr) {\n+            Some(v) => v,\n+            None => {\n+                let typeck_root_def_id = tcx.typeck_root_def_id(def_id.to_def_id());\n+                let parent_substs =\n+                    tcx.erase_regions(InternalSubsts::identity_for_item(tcx, typeck_root_def_id));\n+                let substs =\n+                    InlineConstSubsts::new(tcx, InlineConstSubstsParts { parent_substs, ty })\n+                        .substs;\n+                tcx.mk_const(ty::Const {\n+                    val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                        def: ty::WithOptConstParam::unknown(def_id).to_global(),\n+                        substs_: Some(substs),\n+                        promoted: None,\n+                    }),\n+                    ty,\n+                })\n+            }\n+        };\n+        debug_assert!(!ret.has_free_regions(tcx));\n+        ret\n     }\n \n     /// Interns the given value as a constant."}, {"sha": "40670f1fdcaefb03ac7b4ec18774be070bfec613", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -74,9 +74,10 @@ pub use self::sty::{\n     Binder, BoundRegion, BoundRegionKind, BoundTy, BoundTyKind, BoundVar, BoundVariableKind,\n     CanonicalPolyFnSig, ClosureSubsts, ClosureSubstsParts, ConstVid, EarlyBoundRegion,\n     ExistentialPredicate, ExistentialProjection, ExistentialTraitRef, FnSig, FreeRegion, GenSig,\n-    GeneratorSubsts, GeneratorSubstsParts, ParamConst, ParamTy, PolyExistentialProjection,\n-    PolyExistentialTraitRef, PolyFnSig, PolyGenSig, PolyTraitRef, ProjectionTy, Region, RegionKind,\n-    RegionVid, TraitRef, TyKind, TypeAndMut, UpvarSubsts, VarianceDiagInfo, VarianceDiagMutKind,\n+    GeneratorSubsts, GeneratorSubstsParts, InlineConstSubsts, InlineConstSubstsParts, ParamConst,\n+    ParamTy, PolyExistentialProjection, PolyExistentialTraitRef, PolyFnSig, PolyGenSig,\n+    PolyTraitRef, ProjectionTy, Region, RegionKind, RegionVid, TraitRef, TyKind, TypeAndMut,\n+    UpvarSubsts, VarianceDiagInfo, VarianceDiagMutKind,\n };\n pub use self::trait_def::TraitDef;\n \n@@ -1927,7 +1928,8 @@ impl<'tcx> TyCtxt<'tcx> {\n                 | DefKind::Static\n                 | DefKind::AssocConst\n                 | DefKind::Ctor(..)\n-                | DefKind::AnonConst => self.mir_for_ctfe_opt_const_arg(def),\n+                | DefKind::AnonConst\n+                | DefKind::InlineConst => self.mir_for_ctfe_opt_const_arg(def),\n                 // If the caller wants `mir_for_ctfe` of a function they should not be using\n                 // `instance_mir`, so we'll assume const fn also wants the optimized version.\n                 _ => {"}, {"sha": "e57075ed33811d59589d3f340ef2f5c0ae272a1a", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -704,6 +704,66 @@ impl<'tcx> UpvarSubsts<'tcx> {\n     }\n }\n \n+/// An inline const is modeled like\n+///\n+///     const InlineConst<'l0...'li, T0...Tj, R>: R;\n+///\n+/// where:\n+///\n+/// - 'l0...'li and T0...Tj are the generic parameters\n+///   inherited from the item that defined the inline const,\n+/// - R represents the type of the constant.\n+///\n+/// When the inline const is instantiated, `R` is substituted as the actual inferred\n+/// type of the constant. The reason that `R` is represented as an extra type parameter\n+/// is the same reason that [`ClosureSubsts`] have `CS` and `U` as type parameters:\n+/// inline const can reference lifetimes that are internal to the creating function.\n+#[derive(Copy, Clone, Debug, TypeFoldable)]\n+pub struct InlineConstSubsts<'tcx> {\n+    /// Generic parameters from the enclosing item,\n+    /// concatenated with the inferred type of the constant.\n+    pub substs: SubstsRef<'tcx>,\n+}\n+\n+/// Struct returned by `split()`.\n+pub struct InlineConstSubstsParts<'tcx, T> {\n+    pub parent_substs: &'tcx [GenericArg<'tcx>],\n+    pub ty: T,\n+}\n+\n+impl<'tcx> InlineConstSubsts<'tcx> {\n+    /// Construct `InlineConstSubsts` from `InlineConstSubstsParts`.\n+    pub fn new(\n+        tcx: TyCtxt<'tcx>,\n+        parts: InlineConstSubstsParts<'tcx, Ty<'tcx>>,\n+    ) -> InlineConstSubsts<'tcx> {\n+        InlineConstSubsts {\n+            substs: tcx.mk_substs(\n+                parts.parent_substs.iter().copied().chain(std::iter::once(parts.ty.into())),\n+            ),\n+        }\n+    }\n+\n+    /// Divides the inline const substs into their respective components.\n+    /// The ordering assumed here must match that used by `InlineConstSubsts::new` above.\n+    fn split(self) -> InlineConstSubstsParts<'tcx, GenericArg<'tcx>> {\n+        match self.substs[..] {\n+            [ref parent_substs @ .., ty] => InlineConstSubstsParts { parent_substs, ty },\n+            _ => bug!(\"inline const substs missing synthetics\"),\n+        }\n+    }\n+\n+    /// Returns the substitutions of the inline const's parent.\n+    pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {\n+        self.split().parent_substs\n+    }\n+\n+    /// Returns the type of this inline const.\n+    pub fn ty(self) -> Ty<'tcx> {\n+        self.split().ty.expect_ty()\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]\n #[derive(HashStable, TypeFoldable)]\n pub enum ExistentialPredicate<'tcx> {"}, {"sha": "73a8e18949de06ad6a4d8d5b3dc0c8329b5c22bf", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -3,7 +3,7 @@\n use crate::mir;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n-use crate::ty::sty::{ClosureSubsts, GeneratorSubsts};\n+use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n \n use rustc_hir::def_id::DefId;\n@@ -204,6 +204,14 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n         GeneratorSubsts { substs: self }\n     }\n \n+    /// Interpret these substitutions as the substitutions of an inline const.\n+    /// Inline const substitutions have a particular structure controlled by the\n+    /// compiler that encodes information like the inferred type;\n+    /// see `ty::InlineConstSubsts` struct for more comments.\n+    pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {\n+        InlineConstSubsts { substs: self }\n+    }\n+\n     /// Creates an `InternalSubsts` that maps each generic parameter to itself.\n     pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {\n         Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))"}, {"sha": "6b287445ff032dade94803d5ba345326d7d7ac98", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -423,6 +423,15 @@ impl<'tcx> TyCtxt<'tcx> {\n         matches!(self.def_kind(def_id), DefKind::Closure | DefKind::Generator)\n     }\n \n+    /// Returns `true` if `def_id` refers to a definition that does not have its own\n+    /// type-checking context, i.e. closure, generator or inline const.\n+    pub fn is_typeck_child(self, def_id: DefId) -> bool {\n+        matches!(\n+            self.def_kind(def_id),\n+            DefKind::Closure | DefKind::Generator | DefKind::InlineConst\n+        )\n+    }\n+\n     /// Returns `true` if `def_id` refers to a trait (i.e., `trait Foo { ... }`).\n     pub fn is_trait(self, def_id: DefId) -> bool {\n         self.def_kind(def_id) == DefKind::Trait\n@@ -440,16 +449,19 @@ impl<'tcx> TyCtxt<'tcx> {\n         matches!(self.def_kind(def_id), DefKind::Ctor(..))\n     }\n \n-    /// Given the def-ID of a fn or closure, returns the def-ID of\n-    /// the innermost fn item that the closure is contained within.\n-    /// This is a significant `DefId` because, when we do\n-    /// type-checking, we type-check this fn item and all of its\n-    /// (transitive) closures together. Therefore, when we fetch the\n+    /// Given the `DefId`, returns the `DefId` of the innermost item that\n+    /// has its own type-checking context or \"inference enviornment\".\n+    ///\n+    /// For example, a closure has its own `DefId`, but it is type-checked\n+    /// with the containing item. Similarly, an inline const block has its\n+    /// own `DefId` but it is type-checked together with the containing item.\n+    ///\n+    /// Therefore, when we fetch the\n     /// `typeck` the closure, for example, we really wind up\n     /// fetching the `typeck` the enclosing fn item.\n-    pub fn closure_base_def_id(self, def_id: DefId) -> DefId {\n+    pub fn typeck_root_def_id(self, def_id: DefId) -> DefId {\n         let mut def_id = def_id;\n-        while self.is_closure(def_id) {\n+        while self.is_typeck_child(def_id) {\n             def_id = self.parent(def_id).unwrap_or_else(|| {\n                 bug!(\"closure {:?} has no parent\", def_id);\n             });"}, {"sha": "b4005ccd1cc42205db0909d37699f2b802fbf561", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -578,7 +578,7 @@ impl<'tcx> Cx<'tcx> {\n \n             hir::ExprKind::ConstBlock(ref anon_const) => {\n                 let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n-                let value = ty::Const::from_anon_const(self.tcx, anon_const_def_id);\n+                let value = ty::Const::from_inline_const(self.tcx, anon_const_def_id);\n \n                 ExprKind::ConstBlock { value }\n             }"}, {"sha": "ce80214c875fc5e46f329f65fc438f031759bed7", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -544,7 +544,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             let (lit, neg) = match expr.kind {\n                 hir::ExprKind::ConstBlock(ref anon_const) => {\n                     let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n-                    let value = ty::Const::from_anon_const(self.tcx, anon_const_def_id);\n+                    let value = ty::Const::from_inline_const(self.tcx, anon_const_def_id);\n                     if matches!(value.val, ConstKind::Param(_)) {\n                         let span = self.tcx.hir().span(anon_const.hir_id);\n                         self.errors.push(PatternError::ConstParamInPattern(span));"}, {"sha": "595080619da6faaac8be4cf5b91b93beb4cbf45a", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -167,6 +167,7 @@ fn mark_used_by_default_parameters<'tcx>(\n         | DefKind::Use\n         | DefKind::ForeignMod\n         | DefKind::AnonConst\n+        | DefKind::InlineConst\n         | DefKind::OpaqueTy\n         | DefKind::Field\n         | DefKind::LifetimeParam\n@@ -195,7 +196,7 @@ fn emit_unused_generic_params_error<'tcx>(\n     generics: &'tcx ty::Generics,\n     unused_parameters: &FiniteBitSet<u32>,\n ) {\n-    let base_def_id = tcx.closure_base_def_id(def_id);\n+    let base_def_id = tcx.typeck_root_def_id(def_id);\n     if !tcx.get_attrs(base_def_id).iter().any(|a| a.has_name(sym::rustc_polymorphize_error)) {\n         return;\n     }\n@@ -303,7 +304,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n                 ControlFlow::CONTINUE\n             }\n             ty::ConstKind::Unevaluated(uv)\n-                if self.tcx.def_kind(uv.def.did) == DefKind::AnonConst =>\n+                if matches!(self.tcx.def_kind(uv.def.did), DefKind::AnonConst | DefKind::InlineConst) =>\n             {\n                 self.visit_child_body(uv.def.did, uv.substs(self.tcx));\n                 ControlFlow::CONTINUE"}, {"sha": "6a8feb041da19f5978c4cf6055f79e127bf61ffc", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -334,9 +334,10 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n     // properly, we can't miss any types.\n \n     match expr.kind {\n-        // Manually recurse over closures, because they are the only\n+        // Manually recurse over closures and inline consts, because they are the only\n         // case of nested bodies that share the parent environment.\n-        hir::ExprKind::Closure(.., body, _, _) => {\n+        hir::ExprKind::Closure(.., body, _, _)\n+        | hir::ExprKind::ConstBlock(hir::AnonConst { body, .. }) => {\n             let body = visitor.tcx.hir().body(body);\n             visitor.visit_body(body);\n         }\n@@ -817,9 +818,9 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n }\n \n fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> &ScopeTree {\n-    let closure_base_def_id = tcx.closure_base_def_id(def_id);\n-    if closure_base_def_id != def_id {\n-        return tcx.region_scope_tree(closure_base_def_id);\n+    let typeck_root_def_id = tcx.typeck_root_def_id(def_id);\n+    if typeck_root_def_id != def_id {\n+        return tcx.region_scope_tree(typeck_root_def_id);\n     }\n \n     let id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());"}, {"sha": "a01efc5d85c6e765bd263855f0575656d1daf247", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -618,6 +618,7 @@ impl EmbargoVisitor<'tcx> {\n             | DefKind::Use\n             | DefKind::ForeignMod\n             | DefKind::AnonConst\n+            | DefKind::InlineConst\n             | DefKind::Field\n             | DefKind::GlobalAsm\n             | DefKind::Impl"}, {"sha": "4173e0fbf5668e546a878ece896cfb026c8b491f", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -967,6 +967,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 | DefKind::Use\n                 | DefKind::ForeignMod\n                 | DefKind::AnonConst\n+                | DefKind::InlineConst\n                 | DefKind::Field\n                 | DefKind::LifetimeParam\n                 | DefKind::GlobalAsm"}, {"sha": "39e710cb77f3fafd9129d6ad80061aea48ef3837", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -540,7 +540,7 @@ fn is_late_bound_map<'tcx>(\n     def_id: LocalDefId,\n ) -> Option<(LocalDefId, &'tcx FxHashSet<ItemLocalId>)> {\n     match tcx.def_kind(def_id) {\n-        DefKind::AnonConst => {\n+        DefKind::AnonConst | DefKind::InlineConst => {\n             let mut def_id = tcx\n                 .parent(def_id.to_def_id())\n                 .unwrap_or_else(|| bug!(\"anon const or closure without a parent\"));"}, {"sha": "c7f8fe3a88a64b1dc4ea99a8456f852f54083995", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -739,6 +739,7 @@ impl<'tcx> SaveContext<'tcx> {\n                 | HirDefKind::ForeignMod\n                 | HirDefKind::LifetimeParam\n                 | HirDefKind::AnonConst\n+                | HirDefKind::InlineConst\n                 | HirDefKind::Use\n                 | HirDefKind::Field\n                 | HirDefKind::GlobalAsm"}, {"sha": "6b5d37c0f43086516d57425d66807dd3b6ca72b7", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -151,7 +151,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n \n     if concrete.is_ok() && uv.substs(infcx.tcx).definitely_has_param_types_or_consts(infcx.tcx) {\n         match infcx.tcx.def_kind(uv.def.did) {\n-            DefKind::AnonConst => {\n+            DefKind::AnonConst | DefKind::InlineConst => {\n                 let mir_body = infcx.tcx.mir_for_ctfe_opt_const_arg(uv.def);\n \n                 if mir_body.is_polymorphic {\n@@ -495,7 +495,7 @@ pub(super) fn thir_abstract_const<'tcx>(\n             // we want to look into them or treat them as opaque projections.\n             //\n             // Right now we do neither of that and simply always fail to unify them.\n-            DefKind::AnonConst => (),\n+            DefKind::AnonConst | DefKind::InlineConst => (),\n             _ => return Ok(None),\n         }\n "}, {"sha": "b21936a00b04fae8c104dd81668dc4992de6af37", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -1474,7 +1474,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let span = self.tcx.def_span(generator_did);\n \n         let in_progress_typeck_results = self.in_progress_typeck_results.map(|t| t.borrow());\n-        let generator_did_root = self.tcx.closure_base_def_id(generator_did);\n+        let generator_did_root = self.tcx.typeck_root_def_id(generator_did);\n         debug!(\n             \"maybe_note_obligation_cause_for_async_await: generator_did={:?} \\\n              generator_did_root={:?} in_progress_typeck_results.hir_owner={:?} span={:?}\","}, {"sha": "f7accbb430caae8375fb5a6c318244009f0b15d7", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -92,7 +92,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let parent_substs = InternalSubsts::identity_for_item(\n             self.tcx,\n-            self.tcx.closure_base_def_id(expr_def_id.to_def_id()),\n+            self.tcx.typeck_root_def_id(expr_def_id.to_def_id()),\n         );\n \n         let tupled_upvars_ty = self.infcx.next_ty_var(TypeVariableOrigin {"}, {"sha": "93e292394bd28207e18d0f2f8e47a1e8cc224742", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -30,6 +30,7 @@ use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder,\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::Visitor;\n use rustc_hir::{ExprKind, QPath};\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -323,7 +324,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ExprKind::DropTemps(e) => self.check_expr_with_expectation(e, expected),\n             ExprKind::Array(args) => self.check_expr_array(args, expected, expr),\n-            ExprKind::ConstBlock(ref anon_const) => self.to_const(anon_const).ty,\n+            ExprKind::ConstBlock(ref anon_const) => {\n+                self.check_expr_const_block(anon_const, expected, expr)\n+            }\n             ExprKind::Repeat(element, ref count) => {\n                 self.check_expr_repeat(element, count, expected, expr)\n             }\n@@ -1166,6 +1169,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.tcx.mk_array(element_ty, args.len() as u64)\n     }\n \n+    fn check_expr_const_block(\n+        &self,\n+        anon_const: &'tcx hir::AnonConst,\n+        expected: Expectation<'tcx>,\n+        _expr: &'tcx hir::Expr<'tcx>,\n+    ) -> Ty<'tcx> {\n+        let body = self.tcx.hir().body(anon_const.body);\n+\n+        // Create a new function context.\n+        let fcx = FnCtxt::new(self, self.param_env, body.value.hir_id);\n+        crate::check::GatherLocalsVisitor::new(&fcx).visit_body(body);\n+\n+        let ty = fcx.check_expr_with_expectation(&body.value, expected);\n+        fcx.require_type_is_sized(ty, body.value.span, traits::ConstSized);\n+        fcx.write_ty(anon_const.hir_id, ty);\n+        ty\n+    }\n+\n     fn check_expr_repeat(\n         &self,\n         element: &'tcx hir::Expr<'tcx>,"}, {"sha": "d19e99606bcd8eec3f0d54d7e921de2ec1e463a9", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -297,9 +297,9 @@ fn primary_body_of(\n fn has_typeck_results(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     // Closures' typeck results come from their outermost function,\n     // as they are part of the same \"inference environment\".\n-    let outer_def_id = tcx.closure_base_def_id(def_id);\n-    if outer_def_id != def_id {\n-        return tcx.has_typeck_results(outer_def_id);\n+    let typeck_root_def_id = tcx.typeck_root_def_id(def_id);\n+    if typeck_root_def_id != def_id {\n+        return tcx.has_typeck_results(typeck_root_def_id);\n     }\n \n     if let Some(def_id) = def_id.as_local() {\n@@ -348,9 +348,9 @@ fn typeck_with_fallback<'tcx>(\n ) -> &'tcx ty::TypeckResults<'tcx> {\n     // Closures' typeck results come from their outermost function,\n     // as they are part of the same \"inference environment\".\n-    let outer_def_id = tcx.closure_base_def_id(def_id.to_def_id()).expect_local();\n-    if outer_def_id != def_id {\n-        return tcx.typeck(outer_def_id);\n+    let typeck_root_def_id = tcx.typeck_root_def_id(def_id.to_def_id()).expect_local();\n+    if typeck_root_def_id != def_id {\n+        return tcx.typeck(typeck_root_def_id);\n     }\n \n     let id = tcx.hir().local_def_id_to_hir_id(def_id);"}, {"sha": "cbf33cf1b78a147112c2ad55cd868a845a813eb3", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -292,7 +292,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // String and byte-string literals result in types `&str` and `&[u8]` respectively.\n             // All other literals result in non-reference types.\n             // As a result, we allow `if let 0 = &&0 {}` but not `if let \"foo\" = &&\"foo {}`.\n-            PatKind::Lit(lt) => match self.check_expr(lt).kind() {\n+            //\n+            // Call `resolve_vars_if_possible` here for inline const blocks.\n+            PatKind::Lit(lt) => match self.resolve_vars_if_possible(self.check_expr(lt)).kind() {\n                 ty::Ref(..) => AdjustMode::Pass,\n                 _ => AdjustMode::Peel,\n             },"}, {"sha": "d2d8b14dd9695e917bd27d2dc4a08d7683993991", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -341,6 +341,29 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         self.visit_region_obligations(body_id.hir_id);\n     }\n \n+    fn visit_inline_const(&mut self, id: hir::HirId, body: &'tcx hir::Body<'tcx>) {\n+        debug!(\"visit_inline_const(id={:?})\", id);\n+\n+        // Save state of current function. We will restore afterwards.\n+        let old_body_id = self.body_id;\n+        let old_body_owner = self.body_owner;\n+        let env_snapshot = self.outlives_environment.push_snapshot_pre_typeck_child();\n+\n+        let body_id = body.id();\n+        self.body_id = body_id.hir_id;\n+        self.body_owner = self.tcx.hir().body_owner_def_id(body_id);\n+\n+        self.outlives_environment.save_implied_bounds(body_id.hir_id);\n+\n+        self.visit_body(body);\n+        self.visit_region_obligations(body_id.hir_id);\n+\n+        // Restore state from previous function.\n+        self.outlives_environment.pop_snapshot_post_typeck_child(env_snapshot);\n+        self.body_id = old_body_id;\n+        self.body_owner = old_body_owner;\n+    }\n+\n     fn visit_region_obligations(&mut self, hir_id: hir::HirId) {\n         debug!(\"visit_region_obligations: hir_id={:?}\", hir_id);\n \n@@ -406,13 +429,13 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n         // `visit_fn_body`.  We will restore afterwards.\n         let old_body_id = self.body_id;\n         let old_body_owner = self.body_owner;\n-        let env_snapshot = self.outlives_environment.push_snapshot_pre_closure();\n+        let env_snapshot = self.outlives_environment.push_snapshot_pre_typeck_child();\n \n         let body = self.tcx.hir().body(body_id);\n         self.visit_fn_body(hir_id, body, span);\n \n         // Restore state from previous function.\n-        self.outlives_environment.pop_snapshot_post_closure(env_snapshot);\n+        self.outlives_environment.pop_snapshot_post_typeck_child(env_snapshot);\n         self.body_id = old_body_id;\n         self.body_owner = old_body_owner;\n     }\n@@ -460,6 +483,11 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n                 intravisit::walk_expr(self, expr);\n             }\n \n+            hir::ExprKind::ConstBlock(anon_const) => {\n+                let body = self.tcx.hir().body(anon_const.body);\n+                self.visit_inline_const(anon_const.hir_id, body);\n+            }\n+\n             _ => intravisit::walk_expr(self, expr),\n         }\n     }"}, {"sha": "5f5d308a3329bdf5c7f3c3fe2cbd1e0a445c4f8c", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -148,10 +148,17 @@ impl<'a, 'tcx> Visitor<'tcx> for InferBorrowKindVisitor<'a, 'tcx> {\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n-        if let hir::ExprKind::Closure(cc, _, body_id, _, _) = expr.kind {\n-            let body = self.fcx.tcx.hir().body(body_id);\n-            self.visit_body(body);\n-            self.fcx.analyze_closure(expr.hir_id, expr.span, body_id, body, cc);\n+        match expr.kind {\n+            hir::ExprKind::Closure(cc, _, body_id, _, _) => {\n+                let body = self.fcx.tcx.hir().body(body_id);\n+                self.visit_body(body);\n+                self.fcx.analyze_closure(expr.hir_id, expr.span, body_id, body, cc);\n+            }\n+            hir::ExprKind::ConstBlock(anon_const) => {\n+                let body = self.fcx.tcx.hir().body(anon_const.body);\n+                self.visit_body(body);\n+            }\n+            _ => {}\n         }\n \n         intravisit::walk_expr(self, expr);"}, {"sha": "fdc8b6b5e64519d57642ad6549ec858d880fcc89", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -282,6 +282,12 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n             hir::ExprKind::Field(..) => {\n                 self.visit_field_id(e.hir_id);\n             }\n+            hir::ExprKind::ConstBlock(anon_const) => {\n+                self.visit_node_id(e.span, anon_const.hir_id);\n+\n+                let body = self.tcx().hir().body(anon_const.body);\n+                self.visit_body(body);\n+            }\n             _ => {}\n         }\n "}, {"sha": "2274db76c05fb264be490cb2043398dbf23e575c", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -1494,13 +1494,15 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                     {\n                         Some(parent_def_id.to_def_id())\n                     }\n-\n+                    Node::Expr(&Expr { kind: ExprKind::ConstBlock(_), .. }) => {\n+                        Some(tcx.typeck_root_def_id(def_id))\n+                    }\n                     _ => None,\n                 }\n             }\n         }\n         Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {\n-            Some(tcx.closure_base_def_id(def_id))\n+            Some(tcx.typeck_root_def_id(def_id))\n         }\n         Node::Item(item) => match item.kind {\n             ItemKind::OpaqueTy(hir::OpaqueTy { impl_trait_fn, .. }) => {\n@@ -1692,6 +1694,24 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n         }));\n     }\n \n+    // provide junk type parameter defs for const blocks.\n+    if let Node::AnonConst(_) = node {\n+        let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n+        if let Node::Expr(&Expr { kind: ExprKind::ConstBlock(_), .. }) = parent_node {\n+            params.push(ty::GenericParamDef {\n+                index: type_start,\n+                name: Symbol::intern(\"<const_ty>\"),\n+                def_id,\n+                pure_wrt_drop: false,\n+                kind: ty::GenericParamDefKind::Type {\n+                    has_default: false,\n+                    object_lifetime_default: rl::Set1::Empty,\n+                    synthetic: None,\n+                },\n+            });\n+        }\n+    }\n+\n     let param_def_id_to_index = params.iter().map(|param| (param.def_id, param.index)).collect();\n \n     ty::Generics {"}, {"sha": "04a68250ced0cd0a44387b6fa7d3abf868b03351", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -494,7 +494,8 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 Node::Expr(&Expr { kind: ExprKind::ConstBlock(ref anon_const), .. })\n                     if anon_const.hir_id == hir_id =>\n                 {\n-                    tcx.typeck(def_id).node_type(anon_const.hir_id)\n+                    let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+                    substs.as_inline_const().ty()\n                 }\n \n                 Node::Expr(&Expr { kind: ExprKind::InlineAsm(asm), .. })"}, {"sha": "2fa7efcc6509b143e69b5192d06cf4bf8d507669", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -430,8 +430,9 @@ crate fn register_res(cx: &mut DocContext<'_>, res: Res) -> DefId {\n         | Res::NonMacroAttr(_)\n         | Res::Err => return res.def_id(),\n         Res::Def(\n-            TyParam | ConstParam | Ctor(..) | ExternCrate | Use | ForeignMod | AnonConst | OpaqueTy\n-            | Field | LifetimeParam | GlobalAsm | Impl | Closure | Generator,\n+            TyParam | ConstParam | Ctor(..) | ExternCrate | Use | ForeignMod | AnonConst\n+            | InlineConst | OpaqueTy | Field | LifetimeParam | GlobalAsm | Impl | Closure\n+            | Generator,\n             id,\n         ) => return id,\n     };"}, {"sha": "92278179a51c96ade994997c336d3e34a811179f", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -265,9 +265,9 @@ crate fn create_config(\n                 // Closures' tables come from their outermost function,\n                 // as they are part of the same \"inference environment\".\n                 // This avoids emitting errors for the parent twice (see similar code in `typeck_with_fallback`)\n-                let outer_def_id = tcx.closure_base_def_id(def_id.to_def_id()).expect_local();\n-                if outer_def_id != def_id {\n-                    return tcx.typeck(outer_def_id);\n+                let typeck_root_def_id = tcx.typeck_root_def_id(def_id.to_def_id()).expect_local();\n+                if typeck_root_def_id != def_id {\n+                    return tcx.typeck(typeck_root_def_id);\n                 }\n \n                 let hir = tcx.hir();"}, {"sha": "3979d29b673fd3bd37a8fc6865b6b0ee3e46bcb0", "filename": "src/librustdoc/formats/item_type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fitem_type.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -134,6 +134,7 @@ impl From<DefKind> for ItemType {\n             | DefKind::Use\n             | DefKind::ForeignMod\n             | DefKind::AnonConst\n+            | DefKind::InlineConst\n             | DefKind::OpaqueTy\n             | DefKind::Field\n             | DefKind::LifetimeParam"}, {"sha": "4e5812d7f8429e38a5a5f11042f5912b0a5ee0a4", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -1937,7 +1937,8 @@ fn resolution_failure(\n                             | Use\n                             | LifetimeParam\n                             | Ctor(_, _)\n-                            | AnonConst => {\n+                            | AnonConst\n+                            | InlineConst => {\n                                 let note = assoc_item_not_allowed(res);\n                                 if let Some(span) = sp {\n                                     diag.span_label(span, &note);"}, {"sha": "6aa2a2f3367fcf59bfda7d1c368b15b357205652", "filename": "src/test/ui/inline-const/const-expr-inference.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-inference.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![feature(inline_const)]\n+#![allow(incomplete_features)]\n+\n+pub fn todo<T>() -> T {\n+    const { todo!() }\n+}\n+\n+fn main() {\n+    let _: usize = const { 0 };\n+}"}, {"sha": "e56cbc94038a01c3fe8774f65e4a2186c23dd34c", "filename": "src/test/ui/inline-const/const-expr-lifetime-err.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime-err.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -0,0 +1,30 @@\n+#![allow(incomplete_features)]\n+#![feature(const_mut_refs)]\n+#![feature(inline_const)]\n+\n+use std::marker::PhantomData;\n+\n+#[derive(PartialEq, Eq)]\n+pub struct InvariantRef<'a, T: ?Sized>(&'a T, PhantomData<&'a mut &'a T>);\n+\n+impl<'a, T: ?Sized> InvariantRef<'a, T> {\n+    pub const fn new(r: &'a T) -> Self {\n+        InvariantRef(r, PhantomData)\n+    }\n+}\n+\n+impl<'a> InvariantRef<'a, ()> {\n+    pub const NEW: Self = InvariantRef::new(&());\n+}\n+\n+fn equate<T>(x: T, y: T){}\n+\n+fn foo<'a>() {\n+    let y = ();\n+    equate(InvariantRef::new(&y), const { InvariantRef::<'a>::NEW });\n+    //~^ ERROR `y` does not live long enough [E0597]\n+}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "30ecd338a856d7c93cc9acf2fc5420b8039b24b4", "filename": "src/test/ui/inline-const/const-expr-lifetime-err.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime-err.stderr?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -0,0 +1,18 @@\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/const-expr-lifetime-err.rs:24:30\n+   |\n+LL | fn foo<'a>() {\n+   |        -- lifetime `'a` defined here\n+LL |     let y = ();\n+LL |     equate(InvariantRef::new(&y), const { InvariantRef::<'a>::NEW });\n+   |            ------------------^^-\n+   |            |                 |\n+   |            |                 borrowed value does not live long enough\n+   |            argument requires that `y` is borrowed for `'a`\n+LL |\n+LL | }\n+   | - `y` dropped here while still borrowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "f622f2cbddf482b5c33b561eff4298e748ca5eeb", "filename": "src/test/ui/inline-const/const-expr-lifetime.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-lifetime.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -0,0 +1,36 @@\n+// run-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(const_mut_refs)]\n+#![feature(inline_const)]\n+\n+use std::marker::PhantomData;\n+\n+// rust-lang/rust#78174: ICE: \"cannot convert ReErased to a region vid\"\n+fn issue_78174() {\n+    let foo = const { \"foo\" };\n+    assert_eq!(foo, \"foo\");\n+}\n+\n+pub struct InvariantRef<'a, T: ?Sized>(&'a T, PhantomData<&'a mut &'a T>);\n+\n+impl<'a, T: ?Sized> InvariantRef<'a, T> {\n+    pub const fn new(r: &'a T) -> Self {\n+        InvariantRef(r, PhantomData)\n+    }\n+}\n+\n+fn get_invariant_ref<'a>() -> InvariantRef<'a, ()> {\n+    const { InvariantRef::<'a, ()>::new(&()) }\n+}\n+\n+fn get_invariant_ref2<'a>() -> InvariantRef<'a, ()> {\n+    // Try some type inference\n+    const { InvariantRef::new(&()) }\n+}\n+\n+fn main() {\n+    issue_78174();\n+    get_invariant_ref();\n+    get_invariant_ref2();\n+}"}, {"sha": "61188ed5d47bdb348b01ed8d4a252205f3815e08", "filename": "src/test/ui/inline-const/const-match-pat-inference.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-inference.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![feature(inline_const)]\n+#![allow(incomplete_features)]\n+\n+fn main() {\n+    match 1u64 {\n+        0 => (),\n+        const { 0 + 1 } => (),\n+        const { 2 - 1 } ..= const { u64::MAX } => (),\n+    }\n+}"}, {"sha": "bc5aa24894427ea83ca19c0d3c30d8e5660e1c2b", "filename": "src/test/ui/inline-const/const-match-pat-lifetime-err.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime-err.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -0,0 +1,34 @@\n+// ignore-test\n+\n+#![allow(incomplete_features)]\n+#![feature(const_mut_refs)]\n+#![feature(inline_const)]\n+\n+use std::marker::PhantomData;\n+\n+#[derive(PartialEq, Eq)]\n+pub struct InvariantRef<'a, T: ?Sized>(&'a T, PhantomData<&'a mut &'a T>);\n+\n+impl<'a, T: ?Sized> InvariantRef<'a, T> {\n+    pub const fn new(r: &'a T) -> Self {\n+        InvariantRef(r, PhantomData)\n+    }\n+}\n+\n+impl<'a> InvariantRef<'a, ()> {\n+    pub const NEW: Self = InvariantRef::new(&());\n+}\n+\n+fn match_invariant_ref<'a>() {\n+    let y = ();\n+    match InvariantRef::new(&y) {\n+    //~^ ERROR `y` does not live long enough [E0597]\n+        // FIXME(nbdd0121): This should give the same error as `InvariantRef::<'a>::NEW` (without\n+        // const block)\n+        const { InvariantRef::<'a>::NEW } => (),\n+    }\n+}\n+\n+fn main() {\n+    match_invariant_ref();\n+}"}, {"sha": "3d986f0d9ee08161957a9da31a27ac52288a41ca", "filename": "src/test/ui/inline-const/const-match-pat-lifetime.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-lifetime.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -0,0 +1,36 @@\n+// run-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(const_mut_refs)]\n+#![feature(inline_const)]\n+\n+use std::marker::PhantomData;\n+\n+// rust-lang/rust#78174: ICE: \"cannot convert ReErased to a region vid\"\n+fn issue_78174() {\n+    match \"foo\" {\n+        const { concat!(\"fo\", \"o\") } => (),\n+        _ => unreachable!(),\n+    }\n+}\n+\n+#[derive(PartialEq, Eq)]\n+pub struct InvariantRef<'a, T: ?Sized>(&'a T, PhantomData<&'a mut &'a T>);\n+\n+impl<'a, T: ?Sized> InvariantRef<'a, T> {\n+    pub const fn new(r: &'a T) -> Self {\n+        InvariantRef(r, PhantomData)\n+    }\n+}\n+\n+fn match_invariant_ref<'a>() {\n+    match const { InvariantRef::<'a, _>::new(&()) } {\n+        const { InvariantRef::<'a, ()>::new(&()) } => {\n+        }\n+    }\n+}\n+\n+fn main() {\n+    issue_78174();\n+    match_invariant_ref();\n+}"}, {"sha": "7142df98c3f10fde54afa98e822067dd468532f2", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd74c93403c455187c343f3828274824addc9881/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd74c93403c455187c343f3828274824addc9881/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=fd74c93403c455187c343f3828274824addc9881", "patch": "@@ -1065,7 +1065,10 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n                 PatKind::Path(path) => {\n                     #[allow(clippy::match_same_arms)]\n                     let id = match cx.qpath_res(path, pat.hir_id) {\n-                        Res::Def(DefKind::Const | DefKind::ConstParam | DefKind::AnonConst, _) => return,\n+                        Res::Def(\n+                            DefKind::Const | DefKind::ConstParam | DefKind::AnonConst | DefKind::InlineConst,\n+                            _,\n+                        ) => return,\n                         Res::Def(_, id) => id,\n                         _ => return,\n                     };"}]}