{"sha": "c54932cb12b8384060bfe132907ec42cc5c1bbd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NDkzMmNiMTJiODM4NDA2MGJmZTEzMjkwN2VjNDJjYzVjMWJiZDI=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-01-02T12:02:50Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-01-05T01:33:31Z"}, "message": "Fix the parsing of where-clauses for structs", "tree": {"sha": "36aa67b40ae1533aeee70a76f5a3b0b0491c8bb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36aa67b40ae1533aeee70a76f5a3b0b0491c8bb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c54932cb12b8384060bfe132907ec42cc5c1bbd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c54932cb12b8384060bfe132907ec42cc5c1bbd2", "html_url": "https://github.com/rust-lang/rust/commit/c54932cb12b8384060bfe132907ec42cc5c1bbd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c54932cb12b8384060bfe132907ec42cc5c1bbd2/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5773bdefff2e47cc007f5cc2af3f80b30303d45a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5773bdefff2e47cc007f5cc2af3f80b30303d45a", "html_url": "https://github.com/rust-lang/rust/commit/5773bdefff2e47cc007f5cc2af3f80b30303d45a"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "570ef67bbccfd75646d5fc7bbb5743a43b50ed76", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c54932cb12b8384060bfe132907ec42cc5c1bbd2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54932cb12b8384060bfe132907ec42cc5c1bbd2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c54932cb12b8384060bfe132907ec42cc5c1bbd2", "patch": "@@ -4875,11 +4875,26 @@ impl<'a> Parser<'a> {\n             self.span_err(ty.span, \"`virtual` structs have been removed from the language\");\n         }\n \n-        self.parse_where_clause(&mut generics);\n-\n         let mut fields: Vec<StructField>;\n         let is_tuple_like;\n \n+        // There is a special case worth noting here, as reported in issue #17904.\n+        // If we are parsing a tuple struct it is the case that the where clause\n+        // should follow the field list. Like so:\n+        //\n+        // struct Foo<T>(T) where T: Copy;\n+        //\n+        // If we are parsing a normal record-style struct it is the case\n+        // that the where clause comes before the body, and after the generics.\n+        // So if we look ahead and see a brace or a where-clause we begin\n+        // parsing a record style struct.\n+        //\n+        // Otherwise if we look ahead and see a paren we parse a tuple-style\n+        // struct.\n+\n+        // Will parse the where-clause if it precedes the brace.\n+        self.parse_where_clause(&mut generics);\n+\n         if self.eat(&token::OpenDelim(token::Brace)) {\n             // It's a record-like struct.\n             is_tuple_like = false;\n@@ -4916,8 +4931,11 @@ impl<'a> Parser<'a> {\n                                     written as `struct {};`\",\n                                    token::get_ident(class_name))[]);\n             }\n+            self.parse_where_clause(&mut generics);\n             self.expect(&token::Semi);\n-        } else if self.eat(&token::Semi) {\n+        } else if self.token.is_keyword(keywords::Where) || self.eat(&token::Semi) {\n+            // We can find a where clause here.\n+            self.parse_where_clause(&mut generics);\n             // It's a unit-like struct.\n             is_tuple_like = true;\n             fields = Vec::new();"}, {"sha": "c2976378ddad846feb2b475e41f95042a57e1d1a", "filename": "src/test/run-pass/issue-17904.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c54932cb12b8384060bfe132907ec42cc5c1bbd2/src%2Ftest%2Frun-pass%2Fissue-17904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c54932cb12b8384060bfe132907ec42cc5c1bbd2/src%2Ftest%2Frun-pass%2Fissue-17904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17904.rs?ref=c54932cb12b8384060bfe132907ec42cc5c1bbd2", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that type assignability is used to search for instances when\n+// making method calls, but only if there aren't any matches without\n+// it.\n+\n+struct Foo<T> where T: Copy;\n+struct Bar<T>(T) where T: Copy;\n+struct Bleh<T, U>(T, U) where T: Copy, U: Sized;\n+struct Baz<T> where T: Copy {\n+    field: T\n+}\n+\n+fn main() {}"}]}