{"sha": "7c46fb2111936ad21a8e3aa41e9128752357f5d8", "node_id": "C_kwDOAAsO6NoAKDdjNDZmYjIxMTE5MzZhZDIxYThlM2FhNDFlOTEyODc1MjM1N2Y1ZDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-03T08:07:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-03T08:07:47Z"}, "message": "Auto merge of #107625 - matthiaskrgr:rollup-xr9oldy, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #106575 (Suggest `move` in nested closure when appropriate)\n - #106805 (Suggest `{var:?}` when finding `{?:var}` in inline format strings)\n - #107500 (Add tests to assert current behavior of large future sizes)\n - #107598 (Fix benchmarks in library/core with black_box)\n - #107602 (Parse and recover from type ascription in patterns)\n - #107608 (Use triple rather than arch for fuchsia test-runner)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d3bdac647485a029e043f15ab0b46529058a437c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3bdac647485a029e043f15ab0b46529058a437c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c46fb2111936ad21a8e3aa41e9128752357f5d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c46fb2111936ad21a8e3aa41e9128752357f5d8", "html_url": "https://github.com/rust-lang/rust/commit/7c46fb2111936ad21a8e3aa41e9128752357f5d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c46fb2111936ad21a8e3aa41e9128752357f5d8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d32458343f34bd8de6d96cbaab2a9cf879dd1b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d32458343f34bd8de6d96cbaab2a9cf879dd1b8", "html_url": "https://github.com/rust-lang/rust/commit/5d32458343f34bd8de6d96cbaab2a9cf879dd1b8"}, {"sha": "b6e8ebf33b0203ab16bbb26eb95a6654ee00ac8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6e8ebf33b0203ab16bbb26eb95a6654ee00ac8e", "html_url": "https://github.com/rust-lang/rust/commit/b6e8ebf33b0203ab16bbb26eb95a6654ee00ac8e"}], "stats": {"total": 643, "additions": 521, "deletions": 122}, "files": [{"sha": "7901a5046abad12a466cf045b9591d4fe618f5f1", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -583,10 +583,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let err = FnMutError {\n             span: *span,\n             ty_err: match output_ty.kind() {\n-                ty::Closure(_, _) => FnMutReturnTypeErr::ReturnClosure { span: *span },\n                 ty::Generator(def, ..) if self.infcx.tcx.generator_is_async(*def) => {\n                     FnMutReturnTypeErr::ReturnAsyncBlock { span: *span }\n                 }\n+                _ if output_ty.contains_closure() => {\n+                    FnMutReturnTypeErr::ReturnClosure { span: *span }\n+                }\n                 _ => FnMutReturnTypeErr::ReturnRef { span: *span },\n             },\n         };\n@@ -997,7 +999,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     fn suggest_move_on_borrowing_closure(&self, diag: &mut Diagnostic) {\n         let map = self.infcx.tcx.hir();\n         let body_id = map.body_owned_by(self.mir_def_id());\n-        let expr = &map.body(body_id).value;\n+        let expr = &map.body(body_id).value.peel_blocks();\n         let mut closure_span = None::<rustc_span::Span>;\n         match expr.kind {\n             hir::ExprKind::MethodCall(.., args, _) => {\n@@ -1012,20 +1014,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ExprKind::Block(blk, _) => {\n-                if let Some(expr) = blk.expr {\n-                    // only when the block is a closure\n-                    if let hir::ExprKind::Closure(hir::Closure {\n-                        capture_clause: hir::CaptureBy::Ref,\n-                        body,\n-                        ..\n-                    }) = expr.kind\n-                    {\n-                        let body = map.body(*body);\n-                        if !matches!(body.generator_kind, Some(hir::GeneratorKind::Async(..))) {\n-                            closure_span = Some(expr.span.shrink_to_lo());\n-                        }\n-                    }\n+            hir::ExprKind::Closure(hir::Closure {\n+                capture_clause: hir::CaptureBy::Ref,\n+                body,\n+                ..\n+            }) => {\n+                let body = map.body(*body);\n+                if !matches!(body.generator_kind, Some(hir::GeneratorKind::Async(..))) {\n+                    closure_span = Some(expr.span.shrink_to_lo());\n                 }\n             }\n             _ => {}"}, {"sha": "98d6b68356368c14e06717b05a5c4ccc72e05915", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -2043,6 +2043,28 @@ impl<'tcx> Ty<'tcx> {\n         cf.is_break()\n     }\n \n+    /// Checks whether a type recursively contains any closure\n+    ///\n+    /// Example: `Option<[closure@file.rs:4:20]>` returns true\n+    pub fn contains_closure(self) -> bool {\n+        struct ContainsClosureVisitor;\n+\n+        impl<'tcx> TypeVisitor<'tcx> for ContainsClosureVisitor {\n+            type BreakTy = ();\n+\n+            fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+                if let ty::Closure(_, _) = t.kind() {\n+                    ControlFlow::Break(())\n+                } else {\n+                    t.super_visit_with(self)\n+                }\n+            }\n+        }\n+\n+        let cf = self.visit_with(&mut ContainsClosureVisitor);\n+        cf.is_break()\n+    }\n+\n     /// Returns the type and mutability of `*ty`.\n     ///\n     /// The parameter `explicit` indicates if this is an *explicit* dereference."}, {"sha": "cd9d85b1d919c9c3f45541e83a9223857550be9c", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -2405,26 +2405,42 @@ impl<'a> Parser<'a> {\n         if !matches!(first_pat.kind, PatKind::Ident(_, _, None) | PatKind::Path(..))\n             || !self.look_ahead(1, |token| token.is_ident() && !token.is_reserved_ident())\n         {\n+            let mut snapshot_type = self.create_snapshot_for_diagnostic();\n+            snapshot_type.bump(); // `:`\n+            match snapshot_type.parse_ty() {\n+                Err(inner_err) => {\n+                    inner_err.cancel();\n+                }\n+                Ok(ty) => {\n+                    let Err(mut err) = self.expected_one_of_not_found(&[], &[]) else {\n+                        return first_pat;\n+                    };\n+                    err.span_label(ty.span, \"specifying the type of a pattern isn't supported\");\n+                    self.restore_snapshot(snapshot_type);\n+                    let span = first_pat.span.to(ty.span);\n+                    first_pat = self.mk_pat(span, PatKind::Wild);\n+                    err.emit();\n+                }\n+            }\n             return first_pat;\n         }\n         // The pattern looks like it might be a path with a `::` -> `:` typo:\n         // `match foo { bar:baz => {} }`\n-        let span = self.token.span;\n+        let colon_span = self.token.span;\n         // We only emit \"unexpected `:`\" error here if we can successfully parse the\n         // whole pattern correctly in that case.\n-        let snapshot = self.create_snapshot_for_diagnostic();\n+        let mut snapshot_pat = self.create_snapshot_for_diagnostic();\n+        let mut snapshot_type = self.create_snapshot_for_diagnostic();\n \n         // Create error for \"unexpected `:`\".\n         match self.expected_one_of_not_found(&[], &[]) {\n             Err(mut err) => {\n-                self.bump(); // Skip the `:`.\n-                match self.parse_pat_no_top_alt(expected) {\n+                // Skip the `:`.\n+                snapshot_pat.bump();\n+                snapshot_type.bump();\n+                match snapshot_pat.parse_pat_no_top_alt(expected) {\n                     Err(inner_err) => {\n-                        // Carry on as if we had not done anything, callers will emit a\n-                        // reasonable error.\n                         inner_err.cancel();\n-                        err.cancel();\n-                        self.restore_snapshot(snapshot);\n                     }\n                     Ok(mut pat) => {\n                         // We've parsed the rest of the pattern.\n@@ -2488,22 +2504,33 @@ impl<'a> Parser<'a> {\n                             _ => {}\n                         }\n                         if show_sugg {\n-                            err.span_suggestion(\n-                                span,\n+                            err.span_suggestion_verbose(\n+                                colon_span.until(self.look_ahead(1, |t| t.span)),\n                                 \"maybe write a path separator here\",\n                                 \"::\",\n                                 Applicability::MaybeIncorrect,\n                             );\n                         } else {\n                             first_pat = self.mk_pat(new_span, PatKind::Wild);\n                         }\n-                        err.emit();\n+                        self.restore_snapshot(snapshot_pat);\n                     }\n                 }\n+                match snapshot_type.parse_ty() {\n+                    Err(inner_err) => {\n+                        inner_err.cancel();\n+                    }\n+                    Ok(ty) => {\n+                        err.span_label(ty.span, \"specifying the type of a pattern isn't supported\");\n+                        self.restore_snapshot(snapshot_type);\n+                        let new_span = first_pat.span.to(ty.span);\n+                        first_pat = self.mk_pat(new_span, PatKind::Wild);\n+                    }\n+                }\n+                err.emit();\n             }\n             _ => {\n                 // Carry on as if we had not done anything. This should be unreachable.\n-                self.restore_snapshot(snapshot);\n             }\n         };\n         first_pat"}, {"sha": "088a87ca5710457386e77017260650aa8cfb4daf", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -273,7 +273,13 @@ impl<'a> Iterator for Parser<'a> {\n                                 );\n                             }\n                         } else {\n-                            self.suggest_positional_arg_instead_of_captured_arg(arg);\n+                            if let Some(&(_, maybe)) = self.cur.peek() {\n+                                if maybe == '?' {\n+                                    self.suggest_format();\n+                                } else {\n+                                    self.suggest_positional_arg_instead_of_captured_arg(arg);\n+                                }\n+                            }\n                         }\n                         Some(NextArgument(Box::new(arg)))\n                     }\n@@ -832,6 +838,27 @@ impl<'a> Parser<'a> {\n         if found { Some(cur) } else { None }\n     }\n \n+    fn suggest_format(&mut self) {\n+        if let (Some(pos), Some(_)) = (self.consume_pos('?'), self.consume_pos(':')) {\n+            let word = self.word();\n+            let _end = self.current_pos();\n+            let pos = self.to_span_index(pos);\n+            self.errors.insert(\n+                0,\n+                ParseError {\n+                    description: \"expected format parameter to occur after `:`\".to_owned(),\n+                    note: Some(\n+                        format!(\"`?` comes after `:`, try `{}:{}` instead\", word, \"?\").to_owned(),\n+                    ),\n+                    label: \"expected `?` to occur after `:`\".to_owned(),\n+                    span: pos.to(pos),\n+                    secondary_label: None,\n+                    should_be_replaced_with_positional_argument: false,\n+                },\n+            );\n+        }\n+    }\n+\n     fn suggest_positional_arg_instead_of_captured_arg(&mut self, arg: Argument<'a>) {\n         if let Some(end) = self.consume_pos('.') {\n             let byte_pos = self.to_span_index(end);"}, {"sha": "5d4df1ac8bd5883b5539539f7f11db2316d84a50", "filename": "library/core/benches/char/methods.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/library%2Fcore%2Fbenches%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/library%2Fcore%2Fbenches%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fchar%2Fmethods.rs?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -1,26 +1,26 @@\n-use test::Bencher;\n+use test::{black_box, Bencher};\n \n const CHARS: [char; 9] = ['0', 'x', '2', '5', 'A', 'f', '7', '8', '9'];\n const RADIX: [u32; 5] = [2, 8, 10, 16, 32];\n \n #[bench]\n fn bench_to_digit_radix_2(b: &mut Bencher) {\n-    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_digit(2)).min())\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| black_box(c).to_digit(2)).min())\n }\n \n #[bench]\n fn bench_to_digit_radix_10(b: &mut Bencher) {\n-    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_digit(10)).min())\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| black_box(c).to_digit(10)).min())\n }\n \n #[bench]\n fn bench_to_digit_radix_16(b: &mut Bencher) {\n-    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_digit(16)).min())\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| black_box(c).to_digit(16)).min())\n }\n \n #[bench]\n fn bench_to_digit_radix_36(b: &mut Bencher) {\n-    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_digit(36)).min())\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| black_box(c).to_digit(36)).min())\n }\n \n #[bench]\n@@ -31,47 +31,59 @@ fn bench_to_digit_radix_var(b: &mut Bencher) {\n             .cycle()\n             .zip(RADIX.iter().cycle())\n             .take(10_000)\n-            .map(|(c, radix)| c.to_digit(*radix))\n+            .map(|(c, radix)| black_box(c).to_digit(*radix))\n             .min()\n     })\n }\n \n #[bench]\n fn bench_to_ascii_uppercase(b: &mut Bencher) {\n-    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_ascii_uppercase()).min())\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| black_box(c).to_ascii_uppercase()).min())\n }\n \n #[bench]\n fn bench_to_ascii_lowercase(b: &mut Bencher) {\n-    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_ascii_lowercase()).min())\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| black_box(c).to_ascii_lowercase()).min())\n }\n \n #[bench]\n fn bench_ascii_mix_to_uppercase(b: &mut Bencher) {\n-    b.iter(|| (0..=255).cycle().take(10_000).map(|b| char::from(b).to_uppercase()).count())\n+    b.iter(|| {\n+        (0..=255).cycle().take(10_000).map(|b| black_box(char::from(b)).to_uppercase()).count()\n+    })\n }\n \n #[bench]\n fn bench_ascii_mix_to_lowercase(b: &mut Bencher) {\n-    b.iter(|| (0..=255).cycle().take(10_000).map(|b| char::from(b).to_lowercase()).count())\n+    b.iter(|| {\n+        (0..=255).cycle().take(10_000).map(|b| black_box(char::from(b)).to_lowercase()).count()\n+    })\n }\n \n #[bench]\n fn bench_ascii_char_to_uppercase(b: &mut Bencher) {\n-    b.iter(|| (0..=127).cycle().take(10_000).map(|b| char::from(b).to_uppercase()).count())\n+    b.iter(|| {\n+        (0..=127).cycle().take(10_000).map(|b| black_box(char::from(b)).to_uppercase()).count()\n+    })\n }\n \n #[bench]\n fn bench_ascii_char_to_lowercase(b: &mut Bencher) {\n-    b.iter(|| (0..=127).cycle().take(10_000).map(|b| char::from(b).to_lowercase()).count())\n+    b.iter(|| {\n+        (0..=127).cycle().take(10_000).map(|b| black_box(char::from(b)).to_lowercase()).count()\n+    })\n }\n \n #[bench]\n fn bench_non_ascii_char_to_uppercase(b: &mut Bencher) {\n-    b.iter(|| (128..=255).cycle().take(10_000).map(|b| char::from(b).to_uppercase()).count())\n+    b.iter(|| {\n+        (128..=255).cycle().take(10_000).map(|b| black_box(char::from(b)).to_uppercase()).count()\n+    })\n }\n \n #[bench]\n fn bench_non_ascii_char_to_lowercase(b: &mut Bencher) {\n-    b.iter(|| (128..=255).cycle().take(10_000).map(|b| char::from(b).to_lowercase()).count())\n+    b.iter(|| {\n+        (128..=255).cycle().take(10_000).map(|b| black_box(char::from(b)).to_lowercase()).count()\n+    })\n }"}, {"sha": "377c99effd03c7b0f58435f4013aa88ce46470af", "filename": "library/core/benches/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -1,14 +1,14 @@\n use super::super::*;\n use core::num::flt2dec::strategy::dragon::*;\n use std::mem::MaybeUninit;\n-use test::Bencher;\n+use test::{black_box, Bencher};\n \n #[bench]\n fn bench_small_shortest(b: &mut Bencher) {\n     let decoded = decode_finite(3.141592f64);\n     let mut buf = [MaybeUninit::new(0); MAX_SIG_DIGITS];\n     b.iter(|| {\n-        format_shortest(&decoded, &mut buf);\n+        format_shortest(black_box(&decoded), &mut buf);\n     });\n }\n \n@@ -17,7 +17,7 @@ fn bench_big_shortest(b: &mut Bencher) {\n     let decoded = decode_finite(f64::MAX);\n     let mut buf = [MaybeUninit::new(0); MAX_SIG_DIGITS];\n     b.iter(|| {\n-        format_shortest(&decoded, &mut buf);\n+        format_shortest(black_box(&decoded), &mut buf);\n     });\n }\n \n@@ -26,7 +26,7 @@ fn bench_small_exact_3(b: &mut Bencher) {\n     let decoded = decode_finite(3.141592f64);\n     let mut buf = [MaybeUninit::new(0); 3];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -35,7 +35,7 @@ fn bench_big_exact_3(b: &mut Bencher) {\n     let decoded = decode_finite(f64::MAX);\n     let mut buf = [MaybeUninit::new(0); 3];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -44,7 +44,7 @@ fn bench_small_exact_12(b: &mut Bencher) {\n     let decoded = decode_finite(3.141592f64);\n     let mut buf = [MaybeUninit::new(0); 12];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -53,7 +53,7 @@ fn bench_big_exact_12(b: &mut Bencher) {\n     let decoded = decode_finite(f64::MAX);\n     let mut buf = [MaybeUninit::new(0); 12];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -62,7 +62,7 @@ fn bench_small_exact_inf(b: &mut Bencher) {\n     let decoded = decode_finite(3.141592f64);\n     let mut buf = [MaybeUninit::new(0); 1024];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -71,6 +71,6 @@ fn bench_big_exact_inf(b: &mut Bencher) {\n     let decoded = decode_finite(f64::MAX);\n     let mut buf = [MaybeUninit::new(0); 1024];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }"}, {"sha": "6bea5e55d37bbc1bafad53c1ac0c98a4eafe5d15", "filename": "library/core/benches/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -1,7 +1,7 @@\n use super::super::*;\n use core::num::flt2dec::strategy::grisu::*;\n use std::mem::MaybeUninit;\n-use test::Bencher;\n+use test::{black_box, Bencher};\n \n pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n     match decode(v).1 {\n@@ -15,7 +15,7 @@ fn bench_small_shortest(b: &mut Bencher) {\n     let decoded = decode_finite(3.141592f64);\n     let mut buf = [MaybeUninit::new(0); MAX_SIG_DIGITS];\n     b.iter(|| {\n-        format_shortest(&decoded, &mut buf);\n+        format_shortest(black_box(&decoded), &mut buf);\n     });\n }\n \n@@ -24,7 +24,7 @@ fn bench_big_shortest(b: &mut Bencher) {\n     let decoded = decode_finite(f64::MAX);\n     let mut buf = [MaybeUninit::new(0); MAX_SIG_DIGITS];\n     b.iter(|| {\n-        format_shortest(&decoded, &mut buf);\n+        format_shortest(black_box(&decoded), &mut buf);\n     });\n }\n \n@@ -33,7 +33,7 @@ fn bench_small_exact_3(b: &mut Bencher) {\n     let decoded = decode_finite(3.141592f64);\n     let mut buf = [MaybeUninit::new(0); 3];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -42,7 +42,7 @@ fn bench_big_exact_3(b: &mut Bencher) {\n     let decoded = decode_finite(f64::MAX);\n     let mut buf = [MaybeUninit::new(0); 3];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -51,7 +51,7 @@ fn bench_small_exact_12(b: &mut Bencher) {\n     let decoded = decode_finite(3.141592f64);\n     let mut buf = [MaybeUninit::new(0); 12];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -60,7 +60,7 @@ fn bench_big_exact_12(b: &mut Bencher) {\n     let decoded = decode_finite(f64::MAX);\n     let mut buf = [MaybeUninit::new(0); 12];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -69,7 +69,7 @@ fn bench_small_exact_inf(b: &mut Bencher) {\n     let decoded = decode_finite(3.141592f64);\n     let mut buf = [MaybeUninit::new(0); 1024];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -78,6 +78,6 @@ fn bench_big_exact_inf(b: &mut Bencher) {\n     let decoded = decode_finite(f64::MAX);\n     let mut buf = [MaybeUninit::new(0); 1024];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }"}, {"sha": "a6d84a3c18a5f2802597b6d751cb8e95c95b53ee", "filename": "src/ci/docker/scripts/fuchsia-test-runner.py", "status": "modified", "additions": 23, "deletions": 28, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -19,18 +19,18 @@\n import signal\n import subprocess\n import sys\n-from typing import ClassVar, List\n+from typing import ClassVar, List, Optional\n \n \n @dataclass\n class TestEnvironment:\n     rust_dir: str\n     sdk_dir: str\n-    target_arch: str\n-    package_server_pid: int = None\n-    emu_addr: str = None\n-    libstd_name: str = None\n-    libtest_name: str = None\n+    target: str\n+    package_server_pid: Optional[int] = None\n+    emu_addr: Optional[str] = None\n+    libstd_name: Optional[str] = None\n+    libtest_name: Optional[str] = None\n     verbose: bool = False\n \n     @staticmethod\n@@ -40,6 +40,15 @@ def tmp_dir():\n             return os.path.abspath(tmp_dir)\n         return os.path.join(os.path.dirname(__file__), \"tmp~\")\n \n+    @staticmethod\n+    def triple_to_arch(triple):\n+        if \"x86_64\" in triple:\n+            return \"x64\"\n+        elif \"aarch64\" in triple:\n+            return \"arm64\"\n+        else:\n+            raise Exception(f\"Unrecognized target triple {triple}\")\n+\n     @classmethod\n     def env_file_path(cls):\n         return os.path.join(cls.tmp_dir(), \"test_env.json\")\n@@ -49,7 +58,7 @@ def from_args(cls, args):\n         return cls(\n             os.path.abspath(args.rust),\n             os.path.abspath(args.sdk),\n-            args.target_arch,\n+            args.target,\n             verbose=args.verbose,\n         )\n \n@@ -60,21 +69,14 @@ def read_from_file(cls):\n             return cls(\n                 test_env[\"rust_dir\"],\n                 test_env[\"sdk_dir\"],\n-                test_env[\"target_arch\"],\n+                test_env[\"target\"],\n                 libstd_name=test_env[\"libstd_name\"],\n                 libtest_name=test_env[\"libtest_name\"],\n                 emu_addr=test_env[\"emu_addr\"],\n                 package_server_pid=test_env[\"package_server_pid\"],\n                 verbose=test_env[\"verbose\"],\n             )\n \n-    def image_name(self):\n-        if self.target_arch == \"x64\":\n-            return \"qemu-x64\"\n-        if self.target_arch == \"arm64\":\n-            return \"qemu-arm64\"\n-        raise Exception(f\"Unrecognized target architecture {self.target_arch}\")\n-\n     def write_to_file(self):\n         with open(self.env_file_path(), \"w\", encoding=\"utf-8\") as f:\n             f.write(json.dumps(self.__dict__))\n@@ -108,13 +110,6 @@ def output_dir(self):\n     def repo_dir(self):\n         return os.path.join(self.tmp_dir(), self.TEST_REPO_NAME)\n \n-    def rustlib_dir(self):\n-        if self.target_arch == \"x64\":\n-            return \"x86_64-unknown-fuchsia\"\n-        if self.target_arch == \"arm64\":\n-            return \"aarch64-unknown-fuchsia\"\n-        raise Exception(f\"Unrecognized target architecture {self.target_arch}\")\n-\n     def libs_dir(self):\n         return os.path.join(\n             self.rust_dir,\n@@ -125,7 +120,7 @@ def rustlibs_dir(self):\n         return os.path.join(\n             self.libs_dir(),\n             \"rustlib\",\n-            self.rustlib_dir(),\n+            self.target,\n             \"lib\",\n         )\n \n@@ -384,7 +379,7 @@ def start(self):\n                 \"--emulator-log\",\n                 self.emulator_log_path(),\n                 \"--image-name\",\n-                self.image_name(),\n+                \"qemu-\" + self.triple_to_arch(self.target),\n             ],\n             stdout=self.subprocess_output(),\n             stderr=self.subprocess_output(),\n@@ -642,11 +637,11 @@ def log(msg):\n                         package_dir=package_dir,\n                         package_name=package_name,\n                         rust_dir=self.rust_dir,\n-                        rustlib_dir=self.rustlib_dir(),\n+                        rustlib_dir=self.target,\n                         sdk_dir=self.sdk_dir,\n                         libstd_name=self.libstd_name,\n                         libtest_name=self.libtest_name,\n-                        target_arch=self.target_arch,\n+                        target_arch=self.triple_to_arch(self.target),\n                     )\n                 )\n                 for shared_lib in shared_libs:\n@@ -969,8 +964,8 @@ def print_help(args):\n         action=\"store_true\",\n     )\n     start_parser.add_argument(\n-        \"--target-arch\",\n-        help=\"the architecture of the image to test\",\n+        \"--target\",\n+        help=\"the target platform to test\",\n         required=True,\n     )\n     start_parser.set_defaults(func=start)"}, {"sha": "0f165b268ba3b9d01091d8d6f9e09870b172ea3a", "filename": "src/doc/rustc/src/platform-support/fuchsia.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -697,7 +697,7 @@ test environment with:\n src/ci/docker/scripts/fuchsia-test-runner.py start\n     --rust ${RUST_SRC_PATH}/install\n     --sdk ${SDK_PATH}\n-    --target-arch {x64,arm64}\n+    --target-triple {x86_64-unknown-fuchsia|aarch64-unknown-fuchsia}\n ```\n \n Where `${RUST_SRC_PATH}/install` is the `prefix` set in `config.toml` and"}, {"sha": "93c69b05254dc393810ea30ac1d13e430bca82f8", "filename": "tests/ui/async-await/future-sizes/future-as-arg.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Ffuture-as-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Ffuture-as-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Ffuture-as-arg.rs?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -0,0 +1,16 @@\n+// edition: 2021\n+// run-pass\n+\n+async fn test(_arg: [u8; 16]) {}\n+\n+async fn use_future(fut: impl std::future::Future<Output = ()>) {\n+    fut.await\n+}\n+\n+fn main() {\n+    let actual = std::mem::size_of_val(\n+        &use_future(use_future(use_future(use_future(use_future(test([0; 16])))))));\n+    // Not using an exact number in case it slightly changes over different commits\n+    let expected = 550;\n+    assert!(actual > expected, \"expected: >{expected}, actual: {actual}\");\n+}"}, {"sha": "7e7ff9d8d00e841e97ab81e74fb09b55aa1d3279", "filename": "tests/ui/async-await/future-sizes/large-arg.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Flarge-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Flarge-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Flarge-arg.rs?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags: -Z print-type-sizes --crate-type=lib\n+// edition: 2021\n+// build-pass\n+// ignore-pass\n+\n+pub async fn test() {\n+    let _ = a([0u8; 1024]).await;\n+}\n+\n+pub async fn a<T>(t: T) -> T {\n+    b(t).await\n+}\n+async fn b<T>(t: T) -> T {\n+    c(t).await\n+}\n+async fn c<T>(t: T) -> T {\n+    t\n+}"}, {"sha": "c206d793170754dbcb6f7f23aaac6f9aa103ae5b", "filename": "tests/ui/async-await/future-sizes/large-arg.stdout", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Flarge-arg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Flarge-arg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ffuture-sizes%2Flarge-arg.stdout?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -0,0 +1,60 @@\n+print-type-size type: `[async fn body@$DIR/large-arg.rs:6:21: 8:2]`: 3076 bytes, alignment: 1 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `Suspend0`: 3075 bytes\n+print-type-size         local `.__awaitee`: 3075 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size     variant `Unresumed`: 0 bytes\n+print-type-size     variant `Returned`: 0 bytes\n+print-type-size     variant `Panicked`: 0 bytes\n+print-type-size type: `[async fn body@$DIR/large-arg.rs:10:30: 12:2]`: 3075 bytes, alignment: 1 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `Suspend0`: 3074 bytes\n+print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         local `.__awaitee`: 2050 bytes\n+print-type-size     variant `Unresumed`: 1024 bytes\n+print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size     variant `Returned`: 1024 bytes\n+print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size     variant `Panicked`: 1024 bytes\n+print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/large-arg.rs:10:30: 12:2]>`: 3075 bytes, alignment: 1 bytes\n+print-type-size     field `.value`: 3075 bytes\n+print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/large-arg.rs:10:30: 12:2]>`: 3075 bytes, alignment: 1 bytes\n+print-type-size     variant `MaybeUninit`: 3075 bytes\n+print-type-size         field `.uninit`: 0 bytes\n+print-type-size         field `.value`: 3075 bytes\n+print-type-size type: `[async fn body@$DIR/large-arg.rs:13:26: 15:2]`: 2050 bytes, alignment: 1 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `Suspend0`: 2049 bytes\n+print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         local `.__awaitee`: 1025 bytes\n+print-type-size     variant `Unresumed`: 1024 bytes\n+print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size     variant `Returned`: 1024 bytes\n+print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size     variant `Panicked`: 1024 bytes\n+print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/large-arg.rs:13:26: 15:2]>`: 2050 bytes, alignment: 1 bytes\n+print-type-size     field `.value`: 2050 bytes\n+print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/large-arg.rs:13:26: 15:2]>`: 2050 bytes, alignment: 1 bytes\n+print-type-size     variant `MaybeUninit`: 2050 bytes\n+print-type-size         field `.uninit`: 0 bytes\n+print-type-size         field `.value`: 2050 bytes\n+print-type-size type: `[async fn body@$DIR/large-arg.rs:16:26: 18:2]`: 1025 bytes, alignment: 1 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `Unresumed`: 1024 bytes\n+print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size     variant `Returned`: 1024 bytes\n+print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size     variant `Panicked`: 1024 bytes\n+print-type-size         upvar `.t`: 1024 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/large-arg.rs:16:26: 18:2]>`: 1025 bytes, alignment: 1 bytes\n+print-type-size     field `.value`: 1025 bytes\n+print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/large-arg.rs:16:26: 18:2]>`: 1025 bytes, alignment: 1 bytes\n+print-type-size     variant `MaybeUninit`: 1025 bytes\n+print-type-size         field `.uninit`: 0 bytes\n+print-type-size         field `.value`: 1025 bytes\n+print-type-size type: `std::task::Poll<[u8; 1024]>`: 1025 bytes, alignment: 1 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `Ready`: 1024 bytes\n+print-type-size         field `.0`: 1024 bytes\n+print-type-size     variant `Pending`: 0 bytes"}, {"sha": "1a08470064cd7470fe9f7e1d9ba9cf5b049ae920", "filename": "tests/ui/borrowck/issue-95079-missing-move-in-nested-closure.fixed", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.fixed?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -0,0 +1,26 @@\n+// run-rustfix\n+#![allow(dead_code, path_statements)]\n+fn foo1(s: &str) -> impl Iterator<Item = String> + '_ {\n+    None.into_iter()\n+        .flat_map(move |()| s.chars().map(move |c| format!(\"{}{}\", c, s)))\n+        //~^ ERROR captured variable cannot escape `FnMut` closure body\n+        //~| HELP consider adding 'move' keyword before the nested closure\n+}\n+\n+fn foo2(s: &str) -> impl Sized + '_ {\n+    move |()| s.chars().map(move |c| format!(\"{}{}\", c, s))\n+    //~^ ERROR lifetime may not live long enough\n+    //~| HELP consider adding 'move' keyword before the nested closure\n+}\n+\n+pub struct X;\n+pub fn foo3<'a>(\n+    bar: &'a X,\n+) -> impl Iterator<Item = ()> + 'a {\n+    Some(()).iter().flat_map(move |()| {\n+        Some(()).iter().map(move |()| { bar; }) //~ ERROR captured variable cannot escape\n+        //~^ HELP consider adding 'move' keyword before the nested closure\n+    })\n+}\n+\n+fn main() {}"}, {"sha": "b93292e3589d371a67bad831dc716efc96ff59d0", "filename": "tests/ui/borrowck/issue-95079-missing-move-in-nested-closure.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.rs?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+#![allow(dead_code, path_statements)]\n fn foo1(s: &str) -> impl Iterator<Item = String> + '_ {\n     None.into_iter()\n         .flat_map(move |()| s.chars().map(|c| format!(\"{}{}\", c, s)))\n@@ -11,4 +13,14 @@ fn foo2(s: &str) -> impl Sized + '_ {\n     //~| HELP consider adding 'move' keyword before the nested closure\n }\n \n+pub struct X;\n+pub fn foo3<'a>(\n+    bar: &'a X,\n+) -> impl Iterator<Item = ()> + 'a {\n+    Some(()).iter().flat_map(move |()| {\n+        Some(()).iter().map(|()| { bar; }) //~ ERROR captured variable cannot escape\n+        //~^ HELP consider adding 'move' keyword before the nested closure\n+    })\n+}\n+\n fn main() {}"}, {"sha": "776c338deacf40f4c6d2db778e8e710f44557d40", "filename": "tests/ui/borrowck/issue-95079-missing-move-in-nested-closure.stderr", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.stderr?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -1,13 +1,13 @@\n error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-95079-missing-move-in-nested-closure.rs:3:29\n+  --> $DIR/issue-95079-missing-move-in-nested-closure.rs:5:29\n    |\n LL | fn foo1(s: &str) -> impl Iterator<Item = String> + '_ {\n    |         - variable defined here\n LL |     None.into_iter()\n LL |         .flat_map(move |()| s.chars().map(|c| format!(\"{}{}\", c, s)))\n    |                           - -^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                           | |\n-   |                           | returns a reference to a captured variable which escapes the closure body\n+   |                           | returns a closure that contains a reference to a captured variable, which then escapes the closure body\n    |                           | variable captured here\n    |                           inferred to be a `FnMut` closure\n    |\n@@ -19,12 +19,12 @@ LL |         .flat_map(move |()| s.chars().map(move |c| format!(\"{}{}\", c, s)))\n    |                                           ++++\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-95079-missing-move-in-nested-closure.rs:9:15\n+  --> $DIR/issue-95079-missing-move-in-nested-closure.rs:11:15\n    |\n LL |     move |()| s.chars().map(|c| format!(\"{}{}\", c, s))\n    |     --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\n    |     |       |\n-   |     |       return type of closure `Map<Chars<'_>, [closure@$DIR/issue-95079-missing-move-in-nested-closure.rs:9:29: 9:32]>` contains a lifetime `'2`\n+   |     |       return type of closure `Map<Chars<'_>, [closure@$DIR/issue-95079-missing-move-in-nested-closure.rs:11:29: 11:32]>` contains a lifetime `'2`\n    |     lifetime `'1` represents this closure's body\n    |\n    = note: closure implements `Fn`, so references to captured variables can't escape the closure\n@@ -33,5 +33,26 @@ help: consider adding 'move' keyword before the nested closure\n LL |     move |()| s.chars().map(move |c| format!(\"{}{}\", c, s))\n    |                             ++++\n \n-error: aborting due to 2 previous errors\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/issue-95079-missing-move-in-nested-closure.rs:21:9\n+   |\n+LL |     bar: &'a X,\n+   |     --- variable defined here\n+LL | ) -> impl Iterator<Item = ()> + 'a {\n+LL |     Some(()).iter().flat_map(move |()| {\n+   |                                      - inferred to be a `FnMut` closure\n+LL |         Some(()).iter().map(|()| { bar; })\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^---^^^^\n+   |         |                          |\n+   |         |                          variable captured here\n+   |         returns a closure that contains a reference to a captured variable, which then escapes the closure body\n+   |\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n+help: consider adding 'move' keyword before the nested closure\n+   |\n+LL |         Some(()).iter().map(move |()| { bar; })\n+   |                             ++++\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "0bad54023965fecbf8f0b5ddd90b8b56f8bd3d6c", "filename": "tests/ui/fmt/format-string-wrong-order.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Ffmt%2Fformat-string-wrong-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Ffmt%2Fformat-string-wrong-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Fformat-string-wrong-order.rs?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -0,0 +1,15 @@\n+fn main() {\n+    let bar = 3;\n+    format!(\"{?:}\", bar);\n+    //~^ ERROR invalid format string: expected format parameter to occur after `:`\n+    format!(\"{?:bar}\");\n+    //~^ ERROR invalid format string: expected format parameter to occur after `:`\n+    format!(\"{?:?}\", bar);\n+    //~^ ERROR invalid format string: expected format parameter to occur after `:`\n+    format!(\"{??}\", bar);\n+    //~^ ERROR invalid format string: expected `'}'`, found `'?'`\n+    format!(\"{?;bar}\");\n+    //~^ ERROR invalid format string: expected `'}'`, found `'?'`\n+    format!(\"{?:#?}\", bar);\n+    //~^ ERROR invalid format string: expected format parameter to occur after `:`\n+}"}, {"sha": "461af354a4e15c274d20f3fc46ad8bd979724d7f", "filename": "tests/ui/fmt/format-string-wrong-order.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Ffmt%2Fformat-string-wrong-order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Ffmt%2Fformat-string-wrong-order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Fformat-string-wrong-order.stderr?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -0,0 +1,54 @@\n+error: invalid format string: expected format parameter to occur after `:`\n+  --> $DIR/format-string-wrong-order.rs:3:15\n+   |\n+LL |     format!(\"{?:}\", bar);\n+   |               ^ expected `?` to occur after `:` in format string\n+   |\n+   = note: `?` comes after `:`, try `:?` instead\n+\n+error: invalid format string: expected format parameter to occur after `:`\n+  --> $DIR/format-string-wrong-order.rs:5:15\n+   |\n+LL |     format!(\"{?:bar}\");\n+   |               ^ expected `?` to occur after `:` in format string\n+   |\n+   = note: `?` comes after `:`, try `bar:?` instead\n+\n+error: invalid format string: expected format parameter to occur after `:`\n+  --> $DIR/format-string-wrong-order.rs:7:15\n+   |\n+LL |     format!(\"{?:?}\", bar);\n+   |               ^ expected `?` to occur after `:` in format string\n+   |\n+   = note: `?` comes after `:`, try `:?` instead\n+\n+error: invalid format string: expected `'}'`, found `'?'`\n+  --> $DIR/format-string-wrong-order.rs:9:15\n+   |\n+LL |     format!(\"{??}\", bar);\n+   |              -^ expected `}` in format string\n+   |              |\n+   |              because of this opening brace\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected `'}'`, found `'?'`\n+  --> $DIR/format-string-wrong-order.rs:11:15\n+   |\n+LL |     format!(\"{?;bar}\");\n+   |              -^ expected `}` in format string\n+   |              |\n+   |              because of this opening brace\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected format parameter to occur after `:`\n+  --> $DIR/format-string-wrong-order.rs:13:15\n+   |\n+LL |     format!(\"{?:#?}\", bar);\n+   |               ^ expected `?` to occur after `:` in format string\n+   |\n+   = note: `?` comes after `:`, try `:?` instead\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "e1ea38f2795df698983f335bbf6b77f13d29dad1", "filename": "tests/ui/parser/issues/issue-87086-colon-path-sep.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fparser%2Fissues%2Fissue-87086-colon-path-sep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fparser%2Fissues%2Fissue-87086-colon-path-sep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-87086-colon-path-sep.rs?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -68,7 +68,6 @@ fn main() {\n         Foo:Bar::Baz => {}\n         //~^ ERROR: expected one of\n         //~| HELP: maybe write a path separator here\n-        //~| ERROR: failed to resolve: `Bar` is a variant, not a module\n     }\n     match myfoo {\n         Foo::Bar => {}"}, {"sha": "63b072ac4cdc68c6c4f9ec8734f49945c45de38e", "filename": "tests/ui/parser/issues/issue-87086-colon-path-sep.stderr", "status": "modified", "additions": 55, "deletions": 26, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fparser%2Fissues%2Fissue-87086-colon-path-sep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fparser%2Fissues%2Fissue-87086-colon-path-sep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-87086-colon-path-sep.stderr?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -2,89 +2,118 @@ error: expected one of `@` or `|`, found `:`\n   --> $DIR/issue-87086-colon-path-sep.rs:17:12\n    |\n LL |         Foo:Bar => {}\n-   |            ^\n+   |            ^--- specifying the type of a pattern isn't supported\n    |            |\n    |            expected one of `@` or `|`\n-   |            help: maybe write a path separator here: `::`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |         Foo::Bar => {}\n+   |            ~~\n \n error: expected one of `!`, `(`, `...`, `..=`, `..`, `::`, `{`, or `|`, found `:`\n   --> $DIR/issue-87086-colon-path-sep.rs:23:17\n    |\n LL |         qux::Foo:Bar => {}\n-   |                 ^\n+   |                 ^--- specifying the type of a pattern isn't supported\n    |                 |\n    |                 expected one of 8 possible tokens\n-   |                 help: maybe write a path separator here: `::`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |         qux::Foo::Bar => {}\n+   |                 ~~\n \n error: expected one of `@` or `|`, found `:`\n   --> $DIR/issue-87086-colon-path-sep.rs:29:12\n    |\n LL |         qux:Foo::Baz => {}\n-   |            ^\n+   |            ^-------- specifying the type of a pattern isn't supported\n    |            |\n    |            expected one of `@` or `|`\n-   |            help: maybe write a path separator here: `::`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |         qux::Foo::Baz => {}\n+   |            ~~\n \n error: expected one of `@` or `|`, found `:`\n   --> $DIR/issue-87086-colon-path-sep.rs:35:12\n    |\n LL |         qux: Foo::Baz if true => {}\n-   |            ^\n+   |            ^ -------- specifying the type of a pattern isn't supported\n    |            |\n    |            expected one of `@` or `|`\n-   |            help: maybe write a path separator here: `::`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |         qux::Foo::Baz if true => {}\n+   |            ~~\n \n error: expected one of `@` or `|`, found `:`\n   --> $DIR/issue-87086-colon-path-sep.rs:40:15\n    |\n LL |     if let Foo:Bar = f() {\n-   |               ^\n+   |               ^--- specifying the type of a pattern isn't supported\n    |               |\n    |               expected one of `@` or `|`\n-   |               help: maybe write a path separator here: `::`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |     if let Foo::Bar = f() {\n+   |               ~~\n \n error: expected one of `@` or `|`, found `:`\n   --> $DIR/issue-87086-colon-path-sep.rs:48:16\n    |\n LL |         ref qux: Foo::Baz => {}\n-   |                ^\n+   |                ^ -------- specifying the type of a pattern isn't supported\n    |                |\n    |                expected one of `@` or `|`\n-   |                help: maybe write a path separator here: `::`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |         ref qux::Foo::Baz => {}\n+   |                ~~\n \n error: expected one of `@` or `|`, found `:`\n   --> $DIR/issue-87086-colon-path-sep.rs:57:16\n    |\n LL |         mut qux: Foo::Baz => {}\n-   |                ^\n+   |                ^ -------- specifying the type of a pattern isn't supported\n    |                |\n    |                expected one of `@` or `|`\n-   |                help: maybe write a path separator here: `::`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |         mut qux::Foo::Baz => {}\n+   |                ~~\n \n error: expected one of `@` or `|`, found `:`\n   --> $DIR/issue-87086-colon-path-sep.rs:68:12\n    |\n LL |         Foo:Bar::Baz => {}\n-   |            ^\n+   |            ^-------- specifying the type of a pattern isn't supported\n    |            |\n    |            expected one of `@` or `|`\n-   |            help: maybe write a path separator here: `::`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |         Foo::Bar::Baz => {}\n+   |            ~~\n \n error: expected one of `@` or `|`, found `:`\n-  --> $DIR/issue-87086-colon-path-sep.rs:75:12\n+  --> $DIR/issue-87086-colon-path-sep.rs:74:12\n    |\n LL |         Foo:Bar => {}\n-   |            ^\n+   |            ^--- specifying the type of a pattern isn't supported\n    |            |\n    |            expected one of `@` or `|`\n-   |            help: maybe write a path separator here: `::`\n-\n-error[E0433]: failed to resolve: `Bar` is a variant, not a module\n-  --> $DIR/issue-87086-colon-path-sep.rs:68:13\n    |\n-LL |         Foo:Bar::Baz => {}\n-   |             ^^^ `Bar` is a variant, not a module\n+help: maybe write a path separator here\n+   |\n+LL |         Foo::Bar => {}\n+   |            ~~\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 9 previous errors\n \n-For more information about this error, try `rustc --explain E0433`."}, {"sha": "fec168afba1dde5484db1fc8e8817147a3c3189c", "filename": "tests/ui/parser/type-ascription-in-pattern.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fparser%2Ftype-ascription-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fparser%2Ftype-ascription-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ftype-ascription-in-pattern.rs?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -0,0 +1,16 @@\n+fn foo(x: bool) -> i32 {\n+    match x {\n+        x: i32 => x, //~ ERROR expected\n+        //~^ ERROR mismatched types\n+        true => 42.,\n+        false => 0.333,\n+    }\n+}\n+\n+fn main() {\n+    match foo(true) {\n+        42: i32 => (), //~ ERROR expected\n+        _: f64 => (), //~ ERROR expected\n+        x: i32 => (), //~ ERROR expected\n+    }\n+}"}, {"sha": "0919075499368fc6c6fa8b67a0ed960579593d12", "filename": "tests/ui/parser/type-ascription-in-pattern.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fparser%2Ftype-ascription-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c46fb2111936ad21a8e3aa41e9128752357f5d8/tests%2Fui%2Fparser%2Ftype-ascription-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ftype-ascription-in-pattern.stderr?ref=7c46fb2111936ad21a8e3aa41e9128752357f5d8", "patch": "@@ -0,0 +1,54 @@\n+error: expected one of `@` or `|`, found `:`\n+  --> $DIR/type-ascription-in-pattern.rs:3:10\n+   |\n+LL |         x: i32 => x,\n+   |          ^ --- specifying the type of a pattern isn't supported\n+   |          |\n+   |          expected one of `@` or `|`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |         x::i32 => x,\n+   |          ~~\n+\n+error: expected one of `...`, `..=`, `..`, or `|`, found `:`\n+  --> $DIR/type-ascription-in-pattern.rs:12:11\n+   |\n+LL |         42: i32 => (),\n+   |           ^ --- specifying the type of a pattern isn't supported\n+   |           |\n+   |           expected one of `...`, `..=`, `..`, or `|`\n+\n+error: expected `|`, found `:`\n+  --> $DIR/type-ascription-in-pattern.rs:13:10\n+   |\n+LL |         _: f64 => (),\n+   |          ^ --- specifying the type of a pattern isn't supported\n+   |          |\n+   |          expected `|`\n+\n+error: expected one of `@` or `|`, found `:`\n+  --> $DIR/type-ascription-in-pattern.rs:14:10\n+   |\n+LL |         x: i32 => (),\n+   |          ^ --- specifying the type of a pattern isn't supported\n+   |          |\n+   |          expected one of `@` or `|`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |         x::i32 => (),\n+   |          ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-ascription-in-pattern.rs:3:19\n+   |\n+LL | fn foo(x: bool) -> i32 {\n+   |                    --- expected `i32` because of return type\n+LL |     match x {\n+LL |         x: i32 => x,\n+   |                   ^ expected `i32`, found `bool`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}