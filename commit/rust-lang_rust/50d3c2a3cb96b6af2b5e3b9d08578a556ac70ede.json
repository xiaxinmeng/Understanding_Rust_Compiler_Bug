{"sha": "50d3c2a3cb96b6af2b5e3b9d08578a556ac70ede", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZDNjMmEzY2I5NmI2YWYyYjVlM2I5ZDA4NTc4YTU1NmFjNzBlZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-14T04:21:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-14T04:21:56Z"}, "message": "Auto merge of #78736 - petrochenkov:lazyenum, r=Aaron1011\n\nrustc_parse: Remove optimization for 0-length streams in `collect_tokens`\n\nThe optimization conflates empty token streams with unknown token stream, which is at least suspicious, and doesn't affect performance because 0-length token streams are very rare.\n\nr? `@Aaron1011`", "tree": {"sha": "de3dbe5ca3400808ddb1e44cb36afed9e83dca0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de3dbe5ca3400808ddb1e44cb36afed9e83dca0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50d3c2a3cb96b6af2b5e3b9d08578a556ac70ede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50d3c2a3cb96b6af2b5e3b9d08578a556ac70ede", "html_url": "https://github.com/rust-lang/rust/commit/50d3c2a3cb96b6af2b5e3b9d08578a556ac70ede", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50d3c2a3cb96b6af2b5e3b9d08578a556ac70ede/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b63d05a908ab667f37ea9fb66f4fab9dd89fce76", "url": "https://api.github.com/repos/rust-lang/rust/commits/b63d05a908ab667f37ea9fb66f4fab9dd89fce76", "html_url": "https://github.com/rust-lang/rust/commit/b63d05a908ab667f37ea9fb66f4fab9dd89fce76"}, {"sha": "2879ab793e10a1bf5c158e3301474be96192aa7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2879ab793e10a1bf5c158e3301474be96192aa7a", "html_url": "https://github.com/rust-lang/rust/commit/2879ab793e10a1bf5c158e3301474be96192aa7a"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "40aa2db58c720f374d581be7962ac695d21c0c79", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/50d3c2a3cb96b6af2b5e3b9d08578a556ac70ede/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d3c2a3cb96b6af2b5e3b9d08578a556ac70ede/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=50d3c2a3cb96b6af2b5e3b9d08578a556ac70ede", "patch": "@@ -1180,8 +1180,7 @@ impl<'a> Parser<'a> {\n     /// Records all tokens consumed by the provided callback,\n     /// including the current token. These tokens are collected\n     /// into a `LazyTokenStream`, and returned along with the result\n-    /// of the callback. The returned `LazyTokenStream` will be `None`\n-    /// if not tokens were captured.\n+    /// of the callback.\n     ///\n     /// Note: If your callback consumes an opening delimiter\n     /// (including the case where you call `collect_tokens`\n@@ -1203,17 +1202,14 @@ impl<'a> Parser<'a> {\n \n         let ret = f(self)?;\n \n-        // We didn't capture any tokens\n-        let num_calls = self.token_cursor.num_next_calls - cursor_snapshot.num_next_calls;\n-        if num_calls == 0 {\n-            return Ok((ret, None));\n-        }\n-\n         // Produces a `TokenStream` on-demand. Using `cursor_snapshot`\n         // and `num_calls`, we can reconstruct the `TokenStream` seen\n         // by the callback. This allows us to avoid producing a `TokenStream`\n         // if it is never needed - for example, a captured `macro_rules!`\n         // argument that is never passed to a proc macro.\n+        // In practice token stream creation happens rarely compared to\n+        // calls to `collect_tokens` (see some statistics in #78736),\n+        // so we are doing as little up-front work as possible.\n         //\n         // This also makes `Parser` very cheap to clone, since\n         // there is no intermediate collection buffer to clone.\n@@ -1247,8 +1243,8 @@ impl<'a> Parser<'a> {\n \n         let lazy_impl = LazyTokenStreamImpl {\n             start_token,\n+            num_calls: self.token_cursor.num_next_calls - cursor_snapshot.num_next_calls,\n             cursor_snapshot,\n-            num_calls,\n             desugar_doc_comments: self.desugar_doc_comments,\n         };\n         Ok((ret, Some(LazyTokenStream::new(lazy_impl))))"}]}