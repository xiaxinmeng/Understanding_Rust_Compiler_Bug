{"sha": "ef1d1bdc18e62a4b89c64bf87c7dfbd57aba8933", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMWQxYmRjMThlNjJhNGI4OWM2NGJmODdjN2RmYmQ1N2FiYTg5MzM=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-06T15:15:08Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T17:23:58Z"}, "message": "Move code out of macro and into generic method.", "tree": {"sha": "cf31ae826eba90874129dc837be39d5ee7eae1da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf31ae826eba90874129dc837be39d5ee7eae1da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef1d1bdc18e62a4b89c64bf87c7dfbd57aba8933", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef1d1bdc18e62a4b89c64bf87c7dfbd57aba8933", "html_url": "https://github.com/rust-lang/rust/commit/ef1d1bdc18e62a4b89c64bf87c7dfbd57aba8933", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef1d1bdc18e62a4b89c64bf87c7dfbd57aba8933/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c114fe576f12be5b17e34c37dc34283f25d2eae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c114fe576f12be5b17e34c37dc34283f25d2eae1", "html_url": "https://github.com/rust-lang/rust/commit/c114fe576f12be5b17e34c37dc34283f25d2eae1"}], "stats": {"total": 79, "additions": 39, "deletions": 40}, "files": [{"sha": "eceb68d1f4dd84e9d42f22d91fdd738402f70bf6", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 39, "deletions": 40, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/ef1d1bdc18e62a4b89c64bf87c7dfbd57aba8933/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef1d1bdc18e62a4b89c64bf87c7dfbd57aba8933/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=ef1d1bdc18e62a4b89c64bf87c7dfbd57aba8933", "patch": "@@ -81,57 +81,19 @@ pub enum Kind {\n }\n \n macro_rules! check {\n-    (@inner $self:ident, $rule:ty, $path:expr) => {\n-        let build = $self.build;\n-        let hosts = if <$rule>::ONLY_BUILD_TARGETS || <$rule>::ONLY_BUILD {\n-            &build.config.host[..1]\n-        } else {\n-            &build.hosts\n-        };\n-\n-        // Determine the actual targets participating in this rule.\n-        // NOTE: We should keep the full projection from build triple to\n-        // the hosts for the dist steps, now that the hosts array above is\n-        // truncated to avoid duplication of work in that case. Therefore\n-        // the original non-shadowed hosts array is used below.\n-        let targets = if <$rule>::ONLY_HOSTS {\n-            // If --target was specified but --host wasn't specified,\n-            // don't run any host-only tests. Also, respect any `--host`\n-            // overrides as done for `hosts`.\n-            if build.flags.host.len() > 0 {\n-                &build.flags.host[..]\n-            } else if build.flags.target.len() > 0 {\n-                &[]\n-            } else if <$rule>::ONLY_BUILD {\n-                &build.config.host[..1]\n-            } else {\n-                &build.config.host[..]\n-            }\n-        } else {\n-            &build.targets\n-        };\n-\n-        build.verbose(&format!(\"executing {} with hosts={:?}, targets={:?}\",\n-            stringify!($rule), hosts, targets));\n-        for host in hosts {\n-            for target in targets {\n-                <$rule>::make_run($self, $path, host, target);\n-            }\n-        }\n-    };\n     ($self:ident, $paths:ident, $($rule:ty),+ $(,)*) => {{\n         let paths = $paths;\n         if paths.is_empty() {\n             $({\n                 if <$rule>::DEFAULT {\n-                    check!(@inner $self, $rule, None);\n+                    $self.maybe_run::<$rule>(None);\n                 }\n             })+\n         } else {\n             for path in paths {\n                 $({\n                     if <$rule>::should_run($self, path) {\n-                        check!(@inner $self, $rule, Some(path));\n+                        $self.maybe_run::<$rule>(Some(path));\n                     }\n                 })+\n             }\n@@ -427,6 +389,43 @@ impl<'a> Builder<'a> {\n         cargo\n     }\n \n+    fn maybe_run<S: Step<'a>>(&'a self, path: Option<&Path>) {\n+        let build = self.build;\n+        let hosts = if S::ONLY_BUILD_TARGETS || S::ONLY_BUILD {\n+            &build.config.host[..1]\n+        } else {\n+            &build.hosts\n+        };\n+\n+        // Determine the actual targets participating in this rule.\n+        // NOTE: We should keep the full projection from build triple to\n+        // the hosts for the dist steps, now that the hosts array above is\n+        // truncated to avoid duplication of work in that case. Therefore\n+        // the original non-shadowed hosts array is used below.\n+        let targets = if S::ONLY_HOSTS {\n+            // If --target was specified but --host wasn't specified,\n+            // don't run any host-only tests. Also, respect any `--host`\n+            // overrides as done for `hosts`.\n+            if build.flags.host.len() > 0 {\n+                &build.flags.host[..]\n+            } else if build.flags.target.len() > 0 {\n+                &[]\n+            } else if S::ONLY_BUILD {\n+                &build.config.host[..1]\n+            } else {\n+                &build.config.host[..]\n+            }\n+        } else {\n+            &build.targets\n+        };\n+\n+        for host in hosts {\n+            for target in targets {\n+                S::make_run(self, path, host, target);\n+            }\n+        }\n+    }\n+\n     pub fn ensure<S: Step<'a> + Serialize>(&'a self, step: S) -> S::Output\n     where\n         S::Output: 'a"}]}