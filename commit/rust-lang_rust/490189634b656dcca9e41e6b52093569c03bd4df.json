{"sha": "490189634b656dcca9e41e6b52093569c03bd4df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MDE4OTYzNGI2NTZkY2NhOWU0MWU2YjUyMDkzNTY5YzAzYmQ0ZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-20T14:09:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-20T14:09:53Z"}, "message": "Auto merge of #35857 - jonathandturner:rollup, r=jonathandturner\n\nRollup of 19 pull requests\n\n- Successful merges: #35234, #35701, #35709, #35710, #35775, #35778, #35780, #35781, #35794, #35800, #35804, #35806, #35811, #35812, #35818, #35827, #35830, #35831, #35839\n- Failed merges: #35759", "tree": {"sha": "e437ade751764c2f56a3c9c3be904b815ad27031", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e437ade751764c2f56a3c9c3be904b815ad27031"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/490189634b656dcca9e41e6b52093569c03bd4df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/490189634b656dcca9e41e6b52093569c03bd4df", "html_url": "https://github.com/rust-lang/rust/commit/490189634b656dcca9e41e6b52093569c03bd4df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/490189634b656dcca9e41e6b52093569c03bd4df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99867ee88380062827b63ce547603eea5fd3136c", "url": "https://api.github.com/repos/rust-lang/rust/commits/99867ee88380062827b63ce547603eea5fd3136c", "html_url": "https://github.com/rust-lang/rust/commit/99867ee88380062827b63ce547603eea5fd3136c"}, {"sha": "9072861c2044b85c3bb8503487d5772297053cf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9072861c2044b85c3bb8503487d5772297053cf8", "html_url": "https://github.com/rust-lang/rust/commit/9072861c2044b85c3bb8503487d5772297053cf8"}], "stats": {"total": 470, "additions": 344, "deletions": 126}, "files": [{"sha": "175e32125f27204bdc0db3b79628b08b1a9de19b", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -38,13 +38,19 @@ fn main() {\n     // is passed (a bit janky...)\n     let target = args.windows(2).find(|w| &*w[0] == \"--target\")\n                                 .and_then(|w| w[1].to_str());\n+    let version = args.iter().find(|w| &**w == \"-vV\");\n \n     // Build scripts always use the snapshot compiler which is guaranteed to be\n     // able to produce an executable, whereas intermediate compilers may not\n     // have the standard library built yet and may not be able to produce an\n     // executable. Otherwise we just use the standard compiler we're\n     // bootstrapping with.\n-    let (rustc, libdir) = if target.is_none() {\n+    //\n+    // Also note that cargo will detect the version of the compiler to trigger\n+    // a rebuild when the compiler changes. If this happens, we want to make\n+    // sure to use the actual compiler instead of the snapshot compiler becase\n+    // that's the one that's actually changing.\n+    let (rustc, libdir) = if target.is_none() && version.is_none() {\n         (\"RUSTC_SNAPSHOT\", \"RUSTC_SNAPSHOT_LIBDIR\")\n     } else {\n         (\"RUSTC_REAL\", \"RUSTC_LIBDIR\")"}, {"sha": "c30b2e68665f177f6c62c148d45dc852801ce049", "filename": "src/doc/book/borrow-and-asref.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Fdoc%2Fbook%2Fborrow-and-asref.md", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Fdoc%2Fbook%2Fborrow-and-asref.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fborrow-and-asref.md?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -8,7 +8,7 @@ different. Here\u2019s a quick refresher on what these two traits mean.\n \n # Borrow\n \n-The `Borrow` trait is used when you\u2019re writing a datastructure, and you want to\n+The `Borrow` trait is used when you\u2019re writing a data structure, and you want to\n use either an owned or borrowed type as synonymous for some purpose.\n \n For example, [`HashMap`][hashmap] has a [`get` method][get] which uses `Borrow`:\n@@ -86,7 +86,7 @@ We can see how they\u2019re kind of the same: they both deal with owned and borrowe\n versions of some type. However, they\u2019re a bit different.\n \n Choose `Borrow` when you want to abstract over different kinds of borrowing, or\n-when you\u2019re building a datastructure that treats owned and borrowed values in\n+when you\u2019re building a data structure that treats owned and borrowed values in\n equivalent ways, such as hashing and comparison.\n \n Choose `AsRef` when you want to convert something to a reference directly, and"}, {"sha": "3ed85c1a90b692e75105e50b0ae25c41f34614bf", "filename": "src/doc/book/closures.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Fdoc%2Fbook%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Fdoc%2Fbook%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fclosures.md?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -340,7 +340,7 @@ fn call_with_ref<'a, F>(some_closure:F) -> i32\n     where F: Fn(&'a i32) -> i32 {\n ```\n \n-However this presents a problem with in our case. When you specify the explicit\n+However this presents a problem in our case. When you specify the explicit\n lifetime on a function it binds that lifetime to the *entire* scope of the function\n instead of just the invocation scope of our closure. This means that the borrow checker\n will see a mutable reference in the same lifetime as our immutable reference and fail"}, {"sha": "a62e1b7dfa9c505bfba37e503ad66acee15153b9", "filename": "src/doc/book/error-handling.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Fdoc%2Fbook%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Fdoc%2Fbook%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ferror-handling.md?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -59,7 +59,7 @@ handling is reducing the amount of explicit case analysis the programmer has to\n do while keeping code composable.\n \n Keeping code composable is important, because without that requirement, we\n-could [`panic`](../std/macro.panic!.html) whenever we\n+could [`panic`](../std/macro.panic.html) whenever we\n come across something unexpected. (`panic` causes the current task to unwind,\n and in most cases, the entire program aborts.) Here's an example:\n \n@@ -944,7 +944,7 @@ macro_rules! try {\n }\n ```\n \n-(The [real definition](../std/macro.try!.html) is a bit more\n+(The [real definition](../std/macro.try.html) is a bit more\n sophisticated. We will address that later.)\n \n Using the `try!` macro makes it very easy to simplify our last example. Since\n@@ -1271,7 +1271,7 @@ macro_rules! try {\n ```\n \n This is not its real definition. Its real definition is\n-[in the standard library](../std/macro.try!.html):\n+[in the standard library](../std/macro.try.html):\n \n <span id=\"code-try-def\"></span>\n \n@@ -2178,7 +2178,7 @@ heuristics!\n   [`From`](../std/convert/trait.From.html)\n   and\n   [`Error`](../std/error/trait.Error.html)\n-  impls to make the [`try!`](../std/macro.try!.html)\n+  impls to make the [`try!`](../std/macro.try.html)\n   macro more ergonomic.\n * If you're writing a library and your code can produce errors, define your own\n   error type and implement the"}, {"sha": "b7cbfb60ec4e9289ba1f57036afb7236aa1dcd88", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -530,7 +530,7 @@ use string;\n /// assert_eq!(s, \"Hello, world!\");\n /// ```\n ///\n-/// [format!]: ../macro.format!.html\n+/// [format!]: ../macro.format.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn format(args: Arguments) -> string::String {\n     let mut output = string::String::new();"}, {"sha": "5a1993e741c60821627d99a73eec28ace4ae4a15", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 171, "deletions": 50, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -67,8 +67,7 @@\n //! }\n //! ```\n //!\n-//! See the documentation for each trait for a minimum implementation that\n-//! prints something to the screen.\n+//! See the documentation for each trait for an example implementation.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -107,6 +106,13 @@ pub trait Drop {\n     ///\n     /// After this function is over, the memory of `self` will be deallocated.\n     ///\n+    /// This function cannot be called explicitly. This is compiler error\n+    /// [0040]. However, the [`std::mem::drop`] function in the prelude can be\n+    /// used to call the argument's `Drop` implementation.\n+    ///\n+    /// [0040]: https://doc.rust-lang.org/error-index.html#E0040\n+    /// [`std::mem::drop`]: https://doc.rust-lang.org/std/mem/fn.drop.html\n+    ///\n     /// # Panics\n     ///\n     /// Given that a `panic!` will call `drop()` as it unwinds, any `panic!` in\n@@ -171,25 +177,38 @@ macro_rules! forward_ref_binop {\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `Add`. When `Foo + Foo` happens, it ends up\n-/// calling `add`, and therefore, `main` prints `Adding!`.\n+/// This example creates a `Point` struct that implements the `Add` trait, and\n+/// then demonstrates adding two `Point`s.\n ///\n /// ```\n /// use std::ops::Add;\n ///\n-/// struct Foo;\n+/// #[derive(Debug)]\n+/// struct Point {\n+///     x: i32,\n+///     y: i32,\n+/// }\n ///\n-/// impl Add for Foo {\n-///     type Output = Foo;\n+/// impl Add for Point {\n+///     type Output = Point;\n ///\n-///     fn add(self, _rhs: Foo) -> Foo {\n-///         println!(\"Adding!\");\n-///         self\n+///     fn add(self, other: Point) -> Point {\n+///         Point {\n+///             x: self.x + other.x,\n+///             y: self.y + other.y,\n+///         }\n+///     }\n+/// }\n+///\n+/// impl PartialEq for Point {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.x == other.x && self.y == other.y\n ///     }\n /// }\n ///\n /// fn main() {\n-///     Foo + Foo;\n+///     assert_eq!(Point { x: 1, y: 0 } + Point { x: 2, y: 3 },\n+///                Point { x: 3, y: 3 });\n /// }\n /// ```\n #[lang = \"add\"]\n@@ -300,6 +319,37 @@ sub_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     Foo * Foo;\n /// }\n /// ```\n+///\n+/// Note that `RHS = Self` by default, but this is not mandatory. Here is an\n+/// implementation which enables multiplication of vectors by scalars, as is\n+/// done in linear algebra.\n+///\n+/// ```\n+/// use std::ops::Mul;\n+///\n+/// struct Scalar {value: usize};\n+///\n+/// #[derive(Debug)]\n+/// struct Vector {value: Vec<usize>};\n+///\n+/// impl Mul<Vector> for Scalar {\n+///     type Output = Vector;\n+///\n+///     fn mul(self, rhs: Vector) -> Vector {\n+///         Vector {value: rhs.value.iter().map(|v| self.value * v).collect()}\n+///     }\n+/// }\n+///\n+/// impl PartialEq<Vector> for Vector {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.value == other.value\n+///     }\n+/// }\n+///\n+/// let scalar = Scalar{value: 3};\n+/// let vector = Vector{value: vec![2, 4, 6]};\n+/// assert_eq!(scalar * vector, Vector{value: vec![6, 12, 18]});\n+/// ```\n #[lang = \"mul\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Mul<RHS=Self> {\n@@ -354,6 +404,37 @@ mul_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     Foo / Foo;\n /// }\n /// ```\n+///\n+/// Note that `RHS = Self` by default, but this is not mandatory. Here is an\n+/// implementation which enables division of vectors by scalars, as is done in\n+/// linear algebra.\n+///\n+/// ```\n+/// use std::ops::Div;\n+///\n+/// struct Scalar {value: f32};\n+///\n+/// #[derive(Debug)]\n+/// struct Vector {value: Vec<f32>};\n+///\n+/// impl Div<Scalar> for Vector {\n+///     type Output = Vector;\n+///\n+///     fn div(self, rhs: Scalar) -> Vector {\n+///         Vector {value: self.value.iter().map(|v| v / rhs.value).collect()}\n+///     }\n+/// }\n+///\n+/// impl PartialEq<Vector> for Vector {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.value == other.value\n+///     }\n+/// }\n+///\n+/// let scalar = Scalar{value: 2f32};\n+/// let vector = Vector{value: vec![2f32, 4f32, 6f32]};\n+/// assert_eq!(vector / scalar, Vector{value: vec![1f32, 2f32, 3f32]});\n+/// ```\n #[lang = \"div\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Div<RHS=Self> {\n@@ -475,26 +556,37 @@ rem_impl_float! { f32 f64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `Neg`. When `-Foo` happens, it ends up calling\n-/// `neg`, and therefore, `main` prints `Negating!`.\n+/// An implementation of `Neg` for `Sign`, which allows the use of `-` to\n+/// negate its value.\n ///\n /// ```\n /// use std::ops::Neg;\n ///\n-/// struct Foo;\n+/// #[derive(Debug, PartialEq)]\n+/// enum Sign {\n+///     Negative,\n+///     Zero,\n+///     Positive,\n+/// }\n ///\n-/// impl Neg for Foo {\n-///     type Output = Foo;\n+/// impl Neg for Sign {\n+///     type Output = Sign;\n ///\n-///     fn neg(self) -> Foo {\n-///         println!(\"Negating!\");\n-///         self\n+///     fn neg(self) -> Sign {\n+///         match self {\n+///             Sign::Negative => Sign::Positive,\n+///             Sign::Zero => Sign::Zero,\n+///             Sign::Positive => Sign::Negative,\n+///         }\n ///     }\n /// }\n ///\n-/// fn main() {\n-///     -Foo;\n-/// }\n+/// // a negative positive is a negative\n+/// assert_eq!(-Sign::Positive, Sign::Negative);\n+/// // a double negative is a positive\n+/// assert_eq!(-Sign::Negative, Sign::Positive);\n+/// // zero is its own negation\n+/// assert_eq!(-Sign::Zero, Sign::Zero);\n /// ```\n #[lang = \"neg\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -543,26 +635,31 @@ neg_impl_numeric! { isize i8 i16 i32 i64 f32 f64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `Not`. When `!Foo` happens, it ends up calling\n-/// `not`, and therefore, `main` prints `Not-ing!`.\n+/// An implementation of `Not` for `Answer`, which enables the use of `!` to\n+/// invert its value.\n ///\n /// ```\n /// use std::ops::Not;\n ///\n-/// struct Foo;\n+/// #[derive(Debug, PartialEq)]\n+/// enum Answer {\n+///     Yes,\n+///     No,\n+/// }\n ///\n-/// impl Not for Foo {\n-///     type Output = Foo;\n+/// impl Not for Answer {\n+///     type Output = Answer;\n ///\n-///     fn not(self) -> Foo {\n-///         println!(\"Not-ing!\");\n-///         self\n+///     fn not(self) -> Answer {\n+///         match self {\n+///             Answer::Yes => Answer::No,\n+///             Answer::No => Answer::Yes\n+///         }\n ///     }\n /// }\n ///\n-/// fn main() {\n-///     !Foo;\n-/// }\n+/// assert_eq!(!Answer::Yes, Answer::No);\n+/// assert_eq!(!Answer::No, Answer::Yes);\n /// ```\n #[lang = \"not\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -899,25 +996,36 @@ shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `AddAssign`. When `Foo += Foo` happens, it ends up\n-/// calling `add_assign`, and therefore, `main` prints `Adding!`.\n+/// This example creates a `Point` struct that implements the `AddAssign`\n+/// trait, and then demonstrates add-assigning to a mutable `Point`.\n ///\n /// ```\n /// use std::ops::AddAssign;\n ///\n-/// struct Foo;\n+/// #[derive(Debug)]\n+/// struct Point {\n+///     x: i32,\n+///     y: i32,\n+/// }\n ///\n-/// impl AddAssign for Foo {\n-///     fn add_assign(&mut self, _rhs: Foo) {\n-///         println!(\"Adding!\");\n+/// impl AddAssign for Point {\n+///     fn add_assign(&mut self, other: Point) {\n+///         *self = Point {\n+///             x: self.x + other.x,\n+///             y: self.y + other.y,\n+///         };\n ///     }\n /// }\n ///\n-/// # #[allow(unused_assignments)]\n-/// fn main() {\n-///     let mut foo = Foo;\n-///     foo += Foo;\n+/// impl PartialEq for Point {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.x == other.x && self.y == other.y\n+///     }\n /// }\n+///\n+/// let mut point = Point { x: 1, y: 0 };\n+/// point += Point { x: 2, y: 3 };\n+/// assert_eq!(point, Point { x: 3, y: 3 });\n /// ```\n #[lang = \"add_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -1467,17 +1575,30 @@ pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n ///\n /// # Examples\n ///\n+/// The `..` syntax is a `RangeFull`:\n+///\n+/// ```\n+/// assert_eq!((..), std::ops::RangeFull);\n /// ```\n-/// fn main() {\n-///     assert_eq!((..), std::ops::RangeFull);\n ///\n-///     let arr = [0, 1, 2, 3];\n-///     assert_eq!(arr[ .. ], [0,1,2,3]);  // RangeFull\n-///     assert_eq!(arr[ ..3], [0,1,2  ]);\n-///     assert_eq!(arr[1.. ], [  1,2,3]);\n-///     assert_eq!(arr[1..3], [  1,2  ]);\n+/// It does not have an `IntoIterator` implementation, so you can't use it in a\n+/// `for` loop directly. This won't compile:\n+///\n+/// ```ignore\n+/// for i in .. {\n+///    // ...\n /// }\n /// ```\n+///\n+/// Used as a slicing index, `RangeFull` produces the full array as a slice.\n+///\n+/// ```\n+/// let arr = [0, 1, 2, 3];\n+/// assert_eq!(arr[ .. ], [0,1,2,3]);  // RangeFull\n+/// assert_eq!(arr[ ..3], [0,1,2  ]);\n+/// assert_eq!(arr[1.. ], [  1,2,3]);\n+/// assert_eq!(arr[1..3], [  1,2  ]);\n+/// ```\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeFull;"}, {"sha": "250ad80f5af6c98b738cf28c3aa0f3da7c6562c9", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -66,7 +66,7 @@ impl<'a, 'tcx> EffectCheckVisitor<'a, 'tcx> {\n                 struct_span_err!(\n                     self.tcx.sess, span, E0133,\n                     \"{} requires unsafe function or block\", description)\n-                    .span_label(span, &format!(\"unsafe call requires unsafe function or block\"))\n+                    .span_label(span, &description)\n                     .emit();\n             }\n             UnsafeBlock(block_id) => {"}, {"sha": "32c87fb615a5344131607f05898f283b9d998632", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -98,9 +98,9 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                        values.expected,\n                        values.found)\n             }\n-            Mutability => write!(f, \"values differ in mutability\"),\n+            Mutability => write!(f, \"types differ in mutability\"),\n             BoxMutability => {\n-                write!(f, \"boxed values differ in mutability\")\n+                write!(f, \"boxed types differ in mutability\")\n             }\n             VecMutability => write!(f, \"vectors differ in mutability\"),\n             PtrMutability => write!(f, \"pointers differ in mutability\"),"}, {"sha": "793155cfa8f8f6fc8508af5fb262d6b9bd9df756", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -426,7 +426,9 @@ impl EmitterWriter {\n                             continue;\n                         }\n                         // Check to make sure we're not in any <*macros>\n-                        if !cm.span_to_filename(def_site).contains(\"macros>\") {\n+                        if !cm.span_to_filename(def_site).contains(\"macros>\") &&\n+                            !trace.macro_decl_name.starts_with(\"#[\")\n+                        {\n                             new_labels.push((trace.call_site,\n                                              \"in this macro invocation\".to_string()));\n                             break;"}, {"sha": "bcdc0d2ea3f9dfb11d864722a3672984a96d327c", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -493,9 +493,13 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                             if let ty::TyRawPtr(_) = base_ty.sty {\n                                 this.add(Qualif::NOT_CONST);\n                                 if this.mode != Mode::Fn {\n-                                    span_err!(this.tcx.sess, this.span, E0396,\n-                                              \"raw pointers cannot be dereferenced in {}s\",\n-                                              this.mode);\n+                                    struct_span_err!(this.tcx.sess,\n+                                        this.span, E0396,\n+                                        \"raw pointers cannot be dereferenced in {}s\",\n+                                        this.mode)\n+                                    .span_label(this.span,\n+                                        &format!(\"dereference of raw pointer in constant\"))\n+                                    .emit();\n                                 }\n                             }\n                         }\n@@ -681,9 +685,14 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n \n                     self.add(Qualif::NOT_CONST);\n                     if self.mode != Mode::Fn {\n-                        span_err!(self.tcx.sess, self.span, E0395,\n-                                  \"raw pointers cannot be compared in {}s\",\n-                                  self.mode);\n+                        struct_span_err!(\n+                            self.tcx.sess, self.span, E0395,\n+                            \"raw pointers cannot be compared in {}s\",\n+                            self.mode)\n+                        .span_label(\n+                            self.span,\n+                            &format!(\"comparing raw pointers in static\"))\n+                        .emit();\n                     }\n                 }\n             }"}, {"sha": "af39f8a415c6797e4327622cb02650e773cacf95", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -3382,7 +3382,11 @@ impl<'a> Resolver<'a> {\n             },\n             (true, _) | (_, true) => struct_span_err!(self.session, span, E0260, \"{}\", msg),\n             _ => match (old_binding.is_import(), binding.is_import()) {\n-                (false, false) => struct_span_err!(self.session, span, E0428, \"{}\", msg),\n+                (false, false) => {\n+                    let mut e = struct_span_err!(self.session, span, E0428, \"{}\", msg);\n+                    e.span_label(span, &format!(\"already defined\"));\n+                    e\n+                },\n                 (true, true) => {\n                     let mut e = struct_span_err!(self.session, span, E0252, \"{}\", msg);\n                     e.span_label(span, &format!(\"already imported\"));"}, {"sha": "acb6653214dcbd8847d2db5ca4c34b4f68c94687", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -29,7 +29,7 @@ use rustc::hir;\n pub fn check_legal_trait_for_method_call(ccx: &CrateCtxt, span: Span, trait_id: DefId) {\n     if ccx.tcx.lang_items.drop_trait() == Some(trait_id) {\n         struct_span_err!(ccx.tcx.sess, span, E0040, \"explicit use of destructor method\")\n-            .span_label(span, &format!(\"call to destructor method\"))\n+            .span_label(span, &format!(\"explicit destructor calls not allowed\"))\n             .emit();\n     }\n }"}, {"sha": "0e42990a337d41f55866f7d91b351210a93d24a6", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -402,7 +402,7 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             infcx.note_type_err(\n                 &mut diag,\n                 origin,\n-                trait_err_span.map(|sp| (sp, format!(\"original trait requirement\"))),\n+                trait_err_span.map(|sp| (sp, format!(\"type in trait\"))),\n                 Some(infer::ValuePairs::Types(ExpectedFound {\n                      expected: trait_fty,\n                      found: impl_fty\n@@ -575,7 +575,7 @@ pub fn compare_const_impl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             infcx.note_type_err(\n                 &mut diag,\n                 origin,\n-                Some((trait_c_span, format!(\"original trait requirement\"))),\n+                Some((trait_c_span, format!(\"type in trait\"))),\n                 Some(infer::ValuePairs::Types(ExpectedFound {\n                     expected: trait_ty,\n                     found: impl_ty"}, {"sha": "3d51da02b874d666a2e9f63bfdefb49471493cba", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -903,9 +903,12 @@ fn check_on_unimplemented<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                 }\n             }\n         } else {\n-            span_err!(ccx.tcx.sess, attr.span, E0232,\n-                                  \"this attribute must have a value, \\\n-                                   eg `#[rustc_on_unimplemented = \\\"foo\\\"]`\")\n+            struct_span_err!(\n+                ccx.tcx.sess, attr.span, E0232,\n+                \"this attribute must have a value\")\n+                .span_label(attr.span, &format!(\"attribute requires a value\"))\n+                .note(&format!(\"eg `#[rustc_on_unimplemented = \\\"foo\\\"]`\"))\n+                .emit();\n         }\n     }\n }\n@@ -1013,7 +1016,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                          // We can only get the spans from local trait definition\n                          // Same for E0324 and E0325\n                          if let Some(trait_span) = tcx.map.span_if_local(ty_trait_item.def_id()) {\n-                            err.span_label(trait_span, &format!(\"original trait requirement\"));\n+                            err.span_label(trait_span, &format!(\"item in trait\"));\n                          }\n                          err.emit()\n                     }\n@@ -1041,7 +1044,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                   impl_trait_ref);\n                          err.span_label(impl_item.span, &format!(\"does not match trait\"));\n                          if let Some(trait_span) = tcx.map.span_if_local(ty_trait_item.def_id()) {\n-                            err.span_label(trait_span, &format!(\"original trait requirement\"));\n+                            err.span_label(trait_span, &format!(\"item in trait\"));\n                          }\n                          err.emit()\n                     }\n@@ -1064,7 +1067,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                   impl_trait_ref);\n                          err.span_label(impl_item.span, &format!(\"does not match trait\"));\n                          if let Some(trait_span) = tcx.map.span_if_local(ty_trait_item.def_id()) {\n-                            err.span_label(trait_span, &format!(\"original trait requirement\"));\n+                            err.span_label(trait_span, &format!(\"item in trait\"));\n                          }\n                          err.emit()\n                     }\n@@ -1245,8 +1248,11 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n     let hint = *ccx.tcx.lookup_repr_hints(def_id).get(0).unwrap_or(&attr::ReprAny);\n \n     if hint != attr::ReprAny && vs.is_empty() {\n-        span_err!(ccx.tcx.sess, sp, E0084,\n-            \"unsupported representation for zero-variant enum\");\n+        struct_span_err!(\n+            ccx.tcx.sess, sp, E0084,\n+            \"unsupported representation for zero-variant enum\")\n+            .span_label(sp, &format!(\"unsupported enum representation\"))\n+            .emit();\n     }\n \n     let repr_type_ty = ccx.tcx.enum_repr_type(Some(&hint)).to_ty(ccx.tcx);\n@@ -4408,8 +4414,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                               expected at most {}, found {}\",\n                              count(type_defs.len()),\n                              count(types.len()))\n-                .span_label(span, &format!(\"expected {}\",\n-                            count(type_defs.len()))).emit();\n+                .span_label(span, &format!(\"too many type parameters\")).emit();\n \n             // To prevent derived errors to accumulate due to extra\n             // type parameters, we force instantiate_value_path to"}, {"sha": "a3c043fe7cbd3282aa353bb18219e4fc56cdbe42", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -37,7 +37,7 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                       \"cannot define inherent `impl` for a type outside of the \\\n                        crate where the type is defined\")\n                 .span_label(item.span, &format!(\"impl for type defined outside of crate.\"))\n-                .span_note(item.span, &format!(\"define and implement a trait or new type instead\"))\n+                .note(\"define and implement a trait or new type instead\")\n                 .emit();\n         }\n     }"}, {"sha": "8bb5efdcad2c348f882ab234ff6fbe73948abc09", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -572,7 +572,7 @@ impl Foo for Bar {\n     // error, expected u16, found i16\n     fn foo(x: i16) { }\n \n-    // error, values differ in mutability\n+    // error, types differ in mutability\n     fn bar(&mut self) { }\n }\n ```"}, {"sha": "39b1a04e98e6985a7bdf400a46df9b9bd0ecc4a3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -2803,7 +2803,7 @@ pub struct Macro {\n \n impl Clean<Item> for doctree::Macro {\n     fn clean(&self, cx: &DocContext) -> Item {\n-        let name = format!(\"{}!\", self.name.clean(cx));\n+        let name = self.name.clean(cx);\n         Item {\n             name: Some(name.clone()),\n             attrs: self.attrs.clean(cx),\n@@ -2814,8 +2814,10 @@ impl Clean<Item> for doctree::Macro {\n             def_id: cx.map.local_def_id(self.id),\n             inner: MacroItem(Macro {\n                 source: format!(\"macro_rules! {} {{\\n{}}}\",\n-                    name.trim_right_matches('!'), self.matchers.iter().map(|span|\n-                        format!(\"    {} => {{ ... }};\\n\", span.to_src(cx))).collect::<String>()),\n+                                name,\n+                                self.matchers.iter().map(|span| {\n+                                    format!(\"    {} => {{ ... }};\\n\", span.to_src(cx))\n+                                }).collect::<String>()),\n                 imported_from: self.imported_from.clean(cx),\n             }),\n         }"}, {"sha": "e02cfb96dddf17a0170f61008e82455f03480f4a", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -1426,6 +1426,16 @@ impl Context {\n                                                                 .open(&redir_dst) {\n                     try_err!(layout::redirect(&mut redirect_out, file_name), &redir_dst);\n                 }\n+\n+                // If the item is a macro, redirect from the old macro URL (with !)\n+                // to the new one (without).\n+                // FIXME(#35705) remove this redirect.\n+                if item_type == ItemType::Macro {\n+                    let redir_name = format!(\"{}.{}!.html\", item_type, name);\n+                    let redir_dst = self.dst.join(redir_name);\n+                    let mut redirect_out = try_err!(File::create(&redir_dst), &redir_dst);\n+                    try_err!(layout::redirect(&mut redirect_out, file_name), &redir_dst);\n+                }\n             }\n         }\n         Ok(())"}, {"sha": "3d23a9a2383fffceb80da292b0ed4444c57205d5", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -251,6 +251,14 @@ impl Hash for OsString {\n \n impl OsStr {\n     /// Coerces into an `OsStr` slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsStr;\n+    ///\n+    /// let os_str = OsStr::new(\"foo\");\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new<S: AsRef<OsStr> + ?Sized>(s: &S) -> &OsStr {\n         s.as_ref()\n@@ -283,6 +291,18 @@ impl OsStr {\n     }\n \n     /// Checks whether the `OsStr` is empty.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsStr;\n+    ///\n+    /// let os_str = OsStr::new(\"\");\n+    /// assert!(os_str.is_empty());\n+    ///\n+    /// let os_str = OsStr::new(\"foo\");\n+    /// assert!(!os_str.is_empty());\n+    /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n     pub fn is_empty(&self) -> bool {\n         self.inner.inner.is_empty()\n@@ -296,6 +316,18 @@ impl OsStr {\n     /// other methods like `OsString::with_capacity` to avoid reallocations.\n     ///\n     /// See `OsStr` introduction for more information about encoding.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsStr;\n+    ///\n+    /// let os_str = OsStr::new(\"\");\n+    /// assert_eq!(os_str.len(), 0);\n+    ///\n+    /// let os_str = OsStr::new(\"foo\");\n+    /// assert_eq!(os_str.len(), 3);\n+    /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n     pub fn len(&self) -> usize {\n         self.inner.inner.len()"}, {"sha": "307d014fd68c6a264f748ce6e02721ce0cb0bf41", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -236,7 +236,7 @@\n //! to read the line and print it, so we use `()`.\n //!\n //! [result]: type.Result.html\n-//! [try]: ../macro.try!.html\n+//! [try]: ../macro.try.html\n //!\n //! ## Platform-specific behavior\n //!\n@@ -957,8 +957,8 @@ pub trait Write {\n     /// explicitly be called. The [`write!`][write] macro should be favored to\n     /// invoke this method instead.\n     ///\n-    /// [formatargs]: ../macro.format_args!.html\n-    /// [write]: ../macro.write!.html\n+    /// [formatargs]: ../macro.format_args.html\n+    /// [write]: ../macro.write.html\n     ///\n     /// This function internally uses the [`write_all`][writeall] method on\n     /// this trait and hence will continuously write data so long as no errors"}, {"sha": "ff3b9c6d041633c6c658a384576197170926695f", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -175,7 +175,7 @@\n //! [`atomic`]: sync/atomic/index.html\n //! [`collections`]: collections/index.html\n //! [`for`]: ../book/loops.html#for\n-//! [`format!`]: macro.format!.html\n+//! [`format!`]: macro.format.html\n //! [`fs`]: fs/index.html\n //! [`io`]: io/index.html\n //! [`iter`]: iter/index.html"}, {"sha": "2b92da6c684a43f2e5680000520583964b7d2bff", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -27,7 +27,7 @@\n /// assert!(!bool_val);\n /// ```\n ///\n-/// [`assert!`]: macro.assert!.html\n+/// [`assert!`]: macro.assert.html\n /// [`if`]: ../book/if.html\n /// [`BitAnd`]: ops/trait.BitAnd.html\n /// [`BitOr`]: ops/trait.BitOr.html"}, {"sha": "edfe22186e1622aba61df39b3028b5f762725f76", "filename": "src/test/compile-fail/E0040.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2FE0040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2FE0040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0040.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -22,5 +22,5 @@ fn main() {\n     let mut x = Foo { x: -7 };\n     x.drop();\n     //~^ ERROR E0040\n-    //~| NOTE call to destructor method\n+    //~| NOTE explicit destructor calls not allowed\n }"}, {"sha": "933462e553e3b6db5afd3120201397d5d5307c9c", "filename": "src/test/compile-fail/E0053.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2FE0053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2FE0053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0053.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n trait Foo {\n-    fn foo(x: u16); //~ NOTE original trait requirement\n-    fn bar(&self); //~ NOTE original trait requirement\n+    fn foo(x: u16); //~ NOTE type in trait\n+    fn bar(&self); //~ NOTE type in trait\n }\n \n struct Bar;\n@@ -21,7 +21,7 @@ impl Foo for Bar {\n     //~| NOTE expected u16\n     fn bar(&mut self) { }\n     //~^ ERROR method `bar` has an incompatible type for trait\n-    //~| NOTE values differ in mutability\n+    //~| NOTE types differ in mutability\n     //~| NOTE expected type `fn(&Bar)`\n     //~| NOTE found type `fn(&mut Bar)`\n }"}, {"sha": "c7c5662f1feda8978b60d148d2f338e76fdf0728", "filename": "src/test/compile-fail/E0084.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2FE0084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2FE0084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0084.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -9,7 +9,9 @@\n // except according to those terms.\n \n #[repr(i32)]\n-enum Foo {} //~ ERROR E0084\n+enum Foo {}\n+//~^ ERROR E0084\n+//~| unsupported enum representation\n \n fn main() {\n }"}, {"sha": "7c98de59e27972f71860b5de9d63ac4ea346dcce", "filename": "src/test/compile-fail/E0087.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2FE0087.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2FE0087.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0087.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -12,5 +12,5 @@ fn foo<T>() {}\n \n fn main() {\n     foo::<f64, bool>(); //~ ERROR E0087\n-    //~^ NOTE expected\n+    //~^ NOTE too many type parameters\n }"}, {"sha": "f60d9a5083f6fd526c9cdb9a810165b16398069b", "filename": "src/test/compile-fail/E0133.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2FE0133.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2FE0133.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0133.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -13,5 +13,5 @@ unsafe fn f() { return; }\n fn main() {\n     f();\n     //~^ ERROR E0133\n-    //~| NOTE unsafe call requires unsafe function or block\n+    //~| NOTE call to unsafe function\n }"}, {"sha": "ce4f4638dac59c6bdb4396856f45326c72ce23f7", "filename": "src/test/compile-fail/E0232.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2FE0232.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2FE0232.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0232.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -10,7 +10,10 @@\n \n #![feature(on_unimplemented)]\n \n-#[rustc_on_unimplemented] //~ ERROR E0232\n+#[rustc_on_unimplemented]\n+//~^ ERROR E0232\n+//~| NOTE attribute requires a value\n+//~| NOTE eg `#[rustc_on_unimplemented = \"foo\"]`\n trait Bar {}\n \n fn main() {"}, {"sha": "98f08cd68c22de81691347133e21ccd16e1d4384", "filename": "src/test/compile-fail/E0395.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2FE0395.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2FE0395.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0395.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -12,6 +12,6 @@ static FOO: i32 = 42;\n static BAR: i32 = 42;\n \n static BAZ: bool = { (&FOO as *const i32) == (&BAR as *const i32) }; //~ ERROR E0395\n-\n+                   //~| NOTE comparing raw pointers in static\n fn main() {\n }"}, {"sha": "47080fb6e9ef754f64b7fd2d86d59c8f1d68b280", "filename": "src/test/compile-fail/E0396.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2FE0396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2FE0396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0396.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -11,6 +11,7 @@\n const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n \n const VALUE: u8 = unsafe { *REG_ADDR }; //~ ERROR E0396\n+                  //~| NOTE dereference of raw pointer in constant\n \n fn main() {\n }"}, {"sha": "63b4efb73f0c5fe32e7a3c09cc0a0863b4ef54d0", "filename": "src/test/compile-fail/E0428.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2FE0428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2FE0428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0428.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Bar;\n+struct Bar; //~ previous definition of `Bar` here\n+            //~| previous definition of `Bar` here\n struct Bar; //~ ERROR E0428\n-            //~^ ERROR E0428\n+            //~| NOTE already defined\n+            //~| ERROR E0428\n+            //~| NOTE already defined\n \n fn main () {\n }"}, {"sha": "ec495c87b1a3f70e1c56d8d715fd92bad73502da", "filename": "src/test/compile-fail/associated-const-impl-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -11,7 +11,7 @@\n #![feature(associated_consts)]\n \n trait Foo {\n-    const BAR: u32; //~ NOTE original trait requirement\n+    const BAR: u32; //~ NOTE type in trait\n }\n \n struct SignedBar;"}, {"sha": "bc3d58ef33db08cf49aac1e38511d7a2bbee3037", "filename": "src/test/compile-fail/coerce-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -16,5 +16,5 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected type `&mut i32`\n     //~| found type `&{integer}`\n-    //~| values differ in mutability\n+    //~| types differ in mutability\n }"}, {"sha": "c626801d48c03e8dd066282e5e868e6c1ea33228", "filename": "src/test/compile-fail/const-deref-ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fconst-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fconst-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-deref-ptr.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -12,5 +12,6 @@\n \n fn main() {\n     static C: u64 = unsafe {*(0xdeadbeef as *const u64)}; //~ ERROR E0396\n+                    //~| NOTE dereference of raw pointer in constant\n     println!(\"{}\", C);\n }"}, {"sha": "527ac7505a654b15c068ecd704390adee28932e8", "filename": "src/test/compile-fail/enum-and-module-in-same-scope.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fenum-and-module-in-same-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fenum-and-module-in-same-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-and-module-in-same-scope.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum Foo { //~ NOTE previous definition\n+enum Foo { //~ NOTE previous definition of `Foo` here\n     X\n }\n \n mod Foo { //~ ERROR a type named `Foo` has already been defined\n+          //~| NOTE already defined\n     pub static X: isize = 42;\n     fn f() { f() } // Check that this does not result in a resolution error\n }"}, {"sha": "d0d911b6eb93600ae4af8f5351e4a66bfd968bab", "filename": "src/test/compile-fail/fn-variance-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -19,9 +19,9 @@ fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n fn main() {\n     apply(&3, takes_imm);\n     apply(&3, takes_mut);\n-    //~^ ERROR (values differ in mutability)\n+    //~^ ERROR (types differ in mutability)\n \n     apply(&mut 3, takes_mut);\n     apply(&mut 3, takes_imm);\n-    //~^ ERROR (values differ in mutability)\n+    //~^ ERROR (types differ in mutability)\n }"}, {"sha": "388c9a1729cca08e5a8a510807bcf516b87fd1ba", "filename": "src/test/compile-fail/impl-wrong-item-for-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -12,9 +12,9 @@\n \n trait Foo {\n     fn bar(&self);\n-    //~^ NOTE original trait requirement\n-    //~| NOTE original trait requirement\n-    const MY_CONST: u32; //~ NOTE original trait requirement\n+    //~^ NOTE item in trait\n+    //~| NOTE item in trait\n+    const MY_CONST: u32; //~ NOTE item in trait\n }\n \n pub struct FooConstForMethod;"}, {"sha": "d103d45bc4cb75bb4b6ecf714f0ce572e87fdb6d", "filename": "src/test/compile-fail/issue-21546.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fissue-21546.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fissue-21546.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21546.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -17,6 +17,7 @@ mod Foo { }\n #[allow(dead_code)]\n struct Foo;\n //~^ ERROR a module named `Foo` has already been defined in this module\n+//~| NOTE already defined\n \n #[allow(non_snake_case)]\n mod Bar { }\n@@ -25,6 +26,7 @@ mod Bar { }\n #[allow(dead_code)]\n struct Bar(i32);\n //~^ ERROR a module named `Bar` has already been defined\n+//~| NOTE already defined\n \n \n #[allow(dead_code)]\n@@ -34,6 +36,7 @@ struct Baz(i32);\n #[allow(non_snake_case)]\n mod Baz { }\n //~^ ERROR a type named `Baz` has already been defined\n+//~| NOTE already defined\n \n \n #[allow(dead_code)]\n@@ -43,6 +46,7 @@ struct Qux { x: bool }\n #[allow(non_snake_case)]\n mod Qux { }\n //~^ ERROR a type named `Qux` has already been defined\n+//~| NOTE already defined\n \n \n #[allow(dead_code)]\n@@ -52,6 +56,7 @@ struct Quux;\n #[allow(non_snake_case)]\n mod Quux { }\n //~^ ERROR a type named `Quux` has already been defined\n+//~| NOTE already defined\n \n \n #[allow(dead_code)]\n@@ -61,5 +66,6 @@ enum Corge { A, B }\n #[allow(non_snake_case)]\n mod Corge { }\n //~^ ERROR a type named `Corge` has already been defined\n+//~| NOTE already defined\n \n fn main() { }"}, {"sha": "468282fa7cca9cfaa0997e52537f7eba34a3d8ae", "filename": "src/test/compile-fail/issue-25826.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fissue-25826.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fissue-25826.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25826.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -12,5 +12,6 @@ fn id<T>(t: T) -> T { t }\n fn main() {\n     const A: bool = id::<u8> as *const () < id::<u16> as *const ();\n     //~^ ERROR raw pointers cannot be compared in constants [E0395]\n+    //~^^ NOTE comparing raw pointers in static\n     println!(\"{}\", A);\n }"}, {"sha": "4a36bc88fa7d9d7aae7f5ca4daa8f703e0ccd88a", "filename": "src/test/compile-fail/issue-28776.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fissue-28776.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fissue-28776.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28776.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -13,5 +13,5 @@ use std::ptr;\n fn main() {\n     (&ptr::write)(1 as *mut _, 42);\n     //~^ ERROR E0133\n-    //~| NOTE unsafe call requires unsafe function or block\n+    //~| NOTE call to unsafe function\n }"}, {"sha": "7685a5c0808a2dad39a3dd64c472617086d5ea1c", "filename": "src/test/compile-fail/mut-pattern-mismatched.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -16,7 +16,7 @@ fn main() {\n      let &_ //~  ERROR mismatched types\n             //~| expected type `&mut {integer}`\n             //~| found type `&_`\n-            //~| values differ in mutability\n+            //~| types differ in mutability\n         = foo;\n     let &mut _ = foo;\n \n@@ -25,6 +25,6 @@ fn main() {\n     let &mut _ //~  ERROR mismatched types\n                //~| expected type `&{integer}`\n                //~| found type `&mut _`\n-               //~| values differ in mutability\n+               //~| types differ in mutability\n          = bar;\n }"}, {"sha": "1390c9507c1c2fd640b53a8bc65efdbd30dc9629", "filename": "src/test/compile-fail/ptr-coercion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -17,17 +17,17 @@ pub fn main() {\n     let x: *mut isize = x; //~  ERROR mismatched types\n                            //~| expected type `*mut isize`\n                            //~| found type `*const isize`\n-                           //~| values differ in mutability\n+                           //~| types differ in mutability\n \n     // & -> *mut\n     let x: *mut isize = &42; //~  ERROR mismatched types\n                              //~| expected type `*mut isize`\n                              //~| found type `&isize`\n-                             //~| values differ in mutability\n+                             //~| types differ in mutability\n \n     let x: *const isize = &42;\n     let x: *mut isize = x; //~  ERROR mismatched types\n                            //~| expected type `*mut isize`\n                            //~| found type `*const isize`\n-                           //~| values differ in mutability\n+                           //~| types differ in mutability\n }"}, {"sha": "bee3704a353d3b1d4051b83cbfe57f727e55dca7", "filename": "src/test/compile-fail/slice-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected type `&mut [_]`\n     //~| found type `&[isize]`\n-    //~| values differ in mutability\n+    //~| types differ in mutability\n }"}, {"sha": "7bcab1f6ac56b9da9e828b45fefc604a6ac67fb3", "filename": "src/test/compile-fail/trait-duplicate-methods.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Ftrait-duplicate-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Ftrait-duplicate-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-duplicate-methods.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -11,6 +11,7 @@\n trait Foo {\n     fn orange(&self); //~ NOTE previous definition of `orange` here\n     fn orange(&self); //~ ERROR a value named `orange` has already been defined in this trait\n+                      //~| NOTE already define\n }\n \n fn main() {}"}, {"sha": "65732a8ff69e54ac117d0c0a213f728b0931617c", "filename": "src/test/compile-fail/trait-safety-fn-body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Ftrait-safety-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Ftrait-safety-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-safety-fn-body.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -20,7 +20,7 @@ unsafe impl UnsafeTrait for *mut isize {\n         // Unsafe actions are not made legal by taking place in an unsafe trait:\n         *self += 1;\n         //~^ ERROR E0133\n-        //~| NOTE unsafe call requires unsafe function or block\n+        //~| NOTE dereference of raw pointer\n     }\n }\n "}, {"sha": "91e16592be4729364d82be8f2b8035f966ac8ea3", "filename": "src/test/compile-fail/unsafe-const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Funsafe-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fcompile-fail%2Funsafe-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-const-fn.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -18,7 +18,7 @@ const unsafe fn dummy(v: u32) -> u32 {\n \n const VAL: u32 = dummy(0xFFFF);\n //~^ ERROR E0133\n-//~| NOTE unsafe call requires unsafe function or block\n+//~| NOTE call to unsafe function\n \n fn main() {\n     assert_eq!(VAL, 0xFFFF0000);"}, {"sha": "12de76654512d3ee2cb3544376e9a13f14297fb9", "filename": "src/test/rustdoc/issue-26606.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Frustdoc%2Fissue-26606.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Frustdoc%2Fissue-26606.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-26606.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -12,7 +12,7 @@\n // ignore-cross-compile\n // build-aux-docs\n \n-// @has issue_26606_macro/macro.make_item!.html\n+// @has issue_26606_macro/macro.make_item.html\n #[macro_use]\n extern crate issue_26606_macro;\n "}, {"sha": "9aeeb71707c905f4cbe3094751adbd480ee7c92e", "filename": "src/test/rustdoc/macros.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Frustdoc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Frustdoc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacros.rs?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -8,10 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// @has macros/macro.my_macro!.html //pre 'macro_rules! my_macro {'\n+// @has macros/macro.my_macro.html //pre 'macro_rules! my_macro {'\n // @has - //pre '() => { ... };'\n // @has - //pre '($a:tt) => { ... };'\n // @has - //pre '($e:expr) => { ... };'\n+// @has macros/macro.my_macro!.html\n+// @has - //a 'macro.my_macro.html'\n #[macro_export]\n macro_rules! my_macro {\n     () => [];"}, {"sha": "4a0ccc46525d0aa9acdc127cffd7c1d884fcc36e", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -2,7 +2,7 @@ error[E0053]: method `foo` has an incompatible type for trait\n   --> $DIR/trait-impl-fn-incompatibility.rs:21:15\n    |\n 14 |     fn foo(x: u16);\n-   |               --- original trait requirement\n+   |               --- type in trait\n ...\n 21 |     fn foo(x: i16) { }\n    |               ^^^ expected u16, found i16\n@@ -11,10 +11,10 @@ error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/trait-impl-fn-incompatibility.rs:22:28\n    |\n 15 |     fn bar(&mut self, bar: &mut Bar);\n-   |                            -------- original trait requirement\n+   |                            -------- type in trait\n ...\n 22 |     fn bar(&mut self, bar: &Bar) { }\n-   |                            ^^^^ values differ in mutability\n+   |                            ^^^^ types differ in mutability\n    |\n    = note: expected type `fn(&mut Bar, &mut Bar)`\n    = note:    found type `fn(&mut Bar, &Bar)`"}, {"sha": "d71df6d3f83a860b5d84432c9f05402fdb0eeab1", "filename": "src/tools/linkchecker/Cargo.lock", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftools%2Flinkchecker%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/490189634b656dcca9e41e6b52093569c03bd4df/src%2Ftools%2Flinkchecker%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2FCargo.lock?ref=490189634b656dcca9e41e6b52093569c03bd4df", "patch": "@@ -42,3 +42,9 @@ dependencies = [\n  \"matches 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[metadata]\n+\"checksum idna 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1053236e00ce4f668aeca4a769a09b3bf5a682d802abd6f3cb39374f6b162c11\"\n+\"checksum matches 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15305656809ce5a4805b1ff2946892810992197ce1270ff79baded852187942e\"\n+\"checksum unicode-bidi 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c1f7ceb96afdfeedee42bade65a0d585a6a0106f681b6749c8ff4daa8df30b3f\"\n+\"checksum unicode-normalization 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"26643a2f83bac55f1976fb716c10234485f9202dcd65cfbdf9da49867b271172\"\n+\"checksum url 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afe9ec54bc4db14bc8744b7fed060d785ac756791450959b2248443319d5b119\""}]}