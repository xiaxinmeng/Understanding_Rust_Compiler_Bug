{"sha": "6b26fdad0a39c3e0b36cc3a5da8bf81f305aa383", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMjZmZGFkMGEzOWMzZTBiMzZjYzNhNWRhOGJmODFmMzA1YWEzODM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-24T13:31:52Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-24T13:31:52Z"}, "message": "Don't ICE on mutable zst slices", "tree": {"sha": "17b54ebf1f1819bafe2c8a9e9b5f06b4081032ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17b54ebf1f1819bafe2c8a9e9b5f06b4081032ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b26fdad0a39c3e0b36cc3a5da8bf81f305aa383", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b26fdad0a39c3e0b36cc3a5da8bf81f305aa383", "html_url": "https://github.com/rust-lang/rust/commit/6b26fdad0a39c3e0b36cc3a5da8bf81f305aa383", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b26fdad0a39c3e0b36cc3a5da8bf81f305aa383/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "354163d478a4fc089af07203948036c4b1e237d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/354163d478a4fc089af07203948036c4b1e237d3", "html_url": "https://github.com/rust-lang/rust/commit/354163d478a4fc089af07203948036c4b1e237d3"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "f0d64e217a28fe5c2eb430f41ef39988f2bb8a63", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b26fdad0a39c3e0b36cc3a5da8bf81f305aa383/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b26fdad0a39c3e0b36cc3a5da8bf81f305aa383/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=6b26fdad0a39c3e0b36cc3a5da8bf81f305aa383", "patch": "@@ -147,13 +147,13 @@ for\n             // Handle trait object vtables\n             if let Ok(meta) = value.to_meta() {\n                 if let ty::Dynamic(..) = self.ecx.tcx.struct_tail(referenced_ty).sty {\n-                        if let Ok(vtable) = meta.unwrap().to_ptr() {\n-                            // explitly choose `Immutable` here, since vtables are immutable, even\n-                            // if the reference of the fat pointer is mutable\n-                            self.intern_shallow(vtable, Mutability::Immutable)?;\n-                        }\n+                    if let Ok(vtable) = meta.unwrap().to_ptr() {\n+                        // explitly choose `Immutable` here, since vtables are immutable, even\n+                        // if the reference of the fat pointer is mutable\n+                        self.intern_shallow(vtable, Mutability::Immutable)?;\n                     }\n                 }\n+            }\n             let mplace = self.ecx.ref_to_mplace(value)?;\n             // Check if we have encountered this pointer+layout combination before.\n             // Only recurse for allocation-backed pointers.\n@@ -174,8 +174,14 @@ for\n                     (InternMode::Static, hir::Mutability::MutMutable) => {},\n                     // we statically prevent `&mut T` via `const_qualif` and double check this here\n                     (InternMode::ConstBase, hir::Mutability::MutMutable) |\n-                    (InternMode::Const, hir::Mutability::MutMutable) =>\n-                        bug!(\"const qualif failed to prevent mutable references\"),\n+                    (InternMode::Const, hir::Mutability::MutMutable) => {\n+                        match referenced_ty.sty {\n+                            ty::Array(_, n) if n.unwrap_usize(self.ecx.tcx.tcx) == 0 => {}\n+                            ty::Slice(_)\n+                                if value.to_meta().unwrap().unwrap().to_usize(self.ecx)? == 0 => {}\n+                            _ => bug!(\"const qualif failed to prevent mutable references\"),\n+                        }\n+                    },\n                 }\n                 // Compute the mutability with which we'll start visiting the allocation. This is\n                 // what gets changed when we encounter an `UnsafeCell`"}]}