{"sha": "f3996f6a88c7a4f24b673809aa50897fb2615691", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOTk2ZjZhODhjN2E0ZjI0YjY3MzgwOWFhNTA4OTdmYjI2MTU2OTE=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-02T07:56:05Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-26T09:14:31Z"}, "message": "review", "tree": {"sha": "338ebd47f1013c9f58fe5aef757f01ba096401a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/338ebd47f1013c9f58fe5aef757f01ba096401a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3996f6a88c7a4f24b673809aa50897fb2615691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3996f6a88c7a4f24b673809aa50897fb2615691", "html_url": "https://github.com/rust-lang/rust/commit/f3996f6a88c7a4f24b673809aa50897fb2615691", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3996f6a88c7a4f24b673809aa50897fb2615691/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc0156baceed60a4dbfd063554e66bc69b3b0bd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc0156baceed60a4dbfd063554e66bc69b3b0bd4", "html_url": "https://github.com/rust-lang/rust/commit/bc0156baceed60a4dbfd063554e66bc69b3b0bd4"}], "stats": {"total": 102, "additions": 62, "deletions": 40}, "files": [{"sha": "914376d58ddeeb4e7dfcc089d78df300c1d9cff7", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -499,7 +499,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                         ty::Adt(def, ..) if !def.is_box() => {\n                             // Again, only create type information if full debuginfo is enabled\n                             if cx.sess().opts.debuginfo == DebugInfo::Full\n-                                && !impl_self_ty.needs_subst(cx.tcx)\n+                                && !impl_self_ty.definitely_needs_subst(cx.tcx)\n                             {\n                                 Some(type_metadata(cx, impl_self_ty, rustc_span::DUMMY_SP))\n                             } else {"}, {"sha": "934ada9932e71ad91d9b737b0ed38ff145696d17", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -470,7 +470,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     {\n         let needs_canonical_flags = if canonicalize_region_mode.any() {\n             TypeFlags::NEEDS_INFER |\n-            TypeFlags::HAS_POTENTIAL_FREE_REGIONS | // `HAS_RE_PLACEHOLDER` implies `HAS_xxx_FREE_REGIONS`\n+            TypeFlags::HAS_POTENTIAL_FREE_REGIONS | // `HAS_RE_PLACEHOLDER` implies `HAS_POTENTIAL_FREE_REGIONS`\n             TypeFlags::HAS_TY_PLACEHOLDER |\n             TypeFlags::HAS_CT_PLACEHOLDER\n         } else {"}, {"sha": "c14f16b6d11ba8ab194d039d284d0d760017f25a", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -62,7 +62,7 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n             _ => return,\n         };\n         let substs = cx.typeck_results().node_substs(expr.hir_id);\n-        if substs.needs_subst(cx.tcx) {\n+        if substs.definitely_needs_subst(cx.tcx) {\n             // We can't resolve on types that require monomorphization, so we don't handle them if\n             // we need to perfom substitution.\n             return;"}, {"sha": "8e2917ee5b47c2d0e8128ba6b49f9e794b201367", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -285,7 +285,7 @@ impl<'tcx> Body<'tcx> {\n             predecessor_cache: PredecessorCache::new(),\n             is_cyclic: GraphIsCyclicCache::new(),\n         };\n-        body.is_polymorphic = body.has_param_types_or_consts(tcx);\n+        body.is_polymorphic = body.definitely_has_param_types_or_consts(tcx);\n         body\n     }\n "}, {"sha": "a078b6fb742a7b179a0686190b46a23aef3f1e91", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -311,9 +311,20 @@ impl FlagComputation {\n     }\n \n     fn add_unevaluated_const<P>(&mut self, ct: ty::Unevaluated<'tcx, P>) {\n+        // The generic arguments of unevaluated consts are a bit special,\n+        // see the `rustc-dev-guide` for more information.\n+        //\n+        // FIXME(@lcnr): Actually add a link here.\n         if let Some(substs) = ct.substs_ {\n+            // If they are available, we treat them as ordinary generic arguments.\n             self.add_substs(substs);\n         } else {\n+            // Otherwise, we add `HAS_UNKNOWN_DEFAULT_CONST_SUBSTS` to signify\n+            // that our const may potentially refer to generic parameters.\n+            //\n+            // Note that depending on which generic parameters are actually\n+            // used in this constant, we may not actually refer to any generic\n+            // parameters at all.\n             self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n             self.add_flags(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS);\n         }"}, {"sha": "604a10f4807e618cefcc46d4097ef899a2f315cd", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -92,14 +92,14 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn references_error(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_ERROR)\n     }\n-    fn has_potential_param_types_or_consts(&self) -> bool {\n+    fn potentially_has_param_types_or_consts(&self) -> bool {\n         self.has_type_flags(\n             TypeFlags::HAS_KNOWN_TY_PARAM\n                 | TypeFlags::HAS_KNOWN_CT_PARAM\n                 | TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS,\n         )\n     }\n-    fn has_param_types_or_consts(&self, tcx: TyCtxt<'tcx>) -> bool {\n+    fn definitely_has_param_types_or_consts(&self, tcx: TyCtxt<'tcx>) -> bool {\n         self.definitely_has_type_flags(\n             tcx,\n             TypeFlags::HAS_KNOWN_TY_PARAM | TypeFlags::HAS_KNOWN_CT_PARAM,\n@@ -129,7 +129,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n             TypeFlags::KNOWN_NEEDS_SUBST | TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS,\n         )\n     }\n-    fn needs_subst(&self, tcx: TyCtxt<'tcx>) -> bool {\n+    fn definitely_needs_subst(&self, tcx: TyCtxt<'tcx>) -> bool {\n         self.definitely_has_type_flags(tcx, TypeFlags::KNOWN_NEEDS_SUBST)\n     }\n     /// \"Free\" regions in this context means that it has any region\n@@ -227,10 +227,13 @@ pub trait TypeVisitor<'tcx>: Sized {\n     /// Supplies the `tcx` for an unevaluated anonymous constant in case its default substs\n     /// are not yet supplied.\n     ///\n-    /// Visitors which do not look into these substs may return `None` here, in which case\n-    /// `super_visit_with` completely skips the default substs. Incorrectly returning\n-    /// `None` can very quickly lead to ICE or other critical bugs, so be careful and\n-    /// try to return an actual `tcx` if at all possible.\n+    /// Returning `None` for this method is only recommended if the `TypeVisitor`\n+    /// does not care about default anon const substs, as it ignores generic parameters,\n+    /// and fetching the default substs would cause a query cycle.\n+    ///\n+    /// For visitors which return `None` we completely skip the default substs in `ty::Unevaluated::super_visit_with`.\n+    /// This means that incorrectly returning `None` can very quickly lead to ICE or other critical bugs, so be careful and\n+    /// try to return an actual `tcx` if possible.\n     fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>>;\n \n     fn visit_binder<T: TypeFoldable<'tcx>>("}, {"sha": "6f234a3958afddc523dcf2d6574b50c879ab9d03", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -1727,7 +1727,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         // Ignore layouts that are done with non-empty environments or\n         // non-monomorphic layouts, as the user only wants to see the stuff\n         // resulting from the final codegen session.\n-        if layout.ty.has_param_types_or_consts(self.tcx)\n+        if layout.ty.definitely_has_param_types_or_consts(self.tcx)\n             || !self.param_env.caller_bounds().is_empty()\n         {\n             return;\n@@ -1896,7 +1896,7 @@ impl<'tcx> SizeSkeleton<'tcx> {\n                 let tail = tcx.struct_tail_erasing_lifetimes(pointee, param_env);\n                 match tail.kind() {\n                     ty::Param(_) | ty::Projection(_) => {\n-                        debug_assert!(tail.has_param_types_or_consts(tcx));\n+                        debug_assert!(tail.definitely_has_param_types_or_consts(tcx));\n                         Ok(SizeSkeleton::Pointer { non_zero, tail: tcx.erase_regions(tail) })\n                     }\n                     _ => bug!("}, {"sha": "0e1197b265bc45a4b132a82a3740caef06ae95d2", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -1193,7 +1193,7 @@ pub trait PrettyPrinter<'tcx>:\n \n             // Aggregates, printed as array/tuple/struct/variant construction syntax.\n             //\n-            // NB: the `has_param_types_or_consts` check ensures that we can use\n+            // NB: the `potentially_has_param_types_or_consts` check ensures that we can use\n             // the `destructure_const` query with an empty `ty::ParamEnv` without\n             // introducing ICEs (e.g. via `layout_of`) from missing bounds.\n             // E.g. `transmute([0usize; 2]): (u8, *mut T)` needs to know `T: Sized`\n@@ -1202,7 +1202,7 @@ pub trait PrettyPrinter<'tcx>:\n             // FIXME(eddyb) for `--emit=mir`/`-Z dump-mir`, we should provide the\n             // correct `ty::ParamEnv` to allow printing *all* constant values.\n             (_, ty::Array(..) | ty::Tuple(..) | ty::Adt(..))\n-                if !ty.has_potential_param_types_or_consts() =>\n+                if !ty.potentially_has_param_types_or_consts() =>\n             {\n                 let contents = self.tcx().destructure_const(\n                     ty::ParamEnv::reveal_all()"}, {"sha": "eb0fdebb665faa2bea8e83168f0700b8ce916d2d", "filename": "compiler/rustc_mir/src/interpret/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Futil.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -43,7 +43,7 @@ where\n                         let is_used = unused_params.contains(index).map_or(true, |unused| !unused);\n                         // Only recurse when generic parameters in fns, closures and generators\n                         // are used and require substitution.\n-                        match (is_used, subst.needs_subst(self.tcx)) {\n+                        match (is_used, subst.definitely_needs_subst(self.tcx)) {\n                             // Just in case there are closures or generators within this subst,\n                             // recurse.\n                             (true, true) => return subst.super_visit_with(self),"}, {"sha": "3c55a4b0a8fb1e52040d7a3e6055c2aeb47921d9", "filename": "compiler/rustc_mir/src/monomorphize/polymorphize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -288,7 +288,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n     }\n     #[instrument(skip(self))]\n     fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if !c.has_potential_param_types_or_consts() {\n+        if !c.potentially_has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n         }\n \n@@ -321,7 +321,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n \n     #[instrument(skip(self))]\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if !ty.has_potential_param_types_or_consts() {\n+        if !ty.potentially_has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n         }\n \n@@ -363,7 +363,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a, 'tcx> {\n \n     #[instrument(skip(self))]\n     fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if !c.has_potential_param_types_or_consts() {\n+        if !c.potentially_has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n         }\n \n@@ -381,7 +381,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a, 'tcx> {\n \n     #[instrument(skip(self))]\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if !ty.has_potential_param_types_or_consts() {\n+        if !ty.potentially_has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n         }\n "}, {"sha": "1932cd5de29b5e25a72210f66552700d8e53a9a3", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -469,7 +469,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     /// Returns the value, if any, of evaluating `c`.\n     fn eval_constant(&mut self, c: &Constant<'tcx>, source_info: SourceInfo) -> Option<OpTy<'tcx>> {\n         // FIXME we need to revisit this for #67176\n-        if c.needs_subst(self.tcx) {\n+        if c.definitely_needs_subst(self.tcx) {\n             return None;\n         }\n \n@@ -489,9 +489,9 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                             }) => true,\n                             // Out of backwards compatibility we cannot report hard errors in unused\n                             // generic functions using associated constants of the generic parameters.\n-                            _ => c.literal.needs_subst(*tcx),\n+                            _ => c.literal.definitely_needs_subst(*tcx),\n                         },\n-                        ConstantKind::Val(_, ty) => ty.needs_subst(*tcx),\n+                        ConstantKind::Val(_, ty) => ty.definitely_needs_subst(*tcx),\n                     };\n                     if lint_only {\n                         // Out of backwards compatibility we cannot report hard errors in unused\n@@ -721,7 +721,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n \n         // FIXME we need to revisit this for #67176\n-        if rvalue.needs_subst(self.tcx) {\n+        if rvalue.definitely_needs_subst(self.tcx) {\n             return None;\n         }\n "}, {"sha": "385394ba67d4d2e8fa0fdc2f8747c59129817d11", "filename": "compiler/rustc_mir/src/transform/inline/cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline%2Fcycle.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -89,7 +89,7 @@ crate fn mir_callgraph_reachable(\n                     // FIXME: A not fully substituted drop shim can cause ICEs if one attempts to\n                     // have its MIR built. Likely oli-obk just screwed up the `ParamEnv`s, so this\n                     // needs some more analysis.\n-                    if callee.needs_subst(tcx) {\n+                    if callee.definitely_needs_subst(tcx) {\n                         continue;\n                     }\n                 }"}, {"sha": "e236ef996bcc6034fc0a3dfacade4ce5fb42097f", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -107,7 +107,7 @@ fn get_symbol_hash<'tcx>(\n         tcx.def_path_hash(def_id).hash_stable(&mut hcx, &mut hasher);\n \n         // Include the main item-type. Note that, in this case, the\n-        // assertions about `needs_subst` may not hold, but this item-type\n+        // assertions about `definitely_needs_subst` may not hold, but this item-type\n         // ought to be the same for every reference anyway.\n         assert!(!item_type.has_erasable_regions(tcx));\n         hcx.while_hashing_spans(false, |hcx| {"}, {"sha": "e9ebd6d64aa9de6ecd1e1cb4ef112cb5ebf64286", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -277,7 +277,8 @@ impl Printer<'tcx> for &mut SymbolMangler<'tcx> {\n \n         // Encode impl generic params if the substitutions contain parameters (implying\n         // polymorphization is enabled) and this isn't an inherent impl.\n-        if impl_trait_ref.is_some() && substs.iter().any(|a| a.has_param_types_or_consts(self.tcx))\n+        if impl_trait_ref.is_some()\n+            && substs.iter().any(|a| a.definitely_has_param_types_or_consts(self.tcx))\n         {\n             self = self.path_generic_args(\n                 |this| {"}, {"sha": "668a74bd6971506b02351ac309a8b892db2661e8", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -391,7 +391,7 @@ fn orphan_check_trait_ref<'tcx>(\n ) -> Result<(), OrphanCheckErr<'tcx>> {\n     debug!(\"orphan_check_trait_ref(trait_ref={:?}, in_crate={:?})\", trait_ref, in_crate);\n \n-    if trait_ref.needs_infer() && trait_ref.needs_subst(tcx) {\n+    if trait_ref.needs_infer() && trait_ref.definitely_needs_subst(tcx) {\n         bug!(\n             \"can't orphan check a trait ref with both params and inference variables {:?}\",\n             trait_ref"}, {"sha": "5c0bd1d8962f0b9c8ad29ff17a0fdfaa71d81740", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -85,7 +85,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                         let leaf = leaf.subst(tcx, ct.substs);\n                         if leaf.has_infer_types_or_consts() {\n                             failure_kind = FailureKind::MentionsInfer;\n-                        } else if leaf.has_param_types_or_consts(tcx) {\n+                        } else if leaf.definitely_has_param_types_or_consts(tcx) {\n                             failure_kind = cmp::min(failure_kind, FailureKind::MentionsParam);\n                         }\n \n@@ -95,7 +95,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                         let ty = ty.subst(tcx, ct.substs);\n                         if ty.has_infer_types_or_consts() {\n                             failure_kind = FailureKind::MentionsInfer;\n-                        } else if ty.has_param_types_or_consts(tcx) {\n+                        } else if ty.definitely_has_param_types_or_consts(tcx) {\n                             failure_kind = cmp::min(failure_kind, FailureKind::MentionsParam);\n                         }\n \n@@ -151,7 +151,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     // See #74595 for more details about this.\n     let concrete = infcx.const_eval_resolve(param_env, uv.expand(), Some(span));\n \n-    if concrete.is_ok() && uv.substs(infcx.tcx).has_param_types_or_consts(infcx.tcx) {\n+    if concrete.is_ok() && uv.substs(infcx.tcx).definitely_has_param_types_or_consts(infcx.tcx) {\n         match infcx.tcx.def_kind(uv.def.did) {\n             DefKind::AnonConst => {\n                 let mir_body = infcx.tcx.mir_for_ctfe_opt_const_arg(uv.def);"}, {"sha": "554b2950263ec38f3e24eb812ad300672d0d9fe3", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -450,7 +450,7 @@ fn subst_and_check_impossible_predicates<'tcx>(\n     debug!(\"subst_and_check_impossible_predicates(key={:?})\", key);\n \n     let mut predicates = tcx.predicates_of(key.0).instantiate(tcx, key.1).predicates;\n-    predicates.retain(|predicate| !predicate.needs_subst(tcx));\n+    predicates.retain(|predicate| !predicate.definitely_needs_subst(tcx));\n     let result = impossible_predicates(tcx, predicates);\n \n     debug!(\"subst_and_check_impossible_predicates(key={:?}) = {:?}\", key, result);"}, {"sha": "1580562a92f38ac6fa5b78f763beb16140a75103", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -696,7 +696,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 .param_env\n                 .caller_bounds()\n                 .iter()\n-                .all(|bound| bound.needs_subst(self.tcx()))\n+                .all(|bound| bound.definitely_needs_subst(self.tcx()))\n         {\n             // If a param env has no global bounds, global obligations do not\n             // depend on its particular value in order to work, so we can clear"}, {"sha": "d916ff7db3d51af667b793f99bd1b52b08f9b2bf", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -2204,7 +2204,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 self.prohibit_generics(path.segments);\n                 // Try to evaluate any array length constants.\n                 let normalized_ty = self.normalize_ty(span, tcx.at(span).type_of(def_id));\n-                if forbid_generic && normalized_ty.needs_subst(tcx) {\n+                if forbid_generic && normalized_ty.definitely_needs_subst(tcx) {\n                     let mut err = tcx.sess.struct_span_err(\n                         path.span,\n                         \"generic `Self` types are currently not permitted in anonymous constants\","}, {"sha": "2e01e99d36ec68dd848a2a605a7dea1fd89857c2", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -746,7 +746,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n                     // Ignore dependent defaults -- that is, where the default of one type\n                     // parameter includes another (e.g., `<T, U = T>`). In those cases, we can't\n                     // be sure if it will error or not as user might always specify the other.\n-                    if !ty.needs_subst(tcx) {\n+                    if !ty.definitely_needs_subst(tcx) {\n                         fcx.register_wf_obligation(\n                             ty.into(),\n                             tcx.def_span(param.def_id),\n@@ -762,7 +762,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n                     // for `struct Foo<const N: usize, const M: usize = { 1 - 2 }>`\n                     // we should eagerly error.\n                     let default_ct = tcx.const_param_default(param.def_id);\n-                    if !default_ct.needs_subst(tcx) {\n+                    if !default_ct.definitely_needs_subst(tcx) {\n                         fcx.register_wf_obligation(\n                             default_ct.into(),\n                             tcx.def_span(param.def_id),\n@@ -796,7 +796,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n                 if is_our_default(param) {\n                     let default_ty = tcx.type_of(param.def_id);\n                     // ... and it's not a dependent default, ...\n-                    if !default_ty.needs_subst(tcx) {\n+                    if !default_ty.definitely_needs_subst(tcx) {\n                         // ... then substitute it with the default.\n                         return default_ty.into();\n                     }\n@@ -809,7 +809,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n                 if is_our_default(param) {\n                     let default_ct = tcx.const_param_default(param.def_id);\n                     // ... and it's not a dependent default, ...\n-                    if !default_ct.needs_subst(tcx) {\n+                    if !default_ct.definitely_needs_subst(tcx) {\n                         // ... then substitute it with the default.\n                         return default_ct.into();\n                     }\n@@ -858,7 +858,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n             let substituted_pred = pred.subst(tcx, substs);\n             // Don't check non-defaulted params, dependent defaults (including lifetimes)\n             // or preds with multiple params.\n-            if substituted_pred.has_param_types_or_consts(tcx)\n+            if substituted_pred.definitely_has_param_types_or_consts(tcx)\n                 || param_count.params.len() > 1\n                 || has_region\n             {"}, {"sha": "9bce5ee0da263b782e2630e9c7d1194683efbad0", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3996f6a88c7a4f24b673809aa50897fb2615691/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=f3996f6a88c7a4f24b673809aa50897fb2615691", "patch": "@@ -277,14 +277,21 @@ fn get_path_containing_arg_in_pat<'hir>(\n pub(super) fn default_anon_const_substs(tcx: TyCtxt<'_>, def_id: DefId) -> SubstsRef<'_> {\n     let generics = tcx.generics_of(def_id);\n     if let Some(parent) = generics.parent {\n+        // This is the reason we bother with having optional anon const substs.\n+        //\n+        // In the future the substs of an anon const will depend on its parents predicates\n+        // at which point eagerly looking at them will cause a query cycle.\n+        //\n+        // So for now this is only an assurance that this approach won't cause cycle errors in\n+        // the future.\n         let _cycle_check = tcx.predicates_of(parent);\n     }\n \n     let substs = InternalSubsts::identity_for_item(tcx, def_id);\n     // We only expect substs with the following type flags as default substs.\n     //\n     // Getting this wrong can lead to ICE and unsoundness, so we assert it here.\n-    for arg in substs.iter().flat_map(|s| s.walk(tcx)) {\n+    for arg in substs.iter() {\n         let allowed_flags = ty::TypeFlags::MAY_NEED_DEFAULT_CONST_SUBSTS\n             | ty::TypeFlags::STILL_FURTHER_SPECIALIZABLE;\n         assert!(!arg.has_type_flags(!allowed_flags));"}]}