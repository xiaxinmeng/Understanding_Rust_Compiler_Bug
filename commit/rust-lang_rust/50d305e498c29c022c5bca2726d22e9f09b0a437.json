{"sha": "50d305e498c29c022c5bca2726d22e9f09b0a437", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZDMwNWU0OThjMjljMDIyYzViY2EyNzI2ZDIyZTlmMDliMGE0Mzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-12T13:16:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-12T13:16:24Z"}, "message": "Auto merge of #26966 - nagisa:tail-init, r=alexcrichton\n\nFixes #26906", "tree": {"sha": "314239ae9d7d8a775fdc3dfeddb3077e1f119c86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/314239ae9d7d8a775fdc3dfeddb3077e1f119c86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50d305e498c29c022c5bca2726d22e9f09b0a437", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50d305e498c29c022c5bca2726d22e9f09b0a437", "html_url": "https://github.com/rust-lang/rust/commit/50d305e498c29c022c5bca2726d22e9f09b0a437", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50d305e498c29c022c5bca2726d22e9f09b0a437/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2999003be809fc09119243fa348ae771f51cbf1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2999003be809fc09119243fa348ae771f51cbf1e", "html_url": "https://github.com/rust-lang/rust/commit/2999003be809fc09119243fa348ae771f51cbf1e"}, {"sha": "7a90865db5b9bbf4e94580a886e3ab187d91c83c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a90865db5b9bbf4e94580a886e3ab187d91c83c", "html_url": "https://github.com/rust-lang/rust/commit/7a90865db5b9bbf4e94580a886e3ab187d91c83c"}], "stats": {"total": 187, "additions": 110, "deletions": 77}, "files": [{"sha": "36c676391019bd1ad44a078aede726784cf786ee", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -15,7 +15,7 @@\n #![feature(libc)]\n #![feature(path_ext)]\n #![feature(rustc_private)]\n-#![feature(slice_extras)]\n+#![feature(slice_splits)]\n #![feature(str_char)]\n #![feature(test)]\n #![feature(vec_push_all)]\n@@ -90,9 +90,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           optopt(\"\", \"lldb-python-dir\", \"directory containing LLDB's python module\", \"PATH\"),\n           optflag(\"h\", \"help\", \"show this message\"));\n \n-    assert!(!args.is_empty());\n-    let argv0 = args[0].clone();\n-    let args_ = args.tail();\n+    let (argv0, args_) = args.split_first().unwrap();\n     if args[1] == \"-h\" || args[1] == \"--help\" {\n         let message = format!(\"Usage: {} [OPTIONS] [TESTNAME...]\", argv0);\n         println!(\"{}\", getopts::usage(&message, &groups));"}, {"sha": "0933734ee383f4cc4fab56874164b9b89da241da", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -282,34 +282,65 @@ impl<T> [T] {\n \n     /// Returns all but the first element of a slice.\n     #[unstable(feature = \"slice_extras\", reason = \"likely to be renamed\")]\n+    #[deprecated(since = \"1.3.0\", reason = \"superseded by split_first\")]\n     #[inline]\n     pub fn tail(&self) -> &[T] {\n         core_slice::SliceExt::tail(self)\n     }\n \n+    /// Returns the first and all the rest of the elements of a slice.\n+    #[unstable(feature = \"slice_splits\", reason = \"new API\")]\n+    #[inline]\n+    pub fn split_first(&self) -> Option<(&T, &[T])> {\n+        core_slice::SliceExt::split_first(self)\n+    }\n+\n     /// Returns all but the first element of a mutable slice\n-    #[unstable(feature = \"slice_extras\",\n-               reason = \"likely to be renamed or removed\")]\n+    #[unstable(feature = \"slice_extras\", reason = \"likely to be renamed or removed\")]\n+    #[deprecated(since = \"1.3.0\", reason = \"superseded by split_first_mut\")]\n     #[inline]\n     pub fn tail_mut(&mut self) -> &mut [T] {\n         core_slice::SliceExt::tail_mut(self)\n     }\n \n+    /// Returns the first and all the rest of the elements of a slice.\n+    #[unstable(feature = \"slice_splits\", reason = \"new API\")]\n+    #[inline]\n+    pub fn split_first_mut(&mut self) -> Option<(&mut T, &mut [T])> {\n+        core_slice::SliceExt::split_first_mut(self)\n+    }\n+\n     /// Returns all but the last element of a slice.\n     #[unstable(feature = \"slice_extras\", reason = \"likely to be renamed\")]\n+    #[deprecated(since = \"1.3.0\", reason = \"superseded by split_last\")]\n     #[inline]\n     pub fn init(&self) -> &[T] {\n         core_slice::SliceExt::init(self)\n     }\n \n+    /// Returns the last and all the rest of the elements of a slice.\n+    #[unstable(feature = \"slice_splits\", reason = \"new API\")]\n+    #[inline]\n+    pub fn split_last(&self) -> Option<(&T, &[T])> {\n+        core_slice::SliceExt::split_last(self)\n+\n+    }\n+\n     /// Returns all but the last element of a mutable slice\n-    #[unstable(feature = \"slice_extras\",\n-               reason = \"likely to be renamed or removed\")]\n+    #[unstable(feature = \"slice_extras\", reason = \"likely to be renamed or removed\")]\n+    #[deprecated(since = \"1.3.0\", reason = \"superseded by split_last_mut\")]\n     #[inline]\n     pub fn init_mut(&mut self) -> &mut [T] {\n         core_slice::SliceExt::init_mut(self)\n     }\n \n+    /// Returns the last and all the rest of the elements of a slice.\n+    #[unstable(feature = \"slice_splits\", since = \"1.3.0\")]\n+    #[inline]\n+    pub fn split_last_mut(&mut self) -> Option<(&mut T, &mut [T])> {\n+        core_slice::SliceExt::split_last_mut(self)\n+    }\n+\n     /// Returns the last element of a slice, or `None` if it is empty.\n     ///\n     /// # Examples"}, {"sha": "6bf7380fdeb500138cc923157607184a17f7c39d", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -36,7 +36,7 @@\n #![feature(rustc_private)]\n #![feature(slice_bytes)]\n #![feature(slice_chars)]\n-#![feature(slice_extras)]\n+#![feature(slice_splits)]\n #![feature(slice_position_elem)]\n #![feature(split_off)]\n #![feature(step_by)]\n@@ -52,9 +52,10 @@\n #![feature(vec_deque_retain)]\n #![feature(vec_from_raw_buf)]\n #![feature(vec_push_all)]\n-#![feature(vec_split_off)]\n #![feature(vecmap)]\n \n+#![allow(deprecated)]\n+\n #[macro_use] extern crate log;\n \n extern crate collections;"}, {"sha": "d39abc63336ee336c8c07711e7c61dad23fa487a", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 17, "deletions": 40, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -119,71 +119,48 @@ fn test_first_mut() {\n }\n \n #[test]\n-fn test_tail() {\n+fn test_split_first() {\n     let mut a = vec![11];\n     let b: &[i32] = &[];\n-    assert_eq!(a.tail(), b);\n+    assert!(b.split_first().is_none());\n+    assert_eq!(a.split_first(), Some((&11, b)));\n     a = vec![11, 12];\n     let b: &[i32] = &[12];\n-    assert_eq!(a.tail(), b);\n+    assert_eq!(a.split_first(), Some((&11, b)));\n }\n \n #[test]\n-fn test_tail_mut() {\n+fn test_split_first_mut() {\n     let mut a = vec![11];\n     let b: &mut [i32] = &mut [];\n-    assert!(a.tail_mut() == b);\n+    assert!(b.split_first_mut().is_none());\n+    assert!(a.split_first_mut() == Some((&mut 11, b)));\n     a = vec![11, 12];\n     let b: &mut [_] = &mut [12];\n-    assert!(a.tail_mut() == b);\n+    assert!(a.split_first_mut() == Some((&mut 11, b)));\n }\n \n #[test]\n-#[should_panic]\n-fn test_tail_empty() {\n-    let a = Vec::<i32>::new();\n-    a.tail();\n-}\n-\n-#[test]\n-#[should_panic]\n-fn test_tail_mut_empty() {\n-    let mut a = Vec::<i32>::new();\n-    a.tail_mut();\n-}\n-\n-#[test]\n-fn test_init() {\n+fn test_split_last() {\n     let mut a = vec![11];\n     let b: &[i32] = &[];\n-    assert_eq!(a.init(), b);\n+    assert!(b.split_last().is_none());\n+    assert_eq!(a.split_last(), Some((&11, b)));\n     a = vec![11, 12];\n     let b: &[_] = &[11];\n-    assert_eq!(a.init(), b);\n+    assert_eq!(a.split_last(), Some((&12, b)));\n }\n \n #[test]\n-fn test_init_mut() {\n+fn test_split_last_mut() {\n     let mut a = vec![11];\n     let b: &mut [i32] = &mut [];\n-    assert!(a.init_mut() == b);\n+    assert!(b.split_last_mut().is_none());\n+    assert!(a.split_last_mut() == Some((&mut 11, b)));\n+\n     a = vec![11, 12];\n     let b: &mut [_] = &mut [11];\n-    assert!(a.init_mut() == b);\n-}\n-\n-#[test]\n-#[should_panic]\n-fn test_init_empty() {\n-    let a = Vec::<i32>::new();\n-    a.init();\n-}\n-\n-#[test]\n-#[should_panic]\n-fn test_init_mut_empty() {\n-    let mut a = Vec::<i32>::new();\n-    a.init_mut();\n+    assert!(a.split_last_mut() == Some((&mut 12, b)));\n }\n \n #[test]"}, {"sha": "2c6acbf9157de7cccfd574eb7947508bdfdcbe23", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -83,6 +83,8 @@ pub trait SliceExt {\n     fn first<'a>(&'a self) -> Option<&'a Self::Item>;\n     fn tail<'a>(&'a self) -> &'a [Self::Item];\n     fn init<'a>(&'a self) -> &'a [Self::Item];\n+    fn split_first<'a>(&'a self) -> Option<(&'a Self::Item, &'a [Self::Item])>;\n+    fn split_last<'a>(&'a self) -> Option<(&'a Self::Item, &'a [Self::Item])>;\n     fn last<'a>(&'a self) -> Option<&'a Self::Item>;\n     unsafe fn get_unchecked<'a>(&'a self, index: usize) -> &'a Self::Item;\n     fn as_ptr(&self) -> *const Self::Item;\n@@ -95,6 +97,8 @@ pub trait SliceExt {\n     fn first_mut<'a>(&'a mut self) -> Option<&'a mut Self::Item>;\n     fn tail_mut<'a>(&'a mut self) -> &'a mut [Self::Item];\n     fn init_mut<'a>(&'a mut self) -> &'a mut [Self::Item];\n+    fn split_first_mut<'a>(&'a mut self) -> Option<(&'a mut Self::Item, &'a mut [Self::Item])>;\n+    fn split_last_mut<'a>(&'a mut self) -> Option<(&'a mut Self::Item, &'a mut [Self::Item])>;\n     fn last_mut<'a>(&'a mut self) -> Option<&'a mut Self::Item>;\n     fn split_mut<'a, P>(&'a mut self, pred: P) -> SplitMut<'a, Self::Item, P>\n                         where P: FnMut(&Self::Item) -> bool;\n@@ -238,8 +242,17 @@ impl<T> SliceExt for [T] {\n     fn tail(&self) -> &[T] { &self[1..] }\n \n     #[inline]\n-    fn init(&self) -> &[T] {\n-        &self[..self.len() - 1]\n+    fn split_first(&self) -> Option<(&T, &[T])> {\n+        if self.is_empty() { None } else { Some((&self[0], &self[1..])) }\n+    }\n+\n+    #[inline]\n+    fn init(&self) -> &[T] { &self[..self.len() - 1] }\n+\n+    #[inline]\n+    fn split_last(&self) -> Option<(&T, &[T])> {\n+        let len = self.len();\n+        if len == 0 { None } else { Some((&self[len - 1], &self[..(len - 1)])) }\n     }\n \n     #[inline]\n@@ -328,8 +341,14 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n-    fn tail_mut(&mut self) -> &mut [T] {\n-        &mut self[1 ..]\n+    fn tail_mut(&mut self) -> &mut [T] { &mut self[1 ..] }\n+\n+    #[inline]\n+    fn split_first_mut(&mut self) -> Option<(&mut T, &mut [T])> {\n+        if self.is_empty() { None } else {\n+            let split = self.split_at_mut(1);\n+            Some((&mut split.0[0], split.1))\n+        }\n     }\n \n     #[inline]\n@@ -338,6 +357,15 @@ impl<T> SliceExt for [T] {\n         &mut self[.. (len - 1)]\n     }\n \n+    #[inline]\n+    fn split_last_mut(&mut self) -> Option<(&mut T, &mut [T])> {\n+        let len = self.len();\n+        if len == 0 { None } else {\n+            let split = self.split_at_mut(len - 1);\n+            Some((&mut split.1[0], split.0))\n+        }\n+    }\n+\n     #[inline]\n     fn split_mut<'a, P>(&'a mut self, pred: P) -> SplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n         SplitMut { v: self, pred: pred, finished: false }"}, {"sha": "8ee0b10e1748ecad03286d3498e7a015b897a113", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -56,7 +56,7 @@\n //!         optopt(\"o\", \"\", \"set output file name\", \"NAME\"),\n //!         optflag(\"h\", \"help\", \"print this help menu\")\n //!     ];\n-//!     let matches = match getopts(args.tail(), opts) {\n+//!     let matches = match getopts(args[1..], opts) {\n //!         Ok(m) => { m }\n //!         Err(f) => { panic!(f.to_string()) }\n //!     };"}, {"sha": "f1984708b663aacb9a4360f9620112b1b4b03886", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -53,7 +53,7 @@\n #![feature(rustc_private)]\n #![feature(scoped_tls)]\n #![feature(slice_bytes)]\n-#![feature(slice_extras)]\n+#![feature(slice_splits)]\n #![feature(slice_patterns)]\n #![feature(slice_position_elem)]\n #![feature(staged_api)]"}, {"sha": "95fe2d87c944bf4e94233efa57eadd60f2bdef5b", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -688,7 +688,7 @@ pub fn maybe_get_item_ast<'tcx>(cdata: Cmd, tcx: &ty::ctxt<'tcx>, id: ast::NodeI\n                                 -> csearch::FoundAst<'tcx> {\n     debug!(\"Looking up item: {}\", id);\n     let item_doc = lookup_item(id, cdata.data());\n-    let path = item_path(item_doc).init().to_vec();\n+    let path = item_path(item_doc).split_last().unwrap().1.to_vec();\n     match decode_inlined_item(cdata, tcx, path, item_doc) {\n         Ok(ii) => csearch::FoundAst::Found(ii),\n         Err(path) => {"}, {"sha": "b7955290f91cca9aa987f42dea223edcfd32ea31", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -696,12 +696,12 @@ fn is_useful(cx: &MatchCheckCtxt,\n             Some(constructor) => {\n                 let matrix = rows.iter().filter_map(|r| {\n                     if pat_is_binding_or_wild(&cx.tcx.def_map, raw_pat(r[0])) {\n-                        Some(r.tail().to_vec())\n+                        Some(r[1..].to_vec())\n                     } else {\n                         None\n                     }\n                 }).collect();\n-                match is_useful(cx, &matrix, v.tail(), witness) {\n+                match is_useful(cx, &matrix, &v[1..], witness) {\n                     UsefulWithWitness(pats) => {\n                         let arity = constructor_arity(cx, &constructor, left_ty);\n                         let wild_pats = vec![DUMMY_WILD_PAT; arity];"}, {"sha": "4a6cc019eb2fa4aaee82bb47d8c1ee19965841e4", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -1495,7 +1495,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n             parameters: new_parameters\n         };\n         let mut new_segs = Vec::new();\n-        new_segs.push_all(path.segments.init());\n+        new_segs.push_all(path.segments.split_last().unwrap().1);\n         new_segs.push(new_seg);\n         ast::Path {\n             span: path.span,"}, {"sha": "21f9e417acbbabaddc27b4cbc9a0f78c4361ccb4", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -2571,7 +2571,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 for &i in &ty_params {\n                     new_substs.types.get_mut_slice(TypeSpace)[i] = tcx.types.err;\n                 }\n-                for &ty in fields.init() {\n+                for &ty in fields.split_last().unwrap().1 {\n                     if ty.subst(tcx, &new_substs).references_error() {\n                         return Err(Unimplemented);\n                     }"}, {"sha": "dd26fd25215a3f27e2d04ff7de6969079a438f86", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -276,7 +276,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 let module_path = match view_path.node {\n                     ViewPathSimple(_, ref full_path) => {\n                         full_path.segments\n-                            .init()\n+                            .split_last().unwrap().1\n                             .iter().map(|ident| ident.identifier.name)\n                             .collect()\n                     }\n@@ -347,7 +347,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                             continue;\n                                         }\n                                     };\n-                                    let module_path = module_path.init();\n+                                    let module_path = module_path.split_last().unwrap().1;\n                                     (module_path.to_vec(), name)\n                                 }\n                             };"}, {"sha": "1093d2ef318159cab4b59281ab4786fd521061ec", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -23,7 +23,7 @@\n #![feature(rc_weak)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n-#![feature(slice_extras)]\n+#![feature(slice_splits)]\n #![feature(staged_api)]\n \n #[macro_use] extern crate log;\n@@ -2881,7 +2881,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     segments: &[ast::PathSegment],\n                                     namespace: Namespace)\n                                     -> Option<(Def, LastPrivate)> {\n-        let module_path = segments.init().iter()\n+        let module_path = segments.split_last().unwrap().1.iter()\n                                          .map(|ps| ps.identifier.name)\n                                          .collect::<Vec<_>>();\n \n@@ -2939,7 +2939,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                    segments: &[ast::PathSegment],\n                                    namespace: Namespace)\n                                        -> Option<(Def, LastPrivate)> {\n-        let module_path = segments.init().iter()\n+        let module_path = segments.split_last().unwrap().1.iter()\n                                          .map(|ps| ps.identifier.name)\n                                          .collect::<Vec<_>>();\n "}, {"sha": "0f2506dc301c0bf7b34ea3a8e6ba3a316fc7de5b", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -1402,7 +1402,7 @@ fn base_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n                                                           base_segments.last().unwrap(),\n                                                           &mut projection_bounds);\n \n-            check_path_args(tcx, base_segments.init(), NO_TPS | NO_REGIONS);\n+            check_path_args(tcx, base_segments.split_last().unwrap().1, NO_TPS | NO_REGIONS);\n             trait_ref_to_object_type(this,\n                                      rscope,\n                                      span,\n@@ -1411,7 +1411,7 @@ fn base_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n                                      &[])\n         }\n         def::DefTy(did, _) | def::DefStruct(did) => {\n-            check_path_args(tcx, base_segments.init(), NO_TPS | NO_REGIONS);\n+            check_path_args(tcx, base_segments.split_last().unwrap().1, NO_TPS | NO_REGIONS);\n             ast_path_to_ty(this,\n                            rscope,\n                            span,"}, {"sha": "e6c79cfd30e268bdfe350ab7b33157c3e67f2ebe", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -3668,7 +3668,7 @@ pub fn resolve_ty_and_def_ufcs<'a, 'b, 'tcx>(fcx: &FnCtxt<'b, 'tcx>,\n         Some((opt_self_ty, &path.segments, path_res.base_def))\n     } else {\n         let mut def = path_res.base_def;\n-        let ty_segments = path.segments.init();\n+        let ty_segments = path.segments.split_last().unwrap().1;\n         let base_ty_end = path.segments.len() - path_res.depth;\n         let ty = astconv::finish_resolving_def_to_ty(fcx, fcx, span,\n                                                      PathParamMode::Optional,"}, {"sha": "6083a2735c5684ffc787d92aca7d715f1c258fad", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -170,8 +170,8 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                 }\n \n                 // For DST, all intermediate types must be sized.\n-                if !variant.fields.is_empty() {\n-                    for field in variant.fields.init() {\n+                if let Some((_, fields)) = variant.fields.split_last() {\n+                    for field in fields {\n                         fcx.register_builtin_bound(\n                             field.ty,\n                             ty::BoundSized,"}, {"sha": "4260791e38458ab9aa8a503e917358be710cd5ca", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -85,7 +85,7 @@ This API is completely unstable and subject to change.\n #![feature(ref_slice)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n-#![feature(slice_extras)]\n+#![feature(slice_splits)]\n #![feature(staged_api)]\n #![feature(vec_push_all)]\n #![feature(cell_extras)]"}, {"sha": "9ea22ced927b1aede64f31d56d4490bc57525bd8", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -29,7 +29,6 @@\n #![feature(path_relative_from)]\n #![feature(rustc_private)]\n #![feature(set_stdio)]\n-#![feature(slice_extras)]\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n #![feature(subslice_offset)]\n@@ -192,7 +191,7 @@ pub fn usage(argv0: &str) {\n }\n \n pub fn main_args(args: &[String]) -> isize {\n-    let matches = match getopts::getopts(args.tail(), &opts()) {\n+    let matches = match getopts::getopts(&args[1..], &opts()) {\n         Ok(m) => m,\n         Err(err) => {\n             println!(\"{}\", err);"}, {"sha": "72391ea51dd1300e0925e4cb752e95c186933a9a", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -353,7 +353,7 @@ pub fn unindent(s: &str) -> String {\n \n     if !lines.is_empty() {\n         let mut unindented = vec![ lines[0].trim().to_string() ];\n-        unindented.push_all(&lines.tail().iter().map(|&line| {\n+        unindented.push_all(&lines[1..].iter().map(|&line| {\n             if line.chars().all(|c| c.is_whitespace()) {\n                 line.to_string()\n             } else {"}, {"sha": "382b7495af50d639ba8f6ce2202fa0679638f2e2", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d305e498c29c022c5bca2726d22e9f09b0a437/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=50d305e498c29c022c5bca2726d22e9f09b0a437", "patch": "@@ -44,7 +44,6 @@\n #![feature(rt)]\n #![feature(rustc_private)]\n #![feature(set_stdio)]\n-#![feature(slice_extras)]\n #![feature(staged_api)]\n \n extern crate getopts;\n@@ -359,7 +358,7 @@ Test Attributes:\n \n // Parses command line arguments into test options\n pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n-    let args_ = args.tail();\n+    let args_ = &args[1..];\n     let matches =\n         match getopts::getopts(args_, &optgroups()) {\n           Ok(m) => m,"}]}