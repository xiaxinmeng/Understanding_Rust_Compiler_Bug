{"sha": "0c26144b1ac75267c679bad6a4e2c4e7bc7957d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMjYxNDRiMWFjNzUyNjdjNjc5YmFkNmE0ZTJjNGU3YmM3OTU3ZDM=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-30T16:48:18Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-30T18:29:16Z"}, "message": "Better span for attribute suggestions\n\n`def_span` has the same issues as `body.span`, so do it this way instead.", "tree": {"sha": "9a865db00ff13ff99caa3b1f599ac1ef9666ac7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a865db00ff13ff99caa3b1f599ac1ef9666ac7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c26144b1ac75267c679bad6a4e2c4e7bc7957d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c26144b1ac75267c679bad6a4e2c4e7bc7957d3", "html_url": "https://github.com/rust-lang/rust/commit/0c26144b1ac75267c679bad6a4e2c4e7bc7957d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c26144b1ac75267c679bad6a4e2c4e7bc7957d3/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c6d685551604dcb86f8239d09b21eeca5988f67", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c6d685551604dcb86f8239d09b21eeca5988f67", "html_url": "https://github.com/rust-lang/rust/commit/7c6d685551604dcb86f8239d09b21eeca5988f67"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "8df134860a5da7a06c4661b94c7e2a7f52267f0a", "filename": "compiler/rustc_mir/src/transform/check_consts/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c26144b1ac75267c679bad6a4e2c4e7bc7957d3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c26144b1ac75267c679bad6a4e2c4e7bc7957d3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=0c26144b1ac75267c679bad6a4e2c4e7bc7957d3", "patch": "@@ -57,6 +57,16 @@ impl ConstCx<'mir, 'tcx> {\n             && self.tcx.features().staged_api\n             && is_const_stable_const_fn(self.tcx, self.def_id.to_def_id())\n     }\n+\n+    /// Returns the function signature of the item being const-checked if it is a `fn` or `const fn`.\n+    pub fn fn_sig(&self) -> Option<&'tcx hir::FnSig<'tcx>> {\n+        // Get this from the HIR map instead of a query to avoid cycle errors.\n+        //\n+        // FIXME: Is this still an issue?\n+        let hir_map = self.tcx.hir();\n+        let hir_id = hir_map.local_def_id_to_hir_id(self.def_id);\n+        hir_map.fn_sig_by_hir_id(hir_id)\n+    }\n }\n \n /// Returns `true` if this `DefId` points to one of the official `panic` lang items."}, {"sha": "ab63fd03a336e5de79c40856b20537b1691c3ccd", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0c26144b1ac75267c679bad6a4e2c4e7bc7957d3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c26144b1ac75267c679bad6a4e2c4e7bc7957d3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=0c26144b1ac75267c679bad6a4e2c4e7bc7957d3", "patch": "@@ -1,7 +1,7 @@\n //! The `Visitor` responsible for actually checking a `mir::Body` for invalid operations.\n \n use rustc_errors::{struct_span_err, Applicability, Diagnostic};\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::{self as hir, HirId, LangItem};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n@@ -209,7 +209,7 @@ impl Validator<'mir, 'tcx> {\n \n         // `async` functions cannot be `const fn`. This is checked during AST lowering, so there's\n         // no need to emit duplicate errors here.\n-        if is_async_fn(tcx, def_id) || body.generator_kind.is_some() {\n+        if is_async_fn(self.ccx) || body.generator_kind.is_some() {\n             tcx.sess.delay_span_bug(body.span, \"`async` functions cannot be `const fn`\");\n             return;\n         }\n@@ -929,31 +929,29 @@ fn is_int_bool_or_char(ty: Ty<'_>) -> bool {\n     ty.is_bool() || ty.is_integral() || ty.is_char()\n }\n \n-fn is_async_fn(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n-    let hir_map = tcx.hir();\n-    let hir_id = hir_map.local_def_id_to_hir_id(def_id);\n-    hir_map\n-        .fn_sig_by_hir_id(hir_id)\n-        .map_or(false, |sig| sig.header.asyncness == hir::IsAsync::Async)\n+fn is_async_fn(ccx: &ConstCx<'_, '_>) -> bool {\n+    ccx.fn_sig().map_or(false, |sig| sig.header.asyncness == hir::IsAsync::Async)\n }\n \n fn emit_unstable_in_stable_error(ccx: &ConstCx<'_, '_>, span: Span, gate: Symbol) {\n+    let attr_span = ccx.fn_sig().map_or(ccx.body.span, |sig| sig.span.shrink_to_lo());\n+\n     ccx.tcx\n         .sess\n         .struct_span_err(\n             span,\n             &format!(\"const-stable function cannot use `#[feature({})]`\", gate.as_str()),\n         )\n         .span_suggestion(\n-            ccx.body.span,\n+            attr_span,\n             \"if it is not part of the public API, make this function unstably const\",\n             concat!(r#\"#[rustc_const_unstable(feature = \"...\", issue = \"...\")]\"#, '\\n').to_owned(),\n             Applicability::HasPlaceholders,\n         )\n         .span_suggestion(\n-            ccx.body.span,\n+            attr_span,\n             \"otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\",\n-            format!(\"#[allow_internal_unstable({})]\", gate),\n+            format!(\"#[allow_internal_unstable({})]\\n\", gate),\n             Applicability::MaybeIncorrect,\n         )\n         .emit();"}]}