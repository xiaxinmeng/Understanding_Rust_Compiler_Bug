{"sha": "cd3dd803a7b10e89253068202890a200d4b88eb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkM2RkODAzYTdiMTBlODkyNTMwNjgyMDI4OTBhMjAwZDRiODhlYjU=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-05T16:20:20Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T17:23:58Z"}, "message": "Add Builder and Step definitions.", "tree": {"sha": "f1eec5faee06b9dae64d91f8428e2e664c77cc85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1eec5faee06b9dae64d91f8428e2e664c77cc85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd3dd803a7b10e89253068202890a200d4b88eb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3dd803a7b10e89253068202890a200d4b88eb5", "html_url": "https://github.com/rust-lang/rust/commit/cd3dd803a7b10e89253068202890a200d4b88eb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd3dd803a7b10e89253068202890a200d4b88eb5/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b3413d825fa61a16fcfaa37a114eaf3efe88eb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b3413d825fa61a16fcfaa37a114eaf3efe88eb3", "html_url": "https://github.com/rust-lang/rust/commit/6b3413d825fa61a16fcfaa37a114eaf3efe88eb3"}], "stats": {"total": 604, "additions": 599, "deletions": 5}, "files": [{"sha": "37f6954c842d8141d01e1231b570fe0f218007f0", "filename": "src/bootstrap/builder.rs", "status": "added", "additions": 468, "deletions": 0, "changes": 468, "blob_url": "https://github.com/rust-lang/rust/blob/cd3dd803a7b10e89253068202890a200d4b88eb5/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3dd803a7b10e89253068202890a200d4b88eb5/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=cd3dd803a7b10e89253068202890a200d4b88eb5", "patch": "@@ -0,0 +1,468 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use serde::{Serialize, Deserialize};\n+\n+use std::cell::RefCell;\n+use std::collections::HashSet;\n+use std::path::{Path, PathBuf};\n+use std::process::Command;\n+use std::fs;\n+\n+use compile;\n+use install;\n+use dist;\n+use util::{exe, libdir, add_lib_path};\n+use {Build, Mode};\n+use cache::{Cache, Key};\n+use check;\n+use flags::Subcommand;\n+use doc;\n+\n+pub struct Builder<'a> {\n+    pub build: &'a Build,\n+    pub top_stage: u32,\n+    pub kind: Kind,\n+    cache: Cache,\n+    stack: RefCell<Vec<Key>>,\n+}\n+\n+impl<'a> Deref for Builder<'a> {\n+    type Target = Build;\n+\n+    fn deref(&self) -> &Self::Target {\n+        self.build\n+    }\n+}\n+\n+pub trait Step<'a>: Sized {\n+    type Output: Serialize + Deserialize<'a>;\n+    const NAME: &'static str;\n+\n+    const DEFAULT: bool = false;\n+\n+    /// Run this rule for all hosts, and just the same hosts as the targets.\n+    const ONLY_HOSTS: bool = false;\n+\n+    /// Run this rule for all targets, but only with the native host.\n+    const ONLY_BUILD_TARGETS: bool = false;\n+\n+    /// Only run this step with the build triple as host and target.\n+    const ONLY_BUILD: bool = false;\n+\n+    fn run(self, builder: &'a Builder) -> Self::Output;\n+\n+    fn should_run(_builder: &'a Builder, _path: &Path) -> bool { false }\n+\n+    fn make_run(\n+        _builder: &'a Builder,\n+        _path: Option<&Path>,\n+        _host: &'a str,\n+        _target: &'a str,\n+    ) { unimplemented!() }\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+pub enum Kind {\n+    Build,\n+    Test,\n+    Bench,\n+    Dist,\n+    Doc,\n+    Install,\n+}\n+\n+macro_rules! check {\n+    (@inner $self:ident, $rule:ty, $path:expr) => {\n+        let build = $self.build;\n+        let hosts = if <$rule>::ONLY_BUILD_TARGETS || <$rule>::ONLY_BUILD {\n+            &build.config.host[..1]\n+        } else {\n+            &build.hosts\n+        };\n+\n+        // Determine the actual targets participating in this rule.\n+        // NOTE: We should keep the full projection from build triple to\n+        // the hosts for the dist steps, now that the hosts array above is\n+        // truncated to avoid duplication of work in that case. Therefore\n+        // the original non-shadowed hosts array is used below.\n+        let targets = if <$rule>::ONLY_HOSTS {\n+            // If --target was specified but --host wasn't specified,\n+            // don't run any host-only tests. Also, respect any `--host`\n+            // overrides as done for `hosts`.\n+            if build.flags.host.len() > 0 {\n+                &build.flags.host[..]\n+            } else if build.flags.target.len() > 0 {\n+                &[]\n+            } else if <$rule>::ONLY_BUILD {\n+                &build.config.host[..1]\n+            } else {\n+                &build.config.host[..]\n+            }\n+        } else {\n+            &build.targets\n+        };\n+\n+        build.verbose(&format!(\"executing {} with hosts={:?}, targets={:?}\",\n+            stringify!($rule), hosts, targets));\n+        for host in hosts {\n+            for target in targets {\n+                <$rule>::make_run($self, $path, host, target);\n+            }\n+        }\n+    };\n+    ($self:ident, $paths:ident, $($rule:ty),+ $(,)*) => {{\n+        let paths = $paths;\n+        if paths.is_empty() {\n+            $({\n+                if <$rule>::DEFAULT {\n+                    check!(@inner $self, $rule, None);\n+                }\n+            })+\n+        } else {\n+            for path in paths {\n+                $({\n+                    if <$rule>::should_run($self, path) {\n+                        check!(@inner $self, $rule, Some(path));\n+                    }\n+                })+\n+            }\n+        }\n+    }};\n+}\n+\n+impl<'a> Builder<'a> {\n+    pub fn run(build: &Build) {\n+        let (kind, paths) = match build.flags.cmd {\n+            Subcommand::Build { ref paths } => (Kind::Build, &paths[..]),\n+            Subcommand::Doc { ref paths } => (Kind::Doc, &paths[..]),\n+            Subcommand::Test { ref paths, .. } => (Kind::Test, &paths[..]),\n+            Subcommand::Bench { ref paths, .. } => (Kind::Bench, &paths[..]),\n+            Subcommand::Dist { ref paths } => (Kind::Dist, &paths[..]),\n+            Subcommand::Install { ref paths } => (Kind::Install, &paths[..]),\n+            Subcommand::Clean => panic!(),\n+        };\n+\n+        let builder = Builder {\n+            build: build,\n+            top_stage: build.flags.stage.unwrap_or(2),\n+            kind: kind,\n+            cache: Cache::new(),\n+            stack: RefCell::new(Vec::new()),\n+        };\n+\n+        let builder = &builder;\n+        match builder.kind {\n+            Kind::Build => check!(builder, paths, compile::Std, compile::Test, compile::Rustc,\n+                compile::StartupObjects),\n+            Kind::Test => check!(builder, paths, check::Tidy, check::Bootstrap, check::Compiletest,\n+                check::Krate, check::KrateLibrustc, check::Linkcheck, check::Cargotest,\n+                check::TestCargo, check::Docs, check::ErrorIndex, check::Distcheck),\n+            Kind::Bench => check!(builder, paths, check::Krate, check::KrateLibrustc),\n+            Kind::Doc => builder.default_doc(Some(paths)),\n+            Kind::Dist => check!(builder, paths, dist::Docs, dist::Mingw, dist::Rustc,\n+                dist::DebuggerScripts, dist::Std, dist::Analysis, dist::Src,\n+                dist::PlainSourceTarball, dist::Cargo, dist::Rls, dist::Extended, dist::HashSign),\n+            Kind::Install => check!(builder, paths, install::Docs, install::Std, install::Cargo,\n+                install::Rls, install::Analysis, install::Src, install::Rustc),\n+        }\n+    }\n+\n+    pub fn default_doc(&self, paths: Option<&[PathBuf]>) {\n+        let paths = paths.unwrap_or(&[]);\n+        check!(self, paths, doc::UnstableBook, doc::UnstableBookGen, doc::Rustbook, doc::Book,\n+            doc::Standalone, doc::Std, doc::Test, doc::Rustc, doc::ErrorIndex,\n+            doc::Nomicon, doc::Reference);\n+    }\n+\n+    pub fn compiler(&'a self, stage: u32, host: &'a str) -> Compiler<'a> {\n+        self.ensure(compile::Assemble { target_compiler: Compiler { stage, host } })\n+    }\n+\n+    pub fn rustc(&self, compiler: Compiler) -> PathBuf {\n+        if compiler.is_snapshot(self) {\n+            self.build.initial_rustc.clone()\n+        } else {\n+            self.compiler(compiler.stage, compiler.host);\n+            self.sysroot(compiler).join(\"bin\").join(exe(\"rustc\", compiler.host))\n+        }\n+    }\n+\n+    pub fn rustdoc(&self, compiler: Compiler) -> PathBuf {\n+        let mut rustdoc = self.rustc(compiler);\n+        rustdoc.pop();\n+        rustdoc.push(exe(\"rustdoc\", compiler.host));\n+        rustdoc\n+    }\n+\n+    pub fn sysroot(&self, compiler: Compiler<'a>) -> PathBuf {\n+        self.ensure(compile::Sysroot { compiler })\n+    }\n+\n+    /// Returns the libdir where the standard library and other artifacts are\n+    /// found for a compiler's sysroot.\n+    pub fn sysroot_libdir(&self, compiler: Compiler<'a>, target: &'a str) -> PathBuf {\n+        #[derive(Serialize)]\n+        struct Libdir<'a> {\n+            compiler: Compiler<'a>,\n+            target: &'a str,\n+        }\n+        impl<'a> Step<'a> for Libdir<'a> {\n+            type Output = PathBuf;\n+            const NAME: &'static str = \"sysroot libdir\";\n+            fn run(self, builder: &Builder) -> PathBuf {\n+                let sysroot = builder.sysroot(self.compiler)\n+                    .join(\"lib\").join(\"rustlib\").join(self.target).join(\"lib\");\n+                let _ = fs::remove_dir_all(&sysroot);\n+                t!(fs::create_dir_all(&sysroot));\n+                sysroot\n+            }\n+        }\n+        self.ensure(Libdir { compiler, target })\n+    }\n+\n+    /// Returns the compiler's libdir where it stores the dynamic libraries that\n+    /// it itself links against.\n+    ///\n+    /// For example this returns `<sysroot>/lib` on Unix and `<sysroot>/bin` on\n+    /// Windows.\n+    pub fn rustc_libdir(&self, compiler: Compiler) -> PathBuf {\n+        if compiler.is_snapshot(self) {\n+            self.build.rustc_snapshot_libdir()\n+        } else {\n+            self.sysroot(compiler).join(libdir(compiler.host))\n+        }\n+    }\n+\n+    /// Adds the compiler's directory of dynamic libraries to `cmd`'s dynamic\n+    /// library lookup path.\n+    pub fn add_rustc_lib_path(&self, compiler: Compiler, cmd: &mut Command) {\n+        // Windows doesn't need dylib path munging because the dlls for the\n+        // compiler live next to the compiler and the system will find them\n+        // automatically.\n+        if cfg!(windows) {\n+            return\n+        }\n+\n+        add_lib_path(vec![self.rustc_libdir(compiler)], cmd);\n+    }\n+\n+    /// Prepares an invocation of `cargo` to be run.\n+    ///\n+    /// This will create a `Command` that represents a pending execution of\n+    /// Cargo. This cargo will be configured to use `compiler` as the actual\n+    /// rustc compiler, its output will be scoped by `mode`'s output directory,\n+    /// it will pass the `--target` flag for the specified `target`, and will be\n+    /// executing the Cargo command `cmd`.\n+    pub fn cargo(&self, compiler: Compiler, mode: Mode, target: &str, cmd: &str) -> Command {\n+        let build = self.build;\n+\n+        // Clear out the output we're about to generate if our compiler changed\n+        {\n+            let out_dir = build.cargo_out(compiler, mode, target);\n+            build.clear_if_dirty(&out_dir, &self.rustc(compiler));\n+        }\n+\n+        let mut cargo = Command::new(&build.initial_cargo);\n+        let out_dir = build.stage_out(compiler, mode);\n+\n+        cargo.env(\"CARGO_TARGET_DIR\", out_dir)\n+             .arg(cmd)\n+             .arg(\"-j\").arg(build.jobs().to_string())\n+             .arg(\"--target\").arg(target);\n+\n+        // FIXME: Temporary fix for https://github.com/rust-lang/cargo/issues/3005\n+        // Force cargo to output binaries with disambiguating hashes in the name\n+        cargo.env(\"__CARGO_DEFAULT_LIB_METADATA\", &self.build.config.channel);\n+\n+        let stage;\n+        if compiler.stage == 0 && build.local_rebuild {\n+            // Assume the local-rebuild rustc already has stage1 features.\n+            stage = 1;\n+        } else {\n+            stage = compiler.stage;\n+        }\n+\n+        self.build.verbose(&format!(\"cargo using: {:?}\", self.rustc(compiler)));\n+\n+        // Customize the compiler we're running. Specify the compiler to cargo\n+        // as our shim and then pass it some various options used to configure\n+        // how the actual compiler itbuild is called.\n+        //\n+        // These variables are primarily all read by\n+        // src/bootstrap/bin/{rustc.rs,rustdoc.rs}\n+        cargo.env(\"RUSTBUILD_NATIVE_DIR\", build.native_dir(target))\n+             .env(\"RUSTC\", build.out.join(\"bootstrap/debug/rustc\"))\n+             .env(\"RUSTC_REAL\", self.rustc(compiler))\n+             .env(\"RUSTC_STAGE\", stage.to_string())\n+             .env(\"RUSTC_CODEGEN_UNITS\",\n+                  build.config.rust_codegen_units.to_string())\n+             .env(\"RUSTC_DEBUG_ASSERTIONS\",\n+                  build.config.rust_debug_assertions.to_string())\n+             .env(\"RUSTC_SYSROOT\", self.sysroot(compiler))\n+             .env(\"RUSTC_LIBDIR\", self.rustc_libdir(compiler))\n+             .env(\"RUSTC_RPATH\", build.config.rust_rpath.to_string())\n+             .env(\"RUSTDOC\", build.out.join(\"bootstrap/debug/rustdoc\"))\n+             .env(\"RUSTDOC_REAL\", self.rustdoc(compiler))\n+             .env(\"RUSTC_FLAGS\", build.rustc_flags(target).join(\" \"));\n+\n+        if mode != Mode::Tool {\n+            // Tools don't get debuginfo right now, e.g. cargo and rls don't\n+            // get compiled with debuginfo.\n+            cargo.env(\"RUSTC_DEBUGINFO\", build.config.rust_debuginfo.to_string())\n+                 .env(\"RUSTC_DEBUGINFO_LINES\", build.config.rust_debuginfo_lines.to_string())\n+                 .env(\"RUSTC_FORCE_UNSTABLE\", \"1\");\n+\n+            // Currently the compiler depends on crates from crates.io, and\n+            // then other crates can depend on the compiler (e.g. proc-macro\n+            // crates). Let's say, for example that rustc itbuild depends on the\n+            // bitflags crate. If an external crate then depends on the\n+            // bitflags crate as well, we need to make sure they don't\n+            // conflict, even if they pick the same verison of bitflags. We'll\n+            // want to make sure that e.g. a plugin and rustc each get their\n+            // own copy of bitflags.\n+\n+            // Cargo ensures that this works in general through the -C metadata\n+            // flag. This flag will frob the symbols in the binary to make sure\n+            // they're different, even though the source code is the exact\n+            // same. To solve this problem for the compiler we extend Cargo's\n+            // already-passed -C metadata flag with our own. Our rustc.rs\n+            // wrapper around the actual rustc will detect -C metadata being\n+            // passed and frob it with this extra string we're passing in.\n+            cargo.env(\"RUSTC_METADATA_SUFFIX\", \"rustc\");\n+        }\n+\n+        // Enable usage of unstable features\n+        cargo.env(\"RUSTC_BOOTSTRAP\", \"1\");\n+        build.add_rust_test_threads(&mut cargo);\n+\n+        // Almost all of the crates that we compile as part of the bootstrap may\n+        // have a build script, including the standard library. To compile a\n+        // build script, however, it itbuild needs a standard library! This\n+        // introduces a bit of a pickle when we're compiling the standard\n+        // library itbuild.\n+        //\n+        // To work around this we actually end up using the snapshot compiler\n+        // (stage0) for compiling build scripts of the standard library itbuild.\n+        // The stage0 compiler is guaranteed to have a libstd available for use.\n+        //\n+        // For other crates, however, we know that we've already got a standard\n+        // library up and running, so we can use the normal compiler to compile\n+        // build scripts in that situation.\n+        if mode == Mode::Libstd {\n+            cargo.env(\"RUSTC_SNAPSHOT\", &build.initial_rustc)\n+                 .env(\"RUSTC_SNAPSHOT_LIBDIR\", build.rustc_snapshot_libdir());\n+        } else {\n+            cargo.env(\"RUSTC_SNAPSHOT\", self.rustc(compiler))\n+                 .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_libdir(compiler));\n+        }\n+\n+        // Ignore incremental modes except for stage0, since we're\n+        // not guaranteeing correctness across builds if the compiler\n+        // is changing under your feet.`\n+        if build.flags.incremental && compiler.stage == 0 {\n+            let incr_dir = build.incremental_dir(compiler);\n+            cargo.env(\"RUSTC_INCREMENTAL\", incr_dir);\n+        }\n+\n+        if let Some(ref on_fail) = build.flags.on_fail {\n+            cargo.env(\"RUSTC_ON_FAIL\", on_fail);\n+        }\n+\n+        cargo.env(\"RUSTC_VERBOSE\", format!(\"{}\", build.verbosity));\n+\n+        // Specify some various options for build scripts used throughout\n+        // the build.\n+        //\n+        // FIXME: the guard against msvc shouldn't need to be here\n+        if !target.contains(\"msvc\") {\n+            cargo.env(format!(\"CC_{}\", target), build.cc(target))\n+                 .env(format!(\"AR_{}\", target), build.ar(target).unwrap()) // only msvc is None\n+                 .env(format!(\"CFLAGS_{}\", target), build.cflags(target).join(\" \"));\n+\n+            if let Ok(cxx) = build.cxx(target) {\n+                 cargo.env(format!(\"CXX_{}\", target), cxx);\n+            }\n+        }\n+\n+        if build.config.extended && compiler.is_final_stage(self) {\n+            cargo.env(\"RUSTC_SAVE_ANALYSIS\", \"api\".to_string());\n+        }\n+\n+        // When being built Cargo will at some point call `nmake.exe` on Windows\n+        // MSVC. Unfortunately `nmake` will read these two environment variables\n+        // below and try to intepret them. We're likely being run, however, from\n+        // MSYS `make` which uses the same variables.\n+        //\n+        // As a result, to prevent confusion and errors, we remove these\n+        // variables from our environment to prevent passing MSYS make flags to\n+        // nmake, causing it to blow up.\n+        if cfg!(target_env = \"msvc\") {\n+            cargo.env_remove(\"MAKE\");\n+            cargo.env_remove(\"MAKEFLAGS\");\n+        }\n+\n+        // Environment variables *required* throughout the build\n+        //\n+        // FIXME: should update code to not require this env var\n+        cargo.env(\"CFG_COMPILER_HOST_TRIPLE\", target);\n+\n+        if build.is_verbose() {\n+            cargo.arg(\"-v\");\n+        }\n+        // FIXME: cargo bench does not accept `--release`\n+        if build.config.rust_optimize && cmd != \"bench\" {\n+            cargo.arg(\"--release\");\n+        }\n+        if build.config.locked_deps {\n+            cargo.arg(\"--locked\");\n+        }\n+        if build.config.vendor || build.is_sudo {\n+            cargo.arg(\"--frozen\");\n+        }\n+\n+        build.ci_env.force_coloring_in_ci(&mut cargo);\n+\n+        cargo\n+    }\n+\n+    pub fn ensure<S: Step<'a> + Serialize>(&'a self, step: S) -> S::Output\n+    where\n+        S::Output: 'a\n+    {\n+        let key = Cache::to_key(&step);\n+        {\n+            let mut stack = self.stack.borrow_mut();\n+            if stack.contains(&key) {\n+                let mut out = String::new();\n+                out += &format!(\"\\n\\nCycle in build detected when adding {:?}\\n\", key);\n+                for el in stack.iter().rev() {\n+                    out += &format!(\"\\t{:?}\\n\", el);\n+                }\n+                panic!(out);\n+            }\n+            if let Some(out) = self.cache.get::<S::Output>(&key) {\n+                self.build.verbose(&format!(\"{}c {:?}\", \"  \".repeat(stack.len()), key));\n+\n+                return out;\n+            }\n+            self.build.verbose(&format!(\"{}> {:?}\", \"  \".repeat(stack.len()), key));\n+            stack.push(key.clone());\n+        }\n+        let out = step.run(self);\n+        {\n+            let mut stack = self.stack.borrow_mut();\n+            assert_eq!(stack.pop().as_ref(), Some(&key));\n+        }\n+        self.build.verbose(&format!(\"{}< {:?}\", \"  \".repeat(self.stack.borrow().len()), key));\n+        self.cache.put(key.clone(), &out);\n+        self.cache.get::<S::Output>(&key).unwrap()\n+    }\n+}"}, {"sha": "bc69c6fcffdd8bfce051132b8a4aaf7493c1e546", "filename": "src/bootstrap/cache.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/cd3dd803a7b10e89253068202890a200d4b88eb5/src%2Fbootstrap%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3dd803a7b10e89253068202890a200d4b88eb5/src%2Fbootstrap%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcache.rs?ref=cd3dd803a7b10e89253068202890a200d4b88eb5", "patch": "@@ -0,0 +1,102 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use serde_json;\n+use serde::{Serialize, Deserialize};\n+\n+use std::fmt;\n+use std::mem;\n+use std::intrinsics;\n+use std::collections::HashMap;\n+use std::cell::RefCell;\n+\n+/// This is essentially a HashMap which allows storing any type in its input and\n+/// any type in its output. It is a write-once cache; values are never evicted,\n+/// which means that references to the value can safely be returned from the\n+/// get() method.\n+//\n+// FIXME: This type does not permit retrieving &Path from a PathBuf, primarily\n+// due to a lack of any obvious way to ensure that this is safe, but also not\n+// penalize other cases (e.g., deserializing u32 -> &u32, which is non-optimal).\n+#[derive(Debug)]\n+pub struct Cache(RefCell<HashMap<Key, Box<str>>>);\n+\n+fn to_json<T: Serialize>(element: &T) -> String {\n+    let type_id = unsafe {\n+        intrinsics::type_name::<T>()\n+    };\n+\n+    t!(serde_json::to_string(&(type_id, element)))\n+}\n+\n+fn from_json<'a, O: Deserialize<'a>>(data: &'a str) -> O {\n+    let type_id = unsafe {\n+        intrinsics::type_name::<O>()\n+    };\n+\n+    let (de_type_id, element): (&'a str, O)  = t!(serde_json::from_str(data));\n+\n+    assert_eq!(type_id, de_type_id);\n+\n+    element\n+}\n+\n+#[derive(Clone, PartialEq, Eq, Hash)]\n+pub struct Key(String);\n+\n+impl fmt::Debug for Key {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        fmt.write_str(&self.0)\n+    }\n+}\n+\n+impl Cache {\n+    pub fn new() -> Cache {\n+        Cache(RefCell::new(HashMap::new()))\n+    }\n+\n+    pub fn to_key<K: Serialize>(key: &K) -> Key {\n+        Key(to_json(key))\n+    }\n+\n+    /// Puts a value into the cache. Will panic if called more than once with\n+    /// the same key.\n+    ///\n+    /// Returns the internal key utilized, as an opaque structure, useful only\n+    /// for debugging.\n+    pub fn put<V>(&self, key: Key, value: &V)\n+    where\n+        V: Serialize,\n+    {\n+        let mut cache = self.0.borrow_mut();\n+        let value = to_json(value);\n+        assert!(!cache.contains_key(&key), \"processing {:?} a second time\", key);\n+        // Store a boxed str so that it's location in memory never changes and\n+        // it's safe for us to return references to it (so long as they live as\n+        // long as us).\n+        cache.insert(key, value.into_boxed_str());\n+    }\n+\n+    pub fn get<'a, V>(&'a self, key: &Key) -> Option<V>\n+    where\n+        V: Deserialize<'a> + 'a,\n+    {\n+        let cache = self.0.borrow();\n+        cache.get(key).map(|v| {\n+            // Change the lifetime. This borrow is valid for as long as self lives;\n+            // the data we're accessing will live as long as us and will be in a\n+            // stable location, since we use Box<str>.\n+            let v = unsafe {\n+                mem::transmute::<&str, &'a str>(v)\n+            };\n+            from_json(v)\n+        })\n+    }\n+}"}, {"sha": "97994f7bf2a9dfad267536a3501ac6f382130c5f", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cd3dd803a7b10e89253068202890a200d4b88eb5/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3dd803a7b10e89253068202890a200d4b88eb5/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=cd3dd803a7b10e89253068202890a200d4b88eb5", "patch": "@@ -93,6 +93,8 @@ use build_helper::{run_silent, run_suppressed, try_run_silent, try_run_suppresse\n \n use util::{exe, libdir, add_lib_path, OutputFolder, CiEnv};\n \n+use builder::Builder;\n+\n mod cc;\n mod channel;\n mod check;\n@@ -107,6 +109,7 @@ mod install;\n mod native;\n mod sanity;\n pub mod util;\n+mod builder;\n \n #[cfg(windows)]\n mod job;\n@@ -1077,24 +1080,45 @@ impl Build {\n             None\n         }\n     }\n+\n+    /// Get a list of crates from a root crate.\n+    ///\n+    /// Returns Vec<(crate, path to crate, is_root_crate)>\n+    fn crates(&self, root: &str) -> Vec<(&str, &Path)> {\n+        let mut ret = Vec::new();\n+        let mut list = vec![root];\n+        let mut visited = HashSet::new();\n+        while let Some(krate) = list.pop() {\n+            let krate = &self.crates[krate];\n+            // If we can't strip prefix, then out-of-tree path\n+            let path = krate.path.strip_prefix(&self.src).unwrap_or(&krate.path);\n+            ret.push((&*krate.name, path));\n+            for dep in &krate.deps {\n+                if visited.insert(dep) && dep != \"build_helper\" {\n+                    list.push(dep);\n+                }\n+            }\n+        }\n+        ret\n+    }\n }\n \n impl<'a> Compiler<'a> {\n-    /// Creates a new complier for the specified stage/host\n-    fn new(stage: u32, host: &'a str) -> Compiler<'a> {\n-        Compiler { stage: stage, host: host }\n+    pub fn with_stage(mut self, stage: u32) -> Compiler<'a> {\n+        self.stage = stage;\n+        self\n     }\n \n     /// Returns whether this is a snapshot compiler for `build`'s configuration\n-    fn is_snapshot(&self, build: &Build) -> bool {\n+    pub fn is_snapshot(&self, builder: &Build) -> bool {\n         self.stage == 0 && self.host == build.build\n     }\n \n     /// Returns if this compiler should be treated as a final stage one in the\n     /// current build session.\n     /// This takes into account whether we're performing a full bootstrap or\n     /// not; don't directly compare the stage with `2`!\n-    fn is_final_stage(&self, build: &Build) -> bool {\n+    pub fn is_final_stage(&self, build: &Build) -> bool {\n         let final_stage = if build.config.full_bootstrap { 2 } else { 1 };\n         self.stage >= final_stage\n     }"}]}