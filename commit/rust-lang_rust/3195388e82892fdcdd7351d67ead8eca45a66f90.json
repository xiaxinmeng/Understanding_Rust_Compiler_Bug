{"sha": "3195388e82892fdcdd7351d67ead8eca45a66f90", "node_id": "C_kwDOAAsO6NoAKDMxOTUzODhlODI4OTJmZGNkZDczNTFkNjdlYWQ4ZWNhNDVhNjZmOTA", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-10-29T22:48:31Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-10-29T22:51:59Z"}, "message": "rustdoc: add support for incoherent impls on structs and traits\n\nFixes #103170", "tree": {"sha": "c26363416ece4d2e3f2e2488d45b771872204042", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c26363416ece4d2e3f2e2488d45b771872204042"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3195388e82892fdcdd7351d67ead8eca45a66f90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3195388e82892fdcdd7351d67ead8eca45a66f90", "html_url": "https://github.com/rust-lang/rust/commit/3195388e82892fdcdd7351d67ead8eca45a66f90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3195388e82892fdcdd7351d67ead8eca45a66f90/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e9772042948002f9c6f60c4c81603170035fffa", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e9772042948002f9c6f60c4c81603170035fffa", "html_url": "https://github.com/rust-lang/rust/commit/5e9772042948002f9c6f60c4c81603170035fffa"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "4e2031a911fb4c868ecef5a844b799ef02aa7c7b", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3195388e82892fdcdd7351d67ead8eca45a66f90/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3195388e82892fdcdd7351d67ead8eca45a66f90/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=3195388e82892fdcdd7351d67ead8eca45a66f90", "patch": "@@ -323,6 +323,21 @@ pub(crate) fn build_impls(\n     for &did in tcx.inherent_impls(did).iter() {\n         build_impl(cx, parent_module, did, attrs, ret);\n     }\n+\n+    // This pretty much exists expressly for `dyn Error` traits that exist in the `alloc` crate.\n+    // See also:\n+    //\n+    // * https://github.com/rust-lang/rust/issues/103170 \u2014 where it didn't used to get documented\n+    // * https://github.com/rust-lang/rust/pull/99917 \u2014 where the feature got used\n+    // * https://github.com/rust-lang/rust/issues/53487 \u2014 overall tracking issue for Error\n+    if tcx.has_attr(did, sym::rustc_has_incoherent_inherent_impls) {\n+        use rustc_middle::ty::fast_reject::SimplifiedTypeGen::*;\n+        let type_ =\n+            if tcx.is_trait(did) { TraitSimplifiedType(did) } else { AdtSimplifiedType(did) };\n+        for &did in tcx.incoherent_impls(type_) {\n+            build_impl(cx, parent_module, did, attrs, ret);\n+        }\n+    }\n }\n \n /// `parent_module` refers to the parent of the re-export, not the original item"}, {"sha": "fc51e42e5004d80cbd12f486b84302c6b711bbb7", "filename": "src/test/rustdoc/auxiliary/incoherent-impl-types.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3195388e82892fdcdd7351d67ead8eca45a66f90/src%2Ftest%2Frustdoc%2Fauxiliary%2Fincoherent-impl-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3195388e82892fdcdd7351d67ead8eca45a66f90/src%2Ftest%2Frustdoc%2Fauxiliary%2Fincoherent-impl-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fincoherent-impl-types.rs?ref=3195388e82892fdcdd7351d67ead8eca45a66f90", "patch": "@@ -0,0 +1,7 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_has_incoherent_inherent_impls]\n+pub trait FooTrait {}\n+\n+#[rustc_has_incoherent_inherent_impls]\n+pub struct FooStruct;"}, {"sha": "3fdefbecc5461e10b984d36d9ff437f779e6e462", "filename": "src/test/rustdoc/rustc-incoherent-impls.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3195388e82892fdcdd7351d67ead8eca45a66f90/src%2Ftest%2Frustdoc%2Frustc-incoherent-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3195388e82892fdcdd7351d67ead8eca45a66f90/src%2Ftest%2Frustdoc%2Frustc-incoherent-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frustc-incoherent-impls.rs?ref=3195388e82892fdcdd7351d67ead8eca45a66f90", "patch": "@@ -0,0 +1,28 @@\n+// aux-build:incoherent-impl-types.rs\n+// build-aux-docs\n+\n+#![crate_name = \"foo\"]\n+#![feature(rustc_attrs)]\n+\n+extern crate incoherent_impl_types;\n+\n+// The only way this actually shows up is if the type gets inlined.\n+#[doc(inline)]\n+pub use incoherent_impl_types::FooTrait;\n+\n+// @has foo/trait.FooTrait.html\n+// @count - '//section[@id=\"method.do_something\"]' 1\n+impl dyn FooTrait {\n+    #[rustc_allow_incoherent_impl]\n+    pub fn do_something() {}\n+}\n+\n+#[doc(inline)]\n+pub use incoherent_impl_types::FooStruct;\n+\n+// @has foo/struct.FooStruct.html\n+// @count - '//section[@id=\"method.do_something\"]' 1\n+impl FooStruct {\n+    #[rustc_allow_incoherent_impl]\n+    pub fn do_something() {}\n+}"}]}