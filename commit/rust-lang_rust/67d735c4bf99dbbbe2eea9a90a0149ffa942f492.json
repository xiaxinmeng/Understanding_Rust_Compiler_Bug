{"sha": "67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZDczNWM0YmY5OWRiYmJlMmVlYTlhOTBhMDE0OWZmYTk0MmY0OTI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-05T21:04:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-05T21:04:10Z"}, "message": "Rollup merge of #69736 - matthiaskrgr:even_more_clippy, r=Dylan-DPC\n\neven more clippy cleanups\n\n* Don't pass &mut where immutable reference (&) is sufficient (clippy::unnecessary_mut_passed)\n* Use more efficient &&str to String conversion (clippy::inefficient_to_string)\n* Don't always eval arguments inside .expect(), use unwrap_or_else and closure. (clippy::expect_fun_call)\n* Use righthand '&' instead of lefthand \"ref\". (clippy::toplevel_ref_arg)\n* Use simple 'for i in x' loops instead of 'while let Some(i) = x.next()' loops on iterators. (clippy::while_let_on_iterator)\n* Const items have by default a static lifetime, there's no need to annotate it. (clippy::redundant_static_lifetimes)\n* Remove redundant patterns when matching ( x @ _  to  x) (clippy::redundant_pattern)", "tree": {"sha": "9c326d06402d57d5165e349e36ee6d018df3085f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c326d06402d57d5165e349e36ee6d018df3085f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeYWlLCRBK7hj4Ov3rIwAAdHIIAEODbbJUDnZKy63/w0xhCAgc\nUMi0zgM2ZFwQh4ixg9DJ3Vg+T35PEoYOpYN05BrkSGHZhXNCNg1WGuvIjnUsYXgd\nd1q8++c+uuiqgykJCHSrb1vodsirvEExaEOmvzrHrzmhG92Nq+KMqrgNiFS8g6aa\ny7OYljQ+oV619rTdoQ17PGBSJnYvgDrybvjiYQ8wo/qnt3Be1fHbpHODrwgtyCgH\n1FAP8pDZUzOcTP13qJ8VhvwReSNVE6a/0hvvVcp1lNqlEDz8bhjoOtF/PXgvTqmw\nbKaVLcPGXRJ2IICrAdIvtSqWIoFRumElJPwL6LjxFEOe6i9dSd5//7ZqmK+hFO0=\n=3+cA\n-----END PGP SIGNATURE-----\n", "payload": "tree 9c326d06402d57d5165e349e36ee6d018df3085f\nparent 558115b86ccc60aa2132f0e66527bc24842d1ade\nparent 84577c86bf5e1908acfc2cd097684f11e828518c\nauthor Dylan DPC <dylan.dpc@gmail.com> 1583442250 +0100\ncommitter GitHub <noreply@github.com> 1583442250 +0100\n\nRollup merge of #69736 - matthiaskrgr:even_more_clippy, r=Dylan-DPC\n\neven more clippy cleanups\n\n* Don't pass &mut where immutable reference (&) is sufficient (clippy::unnecessary_mut_passed)\n* Use more efficient &&str to String conversion (clippy::inefficient_to_string)\n* Don't always eval arguments inside .expect(), use unwrap_or_else and closure. (clippy::expect_fun_call)\n* Use righthand '&' instead of lefthand \"ref\". (clippy::toplevel_ref_arg)\n* Use simple 'for i in x' loops instead of 'while let Some(i) = x.next()' loops on iterators. (clippy::while_let_on_iterator)\n* Const items have by default a static lifetime, there's no need to annotate it. (clippy::redundant_static_lifetimes)\n* Remove redundant patterns when matching ( x @ _  to  x) (clippy::redundant_pattern)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "html_url": "https://github.com/rust-lang/rust/commit/67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "558115b86ccc60aa2132f0e66527bc24842d1ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/558115b86ccc60aa2132f0e66527bc24842d1ade", "html_url": "https://github.com/rust-lang/rust/commit/558115b86ccc60aa2132f0e66527bc24842d1ade"}, {"sha": "84577c86bf5e1908acfc2cd097684f11e828518c", "url": "https://api.github.com/repos/rust-lang/rust/commits/84577c86bf5e1908acfc2cd097684f11e828518c", "html_url": "https://github.com/rust-lang/rust/commit/84577c86bf5e1908acfc2cd097684f11e828518c"}], "stats": {"total": 116, "additions": 56, "deletions": 60}, "files": [{"sha": "51718592fd9db50df36707574ec0bf550f4da0fe", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -1198,7 +1198,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n         t: BasicBlock,\n         f: BasicBlock,\n     ) -> TerminatorKind<'tcx> {\n-        static BOOL_SWITCH_FALSE: &'static [u128] = &[0];\n+        static BOOL_SWITCH_FALSE: &[u128] = &[0];\n         TerminatorKind::SwitchInt {\n             discr: cond,\n             switch_ty: tcx.types.bool,"}, {"sha": "d6b8b8cafb79cb64d2294563a2f3ef3aff7d731b", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -284,7 +284,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                                 err.tool_only_span_suggestion(\n                                     sp,\n                                     &format!(\"use the `{}` trait\", name),\n-                                    fmt.to_string(),\n+                                    (*fmt).to_string(),\n                                     Applicability::MaybeIncorrect,\n                                 );\n                             }\n@@ -476,7 +476,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 match ty {\n                     Placeholder(_) => {\n                         // record every (position, type) combination only once\n-                        let ref mut seen_ty = self.arg_unique_types[arg];\n+                        let seen_ty = &mut self.arg_unique_types[arg];\n                         let i = seen_ty.iter().position(|x| *x == ty).unwrap_or_else(|| {\n                             let i = seen_ty.len();\n                             seen_ty.push(ty);\n@@ -526,7 +526,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n         // Map the arguments\n         for i in 0..args_len {\n-            let ref arg_types = self.arg_types[i];\n+            let arg_types = &self.arg_types[i];\n             let arg_offsets = arg_types.iter().map(|offset| sofar + *offset).collect::<Vec<_>>();\n             self.arg_index_map.push(arg_offsets);\n             sofar += self.arg_unique_types[i].len();\n@@ -597,7 +597,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                             let arg_idx = match arg_index_consumed.get_mut(i) {\n                                 None => 0, // error already emitted elsewhere\n                                 Some(offset) => {\n-                                    let ref idx_map = self.arg_index_map[i];\n+                                    let idx_map = &self.arg_index_map[i];\n                                     // unwrap_or branch: error already emitted elsewhere\n                                     let arg_idx = *idx_map.get(*offset).unwrap_or(&0);\n                                     *offset += 1;\n@@ -721,7 +721,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             let name = names_pos[i];\n             let span = self.ecx.with_def_site_ctxt(e.span);\n             pats.push(self.ecx.pat_ident(span, name));\n-            for ref arg_ty in self.arg_unique_types[i].iter() {\n+            for arg_ty in self.arg_unique_types[i].iter() {\n                 locals.push(Context::format_arg(self.ecx, self.macsp, e.span, arg_ty, name));\n             }\n             heads.push(self.ecx.expr_addr_of(e.span, e));"}, {"sha": "5d16be3206aaafe8ae22a116110156e69168c73f", "filename": "src/librustc_builtin_macros/global_allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -57,12 +57,12 @@ impl AllocFnFactory<'_, '_> {\n     fn allocator_fn(&self, method: &AllocatorMethod) -> Stmt {\n         let mut abi_args = Vec::new();\n         let mut i = 0;\n-        let ref mut mk = || {\n+        let mut mk = || {\n             let name = self.cx.ident_of(&format!(\"arg{}\", i), self.span);\n             i += 1;\n             name\n         };\n-        let args = method.inputs.iter().map(|ty| self.arg_ty(ty, &mut abi_args, mk)).collect();\n+        let args = method.inputs.iter().map(|ty| self.arg_ty(ty, &mut abi_args, &mut mk)).collect();\n         let result = self.call_allocator(method.name, args);\n         let (output_ty, output_expr) = self.ret_ty(&method.output, result);\n         let decl = self.cx.fn_decl(abi_args, ast::FnRetTy::Ty(output_ty));"}, {"sha": "bc194a3eec4c34684cb085d89307c97662ffae9f", "filename": "src/librustc_builtin_macros/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_builtin_macros%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_builtin_macros%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -313,7 +313,7 @@ fn should_fail(i: &ast::Item) -> bool {\n fn should_panic(cx: &ExtCtxt<'_>, i: &ast::Item) -> ShouldPanic {\n     match attr::find_by_name(&i.attrs, sym::should_panic) {\n         Some(attr) => {\n-            let ref sd = cx.parse_sess.span_diagnostic;\n+            let sd = &cx.parse_sess.span_diagnostic;\n \n             match attr.meta_item_list() {\n                 // Handle #[should_panic(expected = \"foo\")]\n@@ -378,7 +378,7 @@ fn test_type(cx: &ExtCtxt<'_>) -> TestType {\n \n fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n     let has_should_panic_attr = attr::contains_name(&i.attrs, sym::should_panic);\n-    let ref sd = cx.parse_sess.span_diagnostic;\n+    let sd = &cx.parse_sess.span_diagnostic;\n     if let ast::ItemKind::Fn(_, ref sig, ref generics, _) = i.kind {\n         if let ast::Unsafe::Yes(span) = sig.header.unsafety {\n             sd.struct_span_err(i.span, \"unsafe functions cannot be used for tests\")"}, {"sha": "e7e1ad8eda78477293b878b6e20792a7b412e032", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -326,7 +326,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n /// &[&test1, &test2]\n fn mk_tests_slice(cx: &TestCtxt<'_>, sp: Span) -> P<ast::Expr> {\n     debug!(\"building test vector from {} tests\", cx.test_cases.len());\n-    let ref ecx = cx.ext_cx;\n+    let ecx = &cx.ext_cx;\n \n     ecx.expr_vec_slice(\n         sp,"}, {"sha": "c8f0fe8c7239558ea75b30eb47a3b6a1f2a0bed3", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -60,7 +60,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             .chain(ia.inputs.iter().map(|s| s.to_string()))\n             .chain(ext_constraints)\n             .chain(clobbers)\n-            .chain(arch_clobbers.iter().map(|s| s.to_string()))\n+            .chain(arch_clobbers.iter().map(|s| (*s).to_string()))\n             .collect::<Vec<String>>()\n             .join(\",\");\n "}, {"sha": "e212dc81070ac7dc8c1c9cba7f7bb53a537e32b8", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -343,7 +343,8 @@ impl DirtyCleanVisitor<'tcx> {\n                 &format!(\"clean/dirty auto-assertions not yet defined for {:?}\", node),\n             ),\n         };\n-        let labels = Labels::from_iter(labels.iter().flat_map(|s| s.iter().map(|l| l.to_string())));\n+        let labels =\n+            Labels::from_iter(labels.iter().flat_map(|s| s.iter().map(|l| (*l).to_string())));\n         (name, labels)\n     }\n "}, {"sha": "3166fe065769786fcc6cb238237fde1dd8c5b717", "filename": "src/librustc_infer/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_infer%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_infer%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fauto_trait.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -150,7 +150,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             // SelectionContext to return it back to us.\n \n             let (new_env, user_env) = match self.evaluate_predicates(\n-                &mut infcx,\n+                &infcx,\n                 trait_did,\n                 ty,\n                 orig_env,"}, {"sha": "fd94e3b69940c8d2c587b3e60cf31abdd3eb4c5c", "filename": "src/librustc_infer/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fselect.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -1341,7 +1341,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         stack: &TraitObligationStack<'o, 'tcx>,\n     ) -> Result<SelectionCandidateSet<'tcx>, SelectionError<'tcx>> {\n         let TraitObligationStack { obligation, .. } = *stack;\n-        let ref obligation = Obligation {\n+        let obligation = &Obligation {\n             param_env: obligation.param_env,\n             cause: obligation.cause.clone(),\n             recursion_depth: obligation.recursion_depth,"}, {"sha": "5b7b73b48ec5bc7cfc31743d67432c0b3819df36", "filename": "src/librustc_lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_lint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_lint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fcontext.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -369,7 +369,7 @@ impl LintStore {\n                         return if *silent {\n                             CheckLintNameResult::Ok(&lint_ids)\n                         } else {\n-                            CheckLintNameResult::Tool(Err((Some(&lint_ids), name.to_string())))\n+                            CheckLintNameResult::Tool(Err((Some(&lint_ids), (*name).to_string())))\n                         };\n                     }\n                     CheckLintNameResult::Ok(&lint_ids)\n@@ -404,7 +404,7 @@ impl LintStore {\n                         return if *silent {\n                             CheckLintNameResult::Tool(Err((Some(&lint_ids), complete_name)))\n                         } else {\n-                            CheckLintNameResult::Tool(Err((Some(&lint_ids), name.to_string())))\n+                            CheckLintNameResult::Tool(Err((Some(&lint_ids), (*name).to_string())))\n                         };\n                     }\n                     CheckLintNameResult::Tool(Err((Some(&lint_ids), complete_name)))"}, {"sha": "f8e1d3e9fe8c6c20076fcf744f3bf48febd7e505", "filename": "src/librustc_mir/dataflow/generic/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -604,8 +604,8 @@ fn write_diff<A: Analysis<'tcx>>(\n     Ok(())\n }\n \n-const BR_LEFT: &'static str = r#\"<br align=\"left\"/>\"#;\n-const BR_LEFT_SPACE: &'static str = r#\"<br align=\"left\"/> \"#;\n+const BR_LEFT: &str = r#\"<br align=\"left\"/>\"#;\n+const BR_LEFT_SPACE: &str = r#\"<br align=\"left\"/> \"#;\n \n /// Line break policy that breaks at 40 characters and starts the next line with a single space.\n const LIMIT_30_ALIGN_1: Option<LineBreak> = Some(LineBreak { sequence: BR_LEFT_SPACE, limit: 30 });"}, {"sha": "6e1513bcd1dd0beb042e6d673cb0f0e9c49c9a12", "filename": "src/librustc_mir/dataflow/generic/visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fvisitor.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -22,20 +22,20 @@ pub fn visit_results<F>(\n             let loc = Location { block, statement_index };\n \n             results.reconstruct_before_statement_effect(&mut state, stmt, loc);\n-            vis.visit_statement(&mut state, stmt, loc);\n+            vis.visit_statement(&state, stmt, loc);\n \n             results.reconstruct_statement_effect(&mut state, stmt, loc);\n-            vis.visit_statement_exit(&mut state, stmt, loc);\n+            vis.visit_statement_exit(&state, stmt, loc);\n         }\n \n         let loc = body.terminator_loc(block);\n         let term = block_data.terminator();\n \n         results.reconstruct_before_terminator_effect(&mut state, term, loc);\n-        vis.visit_terminator(&mut state, term, loc);\n+        vis.visit_terminator(&state, term, loc);\n \n         results.reconstruct_terminator_effect(&mut state, term, loc);\n-        vis.visit_terminator_exit(&mut state, term, loc);\n+        vis.visit_terminator_exit(&state, term, loc);\n     }\n }\n "}, {"sha": "ea8378574a3e0cc9613543c2395a969c6f82d65f", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -311,9 +311,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         // taking into account the `spread_arg`.  If we could write\n                         // this is a single iterator (that handles `spread_arg`), then\n                         // `pass_argument` would be the loop body. It takes care to\n-                        // not advance `caller_iter` for ZSTs.\n-                        let mut locals_iter = body.args_iter();\n-                        while let Some(local) = locals_iter.next() {\n+                        // not advance `caller_iter` for ZSTs\n+                        for local in body.args_iter() {\n                             let dest = self.eval_place(&mir::Place::from(local))?;\n                             if Some(local) == body.spread_arg {\n                                 // Must be a tuple"}, {"sha": "9fe21964b98882c96b5d8713a34dad05a699f8be", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -920,7 +920,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n             let (blocks, local_decls) = self.source.basic_blocks_and_local_decls_mut();\n             match candidate {\n                 Candidate::Ref(loc) => {\n-                    let ref mut statement = blocks[loc.block].statements[loc.statement_index];\n+                    let statement = &mut blocks[loc.block].statements[loc.statement_index];\n                     match statement.kind {\n                         StatementKind::Assign(box (\n                             _,\n@@ -971,7 +971,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                     }\n                 }\n                 Candidate::Repeat(loc) => {\n-                    let ref mut statement = blocks[loc.block].statements[loc.statement_index];\n+                    let statement = &mut blocks[loc.block].statements[loc.statement_index];\n                     match statement.kind {\n                         StatementKind::Assign(box (_, Rvalue::Repeat(ref mut operand, _))) => {\n                             let ty = operand.ty(local_decls, self.tcx);"}, {"sha": "5b054c04522439c9a96b934e70d1a6a13c53e9b9", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -2331,7 +2331,7 @@ fn specialize_one_pattern<'p, 'tcx>(\n         PatKind::Binding { .. } | PatKind::Wild => Some(ctor_wild_subpatterns.iter().collect()),\n \n         PatKind::Variant { adt_def, variant_index, ref subpatterns, .. } => {\n-            let ref variant = adt_def.variants[variant_index];\n+            let variant = &adt_def.variants[variant_index];\n             let is_non_exhaustive = cx.is_foreign_non_exhaustive_variant(pat.ty, variant);\n             Some(Variant(variant.def_id))\n                 .filter(|variant_constructor| variant_constructor == constructor)"}, {"sha": "8b43b424f5502d74780fd1e27cb536b160c449d4", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -19,7 +19,7 @@ use rustc_span::{MultiSpan, Span, SpanSnippetError, DUMMY_SP};\n use log::{debug, trace};\n use std::mem;\n \n-const TURBOFISH: &'static str = \"use `::<...>` instead of `<...>` to specify type arguments\";\n+const TURBOFISH: &str = \"use `::<...>` instead of `<...>` to specify type arguments\";\n \n /// Creates a placeholder argument.\n pub(super) fn dummy_arg(ident: Ident) -> Param {"}, {"sha": "3b018005a88d2673edd15b8541d8d1db44d9ee24", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -1432,7 +1432,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                             }\n                             msg\n                         }\n-                        ref s @ _ => bug!(\"unexpected import subclass {:?}\", s),\n+                        ref s => bug!(\"unexpected import subclass {:?}\", s),\n                     };\n                     let mut err = this.session.struct_span_err(binding.span, &msg);\n "}, {"sha": "d8b23998e727f561cc490c7515663f5f3997220d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -737,8 +737,8 @@ impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n }\n \n pub fn check_wf_new(tcx: TyCtxt<'_>) {\n-    let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n-    tcx.hir().krate().par_visit_all_item_likes(&mut visit);\n+    let visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n+    tcx.hir().krate().par_visit_all_item_likes(&visit);\n }\n \n fn check_mod_item_types(tcx: TyCtxt<'_>, module_def_id: DefId) {"}, {"sha": "26462e61e5d5709c28749f5d7e4756506107f3c0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -151,7 +151,7 @@ crate fn placeholder_type_error(\n         .unwrap_or(&\"ParamName\");\n \n     let mut sugg: Vec<_> =\n-        placeholder_types.iter().map(|sp| (*sp, type_name.to_string())).collect();\n+        placeholder_types.iter().map(|sp| (*sp, (*type_name).to_string())).collect();\n     if generics.is_empty() {\n         sugg.push((span, format!(\"<{}>\", type_name)));\n     } else if let Some(arg) = generics.iter().find(|arg| match arg.name {\n@@ -160,7 +160,7 @@ crate fn placeholder_type_error(\n     }) {\n         // Account for `_` already present in cases like `struct S<_>(_);` and suggest\n         // `struct S<T>(T);` instead of `struct S<_, T>(T);`.\n-        sugg.push((arg.span, type_name.to_string()));\n+        sugg.push((arg.span, (*type_name).to_string()));\n     } else {\n         sugg.push((\n             generics.iter().last().unwrap().span.shrink_to_hi(),"}, {"sha": "4c7765b2965006ce0bec3f4158a73d04c5ca1fe6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -50,7 +50,7 @@ pub use self::types::Type::*;\n pub use self::types::Visibility::{Inherited, Public};\n pub use self::types::*;\n \n-const FN_OUTPUT_NAME: &'static str = \"Output\";\n+const FN_OUTPUT_NAME: &str = \"Output\";\n \n pub trait Clean<T> {\n     fn clean(&self, cx: &DocContext<'_>) -> T;"}, {"sha": "9c9a00295c3fa2026c6e5b29672d9380cf838103", "filename": "src/librustdoc/docfs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustdoc%2Fdocfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustdoc%2Fdocfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdocfs.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -90,14 +90,14 @@ impl DocFS {\n             let sender = self.errors.sender.clone().unwrap();\n             rayon::spawn(move || match fs::write(&path, &contents) {\n                 Ok(_) => {\n-                    sender\n-                        .send(None)\n-                        .expect(&format!(\"failed to send error on \\\"{}\\\"\", path.display()));\n+                    sender.send(None).unwrap_or_else(|_| {\n+                        panic!(\"failed to send error on \\\"{}\\\"\", path.display())\n+                    });\n                 }\n                 Err(e) => {\n-                    sender\n-                        .send(Some(format!(\"\\\"{}\\\": {}\", path.display(), e)))\n-                        .expect(&format!(\"failed to send non-error on \\\"{}\\\"\", path.display()));\n+                    sender.send(Some(format!(\"\\\"{}\\\": {}\", path.display(), e))).unwrap_or_else(\n+                        |_| panic!(\"failed to send non-error on \\\"{}\\\"\", path.display()),\n+                    );\n                 }\n             });\n             Ok(())"}, {"sha": "0b2b0cdc18b092e5c135c8cded2d3ef400566479", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -62,7 +62,7 @@ impl<'a> From<&'a clean::Item> for ItemType {\n     fn from(item: &'a clean::Item) -> ItemType {\n         let inner = match item.inner {\n             clean::StrippedItem(box ref item) => item,\n-            ref inner @ _ => inner,\n+            ref inner => inner,\n         };\n \n         match *inner {\n@@ -194,7 +194,7 @@ impl fmt::Display for ItemType {\n     }\n }\n \n-pub const NAMESPACE_TYPE: &'static str = \"t\";\n-pub const NAMESPACE_VALUE: &'static str = \"v\";\n-pub const NAMESPACE_MACRO: &'static str = \"m\";\n-pub const NAMESPACE_KEYWORD: &'static str = \"k\";\n+pub const NAMESPACE_TYPE: &str = \"t\";\n+pub const NAMESPACE_VALUE: &str = \"v\";\n+pub const NAMESPACE_MACRO: &str = \"m\";\n+pub const NAMESPACE_KEYWORD: &str = \"k\";"}, {"sha": "42529a6682ec112e1ef429bb4acc7543a8a15941", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -869,12 +869,8 @@ pub fn plain_summary_line(md: &str) -> String {\n         }\n     }\n     let mut s = String::with_capacity(md.len() * 3 / 2);\n-    let mut p = ParserWrapper { inner: Parser::new(md), is_in: 0, is_first: true };\n-    while let Some(t) = p.next() {\n-        if !t.is_empty() {\n-            s.push_str(&t);\n-        }\n-    }\n+    let p = ParserWrapper { inner: Parser::new(md), is_in: 0, is_first: true };\n+    p.into_iter().filter(|t| !t.is_empty()).for_each(|i| s.push_str(&i));\n     s\n }\n "}, {"sha": "07fe439ace2269bd369043e3c518fbf3c6a1775c", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -2727,7 +2727,7 @@ fn naive_assoc_href(it: &clean::Item, link: AssocItemLink<'_>) -> String {\n     let name = it.name.as_ref().unwrap();\n     let ty = match it.type_() {\n         Typedef | AssocType => AssocType,\n-        s @ _ => s,\n+        s => s,\n     };\n \n     let anchor = format!(\"#{}.{}\", ty, name);\n@@ -3150,7 +3150,7 @@ fn render_attribute(attr: &ast::MetaItem) -> Option<String> {\n     }\n }\n \n-const ATTRIBUTE_WHITELIST: &'static [Symbol] = &[\n+const ATTRIBUTE_WHITELIST: &[Symbol] = &[\n     sym::export_name,\n     sym::lang,\n     sym::link_section,\n@@ -4610,7 +4610,7 @@ fn item_keyword(w: &mut Buffer, cx: &Context, it: &clean::Item) {\n     document(w, cx, it)\n }\n \n-crate const BASIC_KEYWORDS: &'static str = \"rust, rustlang, rust-lang\";\n+crate const BASIC_KEYWORDS: &str = \"rust, rustlang, rust-lang\";\n \n fn make_item_keywords(it: &clean::Item) -> String {\n     format!(\"{}, {}\", BASIC_KEYWORDS, it.name.as_ref().unwrap())"}, {"sha": "859da691ad27868c485fa3ed038011e3e8317571", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -19,9 +19,9 @@ cfg_if::cfg_if! {\n     if #[cfg(target_os = \"fuchsia\")] {\n         // fuchsia doesn't have /dev/null\n     } else if #[cfg(target_os = \"redox\")] {\n-        const DEV_NULL: &'static str = \"null:\\0\";\n+        const DEV_NULL: &str = \"null:\\0\";\n     } else {\n-        const DEV_NULL: &'static str = \"/dev/null\\0\";\n+        const DEV_NULL: &str = \"/dev/null\\0\";\n     }\n }\n "}, {"sha": "55f9df9caafb274a72d0fca8e7541ecabb2f3f10", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d735c4bf99dbbbe2eea9a90a0149ffa942f492/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=67d735c4bf99dbbbe2eea9a90a0149ffa942f492", "patch": "@@ -96,7 +96,7 @@ use time::TestExecTime;\n // Process exit code to be used to indicate test failures.\n const ERROR_EXIT_CODE: i32 = 101;\n \n-const SECONDARY_TEST_INVOKER_VAR: &'static str = \"__RUST_TEST_INVOKE\";\n+const SECONDARY_TEST_INVOKER_VAR: &str = \"__RUST_TEST_INVOKE\";\n \n // The default console test runner. It accepts the command line\n // arguments and a vector of test_descs.\n@@ -158,7 +158,7 @@ pub fn test_main_static_abort(tests: &[&TestDescAndFn]) {\n             .filter(|test| test.desc.name.as_slice() == name)\n             .map(make_owned_test)\n             .next()\n-            .expect(&format!(\"couldn't find a test with the provided name '{}'\", name));\n+            .unwrap_or_else(|| panic!(\"couldn't find a test with the provided name '{}'\", name));\n         let TestDescAndFn { desc, testfn } = test;\n         let testfn = match testfn {\n             StaticTestFn(f) => f,"}]}