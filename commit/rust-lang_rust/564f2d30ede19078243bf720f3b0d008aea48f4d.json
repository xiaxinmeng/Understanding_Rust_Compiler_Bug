{"sha": "564f2d30ede19078243bf720f3b0d008aea48f4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NGYyZDMwZWRlMTkwNzgyNDNiZjcyMGYzYjBkMDA4YWVhNDhmNGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-22T07:21:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-22T07:21:48Z"}, "message": "Auto merge of #66537 - nnethercote:delay-is_local_ever_initialized, r=spastorino\n\nDelay an `is_local_ever_initialized` call.\n\nThis commit moves the call after a `return` that almost always runs. It\nspeeds up the `unicode_normalization` benchmark by about 2%.\n\nr? @spastorino", "tree": {"sha": "7511f406d207476bf9572236b5ce5a028c204935", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7511f406d207476bf9572236b5ce5a028c204935"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/564f2d30ede19078243bf720f3b0d008aea48f4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/564f2d30ede19078243bf720f3b0d008aea48f4d", "html_url": "https://github.com/rust-lang/rust/commit/564f2d30ede19078243bf720f3b0d008aea48f4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/564f2d30ede19078243bf720f3b0d008aea48f4d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa", "html_url": "https://github.com/rust-lang/rust/commit/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa"}, {"sha": "965161714bd770d2a86d5864556e3a93d2ad9bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/965161714bd770d2a86d5864556e3a93d2ad9bc8", "html_url": "https://github.com/rust-lang/rust/commit/965161714bd770d2a86d5864556e3a93d2ad9bc8"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "f5f1f301e7b49e5959b230d746ab23fc36c2721f", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/564f2d30ede19078243bf720f3b0d008aea48f4d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/564f2d30ede19078243bf720f3b0d008aea48f4d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=564f2d30ede19078243bf720f3b0d008aea48f4d", "patch": "@@ -1883,16 +1883,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let error_access;\n         let the_place_err;\n \n-        // rust-lang/rust#21232, #54986: during period where we reject\n-        // partial initialization, do not complain about mutability\n-        // errors except for actual mutation (as opposed to an attempt\n-        // to do a partial initialization).\n-        let previously_initialized = if let PlaceBase::Local(local) = place.base {\n-            self.is_local_ever_initialized(local, flow_state).is_some()\n-        } else {\n-            true\n-        };\n-\n         match kind {\n             Reservation(WriteKind::MutableBorrow(borrow_kind @ BorrowKind::Unique))\n             | Reservation(WriteKind::MutableBorrow(borrow_kind @ BorrowKind::Mut { .. }))\n@@ -1966,8 +1956,18 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n         }\n \n+        // rust-lang/rust#21232, #54986: during period where we reject\n+        // partial initialization, do not complain about mutability\n+        // errors except for actual mutation (as opposed to an attempt\n+        // to do a partial initialization).\n+        let previously_initialized = if let PlaceBase::Local(local) = place.base {\n+            self.is_local_ever_initialized(local, flow_state).is_some()\n+        } else {\n+            true\n+        };\n+\n         // at this point, we have set up the error reporting state.\n-        return if previously_initialized {\n+        if previously_initialized {\n             self.report_mutability_error(\n                 place,\n                 span,\n@@ -1978,7 +1978,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             true\n         } else {\n             false\n-        };\n+        }\n     }\n \n     fn is_local_ever_initialized("}]}