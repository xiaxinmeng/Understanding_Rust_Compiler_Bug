{"sha": "8ed723bb1f988d0fb624817bcb7e10da192bcbd9", "node_id": "C_kwDOAAsO6NoAKDhlZDcyM2JiMWY5ODhkMGZiNjI0ODE3YmNiN2UxMGRhMTkyYmNiZDk", "commit": {"author": {"name": "dswij", "email": "dswijj@gmail.com", "date": "2021-12-23T03:32:04Z"}, "committer": {"name": "Dharma Saputra Wijaya", "email": "dswijj@gmail.com", "date": "2021-12-25T13:55:20Z"}, "message": "Update str_utils test", "tree": {"sha": "6614e0de067eaca0a6383eda01bc0102f53ca6d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6614e0de067eaca0a6383eda01bc0102f53ca6d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ed723bb1f988d0fb624817bcb7e10da192bcbd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed723bb1f988d0fb624817bcb7e10da192bcbd9", "html_url": "https://github.com/rust-lang/rust/commit/8ed723bb1f988d0fb624817bcb7e10da192bcbd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ed723bb1f988d0fb624817bcb7e10da192bcbd9/comments", "author": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df2e4d17c69c92ce46fc90085a4f99aaa298233e", "url": "https://api.github.com/repos/rust-lang/rust/commits/df2e4d17c69c92ce46fc90085a4f99aaa298233e", "html_url": "https://github.com/rust-lang/rust/commit/df2e4d17c69c92ce46fc90085a4f99aaa298233e"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "7200baf5b3c60fddae097b7ef44dcc0270943059", "filename": "clippy_utils/src/str_utils.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8ed723bb1f988d0fb624817bcb7e10da192bcbd9/clippy_utils%2Fsrc%2Fstr_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed723bb1f988d0fb624817bcb7e10da192bcbd9/clippy_utils%2Fsrc%2Fstr_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fstr_utils.rs?ref=8ed723bb1f988d0fb624817bcb7e10da192bcbd9", "patch": "@@ -74,8 +74,9 @@ pub fn camel_case_start(s: &str) -> StrIndex {\n /// Returns `StrIndex` of the last camel-case component of `s[idx..]`.\n ///\n /// ```\n-/// assert_eq!(camel_case_start(\"AbcDef\", 0), StrIndex::new(0, 0));\n-/// assert_eq!(camel_case_start(\"AbcDef\", 1), StrIndex::new(3, 3));\n+/// # use clippy_utils::str_utils::{camel_case_start_from_idx, StrIndex};\n+/// assert_eq!(camel_case_start_from_idx(\"AbcDef\", 0), StrIndex::new(0, 0));\n+/// assert_eq!(camel_case_start_from_idx(\"AbcDef\", 1), StrIndex::new(3, 3));\n /// ```\n pub fn camel_case_start_from_idx(s: &str, start_idx: usize) -> StrIndex {\n     let char_count = s.chars().count();\n@@ -119,7 +120,10 @@ pub fn camel_case_start_from_idx(s: &str, start_idx: usize) -> StrIndex {\n /// Get the indexes of camel case components of a string `s`\n ///\n /// ```\n-/// assert_eq!(camel_case_indexes(\"AbcDef\"), vec![StrIndex::new(0, 0), StrIndex::new(3, 3)])\n+/// # use clippy_utils::str_utils::{camel_case_indexes, StrIndex};\n+/// assert_eq!(camel_case_indexes(\"AbcDef\"), vec![StrIndex::new(0, 0), StrIndex::new(3, 3),\n+/// StrIndex::new(6, 6)]);\n+/// assert_eq!(camel_case_indexes(\"abcDef\"), vec![StrIndex::new(3, 3), StrIndex::new(6, 6)]);\n /// ```\n pub fn camel_case_indexes(s: &str) -> Vec<StrIndex> {\n     let mut result = Vec::new();\n@@ -138,6 +142,7 @@ pub fn camel_case_indexes(s: &str) -> Vec<StrIndex> {\n /// Split camel case string into a vector of its components\n ///\n /// ```\n+/// # use clippy_utils::str_utils::{camel_case_split, StrIndex};\n /// assert_eq!(camel_case_split(\"AbcDef\"), vec![\"Abc\", \"Def\"]);\n /// ```\n pub fn camel_case_split(s: &str) -> Vec<&str> {\n@@ -288,17 +293,16 @@ mod test {\n         assert_eq!(camel_case_until(\"ABCD\"), StrIndex::new(0, 0));\n     }\n \n+    #[test]\n+    fn camel_case_start_from_idx_full() {\n+        assert_eq!(camel_case_start_from_idx(\"AbcDef\", 0), StrIndex::new(0, 0));\n+        assert_eq!(camel_case_start_from_idx(\"AbcDef\", 1), StrIndex::new(3, 3));\n+        assert_eq!(camel_case_start_from_idx(\"AbcDef\", 4), StrIndex::new(6, 6));\n+    }\n+\n     #[test]\n     fn camel_case_indexes_full() {\n-        assert_eq!(\n-            camel_case_indexes(\"AbcDef\"),\n-            vec![StrIndex::new(0, 0), StrIndex::new(3, 3)]\n-        );\n-        assert_eq!(\n-            camel_case_indexes(\"abcDef\"),\n-            vec![StrIndex::new(0, 0), StrIndex::new(3, 3)]\n-        );\n-        assert_eq!(camel_case_indexes(\"Abc\\u{f6}\\u{f6}DD\"), vec![StrIndex::new(5, 7)]);\n+        assert_eq!(camel_case_indexes(\"Abc\\u{f6}\\u{f6}DD\"), vec![StrIndex::new(7, 9)]);\n     }\n \n     #[test]"}]}