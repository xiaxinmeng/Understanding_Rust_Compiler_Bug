{"sha": "31cba57ea56e7444c75d62b3a1bebad8f5f74432", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxY2JhNTdlYTU2ZTc0NDRjNzVkNjJiM2ExYmViYWQ4ZjVmNzQ0MzI=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-04-24T22:29:44Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-04-24T22:41:56Z"}, "message": "Fix coverage ICE because fn_sig can have a span that crosses file boundaries\n\nFixes: #83792\n\nMIR `InstrumentCoverage` assumed the `FnSig` span was contained within a\nsingle file, but this is not always the case. Some macro constructions\ncan result in a span that starts in one `SourceFile` and ends in a\ndifferent one.\n\nThe `FnSig` span is included in coverage results as long as that span is\nin the same `SourceFile` and the same macro context, but by assuming the\n`FnSig` span's `hi()` and `lo()` were in the same file, I took this for\ngranted, and checked only that the `FnSig` `hi()` was in the same\n`SourceFile` as the `body_span`.\n\nI actually drop the `hi()` though, and extend the `FnSig` span to the\n`body_span.lo()`, so I really should have simply checked that the\n`FnSig` span's `lo()` was in the `SourceFile` of the `body_span`.", "tree": {"sha": "518131eb79a31c7315144071ff96745d206556c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/518131eb79a31c7315144071ff96745d206556c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31cba57ea56e7444c75d62b3a1bebad8f5f74432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31cba57ea56e7444c75d62b3a1bebad8f5f74432", "html_url": "https://github.com/rust-lang/rust/commit/31cba57ea56e7444c75d62b3a1bebad8f5f74432", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31cba57ea56e7444c75d62b3a1bebad8f5f74432/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b68027841af952d624a5ce509834237f8eda7e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b68027841af952d624a5ce509834237f8eda7e3", "html_url": "https://github.com/rust-lang/rust/commit/2b68027841af952d624a5ce509834237f8eda7e3"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "3ef03ec21addd5393bab898371c14f2f24fcb88d", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31cba57ea56e7444c75d62b3a1bebad8f5f74432/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31cba57ea56e7444c75d62b3a1bebad8f5f74432/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=31cba57ea56e7444c75d62b3a1bebad8f5f74432", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n         let source_file = source_map.lookup_source_file(body_span.lo());\n         let fn_sig_span = match some_fn_sig.filter(|fn_sig| {\n             fn_sig.span.ctxt() == body_span.ctxt()\n-                && Lrc::ptr_eq(&source_file, &source_map.lookup_source_file(fn_sig.span.hi()))\n+                && Lrc::ptr_eq(&source_file, &source_map.lookup_source_file(fn_sig.span.lo()))\n         }) {\n             Some(fn_sig) => fn_sig.span.with_hi(body_span.lo()),\n             None => body_span.shrink_to_lo(),"}]}