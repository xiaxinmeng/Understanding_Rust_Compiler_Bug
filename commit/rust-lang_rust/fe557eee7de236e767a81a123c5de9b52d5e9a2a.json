{"sha": "fe557eee7de236e767a81a123c5de9b52d5e9a2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNTU3ZWVlN2RlMjM2ZTc2N2E4MWExMjNjNWRlOWI1MmQ1ZTlhMmE=", "commit": {"author": {"name": "Maxim Nazarenko", "email": "nz.phone@mail.ru", "date": "2018-03-08T21:15:39Z"}, "committer": {"name": "Maxim Nazarenko", "email": "nz.phone@mail.ru", "date": "2018-03-08T21:15:39Z"}, "message": "another rewrite\n\nbased on @nikomatsakis texthg", "tree": {"sha": "e937a7ef95b550f8b0852e61f8bea7d6f0d56fe9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e937a7ef95b550f8b0852e61f8bea7d6f0d56fe9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe557eee7de236e767a81a123c5de9b52d5e9a2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe557eee7de236e767a81a123c5de9b52d5e9a2a", "html_url": "https://github.com/rust-lang/rust/commit/fe557eee7de236e767a81a123c5de9b52d5e9a2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe557eee7de236e767a81a123c5de9b52d5e9a2a/comments", "author": {"login": "NovemberZulu", "id": 897004, "node_id": "MDQ6VXNlcjg5NzAwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/897004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NovemberZulu", "html_url": "https://github.com/NovemberZulu", "followers_url": "https://api.github.com/users/NovemberZulu/followers", "following_url": "https://api.github.com/users/NovemberZulu/following{/other_user}", "gists_url": "https://api.github.com/users/NovemberZulu/gists{/gist_id}", "starred_url": "https://api.github.com/users/NovemberZulu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NovemberZulu/subscriptions", "organizations_url": "https://api.github.com/users/NovemberZulu/orgs", "repos_url": "https://api.github.com/users/NovemberZulu/repos", "events_url": "https://api.github.com/users/NovemberZulu/events{/privacy}", "received_events_url": "https://api.github.com/users/NovemberZulu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "NovemberZulu", "id": 897004, "node_id": "MDQ6VXNlcjg5NzAwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/897004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NovemberZulu", "html_url": "https://github.com/NovemberZulu", "followers_url": "https://api.github.com/users/NovemberZulu/followers", "following_url": "https://api.github.com/users/NovemberZulu/following{/other_user}", "gists_url": "https://api.github.com/users/NovemberZulu/gists{/gist_id}", "starred_url": "https://api.github.com/users/NovemberZulu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NovemberZulu/subscriptions", "organizations_url": "https://api.github.com/users/NovemberZulu/orgs", "repos_url": "https://api.github.com/users/NovemberZulu/repos", "events_url": "https://api.github.com/users/NovemberZulu/events{/privacy}", "received_events_url": "https://api.github.com/users/NovemberZulu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78789add6c4ab8a4b81e717803be63c384438595", "url": "https://api.github.com/repos/rust-lang/rust/commits/78789add6c4ab8a4b81e717803be63c384438595", "html_url": "https://github.com/rust-lang/rust/commit/78789add6c4ab8a4b81e717803be63c384438595"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "61b0aead22f2034cad2dfa27adfbd4ebddbcb1e9", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fe557eee7de236e767a81a123c5de9b52d5e9a2a/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe557eee7de236e767a81a123c5de9b52d5e9a2a/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=fe557eee7de236e767a81a123c5de9b52d5e9a2a", "patch": "@@ -1161,27 +1161,43 @@ impl<'a, T: ?Sized + fmt::Display> fmt::Display for RefMut<'a, T> {\n /// The `UnsafeCell<T>` type is the only legal way to obtain aliasable data that is considered\n /// mutable. In general, transmuting an `&T` type into an `&mut T` is considered undefined behavior.\n ///\n-/// The compiler makes optimizations based on the knowledge that `&T` is not mutably aliased or\n-/// mutated, and that `&mut T` is unique. When building abstractions like `Cell`, `RefCell`,\n-/// `Mutex`, etc, you need to turn these optimizations off. `UnsafeCell` is the only legal way\n-/// to do this. When `UnsafeCell<T>` itself is immutably aliased, it is still safe to obtain\n-/// a mutable reference to its interior and/or to mutate the interior. However, the abstraction\n-/// designer must ensure that any active mutable references to the interior obtained this way does\n-/// not co-exist with other active references to the interior, either mutable or not. This is often\n-/// done via runtime checks. Naturally, several active immutable references to the interior can\n-/// co-exits with each other (but not with a mutable reference).\n+/// If you have a reference `&SomeStruct`, then normally in Rust all fields of `SomeStruct` are\n+/// immutable. The compiler makes optimizations based on the knowledge that `&T` is not mutably\n+/// aliased or mutated, and that `&mut T` is unique. `UnsafeCel<T>` is the only core language\n+/// feature to work around this restriction. All other types that allow internal mutability, such as\n+/// `Cell<T>` and `RefCell<T>` use `UnsafeCell` to wrap their internal data.\n ///\n-/// To put it in other words, if a mutable reference to the contents is active, no other references\n-/// can be active at the same time, and if an immutable reference to the contents is active, then\n-/// only other immutable reference may be active.\n+/// The `UnsafeCell` API itself is technically very simple: it gives you a raw pointer `*mut T` to \n+/// its contents. It is up to _you_ as the abstraction designer to use that raw pointer correctly.\n+///\n+/// The precise Rust aliasing rules are somewhat in flux, but the main points are not contentious:\n+///\n+/// - If you create a safe reference with lifetime `'a` (either a `&T` or `&mut T` reference) that\n+/// is accessible by safe code (for example, because you returned it), then you must not access\n+/// the data in any way that contradicts that reference for the remainder of `'a`. For example, that\n+/// means that if you take the `*mut T` from an `UnsafeCell<T>` and case it to an `&T`, then until\n+/// that reference's lifetime expires, the data in `T` must remain immutable (modulo any \n+/// `UnsafeCell` data found within `T`, of course). Similarly, if you create an `&mut T` reference\n+/// that is released to safe code, then you must not access the data within the `UnsafeCell` until\n+/// that reference expires. \n+///\n+/// - At all times, you must avoid data races, meaning that if multiple threads have access to\n+/// the same `UnsafeCell`, then any writes must have a proper happens-before relation to all other \n+/// accesses (or use atomics).\n+///\n+/// To assist with proper design, the following scenarios are explicitly declared legal\n+/// for single-threaded code:\n+///\n+/// 1. A `&T` reference can be released to safe code and there it can co-exit with other `&T`\n+/// references, but not with a `&mut T` \n+///\n+/// 2. A `&mut T` reference may be released to safe code, provided neither other `&mut T` nor `&T`\n+/// co-exist with it. A `&mut T` must always be unique.\n ///\n /// Note that while mutating or mutably aliasing the contents of an `& UnsafeCell<T>` is\n /// okay (provided you enforce the invariants some other way), it is still undefined behavior\n /// to have multiple `&mut UnsafeCell<T>` aliases.\n ///\n-///\n-/// Types like `Cell<T>` and `RefCell<T>` use this type to wrap their internal data.\n-///\n /// # Examples\n ///\n /// ```"}]}