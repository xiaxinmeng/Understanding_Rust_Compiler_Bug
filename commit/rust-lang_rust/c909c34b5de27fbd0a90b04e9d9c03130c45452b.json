{"sha": "c909c34b5de27fbd0a90b04e9d9c03130c45452b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MDljMzRiNWRlMjdmYmQwYTkwYjA0ZTlkOWMwMzEzMGM0NTQ1MmI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T04:29:03Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:29Z"}, "message": "librustc: De-`@mut` the `freevar_map`", "tree": {"sha": "11b7485eda28f48febbe5baef9aae067c3156ecd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11b7485eda28f48febbe5baef9aae067c3156ecd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c909c34b5de27fbd0a90b04e9d9c03130c45452b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c909c34b5de27fbd0a90b04e9d9c03130c45452b", "html_url": "https://github.com/rust-lang/rust/commit/c909c34b5de27fbd0a90b04e9d9c03130c45452b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c909c34b5de27fbd0a90b04e9d9c03130c45452b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb9eade1dfe98301b68b8970a642034e6aa8bbe3", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb9eade1dfe98301b68b8970a642034e6aa8bbe3", "html_url": "https://github.com/rust-lang/rust/commit/eb9eade1dfe98301b68b8970a642034e6aa8bbe3"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "32f4c9858f7062aab9e27fe4ed0df382374943eb", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c909c34b5de27fbd0a90b04e9d9c03130c45452b/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c909c34b5de27fbd0a90b04e9d9c03130c45452b/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=c909c34b5de27fbd0a90b04e9d9c03130c45452b", "patch": "@@ -946,7 +946,8 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n     }\n \n     {\n-        let r = tcx.freevars.find(&id);\n+        let freevars = tcx.freevars.borrow();\n+        let r = freevars.get().find(&id);\n         for &fv in r.iter() {\n             ebml_w.tag(c::tag_table_freevars, |ebml_w| {\n                 ebml_w.id(id);\n@@ -1256,7 +1257,8 @@ fn decode_side_tables(xcx: @ExtendedDecodeContext,\n                         let fv_info = @val_dsr.read_to_vec(|val_dsr| {\n                             @val_dsr.read_freevar_entry(xcx)\n                         });\n-                        dcx.tcx.freevars.insert(id, fv_info);\n+                        let mut freevars = dcx.tcx.freevars.borrow_mut();\n+                        freevars.get().insert(id, fv_info);\n                     }\n                     c::tag_table_tcache => {\n                         let tpbt = val_dsr.read_ty_param_bounds_and_ty(xcx);"}, {"sha": "35ec5d638b7bb9e3ca648666c3681f35d8be9441", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c909c34b5de27fbd0a90b04e9d9c03130c45452b/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c909c34b5de27fbd0a90b04e9d9c03130c45452b/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=c909c34b5de27fbd0a90b04e9d9c03130c45452b", "patch": "@@ -30,7 +30,7 @@ pub struct freevar_entry {\n     span: Span     //< First span where it is accessed (there can be multiple)\n }\n pub type freevar_info = @~[@freevar_entry];\n-pub type freevar_map = @mut HashMap<ast::NodeId, freevar_info>;\n+pub type freevar_map = HashMap<ast::NodeId, freevar_info>;\n \n struct CollectFreevarsVisitor {\n     seen: HashMap<ast::NodeId, ()>,\n@@ -128,21 +128,24 @@ impl Visitor<()> for AnnotateFreevarsVisitor {\n // one pass. This could be improved upon if it turns out to matter.\n pub fn annotate_freevars(def_map: resolve::DefMap, crate: &ast::Crate) ->\n    freevar_map {\n-    let freevars = @mut HashMap::new();\n-\n     let mut visitor = AnnotateFreevarsVisitor {\n         def_map: def_map,\n-        freevars: freevars,\n+        freevars: HashMap::new(),\n     };\n     visit::walk_crate(&mut visitor, crate, ());\n \n-    return freevars;\n+    let AnnotateFreevarsVisitor {\n+        freevars,\n+        ..\n+    } = visitor;\n+    freevars\n }\n \n pub fn get_freevars(tcx: ty::ctxt, fid: ast::NodeId) -> freevar_info {\n-    match tcx.freevars.find(&fid) {\n-      None => fail!(\"get_freevars: {} has no freevars\", fid),\n-      Some(&d) => return d\n+    let freevars = tcx.freevars.borrow();\n+    match freevars.get().find(&fid) {\n+        None => fail!(\"get_freevars: {} has no freevars\", fid),\n+        Some(&d) => return d\n     }\n }\n "}, {"sha": "339eb12bd06c8247506c971605de24dc513183d6", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c909c34b5de27fbd0a90b04e9d9c03130c45452b/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c909c34b5de27fbd0a90b04e9d9c03130c45452b/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c909c34b5de27fbd0a90b04e9d9c03130c45452b", "patch": "@@ -303,7 +303,7 @@ struct ctxt_ {\n     /// also to expr/stmt/local/arg/etc\n     items: ast_map::map,\n     intrinsic_defs: RefCell<HashMap<ast::DefId, t>>,\n-    freevars: freevars::freevar_map,\n+    freevars: RefCell<freevars::freevar_map>,\n     tcache: type_cache,\n     rcache: creader_cache,\n     short_names_cache: RefCell<HashMap<t, @str>>,\n@@ -981,7 +981,7 @@ pub fn mk_ctxt(s: session::Session,\n         trait_defs: RefCell::new(HashMap::new()),\n         items: amap,\n         intrinsic_defs: RefCell::new(HashMap::new()),\n-        freevars: freevars,\n+        freevars: RefCell::new(freevars),\n         tcache: RefCell::new(HashMap::new()),\n         rcache: RefCell::new(HashMap::new()),\n         short_names_cache: RefCell::new(HashMap::new()),"}]}