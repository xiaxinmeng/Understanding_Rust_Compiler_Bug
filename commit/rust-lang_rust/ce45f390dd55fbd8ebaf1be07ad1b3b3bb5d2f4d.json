{"sha": "ce45f390dd55fbd8ebaf1be07ad1b3b3bb5d2f4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNDVmMzkwZGQ1NWZiZDhlYmFmMWJlMDdhZDFiM2IzYmI1ZDJmNGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-07T00:14:54Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-07T00:14:54Z"}, "message": "Remove debug_mem since @graydon said it conflicted with GC changes", "tree": {"sha": "5ac96c81a8f5cc3e78696f545551c77b523a2f9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ac96c81a8f5cc3e78696f545551c77b523a2f9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce45f390dd55fbd8ebaf1be07ad1b3b3bb5d2f4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce45f390dd55fbd8ebaf1be07ad1b3b3bb5d2f4d", "html_url": "https://github.com/rust-lang/rust/commit/ce45f390dd55fbd8ebaf1be07ad1b3b3bb5d2f4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce45f390dd55fbd8ebaf1be07ad1b3b3bb5d2f4d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b32bde408bb6fdf6fcf4e7c2727fff3a31dd8b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b32bde408bb6fdf6fcf4e7c2727fff3a31dd8b1", "html_url": "https://github.com/rust-lang/rust/commit/8b32bde408bb6fdf6fcf4e7c2727fff3a31dd8b1"}], "stats": {"total": 32, "additions": 2, "deletions": 30}, "files": [{"sha": "424cc3483092d0508033a24a33c638581be7d301", "filename": "src/libcore/cleanup.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce45f390dd55fbd8ebaf1be07ad1b3b3bb5d2f4d/src%2Flibcore%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45f390dd55fbd8ebaf1be07ad1b3b3bb5d2f4d/src%2Flibcore%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcleanup.rs?ref=ce45f390dd55fbd8ebaf1be07ad1b3b3bb5d2f4d", "patch": "@@ -167,8 +167,7 @@ fn debug_mem() -> bool {\n #[cfg(notest)]\n #[lang=\"annihilate\"]\n pub unsafe fn annihilate() {\n-    use unstable::lang::{local_free};\n-    use unstable::lang;\n+    use unstable::lang::local_free;\n     use io::WriterUtil;\n     use io;\n     use libc;\n@@ -192,10 +191,8 @@ pub unsafe fn annihilate() {\n     for each_live_alloc(true) |box, uniq| {\n         stats.n_total_boxes += 1;\n         if uniq {\n-            lang::debug_mem(\"Managed-uniq: \", &*box);\n             stats.n_unique_boxes += 1;\n         } else {\n-            lang::debug_mem(\"Immortalizing: \", &*box);\n             (*box).header.ref_count = managed::raw::RC_IMMORTAL;\n         }\n     }\n@@ -207,13 +204,9 @@ pub unsafe fn annihilate() {\n     // callback, as the original value may have been freed.\n     for each_live_alloc(false) |box, uniq| {\n         if !uniq {\n-            lang::debug_mem(\"Invoking tydesc/glue on: \", &*box);\n             let tydesc: *TypeDesc = transmute(copy (*box).header.type_desc);\n             let drop_glue: DropGlue = transmute(((*tydesc).drop_glue, 0));\n-            lang::debug_mem(\"Box data: \", &(*box).data);\n-            lang::debug_mem(\"Type descriptor: \", tydesc);\n             drop_glue(to_unsafe_ptr(&tydesc), transmute(&(*box).data));\n-            lang::debug_mem(\"Dropped \", &*box);\n         }\n     }\n \n@@ -225,7 +218,6 @@ pub unsafe fn annihilate() {\n     // not be valid after.\n     for each_live_alloc(true) |box, uniq| {\n         if !uniq {\n-            lang::debug_mem(\"About to free: \", &*box);\n             stats.n_bytes_freed +=\n                 (*((*box).header.type_desc)).size\n                 + sys::size_of::<BoxRepr>();"}, {"sha": "8153c2d43d99819b9411e99409e988d43ad8c506", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ce45f390dd55fbd8ebaf1be07ad1b3b3bb5d2f4d/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45f390dd55fbd8ebaf1be07ad1b3b3bb5d2f4d/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=ce45f390dd55fbd8ebaf1be07ad1b3b3bb5d2f4d", "patch": "@@ -153,32 +153,13 @@ unsafe fn fail_borrowed(box: *mut BoxRepr, file: *c_char, line: size_t) {\n #[lang=\"exchange_malloc\"]\n #[inline(always)]\n pub unsafe fn exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n-    let result = transmute(exchange_alloc::malloc(transmute(td), transmute(size)));\n-    debug_mem(\"exchange_malloc: \", result);\n-    return result;\n+    transmute(exchange_alloc::malloc(transmute(td), transmute(size)))\n }\n \n /// Because this code is so perf. sensitive, use a static constant so that\n /// debug printouts are compiled out most of the time.\n static ENABLE_DEBUG: bool = false;\n \n-#[inline]\n-pub fn debug_mem<T>(tag: &'static str, p: *const T) {\n-    //! A useful debugging function that prints a pointer + tag + newline\n-    //! without allocating memory.\n-\n-    if ENABLE_DEBUG && ::rt::env::get().debug_mem {\n-        debug_mem_slow(tag, p);\n-    }\n-\n-    fn debug_mem_slow<T>(tag: &'static str, p: *const T) {\n-        let dbg = STDERR_FILENO as io::fd_t;\n-        dbg.write_str(tag);\n-        dbg.write_hex(p as uint);\n-        dbg.write_str(\"\\n\");\n-    }\n-}\n-\n #[inline]\n unsafe fn debug_borrow<T>(tag: &'static str,\n                           p: *const T,\n@@ -252,7 +233,6 @@ impl DebugPrints for io::fd_t {\n #[lang=\"exchange_free\"]\n #[inline(always)]\n pub unsafe fn exchange_free(ptr: *c_char) {\n-    debug_mem(\"exchange_free: \", ptr);\n     exchange_alloc::free(transmute(ptr))\n }\n "}]}