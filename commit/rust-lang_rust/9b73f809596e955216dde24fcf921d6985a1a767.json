{"sha": "9b73f809596e955216dde24fcf921d6985a1a767", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNzNmODA5NTk2ZTk1NTIxNmRkZTI0ZmNmOTIxZDY5ODVhMWE3Njc=", "commit": {"author": {"name": "Sergey Parilin", "email": "Sergey.Parilin@fxdd.com", "date": "2019-04-02T14:52:04Z"}, "committer": {"name": "Sergey Parilin", "email": "Sergey.Parilin@fxdd.com", "date": "2019-04-02T14:52:04Z"}, "message": "PR issuse resolved", "tree": {"sha": "016b82dc06800a174c49a0ba88957df9c91d1906", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/016b82dc06800a174c49a0ba88957df9c91d1906"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b73f809596e955216dde24fcf921d6985a1a767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b73f809596e955216dde24fcf921d6985a1a767", "html_url": "https://github.com/rust-lang/rust/commit/9b73f809596e955216dde24fcf921d6985a1a767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b73f809596e955216dde24fcf921d6985a1a767/comments", "author": null, "committer": null, "parents": [{"sha": "ef02c3c038812897cd96789fa35770e4215d27e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef02c3c038812897cd96789fa35770e4215d27e8", "html_url": "https://github.com/rust-lang/rust/commit/ef02c3c038812897cd96789fa35770e4215d27e8"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "7c07bddf96cad5b45046d501eeaa6fcb107b41f8", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b73f809596e955216dde24fcf921d6985a1a767/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9b73f809596e955216dde24fcf921d6985a1a767/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9b73f809596e955216dde24fcf921d6985a1a767", "patch": "@@ -930,6 +930,7 @@ dependencies = [\n  \"ra_hir 0.1.0\",\n  \"ra_ide_api 0.1.0\",\n  \"ra_ide_api_light 0.1.0\",\n+ \"ra_prof 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"tools 0.1.0\",\n ]\n@@ -969,6 +970,7 @@ dependencies = [\n  \"ra_arena 0.1.0\",\n  \"ra_db 0.1.0\",\n  \"ra_mbe 0.1.0\",\n+ \"ra_prof 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"ra_tt 0.1.0\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1034,6 +1036,7 @@ dependencies = [\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n  \"ra_ide_api 0.1.0\",\n+ \"ra_prof 0.1.0\",\n  \"ra_project_model 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"ra_text_edit 0.1.0\","}, {"sha": "a92a632575d5eba6319729d20636451ac31fe04d", "filename": "crates/ra_cli/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b73f809596e955216dde24fcf921d6985a1a767/crates%2Fra_cli%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9b73f809596e955216dde24fcf921d6985a1a767/crates%2Fra_cli%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2FCargo.toml?ref=9b73f809596e955216dde24fcf921d6985a1a767", "patch": "@@ -19,3 +19,4 @@ tools = { path = \"../tools\" }\n ra_batch = { path = \"../ra_batch\" }\n ra_hir = { path = \"../ra_hir\" }\n ra_db = { path = \"../ra_db\" }\n+ra_prof = { path = \"../ra_prof\" }"}, {"sha": "c13c7910ccbda925c586e66c827806688db680fe", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b73f809596e955216dde24fcf921d6985a1a767/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b73f809596e955216dde24fcf921d6985a1a767/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=9b73f809596e955216dde24fcf921d6985a1a767", "patch": "@@ -1,6 +1,6 @@\n mod analysis_stats;\n \n-use std::{fs, io::Read, path::Path, time::Instant};\n+use std::{fs, io::Read, path::Path};\n \n use clap::{App, Arg, SubCommand};\n use join_to_string::join;\n@@ -9,6 +9,7 @@ use ra_ide_api_light::file_structure;\n use ra_syntax::{SourceFile, TextRange, TreeArc, AstNode};\n use tools::collect_tests;\n use flexi_logger::Logger;\n+use ra_prof::profile;\n \n type Result<T> = ::std::result::Result<T, failure::Error>;\n \n@@ -34,13 +35,11 @@ fn main() -> Result<()> {\n         .get_matches();\n     match matches.subcommand() {\n         (\"parse\", Some(matches)) => {\n-            let start = Instant::now();\n+            let _p = profile(\"parsing\");\n             let file = file()?;\n-            let elapsed = start.elapsed();\n             if !matches.is_present(\"no-dump\") {\n                 println!(\"{}\", file.syntax().debug_dump());\n             }\n-            eprintln!(\"parsing: {:?}\", elapsed);\n             ::std::mem::forget(file);\n         }\n         (\"symbols\", _) => {"}, {"sha": "a2858dad9dd9637836f16545fea63de071e49005", "filename": "crates/ra_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b73f809596e955216dde24fcf921d6985a1a767/crates%2Fra_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9b73f809596e955216dde24fcf921d6985a1a767/crates%2Fra_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2FCargo.toml?ref=9b73f809596e955216dde24fcf921d6985a1a767", "patch": "@@ -19,6 +19,7 @@ ra_db = { path = \"../ra_db\" }\n mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }\n tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n test_utils = { path = \"../test_utils\" }\n+ra_prof = {path = \"../ra_prof\" }\n \n [dev-dependencies]\n flexi_logger = \"0.11.0\""}, {"sha": "5ac878c790e661ed5e14fa34d49816f92fac37e4", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b73f809596e955216dde24fcf921d6985a1a767/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b73f809596e955216dde24fcf921d6985a1a767/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=9b73f809596e955216dde24fcf921d6985a1a767", "patch": "@@ -59,6 +59,7 @@ use rustc_hash::FxHashMap;\n use ra_arena::{Arena, RawId, impl_arena_id};\n use ra_db::{FileId, Edition};\n use test_utils::tested_by;\n+use ra_prof::profile;\n \n use crate::{\n     ModuleDef, Name, Crate, Module, Problem,\n@@ -197,7 +198,7 @@ enum ReachedFixedPoint {\n \n impl CrateDefMap {\n     pub(crate) fn crate_def_map_query(db: &impl DefDatabase, krate: Crate) -> Arc<CrateDefMap> {\n-        let start = std::time::Instant::now();\n+        let _p = profile(\"crate_def_map_query\");\n         let def_map = {\n             let edition = krate.edition(db);\n             let mut modules: Arena<CrateModuleId, ModuleData> = Arena::default();\n@@ -216,7 +217,6 @@ impl CrateDefMap {\n             }\n         };\n         let def_map = collector::collect_defs(db, def_map);\n-        log::info!(\"crate_def_map_query: {:?}\", start.elapsed());\n         Arc::new(def_map)\n     }\n "}, {"sha": "bc181e4eb6b67889454fce49b06825582fe68b9f", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b73f809596e955216dde24fcf921d6985a1a767/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9b73f809596e955216dde24fcf921d6985a1a767/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=9b73f809596e955216dde24fcf921d6985a1a767", "patch": "@@ -27,6 +27,7 @@ ra_ide_api = { path = \"../ra_ide_api\" }\n ra_arena = { path = \"../ra_arena\" }\n gen_lsp_server = { path = \"../gen_lsp_server\" }\n ra_project_model = { path = \"../ra_project_model\" }\n+ra_prof = { path = \"../ra_prof\" }\n \n [dev-dependencies]\n tempfile = \"3\""}, {"sha": "eb4091a3d85525910f4e15a5b8ed9fde2cf61438", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b73f809596e955216dde24fcf921d6985a1a767/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b73f809596e955216dde24fcf921d6985a1a767/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=9b73f809596e955216dde24fcf921d6985a1a767", "patch": "@@ -3,6 +3,7 @@ use flexi_logger::{Duplicate, Logger};\n use gen_lsp_server::{run_server, stdio_transport};\n \n use ra_lsp_server::{Result, InitializationOptions};\n+use ra_prof;\n \n fn main() -> Result<()> {\n     ::std::env::set_var(\"RUST_BACKTRACE\", \"short\");\n@@ -11,6 +12,15 @@ fn main() -> Result<()> {\n         Ok(ref v) if v == \"1\" => logger.log_to_file().directory(\"log\").start()?,\n         _ => logger.start()?,\n     };\n+    let prof_depth = match ::std::env::var(\"RA_PROFILE_DEPTH\") {\n+        Ok(ref d) => d.parse()?,\n+        _ => 0,\n+    };\n+    let profile_allowed = match ::std::env::var(\"RA_PROFILE\") {\n+        Ok(ref p) => p.split(\";\").map(String::from).collect(),\n+        _ => Vec::new(),\n+    };\n+    ra_prof::set_filter(ra_prof::Filter::new(prof_depth, profile_allowed));\n     log::info!(\"lifecycle: server started\");\n     match ::std::panic::catch_unwind(main_inner) {\n         Ok(res) => {"}, {"sha": "82410bee30e2c47882f1d17ac66cf031334adc2d", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b73f809596e955216dde24fcf921d6985a1a767/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b73f809596e955216dde24fcf921d6985a1a767/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=9b73f809596e955216dde24fcf921d6985a1a767", "patch": "@@ -24,6 +24,7 @@ use crate::{\n     Result,\n     InitializationOptions,\n };\n+use ra_prof::profile;\n \n #[derive(Debug, Fail)]\n #[fail(display = \"Language Server request failed with {}. ({})\", code, message)]\n@@ -181,7 +182,7 @@ fn main_loop_inner(\n             recv(libdata_receiver) -> data => Event::Lib(data.unwrap())\n         };\n         log::info!(\"loop_turn = {:?}\", event);\n-        let start = std::time::Instant::now();\n+        let _p = profile(\"loop_turn\");\n         let mut state_changed = false;\n         match event {\n             Event::Task(task) => on_task(task, msg_sender, pending_requests),\n@@ -235,10 +236,9 @@ fn main_loop_inner(\n             in_flight_libraries += 1;\n             let sender = libdata_sender.clone();\n             pool.execute(move || {\n-                let start = ::std::time::Instant::now();\n                 log::info!(\"indexing {:?} ... \", root);\n+                let _p = profile(&format!(\"indexed {:?}\", root));\n                 let data = LibraryData::prepare(root, files);\n-                log::info!(\"indexed {:?} {:?}\", start.elapsed(), root);\n                 sender.send(data).unwrap();\n             });\n         }\n@@ -266,7 +266,6 @@ fn main_loop_inner(\n                 subs.subscriptions(),\n             )\n         }\n-        log::info!(\"loop_turn = {:?}\", start.elapsed());\n     }\n }\n "}, {"sha": "abddff960addd7ab673027ade7c95e4e7a405ef3", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b73f809596e955216dde24fcf921d6985a1a767/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b73f809596e955216dde24fcf921d6985a1a767/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=9b73f809596e955216dde24fcf921d6985a1a767", "patch": "@@ -52,6 +52,12 @@ pub struct Filter {\n     allowed: Vec<String>,\n }\n \n+impl Filter {\n+    pub fn new(depth: usize, allowed: Vec<String>) -> Filter {\n+        Filter { depth, allowed }\n+    }\n+}\n+\n struct ProfileStack {\n     starts: Vec<Instant>,\n     messages: Vec<Message>,"}]}