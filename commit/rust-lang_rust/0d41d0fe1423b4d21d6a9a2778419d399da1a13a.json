{"sha": "0d41d0fe1423b4d21d6a9a2778419d399da1a13a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNDFkMGZlMTQyM2I0ZDIxZDZhOWEyNzc4NDE5ZDM5OWRhMWExM2E=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-02T01:38:33Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-12T17:01:33Z"}, "message": "Move `allow_c_varadic` logic to `ast_validation`.", "tree": {"sha": "74d69c76ee9f7e2d9783498beece9c9307811783", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74d69c76ee9f7e2d9783498beece9c9307811783"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d41d0fe1423b4d21d6a9a2778419d399da1a13a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d41d0fe1423b4d21d6a9a2778419d399da1a13a", "html_url": "https://github.com/rust-lang/rust/commit/0d41d0fe1423b4d21d6a9a2778419d399da1a13a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d41d0fe1423b4d21d6a9a2778419d399da1a13a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "html_url": "https://github.com/rust-lang/rust/commit/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8"}], "stats": {"total": 182, "additions": 119, "deletions": 63}, "files": [{"sha": "d4b62e8ebba6bcbd2f50d9723486f41e2b3eecbb", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0d41d0fe1423b4d21d6a9a2778419d399da1a13a/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d41d0fe1423b4d21d6a9a2778419d399da1a13a/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=0d41d0fe1423b4d21d6a9a2778419d399da1a13a", "patch": "@@ -1727,8 +1727,6 @@ impl<'a> Parser<'a> {\n pub(super) struct ParamCfg {\n     /// Is `self` is allowed as the first parameter?\n     pub is_self_allowed: bool,\n-    /// Is `...` allowed as the tail of the parameter list?\n-    pub allow_c_variadic: bool,\n     /// `is_name_required` decides if, per-parameter,\n     /// the parameter must have a pattern or just a type.\n     pub is_name_required: fn(&token::Token) -> bool,\n@@ -1744,16 +1742,8 @@ impl<'a> Parser<'a> {\n         attrs: Vec<Attribute>,\n         header: FnHeader,\n     ) -> PResult<'a, Option<P<Item>>> {\n-        let is_c_abi = match header.ext {\n-            ast::Extern::None => false,\n-            ast::Extern::Implicit => true,\n-            ast::Extern::Explicit(abi) => abi.symbol_unescaped == sym::C,\n-        };\n         let (ident, decl, generics) = self.parse_fn_sig(ParamCfg {\n             is_self_allowed: false,\n-            // FIXME: Parsing should not depend on ABI or unsafety and\n-            // the variadic parameter should always be parsed.\n-            allow_c_variadic: is_c_abi && header.unsafety == Unsafety::Unsafe,\n             is_name_required: |_| true,\n         })?;\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n@@ -1772,7 +1762,6 @@ impl<'a> Parser<'a> {\n         self.expect_keyword(kw::Fn)?;\n         let (ident, decl, generics) = self.parse_fn_sig(ParamCfg {\n             is_self_allowed: false,\n-            allow_c_variadic: true,\n             is_name_required: |_| true,\n         })?;\n         let span = lo.to(self.token.span);\n@@ -1797,7 +1786,6 @@ impl<'a> Parser<'a> {\n         let header = self.parse_fn_front_matter()?;\n         let (ident, decl, generics) = self.parse_fn_sig(ParamCfg {\n             is_self_allowed: true,\n-            allow_c_variadic: false,\n             is_name_required,\n         })?;\n         let sig = FnSig { header, decl };\n@@ -1993,12 +1981,12 @@ impl<'a> Parser<'a> {\n             }\n \n             self.eat_incorrect_doc_comment_for_param_type();\n-            (pat, self.parse_ty_for_param(cfg.allow_c_variadic)?)\n+            (pat, self.parse_ty_for_param()?)\n         } else {\n             debug!(\"parse_param_general ident_to_pat\");\n             let parser_snapshot_before_ty = self.clone();\n             self.eat_incorrect_doc_comment_for_param_type();\n-            let mut ty = self.parse_ty_for_param(cfg.allow_c_variadic);\n+            let mut ty = self.parse_ty_for_param();\n             if ty.is_ok() && self.token != token::Comma &&\n                self.token != token::CloseDelim(token::Paren) {\n                 // This wasn't actually a type, but a pattern looking like a type,"}, {"sha": "3ab290d1cbbc5a594b8b40f3238ac2acdd7719b6", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d41d0fe1423b4d21d6a9a2778419d399da1a13a/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d41d0fe1423b4d21d6a9a2778419d399da1a13a/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=0d41d0fe1423b4d21d6a9a2778419d399da1a13a", "patch": "@@ -33,8 +33,8 @@ impl<'a> Parser<'a> {\n     /// Parse a type suitable for a function or function pointer parameter.\n     /// The difference from `parse_ty` is that this version allows `...`\n     /// (`CVarArgs`) at the top level of the the type.\n-    pub(super) fn parse_ty_for_param(&mut self, allow_c_variadic: bool) -> PResult<'a, P<Ty>> {\n-        self.parse_ty_common(true, true, allow_c_variadic)\n+    pub(super) fn parse_ty_for_param(&mut self) -> PResult<'a, P<Ty>> {\n+        self.parse_ty_common(true, true, true)\n     }\n \n     /// Parses a type in restricted contexts where `+` is not permitted.\n@@ -306,7 +306,6 @@ impl<'a> Parser<'a> {\n         self.expect_keyword(kw::Fn)?;\n         let cfg = ParamCfg {\n             is_self_allowed: false,\n-            allow_c_variadic: true,\n             is_name_required: |_| false,\n         };\n         let decl = self.parse_fn_decl(cfg, false)?;"}, {"sha": "a26c991c9cfb25f81975f7162442e9700b5e55ee", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0d41d0fe1423b4d21d6a9a2778419d399da1a13a/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d41d0fe1423b4d21d6a9a2778419d399da1a13a/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=0d41d0fe1423b4d21d6a9a2778419d399da1a13a", "patch": "@@ -306,6 +306,19 @@ impl<'a> AstValidator<'a> {\n             .struct_span_err(span, \"bounds on associated `type`s in `impl`s have no effect\")\n             .emit();\n     }\n+\n+    fn check_c_varadic_type(&self, decl: &FnDecl) {\n+        for Param { ty, span, .. } in &decl.inputs {\n+            if let TyKind::CVarArgs = ty.kind {\n+                self.err_handler()\n+                    .struct_span_err(\n+                        *span,\n+                        \"only foreign or `unsafe extern \\\"C\\\" functions may be C-variadic\",\n+                    )\n+                    .emit();\n+            }\n+        }\n+    }\n }\n \n enum GenericPosition {\n@@ -554,6 +567,12 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         }\n                     }\n                 }\n+                // Reject C-varadic type unless the function is `unsafe extern \"C\"` semantically.\n+                match sig.header.ext {\n+                    Extern::Explicit(StrLit { symbol_unescaped: sym::C, .. }) |\n+                    Extern::Implicit if sig.header.unsafety == Unsafety::Unsafe => {}\n+                    _ => self.check_c_varadic_type(&sig.decl),\n+                }\n             }\n             ItemKind::ForeignMod(..) => {\n                 self.invalid_visibility(\n@@ -795,6 +814,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         self.check_defaultness(ti.span, ti.defaultness);\n         visit::walk_trait_item(self, ti);\n     }\n+\n+    fn visit_assoc_item(&mut self, item: &'a AssocItem) {\n+        if let AssocItemKind::Method(sig, _) = &item.kind {\n+            self.check_c_varadic_type(&sig.decl);\n+        }\n+        visit::walk_assoc_item(self, item);\n+    }\n }\n \n pub fn check_crate(session: &Session, krate: &Crate, lints: &mut lint::LintBuffer) -> bool {"}, {"sha": "8d23f0e477077676cb2e2b4773f8d8a98bc5d22a", "filename": "src/test/ui/invalid/invalid-variadic-function.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Ftest%2Fui%2Finvalid%2Finvalid-variadic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Ftest%2Fui%2Finvalid%2Finvalid-variadic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-variadic-function.rs?ref=b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "patch": "@@ -1,3 +0,0 @@\n-extern \"C\" fn foo(x: u8, ...);\n-//~^ ERROR only foreign functions are allowed to be C-variadic\n-//~| ERROR expected one of `->`, `where`, or `{`, found `;`"}, {"sha": "7e58b17e7db749af5fc0eec1b217c73ce011a89d", "filename": "src/test/ui/invalid/invalid-variadic-function.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Ftest%2Fui%2Finvalid%2Finvalid-variadic-function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Ftest%2Fui%2Finvalid%2Finvalid-variadic-function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-variadic-function.stderr?ref=b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "patch": "@@ -1,15 +0,0 @@\n-error[E0743]: only foreign functions are allowed to be C-variadic\n-  --> $DIR/invalid-variadic-function.rs:1:26\n-   |\n-LL | extern \"C\" fn foo(x: u8, ...);\n-   |                          ^^^\n-\n-error: expected one of `->`, `where`, or `{`, found `;`\n-  --> $DIR/invalid-variadic-function.rs:1:30\n-   |\n-LL | extern \"C\" fn foo(x: u8, ...);\n-   |                              ^ expected one of `->`, `where`, or `{`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0743`."}, {"sha": "ce83cc87abe00f937b45e97d4d4c60a6a29a62d3", "filename": "src/test/ui/parser/variadic-ffi-3.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-3.rs?ref=b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "patch": "@@ -1,5 +0,0 @@\n-fn foo(x: isize, ...) {\n-    //~^ ERROR: only foreign functions are allowed to be C-variadic\n-}\n-\n-fn main() {}"}, {"sha": "aeeebdb991483ddcb68249df2f32ee1317431b39", "filename": "src/test/ui/parser/variadic-ffi-3.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-3.stderr?ref=b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "patch": "@@ -1,9 +0,0 @@\n-error[E0743]: only foreign functions are allowed to be C-variadic\n-  --> $DIR/variadic-ffi-3.rs:1:18\n-   |\n-LL | fn foo(x: isize, ...) {\n-   |                  ^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0743`."}, {"sha": "5f8b3f8f539b8df463f457d8ae7ac8724bdc84ed", "filename": "src/test/ui/parser/variadic-ffi-4.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-4.rs?ref=b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "patch": "@@ -1,5 +0,0 @@\n-extern \"C\" fn foo(x: isize, ...) {\n-    //~^ ERROR: only foreign functions are allowed to be C-variadic\n-}\n-\n-fn main() {}"}, {"sha": "da83276c72dd109f682c5224a20a23e5e64754d9", "filename": "src/test/ui/parser/variadic-ffi-4.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b499a88dfc484f077ec7264bd7fae7d7c60d9fb8/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-4.stderr?ref=b499a88dfc484f077ec7264bd7fae7d7c60d9fb8", "patch": "@@ -1,9 +0,0 @@\n-error[E0743]: only foreign functions are allowed to be C-variadic\n-  --> $DIR/variadic-ffi-4.rs:1:29\n-   |\n-LL | extern \"C\" fn foo(x: isize, ...) {\n-   |                             ^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0743`."}, {"sha": "57086bca2f42868aaa3556692c3c07bfed2f7440", "filename": "src/test/ui/parser/variadic-ffi-semantic-restrictions.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0d41d0fe1423b4d21d6a9a2778419d399da1a13a/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d41d0fe1423b4d21d6a9a2778419d399da1a13a/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.rs?ref=0d41d0fe1423b4d21d6a9a2778419d399da1a13a", "patch": "@@ -0,0 +1,26 @@\n+#![feature(c_variadic)]\n+\n+fn main() {}\n+\n+fn f1(x: isize, ...) {}\n+//~^ ERROR: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+\n+extern \"C\" fn f2(x: isize, ...) {}\n+//~^ ERROR: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+\n+extern fn f3(x: isize, ...) {}\n+//~^ ERROR: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+\n+struct X;\n+\n+impl X {\n+    fn f4(x: isize, ...) {}\n+    //~^ ERROR: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+}\n+\n+trait T {\n+    fn f5(x: isize, ...) {}\n+    //~^ ERROR: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+    fn f6(x: isize, ...);\n+    //~^ ERROR: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+}"}, {"sha": "69244d92ee3920cc8842069769a63826dc452d6f", "filename": "src/test/ui/parser/variadic-ffi-semantic-restrictions.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0d41d0fe1423b4d21d6a9a2778419d399da1a13a/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d41d0fe1423b4d21d6a9a2778419d399da1a13a/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.stderr?ref=0d41d0fe1423b4d21d6a9a2778419d399da1a13a", "patch": "@@ -0,0 +1,38 @@\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:5:17\n+   |\n+LL | fn f1(x: isize, ...) {}\n+   |                 ^^^^\n+\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:8:28\n+   |\n+LL | extern \"C\" fn f2(x: isize, ...) {}\n+   |                            ^^^^\n+\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:11:24\n+   |\n+LL | extern fn f3(x: isize, ...) {}\n+   |                        ^^^^\n+\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:17:21\n+   |\n+LL |     fn f4(x: isize, ...) {}\n+   |                     ^^^^\n+\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:22:21\n+   |\n+LL |     fn f5(x: isize, ...) {}\n+   |                     ^^^^\n+\n+error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:24:21\n+   |\n+LL |     fn f6(x: isize, ...);\n+   |                     ^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "f8fcce6ba73f5a4ef677caa6bc91f3b3d0294e98", "filename": "src/test/ui/parser/variadic-ffi-syntactic-pass.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0d41d0fe1423b4d21d6a9a2778419d399da1a13a/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d41d0fe1423b4d21d6a9a2778419d399da1a13a/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-syntactic-pass.rs?ref=0d41d0fe1423b4d21d6a9a2778419d399da1a13a", "patch": "@@ -0,0 +1,25 @@\n+// check-pass\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+fn f1(x: isize, ...) {}\n+\n+#[cfg(FALSE)]\n+extern \"C\" fn f2(x: isize, ...) {}\n+\n+#[cfg(FALSE)]\n+extern fn f3(x: isize, ...) {}\n+\n+struct X;\n+\n+#[cfg(FALSE)]\n+impl X {\n+    fn f4(x: isize, ...) {}\n+}\n+\n+#[cfg(FALSE)]\n+trait T {\n+    fn f5(x: isize, ...) {}\n+    fn f6(x: isize, ...);\n+}"}]}