{"sha": "9fed36055070168e5238d6bf6e58a36f519fe427", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZWQzNjA1NTA3MDE2OGU1MjM4ZDZiZjZlNThhMzZmNTE5ZmU0Mjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-12T21:48:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-12T21:48:24Z"}, "message": "Auto merge of #71079 - Dylan-DPC:rollup-g7yh3sn, r=Dylan-DPC\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #67766 (Fix warning for unused variables in or pattern (issue #67691))\n - #71013 (Pass the `PlaceElem::Index` local to `visit_local`)\n - #71064 (fix issue 69130)\n - #71069 (Remove some usage of `DUMMY_HIR_ID`)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "490e55838be3c4593b0528952e6fd9699d7ee961", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/490e55838be3c4593b0528952e6fd9699d7ee961"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fed36055070168e5238d6bf6e58a36f519fe427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fed36055070168e5238d6bf6e58a36f519fe427", "html_url": "https://github.com/rust-lang/rust/commit/9fed36055070168e5238d6bf6e58a36f519fe427", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fed36055070168e5238d6bf6e58a36f519fe427/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3712e11a828af2eea273a3e7300115e65833fbc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3712e11a828af2eea273a3e7300115e65833fbc5", "html_url": "https://github.com/rust-lang/rust/commit/3712e11a828af2eea273a3e7300115e65833fbc5"}, {"sha": "69862b74fab2a24230a9157c988bad50d8538fda", "url": "https://api.github.com/repos/rust-lang/rust/commits/69862b74fab2a24230a9157c988bad50d8538fda", "html_url": "https://github.com/rust-lang/rust/commit/69862b74fab2a24230a9157c988bad50d8538fda"}], "stats": {"total": 492, "additions": 328, "deletions": 164}, "files": [{"sha": "151241fdb0b5f6cd5d85b3d44df0bcebd2e1ba8a", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -231,7 +231,10 @@ impl CodeSuggestion {\n                             }\n                         }\n                         if let Some(cur_line) = sf.get_line(cur_lo.line - 1) {\n-                            let end = std::cmp::min(cur_line.len(), cur_lo.col.to_usize());\n+                            let end = match cur_line.char_indices().nth(cur_lo.col.to_usize()) {\n+                                Some((i, _)) => i,\n+                                None => cur_line.len(),\n+                            };\n                             buf.push_str(&cur_line[..end]);\n                         }\n                     }"}, {"sha": "db81ceea43f01329ce2e65fe56de5b7c1680276c", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -93,7 +93,8 @@ pub(super) fn note_and_explain_region(\n             let unknown_scope =\n                 || format!(\"{}unknown scope: {:?}{}.  Please report a bug.\", prefix, scope, suffix);\n             let span = scope.span(tcx, region_scope_tree);\n-            let tag = match tcx.hir().find(scope.hir_id(region_scope_tree)) {\n+            let hir_id = scope.hir_id(region_scope_tree);\n+            let tag = match hir_id.and_then(|hir_id| tcx.hir().find(hir_id)) {\n                 Some(Node::Block(_)) => \"block\",\n                 Some(Node::Expr(expr)) => match expr.kind {\n                     hir::ExprKind::Call(..) => \"call\","}, {"sha": "2ad6fe14ec716fbfb1474b95541b2d6985044ef5", "filename": "src/librustc_middle/middle/region.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_middle%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_middle%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fregion.rs?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -159,21 +159,20 @@ impl Scope {\n         self.id\n     }\n \n-    pub fn hir_id(&self, scope_tree: &ScopeTree) -> hir::HirId {\n-        match scope_tree.root_body {\n-            Some(hir_id) => hir::HirId { owner: hir_id.owner, local_id: self.item_local_id() },\n-            None => hir::DUMMY_HIR_ID,\n-        }\n+    pub fn hir_id(&self, scope_tree: &ScopeTree) -> Option<hir::HirId> {\n+        scope_tree\n+            .root_body\n+            .map(|hir_id| hir::HirId { owner: hir_id.owner, local_id: self.item_local_id() })\n     }\n \n     /// Returns the span of this `Scope`. Note that in general the\n     /// returned span may not correspond to the span of any `NodeId` in\n     /// the AST.\n     pub fn span(&self, tcx: TyCtxt<'_>, scope_tree: &ScopeTree) -> Span {\n-        let hir_id = self.hir_id(scope_tree);\n-        if hir_id == hir::DUMMY_HIR_ID {\n-            return DUMMY_SP;\n-        }\n+        let hir_id = match self.hir_id(scope_tree) {\n+            Some(hir_id) => hir_id,\n+            None => return DUMMY_SP,\n+        };\n         let span = tcx.hir().span(hir_id);\n         if let ScopeData::Remainder(first_statement_index) = self.data {\n             if let Node::Block(ref blk) = tcx.hir().get(hir_id) {"}, {"sha": "5c33db299ae8575939a27331c71d2579fb90cd6c", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 33, "deletions": 26, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -838,7 +838,7 @@ macro_rules! make_mir_visitor {\n }\n \n macro_rules! visit_place_fns {\n-    (mut) => (\n+    (mut) => {\n         fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n \n         fn super_place(\n@@ -849,20 +849,21 @@ macro_rules! visit_place_fns {\n         ) {\n             self.visit_place_base(&mut place.local, context, location);\n \n-            if let Some(new_projection) = self.process_projection(&place.projection) {\n+            if let Some(new_projection) = self.process_projection(&place.projection, location) {\n                 place.projection = self.tcx().intern_place_elems(&new_projection);\n             }\n         }\n \n         fn process_projection(\n             &mut self,\n             projection: &'a [PlaceElem<'tcx>],\n+            location: Location,\n         ) -> Option<Vec<PlaceElem<'tcx>>> {\n             let mut projection = Cow::Borrowed(projection);\n \n             for i in 0..projection.len() {\n                 if let Some(elem) = projection.get(i) {\n-                    if let Some(elem) = self.process_projection_elem(elem) {\n+                    if let Some(elem) = self.process_projection_elem(elem, location) {\n                         // This converts the borrowed projection into `Cow::Owned(_)` and returns a\n                         // clone of the projection so we can mutate and reintern later.\n                         let vec = projection.to_mut();\n@@ -879,13 +880,30 @@ macro_rules! visit_place_fns {\n \n         fn process_projection_elem(\n             &mut self,\n-            _elem: &PlaceElem<'tcx>,\n+            elem: &PlaceElem<'tcx>,\n+            location: Location,\n         ) -> Option<PlaceElem<'tcx>> {\n-            None\n+            match elem {\n+                PlaceElem::Index(local) => {\n+                    let mut new_local = *local;\n+                    self.visit_local(\n+                        &mut new_local,\n+                        PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n+                        location,\n+                    );\n+\n+                    if new_local == *local { None } else { Some(PlaceElem::Index(new_local)) }\n+                }\n+                PlaceElem::Deref\n+                | PlaceElem::Field(..)\n+                | PlaceElem::ConstantIndex { .. }\n+                | PlaceElem::Subslice { .. }\n+                | PlaceElem::Downcast(..) => None,\n+            }\n         }\n-    );\n+    };\n \n-    () => (\n+    () => {\n         fn visit_projection(\n             &mut self,\n             local: Local,\n@@ -907,12 +925,7 @@ macro_rules! visit_place_fns {\n             self.super_projection_elem(local, proj_base, elem, context, location);\n         }\n \n-        fn super_place(\n-            &mut self,\n-            place: &Place<'tcx>,\n-            context: PlaceContext,\n-            location: Location,\n-        ) {\n+        fn super_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {\n             let mut context = context;\n \n             if !place.projection.is_empty() {\n@@ -925,10 +938,7 @@ macro_rules! visit_place_fns {\n \n             self.visit_place_base(&place.local, context, location);\n \n-            self.visit_projection(place.local,\n-                                  &place.projection,\n-                                  context,\n-                                  location);\n+            self.visit_projection(place.local, &place.projection, context, location);\n         }\n \n         fn super_projection(\n@@ -961,19 +971,16 @@ macro_rules! visit_place_fns {\n                     self.visit_local(\n                         local,\n                         PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n-                        location\n+                        location,\n                     );\n                 }\n-                ProjectionElem::Deref |\n-                ProjectionElem::Subslice { from: _, to: _, from_end: _ } |\n-                ProjectionElem::ConstantIndex { offset: _,\n-                                                min_length: _,\n-                                                from_end: _ } |\n-                ProjectionElem::Downcast(_, _) => {\n-                }\n+                ProjectionElem::Deref\n+                | ProjectionElem::Subslice { from: _, to: _, from_end: _ }\n+                | ProjectionElem::ConstantIndex { offset: _, min_length: _, from_end: _ }\n+                | ProjectionElem::Downcast(_, _) => {}\n             }\n         }\n-    );\n+    };\n }\n \n make_mir_visitor!(Visitor,);"}, {"sha": "a6b4aa74977224b115cc4b1e40e2c0e7807c0921", "filename": "src/librustc_mir/borrow_check/renumber.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_mir%2Fborrow_check%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_mir%2Fborrow_check%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Frenumber.rs?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -64,7 +64,11 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {\n         debug!(\"visit_ty: ty={:?}\", ty);\n     }\n \n-    fn process_projection_elem(&mut self, elem: &PlaceElem<'tcx>) -> Option<PlaceElem<'tcx>> {\n+    fn process_projection_elem(\n+        &mut self,\n+        elem: &PlaceElem<'tcx>,\n+        _: Location,\n+    ) -> Option<PlaceElem<'tcx>> {\n         if let PlaceElem::Field(field, ty) = elem {\n             let new_ty = self.renumber_regions(ty);\n "}, {"sha": "449289510452681e4153c01c13023de10d568e82", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -89,13 +89,6 @@ impl<'tcx> MutVisitor<'tcx> for RenameLocalVisitor<'tcx> {\n             *local = self.to;\n         }\n     }\n-\n-    fn process_projection_elem(&mut self, elem: &PlaceElem<'tcx>) -> Option<PlaceElem<'tcx>> {\n-        match elem {\n-            PlaceElem::Index(local) if *local == self.from => Some(PlaceElem::Index(self.to)),\n-            _ => None,\n-        }\n-    }\n }\n \n struct DerefArgVisitor<'tcx> {"}, {"sha": "8121d4ead13943dfd5c0fc543cc2ff661802d765", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -706,18 +706,6 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n         self.super_place(place, context, location)\n     }\n \n-    fn process_projection_elem(&mut self, elem: &PlaceElem<'tcx>) -> Option<PlaceElem<'tcx>> {\n-        if let PlaceElem::Index(local) = elem {\n-            let new_local = self.make_integrate_local(*local);\n-\n-            if new_local != *local {\n-                return Some(PlaceElem::Index(new_local));\n-            }\n-        }\n-\n-        None\n-    }\n-\n     fn visit_basic_block_data(&mut self, block: BasicBlock, data: &mut BasicBlockData<'tcx>) {\n         self.in_cleanup_block = data.is_cleanup;\n         self.super_basic_block_data(block, data);"}, {"sha": "9579fe1f405ba4368d790fc84ed131b124a5811d", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -1036,15 +1036,6 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n             *local = self.promote_temp(*local);\n         }\n     }\n-\n-    fn process_projection_elem(&mut self, elem: &PlaceElem<'tcx>) -> Option<PlaceElem<'tcx>> {\n-        match elem {\n-            PlaceElem::Index(local) if self.is_temp_kind(*local) => {\n-                Some(PlaceElem::Index(self.promote_temp(*local)))\n-            }\n-            _ => None,\n-        }\n-    }\n }\n \n pub fn promote_candidates<'tcx>("}, {"sha": "c0da2c446d65fa30c81654a392f7aa2c82b85d35", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -417,11 +417,4 @@ impl<'tcx> MutVisitor<'tcx> for LocalUpdater<'tcx> {\n     fn visit_local(&mut self, l: &mut Local, _: PlaceContext, _: Location) {\n         *l = self.map[*l].unwrap();\n     }\n-\n-    fn process_projection_elem(&mut self, elem: &PlaceElem<'tcx>) -> Option<PlaceElem<'tcx>> {\n-        match elem {\n-            PlaceElem::Index(local) => Some(PlaceElem::Index(self.map[*local].unwrap())),\n-            _ => None,\n-        }\n-    }\n }"}, {"sha": "0ac743359be96e2c91efbf06c25bd3fa6f718e7b", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -2,9 +2,7 @@\n \n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::{MutVisitor, PlaceContext, Visitor};\n-use rustc_middle::mir::{\n-    Body, BodyAndCache, Local, Location, PlaceElem, ReadOnlyBodyAndCache, VarDebugInfo,\n-};\n+use rustc_middle::mir::{Body, BodyAndCache, Local, Location, ReadOnlyBodyAndCache, VarDebugInfo};\n use rustc_middle::ty::TyCtxt;\n use std::mem;\n \n@@ -157,13 +155,4 @@ impl MutVisitor<'tcx> for MutateUseVisitor<'tcx> {\n             *local = self.new_local;\n         }\n     }\n-\n-    fn process_projection_elem(&mut self, elem: &PlaceElem<'tcx>) -> Option<PlaceElem<'tcx>> {\n-        match elem {\n-            PlaceElem::Index(local) if *local == self.query => {\n-                Some(PlaceElem::Index(self.new_local))\n-            }\n-            _ => None,\n-        }\n-    }\n }"}, {"sha": "6c9d25cfaa54b850503f14f853611b170a46248e", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -14,7 +14,6 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::DUMMY_HIR_ID;\n use rustc_hir::{self, HirId, Item, ItemKind, TraitItem};\n use rustc_hir::{MethodKind, Target};\n use rustc_session::lint::builtin::{CONFLICTING_REPR_HINTS, UNUSED_ATTRIBUTES};\n@@ -360,7 +359,7 @@ impl CheckAttrVisitor<'tcx> {\n         if let hir::StmtKind::Local(ref l) = stmt.kind {\n             for attr in l.attrs.iter() {\n                 if attr.check_name(sym::inline) {\n-                    self.check_inline(DUMMY_HIR_ID, attr, &stmt.span, Target::Statement);\n+                    self.check_inline(l.hir_id, attr, &stmt.span, Target::Statement);\n                 }\n                 if attr.check_name(sym::repr) {\n                     self.emit_repr_error(\n@@ -381,7 +380,7 @@ impl CheckAttrVisitor<'tcx> {\n         };\n         for attr in expr.attrs.iter() {\n             if attr.check_name(sym::inline) {\n-                self.check_inline(DUMMY_HIR_ID, attr, &expr.span, target);\n+                self.check_inline(expr.hir_id, attr, &expr.span, target);\n             }\n             if attr.check_name(sym::repr) {\n                 self.emit_repr_error("}, {"sha": "24f6d1a9c58941c4bee3a40abf7a4071d9f0420d", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 49, "deletions": 26, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -1492,28 +1492,33 @@ impl<'tcx> Liveness<'_, 'tcx> {\n     ) {\n         // In an or-pattern, only consider the variable; any later patterns must have the same\n         // bindings, and we also consider the first pattern to be the \"authoritative\" set of ids.\n-        // However, we should take the spans of variables with the same name from the later\n+        // However, we should take the ids and spans of variables with the same name from the later\n         // patterns so the suggestions to prefix with underscores will apply to those too.\n-        let mut vars: FxIndexMap<String, (LiveNode, Variable, HirId, Vec<Span>)> = <_>::default();\n+        let mut vars: FxIndexMap<String, (LiveNode, Variable, Vec<(HirId, Span)>)> = <_>::default();\n \n         pat.each_binding(|_, hir_id, pat_sp, ident| {\n             let ln = entry_ln.unwrap_or_else(|| self.live_node(hir_id, pat_sp));\n             let var = self.variable(hir_id, ident.span);\n+            let id_and_sp = (hir_id, pat_sp);\n             vars.entry(self.ir.variable_name(var))\n-                .and_modify(|(.., spans)| spans.push(ident.span))\n-                .or_insert_with(|| (ln, var, hir_id, vec![ident.span]));\n+                .and_modify(|(.., hir_ids_and_spans)| hir_ids_and_spans.push(id_and_sp))\n+                .or_insert_with(|| (ln, var, vec![id_and_sp]));\n         });\n \n-        for (_, (ln, var, id, spans)) in vars {\n+        for (_, (ln, var, hir_ids_and_spans)) in vars {\n             if self.used_on_entry(ln, var) {\n+                let id = hir_ids_and_spans[0].0;\n+                let spans = hir_ids_and_spans.into_iter().map(|(_, sp)| sp).collect();\n                 on_used_on_entry(spans, id, ln, var);\n             } else {\n-                self.report_unused(spans, id, ln, var);\n+                self.report_unused(hir_ids_and_spans, ln, var);\n             }\n         }\n     }\n \n-    fn report_unused(&self, spans: Vec<Span>, hir_id: HirId, ln: LiveNode, var: Variable) {\n+    fn report_unused(&self, hir_ids_and_spans: Vec<(HirId, Span)>, ln: LiveNode, var: Variable) {\n+        let first_hir_id = hir_ids_and_spans[0].0;\n+\n         if let Some(name) = self.should_warn(var).filter(|name| name != \"self\") {\n             // annoying: for parameters in funcs like `fn(x: i32)\n             // {ret}`, there is only one node, so asking about\n@@ -1524,8 +1529,8 @@ impl<'tcx> Liveness<'_, 'tcx> {\n             if is_assigned {\n                 self.ir.tcx.struct_span_lint_hir(\n                     lint::builtin::UNUSED_VARIABLES,\n-                    hir_id,\n-                    spans,\n+                    first_hir_id,\n+                    hir_ids_and_spans.into_iter().map(|(_, sp)| sp).collect::<Vec<_>>(),\n                     |lint| {\n                         lint.build(&format!(\"variable `{}` is assigned to, but never used\", name))\n                             .note(&format!(\"consider using `_{}` instead\", name))\n@@ -1535,31 +1540,49 @@ impl<'tcx> Liveness<'_, 'tcx> {\n             } else {\n                 self.ir.tcx.struct_span_lint_hir(\n                     lint::builtin::UNUSED_VARIABLES,\n-                    hir_id,\n-                    spans.clone(),\n+                    first_hir_id,\n+                    hir_ids_and_spans.iter().map(|(_, sp)| *sp).collect::<Vec<_>>(),\n                     |lint| {\n                         let mut err = lint.build(&format!(\"unused variable: `{}`\", name));\n-                        if self.ir.variable_is_shorthand(var) {\n-                            if let Node::Binding(pat) = self.ir.tcx.hir().get(hir_id) {\n-                                // Handle `ref` and `ref mut`.\n-                                let spans = spans\n-                                    .iter()\n-                                    .map(|_span| (pat.span, format!(\"{}: _\", name)))\n-                                    .collect();\n-\n-                                err.multipart_suggestion(\n-                                    \"try ignoring the field\",\n-                                    spans,\n-                                    Applicability::MachineApplicable,\n-                                );\n-                            }\n+\n+                        let (shorthands, non_shorthands): (Vec<_>, Vec<_>) =\n+                            hir_ids_and_spans.into_iter().partition(|(hir_id, span)| {\n+                                let var = self.variable(*hir_id, *span);\n+                                self.ir.variable_is_shorthand(var)\n+                            });\n+\n+                        let mut shorthands = shorthands\n+                            .into_iter()\n+                            .map(|(_, span)| (span, format!(\"{}: _\", name)))\n+                            .collect::<Vec<_>>();\n+\n+                        // If we have both shorthand and non-shorthand, prefer the \"try ignoring\n+                        // the field\" message, and suggest `_` for the non-shorthands. If we only\n+                        // have non-shorthand, then prefix with an underscore instead.\n+                        if !shorthands.is_empty() {\n+                            shorthands.extend(\n+                                non_shorthands\n+                                    .into_iter()\n+                                    .map(|(_, span)| (span, \"_\".to_string()))\n+                                    .collect::<Vec<_>>(),\n+                            );\n+\n+                            err.multipart_suggestion(\n+                                \"try ignoring the field\",\n+                                shorthands,\n+                                Applicability::MachineApplicable,\n+                            );\n                         } else {\n                             err.multipart_suggestion(\n                                 \"if this is intentional, prefix it with an underscore\",\n-                                spans.iter().map(|span| (*span, format!(\"_{}\", name))).collect(),\n+                                non_shorthands\n+                                    .into_iter()\n+                                    .map(|(_, span)| (span, format!(\"_{}\", name)))\n+                                    .collect::<Vec<_>>(),\n                                 Applicability::MachineApplicable,\n                             );\n                         }\n+\n                         err.emit()\n                     },\n                 );"}, {"sha": "23a605bef0cd322c8059a6ef27abde18e15cfc32", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -77,31 +77,31 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                 }\n \n                 let loop_id = match label.target_id {\n-                    Ok(loop_id) => loop_id,\n-                    Err(hir::LoopIdError::OutsideLoopScope) => hir::DUMMY_HIR_ID,\n+                    Ok(loop_id) => Some(loop_id),\n+                    Err(hir::LoopIdError::OutsideLoopScope) => None,\n                     Err(hir::LoopIdError::UnlabeledCfInWhileCondition) => {\n                         self.emit_unlabled_cf_in_while_condition(e.span, \"break\");\n-                        hir::DUMMY_HIR_ID\n+                        None\n                     }\n-                    Err(hir::LoopIdError::UnresolvedLabel) => hir::DUMMY_HIR_ID,\n+                    Err(hir::LoopIdError::UnresolvedLabel) => None,\n                 };\n \n-                if loop_id != hir::DUMMY_HIR_ID {\n+                if let Some(loop_id) = loop_id {\n                     if let Node::Block(_) = self.hir_map.find(loop_id).unwrap() {\n                         return;\n                     }\n                 }\n \n                 if opt_expr.is_some() {\n-                    let loop_kind = if loop_id == hir::DUMMY_HIR_ID {\n-                        None\n-                    } else {\n+                    let loop_kind = if let Some(loop_id) = loop_id {\n                         Some(match self.hir_map.expect_expr(loop_id).kind {\n                             hir::ExprKind::Loop(_, _, source) => source,\n                             ref r => {\n                                 span_bug!(e.span, \"break label resolved to a non-loop: {:?}\", r)\n                             }\n                         })\n+                    } else {\n+                        None\n                     };\n                     match loop_kind {\n                         None | Some(hir::LoopSource::Loop) => (),"}, {"sha": "052de4a4e5b555682ea13162fb964a15449cf12c", "filename": "src/librustc_trait_selection/traits/auto_trait.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -187,13 +187,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             // to store all of the necessary region/lifetime bounds in the InferContext, as well as\n             // an additional sanity check.\n             let mut fulfill = FulfillmentContext::new();\n-            fulfill.register_bound(\n-                &infcx,\n-                full_env,\n-                ty,\n-                trait_did,\n-                ObligationCause::misc(DUMMY_SP, hir::DUMMY_HIR_ID),\n-            );\n+            fulfill.register_bound(&infcx, full_env, ty, trait_did, ObligationCause::dummy());\n             fulfill.select_all_or_error(&infcx).unwrap_or_else(|e| {\n                 panic!(\"Unable to fulfill trait {:?} for '{:?}': {:?}\", trait_did, ty, e)\n             });\n@@ -292,7 +286,7 @@ impl AutoTraitFinder<'tcx> {\n             user_env.caller_bounds.iter().cloned().collect();\n \n         let mut new_env = param_env;\n-        let dummy_cause = ObligationCause::misc(DUMMY_SP, hir::DUMMY_HIR_ID);\n+        let dummy_cause = ObligationCause::dummy();\n \n         while let Some(pred) = predicates.pop_front() {\n             infcx.clear_caches();\n@@ -615,7 +609,7 @@ impl AutoTraitFinder<'tcx> {\n         select: &mut SelectionContext<'_, 'tcx>,\n         only_projections: bool,\n     ) -> bool {\n-        let dummy_cause = ObligationCause::misc(DUMMY_SP, hir::DUMMY_HIR_ID);\n+        let dummy_cause = ObligationCause::dummy();\n \n         for (obligation, mut predicate) in nested.map(|o| (o.clone(), o.predicate)) {\n             let is_new_pred = fresh_preds.insert(self.clean_pred(select.infcx(), predicate));"}, {"sha": "f5f4a51eb54e21dda7fbb984eba12bf5e26a531a", "filename": "src/librustc_trait_selection/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -31,7 +31,7 @@ use rustc_middle::middle::region;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::{self, GenericParamDefKind, ToPredicate, Ty, TyCtxt, WithConstness};\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::Span;\n \n use std::fmt::Debug;\n \n@@ -136,7 +136,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'tcx>(\n     let trait_ref = ty::TraitRef { def_id, substs: infcx.tcx.mk_substs_trait(ty, &[]) };\n     let obligation = Obligation {\n         param_env,\n-        cause: ObligationCause::misc(span, hir::DUMMY_HIR_ID),\n+        cause: ObligationCause::misc(span, hir::CRATE_HIR_ID),\n         recursion_depth: 0,\n         predicate: trait_ref.without_const().to_predicate(),\n     };\n@@ -163,7 +163,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'tcx>(\n         // We can use a dummy node-id here because we won't pay any mind\n         // to region obligations that arise (there shouldn't really be any\n         // anyhow).\n-        let cause = ObligationCause::misc(span, hir::DUMMY_HIR_ID);\n+        let cause = ObligationCause::misc(span, hir::CRATE_HIR_ID);\n \n         fulfill_cx.register_bound(infcx, param_env, ty, def_id, cause);\n "}, {"sha": "d6d3e86a2c8d37dee0f3d781d6fb2de3f9737ffe", "filename": "src/librustc_traits/normalize_projection_ty.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -1,10 +1,8 @@\n-use rustc_hir as hir;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n-use rustc_span::DUMMY_SP;\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n use rustc_trait_selection::traits::query::{\n     normalize::NormalizationResult, CanonicalProjectionGoal, NoSolution,\n@@ -27,7 +25,7 @@ fn normalize_projection_ty<'tcx>(\n         &goal,\n         |infcx, fulfill_cx, ParamEnvAnd { param_env, value: goal }| {\n             let selcx = &mut SelectionContext::new(infcx);\n-            let cause = ObligationCause::misc(DUMMY_SP, hir::DUMMY_HIR_ID);\n+            let cause = ObligationCause::dummy();\n             let mut obligations = vec![];\n             let answer = traits::normalize_projection_type(\n                 selcx,"}, {"sha": "39027dd2b4103907f97e2cf03d3597b4f318516e", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -12,7 +12,7 @@ error: internal compiler error: mutable allocation in constant\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:363:17\n+thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:366:17\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n error: internal compiler error: unexpected panic"}, {"sha": "9552e8ec2a8761a7912e1994228f04acdeb0d20c", "filename": "src/test/ui/issues/issue-69130.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Ftest%2Fui%2Fissues%2Fissue-69130.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Ftest%2Fui%2Fissues%2Fissue-69130.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69130.rs?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -0,0 +1,7 @@\n+// Issue 69130: character indexing bug in rustc_errors::CodeSuggestion::splice_lines().\n+\n+enum F {\n+M (\u00a7& u8)}\n+//~^ ERROR unknown start of token\n+//~| missing lifetime specifier\n+fn main() {}"}, {"sha": "a4700a5ed1da05a1fc2ae7ea8468db7f069e0272", "filename": "src/test/ui/issues/issue-69130.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Ftest%2Fui%2Fissues%2Fissue-69130.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Ftest%2Fui%2Fissues%2Fissue-69130.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69130.stderr?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -0,0 +1,21 @@\n+error: unknown start of token: \\u{a7}\n+  --> $DIR/issue-69130.rs:4:4\n+   |\n+LL | M (\u00a7& u8)}\n+   |    ^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-69130.rs:4:5\n+   |\n+LL | M (\u00a7& u8)}\n+   |     ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | enum F<'a> {\n+LL | M (\u00a7&'a  u8)}\n+   |\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "3efd87f6a5f11a351d8fa9d649a72d2ab55e49ad", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -12,16 +12,16 @@ LL | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n    = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n \n warning: unused variable: `mut_unused_var`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:33:13\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:33:9\n    |\n LL |     let mut mut_unused_var = 1;\n-   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mut_unused_var`\n+   |         ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mut_unused_var`\n \n warning: unused variable: `var`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:37:14\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:37:10\n    |\n LL |     let (mut var, unused_var) = (1, 2);\n-   |              ^^^ help: if this is intentional, prefix it with an underscore: `_var`\n+   |          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_var`\n \n warning: unused variable: `unused_var`\n   --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:37:19\n@@ -36,10 +36,10 @@ LL |     if let SoulHistory { corridors_of_light,\n    |                          ^^^^^^^^^^^^^^^^^^ help: try ignoring the field: `corridors_of_light: _`\n \n warning: variable `hours_are_suns` is assigned to, but never used\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:46:30\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:46:26\n    |\n LL |                          mut hours_are_suns,\n-   |                              ^^^^^^^^^^^^^^\n+   |                          ^^^^^^^^^^^^^^^^^^\n    |\n    = note: consider using `_hours_are_suns` instead\n "}, {"sha": "c501aa25f135248b8cb1e795eb33d0afa0b18a06", "filename": "src/test/ui/lint/issue-54180-unused-ref-field.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.stderr?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -1,10 +1,8 @@\n error: unused variable: `field`\n-  --> $DIR/issue-54180-unused-ref-field.rs:20:26\n+  --> $DIR/issue-54180-unused-ref-field.rs:20:22\n    |\n LL |         E::Variant { ref field } => (),\n-   |                      ----^^^^^\n-   |                      |\n-   |                      help: try ignoring the field: `field: _`\n+   |                      ^^^^^^^^^ help: try ignoring the field: `field: _`\n    |\n note: the lint level is defined here\n   --> $DIR/issue-54180-unused-ref-field.rs:3:9\n@@ -20,20 +18,16 @@ LL |     let _: i32 = points.iter().map(|Point { x, y }| y).sum();\n    |                                             ^ help: try ignoring the field: `x: _`\n \n error: unused variable: `f1`\n-  --> $DIR/issue-54180-unused-ref-field.rs:26:17\n+  --> $DIR/issue-54180-unused-ref-field.rs:26:13\n    |\n LL |     let S { ref f1 } = s;\n-   |             ----^^\n-   |             |\n-   |             help: try ignoring the field: `f1: _`\n+   |             ^^^^^^ help: try ignoring the field: `f1: _`\n \n error: unused variable: `x`\n-  --> $DIR/issue-54180-unused-ref-field.rs:32:28\n+  --> $DIR/issue-54180-unused-ref-field.rs:32:20\n    |\n LL |         Point { y, ref mut x } => y,\n-   |                    --------^\n-   |                    |\n-   |                    help: try ignoring the field: `x: _`\n+   |                    ^^^^^^^^^ help: try ignoring the field: `x: _`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b21f1ef6b2603ce1f61cc81d695da66e0da346cd", "filename": "src/test/ui/lint/issue-67691-unused-field-in-or-pattern.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.rs?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -0,0 +1,86 @@\n+// FIXME: should be run-rustfix, but rustfix doesn't currently support multipart suggestions, see\n+// #53934\n+\n+#![feature(or_patterns)]\n+#![deny(unused)]\n+\n+pub enum MyEnum {\n+    A { i: i32, j: i32 },\n+    B { i: i32, j: i32 },\n+}\n+\n+pub enum MixedEnum {\n+    A { i: i32 },\n+    B(i32),\n+}\n+\n+pub fn no_ref(x: MyEnum) {\n+    use MyEnum::*;\n+\n+    match x {\n+        A { i, j } | B { i, j } => { //~ ERROR unused variable\n+            println!(\"{}\", i);\n+        }\n+    }\n+}\n+\n+pub fn with_ref(x: MyEnum) {\n+    use MyEnum::*;\n+\n+    match x {\n+        A { i, ref j } | B { i, ref j } => { //~ ERROR unused variable\n+            println!(\"{}\", i);\n+        }\n+    }\n+}\n+\n+pub fn inner_no_ref(x: Option<MyEnum>) {\n+    use MyEnum::*;\n+\n+    match x {\n+        Some(A { i, j } | B { i, j }) => { //~ ERROR unused variable\n+            println!(\"{}\", i);\n+        }\n+\n+        _ => {}\n+    }\n+}\n+\n+pub fn inner_with_ref(x: Option<MyEnum>) {\n+    use MyEnum::*;\n+\n+    match x {\n+        Some(A { i, ref j } | B { i, ref j }) => { //~ ERROR unused variable\n+            println!(\"{}\", i);\n+        }\n+\n+        _ => {}\n+    }\n+}\n+\n+pub fn mixed_no_ref(x: MixedEnum) {\n+    match x {\n+        MixedEnum::A { i } | MixedEnum::B(i) => { //~ ERROR unused variable\n+            println!(\"match\");\n+        }\n+    }\n+}\n+\n+pub fn mixed_with_ref(x: MixedEnum) {\n+    match x {\n+        MixedEnum::A { ref i } | MixedEnum::B(ref i) => { //~ ERROR unused variable\n+            println!(\"match\");\n+        }\n+    }\n+}\n+\n+pub fn main() {\n+    no_ref(MyEnum::A { i: 1, j: 2 });\n+    with_ref(MyEnum::A { i: 1, j: 2 });\n+\n+    inner_no_ref(Some(MyEnum::A { i: 1, j: 2 }));\n+    inner_with_ref(Some(MyEnum::A { i: 1, j: 2 }));\n+\n+    mixed_no_ref(MixedEnum::B(5));\n+    mixed_with_ref(MixedEnum::B(5));\n+}"}, {"sha": "9cff2900908e6bd8c2e23b9e2ff78a82420b5a21", "filename": "src/test/ui/lint/issue-67691-unused-field-in-or-pattern.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-67691-unused-field-in-or-pattern.stderr?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -0,0 +1,74 @@\n+error: unused variable: `j`\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:21:16\n+   |\n+LL |         A { i, j } | B { i, j } => {\n+   |                ^            ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:5:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: `#[deny(unused_variables)]` implied by `#[deny(unused)]`\n+help: try ignoring the field\n+   |\n+LL |         A { i, j: _ } | B { i, j: _ } => {\n+   |                ^^^^            ^^^^\n+\n+error: unused variable: `j`\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:31:16\n+   |\n+LL |         A { i, ref j } | B { i, ref j } => {\n+   |                ^^^^^            ^^^^^\n+   |\n+help: try ignoring the field\n+   |\n+LL |         A { i, j: _ } | B { i, j: _ } => {\n+   |                ^^^^            ^^^^\n+\n+error: unused variable: `j`\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:41:21\n+   |\n+LL |         Some(A { i, j } | B { i, j }) => {\n+   |                     ^            ^\n+   |\n+help: try ignoring the field\n+   |\n+LL |         Some(A { i, j: _ } | B { i, j: _ }) => {\n+   |                     ^^^^            ^^^^\n+\n+error: unused variable: `j`\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:53:21\n+   |\n+LL |         Some(A { i, ref j } | B { i, ref j }) => {\n+   |                     ^^^^^            ^^^^^\n+   |\n+help: try ignoring the field\n+   |\n+LL |         Some(A { i, j: _ } | B { i, j: _ }) => {\n+   |                     ^^^^            ^^^^\n+\n+error: unused variable: `i`\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:63:24\n+   |\n+LL |         MixedEnum::A { i } | MixedEnum::B(i) => {\n+   |                        ^                  ^\n+   |\n+help: try ignoring the field\n+   |\n+LL |         MixedEnum::A { i: _ } | MixedEnum::B(_) => {\n+   |                        ^^^^                  ^\n+\n+error: unused variable: `i`\n+  --> $DIR/issue-67691-unused-field-in-or-pattern.rs:71:24\n+   |\n+LL |         MixedEnum::A { ref i } | MixedEnum::B(ref i) => {\n+   |                        ^^^^^                  ^^^^^\n+   |\n+help: try ignoring the field\n+   |\n+LL |         MixedEnum::A { i: _ } | MixedEnum::B(_) => {\n+   |                        ^^^^                  ^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "e9d20cf981fbde4d80e2f043a67dbaebe31cdada", "filename": "src/test/ui/liveness/liveness-dead.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Ftest%2Fui%2Fliveness%2Fliveness-dead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Ftest%2Fui%2Fliveness%2Fliveness-dead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-dead.stderr?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -1,8 +1,8 @@\n error: value assigned to `x` is never read\n-  --> $DIR/liveness-dead.rs:9:13\n+  --> $DIR/liveness-dead.rs:9:9\n    |\n LL |     let mut x: isize = 3;\n-   |             ^\n+   |         ^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/liveness-dead.rs:2:9\n@@ -20,10 +20,10 @@ LL |     x = 4;\n    = help: maybe it is overwritten before being read?\n \n error: value passed to `x` is never read\n-  --> $DIR/liveness-dead.rs:20:11\n+  --> $DIR/liveness-dead.rs:20:7\n    |\n LL | fn f4(mut x: i32) {\n-   |           ^\n+   |       ^^^^^\n    |\n    = help: maybe it is overwritten before being read?\n "}, {"sha": "2c5550ac47f228cfe1cc41a4817612b2bfd2cc38", "filename": "src/test/ui/liveness/liveness-unused.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fed36055070168e5238d6bf6e58a36f519fe427/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr?ref=9fed36055070168e5238d6bf6e58a36f519fe427", "patch": "@@ -44,10 +44,10 @@ LL |     let x = 3;\n    |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n \n error: variable `x` is assigned to, but never used\n-  --> $DIR/liveness-unused.rs:30:13\n+  --> $DIR/liveness-unused.rs:30:9\n    |\n LL |     let mut x = 3;\n-   |             ^\n+   |         ^^^^^\n    |\n    = note: consider using `_x` instead\n \n@@ -65,10 +65,10 @@ LL | #![deny(unused_assignments)]\n    = help: maybe it is overwritten before being read?\n \n error: variable `z` is assigned to, but never used\n-  --> $DIR/liveness-unused.rs:37:13\n+  --> $DIR/liveness-unused.rs:37:9\n    |\n LL |     let mut z = 3;\n-   |             ^\n+   |         ^^^^^\n    |\n    = note: consider using `_z` instead\n "}]}