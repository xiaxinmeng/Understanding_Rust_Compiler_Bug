{"sha": "dda12f8ef6916d4b70fb73ba6e1b81391cc874f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYTEyZjhlZjY5MTZkNGI3MGZiNzNiYTZlMWI4MTM5MWNjODc0ZjM=", "commit": {"author": {"name": "Brian Leibig", "email": "brian.leibig@gmail.com", "date": "2012-12-27T22:17:32Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-28T21:51:02Z"}, "message": "Replace much of the REPL run code with a call to compile_upto", "tree": {"sha": "3f6f3bc7242b779af9bf4c595ac6bec92aad7394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f6f3bc7242b779af9bf4c595ac6bec92aad7394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dda12f8ef6916d4b70fb73ba6e1b81391cc874f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dda12f8ef6916d4b70fb73ba6e1b81391cc874f3", "html_url": "https://github.com/rust-lang/rust/commit/dda12f8ef6916d4b70fb73ba6e1b81391cc874f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dda12f8ef6916d4b70fb73ba6e1b81391cc874f3/comments", "author": {"login": "bleibig", "id": 1253302, "node_id": "MDQ6VXNlcjEyNTMzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1253302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bleibig", "html_url": "https://github.com/bleibig", "followers_url": "https://api.github.com/users/bleibig/followers", "following_url": "https://api.github.com/users/bleibig/following{/other_user}", "gists_url": "https://api.github.com/users/bleibig/gists{/gist_id}", "starred_url": "https://api.github.com/users/bleibig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bleibig/subscriptions", "organizations_url": "https://api.github.com/users/bleibig/orgs", "repos_url": "https://api.github.com/users/bleibig/repos", "events_url": "https://api.github.com/users/bleibig/events{/privacy}", "received_events_url": "https://api.github.com/users/bleibig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11a9918ae747d2146df07c6f76fd359231eb5e6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/11a9918ae747d2146df07c6f76fd359231eb5e6c", "html_url": "https://github.com/rust-lang/rust/commit/11a9918ae747d2146df07c6f76fd359231eb5e6c"}], "stats": {"total": 121, "additions": 9, "deletions": 112}, "files": [{"sha": "828877fc4a401d63fa1182e9321cb127f47aac8a", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 8, "deletions": 111, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/dda12f8ef6916d4b70fb73ba6e1b81391cc874f3/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dda12f8ef6916d4b70fb73ba6e1b81391cc874f3/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=dda12f8ef6916d4b70fb73ba6e1b81391cc874f3", "patch": "@@ -134,6 +134,7 @@ fn run(repl: Repl, input: ~str) -> Repl {\n         crate_type: session::unknown_crate,\n         binary: repl.binary,\n         addl_lib_search_paths: repl.lib_search_paths.map(|p| Path(*p)),\n+        jit: true,\n         .. *session::basic_options()\n     };\n \n@@ -153,8 +154,12 @@ fn run(repl: Repl, input: ~str) -> Repl {\n                                           repl.binary,\n                                           wrapped);\n \n-    debug!(\"parsing\");\n-    let mut crate = driver::parse_input(sess, cfg, wrapped);\n+    let outputs = driver::build_output_filenames(wrapped, &None, &None, sess);\n+    debug!(\"calling compile_upto\");\n+    let {crate: crate, tcx: _} = driver::compile_upto(sess, cfg, wrapped,\n+                                                 driver::cu_everything,\n+                                                 Some(outputs));\n+\n     let mut opt = None;\n \n     for crate.node.module.items.each |item| {\n@@ -177,114 +182,6 @@ fn run(repl: Repl, input: ~str) -> Repl {\n         }\n         _ => fail\n     };\n-\n-    debug!(\"configuration\");\n-    crate = front::config::strip_unconfigured_items(crate);\n-\n-    debug!(\"maybe building test harness\");\n-    crate = front::test::modify_for_testing(sess, crate);\n-\n-    debug!(\"expansion\");\n-    crate = syntax::ext::expand::expand_crate(sess.parse_sess,\n-                                              sess.opts.cfg,\n-                                              crate);\n-\n-    debug!(\"intrinsic injection\");\n-    crate = front::intrinsic_inject::inject_intrinsic(sess, crate);\n-\n-    debug!(\"core injection\");\n-    crate = front::core_inject::maybe_inject_libcore_ref(sess, crate);\n-\n-    debug!(\"building lint settings table\");\n-    lint::build_settings_crate(sess, crate);\n-\n-    debug!(\"ast indexing\");\n-    let ast_map = syntax::ast_map::map_crate(sess.diagnostic(), *crate);\n-\n-    debug!(\"external crate/lib resolution\");\n-    creader::read_crates(sess.diagnostic(), *crate, sess.cstore,\n-                         sess.filesearch,\n-                         session::sess_os_to_meta_os(sess.targ_cfg.os),\n-                         sess.opts.static, sess.parse_sess.interner);\n-\n-    debug!(\"language item collection\");\n-    let lang_items = middle::lang_items::collect_language_items(crate, sess);\n-\n-    debug!(\"resolution\");\n-    let {def_map: def_map,\n-         exp_map2: exp_map2,\n-         trait_map: trait_map} = middle::resolve::resolve_crate(sess,\n-                                                                lang_items,\n-                                                                crate);\n-\n-    debug!(\"freevar finding\");\n-    let freevars = freevars::annotate_freevars(def_map, crate);\n-\n-    debug!(\"region_resolution\");\n-    let region_map = middle::region::resolve_crate(sess, def_map, crate);\n-\n-    debug!(\"region paramaterization inference\");\n-    let rp_set = middle::region::determine_rp_in_crate(sess, ast_map,\n-                                                       def_map, crate);\n-\n-    debug!(\"typechecking\");\n-    let ty_cx = ty::mk_ctxt(sess, def_map, ast_map, freevars,\n-                            region_map, rp_set, move lang_items, crate);\n-    let (method_map, vtable_map) = typeck::check_crate(ty_cx, trait_map,\n-                                                       crate);\n-\n-    debug!(\"const marking\");\n-    middle::const_eval::process_crate(crate, def_map, ty_cx);\n-\n-    debug!(\"const checking\");\n-    middle::check_const::check_crate(sess, crate, ast_map, def_map,\n-                                     method_map, ty_cx);\n-\n-    debug!(\"privacy checking\");\n-    middle::privacy::check_crate(ty_cx, &method_map, crate);\n-\n-    debug!(\"loop checking\");\n-    middle::check_loop::check_crate(ty_cx, crate);\n-\n-    debug!(\"mode computation\");\n-    middle::mode::compute_modes(ty_cx, method_map, crate);\n-\n-    debug!(\"alt checking\");\n-    middle::check_alt::check_crate(ty_cx, method_map, crate);\n-\n-    debug!(\"liveness checking\");\n-    let last_use_map = middle::liveness::check_crate(ty_cx,\n-                                                     method_map, crate);\n-\n-    debug!(\"borrow checking\");\n-    let (root_map, mutbl_map) = middle::borrowck::check_crate(ty_cx,\n-                                                              method_map,\n-                                                              last_use_map,\n-                                                              crate);\n-\n-    debug!(\"kind checking\");\n-    kind::check_crate(ty_cx, method_map, last_use_map, crate);\n-\n-    debug!(\"lint checking\");\n-    lint::check_crate(ty_cx, crate);\n-\n-    let maps = {mutbl_map: mutbl_map,\n-                root_map: root_map,\n-                last_use_map: last_use_map,\n-                method_map: method_map,\n-                vtable_map: vtable_map};\n-\n-    debug!(\"translation\");\n-    let path = ~path::GenericPath::from_str(\"<repl>\");\n-    let (llmod, _) = trans::base::trans_crate(sess, crate, ty_cx,\n-                                              path,\n-                                              exp_map2, maps);\n-    let pm = llvm::LLVMCreatePassManager();\n-\n-    debug!(\"executing jit\");\n-    back::link::jit::exec(sess, pm, llmod, 0, false);\n-    llvm::LLVMDisposePassManager(pm);\n-\n     debug!(\"recording input into repl history\");\n     record(repl, blk, sess.parse_sess.interner)\n }\n@@ -380,7 +277,7 @@ fn run_cmd(repl: &mut Repl, _in: io::Reader, _out: io::Writer,\n             io::println(\n                 ~\":{\\\\n ..lines.. \\\\n:}\\\\n - execute multiline command\\n\" +\n                 ~\":load <crate> ... - \\\n-                  loads given crates as dynamic libraries\" +\n+                  loads given crates as dynamic libraries\\n\" +\n                 ~\":clear - clear the screen\\n\" +\n                 ~\":exit - exit from the repl\\n\" +\n                 ~\":help - show this message\");"}, {"sha": "b01294062a627dedc52c10d32dad8facf52d57e2", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dda12f8ef6916d4b70fb73ba6e1b81391cc874f3/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/dda12f8ef6916d4b70fb73ba6e1b81391cc874f3/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=dda12f8ef6916d4b70fb73ba6e1b81391cc874f3", "patch": "@@ -281,7 +281,7 @@ void *RustMCJITMemoryManager::getPointerToNamedFunction(const std::string &Name,\n   if (Name == \"mknod\") return (void*)(intptr_t)&mknod;\n #endif\n \n-  if (Name == \"__morestack\") return &__morestack;\n+  if (Name == \"__morestack\" || Name == \"___morestack\") return &__morestack;\n \n   const char *NameStr = Name.c_str();\n "}]}