{"sha": "b5392f54503fdaf04df4b9578510b2baa944f4af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MzkyZjU0NTAzZmRhZjA0ZGY0Yjk1Nzg1MTBiMmJhYTk0NGY0YWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-08T14:32:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-08T14:32:25Z"}, "message": "Auto merge of #47208 - Manishearth:double-ended-searcher, r=pnkfelix\n\nMake double ended searchers use dependent fingers\n\n(fixes #47175)\n\nr? @burntsushi @alexcrichton\n\nneeds uplift to beta", "tree": {"sha": "12adb29130d21b3bd5fc09d45e9c8d9c5301247d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12adb29130d21b3bd5fc09d45e9c8d9c5301247d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5392f54503fdaf04df4b9578510b2baa944f4af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5392f54503fdaf04df4b9578510b2baa944f4af", "html_url": "https://github.com/rust-lang/rust/commit/b5392f54503fdaf04df4b9578510b2baa944f4af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5392f54503fdaf04df4b9578510b2baa944f4af/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b193de98af5b8c6e2b50908ea64323b9095a1a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b193de98af5b8c6e2b50908ea64323b9095a1a4", "html_url": "https://github.com/rust-lang/rust/commit/1b193de98af5b8c6e2b50908ea64323b9095a1a4"}, {"sha": "9066219f43d6ea8fac8e683620a80f70c9a4d4f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9066219f43d6ea8fac8e683620a80f70c9a4d4f3", "html_url": "https://github.com/rust-lang/rust/commit/9066219f43d6ea8fac8e683620a80f70c9a4d4f3"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "089d691773a1bcf94a6b1ab31407006cb022e9ee", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b5392f54503fdaf04df4b9578510b2baa944f4af/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5392f54503fdaf04df4b9578510b2baa944f4af/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=b5392f54503fdaf04df4b9578510b2baa944f4af", "patch": "@@ -284,7 +284,7 @@ unsafe impl<'a> Searcher<'a> for CharSearcher<'a> {\n     #[inline]\n     fn next(&mut self) -> SearchStep {\n         let old_finger = self.finger;\n-        let slice = unsafe { self.haystack.get_unchecked(old_finger..self.haystack.len()) };\n+        let slice = unsafe { self.haystack.get_unchecked(old_finger..self.finger_back) };\n         let mut iter = slice.chars();\n         let old_len = iter.iter.len();\n         if let Some(ch) = iter.next() {\n@@ -304,7 +304,8 @@ unsafe impl<'a> Searcher<'a> for CharSearcher<'a> {\n     fn next_match(&mut self) -> Option<(usize, usize)> {\n         loop {\n             // get the haystack after the last character found\n-            let bytes = if let Some(slice) = self.haystack.as_bytes().get(self.finger..) {\n+            let bytes = if let Some(slice) = self.haystack.as_bytes()\n+                                                 .get(self.finger..self.finger_back) {\n                 slice\n             } else {\n                 return None;\n@@ -340,7 +341,7 @@ unsafe impl<'a> Searcher<'a> for CharSearcher<'a> {\n                 }\n             } else {\n                 // found nothing, exit\n-                self.finger = self.haystack.len();\n+                self.finger = self.finger_back;\n                 return None;\n             }\n         }\n@@ -353,7 +354,7 @@ unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n     #[inline]\n     fn next_back(&mut self) -> SearchStep {\n         let old_finger = self.finger_back;\n-        let slice = unsafe { self.haystack.slice_unchecked(0, old_finger) };\n+        let slice = unsafe { self.haystack.slice_unchecked(self.finger, old_finger) };\n         let mut iter = slice.chars();\n         let old_len = iter.iter.len();\n         if let Some(ch) = iter.next_back() {\n@@ -374,14 +375,17 @@ unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n         let haystack = self.haystack.as_bytes();\n         loop {\n             // get the haystack up to but not including the last character searched\n-            let bytes = if let Some(slice) = haystack.get(..self.finger_back) {\n+            let bytes = if let Some(slice) = haystack.get(self.finger..self.finger_back) {\n                 slice\n             } else {\n                 return None;\n             };\n             // the last byte of the utf8 encoded needle\n             let last_byte = unsafe { *self.utf8_encoded.get_unchecked(self.utf8_size - 1) };\n             if let Some(index) = memchr::memrchr(last_byte, bytes) {\n+                // we searched a slice that was offset by self.finger,\n+                // add self.finger to recoup the original index\n+                let index = self.finger + index;\n                 // memrchr will return the index of the byte we wish to\n                 // find. In case of an ASCII character, this is indeed\n                 // were we wish our new finger to be (\"after\" the found\n@@ -412,7 +416,7 @@ unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n                 // found the last byte when searching in reverse.\n                 self.finger_back = index;\n             } else {\n-                self.finger_back = 0;\n+                self.finger_back = self.finger;\n                 // found nothing, exit\n                 return None;\n             }"}, {"sha": "cfa3b7ee6640fadb930c62be5f1a07b62f615dcd", "filename": "src/libcore/tests/pattern.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b5392f54503fdaf04df4b9578510b2baa944f4af/src%2Flibcore%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5392f54503fdaf04df4b9578510b2baa944f4af/src%2Flibcore%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fpattern.rs?ref=b5392f54503fdaf04df4b9578510b2baa944f4af", "patch": "@@ -262,3 +262,41 @@ fn test_reverse_search_shared_bytes() {\n         [InRange(37, 40), Rejects(34, 37), InRange(10, 13), Rejects(8, 10), Done]\n     );\n }\n+\n+#[test]\n+fn double_ended_regression_test() {\n+    // https://github.com/rust-lang/rust/issues/47175\n+    // Ensures that double ended searching comes to a convergence\n+    search_asserts!(\"abcdeabcdeabcde\", 'a', \"alternating double ended search\",\n+        [next_match,    next_match_back,    next_match,      next_match_back],\n+        [InRange(0, 1), InRange(10, 11), InRange(5, 6), Done]\n+    );\n+    search_asserts!(\"abcdeabcdeabcde\", 'a', \"triple double ended search for a\",\n+        [next_match,    next_match_back,    next_match_back,      next_match_back],\n+        [InRange(0, 1), InRange(10, 11), InRange(5, 6), Done]\n+    );\n+    search_asserts!(\"abcdeabcdeabcde\", 'd', \"triple double ended search for d\",\n+        [next_match,    next_match_back,    next_match_back,      next_match_back],\n+        [InRange(3, 4), InRange(13, 14), InRange(8, 9), Done]\n+    );\n+    search_asserts!(STRESS, '\u00c1', \"Double ended search for two-byte Latin character\",\n+        [next_match,    next_match_back,     next_match,      next_match_back],\n+        [InRange(0, 2), InRange(32, 34), InRange(8, 10), Done]\n+    );\n+    search_asserts!(STRESS, '\uac01', \"Reverse double ended search for three-byte Hangul character\",\n+        [next_match_back, next_back,       next_match,      next,            next_match_back, next_match],\n+        [InRange(34, 37), Rejects(32, 34), InRange(19, 22), Rejects(22, 25), InRange(28, 31), Done]\n+    );\n+    search_asserts!(STRESS, '\u0e01', \"Double ended search for three-byte Thai character\",\n+        [next_match,      next_back,       next,            next_match_back, next_match],\n+        [InRange(22, 25), Rejects(47, 48), Rejects(25, 28), InRange(40, 43), Done]\n+    );\n+    search_asserts!(STRESS, '\ud83d\ude01', \"Double ended search for four-byte emoji\",\n+        [next_match_back, next,          next_match,      next_back,       next_match],\n+        [InRange(43, 47), Rejects(0, 2), InRange(15, 19), Rejects(40, 43), Done]\n+    );\n+    search_asserts!(STRESS, '\ua041', \"Double ended search for three-byte Yi character with repeated bytes\",\n+        [next_match,      next,            next_match_back, next_back,       next_match],\n+        [InRange(10, 13), Rejects(13, 14), InRange(37, 40), Rejects(34, 37), Done]\n+    );\n+}"}]}