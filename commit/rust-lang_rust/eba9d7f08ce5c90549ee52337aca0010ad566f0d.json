{"sha": "eba9d7f08ce5c90549ee52337aca0010ad566f0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYTlkN2YwOGNlNWM5MDU0OWVlNTIzMzdhY2EwMDEwYWQ1NjZmMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-28T16:03:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-28T16:03:32Z"}, "message": "Auto merge of #43298 - gaurikholkar:lifetime_errors, r=estebank\n\nimprove case with both anonymous lifetime parameters #43269\n\nThis is a fix to #43269.\n\nSample output message-\n\n```\n\nerror[E0623]: lifetime mismatch\n  --> $DIR/ex3-both-anon-regions.rs:12:12\n   |\n11 | fn foo(x: &mut Vec<&u8>, y: &u8) {\n   |                    ---      --- these references must have the same lifetime\n12 |     x.push(y);\n   |            ^ data from `y` flows into `x` here\n\nerror: aborting due to 2 previous errors\n\n```\nr? @nikomatsakis", "tree": {"sha": "4ff20139e891f312b0cfdf5c133a8e880c9a6c81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ff20139e891f312b0cfdf5c133a8e880c9a6c81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eba9d7f08ce5c90549ee52337aca0010ad566f0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eba9d7f08ce5c90549ee52337aca0010ad566f0d", "html_url": "https://github.com/rust-lang/rust/commit/eba9d7f08ce5c90549ee52337aca0010ad566f0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eba9d7f08ce5c90549ee52337aca0010ad566f0d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2b5d7e6b37208b241d5aacd77cb245b362c7ff5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b5d7e6b37208b241d5aacd77cb245b362c7ff5", "html_url": "https://github.com/rust-lang/rust/commit/e2b5d7e6b37208b241d5aacd77cb245b362c7ff5"}, {"sha": "4fb1808ab6e8a232be17ba3e74e27fa08bd4f28d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb1808ab6e8a232be17ba3e74e27fa08bd4f28d", "html_url": "https://github.com/rust-lang/rust/commit/4fb1808ab6e8a232be17ba3e74e27fa08bd4f28d"}], "stats": {"total": 587, "additions": 462, "deletions": 125}, "files": [{"sha": "522c1531c593804228a9bbad830df4d7756ef6d0", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=eba9d7f08ce5c90549ee52337aca0010ad566f0d", "patch": "@@ -2025,4 +2025,5 @@ register_diagnostics! {\n     E0490, // a value of type `..` is borrowed for too long\n     E0495, // cannot infer an appropriate lifetime due to conflicting requirements\n     E0566, // conflicting representation hints\n+    E0623, // lifetime mismatch where both parameters are anonymous regions\n }"}, {"sha": "1017f2bd0e6e7255feafb1a2f76aa8df4e8b14ab", "filename": "src/librustc/infer/error_reporting/anon_anon_conflict.rs", "status": "added", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fanon_anon_conflict.rs?ref=eba9d7f08ce5c90549ee52337aca0010ad566f0d", "patch": "@@ -0,0 +1,200 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Error Reporting for Anonymous Region Lifetime Errors\n+//! where both the regions are anonymous.\n+use hir;\n+use infer::InferCtxt;\n+use ty::{self, Region};\n+use infer::region_inference::RegionResolutionError::*;\n+use infer::region_inference::RegionResolutionError;\n+use hir::map as hir_map;\n+use middle::resolve_lifetime as rl;\n+use hir::intravisit::{self, Visitor, NestedVisitorMap};\n+\n+impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n+    // This method prints the error message for lifetime errors when both the concerned regions\n+    // are anonymous.\n+    // Consider a case where we have\n+    // fn foo(x: &mut Vec<&u8>, y: &u8)\n+    //    { x.push(y); }.\n+    // The example gives\n+    // fn foo(x: &mut Vec<&u8>, y: &u8) {\n+    //                    ---      --- these references must have the same lifetime\n+    //            x.push(y);\n+    //            ^ data from `y` flows into `x` here\n+    // It will later be extended to trait objects and structs.\n+    pub fn try_report_anon_anon_conflict(&self, error: &RegionResolutionError<'tcx>) -> bool {\n+\n+        let (span, sub, sup) = match *error {\n+            ConcreteFailure(ref origin, sub, sup) => (origin.span(), sub, sup),\n+            _ => return false, // inapplicable\n+        };\n+\n+        // Determine whether the sub and sup consist of both anonymous (elided) regions.\n+        let (ty1, ty2) = if self.is_suitable_anonymous_region(sup).is_some() &&\n+                            self.is_suitable_anonymous_region(sub).is_some() {\n+            if let (Some(anon_reg1), Some(anon_reg2)) =\n+                (self.is_suitable_anonymous_region(sup), self.is_suitable_anonymous_region(sub)) {\n+                let ((_, br1), (_, br2)) = (anon_reg1, anon_reg2);\n+                if self.find_anon_type(sup, &br1).is_some() &&\n+                   self.find_anon_type(sub, &br2).is_some() {\n+                    (self.find_anon_type(sup, &br1).unwrap(),\n+                     self.find_anon_type(sub, &br2).unwrap())\n+                } else {\n+                    return false;\n+                }\n+            } else {\n+                return false;\n+            }\n+        } else {\n+            return false; // inapplicable\n+        };\n+\n+        if let (Some(sup_arg), Some(sub_arg)) =\n+            (self.find_arg_with_anonymous_region(sup, sup),\n+             self.find_arg_with_anonymous_region(sub, sub)) {\n+            let ((anon_arg1, _, _, _), (anon_arg2, _, _, _)) = (sup_arg, sub_arg);\n+\n+            let span_label_var1 = if let Some(simple_name) = anon_arg1.pat.simple_name() {\n+                format!(\" from `{}` \", simple_name)\n+            } else {\n+                format!(\" \")\n+            };\n+\n+            let span_label_var2 = if let Some(simple_name) = anon_arg2.pat.simple_name() {\n+                format!(\" into `{}` \", simple_name)\n+            } else {\n+                format!(\" \")\n+            };\n+\n+            struct_span_err!(self.tcx.sess, span, E0623, \"lifetime mismatch\")\n+                .span_label(ty1.span,\n+                            format!(\"these references must have the same lifetime\"))\n+                .span_label(ty2.span, format!(\"\"))\n+                .span_label(span,\n+                            format!(\"data{}flows{}here\", span_label_var1, span_label_var2))\n+                .emit();\n+        } else {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    /// This function calls the `visit_ty` method for the parameters\n+    /// corresponding to the anonymous regions. The `nested_visitor.found_type`\n+    /// contains the anonymous type.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// region - the anonymous region corresponding to the anon_anon conflict\n+    /// br - the bound region corresponding to the above region which is of type `BrAnon(_)`\n+    ///\n+    /// # Example\n+    /// ```\n+    /// fn foo(x: &mut Vec<&u8>, y: &u8)\n+    ///    { x.push(y); }\n+    /// ```\n+    /// The function returns the nested type corresponding to the anonymous region\n+    /// for e.g. `&u8` and Vec<`&u8`.\n+    fn find_anon_type(&self, region: Region<'tcx>, br: &ty::BoundRegion) -> Option<&hir::Ty> {\n+        if let Some(anon_reg) = self.is_suitable_anonymous_region(region) {\n+            let (def_id, _) = anon_reg;\n+            if let Some(node_id) = self.tcx.hir.as_local_node_id(def_id) {\n+                let ret_ty = self.tcx.type_of(def_id);\n+                if let ty::TyFnDef(_, _) = ret_ty.sty {\n+                    if let hir_map::NodeItem(it) = self.tcx.hir.get(node_id) {\n+                        if let hir::ItemFn(ref fndecl, _, _, _, _, _) = it.node {\n+                            return fndecl\n+                                       .inputs\n+                                       .iter()\n+                                       .filter_map(|arg| {\n+                                let mut nested_visitor = FindNestedTypeVisitor {\n+                                    infcx: &self,\n+                                    hir_map: &self.tcx.hir,\n+                                    bound_region: *br,\n+                                    found_type: None,\n+                                };\n+                                nested_visitor.visit_ty(&**arg);\n+                                if nested_visitor.found_type.is_some() {\n+                                    nested_visitor.found_type\n+                                } else {\n+                                    None\n+                                }\n+                            })\n+                                       .next();\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        None\n+    }\n+}\n+\n+// The FindNestedTypeVisitor captures the corresponding `hir::Ty` of the\n+// anonymous region. The example above would lead to a conflict between\n+// the two anonymous lifetimes for &u8 in x and y respectively. This visitor\n+// would be invoked twice, once for each lifetime, and would\n+// walk the types like &mut Vec<&u8> and &u8 looking for the HIR\n+// where that lifetime appears. This allows us to highlight the\n+// specific part of the type in the error message.\n+struct FindNestedTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n+    infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n+    hir_map: &'a hir::map::Map<'gcx>,\n+    // The bound_region corresponding to the Refree(freeregion)\n+    // associated with the anonymous region we are looking for.\n+    bound_region: ty::BoundRegion,\n+    // The type where the anonymous lifetime appears\n+    // for e.g. Vec<`&u8`> and <`&u8`>\n+    found_type: Option<&'gcx hir::Ty>,\n+}\n+\n+impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'gcx> {\n+        NestedVisitorMap::OnlyBodies(&self.hir_map)\n+    }\n+\n+    fn visit_ty(&mut self, arg: &'gcx hir::Ty) {\n+        // Find the index of the anonymous region that was part of the\n+        // error. We will then search the function parameters for a bound\n+        // region at the right depth with the same index.\n+        let br_index = match self.bound_region {\n+            ty::BrAnon(index) => index,\n+            _ => return,\n+        };\n+\n+        match arg.node {\n+            hir::TyRptr(ref lifetime, _) => {\n+                match self.infcx.tcx.named_region_map.defs.get(&lifetime.id) {\n+                    // the lifetime of the TyRptr\n+                    Some(&rl::Region::LateBoundAnon(debuijn_index, anon_index)) => {\n+                        if debuijn_index.depth == 1 && anon_index == br_index {\n+                            self.found_type = Some(arg);\n+                            return; // we can stop visiting now\n+                        }\n+                    }\n+                    Some(&rl::Region::Static) |\n+                    Some(&rl::Region::EarlyBound(_, _)) |\n+                    Some(&rl::Region::LateBound(_, _)) |\n+                    Some(&rl::Region::Free(_, _)) |\n+                    None => {\n+                        debug!(\"no arg found\");\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+        // walk the embedded contents: e.g., if we are visiting `Vec<&Foo>`,\n+        // go on to visit `&Foo`\n+        intravisit::walk_ty(self, arg);\n+    }\n+}"}, {"sha": "77ec866dc808759743de11d53fddc0e71b9aeaf8", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=eba9d7f08ce5c90549ee52337aca0010ad566f0d", "patch": "@@ -76,7 +76,9 @@ use errors::{DiagnosticBuilder, DiagnosticStyledString};\n mod note;\n \n mod need_type_info;\n+mod util;\n mod named_anon_conflict;\n+mod anon_anon_conflict;\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn note_and_explain_region(self,\n@@ -270,29 +272,34 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         for error in errors {\n             debug!(\"report_region_errors: error = {:?}\", error);\n \n-            if !self.try_report_named_anon_conflict(&error) {\n-                match error.clone() {\n-                    // These errors could indicate all manner of different\n-                    // problems with many different solutions. Rather\n-                    // than generate a \"one size fits all\" error, what we\n-                    // attempt to do is go through a number of specific\n-                    // scenarios and try to find the best way to present\n-                    // the error. If all of these fails, we fall back to a rather\n-                    // general bit of code that displays the error information\n-                    ConcreteFailure(origin, sub, sup) => {\n-                        self.report_concrete_failure(origin, sub, sup).emit();\n-                    }\n-                    GenericBoundFailure(kind, param_ty, sub) => {\n-                        self.report_generic_bound_failure(kind, param_ty, sub);\n-                    }\n-                    SubSupConflict(var_origin,\n-                                 sub_origin, sub_r,\n-                                 sup_origin, sup_r) => {\n+            if !self.try_report_named_anon_conflict(&error) &&\n+               !self.try_report_anon_anon_conflict(&error) {\n+\n+               match error.clone() {\n+                  // These errors could indicate all manner of different\n+                  // problems with many different solutions. Rather\n+                  // than generate a \"one size fits all\" error, what we\n+                  // attempt to do is go through a number of specific\n+                  // scenarios and try to find the best way to present\n+                  // the error. If all of these fails, we fall back to a rather\n+                  // general bit of code that displays the error information\n+                  ConcreteFailure(origin, sub, sup) => {\n+\n+                      self.report_concrete_failure(origin, sub, sup).emit();\n+                  }\n+\n+                  GenericBoundFailure(kind, param_ty, sub) => {\n+                      self.report_generic_bound_failure(kind, param_ty, sub);\n+                  }\n+\n+                  SubSupConflict(var_origin, sub_origin, sub_r, sup_origin, sup_r) => {\n                         self.report_sub_sup_conflict(var_origin,\n-                                                     sub_origin, sub_r,\n-                                                     sup_origin, sup_r);\n-                    }\n-                }\n+                                                     sub_origin,\n+                                                     sub_r,\n+                                                     sup_origin,\n+                                                     sup_r);\n+                  }\n+               }\n             }\n         }\n     }"}, {"sha": "491079a1f9259ad33b9f13932a57cf99df1cad99", "filename": "src/librustc/infer/error_reporting/named_anon_conflict.rs", "status": "modified", "additions": 4, "deletions": 103, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs?ref=eba9d7f08ce5c90549ee52337aca0010ad566f0d", "patch": "@@ -8,69 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Error Reporting for Anonymous Region Lifetime Errors.\n-use hir;\n+//! Error Reporting for Anonymous Region Lifetime Errors\n+//! where one region is named and the other is anonymous.\n use infer::InferCtxt;\n-use ty::{self, Region};\n+use ty;\n use infer::region_inference::RegionResolutionError::*;\n use infer::region_inference::RegionResolutionError;\n-use hir::map as hir_map;\n-use hir::def_id::DefId;\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n-    // This method walks the Type of the function body arguments using\n-    // `fold_regions()` function and returns the\n-    // &hir::Arg of the function argument corresponding to the anonymous\n-    // region and the Ty corresponding to the named region.\n-    // Currently only the case where the function declaration consists of\n-    // one named region and one anonymous region is handled.\n-    // Consider the example `fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32`\n-    // Here, we would return the hir::Arg for y, we return the type &'a\n-    // i32, which is the type of y but with the anonymous region replaced\n-    // with 'a, the corresponding bound region and is_first which is true if\n-    // the hir::Arg is the first argument in the function declaration.\n-    fn find_arg_with_anonymous_region\n-        (&self,\n-         anon_region: Region<'tcx>,\n-         named_region: Region<'tcx>)\n-         -> Option<(&hir::Arg, ty::Ty<'tcx>, ty::BoundRegion, bool)> {\n-\n-        match *anon_region {\n-            ty::ReFree(ref free_region) => {\n-                let id = free_region.scope;\n-                let node_id = self.tcx.hir.as_local_node_id(id).unwrap();\n-                let body_id = self.tcx.hir.maybe_body_owned_by(node_id).unwrap();\n-                let body = self.tcx.hir.body(body_id);\n-                if let Some(tables) = self.in_progress_tables {\n-                    body.arguments\n-                        .iter()\n-                        .enumerate()\n-                        .filter_map(|(index, arg)| {\n-                            let ty = tables.borrow().node_id_to_type(arg.id);\n-                            let mut found_anon_region = false;\n-                            let new_arg_ty = self.tcx\n-                                .fold_regions(&ty, &mut false, |r, _| if *r == *anon_region {\n-                                    found_anon_region = true;\n-                                    named_region\n-                                } else {\n-                                    r\n-                                });\n-                            if found_anon_region {\n-                                let is_first = index == 0;\n-                                Some((arg, new_arg_ty, free_region.bound_region, is_first))\n-                            } else {\n-                                None\n-                            }\n-                        })\n-                        .next()\n-                } else {\n-                    None\n-                }\n-            }\n-            _ => None,\n-        }\n-    }\n-\n     // This method generates the error message for the case when\n     // the function arguments consist of a named region and an anonymous\n     // region and corresponds to `ConcreteFailure(..)`\n@@ -86,7 +31,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         // only introduced anonymous regions in parameters) as well as a\n         // version new_ty of its type where the anonymous region is replaced\n         // with the named one.\n-        let (named, (arg, new_ty, br, is_first), scope_def_id) =\n+        let (named, (arg, new_ty, br, is_first), (scope_def_id, _)) =\n             if sub.is_named_region() && self.is_suitable_anonymous_region(sup).is_some() {\n                 (sub,\n                  self.find_arg_with_anonymous_region(sup, sub).unwrap(),\n@@ -145,48 +90,4 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         return true;\n     }\n-\n-    // This method returns whether the given Region is Anonymous\n-    // and returns the DefId corresponding to the region.\n-    pub fn is_suitable_anonymous_region(&self, region: Region<'tcx>) -> Option<DefId> {\n-        match *region {\n-            ty::ReFree(ref free_region) => {\n-                match free_region.bound_region {\n-                    ty::BrAnon(..) => {\n-                        let anonymous_region_binding_scope = free_region.scope;\n-                        let node_id = self.tcx\n-                            .hir\n-                            .as_local_node_id(anonymous_region_binding_scope)\n-                            .unwrap();\n-                        match self.tcx.hir.find(node_id) {\n-                            Some(hir_map::NodeItem(..)) |\n-                            Some(hir_map::NodeTraitItem(..)) => {\n-                                // proceed ahead //\n-                            }\n-                            Some(hir_map::NodeImplItem(..)) => {\n-                                let container_id = self.tcx\n-                                    .associated_item(anonymous_region_binding_scope)\n-                                    .container\n-                                    .id();\n-                                if self.tcx.impl_trait_ref(container_id).is_some() {\n-                                    // For now, we do not try to target impls of traits. This is\n-                                    // because this message is going to suggest that the user\n-                                    // change the fn signature, but they may not be free to do so,\n-                                    // since the signature must match the trait.\n-                                    //\n-                                    // FIXME(#42706) -- in some cases, we could do better here.\n-                                    return None;\n-                                }\n-                            }\n-                            _ => return None, // inapplicable\n-                            // we target only top-level functions\n-                        }\n-                        return Some(anonymous_region_binding_scope);\n-                    }\n-                    _ => None,\n-                }\n-            }\n-            _ => None,\n-        }\n-    }\n }"}, {"sha": "14fe8e699c7f23d7bc5788240841697050154046", "filename": "src/librustc/infer/error_reporting/util.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs?ref=eba9d7f08ce5c90549ee52337aca0010ad566f0d", "patch": "@@ -0,0 +1,120 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Helper functions corresponding to lifetime errors due to\n+//! anonymous regions.\n+use hir;\n+use infer::InferCtxt;\n+use ty::{self, Region};\n+use hir::def_id::DefId;\n+use hir::map as hir_map;\n+\n+impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n+    // This method walks the Type of the function body arguments using\n+    // `fold_regions()` function and returns the\n+    // &hir::Arg of the function argument corresponding to the anonymous\n+    // region and the Ty corresponding to the named region.\n+    // Currently only the case where the function declaration consists of\n+    // one named region and one anonymous region is handled.\n+    // Consider the example `fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32`\n+    // Here, we would return the hir::Arg for y, we return the type &'a\n+    // i32, which is the type of y but with the anonymous region replaced\n+    // with 'a, the corresponding bound region and is_first which is true if\n+    // the hir::Arg is the first argument in the function declaration.\n+    pub fn find_arg_with_anonymous_region\n+        (&self,\n+         anon_region: Region<'tcx>,\n+         replace_region: Region<'tcx>)\n+         -> Option<(&hir::Arg, ty::Ty<'tcx>, ty::BoundRegion, bool)> {\n+\n+        if let ty::ReFree(ref free_region) = *anon_region {\n+\n+            let id = free_region.scope;\n+            let hir = &self.tcx.hir;\n+            if let Some(node_id) = hir.as_local_node_id(id) {\n+                if let Some(body_id) = hir.maybe_body_owned_by(node_id) {\n+                    let body = hir.body(body_id);\n+                    if let Some(tables) = self.in_progress_tables {\n+                        body.arguments\n+                            .iter()\n+                            .enumerate()\n+                            .filter_map(|(index, arg)| {\n+                                let ty = tables.borrow().node_id_to_type(arg.id);\n+                                let mut found_anon_region = false;\n+                                let new_arg_ty = self.tcx\n+                                    .fold_regions(&ty, &mut false, |r, _| if *r == *anon_region {\n+                                        found_anon_region = true;\n+                                        replace_region\n+                                    } else {\n+                                        r\n+                                    });\n+                                if found_anon_region {\n+                                    let is_first = index == 0;\n+                                    Some((arg, new_arg_ty, free_region.bound_region, is_first))\n+                                } else {\n+                                    None\n+                                }\n+                            })\n+                            .next()\n+                    } else {\n+                        None\n+                    }\n+                } else {\n+                    None\n+                }\n+            } else {\n+                None\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+\n+    // This method returns whether the given Region is Anonymous\n+    // and returns the DefId and the BoundRegion corresponding to the given region.\n+    pub fn is_suitable_anonymous_region(&self,\n+                                        region: Region<'tcx>)\n+                                        -> Option<(DefId, ty::BoundRegion)> {\n+        if let ty::ReFree(ref free_region) = *region {\n+            if let ty::BrAnon(..) = free_region.bound_region{\n+                    let anonymous_region_binding_scope = free_region.scope;\n+                    let node_id = self.tcx\n+                        .hir\n+                        .as_local_node_id(anonymous_region_binding_scope)\n+                        .unwrap();\n+                    match self.tcx.hir.find(node_id) {\n+                        Some(hir_map::NodeItem(..)) |\n+                        Some(hir_map::NodeTraitItem(..)) => {\n+                            // Success -- proceed to return Some below\n+                        }\n+                        Some(hir_map::NodeImplItem(..)) => {\n+                            let container_id = self.tcx\n+                                .associated_item(anonymous_region_binding_scope)\n+                                .container\n+                                .id();\n+                            if self.tcx.impl_trait_ref(container_id).is_some() {\n+                                // For now, we do not try to target impls of traits. This is\n+                                // because this message is going to suggest that the user\n+                                // change the fn signature, but they may not be free to do so,\n+                                // since the signature must match the trait.\n+                                //\n+                                // FIXME(#42706) -- in some cases, we could do better here.\n+                                return None;\n+                            }\n+                        }\n+                        _ => return None, // inapplicable\n+                        // we target only top-level functions\n+                    }\n+                    return Some((anonymous_region_binding_scope, free_region.bound_region));\n+                }\n+            }\n+            None\n+        }\n+}"}, {"sha": "905eae18d1807998f3a4661b609bc7cd757a3138", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.rs?ref=eba9d7f08ce5c90549ee52337aca0010ad566f0d", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo((v, w): (&u8, &u8), x: &u8) {\n+    v = x;\n+}\n+\n+fn main() { }"}, {"sha": "8dd906afdc4e761448e7b632e894d9bd2786223a", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-2.stderr?ref=eba9d7f08ce5c90549ee52337aca0010ad566f0d", "patch": "@@ -0,0 +1,10 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-2.rs:12:9\n+   |\n+11 | fn foo((v, w): (&u8, &u8), x: &u8) {\n+   |                 ---           --- these references must have the same lifetime\n+12 |     v = x;\n+   |         ^ data from `x` flows here\n+\n+error: aborting due to previous error\n+"}, {"sha": "7bd5ebf805f1e8a85d01e880eb136df3480270b6", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-3.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.rs?ref=eba9d7f08ce5c90549ee52337aca0010ad566f0d", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo((v, w): (&u8, &u8), (x, y): (&u8, &u8)) {\n+    v = x;\n+}\n+\n+fn main() { }"}, {"sha": "66c3ca45499b6d7f6ea2bd9501d119f9b5c178b2", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-3.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.stderr?ref=eba9d7f08ce5c90549ee52337aca0010ad566f0d", "patch": "@@ -0,0 +1,10 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-3.rs:12:9\n+   |\n+11 | fn foo((v, w): (&u8, &u8), (x, y): (&u8, &u8)) {\n+   |                 ---                 --- these references must have the same lifetime\n+12 |     v = x;\n+   |         ^ data flows here\n+\n+error: aborting due to previous error\n+"}, {"sha": "fdb010a04f4c6ab2dbc545f15d89e63fce61f329", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-4.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-4.rs?ref=eba9d7f08ce5c90549ee52337aca0010ad566f0d", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n+    z.push((x,y));\n+}"}, {"sha": "b969797b374405909befc5beeef5be0ebace7629", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-4.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-4.stderr?ref=eba9d7f08ce5c90549ee52337aca0010ad566f0d", "patch": "@@ -0,0 +1,20 @@\n+error[E0601]: main function not found\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-4.rs:12:13\n+   |\n+11 | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n+   |                     ---                 --- these references must have the same lifetime\n+12 |     z.push((x,y));\n+   |             ^ data flows into `z` here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-4.rs:12:15\n+   |\n+11 | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n+   |                         ---                  --- these references must have the same lifetime\n+12 |     z.push((x,y));\n+   |               ^ data flows into `z` here\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "9ebff5118768d0a19b4a99440b568e377ff4e81d", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions.rs?ref=eba9d7f08ce5c90549ee52337aca0010ad566f0d", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(x: &mut Vec<&u8>, y: &u8) {\n+    x.push(y);\n+}\n+\n+fn main() { }"}, {"sha": "e38e2ef07ad871ee9324a57615d764f433cba3e3", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba9d7f08ce5c90549ee52337aca0010ad566f0d/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions.stderr?ref=eba9d7f08ce5c90549ee52337aca0010ad566f0d", "patch": "@@ -0,0 +1,10 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions.rs:12:12\n+   |\n+11 | fn foo(x: &mut Vec<&u8>, y: &u8) {\n+   |                    ---      --- these references must have the same lifetime\n+12 |     x.push(y);\n+   |            ^ data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+"}]}