{"sha": "3dced6f71e6e8cf8f59e3614194a61427a3a408b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkY2VkNmY3MWU2ZThjZjhmNTllMzYxNDE5NGE2MTQyN2EzYTQwOGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-10T19:25:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-10T19:25:17Z"}, "message": "Auto merge of #37645 - jseyfried:fix_crate_var_in_custom_derives, r=nrc\n\nFix regression involving custom derives on items with `$crate`\n\nThe regression was introduced in #37213.\n\nI believe we cannot make the improvements from #37213 work with the current custom derive setup (c.f. https://github.com/rust-lang/rust/issues/37637#issuecomment-258959145) -- we'll have to wait for `TokenStream`'s API to improve.\n\nFixes #37637.\nr? @nrc", "tree": {"sha": "d774bf9b6a1fda191695d4917979b0243652812d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d774bf9b6a1fda191695d4917979b0243652812d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dced6f71e6e8cf8f59e3614194a61427a3a408b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dced6f71e6e8cf8f59e3614194a61427a3a408b", "html_url": "https://github.com/rust-lang/rust/commit/3dced6f71e6e8cf8f59e3614194a61427a3a408b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dced6f71e6e8cf8f59e3614194a61427a3a408b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc1cc1db6ddee8d57d20adc05b740e3b73649ab5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1cc1db6ddee8d57d20adc05b740e3b73649ab5", "html_url": "https://github.com/rust-lang/rust/commit/bc1cc1db6ddee8d57d20adc05b740e3b73649ab5"}, {"sha": "67eeb0a72081ae7db45a07de55fd2cb77b2ebee1", "url": "https://api.github.com/repos/rust-lang/rust/commits/67eeb0a72081ae7db45a07de55fd2cb77b2ebee1", "html_url": "https://github.com/rust-lang/rust/commit/67eeb0a72081ae7db45a07de55fd2cb77b2ebee1"}], "stats": {"total": 84, "additions": 82, "deletions": 2}, "files": [{"sha": "f30c129c48fd21c0ab6fb8d19b6177992150a415", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3dced6f71e6e8cf8f59e3614194a61427a3a408b/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dced6f71e6e8cf8f59e3614194a61427a3a408b/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=3dced6f71e6e8cf8f59e3614194a61427a3a408b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use {Module, Resolver};\n+use {Module, ModuleKind, Resolver};\n use build_reduced_graph::BuildReducedGraphVisitor;\n use rustc::hir::def_id::{DefId, BUILTIN_MACROS_CRATE, CRATE_DEF_INDEX, DefIndex};\n use rustc::hir::def::{Def, Export};\n@@ -22,7 +22,9 @@ use syntax::ext::base::{NormalTT, SyntaxExtension};\n use syntax::ext::expand::Expansion;\n use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules;\n+use syntax::fold::Folder;\n use syntax::parse::token::intern;\n+use syntax::ptr::P;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::visit::Visitor;\n use syntax_pos::Span;\n@@ -99,6 +101,31 @@ impl<'a> base::Resolver for Resolver<'a> {\n         mark\n     }\n \n+    fn eliminate_crate_var(&mut self, item: P<ast::Item>) -> P<ast::Item> {\n+        struct EliminateCrateVar<'b, 'a: 'b>(&'b mut Resolver<'a>);\n+\n+        impl<'a, 'b> Folder for EliminateCrateVar<'a, 'b> {\n+            fn fold_path(&mut self, mut path: ast::Path) -> ast::Path {\n+                let ident = path.segments[0].identifier;\n+                if &ident.name.as_str() == \"$crate\" {\n+                    path.global = true;\n+                    let module = self.0.resolve_crate_var(ident.ctxt);\n+                    if module.is_local() {\n+                        path.segments.remove(0);\n+                    } else {\n+                        path.segments[0].identifier = match module.kind {\n+                            ModuleKind::Def(_, name) => ast::Ident::with_empty_ctxt(name),\n+                            _ => unreachable!(),\n+                        };\n+                    }\n+                }\n+                path\n+            }\n+        }\n+\n+        EliminateCrateVar(self).fold_item(item).expect_one(\"\")\n+    }\n+\n     fn visit_expansion(&mut self, mark: Mark, expansion: &Expansion) {\n         let invocation = self.invocations[&mark];\n         self.collect_def_ids(invocation, expansion);"}, {"sha": "63eee7df9e85d2632d665dee7a257ca13f7a575a", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dced6f71e6e8cf8f59e3614194a61427a3a408b/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dced6f71e6e8cf8f59e3614194a61427a3a408b/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=3dced6f71e6e8cf8f59e3614194a61427a3a408b", "patch": "@@ -517,6 +517,7 @@ pub type NamedSyntaxExtension = (Name, SyntaxExtension);\n pub trait Resolver {\n     fn next_node_id(&mut self) -> ast::NodeId;\n     fn get_module_scope(&mut self, id: ast::NodeId) -> Mark;\n+    fn eliminate_crate_var(&mut self, item: P<ast::Item>) -> P<ast::Item>;\n \n     fn visit_expansion(&mut self, mark: Mark, expansion: &Expansion);\n     fn add_macro(&mut self, scope: Mark, def: ast::MacroDef, export: bool);\n@@ -539,6 +540,7 @@ pub struct DummyResolver;\n impl Resolver for DummyResolver {\n     fn next_node_id(&mut self) -> ast::NodeId { ast::DUMMY_NODE_ID }\n     fn get_module_scope(&mut self, _id: ast::NodeId) -> Mark { Mark::root() }\n+    fn eliminate_crate_var(&mut self, item: P<ast::Item>) -> P<ast::Item> { item }\n \n     fn visit_expansion(&mut self, _invoc: Mark, _expansion: &Expansion) {}\n     fn add_macro(&mut self, _scope: Mark, _def: ast::MacroDef, _export: bool) {}"}, {"sha": "e101757ad23220dfabebc1a5a1ba707b245ca084", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dced6f71e6e8cf8f59e3614194a61427a3a408b/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dced6f71e6e8cf8f59e3614194a61427a3a408b/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=3dced6f71e6e8cf8f59e3614194a61427a3a408b", "patch": "@@ -73,7 +73,7 @@ impl MultiItemModifier for CustomDerive {\n         // Mark attributes as known, and used.\n         MarkAttrs(&self.attrs).visit_item(&item);\n \n-        let input = __internal::new_token_stream(item.clone());\n+        let input = __internal::new_token_stream(ecx.resolver.eliminate_crate_var(item.clone()));\n         let res = __internal::set_parse_sess(&ecx.parse_sess, || {\n             let inner = self.inner;\n             panic::catch_unwind(panic::AssertUnwindSafe(|| inner(input)))"}, {"sha": "969ed91f595e6d1697fc4e4ff2b80039f8b7512d", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/double.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3dced6f71e6e8cf8f59e3614194a61427a3a408b/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fdouble.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dced6f71e6e8cf8f59e3614194a61427a3a408b/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fdouble.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fdouble.rs?ref=3dced6f71e6e8cf8f59e3614194a61427a3a408b", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n+#![feature(proc_macro_lib)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_derive(Double)]\n+pub fn derive(input: TokenStream) -> TokenStream {\n+    format!(\"mod foo {{ {} }}\", input.to_string()).parse().unwrap()\n+}"}, {"sha": "d19b49ab18c075ecd07e0314f85d33e240c06b71", "filename": "src/test/run-pass-fulldeps/proc-macro/crate-var.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3dced6f71e6e8cf8f59e3614194a61427a3a408b/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcrate-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dced6f71e6e8cf8f59e3614194a61427a3a408b/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcrate-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcrate-var.rs?ref=3dced6f71e6e8cf8f59e3614194a61427a3a408b", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:double.rs\n+\n+#![feature(proc_macro)]\n+#![allow(unused)]\n+\n+#[macro_use]\n+extern crate double;\n+\n+struct Foo;\n+\n+macro_rules! m { () => {\n+    #[derive(Double)]\n+    struct Bar($crate::Foo);\n+} }\n+m!();\n+\n+fn main() {}"}]}