{"sha": "2787a285bd211ecbf75fd95d990226242005d848", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ODdhMjg1YmQyMTFlY2JmNzVmZDk1ZDk5MDIyNjI0MjAwNWQ4NDg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-09-13T10:20:39Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-09-17T19:30:58Z"}, "message": "Add `<*const T>::align_offset` and use it in `memchr`", "tree": {"sha": "1b66a4087234242d1d96fc8db30a795efd57f16d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b66a4087234242d1d96fc8db30a795efd57f16d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2787a285bd211ecbf75fd95d990226242005d848", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCABKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlm+zXIsHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MAQ7\nMQ//ROfFeTAXjgpTT3nOAA7o50fcsBUV0gM/QDldciMavCsr+uHN9itxr1kWdGzr\n0Gvkj9aMA4FxrQcWpXk0KcKlORwXKCLfxJ+OBE2Sq1VGAtxaUOSI37cwNHtAeWZy\n7+PoksiBbkfLUt6NGoTAB2yE2eeeh7jecjdB97SiSjQED1heprAK59xRLZpbXV3T\nDrqTW6Jhaza2bELZCGt8Ar2b5QAKvhg2NHD4q1jyNPGQ6DvS5nG/ZwmKnQbLWyud\ngHmMXFBXErm1e2u9WcN01esrr8ZNUICH6RUTvdVn5IotIXSwwgaT9dxpn+FPuV36\nByMo1Kjvuo2G8bx/gylv7Igy2UtjymSs0Yl0CcKb/WcLBWPI9gUQ0MrTh3DAe1NH\nUqZudOOV+Cpa8G/NZqXbZcmqe6ZbhcoaTl8LPLHnj1KGxzfF7HEqso3m8zEvQFDi\nARqo1iIRHeOz2veTlkdB6DuRxYTx4Q8dlDNNxr+IcpQX19MsuLsdxlNxb7C9VJSn\nkYAKoNIMvhyfnUOX6/vgXbCXsBG/qnVhCIDk4ivIVrrDKR+X9g+/QfyekHAy7cMC\nLUKo566Jzc5gO8dYVl1SGLKuAQK7JYUcGd1h2W1RpOU9WZjzuxz7xFdLAW0x3vGr\nYgBooSLFw2VXnbzKRZeNReGPfmwh8u9aY3vSG+MoKflCXnI=\n=MR3u\n-----END PGP SIGNATURE-----", "payload": "tree 1b66a4087234242d1d96fc8db30a795efd57f16d\nparent 1cdd68922d143c6d1f18f66572251b7078e9e850\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1505298039 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1505676658 +0200\n\nAdd `<*const T>::align_offset` and use it in `memchr`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2787a285bd211ecbf75fd95d990226242005d848", "html_url": "https://github.com/rust-lang/rust/commit/2787a285bd211ecbf75fd95d990226242005d848", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2787a285bd211ecbf75fd95d990226242005d848/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cdd68922d143c6d1f18f66572251b7078e9e850", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cdd68922d143c6d1f18f66572251b7078e9e850", "html_url": "https://github.com/rust-lang/rust/commit/1cdd68922d143c6d1f18f66572251b7078e9e850"}], "stats": {"total": 121, "additions": 80, "deletions": 41}, "files": [{"sha": "bc82f0230e5b44b1f52dcce24b15050ffc5a73d8", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2787a285bd211ecbf75fd95d990226242005d848/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2787a285bd211ecbf75fd95d990226242005d848/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=2787a285bd211ecbf75fd95d990226242005d848", "patch": "@@ -1381,38 +1381,7 @@ extern \"rust-intrinsic\" {\n }\n \n #[cfg(stage0)]\n-/// Computes the byte offset that needs to be applied to `ptr` in order to\n-/// make it aligned to `align`.\n-/// If it is not possible to align `ptr`, the implementation returns\n-/// `usize::max_value()`.\n-///\n-/// There are no guarantees whatsover that offsetting the pointer will not\n-/// overflow or go beyond the allocation that `ptr` points into.\n-/// It is up to the caller to ensure that the returned offset is correct\n-/// in all terms other than alignment.\n-///\n-/// # Examples\n-///\n-/// Accessing adjacent `u8` as `u16`\n-///\n-/// ```\n-/// # #![feature(core_intrinsics)]\n-/// # fn foo(n: usize) {\n-/// # use std::intrinsics::align_offset;\n-/// # use std::mem::align_of;\n-/// # unsafe {\n-/// let x = [5u8, 6u8, 7u8, 8u8, 9u8];\n-/// let ptr = &x[n] as *const u8;\n-/// let offset = align_offset(ptr as *const (), align_of::<u16>());\n-/// if offset < x.len() - n - 1 {\n-///     let u16_ptr = ptr.offset(offset as isize) as *const u16;\n-///     assert_ne!(*u16_ptr, 500);\n-/// } else {\n-///     // while the pointer can be aligned via `offset`, it would point\n-///     // outside the allocation\n-/// }\n-/// # } }\n-/// ```\n+/// remove me after the next release\n pub unsafe fn align_offset(ptr: *const (), align: usize) -> usize {\n     let offset = ptr as usize % align;\n     if offset == 0 {"}, {"sha": "4041a3760e5ca467fa8d1a99e4ba2bd8551366c9", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 74, "deletions": 1, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/2787a285bd211ecbf75fd95d990226242005d848/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2787a285bd211ecbf75fd95d990226242005d848/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=2787a285bd211ecbf75fd95d990226242005d848", "patch": "@@ -1064,7 +1064,43 @@ impl<T: ?Sized> *const T {\n         copy_nonoverlapping(self, dest, count)\n     }\n \n-\n+    /// Computes the byte offset that needs to be applied in order to\n+    /// make the pointer aligned to `align`.\n+    /// If it is not possible to align the pointer, the implementation returns\n+    /// `usize::max_value()`.\n+    ///\n+    /// There are no guarantees whatsover that offsetting the pointer will not\n+    /// overflow or go beyond the allocation that the pointer points into.\n+    /// It is up to the caller to ensure that the returned offset is correct\n+    /// in all terms other than alignment.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Accessing adjacent `u8` as `u16`\n+    ///\n+    /// ```\n+    /// # #![feature(align_offset)]\n+    /// # fn foo(n: usize) {\n+    /// # use std::mem::align_of;\n+    /// # unsafe {\n+    /// let x = [5u8, 6u8, 7u8, 8u8, 9u8];\n+    /// let ptr = &x[n] as *const u8;\n+    /// let offset = ptr.align_offset(align_of::<u16>());\n+    /// if offset < x.len() - n - 1 {\n+    ///     let u16_ptr = ptr.offset(offset as isize) as *const u16;\n+    ///     assert_ne!(*u16_ptr, 500);\n+    /// } else {\n+    ///     // while the pointer can be aligned via `offset`, it would point\n+    ///     // outside the allocation\n+    /// }\n+    /// # } }\n+    /// ```\n+    #[unstable(feature = \"align_offset\", issue = \"44488\")]\n+    pub fn align_offset(self, align: usize) -> usize {\n+        unsafe {\n+            intrinsics::align_offset(self as *const _, align)\n+        }\n+    }\n }\n \n #[lang = \"mut_ptr\"]\n@@ -1284,6 +1320,43 @@ impl<T: ?Sized> *mut T {\n         }\n     }\n \n+    /// Computes the byte offset that needs to be applied in order to\n+    /// make the pointer aligned to `align`.\n+    /// If it is not possible to align the pointer, the implementation returns\n+    /// `usize::max_value()`.\n+    ///\n+    /// There are no guarantees whatsover that offsetting the pointer will not\n+    /// overflow or go beyond the allocation that the pointer points into.\n+    /// It is up to the caller to ensure that the returned offset is correct\n+    /// in all terms other than alignment.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Accessing adjacent `u8` as `u16`\n+    ///\n+    /// ```\n+    /// # #![feature(align_offset)]\n+    /// # fn foo(n: usize) {\n+    /// # use std::mem::align_of;\n+    /// # unsafe {\n+    /// let x = [5u8, 6u8, 7u8, 8u8, 9u8];\n+    /// let ptr = &x[n] as *const u8;\n+    /// let offset = ptr.align_offset(align_of::<u16>());\n+    /// if offset < x.len() - n - 1 {\n+    ///     let u16_ptr = ptr.offset(offset as isize) as *const u16;\n+    ///     assert_ne!(*u16_ptr, 500);\n+    /// } else {\n+    ///     // while the pointer can be aligned via `offset`, it would point\n+    ///     // outside the allocation\n+    /// }\n+    /// # } }\n+    /// ```\n+    #[unstable(feature = \"align_offset\", issue = \"44488\")]\n+    pub fn align_offset(self, align: usize) -> usize {\n+        unsafe {\n+            intrinsics::align_offset(self as *const _, align)\n+        }\n+    }\n \n     /// Calculates the offset from a pointer (convenience for `.offset(count as isize)`).\n     ///"}, {"sha": "0d907d11cfba1a83a475be4da6db3b3f415ab407", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2787a285bd211ecbf75fd95d990226242005d848/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2787a285bd211ecbf75fd95d990226242005d848/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=2787a285bd211ecbf75fd95d990226242005d848", "patch": "@@ -23,7 +23,6 @@ use fmt;\n use iter::{Map, Cloned, FusedIterator};\n use slice::{self, SliceIndex};\n use mem;\n-use intrinsics::align_offset;\n \n pub mod pattern;\n \n@@ -1515,7 +1514,7 @@ fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {\n             let ptr = v.as_ptr();\n             let align = unsafe {\n                 // the offset is safe, because `index` is guaranteed inbounds\n-                align_offset(ptr.offset(index as isize) as *const (), usize_bytes)\n+                ptr.offset(index as isize).align_offset(usize_bytes)\n             };\n             if align == 0 {\n                 while index < blocks_end {"}, {"sha": "a3eecd46e90514ae408818e50d2fe018d87181fa", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2787a285bd211ecbf75fd95d990226242005d848/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2787a285bd211ecbf75fd95d990226242005d848/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=2787a285bd211ecbf75fd95d990226242005d848", "patch": "@@ -242,6 +242,7 @@\n #![feature(allocator_internals)]\n #![feature(allow_internal_unsafe)]\n #![feature(allow_internal_unstable)]\n+#![feature(align_offset)]\n #![feature(asm)]\n #![feature(box_syntax)]\n #![feature(cfg_target_has_atomic)]"}, {"sha": "50f998eb4867dc087476835f2feef4bd25f6056e", "filename": "src/libstd/sys_common/memchr.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2787a285bd211ecbf75fd95d990226242005d848/src%2Flibstd%2Fsys_common%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2787a285bd211ecbf75fd95d990226242005d848/src%2Flibstd%2Fsys_common%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmemchr.rs?ref=2787a285bd211ecbf75fd95d990226242005d848", "patch": "@@ -65,15 +65,12 @@ pub mod fallback {\n         let usize_bytes = mem::size_of::<usize>();\n \n         // search up to an aligned boundary\n-        let align = (ptr as usize) & (usize_bytes- 1);\n-        let mut offset;\n-        if align > 0 {\n-            offset = cmp::min(usize_bytes - align, len);\n+        let mut offset = ptr.align_offset(usize_bytes);\n+        if offset > 0 {\n+            offset = cmp::min(offset, len);\n             if let Some(index) = text[..offset].iter().position(|elt| *elt == x) {\n                 return Some(index);\n             }\n-        } else {\n-            offset = 0;\n         }\n \n         // search the body of the text"}]}