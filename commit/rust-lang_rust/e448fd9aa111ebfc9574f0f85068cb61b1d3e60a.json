{"sha": "e448fd9aa111ebfc9574f0f85068cb61b1d3e60a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NDhmZDlhYTExMWViZmM5NTc0ZjBmODUwNjhjYjYxYjFkM2U2MGE=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-26T21:06:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-26T21:06:00Z"}, "message": "Merge pull request #1992 from rust-lang-nursery/infinite_iter\n\nNew lint: (maybe_)infinite_iter", "tree": {"sha": "d62d3af3838785a6295443d4c68daad4162ab896", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d62d3af3838785a6295443d4c68daad4162ab896"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e448fd9aa111ebfc9574f0f85068cb61b1d3e60a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e448fd9aa111ebfc9574f0f85068cb61b1d3e60a", "html_url": "https://github.com/rust-lang/rust/commit/e448fd9aa111ebfc9574f0f85068cb61b1d3e60a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e448fd9aa111ebfc9574f0f85068cb61b1d3e60a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cf3f8359fc3b6988f009a5ca7ebd7336565ca92", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf3f8359fc3b6988f009a5ca7ebd7336565ca92", "html_url": "https://github.com/rust-lang/rust/commit/5cf3f8359fc3b6988f009a5ca7ebd7336565ca92"}, {"sha": "39ceca8893773e71e34e9eebc6952c71bec5bc5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/39ceca8893773e71e34e9eebc6952c71bec5bc5b", "html_url": "https://github.com/rust-lang/rust/commit/39ceca8893773e71e34e9eebc6952c71bec5bc5b"}], "stats": {"total": 384, "additions": 383, "deletions": 1}, "files": [{"sha": "8b0a1f3bee5f043d75ec12e0882413041f1e8c70", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e448fd9aa111ebfc9574f0f85068cb61b1d3e60a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e448fd9aa111ebfc9574f0f85068cb61b1d3e60a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e448fd9aa111ebfc9574f0f85068cb61b1d3e60a", "patch": "@@ -481,6 +481,7 @@ All notable changes to this project will be documented in this file.\n [`inconsistent_digit_grouping`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#inconsistent_digit_grouping\n [`indexing_slicing`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#indexing_slicing\n [`ineffective_bit_mask`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#ineffective_bit_mask\n+[`infinite_iter`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#infinite_iter\n [`inline_always`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#inline_always\n [`integer_arithmetic`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#integer_arithmetic\n [`invalid_regex`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#invalid_regex\n@@ -508,6 +509,7 @@ All notable changes to this project will be documented in this file.\n [`match_ref_pats`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#match_ref_pats\n [`match_same_arms`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#match_same_arms\n [`match_wild_err_arm`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#match_wild_err_arm\n+[`maybe_infinite_iter`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#maybe_infinite_iter\n [`mem_forget`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#mem_forget\n [`min_max`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#min_max\n [`misrefactored_assign_op`]: https://github.com/rust-lang-nursery/rust-clippy/wiki#misrefactored_assign_op"}, {"sha": "aa36871b6ddf5ed5c1f4b7f9ae958e61181c232b", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e448fd9aa111ebfc9574f0f85068cb61b1d3e60a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/e448fd9aa111ebfc9574f0f85068cb61b1d3e60a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=e448fd9aa111ebfc9574f0f85068cb61b1d3e60a", "patch": "@@ -180,7 +180,7 @@ transparently:\n \n ## Lints\n \n-There are 206 lints included in this crate:\n+There are 208 lints included in this crate:\n \n name                                                                                                                         | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -252,6 +252,7 @@ name\n [inconsistent_digit_grouping](https://github.com/rust-lang-nursery/rust-clippy/wiki#inconsistent_digit_grouping)             | warn    | integer literals with digits grouped inconsistently\n [indexing_slicing](https://github.com/rust-lang-nursery/rust-clippy/wiki#indexing_slicing)                                   | allow   | indexing/slicing usage\n [ineffective_bit_mask](https://github.com/rust-lang-nursery/rust-clippy/wiki#ineffective_bit_mask)                           | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n+[infinite_iter](https://github.com/rust-lang-nursery/rust-clippy/wiki#infinite_iter)                                         | warn    | infinite iteration\n [inline_always](https://github.com/rust-lang-nursery/rust-clippy/wiki#inline_always)                                         | warn    | use of `#[inline(always)]`\n [integer_arithmetic](https://github.com/rust-lang-nursery/rust-clippy/wiki#integer_arithmetic)                               | allow   | any integer arithmetic statement\n [invalid_regex](https://github.com/rust-lang-nursery/rust-clippy/wiki#invalid_regex)                                         | deny    | invalid regular expressions\n@@ -279,6 +280,7 @@ name\n [match_ref_pats](https://github.com/rust-lang-nursery/rust-clippy/wiki#match_ref_pats)                                       | warn    | a match or `if let` with all arms prefixed with `&` instead of deref-ing the match expression\n [match_same_arms](https://github.com/rust-lang-nursery/rust-clippy/wiki#match_same_arms)                                     | warn    | `match` with identical arm bodies\n [match_wild_err_arm](https://github.com/rust-lang-nursery/rust-clippy/wiki#match_wild_err_arm)                               | warn    | a match with `Err(_)` arm and take drastic actions\n+[maybe_infinite_iter](https://github.com/rust-lang-nursery/rust-clippy/wiki#maybe_infinite_iter)                             | allow   | possible infinite iteration\n [mem_forget](https://github.com/rust-lang-nursery/rust-clippy/wiki#mem_forget)                                               | allow   | `mem::forget` usage on `Drop` types, likely to cause memory leaks\n [min_max](https://github.com/rust-lang-nursery/rust-clippy/wiki#min_max)                                                     | warn    | `min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant\n [misrefactored_assign_op](https://github.com/rust-lang-nursery/rust-clippy/wiki#misrefactored_assign_op)                     | warn    | having a variable on both sides of an assign op"}, {"sha": "72ff75dd9948e9bd1de6bf2e42bfe37d0c6981cc", "filename": "clippy_lints/src/infinite_iter.rs", "status": "added", "additions": 232, "deletions": 0, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/e448fd9aa111ebfc9574f0f85068cb61b1d3e60a/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e448fd9aa111ebfc9574f0f85068cb61b1d3e60a/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=e448fd9aa111ebfc9574f0f85068cb61b1d3e60a", "patch": "@@ -0,0 +1,232 @@\n+use rustc::hir::*;\n+use rustc::lint::*;\n+use utils::{get_trait_def_id, implements_trait, higher, match_qpath, paths, span_lint};\n+\n+/// **What it does:** Checks for iteration that is guaranteed to be infinite.\n+///\n+/// **Why is this bad?** While there may be places where this is acceptable\n+/// (e.g. in event streams), in most cases this is simply an error.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// repeat(1_u8).iter().collect::<Vec<_>>()\n+/// ```\n+declare_lint! {\n+    pub INFINITE_ITER,\n+    Warn,\n+    \"infinite iteration\"\n+}\n+\n+/// **What it does:** Checks for iteration that may be infinite.\n+///\n+/// **Why is this bad?** While there may be places where this is acceptable\n+/// (e.g. in event streams), in most cases this is simply an error.\n+///\n+/// **Known problems:** The code may have a condition to stop iteration, but\n+/// this lint is not clever enough to analyze it.\n+///\n+/// **Example:**\n+/// ```rust\n+/// [0..].iter().zip(infinite_iter.take_while(|x| x > 5))\n+/// ```\n+declare_lint! {\n+    pub MAYBE_INFINITE_ITER,\n+    Allow,\n+    \"possible infinite iteration\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(INFINITE_ITER, MAYBE_INFINITE_ITER)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        let (lint, msg) = match complete_infinite_iter(cx, expr) {\n+            Infinite => (INFINITE_ITER, \"infinite iteration detected\"),\n+            MaybeInfinite => (MAYBE_INFINITE_ITER,\n+                        \"possible infinite iteration detected\"),\n+            Finite => { return; }\n+        };\n+        span_lint(cx, lint, expr.span, msg)\n+    }\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+enum Finiteness {\n+    Infinite,\n+    MaybeInfinite,\n+    Finite\n+}\n+\n+use self::Finiteness::{Infinite, MaybeInfinite, Finite};\n+\n+impl Finiteness {\n+    fn and(self, b: Self) -> Self {\n+        match (self, b) {\n+            (Finite, _) | (_, Finite) => Finite,\n+            (MaybeInfinite, _) | (_, MaybeInfinite) => MaybeInfinite,\n+            _ => Infinite\n+        }\n+    }\n+\n+    fn or(self, b: Self) -> Self {\n+        match (self, b) {\n+            (Infinite, _) | (_, Infinite) => Infinite,\n+            (MaybeInfinite, _) | (_, MaybeInfinite) => MaybeInfinite,\n+            _ => Finite\n+        }\n+    }\n+}\n+\n+impl From<bool> for Finiteness {\n+    fn from(b: bool) -> Self {\n+        if b { Infinite } else { Finite }\n+    }\n+}\n+\n+/// This tells us what to look for to know if the iterator returned by\n+/// this method is infinite\n+#[derive(Copy, Clone)]\n+enum Heuristic {\n+    /// infinite no matter what\n+    Always,\n+    /// infinite if the first argument is\n+    First,\n+    /// infinite if any of the supplied arguments is\n+    Any,\n+    /// infinite if all of the supplied arguments are\n+    All\n+}\n+\n+use self::Heuristic::{Always, First, Any, All};\n+\n+/// a slice of (method name, number of args, heuristic, bounds) tuples\n+/// that will be used to determine whether the method in question\n+/// returns an infinite or possibly infinite iterator. The finiteness\n+/// is an upper bound, e.g. some methods can return a possibly\n+/// infinite iterator at worst, e.g. `take_while`.\n+static HEURISTICS : &[(&str, usize, Heuristic, Finiteness)] = &[\n+    (\"zip\", 2, All, Infinite),\n+    (\"chain\", 2, Any, Infinite),\n+    (\"cycle\", 1, Always, Infinite),\n+    (\"map\", 2, First, Infinite),\n+    (\"by_ref\", 1, First, Infinite),\n+    (\"cloned\", 1, First, Infinite),\n+    (\"rev\", 1, First, Infinite),\n+    (\"inspect\", 1, First, Infinite),\n+    (\"enumerate\", 1, First, Infinite),\n+    (\"peekable\", 2, First, Infinite),\n+    (\"fuse\", 1, First, Infinite),\n+    (\"skip\", 2, First, Infinite),\n+    (\"skip_while\", 1, First, Infinite),\n+    (\"filter\", 2, First, Infinite),\n+    (\"filter_map\", 2, First, Infinite),\n+    (\"flat_map\", 2, First, Infinite),\n+    (\"unzip\", 1, First, Infinite),\n+    (\"take_while\", 2, First, MaybeInfinite),\n+    (\"scan\", 3, First, MaybeInfinite)\n+];\n+\n+fn is_infinite(cx: &LateContext, expr: &Expr) -> Finiteness {\n+    match expr.node {\n+        ExprMethodCall(ref method, _, ref args) => {\n+            for &(name, len, heuristic, cap) in HEURISTICS.iter() {\n+                if method.name == name && args.len() == len {\n+                    return (match heuristic {\n+                        Always => Infinite,\n+                        First => is_infinite(cx, &args[0]),\n+                        Any => is_infinite(cx, &args[0]).or(is_infinite(cx, &args[1])),\n+                        All => is_infinite(cx, &args[0]).and(is_infinite(cx, &args[1])),\n+                    }).and(cap);\n+                }\n+            }\n+            if method.name == \"flat_map\" && args.len() == 2 {\n+                if let ExprClosure(_, _, body_id, _) = args[1].node {\n+                    let body = cx.tcx.hir.body(body_id);\n+                    return is_infinite(cx, &body.value);\n+                }\n+            }\n+            Finite\n+        },\n+        ExprBlock(ref block) =>\n+            block.expr.as_ref().map_or(Finite, |e| is_infinite(cx, e)),\n+        ExprBox(ref e) | ExprAddrOf(_, ref e) => is_infinite(cx, e),\n+        ExprCall(ref path, _) => {\n+            if let ExprPath(ref qpath) = path.node {\n+                match_qpath(qpath, &paths::REPEAT).into()\n+            } else { Finite }\n+        },\n+        ExprStruct(..) => {\n+            higher::range(expr).map_or(false, |r| r.end.is_none()).into()\n+        },\n+        _ => Finite\n+    }\n+}\n+\n+/// the names and argument lengths of methods that *may* exhaust their\n+/// iterators\n+static POSSIBLY_COMPLETING_METHODS : &[(&str, usize)] = &[\n+    (\"find\", 2),\n+    (\"rfind\", 2),\n+    (\"position\", 2),\n+    (\"rposition\", 2),\n+    (\"any\", 2),\n+    (\"all\", 2)\n+];\n+\n+/// the names and argument lengths of methods that *always* exhaust\n+/// their iterators\n+static COMPLETING_METHODS : &[(&str, usize)] = &[\n+    (\"count\", 1),\n+    (\"collect\", 1),\n+    (\"fold\", 3),\n+    (\"for_each\", 2),\n+    (\"partition\", 2),\n+    (\"max\", 1),\n+    (\"max_by\", 2),\n+    (\"max_by_key\", 2),\n+    (\"min\", 1),\n+    (\"min_by\", 2),\n+    (\"min_by_key\", 2),\n+    (\"sum\", 1),\n+    (\"product\", 1)\n+];\n+\n+fn complete_infinite_iter(cx: &LateContext, expr: &Expr) -> Finiteness {\n+    match expr.node {\n+        ExprMethodCall(ref method, _, ref args) => {\n+            for &(name, len) in COMPLETING_METHODS.iter() {\n+                if method.name == name && args.len() == len {\n+                    return is_infinite(cx, &args[0]);\n+                }\n+            }\n+            for &(name, len) in POSSIBLY_COMPLETING_METHODS.iter() {\n+                if method.name == name && args.len() == len {\n+                    return MaybeInfinite.and(is_infinite(cx, &args[0]));\n+                }\n+            }\n+            if method.name == \"last\" && args.len() == 1 &&\n+                    get_trait_def_id(cx, &paths::DOUBLE_ENDED_ITERATOR).map_or(false,\n+                        |id| !implements_trait(cx,\n+                                               cx.tables.expr_ty(&args[0]),\n+                                               id,\n+                                               &[])) {\n+                return is_infinite(cx, &args[0]);\n+            }\n+        },\n+        ExprBinary(op, ref l, ref r) => {\n+            if op.node.is_comparison() {\n+                return is_infinite(cx, l).and(is_infinite(cx, r)).and(MaybeInfinite)\n+            }\n+        }, //TODO: ExprLoop + Match\n+        _ => ()\n+    }\n+    Finite\n+}"}, {"sha": "892d664aabbc54bc2fb9eaf1ae5c82cb92a8fe90", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e448fd9aa111ebfc9574f0f85068cb61b1d3e60a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e448fd9aa111ebfc9574f0f85068cb61b1d3e60a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e448fd9aa111ebfc9574f0f85068cb61b1d3e60a", "patch": "@@ -97,6 +97,7 @@ pub mod functions;\n pub mod identity_op;\n pub mod if_let_redundant_pattern_matching;\n pub mod if_not_else;\n+pub mod infinite_iter;\n pub mod items_after_statements;\n pub mod large_enum_variant;\n pub mod len_zero;\n@@ -323,6 +324,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_early_lint_pass(box literal_digit_grouping::LiteralDigitGrouping);\n     reg.register_late_lint_pass(box use_self::UseSelf);\n     reg.register_late_lint_pass(box bytecount::ByteCount);\n+    reg.register_late_lint_pass(box infinite_iter::Pass);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -338,6 +340,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         enum_variants::PUB_ENUM_VARIANT_NAMES,\n         enum_variants::STUTTER,\n         if_not_else::IF_NOT_ELSE,\n+        infinite_iter::MAYBE_INFINITE_ITER,\n         items_after_statements::ITEMS_AFTER_STATEMENTS,\n         matches::SINGLE_MATCH_ELSE,\n         mem_forget::MEM_FORGET,\n@@ -422,6 +425,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         functions::TOO_MANY_ARGUMENTS,\n         identity_op::IDENTITY_OP,\n         if_let_redundant_pattern_matching::IF_LET_REDUNDANT_PATTERN_MATCHING,\n+        infinite_iter::INFINITE_ITER,\n         large_enum_variant::LARGE_ENUM_VARIANT,\n         len_zero::LEN_WITHOUT_IS_EMPTY,\n         len_zero::LEN_ZERO,"}, {"sha": "9057920098e682c5f646053cfa691a62a7978cb6", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e448fd9aa111ebfc9574f0f85068cb61b1d3e60a/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e448fd9aa111ebfc9574f0f85068cb61b1d3e60a/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=e448fd9aa111ebfc9574f0f85068cb61b1d3e60a", "patch": "@@ -21,6 +21,7 @@ pub const CSTRING_NEW: [&'static str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"n\n pub const DEBUG_FMT_METHOD: [&'static str; 4] = [\"core\", \"fmt\", \"Debug\", \"fmt\"];\n pub const DEFAULT_TRAIT: [&'static str; 3] = [\"core\", \"default\", \"Default\"];\n pub const DISPLAY_FMT_METHOD: [&'static str; 4] = [\"core\", \"fmt\", \"Display\", \"fmt\"];\n+pub const DOUBLE_ENDED_ITERATOR: [&'static str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleEndedIterator\"];\n pub const DROP: [&'static str; 3] = [\"core\", \"mem\", \"drop\"];\n pub const FMT_ARGUMENTS_NEWV1: [&'static str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1\"];\n pub const FMT_ARGUMENTV1_NEW: [&'static str; 4] = [\"core\", \"fmt\", \"ArgumentV1\", \"new\"];\n@@ -65,6 +66,7 @@ pub const REGEX_BYTES_NEW: [&'static str; 4] = [\"regex\", \"re_bytes\", \"Regex\", \"n\n pub const REGEX_BYTES_SET_NEW: [&'static str; 5] = [\"regex\", \"re_set\", \"bytes\", \"RegexSet\", \"new\"];\n pub const REGEX_NEW: [&'static str; 4] = [\"regex\", \"re_unicode\", \"Regex\", \"new\"];\n pub const REGEX_SET_NEW: [&'static str; 5] = [\"regex\", \"re_set\", \"unicode\", \"RegexSet\", \"new\"];\n+pub const REPEAT: [&'static str; 3] = [\"core\", \"iter\", \"repeat\"];\n pub const RESULT: [&'static str; 3] = [\"core\", \"result\", \"Result\"];\n pub const RESULT_ERR: [&'static str; 4] = [\"core\", \"result\", \"Result\", \"Err\"];\n pub const RESULT_OK: [&'static str; 4] = [\"core\", \"result\", \"Result\", \"Ok\"];"}, {"sha": "fd433edf98d2db15bd9146da9facd2fe81e468e4", "filename": "tests/ui/infinite_iter.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e448fd9aa111ebfc9574f0f85068cb61b1d3e60a/tests%2Fui%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e448fd9aa111ebfc9574f0f85068cb61b1d3e60a/tests%2Fui%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.rs?ref=e448fd9aa111ebfc9574f0f85068cb61b1d3e60a", "patch": "@@ -0,0 +1,40 @@\n+#![feature(plugin)]\n+#![feature(iterator_for_each)]\n+#![plugin(clippy)]\n+use std::iter::repeat;\n+\n+fn square_is_lower_64(x: &u32) -> bool { x * x < 64 }\n+\n+#[allow(maybe_infinite_iter)]\n+#[deny(infinite_iter)]\n+fn infinite_iters() {\n+    repeat(0_u8).collect::<Vec<_>>(); // infinite iter\n+    (0..8_u32).take_while(square_is_lower_64).cycle().count(); // infinite iter\n+    (0..8_u64).chain(0..).max(); // infinite iter\n+    (0_usize..).chain([0usize, 1, 2].iter().cloned()).skip_while(|x| *x != 42).min(); // infinite iter\n+    (0..8_u32).rev().cycle().map(|x| x + 1_u32).for_each(|x| println!(\"{}\", x)); // infinite iter\n+    (0..3_u32).flat_map(|x| x..).sum::<u32>(); // infinite iter\n+    (0_usize..).flat_map(|x| 0..x).product::<usize>();  // infinite iter\n+    (0_u64..).filter(|x| x % 2 == 0).last(); // infinite iter\n+    (0..42_u64).by_ref().last(); // not an infinite, because ranges are double-ended\n+    (0..).next(); // iterator is not exhausted\n+}\n+\n+#[deny(maybe_infinite_iter)]\n+fn potential_infinite_iters() {\n+    (0..).zip((0..).take_while(square_is_lower_64)).count(); // maybe infinite iter\n+    repeat(42).take_while(|x| *x == 42).chain(0..42).max(); // maybe infinite iter\n+    (1..).scan(0, |state, x| { *state += x; Some(*state) }).min(); // maybe infinite iter\n+    (0..).find(|x| *x == 24); // maybe infinite iter\n+    (0..).position(|x| x == 24); // maybe infinite iter\n+    (0..).any(|x| x == 24); // maybe infinite iter\n+    (0..).all(|x| x == 24); // maybe infinite iter\n+\n+    (0..).zip(0..42).take_while(|&(x, _)| x != 42).count(); // not infinite\n+    repeat(42).take_while(|x| *x == 42).next(); // iterator is not exhausted\n+}\n+\n+fn main() {\n+    infinite_iters();\n+    potential_infinite_iters();\n+}"}, {"sha": "b3d2f08a865746a21ec2c2f848524097446db322", "filename": "tests/ui/infinite_iter.stderr", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/e448fd9aa111ebfc9574f0f85068cb61b1d3e60a/tests%2Fui%2Finfinite_iter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e448fd9aa111ebfc9574f0f85068cb61b1d3e60a/tests%2Fui%2Finfinite_iter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.stderr?ref=e448fd9aa111ebfc9574f0f85068cb61b1d3e60a", "patch": "@@ -0,0 +1,100 @@\n+error: you are collect()ing an iterator and throwing away the result. Consider using an explicit for loop to exhaust the iterator\n+  --> $DIR/infinite_iter.rs:11:5\n+   |\n+11 |     repeat(0_u8).collect::<Vec<_>>(); // infinite iter\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D unused-collect` implied by `-D warnings`\n+\n+error: infinite iteration detected\n+  --> $DIR/infinite_iter.rs:11:5\n+   |\n+11 |     repeat(0_u8).collect::<Vec<_>>(); // infinite iter\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/infinite_iter.rs:9:8\n+   |\n+9  | #[deny(infinite_iter)]\n+   |        ^^^^^^^^^^^^^\n+\n+error: infinite iteration detected\n+  --> $DIR/infinite_iter.rs:12:5\n+   |\n+12 |     (0..8_u32).take_while(square_is_lower_64).cycle().count(); // infinite iter\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: infinite iteration detected\n+  --> $DIR/infinite_iter.rs:13:5\n+   |\n+13 |     (0..8_u64).chain(0..).max(); // infinite iter\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: infinite iteration detected\n+  --> $DIR/infinite_iter.rs:15:5\n+   |\n+15 |     (0..8_u32).rev().cycle().map(|x| x + 1_u32).for_each(|x| println!(\"{}\", x)); // infinite iter\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: infinite iteration detected\n+  --> $DIR/infinite_iter.rs:17:5\n+   |\n+17 |     (0_usize..).flat_map(|x| 0..x).product::<usize>();  // infinite iter\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: infinite iteration detected\n+  --> $DIR/infinite_iter.rs:18:5\n+   |\n+18 |     (0_u64..).filter(|x| x % 2 == 0).last(); // infinite iter\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: possible infinite iteration detected\n+  --> $DIR/infinite_iter.rs:25:5\n+   |\n+25 |     (0..).zip((0..).take_while(square_is_lower_64)).count(); // maybe infinite iter\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/infinite_iter.rs:23:8\n+   |\n+23 | #[deny(maybe_infinite_iter)]\n+   |        ^^^^^^^^^^^^^^^^^^^\n+\n+error: possible infinite iteration detected\n+  --> $DIR/infinite_iter.rs:26:5\n+   |\n+26 |     repeat(42).take_while(|x| *x == 42).chain(0..42).max(); // maybe infinite iter\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: possible infinite iteration detected\n+  --> $DIR/infinite_iter.rs:27:5\n+   |\n+27 |     (1..).scan(0, |state, x| { *state += x; Some(*state) }).min(); // maybe infinite iter\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: possible infinite iteration detected\n+  --> $DIR/infinite_iter.rs:28:5\n+   |\n+28 |     (0..).find(|x| *x == 24); // maybe infinite iter\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: possible infinite iteration detected\n+  --> $DIR/infinite_iter.rs:29:5\n+   |\n+29 |     (0..).position(|x| x == 24); // maybe infinite iter\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: possible infinite iteration detected\n+  --> $DIR/infinite_iter.rs:30:5\n+   |\n+30 |     (0..).any(|x| x == 24); // maybe infinite iter\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: possible infinite iteration detected\n+  --> $DIR/infinite_iter.rs:31:5\n+   |\n+31 |     (0..).all(|x| x == 24); // maybe infinite iter\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 14 previous errors\n+"}]}