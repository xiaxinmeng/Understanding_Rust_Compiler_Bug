{"sha": "4694fa4f3dc0044451764b6afa170a68f0125a57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2OTRmYTRmM2RjMDA0NDQ1MTc2NGI2YWZhMTcwYTY4ZjAxMjVhNTc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-14T14:45:20Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-14T14:45:20Z"}, "message": "Move const val handling to constant.rs", "tree": {"sha": "031570be793ab2d749781b2cec1a1392c408709a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/031570be793ab2d749781b2cec1a1392c408709a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4694fa4f3dc0044451764b6afa170a68f0125a57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4694fa4f3dc0044451764b6afa170a68f0125a57", "html_url": "https://github.com/rust-lang/rust/commit/4694fa4f3dc0044451764b6afa170a68f0125a57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4694fa4f3dc0044451764b6afa170a68f0125a57/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a95a6729b1c5d8b0cf6c43a35824462a330082e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a95a6729b1c5d8b0cf6c43a35824462a330082e8", "html_url": "https://github.com/rust-lang/rust/commit/a95a6729b1c5d8b0cf6c43a35824462a330082e8"}], "stats": {"total": 72, "additions": 39, "deletions": 33}, "files": [{"sha": "c7f07542b0e84c3c551275426a53b701bcb0e35a", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4694fa4f3dc0044451764b6afa170a68f0125a57/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4694fa4f3dc0044451764b6afa170a68f0125a57/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=4694fa4f3dc0044451764b6afa170a68f0125a57", "patch": "@@ -497,46 +497,14 @@ fn trans_place<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, place: &Place<'tcx>)\n }\n \n fn trans_operand<'a, 'tcx>(fx: &mut FunctionCx<'a, 'tcx>, operand: &Operand<'tcx>) -> CValue<'tcx> {\n-    use rustc::mir::interpret::{Scalar, ConstValue, GlobalId};\n-\n     match operand {\n         Operand::Move(place) |\n         Operand::Copy(place) => {\n             let cplace = trans_place(fx, place);\n             cplace.to_cvalue(fx)\n         },\n         Operand::Constant(const_) => {\n-            let value = match const_.literal {\n-                Literal::Value { value } => value,\n-                Literal::Promoted { index } => fx\n-                    .tcx\n-                    .const_eval(ParamEnv::reveal_all().and(GlobalId {\n-                        instance: fx.instance,\n-                        promoted: Some(index),\n-                    }))\n-                    .unwrap(),\n-            };\n-\n-            let layout = fx.layout_of(const_.ty);\n-            match const_.ty.sty {\n-                TypeVariants::TyBool => {\n-                    let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n-                    CValue::const_val(fx, const_.ty, bits as u64 as i64)\n-                }\n-                TypeVariants::TyUint(_) => {\n-                    let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n-                    CValue::const_val(fx, const_.ty, bits as u64 as i64)\n-                }\n-                TypeVariants::TyInt(_) => {\n-                    let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n-                    CValue::const_val(fx, const_.ty, bits as i128 as i64)\n-                }\n-                TypeVariants::TyFnDef(def_id, substs) => {\n-                    let func_ref = fx.get_function_ref(Instance::new(def_id, substs));\n-                    CValue::Func(func_ref, fx.layout_of(const_.ty))\n-                }\n-                _ => unimplemented!(\"value {:?} ty {:?}\", value, const_.ty),\n-            }\n+            ::constant::trans_constant(fx, const_)\n         }\n     }\n }"}, {"sha": "ab3e4376a820fee8c4afa10231621b9cc140d52f", "filename": "src/constant.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4694fa4f3dc0044451764b6afa170a68f0125a57/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4694fa4f3dc0044451764b6afa170a68f0125a57/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=4694fa4f3dc0044451764b6afa170a68f0125a57", "patch": "@@ -0,0 +1,37 @@\n+use prelude::*;\n+\n+pub fn trans_constant<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, const_: &Constant<'tcx>) -> CValue<'tcx> {\n+    use rustc::mir::interpret::{Scalar, ConstValue, GlobalId};\n+\n+    let value = match const_.literal {\n+        Literal::Value { value } => value,\n+        Literal::Promoted { index } => fx\n+            .tcx\n+            .const_eval(ParamEnv::reveal_all().and(GlobalId {\n+                instance: fx.instance,\n+                promoted: Some(index),\n+            }))\n+            .unwrap(),\n+    };\n+\n+    let layout = fx.layout_of(const_.ty);\n+    match const_.ty.sty {\n+        TypeVariants::TyBool => {\n+            let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n+            CValue::const_val(fx, const_.ty, bits as u64 as i64)\n+        }\n+        TypeVariants::TyUint(_) => {\n+            let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n+            CValue::const_val(fx, const_.ty, bits as u64 as i64)\n+        }\n+        TypeVariants::TyInt(_) => {\n+            let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n+            CValue::const_val(fx, const_.ty, bits as i128 as i64)\n+        }\n+        TypeVariants::TyFnDef(def_id, substs) => {\n+            let func_ref = fx.get_function_ref(Instance::new(def_id, substs));\n+            CValue::Func(func_ref, fx.layout_of(const_.ty))\n+        }\n+        _ => unimplemented!(\"value {:?} ty {:?}\", value, const_.ty),\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "e8cab41d81074e38ad5797c21d00c567f94b20c9", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4694fa4f3dc0044451764b6afa170a68f0125a57/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4694fa4f3dc0044451764b6afa170a68f0125a57/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4694fa4f3dc0044451764b6afa170a68f0125a57", "patch": "@@ -34,6 +34,7 @@ use std::fs::File;\n use std::io::Write;\n \n mod base;\n+mod constant;\n mod common;\n mod pretty_clif;\n "}]}