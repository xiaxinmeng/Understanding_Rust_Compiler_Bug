{"sha": "743964ad3fe566ca2ce5c2de14f8733887d283fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0Mzk2NGFkM2ZlNTY2Y2EyY2U1YzJkZTE0Zjg3MzM4ODdkMjgzZmQ=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-09T15:25:41Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-27T19:50:52Z"}, "message": "Implement core::intrinsics::caller_location.\n\nReturns a `&core::panic::Location` corresponding to where it was\ncalled, also making `Location` a lang item.", "tree": {"sha": "3f8e84bcab7700d4d5a7c25d330c3338888b9605", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f8e84bcab7700d4d5a7c25d330c3338888b9605"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/743964ad3fe566ca2ce5c2de14f8733887d283fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/743964ad3fe566ca2ce5c2de14f8733887d283fd", "html_url": "https://github.com/rust-lang/rust/commit/743964ad3fe566ca2ce5c2de14f8733887d283fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/743964ad3fe566ca2ce5c2de14f8733887d283fd/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcf516d827300d21eb9f6312e799578b6f359d5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf516d827300d21eb9f6312e799578b6f359d5d", "html_url": "https://github.com/rust-lang/rust/commit/fcf516d827300d21eb9f6312e799578b6f359d5d"}], "stats": {"total": 98, "additions": 95, "deletions": 3}, "files": [{"sha": "4e0f18b88fe0a45e256638704c64e7d135ef2d35", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=743964ad3fe566ca2ce5c2de14f8733887d283fd", "patch": "@@ -696,6 +696,10 @@ extern \"rust-intrinsic\" {\n     /// This will statically either panic, or do nothing.\n     pub fn panic_if_uninhabited<T>();\n \n+    /// Gets a reference to a static `Location` indicating where it was called.\n+    #[cfg(not(bootstrap))]\n+    pub fn caller_location() -> &'static crate::panic::Location<'static>;\n+\n     /// Creates a value initialized to zero.\n     ///\n     /// `init` is unsafe because it returns a zeroed-out datum,"}, {"sha": "9428ff3ef15c4583c01808f3f9ae8ceb8dae402d", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=743964ad3fe566ca2ce5c2de14f8733887d283fd", "patch": "@@ -162,6 +162,7 @@ impl fmt::Display for PanicInfo<'_> {\n ///\n /// panic!(\"Normal panic\");\n /// ```\n+#[cfg_attr(not(bootstrap), lang = \"panic_location\")]\n #[derive(Debug)]\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n pub struct Location<'a> {"}, {"sha": "a17b5a115b86bd3a9c6d079f900caf94fc12a125", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=743964ad3fe566ca2ce5c2de14f8733887d283fd", "patch": "@@ -366,6 +366,7 @@ language_item_table! {\n     PanicFnLangItem,             \"panic\",              panic_fn,                Target::Fn;\n     PanicBoundsCheckFnLangItem,  \"panic_bounds_check\", panic_bounds_check_fn,   Target::Fn;\n     PanicInfoLangItem,           \"panic_info\",         panic_info,              Target::Struct;\n+    PanicLocationLangItem,       \"panic_location\",     panic_location,          Target::Struct;\n     PanicImplLangItem,           \"panic_impl\",         panic_impl,              Target::Fn;\n     // Libstd panic entry point. Necessary for const eval to be able to catch it\n     BeginPanicFnLangItem,        \"begin_panic\",        begin_panic_fn,          Target::Fn;"}, {"sha": "ffaf8050bcbb20f12b28109c2cc1f816b1d4ce65", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=743964ad3fe566ca2ce5c2de14f8733887d283fd", "patch": "@@ -2,6 +2,7 @@ use crate::llvm::{AtomicRmwBinOp, AtomicOrdering, SynchronizationScope};\n use crate::llvm::{self, False, BasicBlock};\n use crate::common::Funclet;\n use crate::context::CodegenCx;\n+use crate::syntax_pos::Pos;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n@@ -1068,6 +1069,20 @@ impl StaticBuilderMethods for Builder<'a, 'll, 'tcx> {\n         self.cx().get_static(def_id)\n     }\n \n+    fn static_panic_location(&mut self, loc: &syntax::source_map::Loc) -> Self::Value {\n+        let filename = Symbol::intern(&loc.file.name.to_string());\n+        let filename = self.const_str(filename);\n+        let line = self.const_u32(loc.line as u32);\n+        let col = self.const_u32(loc.col.to_usize() as u32 + 1);\n+        let struct_ = self.const_struct(&[filename.0, filename.1, line, col], false);\n+\n+        let align = self.tcx.data_layout.aggregate_align.abi\n+            .max(self.tcx.data_layout.i32_align.abi)\n+            .max(self.tcx.data_layout.pointer_align.abi);\n+        // FIXME(eddyb) move this into miri, it can be correct if e.g. field order changes\n+        self.static_addr_of(struct_, align, Some(\"panic_loc\"))\n+    }\n+\n     fn static_panic_msg(\n         &mut self,\n         msg: Option<Symbol>,"}, {"sha": "b4b82f67c74b34198855c5622d3c49c2b5643fd2", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=743964ad3fe566ca2ce5c2de14f8733887d283fd", "patch": "@@ -237,6 +237,13 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         unsafe { llvm::LLVMConstReal(t, val) }\n     }\n \n+    fn const_str(&self, s: Symbol) -> (&'ll Value, &'ll Value) {\n+        let len = s.as_str().len();\n+        let cs = consts::ptrcast(self.const_cstr(s, false),\n+            self.type_ptr_to(self.layout_of(self.tcx.mk_str()).llvm_type(self)));\n+        (cs, self.const_usize(len as u64))\n+    }\n+\n     fn const_struct(\n         &self,\n         elts: &[&'ll Value],"}, {"sha": "22ea6a395521613198c8d92171815acfb9f708b7", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=743964ad3fe566ca2ce5c2de14f8733887d283fd", "patch": "@@ -613,6 +613,22 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             ReturnDest::Nothing\n         };\n \n+        if intrinsic == Some(\"caller_location\") {\n+            if let Some((_, target)) = destination.as_ref() {\n+                let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n+                let location = bx.static_panic_location(&loc);\n+\n+                if let ReturnDest::IndirectOperand(tmp, _) = ret_dest {\n+                    Immediate(location).store(&mut bx, tmp);\n+                }\n+                self.store_return(&mut bx, ret_dest, &fn_ty.ret, location);\n+\n+                helper.maybe_sideeffect(self.mir, &mut bx, &[*target]);\n+                helper.funclet_br(self, &mut bx, *target);\n+            }\n+            return;\n+        }\n+\n         if intrinsic.is_some() && intrinsic != Some(\"drop_in_place\") {\n             let dest = match ret_dest {\n                 _ if fn_ty.ret.is_indirect() => llargs[0],"}, {"sha": "8c462e77d5e0533973e08ea82a002128670cfb2d", "filename": "src/librustc_codegen_ssa/traits/consts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs?ref=743964ad3fe566ca2ce5c2de14f8733887d283fd", "patch": "@@ -3,6 +3,7 @@ use crate::mir::place::PlaceRef;\n use rustc::mir::interpret::Allocation;\n use rustc::mir::interpret::Scalar;\n use rustc::ty::layout;\n+use syntax_pos::Symbol;\n \n pub trait ConstMethods<'tcx>: BackendTypes {\n     // Constant constructors\n@@ -19,6 +20,7 @@ pub trait ConstMethods<'tcx>: BackendTypes {\n     fn const_u8(&self, i: u8) -> Self::Value;\n     fn const_real(&self, t: Self::Type, val: f64) -> Self::Value;\n \n+    fn const_str(&self, s: Symbol) -> (Self::Value, Self::Value);\n     fn const_struct(&self, elts: &[Self::Value], packed: bool) -> Self::Value;\n \n     fn const_to_opt_uint(&self, v: Self::Value) -> Option<u64>;"}, {"sha": "b51f15b5823e2a21d46b7c4521f75ef8d385e6be", "filename": "src/librustc_codegen_ssa/traits/statics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs?ref=743964ad3fe566ca2ce5c2de14f8733887d283fd", "patch": "@@ -1,4 +1,5 @@\n use super::BackendTypes;\n+use syntax::source_map::Loc;\n use syntax_pos::symbol::Symbol;\n use rustc::hir::def_id::DefId;\n use rustc::ty::layout::Align;\n@@ -10,6 +11,7 @@ pub trait StaticMethods: BackendTypes {\n \n pub trait StaticBuilderMethods: BackendTypes {\n     fn get_static(&mut self, def_id: DefId) -> Self::Value;\n+    fn static_panic_location(&mut self, loc: &Loc) -> Self::Value;\n     fn static_panic_msg(\n         &mut self,\n         msg: Option<Symbol>,"}, {"sha": "eeaa3c6792d3cf15f6776b97aa012ae3b10a196d", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=743964ad3fe566ca2ce5c2de14f8733887d283fd", "patch": "@@ -9,6 +9,7 @@ use std::convert::TryInto;\n \n use rustc::hir::def::DefKind;\n use rustc::hir::def_id::DefId;\n+use rustc::middle::lang_items::PanicLocationLangItem;\n use rustc::mir::interpret::{ConstEvalErr, ErrorHandled, ScalarMaybeUndef};\n use rustc::mir;\n use rustc::ty::{self, Ty, TyCtxt, subst::Subst};\n@@ -505,6 +506,28 @@ pub fn const_field<'tcx>(\n     op_to_const(&ecx, field)\n }\n \n+pub fn const_caller_location<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    (file, line, col): (Symbol, u32, u32),\n+) -> &'tcx ty::Const<'tcx> {\n+    trace!(\"const_caller_location: {}:{}:{}\", file, line, col);\n+    let mut ecx = mk_eval_cx(tcx, DUMMY_SP, ty::ParamEnv::reveal_all());\n+\n+    let loc_ty = tcx.mk_imm_ref(\n+        tcx.lifetimes.re_static,\n+        tcx.type_of(tcx.require_lang_item(PanicLocationLangItem, None))\n+            .subst(tcx, tcx.mk_substs([tcx.lifetimes.re_static.into()].iter())),\n+    );\n+    let loc_place = ecx.alloc_caller_location(file, line, col).unwrap();\n+    intern_const_alloc_recursive(&mut ecx, None, loc_place).unwrap();\n+    let loc_const = ty::Const {\n+        ty: loc_ty,\n+        val: ConstValue::Scalar(loc_place.ptr.into()),\n+    };\n+\n+    tcx.mk_const(loc_const)\n+}\n+\n // this function uses `unwrap` copiously, because an already validated constant must have valid\n // fields and can thus never fail outside of compiler bugs\n pub fn const_variant_index<'tcx>("}, {"sha": "2c5757b1c9fd27512326b8d12b6c7c88510fc282", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=743964ad3fe566ca2ce5c2de14f8733887d283fd", "patch": "@@ -1,6 +1,8 @@\n //! Type-checking for the rust-intrinsic and platform-intrinsic\n //! intrinsics that the compiler exposes.\n \n+use rustc::hir::{self, Mutability};\n+use rustc::middle::lang_items::PanicLocationLangItem;\n use rustc::traits::{ObligationCause, ObligationCauseCode};\n use rustc::ty::{self, TyCtxt, Ty};\n use rustc::ty::subst::Subst;\n@@ -9,8 +11,6 @@ use crate::require_same_types;\n use rustc_target::spec::abi::Abi;\n use syntax::symbol::Symbol;\n \n-use rustc::hir;\n-\n use std::iter;\n \n fn equate_intrinsic_type<'tcx>(\n@@ -65,7 +65,7 @@ fn equate_intrinsic_type<'tcx>(\n /// Returns `true` if the given intrinsic is unsafe to call or not.\n pub fn intrinsic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n     match intrinsic {\n-        \"size_of\" | \"min_align_of\" | \"needs_drop\" |\n+        \"size_of\" | \"min_align_of\" | \"needs_drop\" | \"caller_location\" |\n         \"add_with_overflow\" | \"sub_with_overflow\" | \"mul_with_overflow\" |\n         \"wrapping_add\" | \"wrapping_sub\" | \"wrapping_mul\" |\n         \"saturating_add\" | \"saturating_sub\" |\n@@ -143,6 +143,18 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n                  ], tcx.types.usize)\n             }\n             \"rustc_peek\" => (1, vec![param(0)], param(0)),\n+            \"caller_location\" => (\n+                0,\n+                vec![],\n+                tcx.mk_ref(\n+                    tcx.lifetimes.re_static,\n+                    ty::TypeAndMut {\n+                        mutbl: Mutability::MutImmutable,\n+                        ty: tcx.type_of(tcx.require_lang_item(PanicLocationLangItem, None))\n+                            .subst(tcx, tcx.mk_substs([tcx.lifetimes.re_static.into()].iter())),\n+                    },\n+                ),\n+            ),\n             \"panic_if_uninhabited\" => (1, Vec::new(), tcx.mk_unit()),\n             \"init\" => (1, Vec::new(), param(0)),\n             \"uninit\" => (1, Vec::new(), param(0)),"}, {"sha": "ab6c59384c43bf4161347f180361d9baceba0347", "filename": "src/test/ui/rfc-2091-track-caller/caller-location-intrinsic.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743964ad3fe566ca2ce5c2de14f8733887d283fd/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-intrinsic.rs?ref=743964ad3fe566ca2ce5c2de14f8733887d283fd", "patch": "@@ -0,0 +1,9 @@\n+// run-pass\n+\n+#![feature(core_intrinsics)]\n+fn main() {\n+    let loc = core::intrinsics::caller_location();\n+    assert_eq!(loc.file(), file!());\n+    assert_eq!(loc.line(), 5);\n+    assert_eq!(loc.column(), 15);\n+}"}]}