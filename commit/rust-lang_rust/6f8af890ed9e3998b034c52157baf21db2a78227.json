{"sha": "6f8af890ed9e3998b034c52157baf21db2a78227", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmOGFmODkwZWQ5ZTM5OThiMDM0YzUyMTU3YmFmMjFkYjJhNzgyMjc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-04T15:23:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-04T15:23:53Z"}, "message": "Merge #7154\n\n7154: Show goto type actions for Const and TypeParams r=matklad a=Veykril\n\nShows goto type actions for type parameters:\r\n![Code_6hn3rowu9M](https://user-images.githubusercontent.com/3757771/103547890-42aaeb00-4ea5-11eb-8ac7-f166869af5f8.png)\r\n\r\nShows goto type actions for const parameters:\r\n![Code_8UFCcbZL3z](https://user-images.githubusercontent.com/3757771/103547891-43438180-4ea5-11eb-91e8-50681e4d831e.png)\r\n\r\nAlso shows implementations for `Self`:\r\n![Code_eQj1pWfser](https://user-images.githubusercontent.com/3757771/103547892-43438180-4ea5-11eb-9122-461f2e0fdd01.png)\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "8d2f4c209abe7428daf3467bfd345b903286da40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d2f4c209abe7428daf3467bfd345b903286da40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f8af890ed9e3998b034c52157baf21db2a78227", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf8zMJCRBK7hj4Ov3rIwAAdHIIAAHBSZxz53OebgH6ozoybDT6\nAOb79fcrorfs3d361rllDNnGams6KUfqJjHfXvcMuZykeH4HOEcQ+Jmi5jXYGQyP\n9YpoZjwyQ5qupyr202Df4uq3+yfEa64S21gEXRKe3T+/cwLjNSXtHA2UDefBRb0P\nA8GaVnDrrS4i0Y8RoTvOgYpFWIx2pAfbqwSYClleZO5f08uLZK6T+cTkYA5+0FzL\nbjAZXv5ToubKzol98JZ28dgQzwd2ZN8FOpfAFcdh4U/e/iHhOJKJAfJWs8DAY6F8\nl71C3WbHbcSlnravbTjyR3eTCw/TjcdSOmjpmicUgNvSuhy4X3+i9xymbR7agXw=\n=sJwN\n-----END PGP SIGNATURE-----\n", "payload": "tree 8d2f4c209abe7428daf3467bfd345b903286da40\nparent b4ab804dcad16f1eb1ac3f603889b101e4d55a68\nparent 54b9b03ca2e90083fd1d1fe199c5dde595423b53\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609773833 +0000\ncommitter GitHub <noreply@github.com> 1609773833 +0000\n\nMerge #7154\n\n7154: Show goto type actions for Const and TypeParams r=matklad a=Veykril\n\nShows goto type actions for type parameters:\r\n![Code_6hn3rowu9M](https://user-images.githubusercontent.com/3757771/103547890-42aaeb00-4ea5-11eb-8ac7-f166869af5f8.png)\r\n\r\nShows goto type actions for const parameters:\r\n![Code_8UFCcbZL3z](https://user-images.githubusercontent.com/3757771/103547891-43438180-4ea5-11eb-91e8-50681e4d831e.png)\r\n\r\nAlso shows implementations for `Self`:\r\n![Code_eQj1pWfser](https://user-images.githubusercontent.com/3757771/103547892-43438180-4ea5-11eb-9122-461f2e0fdd01.png)\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f8af890ed9e3998b034c52157baf21db2a78227", "html_url": "https://github.com/rust-lang/rust/commit/6f8af890ed9e3998b034c52157baf21db2a78227", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f8af890ed9e3998b034c52157baf21db2a78227/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4ab804dcad16f1eb1ac3f603889b101e4d55a68", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4ab804dcad16f1eb1ac3f603889b101e4d55a68", "html_url": "https://github.com/rust-lang/rust/commit/b4ab804dcad16f1eb1ac3f603889b101e4d55a68"}, {"sha": "54b9b03ca2e90083fd1d1fe199c5dde595423b53", "url": "https://api.github.com/repos/rust-lang/rust/commits/54b9b03ca2e90083fd1d1fe199c5dde595423b53", "html_url": "https://github.com/rust-lang/rust/commit/54b9b03ca2e90083fd1d1fe199c5dde595423b53"}], "stats": {"total": 195, "additions": 150, "deletions": 45}, "files": [{"sha": "071e553a88b7aaa9c3964d9ba8398829aec56cb8", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f8af890ed9e3998b034c52157baf21db2a78227/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8af890ed9e3998b034c52157baf21db2a78227/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=6f8af890ed9e3998b034c52157baf21db2a78227", "patch": "@@ -1276,6 +1276,18 @@ impl TypeParam {\n         }\n     }\n \n+    pub fn trait_bounds(self, db: &dyn HirDatabase) -> Vec<Trait> {\n+        db.generic_predicates_for_param(self.id)\n+            .into_iter()\n+            .filter_map(|pred| match &pred.value {\n+                hir_ty::GenericPredicate::Implemented(trait_ref) => {\n+                    Some(Trait::from(trait_ref.trait_))\n+                }\n+                _ => None,\n+            })\n+            .collect()\n+    }\n+\n     pub fn default(self, db: &dyn HirDatabase) -> Option<Type> {\n         let params = db.generic_defaults(self.id.parent);\n         let local_idx = hir_ty::param_idx(db, self.id)?;\n@@ -1343,6 +1355,12 @@ impl ConstParam {\n     pub fn parent(self, _db: &dyn HirDatabase) -> GenericDef {\n         self.id.parent.into()\n     }\n+\n+    pub fn ty(self, db: &dyn HirDatabase) -> Type {\n+        let def = self.id.parent;\n+        let krate = def.module(db.upcast()).krate;\n+        Type::new(db, krate, def, db.const_param_ty(self.id))\n+    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "f2ad95cb607f62e9ce6a2994740ea439418adfa9", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 132, "deletions": 45, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/6f8af890ed9e3998b034c52157baf21db2a78227/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8af890ed9e3998b034c52157baf21db2a78227/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=6f8af890ed9e3998b034c52157baf21db2a78227", "patch": "@@ -182,16 +182,18 @@ fn show_implementations_action(db: &RootDatabase, def: Definition) -> Option<Hov\n         })\n     }\n \n-    match def {\n-        Definition::ModuleDef(it) => match it {\n-            ModuleDef::Adt(Adt::Struct(it)) => Some(to_action(it.try_to_nav(db)?)),\n-            ModuleDef::Adt(Adt::Union(it)) => Some(to_action(it.try_to_nav(db)?)),\n-            ModuleDef::Adt(Adt::Enum(it)) => Some(to_action(it.try_to_nav(db)?)),\n-            ModuleDef::Trait(it) => Some(to_action(it.try_to_nav(db)?)),\n-            _ => None,\n-        },\n+    let adt = match def {\n+        Definition::ModuleDef(ModuleDef::Trait(it)) => return it.try_to_nav(db).map(to_action),\n+        Definition::ModuleDef(ModuleDef::Adt(it)) => Some(it),\n+        Definition::SelfType(it) => it.target_ty(db).as_adt(),\n         _ => None,\n+    }?;\n+    match adt {\n+        Adt::Struct(it) => it.try_to_nav(db),\n+        Adt::Union(it) => it.try_to_nav(db),\n+        Adt::Enum(it) => it.try_to_nav(db),\n     }\n+    .map(to_action)\n }\n \n fn runnable_action(\n@@ -226,45 +228,46 @@ fn runnable_action(\n }\n \n fn goto_type_action(db: &RootDatabase, def: Definition) -> Option<HoverAction> {\n-    match def {\n-        Definition::Local(it) => {\n-            let mut targets: Vec<ModuleDef> = Vec::new();\n-            let mut push_new_def = |item: ModuleDef| {\n-                if !targets.contains(&item) {\n-                    targets.push(item);\n-                }\n-            };\n-\n-            it.ty(db).walk(db, |t| {\n-                if let Some(adt) = t.as_adt() {\n-                    push_new_def(adt.into());\n-                } else if let Some(trait_) = t.as_dyn_trait() {\n-                    push_new_def(trait_.into());\n-                } else if let Some(traits) = t.as_impl_traits(db) {\n-                    traits.into_iter().for_each(|it| push_new_def(it.into()));\n-                } else if let Some(trait_) = t.as_associated_type_parent_trait(db) {\n-                    push_new_def(trait_.into());\n-                }\n-            });\n-\n-            let targets = targets\n-                .into_iter()\n-                .filter_map(|it| {\n-                    Some(HoverGotoTypeData {\n-                        mod_path: render_path(\n-                            db,\n-                            it.module(db)?,\n-                            it.name(db).map(|name| name.to_string()),\n-                        ),\n-                        nav: it.try_to_nav(db)?,\n-                    })\n-                })\n-                .collect();\n-\n-            Some(HoverAction::GoToType(targets))\n+    let mut targets: Vec<ModuleDef> = Vec::new();\n+    let mut push_new_def = |item: ModuleDef| {\n+        if !targets.contains(&item) {\n+            targets.push(item);\n         }\n-        _ => None,\n+    };\n+\n+    if let Definition::TypeParam(it) = def {\n+        it.trait_bounds(db).into_iter().for_each(|it| push_new_def(it.into()));\n+    } else {\n+        let ty = match def {\n+            Definition::Local(it) => it.ty(db),\n+            Definition::ConstParam(it) => it.ty(db),\n+            _ => return None,\n+        };\n+\n+        ty.walk(db, |t| {\n+            if let Some(adt) = t.as_adt() {\n+                push_new_def(adt.into());\n+            } else if let Some(trait_) = t.as_dyn_trait() {\n+                push_new_def(trait_.into());\n+            } else if let Some(traits) = t.as_impl_traits(db) {\n+                traits.into_iter().for_each(|it| push_new_def(it.into()));\n+            } else if let Some(trait_) = t.as_associated_type_parent_trait(db) {\n+                push_new_def(trait_.into());\n+            }\n+        });\n     }\n+\n+    let targets = targets\n+        .into_iter()\n+        .filter_map(|it| {\n+            Some(HoverGotoTypeData {\n+                mod_path: render_path(db, it.module(db)?, it.name(db).map(|name| name.to_string())),\n+                nav: it.try_to_nav(db)?,\n+            })\n+        })\n+        .collect();\n+\n+    Some(HoverAction::GoToType(targets))\n }\n \n fn hover_markup(\n@@ -2174,6 +2177,25 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n         );\n     }\n \n+    #[test]\n+    fn test_hover_self_has_impl_action() {\n+        check_actions(\n+            r#\"struct foo where Self<|>:;\"#,\n+            expect![[r#\"\n+                [\n+                    Implementation(\n+                        FilePosition {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            offset: 7,\n+                        },\n+                    ),\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_hover_test_has_action() {\n         check_actions(\n@@ -3062,6 +3084,71 @@ fn main() { let s<|>t = test().get(); }\n         );\n     }\n \n+    #[test]\n+    fn test_hover_const_param_has_goto_type_action() {\n+        check_actions(\n+            r#\"\n+struct Bar;\n+struct Foo<const BAR: Bar>;\n+\n+impl<const BAR: Bar> Foo<BAR<|>> {}\n+\"#,\n+            expect![[r#\"\n+                [\n+                    GoToType(\n+                        [\n+                            HoverGotoTypeData {\n+                                mod_path: \"test::Bar\",\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 0..11,\n+                                    focus_range: 7..10,\n+                                    name: \"Bar\",\n+                                    kind: Struct,\n+                                    description: \"struct Bar\",\n+                                },\n+                            },\n+                        ],\n+                    ),\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_type_param_has_goto_type_action() {\n+        check_actions(\n+            r#\"\n+trait Foo {}\n+\n+fn foo<T: Foo>(t: T<|>){}\n+\"#,\n+            expect![[r#\"\n+                [\n+                    GoToType(\n+                        [\n+                            HoverGotoTypeData {\n+                                mod_path: \"test::Foo\",\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 0..12,\n+                                    focus_range: 6..9,\n+                                    name: \"Foo\",\n+                                    kind: Trait,\n+                                    description: \"trait Foo\",\n+                                },\n+                            },\n+                        ],\n+                    ),\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn hover_displays_normalized_crate_names() {\n         check("}]}