{"sha": "b1705714d5a13e9057db364b685c7cce7cc27982", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNzA1NzE0ZDVhMTNlOTA1N2RiMzY0YjY4NWM3Y2NlN2NjMjc5ODI=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-12-04T03:37:57Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-12-05T06:33:53Z"}, "message": "Rename std::rt::deque::*::init() to *::new()", "tree": {"sha": "31955e3ed34abd1b7eed7c61dc7287b9b874444d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31955e3ed34abd1b7eed7c61dc7287b9b874444d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1705714d5a13e9057db364b685c7cce7cc27982", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1705714d5a13e9057db364b685c7cce7cc27982", "html_url": "https://github.com/rust-lang/rust/commit/b1705714d5a13e9057db364b685c7cce7cc27982", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1705714d5a13e9057db364b685c7cce7cc27982/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c4a1b55e65c9f513cd71f0f824e94aa6f588df0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4a1b55e65c9f513cd71f0f824e94aa6f588df0", "html_url": "https://github.com/rust-lang/rust/commit/2c4a1b55e65c9f513cd71f0f824e94aa6f588df0"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "967071142e5ee3c93ef84f3ef7ffdb47e0d008f0", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1705714d5a13e9057db364b685c7cce7cc27982/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1705714d5a13e9057db364b685c7cce7cc27982/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=b1705714d5a13e9057db364b685c7cce7cc27982", "patch": "@@ -1082,7 +1082,7 @@ mod test {\n \n         do run_in_bare_thread {\n             let sleepers = SleeperList::new();\n-            let mut pool = BufferPool::init();\n+            let mut pool = BufferPool::new();\n             let (worker1, stealer1) = pool.deque();\n             let (worker2, stealer2) = pool.deque();\n             let queues = ~[stealer1, stealer2];"}, {"sha": "3595587f342d40ccc7be9d20cf7b483ad18e019e", "filename": "src/libstd/rt/deque.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b1705714d5a13e9057db364b685c7cce7cc27982/src%2Flibstd%2Frt%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1705714d5a13e9057db364b685c7cce7cc27982/src%2Flibstd%2Frt%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fdeque.rs?ref=b1705714d5a13e9057db364b685c7cce7cc27982", "patch": "@@ -26,7 +26,7 @@\n //!\n //!     use std::rt::deque::BufferPool;\n //!\n-//!     let mut pool = BufferPool::init();\n+//!     let mut pool = BufferPool::new();\n //!     let (mut worker, mut stealer) = pool.deque();\n //!\n //!     // Only the worker may push/pop\n@@ -139,14 +139,14 @@ struct Buffer<T> {\n impl<T: Send> BufferPool<T> {\n     /// Allocates a new buffer pool which in turn can be used to allocate new\n     /// deques.\n-    pub fn init() -> BufferPool<T> {\n+    pub fn new() -> BufferPool<T> {\n         BufferPool { pool: Exclusive::new(~[]) }\n     }\n \n     /// Allocates a new work-stealing deque which will send/receiving memory to\n     /// and from this buffer pool.\n     pub fn deque(&mut self) -> (Worker<T>, Stealer<T>) {\n-        let (a, b) = UnsafeArc::new2(Deque::init(self.clone()));\n+        let (a, b) = UnsafeArc::new2(Deque::new(self.clone()));\n         (Worker { deque: a }, Stealer { deque: b })\n     }\n \n@@ -155,7 +155,7 @@ impl<T: Send> BufferPool<T> {\n             self.pool.with(|pool| {\n                 match pool.iter().position(|x| x.size() >= (1 << bits)) {\n                     Some(i) => pool.remove(i),\n-                    None => ~Buffer::init(bits)\n+                    None => ~Buffer::new(bits)\n                 }\n             })\n         }\n@@ -221,7 +221,7 @@ impl<T: Send> Clone for Stealer<T> {\n // personally going to heavily comment what's going on here.\n \n impl<T: Send> Deque<T> {\n-    fn init(mut pool: BufferPool<T>) -> Deque<T> {\n+    fn new(mut pool: BufferPool<T>) -> Deque<T> {\n         let buf = pool.alloc(MIN_BITS);\n         Deque {\n             bottom: AtomicInt::new(0),\n@@ -341,7 +341,7 @@ impl<T: Send> Drop for Deque<T> {\n }\n \n impl<T: Send> Buffer<T> {\n-    unsafe fn init(log_size: int) -> Buffer<T> {\n+    unsafe fn new(log_size: int) -> Buffer<T> {\n         let size = (1 << log_size) * mem::size_of::<T>();\n         let buffer = libc::malloc(size as libc::size_t);\n         assert!(!buffer.is_null());\n@@ -375,7 +375,7 @@ impl<T: Send> Buffer<T> {\n     // Again, unsafe because this has incredibly dubious ownership violations.\n     // It is assumed that this buffer is immediately dropped.\n     unsafe fn resize(&self, b: int, t: int, delta: int) -> Buffer<T> {\n-        let mut buf = Buffer::init(self.log_size + delta);\n+        let mut buf = Buffer::new(self.log_size + delta);\n         for i in range(t, b) {\n             buf.put(i, self.get(i));\n         }\n@@ -406,7 +406,7 @@ mod tests {\n \n     #[test]\n     fn smoke() {\n-        let mut pool = BufferPool::init();\n+        let mut pool = BufferPool::new();\n         let (mut w, mut s) = pool.deque();\n         assert_eq!(w.pop(), None);\n         assert_eq!(s.steal(), Empty);\n@@ -421,7 +421,7 @@ mod tests {\n     #[test]\n     fn stealpush() {\n         static AMT: int = 100000;\n-        let mut pool = BufferPool::<int>::init();\n+        let mut pool = BufferPool::<int>::new();\n         let (mut w, s) = pool.deque();\n         let t = do Thread::start {\n             let mut s = s;\n@@ -447,7 +447,7 @@ mod tests {\n     #[test]\n     fn stealpush_large() {\n         static AMT: int = 100000;\n-        let mut pool = BufferPool::<(int, int)>::init();\n+        let mut pool = BufferPool::<(int, int)>::new();\n         let (mut w, s) = pool.deque();\n         let t = do Thread::start {\n             let mut s = s;\n@@ -509,15 +509,15 @@ mod tests {\n \n     #[test]\n     fn run_stampede() {\n-        let mut pool = BufferPool::<~int>::init();\n+        let mut pool = BufferPool::<~int>::new();\n         let (w, s) = pool.deque();\n         stampede(w, s, 8, 10000);\n     }\n \n     #[test]\n     fn many_stampede() {\n         static AMT: uint = 4;\n-        let mut pool = BufferPool::<~int>::init();\n+        let mut pool = BufferPool::<~int>::new();\n         let threads = range(0, AMT).map(|_| {\n             let (w, s) = pool.deque();\n             do Thread::start {\n@@ -536,7 +536,7 @@ mod tests {\n         static NTHREADS: int = 8;\n         static mut DONE: AtomicBool = INIT_ATOMIC_BOOL;\n         static mut HITS: AtomicUint = INIT_ATOMIC_UINT;\n-        let mut pool = BufferPool::<int>::init();\n+        let mut pool = BufferPool::<int>::new();\n         let (mut w, s) = pool.deque();\n \n         let threads = range(0, NTHREADS).map(|_| {\n@@ -595,7 +595,7 @@ mod tests {\n         static AMT: int = 10000;\n         static NTHREADS: int = 4;\n         static mut DONE: AtomicBool = INIT_ATOMIC_BOOL;\n-        let mut pool = BufferPool::<(int, uint)>::init();\n+        let mut pool = BufferPool::<(int, uint)>::new();\n         let (mut w, s) = pool.deque();\n \n         let (threads, hits) = vec::unzip(range(0, NTHREADS).map(|_| {"}, {"sha": "3d0222cefaeccf01eb067d320b0fad977099fc99", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1705714d5a13e9057db364b685c7cce7cc27982/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1705714d5a13e9057db364b685c7cce7cc27982/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=b1705714d5a13e9057db364b685c7cce7cc27982", "patch": "@@ -281,7 +281,7 @@ fn run_(main: proc(), use_main_sched: bool) -> int {\n \n     // Create a work queue for each scheduler, ntimes. Create an extra\n     // for the main thread if that flag is set. We won't steal from it.\n-    let mut pool = deque::BufferPool::init();\n+    let mut pool = deque::BufferPool::new();\n     let arr = vec::from_fn(nscheds, |_| pool.deque());\n     let (workers, stealers) = vec::unzip(arr.move_iter());\n "}, {"sha": "1cd8fcf589de6ff10a66f39a64b9240a09a3e1e4", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1705714d5a13e9057db364b685c7cce7cc27982/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1705714d5a13e9057db364b685c7cce7cc27982/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=b1705714d5a13e9057db364b685c7cce7cc27982", "patch": "@@ -1002,7 +1002,7 @@ mod test {\n         do run_in_bare_thread {\n \n             let sleepers = SleeperList::new();\n-            let mut pool = BufferPool::init();\n+            let mut pool = BufferPool::new();\n             let (normal_worker, normal_stealer) = pool.deque();\n             let (special_worker, special_stealer) = pool.deque();\n             let queues = ~[normal_stealer, special_stealer];\n@@ -1177,7 +1177,7 @@ mod test {\n         do run_in_bare_thread {\n             stress_factor().times(|| {\n                 let sleepers = SleeperList::new();\n-                let mut pool = BufferPool::init();\n+                let mut pool = BufferPool::new();\n                 let (worker, stealer) = pool.deque();\n \n                 let mut sched = ~Scheduler::new("}, {"sha": "2ab543a4c36bbe3253e8d23b599b506b5e2b9a6d", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1705714d5a13e9057db364b685c7cce7cc27982/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1705714d5a13e9057db364b685c7cce7cc27982/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=b1705714d5a13e9057db364b685c7cce7cc27982", "patch": "@@ -36,7 +36,7 @@ use vec::{OwnedVector, MutableVector, ImmutableVector};\n \n pub fn new_test_uv_sched() -> Scheduler {\n \n-    let mut pool = BufferPool::init();\n+    let mut pool = BufferPool::new();\n     let (worker, stealer) = pool.deque();\n \n     let mut sched = Scheduler::new(new_event_loop(),\n@@ -51,7 +51,7 @@ pub fn new_test_uv_sched() -> Scheduler {\n }\n \n pub fn new_test_sched() -> Scheduler {\n-    let mut pool = BufferPool::init();\n+    let mut pool = BufferPool::new();\n     let (worker, stealer) = pool.deque();\n \n     let mut sched = Scheduler::new(basic::event_loop(),\n@@ -228,7 +228,7 @@ pub fn run_in_mt_newsched_task(f: proc()) {\n         let mut handles = ~[];\n         let mut scheds = ~[];\n \n-        let mut pool = BufferPool::<~Task>::init();\n+        let mut pool = BufferPool::<~Task>::new();\n         let workers = range(0, nthreads).map(|_| pool.deque());\n         let (workers, stealers) = vec::unzip(workers);\n "}]}