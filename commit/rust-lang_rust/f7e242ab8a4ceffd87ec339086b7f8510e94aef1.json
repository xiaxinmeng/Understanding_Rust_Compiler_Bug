{"sha": "f7e242ab8a4ceffd87ec339086b7f8510e94aef1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZTI0MmFiOGE0Y2VmZmQ4N2VjMzM5MDg2YjdmODUxMGU5NGFlZjE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-04T01:58:26Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-06T04:38:58Z"}, "message": "std::rt: Destroy the task start closure while in task context", "tree": {"sha": "0da571ab3a82f5e947f7660b19c0c4d796a8dba6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0da571ab3a82f5e947f7660b19c0c4d796a8dba6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7e242ab8a4ceffd87ec339086b7f8510e94aef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7e242ab8a4ceffd87ec339086b7f8510e94aef1", "html_url": "https://github.com/rust-lang/rust/commit/f7e242ab8a4ceffd87ec339086b7f8510e94aef1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7e242ab8a4ceffd87ec339086b7f8510e94aef1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e6d51f9cea14ff271223855454034b27ced4ce9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e6d51f9cea14ff271223855454034b27ced4ce9", "html_url": "https://github.com/rust-lang/rust/commit/2e6d51f9cea14ff271223855454034b27ced4ce9"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "1d1c3aae1f1a3d747510401bafd3d85e6c8eec4e", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f7e242ab8a4ceffd87ec339086b7f8510e94aef1/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7e242ab8a4ceffd87ec339086b7f8510e94aef1/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=f7e242ab8a4ceffd87ec339086b7f8510e94aef1", "patch": "@@ -536,6 +536,7 @@ pub impl Coroutine {\n \n     priv fn build_start_wrapper(start: ~fn()) -> ~fn() {\n         // XXX: The old code didn't have this extra allocation\n+        let start_cell = Cell(start);\n         let wrapper: ~fn() = || {\n             // This is the first code to execute after the initial\n             // context switch to the task. The previous context may\n@@ -547,7 +548,19 @@ pub impl Coroutine {\n                 let sched = Local::unsafe_borrow::<Scheduler>();\n                 let task = (*sched).current_task.get_mut_ref();\n                 // FIXME #6141: shouldn't neet to put `start()` in another closure\n-                task.task.run(||start());\n+                let start_cell = Cell(start_cell.take());\n+                do task.task.run {\n+                    // N.B. Removing `start` from the start wrapper closure\n+                    // by emptying a cell is critical for correctness. The ~Task\n+                    // pointer, and in turn the closure used to initialize the first\n+                    // call frame, is destroyed in scheduler context, not task context.\n+                    // So any captured closures must not contain user-definable dtors\n+                    // that expect to be in task context. By moving `start` out of\n+                    // the closure, all the user code goes out of scope while\n+                    // the task is still running.\n+                    let start = start_cell.take();\n+                    start();\n+                };\n             }\n \n             let sched = Local::take::<Scheduler>();\n@@ -840,4 +853,26 @@ mod test {\n \n     }\n \n+    #[test]\n+    fn start_closure_dtor() {\n+        use ops::Drop;\n+\n+        // Regression test that the `start` task entrypoint can contain dtors\n+        // that use task resources\n+        do run_in_newsched_task {\n+            struct S { field: () }\n+\n+            impl Drop for S {\n+                fn finalize(&self) {\n+                    let _foo = @0;\n+                }\n+            }\n+\n+            let s = S { field: () };\n+\n+            do spawntask {\n+                let _ss = &s;\n+            }\n+        }        \n+    }\n }"}]}