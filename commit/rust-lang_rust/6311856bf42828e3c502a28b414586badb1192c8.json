{"sha": "6311856bf42828e3c502a28b414586badb1192c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMTE4NTZiZjQyODI4ZTNjNTAyYTI4YjQxNDU4NmJhZGIxMTkyYzg=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-08-22T22:03:28Z"}, "committer": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-08-22T23:31:58Z"}, "message": "std: slight refactor on UvFilestream seek behavior, pre-seek-refactor", "tree": {"sha": "f7893af766120411748e55c963a699c1b0d9abd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7893af766120411748e55c963a699c1b0d9abd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6311856bf42828e3c502a28b414586badb1192c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6311856bf42828e3c502a28b414586badb1192c8", "html_url": "https://github.com/rust-lang/rust/commit/6311856bf42828e3c502a28b414586badb1192c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6311856bf42828e3c502a28b414586badb1192c8/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94b84a851c1ac088c884c8dde00199fdf91d9f4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/94b84a851c1ac088c884c8dde00199fdf91d9f4d", "html_url": "https://github.com/rust-lang/rust/commit/94b84a851c1ac088c884c8dde00199fdf91d9f4d"}], "stats": {"total": 72, "additions": 34, "deletions": 38}, "files": [{"sha": "816f7e08eabe6fb4cb33c9734d2ce2e293ec5961", "filename": "src/libstd/rt/io/file.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6311856bf42828e3c502a28b414586badb1192c8/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6311856bf42828e3c502a28b414586badb1192c8/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffile.rs?ref=6311856bf42828e3c502a28b414586badb1192c8", "patch": "@@ -170,15 +170,9 @@ impl Seek for FileStream {\n     }\n \n     fn seek(&mut self, pos: i64, style: SeekStyle) {\n-        use libc::{SEEK_SET, SEEK_CUR, SEEK_END};\n-        let whence = match style {\n-            SeekSet => SEEK_SET,\n-            SeekCur => SEEK_CUR,\n-            SeekEnd => SEEK_END\n-        } as i64;\n-        match self.fd.seek(pos, whence) {\n+        match self.fd.seek(pos, style) {\n             Ok(_) => {\n-                // successful seek resets EOF indocator\n+                // successful seek resets EOF indicator\n                 self.last_nread = -1;\n                 ()\n             },"}, {"sha": "b73200bcda1313505a2439601e80a84f9c87e5df", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6311856bf42828e3c502a28b414586badb1192c8/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6311856bf42828e3c502a28b414586badb1192c8/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=6311856bf42828e3c502a28b414586badb1192c8", "patch": "@@ -17,6 +17,7 @@ use super::io::net::ip::{IpAddr, SocketAddr};\n use rt::uv::uvio;\n use path::Path;\n use super::io::support::PathLike;\n+use super::io::{SeekStyle};\n \n // XXX: ~object doesn't work currently so these are some placeholder\n // types to use instead\n@@ -118,7 +119,7 @@ pub trait RtioFileStream {\n     fn write(&mut self, buf: &[u8]) -> Result<(), IoError>;\n     fn pread(&mut self, buf: &mut [u8], offset: u64) -> Result<int, IoError>;\n     fn pwrite(&mut self, buf: &[u8], offset: u64) -> Result<(), IoError>;\n-    fn seek(&mut self, pos: i64, whence: i64) -> Result<(), IoError>;\n+    fn seek(&mut self, pos: i64, whence: SeekStyle) -> Result<u64, IoError>;\n     fn tell(&self) -> Result<u64, IoError>;\n     fn flush(&mut self) -> Result<(), IoError>;\n }"}, {"sha": "93d87fb5495cdf256b5e181c88936c30849da30f", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6311856bf42828e3c502a28b414586badb1192c8/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6311856bf42828e3c502a28b414586badb1192c8/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=6311856bf42828e3c502a28b414586badb1192c8", "patch": "@@ -21,7 +21,7 @@ use str;\n use result::*;\n use rt::io::IoError;\n use rt::io::net::ip::{SocketAddr, IpAddr};\n-use rt::io::{standard_error, OtherIoError};\n+use rt::io::{standard_error, OtherIoError, SeekStyle, SeekSet, SeekCur, SeekEnd};\n use rt::local::Local;\n use rt::rtio::*;\n use rt::sched::{Scheduler, SchedHandle};\n@@ -31,7 +31,7 @@ use rt::uv::idle::IdleWatcher;\n use rt::uv::net::{UvIpv4SocketAddr, UvIpv6SocketAddr};\n use unstable::sync::Exclusive;\n use super::super::io::support::PathLike;\n-use libc::{lseek, c_long, SEEK_CUR};\n+use libc::{lseek, c_long};\n \n #[cfg(test)] use container::Container;\n #[cfg(test)] use unstable::run_in_bare_thread;\n@@ -1122,6 +1122,22 @@ impl UvFileStream {\n         };\n         result_cell.take()\n     }\n+    fn seek_common(&mut self, pos: i64, whence: c_int) ->\n+        Result<u64, IoError>{\n+        #[fixed_stack_segment]; #[inline(never)];\n+        unsafe {\n+            match lseek((*self.fd), pos as c_long, whence) {\n+                -1 => {\n+                    Err(IoError {\n+                        kind: OtherIoError,\n+                        desc: \"Failed to lseek.\",\n+                        detail: None\n+                    })\n+                },\n+                n => Ok(n as u64)\n+            }\n+        }\n+    }\n }\n \n impl Drop for UvFileStream {\n@@ -1155,35 +1171,20 @@ impl RtioFileStream for UvFileStream {\n     fn pwrite(&mut self, buf: &[u8], offset: u64) -> Result<(), IoError> {\n         self.base_write(buf, offset as i64)\n     }\n-    fn seek(&mut self, pos: i64, whence: i64) -> Result<(), IoError> {\n-        #[fixed_stack_segment]; #[inline(never)];\n-        unsafe {\n-            match lseek((*self.fd), pos as c_long, whence as c_int) {\n-                -1 => {\n-                    Err(IoError {\n-                        kind: OtherIoError,\n-                        desc: \"Failed to lseek.\",\n-                        detail: None\n-                    })\n-                },\n-                _ => Ok(())\n-            }\n-        }\n+    fn seek(&mut self, pos: i64, whence: SeekStyle) -> Result<u64, IoError> {\n+        use libc::{SEEK_SET, SEEK_CUR, SEEK_END};\n+        let whence = match whence {\n+            SeekSet => SEEK_SET,\n+            SeekCur => SEEK_CUR,\n+            SeekEnd => SEEK_END\n+        };\n+        self.seek_common(pos, whence)\n     }\n     fn tell(&self) -> Result<u64, IoError> {\n-        #[fixed_stack_segment]; #[inline(never)];\n-        unsafe {\n-            match lseek((*self.fd), 0, SEEK_CUR) {\n-                -1 => {\n-                    Err(IoError {\n-                        kind: OtherIoError,\n-                        desc: \"Failed to lseek, needed to tell().\",\n-                        detail: None\n-                    })\n-                },\n-                n=> Ok(n as u64)\n-            }\n-        }\n+        use libc::SEEK_CUR;\n+        // this is temporary\n+        let self_ = unsafe { cast::transmute::<&UvFileStream, &mut UvFileStream>(self) };\n+        self_.seek_common(0, SEEK_CUR)\n     }\n     fn flush(&mut self) -> Result<(), IoError> {\n         Ok(())"}]}