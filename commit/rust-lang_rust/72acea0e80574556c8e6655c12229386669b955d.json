{"sha": "72acea0e80574556c8e6655c12229386669b955d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYWNlYTBlODA1NzQ1NTZjOGU2NjU1YzEyMjI5Mzg2NjY5Yjk1NWQ=", "commit": {"author": {"name": "Cameron Hart", "email": "cameron.hart@gmail.com", "date": "2017-04-25T10:24:33Z"}, "committer": {"name": "Cameron Hart", "email": "cameron.hart@gmail.com", "date": "2017-04-25T10:27:29Z"}, "message": "Add missing struct field index adjustments.\n\nSome accesses in OperandPairs were missing. Fixes #41479.", "tree": {"sha": "631354a1b4167d5ba18a02313d450dca02a69e99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/631354a1b4167d5ba18a02313d450dca02a69e99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72acea0e80574556c8e6655c12229386669b955d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72acea0e80574556c8e6655c12229386669b955d", "html_url": "https://github.com/rust-lang/rust/commit/72acea0e80574556c8e6655c12229386669b955d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72acea0e80574556c8e6655c12229386669b955d/comments", "author": {"login": "bitshifter", "id": 135700, "node_id": "MDQ6VXNlcjEzNTcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/135700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitshifter", "html_url": "https://github.com/bitshifter", "followers_url": "https://api.github.com/users/bitshifter/followers", "following_url": "https://api.github.com/users/bitshifter/following{/other_user}", "gists_url": "https://api.github.com/users/bitshifter/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitshifter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitshifter/subscriptions", "organizations_url": "https://api.github.com/users/bitshifter/orgs", "repos_url": "https://api.github.com/users/bitshifter/repos", "events_url": "https://api.github.com/users/bitshifter/events{/privacy}", "received_events_url": "https://api.github.com/users/bitshifter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bitshifter", "id": 135700, "node_id": "MDQ6VXNlcjEzNTcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/135700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitshifter", "html_url": "https://github.com/bitshifter", "followers_url": "https://api.github.com/users/bitshifter/followers", "following_url": "https://api.github.com/users/bitshifter/following{/other_user}", "gists_url": "https://api.github.com/users/bitshifter/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitshifter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitshifter/subscriptions", "organizations_url": "https://api.github.com/users/bitshifter/orgs", "repos_url": "https://api.github.com/users/bitshifter/repos", "events_url": "https://api.github.com/users/bitshifter/events{/privacy}", "received_events_url": "https://api.github.com/users/bitshifter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0777c757a6832dc5f8f218377f99960f5477311f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0777c757a6832dc5f8f218377f99960f5477311f", "html_url": "https://github.com/rust-lang/rust/commit/0777c757a6832dc5f8f218377f99960f5477311f"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "8b7c7d9d37232331b293266d57af0fb70696b5ef", "filename": "src/librustc_trans/mir/operand.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/72acea0e80574556c8e6655c12229386669b955d/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72acea0e80574556c8e6655c12229386669b955d/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=72acea0e80574556c8e6655c12229386669b955d", "patch": "@@ -85,8 +85,15 @@ impl<'a, 'tcx> OperandRef<'tcx> {\n         assert!(common::type_is_zero_size(ccx, ty));\n         let llty = type_of::type_of(ccx, ty);\n         let val = if common::type_is_imm_pair(ccx, ty) {\n+            let layout = ccx.layout_of(ty);\n+            let (ix0, ix1) = if let Layout::Univariant { ref variant, .. } = *layout {\n+                (adt::struct_llfields_index(variant, 0),\n+                adt::struct_llfields_index(variant, 1))\n+            } else {\n+                (0, 1)\n+            };\n             let fields = llty.field_types();\n-            OperandValue::Pair(C_null(fields[0]), C_null(fields[1]))\n+            OperandValue::Pair(C_null(fields[ix0]), C_null(fields[ix1]))\n         } else {\n             OperandValue::Immediate(C_null(llty))\n         };\n@@ -156,8 +163,16 @@ impl<'a, 'tcx> OperandRef<'tcx> {\n             if common::type_is_imm_pair(bcx.ccx, self.ty) {\n                 debug!(\"Operand::unpack_if_pair: unpacking {:?}\", self);\n \n-                let mut a = bcx.extract_value(llval, 0);\n-                let mut b = bcx.extract_value(llval, 1);\n+                let layout = bcx.ccx.layout_of(self.ty);\n+                let (ix0, ix1) = if let Layout::Univariant { ref variant, .. } = *layout {\n+                    (adt::struct_llfields_index(variant, 0),\n+                    adt::struct_llfields_index(variant, 1))\n+                } else {\n+                    (0, 1)\n+                };\n+\n+                let mut a = bcx.extract_value(llval, ix0);\n+                let mut b = bcx.extract_value(llval, ix1);\n \n                 let pair_fields = common::type_pair_fields(bcx.ccx, self.ty);\n                 if let Some([a_ty, b_ty]) = pair_fields {"}]}