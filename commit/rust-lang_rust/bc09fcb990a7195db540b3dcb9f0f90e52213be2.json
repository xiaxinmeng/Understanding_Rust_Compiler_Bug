{"sha": "bc09fcb990a7195db540b3dcb9f0f90e52213be2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMDlmY2I5OTBhNzE5NWRiNTQwYjNkY2I5ZjBmOTBlNTIyMTNiZTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-07-09T22:26:57Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-07-09T22:26:57Z"}, "message": "rustc: Avoid /tmp/ in graphviz writing\n\nThis issue was reported to security@rust-lang.org by Sebastien Marie following\nour recent [security advisory][1]. Because `/tmp` is typically globally writable\nit's possible for one user to place symlinks in `/tmp` pointing to files in\nanother user's directories, causing `rustc` to overwrite the contents of\ninnocent files by accident.\n\nThis patch instead defaults the output path here to the cwd which should avoid\nthis issue.\n\n[1]: https://blog.rust-lang.org/2018/07/06/security-advisory-for-rustdoc.html", "tree": {"sha": "169e0a085b2bb9e8ee1346273bbab7486f4f751d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/169e0a085b2bb9e8ee1346273bbab7486f4f751d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc09fcb990a7195db540b3dcb9f0f90e52213be2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc09fcb990a7195db540b3dcb9f0f90e52213be2", "html_url": "https://github.com/rust-lang/rust/commit/bc09fcb990a7195db540b3dcb9f0f90e52213be2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc09fcb990a7195db540b3dcb9f0f90e52213be2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdd185c8970e79c2cdd3c5cfad7c4bf591836b23", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd185c8970e79c2cdd3c5cfad7c4bf591836b23", "html_url": "https://github.com/rust-lang/rust/commit/bdd185c8970e79c2cdd3c5cfad7c4bf591836b23"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "d76d33b99022275e3d49b1c2a1cecc46e7fdfa45", "filename": "src/librustc/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc09fcb990a7195db540b3dcb9f0f90e52213be2/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc09fcb990a7195db540b3dcb9f0f90e52213be2/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=bc09fcb990a7195db540b3dcb9f0f90e52213be2", "patch": "@@ -39,14 +39,14 @@ use std::sync::atomic::{AtomicBool, Ordering};\n fn print_help_message() {\n     println!(\"\\\n -Z print-region-graph by default prints a region constraint graph for every \\n\\\n-function body, to the path `/tmp/constraints.nodeXXX.dot`, where the XXX is \\n\\\n+function body, to the path `constraints.nodeXXX.dot`, where the XXX is \\n\\\n replaced with the node id of the function under analysis.                   \\n\\\n                                                                             \\n\\\n To select one particular function body, set `RUST_REGION_GRAPH_NODE=XXX`,   \\n\\\n where XXX is the node id desired.                                           \\n\\\n                                                                             \\n\\\n To generate output to some path other than the default                      \\n\\\n-`/tmp/constraints.nodeXXX.dot`, set `RUST_REGION_GRAPH=/path/desired.dot`;  \\n\\\n+`constraints.nodeXXX.dot`, set `RUST_REGION_GRAPH=/path/desired.dot`;  \\n\\\n occurrences of the character `%` in the requested path will be replaced with\\n\\\n the node id of the function under analysis.                                 \\n\\\n                                                                             \\n\\\n@@ -90,7 +90,7 @@ pub fn maybe_print_constraints_for<'a, 'gcx, 'tcx>(\n             }\n \n             Ok(other_path) => other_path,\n-            Err(_) => \"/tmp/constraints.node%.dot\".to_string(),\n+            Err(_) => \"constraints.node%.dot\".to_string(),\n         };\n \n         if output_template.is_empty() {"}]}