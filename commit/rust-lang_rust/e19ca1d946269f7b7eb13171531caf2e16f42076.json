{"sha": "e19ca1d946269f7b7eb13171531caf2e16f42076", "node_id": "C_kwDOAAsO6NoAKGUxOWNhMWQ5NDYyNjlmN2I3ZWIxMzE3MTUzMWNhZjJlMTZmNDIwNzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-09T10:02:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-09T10:02:49Z"}, "message": "Auto merge of #92086 - petrochenkov:modchild, r=jackh726\n\nrustc_metadata: Optimize and document module children decoding\n\nThe first commit limits the item in the `item_children`/`each_child_of_item` query to modules (in name resolution sense) and adds a corresponding assertion.\nThe `associated_item_def_ids` query collecting children of traits and impls specifically now uses a simplified implementation not decoding unnecessary data instead of `each_child_of_item`, this gives a nice performance improvement.\n\nThe second commit does some renaming that clarifies the terminology used for all items in a module vs `use` items only.", "tree": {"sha": "5ca3d359e5f2ab98e3cb8797ae56fa23af20ac87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ca3d359e5f2ab98e3cb8797ae56fa23af20ac87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e19ca1d946269f7b7eb13171531caf2e16f42076", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e19ca1d946269f7b7eb13171531caf2e16f42076", "html_url": "https://github.com/rust-lang/rust/commit/e19ca1d946269f7b7eb13171531caf2e16f42076", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e19ca1d946269f7b7eb13171531caf2e16f42076/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02fe61b381c2dedc0071e1aacfbe91e0bad1f656", "url": "https://api.github.com/repos/rust-lang/rust/commits/02fe61b381c2dedc0071e1aacfbe91e0bad1f656", "html_url": "https://github.com/rust-lang/rust/commit/02fe61b381c2dedc0071e1aacfbe91e0bad1f656"}, {"sha": "4b03fd910c4d963a369baa3e38c9a7713c04a79c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b03fd910c4d963a369baa3e38c9a7713c04a79c", "html_url": "https://github.com/rust-lang/rust/commit/4b03fd910c4d963a369baa3e38c9a7713c04a79c"}], "stats": {"total": 255, "additions": 137, "deletions": 118}, "files": [{"sha": "e39ea46c0c0ca53bac447a3ed7d48090a17d21b8", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -21,7 +21,7 @@ use rustc_hir::definitions::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc_hir::diagnostic_items::DiagnosticItems;\n use rustc_hir::lang_items;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_middle::hir::exports::Export;\n+use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::mir::{self, Body, Promoted};\n@@ -1074,33 +1074,38 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    /// Iterates over each child of the given item.\n-    fn each_child_of_item(&self, id: DefIndex, mut callback: impl FnMut(Export), sess: &Session) {\n+    /// Iterates over all named children of the given module,\n+    /// including both proper items and reexports.\n+    /// Module here is understood in name resolution sense - it can be a `mod` item,\n+    /// or a crate root, or an enum, or a trait.\n+    fn for_each_module_child(\n+        &self,\n+        id: DefIndex,\n+        mut callback: impl FnMut(ModChild),\n+        sess: &Session,\n+    ) {\n         if let Some(data) = &self.root.proc_macro_data {\n-            /* If we are loading as a proc macro, we want to return the view of this crate\n-             * as a proc macro crate.\n-             */\n+            // If we are loading as a proc macro, we want to return\n+            // the view of this crate as a proc macro crate.\n             if id == CRATE_DEF_INDEX {\n-                let macros = data.macros.decode(self);\n-                for def_index in macros {\n+                for def_index in data.macros.decode(self) {\n                     let raw_macro = self.raw_proc_macro(def_index);\n                     let res = Res::Def(\n                         DefKind::Macro(macro_kind(raw_macro)),\n                         self.local_def_id(def_index),\n                     );\n                     let ident = self.item_ident(def_index, sess);\n-                    callback(Export { ident, res, vis: ty::Visibility::Public, span: ident.span });\n+                    callback(ModChild {\n+                        ident,\n+                        res,\n+                        vis: ty::Visibility::Public,\n+                        span: ident.span,\n+                    });\n                 }\n             }\n             return;\n         }\n \n-        // Find the item.\n-        let kind = match self.maybe_kind(id) {\n-            None => return,\n-            Some(kind) => kind,\n-        };\n-\n         // Iterate over all children.\n         if let Some(children) = self.root.tables.children.get(self, id) {\n             for child_index in children.decode((self, sess)) {\n@@ -1116,7 +1121,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     let vis = self.get_visibility(child_index);\n                     let span = self.get_span(child_index, sess);\n \n-                    callback(Export { ident, res, vis, span });\n+                    callback(ModChild { ident, res, vis, span });\n \n                     // For non-re-export structs and variants add their constructors to children.\n                     // Re-export lists automatically contain constructors when necessary.\n@@ -1128,7 +1133,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                                 let ctor_res =\n                                     Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);\n                                 let vis = self.get_visibility(ctor_def_id.index);\n-                                callback(Export { res: ctor_res, vis, ident, span });\n+                                callback(ModChild { ident, res: ctor_res, vis, span });\n                             }\n                         }\n                         DefKind::Variant => {\n@@ -1153,18 +1158,22 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                                     vis = ty::Visibility::Restricted(crate_def_id);\n                                 }\n                             }\n-                            callback(Export { res: ctor_res, ident, vis, span });\n+                            callback(ModChild { ident, res: ctor_res, vis, span });\n                         }\n                         _ => {}\n                     }\n                 }\n             }\n         }\n \n-        if let EntryKind::Mod(exports) = kind {\n-            for exp in exports.decode((self, sess)) {\n-                callback(exp);\n+        match self.kind(id) {\n+            EntryKind::Mod(exports) => {\n+                for exp in exports.decode((self, sess)) {\n+                    callback(exp);\n+                }\n             }\n+            EntryKind::Enum(..) | EntryKind::Trait(..) => {}\n+            _ => bug!(\"`for_each_module_child` is called on a non-module: {:?}\", self.def_kind(id)),\n         }\n     }\n "}, {"sha": "395f954b430431d3023948be575e40a8a2a3f30e", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -4,10 +4,10 @@ use crate::native_libs;\n \n use rustc_ast as ast;\n use rustc_data_structures::stable_map::FxHashMap;\n-use rustc_hir::def::{CtorKind, DefKind};\n+use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n-use rustc_middle::hir::exports::Export;\n+use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n use rustc_middle::middle::stability::DeprecationEntry;\n use rustc_middle::ty::query::{ExternProviders, Providers};\n@@ -196,9 +196,9 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         let r = *cdata.dep_kind.lock();\n         r\n     }\n-    item_children => {\n+    module_children => {\n         let mut result = SmallVec::<[_; 8]>::new();\n-        cdata.each_child_of_item(def_id.index, |child| result.push(child), tcx.sess);\n+        cdata.for_each_module_child(def_id.index, |child| result.push(child), tcx.sess);\n         tcx.arena.alloc_slice(&result)\n     }\n     defined_lib_features => { cdata.get_lib_features(tcx) }\n@@ -309,35 +309,40 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n                 bfs_queue.push_back(DefId { krate: cnum, index: CRATE_DEF_INDEX });\n             }\n \n-            let mut add_child = |bfs_queue: &mut VecDeque<_>, export: &Export, parent: DefId| {\n-                if !export.vis.is_public() {\n+            let mut add_child = |bfs_queue: &mut VecDeque<_>, child: &ModChild, parent: DefId| {\n+                if !child.vis.is_public() {\n                     return;\n                 }\n \n-                if let Some(child) = export.res.opt_def_id() {\n-                    if export.ident.name == kw::Underscore {\n-                        fallback_map.insert(child, parent);\n+                if let Some(def_id) = child.res.opt_def_id() {\n+                    if child.ident.name == kw::Underscore {\n+                        fallback_map.insert(def_id, parent);\n                         return;\n                     }\n \n-                    match visible_parent_map.entry(child) {\n+                    match visible_parent_map.entry(def_id) {\n                         Entry::Occupied(mut entry) => {\n                             // If `child` is defined in crate `cnum`, ensure\n                             // that it is mapped to a parent in `cnum`.\n-                            if child.is_local() && entry.get().is_local() {\n+                            if def_id.is_local() && entry.get().is_local() {\n                                 entry.insert(parent);\n                             }\n                         }\n                         Entry::Vacant(entry) => {\n                             entry.insert(parent);\n-                            bfs_queue.push_back(child);\n+                            if matches!(\n+                                child.res,\n+                                Res::Def(DefKind::Mod | DefKind::Enum | DefKind::Trait, _)\n+                            ) {\n+                                bfs_queue.push_back(def_id);\n+                            }\n                         }\n                     }\n                 }\n             };\n \n             while let Some(def) = bfs_queue.pop_front() {\n-                for child in tcx.item_children(def).iter() {\n+                for child in tcx.module_children(def).iter() {\n                     add_child(bfs_queue, child, def);\n                 }\n             }\n@@ -383,9 +388,9 @@ impl CStore {\n         self.get_crate_data(def.krate).get_visibility(def.index)\n     }\n \n-    pub fn item_children_untracked(&self, def_id: DefId, sess: &Session) -> Vec<Export> {\n+    pub fn module_children_untracked(&self, def_id: DefId, sess: &Session) -> Vec<ModChild> {\n         let mut result = vec![];\n-        self.get_crate_data(def_id.krate).each_child_of_item(\n+        self.get_crate_data(def_id.krate).for_each_module_child(\n             def_id.index,\n             |child| result.push(child),\n             sess,"}, {"sha": "2e556275fb517f20e5abb20712f83b311d93a501", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -1094,7 +1094,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         // code uses it). However, we skip encoding anything relating to child\n         // items - we encode information about proc-macros later on.\n         let reexports = if !self.is_proc_macro {\n-            match tcx.module_exports(local_def_id) {\n+            match tcx.module_reexports(local_def_id) {\n                 Some(exports) => self.lazy(exports),\n                 _ => Lazy::empty(),\n             }\n@@ -1104,7 +1104,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         record!(self.tables.kind[def_id] <- EntryKind::Mod(reexports));\n         if self.is_proc_macro {\n-            record!(self.tables.children[def_id] <- &[]);\n             // Encode this here because we don't do it in encode_def_ids.\n             record!(self.tables.expn_that_defined[def_id] <- tcx.expn_that_defined(local_def_id));\n         } else {"}, {"sha": "75c5880f05d927a0b4e05978dd963f1a8acebd80", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::def_id::{DefId, DefIndex, DefPathHash, StableCrateId};\n use rustc_hir::definitions::DefKey;\n use rustc_hir::lang_items;\n use rustc_index::{bit_set::FiniteBitSet, vec::IndexVec};\n-use rustc_middle::hir::exports::Export;\n+use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc_middle::mir;\n use rustc_middle::thir;\n@@ -336,7 +336,7 @@ enum EntryKind {\n     Union(Lazy<VariantData>, ReprOptions),\n     Fn(Lazy<FnData>),\n     ForeignFn(Lazy<FnData>),\n-    Mod(Lazy<[Export]>),\n+    Mod(Lazy<[ModChild]>),\n     MacroDef(Lazy<MacroDef>),\n     ProcMacro(MacroKind),\n     Closure,"}, {"sha": "f37b976fba68d3d6d450cee0c1cb4b9b353bb2ac", "filename": "compiler/rustc_middle/src/hir/exports.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/02fe61b381c2dedc0071e1aacfbe91e0bad1f656/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fe61b381c2dedc0071e1aacfbe91e0bad1f656/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fexports.rs?ref=02fe61b381c2dedc0071e1aacfbe91e0bad1f656", "patch": "@@ -1,28 +0,0 @@\n-use crate::ty;\n-\n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::def::Res;\n-use rustc_hir::def_id::LocalDefId;\n-use rustc_macros::HashStable;\n-use rustc_span::symbol::Ident;\n-use rustc_span::Span;\n-\n-use std::fmt::Debug;\n-\n-/// This is the replacement export map. It maps a module to all of the exports\n-/// within.\n-pub type ExportMap = FxHashMap<LocalDefId, Vec<Export>>;\n-\n-#[derive(Copy, Clone, Debug, TyEncodable, TyDecodable, HashStable)]\n-pub struct Export {\n-    /// The name of the target.\n-    pub ident: Ident,\n-    /// The resolution of the target.\n-    /// Local variables cannot be exported, so this `Res` doesn't need the ID parameter.\n-    pub res: Res<!>,\n-    /// The span of the target.\n-    pub span: Span,\n-    /// The visibility of the export.\n-    /// We include non-`pub` exports for hygienic macros that get used from extern crates.\n-    pub vis: ty::Visibility,\n-}"}, {"sha": "557dc25528f1314bf7be9a7f34ee94170b69e918", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -2,7 +2,6 @@\n //!\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n \n-pub mod exports;\n pub mod map;\n pub mod place;\n "}, {"sha": "920eca7a717729e72cd1d49bfaea752a0ae74a06", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -84,6 +84,7 @@ pub mod dep_graph;\n pub mod hir;\n pub mod infer;\n pub mod lint;\n+pub mod metadata;\n pub mod middle;\n pub mod mir;\n pub mod thir;"}, {"sha": "6dcdc58c72d829e35cfe206c56a3e5db1597536c", "filename": "compiler/rustc_middle/src/metadata.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -0,0 +1,24 @@\n+use crate::ty;\n+\n+use rustc_hir::def::Res;\n+use rustc_macros::HashStable;\n+use rustc_span::symbol::Ident;\n+use rustc_span::Span;\n+\n+/// This structure is supposed to keep enough data to re-create `NameBinding`s for other crates\n+/// during name resolution. Right now the bindings are not recreated entirely precisely so we may\n+/// need to add more data in the future to correctly support macros 2.0, for example.\n+/// Module child can be either a proper item or a reexport (including private imports).\n+/// In case of reexport all the fields describe the reexport item itself, not what it refers to.\n+#[derive(Copy, Clone, Debug, TyEncodable, TyDecodable, HashStable)]\n+pub struct ModChild {\n+    /// Name of the item.\n+    pub ident: Ident,\n+    /// Resolution result corresponding to the item.\n+    /// Local variables cannot be exported, so this `Res` doesn't need the ID parameter.\n+    pub res: Res<!>,\n+    /// Visibility of the item.\n+    pub vis: ty::Visibility,\n+    /// Span of the item.\n+    pub span: Span,\n+}"}, {"sha": "7108f662cd3eabcc7fa2aff606516c3c419a6a53", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -1300,8 +1300,8 @@ rustc_queries! {\n         desc { \"traits in scope at a block\" }\n     }\n \n-    query module_exports(def_id: LocalDefId) -> Option<&'tcx [Export]> {\n-        desc { |tcx| \"looking up items exported by `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n+    query module_reexports(def_id: LocalDefId) -> Option<&'tcx [ModChild]> {\n+        desc { |tcx| \"looking up reexports of module `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }\n \n     query impl_defaultness(def_id: DefId) -> hir::Defaultness {\n@@ -1528,8 +1528,8 @@ rustc_queries! {\n         desc { \"fetching what a crate is named\" }\n         separate_provide_extern\n     }\n-    query item_children(def_id: DefId) -> &'tcx [Export] {\n-        desc { |tcx| \"collecting child items of `{}`\", tcx.def_path_str(def_id) }\n+    query module_children(def_id: DefId) -> &'tcx [ModChild] {\n+        desc { |tcx| \"collecting child items of module `{}`\", tcx.def_path_str(def_id) }\n         separate_provide_extern\n     }\n     query extern_mod_stmt_cnum(def_id: LocalDefId) -> Option<CrateNum> {"}, {"sha": "86ad573b5d748dadbf591df77e6457b987e76e85", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -2820,7 +2820,8 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     providers.in_scope_traits_map =\n         |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);\n     providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;\n-    providers.module_exports = |tcx, id| tcx.resolutions(()).export_map.get(&id).map(|v| &v[..]);\n+    providers.module_reexports =\n+        |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);\n     providers.crate_name = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n         tcx.crate_name"}, {"sha": "f5f55dcf38cf4efb186221aedf669276d1b76f64", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -19,7 +19,7 @@ pub use assoc::*;\n pub use generics::*;\n pub use vtable::*;\n \n-use crate::hir::exports::ExportMap;\n+use crate::metadata::ModChild;\n use crate::mir::{Body, GeneratorLayout};\n use crate::traits::{self, Reveal};\n use crate::ty;\n@@ -126,7 +126,7 @@ pub struct ResolverOutputs {\n     pub extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n     pub maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n     pub maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n-    pub export_map: ExportMap,\n+    pub reexport_map: FxHashMap<LocalDefId, Vec<ModChild>>,\n     pub glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n     /// Extern prelude entries. The value is `true` if the entry was introduced\n     /// via `extern crate` item and not `--extern` option or compiler built-in."}, {"sha": "c6454f3e0d02ae836fb1aa2ed15404386c51f92d", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -458,7 +458,7 @@ pub trait PrettyPrinter<'tcx>:\n                 // that's public and whose identifier isn't `_`.\n                 let reexport = self\n                     .tcx()\n-                    .item_children(visible_parent)\n+                    .module_children(visible_parent)\n                     .iter()\n                     .filter(|child| child.res.opt_def_id() == Some(def_id))\n                     .find(|child| child.vis.is_public() && child.ident.name != kw::Underscore)\n@@ -2602,7 +2602,7 @@ fn for_each_def(tcx: TyCtxt<'_>, mut collect_fn: impl for<'b> FnMut(&'b Ident, N\n \n     // Iterate external crate defs but be mindful about visibility\n     while let Some(def) = queue.pop() {\n-        for child in tcx.item_children(def).iter() {\n+        for child in tcx.module_children(def).iter() {\n             if !child.vis.is_public() {\n                 continue;\n             }\n@@ -2615,7 +2615,9 @@ fn for_each_def(tcx: TyCtxt<'_>, mut collect_fn: impl for<'b> FnMut(&'b Ident, N\n                         collect_fn(&child.ident, ns, def_id);\n                     }\n \n-                    if seen_defs.insert(def_id) {\n+                    if matches!(defkind, DefKind::Mod | DefKind::Enum | DefKind::Trait)\n+                        && seen_defs.insert(def_id)\n+                    {\n                         queue.push(def_id);\n                     }\n                 }"}, {"sha": "4a38d1c422f923b64c1807642e21fb9aff01186c", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -1,7 +1,7 @@\n use crate::dep_graph;\n-use crate::hir::exports::Export;\n use crate::infer::canonical::{self, Canonical};\n use crate::lint::LintLevelMap;\n+use crate::metadata::ModChild;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use crate::middle::lib_features::LibFeatures;"}, {"sha": "16418e627f2dcf994c637da1d1d792fa3326e544", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -520,7 +520,7 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n             let vis = self.tcx.visibility(item_id.def_id);\n             self.update_macro_reachable_def(item_id.def_id, def_kind, vis, defining_mod);\n         }\n-        if let Some(exports) = self.tcx.module_exports(module_def_id) {\n+        if let Some(exports) = self.tcx.module_reexports(module_def_id) {\n             for export in exports {\n                 if export.vis.is_accessible_from(defining_mod.to_def_id(), self.tcx) {\n                     if let Res::Def(def_kind, def_id) = export.res {\n@@ -926,7 +926,7 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n         // crate module gets processed as well.\n         if self.prev_level.is_some() {\n             let def_id = self.tcx.hir().local_def_id(id);\n-            if let Some(exports) = self.tcx.module_exports(def_id) {\n+            if let Some(exports) = self.tcx.module_reexports(def_id) {\n                 for export in exports.iter() {\n                     if export.vis.is_public() {\n                         if let Some(def_id) = export.res.opt_def_id() {"}, {"sha": "944e71851840cfacda90f818fe7970590e25aedc", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -26,7 +26,7 @@ use rustc_hir::def::{self, *};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n use rustc_metadata::creader::LoadedMacro;\n use rustc_middle::bug;\n-use rustc_middle::hir::exports::Export;\n+use rustc_middle::metadata::ModChild;\n use rustc_middle::ty;\n use rustc_session::cstore::CrateStore;\n use rustc_span::hygiene::{ExpnId, LocalExpnId, MacroKind};\n@@ -214,7 +214,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     crate fn build_reduced_graph_external(&mut self, module: Module<'a>) {\n-        for child in self.cstore().item_children_untracked(module.def_id(), self.session) {\n+        for child in self.cstore().module_children_untracked(module.def_id(), self.session) {\n             let parent_scope = ParentScope::module(module, self);\n             BuildReducedGraphVisitor { r: self, parent_scope }\n                 .build_reduced_graph_for_external_crate_res(child);\n@@ -938,9 +938,9 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     }\n \n     /// Builds the reduced graph for a single item in an external crate.\n-    fn build_reduced_graph_for_external_crate_res(&mut self, child: Export) {\n+    fn build_reduced_graph_for_external_crate_res(&mut self, child: ModChild) {\n         let parent = self.parent_scope.module;\n-        let Export { ident, res, vis, span } = child;\n+        let ModChild { ident, res, vis, span } = child;\n         let res = res.expect_non_local();\n         let expansion = self.parent_scope.expansion;\n         // Record primary definitions."}, {"sha": "2832f59a5efc68340635b16672de6aad0f1c9e63", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -15,7 +15,7 @@ use rustc_data_structures::ptr_key::PtrKey;\n use rustc_errors::{pluralize, struct_span_err, Applicability};\n use rustc_hir::def::{self, PartialRes};\n use rustc_hir::def_id::DefId;\n-use rustc_middle::hir::exports::Export;\n+use rustc_middle::metadata::ModChild;\n use rustc_middle::span_bug;\n use rustc_middle::ty;\n use rustc_session::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n@@ -1409,7 +1409,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             if is_good_import || binding.is_macro_def() {\n                 let res = binding.res().expect_non_local();\n                 if res != def::Res::Err {\n-                    reexports.push(Export { ident, res, span: binding.span, vis: binding.vis });\n+                    reexports.push(ModChild { ident, res, vis: binding.vis, span: binding.span });\n                 }\n             }\n         });\n@@ -1418,7 +1418,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             if let Some(def_id) = module.opt_def_id() {\n                 // Call to `expect_local` should be fine because current\n                 // code is only called for local modules.\n-                self.r.export_map.insert(def_id.expect_local(), reexports);\n+                self.r.reexport_map.insert(def_id.expect_local(), reexports);\n             }\n         }\n     }"}, {"sha": "37be0e228d27ade0f3e022cc04e4a5b2cb5cbe38", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -49,7 +49,7 @@ use rustc_hir::definitions::{DefKey, DefPathData, Definitions};\n use rustc_hir::TraitCandidate;\n use rustc_index::vec::IndexVec;\n use rustc_metadata::creader::{CStore, CrateLoader};\n-use rustc_middle::hir::exports::ExportMap;\n+use rustc_middle::metadata::ModChild;\n use rustc_middle::span_bug;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, DefIdTree, MainDefinition, ResolverOutputs};\n@@ -927,7 +927,7 @@ pub struct Resolver<'a> {\n \n     /// `CrateNum` resolutions of `extern crate` items.\n     extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n-    export_map: ExportMap,\n+    reexport_map: FxHashMap<LocalDefId, Vec<ModChild>>,\n     trait_map: NodeMap<Vec<TraitCandidate>>,\n \n     /// A map from nodes to anonymous modules.\n@@ -1333,7 +1333,7 @@ impl<'a> Resolver<'a> {\n             import_res_map: Default::default(),\n             label_res_map: Default::default(),\n             extern_crate_map: Default::default(),\n-            export_map: FxHashMap::default(),\n+            reexport_map: FxHashMap::default(),\n             trait_map: NodeMap::default(),\n             underscore_disambiguator: 0,\n             empty_module,\n@@ -1446,7 +1446,7 @@ impl<'a> Resolver<'a> {\n         let definitions = self.definitions;\n         let visibilities = self.visibilities;\n         let extern_crate_map = self.extern_crate_map;\n-        let export_map = self.export_map;\n+        let reexport_map = self.reexport_map;\n         let maybe_unused_trait_imports = self.maybe_unused_trait_imports;\n         let maybe_unused_extern_crates = self.maybe_unused_extern_crates;\n         let glob_map = self.glob_map;\n@@ -1457,7 +1457,7 @@ impl<'a> Resolver<'a> {\n             cstore: Box::new(self.crate_loader.into_cstore()),\n             visibilities,\n             extern_crate_map,\n-            export_map,\n+            reexport_map,\n             glob_map,\n             maybe_unused_trait_imports,\n             maybe_unused_extern_crates,\n@@ -1480,7 +1480,7 @@ impl<'a> Resolver<'a> {\n             cstore: Box::new(self.cstore().clone()),\n             visibilities: self.visibilities.clone(),\n             extern_crate_map: self.extern_crate_map.clone(),\n-            export_map: self.export_map.clone(),\n+            reexport_map: self.reexport_map.clone(),\n             glob_map: self.glob_map.clone(),\n             maybe_unused_trait_imports: self.maybe_unused_trait_imports.clone(),\n             maybe_unused_extern_crates: self.maybe_unused_extern_crates.clone(),"}, {"sha": "1a6fcbc57bff20614c938fa84cb2a62fcc5fefc3", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -1321,7 +1321,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if Some(*parent_did) != self.tcx.parent(*trait_did)\n                     && self\n                         .tcx\n-                        .item_children(*parent_did)\n+                        .module_children(*parent_did)\n                         .iter()\n                         .filter(|child| child.res.opt_def_id() == Some(*trait_did))\n                         .all(|child| child.ident.name == kw::Underscore)"}, {"sha": "d4e2969819faba1612b98789557687af43325396", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -516,7 +516,7 @@ fn build_module(\n     // If we're re-exporting a re-export it may actually re-export something in\n     // two namespaces, so the target may be listed twice. Make sure we only\n     // visit each node at most once.\n-    for &item in cx.tcx.item_children(did).iter() {\n+    for &item in cx.tcx.module_children(did).iter() {\n         if item.vis.is_public() {\n             let res = item.res.expect_non_local();\n             if let Some(def_id) = res.mod_def_id() {"}, {"sha": "491f7b2fa69014ca1f112b5b464a642f0f3bd298", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -265,7 +265,7 @@ impl ExternalCrate {\n                 })\n                 .collect()\n         } else {\n-            tcx.item_children(root).iter().map(|item| item.res).filter_map(as_keyword).collect()\n+            tcx.module_children(root).iter().map(|item| item.res).filter_map(as_keyword).collect()\n         }\n     }\n \n@@ -333,7 +333,7 @@ impl ExternalCrate {\n                 })\n                 .collect()\n         } else {\n-            tcx.item_children(root).iter().map(|item| item.res).filter_map(as_primitive).collect()\n+            tcx.module_children(root).iter().map(|item| item.res).filter_map(as_primitive).collect()\n         }\n     }\n }"}, {"sha": "6f1736afc3bdc510915bc09033a52e0844c2d212", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         // is declared but also a reexport of itself producing two exports of the same\n         // macro in the same module.\n         let mut inserted = FxHashSet::default();\n-        for export in self.cx.tcx.module_exports(CRATE_DEF_ID).unwrap_or(&[]) {\n+        for export in self.cx.tcx.module_reexports(CRATE_DEF_ID).unwrap_or(&[]) {\n             if let Res::Def(DefKind::Macro(_), def_id) = export.res {\n                 if let Some(local_def_id) = def_id.as_local() {\n                     if self.cx.tcx.has_attr(def_id, sym::macro_export) {"}, {"sha": "5bcec779bc0e7d130be976f1cb17ba9d660b13ed", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'tcx> LibEmbargoVisitor<'a, 'tcx> {\n             return;\n         }\n \n-        for item in self.tcx.item_children(def_id).iter() {\n+        for item in self.tcx.module_children(def_id).iter() {\n             if let Some(def_id) = item.res.opt_def_id() {\n                 if self.tcx.def_key(def_id).parent.map_or(false, |d| d == def_id.index)\n                     || item.vis.is_public()"}, {"sha": "41f5a913b316e1db5b61ac63cd48e3ef2ba61c38", "filename": "src/tools/clippy/clippy_lints/src/macro_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n             if let Res::Def(DefKind::Mod, id) = path.res;\n             if !id.is_local();\n             then {\n-                for kid in cx.tcx.item_children(id).iter() {\n+                for kid in cx.tcx.module_children(id).iter() {\n                     if let Res::Def(DefKind::Macro(_mac_type), mac_id) = kid.res {\n                         let span = mac_attr.span;\n                         let def_path = cx.tcx.def_path_str(mac_id);"}, {"sha": "7d196af7a53f475e6046fece7d2bb972fe60575e", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -924,7 +924,7 @@ pub fn check_path(cx: &LateContext<'_>, path: &[&str]) -> bool {\n         let lang_item_path = cx.get_def_path(*item_def_id);\n         if path_syms.starts_with(&lang_item_path) {\n             if let [item] = &path_syms[lang_item_path.len()..] {\n-                for child in cx.tcx.item_children(*item_def_id) {\n+                for child in cx.tcx.module_children(*item_def_id) {\n                     if child.ident.name == *item {\n                         return true;\n                     }\n@@ -984,7 +984,7 @@ impl<'tcx> LateLintPass<'tcx> for InterningDefinedSymbol {\n \n         for &module in &[&paths::KW_MODULE, &paths::SYM_MODULE] {\n             if let Some(def_id) = path_to_res(cx, module).opt_def_id() {\n-                for item in cx.tcx.item_children(def_id).iter() {\n+                for item in cx.tcx.module_children(def_id).iter() {\n                     if_chain! {\n                         if let Res::Def(DefKind::Const, item_def_id) = item.res;\n                         let ty = cx.tcx.type_of(item_def_id);"}, {"sha": "91ebc7ea89cc026172eb13069f9f356c1ec5e235", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -82,7 +82,6 @@ use rustc_hir::{\n     TraitItemKind, TraitRef, TyKind, UnOp, ArrayLen\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n-use rustc_middle::hir::exports::Export;\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::ty as rustc_ty;\n@@ -523,10 +522,21 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n             }\n         };\n     }\n-    fn item_child_by_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, name: &str) -> Option<&'tcx Export> {\n-        tcx.item_children(def_id)\n-            .iter()\n-            .find(|item| item.ident.name.as_str() == name)\n+    fn item_child_by_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, name: &str) -> Option<Res> {\n+        match tcx.def_kind(def_id) {\n+            DefKind::Mod | DefKind::Enum | DefKind::Trait => tcx\n+                .module_children(def_id)\n+                .iter()\n+                .find(|item| item.ident.name.as_str() == name)\n+                .map(|child| child.res.expect_non_local()),\n+            DefKind::Impl => tcx\n+                .associated_item_def_ids(def_id)\n+                .iter()\n+                .copied()\n+                .find(|assoc_def_id| tcx.item_name(*assoc_def_id).as_str() == name)\n+                .map(|assoc_def_id| Res::Def(tcx.def_kind(assoc_def_id), assoc_def_id)),\n+            _ => None,\n+        }\n     }\n \n     let (krate, first, path) = match *path {\n@@ -543,15 +553,12 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n     let last = path\n         .iter()\n         .copied()\n-        // `get_def_path` seems to generate these empty segments for extern blocks.\n-        // We can just ignore them.\n-        .filter(|segment| !segment.is_empty())\n         // for each segment, find the child item\n-        .try_fold(first, |item, segment| {\n-            let def_id = item.res.def_id();\n+        .try_fold(first, |res, segment| {\n+            let def_id = res.def_id();\n             if let Some(item) = item_child_by_name(tcx, def_id, segment) {\n                 Some(item)\n-            } else if matches!(item.res, Res::Def(DefKind::Enum | DefKind::Struct, _)) {\n+            } else if matches!(res, Res::Def(DefKind::Enum | DefKind::Struct, _)) {\n                 // it is not a child item so check inherent impl items\n                 tcx.inherent_impls(def_id)\n                     .iter()\n@@ -560,7 +567,7 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n                 None\n             }\n         });\n-    try_res!(last).res.expect_non_local()\n+    try_res!(last).expect_non_local()\n }\n \n /// Convenience function to get the `DefId` of a trait by path."}, {"sha": "306ea50258da00ad0d133616dc85c1a0a4549450", "filename": "src/tools/clippy/tests/ui/macro_use_imports.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.fixed?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -40,7 +40,7 @@ mod a {\n     }\n }\n \n-// issue #7015, ICE due to calling `item_children` with local `DefId`\n+// issue #7015, ICE due to calling `module_children` with local `DefId`\n #[macro_use]\n use a as b;\n "}, {"sha": "e26a7545ea6f83fc054291bbdce5521d5c27c93d", "filename": "src/tools/clippy/tests/ui/macro_use_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e19ca1d946269f7b7eb13171531caf2e16f42076/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19ca1d946269f7b7eb13171531caf2e16f42076/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.rs?ref=e19ca1d946269f7b7eb13171531caf2e16f42076", "patch": "@@ -40,7 +40,7 @@ mod a {\n     }\n }\n \n-// issue #7015, ICE due to calling `item_children` with local `DefId`\n+// issue #7015, ICE due to calling `module_children` with local `DefId`\n #[macro_use]\n use a as b;\n "}]}