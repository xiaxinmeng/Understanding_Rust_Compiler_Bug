{"sha": "421a2113a840aa5801230e7226fc9628100072ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMWEyMTEzYTg0MGFhNTgwMTIzMGU3MjI2ZmM5NjI4MTAwMDcyZWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-21T03:03:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-21T03:03:28Z"}, "message": "Auto merge of #45039 - QuietMisdreavus:doc-spotlight, r=GuillaumeGomez,QuietMisdreavus\n\nshow in docs whether the return type of a function impls Iterator/Read/Write\n\nCloses #25928\n\nThis PR makes it so that when rustdoc documents a function, it checks the return type to see whether it implements a handful of specific traits. If so, it will print the impl and any associated types. Rather than doing this via a whitelist within rustdoc, i chose to do this by a new `#[doc]` attribute parameter, so things like `Future` could tap into this if desired.\n\n### Known shortcomings\n\n~~The printing of impls currently uses the `where` class over the whole thing to shrink the font size relative to the function definition itself. Naturally, when the impl has a where clause of its own, it gets shrunken even further:~~ (This is no longer a problem because the design changed and rendered this concern moot.)\n\nThe lookup currently just looks at the top-level type, not looking inside things like Result or Option, which renders the spotlights on Read/Write a little less useful:\n\n<details><summary>`File::{open, create}` don't have spotlight info (pic of old design)</summary>\n\n![image](https://user-images.githubusercontent.com/5217170/31209495-e59d027e-a950-11e7-9998-ceefceb71c07.png)\n\n</details>\n\nAll three of the initially spotlighted traits are generically implemented on `&mut` references. Rustdoc currently treats a `&mut T` reference-to-a-generic as an impl on the reference primitive itself. `&mut Self` counts as a generic in the eyes of rustdoc. All this combines to create this lovely scene on `Iterator::by_ref`:\n\n<details><summary>`Iterator::by_ref` spotlights Iterator, Read, and Write (pic of old design)</summary>\n\n![image](https://user-images.githubusercontent.com/5217170/31209554-50b271ca-a951-11e7-928b-4f83416c8681.png)\n\n</details>", "tree": {"sha": "17e45188fe0fcdd5ffcb838a33a200562528ab67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17e45188fe0fcdd5ffcb838a33a200562528ab67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/421a2113a840aa5801230e7226fc9628100072ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/421a2113a840aa5801230e7226fc9628100072ef", "html_url": "https://github.com/rust-lang/rust/commit/421a2113a840aa5801230e7226fc9628100072ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/421a2113a840aa5801230e7226fc9628100072ef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e44fee88d48e9f7844c6d316ae8540db19dc9fa", "html_url": "https://github.com/rust-lang/rust/commit/1e44fee88d48e9f7844c6d316ae8540db19dc9fa"}, {"sha": "6047a0365976cbf7ad2991e6d88e4adf2fc6d0f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6047a0365976cbf7ad2991e6d88e4adf2fc6d0f4", "html_url": "https://github.com/rust-lang/rust/commit/6047a0365976cbf7ad2991e6d88e4adf2fc6d0f4"}], "stats": {"total": 359, "additions": 345, "deletions": 14}, "files": [{"sha": "8117755fef1c8741f45648c178c98d37f4e3928d", "filename": "src/doc/unstable-book/src/language-features/doc-spotlight.md", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/421a2113a840aa5801230e7226fc9628100072ef/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-spotlight.md", "raw_url": "https://github.com/rust-lang/rust/raw/421a2113a840aa5801230e7226fc9628100072ef/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-spotlight.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-spotlight.md?ref=421a2113a840aa5801230e7226fc9628100072ef", "patch": "@@ -0,0 +1,30 @@\n+# `doc_spotlight`\n+\n+The tracking issue for this feature is: [#45040]\n+\n+The `doc_spotlight` feature allows the use of the `spotlight` parameter to the `#[doc]` attribute,\n+to \"spotlight\" a specific trait on the return values of functions. Adding a `#[doc(spotlight)]`\n+attribute to a trait definition will make rustdoc print extra information for functions which return\n+a type that implements that trait. This attribute is applied to the `Iterator`, `io::Read`, and\n+`io::Write` traits in the standard library.\n+\n+You can do this on your own traits, like this:\n+\n+```\n+#![feature(doc_spotlight)]\n+\n+#[doc(spotlight)]\n+pub trait MyTrait {}\n+\n+pub struct MyStruct;\n+impl MyTrait for MyStruct {}\n+\n+/// The docs for this function will have an extra line about `MyStruct` implementing `MyTrait`,\n+/// without having to write that yourself!\n+pub fn my_fn() -> MyStruct { MyStruct }\n+```\n+\n+This feature was originally implemented in PR [#45039].\n+\n+[#45040]: https://github.com/rust-lang/rust/issues/45040\n+[#45039]: https://github.com/rust-lang/rust/pull/45039"}, {"sha": "7f6d627536da35c693c49a5ce692fb3ea4547a29", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=421a2113a840aa5801230e7226fc9628100072ef", "patch": "@@ -30,6 +30,7 @@ fn _assert_is_object_safe(_: &Iterator<Item=()>) {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented = \"`{Self}` is not an iterator; maybe try calling \\\n                             `.iter()` or a similar method\"]\n+#[doc(spotlight)]\n pub trait Iterator {\n     /// The type of the elements being iterated over.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "631b9f98589f64e34fd2d7c944b6b750598482b7", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=421a2113a840aa5801230e7226fc9628100072ef", "patch": "@@ -107,6 +107,24 @@\n #![feature(const_unsafe_cell_new)]\n #![feature(const_cell_new)]\n #![feature(const_nonzero_new)]\n+#![cfg_attr(not(stage0), feature(doc_spotlight))]\n+\n+#![cfg_attr(not(stage0), feature(const_min_value))]\n+#![cfg_attr(not(stage0), feature(const_max_value))]\n+#![cfg_attr(not(stage0), feature(const_atomic_bool_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_isize_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_usize_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_i8_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_u8_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_i16_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_u16_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_i32_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_u32_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_i64_new))]\n+#![cfg_attr(not(stage0), feature(const_atomic_u64_new))]\n+#![cfg_attr(not(stage0), feature(const_unsafe_cell_new))]\n+#![cfg_attr(not(stage0), feature(const_cell_new))]\n+#![cfg_attr(not(stage0), feature(const_nonzero_new))]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "820c3e856dbb148ed8e137430a4030aa1c78aca5", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=421a2113a840aa5801230e7226fc9628100072ef", "patch": "@@ -145,11 +145,13 @@ pub fn build_external_trait(cx: &DocContext, did: DefId) -> clean::Trait {\n     let generics = (cx.tcx.generics_of(did), &predicates).clean(cx);\n     let generics = filter_non_trait_generics(did, generics);\n     let (generics, supertrait_bounds) = separate_supertrait_bounds(generics);\n+    let is_spotlight = load_attrs(cx, did).has_doc_flag(\"spotlight\");\n     clean::Trait {\n         unsafety: cx.tcx.trait_def(did).unsafety,\n         generics,\n         items: trait_items,\n         bounds: supertrait_bounds,\n+        is_spotlight,\n     }\n }\n "}, {"sha": "69226239c96e80421368b895c4f1ab52631ec9f1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=421a2113a840aa5801230e7226fc9628100072ef", "patch": "@@ -151,7 +151,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n         match module.inner {\n             ModuleItem(ref module) => {\n                 for it in &module.items {\n-                    if it.is_extern_crate() && it.attrs.has_doc_masked() {\n+                    if it.is_extern_crate() && it.attrs.has_doc_flag(\"masked\") {\n                         masked_crates.insert(it.def_id.krate);\n                     }\n                 }\n@@ -596,12 +596,12 @@ impl Attributes {\n         None\n     }\n \n-    pub fn has_doc_masked(&self) -> bool {\n+    pub fn has_doc_flag(&self, flag: &str) -> bool {\n         for attr in &self.other_attrs {\n             if !attr.check_name(\"doc\") { continue; }\n \n             if let Some(items) = attr.meta_item_list() {\n-                if items.iter().filter_map(|i| i.meta_item()).any(|it| it.check_name(\"masked\")) {\n+                if items.iter().filter_map(|i| i.meta_item()).any(|it| it.check_name(flag)) {\n                     return true;\n                 }\n             }\n@@ -1331,19 +1331,31 @@ impl Clean<FunctionRetTy> for hir::FunctionRetTy {\n     }\n }\n \n+impl GetDefId for FunctionRetTy {\n+    fn def_id(&self) -> Option<DefId> {\n+        match *self {\n+            Return(ref ty) => ty.def_id(),\n+            DefaultReturn => None,\n+        }\n+    }\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Trait {\n     pub unsafety: hir::Unsafety,\n     pub items: Vec<Item>,\n     pub generics: Generics,\n     pub bounds: Vec<TyParamBound>,\n+    pub is_spotlight: bool,\n }\n \n impl Clean<Item> for doctree::Trait {\n     fn clean(&self, cx: &DocContext) -> Item {\n+        let attrs = self.attrs.clean(cx);\n+        let is_spotlight = attrs.has_doc_flag(\"spotlight\");\n         Item {\n             name: Some(self.name.clean(cx)),\n-            attrs: self.attrs.clean(cx),\n+            attrs: attrs,\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir.local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n@@ -1354,6 +1366,7 @@ impl Clean<Item> for doctree::Trait {\n                 items: self.items.clean(cx),\n                 generics: self.generics.clean(cx),\n                 bounds: self.bounds.clean(cx),\n+                is_spotlight: is_spotlight,\n             }),\n         }\n     }"}, {"sha": "8370f805828614d4c201756209b43eb8b7c2e4bf", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 74, "deletions": 7, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=421a2113a840aa5801230e7226fc9628100072ef", "patch": "@@ -2268,7 +2268,7 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                            AbiSpace(f.abi),\n                            it.name.as_ref().unwrap(),\n                            f.generics).len();\n-    write!(w, \"<pre class='rust fn'>\")?;\n+    write!(w, \"{}<pre class='rust fn'>\", render_spotlight_traits(it)?)?;\n     render_attributes(w, it)?;\n     write!(w, \"{vis}{constness}{unsafety}{abi}fn \\\n                {name}{generics}{decl}{where_clause}</pre>\",\n@@ -2402,8 +2402,9 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         let item_type = m.type_();\n         let id = derive_id(format!(\"{}.{}\", item_type, name));\n         let ns_id = derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-        write!(w, \"<h3 id='{id}' class='method'>\\\n+        write!(w, \"{extra}<h3 id='{id}' class='method'>\\\n                    <span id='{ns_id}' class='invisible'><code>\",\n+               extra = render_spotlight_traits(m)?,\n                id = id,\n                ns_id = ns_id)?;\n         render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl)?;\n@@ -2605,10 +2606,10 @@ fn assoc_const(w: &mut fmt::Formatter,\n     Ok(())\n }\n \n-fn assoc_type(w: &mut fmt::Formatter, it: &clean::Item,\n-              bounds: &Vec<clean::TyParamBound>,\n-              default: Option<&clean::Type>,\n-              link: AssocItemLink) -> fmt::Result {\n+fn assoc_type<W: fmt::Write>(w: &mut W, it: &clean::Item,\n+                             bounds: &Vec<clean::TyParamBound>,\n+                             default: Option<&clean::Type>,\n+                             link: AssocItemLink) -> fmt::Result {\n     write!(w, \"type <a href='{}' class=\\\"type\\\">{}</a>\",\n            naive_assoc_href(it, link),\n            it.name.as_ref().unwrap())?;\n@@ -3239,6 +3240,69 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool) -> bool {\n     }\n }\n \n+fn render_spotlight_traits(item: &clean::Item) -> Result<String, fmt::Error> {\n+    let mut out = String::new();\n+\n+    match item.inner {\n+        clean::FunctionItem(clean::Function { ref decl, .. }) |\n+        clean::TyMethodItem(clean::TyMethod { ref decl, .. }) |\n+        clean::MethodItem(clean::Method { ref decl, .. }) |\n+        clean::ForeignFunctionItem(clean::Function { ref decl, .. }) => {\n+            out = spotlight_decl(decl)?;\n+        }\n+        _ => {}\n+    }\n+\n+    Ok(out)\n+}\n+\n+fn spotlight_decl(decl: &clean::FnDecl) -> Result<String, fmt::Error> {\n+    let mut out = String::new();\n+    let mut trait_ = String::new();\n+\n+    if let Some(did) = decl.output.def_id() {\n+        let c = cache();\n+        if let Some(impls) = c.impls.get(&did) {\n+            for i in impls {\n+                let impl_ = i.inner_impl();\n+                if impl_.trait_.def_id().and_then(|d| c.traits.get(&d))\n+                                        .map_or(false, |t| t.is_spotlight) {\n+                    if out.is_empty() {\n+                        out.push_str(\n+                            &format!(\"<h3 class=\\\"important\\\">Important traits for {}</h3>\\\n+                                      <code class=\\\"content\\\">\",\n+                                     impl_.for_));\n+                        trait_.push_str(&format!(\"{}\", impl_.for_));\n+                    }\n+\n+                    //use the \"where\" class here to make it small\n+                    out.push_str(&format!(\"<span class=\\\"where fmt-newline\\\">{}</span>\", impl_));\n+                    let t_did = impl_.trait_.def_id().unwrap();\n+                    for it in &impl_.items {\n+                        if let clean::TypedefItem(ref tydef, _) = it.inner {\n+                            out.push_str(\"<span class=\\\"where fmt-newline\\\">    \");\n+                            assoc_type(&mut out, it, &vec![],\n+                                       Some(&tydef.type_),\n+                                       AssocItemLink::GotoSource(t_did, &FxHashSet()))?;\n+                            out.push_str(\";</span>\");\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    if !out.is_empty() {\n+        out.insert_str(0, &format!(\"<div class=\\\"important-traits\\\"><div class='tooltip'>\u24d8\\\n+                                    <span class='tooltiptext'>Important traits for {}</span></div>\\\n+                                    <div class=\\\"content hidden\\\">\",\n+                                   trait_));\n+        out.push_str(\"</code></div></div>\");\n+    }\n+\n+    Ok(out)\n+}\n+\n fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLink,\n                render_mode: RenderMode, outer_version: Option<&str>,\n                show_def_docs: bool) -> fmt::Result {\n@@ -3280,12 +3344,14 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n         };\n \n         match item.inner {\n-            clean::MethodItem(..) | clean::TyMethodItem(..) => {\n+            clean::MethodItem(clean::Method { ref decl, .. }) |\n+            clean::TyMethodItem(clean::TyMethod{ ref decl, .. }) => {\n                 // Only render when the method is not static or we allow static methods\n                 if render_method_item {\n                     let id = derive_id(format!(\"{}.{}\", item_type, name));\n                     let ns_id = derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                     write!(w, \"<h4 id='{}' class=\\\"{}\\\">\", id, item_type)?;\n+                    write!(w, \"{}\", spotlight_decl(decl)?)?;\n                     write!(w, \"<span id='{}' class='invisible'>\", ns_id)?;\n                     write!(w, \"<code>\")?;\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl)?;\n@@ -3332,6 +3398,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n \n         if render_method_item || render_mode == RenderMode::Normal {\n             let prefix = render_assoc_const_value(item);\n+\n             if !is_default_item {\n                 if let Some(t) = trait_ {\n                     // The trait item may have been stripped so we might not"}, {"sha": "34f649aa2d3051235a97a74ed88cb8ddc34de0f4", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=421a2113a840aa5801230e7226fc9628100072ef", "patch": "@@ -216,6 +216,7 @@\n         var help = document.getElementById(\"help\");\n         switch (getVirtualKey(ev)) {\n         case \"Escape\":\n+            hideModal();\n             var search = document.getElementById(\"search\");\n             if (!hasClass(help, \"hidden\")) {\n                 displayHelp(false, ev);\n@@ -229,6 +230,7 @@\n         case \"s\":\n         case \"S\":\n             displayHelp(false, ev);\n+            hideModal();\n             ev.preventDefault();\n             focusSearchBar();\n             break;\n@@ -241,6 +243,7 @@\n \n         case \"?\":\n             if (ev.shiftKey) {\n+                hideModal();\n                 displayHelp(true, ev);\n             }\n             break;\n@@ -1713,6 +1716,31 @@\n         }\n     });\n \n+    function showModal(content) {\n+        var modal = document.createElement('div');\n+        modal.id = \"important\";\n+        addClass(modal, 'modal');\n+        modal.innerHTML = '<div class=\"modal-content\"><div class=\"close\" id=\"modal-close\">\u2715</div>' +\n+                          '<div class=\"whiter\"></div><span class=\"docblock\">' + content +\n+                          '</span></div>';\n+        document.getElementsByTagName('body')[0].appendChild(modal);\n+        document.getElementById('modal-close').onclick = hideModal;\n+        modal.onclick = hideModal;\n+    }\n+\n+    function hideModal() {\n+        var modal = document.getElementById(\"important\");\n+        if (modal) {\n+            modal.parentNode.removeChild(modal);\n+        }\n+    }\n+\n+    onEach(document.getElementsByClassName('important-traits'), function(e) {\n+        e.onclick = function() {\n+            showModal(e.lastElementChild.innerHTML);\n+        };\n+    });\n+\n     var search_input = document.getElementsByClassName(\"search-input\")[0];\n \n     if (search_input) {"}, {"sha": "d7f4674908c5887b8104dbce10f1b5556bb29789", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 106, "deletions": 3, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=421a2113a840aa5801230e7226fc9628100072ef", "patch": "@@ -89,7 +89,7 @@ h2 {\n h3 {\n \tfont-size: 1.3em;\n }\n-h1, h2, h3:not(.impl):not(.method):not(.type):not(.tymethod), h4:not(.method):not(.type):not(.tymethod):not(.associatedconstant) {\n+h1, h2, h3:not(.impl):not(.method):not(.type):not(.tymethod):not(.important), h4:not(.method):not(.type):not(.tymethod):not(.associatedconstant) {\n \tfont-weight: 500;\n \tmargin: 20px 0 15px 0;\n \tpadding-bottom: 6px;\n@@ -141,9 +141,12 @@ code, pre {\n \tborder-radius: 3px;\n \tpadding: 0 0.2em;\n }\n-.docblock pre code, .docblock-short pre code {\n+.docblock pre code, .docblock-short pre code, .docblock code.spotlight {\n \tpadding: 0;\n }\n+.docblock code.spotlight :last-child {\n+\tpadding-bottom: 0.6em;\n+}\n pre {\n \tpadding: 14px;\n }\n@@ -435,10 +438,11 @@ h4 > code, h3 > code, .invisible > code {\n \tfont-size: 0.8em;\n }\n \n-.content .methods > div { margin-left: 40px; }\n+.content .methods > div:not(.important-traits) { margin-left: 40px; }\n \n .content .impl-items .docblock, .content .impl-items .stability {\n \tmargin-left: 40px;\n+\tmargin-bottom: .6em;\n }\n .content .impl-items .method, .content .impl-items > .type, .impl-items > .associatedconstant {\n \tmargin-left: 20px;\n@@ -951,3 +955,102 @@ pre.rust {\n \tcolor: #888;\n \tfont-size: 16px;\n }\n+\n+.important-traits {\n+\tcursor: pointer;\n+\tz-index: 2;\n+}\n+\n+h4 > .important-traits {\n+\tposition: absolute;\n+\tleft: -44px;\n+\ttop: 2px;\n+}\n+\n+.modal {\n+\tposition: fixed;\n+\twidth: 100vw;\n+\theight: 100vh;\n+\tbackground-color: rgba(0,0,0,0.3);\n+\tz-index: 10000;\n+\ttop: 0;\n+\tleft: 0;\n+}\n+\n+.modal-content {\n+\tdisplay: block;\n+\tmax-width: 60%;\n+\tmin-width: 200px;\n+\tbackground-color: #eee;\n+\tpadding: 8px;\n+\ttop: 40%;\n+\tposition: absolute;\n+\tleft: 50%;\n+\ttransform: translate(-50%, -40%);\n+\tborder: 1px solid #999;\n+\tborder-radius: 4px;\n+\tborder-top-right-radius: 0;\n+}\n+\n+.modal-content > .docblock {\n+\tmargin: 0;\n+}\n+\n+h3.important {\n+\tmargin: 0;\n+\tmargin-bottom: 13px;\n+\tfont-size: 19px;\n+}\n+\n+.modal-content > .docblock > code.content {\n+\tmargin: 0;\n+\tpadding: 0;\n+\tfont-size: 20px;\n+}\n+\n+.modal-content > .close {\n+\tposition: absolute;\n+\tfont-weight: 900;\n+\tright: -25px;\n+\ttop: -1px;\n+\tfont-size: 18px;\n+\tbackground-color: #eee;\n+\twidth: 25px;\n+\tpadding-right: 2px;\n+\tborder-top-right-radius: 5px;\n+\tborder-bottom-right-radius: 5px;\n+\ttext-align: center;\n+\tborder: 1px solid #999;\n+\tborder-right: 0;\n+\tcursor: pointer;\n+}\n+\n+.modal-content > .close:hover {\n+\tbackground-color: #ff1f1f;\n+\tcolor: white;\n+}\n+\n+.modal-content > .whiter {\n+\theight: 25px;\n+\tposition: absolute;\n+\twidth: 3px;\n+\tbackground-color: #eee;\n+\tright: -2px;\n+\ttop: 0px;\n+}\n+\n+.modal-content > .close:hover + .whiter {\n+\tbackground-color: #ff1f1f;\n+}\n+\n+#main > div.important-traits {\n+\tposition: absolute;\n+\tleft: -24px;\n+\tmargin-top: 16px;\n+}\n+\n+.content > .methods > div.important-traits {\n+\tposition: absolute;\n+\tleft: -42px;\n+\tmargin-top: 2px;\n+}\n\\ No newline at end of file"}, {"sha": "ff952122d3de95e8c528de2bb449a85a6bfa5e5f", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=421a2113a840aa5801230e7226fc9628100072ef", "patch": "@@ -470,6 +470,7 @@ fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>\n /// [`&[u8]`]: primitive.slice.html\n ///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(spotlight)]\n pub trait Read {\n     /// Pull some bytes from this source into the specified buffer, returning\n     /// how many bytes were read.\n@@ -988,6 +989,7 @@ impl Initializer {\n /// # }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(spotlight)]\n pub trait Write {\n     /// Write a buffer into this object, returning how many bytes were written.\n     ///"}, {"sha": "ccc89ccdcf4c3ff3d5d9a69bcb8faab583facc5c", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=421a2113a840aa5801230e7226fc9628100072ef", "patch": "@@ -329,6 +329,7 @@\n #![feature(vec_push_all)]\n #![feature(doc_cfg)]\n #![feature(doc_masked)]\n+#![feature(doc_spotlight)]\n #![cfg_attr(test, feature(update_panic_count))]\n #![cfg_attr(windows, feature(const_atomic_ptr_new))]\n "}, {"sha": "5c7450baa2f7db4746a551d8cb6de086c20c9a08", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421a2113a840aa5801230e7226fc9628100072ef/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=421a2113a840aa5801230e7226fc9628100072ef", "patch": "@@ -381,6 +381,8 @@ declare_features! (\n     (active, doc_cfg, \"1.21.0\", Some(43781)),\n     // #[doc(masked)]\n     (active, doc_masked, \"1.21.0\", Some(44027)),\n+    // #[doc(spotlight)]\n+    (active, doc_spotlight, \"1.22.0\", Some(45040)),\n \n     // allow `#[must_use]` on functions and comparison operators (RFC 1940)\n     (active, fn_must_use, \"1.21.0\", Some(43302)),\n@@ -1300,6 +1302,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     gate_feature_post!(&self, doc_masked, attr.span,\n                         \"#[doc(masked)] is experimental\"\n                     );\n+                } else if content.iter().any(|c| c.check_name(\"spotlight\")) {\n+                    gate_feature_post!(&self, doc_spotlight, attr.span,\n+                        \"#[doc(spotlight)] is experimental\"\n+                    );\n                 }\n             }\n         }"}, {"sha": "6369358538d50417bac4f2e58da643eb6fddf16c", "filename": "src/test/compile-fail/feature-gate-doc_spotlight.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/421a2113a840aa5801230e7226fc9628100072ef/src%2Ftest%2Fcompile-fail%2Ffeature-gate-doc_spotlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421a2113a840aa5801230e7226fc9628100072ef/src%2Ftest%2Fcompile-fail%2Ffeature-gate-doc_spotlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-doc_spotlight.rs?ref=421a2113a840aa5801230e7226fc9628100072ef", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[doc(spotlight)] //~ ERROR: #[doc(spotlight)] is experimental\n+trait SomeTrait {}\n+\n+fn main() {}"}, {"sha": "a570aa2d3984f29a9cc803fa51153ffd98a90e4d", "filename": "src/test/rustdoc/doc-spotlight.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/421a2113a840aa5801230e7226fc9628100072ef/src%2Ftest%2Frustdoc%2Fdoc-spotlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421a2113a840aa5801230e7226fc9628100072ef/src%2Ftest%2Frustdoc%2Fdoc-spotlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-spotlight.rs?ref=421a2113a840aa5801230e7226fc9628100072ef", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(doc_spotlight)]\n+\n+pub struct Wrapper<T> {\n+    inner: T,\n+}\n+\n+impl<T: SomeTrait> SomeTrait for Wrapper<T> {}\n+\n+#[doc(spotlight)]\n+pub trait SomeTrait {\n+    // @has doc_spotlight/trait.SomeTrait.html\n+    // @has - '//code[@class=\"content\"]' 'impl<T: SomeTrait> SomeTrait for Wrapper<T>'\n+    fn wrap_me(self) -> Wrapper<Self> where Self: Sized {\n+        Wrapper {\n+            inner: self,\n+        }\n+    }\n+}\n+\n+pub struct SomeStruct;\n+impl SomeTrait for SomeStruct {}\n+\n+impl SomeStruct {\n+    // @has doc_spotlight/struct.SomeStruct.html\n+    // @has - '//code[@class=\"content\"]' 'impl SomeTrait for SomeStruct'\n+    // @has - '//code[@class=\"content\"]' 'impl<T: SomeTrait> SomeTrait for Wrapper<T>'\n+    pub fn new() -> SomeStruct {\n+        SomeStruct\n+    }\n+}\n+\n+// @has doc_spotlight/fn.bare_fn.html\n+// @has - '//code[@class=\"content\"]' 'impl SomeTrait for SomeStruct'\n+pub fn bare_fn() -> SomeStruct {\n+    SomeStruct\n+}"}]}