{"sha": "5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMjQ1OTE0NWNiOTBkN2Q1MmNmZGUxZDRlZDc3MTlkZGUxZGZkYzA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-08T21:54:51Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-08T21:54:51Z"}, "message": "Add -lpath mechanism for logging only a subset of a pass (by module-path prefix)", "tree": {"sha": "7f2305524744f4b7fb02469f3c9ab0e64b4c9577", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f2305524744f4b7fb02469f3c9ab0e64b4c9577"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0", "html_url": "https://github.com/rust-lang/rust/commit/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3758fe321725bec4707e1b7d4fff333ba915905", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3758fe321725bec4707e1b7d4fff333ba915905", "html_url": "https://github.com/rust-lang/rust/commit/e3758fe321725bec4707e1b7d4fff333ba915905"}], "stats": {"total": 245, "additions": 142, "deletions": 103}, "files": [{"sha": "0024f2fd75ecfd4b2d75fc8aed4c54e4b1bd3ac7", "filename": "src/boot/driver/main.ml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fdriver%2Fmain.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fdriver%2Fmain.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fmain.ml?ref=5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0", "patch": "@@ -51,6 +51,7 @@ let (sess:Session.sess) =\n     Session.sess_log_asm = false;\n     Session.sess_log_obj = false;\n     Session.sess_log_lib = false;\n+    Session.sess_log_path = None;\n     Session.sess_log_out = stdout;\n     Session.sess_log_err = stderr;\n     Session.sess_trace_block = false;\n@@ -199,6 +200,10 @@ let argspecs =\n     (flag (fun _ -> sess.Session.sess_log_lib <- true)\n        \"-llib\"        \"log library search\");\n \n+    (\"-lpath\", Arg.String\n+       (fun s -> sess.Session.sess_log_path <- Some (split_string '.' s)),\n+     \"module path to restrict logging to\");\n+\n     (flag (fun _ -> sess.Session.sess_trace_block <- true)\n        \"-tblock\"      \"emit block-boundary tracing code\");\n     (flag (fun _ -> sess.Session.sess_trace_drop <- true)"}, {"sha": "d9317a6c267bd0baa7349db0b4decf833fcbe727", "filename": "src/boot/driver/session.ml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fdriver%2Fsession.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fdriver%2Fsession.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fsession.ml?ref=5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0", "patch": "@@ -37,6 +37,7 @@ type sess =\n   mutable sess_log_asm: bool;\n   mutable sess_log_obj: bool;\n   mutable sess_log_lib: bool;\n+  mutable sess_log_path: (string list) option;\n   mutable sess_log_out: out_channel;\n   mutable sess_log_err: out_channel;\n   mutable sess_trace_block: bool;"}, {"sha": "e109f82b63432b8abb505d9967be5ad8ab8b6775", "filename": "src/boot/me/alias.ml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Falias.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Falias.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Falias.ml?ref=5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0", "patch": "@@ -2,7 +2,7 @@ open Semant;;\n open Common;;\n \n let log cx = Session.log \"alias\"\n-  cx.ctxt_sess.Session.sess_log_alias\n+  (should_log cx cx.ctxt_sess.Session.sess_log_alias)\n   cx.ctxt_sess.Session.sess_log_out\n ;;\n \n@@ -110,14 +110,13 @@ let process_crate\n     (cx:ctxt)\n     (crate:Ast.crate)\n     : unit =\n-  let path = Stack.create () in\n   let passes =\n     [|\n       (alias_analysis_visitor cx\n          Walk.empty_visitor);\n     |]\n   in\n-    run_passes cx \"alias\" path passes\n+    run_passes cx \"alias\" passes\n       cx.ctxt_sess.Session.sess_log_alias log crate\n ;;\n "}, {"sha": "29a8d86b28eddf841e462d2543322130beba5a08", "filename": "src/boot/me/dead.ml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Fdead.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Fdead.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fdead.ml?ref=5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0", "patch": "@@ -7,7 +7,7 @@ open Semant;;\n open Common;;\n \n let log cx = Session.log \"dead\"\n-  cx.ctxt_sess.Session.sess_log_dead\n+  (should_log cx cx.ctxt_sess.Session.sess_log_dead)\n   cx.ctxt_sess.Session.sess_log_out\n ;;\n \n@@ -99,15 +99,14 @@ let process_crate\n     (cx:ctxt)\n     (crate:Ast.crate)\n     : unit =\n-  let path = Stack.create () in\n   let passes =\n     [|\n       (dead_code_visitor cx\n          Walk.empty_visitor)\n     |]\n   in\n \n-    run_passes cx \"dead\" path passes\n+    run_passes cx \"dead\" passes\n       cx.ctxt_sess.Session.sess_log_dead log crate;\n     ()\n ;;"}, {"sha": "e8b3a3a97d4fb2a60c9fe92b6850cbc7eec03255", "filename": "src/boot/me/dwarf.ml", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Fdwarf.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Fdwarf.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fdwarf.ml?ref=5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0", "patch": "@@ -66,7 +66,7 @@ open Common;;\n open Asm;;\n \n let log cx = Session.log \"dwarf\"\n-  cx.ctxt_sess.Session.sess_log_dwarf\n+  (should_log cx cx.ctxt_sess.Session.sess_log_dwarf)\n   cx.ctxt_sess.Session.sess_log_out\n ;;\n \n@@ -1425,7 +1425,6 @@ let prepend lref x = lref := x :: (!lref)\n let dwarf_visitor\n     (cx:ctxt)\n     (inner:Walk.visitor)\n-    (path:Ast.name_component Stack.t)\n     (cu_info_section_fixup:fixup)\n     (cu_aranges:(frag list) ref)\n     (cu_pubnames:(frag list) ref)\n@@ -1454,7 +1453,9 @@ let dwarf_visitor\n       | Il.Bits64 -> TY_i64\n   in\n \n-  let path_name _ = Fmt.fmt_to_str Ast.fmt_name (path_to_name path) in\n+  let path_name _ =\n+    Fmt.fmt_to_str Ast.fmt_name (path_to_name cx.ctxt_curr_path)\n+  in\n \n   let (abbrev_table:(abbrev, int) Hashtbl.t) = Hashtbl.create 0 in\n \n@@ -2485,12 +2486,10 @@ let process_crate\n   let cu_lines = ref [] in\n   let cu_frames = ref [] in\n \n-  let path = Stack.create () in\n-\n   let passes =\n     [|\n       unreferenced_required_item_ignoring_visitor cx\n-        (dwarf_visitor cx Walk.empty_visitor path\n+        (dwarf_visitor cx Walk.empty_visitor\n            cx.ctxt_debug_info_fixup\n            cu_aranges cu_pubnames\n            cu_infos cu_abbrevs\n@@ -2499,7 +2498,7 @@ let process_crate\n   in\n \n     log cx \"emitting DWARF records\";\n-    run_passes cx \"dwarf\" path passes\n+    run_passes cx \"dwarf\" passes\n       cx.ctxt_sess.Session.sess_log_dwarf log crate;\n \n     (* Terminate the tables. *)"}, {"sha": "8a8292d9cb88a808dd0faae2b52d49d423e14ea4", "filename": "src/boot/me/effect.ml", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Feffect.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Feffect.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Feffect.ml?ref=5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0", "patch": "@@ -2,12 +2,12 @@ open Semant;;\n open Common;;\n \n let log cx = Session.log \"effect\"\n-  cx.ctxt_sess.Session.sess_log_effect\n+  (should_log cx cx.ctxt_sess.Session.sess_log_effect)\n   cx.ctxt_sess.Session.sess_log_out\n ;;\n \n let iflog cx thunk =\n-  if cx.ctxt_sess.Session.sess_log_effect\n+  if (should_log cx cx.ctxt_sess.Session.sess_log_effect)\n   then thunk ()\n   else ()\n ;;\n@@ -315,7 +315,6 @@ let process_crate\n     (cx:ctxt)\n     (crate:Ast.crate)\n     : unit =\n-  let path = Stack.create () in\n   let item_auth = Hashtbl.create 0 in\n   let item_effect = Hashtbl.create 0 in\n   let passes =\n@@ -340,7 +339,7 @@ let process_crate\n           else err (Some id) \"auth clause in crate refers to non-item\"\n   in\n     Hashtbl.iter auth_effect crate.node.Ast.crate_auth;\n-    run_passes cx \"effect\" path passes\n+    run_passes cx \"effect\" passes\n       cx.ctxt_sess.Session.sess_log_effect log crate\n ;;\n "}, {"sha": "870e7a519d39cf02c16a2c6cb19d2f067103977f", "filename": "src/boot/me/layout.ml", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Flayout.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Flayout.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Flayout.ml?ref=5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0", "patch": "@@ -2,7 +2,7 @@ open Semant;;\n open Common;;\n \n let log cx = Session.log \"layout\"\n-  cx.ctxt_sess.Session.sess_log_layout\n+  (should_log cx cx.ctxt_sess.Session.sess_log_layout)\n   cx.ctxt_sess.Session.sess_log_out\n ;;\n \n@@ -128,7 +128,7 @@ let layout_visitor\n   in\n \n   let iflog thunk =\n-    if cx.ctxt_sess.Session.sess_log_layout\n+    if (should_log cx cx.ctxt_sess.Session.sess_log_layout)\n     then thunk ()\n     else ()\n   in\n@@ -453,14 +453,13 @@ let process_crate\n     (cx:ctxt)\n     (crate:Ast.crate)\n     : unit =\n-  let path = Stack.create () in\n   let passes =\n     [|\n       (layout_visitor cx\n          Walk.empty_visitor)\n     |];\n   in\n-    run_passes cx \"layout\" path passes\n+    run_passes cx \"layout\" passes\n       cx.ctxt_sess.Session.sess_log_layout log crate\n ;;\n "}, {"sha": "478ae6f9349a6bc7cfdb8ed778f83b6fefd7dc7e", "filename": "src/boot/me/loop.ml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Floop.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Floop.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Floop.ml?ref=5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0", "patch": "@@ -6,7 +6,7 @@ open Semant;;\n open Common;;\n \n let log cx = Session.log \"loop\"\n-  cx.ctxt_sess.Session.sess_log_loop\n+  (should_log cx cx.ctxt_sess.Session.sess_log_loop)\n   cx.ctxt_sess.Session.sess_log_out\n ;;\n \n@@ -142,15 +142,14 @@ let process_crate\n     (cx:ctxt)\n     (crate:Ast.crate)\n     : unit =\n-  let path = Stack.create () in\n   let passes =\n     [|\n       (loop_depth_visitor cx\n          Walk.empty_visitor)\n     |]\n   in\n \n-    run_passes cx \"loop\" path passes\n+    run_passes cx \"loop\" passes\n       cx.ctxt_sess.Session.sess_log_loop log crate\n ;;\n "}, {"sha": "118e5b497eaafb07434a96c870f90146b9db344f", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0", "patch": "@@ -16,12 +16,12 @@ open Common;;\n \n \n let log cx = Session.log \"resolve\"\n-  cx.ctxt_sess.Session.sess_log_resolve\n+  (should_log cx cx.ctxt_sess.Session.sess_log_resolve)\n   cx.ctxt_sess.Session.sess_log_out\n ;;\n \n let iflog cx thunk =\n-  if cx.ctxt_sess.Session.sess_log_resolve\n+  if (should_log cx cx.ctxt_sess.Session.sess_log_resolve)\n   then thunk ()\n   else ()\n ;;\n@@ -139,7 +139,6 @@ let stmt_collecting_visitor\n \n let all_item_collecting_visitor\n     (cx:ctxt)\n-    (path:Ast.name_component Stack.t)\n     (inner:Walk.visitor)\n     : Walk.visitor =\n \n@@ -169,7 +168,7 @@ let all_item_collecting_visitor\n     Array.iter (fun p -> htab_put cx.ctxt_all_defns p.id\n                   (DEFN_ty_param p.node)) p;\n     htab_put cx.ctxt_all_defns i.id (DEFN_item i.node);\n-    htab_put cx.ctxt_all_item_names i.id (path_to_name path);\n+    htab_put cx.ctxt_all_item_names i.id (path_to_name cx.ctxt_curr_path);\n     log cx \"collected item #%d: %s\" (int_of_node i.id) n;\n     begin\n       match i.node.Ast.decl_item with\n@@ -191,14 +190,14 @@ let all_item_collecting_visitor\n \n   let visit_obj_fn_pre obj ident fn =\n     htab_put cx.ctxt_all_defns fn.id (DEFN_obj_fn (obj.id, fn.node));\n-    htab_put cx.ctxt_all_item_names fn.id (path_to_name path);\n+    htab_put cx.ctxt_all_item_names fn.id (path_to_name cx.ctxt_curr_path);\n     note_header fn.id fn.node.Ast.fn_input_slots;\n     inner.Walk.visit_obj_fn_pre obj ident fn\n   in\n \n   let visit_obj_drop_pre obj b =\n     htab_put cx.ctxt_all_defns b.id (DEFN_obj_drop obj.id);\n-    htab_put cx.ctxt_all_item_names b.id (path_to_name path);\n+    htab_put cx.ctxt_all_item_names b.id (path_to_name cx.ctxt_curr_path);\n     inner.Walk.visit_obj_drop_pre obj b\n   in\n \n@@ -210,7 +209,7 @@ let all_item_collecting_visitor\n               htab_put cx.ctxt_all_defns id\n                 (DEFN_loop_body (Stack.top items));\n               htab_put cx.ctxt_all_item_names id\n-                (path_to_name path);\n+                (path_to_name cx.ctxt_curr_path);\n         | _ -> ()\n     end;\n     inner.Walk.visit_stmt_pre s;\n@@ -822,13 +821,12 @@ let process_crate\n     (crate:Ast.crate)\n     : unit =\n   let (scopes:(scope list) ref) = ref [] in\n-  let path = Stack.create () in\n \n   let passes_0 =\n     [|\n       (block_scope_forming_visitor cx Walk.empty_visitor);\n       (stmt_collecting_visitor cx\n-         (all_item_collecting_visitor cx path\n+         (all_item_collecting_visitor cx\n             Walk.empty_visitor));\n     |]\n   in\n@@ -852,11 +850,11 @@ let process_crate\n   in\n   let log_flag = cx.ctxt_sess.Session.sess_log_resolve in\n     log cx \"running primary resolve passes\";\n-    run_passes cx \"resolve collect\" path passes_0 log_flag log crate;\n+    run_passes cx \"resolve collect\" passes_0 log_flag log crate;\n     log cx \"running secondary resolve passes\";\n-    run_passes cx \"resolve bind\" path passes_1 log_flag log crate;\n+    run_passes cx \"resolve bind\" passes_1 log_flag log crate;\n     log cx \"running tertiary resolve passes\";\n-    run_passes cx \"resolve patterns\" path passes_2 log_flag log crate;\n+    run_passes cx \"resolve patterns\" passes_2 log_flag log crate;\n \n     iflog cx\n       begin"}, {"sha": "4c437aa1d1ff19147e958175013b5d0a2f9d23a2", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 55, "deletions": 32, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0", "patch": "@@ -183,6 +183,9 @@ type ctxt =\n \n       ctxt_main_fn_fixup: fixup option;\n       ctxt_main_name: Ast.name option;\n+\n+      (* Dynamically changes while walking. See path_managing_visitor. *)\n+      ctxt_curr_path: Ast.name_component Stack.t;\n     }\n ;;\n \n@@ -270,9 +273,47 @@ let new_ctxt sess abi crate =\n          | Some n -> Some (new_fixup (string_of_name n)));\n \n     ctxt_main_name = crate.Ast.crate_main;\n+\n+    ctxt_curr_path = Stack.create ();\n   }\n ;;\n \n+let rec name_of ncs =\n+  match ncs with\n+      [] -> bug () \"Walk.name_of_ncs: empty path\"\n+    | [(Ast.COMP_ident i)] -> Ast.NAME_base (Ast.BASE_ident i)\n+    | [(Ast.COMP_app x)] -> Ast.NAME_base (Ast.BASE_app x)\n+    | [(Ast.COMP_idx _)] ->\n+        bug () \"Walk.name_of_ncs: path-name contains COMP_idx\"\n+    | nc::ncs -> Ast.NAME_ext (name_of ncs, nc)\n+;;\n+\n+let path_to_name\n+    (path:Ast.name_component Stack.t)\n+    : Ast.name =\n+  name_of (stk_elts_from_top path)\n+;;\n+\n+let should_log cx flag =\n+  if flag\n+  then\n+    match cx.ctxt_sess.Session.sess_log_path with\n+        None -> false\n+      | Some mask ->\n+          let curr = stk_elts_from_bot cx.ctxt_curr_path in\n+          let rec permitted ncs strs =\n+            match (ncs, strs) with\n+                ((Ast.COMP_ident s) :: ncs, str :: strs)\n+              | ((Ast.COMP_app (s, _)) :: ncs, str :: strs)\n+                  when s = str ->\n+                    permitted ncs strs\n+              | (_, []) -> true\n+              | _ -> false\n+          in\n+            (permitted curr mask)\n+  else\n+    false\n+;;\n \n let bugi (cx:ctxt) (i:node_id) =\n   let k s =\n@@ -1693,74 +1734,57 @@ let unreferenced_required_item_ignoring_visitor\n         Walk.visit_obj_drop_post = visit_obj_drop_post; }\n ;;\n \n-let rec name_of ncs =\n-  match ncs with\n-      [] -> bug () \"Walk.name_of_ncs: empty path\"\n-    | [(Ast.COMP_ident i)] -> Ast.NAME_base (Ast.BASE_ident i)\n-    | [(Ast.COMP_app x)] -> Ast.NAME_base (Ast.BASE_app x)\n-    | [(Ast.COMP_idx _)] ->\n-        bug () \"Walk.name_of_ncs: path-name contains COMP_idx\"\n-    | nc::ncs -> Ast.NAME_ext (name_of ncs, nc)\n-;;\n-\n-let path_to_name\n-    (path:Ast.name_component Stack.t)\n-    : Ast.name =\n-  name_of (stk_elts_from_top path)\n-;;\n-\n let mod_item_logging_visitor\n     (cx:ctxt)\n     (log_flag:bool)\n     (log:ctxt -> ('a, unit, string, unit) format4 -> 'a)\n     (pass:int)\n-    (path:Ast.name_component Stack.t)\n     (inner:Walk.visitor)\n     : Walk.\n visitor =\n   let entering _ =\n-    if cx.ctxt_sess.Session.sess_log_passes\n+    if (should_log cx cx.ctxt_sess.Session.sess_log_passes)\n     then\n       Session.log \"pass\" true cx.ctxt_sess.Session.sess_log_out\n         \"pass %d: entering %a\"\n-        pass Ast.sprintf_name (path_to_name path);\n+        pass Ast.sprintf_name (path_to_name cx.ctxt_curr_path);\n     if log_flag\n     then\n       log cx \"pass %d: entering %a\"\n-        pass Ast.sprintf_name (path_to_name path)\n+        pass Ast.sprintf_name (path_to_name cx.ctxt_curr_path)\n   in\n   let entered _ =\n-    if cx.ctxt_sess.Session.sess_log_passes\n+    if (should_log cx cx.ctxt_sess.Session.sess_log_passes)\n     then\n       Session.log \"pass\" true cx.ctxt_sess.Session.sess_log_out\n         \"pass %d: entered %a\"\n-        pass Ast.sprintf_name (path_to_name path);\n+        pass Ast.sprintf_name (path_to_name cx.ctxt_curr_path);\n     if log_flag\n     then\n       log cx \"pass %d: entered %a\"\n-        pass Ast.sprintf_name (path_to_name path)\n+        pass Ast.sprintf_name (path_to_name cx.ctxt_curr_path)\n   in\n   let leaving _ =\n-    if cx.ctxt_sess.Session.sess_log_passes\n+    if (should_log cx cx.ctxt_sess.Session.sess_log_passes)\n     then\n       Session.log \"pass\" true cx.ctxt_sess.Session.sess_log_out\n         \"pass %d: leaving %a\"\n-        pass Ast.sprintf_name (path_to_name path);\n+        pass Ast.sprintf_name (path_to_name cx.ctxt_curr_path);\n     if log_flag\n     then\n       log cx \"pass %d: leaving %a\"\n-        pass Ast.sprintf_name (path_to_name path)\n+        pass Ast.sprintf_name (path_to_name cx.ctxt_curr_path)\n   in\n   let left _ =\n-    if cx.ctxt_sess.Session.sess_log_passes\n+    if (should_log cx cx.ctxt_sess.Session.sess_log_passes)\n     then\n       Session.log \"pass\" true cx.ctxt_sess.Session.sess_log_out\n         \"pass %d: left %a\"\n-        pass Ast.sprintf_name (path_to_name path);\n+        pass Ast.sprintf_name (path_to_name cx.ctxt_curr_path);\n     if log_flag\n     then\n       log cx \"pass %d: left %a\"\n-        pass Ast.sprintf_name (path_to_name path)\n+        pass Ast.sprintf_name (path_to_name cx.ctxt_curr_path)\n   in\n \n   let visit_mod_item_pre name params item =\n@@ -2044,7 +2068,6 @@ let lookup\n let run_passes\n     (cx:ctxt)\n     (name:string)\n-    (path:Ast.name_component Stack.t)\n     (passes:Walk.visitor array)\n     (log_flag:bool)\n     (log:ctxt -> ('a, unit, string, unit) format4 -> 'a)\n@@ -2055,8 +2078,8 @@ let run_passes\n     then Session.log \"pass\" true cx.ctxt_sess.Session.sess_log_out\n       \"starting pass %s # %d\" name i;\n     Walk.walk_crate\n-        (Walk.path_managing_visitor path\n-           (mod_item_logging_visitor cx log_flag log i path pass))\n+        (Walk.path_managing_visitor cx.ctxt_curr_path\n+           (mod_item_logging_visitor cx log_flag log i pass))\n         crate\n   in\n   let sess = cx.ctxt_sess in"}, {"sha": "97af539ffb709f554ef572f6773e33b692aaf464", "filename": "src/boot/me/simplify.ml", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Fsimplify.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Fsimplify.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsimplify.ml?ref=5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0", "patch": "@@ -4,11 +4,11 @@ open Semant;;\n let log cx =\n   Session.log\n     \"simplify\"\n-    cx.Semant.ctxt_sess.Session.sess_log_simplify\n+    (should_log cx cx.Semant.ctxt_sess.Session.sess_log_simplify)\n     cx.Semant.ctxt_sess.Session.sess_log_out\n \n let iflog cx thunk =\n-  if cx.Semant.ctxt_sess.Session.sess_log_simplify\n+  if (should_log cx cx.Semant.ctxt_sess.Session.sess_log_simplify)\n   then thunk ()\n   else ()\n ;;\n@@ -87,7 +87,6 @@ let pexp_simplifying_visitor\n \n \n let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n-  let path = Stack.create () in\n \n   let passes =\n     [|\n@@ -96,7 +95,7 @@ let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n     |]\n   in\n   let log_flag = cx.Semant.ctxt_sess.Session.sess_log_simplify in\n-    Semant.run_passes cx \"simplify\" path passes log_flag log crate\n+    Semant.run_passes cx \"simplify\" passes log_flag log crate\n ;;\n \n (*"}, {"sha": "e1388e0828d0116f7ada1781f035fed1254c908b", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0", "patch": "@@ -5,7 +5,7 @@ open Common;;\n open Transutil;;\n \n let log cx = Session.log \"trans\"\n-  cx.ctxt_sess.Session.sess_log_trans\n+  (should_log cx cx.ctxt_sess.Session.sess_log_trans)\n   cx.ctxt_sess.Session.sess_log_out\n ;;\n \n@@ -45,12 +45,11 @@ type const =\n \n let trans_visitor\n     (cx:ctxt)\n-    (path:Ast.name_component Stack.t)\n     (inner:Walk.visitor)\n     : Walk.visitor =\n \n   let iflog thunk =\n-    if cx.ctxt_sess.Session.sess_log_trans\n+    if (should_log cx cx.ctxt_sess.Session.sess_log_trans)\n     then thunk ()\n     else ()\n   in\n@@ -237,7 +236,7 @@ let trans_visitor\n   let simple_break_jumps = Stack.create() in (* not used for for-each *)\n \n   let path_name (_:unit) : string =\n-    string_of_name (path_to_name path)\n+    string_of_name (path_to_name cx.ctxt_curr_path)\n   in\n \n   let based (reg:Il.reg) : Il.mem =\n@@ -3416,8 +3415,8 @@ let trans_visitor\n           drop_ty ty_params cell (slot_ty slot)\n \n   and note_drop_step ty step =\n-    if cx.ctxt_sess.Session.sess_trace_drop ||\n-      cx.ctxt_sess.Session.sess_log_trans\n+    if (should_log cx (cx.ctxt_sess.Session.sess_trace_drop ||\n+                         cx.ctxt_sess.Session.sess_log_trans))\n     then\n       let mctrl_str =\n         match ty_mem_ctrl cx ty with\n@@ -3434,8 +3433,8 @@ let trans_visitor\n         end\n \n   and note_gc_step ty step =\n-    if cx.ctxt_sess.Session.sess_trace_gc ||\n-      cx.ctxt_sess.Session.sess_log_trans\n+    if (should_log cx (cx.ctxt_sess.Session.sess_trace_gc ||\n+                         cx.ctxt_sess.Session.sess_log_trans))\n     then\n       let mctrl_str =\n         match ty_mem_ctrl cx ty with\n@@ -5561,7 +5560,7 @@ let trans_visitor\n                   htab_search_or_add cx.ctxt_required_rust_sym_num fnid\n                     (fun _ -> Hashtbl.length cx.ctxt_required_rust_sym_num)\n                 in\n-                let path_elts = stk_elts_from_bot path in\n+                let path_elts = stk_elts_from_bot cx.ctxt_curr_path in\n                 let _ =\n                   assert (ls.required_prefix < (List.length path_elts))\n                 in\n@@ -5591,7 +5590,8 @@ let trans_visitor\n                   match htab_search cx.ctxt_required_syms fnid with\n                       Some s -> s\n                     | None ->\n-                        string_of_name_component (Stack.top path)\n+                        string_of_name_component\n+                          (Stack.top cx.ctxt_curr_path)\n                 in\n                 let c_sym_num =\n                   (* FIXME: permit remapping symbol names to handle\n@@ -5935,20 +5935,19 @@ let trans_visitor\n \n let fixup_assigning_visitor\n     (cx:ctxt)\n-    (path:Ast.name_component Stack.t)\n     (inner:Walk.visitor)\n     : Walk.visitor =\n \n   let path_name (_:unit) : string =\n-    Fmt.fmt_to_str Ast.fmt_name (path_to_name path)\n+    Fmt.fmt_to_str Ast.fmt_name (path_to_name cx.ctxt_curr_path)\n   in\n \n   let enter_file_for id =\n     if Hashtbl.mem cx.ctxt_item_files id\n     then\n       begin\n         let name =\n-          if Stack.is_empty path\n+          if Stack.is_empty cx.ctxt_curr_path\n           then \"crate root\"\n           else path_name()\n         in\n@@ -5969,7 +5968,7 @@ let fixup_assigning_visitor\n \n         | Ast.MOD_ITEM_fn _ ->\n             begin\n-              let path = path_to_name path in\n+              let path = path_to_name cx.ctxt_curr_path in\n               let fixup =\n                 if (not cx.ctxt_sess.Session.sess_library_mode)\n                   && (Some path) = cx.ctxt_main_name\n@@ -6031,15 +6030,12 @@ let process_crate\n     (cx:ctxt)\n     (crate:Ast.crate)\n     : unit =\n-  let path = Stack.create () in\n   let passes =\n     [|\n       (unreferenced_required_item_ignoring_visitor cx\n-         (fixup_assigning_visitor cx path\n-            Walk.empty_visitor));\n+         (fixup_assigning_visitor cx Walk.empty_visitor));\n       (unreferenced_required_item_ignoring_visitor cx\n-         (trans_visitor cx path\n-            Walk.empty_visitor))\n+         (trans_visitor cx Walk.empty_visitor))\n     |];\n   in\n     log cx \"translating crate\";\n@@ -6050,7 +6046,7 @@ let process_crate\n             log cx \"with main fn %a\"\n               Ast.sprintf_name m\n     end;\n-    run_passes cx \"trans\" path passes\n+    run_passes cx \"trans\" passes\n       cx.ctxt_sess.Session.sess_log_trans log crate;\n ;;\n "}, {"sha": "a47850fedac2888d3737571e457aa0eea2ba6beb", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0", "patch": "@@ -28,11 +28,11 @@ exception Type_error of string * string\n let log cx =\n   Session.log\n     \"type\"\n-    cx.Semant.ctxt_sess.Session.sess_log_type\n+    (Semant.should_log cx cx.Semant.ctxt_sess.Session.sess_log_type)\n     cx.Semant.ctxt_sess.Session.sess_log_out\n \n let iflog cx thunk =\n-  if cx.Semant.ctxt_sess.Session.sess_log_type\n+  if (Semant.should_log cx cx.Semant.ctxt_sess.Session.sess_log_type)\n   then thunk ()\n   else ()\n ;;\n@@ -1253,7 +1253,6 @@ let check_for_tag_cycles (cx:Semant.ctxt) =\n   Hashtbl.iter check_node cx.Semant.ctxt_tag_containment\n \n let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n-  let path = Stack.create () in\n   let fn_ctx_stack = Stack.create () in\n \n   (* Verify that, if main is present, it has the right form. *)\n@@ -1393,7 +1392,7 @@ let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n     |]\n   in\n   let log_flag = cx.Semant.ctxt_sess.Session.sess_log_type in\n-    Semant.run_passes cx \"type\" path passes log_flag log crate\n+    Semant.run_passes cx \"type\" passes log_flag log crate\n ;;\n \n (*"}, {"sha": "e3c9974a40b387c8bffeb1ae5a3a8f16bc34353e", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0", "patch": "@@ -3,12 +3,12 @@ open Common;;\n \n \n let log cx = Session.log \"typestate\"\n-  cx.ctxt_sess.Session.sess_log_typestate\n+  (should_log cx cx.ctxt_sess.Session.sess_log_typestate)\n   cx.ctxt_sess.Session.sess_log_out\n ;;\n \n let iflog cx thunk =\n-  if cx.ctxt_sess.Session.sess_log_typestate\n+  if (should_log cx cx.ctxt_sess.Session.sess_log_typestate)\n   then thunk ()\n   else ()\n ;;\n@@ -1590,7 +1590,6 @@ let process_crate\n     (cx:ctxt)\n     (crate:Ast.crate)\n     : unit =\n-  let path = Stack.create () in\n   let (scopes:(scope list) ref) = ref [] in\n   let (tables_stack:typestate_tables Stack.t) = Stack.create () in\n   let (all_tables:item_tables) = Hashtbl.create 0 in\n@@ -1641,11 +1640,11 @@ let process_crate\n     |]\n   in\n   let log_flag = cx.ctxt_sess.Session.sess_log_typestate in\n-    run_passes cx \"typestate setup\" path setup_passes log_flag log crate;\n+    run_passes cx \"typestate setup\" setup_passes log_flag log crate;\n     run_passes cx\n-      \"typestate dataflow\" path dataflow_passes log_flag log crate;\n-    run_passes cx \"typestate verify\" path verify_passes log_flag log crate;\n-    run_passes cx \"typestate aux\" path aux_passes log_flag log crate\n+      \"typestate dataflow\" dataflow_passes log_flag log crate;\n+    run_passes cx \"typestate verify\" verify_passes log_flag log crate;\n+    run_passes cx \"typestate aux\" aux_passes log_flag log crate\n ;;\n \n "}, {"sha": "838caa73c3c99f3309a984502572c4edefe337d3", "filename": "src/boot/util/common.ml", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Futil%2Fcommon.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0/src%2Fboot%2Futil%2Fcommon.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Futil%2Fcommon.ml?ref=5f2459145cb90d7d52cfde1d4ed7719dde1dfdc0", "patch": "@@ -179,6 +179,31 @@ let new_fixup (s:string)\n ;;\n \n \n+(*\n+ * Auxiliary string functions.\n+ *)\n+\n+let split_string (c:char) (s:string) : string list =\n+  let ls = ref [] in\n+  let b = Buffer.create (String.length s) in\n+  let flush _ =\n+    if Buffer.length b <> 0\n+    then\n+      begin\n+        ls := (Buffer.contents b) :: (!ls);\n+        Buffer.clear b\n+      end\n+  in\n+  let f ch =\n+    if c = ch\n+    then flush()\n+    else Buffer.add_char b ch\n+  in\n+    String.iter f s;\n+    flush();\n+    List.rev (!ls)\n+;;\n+\n (*\n  * Auxiliary hashtable functions.\n  *)"}]}