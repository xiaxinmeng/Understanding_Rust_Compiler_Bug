{"sha": "1b66a799c7ef707d2cd4b325b654e69bf536c30f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNjZhNzk5YzdlZjcwN2QyY2Q0YjMyNWI2NTRlNjliZjUzNmMzMGY=", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-06-01T00:21:26Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-07-21T12:37:23Z"}, "message": "Remove unsound TrustedRandomAccess implementations\n\nRemoves the implementations that depend on the user-definable trait `Copy`.\n\nOnly fix regressions to ensure merge in 1.55: Does not modify `vec::IntoIter`.", "tree": {"sha": "f5e24ee9a61aea5093946da3c1e1ccc9a2145ed1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5e24ee9a61aea5093946da3c1e1ccc9a2145ed1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b66a799c7ef707d2cd4b325b654e69bf536c30f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b66a799c7ef707d2cd4b325b654e69bf536c30f", "html_url": "https://github.com/rust-lang/rust/commit/1b66a799c7ef707d2cd4b325b654e69bf536c30f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b66a799c7ef707d2cd4b325b654e69bf536c30f/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf932aa584f2ba1a1744f3ef0b21f14387276fb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf932aa584f2ba1a1744f3ef0b21f14387276fb6", "html_url": "https://github.com/rust-lang/rust/commit/cf932aa584f2ba1a1744f3ef0b21f14387276fb6"}], "stats": {"total": 56, "additions": 2, "deletions": 54}, "files": [{"sha": "612f7e6eb4da8c213c2c36b93e34c7d905074c29", "filename": "library/alloc/src/collections/vec_deque/into_iter.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1b66a799c7ef707d2cd4b325b654e69bf536c30f/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b66a799c7ef707d2cd4b325b654e69bf536c30f/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs?ref=1b66a799c7ef707d2cd4b325b654e69bf536c30f", "patch": "@@ -1,5 +1,5 @@\n use core::fmt;\n-use core::iter::{FusedIterator, TrustedLen, TrustedRandomAccess};\n+use core::iter::{FusedIterator, TrustedLen};\n \n use super::VecDeque;\n \n@@ -36,23 +36,6 @@ impl<T> Iterator for IntoIter<T> {\n         let len = self.inner.len();\n         (len, Some(len))\n     }\n-\n-    #[inline]\n-    #[doc(hidden)]\n-    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n-    where\n-        Self: TrustedRandomAccess,\n-    {\n-        // Safety: The TrustedRandomAccess contract requires that callers only pass an index\n-        // that is in bounds.\n-        // Additionally Self: TrustedRandomAccess is only implemented for T: Copy which means even\n-        // multiple repeated reads of the same index would be safe and the\n-        // values are !Drop, thus won't suffer from double drops.\n-        unsafe {\n-            let idx = self.inner.wrap_add(self.inner.tail, idx);\n-            self.inner.buffer_read(idx)\n-        }\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -75,14 +58,3 @@ impl<T> FusedIterator for IntoIter<T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<T> TrustedLen for IntoIter<T> {}\n-\n-#[doc(hidden)]\n-#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-// T: Copy as approximation for !Drop since get_unchecked does not update the pointers\n-// and thus we can't implement drop-handling\n-unsafe impl<T> TrustedRandomAccess for IntoIter<T>\n-where\n-    T: Copy,\n-{\n-    const MAY_HAVE_SIDE_EFFECT: bool = false;\n-}"}, {"sha": "61ab1b1faff89826be67617085c9a6e0def438ae", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1b66a799c7ef707d2cd4b325b654e69bf536c30f/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b66a799c7ef707d2cd4b325b654e69bf536c30f/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=1b66a799c7ef707d2cd4b325b654e69bf536c30f", "patch": "@@ -2,7 +2,7 @@\n \n use crate::{\n     fmt,\n-    iter::{self, ExactSizeIterator, FusedIterator, TrustedLen, TrustedRandomAccess},\n+    iter::{self, ExactSizeIterator, FusedIterator, TrustedLen},\n     mem::{self, MaybeUninit},\n     ops::Range,\n     ptr,\n@@ -130,19 +130,6 @@ impl<T, const N: usize> Iterator for IntoIter<T, N> {\n     fn last(mut self) -> Option<Self::Item> {\n         self.next_back()\n     }\n-\n-    #[inline]\n-    #[doc(hidden)]\n-    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n-    where\n-        Self: TrustedRandomAccess,\n-    {\n-        // SAFETY: Callers are only allowed to pass an index that is in bounds\n-        // Additionally Self: TrustedRandomAccess is only implemented for T: Copy which means even\n-        // multiple repeated reads of the same index would be safe and the\n-        // values are !Drop, thus won't suffer from double drops.\n-        unsafe { self.data.get_unchecked(self.alive.start + idx).assume_init_read() }\n-    }\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n@@ -197,17 +184,6 @@ impl<T, const N: usize> FusedIterator for IntoIter<T, N> {}\n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n unsafe impl<T, const N: usize> TrustedLen for IntoIter<T, N> {}\n \n-#[doc(hidden)]\n-#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-// T: Copy as approximation for !Drop since get_unchecked does not update the pointers\n-// and thus we can't implement drop-handling\n-unsafe impl<T, const N: usize> TrustedRandomAccess for IntoIter<T, N>\n-where\n-    T: Copy,\n-{\n-    const MAY_HAVE_SIDE_EFFECT: bool = false;\n-}\n-\n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n impl<T: Clone, const N: usize> Clone for IntoIter<T, N> {\n     fn clone(&self) -> Self {"}]}