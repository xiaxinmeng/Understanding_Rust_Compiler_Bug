{"sha": "b00449380f520deb65de26e654aeaba4561ee13f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMDQ0OTM4MGY1MjBkZWI2NWRlMjZlNjU0YWVhYmE0NTYxZWUxM2Y=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-01T18:20:01Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-01T18:58:25Z"}, "message": "Remove unnecessary unwind messages\n\nNow that the type_id intrinsic is working across crates, all of these\nunnecessary messages can be removed to have the failure type for a task truly be\n~Any and only ~Any", "tree": {"sha": "a55600b9d01023cb19606c7432472ec7196e3988", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a55600b9d01023cb19606c7432472ec7196e3988"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b00449380f520deb65de26e654aeaba4561ee13f", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b00449380f520deb65de26e654aeaba4561ee13f", "html_url": "https://github.com/rust-lang/rust/commit/b00449380f520deb65de26e654aeaba4561ee13f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b00449380f520deb65de26e654aeaba4561ee13f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61637439dcced37391f7896561c0feb7790626f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/61637439dcced37391f7896561c0feb7790626f3", "html_url": "https://github.com/rust-lang/rust/commit/61637439dcced37391f7896561c0feb7790626f3"}], "stats": {"total": 117, "additions": 41, "deletions": 76}, "files": [{"sha": "8cd8ca23b45f09ecaa08c77ad1443bd530372785", "filename": "src/libstd/any.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b00449380f520deb65de26e654aeaba4561ee13f/src%2Flibstd%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b00449380f520deb65de26e654aeaba4561ee13f/src%2Flibstd%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fany.rs?ref=b00449380f520deb65de26e654aeaba4561ee13f", "patch": "@@ -20,7 +20,6 @@ use util::Void;\n \n ///////////////////////////////////////////////////////////////////////////////\n // TypeId\n-// FIXME: #9913 - Needs proper intrinsic support to work reliably cross crate\n ///////////////////////////////////////////////////////////////////////////////\n \n /// `TypeId` represents a globally unique identifier for a type\n@@ -199,8 +198,10 @@ mod tests {\n \n     #[test]\n     fn type_id() {\n-        let (a, b, c) = (TypeId::of::<uint>(), TypeId::of::<&str>(), TypeId::of::<Test>());\n-        let (d, e, f) = (TypeId::of::<uint>(), TypeId::of::<&str>(), TypeId::of::<Test>());\n+        let (a, b, c) = (TypeId::of::<uint>(), TypeId::of::<&'static str>(),\n+                         TypeId::of::<Test>());\n+        let (d, e, f) = (TypeId::of::<uint>(), TypeId::of::<&'static str>(),\n+                         TypeId::of::<Test>());\n \n         assert!(a != b);\n         assert!(a != c);"}, {"sha": "2709c118191de54318d841e5a67025e3587e47cb", "filename": "src/libstd/rt/kill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b00449380f520deb65de26e654aeaba4561ee13f/src%2Flibstd%2Frt%2Fkill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b00449380f520deb65de26e654aeaba4561ee13f/src%2Flibstd%2Frt%2Fkill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fkill.rs?ref=b00449380f520deb65de26e654aeaba4561ee13f", "patch": "@@ -155,9 +155,9 @@ use cell::Cell;\n use option::{Option, Some, None};\n use prelude::*;\n use rt::task::Task;\n-use rt::task::UnwindMessageLinked;\n use rt::task::{UnwindResult, Failure};\n use task::spawn::Taskgroup;\n+use task::LinkedFailure;\n use to_bytes::IterBytes;\n use unstable::atomics::{AtomicUint, Relaxed};\n use unstable::sync::{UnsafeArc, UnsafeArcSelf, UnsafeArcT, LittleLock};\n@@ -597,7 +597,7 @@ impl Death {\n                 }\n \n                 if !success {\n-                    result = Cell::new(Failure(UnwindMessageLinked));\n+                    result = Cell::new(Failure(~LinkedFailure as ~Any));\n                 }\n             }\n             on_exit(result.take());"}, {"sha": "cf7c291d189e40516c5b0df0d5969ebd5ae545cb", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 24, "deletions": 53, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/b00449380f520deb65de26e654aeaba4561ee13f/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b00449380f520deb65de26e654aeaba4561ee13f/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=b00449380f520deb65de26e654aeaba4561ee13f", "patch": "@@ -36,6 +36,7 @@ use rt::logging::StdErrLogger;\n use rt::sched::{Scheduler, SchedHandle};\n use rt::stack::{StackSegment, StackPool};\n use send_str::SendStr;\n+use task::LinkedFailure;\n use task::spawn::Taskgroup;\n use unstable::finally::Finally;\n \n@@ -95,8 +96,8 @@ pub enum UnwindResult {\n     /// The task is ending successfully\n     Success,\n \n-    /// The Task is failing with reason `UnwindMessage`\n-    Failure(UnwindMessage),\n+    /// The Task is failing with reason `~Any`\n+    Failure(~Any),\n }\n \n impl UnwindResult {\n@@ -119,27 +120,9 @@ impl UnwindResult {\n     }\n }\n \n-/// Represents the cause of a task failure\n-#[deriving(ToStr)]\n-pub enum UnwindMessage {\n-    // FIXME: #9913 - This variant is not neccessary once Any works properly\n-    /// Failed with a static string message\n-    UnwindMessageStrStatic(&'static str),\n-\n-    // FIXME: #9913 - This variant is not neccessary once Any works properly\n-    /// Failed with a owned string message\n-    UnwindMessageStrOwned(~str),\n-\n-    /// Failed with an `~Any`\n-    UnwindMessageAny(~Any),\n-\n-    /// Failed because of linked failure\n-    UnwindMessageLinked\n-}\n-\n pub struct Unwinder {\n     unwinding: bool,\n-    cause: Option<UnwindMessage>\n+    cause: Option<~Any>\n }\n \n impl Unwinder {\n@@ -532,7 +515,7 @@ impl Unwinder {\n         }\n     }\n \n-    pub fn begin_unwind(&mut self, cause: UnwindMessage) -> ! {\n+    pub fn begin_unwind(&mut self, cause: ~Any) -> ! {\n         #[fixed_stack_segment]; #[inline(never)];\n \n         self.unwinding = true;\n@@ -648,46 +631,34 @@ pub fn begin_unwind_raw(msg: *c_char, file: *c_char, line: size_t) -> ! {\n \n /// This is the entry point of unwinding for fail!() and assert!().\n pub fn begin_unwind<M: Any + Send>(msg: M, file: &'static str, line: uint) -> ! {\n-    // Wrap the fail message in a `Any` box for uniform representation.\n-    let any = ~msg as ~Any;\n-\n-    // FIXME: #9913 - This can be changed to be internal to begin_unwind_internal\n-    // once Any works properly.\n-    // As a workaround, string types need to be special cased right now\n-    // because `Any` does not support dynamically querying whether the\n-    // type implements a trait yet, so without requiring that every `Any`\n-    // also implements `ToStr` there is no way to get a failure message\n-    // out of it again during unwinding.\n-    let msg = if any.is::<&'static str>() {\n-        UnwindMessageStrStatic(*any.move::<&'static str>().unwrap())\n-    } else if any.is::<~str>() {\n-        UnwindMessageStrOwned(*any.move::<~str>().unwrap())\n-    } else {\n-        UnwindMessageAny(any)\n-    };\n-\n-    begin_unwind_internal(msg, file, line)\n-}\n-\n-fn begin_unwind_internal(msg: UnwindMessage, file: &'static str, line: uint) -> ! {\n+    use any::AnyRefExt;\n     use rt::in_green_task_context;\n-    use rt::task::Task;\n     use rt::local::Local;\n+    use rt::task::Task;\n     use str::Str;\n     use unstable::intrinsics;\n \n     unsafe {\n-        // Be careful not to allocate in this block, if we're failing we may\n-        // have been failing due to a lack of memory in the first place...\n-\n         let task: *mut Task;\n+        // Note that this should be the only allocation performed in this block.\n+        // Currently this means that fail!() on OOM will invoke this code path,\n+        // but then again we're not really ready for failing on OOM anyway. If\n+        // we do start doing this, then we should propagate this allocation to\n+        // be performed in the parent of this task instead of the task that's\n+        // failing.\n+        let msg = ~msg as ~Any;\n \n         {\n-            let msg_s = match msg {\n-                UnwindMessageAny(_) => \"~Any\",\n-                UnwindMessageLinked => \"linked failure\",\n-                UnwindMessageStrOwned(ref s)  => s.as_slice(),\n-                UnwindMessageStrStatic(ref s) => s.as_slice(),\n+            //let msg: &Any = msg;\n+            let msg_s = match msg.as_ref::<&'static str>() {\n+                Some(s) => *s,\n+                None => match msg.as_ref::<~str>() {\n+                    Some(s) => s.as_slice(),\n+                    None => match msg.as_ref::<LinkedFailure>() {\n+                        Some(*) => \"linked failure\",\n+                        None => \"~Any\",\n+                    }\n+                }\n             };\n \n             if !in_green_task_context() {"}, {"sha": "e75f8f6237fe2bb50013545b4f4ba9e9be06c31d", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b00449380f520deb65de26e654aeaba4561ee13f/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b00449380f520deb65de26e654aeaba4561ee13f/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=b00449380f520deb65de26e654aeaba4561ee13f", "patch": "@@ -60,8 +60,6 @@ use comm::{stream, Chan, GenericChan, GenericPort, Port, Peekable};\n use result::{Result, Ok, Err};\n use rt::in_green_task_context;\n use rt::local::Local;\n-use rt::task::{UnwindMessageAny, UnwindMessageLinked};\n-use rt::task::{UnwindMessageStrStatic, UnwindMessageStrOwned};\n use rt::task::{UnwindResult, Success, Failure};\n use send_str::{SendStr, IntoSendStr};\n use unstable::finally::Finally;\n@@ -90,30 +88,25 @@ pub type TaskResult = Result<(), ~Any>;\n \n pub struct LinkedFailure;\n \n-#[inline]\n-fn wrap_as_any(res: UnwindResult) -> TaskResult {\n-    match res {\n-        Success => Ok(()),\n-        Failure(UnwindMessageAny(a)) => Err(a),\n-        Failure(UnwindMessageLinked) => Err(~LinkedFailure as ~Any),\n-        Failure(UnwindMessageStrOwned(s))  => Err(~s as ~Any),\n-        Failure(UnwindMessageStrStatic(s)) => Err(~s as ~Any),\n-    }\n-}\n-\n pub struct TaskResultPort {\n     priv port: Port<UnwindResult>\n }\n \n+fn to_task_result(res: UnwindResult) -> TaskResult {\n+    match res {\n+        Success => Ok(()), Failure(a) => Err(a),\n+    }\n+}\n+\n impl GenericPort<TaskResult> for TaskResultPort {\n     #[inline]\n     fn recv(&self) -> TaskResult {\n-        wrap_as_any(self.port.recv())\n+        to_task_result(self.port.recv())\n     }\n \n     #[inline]\n     fn try_recv(&self) -> Option<TaskResult> {\n-        self.port.try_recv().map(wrap_as_any)\n+        self.port.try_recv().map(to_task_result)\n     }\n }\n "}, {"sha": "a4a43a01edd2811038cd9877313f69d1fb6cbdb5", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b00449380f520deb65de26e654aeaba4561ee13f/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b00449380f520deb65de26e654aeaba4561ee13f/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=b00449380f520deb65de26e654aeaba4561ee13f", "patch": "@@ -83,11 +83,11 @@ use local_data;\n use rt::local::Local;\n use rt::sched::{Scheduler, Shutdown, TaskFromFriend};\n use rt::task::{Task, Sched};\n-use rt::task::{UnwindMessageLinked, UnwindMessageStrStatic};\n use rt::task::{UnwindResult, Success, Failure};\n use rt::thread::Thread;\n use rt::work_queue::WorkQueue;\n use rt::{in_green_task_context, new_event_loop, KillHandle};\n+use task::LinkedFailure;\n use task::SingleThreaded;\n use task::TaskOpts;\n use task::unkillable;\n@@ -324,7 +324,7 @@ impl Drop for Taskgroup {\n         do RuntimeGlue::with_task_handle_and_failing |me, failing| {\n             if failing {\n                 for x in self.notifier.mut_iter() {\n-                    x.task_result = Some(Failure(UnwindMessageLinked));\n+                    x.task_result = Some(Failure(~LinkedFailure as ~Any));\n                 }\n                 // Take everybody down with us. After this point, every\n                 // other task in the group will see 'tg' as none, which\n@@ -379,7 +379,7 @@ impl AutoNotify {\n             notify_chan: chan,\n \n             // Un-set above when taskgroup successfully made.\n-            task_result: Some(Failure(UnwindMessageStrStatic(\"AutoNotify::new()\")))\n+            task_result: Some(Failure(~(\"AutoNotify::new()\") as ~Any))\n         }\n     }\n }"}]}