{"sha": "26e0ea8148bf8b6a244d9df0916cc78ac257b277", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZTBlYTgxNDhiZjhiNmEyNDRkOWRmMDkxNmNjNzhhYzI1N2IyNzc=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-28T22:29:01Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-12-27T18:21:16Z"}, "message": "Use `TraitEngine` in `enter_canonical_trait_query`", "tree": {"sha": "6fa6a391770a0e484059baf741d6da84dae7b8d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fa6a391770a0e484059baf741d6da84dae7b8d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26e0ea8148bf8b6a244d9df0916cc78ac257b277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26e0ea8148bf8b6a244d9df0916cc78ac257b277", "html_url": "https://github.com/rust-lang/rust/commit/26e0ea8148bf8b6a244d9df0916cc78ac257b277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26e0ea8148bf8b6a244d9df0916cc78ac257b277/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da9467d1470a8f81519d5e428d8cec90950007f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/da9467d1470a8f81519d5e428d8cec90950007f9", "html_url": "https://github.com/rust-lang/rust/commit/da9467d1470a8f81519d5e428d8cec90950007f9"}], "stats": {"total": 49, "additions": 30, "deletions": 19}, "files": [{"sha": "7f113f07276d8f3ab46bec18fc782e7b678762d9", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/26e0ea8148bf8b6a244d9df0916cc78ac257b277/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e0ea8148bf8b6a244d9df0916cc78ac257b277/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=26e0ea8148bf8b6a244d9df0916cc78ac257b277", "patch": "@@ -21,7 +21,7 @@ use rustc_data_structures::sync::Lrc;\n use std::fmt::Debug;\n use syntax_pos::DUMMY_SP;\n use traits::query::{Fallible, NoSolution};\n-use traits::{FulfillmentContext, TraitEngine};\n+use traits::TraitEngine;\n use traits::{Obligation, ObligationCause, PredicateObligation};\n use ty::fold::TypeFoldable;\n use ty::subst::{Kind, UnpackedKind};\n@@ -48,7 +48,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxtBuilder<'cx, 'gcx, 'tcx> {\n     pub fn enter_canonical_trait_query<K, R>(\n         &'tcx mut self,\n         canonical_key: &Canonical<'tcx, K>,\n-        operation: impl FnOnce(&InferCtxt<'_, 'gcx, 'tcx>, &mut FulfillmentContext<'tcx>, K)\n+        operation: impl FnOnce(&InferCtxt<'_, 'gcx, 'tcx>, &mut dyn TraitEngine<'tcx>, K)\n             -> Fallible<R>,\n     ) -> Fallible<CanonicalizedQueryResponse<'gcx, R>>\n     where\n@@ -59,9 +59,13 @@ impl<'cx, 'gcx, 'tcx> InferCtxtBuilder<'cx, 'gcx, 'tcx> {\n             DUMMY_SP,\n             canonical_key,\n             |ref infcx, key, canonical_inference_vars| {\n-                let fulfill_cx = &mut FulfillmentContext::new();\n-                let value = operation(infcx, fulfill_cx, key)?;\n-                infcx.make_canonicalized_query_response(canonical_inference_vars, value, fulfill_cx)\n+                let mut fulfill_cx = TraitEngine::new(infcx.tcx);\n+                let value = operation(infcx, &mut *fulfill_cx, key)?;\n+                infcx.make_canonicalized_query_response(\n+                    canonical_inference_vars,\n+                    value,\n+                    &mut *fulfill_cx\n+                )\n             },\n         )\n     }\n@@ -91,7 +95,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         &self,\n         inference_vars: CanonicalVarValues<'tcx>,\n         answer: T,\n-        fulfill_cx: &mut FulfillmentContext<'tcx>,\n+        fulfill_cx: &mut dyn TraitEngine<'tcx>,\n     ) -> Fallible<CanonicalizedQueryResponse<'gcx, T>>\n     where\n         T: Debug + Lift<'gcx> + TypeFoldable<'tcx>,\n@@ -138,7 +142,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         &self,\n         inference_vars: CanonicalVarValues<'tcx>,\n         answer: T,\n-        fulfill_cx: &mut FulfillmentContext<'tcx>,\n+        fulfill_cx: &mut dyn TraitEngine<'tcx>,\n     ) -> Result<QueryResponse<'tcx, T>, NoSolution>\n     where\n         T: Debug + TypeFoldable<'tcx> + Lift<'gcx>,"}, {"sha": "c000e3aa013f8538f8d725b0257f7515a9543a1a", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e0ea8148bf8b6a244d9df0916cc78ac257b277/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e0ea8148bf8b6a244d9df0916cc78ac257b277/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=26e0ea8148bf8b6a244d9df0916cc78ac257b277", "patch": "@@ -581,7 +581,7 @@ impl<'tcx, T> InferOk<'tcx, T> {\n     pub fn into_value_registering_obligations(\n         self,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n-        fulfill_cx: &mut impl TraitEngine<'tcx>,\n+        fulfill_cx: &mut dyn TraitEngine<'tcx>,\n     ) -> T {\n         let InferOk { value, obligations } = self;\n         for obligation in obligations {"}, {"sha": "bd347764cc6810f6bce7914c6038c682c78ad33d", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/26e0ea8148bf8b6a244d9df0916cc78ac257b277/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e0ea8148bf8b6a244d9df0916cc78ac257b277/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=26e0ea8148bf8b6a244d9df0916cc78ac257b277", "patch": "@@ -3243,11 +3243,14 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             trait_ref,\n         )?);\n \n-        obligations.push(Obligation::new(\n-            obligation.cause.clone(),\n-            obligation.param_env,\n-            ty::Predicate::ClosureKind(closure_def_id, substs, kind),\n-        ));\n+        // FIXME: chalk\n+        if !self.tcx().sess.opts.debugging_opts.chalk {\n+            obligations.push(Obligation::new(\n+                obligation.cause.clone(),\n+                obligation.param_env,\n+                ty::Predicate::ClosureKind(closure_def_id, substs, kind),\n+            ));\n+        }\n \n         Ok(VtableClosureData {\n             closure_def_id,"}, {"sha": "7979fe4a750731a3783f42259cbe33d150cda367", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26e0ea8148bf8b6a244d9df0916cc78ac257b277/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e0ea8148bf8b6a244d9df0916cc78ac257b277/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=26e0ea8148bf8b6a244d9df0916cc78ac257b277", "patch": "@@ -2,7 +2,7 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::{Canonical, QueryResponse};\n use rustc::traits::query::dropck_outlives::{DropckOutlivesResult, DtorckConstraint};\n use rustc::traits::query::{CanonicalTyGoal, NoSolution};\n-use rustc::traits::{FulfillmentContext, Normalized, ObligationCause, TraitEngineExt};\n+use rustc::traits::{TraitEngine, Normalized, ObligationCause, TraitEngineExt};\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n@@ -78,7 +78,7 @@ fn dropck_outlives<'tcx>(\n             // Set used to detect infinite recursion.\n             let mut ty_set = FxHashSet::default();\n \n-            let fulfill_cx = &mut FulfillmentContext::new();\n+            let mut fulfill_cx = TraitEngine::new(infcx.tcx);\n \n             let cause = ObligationCause::dummy();\n             while let Some((ty, depth)) = ty_stack.pop() {\n@@ -136,7 +136,11 @@ fn dropck_outlives<'tcx>(\n \n             debug!(\"dropck_outlives: result = {:#?}\", result);\n \n-            infcx.make_canonicalized_query_response(canonical_inference_vars, result, fulfill_cx)\n+            infcx.make_canonicalized_query_response(\n+                canonical_inference_vars,\n+                result,\n+                &mut *fulfill_cx\n+            )\n         },\n     )\n }"}, {"sha": "d38ce3478d93d29116f1cd5e29d5172399932174", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26e0ea8148bf8b6a244d9df0916cc78ac257b277/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e0ea8148bf8b6a244d9df0916cc78ac257b277/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=26e0ea8148bf8b6a244d9df0916cc78ac257b277", "patch": "@@ -11,7 +11,7 @@ use rustc::traits::query::type_op::prove_predicate::ProvePredicate;\n use rustc::traits::query::type_op::subtype::Subtype;\n use rustc::traits::query::{Fallible, NoSolution};\n use rustc::traits::{\n-    FulfillmentContext, Normalized, Obligation, ObligationCause, TraitEngine, TraitEngineExt,\n+    Normalized, Obligation, ObligationCause, TraitEngine, TraitEngineExt,\n };\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{Kind, Subst, UserSelfTy, UserSubsts};\n@@ -75,7 +75,7 @@ fn type_op_ascribe_user_type<'tcx>(\n struct AscribeUserTypeCx<'me, 'gcx: 'tcx, 'tcx: 'me> {\n     infcx: &'me InferCtxt<'me, 'gcx, 'tcx>,\n     param_env: ParamEnv<'tcx>,\n-    fulfill_cx: &'me mut FulfillmentContext<'tcx>,\n+    fulfill_cx: &'me mut dyn TraitEngine<'tcx>,\n }\n \n impl AscribeUserTypeCx<'me, 'gcx, 'tcx> {\n@@ -231,7 +231,7 @@ fn type_op_eq<'tcx>(\n \n fn type_op_normalize<T>(\n     infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n-    fulfill_cx: &mut FulfillmentContext<'tcx>,\n+    fulfill_cx: &mut dyn TraitEngine<'tcx>,\n     key: ParamEnvAnd<'tcx, Normalize<T>>,\n ) -> Fallible<T>\n where"}]}