{"sha": "41be515062ff709d080cd8a8858f31778a775bcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxYmU1MTUwNjJmZjcwOWQwODBjZDhhODg1OGYzMTc3OGE3NzViY2M=", "commit": {"author": {"name": "Mateusz Gacek", "email": "96mateusz.gacek@gmail.com", "date": "2021-03-12T20:00:08Z"}, "committer": {"name": "Mateusz Gacek", "email": "96mateusz.gacek@gmail.com", "date": "2021-03-12T21:03:07Z"}, "message": "mem_replace_with_default: use diagnostic items intead of paths", "tree": {"sha": "435da55d33971523e756750d2b3afb60cb407b08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/435da55d33971523e756750d2b3afb60cb407b08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41be515062ff709d080cd8a8858f31778a775bcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41be515062ff709d080cd8a8858f31778a775bcc", "html_url": "https://github.com/rust-lang/rust/commit/41be515062ff709d080cd8a8858f31778a775bcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41be515062ff709d080cd8a8858f31778a775bcc/comments", "author": {"login": "mgacek8", "id": 24357739, "node_id": "MDQ6VXNlcjI0MzU3NzM5", "avatar_url": "https://avatars.githubusercontent.com/u/24357739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgacek8", "html_url": "https://github.com/mgacek8", "followers_url": "https://api.github.com/users/mgacek8/followers", "following_url": "https://api.github.com/users/mgacek8/following{/other_user}", "gists_url": "https://api.github.com/users/mgacek8/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgacek8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgacek8/subscriptions", "organizations_url": "https://api.github.com/users/mgacek8/orgs", "repos_url": "https://api.github.com/users/mgacek8/repos", "events_url": "https://api.github.com/users/mgacek8/events{/privacy}", "received_events_url": "https://api.github.com/users/mgacek8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mgacek8", "id": 24357739, "node_id": "MDQ6VXNlcjI0MzU3NzM5", "avatar_url": "https://avatars.githubusercontent.com/u/24357739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgacek8", "html_url": "https://github.com/mgacek8", "followers_url": "https://api.github.com/users/mgacek8/followers", "following_url": "https://api.github.com/users/mgacek8/following{/other_user}", "gists_url": "https://api.github.com/users/mgacek8/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgacek8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgacek8/subscriptions", "organizations_url": "https://api.github.com/users/mgacek8/orgs", "repos_url": "https://api.github.com/users/mgacek8/repos", "events_url": "https://api.github.com/users/mgacek8/events{/privacy}", "received_events_url": "https://api.github.com/users/mgacek8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c86ba7f92d9627d2170827c07449542c7c0f7d77", "url": "https://api.github.com/repos/rust-lang/rust/commits/c86ba7f92d9627d2170827c07449542c7c0f7d77", "html_url": "https://github.com/rust-lang/rust/commit/c86ba7f92d9627d2170827c07449542c7c0f7d77"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "13f9c9b71f39e3f12c46958ffab25db08e4af2e8", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/41be515062ff709d080cd8a8858f31778a775bcc/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41be515062ff709d080cd8a8858f31778a775bcc/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=41be515062ff709d080cd8a8858f31778a775bcc", "patch": "@@ -4,6 +4,7 @@ use crate::utils::{\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n+use rustc_hir::def_id::DefId;\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n@@ -12,6 +13,8 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::sym;\n \n+use clippy_utils::is_diagnostic_assoc_item;\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for `mem::replace()` on an `Option` with\n     /// `None`.\n@@ -194,27 +197,43 @@ fn check_replace_with_uninit(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<'\n     }\n }\n \n+/// Returns true if the `def_id` associated with the `path` is recognized as a \"default-equivalent\"\n+/// constructor from the std library\n+fn is_default_equivalent_ctor(cx: &LateContext<'_>, def_id: DefId, path: &QPath<'_>) -> bool {\n+    let std_types_symbols = &[\n+        sym::string_type,\n+        sym::vec_type,\n+        sym::vecdeque_type,\n+        sym::LinkedList,\n+        sym::hashmap_type,\n+        sym::BTreeMap,\n+        sym::hashset_type,\n+        sym::BTreeSet,\n+        sym::BinaryHeap,\n+    ];\n+\n+    if std_types_symbols\n+        .iter()\n+        .any(|symbol| is_diagnostic_assoc_item(cx, def_id, *symbol))\n+    {\n+        if let QPath::TypeRelative(_, ref method) = path {\n+            if method.ident.name == sym::new {\n+                return true;\n+            }\n+        }\n+    }\n+\n+    false\n+}\n+\n fn check_replace_with_default(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<'_>, expr_span: Span) {\n     if let ExprKind::Call(ref repl_func, _) = src.kind {\n         if_chain! {\n             if !in_external_macro(cx.tcx.sess, expr_span);\n             if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n             if let Some(repl_def_id) = cx.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n-\n-            let defaults = &[\n-                paths::DEFAULT_TRAIT_METHOD.as_ref(),\n-                paths::STRING_NEW.as_ref(),\n-                paths::VEC_NEW.as_ref(),\n-                paths::VEC_DEQUE_NEW.as_ref(),\n-                paths::LINKED_LIST_NEW.as_ref(),\n-                paths::HASHMAP_NEW.as_ref(),\n-                paths::BTREEMAP_NEW.as_ref(),\n-                paths::HASHSET_NEW.as_ref(),\n-                paths::BTREESET_NEW.as_ref(),\n-                paths::BINARY_HEAP_NEW.as_ref(),\n-            ];\n-\n-            if defaults.iter().any(|x| match_def_path(cx, repl_def_id, &x));\n+            if is_diagnostic_assoc_item(cx, repl_def_id, sym::Default)\n+                || is_default_equivalent_ctor(cx, repl_def_id, repl_func_qpath);\n \n             then {\n                 span_lint_and_then("}, {"sha": "045123ab71e9834d6eb78a4a4006c331d935b3d4", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41be515062ff709d080cd8a8858f31778a775bcc/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41be515062ff709d080cd8a8858f31778a775bcc/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=41be515062ff709d080cd8a8858f31778a775bcc", "patch": "@@ -279,7 +279,7 @@ pub fn match_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, path: &[&str])\n     trt_id.map_or(false, |trt_id| match_def_path(cx, trt_id, path))\n }\n \n-/// Checks if the method call given in `expr` belongs to a trait or other container with a given\n+/// Checks if the method call given in `def_id` belongs to a trait or other container with a given\n /// diagnostic item\n pub fn is_diagnostic_assoc_item(cx: &LateContext<'_>, def_id: DefId, diag_item: Symbol) -> bool {\n     cx.tcx"}, {"sha": "560614efc749e1b1fd29102de9a7322d6284d31b", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41be515062ff709d080cd8a8858f31778a775bcc/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41be515062ff709d080cd8a8858f31778a775bcc/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=41be515062ff709d080cd8a8858f31778a775bcc", "patch": "@@ -11,13 +11,10 @@ pub const ASREF_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsRef\"];\n pub(super) const BEGIN_PANIC: [&str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n pub(super) const BEGIN_PANIC_FMT: [&str; 3] = [\"std\", \"panicking\", \"begin_panic_fmt\"];\n pub const BINARY_HEAP: [&str; 4] = [\"alloc\", \"collections\", \"binary_heap\", \"BinaryHeap\"];\n-pub const BINARY_HEAP_NEW: [&str; 5] = [\"alloc\", \"collections\", \"binary_heap\", \"BinaryHeap\", \"new\"];\n pub const BORROW_TRAIT: [&str; 3] = [\"core\", \"borrow\", \"Borrow\"];\n pub const BTREEMAP: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\"];\n-pub const BTREEMAP_NEW: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\", \"new\"];\n pub const BTREEMAP_ENTRY: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"entry\", \"Entry\"];\n pub const BTREESET: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"set\", \"BTreeSet\"];\n-pub const BTREESET_NEW: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"set\", \"BTreeSet\", \"new\"];\n pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const CMP_MAX: [&str; 3] = [\"core\", \"cmp\", \"max\"];\n pub const CMP_MIN: [&str; 3] = [\"core\", \"cmp\", \"min\"];\n@@ -49,10 +46,8 @@ pub const FROM_ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"collect\", \"From\n pub const FUTURE_FROM_GENERATOR: [&str; 3] = [\"core\", \"future\", \"from_generator\"];\n pub const HASH: [&str; 3] = [\"core\", \"hash\", \"Hash\"];\n pub const HASHMAP: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n-pub const HASHMAP_NEW: [&str; 6] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\", \"new\"];\n pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n pub const HASHSET: [&str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n-pub const HASHSET_NEW: [&str; 6] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\", \"new\"];\n #[cfg(feature = \"internal-lints\")]\n pub const IDENT: [&str; 3] = [\"rustc_span\", \"symbol\", \"Ident\"];\n #[cfg(feature = \"internal-lints\")]\n@@ -72,7 +67,6 @@ pub const KW_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"kw\"];\n #[cfg(feature = \"internal-lints\")]\n pub const LATE_CONTEXT: [&str; 2] = [\"rustc_lint\", \"LateContext\"];\n pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];\n-pub const LINKED_LIST_NEW: [&str; 5] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\", \"new\"];\n #[cfg(feature = \"internal-lints\")]\n pub const LINT: [&str; 2] = [\"rustc_lint_defs\", \"Lint\"];\n pub const MEM_DISCRIMINANT: [&str; 3] = [\"core\", \"mem\", \"discriminant\"];\n@@ -140,7 +134,6 @@ pub const STD_CONVERT_IDENTITY: [&str; 3] = [\"std\", \"convert\", \"identity\"];\n pub const STD_FS_CREATE_DIR: [&str; 3] = [\"std\", \"fs\", \"create_dir\"];\n pub const STD_MEM_TRANSMUTE: [&str; 3] = [\"std\", \"mem\", \"transmute\"];\n pub const STD_PTR_NULL: [&str; 3] = [\"std\", \"ptr\", \"null\"];\n-pub const STRING_NEW: [&str; 4] = [\"alloc\", \"string\", \"String\", \"new\"];\n pub const STRING_AS_MUT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_mut_str\"];\n pub const STRING_AS_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_str\"];\n pub const STR_ENDS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"ends_with\"];\n@@ -168,7 +161,6 @@ pub const VEC: [&str; 3] = [\"alloc\", \"vec\", \"Vec\"];\n pub const VEC_AS_MUT_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_mut_slice\"];\n pub const VEC_AS_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_slice\"];\n pub const VEC_DEQUE: [&str; 4] = [\"alloc\", \"collections\", \"vec_deque\", \"VecDeque\"];\n-pub const VEC_DEQUE_NEW: [&str; 5] = [\"alloc\", \"collections\", \"vec_deque\", \"VecDeque\", \"new\"];\n pub const VEC_FROM_ELEM: [&str; 3] = [\"alloc\", \"vec\", \"from_elem\"];\n pub const VEC_NEW: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"new\"];\n pub const VEC_RESIZE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"resize\"];"}]}