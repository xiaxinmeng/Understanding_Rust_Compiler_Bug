{"sha": "425e7e5596c0ab6555fa75292d38863280d4a3d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNWU3ZTU1OTZjMGFiNjU1NWZhNzUyOTJkMzg4NjMyODBkNGEzZDc=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-03-07T20:29:09Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-03-07T20:29:09Z"}, "message": "Don't insert panic when generator can not return", "tree": {"sha": "04bf384fdde5a15f47a1257317b7645218259614", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04bf384fdde5a15f47a1257317b7645218259614"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/425e7e5596c0ab6555fa75292d38863280d4a3d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/425e7e5596c0ab6555fa75292d38863280d4a3d7", "html_url": "https://github.com/rust-lang/rust/commit/425e7e5596c0ab6555fa75292d38863280d4a3d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/425e7e5596c0ab6555fa75292d38863280d4a3d7/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "823ff8cf1397a5772b1f6954b60576202bf91836", "url": "https://api.github.com/repos/rust-lang/rust/commits/823ff8cf1397a5772b1f6954b60576202bf91836", "html_url": "https://github.com/rust-lang/rust/commit/823ff8cf1397a5772b1f6954b60576202bf91836"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "cc8d2807b472bcd5b58da3b8a139455a4453d13b", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/425e7e5596c0ab6555fa75292d38863280d4a3d7/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425e7e5596c0ab6555fa75292d38863280d4a3d7/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=425e7e5596c0ab6555fa75292d38863280d4a3d7", "patch": "@@ -991,12 +991,30 @@ fn insert_panic_block<'tcx>(\n     assert_block\n }\n \n+fn can_return<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> bool {\n+    // Returning from a function with an uninhabited return type is undefined behavior.\n+    if body.return_ty().conservative_is_privately_uninhabited(tcx) {\n+        return false;\n+    }\n+\n+    // If there's no return terminator the function also won't return.\n+    for block in body.basic_blocks() {\n+        if let TerminatorKind::Return = block.terminator().kind {\n+            return true;\n+        }\n+    }\n+\n+    // Otherwise we assume that the function may return.\n+    false\n+}\n+\n fn create_generator_resume_function<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     transform: TransformVisitor<'tcx>,\n     def_id: DefId,\n     source: MirSource<'tcx>,\n     body: &mut BodyAndCache<'tcx>,\n+    can_return: bool,\n ) {\n     // Poison the generator when it unwinds\n     for block in body.basic_blocks_mut() {\n@@ -1015,7 +1033,14 @@ fn create_generator_resume_function<'tcx>(\n \n     // Panic when resumed on the returned or poisoned state\n     let generator_kind = body.generator_kind.unwrap();\n-    cases.insert(1, (RETURNED, insert_panic_block(tcx, body, ResumedAfterReturn(generator_kind))));\n+\n+    if can_return {\n+        cases.insert(\n+            1,\n+            (RETURNED, insert_panic_block(tcx, body, ResumedAfterReturn(generator_kind))),\n+        );\n+    }\n+\n     cases.insert(2, (POISONED, insert_panic_block(tcx, body, ResumedAfterPanic(generator_kind))));\n \n     insert_switch(body, cases, &transform, TerminatorKind::Unreachable);\n@@ -1200,6 +1225,8 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         let (remap, layout, storage_liveness) =\n             compute_layout(tcx, source, &upvars, interior, movable, body);\n \n+        let can_return = can_return(tcx, body);\n+\n         // Run the transformation which converts Places from Local to generator struct\n         // accesses for locals in `remap`.\n         // It also rewrites `return x` and `yield y` as writing a new generator state and returning\n@@ -1243,6 +1270,6 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         body.generator_drop = Some(box drop_shim);\n \n         // Create the Generator::resume function\n-        create_generator_resume_function(tcx, transform, def_id, source, body);\n+        create_generator_resume_function(tcx, transform, def_id, source, body, can_return);\n     }\n }"}]}