{"sha": "c0f86f5927377426fbaf72b17c87a6a7291406cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZjg2ZjU5MjczNzc0MjZmYmFmNzJiMTdjODdhNmE3MjkxNDA2Y2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-30T07:58:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-30T07:58:10Z"}, "message": "Auto merge of #41602 - hsivonen:explainnonnull, r=steveklabnik\n\nExplain why zero-length slices require a non-null pointer\n\nIn reference to [a thread on Discourse](https://users.rust-lang.org/t/why-does-std-slice-from-raw-parts-require-a-non-null-pointer-for-zero-length-slices/10534), explain why `from_raw_parts` requires a non-null pointer for zero-length slices.\n\nr? @steveklabnik", "tree": {"sha": "933adea8dd63e95cca3ac4c635f0ae6acd4a6fc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/933adea8dd63e95cca3ac4c635f0ae6acd4a6fc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0f86f5927377426fbaf72b17c87a6a7291406cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0f86f5927377426fbaf72b17c87a6a7291406cb", "html_url": "https://github.com/rust-lang/rust/commit/c0f86f5927377426fbaf72b17c87a6a7291406cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0f86f5927377426fbaf72b17c87a6a7291406cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78f63181360269981085795b7feb0f4b6591f52f", "url": "https://api.github.com/repos/rust-lang/rust/commits/78f63181360269981085795b7feb0f4b6591f52f", "html_url": "https://github.com/rust-lang/rust/commit/78f63181360269981085795b7feb0f4b6591f52f"}, {"sha": "e36f59e1a2a5d94512b5fb66a0e4e224cd15c092", "url": "https://api.github.com/repos/rust-lang/rust/commits/e36f59e1a2a5d94512b5fb66a0e4e224cd15c092", "html_url": "https://github.com/rust-lang/rust/commit/e36f59e1a2a5d94512b5fb66a0e4e224cd15c092"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "9e3bd9115468ab22b8645ab1b14bb522da4c542d", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0f86f5927377426fbaf72b17c87a6a7291406cb/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f86f5927377426fbaf72b17c87a6a7291406cb/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=c0f86f5927377426fbaf72b17c87a6a7291406cb", "patch": "@@ -2354,7 +2354,10 @@ impl<'a, T> FusedIterator for ChunksMut<'a, T> {}\n /// valid for `len` elements, nor whether the lifetime inferred is a suitable\n /// lifetime for the returned slice.\n ///\n-/// `p` must be non-null, even for zero-length slices.\n+/// `p` must be non-null, even for zero-length slices, because non-zero bits\n+/// are required to distinguish between a zero-length slice within `Some()`\n+/// from `None`. `p` can be a bogus non-dereferencable pointer, such as `0x1`,\n+/// for zero-length slices, though.\n ///\n /// # Caveat\n ///\n@@ -2387,7 +2390,8 @@ pub unsafe fn from_raw_parts<'a, T>(p: *const T, len: usize) -> &'a [T] {\n ///\n /// This function is unsafe for the same reasons as `from_raw_parts`, as well\n /// as not being able to provide a non-aliasing guarantee of the returned\n-/// mutable slice.\n+/// mutable slice. `p` must be non-null even for zero-length slices as with\n+/// `from_raw_parts`.\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts_mut<'a, T>(p: *mut T, len: usize) -> &'a mut [T] {"}, {"sha": "6b627430904847199b42ef7ef6490b41406c7d44", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c0f86f5927377426fbaf72b17c87a6a7291406cb/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f86f5927377426fbaf72b17c87a6a7291406cb/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=c0f86f5927377426fbaf72b17c87a6a7291406cb", "patch": "@@ -319,7 +319,10 @@ pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n ///\n /// The data must be valid UTF-8\n ///\n-/// `p` must be non-null, even for zero-length str.\n+/// `p` must be non-null, even for zero-length strs, because non-zero bits\n+/// are required to distinguish between a zero-length str within `Some()`\n+/// from `None`. `p` can be a bogus non-dereferencable pointer, such as `0x1`,\n+/// for zero-length strs, though.\n ///\n /// # Caveat\n ///"}]}