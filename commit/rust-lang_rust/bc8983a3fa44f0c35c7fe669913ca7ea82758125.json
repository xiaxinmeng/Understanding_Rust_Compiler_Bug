{"sha": "bc8983a3fa44f0c35c7fe669913ca7ea82758125", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjODk4M2EzZmE0NGYwYzM1YzdmZTY2OTkxM2NhN2VhODI3NTgxMjU=", "commit": {"author": {"name": "David Manescu", "email": "david.manescu@gmail.com", "date": "2014-01-30T12:36:05Z"}, "committer": {"name": "David Manescu", "email": "david.manescu@gmail.com", "date": "2014-01-31T11:16:39Z"}, "message": "Handle attributes on cross-crate tuple-structs correctly\n\nFixes #11741", "tree": {"sha": "395714a16fda9c415aff3e9fa4d85343c03f8f66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/395714a16fda9c415aff3e9fa4d85343c03f8f66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc8983a3fa44f0c35c7fe669913ca7ea82758125", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc8983a3fa44f0c35c7fe669913ca7ea82758125", "html_url": "https://github.com/rust-lang/rust/commit/bc8983a3fa44f0c35c7fe669913ca7ea82758125", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc8983a3fa44f0c35c7fe669913ca7ea82758125/comments", "author": {"login": "dmanescu", "id": 5207313, "node_id": "MDQ6VXNlcjUyMDczMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5207313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmanescu", "html_url": "https://github.com/dmanescu", "followers_url": "https://api.github.com/users/dmanescu/followers", "following_url": "https://api.github.com/users/dmanescu/following{/other_user}", "gists_url": "https://api.github.com/users/dmanescu/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmanescu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmanescu/subscriptions", "organizations_url": "https://api.github.com/users/dmanescu/orgs", "repos_url": "https://api.github.com/users/dmanescu/repos", "events_url": "https://api.github.com/users/dmanescu/events{/privacy}", "received_events_url": "https://api.github.com/users/dmanescu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dmanescu", "id": 5207313, "node_id": "MDQ6VXNlcjUyMDczMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5207313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmanescu", "html_url": "https://github.com/dmanescu", "followers_url": "https://api.github.com/users/dmanescu/followers", "following_url": "https://api.github.com/users/dmanescu/following{/other_user}", "gists_url": "https://api.github.com/users/dmanescu/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmanescu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmanescu/subscriptions", "organizations_url": "https://api.github.com/users/dmanescu/orgs", "repos_url": "https://api.github.com/users/dmanescu/repos", "events_url": "https://api.github.com/users/dmanescu/events{/privacy}", "received_events_url": "https://api.github.com/users/dmanescu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b305f34fb56bfa5394aec56d0cd0262053df94a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b305f34fb56bfa5394aec56d0cd0262053df94a", "html_url": "https://github.com/rust-lang/rust/commit/6b305f34fb56bfa5394aec56d0cd0262053df94a"}], "stats": {"total": 71, "additions": 69, "deletions": 2}, "files": [{"sha": "35bfb02f2aa8e66707fc900ed093fb426a43d711", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc8983a3fa44f0c35c7fe669913ca7ea82758125/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc8983a3fa44f0c35c7fe669913ca7ea82758125/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=bc8983a3fa44f0c35c7fe669913ca7ea82758125", "patch": "@@ -35,6 +35,8 @@ pub static tag_items_data_item_variant: uint = 0x0eu;\n \n pub static tag_items_data_parent_item: uint = 0x0fu;\n \n+pub static tag_items_data_item_is_tuple_struct_ctor: uint = 0x10u;\n+\n pub static tag_index: uint = 0x11u;\n \n pub static tag_index_buckets: uint = 0x12u;"}, {"sha": "6496d1c842e6f4f548a1324f81b943cf77008d32", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bc8983a3fa44f0c35c7fe669913ca7ea82758125/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc8983a3fa44f0c35c7fe669913ca7ea82758125/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=bc8983a3fa44f0c35c7fe669913ca7ea82758125", "patch": "@@ -980,9 +980,26 @@ pub fn get_static_methods_if_impl(intr: @IdentInterner,\n     return Some(static_impl_methods);\n }\n \n+/// If node_id is the constructor of a tuple struct, retrieve the NodeId of\n+/// the actual type definition, otherwise, return None\n+pub fn get_tuple_struct_definition_if_ctor(cdata: Cmd,\n+                                           node_id: ast::NodeId) -> Option<ast::NodeId> {\n+    let item = lookup_item(node_id, cdata.data());\n+    let mut ret = None;\n+    reader::tagged_docs(item, tag_items_data_item_is_tuple_struct_ctor, |_| {\n+        ret = Some(item_reqd_and_translated_parent_item(cdata.cnum, item));\n+        false\n+    });\n+    ret.map(|x| x.node)\n+}\n+\n pub fn get_item_attrs(cdata: Cmd,\n                       node_id: ast::NodeId,\n                       f: |~[@ast::MetaItem]|) {\n+    // The attributes for a tuple struct are attached to the definition, not the ctor;\n+    // we assume that someone passing in a tuple struct ctor is actually wanting to\n+    // look at the definition\n+    let node_id = get_tuple_struct_definition_if_ctor(cdata, node_id).unwrap_or(node_id);\n     let item = lookup_item(node_id, cdata.data());\n     reader::tagged_docs(item, tag_attributes, |attributes| {\n         reader::tagged_docs(attributes, tag_attribute, |attribute| {"}, {"sha": "e35f8d85ca9b9c04ab0dcc646b6bffb56c9c7f0d", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc8983a3fa44f0c35c7fe669913ca7ea82758125/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc8983a3fa44f0c35c7fe669913ca7ea82758125/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=bc8983a3fa44f0c35c7fe669913ca7ea82758125", "patch": "@@ -778,6 +778,12 @@ fn encode_info_for_struct_ctor(ecx: &EncodeContext,\n         encode_symbol(ecx, ebml_w, ctor_id);\n     }\n \n+    // indicate that this is a tuple struct ctor, because downstream users will normally want\n+    // the tuple struct definition, but without this there is no way for them to tell that\n+    // they actually have a ctor rather than a normal function\n+    ebml_w.start_tag(tag_items_data_item_is_tuple_struct_ctor);\n+    ebml_w.end_tag();\n+\n     ebml_w.end_tag();\n }\n "}, {"sha": "4e71f3c0c2a79d73f75894c9102f5b72951e297b", "filename": "src/test/auxiliary/lint_stability.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bc8983a3fa44f0c35c7fe669913ca7ea82758125/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc8983a3fa44f0c35c7fe669913ca7ea82758125/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_stability.rs?ref=bc8983a3fa44f0c35c7fe669913ca7ea82758125", "patch": "@@ -159,3 +159,17 @@ pub enum Enum {\n     #[locked]\n     LockedVariant,\n }\n+\n+#[deprecated]\n+pub struct DeprecatedTupleStruct(int);\n+#[experimental]\n+pub struct ExperimentalTupleStruct(int);\n+#[unstable]\n+pub struct UnstableTupleStruct(int);\n+pub struct UnmarkedTupleStruct(int);\n+#[stable]\n+pub struct StableTupleStruct(int);\n+#[frozen]\n+pub struct FrozenTupleStruct(int);\n+#[locked]\n+pub struct LockedTupleStruct(int);"}, {"sha": "1164028ca1aa7f11bcc1e7d3fd793e65b250bd9e", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bc8983a3fa44f0c35c7fe669913ca7ea82758125/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc8983a3fa44f0c35c7fe669913ca7ea82758125/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=bc8983a3fa44f0c35c7fe669913ca7ea82758125", "patch": "@@ -101,6 +101,14 @@ mod cross_crate {\n         let _ = StableVariant;\n         let _ = FrozenVariant;\n         let _ = LockedVariant;\n+\n+        let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item\n+        let _ = ExperimentalTupleStruct (1); //~ ERROR use of experimental item\n+        let _ = UnstableTupleStruct (1); //~ ERROR use of unstable item\n+        let _ = UnmarkedTupleStruct (1); //~ ERROR use of unmarked item\n+        let _ = StableTupleStruct (1);\n+        let _ = FrozenTupleStruct (1);\n+        let _ = LockedTupleStruct (1);\n     }\n \n     fn test_method_param<F: Trait>(foo: F) {\n@@ -277,6 +285,20 @@ mod this_crate {\n         LockedVariant,\n     }\n \n+    #[deprecated]\n+    pub struct DeprecatedTupleStruct(int);\n+    #[experimental]\n+    pub struct ExperimentalTupleStruct(int);\n+    #[unstable]\n+    pub struct UnstableTupleStruct(int);\n+    pub struct UnmarkedTupleStruct(int);\n+    #[stable]\n+    pub struct StableTupleStruct(int);\n+    #[frozen]\n+    pub struct FrozenTupleStruct(int);\n+    #[locked]\n+    pub struct LockedTupleStruct(int);\n+\n     fn test() {\n         let foo = MethodTester;\n \n@@ -356,6 +378,14 @@ mod this_crate {\n         let _ = StableVariant;\n         let _ = FrozenVariant;\n         let _ = LockedVariant;\n+\n+        let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item\n+        let _ = ExperimentalTupleStruct (1); //~ ERROR use of experimental item\n+        let _ = UnstableTupleStruct (1); //~ ERROR use of unstable item\n+        let _ = UnmarkedTupleStruct (1); //~ ERROR use of unmarked item\n+        let _ = StableTupleStruct (1);\n+        let _ = FrozenTupleStruct (1);\n+        let _ = LockedTupleStruct (1);\n     }\n \n     fn test_method_param<F: Trait>(foo: F) {"}, {"sha": "64c045366e1384b59b48d544c8655d9ee9471968", "filename": "src/test/compile-fail/simd-experimental.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc8983a3fa44f0c35c7fe669913ca7ea82758125/src%2Ftest%2Fcompile-fail%2Fsimd-experimental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc8983a3fa44f0c35c7fe669913ca7ea82758125/src%2Ftest%2Fcompile-fail%2Fsimd-experimental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-experimental.rs?ref=bc8983a3fa44f0c35c7fe669913ca7ea82758125", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test FIXME #11741 tuple structs ignore stability attributes\n-\n #[deny(experimental)];\n \n use std::unstable::simd;"}]}