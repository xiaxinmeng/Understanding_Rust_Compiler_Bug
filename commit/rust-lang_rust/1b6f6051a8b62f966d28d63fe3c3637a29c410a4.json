{"sha": "1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNmY2MDUxYThiNjJmOTY2ZDI4ZDYzZmUzYzM2MzdhMjljNDEwYTQ=", "commit": {"author": {"name": "flip1995", "email": "9744647+flip1995@users.noreply.github.com", "date": "2018-07-28T15:34:52Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-08-29T18:08:29Z"}, "message": "Adapt ui-tests to the tool_lints", "tree": {"sha": "bdeb226cc26cba523e1c3342cbf6a642324fa70e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdeb226cc26cba523e1c3342cbf6a642324fa70e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "html_url": "https://github.com/rust-lang/rust/commit/1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb49b31254e0bf5ad973a1d0548fc877614b9e30", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb49b31254e0bf5ad973a1d0548fc877614b9e30", "html_url": "https://github.com/rust-lang/rust/commit/bb49b31254e0bf5ad973a1d0548fc877614b9e30"}], "stats": {"total": 1083, "additions": 597, "deletions": 486}, "files": [{"sha": "d08c8008ec9a070afa2ff9a2b0362d357777ba1d", "filename": "tests/ui/absurd-extreme-comparisons.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(absurd_extreme_comparisons)]\n-#![allow(unused, eq_op, no_effect, unnecessary_operation, needless_pass_by_value)]\n+#![warn(clippy::absurd_extreme_comparisons)]\n+#![allow(unused, clippy::eq_op, clippy::no_effect, clippy::unnecessary_operation, clippy::needless_pass_by_value)]\n \n fn main() {\n     const Z: u32 = 0;\n@@ -27,7 +27,7 @@ fn main() {\n     b >= true;\n     false > b;\n     u > 0; // ok\n-    // this is handled by unit_cmp\n+    // this is handled by clippy::unit_cmp\n     () < {};\n }\n "}, {"sha": "46ca2fbfb57e523e774d685324a059619ceffe60", "filename": "tests/ui/approx_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(approx_constant)]\n-#[allow(unused, shadow_unrelated, similar_names, unreadable_literal)]\n+#[warn(clippy::approx_constant)]\n+#[allow(unused, clippy::shadow_unrelated, clippy::similar_names, clippy::unreadable_literal)]\n fn main() {\n     let my_e = 2.7182;\n     let almost_e = 2.718;"}, {"sha": "e7aa9a18b8a058241103968bb315af60661dcf46", "filename": "tests/ui/arithmetic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(integer_arithmetic, float_arithmetic)]\n-#![allow(unused, shadow_reuse, shadow_unrelated, no_effect, unnecessary_operation)]\n+#![warn(clippy::integer_arithmetic, clippy::float_arithmetic)]\n+#![allow(unused, clippy::shadow_reuse, clippy::shadow_unrelated, clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n     let i = 1i32;\n     1 + i;"}, {"sha": "765dbb679905d15e5b0d9c053901bc1488b8c741", "filename": "tests/ui/assign_ops.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,5 +1,7 @@\n+#![feature(tool_lints)]\n+\n #[allow(dead_code, unused_assignments)]\n-#[warn(assign_op_pattern)]\n+#[warn(clippy::assign_op_pattern)]\n fn main() {\n     let mut a = 5;\n     a = a + 1;"}, {"sha": "c3f5083bb1f9428f626c128e76e2a6c978e12aa8", "filename": "tests/ui/assign_ops2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fassign_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fassign_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops2.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n-\n+#![feature(tool_lints)]\n \n \n #[allow(unused_assignments)]\n-#[warn(misrefactored_assign_op, assign_op_pattern)]\n+#[warn(clippy::misrefactored_assign_op, clippy::assign_op_pattern)]\n fn main() {\n     let mut a = 5;\n     a += a + 1;"}, {"sha": "b1f0ca640aab6aa2cc5fe4da16a8ee393acbca30", "filename": "tests/ui/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattrs.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(inline_always, deprecated_semver)]\n+#![warn(clippy::inline_always, clippy::deprecated_semver)]\n \n #[inline(always)]\n fn test_attr_lint() {"}, {"sha": "4111f344b666208c63c5aba8d2f18fef2c80ba7b", "filename": "tests/ui/bit_masks.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fbit_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fbit_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbit_masks.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,11 +1,11 @@\n-\n+#![feature(tool_lints)]\n \n \n const THREE_BITS : i64 = 7;\n const EVEN_MORE_REDIRECTION : i64 = THREE_BITS;\n \n-#[warn(bad_bit_mask)]\n-#[allow(ineffective_bit_mask, identity_op, no_effect, unnecessary_operation)]\n+#[warn(clippy::bad_bit_mask)]\n+#[allow(clippy::ineffective_bit_mask, clippy::identity_op, clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n     let x = 5;\n \n@@ -44,8 +44,8 @@ fn main() {\n     ineffective();\n }\n \n-#[warn(ineffective_bit_mask)]\n-#[allow(bad_bit_mask, no_effect, unnecessary_operation)]\n+#[warn(clippy::ineffective_bit_mask)]\n+#[allow(clippy::bad_bit_mask, clippy::no_effect, clippy::unnecessary_operation)]\n fn ineffective() {\n     let x = 5;\n "}, {"sha": "4e2e5388c989e29056ae16e4e86f7ccdf5fe9c11", "filename": "tests/ui/blacklisted_name.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblacklisted_name.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![allow(dead_code, similar_names, single_match, toplevel_ref_arg, unused_mut, unused_variables)]\n-#![warn(blacklisted_name)]\n+#![allow(dead_code, clippy::similar_names, clippy::single_match, clippy::toplevel_ref_arg, unused_mut, unused_variables)]\n+#![warn(clippy::blacklisted_name)]\n \n fn test(foo: ()) {}\n "}, {"sha": "dd0e55034370a8cc1a1b27d7670ffa36b07be88d", "filename": "tests/ui/block_in_if_condition.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,10 +1,10 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(block_in_if_condition_expr)]\n-#![warn(block_in_if_condition_stmt)]\n-#![allow(unused, let_and_return)]\n-#![warn(nonminimal_bool)]\n+#![warn(clippy::block_in_if_condition_expr)]\n+#![warn(clippy::block_in_if_condition_stmt)]\n+#![allow(unused, clippy::let_and_return)]\n+#![warn(clippy::nonminimal_bool)]\n \n \n macro_rules! blocky {"}, {"sha": "144f9f4c631bfbc0472f2008d7be69977ee426d9", "filename": "tests/ui/bool_comparison.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(bool_comparison)]\n+#[warn(clippy::bool_comparison)]\n fn main() {\n     let x = true;\n     if x == true { \"yes\" } else { \"no\" };"}, {"sha": "eaa686c9a901f2ba20cb570c04d8b02df84defcb", "filename": "tests/ui/booleans.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n+#![warn(clippy::nonminimal_bool, clippy::logic_bug)]\n \n-#![warn(nonminimal_bool, logic_bug)]\n-\n-#[allow(unused, many_single_char_names)]\n+#[allow(unused, clippy::many_single_char_names)]\n fn main() {\n     let a: bool = unimplemented!();\n     let b: bool = unimplemented!();\n@@ -23,7 +23,7 @@ fn main() {\n     let _ = !(!a && b);\n }\n \n-#[allow(unused, many_single_char_names)]\n+#[allow(unused, clippy::many_single_char_names)]\n fn equality_stuff() {\n     let a: i32 = unimplemented!();\n     let b: i32 = unimplemented!();\n@@ -39,7 +39,7 @@ fn equality_stuff() {\n     let _ = a != b || !(a != b || c == d);\n }\n \n-#[allow(unused, many_single_char_names)]\n+#[allow(unused, clippy::many_single_char_names)]\n fn methods_with_negation() {\n     let a: Option<i32> = unimplemented!();\n     let b: Result<i32, i32> = unimplemented!();\n@@ -59,7 +59,7 @@ fn methods_with_negation() {\n }\n \n // Simplified versions of https://github.com/rust-lang-nursery/rust-clippy/issues/2638\n-// nonminimal_bool should only check the built-in Result and Some type, not\n+// clippy::nonminimal_bool should only check the built-in Result and Some type, not\n // any other types like the following.\n enum CustomResultOk<E> { Ok, Err(E) }\n enum CustomResultErr<E> { Ok, Err(E) }\n@@ -115,7 +115,7 @@ fn warn_for_built_in_methods_with_negation() {\n     if !res.is_none() { }\n }\n \n-#[allow(neg_cmp_op_on_partial_ord)]\n+#[allow(clippy::neg_cmp_op_on_partial_ord)]\n fn dont_warn_for_negated_partial_ord_comparison() {\n     let a: f64 = unimplemented!();\n     let b: f64 = unimplemented!();"}, {"sha": "216dbebda6737dd676819fcf8ad5777830cec994", "filename": "tests/ui/borrow_box.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fborrow_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fborrow_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![deny(borrowed_box)]\n-#![allow(blacklisted_name)]\n+#![deny(clippy::borrowed_box)]\n+#![allow(clippy::blacklisted_name)]\n #![allow(unused_variables)]\n #![allow(dead_code)]\n "}, {"sha": "bc5e8361d8bc6a6e79c2d511d1c1440c0fcd4f8c", "filename": "tests/ui/box_vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,9 +1,9 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(clippy)]\n-#![allow(boxed_local, needless_pass_by_value)]\n-#![allow(blacklisted_name)]\n+#![warn(clippy::all)]\n+#![allow(clippy::boxed_local, clippy::needless_pass_by_value)]\n+#![allow(clippy::blacklisted_name)]\n \n macro_rules! boxit {\n     ($init:expr, $x:ty) => {"}, {"sha": "56892fc948398a2de2cca643eea3851e4dac8bb3", "filename": "tests/ui/builtin-type-shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fbuiltin-type-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fbuiltin-type-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-type-shadow.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(builtin_type_shadow)]\n+#![warn(clippy::builtin_type_shadow)]\n \n fn foo<u32>(a: u32) -> u32 {\n     42"}, {"sha": "7211284e4a08268a08e9467a1b2a988db43f844e", "filename": "tests/ui/bytecount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytecount.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[deny(naive_bytecount)]\n+#[deny(clippy::naive_bytecount)]\n fn main() {\n     let x = vec![0_u8; 16];\n "}, {"sha": "0668b16ff326cf73556eddb57488b9ffdb0f75de", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,35 +1,35 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap, cast_lossless)]\n-#[allow(no_effect, unnecessary_operation)]\n+#[warn(clippy::cast_precision_loss, clippy::cast_possible_truncation, clippy::cast_sign_loss, clippy::cast_possible_wrap, clippy::cast_lossless)]\n+#[allow(clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n-    // Test cast_precision_loss\n+    // Test clippy::cast_precision_loss\n     1i32 as f32;\n     1i64 as f32;\n     1i64 as f64;\n     1u32 as f32;\n     1u64 as f32;\n     1u64 as f64;\n-    // Test cast_possible_truncation\n+    // Test clippy::cast_possible_truncation\n     1f32 as i32;\n     1f32 as u32;\n     1f64 as f32;\n     1i32 as i8;\n     1i32 as u8;\n     1f64 as isize;\n     1f64 as usize;\n-    // Test cast_possible_wrap\n+    // Test clippy::cast_possible_wrap\n     1u8 as i8;\n     1u16 as i16;\n     1u32 as i32;\n     1u64 as i64;\n     1usize as isize;\n-    // Test cast_lossless with casts from floating-point types\n+    // Test clippy::cast_lossless with casts from floating-point types\n     1.0f32 as f64;\n-    // Test cast_lossless with an expression wrapped in parens\n+    // Test clippy::cast_lossless with an expression wrapped in parens\n     (1u8 + 1u8) as u16;\n-    // Test cast_sign_loss\n+    // Test clippy::cast_sign_loss\n     1i32 as u32;\n     1isize as usize;\n     // Extra checks for *size"}, {"sha": "1f7606de649d54fae878f274630631e8bbe55939", "filename": "tests/ui/cast_alignment.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcast_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcast_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,11 +1,13 @@\n+#![feature(tool_lints)]\n+\n //! Test casts for alignment issues\n \n #![feature(libc)]\n \n extern crate libc;\n \n-#[warn(cast_ptr_alignment)]\n-#[allow(no_effect, unnecessary_operation, cast_lossless)]\n+#[warn(clippy::cast_ptr_alignment)]\n+#[allow(clippy::no_effect, clippy::unnecessary_operation, clippy::cast_lossless)]\n fn main() {\n     /* These should be warned against */\n "}, {"sha": "437c4b6712005785c3f545ed8f74e2970e0dc414", "filename": "tests/ui/cast_lossless_float.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcast_lossless_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcast_lossless_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,9 @@\n-#[warn(cast_lossless)]\n-#[allow(no_effect, unnecessary_operation)]\n+#![feature(tool_lints)]\n+\n+#[warn(clippy::cast_lossless)]\n+#[allow(clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n-    // Test cast_lossless with casts to floating-point types\n+    // Test clippy::cast_lossless with casts to floating-point types\n     1i8 as f32;\n     1i8 as f64;\n     1u8 as f32;"}, {"sha": "e06e653c6f5d904c76de55d45607743d60c6b402", "filename": "tests/ui/cast_lossless_integer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcast_lossless_integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcast_lossless_integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n-\n-#[warn(cast_lossless)]\n-#[allow(no_effect, unnecessary_operation)]\n+#![feature(tool_lints)]\n+#[warn(clippy::cast_lossless)]\n+#[allow(clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n-    // Test cast_lossless with casts to integer types\n+    // Test clippy::cast_lossless with casts to integer types\n     1i8 as i16;\n     1i8 as i32;\n     1i8 as i64;"}, {"sha": "4c72f57165cb2bce74d3fc5e5b09cc865caf3dc9", "filename": "tests/ui/cast_size.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcast_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcast_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,5 +1,7 @@\n-#[warn(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap, cast_lossless)]\n-#[allow(no_effect, unnecessary_operation)]\n+#![feature(tool_lints)]\n+\n+#[warn(clippy::cast_precision_loss, clippy::cast_possible_truncation, clippy::cast_sign_loss, clippy::cast_possible_wrap, clippy::cast_lossless)]\n+#[allow(clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n     // Casting from *size\n     1isize as i8;"}, {"sha": "f9937ede3518e3edc94358d729d15f03d734ebce", "filename": "tests/ui/char_lit_as_u8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fchar_lit_as_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fchar_lit_as_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(char_lit_as_u8)]\n+#![warn(clippy::char_lit_as_u8)]\n #![allow(unused_variables)]\n fn main() {\n     let c = 'a' as u8;"}, {"sha": "b3979245d3631269a913ff8069b07d8f017e7416", "filename": "tests/ui/checked_unwrap.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fchecked_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fchecked_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,5 +1,7 @@\n-#![deny(panicking_unwrap, unnecessary_unwrap)]\n-#![allow(if_same_then_else)]\n+#![feature(tool_lints)]\n+\n+#![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n+#![allow(clippy::if_same_then_else)]\n \n fn main() {\n     let x = Some(());"}, {"sha": "77dffc67670ffd4baeaed58e2f3e778f3df49b96", "filename": "tests/ui/clone_on_copy_mut.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fclone_on_copy_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fclone_on_copy_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy_mut.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,11 +1,13 @@\n+#![feature(tool_lints)]\n+\n pub fn dec_read_dec(i: &mut i32) -> i32 {\n     *i -= 1;\n     let ret = *i;\n     *i -= 1;\n     ret\n }\n \n-#[allow(trivially_copy_pass_by_ref)]\n+#[allow(clippy::trivially_copy_pass_by_ref)]\n pub fn minus_1(i: &i32) -> i32 {\n     dec_read_dec(&mut i.clone())\n }"}, {"sha": "fdebb7da18a30085a1fd5f4716772dbbec208288", "filename": "tests/ui/cmp_nan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcmp_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcmp_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(cmp_nan)]\n-#[allow(float_cmp, no_effect, unnecessary_operation)]\n+#[warn(clippy::cmp_nan)]\n+#[allow(clippy::float_cmp, clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n     let x = 5f32;\n     x == std::f32::NAN;"}, {"sha": "e10b3e104ec18c3889752f5d2d343e968cde0101", "filename": "tests/ui/cmp_null.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcmp_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcmp_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_null.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(cmp_null)]\n+#![warn(clippy::cmp_null)]\n #![allow(unused_mut)]\n \n use std::ptr;"}, {"sha": "713975c4404101164a36577771dd2583b3b8feca", "filename": "tests/ui/cmp_owned.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(cmp_owned)]\n-#[allow(unnecessary_operation)]\n+#[warn(clippy::cmp_owned)]\n+#[allow(clippy::unnecessary_operation)]\n fn main() {\n     fn with_to_string(x : &str) {\n         x != \"foo\".to_string();"}, {"sha": "d40be6319337fed40dd300dbf1613880de23cd18", "filename": "tests/ui/collapsible_if.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(collapsible_if)]\n+#[warn(clippy::collapsible_if)]\n fn main() {\n     let x = \"hello\";\n     let y = \"world\";"}, {"sha": "a6875793c8310c93078b10a9d033d5bda718f93c", "filename": "tests/ui/complex_types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcomplex_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcomplex_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(clippy)]\n-#![allow(unused, needless_pass_by_value)]\n+#![warn(clippy::all)]\n+#![allow(unused, clippy::needless_pass_by_value)]\n #![feature(associated_type_defaults)]\n \n type Alias = Vec<Vec<Box<(u32, u32, u32, u32)>>>; // no warning here"}, {"sha": "064c7fc1c59c10b6a1853c54732760371893798a", "filename": "tests/ui/copies.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,5 +1,7 @@\n-#![allow(blacklisted_name, collapsible_if, cyclomatic_complexity, eq_op, needless_continue,\n-         needless_return, never_loop, no_effect, zero_divided_by_zero)]\n+#![feature(tool_lints)]\n+\n+#![allow(clippy::blacklisted_name, clippy::collapsible_if, clippy::cyclomatic_complexity, clippy::eq_op, clippy::needless_continue,\n+         clippy::needless_return, clippy::never_loop, clippy::no_effect, clippy::zero_divided_by_zero)]\n \n fn bar<T>(_: T) {}\n fn foo() -> bool { unimplemented!() }\n@@ -14,8 +16,8 @@ pub enum Abc {\n     C,\n }\n \n-#[warn(if_same_then_else)]\n-#[warn(match_same_arms)]\n+#[warn(clippy::if_same_then_else)]\n+#[warn(clippy::match_same_arms)]\n fn if_same_then_else() -> Result<&'static str, ()> {\n     if true {\n         Foo { bar: 42 };\n@@ -340,8 +342,8 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     }\n }\n \n-#[warn(ifs_same_cond)]\n-#[allow(if_same_then_else)] // all empty blocks\n+#[warn(clippy::ifs_same_cond)]\n+#[allow(clippy::if_same_then_else)] // all empty blocks\n fn ifs_same_cond() {\n     let a = 0;\n     let b = false;"}, {"sha": "5ccb9910c1e13ca81011b0732f4cf08d174843d3", "filename": "tests/ui/copy_iterator.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopy_iterator.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,6 @@\n-#![warn(copy_iterator)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::copy_iterator)]\n \n #[derive(Copy, Clone)]\n struct Countdown(u8);"}, {"sha": "e68874d540977bfdbdc92b88929c8128b062c19a", "filename": "tests/ui/cstring.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,6 +1,8 @@\n+#![feature(tool_lints)]\n+\n fn main() {}\n \n-#[allow(result_unwrap_used)]\n+#[allow(clippy::result_unwrap_used)]\n fn temporary_cstring() {\n     use std::ffi::CString;\n "}, {"sha": "84e2a1b658378f4c8381f7cb40199defa10aae81", "filename": "tests/ui/cyclomatic_complexity.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n-\n-#![allow(clippy)]\n-#![warn(cyclomatic_complexity)]\n+#![allow(clippy::all)]\n+#![warn(clippy::cyclomatic_complexity)]\n #![allow(unused)]\n \n fn main() {\n@@ -172,7 +172,7 @@ fn bar() {\n \n #[test]\n #[clippy::cyclomatic_complexity = \"0\"]\n-/// Tests are usually complex but simple at the same time. `cyclomatic_complexity` used to give\n+/// Tests are usually complex but simple at the same time. `clippy::cyclomatic_complexity` used to give\n /// lots of false-positives in tests.\n fn dont_warn_on_tests() {\n     match 99 {"}, {"sha": "fd8be25e6707cafe51bc48a86be9356e593c33a9", "filename": "tests/ui/cyclomatic_complexity_attr_used.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(cyclomatic_complexity)]\n+#![warn(clippy::cyclomatic_complexity)]\n #![warn(unused)]\n \n fn main() {"}, {"sha": "472ea618571735bd63aaefe03c32e7fbb3a77dcf", "filename": "tests/ui/decimal_literal_representation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fdecimal_literal_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fdecimal_literal_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdecimal_literal_representation.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(decimal_literal_representation)]\n+#[warn(clippy::decimal_literal_representation)]\n #[allow(unused_variables)]\n fn main() {\n     let good = (        // Hex:"}, {"sha": "ba8886cd6a416a0c6843b39658f79d741395f7c2", "filename": "tests/ui/default_trait_access.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,6 @@\n-#![warn(default_trait_access)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::default_trait_access)]\n \n use std::default::Default as D2;\n use std::string;"}, {"sha": "ae54c0290bc207c26327045214d13e14c31526d6", "filename": "tests/ui/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,9 +1,9 @@\n-\n+#![feature(tool_lints)]\n \n #![feature(untagged_unions)]\n \n #![allow(dead_code)]\n-#![warn(expl_impl_clone_on_copy)]\n+#![warn(clippy::expl_impl_clone_on_copy)]\n \n use std::hash::{Hash, Hasher};\n "}, {"sha": "a8284dca32677d5ed212f90618800a504f3cc0cd", "filename": "tests/ui/diverging_sub_expression.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fdiverging_sub_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fdiverging_sub_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,9 +1,11 @@\n+#![feature(tool_lints)]\n+\n #![feature(never_type)]\n \n-#![warn(diverging_sub_expression)]\n-#![allow(match_same_arms, logic_bug)]\n+#![warn(clippy::diverging_sub_expression)]\n+#![allow(clippy::match_same_arms, clippy::logic_bug)]\n \n-#[allow(empty_loop)]\n+#[allow(clippy::empty_loop)]\n fn diverge() -> ! { loop {} }\n \n struct A;\n@@ -12,7 +14,7 @@ impl A {\n     fn foo(&self) -> ! { diverge() }\n }\n \n-#[allow(unused_variables, unnecessary_operation, short_circuit_statement)]\n+#[allow(unused_variables, clippy::unnecessary_operation, clippy::short_circuit_statement)]\n fn main() {\n     let b = true;\n     b || diverge();"}, {"sha": "395ff217497432614675f300930a458f8a3254d4", "filename": "tests/ui/dlist.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,9 +1,11 @@\n+#![feature(tool_lints)]\n+\n #![feature(alloc)]\n #![feature(associated_type_defaults)]\n \n \n-#![warn(linkedlist)]\n-#![allow(dead_code, needless_pass_by_value)]\n+#![warn(clippy::linkedlist)]\n+#![allow(dead_code, clippy::needless_pass_by_value)]\n \n extern crate alloc;\n use alloc::collections::linked_list::LinkedList;"}, {"sha": "d48007a934718d8842accb19e6e661d3b70dac96", "filename": "tests/ui/doc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,9 +1,11 @@\n+#![feature(tool_lints)]\n+\n //! This file tests for the DOC_MARKDOWN lint\n \n \n \n #![allow(dead_code)]\n-#![warn(doc_markdown)]\n+#![warn(clippy::doc_markdown)]\n \n /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n /// Markdown is _weird_. I mean _really weird_.  This \\_ is ok. So is `_`. But not Foo::some_fun\n@@ -50,7 +52,7 @@ fn test_units() {\n }\n \n /// This test has [a link_with_underscores][chunked-example] inside it. See #823.\n-/// See also [the issue tracker](https://github.com/rust-lang-nursery/rust-clippy/search?q=doc_markdown&type=Issues)\n+/// See also [the issue tracker](https://github.com/rust-lang-nursery/rust-clippy/search?q=clippy::doc_markdown&type=Issues)\n /// on GitHub (which is a camel-cased word, but is OK). And here is another [inline link][inline_link].\n /// It can also be [inline_link2].\n ///"}, {"sha": "0ec13900f99501418d08820f4f94bb7f352f3e38", "filename": "tests/ui/double_neg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fdouble_neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fdouble_neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_neg.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(double_neg)]\n+#[warn(clippy::double_neg)]\n fn main() {\n     let x = 1;\n     -x;"}, {"sha": "8d81ee16fe92c0fe834fa790d673b50c4974808c", "filename": "tests/ui/double_parens.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_parens.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(double_parens)]\n+#![warn(clippy::double_parens)]\n #![allow(dead_code)]\n \n fn dummy_fn<T>(_: T) {}"}, {"sha": "aa70490f8ab4b6729aaca808556261ef5f44fba1", "filename": "tests/ui/drop_forget_copy.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fdrop_forget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fdrop_forget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(drop_copy, forget_copy)]\n-#![allow(toplevel_ref_arg, drop_ref, forget_ref, unused_mut)]\n+#![warn(clippy::drop_copy, clippy::forget_copy)]\n+#![allow(clippy::toplevel_ref_arg, clippy::drop_ref, clippy::forget_ref, unused_mut)]\n \n use std::mem::{drop, forget};\n use std::vec::Vec;"}, {"sha": "bb4781db71b8ccc367df522618f18f4773c00f38", "filename": "tests/ui/drop_forget_ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(drop_ref, forget_ref)]\n-#![allow(toplevel_ref_arg, similar_names, needless_pass_by_value)]\n+#![warn(clippy::drop_ref, clippy::forget_ref)]\n+#![allow(clippy::toplevel_ref_arg, clippy::similar_names, clippy::needless_pass_by_value)]\n \n use std::mem::{drop, forget};\n "}, {"sha": "e54920c1b56ddbb912b7926811225ace86ca7b68", "filename": "tests/ui/duplicate_underscore_argument.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fduplicate_underscore_argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fduplicate_underscore_argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduplicate_underscore_argument.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(duplicate_underscore_argument)]\n+#![warn(clippy::duplicate_underscore_argument)]\n #[allow(dead_code, unused)]\n \n fn join_the_dark_side(darth: i32, _darth: i32) {}"}, {"sha": "d732a0228d56a15d4154d79a95958a3cac37e037", "filename": "tests/ui/duration_subsec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduration_subsec.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,6 @@\n-#![warn(duration_subsec)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::duration_subsec)]\n \n use std::time::Duration;\n "}, {"sha": "3776aecf54faca0152e4f522258c65a437ac38ee", "filename": "tests/ui/else_if_without_else.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Felse_if_without_else.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,5 +1,7 @@\n-#![warn(clippy)]\n-#![warn(else_if_without_else)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::all)]\n+#![warn(clippy::else_if_without_else)]\n \n fn bla1() -> bool { unimplemented!() }\n fn bla2() -> bool { unimplemented!() }"}, {"sha": "3398b71eead9cdaf2e96d00f45975be009c3dede", "filename": "tests/ui/empty_enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_enum.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n-\n+#![feature(tool_lints)]\n \n \n #![allow(dead_code)]\n-#![warn(empty_enum)]\n+#![warn(clippy::empty_enum)]\n \n enum Empty {}\n "}, {"sha": "c46a0496a732144cca2fb2d347bbc5356ece49cd", "filename": "tests/ui/empty_line_after_outer_attribute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fempty_line_after_outer_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fempty_line_after_outer_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_line_after_outer_attribute.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,5 +1,5 @@\n-\n-#![warn(empty_line_after_outer_attr)]\n+#![feature(tool_lints)]\n+#![warn(clippy::empty_line_after_outer_attr)]\n \n // This should produce a warning\n #[crate_type = \"lib\"]"}, {"sha": "955b0a6e917667d998c079edecf3bb64b058fa4f", "filename": "tests/ui/entry.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n+#![allow(unused, clippy::needless_pass_by_value)]\n \n-#![allow(unused, needless_pass_by_value)]\n-\n-#![warn(map_entry)]\n+#![warn(clippy::map_entry)]\n \n use std::collections::{BTreeMap, HashMap};\n use std::hash::Hash;"}, {"sha": "47082f8f3e649f85fb15315aabc2895f33912dc8", "filename": "tests/ui/enum_glob_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_glob_use.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(clippy, clippy_pedantic)]\n-#![allow(unused_imports, dead_code, missing_docs_in_private_items)]\n+#![warn(clippy::all, clippy::pedantic)]\n+#![allow(unused_imports, dead_code, clippy::missing_docs_in_private_items)]\n \n use std::cmp::Ordering::*;\n "}, {"sha": "4ddb7207a30b5761b30fd89b0ededd89f58c565e", "filename": "tests/ui/enum_variants.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,6 +1,8 @@\n+#![feature(tool_lints)]\n+\n #![feature(non_ascii_idents)]\n \n-#![warn(clippy, pub_enum_variant_names)]\n+#![warn(clippy::all, clippy::pub_enum_variant_names)]\n \n enum FakeCallType {\n     CALL, CREATE\n@@ -93,7 +95,7 @@ pub enum PubSeall {\n     WithOut,\n }\n \n-#[allow(pub_enum_variant_names)]\n+#[allow(clippy::pub_enum_variant_names)]\n mod allowed {\n     pub enum PubAllowed {\n         SomeThis,"}, {"sha": "8212f12b3dbce61fe77044bc41bb9d82a2976f4e", "filename": "tests/ui/enums_clike.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fenums_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fenums_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenums_clike.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,9 @@\n+#![feature(tool_lints)]\n+\n // ignore-x86\n \n \n-#![warn(clippy)]\n+#![warn(clippy::all)]\n \n #![allow(unused)]\n "}, {"sha": "a88866436dd527e6942a91ab504b28a46fdf4d62", "filename": "tests/ui/eq_op.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,10 +1,10 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(eq_op)]\n-#[allow(identity_op, double_parens, many_single_char_names)]\n-#[allow(no_effect, unused_variables, unnecessary_operation, short_circuit_statement)]\n-#[warn(nonminimal_bool)]\n+#[warn(clippy::eq_op)]\n+#[allow(clippy::identity_op, clippy::double_parens, clippy::many_single_char_names)]\n+#[allow(clippy::no_effect, unused_variables, clippy::unnecessary_operation, clippy::short_circuit_statement)]\n+#[warn(clippy::nonminimal_bool)]\n fn main() {\n     // simple values and comparisons\n     1 == 1;"}, {"sha": "02745ac5d911fbe5c2bd99744911f98f20508313", "filename": "tests/ui/erasing_op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferasing_op.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[allow(no_effect)]\n-#[warn(erasing_op)]\n+#[allow(clippy::no_effect)]\n+#[warn(clippy::erasing_op)]\n fn main() {\n     let x: u8 = 0;\n "}, {"sha": "4dd46f20e7641cf48b4f70cad8d22289d038be1d", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n-\n-#![allow(unknown_lints, unused, no_effect, redundant_closure_call, many_single_char_names, needless_pass_by_value, option_map_unit_fn, trivially_copy_pass_by_ref)]\n-#![warn(redundant_closure, needless_borrow)]\n+#![allow(unknown_lints, unused, clippy::no_effect, clippy::redundant_closure_call, clippy::many_single_char_names, clippy::needless_pass_by_value, clippy::option_map_unit_fn, clippy::trivially_copy_pass_by_ref)]\n+#![warn(clippy::redundant_closure, clippy::needless_borrow)]\n \n fn main() {\n     let a = Some(1u8).map(|a| foo(a));"}, {"sha": "b240dde06f8e4ffc7952e96ca9151ac4741fd540", "filename": "tests/ui/eval_order_dependence.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feval_order_dependence.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(eval_order_dependence)]\n-#[allow(unused_assignments, unused_variables, many_single_char_names, no_effect, dead_code, blacklisted_name)]\n+#[warn(clippy::eval_order_dependence)]\n+#[allow(unused_assignments, unused_variables, clippy::many_single_char_names, clippy::no_effect, dead_code, clippy::blacklisted_name)]\n fn main() {\n     let mut x = 0;\n     let a = { x = 1; 1 } + x;"}, {"sha": "b44364d6beb3eab06d6eac2eb774239e29da9ba4", "filename": "tests/ui/excessive_precision.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,6 +1,6 @@\n-\n-#![warn(excessive_precision)]\n-#![allow(print_literal)]\n+#![feature(tool_lints)]\n+#![warn(clippy::excessive_precision)]\n+#![allow(clippy::print_literal)]\n \n fn main() {\n     // Consts"}, {"sha": "9d6d13c84c546fa786cc717c96f4b270709e69cb", "filename": "tests/ui/explicit_write.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,6 @@\n-#![warn(explicit_write)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::explicit_write)]\n \n \n fn stdout() -> String {"}, {"sha": "5e33cca59fa73331ad97d594e682562f99ae9a34", "filename": "tests/ui/fallible_impl_from.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,6 @@\n-#![deny(fallible_impl_from)]\n+#![feature(tool_lints)]\n+\n+#![deny(clippy::fallible_impl_from)]\n \n // docs example\n struct Foo(i32);"}, {"sha": "d7a50a5883827b1c235ad388c287d44f53958516", "filename": "tests/ui/filter_methods.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ffilter_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ffilter_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(clippy, clippy_pedantic)]\n-#![allow(missing_docs_in_private_items)]\n+#![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::missing_docs_in_private_items)]\n \n fn main() {\n     let _: Vec<_> = vec![5; 6].into_iter()"}, {"sha": "d5b02fb706f1c81d120f514d791096c38681d368", "filename": "tests/ui/float_cmp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(float_cmp)]\n-#![allow(unused, no_effect, unnecessary_operation, cast_lossless)]\n+#![warn(clippy::float_cmp)]\n+#![allow(unused, clippy::no_effect, clippy::unnecessary_operation, clippy::cast_lossless)]\n \n use std::ops::Add;\n "}, {"sha": "279400604a2987e5652c1be2edad004537f805d5", "filename": "tests/ui/float_cmp_const.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ffloat_cmp_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ffloat_cmp_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,9 +1,9 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(float_cmp_const)]\n-#![allow(float_cmp)]\n-#![allow(unused, no_effect, unnecessary_operation)]\n+#![warn(clippy::float_cmp_const)]\n+#![allow(clippy::float_cmp)]\n+#![allow(unused, clippy::no_effect, clippy::unnecessary_operation)]\n \n const ONE: f32 = 1.0;\n const TWO: f32 = 2.0;\n@@ -36,7 +36,7 @@ fn main() {\n     ONE != ::std::f32::INFINITY;\n     ONE == ::std::f32::NEG_INFINITY;\n \n-    // no errors, but will warn float_cmp if '#![allow(float_cmp)]' above is removed\n+    // no errors, but will warn clippy::float_cmp if '#![allow(float_cmp)]' above is removed\n     let w = 1.1;\n     v == w;\n     v != w;"}, {"sha": "39eee64883c6e3c3b0fb7f845e477ab8ccd859a6", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,4 @@\n-\n+#![feature(tool_lints)]\n \n \n use std::collections::*;\n@@ -7,7 +7,7 @@ use std::rc::Rc;\n static STATIC: [usize; 4] = [0, 1, 8, 16];\n const CONST: [usize; 4] = [0, 1, 8, 16];\n \n-#[warn(clippy)]\n+#[warn(clippy::all)]\n fn for_loop_over_option_and_result() {\n     let option = Some(1);\n     let result = option.ok_or(\"x not found\");\n@@ -27,7 +27,7 @@ fn for_loop_over_option_and_result() {\n         println!(\"{}\", x);\n     }\n \n-    // make sure LOOP_OVER_NEXT lint takes precedence when next() is the last call\n+    // make sure LOOP_OVER_NEXT lint takes clippy::precedence when next() is the last call\n     // in the chain\n     for x in v.iter().next() {\n         println!(\"{}\", x);\n@@ -73,11 +73,11 @@ impl Unrelated {\n     }\n }\n \n-#[warn(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop,\n-       explicit_counter_loop, for_kv_map)]\n-#[warn(unused_collect)]\n-#[allow(linkedlist, shadow_unrelated, unnecessary_mut_passed, cyclomatic_complexity, similar_names)]\n-#[allow(many_single_char_names, unused_variables)]\n+#[warn(clippy::needless_range_loop, clippy::explicit_iter_loop, clippy::explicit_into_iter_loop, clippy::iter_next_loop, clippy::reverse_range_loop,\n+       clippy::explicit_counter_loop, clippy::for_kv_map)]\n+#[warn(clippy::unused_collect)]\n+#[allow(clippy::linkedlist, clippy::shadow_unrelated, clippy::unnecessary_mut_passed, clippy::cyclomatic_complexity, clippy::similar_names)]\n+#[allow(clippy::many_single_char_names, unused_variables)]\n fn main() {\n     const MAX_LEN: usize = 42;\n \n@@ -429,7 +429,7 @@ fn main() {\n     }\n }\n \n-#[allow(used_underscore_binding)]\n+#[allow(clippy::used_underscore_binding)]\n fn test_for_kv_map() {\n     let m: HashMap<u64, u64> = HashMap::new();\n \n@@ -456,7 +456,7 @@ fn partition<T: PartialOrd + Send>(v: &mut [T]) -> usize {\n \n const LOOP_OFFSET: usize = 5000;\n \n-#[warn(needless_range_loop)]\n+#[warn(clippy::needless_range_loop)]\n pub fn manual_copy(src: &[i32], dst: &mut [i32], dst2: &mut [i32]) {\n     // plain manual memcpy\n     for i in 0..src.len() {\n@@ -542,14 +542,14 @@ pub fn manual_copy(src: &[i32], dst: &mut [i32], dst2: &mut [i32]) {\n     }\n }\n \n-#[warn(needless_range_loop)]\n+#[warn(clippy::needless_range_loop)]\n pub fn manual_clone(src: &[String], dst: &mut [String]) {\n     for i in 0..src.len() {\n         dst[i] = src[i].clone();\n     }\n }\n \n-#[warn(needless_range_loop)]\n+#[warn(clippy::needless_range_loop)]\n pub fn manual_copy_same_destination(dst: &mut [i32], d: usize, s: usize) {\n     // Same source and destination - don't trigger lint\n     for i in 0..dst.len() {"}, {"sha": "8f31d92ac3cba92ebacf7f11b5601fa1b7a40205", "filename": "tests/ui/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,6 +1,6 @@\n-\n-#![allow(print_literal)]\n-#![warn(useless_format)]\n+#![feature(tool_lints)]\n+#![allow(clippy::print_literal)]\n+#![warn(clippy::useless_format)]\n \n struct Foo(pub String);\n "}, {"sha": "74d42f08f5ad4eae3d6dd5d194e376a837117fc2", "filename": "tests/ui/formatting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,11 +1,11 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(clippy)]\n+#![warn(clippy::all)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n-#![allow(if_same_then_else)]\n-#![allow(deref_addrof)]\n+#![allow(clippy::if_same_then_else)]\n+#![allow(clippy::deref_addrof)]\n \n fn foo() -> bool { true }\n "}, {"sha": "ab5ce5b06d842d1374a701046315ffc094236b00", "filename": "tests/ui/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(clippy)]\n+#![warn(clippy::all)]\n #![allow(dead_code)]\n #![allow(unused_unsafe)]\n "}, {"sha": "1376b9442b68c2c4ff8ff04c71362b821a6aa5aa", "filename": "tests/ui/fxhash.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ffxhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ffxhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffxhash.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,6 @@\n-#![warn(default_hash_types)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::default_hash_types)]\n #![feature(rustc_private)]\n \n extern crate rustc_data_structures;"}, {"sha": "b9ad8d06ad50099e579198c044ffd6136dc51591", "filename": "tests/ui/identity_conversion.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_conversion.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,6 @@\n-#![deny(identity_conversion)]\n+#![feature(tool_lints)]\n+\n+#![deny(clippy::identity_conversion)]\n \n fn test_generic<T: Copy>(val: T) -> T {\n     let _ = T::from(val);\n@@ -28,7 +30,7 @@ fn main() {\n     let _: String = \"foo\".into();\n     let _: String = From::from(\"foo\");\n     let _ = String::from(\"foo\");\n-    #[allow(identity_conversion)]\n+    #[allow(clippy::identity_conversion)]\n     {\n         let _: String = \"foo\".into();\n         let _ = String::from(\"foo\");"}, {"sha": "ae8c66faa416c42bd28af0f7e72291421bc8d71e", "filename": "tests/ui/identity_op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,12 +1,12 @@\n-\n+#![feature(tool_lints)]\n \n \n const ONE : i64 = 1;\n const NEG_ONE : i64 = -1;\n const ZERO : i64 = 0;\n \n-#[allow(eq_op, no_effect, unnecessary_operation, double_parens)]\n-#[warn(identity_op)]\n+#[allow(clippy::eq_op, clippy::no_effect, clippy::unnecessary_operation, clippy::double_parens)]\n+#[warn(clippy::identity_op)]\n fn main() {\n     let x = 0;\n "}, {"sha": "90265853f0022c298375cf95fae943ebfb86827f", "filename": "tests/ui/if_let_redundant_pattern_matching.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fif_let_redundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fif_let_redundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_redundant_pattern_matching.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(clippy)]\n-#![warn(if_let_redundant_pattern_matching)]\n+#![warn(clippy::all)]\n+#![warn(clippy::if_let_redundant_pattern_matching)]\n \n \n fn main() {"}, {"sha": "bb16e16700b66734589d9ca89dcfd376eb5eaada", "filename": "tests/ui/if_not_else.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_not_else.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(clippy)]\n-#![warn(if_not_else)]\n+#![warn(clippy::all)]\n+#![warn(clippy::if_not_else)]\n \n fn bla() -> bool { unimplemented!() }\n "}, {"sha": "7da0e04e59ef65f6c0c536ced68e477f115f3637", "filename": "tests/ui/impl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,5 +1,7 @@\n+#![feature(tool_lints)]\n+\n #![allow(dead_code)]\n-#![warn(multiple_inherent_impl)]\n+#![warn(clippy::multiple_inherent_impl)]\n \n struct MyStruct;\n "}, {"sha": "056d8761109163ecbc92ae65c3404fac6b494980", "filename": "tests/ui/inconsistent_digit_grouping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Finconsistent_digit_grouping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Finconsistent_digit_grouping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#[warn(inconsistent_digit_grouping)]\n+#[warn(clippy::inconsistent_digit_grouping)]\n #[allow(unused_variables)]\n fn main() {\n     let good = (123, 1_234, 1_2345_6789, 123_f32, 1_234.12_f32, 1_234.123_4_f32, 1.123_456_7_f32);"}, {"sha": "b9f1c4a4a5d5f7df2cb20b2d4d471b68c30b070b", "filename": "tests/ui/indexing_slicing.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,9 @@\n+#![feature(tool_lints)]\n+\n #![feature(plugin)]\n-#![warn(indexing_slicing)]\n-#![warn(out_of_bounds_indexing)]\n-#![allow(no_effect, unnecessary_operation)]\n+#![warn(clippy::indexing_slicing)]\n+#![warn(clippy::out_of_bounds_indexing)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n \n fn main() {\n     let x = [1, 2, 3, 4];"}, {"sha": "b3e2835d72f15b460cf1fc4170217950b22af138", "filename": "tests/ui/infallible_destructuring_match.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Finfallible_destructuring_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Finfallible_destructuring_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfallible_destructuring_match.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,5 +1,7 @@\n+#![feature(tool_lints)]\n+\n #![feature(exhaustive_patterns, never_type)]\n-#![allow(let_and_return)]\n+#![allow(clippy::let_and_return)]\n \n enum SingleVariantEnum {\n     Variant(i32),"}, {"sha": "44fa934aa26afd98d322c97b93d2d20961f64496", "filename": "tests/ui/infinite_iter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,11 +1,11 @@\n-\n+#![feature(tool_lints)]\n \n use std::iter::repeat;\n-#[allow(trivially_copy_pass_by_ref)]\n+#[allow(clippy::trivially_copy_pass_by_ref)]\n fn square_is_lower_64(x: &u32) -> bool { x * x < 64 }\n \n-#[allow(maybe_infinite_iter)]\n-#[deny(infinite_iter)]\n+#[allow(clippy::maybe_infinite_iter)]\n+#[deny(clippy::infinite_iter)]\n fn infinite_iters() {\n     repeat(0_u8).collect::<Vec<_>>(); // infinite iter\n     (0..8_u32).take_while(square_is_lower_64).cycle().count(); // infinite iter\n@@ -19,7 +19,7 @@ fn infinite_iters() {\n     (0..).next(); // iterator is not exhausted\n }\n \n-#[deny(maybe_infinite_iter)]\n+#[deny(clippy::maybe_infinite_iter)]\n fn potential_infinite_iters() {\n     (0..).zip((0..).take_while(square_is_lower_64)).count(); // maybe infinite iter\n     repeat(42).take_while(|x| *x == 42).chain(0..42).max(); // maybe infinite iter"}, {"sha": "9449a295e3ac3a52cf9d779b82c0742dc8d35650", "filename": "tests/ui/infinite_loop.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,6 @@\n-#![allow(trivially_copy_pass_by_ref)]\n+#![feature(tool_lints)]\n+\n+#![allow(clippy::trivially_copy_pass_by_ref)]\n \n \n fn fn_val(i: i32) -> i32 { unimplemented!() }\n@@ -7,7 +9,7 @@ fn fn_mutref(i: &mut i32) { unimplemented!() }\n fn fooi() -> i32 { unimplemented!() }\n fn foob() -> bool { unimplemented!() }\n \n-#[allow(many_single_char_names)]\n+#[allow(clippy::many_single_char_names)]\n fn immutable_condition() {\n     // Should warn when all vars mentioned are immutable\n     let y = 0;"}, {"sha": "830da6d1124380cc368b5b6b84d37e720dfc01d2", "filename": "tests/ui/inline_fn_without_body.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finline_fn_without_body.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(inline_fn_without_body)]\n-#![allow(inline_always)]\n+#![warn(clippy::inline_fn_without_body)]\n+#![allow(clippy::inline_always)]\n \n trait Foo {\n     #[inline]"}, {"sha": "1eb0e49290f479abc689d317cb1d24dfae0eb5e3", "filename": "tests/ui/int_plus_one.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fint_plus_one.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[allow(no_effect, unnecessary_operation)]\n-#[warn(int_plus_one)]\n+#[allow(clippy::no_effect, clippy::unnecessary_operation)]\n+#[warn(clippy::int_plus_one)]\n fn main() {\n     let x = 1i32;\n     let y = 0i32;"}, {"sha": "0a700518f8f46c2f9273f2fd39d3db5ea87a1cd8", "filename": "tests/ui/invalid_upcast_comparisons.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Finvalid_upcast_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Finvalid_upcast_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_upcast_comparisons.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(invalid_upcast_comparisons)]\n-#![allow(unused, eq_op, no_effect, unnecessary_operation, cast_lossless)]\n+#![warn(clippy::invalid_upcast_comparisons)]\n+#![allow(unused, clippy::eq_op, clippy::no_effect, clippy::unnecessary_operation, clippy::cast_lossless)]\n \n fn mk_value<T>() -> T { unimplemented!() }\n "}, {"sha": "398e0d1d1f05ab43bbcb95428b89b435cbfd6559", "filename": "tests/ui/issue_2356.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fissue_2356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fissue_2356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue_2356.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,6 @@\n-#![deny(while_let_on_iterator)]\n+#![feature(tool_lints)]\n+\n+#![deny(clippy::while_let_on_iterator)]\n \n use std::iter::Iterator;\n "}, {"sha": "9626a59ed02c077302d13ccf9b9d84d079b56722", "filename": "tests/ui/item_after_statement.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fitem_after_statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fitem_after_statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitem_after_statement.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(items_after_statements)]\n+#![warn(clippy::items_after_statements)]\n \n fn ok() {\n     fn foo() { println!(\"foo\"); }"}, {"sha": "af569ea7566fdf79a2d56083a1e40f50155e044e", "filename": "tests/ui/large_digit_groups.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Flarge_digit_groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Flarge_digit_groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_digit_groups.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#[warn(large_digit_groups)]\n+#[warn(clippy::large_digit_groups)]\n #[allow(unused_variables)]\n fn main() {\n     let good = (0b1011_i64, 0o1_234_u32, 0x1_234_567, 1_2345_6789, 1234_f32, 1_234.12_f32, 1_234.123_f32, 1.123_4_f32);"}, {"sha": "cd1772ad1d1d324d2a4bb31553a7f883c9f82405", "filename": "tests/ui/large_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,9 +1,9 @@\n-\n+#![feature(tool_lints)]\n \n \n #![allow(dead_code)]\n #![allow(unused_variables)]\n-#![warn(large_enum_variant)]\n+#![warn(clippy::large_enum_variant)]\n \n enum LargeEnum {\n     A(i32),"}, {"sha": "b188db5186ee0a7d0cf8b032678f01bcb6730e03", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,6 @@\n-#![warn(len_without_is_empty, len_zero)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::len_without_is_empty, clippy::len_zero)]\n #![allow(dead_code, unused)]\n \n pub struct PubOne;\n@@ -19,7 +21,7 @@ impl PubOne {\n // Identical to PubOne, but with an allow attribute on the impl complaining len\n pub struct PubAllowed;\n \n-#[allow(len_without_is_empty)]\n+#[allow(clippy::len_without_is_empty)]\n impl PubAllowed {\n     pub fn len(self: &Self) -> isize {\n         1"}, {"sha": "102b72f3e253458ba7ef076f467b231f65e0549c", "filename": "tests/ui/let_if_seq.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_if_seq.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![allow(unused_variables, unused_assignments, similar_names, blacklisted_name)]\n-#![warn(useless_let_if_seq)]\n+#![allow(unused_variables, unused_assignments, clippy::similar_names, clippy::blacklisted_name)]\n+#![warn(clippy::useless_let_if_seq)]\n \n fn f() -> bool { true }\n fn g(x: i32) -> i32 { x + 1 }"}, {"sha": "9b584d6e293ce89cf2e6ca077db8da950ecc025c", "filename": "tests/ui/let_return.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Flet_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Flet_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_return.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n-\n+#![feature(tool_lints)]\n \n #![allow(unused)]\n \n-#![warn(let_and_return)]\n+#![warn(clippy::let_and_return)]\n \n fn test() -> i32 {\n     let _y = 0; // no warning\n@@ -37,7 +37,7 @@ fn test_nowarn_3() -> (i32, i32) {\n }\n \n fn test_nowarn_4() -> i32 {\n-    // this should technically warn, but not b/c of let_and_return, but b/c of useless type\n+    // this should technically warn, but not b/c of clippy::let_and_return, but b/c of useless type\n     let x: i32 = 5;\n     x\n }"}, {"sha": "187ff9d1358e97644bca7ac61fcc6b03a9503c9a", "filename": "tests/ui/let_unit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Flet_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Flet_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(let_unit_value)]\n+#![warn(clippy::let_unit_value)]\n #![allow(unused_variables)]\n \n macro_rules! let_and_return {"}, {"sha": "aa5640f4e22812f5a9bb134249a90d14e864308f", "filename": "tests/ui/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(needless_lifetimes, extra_unused_lifetimes)]\n-#![allow(dead_code, needless_pass_by_value, trivially_copy_pass_by_ref)]\n+#![warn(clippy::needless_lifetimes, clippy::extra_unused_lifetimes)]\n+#![allow(dead_code, clippy::needless_pass_by_value, clippy::trivially_copy_pass_by_ref)]\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) { }\n "}, {"sha": "d45da257ad4ee7f53a0885e76cba3cedb8668710", "filename": "tests/ui/literals.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fliterals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fliterals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,6 +1,8 @@\n-#![warn(mixed_case_hex_literals)]\n-#![warn(unseparated_literal_suffix)]\n-#![warn(zero_prefixed_literal)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::mixed_case_hex_literals)]\n+#![warn(clippy::unseparated_literal_suffix)]\n+#![warn(clippy::zero_prefixed_literal)]\n #![allow(dead_code)]\n \n fn main() {"}, {"sha": "90c95be2c1c1cfbb1a4d2d8660a2fd946b8e4f42", "filename": "tests/ui/map_clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,9 +1,9 @@\n+#![feature(tool_lints)]\n \n \n+#![warn(clippy::map_clone)]\n \n-#![warn(map_clone)]\n-\n-#![allow(clone_on_copy, unused)]\n+#![allow(clippy::clone_on_copy, unused)]\n \n use std::ops::Deref;\n "}, {"sha": "92befb25a7e38754f4398431d654ff158db09df9", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,10 +1,10 @@\n-\n+#![feature(tool_lints)]\n #![feature(exclusive_range_pattern)]\n \n \n-#![warn(clippy)]\n-#![allow(unused, if_let_redundant_pattern_matching)]\n-#![warn(single_match_else, match_same_arms)]\n+#![warn(clippy::all)]\n+#![allow(unused, clippy::if_let_redundant_pattern_matching)]\n+#![warn(clippy::single_match_else, clippy::match_same_arms)]\n \n enum ExprNode {\n     ExprAddrOf,"}, {"sha": "96d333a7170da8634f2293d668aa85ddf786c41e", "filename": "tests/ui/mem_forget.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_forget.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,4 @@\n-\n+#![feature(tool_lints)]\n \n \n \n@@ -8,8 +8,8 @@ use std::rc::Rc;\n use std::mem::forget as forgetSomething;\n use std::mem as memstuff;\n \n-#[warn(mem_forget)]\n-#[allow(forget_copy)]\n+#[warn(clippy::mem_forget)]\n+#[allow(clippy::forget_copy)]\n fn main() {\n     let five: i32 = 5;\n     forgetSomething(five);"}, {"sha": "37f4cb2f71e41e8bc3e9c996bb125e06346da57c", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,10 +1,10 @@\n-\n+#![feature(tool_lints)]\n #![feature(const_fn)]\n \n-#![warn(clippy, clippy_pedantic, option_unwrap_used)]\n-#![allow(blacklisted_name, unused, print_stdout, non_ascii_literal, new_without_default,\n-    new_without_default_derive, missing_docs_in_private_items, needless_pass_by_value,\n-    default_trait_access, use_self)]\n+#![warn(clippy::all, clippy::pedantic, clippy::option_unwrap_used)]\n+#![allow(clippy::blacklisted_name, unused, clippy::print_stdout, clippy::non_ascii_literal, clippy::new_without_default,\n+    clippy::new_without_default_derive, clippy::missing_docs_in_private_items, clippy::needless_pass_by_value,\n+    clippy::default_trait_access, clippy::use_self)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;\n@@ -42,7 +42,7 @@ struct Lt<'a> {\n \n impl<'a> Lt<'a> {\n     // The lifetime is different, but that\u2019s irrelevant, see #734\n-    #[allow(needless_lifetimes)]\n+    #[allow(clippy::needless_lifetimes)]\n     pub fn new<'b>(s: &'b str) -> Lt<'b> { unimplemented!() }\n }\n \n@@ -438,7 +438,7 @@ fn iter_skip_next() {\n     let _ = foo.filter().skip(42).next();\n }\n \n-#[allow(similar_names)]\n+#[allow(clippy::similar_names)]\n fn main() {\n     let opt = Some(0);\n     let _ = opt.unwrap();"}, {"sha": "9866933f9feb4d68b92008cff32591c182c61102", "filename": "tests/ui/min_max.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmin_max.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmin_max.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(clippy)]\n+#![warn(clippy::all)]\n \n use std::cmp::{min, max};\n use std::cmp::min as my_min;"}, {"sha": "6968adb312ba48b2d3e2040d2465e743311f22bd", "filename": "tests/ui/missing-doc.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmissing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmissing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-doc.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,3 +1,5 @@\n+#![feature(tool_lints)]\n+\n /* This file incorporates work covered by the following copyright and\n  * permission notice:\n  *   Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n@@ -13,7 +15,7 @@\n \n \n \n-#![warn(missing_docs_in_private_items)]\n+#![warn(clippy::missing_docs_in_private_items)]\n \n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n@@ -36,7 +38,7 @@ pub struct PubFoo {\n     b: isize,\n }\n \n-#[allow(missing_docs_in_private_items)]\n+#[allow(clippy::missing_docs_in_private_items)]\n pub struct PubFoo2 {\n     pub a: isize,\n     pub c: isize,\n@@ -49,7 +51,7 @@ pub mod pub_module_no_dox {}\n pub fn foo() {}\n pub fn foo2() {}\n fn foo3() {}\n-#[allow(missing_docs_in_private_items)] pub fn foo4() {}\n+#[allow(clippy::missing_docs_in_private_items)] pub fn foo4() {}\n \n /// dox\n pub trait A {\n@@ -59,7 +61,7 @@ pub trait A {\n     fn foo_with_impl(&self) {}\n }\n \n-#[allow(missing_docs_in_private_items)]\n+#[allow(clippy::missing_docs_in_private_items)]\n trait B {\n     fn foo(&self);\n     fn foo_with_impl(&self) {}\n@@ -70,7 +72,7 @@ pub trait C {\n     fn foo_with_impl(&self) {}\n }\n \n-#[allow(missing_docs_in_private_items)]\n+#[allow(clippy::missing_docs_in_private_items)]\n pub trait D {\n     fn dummy(&self) { }\n }\n@@ -98,10 +100,10 @@ impl PubFoo {\n     /// dox\n     pub fn foo1() {}\n     fn foo2() {}\n-    #[allow(missing_docs_in_private_items)] pub fn foo3() {}\n+    #[allow(clippy::missing_docs_in_private_items)] pub fn foo3() {}\n }\n \n-#[allow(missing_docs_in_private_items)]\n+#[allow(clippy::missing_docs_in_private_items)]\n trait F {\n     fn a();\n     fn b(&self);\n@@ -146,7 +148,7 @@ pub enum PubBaz2 {\n     },\n }\n \n-#[allow(missing_docs_in_private_items)]\n+#[allow(clippy::missing_docs_in_private_items)]\n pub enum PubBaz3 {\n     PubBaz3A {\n         b: isize\n@@ -160,7 +162,7 @@ pub fn baz() {}\n const FOO: u32 = 0;\n /// dox\n pub const FOO1: u32 = 0;\n-#[allow(missing_docs_in_private_items)]\n+#[allow(clippy::missing_docs_in_private_items)]\n pub const FOO2: u32 = 0;\n #[doc(hidden)]\n pub const FOO3: u32 = 0;\n@@ -170,7 +172,7 @@ pub const FOO4: u32 = 0;\n static BAR: u32 = 0;\n /// dox\n pub static BAR1: u32 = 0;\n-#[allow(missing_docs_in_private_items)]\n+#[allow(clippy::missing_docs_in_private_items)]\n pub static BAR2: u32 = 0;\n #[doc(hidden)]\n pub static BAR3: u32 = 0;"}, {"sha": "7fbb01c6d2b8c3cb8ffed239f78632e8b6130e5b", "filename": "tests/ui/missing_inline.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_inline.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,3 +1,5 @@\n+#![feature(tool_lints)]\n+\n /* This file incorporates work covered by the following copyright and\n  * permission notice:\n  *   Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n@@ -10,7 +12,7 @@\n  *   option. This file may not be copied, modified, or distributed\n  *   except according to those terms.\n  */\n-#![warn(missing_inline_in_public_items)]\n+#![warn(clippy::missing_inline_in_public_items)]\n #![crate_type = \"dylib\"]\n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n@@ -32,7 +34,7 @@ pub fn pub_foo() {} // missing #[inline]\n #[inline] pub fn pub_foo_inline() {} // ok\n #[inline(always)] pub fn pub_foo_inline_always() {} // ok\n \n-#[allow(missing_inline_in_public_items)]\n+#[allow(clippy::missing_inline_in_public_items)]\n pub fn pub_foo_no_inline() {}\n \n trait Bar {"}, {"sha": "b6917020ea2659b80be9f5886794e69d373755f6", "filename": "tests/ui/module_inception.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmodule_inception.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmodule_inception.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodule_inception.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(module_inception)]\n+#![warn(clippy::module_inception)]\n \n mod foo {\n     mod bar {\n@@ -16,7 +16,7 @@ mod foo {\n \n // No warning. See <https://github.com/rust-lang-nursery/rust-clippy/issues/1220>.\n mod bar {\n-    #[allow(module_inception)]\n+    #[allow(clippy::module_inception)]\n     mod bar {\n     }\n }"}, {"sha": "7dcec04baf98e15df79ea13abe059a85cc0f19dc", "filename": "tests/ui/modulo_one.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmodulo_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmodulo_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_one.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(modulo_one)]\n-#![allow(no_effect, unnecessary_operation)]\n+#![warn(clippy::modulo_one)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n \n fn main() {\n     10 % 1;"}, {"sha": "b75fa92f098236fbf13a869cddbfa00d95aac959", "filename": "tests/ui/mut_from_ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmut_from_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmut_from_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n-\n-#![allow(unused, trivially_copy_pass_by_ref)]\n-#![warn(mut_from_ref)]\n+#![allow(unused, clippy::trivially_copy_pass_by_ref)]\n+#![warn(clippy::mut_from_ref)]\n \n struct Foo;\n "}, {"sha": "4656d27648f332c8d4106de6c2bf0ae2e7c656d4", "filename": "tests/ui/mut_mut.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mut.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![allow(unused, no_effect, unnecessary_operation)]\n-#![warn(mut_mut)]\n+#![allow(unused, clippy::no_effect, clippy::unnecessary_operation)]\n+#![warn(clippy::mut_mut)]\n \n \n "}, {"sha": "38b0e25e07cb558daef1f78c9742cff091b1d8fb", "filename": "tests/ui/mut_reference.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_reference.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![allow(unused_variables, trivially_copy_pass_by_ref)]\n+#![allow(unused_variables, clippy::trivially_copy_pass_by_ref)]\n \n fn takes_an_immutable_reference(a: &i32) {}\n fn takes_a_mutable_reference(a: &mut i32) {}\n@@ -16,7 +16,7 @@ impl MyStruct {\n     }\n }\n \n-#[warn(unnecessary_mut_passed)]\n+#[warn(clippy::unnecessary_mut_passed)]\n fn main() {\n     // Functions\n     takes_an_immutable_reference(&mut 42);"}, {"sha": "3eefbb97ab871fdfed41b6d75e59d2b9e1d1869f", "filename": "tests/ui/mutex_atomic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmutex_atomic.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(clippy)]\n-#![warn(mutex_integer)]\n+#![warn(clippy::all)]\n+#![warn(clippy::mutex_integer)]\n \n fn main() {\n     use std::sync::Mutex;"}, {"sha": "4e6f65ed0dddc152eba87090798f129b20425390", "filename": "tests/ui/needless_bool.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n+#![warn(clippy::needless_bool)]\n \n-#![warn(needless_bool)]\n-\n-#[allow(if_same_then_else)]\n+#[allow(clippy::if_same_then_else)]\n fn main() {\n     let x = true;\n     let y = false;\n@@ -20,32 +20,32 @@ fn main() {\n     bool_ret6(x, x);\n }\n \n-#[allow(if_same_then_else, needless_return)]\n+#[allow(clippy::if_same_then_else, clippy::needless_return)]\n fn bool_ret(x: bool) -> bool {\n     if x { return true } else { return true };\n }\n \n-#[allow(if_same_then_else, needless_return)]\n+#[allow(clippy::if_same_then_else, clippy::needless_return)]\n fn bool_ret2(x: bool) -> bool {\n     if x { return false } else { return false };\n }\n \n-#[allow(needless_return)]\n+#[allow(clippy::needless_return)]\n fn bool_ret3(x: bool) -> bool {\n     if x { return true } else { return false };\n }\n \n-#[allow(needless_return)]\n+#[allow(clippy::needless_return)]\n fn bool_ret5(x: bool, y: bool) -> bool {\n     if x && y { return true } else { return false };\n }\n \n-#[allow(needless_return)]\n+#[allow(clippy::needless_return)]\n fn bool_ret4(x: bool) -> bool {\n     if x { return false } else { return true };\n }\n \n-#[allow(needless_return)]\n+#[allow(clippy::needless_return)]\n fn bool_ret6(x: bool, y: bool) -> bool {\n     if x && y { return false } else { return true };\n }"}, {"sha": "61384c43fa916c8ed836c86d624a9edf362c8767", "filename": "tests/ui/needless_borrow.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,11 +1,13 @@\n+#![feature(tool_lints)]\n+\n use std::borrow::Cow;\n \n-#[allow(trivially_copy_pass_by_ref)]\n+#[allow(clippy::trivially_copy_pass_by_ref)]\n fn x(y: &i32) -> i32 {\n     *y\n }\n \n-#[warn(clippy, needless_borrow)]\n+#[warn(clippy::all, clippy::needless_borrow)]\n #[allow(unused_variables)]\n fn main() {\n     let a = 5;\n@@ -42,7 +44,7 @@ trait Trait {}\n impl<'a> Trait for &'a str {}\n \n fn h(_: &Trait) {}\n-#[warn(needless_borrow)]\n+#[warn(clippy::needless_borrow)]\n #[allow(dead_code)]\n fn issue_1432() {\n     let mut v = Vec::<String>::new();"}, {"sha": "000ecd32da4e372f84dc890fc98ff2e7373bd212", "filename": "tests/ui/needless_borrowed_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrowed_ref.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(needless_borrowed_reference)]\n+#[warn(clippy::needless_borrowed_reference)]\n #[allow(unused_variables)]\n fn main() {\n     let mut v = Vec::<String>::new();"}, {"sha": "4fe523e48dea1037a1222b40d91991cbe2c23f2c", "filename": "tests/ui/needless_continue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_continue.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,4 @@\n-\n+#![feature(tool_lints)]\n \n \n macro_rules! zero {\n@@ -9,7 +9,7 @@ macro_rules! nonzero {\n     ($x:expr) => (!zero!($x));\n }\n \n-#[warn(needless_continue)]\n+#[warn(clippy::needless_continue)]\n fn main() {\n     let mut i = 1;\n     while i < 10 {"}, {"sha": "783386fab019c95997a73f9fbc3dc4e44efc11df", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,5 +1,7 @@\n-#![warn(needless_pass_by_value)]\n-#![allow(dead_code, single_match, if_let_redundant_pattern_matching, many_single_char_names, option_option)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::needless_pass_by_value)]\n+#![allow(dead_code, clippy::single_match, clippy::if_let_redundant_pattern_matching, clippy::many_single_char_names, clippy::option_option)]\n \n use std::borrow::Borrow;\n use std::convert::AsRef;"}, {"sha": "6b1305fa2d8f91ad04ac6f1a332881254f988e6f", "filename": "tests/ui/needless_pass_by_value_proc_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneedless_pass_by_value_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneedless_pass_by_value_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value_proc_macro.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n-\n+#![feature(tool_lints)]\n \n #![crate_type = \"proc-macro\"]\n-#![warn(needless_pass_by_value)]\n+#![warn(clippy::needless_pass_by_value)]\n \n extern crate proc_macro;\n "}, {"sha": "a834563eca31bb0c54aece52c5f9d8377503c5ac", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(needless_return)]\n+#![warn(clippy::needless_return)]\n \n fn test_end_of_fn() -> bool {\n     if true {"}, {"sha": "675c60e24774eef68b7ceed05e5857e00aab93d0", "filename": "tests/ui/needless_update.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_update.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(needless_update)]\n-#![allow(no_effect)]\n+#![warn(clippy::needless_update)]\n+#![allow(clippy::no_effect)]\n \n struct S {\n     pub a: i32,"}, {"sha": "3a472bf69957f3e8c59be532f89343c4a2e1dc32", "filename": "tests/ui/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,10 +1,12 @@\n+#![feature(tool_lints)]\n+\n //! This test case utilizes `f64` an easy example for `PartialOrd` only types\n //! but the lint itself actually validates any expression where the left\n //! operand implements `PartialOrd` but not `Ord`.\n \n use std::cmp::Ordering;\n \n-#[warn(neg_cmp_op_on_partial_ord)]\n+#[warn(clippy::neg_cmp_op_on_partial_ord)]\n fn main() {\n \n     let a_value = 1.0;"}, {"sha": "b1a1879a3fc854447f0f95c63e57ef3fb20dacb7", "filename": "tests/ui/neg_multiply.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_multiply.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(neg_multiply)]\n-#![allow(no_effect, unnecessary_operation)]\n+#![warn(clippy::neg_multiply)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n \n use std::ops::Mul;\n "}, {"sha": "bb6d76b06cd20bc55ea3eaa56f187143d27ce6f7", "filename": "tests/ui/never_loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,10 +1,10 @@\n+#![feature(tool_lints)]\n \n-\n-#![allow(single_match, unused_assignments, unused_variables, while_immutable_condition)]\n+#![allow(clippy::single_match, unused_assignments, unused_variables, clippy::while_immutable_condition)]\n \n fn test1() {\n     let mut x = 0;\n-    loop { // never_loop\n+    loop { // clippy::never_loop\n         x += 1;\n         if x == 1 {\n             return"}, {"sha": "bf63e9336e57adebf17d5c75cd9e4080b4738ad1", "filename": "tests/ui/new_without_default.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,10 @@\n+#![feature(tool_lints)]\n+\n #![feature(const_fn)]\n \n \n #![allow(dead_code)]\n-#![warn(new_without_default, new_without_default_derive)]\n+#![warn(clippy::new_without_default, clippy::new_without_default_derive)]\n \n pub struct Foo;\n "}, {"sha": "2913ecdbf598753bcce25280aef7e254cef76834", "filename": "tests/ui/no_effect.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,11 +1,13 @@\n+#![feature(tool_lints)]\n+\n #![feature(box_syntax)]\n \n \n-#![warn(no_effect, unnecessary_operation)]\n+#![warn(clippy::no_effect, clippy::unnecessary_operation)]\n #![allow(dead_code)]\n #![allow(path_statements)]\n-#![allow(deref_addrof)]\n-#![allow(redundant_field_names)]\n+#![allow(clippy::deref_addrof)]\n+#![allow(clippy::redundant_field_names)]\n #![feature(untagged_unions)]\n \n struct Unit;"}, {"sha": "4e086333b0ca5262cec15570c6a404cd05d1ba6e", "filename": "tests/ui/non_copy_const.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_copy_const.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,5 +1,7 @@\n+#![feature(tool_lints)]\n+\n #![feature(const_string_new, const_vec_new)]\n-#![allow(ref_in_deref, dead_code)]\n+#![allow(clippy::ref_in_deref, dead_code)]\n \n use std::sync::atomic::{ATOMIC_USIZE_INIT, AtomicUsize, Ordering};\n use std::cell::Cell;\n@@ -30,7 +32,7 @@ const NO_ANN: &Display = &70;\n static STATIC_TUPLE: (AtomicUsize, String) = (ATOMIC, STRING);\n //^ there should be no lints on this line\n \n-#[allow(declare_interior_mutable_const)]\n+#[allow(clippy::declare_interior_mutable_const)]\n const ONCE_INIT: Once = Once::new();\n \n trait Trait<T>: Copy {"}, {"sha": "7b5db015d771bb0f2f57ff9b4593af863c0d370d", "filename": "tests/ui/non_expressive_names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(clippy,similar_names)]\n-#![allow(unused, println_empty_string)]\n+#![warn(clippy::all,clippy::similar_names)]\n+#![allow(unused, clippy::println_empty_string)]\n \n \n struct Foo {"}, {"sha": "46d85bb9cd0f0dc0c1139272b4544ed72d1fbd31", "filename": "tests/ui/ok_if_let.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_if_let.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(if_let_some_result)]\n+#![warn(clippy::if_let_some_result)]\n \n fn str_to_int(x: &str) -> i32 {\n     if let Some(y) = x.parse().ok() {"}, {"sha": "a85a2c8bb51512f2b40e7ec25a10f9c3dcf6ea06", "filename": "tests/ui/op_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fop_ref.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![allow(unused_variables, blacklisted_name)]\n+#![allow(unused_variables, clippy::blacklisted_name)]\n \n use std::collections::HashSet;\n "}, {"sha": "38b3dd7e49d09536a5ec8637f238b5175522888a", "filename": "tests/ui/open_options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fopen_options.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,9 +1,9 @@\n-\n+#![feature(tool_lints)]\n \n use std::fs::OpenOptions;\n \n #[allow(unused_must_use)]\n-#[warn(nonsensical_open_options)]\n+#[warn(clippy::nonsensical_open_options)]\n fn main() {\n     OpenOptions::new().read(true).truncate(true).open(\"foo.txt\");\n     OpenOptions::new().append(true).truncate(true).open(\"foo.txt\");"}, {"sha": "e86cc99c522f4d2c69e8a75b33c98c322f29680a", "filename": "tests/ui/option_map_unit_fn.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Foption_map_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Foption_map_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,6 @@\n-#![warn(option_map_unit_fn)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::option_map_unit_fn)]\n #![allow(unused)]\n \n fn do_nothing<T>(_: T) {}"}, {"sha": "5c3cc5b08a9fc608d7224979154d8f14b0b50d76", "filename": "tests/ui/overflow_check_conditional.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverflow_check_conditional.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![allow(many_single_char_names)]\n-#![warn(overflow_check_conditional)]\n+#![allow(clippy::many_single_char_names)]\n+#![warn(clippy::overflow_check_conditional)]\n \n fn main() {\n \tlet a: u32 = 1;"}, {"sha": "693dc921be3cdbc68c30553ca2305249fcd5162c", "filename": "tests/ui/panic_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_unimplemented.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(panic_params, unimplemented)]\n+#![warn(clippy::panic_params, clippy::unimplemented)]\n \n fn missing() {\n     if true {"}, {"sha": "70f86afbacb8a007c018728f8125989460793b6b", "filename": "tests/ui/patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpatterns.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n-\n+#![feature(tool_lints)]\n \n #![allow(unused)]\n-#![warn(clippy)]\n+#![warn(clippy::all)]\n \n fn main() {\n     let v = Some(true);"}, {"sha": "95476dd4f516bdea02f07e21452a06816c009a94", "filename": "tests/ui/precedence.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,9 +1,9 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(precedence)]\n-#[allow(identity_op)]\n-#[allow(eq_op)]\n+#[warn(clippy::precedence)]\n+#[allow(clippy::identity_op)]\n+#[allow(clippy::eq_op)]\n \n macro_rules! trip {\n    ($a:expr) => {"}, {"sha": "cee3e7000364ac79e8dd4b4487516011c3a18f0f", "filename": "tests/ui/print.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n-\n-#![allow(print_literal, write_literal)]\n-#![warn(print_stdout, use_debug)]\n+#![allow(clippy::print_literal, clippy::write_literal)]\n+#![warn(clippy::print_stdout, clippy::use_debug)]\n \n use std::fmt::{Debug, Display, Formatter, Result};\n "}, {"sha": "46b91d40f8cf6ecb47d5ea70aa86147d2a7fe700", "filename": "tests/ui/print_literal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fprint_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fprint_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(print_literal)]\n+#![warn(clippy::print_literal)]\n \n fn main() {\n     // these should be fine"}, {"sha": "5efee5abfc89b18ff8baf76ac321569ec3de3998", "filename": "tests/ui/print_with_newline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fprint_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fprint_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n-\n-#![allow(print_literal)]\n-#![warn(print_with_newline)]\n+#![allow(clippy::print_literal)]\n+#![warn(clippy::print_with_newline)]\n \n fn main() {\n     print!(\"Hello\\n\");"}, {"sha": "e76221355aeaebd305ee6b23c25a5e96780ca754", "filename": "tests/ui/ptr_arg.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,5 +1,7 @@\n-#![allow(unused, many_single_char_names)]\n-#![warn(ptr_arg)]\n+#![feature(tool_lints)]\n+\n+#![allow(unused, clippy::many_single_char_names)]\n+#![warn(clippy::ptr_arg)]\n \n use std::borrow::Cow;\n "}, {"sha": "df3ce12689b2ee0549601426018de38aaf341a8e", "filename": "tests/ui/range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,11 +1,11 @@\n-\n+#![feature(tool_lints)]\n \n struct NotARange;\n impl NotARange {\n     fn step_by(&self, _: u32) {}\n }\n \n-#[warn(iterator_step_by_zero, range_zip_with_len)]\n+#[warn(clippy::iterator_step_by_zero, clippy::range_zip_with_len)]\n fn main() {\n     let _ = (0..1).step_by(0);\n     // No warning for non-zero step"}, {"sha": "12a1312de36665d214f24f6f5aeb711709aa5d0d", "filename": "tests/ui/range_plus_minus_one.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Frange_plus_minus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Frange_plus_minus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,10 @@\n+#![feature(tool_lints)]\n+\n fn f() -> usize {\n     42\n }\n \n-#[warn(range_plus_one)]\n+#[warn(clippy::range_plus_one)]\n fn main() {\n     for _ in 0..2 { }\n     for _ in 0..=2 { }"}, {"sha": "b09ed9a35743cff6ab9fc20eb80f39665c6e313f", "filename": "tests/ui/redundant_closure_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(redundant_closure_call)]\n+#![warn(clippy::redundant_closure_call)]\n \n fn main() {\n \tlet a = (|| 42)();"}, {"sha": "b379aa661cb61330a5116edbe74b40694177caf0", "filename": "tests/ui/redundant_field_names.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,6 @@\n-#![warn(redundant_field_names)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::redundant_field_names)]\n #![allow(unused_variables)]\n #![feature(inclusive_range, inclusive_range_fields, inclusive_range_methods)]\n "}, {"sha": "97a0030a99a41bf0a70ed719db92df70465362c3", "filename": "tests/ui/reference.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freference.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,4 @@\n-\n+#![feature(tool_lints)]\n \n \n fn get_number() -> usize {\n@@ -9,9 +9,9 @@ fn get_reference(n : &usize) -> &usize {\n     n\n }\n \n-#[allow(many_single_char_names, double_parens)]\n+#[allow(clippy::many_single_char_names, clippy::double_parens)]\n #[allow(unused_variables)]\n-#[warn(deref_addrof)]\n+#[warn(clippy::deref_addrof)]\n fn main() {\n     let a = 10;\n     let aref = &a;\n@@ -38,7 +38,7 @@ fn main() {\n     let b = **&aref;\n \n     //This produces a suggestion of 'let b = *&a;' which\n-    //will trigger the 'deref_addrof' lint again\n+    //will trigger the 'clippy::deref_addrof' lint again\n     let b = **&&a;\n \n     {\n@@ -48,7 +48,7 @@ fn main() {\n \n     {\n         //This produces a suggestion of 'let y = *&mut x' which\n-        //will trigger the 'deref_addrof' lint again\n+        //will trigger the 'clippy::deref_addrof' lint again\n         let mut x = 10;\n         let y = **&mut &mut x;\n     }"}, {"sha": "e3837e104f4240c566114babc490e57f1c016d82", "filename": "tests/ui/regex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n-\n+#![feature(tool_lints)]\n \n \n #![allow(unused)]\n-#![warn(invalid_regex, trivial_regex, regex_macro)]\n+#![warn(clippy::invalid_regex, clippy::trivial_regex, clippy::regex_macro)]\n \n extern crate regex;\n "}, {"sha": "8420b368d3dc73d2476aacd663b8edbb1b8274ce", "filename": "tests/ui/replace_consts.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,6 +1,8 @@\n+#![feature(tool_lints)]\n+\n #![feature(integer_atomics)]\n-#![allow(blacklisted_name)]\n-#![deny(replace_consts)]\n+#![allow(clippy::blacklisted_name)]\n+#![deny(clippy::replace_consts)]\n \n use std::sync::atomic::*;\n use std::sync::{ONCE_INIT, Once};"}, {"sha": "8cac6a9c827f490151f496fe53830e9b6c593e92", "filename": "tests/ui/result_map_unit_fn.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fresult_map_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fresult_map_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,5 +1,7 @@\n+#![feature(tool_lints)]\n+\n #![feature(never_type)]\n-#![warn(result_map_unit_fn)]\n+#![warn(clippy::result_map_unit_fn)]\n #![allow(unused)]\n \n fn do_nothing<T>(_: T) {}"}, {"sha": "65c2c344da7035d5531ded205b6c5061c9329c1c", "filename": "tests/ui/serde.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fserde.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fserde.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fserde.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(serde_api_misuse)]\n+#![warn(clippy::serde_api_misuse)]\n #![allow(dead_code)]\n \n extern crate serde;"}, {"sha": "c73acf5c5dd83375e8ee10aaeb5114d7c3e9ca6c", "filename": "tests/ui/shadow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(clippy, clippy_pedantic, shadow_same, shadow_reuse, shadow_unrelated)]\n-#![allow(unused_parens, unused_variables, missing_docs_in_private_items)]\n+#![warn(clippy::all, clippy::pedantic, clippy::shadow_same, clippy::shadow_reuse, clippy::shadow_unrelated)]\n+#![allow(unused_parens, unused_variables, clippy::missing_docs_in_private_items)]\n \n fn id<T>(x: T) -> T { x }\n "}, {"sha": "e9cb8e4ad8c10901bf6c7a5fe74cb391af63a128", "filename": "tests/ui/short_circuit_statement.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fshort_circuit_statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fshort_circuit_statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshort_circuit_statement.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(short_circuit_statement)]\n+#![warn(clippy::short_circuit_statement)]\n \n fn main() {\n     f() && g();"}, {"sha": "147f974b999f105634e7c3b0e467312608a2c68d", "filename": "tests/ui/single_char_pattern.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fsingle_char_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fsingle_char_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,3 +1,5 @@\n+#![feature(tool_lints)]\n+\n use std::collections::HashSet;\n \n fn main() {\n@@ -9,7 +11,7 @@ fn main() {\n     let y = \"x\";\n     x.split(y);\n     // Not yet testing for multi-byte characters\n-    // Changing `r.len() == 1` to `r.chars().count() == 1` in `lint_single_char_pattern`\n+    // Changing `r.len() == 1` to `r.chars().count() == 1` in `lint_clippy::single_char_pattern`\n     // should have done this but produced an ICE\n     //\n     // We may not want to suggest changing these anyway"}, {"sha": "c0c82adafb5512e2391a14ab9bdaf6ad779c93e7", "filename": "tests/ui/single_match.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,6 @@\n-#![warn(single_match)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::single_match)]\n \n fn dummy() {\n }"}, {"sha": "adea56cf9a282f109ad57b28dffe480f380721bd", "filename": "tests/ui/starts_ends_with.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fstarts_ends_with.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fstarts_ends_with.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstarts_ends_with.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,10 @@\n+#![feature(tool_lints)]\n+\n #![allow(dead_code)]\n \n fn main() {}\n \n-#[allow(unnecessary_operation)]\n+#[allow(clippy::unnecessary_operation)]\n fn starts_with() {\n     \"\".chars().next() == Some(' ');\n     Some(' ') != \"\".chars().next();\n@@ -30,7 +32,7 @@ fn chars_cmp_with_unwrap() {\n     }\n }\n \n-#[allow(unnecessary_operation)]\n+#[allow(clippy::unnecessary_operation)]\n fn ends_with() {\n     \"\".chars().last() == Some(' ');\n     Some(' ') != \"\".chars().last();"}, {"sha": "86819e3fd5cdaaf74704ecff9b7712ba65a4aca3", "filename": "tests/ui/strings.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrings.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(string_add)]\n-#[allow(string_add_assign)]\n+#[warn(clippy::string_add)]\n+#[allow(clippy::string_add_assign)]\n fn add_only() { // ignores assignment distinction\n     let mut x = \"\".to_owned();\n \n@@ -16,7 +16,7 @@ fn add_only() { // ignores assignment distinction\n     assert_eq!(&x, &z);\n }\n \n-#[warn(string_add_assign)]\n+#[warn(clippy::string_add_assign)]\n fn add_assign_only() {\n     let mut x = \"\".to_owned();\n \n@@ -30,7 +30,7 @@ fn add_assign_only() {\n     assert_eq!(&x, &z);\n }\n \n-#[warn(string_add, string_add_assign)]\n+#[warn(clippy::string_add, clippy::string_add_assign)]\n fn both() {\n     let mut x = \"\".to_owned();\n \n@@ -45,7 +45,7 @@ fn both() {\n }\n \n #[allow(dead_code, unused_variables)]\n-#[warn(string_lit_as_bytes)]\n+#[warn(clippy::string_lit_as_bytes)]\n fn str_lit_as_bytes() {\n     let bs = \"hello there\".as_bytes();\n "}, {"sha": "de67bb1aff5e36e7647062686657a35dceb1a324", "filename": "tests/ui/stutter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fstutter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fstutter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstutter.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(stutter)]\n+#![warn(clippy::stutter)]\n #![allow(dead_code)]\n \n mod foo {"}, {"sha": "04e235c690bcd18bc32d0dbf14a3cd3a9d8a0dd1", "filename": "tests/ui/suspicious_arithmetic_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fsuspicious_arithmetic_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fsuspicious_arithmetic_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_arithmetic_impl.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(suspicious_arithmetic_impl)]\n+#![warn(clippy::suspicious_arithmetic_impl)]\n use std::ops::{Add, AddAssign, Mul, Sub, Div};\n \n #[derive(Copy, Clone)]"}, {"sha": "377319e8faa27fb40a72ff1017d8397b6d297141", "filename": "tests/ui/swap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(clippy)]\n-#![allow(blacklisted_name, unused_assignments)]\n+#![warn(clippy::all)]\n+#![allow(clippy::blacklisted_name, unused_assignments)]\n \n struct Foo(u32);\n "}, {"sha": "1d0cffcfc0a7bc95d48753e2a497939cdb563c0f", "filename": "tests/ui/temporary_assignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(temporary_assignment)]\n+#![warn(clippy::temporary_assignment)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "86eb7fa5565a304e2128db81c5c0011fa07df9cb", "filename": "tests/ui/toplevel_ref_arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ftoplevel_ref_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ftoplevel_ref_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(clippy)]\n+#![warn(clippy::all)]\n #![allow(unused)]\n \n fn the_answer(ref mut x: u8) {"}, {"sha": "34d50da11ca8dbc85431ba044c8930705b0a2aad", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,4 @@\n-\n+#![feature(tool_lints)]\n \n \n #![allow(dead_code)]\n@@ -16,8 +16,8 @@ fn my_vec() -> MyVec<i32> {\n     vec![]\n }\n \n-#[allow(needless_lifetimes, transmute_ptr_to_ptr)]\n-#[warn(useless_transmute)]\n+#[allow(clippy::needless_lifetimes, clippy::transmute_ptr_to_ptr)]\n+#[warn(clippy::useless_transmute)]\n unsafe fn _generic<'a, T, U: 'a>(t: &'a T) {\n     let _: &'a T = core::intrinsics::transmute(t);\n \n@@ -30,7 +30,7 @@ unsafe fn _generic<'a, T, U: 'a>(t: &'a T) {\n     let _: *const U = core::intrinsics::transmute(t);\n }\n \n-#[warn(transmute_ptr_to_ref)]\n+#[warn(clippy::transmute_ptr_to_ref)]\n unsafe fn _ptr_to_ref<T, U>(p: *const T, m: *mut T, o: *const U, om: *mut U) {\n     let _: &T = std::mem::transmute(p);\n     let _: &T = &*p;\n@@ -54,7 +54,7 @@ unsafe fn _ptr_to_ref<T, U>(p: *const T, m: *mut T, o: *const U, om: *mut U) {\n     let _: &T = &*(om as *const T);\n }\n \n-#[warn(transmute_ptr_to_ref)]\n+#[warn(clippy::transmute_ptr_to_ref)]\n fn issue1231() {\n     struct Foo<'a, T: 'a> {\n         bar: &'a T,\n@@ -70,7 +70,7 @@ fn issue1231() {\n     unsafe { std::mem::transmute::<_, Bar>(raw) };\n }\n \n-#[warn(useless_transmute)]\n+#[warn(clippy::useless_transmute)]\n fn useless() {\n     unsafe {\n         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n@@ -101,7 +101,7 @@ fn useless() {\n \n struct Usize(usize);\n \n-#[warn(crosspointer_transmute)]\n+#[warn(clippy::crosspointer_transmute)]\n fn crosspointer() {\n     let mut int: Usize = Usize(0);\n     let int_const_ptr: *const Usize = &int as *const Usize;\n@@ -118,18 +118,18 @@ fn crosspointer() {\n     }\n }\n \n-#[warn(transmute_int_to_char)]\n+#[warn(clippy::transmute_int_to_char)]\n fn int_to_char() {\n     let _: char = unsafe { std::mem::transmute(0_u32) };\n     let _: char = unsafe { std::mem::transmute(0_i32) };\n }\n \n-#[warn(transmute_int_to_bool)]\n+#[warn(clippy::transmute_int_to_bool)]\n fn int_to_bool() {\n     let _: bool = unsafe { std::mem::transmute(0_u8) };\n }\n \n-#[warn(transmute_int_to_float)]\n+#[warn(clippy::transmute_int_to_float)]\n fn int_to_float() {\n     let _: f32 = unsafe { std::mem::transmute(0_u32) };\n     let _: f32 = unsafe { std::mem::transmute(0_i32) };\n@@ -144,13 +144,13 @@ fn bytes_to_str(b: &[u8], mb: &mut [u8]) {\n // of transmute\n \n // Make sure we can do static lifetime transmutes\n-#[warn(transmute_ptr_to_ptr)]\n+#[warn(clippy::transmute_ptr_to_ptr)]\n unsafe fn transmute_lifetime_to_static<'a, T>(t: &'a T) -> &'static T {\n     std::mem::transmute::<&'a T, &'static T>(t)\n }\n \n // Make sure we can do non-static lifetime transmutes\n-#[warn(transmute_ptr_to_ptr)]\n+#[warn(clippy::transmute_ptr_to_ptr)]\n unsafe fn transmute_lifetime<'a, 'b, T>(t: &'a T, u: &'b T) -> &'b T {\n     std::mem::transmute::<&'a T, &'b T>(t)\n }\n@@ -163,7 +163,7 @@ struct GenericParam<T> {\n     t: T,\n }\n \n-#[warn(transmute_ptr_to_ptr)]\n+#[warn(clippy::transmute_ptr_to_ptr)]\n fn transmute_ptr_to_ptr() {\n     let ptr = &1u32 as *const u32;\n     let mut_ptr = &mut 1u32 as *mut u32;"}, {"sha": "539b403cff96ecff0165d2ced5595d0a900c4519", "filename": "tests/ui/transmute_64bit.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ftransmute_64bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ftransmute_64bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_64bit.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,9 +1,11 @@\n+#![feature(tool_lints)]\n+\n //ignore-x86\n //no-ignore-x86_64\n \n \n \n-#[warn(wrong_transmute)]\n+#[warn(clippy::wrong_transmute)]\n fn main() {\n     unsafe {\n         let _: *const usize = std::mem::transmute(6.0f64);"}, {"sha": "e3dbe510a47e255c5e39ea8337af1bd5c43a11b6", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,6 @@\n-#![allow(many_single_char_names, blacklisted_name, redundant_field_names)]\n+#![feature(tool_lints)]\n+\n+#![allow(clippy::many_single_char_names, clippy::blacklisted_name, clippy::redundant_field_names)]\n \n #[derive(Copy, Clone)]\n struct Foo(u32);\n@@ -19,7 +21,7 @@ fn good_return_implicit_lt_ref(foo: &Foo) -> &u32 {\n     &foo.0\n }\n \n-#[allow(needless_lifetimes)]\n+#[allow(clippy::needless_lifetimes)]\n fn good_return_explicit_lt_ref<'a>(foo: &'a Foo) -> &'a u32 {\n     &foo.0\n }\n@@ -30,7 +32,7 @@ fn good_return_implicit_lt_struct(foo: &Foo) -> FooRef {\n     }\n }\n \n-#[allow(needless_lifetimes)]\n+#[allow(clippy::needless_lifetimes)]\n fn good_return_explicit_lt_struct<'a>(foo: &'a Foo) -> FooRef<'a> {\n     FooRef {\n         foo,"}, {"sha": "b997d6d3f1449030113bd1110087a02d602cc3c1", "filename": "tests/ui/unicode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,19 +1,19 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(zero_width_space)]\n+#[warn(clippy::zero_width_space)]\n fn zero() {\n     print!(\"Here >\u200b< is a ZWS, and \u200banother\");\n     print!(\"This\\u{200B}is\\u{200B}fine\");\n }\n \n-#[warn(unicode_not_nfc)]\n+#[warn(clippy::unicode_not_nfc)]\n fn canon() {\n     print!(\"\u0300a\u0300h?\");\n     print!(\"a\\u{0300}h?\"); // also okay\n }\n \n-#[warn(non_ascii_literal)]\n+#[warn(clippy::non_ascii_literal)]\n fn uni() {\n     print!(\"\u00dcben!\");\n     print!(\"\\u{DC}ben!\"); // this is okay"}, {"sha": "2f743f227b893e29b3b38ddbf0d208e296c08203", "filename": "tests/ui/unit_arg.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,5 +1,7 @@\n-#![warn(unit_arg)]\n-#![allow(no_effect)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::unit_arg)]\n+#![allow(clippy::no_effect)]\n \n use std::fmt::Debug;\n "}, {"sha": "bd79d0f818976410c53013419698a941b86a4885", "filename": "tests/ui/unit_cmp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_cmp.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(unit_cmp)]\n-#![allow(no_effect, unnecessary_operation)]\n+#![warn(clippy::unit_cmp)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n \n #[derive(PartialEq)]\n pub struct ContainsUnit(()); // should be fine"}, {"sha": "7a2fc4ac1f687d6090e1a7f073826eeba5b67d9f", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,6 @@\n-#![warn(clone_on_ref_ptr)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::clone_on_ref_ptr)]\n #![allow(unused)]\n \n use std::collections::HashSet;\n@@ -40,7 +42,7 @@ fn clone_on_ref_ptr() {\n     sync::Weak::clone(&arc_weak);\n \n     let x = Arc::new(SomeImpl);\n-    let _: Arc<SomeTrait> = x.clone(); \n+    let _: Arc<SomeTrait> = x.clone();\n }\n \n fn clone_on_copy_generic<T: Copy>(t: T) {"}, {"sha": "afc920832cee66c8daa2d9b5f201b4417cdcc146", "filename": "tests/ui/unnecessary_ref.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funnecessary_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funnecessary_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_ref.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,11 +1,13 @@\n+#![feature(tool_lints)]\n+\n #![feature(tool_attributes)]\n #![feature(stmt_expr_attributes)]\n \n struct Outer {\n     inner: u32,\n }\n \n-#[deny(ref_in_deref)]\n+#[deny(clippy::ref_in_deref)]\n fn main() {\n     let outer = Outer { inner: 0 };\n     let inner = (&outer).inner;"}, {"sha": "88b91235df62087c0a45162dd149eb55be281056", "filename": "tests/ui/unneeded_field_pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funneeded_field_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funneeded_field_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funneeded_field_pattern.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(unneeded_field_pattern)]\n+#![warn(clippy::unneeded_field_pattern)]\n #[allow(dead_code, unused)]\n \n struct Foo {"}, {"sha": "df3539e38e88c165113f90deef43cd3008a76da0", "filename": "tests/ui/unreadable_literal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funreadable_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funreadable_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#[warn(unreadable_literal)]\n+#[warn(clippy::unreadable_literal)]\n #[allow(unused_variables)]\n fn main() {\n     let good = (0b1011_i64, 0o1_234_u32, 0x1_234_567, 65536, 1_2345_6789, 1234_f32, 1_234.12_f32, 1_234.123_f32, 1.123_4_f32);"}, {"sha": "41b98975d5320260819eb816d00ffc20d9ea9792", "filename": "tests/ui/unsafe_removed_from_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_removed_from_name.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n-\n+#![feature(tool_lints)]\n \n #![allow(unused_imports)]\n #![allow(dead_code)]\n-#![warn(unsafe_removed_from_name)]\n+#![warn(clippy::unsafe_removed_from_name)]\n \n use std::cell::{UnsafeCell as TotallySafeCell};\n "}, {"sha": "53bcbce9dbf0cb2000511709589935f9289a40b8", "filename": "tests/ui/unused_io_amount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n-\n+#![feature(tool_lints)]\n \n \n #![allow(dead_code)]\n-#![warn(unused_io_amount)]\n+#![warn(clippy::unused_io_amount)]\n \n use std::io;\n "}, {"sha": "b76fcad16999cd90c4d1b43f9cde6cad4312f4fd", "filename": "tests/ui/unused_labels.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funused_labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funused_labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_labels.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![allow(dead_code, items_after_statements, never_loop)]\n-#![warn(unused_label)]\n+#![allow(dead_code, clippy::items_after_statements, clippy::never_loop)]\n+#![warn(clippy::unused_label)]\n \n fn unused_label() {\n     'label: for i in 1..2 {"}, {"sha": "e5c5e8935040d1312117ca99589d6bcd1997a552", "filename": "tests/ui/unused_lt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funused_lt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funused_lt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_lt.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n-\n-#![allow(unused, dead_code, needless_lifetimes, needless_pass_by_value, trivially_copy_pass_by_ref)]\n-#![warn(extra_unused_lifetimes)]\n+#![allow(unused, dead_code, clippy::needless_lifetimes, clippy::needless_pass_by_value, clippy::trivially_copy_pass_by_ref)]\n+#![warn(clippy::extra_unused_lifetimes)]\n \n fn empty() {\n "}, {"sha": "682c42dc935193059650c2a28b22c818d535ac6b", "filename": "tests/ui/unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Funwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,4 +1,5 @@\n-#![warn(clippy)]\n+#![feature(tool_lints)]\n+#![warn(clippy::all)]\n \n fn main() {\n     let s = Some(String::from(\"test string\")).unwrap_or(\"Fail\".to_string()).len();"}, {"sha": "8d18d848ae0eeb439af0efe136acbcaf29faaafe", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,6 +1,8 @@\n-#![warn(use_self)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::use_self)]\n #![allow(dead_code)]\n-#![allow(should_implement_trait)]\n+#![allow(clippy::should_implement_trait)]\n \n fn main() {}\n \n@@ -64,7 +66,7 @@ mod lifetimes {\n     }\n }\n \n-#[allow(boxed_local)]\n+#[allow(clippy::boxed_local)]\n mod traits {\n \n     use std::ops::Mul;"}, {"sha": "c1e1c9af5dbdf052b081a1377a345dc60931dfe9", "filename": "tests/ui/used_underscore_binding.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fused_underscore_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fused_underscore_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fused_underscore_binding.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,9 +1,9 @@\n+#![feature(tool_lints)]\n \n+#![warn(clippy::all)]\n \n-#![warn(clippy)]\n-\n-#![allow(blacklisted_name)]\n-#![warn(used_underscore_binding)]\n+#![allow(clippy::blacklisted_name)]\n+#![warn(clippy::used_underscore_binding)]\n \n macro_rules! test_macro {\n     () => {{"}, {"sha": "52994566e09139c72b2c3715cb480f32fbf56e71", "filename": "tests/ui/useless_asref.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fuseless_asref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fuseless_asref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_asref.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,10 +1,12 @@\n-#![deny(useless_asref)]\n-#![allow(trivially_copy_pass_by_ref)]\n+#![feature(tool_lints)]\n+\n+#![deny(clippy::useless_asref)]\n+#![allow(clippy::trivially_copy_pass_by_ref)]\n use std::fmt::Debug;\n \n struct FakeAsRef;\n \n-#[allow(should_implement_trait)]\n+#[allow(clippy::should_implement_trait)]\n impl FakeAsRef {\n     fn as_ref(&self) -> &Self { self }\n }"}, {"sha": "300fcfa2b70fc3bd754936dd2b210bbcaf19d637", "filename": "tests/ui/useless_attribute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fuseless_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fuseless_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(useless_attribute)]\n+#![warn(clippy::useless_attribute)]\n \n #[allow(dead_code, unused_extern_crates)]\n #[cfg_attr(feature = \"cargo-clippy\", allow(dead_code, unused_extern_crates))]"}, {"sha": "78a49f2580a49dff92406a2ec6aaab580eb5ec65", "filename": "tests/ui/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,13 +1,13 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(useless_vec)]\n+#![warn(clippy::useless_vec)]\n \n #[derive(Debug)]\n struct NonCopy;\n \n fn on_slice(_: &[u8]) {}\n-#[allow(ptr_arg)]\n+#[allow(clippy::ptr_arg)]\n fn on_vec(_: &Vec<u8>) {}\n \n struct Line {"}, {"sha": "0b8691d57b43eee162540165be2269441f994133", "filename": "tests/ui/while_loop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_loop.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(while_let_loop, empty_loop, while_let_on_iterator)]\n-#![allow(dead_code, never_loop, unused, cyclomatic_complexity)]\n+#![warn(clippy::while_let_loop, clippy::empty_loop, clippy::while_let_on_iterator)]\n+#![allow(dead_code, clippy::never_loop, unused, clippy::cyclomatic_complexity)]\n \n fn main() {\n     let y = Some(true);\n@@ -184,7 +184,7 @@ fn refutable() {\n         }\n     }\n \n-    // should not trigger while_let_loop lint because break passes an expression\n+    // should not trigger clippy::while_let_loop lint because break passes an expression\n     let a = Some(10);\n     let b = loop {\n         if let Some(c) = a {"}, {"sha": "5ef4c15f40944c56c965581156e1bacb25913c03", "filename": "tests/ui/write_literal.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fwrite_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fwrite_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,5 +1,7 @@\n+#![feature(tool_lints)]\n+\n #![allow(unused_must_use)]\n-#![warn(write_literal)]\n+#![warn(clippy::write_literal)]\n \n use std::io::Write;\n "}, {"sha": "e060459a411217878ba683ee43030d66413efff8", "filename": "tests/ui/write_with_newline.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fwrite_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fwrite_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_with_newline.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,5 +1,7 @@\n-#![allow(write_literal)]\n-#![warn(write_with_newline)]\n+#![feature(tool_lints)]\n+\n+#![allow(clippy::write_literal)]\n+#![warn(clippy::write_with_newline)]\n \n use std::io::Write;\n "}, {"sha": "81dfdcdc0d0a6ecce0f2c6c6b3735136a0bb86f2", "filename": "tests/ui/writeln_empty_string.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fwriteln_empty_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fwriteln_empty_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwriteln_empty_string.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,5 +1,7 @@\n+#![feature(tool_lints)]\n+\n #![allow(unused_must_use)]\n-#![warn(writeln_empty_string)]\n+#![warn(clippy::writeln_empty_string)]\n use std::io::Write;\n \n fn main() {"}, {"sha": "1e718c1c648f2c38c7a6332b91d25ea46b3132bd", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,9 +1,9 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(wrong_self_convention)]\n-#![warn(wrong_pub_self_convention)]\n-#![allow(dead_code, trivially_copy_pass_by_ref)]\n+#![warn(clippy::wrong_self_convention)]\n+#![warn(clippy::wrong_pub_self_convention)]\n+#![allow(dead_code, clippy::trivially_copy_pass_by_ref)]\n \n fn main() {}\n \n@@ -26,7 +26,7 @@ impl Foo {\n     pub fn to_i64(self) {}\n     pub fn from_i64(self) {}\n     // check whether the lint can be allowed at the function level\n-    #[allow(wrong_self_convention)]\n+    #[allow(clippy::wrong_self_convention)]\n     pub fn from_cake(self) {}\n \n     fn as_x<F: AsRef<Self>>(_: F) { }"}, {"sha": "7927e8b8ac7c11793349275928f1db0542d1ead9", "filename": "tests/ui/zero_div_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6f6051a8b62f966d28d63fe3c3637a29c410a4/tests%2Fui%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_div_zero.rs?ref=1b6f6051a8b62f966d28d63fe3c3637a29c410a4", "patch": "@@ -1,8 +1,8 @@\n-\n+#![feature(tool_lints)]\n \n \n #[allow(unused_variables)]\n-#[warn(zero_divided_by_zero)]\n+#[warn(clippy::zero_divided_by_zero)]\n fn main() {\n     let nan = 0.0 / 0.0;\n     let f64_nan = 0.0 / 0.0f64;"}]}