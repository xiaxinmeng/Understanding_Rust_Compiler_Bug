{"sha": "0919c945929f1cccc84fac44b982132ba2262a17", "node_id": "C_kwDOAAsO6NoAKDA5MTljOTQ1OTI5ZjFjY2NjODRmYWM0NGI5ODIxMzJiYTIyNjJhMTc", "commit": {"author": {"name": "Florian Bartels", "email": "Florian.Bartels@elektrobit.com", "date": "2022-09-26T10:38:14Z"}, "committer": {"name": "Florian Bartels", "email": "Florian.Bartels@elektrobit.com", "date": "2022-09-26T10:38:14Z"}, "message": "Get rid of long exclude-list for Windows-only tests", "tree": {"sha": "229384112c17a929e377f75237b28ab86edc6bb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/229384112c17a929e377f75237b28ab86edc6bb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0919c945929f1cccc84fac44b982132ba2262a17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0919c945929f1cccc84fac44b982132ba2262a17", "html_url": "https://github.com/rust-lang/rust/commit/0919c945929f1cccc84fac44b982132ba2262a17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0919c945929f1cccc84fac44b982132ba2262a17/comments", "author": {"login": "flba-eb", "id": 108917393, "node_id": "U_kgDOBn3ykQ", "avatar_url": "https://avatars.githubusercontent.com/u/108917393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flba-eb", "html_url": "https://github.com/flba-eb", "followers_url": "https://api.github.com/users/flba-eb/followers", "following_url": "https://api.github.com/users/flba-eb/following{/other_user}", "gists_url": "https://api.github.com/users/flba-eb/gists{/gist_id}", "starred_url": "https://api.github.com/users/flba-eb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flba-eb/subscriptions", "organizations_url": "https://api.github.com/users/flba-eb/orgs", "repos_url": "https://api.github.com/users/flba-eb/repos", "events_url": "https://api.github.com/users/flba-eb/events{/privacy}", "received_events_url": "https://api.github.com/users/flba-eb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flba-eb", "id": 108917393, "node_id": "U_kgDOBn3ykQ", "avatar_url": "https://avatars.githubusercontent.com/u/108917393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flba-eb", "html_url": "https://github.com/flba-eb", "followers_url": "https://api.github.com/users/flba-eb/followers", "following_url": "https://api.github.com/users/flba-eb/following{/other_user}", "gists_url": "https://api.github.com/users/flba-eb/gists{/gist_id}", "starred_url": "https://api.github.com/users/flba-eb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flba-eb/subscriptions", "organizations_url": "https://api.github.com/users/flba-eb/orgs", "repos_url": "https://api.github.com/users/flba-eb/repos", "events_url": "https://api.github.com/users/flba-eb/events{/privacy}", "received_events_url": "https://api.github.com/users/flba-eb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72f4923979979abb5d6b975353e9b3053d257e60", "url": "https://api.github.com/repos/rust-lang/rust/commits/72f4923979979abb5d6b975353e9b3053d257e60", "html_url": "https://github.com/rust-lang/rust/commit/72f4923979979abb5d6b975353e9b3053d257e60"}], "stats": {"total": 38, "additions": 8, "deletions": 30}, "files": [{"sha": "d1cf1319fb090a18512b9b1f4d33ccdb3fd51f1d", "filename": "src/test/ui/abi/x86stdcall.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0919c945929f1cccc84fac44b982132ba2262a17/src%2Ftest%2Fui%2Fabi%2Fx86stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0919c945929f1cccc84fac44b982132ba2262a17/src%2Ftest%2Fui%2Fabi%2Fx86stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fx86stdcall.rs?ref=0919c945929f1cccc84fac44b982132ba2262a17", "patch": "@@ -1,17 +1,15 @@\n // run-pass\n-// ignore-wasm32-bare no libc to test ffi with\n-// ignore-sgx no libc\n+// only-windows\n // GetLastError doesn't seem to work with stack switching\n \n #[cfg(windows)]\n mod kernel32 {\n-  extern \"system\" {\n-    pub fn SetLastError(err: usize);\n-    pub fn GetLastError() -> usize;\n-  }\n+    extern \"system\" {\n+        pub fn SetLastError(err: usize);\n+        pub fn GetLastError() -> usize;\n+    }\n }\n \n-\n #[cfg(windows)]\n pub fn main() {\n     unsafe {\n@@ -22,17 +20,3 @@ pub fn main() {\n         assert_eq!(expected, actual);\n     }\n }\n-\n-#[cfg(any(target_os = \"android\",\n-          target_os = \"dragonfly\",\n-          target_os = \"emscripten\",\n-          target_os = \"freebsd\",\n-          target_os = \"fuchsia\",\n-          target_os = \"illumos\",\n-          target_os = \"linux\",\n-          target_os = \"macos\",\n-          target_os = \"netbsd\",\n-          target_os = \"openbsd\",\n-          target_os = \"solaris\",\n-          target_os = \"vxworks\"))]\n-pub fn main() { }"}, {"sha": "4d508ecb2422e991dc5b0570da760dcc34de787b", "filename": "src/test/ui/abi/x86stdcall2.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0919c945929f1cccc84fac44b982132ba2262a17/src%2Ftest%2Fui%2Fabi%2Fx86stdcall2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0919c945929f1cccc84fac44b982132ba2262a17/src%2Ftest%2Fui%2Fabi%2Fx86stdcall2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fx86stdcall2.rs?ref=0919c945929f1cccc84fac44b982132ba2262a17", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// only-windows\n \n #![allow(non_camel_case_types)]\n pub type HANDLE = usize;\n@@ -7,27 +8,20 @@ pub type SIZE_T = u32;\n pub type LPVOID = usize;\n pub type BOOL = u8;\n \n-#[cfg(windows)]\n mod kernel32 {\n-    use super::{HANDLE, DWORD, SIZE_T, LPVOID, BOOL};\n+    use super::{BOOL, DWORD, HANDLE, LPVOID, SIZE_T};\n \n     extern \"system\" {\n         pub fn GetProcessHeap() -> HANDLE;\n-        pub fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T)\n-                      -> LPVOID;\n+        pub fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T) -> LPVOID;\n         pub fn HeapFree(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID) -> BOOL;\n     }\n }\n \n-\n-#[cfg(windows)]\n pub fn main() {\n     let heap = unsafe { kernel32::GetProcessHeap() };\n     let mem = unsafe { kernel32::HeapAlloc(heap, 0, 100) };\n     assert!(mem != 0);\n     let res = unsafe { kernel32::HeapFree(heap, 0, mem) };\n     assert!(res != 0);\n }\n-\n-#[cfg(not(windows))]\n-pub fn main() { }"}]}