{"sha": "754d17121d04d02bee634558129110b68fa95b00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NGQxNzEyMWQwNGQwMmJlZTYzNDU1ODEyOTExMGI2OGZhOTViMDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-14T00:59:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-14T00:59:01Z"}, "message": "Auto merge of #85195 - Mark-Simulacrum:variant-by-idx, r=petrochenkov\n\nStore VariantIdx to distinguish enum variants\n\nThis saves ~24% of the instructions on the match-stress-enum benchmark, but I'm not 100% sure that this is OK - if we ever compare two constructors across enums (e.g., a Result and an Option), then this is obviously insufficient; I can experiment with continuing to store the DefId for comparison purposes in that case.", "tree": {"sha": "abc4e08170a57c707d9b8a5ed659811bbfdc0219", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abc4e08170a57c707d9b8a5ed659811bbfdc0219"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/754d17121d04d02bee634558129110b68fa95b00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/754d17121d04d02bee634558129110b68fa95b00", "html_url": "https://github.com/rust-lang/rust/commit/754d17121d04d02bee634558129110b68fa95b00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/754d17121d04d02bee634558129110b68fa95b00/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17f30e5451f581d753899d2f628e5be354df33cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/17f30e5451f581d753899d2f628e5be354df33cd", "html_url": "https://github.com/rust-lang/rust/commit/17f30e5451f581d753899d2f628e5be354df33cd"}, {"sha": "e400595190a221f67e19c0eea8163ef8b10e6458", "url": "https://api.github.com/repos/rust-lang/rust/commits/e400595190a221f67e19c0eea8163ef8b10e6458", "html_url": "https://github.com/rust-lang/rust/commit/e400595190a221f67e19c0eea8163ef8b10e6458"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "db0f487645fa209d4967a9ede52fb49032eda8b6", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/754d17121d04d02bee634558129110b68fa95b00/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754d17121d04d02bee634558129110b68fa95b00/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=754d17121d04d02bee634558129110b68fa95b00", "patch": "@@ -52,7 +52,6 @@ use super::{FieldPat, Pat, PatKind, PatRange};\n use rustc_data_structures::captures::Captures;\n use rustc_index::vec::Idx;\n \n-use rustc_hir::def_id::DefId;\n use rustc_hir::{HirId, RangeEnd};\n use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::mir::Field;\n@@ -590,7 +589,7 @@ pub(super) enum Constructor<'tcx> {\n     /// and fixed-length arrays.\n     Single,\n     /// Enum variants.\n-    Variant(DefId),\n+    Variant(VariantIdx),\n     /// Ranges of integer literal values (`2`, `2..=5` or `2..5`).\n     IntRange(IntRange),\n     /// Ranges of floating-point literal values (`2.0..=5.2`).\n@@ -634,7 +633,7 @@ impl<'tcx> Constructor<'tcx> {\n \n     fn variant_index_for_adt(&self, adt: &'tcx ty::AdtDef) -> VariantIdx {\n         match *self {\n-            Variant(id) => adt.variant_index_with_id(id),\n+            Variant(idx) => idx,\n             Single => {\n                 assert!(!adt.is_enum());\n                 VariantIdx::new(0)\n@@ -649,9 +648,7 @@ impl<'tcx> Constructor<'tcx> {\n             PatKind::AscribeUserType { .. } => bug!(), // Handled by `expand_pattern`\n             PatKind::Binding { .. } | PatKind::Wild => Wildcard,\n             PatKind::Leaf { .. } | PatKind::Deref { .. } => Single,\n-            &PatKind::Variant { adt_def, variant_index, .. } => {\n-                Variant(adt_def.variants[variant_index].def_id)\n-            }\n+            &PatKind::Variant { variant_index, .. } => Variant(variant_index),\n             PatKind::Constant { value } => {\n                 if let Some(int_range) = IntRange::from_const(cx.tcx, cx.param_env, value) {\n                     IntRange(int_range)\n@@ -928,15 +925,15 @@ impl<'tcx> SplitWildcard<'tcx> {\n                     // If `exhaustive_patterns` is enabled, we exclude variants known to be\n                     // uninhabited.\n                     def.variants\n-                        .iter()\n-                        .filter(|v| {\n+                        .iter_enumerated()\n+                        .filter(|(_, v)| {\n                             !v.uninhabited_from(cx.tcx, substs, def.adt_kind(), cx.param_env)\n                                 .contains(cx.tcx, cx.module)\n                         })\n-                        .map(|v| Variant(v.def_id))\n+                        .map(|(idx, _)| Variant(idx))\n                         .collect()\n                 } else {\n-                    def.variants.iter().map(|v| Variant(v.def_id)).collect()\n+                    def.variants.indices().map(|idx| Variant(idx)).collect()\n                 }\n             }\n             ty::Char => {"}]}