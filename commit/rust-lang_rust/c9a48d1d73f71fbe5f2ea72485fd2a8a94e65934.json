{"sha": "c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YTQ4ZDFkNzNmNzFmYmU1ZjJlYTcyNDg1ZmQyYThhOTRlNjU5MzQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-08-31T11:16:50Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-08-31T11:16:50Z"}, "message": "Fix strings indent", "tree": {"sha": "8e4df7d5826072d9720292d8f96281b1f044c9ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e4df7d5826072d9720292d8f96281b1f044c9ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "html_url": "https://github.com/rust-lang/rust/commit/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c44bcc4ffeb0ee8059c2c167388c69dedf1ea44", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c44bcc4ffeb0ee8059c2c167388c69dedf1ea44", "html_url": "https://github.com/rust-lang/rust/commit/6c44bcc4ffeb0ee8059c2c167388c69dedf1ea44"}], "stats": {"total": 280, "additions": 127, "deletions": 153}, "files": [{"sha": "484fbd0316dc47d6fe6979fd62bf844335366348", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "patch": "@@ -75,8 +75,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     }\n                 });\n                 debug!(\n-                    \"get_blanket_impls: found applicable impl: {}\\\n-                        for trait_ref={:?}, ty={:?}\",\n+                    \"get_blanket_impls: found applicable impl: {} for trait_ref={:?}, ty={:?}\",\n                     may_apply, trait_ref, ty\n                 );\n                 if !may_apply {"}, {"sha": "794a7bcaf1cb79e6bff4b6bf19b81341715a3582", "filename": "src/librustdoc/clean/cfg/tests.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs?ref=c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "patch": "@@ -391,26 +391,25 @@ fn test_render_long_html() {\n             (word_cfg(\"unix\") & word_cfg(\"windows\") & word_cfg(\"debug_assertions\"))\n                 .render_long_html(),\n             \"This is supported on <strong>Unix and Windows and debug-assertions enabled\\\n-                </strong> only.\"\n+             </strong> only.\"\n         );\n         assert_eq!(\n             (word_cfg(\"unix\") | word_cfg(\"windows\") | word_cfg(\"debug_assertions\"))\n                 .render_long_html(),\n             \"This is supported on <strong>Unix or Windows or debug-assertions enabled\\\n-                </strong> only.\"\n+             </strong> only.\"\n         );\n         assert_eq!(\n             (!(word_cfg(\"unix\") | word_cfg(\"windows\") | word_cfg(\"debug_assertions\")))\n                 .render_long_html(),\n             \"This is supported on <strong>neither Unix nor Windows nor debug-assertions \\\n-                enabled</strong>.\"\n+             enabled</strong>.\"\n         );\n         assert_eq!(\n             ((word_cfg(\"unix\") & name_value_cfg(\"target_arch\", \"x86_64\"))\n                 | (word_cfg(\"windows\") & name_value_cfg(\"target_pointer_width\", \"64\")))\n             .render_long_html(),\n-            \"This is supported on <strong>Unix and x86-64, or Windows and 64-bit</strong> \\\n-                only.\"\n+            \"This is supported on <strong>Unix and x86-64, or Windows and 64-bit</strong> only.\"\n         );\n         assert_eq!(\n             (!(word_cfg(\"unix\") & word_cfg(\"windows\"))).render_long_html(),\n@@ -420,7 +419,7 @@ fn test_render_long_html() {\n             ((word_cfg(\"debug_assertions\") | word_cfg(\"windows\")) & word_cfg(\"unix\"))\n                 .render_long_html(),\n             \"This is supported on <strong>(debug-assertions enabled or Windows) and Unix\\\n-            </strong> only.\"\n+             </strong> only.\"\n         );\n         assert_eq!(\n             name_value_cfg(\"target_feature\", \"sse2\").render_long_html(),\n@@ -430,7 +429,7 @@ fn test_render_long_html() {\n             (name_value_cfg(\"target_arch\", \"x86_64\") & name_value_cfg(\"target_feature\", \"sse2\"))\n                 .render_long_html(),\n             \"This is supported on <strong>x86-64 and target feature \\\n-            <code>sse2</code></strong> only.\"\n+             <code>sse2</code></strong> only.\"\n         );\n     })\n }"}, {"sha": "8255bdab4f5097588d2b03c96562b70625469dd3", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "patch": "@@ -422,14 +422,13 @@ pub fn name_from_pat(p: &hir::Pat<'_>) -> String {\n         PatKind::Ref(ref p, _) => name_from_pat(&**p),\n         PatKind::Lit(..) => {\n             warn!(\n-                \"tried to get argument name from PatKind::Lit, \\\n-                  which is silly in function arguments\"\n+                \"tried to get argument name from PatKind::Lit, which is silly in function arguments\"\n             );\n             \"()\".to_string()\n         }\n         PatKind::Range(..) => panic!(\n             \"tried to get argument name from PatKind::Range, \\\n-                              which is not allowed in function arguments\"\n+             which is not allowed in function arguments\"\n         ),\n         PatKind::Slice(ref begin, ref mid, ref end) => {\n             let begin = begin.iter().map(|p| name_from_pat(&**p));"}, {"sha": "a5fc07578169e07684cc775d9551cd1d29340e00", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "patch": "@@ -416,14 +416,12 @@ impl Options {\n                     return Err(1);\n                 } else if !ret.is_empty() {\n                     diag.struct_warn(&format!(\n-                        \"theme file \\\"{}\\\" is missing CSS rules from the \\\n-                                               default theme\",\n+                        \"theme file \\\"{}\\\" is missing CSS rules from the default theme\",\n                         theme_s\n                     ))\n                     .warn(\"the theme may appear incorrect when loaded\")\n                     .help(&format!(\n-                        \"to see what rules are missing, call `rustdoc \\\n-                                        --check-theme \\\"{}\\\"`\",\n+                        \"to see what rules are missing, call `rustdoc  --check-theme \\\"{}\\\"`\",\n                         theme_s\n                     ))\n                     .emit();"}, {"sha": "074a43f2a709985161925e41226f5bf814f02962", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "patch": "@@ -561,8 +561,7 @@ fn run_global_ctxt(\n     if let Some(ref m) = krate.module {\n         if let None | Some(\"\") = m.doc_value() {\n             let help = \"The following guide may be of use:\\n\\\n-                    https://doc.rust-lang.org/nightly/rustdoc/how-to-write-documentation\\\n-                    .html\";\n+                https://doc.rust-lang.org/nightly/rustdoc/how-to-write-documentation.html\";\n             tcx.struct_lint_node(\n                 rustc_lint::builtin::MISSING_CRATE_LEVEL_DOCS,\n                 ctxt.as_local_hir_id(m.def_id).unwrap(),\n@@ -581,7 +580,7 @@ fn run_global_ctxt(\n             .struct_warn(&format!(\"the `#![doc({})]` attribute is considered deprecated\", name));\n         msg.warn(\n             \"see issue #44136 <https://github.com/rust-lang/rust/issues/44136> \\\n-                for more information\",\n+             for more information\",\n         );\n \n         if name == \"no_default_passes\" {\n@@ -614,7 +613,7 @@ fn run_global_ctxt(\n                     report_deprecated_attr(\"plugins = \\\"...\\\"\", diag);\n                     eprintln!(\n                         \"WARNING: `#![doc(plugins = \\\"...\\\")]` \\\n-                            no longer functions; see CVE-2018-1000622\"\n+                         no longer functions; see CVE-2018-1000622\"\n                     );\n                     continue;\n                 }"}, {"sha": "2da9c68b1967c6714b37c6c2b4d40aed06d7f3ea", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "patch": "@@ -833,7 +833,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter<'_>, use_absolute: bool) ->\n                             write!(\n                                 f,\n                                 \"<a class=\\\"type\\\" href=\\\"{url}#{shortty}.{name}\\\" \\\n-                                   title=\\\"type {path}::{name}\\\">{name}</a>\",\n+                                    title=\\\"type {path}::{name}\\\">{name}</a>\",\n                                 url = url,\n                                 shortty = ItemType::AssocType,\n                                 name = name,"}, {"sha": "4769edc50ff074f3535413a7a729b08d0d6e89ee", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "patch": "@@ -27,7 +27,7 @@ pub fn render_with_highlighting(\n         write!(\n             out,\n             \"<div class='information'><div class='tooltip {}'>\u24d8<span \\\n-                     class='tooltiptext'>{}</span></div></div>\",\n+                  class='tooltiptext'>{}</span></div></div>\",\n             class, tooltip\n         )\n         .unwrap();"}, {"sha": "287c85b8c2253e5ba7b5f85e62e65a31202508ee", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "patch": "@@ -210,8 +210,8 @@ pub fn render<T: Print, S: Print>(\n             .collect::<String>(),\n         filter_crates = if layout.generate_search_filter {\n             \"<select id=\\\"crate-search\\\">\\\n-            <option value=\\\"All crates\\\">All crates</option>\\\n-        </select>\"\n+                 <option value=\\\"All crates\\\">All crates</option>\\\n+             </select>\"\n         } else {\n             \"\"\n         },"}, {"sha": "d54b8ea7478990273978c942f7bd1ca0d7e0d20d", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "patch": "@@ -519,8 +519,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for Footnotes<'a, I> {\n                 Some(Event::FootnoteReference(ref reference)) => {\n                     let entry = self.get_entry(&reference);\n                     let reference = format!(\n-                        \"<sup id=\\\"fnref{0}\\\"><a href=\\\"#fn{0}\\\">{0}\\\n-                                             </a></sup>\",\n+                        \"<sup id=\\\"fnref{0}\\\"><a href=\\\"#fn{0}\\\">{0}</a></sup>\",\n                         (*entry).1\n                     );\n                     return Some(Event::Html(reference.into()));"}, {"sha": "ad154e3d3db8c2987c41965c982dd228262db4b0", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "patch": "@@ -140,25 +140,26 @@ fn test_header() {\n \n     t(\n         \"# Foo bar\",\n-        \"<h1 id=\\\"foo-bar\\\" class=\\\"section-header\\\">\\\n-      <a href=\\\"#foo-bar\\\">Foo bar</a></h1>\",\n+        \"<h1 id=\\\"foo-bar\\\" class=\\\"section-header\\\"><a href=\\\"#foo-bar\\\">Foo bar</a></h1>\",\n     );\n     t(\n         \"## Foo-bar_baz qux\",\n-        \"<h2 id=\\\"foo-bar_baz-qux\\\" class=\\\"section-\\\n-      header\\\"><a href=\\\"#foo-bar_baz-qux\\\">Foo-bar_baz qux</a></h2>\",\n+        \"<h2 id=\\\"foo-bar_baz-qux\\\" class=\\\"section-header\\\">\n+         <a href=\\\"#foo-bar_baz-qux\\\">Foo-bar_baz qux</a></h2>\",\n     );\n     t(\n         \"### **Foo** *bar* baz!?!& -_qux_-%\",\n         \"<h3 id=\\\"foo-bar-baz--qux-\\\" class=\\\"section-header\\\">\\\n-      <a href=\\\"#foo-bar-baz--qux-\\\"><strong>Foo</strong> \\\n-      <em>bar</em> baz!?!&amp; -<em>qux</em>-%</a></h3>\",\n+            <a href=\\\"#foo-bar-baz--qux-\\\"><strong>Foo</strong> \\\n+            <em>bar</em> baz!?!&amp; -<em>qux</em>-%</a>\\\n+         </h3>\",\n     );\n     t(\n         \"#### **Foo?** & \\\\*bar?!*  _`baz`_ \u2764 #qux\",\n         \"<h4 id=\\\"foo--bar--baz--qux\\\" class=\\\"section-header\\\">\\\n-      <a href=\\\"#foo--bar--baz--qux\\\"><strong>Foo?</strong> &amp; *bar?!*  \\\n-      <em><code>baz</code></em> \u2764 #qux</a></h4>\",\n+             <a href=\\\"#foo--bar--baz--qux\\\"><strong>Foo?</strong> &amp; *bar?!*  \\\n+             <em><code>baz</code></em> \u2764 #qux</a>\\\n+         </h4>\",\n     );\n }\n \n@@ -174,38 +175,32 @@ fn test_header_ids_multiple_blocks() {\n     t(\n         &mut map,\n         \"# Example\",\n-        \"<h1 id=\\\"example\\\" class=\\\"section-header\\\">\\\n-        <a href=\\\"#example\\\">Example</a></h1>\",\n+        \"<h1 id=\\\"example\\\" class=\\\"section-header\\\"><a href=\\\"#example\\\">Example</a></h1>\",\n     );\n     t(\n         &mut map,\n         \"# Panics\",\n-        \"<h1 id=\\\"panics\\\" class=\\\"section-header\\\">\\\n-        <a href=\\\"#panics\\\">Panics</a></h1>\",\n+        \"<h1 id=\\\"panics\\\" class=\\\"section-header\\\"><a href=\\\"#panics\\\">Panics</a></h1>\",\n     );\n     t(\n         &mut map,\n         \"# Example\",\n-        \"<h1 id=\\\"example-1\\\" class=\\\"section-header\\\">\\\n-        <a href=\\\"#example-1\\\">Example</a></h1>\",\n+        \"<h1 id=\\\"example-1\\\" class=\\\"section-header\\\"><a href=\\\"#example-1\\\">Example</a></h1>\",\n     );\n     t(\n         &mut map,\n         \"# Main\",\n-        \"<h1 id=\\\"main-1\\\" class=\\\"section-header\\\">\\\n-        <a href=\\\"#main-1\\\">Main</a></h1>\",\n+        \"<h1 id=\\\"main-1\\\" class=\\\"section-header\\\"><a href=\\\"#main-1\\\">Main</a></h1>\",\n     );\n     t(\n         &mut map,\n         \"# Example\",\n-        \"<h1 id=\\\"example-2\\\" class=\\\"section-header\\\">\\\n-        <a href=\\\"#example-2\\\">Example</a></h1>\",\n+        \"<h1 id=\\\"example-2\\\" class=\\\"section-header\\\"><a href=\\\"#example-2\\\">Example</a></h1>\",\n     );\n     t(\n         &mut map,\n         \"# Panics\",\n-        \"<h1 id=\\\"panics-1\\\" class=\\\"section-header\\\">\\\n-        <a href=\\\"#panics-1\\\">Panics</a></h1>\",\n+        \"<h1 id=\\\"panics-1\\\" class=\\\"section-header\\\"><a href=\\\"#panics-1\\\">Panics</a></h1>\",\n     );\n }\n "}, {"sha": "470e9d5ae768d42c0d5b84c75f31d424834df08b", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 78, "deletions": 91, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "patch": "@@ -1061,8 +1061,8 @@ themePicker.onblur = handleThemeButtonsBlur;\n \n             let content = format!(\n                 \"<h1 class='fqn'>\\\n-     <span class='in-band'>List of all crates</span>\\\n-</h1><ul class='mod'>{}</ul>\",\n+                     <span class='in-band'>List of all crates</span>\\\n+                </h1><ul class='mod'>{}</ul>\",\n                 krates\n                     .iter()\n                     .map(|s| {\n@@ -1311,15 +1311,16 @@ impl AllTypes {\n         write!(\n             f,\n             \"<h1 class='fqn'>\\\n-        <span class='out-of-band'>\\\n-            <span id='render-detail'>\\\n-                <a id=\\\"toggle-all-docs\\\" href=\\\"javascript:void(0)\\\" title=\\\"collapse all docs\\\">\\\n-                    [<span class='inner'>&#x2212;</span>]\\\n-                </a>\\\n-            </span>\n-        </span>\n-        <span class='in-band'>List of all items</span>\\\n-    </h1>\"\n+                 <span class='out-of-band'>\\\n+                     <span id='render-detail'>\\\n+                         <a id=\\\"toggle-all-docs\\\" href=\\\"javascript:void(0)\\\" \\\n+                            title=\\\"collapse all docs\\\">\\\n+                             [<span class='inner'>&#x2212;</span>]\\\n+                         </a>\\\n+                     </span>\n+                 </span>\n+                 <span class='in-band'>List of all items</span>\\\n+             </h1>\"\n         );\n         print_entries(f, &self.structs, \"Structs\", \"structs\");\n         print_entries(f, &self.enums, \"Enums\", \"enums\");\n@@ -1349,20 +1350,20 @@ impl Setting {\n         match *self {\n             Setting::Section { ref description, ref sub_settings } => format!(\n                 \"<div class='setting-line'>\\\n-                        <div class='title'>{}</div>\\\n-                        <div class='sub-settings'>{}</div>\n-                    </div>\",\n+                     <div class='title'>{}</div>\\\n+                     <div class='sub-settings'>{}</div>\n+                 </div>\",\n                 description,\n                 sub_settings.iter().map(|s| s.display()).collect::<String>()\n             ),\n             Setting::Entry { ref js_data_name, ref description, ref default_value } => format!(\n                 \"<div class='setting-line'>\\\n-                        <label class='toggle'>\\\n-                        <input type='checkbox' id='{}' {}>\\\n-                        <span class='slider'></span>\\\n-                        </label>\\\n-                        <div>{}</div>\\\n-                    </div>\",\n+                     <label class='toggle'>\\\n+                     <input type='checkbox' id='{}' {}>\\\n+                     <span class='slider'></span>\\\n+                     </label>\\\n+                     <div>{}</div>\\\n+                 </div>\",\n                 js_data_name,\n                 if *default_value { \" checked\" } else { \"\" },\n                 description,\n@@ -1876,30 +1877,29 @@ fn document_non_exhaustive(w: &mut Buffer, item: &clean::Item) {\n             write!(\n                 w,\n                 \"Non-exhaustive structs could have additional fields added in future. \\\n-                       Therefore, non-exhaustive structs cannot be constructed in external crates \\\n-                       using the traditional <code>Struct {{ .. }}</code> syntax; cannot be \\\n-                       matched against without a wildcard <code>..</code>; and \\\n-                       struct update syntax will not work.\"\n+                 Therefore, non-exhaustive structs cannot be constructed in external crates \\\n+                 using the traditional <code>Struct {{ .. }}</code> syntax; cannot be \\\n+                 matched against without a wildcard <code>..</code>; and \\\n+                 struct update syntax will not work.\"\n             );\n         } else if item.is_enum() {\n             write!(\n                 w,\n                 \"Non-exhaustive enums could have additional variants added in future. \\\n-                       Therefore, when matching against variants of non-exhaustive enums, an \\\n-                       extra wildcard arm must be added to account for any future variants.\"\n+                 Therefore, when matching against variants of non-exhaustive enums, an \\\n+                 extra wildcard arm must be added to account for any future variants.\"\n             );\n         } else if item.is_variant() {\n             write!(\n                 w,\n                 \"Non-exhaustive enum variants could have additional fields added in future. \\\n-                       Therefore, non-exhaustive enum variants cannot be constructed in external \\\n-                       crates and cannot be matched against.\"\n+                 Therefore, non-exhaustive enum variants cannot be constructed in external \\\n+                 crates and cannot be matched against.\"\n             );\n         } else {\n             write!(\n                 w,\n-                \"This type will require a wildcard arm in any match statements or \\\n-                       constructors.\"\n+                \"This type will require a wildcard arm in any match statements or constructors.\"\n             );\n         }\n \n@@ -2096,12 +2096,11 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n                 let doc_value = myitem.doc_value().unwrap_or(\"\");\n                 write!(\n                     w,\n-                    \"\\\n-                       <tr class='{stab}{add}module-item'>\\\n-                           <td><a class=\\\"{class}\\\" href=\\\"{href}\\\" \\\n-                                  title='{title}'>{name}</a>{unsafety_flag}</td>\\\n-                           <td class='docblock-short'>{stab_tags}{docs}</td>\\\n-                       </tr>\",\n+                    \"<tr class='{stab}{add}module-item'>\\\n+                         <td><a class=\\\"{class}\\\" href=\\\"{href}\\\" \\\n+                             title='{title}'>{name}</a>{unsafety_flag}</td>\\\n+                         <td class='docblock-short'>{stab_tags}{docs}</td>\\\n+                     </tr>\",\n                     name = *myitem.name.as_ref().unwrap(),\n                     stab_tags = stability_tags(myitem),\n                     docs = MarkdownSummaryLine(doc_value, &myitem.links()).into_string(),\n@@ -2250,8 +2249,7 @@ fn item_constant(w: &mut Buffer, cx: &Context, it: &clean::Item, c: &clean::Cons\n \n     write!(\n         w,\n-        \"{vis}const \\\n-               {name}: {typ}\",\n+        \"{vis}const {name}: {typ}\",\n         vis = it.visibility.print_with_space(),\n         name = it.name.as_ref().unwrap(),\n         typ = c.type_.print(),\n@@ -2285,8 +2283,7 @@ fn item_static(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Static\n     render_attributes(w, it, false);\n     write!(\n         w,\n-        \"{vis}static {mutability}\\\n-               {name}: {typ}</pre>\",\n+        \"{vis}static {mutability} {name}: {typ}</pre>\",\n         vis = it.visibility.print_with_space(),\n         mutability = s.mutability.print_with_space(),\n         name = it.name.as_ref().unwrap(),\n@@ -2312,7 +2309,7 @@ fn item_function(w: &mut Buffer, cx: &Context, it: &clean::Item, f: &clean::Func\n     write!(\n         w,\n         \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n-           {name}{generics}{decl}{spotlight}{where_clause}</pre>\",\n+         {name}{generics}{decl}{spotlight}{where_clause}</pre>\",\n         vis = it.visibility.print_with_space(),\n         constness = f.header.constness.print_with_space(),\n         asyncness = f.header.asyncness.print_with_space(),\n@@ -2503,10 +2500,9 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n     fn write_small_section_header(w: &mut Buffer, id: &str, title: &str, extra_content: &str) {\n         write!(\n             w,\n-            \"\n-            <h2 id='{0}' class='small-section-header'>\\\n-              {1}<a href='#{0}' class='anchor'></a>\\\n-            </h2>{2}\",\n+            \"<h2 id='{0}' class='small-section-header'>\\\n+                {1}<a href='#{0}' class='anchor'></a>\\\n+             </h2>{2}\",\n             id, title, extra_content\n         )\n     }\n@@ -2835,7 +2831,7 @@ fn render_assoc_item(\n         write!(\n             w,\n             \"{}{}{}{}{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n-                   {generics}{decl}{spotlight}{where_clause}\",\n+             {generics}{decl}{spotlight}{where_clause}\",\n             if parent == ItemType::Trait { \"    \" } else { \"\" },\n             meth.visibility.print_with_space(),\n             header.constness.print_with_space(),\n@@ -2910,9 +2906,9 @@ fn item_struct(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Struct\n                 write!(\n                     w,\n                     \"<span id=\\\"{id}\\\" class=\\\"{item_type} small-section-header\\\">\\\n-                           <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                           <code>{name}: {ty}</code>\\\n-                           </span>\",\n+                         <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n+                         <code>{name}: {ty}</code>\\\n+                     </span>\",\n                     item_type = ItemType::StructField,\n                     id = id,\n                     name = field.name.as_ref().unwrap(),\n@@ -2954,9 +2950,9 @@ fn item_union(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Union,\n             write!(\n                 w,\n                 \"<span id=\\\"{id}\\\" class=\\\"{shortty} small-section-header\\\">\\\n-                           <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                           <code>{name}: {ty}</code>\\\n-                       </span>\",\n+                     <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n+                     <code>{name}: {ty}</code>\\\n+                 </span>\",\n                 id = id,\n                 name = name,\n                 shortty = ItemType::StructField,\n@@ -3081,9 +3077,9 @@ fn item_enum(w: &mut Buffer, cx: &Context, it: &clean::Item, e: &clean::Enum, ca\n                         write!(\n                             w,\n                             \"<span id=\\\"{id}\\\" class=\\\"variant small-section-header\\\">\\\n-                                   <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                                   <code>{f}:&nbsp;{t}\\\n-                                   </code></span>\",\n+                                 <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n+                                 <code>{f}:&nbsp;{t}</code>\\\n+                             </span>\",\n                             id = id,\n                             f = field.name.as_ref().unwrap(),\n                             t = ty.print()\n@@ -3296,23 +3292,19 @@ fn render_assoc_items(\n             AssocItemRender::All => {\n                 write!(\n                     w,\n-                    \"\\\n-                    <h2 id='implementations' class='small-section-header'>\\\n-                      Implementations<a href='#implementations' class='anchor'></a>\\\n-                    </h2>\\\n-                \"\n+                    \"<h2 id='implementations' class='small-section-header'>\\\n+                         Implementations<a href='#implementations' class='anchor'></a>\\\n+                    </h2>\"\n                 );\n                 RenderMode::Normal\n             }\n             AssocItemRender::DerefFor { trait_, type_, deref_mut_ } => {\n                 write!(\n                     w,\n-                    \"\\\n-                    <h2 id='deref-methods' class='small-section-header'>\\\n-                      Methods from {}&lt;Target = {}&gt;\\\n-                      <a href='#deref-methods' class='anchor'></a>\\\n-                    </h2>\\\n-                \",\n+                    \"<h2 id='deref-methods' class='small-section-header'>\\\n+                         Methods from {}&lt;Target = {}&gt;\\\n+                         <a href='#deref-methods' class='anchor'></a>\\\n+                     </h2>\",\n                     trait_.print(),\n                     type_.print()\n                 );\n@@ -3359,25 +3351,22 @@ fn render_assoc_items(\n         if !impls.is_empty() {\n             write!(\n                 w,\n-                \"\\\n-                <h2 id='trait-implementations' class='small-section-header'>\\\n-                  Trait Implementations<a href='#trait-implementations' class='anchor'></a>\\\n-                </h2>\\\n-                <div id='trait-implementations-list'>{}</div>\",\n+                \"<h2 id='trait-implementations' class='small-section-header'>\\\n+                     Trait Implementations<a href='#trait-implementations' class='anchor'></a>\\\n+                 </h2>\\\n+                 <div id='trait-implementations-list'>{}</div>\",\n                 impls\n             );\n         }\n \n         if !synthetic.is_empty() {\n             write!(\n                 w,\n-                \"\\\n-                <h2 id='synthetic-implementations' class='small-section-header'>\\\n-                  Auto Trait Implementations\\\n-                  <a href='#synthetic-implementations' class='anchor'></a>\\\n-                </h2>\\\n-                <div id='synthetic-implementations-list'>\\\n-            \"\n+                \"<h2 id='synthetic-implementations' class='small-section-header'>\\\n+                     Auto Trait Implementations\\\n+                     <a href='#synthetic-implementations' class='anchor'></a>\\\n+                 </h2>\\\n+                 <div id='synthetic-implementations-list'>\"\n             );\n             render_impls(cx, w, &synthetic, containing_item, cache);\n             write!(w, \"</div>\");\n@@ -3386,13 +3375,11 @@ fn render_assoc_items(\n         if !blanket_impl.is_empty() {\n             write!(\n                 w,\n-                \"\\\n-                <h2 id='blanket-implementations' class='small-section-header'>\\\n-                  Blanket Implementations\\\n-                  <a href='#blanket-implementations' class='anchor'></a>\\\n-                </h2>\\\n-                <div id='blanket-implementations-list'>\\\n-            \"\n+                \"<h2 id='blanket-implementations' class='small-section-header'>\\\n+                     Blanket Implementations\\\n+                     <a href='#blanket-implementations' class='anchor'></a>\\\n+                 </h2>\\\n+                 <div id='blanket-implementations-list'>\"\n             );\n             render_impls(cx, w, &blanket_impl, containing_item, cache);\n             write!(w, \"</div>\");\n@@ -3473,7 +3460,7 @@ fn spotlight_decl(decl: &clean::FnDecl) -> String {\n                     if out.is_empty() {\n                         out.push_str(&format!(\n                             \"<h3 class=\\\"notable\\\">Notable traits for {}</h3>\\\n-                                      <code class=\\\"content\\\">\",\n+                             <code class=\\\"content\\\">\",\n                             impl_.for_.print()\n                         ));\n                         trait_.push_str(&impl_.for_.print().to_string());\n@@ -3909,8 +3896,8 @@ fn print_sidebar(cx: &Context, it: &clean::Item, buffer: &mut Buffer, cache: &Ca\n             write!(\n                 buffer,\n                 \"<div class='block version'>\\\n-                    <p>Version {}</p>\\\n-                    </div>\",\n+                     <p>Version {}</p>\\\n+                 </div>\",\n                 Escape(version)\n             );\n         }\n@@ -4185,7 +4172,7 @@ fn sidebar_struct(buf: &mut Buffer, it: &clean::Item, s: &clean::Struct) {\n         if let doctree::Plain = s.struct_type {\n             sidebar.push_str(&format!(\n                 \"<a class=\\\"sidebar-title\\\" href=\\\"#fields\\\">Fields</a>\\\n-                                       <div class=\\\"sidebar-links\\\">{}</div>\",\n+                 <div class=\\\"sidebar-links\\\">{}</div>\",\n                 fields\n             ));\n         }\n@@ -4312,8 +4299,8 @@ fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n             res.sort();\n             sidebar.push_str(&format!(\n                 \"<a class=\\\"sidebar-title\\\" href=\\\"#foreign-impls\\\">\\\n-                    Implementations on Foreign Types</a><div \\\n-                    class=\\\"sidebar-links\\\">{}</div>\",\n+                    Implementations on Foreign Types</a>\\\n+                 <div class=\\\"sidebar-links\\\">{}</div>\",\n                 res.into_iter()\n                     .map(|(name, id)| format!(\"<a href=\\\"#{}\\\">{}</a>\", id, Escape(&name)))\n                     .collect::<Vec<_>>()"}, {"sha": "02a7362bb3b2ea2657a557cd918ec43ad530ef8a", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "patch": "@@ -52,7 +52,7 @@ impl<'a> DocFolder for SourceCollector<'a> {\n                 Err(e) => {\n                     println!(\n                         \"warning: source code was requested to be rendered, \\\n-                              but processing `{}` had an error: {}\",\n+                         but processing `{}` had an error: {}\",\n                         item.source.filename, e\n                     );\n                     println!(\"         skipping rendering of source code\");"}, {"sha": "73a783d54060c4722f8668a398f1f8d9cd0d2026", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "patch": "@@ -153,7 +153,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"\",\n                 \"passes\",\n                 \"list of passes to also run, you might want to pass it multiple times; a value of \\\n-                        `list` will print available passes\",\n+                 `list` will print available passes\",\n                 \"PASSES\",\n             )\n         }),\n@@ -183,7 +183,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"\",\n                 \"html-in-header\",\n                 \"files to include inline in the <head> section of a rendered Markdown file \\\n-                        or generated documentation\",\n+                 or generated documentation\",\n                 \"FILES\",\n             )\n         }),\n@@ -192,7 +192,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"\",\n                 \"html-before-content\",\n                 \"files to include inline between <body> and the content of a rendered \\\n-                        Markdown file or generated documentation\",\n+                 Markdown file or generated documentation\",\n                 \"FILES\",\n             )\n         }),\n@@ -201,7 +201,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"\",\n                 \"html-after-content\",\n                 \"files to include inline between the content and </body> of a rendered \\\n-                        Markdown file or generated documentation\",\n+                 Markdown file or generated documentation\",\n                 \"FILES\",\n             )\n         }),\n@@ -210,7 +210,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"\",\n                 \"markdown-before-content\",\n                 \"files to include inline between <body> and the content of a rendered \\\n-                        Markdown file or generated documentation\",\n+                 Markdown file or generated documentation\",\n                 \"FILES\",\n             )\n         }),\n@@ -219,7 +219,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"\",\n                 \"markdown-after-content\",\n                 \"files to include inline between the content and </body> of a rendered \\\n-                        Markdown file or generated documentation\",\n+                 Markdown file or generated documentation\",\n                 \"FILES\",\n             )\n         }),\n@@ -234,8 +234,8 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"e\",\n                 \"extend-css\",\n                 \"To add some CSS rules with a given file to generate doc with your \\\n-                        own theme. However, your theme might break if the rustdoc's generated HTML \\\n-                        changes, so be careful!\",\n+                 own theme. However, your theme might break if the rustdoc's generated HTML \\\n+                 changes, so be careful!\",\n                 \"PATH\",\n             )\n         }),\n@@ -248,7 +248,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"\",\n                 \"playground-url\",\n                 \"URL to send code snippets to, may be reset by --markdown-playground-url \\\n-                        or `#![doc(html_playground_url=...)]`\",\n+                 or `#![doc(html_playground_url=...)]`\",\n                 \"URL\",\n             )\n         }),\n@@ -281,7 +281,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"\",\n                 \"resource-suffix\",\n                 \"suffix to add to CSS and JavaScript files, e.g., \\\"light.css\\\" will become \\\n-                      \\\"light-suffix.css\\\"\",\n+                 \\\"light-suffix.css\\\"\",\n                 \"PATH\",\n             )\n         }),\n@@ -343,7 +343,7 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"\",\n                 \"static-root-path\",\n                 \"Path string to force loading static files from in output pages. \\\n-                        If not set, uses combinations of '../' to reach the documentation root.\",\n+                 If not set, uses combinations of '../' to reach the documentation root.\",\n                 \"PATH\",\n             )\n         }),"}, {"sha": "f497f341e112dd3cc616ce76e9fa2162ccc95593", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "patch": "@@ -1157,7 +1157,7 @@ fn report_diagnostic(\n                 // Print the line containing the `link_range` and manually mark it with '^'s.\n                 diag.note(&format!(\n                     \"the link appears in this line:\\n\\n{line}\\n\\\n-                         {indicator: <before$}{indicator:^<found$}\",\n+                     {indicator: <before$}{indicator:^<found$}\",\n                     line = line,\n                     indicator = \"\",\n                     before = link_range.start - last_new_line_offset,"}, {"sha": "75a659666673f528f19c6de0c8a9050e92a0382d", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "patch": "@@ -284,8 +284,7 @@ impl<'a> DocFolder for ImplStripper<'a> {\n                     if let Some(did) = typaram.def_id() {\n                         if did.is_local() && !self.retained.contains(&did) {\n                             debug!(\n-                                \"ImplStripper: stripped item in trait's generics; \\\n-                                    removing impl\"\n+                                \"ImplStripper: stripped item in trait's generics; removing impl\"\n                             );\n                             return None;\n                         }"}, {"sha": "9173d8e96058eee2fed67ca4b2e02f72ae7e241c", "filename": "src/librustdoc/passes/strip_private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs?ref=c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934", "patch": "@@ -9,7 +9,7 @@ pub const STRIP_PRIVATE: Pass = Pass {\n     name: \"strip-private\",\n     run: strip_private,\n     description: \"strips all private items from a crate which cannot be seen externally, \\\n-        implies strip-priv-imports\",\n+                  implies strip-priv-imports\",\n };\n \n /// Strip private items from the point of view of a crate or externally from a"}]}