{"sha": "38d911dfc55a7a1eea1c80139113ed2ff0151087", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZDkxMWRmYzU1YTdhMWVlYTFjODAxMzkxMTNlZDJmZjAxNTEwODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-09T21:01:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-09T21:01:51Z"}, "message": "Auto merge of #77276 - GuillaumeGomez:reexported-item-lints, r=jyn514,ollie27\n\nWarn on broken intra-doc links added to cross-crate re-exports\n\nThis emits `broken_intra_doc_links` for docs applied to pub use statements that point to external items and are inlined.\nDoes not address #77200 - any existing broken links from the original crate will not show warnings.\n\nr? `@jyn514`", "tree": {"sha": "79e3d734c481e98f17e8d96600cbf9259ea45487", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79e3d734c481e98f17e8d96600cbf9259ea45487"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38d911dfc55a7a1eea1c80139113ed2ff0151087", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38d911dfc55a7a1eea1c80139113ed2ff0151087", "html_url": "https://github.com/rust-lang/rust/commit/38d911dfc55a7a1eea1c80139113ed2ff0151087", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38d911dfc55a7a1eea1c80139113ed2ff0151087/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ddef544fa26c5535376fa424baf30cb985f7cb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ddef544fa26c5535376fa424baf30cb985f7cb1", "html_url": "https://github.com/rust-lang/rust/commit/5ddef544fa26c5535376fa424baf30cb985f7cb1"}, {"sha": "7e218bbd1a2f05244669b82421ce8d9344325acc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e218bbd1a2f05244669b82421ce8d9344325acc", "html_url": "https://github.com/rust-lang/rust/commit/7e218bbd1a2f05244669b82421ce8d9344325acc"}], "stats": {"total": 114, "additions": 95, "deletions": 19}, "files": [{"sha": "79ff7fc62d53e20f3984813c2a1a1c45bc371024", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=38d911dfc55a7a1eea1c80139113ed2ff0151087", "patch": "@@ -498,7 +498,7 @@ fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>)\n                         visibility: clean::Public,\n                         stability: None,\n                         deprecation: None,\n-                        inner: clean::ImportItem(clean::Import::Simple(\n+                        inner: clean::ImportItem(clean::Import::new_simple(\n                             item.ident.to_string(),\n                             clean::ImportSource {\n                                 path: clean::Path {\n@@ -514,6 +514,7 @@ fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>)\n                                 },\n                                 did: None,\n                             },\n+                            true,\n                         )),\n                     });\n                 } else if let Some(i) ="}, {"sha": "501891da573a6a2978c2df52311edecc68400d7d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=38d911dfc55a7a1eea1c80139113ed2ff0151087", "patch": "@@ -2258,8 +2258,7 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n                     return items;\n                 }\n             }\n-\n-            Import::Glob(resolve_use_source(cx, path))\n+            Import::new_glob(resolve_use_source(cx, path), true)\n         } else {\n             let name = self.name;\n             if !please_inline {\n@@ -2273,18 +2272,33 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n             }\n             if !denied {\n                 let mut visited = FxHashSet::default();\n-                if let Some(items) = inline::try_inline(\n+\n+                if let Some(mut items) = inline::try_inline(\n                     cx,\n                     cx.tcx.parent_module(self.id).to_def_id(),\n                     path.res,\n                     name,\n                     Some(self.attrs),\n                     &mut visited,\n                 ) {\n+                    items.push(Item {\n+                        name: None,\n+                        attrs: self.attrs.clean(cx),\n+                        source: self.span.clean(cx),\n+                        def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n+                        visibility: self.vis.clean(cx),\n+                        stability: None,\n+                        deprecation: None,\n+                        inner: ImportItem(Import::new_simple(\n+                            self.name.clean(cx),\n+                            resolve_use_source(cx, path),\n+                            false,\n+                        )),\n+                    });\n                     return items;\n                 }\n             }\n-            Import::Simple(name.clean(cx), resolve_use_source(cx, path))\n+            Import::new_simple(name.clean(cx), resolve_use_source(cx, path), true)\n         };\n \n         vec![Item {"}, {"sha": "903f44a0f93dff198264a7580dbcedfc63f076bf", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=38d911dfc55a7a1eea1c80139113ed2ff0151087", "patch": "@@ -177,6 +177,7 @@ impl Item {\n     pub fn is_stripped(&self) -> bool {\n         match self.inner {\n             StrippedItem(..) => true,\n+            ImportItem(ref i) => !i.should_be_displayed,\n             _ => false,\n         }\n     }\n@@ -1653,11 +1654,28 @@ pub struct Impl {\n }\n \n #[derive(Clone, Debug)]\n-pub enum Import {\n+pub struct Import {\n+    pub kind: ImportKind,\n+    pub source: ImportSource,\n+    pub should_be_displayed: bool,\n+}\n+\n+impl Import {\n+    pub fn new_simple(name: String, source: ImportSource, should_be_displayed: bool) -> Self {\n+        Self { kind: ImportKind::Simple(name), source, should_be_displayed }\n+    }\n+\n+    pub fn new_glob(source: ImportSource, should_be_displayed: bool) -> Self {\n+        Self { kind: ImportKind::Glob, source, should_be_displayed }\n+    }\n+}\n+\n+#[derive(Clone, Debug)]\n+pub enum ImportKind {\n     // use source as str;\n-    Simple(String, ImportSource),\n+    Simple(String),\n     // use source::*;\n-    Glob(ImportSource),\n+    Glob,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "ee217d99d2c77992ae3d0ae69d9093afdbc1add5", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=38d911dfc55a7a1eea1c80139113ed2ff0151087", "patch": "@@ -245,6 +245,7 @@ pub struct ExternCrate<'hir> {\n     pub span: Span,\n }\n \n+#[derive(Debug)]\n pub struct Import<'hir> {\n     pub name: Symbol,\n     pub id: hir::HirId,"}, {"sha": "d18282d6e675d82bfbd2d738528956c499ce149d", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=38d911dfc55a7a1eea1c80139113ed2ff0151087", "patch": "@@ -1149,19 +1149,19 @@ impl PrintWithSpace for hir::Mutability {\n \n impl clean::Import {\n     crate fn print(&self) -> impl fmt::Display + '_ {\n-        display_fn(move |f| match *self {\n-            clean::Import::Simple(ref name, ref src) => {\n-                if *name == src.path.last_name() {\n-                    write!(f, \"use {};\", src.print())\n+        display_fn(move |f| match self.kind {\n+            clean::ImportKind::Simple(ref name) => {\n+                if *name == self.source.path.last_name() {\n+                    write!(f, \"use {};\", self.source.print())\n                 } else {\n-                    write!(f, \"use {} as {};\", src.print(), *name)\n+                    write!(f, \"use {} as {};\", self.source.print(), *name)\n                 }\n             }\n-            clean::Import::Glob(ref src) => {\n-                if src.path.segments.is_empty() {\n+            clean::ImportKind::Glob => {\n+                if self.source.path.segments.is_empty() {\n                     write!(f, \"use *;\")\n                 } else {\n-                    write!(f, \"use {}::*;\", src.print())\n+                    write!(f, \"use {}::*;\", self.source.print())\n                 }\n             }\n         })"}, {"sha": "76334f0213d158d13f39e66b7672b4f898013f2d", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=38d911dfc55a7a1eea1c80139113ed2ff0151087", "patch": "@@ -4438,8 +4438,9 @@ fn item_ty_to_strs(ty: &ItemType) -> (&'static str, &'static str) {\n fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n     let mut sidebar = String::new();\n \n-    if items.iter().any(|it| it.type_() == ItemType::ExternCrate || it.type_() == ItemType::Import)\n-    {\n+    if items.iter().any(|it| {\n+        it.type_() == ItemType::ExternCrate || (it.type_() == ItemType::Import && !it.is_stripped())\n+    }) {\n         sidebar.push_str(&format!(\n             \"<li><a href=\\\"#{id}\\\">{name}</a></li>\",\n             id = \"reexports\","}, {"sha": "5b5624298a41a57778437f59a84a60d9dd716f8d", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=38d911dfc55a7a1eea1c80139113ed2ff0151087", "patch": "@@ -758,7 +758,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                 debug!(\"ignoring extern crate item {:?}\", item.def_id);\n                 return self.fold_item_recur(item);\n             }\n-            ImportItem(Import::Simple(ref name, ..)) => Some(name.clone()),\n+            ImportItem(Import { kind: ImportKind::Simple(ref name, ..), .. }) => Some(name.clone()),\n             MacroItem(..) => None,\n             _ => item.name.clone(),\n         };"}, {"sha": "31a8310d472423bd1ef7001bf523185fdbfdab8c", "filename": "src/test/rustdoc-ui/auxiliary/intra-doc-broken.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Ftest%2Frustdoc-ui%2Fauxiliary%2Fintra-doc-broken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Ftest%2Frustdoc-ui%2Fauxiliary%2Fintra-doc-broken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fauxiliary%2Fintra-doc-broken.rs?ref=38d911dfc55a7a1eea1c80139113ed2ff0151087", "patch": "@@ -0,0 +1,4 @@\n+#![crate_name = \"intra_doc_broken\"]\n+\n+/// [not_found]\n+pub fn foo() {}"}, {"sha": "ef261359ebd9ec4506cf670fa77bb6290dd87db5", "filename": "src/test/rustdoc-ui/intra-doc-broken-reexport.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Ftest%2Frustdoc-ui%2Fintra-doc-broken-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Ftest%2Frustdoc-ui%2Fintra-doc-broken-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc-broken-reexport.rs?ref=38d911dfc55a7a1eea1c80139113ed2ff0151087", "patch": "@@ -0,0 +1,8 @@\n+// aux-build:intra-doc-broken.rs\n+// check-pass\n+\n+#![deny(broken_intra_doc_links)]\n+\n+extern crate intra_doc_broken;\n+\n+pub use intra_doc_broken::foo;"}, {"sha": "3fd3f77400978ab4a59f7fa6c04e8ceccbf5af97", "filename": "src/test/rustdoc-ui/pub-export-lint.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Ftest%2Frustdoc-ui%2Fpub-export-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Ftest%2Frustdoc-ui%2Fpub-export-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fpub-export-lint.rs?ref=38d911dfc55a7a1eea1c80139113ed2ff0151087", "patch": "@@ -0,0 +1,5 @@\n+#![deny(broken_intra_doc_links)]\n+\n+/// [aloha]\n+//~^ ERROR unresolved link to `aloha`\n+pub use std::task::RawWakerVTable;"}, {"sha": "c345def794c085f4434e24af6f8c7843db51b409", "filename": "src/test/rustdoc-ui/pub-export-lint.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Ftest%2Frustdoc-ui%2Fpub-export-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Ftest%2Frustdoc-ui%2Fpub-export-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fpub-export-lint.stderr?ref=38d911dfc55a7a1eea1c80139113ed2ff0151087", "patch": "@@ -0,0 +1,15 @@\n+error: unresolved link to `aloha`\n+  --> $DIR/pub-export-lint.rs:3:6\n+   |\n+LL | /// [aloha]\n+   |      ^^^^^ no item named `aloha` in scope\n+   |\n+note: the lint level is defined here\n+  --> $DIR/pub-export-lint.rs:1:9\n+   |\n+LL | #![deny(broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "dea72b81a57c397642a66201c7d2340925edd993", "filename": "src/test/rustdoc/reexport-check.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Ftest%2Frustdoc%2Freexport-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d911dfc55a7a1eea1c80139113ed2ff0151087/src%2Ftest%2Frustdoc%2Freexport-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freexport-check.rs?ref=38d911dfc55a7a1eea1c80139113ed2ff0151087", "patch": "@@ -0,0 +1,9 @@\n+#![crate_name = \"foo\"]\n+\n+// @!has 'foo/index.html' '//code' 'pub use self::i32;'\n+// @has 'foo/index.html' '//tr[@class=\"module-item\"]' 'i32'\n+// @has 'foo/i32/index.html'\n+pub use std::i32;\n+// @!has 'foo/index.html' '//code' 'pub use self::string::String;'\n+// @has 'foo/index.html' '//tr[@class=\"module-item\"]' 'String'\n+pub use std::string::String;"}]}