{"sha": "5d86e24ab27dba0a773bd00a98e3845ece0ebf16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkODZlMjRhYjI3ZGJhMGE3NzNiZDAwYTk4ZTM4NDVlY2UwZWJmMTY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-15T03:24:51Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-15T23:13:56Z"}, "message": "std::unstable::mutex: streamline & clarify documentation.", "tree": {"sha": "9760efd1d0b09f372f561190dfd111a299654511", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9760efd1d0b09f372f561190dfd111a299654511"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d86e24ab27dba0a773bd00a98e3845ece0ebf16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d86e24ab27dba0a773bd00a98e3845ece0ebf16", "html_url": "https://github.com/rust-lang/rust/commit/5d86e24ab27dba0a773bd00a98e3845ece0ebf16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d86e24ab27dba0a773bd00a98e3845ece0ebf16/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f4294b4e2887ffe9d0532564521c456bb89a780", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4294b4e2887ffe9d0532564521c456bb89a780", "html_url": "https://github.com/rust-lang/rust/commit/0f4294b4e2887ffe9d0532564521c456bb89a780"}], "stats": {"total": 63, "additions": 37, "deletions": 26}, "files": [{"sha": "34ddee46d350e1e48ef16eebb57b816d8f666764", "filename": "src/libstd/unstable/mutex.rs", "status": "modified", "additions": 37, "deletions": 26, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5d86e24ab27dba0a773bd00a98e3845ece0ebf16/src%2Flibstd%2Funstable%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d86e24ab27dba0a773bd00a98e3845ece0ebf16/src%2Flibstd%2Funstable%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmutex.rs?ref=5d86e24ab27dba0a773bd00a98e3845ece0ebf16", "patch": "@@ -27,31 +27,34 @@\n //!\n //! It is not recommended to use this type for idiomatic rust use. These types\n //! are appropriate where no other options are available, but other rust\n-//! concurrency primitives should be used before them.\n+//! concurrency primitives should be used before them: the `sync` crate defines\n+//! `StaticMutex` and `Mutex` types.\n //!\n //! # Example\n //!\n-//!     use std::unstable::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n+//! ```rust\n+//! use std::unstable::mutex::{NativeMutex, StaticNativeMutex, NATIVE_MUTEX_INIT};\n //!\n-//!     // Use a statically initialized mutex\n-//!     static mut LOCK: StaticNativeMutex = NATIVE_MUTEX_INIT;\n+//! // Use a statically initialized mutex\n+//! static mut LOCK: StaticNativeMutex = NATIVE_MUTEX_INIT;\n //!\n-//!     unsafe {\n-//!         let _guard = LOCK.lock();\n-//!     } // automatically unlocked here\n+//! unsafe {\n+//!     let _guard = LOCK.lock();\n+//! } // automatically unlocked here\n //!\n-//!     // Use a normally initialized mutex\n-//!     unsafe {\n-//!         let mut lock = NativeMutex::new();\n+//! // Use a normally initialized mutex\n+//! unsafe {\n+//!     let mut lock = NativeMutex::new();\n //!\n-//!         {\n-//!             let _guard = lock.lock();\n-//!         } // unlocked here\n+//!     {\n+//!         let _guard = lock.lock();\n+//!     } // unlocked here\n //!\n-//!         // sometimes the RAII guard isn't appropriate\n-//!         lock.lock_noguard();\n-//!         lock.unlock_noguard();\n-//!     } // `lock` is deallocated here\n+//!     // sometimes the RAII guard isn't appropriate\n+//!     lock.lock_noguard();\n+//!     lock.unlock_noguard();\n+//! } // `lock` is deallocated here\n+//! ```\n \n #[allow(non_camel_case_types)];\n \n@@ -61,7 +64,8 @@ use ops::Drop;\n /// A native mutex suitable for storing in statics (that is, it has\n /// the `destroy` method rather than a destructor).\n ///\n-/// Prefer the `NativeMutex` type where possible.\n+/// Prefer the `NativeMutex` type where possible, since that does not\n+/// require manual deallocation.\n pub struct StaticNativeMutex {\n     priv inner: imp::Mutex,\n }\n@@ -128,14 +132,16 @@ impl StaticNativeMutex {\n \n     /// Acquire the lock without creating a `LockGuard`.\n     ///\n-    /// Prefer using `.lock`.\n+    /// These needs to be paired with a call to `.unlock_noguard`. Prefer using\n+    /// `.lock`.\n     pub unsafe fn lock_noguard(&mut self) { self.inner.lock() }\n \n     /// Attempts to acquire the lock without creating a\n     /// `LockGuard`. The value returned is whether the lock was\n     /// acquired or not.\n     ///\n-    /// Prefer using `.trylock`.\n+    /// If `true` is returned, this needs to be paired with a call to\n+    /// `.unlock_noguard`. Prefer using `.trylock`.\n     pub unsafe fn trylock_noguard(&mut self) -> bool {\n         self.inner.trylock()\n     }\n@@ -175,11 +181,14 @@ impl NativeMutex {\n     /// # Example\n     /// ```rust\n     /// use std::unstable::mutex::NativeMutex;\n-    /// let mut lock = NativeMutex::new();\n     /// unsafe {\n-    ///     let _guard = lock.lock();\n-    ///     // critical section...\n-    /// } // automatically unlocked in `_guard`'s destructor\n+    ///     let mut lock = NativeMutex::new();\n+    ///\n+    ///     {\n+    ///         let _guard = lock.lock();\n+    ///         // critical section...\n+    ///     } // automatically unlocked in `_guard`'s destructor\n+    /// }\n     /// ```\n     pub unsafe fn lock<'a>(&'a mut self) -> LockGuard<'a> {\n         self.inner.lock()\n@@ -193,14 +202,16 @@ impl NativeMutex {\n \n     /// Acquire the lock without creating a `LockGuard`.\n     ///\n-    /// Prefer using `.lock`.\n+    /// These needs to be paired with a call to `.unlock_noguard`. Prefer using\n+    /// `.lock`.\n     pub unsafe fn lock_noguard(&mut self) { self.inner.lock_noguard() }\n \n     /// Attempts to acquire the lock without creating a\n     /// `LockGuard`. The value returned is whether the lock was\n     /// acquired or not.\n     ///\n-    /// Prefer using `.trylock`.\n+    /// If `true` is returned, this needs to be paired with a call to\n+    /// `.unlock_noguard`. Prefer using `.trylock`.\n     pub unsafe fn trylock_noguard(&mut self) -> bool {\n         self.inner.trylock_noguard()\n     }"}]}