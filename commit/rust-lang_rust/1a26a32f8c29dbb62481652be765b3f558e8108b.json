{"sha": "1a26a32f8c29dbb62481652be765b3f558e8108b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMjZhMzJmOGMyOWRiYjYyNDgxNjUyYmU3NjViM2Y1NThlODEwOGI=", "commit": {"author": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-03-01T17:19:37Z"}, "committer": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-03-01T17:19:37Z"}, "message": "doc: Update Design.md to mention syntex_syntax and config", "tree": {"sha": "a49752087ccab1132e3460165d76f8dbe399c576", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a49752087ccab1132e3460165d76f8dbe399c576"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a26a32f8c29dbb62481652be765b3f558e8108b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a26a32f8c29dbb62481652be765b3f558e8108b", "html_url": "https://github.com/rust-lang/rust/commit/1a26a32f8c29dbb62481652be765b3f558e8108b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a26a32f8c29dbb62481652be765b3f558e8108b/comments", "author": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65bc5c242de86f0651b34fd913ca338a880696e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/65bc5c242de86f0651b34fd913ca338a880696e8", "html_url": "https://github.com/rust-lang/rust/commit/65bc5c242de86f0651b34fd913ca338a880696e8"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "7e2f00aebdfa9dc59f42251c6bc6c27ff36f5853", "filename": "Design.md", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1a26a32f8c29dbb62481652be765b3f558e8108b/Design.md", "raw_url": "https://github.com/rust-lang/rust/raw/1a26a32f8c29dbb62481652be765b3f558e8108b/Design.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Design.md?ref=1a26a32f8c29dbb62481652be765b3f558e8108b", "patch": "@@ -134,25 +134,34 @@ not worthwhile due to uniformity being desirable, but it is a useful goal).\n \n ### Architecture details\n \n-We use the AST from libsyntax. We use libsyntax's visit module to walk the AST\n-to find starting points for reformatting. Eventually, we should reformat everything\n-and we shouldn't need the visit module. We keep track of the last formatted\n-position in the code, and when we reformat the next piece of code we make sure\n-to output the span for all the code in between (handled by missed_spans.rs).\n+We use the AST from [syntex_syntax], an export of rustc's libsyntax. We use\n+syntex_syntax's visit module to walk the AST to find starting points for\n+reformatting. Eventually, we should reformat everything and we shouldn't need\n+the visit module. We keep track of the last formatted position in the code, and\n+when we reformat the next piece of code we make sure to output the span for all\n+the code in between (handled by missed_spans.rs).\n+\n+[syntex_syntax]: https://crates.io/crates/syntex_syntax\n+\n+We read in formatting configuration from a `rustfmt.toml` file if there is one.\n+The options and their defaults are defined in `config.rs`. A `Config` object is\n+passed throughout the formatting code, and each formatting routine looks there\n+for its configuration.\n \n Our visitor keeps track of the desired current indent due to blocks (\n-`block_indent`). Each `visit_*` method reformats code according to this indent\n-and `IDEAL_WIDTH` and `MAX_WIDTH` (which should one day be supplied from a\n-config file). Most reformatting done in the `visit_*` methods is a bit hackey\n-and is meant to be temporary until it can be done properly.\n+`block_indent`). Each `visit_*` method reformats code according to this indent,\n+`config.ideal_width` and `config.max_width`. Most reformatting done in the\n+`visit_*` methods is a bit hackey and is meant to be temporary until it can be\n+done properly.\n \n There are a bunch of methods called `rewrite_*`. There do the bulk of the\n reformatting. These take the AST node to be reformatted (this may not literally\n-be an AST node from libsyntax, there might be multiple parameters describing a\n-logical node), the current indent, and the current width budget. They return a\n-`String` (or sometimes an `Option<String>`) which formats the code in the box\n-given by the indent and width budget. If the method fails, it returns `None` and\n-the calling method then has to fallback in some way to give the callee more space.\n+be an AST node from syntex_syntax: there might be multiple parameters\n+describing a logical node), the current indent, and the current width budget.\n+They return a `String` (or sometimes an `Option<String>`) which formats the\n+code in the box given by the indent and width budget. If the method fails, it\n+returns `None` and the calling method then has to fallback in some way to give\n+the callee more space.\n \n So, in summary to format a node, we calculate the width budget and then walk down\n the tree from the node. At a leaf, we generate an actual string and then unwind,"}]}