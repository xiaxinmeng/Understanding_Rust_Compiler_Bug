{"sha": "734abe593dc09edaea0f24978acf4f4270337361", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNGFiZTU5M2RjMDllZGFlYTBmMjQ5NzhhY2Y0ZjQyNzAzMzczNjE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-29T20:21:16Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-29T20:23:51Z"}, "message": "Teach trans to emit undefined references to 'use'd symbols. Can compile and run a simple 'use std;' example now.", "tree": {"sha": "eaac6bb58a955617ec1ac47e031002a97931ac40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaac6bb58a955617ec1ac47e031002a97931ac40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/734abe593dc09edaea0f24978acf4f4270337361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/734abe593dc09edaea0f24978acf4f4270337361", "html_url": "https://github.com/rust-lang/rust/commit/734abe593dc09edaea0f24978acf4f4270337361", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/734abe593dc09edaea0f24978acf4f4270337361/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6936093992fc66fe544dff5697b593543f02e184", "url": "https://api.github.com/repos/rust-lang/rust/commits/6936093992fc66fe544dff5697b593543f02e184", "html_url": "https://github.com/rust-lang/rust/commit/6936093992fc66fe544dff5697b593543f02e184"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "4493bea8739fca787f159bcad79c1af33e779744", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/734abe593dc09edaea0f24978acf4f4270337361/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734abe593dc09edaea0f24978acf4f4270337361/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=734abe593dc09edaea0f24978acf4f4270337361", "patch": "@@ -43,6 +43,28 @@ tag def {\n     def_native_fn(def_id);\n }\n \n+fn def_id_of_def(def d) -> def_id {\n+    alt (d) {\n+        case (def_fn(?id)) { ret id; }\n+        case (def_obj(?id)) { ret id; }\n+        case (def_obj_field(?id)) { ret id; }\n+        case (def_mod(?id)) { ret id; }\n+        case (def_native_mod(?id)) { ret id; }\n+        case (def_const(?id)) { ret id; }\n+        case (def_arg(?id)) { ret id; }\n+        case (def_local(?id)) { ret id; }\n+        case (def_upvar(?id)) { ret id; }\n+        case (def_variant(_, ?id)) { ret id; }\n+        case (def_ty(?id)) { ret id; }\n+        case (def_ty_arg(?id)) { ret id; }\n+        case (def_binding(?id)) { ret id; }\n+        case (def_use(?id)) { ret id; }\n+        case (def_native_ty(?id)) { ret id; }\n+        case (def_native_fn(?id)) { ret id; }\n+    }\n+    fail;\n+}\n+\n type crate = spanned[crate_];\n type crate_ = rec(vec[@crate_directive] directives,\n                   _mod module);"}, {"sha": "735dbcb4ae524108a82eae71ccb3a604501e021c", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/734abe593dc09edaea0f24978acf4f4270337361/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734abe593dc09edaea0f24978acf4f4270337361/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=734abe593dc09edaea0f24978acf4f4270337361", "patch": "@@ -403,6 +403,16 @@ impure fn get_item_kind(&ebml.reader ebml_r) -> u8 {\n     ret get_item_generic[u8](ebml_r, metadata.tag_items_kind, f);\n }\n \n+impure fn get_item_symbol(&ebml.reader ebml_r) -> str {\n+    impure fn converter(vec[u8] data) -> str {\n+        auto x = @mutable 3;\n+        *x = 5;\n+        ret _str.unsafe_from_bytes(data);\n+    }\n+    auto f = converter;\n+    ret get_item_generic[str](ebml_r, metadata.tag_items_symbol, f);\n+}\n+\n // FIXME: This is a *terrible* botch.\n impure fn impure_parse_def_id(vec[u8] data) -> ast.def_id {\n     auto x = @mutable 3;\n@@ -573,6 +583,13 @@ fn get_type(session.session sess, ast.def_id def) -> ty.ty_params_and_ty {\n     ret tup(tps, t);\n }\n \n+fn get_symbol(session.session sess, ast.def_id def) -> str {\n+    auto external_crate_id = def._0;\n+    auto data = sess.get_external_crate(external_crate_id);\n+    auto ebml_r = lookup_item(def._1, data);\n+    ret get_item_symbol(ebml_r);\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "551a63486d57f3e67cd5e886568018044915f178", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/734abe593dc09edaea0f24978acf4f4270337361/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734abe593dc09edaea0f24978acf4f4270337361/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=734abe593dc09edaea0f24978acf4f4270337361", "patch": "@@ -11,6 +11,7 @@ import std.option.some;\n import std.option.none;\n \n import front.ast;\n+import front.creader;\n import driver.session;\n import middle.ty;\n import back.x86;\n@@ -3606,10 +3607,30 @@ fn lval_generic_fn(@block_ctxt cx,\n     ret lv;\n }\n \n+fn trans_external_path(@block_ctxt cx, &ast.path p,\n+                       ast.def def, ast.ann a) -> lval_result {\n+    auto ccx = cx.fcx.ccx;\n+    auto ty = node_ann_type(ccx, a);\n+    auto name = creader.get_symbol(ccx.sess, ast.def_id_of_def(def));\n+    auto v = get_extern_const(ccx.externs, ccx.llmod,\n+                              name, type_of(ccx, ty));\n+    ret lval_mem(cx, v);\n+}\n+\n+fn def_is_external(@crate_ctxt cx, ast.def d) -> bool {\n+    auto id = ast.def_id_of_def(d);\n+    ret id._0 != cx.sess.get_targ_crate_num();\n+}\n+\n fn trans_path(@block_ctxt cx, &ast.path p, &option.t[ast.def] dopt,\n               &ast.ann ann) -> lval_result {\n     alt (dopt) {\n         case (some[ast.def](?def)) {\n+\n+            if (def_is_external(cx.fcx.ccx, def)) {\n+                ret trans_external_path(cx, p, def, ann);\n+            }\n+\n             alt (def) {\n                 case (ast.def_arg(?did)) {\n                     alt (cx.fcx.llargs.find(did)) {"}, {"sha": "1ae9be79b9569ca22ffa8402188f16f8d023f9f1", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/734abe593dc09edaea0f24978acf4f4270337361/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/734abe593dc09edaea0f24978acf4f4270337361/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=734abe593dc09edaea0f24978acf4f4270337361", "patch": "@@ -45,6 +45,7 @@ auth driver.rustc.main = impure;\n auth front.creader.load_crate = unsafe;\n auth front.creader.lookup_def = impure;\n auth front.creader.get_type = impure;\n+auth front.creader.get_symbol = impure;\n auth front.creader.impure_no_op = impure;\n auth middle.metadata = unsafe;\n auth middle.trans = unsafe;"}]}