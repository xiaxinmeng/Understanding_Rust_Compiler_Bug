{"sha": "626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "node_id": "C_kwDOAAsO6NoAKDYyNmIwMmE4Zjk3YTllMzVhNjQ3YWExOGZjZGI2N2NiY2IzYjA5Yzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-22T01:41:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-22T01:41:03Z"}, "message": "Auto merge of #102121 - JohnTitor:rollup-3fb1wrt, r=JohnTitor\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #101952 (Avoid panicking on missing fallback)\n - #102030 (Don't crate-locally reexport walk functions in tidy)\n - #102032 (Adding ignore fuchsia tests for signal interpretation cases)\n - #102033 (Adding needs-unwind to nicer-assert-messages compiler ui tests)\n - #102054 (Unify \"all items\" page's sidebar with other pages)\n - #102071 (Adding needs-unwind for tests testing memory size of Futures/Closures)\n - #102073 (Adding ignore fuchsia tests for execvp)\n - #102075 (rustdoc: remove no-op CSS `.content > .methods > .method`)\n - #102079 (Update books)\n - #102084 (Adding needs-unwind for test using panic::catch_unwind)\n - #102100 (Prevent usage of .stab elements to create scrollable areas in doc blocks)\n - #102102 (Add doc aliases on Sized trait)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e22193ef46205ca9429e757fcd508cbe7eb9dd2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e22193ef46205ca9429e757fcd508cbe7eb9dd2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "html_url": "https://github.com/rust-lang/rust/commit/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a4fd12ebfd01d969a719e5c43c2e318441e827b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4fd12ebfd01d969a719e5c43c2e318441e827b", "html_url": "https://github.com/rust-lang/rust/commit/4a4fd12ebfd01d969a719e5c43c2e318441e827b"}, {"sha": "15b4788e36a5ca55380cc88483a9a20198a5a381", "url": "https://api.github.com/repos/rust-lang/rust/commits/15b4788e36a5ca55380cc88483a9a20198a5a381", "html_url": "https://github.com/rust-lang/rust/commit/15b4788e36a5ca55380cc88483a9a20198a5a381"}], "stats": {"total": 325, "additions": 246, "deletions": 79}, "files": [{"sha": "40a7b69619305282fa28cae8a0e7026ac174c574", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -81,6 +81,7 @@ impl<T: ?Sized> !Send for *mut T {}\n /// ```\n ///\n /// [trait object]: ../../book/ch17-02-trait-objects.html\n+#[doc(alias = \"?\", alias = \"?Sized\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"sized\"]\n #[rustc_on_unimplemented("}, {"sha": "f1e5ad844d0c61738006cdef26227beeb136948e", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -1 +1 @@\n-Subproject commit 0a5421ceb238357b3634fb75234eba4d1dad643c\n+Subproject commit f1e5ad844d0c61738006cdef26227beeb136948e"}, {"sha": "4ce51cb7441a6f02b5bf9b07b2eb755c21ab7954", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -1 +1 @@\n-Subproject commit befe6840874311635c417cf731377f07234ee373\n+Subproject commit 4ce51cb7441a6f02b5bf9b07b2eb755c21ab7954"}, {"sha": "f53bfa056929217870a5d2df1366d2e7ba35096d", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -1 +1 @@\n-Subproject commit d880e6ac2acf133dce640da24b9fb692844f02d4\n+Subproject commit f53bfa056929217870a5d2df1366d2e7ba35096d"}, {"sha": "a7cdac33ca7356ad49d5c2b5e2c5010889b33eee", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -1 +1 @@\n-Subproject commit f62e93c28323ed9637d0a205a0c256498674a509\n+Subproject commit a7cdac33ca7356ad49d5c2b5e2c5010889b33eee"}, {"sha": "767a6bd9727a596d7cfdbaeee475e65b2670ea3a", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -1 +1 @@\n-Subproject commit 03301f8ae55fa6f20f7ea152a517598e6db2cdb7\n+Subproject commit 767a6bd9727a596d7cfdbaeee475e65b2670ea3a"}, {"sha": "f587d6e7cddeaa3cf0a33ec1e368df1a408fa0aa", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -1 +1 @@\n-Subproject commit 04892c1a6fc145602ac7367945fda9d4ee83c9fb\n+Subproject commit f587d6e7cddeaa3cf0a33ec1e368df1a408fa0aa"}, {"sha": "22a6fcd316aa0535f922f162c155252835902b71", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -17,8 +17,8 @@ use super::print_item::{full_path, item_path, print_item};\n use super::search_index::build_index;\n use super::write_shared::write_shared;\n use super::{\n-    collect_spans_and_sources, print_sidebar, scrape_examples_help, AllTypes, LinkFromSrc, NameDoc,\n-    StylePath, BASIC_KEYWORDS,\n+    collect_spans_and_sources, print_sidebar, scrape_examples_help, sidebar_module_like, AllTypes,\n+    LinkFromSrc, NameDoc, StylePath, BASIC_KEYWORDS,\n };\n \n use crate::clean::{self, types::ExternalLocation, ExternalCrate};\n@@ -597,16 +597,24 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             keywords: BASIC_KEYWORDS,\n             resource_suffix: &shared.resource_suffix,\n         };\n-        let sidebar = if shared.cache.crate_version.is_some() {\n-            format!(\"<h2 class=\\\"location\\\">Crate {}</h2>\", crate_name)\n-        } else {\n-            String::new()\n-        };\n         let all = shared.all.replace(AllTypes::new());\n+        let mut sidebar = Buffer::html();\n+        if shared.cache.crate_version.is_some() {\n+            write!(sidebar, \"<h2 class=\\\"location\\\">Crate {}</h2>\", crate_name)\n+        };\n+\n+        let mut items = Buffer::html();\n+        sidebar_module_like(&mut items, all.item_sections());\n+        if !items.is_empty() {\n+            sidebar.push_str(\"<div class=\\\"sidebar-elems\\\">\");\n+            sidebar.push_buffer(items);\n+            sidebar.push_str(\"</div>\");\n+        }\n+\n         let v = layout::render(\n             &shared.layout,\n             &page,\n-            sidebar,\n+            sidebar.into_inner(),\n             |buf: &mut Buffer| all.print(buf),\n             &shared.style_files,\n         );"}, {"sha": "7e5e4df43d2918972013d4a2d35346b42053861c", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 88, "deletions": 36, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -290,19 +290,66 @@ impl AllTypes {\n             };\n         }\n     }\n-}\n \n-impl AllTypes {\n+    fn item_sections(&self) -> FxHashSet<ItemSection> {\n+        let mut sections = FxHashSet::default();\n+\n+        if !self.structs.is_empty() {\n+            sections.insert(ItemSection::Structs);\n+        }\n+        if !self.enums.is_empty() {\n+            sections.insert(ItemSection::Enums);\n+        }\n+        if !self.unions.is_empty() {\n+            sections.insert(ItemSection::Unions);\n+        }\n+        if !self.primitives.is_empty() {\n+            sections.insert(ItemSection::PrimitiveTypes);\n+        }\n+        if !self.traits.is_empty() {\n+            sections.insert(ItemSection::Traits);\n+        }\n+        if !self.macros.is_empty() {\n+            sections.insert(ItemSection::Macros);\n+        }\n+        if !self.functions.is_empty() {\n+            sections.insert(ItemSection::Functions);\n+        }\n+        if !self.typedefs.is_empty() {\n+            sections.insert(ItemSection::TypeDefinitions);\n+        }\n+        if !self.opaque_tys.is_empty() {\n+            sections.insert(ItemSection::OpaqueTypes);\n+        }\n+        if !self.statics.is_empty() {\n+            sections.insert(ItemSection::Statics);\n+        }\n+        if !self.constants.is_empty() {\n+            sections.insert(ItemSection::Constants);\n+        }\n+        if !self.attributes.is_empty() {\n+            sections.insert(ItemSection::AttributeMacros);\n+        }\n+        if !self.derives.is_empty() {\n+            sections.insert(ItemSection::DeriveMacros);\n+        }\n+        if !self.trait_aliases.is_empty() {\n+            sections.insert(ItemSection::TraitAliases);\n+        }\n+\n+        sections\n+    }\n+\n     fn print(self, f: &mut Buffer) {\n-        fn print_entries(f: &mut Buffer, e: &FxHashSet<ItemEntry>, title: &str) {\n+        fn print_entries(f: &mut Buffer, e: &FxHashSet<ItemEntry>, kind: ItemSection) {\n             if !e.is_empty() {\n                 let mut e: Vec<&ItemEntry> = e.iter().collect();\n                 e.sort();\n                 write!(\n                     f,\n-                    \"<h3 id=\\\"{}\\\">{}</h3><ul class=\\\"all-items\\\">\",\n-                    title.replace(' ', \"-\"), // IDs cannot contain whitespaces.\n-                    title\n+                    \"<h3 id=\\\"{id}\\\">{title}</h3><ul class=\\\"all-items\\\">\",\n+                    id = kind.id(),\n+                    title = kind.name(),\n                 );\n \n                 for s in e.iter() {\n@@ -320,20 +367,20 @@ impl AllTypes {\n         );\n         // Note: print_entries does not escape the title, because we know the current set of titles\n         // doesn't require escaping.\n-        print_entries(f, &self.structs, \"Structs\");\n-        print_entries(f, &self.enums, \"Enums\");\n-        print_entries(f, &self.unions, \"Unions\");\n-        print_entries(f, &self.primitives, \"Primitives\");\n-        print_entries(f, &self.traits, \"Traits\");\n-        print_entries(f, &self.macros, \"Macros\");\n-        print_entries(f, &self.attributes, \"Attribute Macros\");\n-        print_entries(f, &self.derives, \"Derive Macros\");\n-        print_entries(f, &self.functions, \"Functions\");\n-        print_entries(f, &self.typedefs, \"Typedefs\");\n-        print_entries(f, &self.trait_aliases, \"Trait Aliases\");\n-        print_entries(f, &self.opaque_tys, \"Opaque Types\");\n-        print_entries(f, &self.statics, \"Statics\");\n-        print_entries(f, &self.constants, \"Constants\");\n+        print_entries(f, &self.structs, ItemSection::Structs);\n+        print_entries(f, &self.enums, ItemSection::Enums);\n+        print_entries(f, &self.unions, ItemSection::Unions);\n+        print_entries(f, &self.primitives, ItemSection::PrimitiveTypes);\n+        print_entries(f, &self.traits, ItemSection::Traits);\n+        print_entries(f, &self.macros, ItemSection::Macros);\n+        print_entries(f, &self.attributes, ItemSection::AttributeMacros);\n+        print_entries(f, &self.derives, ItemSection::DeriveMacros);\n+        print_entries(f, &self.functions, ItemSection::Functions);\n+        print_entries(f, &self.typedefs, ItemSection::TypeDefinitions);\n+        print_entries(f, &self.trait_aliases, ItemSection::TraitAliases);\n+        print_entries(f, &self.opaque_tys, ItemSection::OpaqueTypes);\n+        print_entries(f, &self.statics, ItemSection::Statics);\n+        print_entries(f, &self.constants, ItemSection::Constants);\n     }\n }\n \n@@ -2468,7 +2515,7 @@ fn sidebar_enum(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, e: &clean:\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-enum ItemSection {\n+pub(crate) enum ItemSection {\n     Reexports,\n     PrimitiveTypes,\n     Modules,\n@@ -2620,25 +2667,11 @@ fn item_ty_to_section(ty: ItemType) -> ItemSection {\n     }\n }\n \n-fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n+pub(crate) fn sidebar_module_like(buf: &mut Buffer, item_sections_in_use: FxHashSet<ItemSection>) {\n     use std::fmt::Write as _;\n \n     let mut sidebar = String::new();\n \n-    let item_sections_in_use: FxHashSet<_> = items\n-        .iter()\n-        .filter(|it| {\n-            !it.is_stripped()\n-                && it\n-                    .name\n-                    .or_else(|| {\n-                        if let clean::ImportItem(ref i) = *it.kind &&\n-                            let clean::ImportKind::Simple(s) = i.kind { Some(s) } else { None }\n-                    })\n-                    .is_some()\n-        })\n-        .map(|it| item_ty_to_section(it.type_()))\n-        .collect();\n     for &sec in ItemSection::ALL.iter().filter(|sec| item_sections_in_use.contains(sec)) {\n         let _ = write!(sidebar, \"<li><a href=\\\"#{}\\\">{}</a></li>\", sec.id(), sec.name());\n     }\n@@ -2656,6 +2689,25 @@ fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n     }\n }\n \n+fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n+    let item_sections_in_use: FxHashSet<_> = items\n+        .iter()\n+        .filter(|it| {\n+            !it.is_stripped()\n+                && it\n+                    .name\n+                    .or_else(|| {\n+                        if let clean::ImportItem(ref i) = *it.kind &&\n+                            let clean::ImportKind::Simple(s) = i.kind { Some(s) } else { None }\n+                    })\n+                    .is_some()\n+        })\n+        .map(|it| item_ty_to_section(it.type_()))\n+        .collect();\n+\n+    sidebar_module_like(buf, item_sections_in_use);\n+}\n+\n fn sidebar_foreign_type(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item) {\n     let mut sidebar = Buffer::new();\n     sidebar_assoc_items(cx, &mut sidebar, it);"}, {"sha": "f21179ec558f01f9a966fea7938cd448707fe5e0", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -728,10 +728,6 @@ pre, .rustdoc.source .example-wrap {\n \tpadding: 0;\n }\n \n-.content > .methods > .method {\n-\tfont-size: 1rem;\n-\tposition: relative;\n-}\n /* Shift \"where ...\" part of method or fn definition down a line */\n .content .method .where,\n .content .fn .where,\n@@ -1092,6 +1088,12 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tmargin-right: 0.3rem;\n }\n \n+/* This is to prevent the `.stab` elements to overflow the .docblock elements. */\n+.docblock .stab {\n+\tpadding: 0 0.125em;\n+\tmargin-bottom: 0;\n+}\n+\n /* Black one-pixel outline around emoji shapes */\n .emoji {\n \ttext-shadow:"}, {"sha": "7f965ada594d824d081d697fd5a610ca92f40fc2", "filename": "src/test/rustdoc-gui/check-stab-in-docblock.goml", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Frustdoc-gui%2Fcheck-stab-in-docblock.goml", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Frustdoc-gui%2Fcheck-stab-in-docblock.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcheck-stab-in-docblock.goml?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -0,0 +1,21 @@\n+// This test checks that using `.stab` attributes in `.docblock` elements doesn't\n+// create scrollable paragraphs.\n+goto: file://|DOC_PATH|/test_docs/index.html\n+// Needs the text to be display to check for scrollable content.\n+show-text: true\n+size: (786, 600)\n+// Confirms that there 3 paragraphs.\n+assert-count: (\".top-doc .docblock p\", 3)\n+// Checking that there is no scrollable content.\n+assert-property: (\n+    \".top-doc .docblock p:nth-of-type(1)\",\n+    {\"scrollHeight\": \"120\", \"clientHeight\": \"120\", \"scrollWidth\": \"502\", \"clientWidth\": \"502\"},\n+)\n+assert-property: (\n+    \".top-doc .docblock p:nth-of-type(2)\",\n+    {\"scrollHeight\": \"48\", \"clientHeight\": \"48\", \"scrollWidth\": \"502\", \"clientWidth\": \"502\"},\n+)\n+assert-property: (\n+    \".top-doc .docblock p:nth-of-type(3)\",\n+    {\"scrollHeight\": \"48\", \"clientHeight\": \"48\", \"scrollWidth\": \"502\", \"clientWidth\": \"502\"},\n+)"}, {"sha": "1c066206c1f21e457a975c8bafa2419495e574ef", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -6,6 +6,24 @@\n #![feature(rustdoc_internals)]\n #![feature(doc_cfg)]\n \n+/*!\n+Enable the feature <span class=\"stab portability\"><code>some-feature</code></span> to enjoy\n+this crate even more!\n+Enable the feature <span class=\"stab portability\"><code>some-feature</code></span> to enjoy\n+this crate even more!\n+Enable the feature <span class=\"stab portability\"><code>some-feature</code></span> to enjoy\n+this crate even more!\n+\n+Also, stop using `bar` as it's <span class=\"stab deprecated\" title=\"\">deprecated</span>.\n+Also, stop using `bar` as it's <span class=\"stab deprecated\" title=\"\">deprecated</span>.\n+Also, stop using `bar` as it's <span class=\"stab deprecated\" title=\"\">deprecated</span>.\n+\n+Finally, you can use `quz` only on <span class=\"stab portability\"><code>Unix or x86-64</code>\n+</span>.\n+Finally, you can use `quz` only on <span class=\"stab portability\"><code>Unix or x86-64</code>\n+</span>.\n+*/\n+\n use std::convert::AsRef;\n use std::fmt;\n "}, {"sha": "e74b981de6444fd8746bae6a3d93909b141850ef", "filename": "src/test/rustdoc/sidebar-all-page.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Frustdoc%2Fsidebar-all-page.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Frustdoc%2Fsidebar-all-page.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-all-page.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -0,0 +1,35 @@\n+#![crate_name = \"foo\"]\n+\n+#![feature(rustdoc_internals)]\n+\n+// @has 'foo/all.html'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Structs'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Enums'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Unions'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Functions'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Traits'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Macros'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Type Definitions'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Constants'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Statics'\n+// @has - '//*[@class=\"sidebar-elems\"]//li' 'Primitive Types'\n+\n+pub struct Foo;\n+pub enum Enum {\n+    A,\n+}\n+pub union Bar {\n+    a: u8,\n+    b: u16,\n+}\n+pub fn foo() {}\n+pub trait Trait {}\n+#[macro_export]\n+macro_rules! foo {\n+    () => {}\n+}\n+pub type Type = u8;\n+pub const FOO: u8 = 0;\n+pub static BAR: u8 = 0;\n+#[doc(primitive = \"u8\")]\n+mod u8 {}"}, {"sha": "ab2b308948509f248f46074ca1196ae55052bcd9", "filename": "src/test/ui/abi/segfault-no-out-of-stack.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fabi%2Fsegfault-no-out-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fabi%2Fsegfault-no-out-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fsegfault-no-out-of-stack.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -3,6 +3,7 @@\n #![allow(unused_imports)]\n // ignore-emscripten can't run commands\n // ignore-sgx no processes\n+// ignore-fuchsia must translate zircon signal to SIGSEGV/SIGBUS, FIXME (#58590)\n #![feature(rustc_private)]\n \n extern crate libc;"}, {"sha": "74b5e843f7742e706f5f9971e9e6c09a9d816a92", "filename": "src/test/ui/abi/stack-probes-lto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fabi%2Fstack-probes-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fabi%2Fstack-probes-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fstack-probes-lto.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -12,6 +12,7 @@\n // ignore-sgx no processes\n // ignore-musl FIXME #31506\n // ignore-pretty\n+// ignore-fuchsia no exception handler registered for segfault\n // compile-flags: -C lto\n // no-prefer-dynamic\n "}, {"sha": "b497af7abad5079d7c5d2d20c31030400ac5d39a", "filename": "src/test/ui/abi/stack-probes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -10,6 +10,7 @@\n // ignore-wasm\n // ignore-emscripten no processes\n // ignore-sgx no processes\n+// ignore-fuchsia no exception handler registered for segfault\n \n use std::env;\n use std::mem::MaybeUninit;"}, {"sha": "9e3794b0484e7f5c4f24daa8b3148eb9baa758bd", "filename": "src/test/ui/async-await/async-fn-size-moved-locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -8,6 +8,7 @@\n // See issue #59123 for a full explanation.\n \n // ignore-emscripten (sizes don't match)\n+// needs-unwind Size of Futures change on panic=abort\n // run-pass\n \n // edition:2018"}, {"sha": "5461726935457b6c3688ea4b8ddcb5a1582a68ff", "filename": "src/test/ui/async-await/async-fn-size-uninit-locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-uninit-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-uninit-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-uninit-locals.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -5,6 +5,7 @@\n // being reflected in the size.\n \n // ignore-emscripten (sizes don't match)\n+// needs-unwind Size of Futures change on panic=abort\n // run-pass\n \n // edition:2018"}, {"sha": "032dad1840d4727da857d4c2e9aff91f77146f8e", "filename": "src/test/ui/command/command-exec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fcommand%2Fcommand-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fcommand%2Fcommand-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-exec.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -5,6 +5,7 @@\n // ignore-pretty issue #37199\n // ignore-emscripten no processes\n // ignore-sgx no processes\n+// ignore-fuchsia no execvp syscall provided\n \n #![feature(process_exec)]\n "}, {"sha": "601a314182876c6ca52e598389c3d5b8de013464", "filename": "src/test/ui/generator/size-moved-locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -12,6 +12,7 @@\n // edition:2018\n // ignore-wasm32 issue #62807\n // ignore-asmjs issue #62807\n+// needs-unwind Size of Closures change on panic=abort\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "c14e52dfe4cf444c46802bcd196f43ae44c80b5b", "filename": "src/test/ui/issues/issue-87707.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fissues%2Fissue-87707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fissues%2Fissue-87707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-87707.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -3,6 +3,7 @@\n // run-fail\n // exec-env:RUST_BACKTRACE=0\n // check-run-results\n+// needs-unwind uses catch_unwind\n \n use std::sync::Once;\n use std::panic;"}, {"sha": "527c78ba89e91ff6a44301eec59c3aec289967b7", "filename": "src/test/ui/issues/issue-87707.run.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fissues%2Fissue-87707.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fissues%2Fissue-87707.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-87707.run.stderr?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -1,3 +1,3 @@\n-thread 'main' panicked at 'Here Once instance is poisoned.', $DIR/issue-87707.rs:13:24\n+thread 'main' panicked at 'Here Once instance is poisoned.', $DIR/issue-87707.rs:14:24\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n-thread 'main' panicked at 'Once instance has previously been poisoned', $DIR/issue-87707.rs:15:7\n+thread 'main' panicked at 'Once instance has previously been poisoned', $DIR/issue-87707.rs:16:7"}, {"sha": "b8b6f0846bb44e693408e9f94f83bc03fdd2bf52", "filename": "src/test/ui/macros/rfc-2011-nicer-assert-messages/all-expr-kinds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fall-expr-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fall-expr-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fall-expr-kinds.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -2,6 +2,7 @@\n // ignore-tidy-linelength\n // only-x86_64\n // run-pass\n+// needs-unwind Asserting on contents of error message\n \n #![allow(path_statements, unused_allocation)]\n #![feature(box_syntax, core_intrinsics, generic_assert, generic_assert_internals)]"}, {"sha": "d46f396ee2970d49279291c9e46fb91f508cbf16", "filename": "src/test/ui/macros/rfc-2011-nicer-assert-messages/all-not-available-cases.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fall-not-available-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fall-not-available-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fall-not-available-cases.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -2,6 +2,7 @@\n // ignore-tidy-linelength\n // only-x86_64\n // run-pass\n+// needs-unwind Asserting on contents of error message\n \n #![feature(core_intrinsics, generic_assert, generic_assert_internals)]\n "}, {"sha": "1f5a29ab524f2b21a7fb2ee42b06e35c9e84703d", "filename": "src/test/ui/macros/rfc-2011-nicer-assert-messages/assert-without-captures-does-not-create-unnecessary-code.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fassert-without-captures-does-not-create-unnecessary-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fassert-without-captures-does-not-create-unnecessary-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fassert-without-captures-does-not-create-unnecessary-code.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -1,6 +1,7 @@\n // aux-build:common.rs\n // only-x86_64\n // run-pass\n+// needs-unwind Asserting on contents of error message\n \n #![feature(core_intrinsics, generic_assert, generic_assert_internals)]\n "}, {"sha": "9519ed7b4c7b17df58b13db0e10837235d66f21b", "filename": "src/test/ui/process/signal-exit-status.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fprocess%2Fsignal-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fprocess%2Fsignal-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fsignal-exit-status.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -2,6 +2,7 @@\n // ignore-emscripten no processes\n // ignore-sgx no processes\n // ignore-windows\n+// ignore-fuchsia code returned as ZX_TASK_RETCODE_EXCEPTION_KILL, FIXME (#58590)\n \n use std::env;\n use std::process::Command;"}, {"sha": "6873abc49b244ca3301169ae51994908482f7015", "filename": "src/test/ui/runtime/out-of-stack.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fruntime%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftest%2Fui%2Fruntime%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fruntime%2Fout-of-stack.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -5,6 +5,7 @@\n // ignore-android: FIXME (#20004)\n // ignore-emscripten no processes\n // ignore-sgx no processes\n+// ignore-fuchsia must translate zircon signal to SIGABRT, FIXME (#58590)\n \n #![feature(core_intrinsics)]\n #![feature(rustc_private)]"}, {"sha": "bf07cd75cab565730c0b85cfbf67f7beaed031dd", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -543,8 +543,18 @@ impl Builder {\n             for (substr, fallback_target) in fallback {\n                 if target_name.contains(substr) {\n                     let t = Target::from_compressed_tar(self, &tarball_name!(fallback_target));\n-                    // Fallbacks must always be available.\n-                    assert!(t.available);\n+                    // Fallbacks should typically be available on 'production' builds\n+                    // but may not be available for try builds, which only build one target by\n+                    // default. Ideally we'd gate this being a hard error on whether we're in a\n+                    // production build or not, but it's not information that's readily available\n+                    // here.\n+                    if !t.available {\n+                        eprintln!(\n+                            \"{:?} not available for fallback\",\n+                            tarball_name!(fallback_target)\n+                        );\n+                        continue;\n+                    }\n                     return t;\n                 }\n             }"}, {"sha": "b898f20a5d018b30a0b47bbd6452ca25547adc04", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -21,6 +21,7 @@ mod os_impl {\n \n #[cfg(unix)]\n mod os_impl {\n+    use crate::walk::{filter_dirs, walk_no_read};\n     use std::fs;\n     use std::os::unix::prelude::*;\n     use std::path::Path;\n@@ -100,10 +101,10 @@ mod os_impl {\n \n         const ALLOWED: &[&str] = &[\"configure\", \"x\"];\n \n-        crate::walk_no_read(\n+        walk_no_read(\n             path,\n             &mut |path| {\n-                crate::filter_dirs(path)\n+                filter_dirs(path)\n                     || path.ends_with(\"src/etc\")\n                     // This is a list of directories that we almost certainly\n                     // don't need to walk. A future PR will likely want to"}, {"sha": "9880a32ad0c28433704bb77504696c7d96254452", "filename": "src/tools/tidy/src/debug_artifacts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -1,13 +1,14 @@\n //! Tidy check to prevent creation of unnecessary debug artifacts while running tests.\n \n+use crate::walk::{filter_dirs, walk};\n use std::path::{Path, PathBuf};\n \n const GRAPHVIZ_POSTFLOW_MSG: &str = \"`borrowck_graphviz_postflow` attribute in test\";\n \n pub fn check(path: &Path, bad: &mut bool) {\n     let test_dir: PathBuf = path.join(\"test\");\n \n-    super::walk(&test_dir, &mut super::filter_dirs, &mut |entry, contents| {\n+    walk(&test_dir, &mut filter_dirs, &mut |entry, contents| {\n         let filename = entry.path();\n         let is_rust = filename.extension().map_or(false, |ext| ext == \"rs\");\n         if !is_rust {"}, {"sha": "8a7c4460dc7eaed4dc7a24723d14c17f159e42d9", "filename": "src/tools/tidy/src/edition.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -1,5 +1,6 @@\n //! Tidy check to ensure that crate `edition` is '2018' or '2021'.\n \n+use crate::walk::{filter_dirs, walk};\n use std::path::Path;\n \n fn is_edition_2021(mut line: &str) -> bool {\n@@ -8,9 +9,9 @@ fn is_edition_2021(mut line: &str) -> bool {\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    super::walk(\n+    walk(\n         path,\n-        &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),\n+        &mut |path| filter_dirs(path) || path.ends_with(\"src/test\"),\n         &mut |entry, contents| {\n             let file = entry.path();\n             let filename = file.file_name().unwrap();"}, {"sha": "610e322e12963e63854e0b3ba08b5300762abacd", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -1,6 +1,7 @@\n //! Checks that all error codes have at least one test to prevent having error\n //! codes that are silently not thrown by the compiler anymore.\n \n+use crate::walk::{filter_dirs, walk};\n use std::collections::{HashMap, HashSet};\n use std::ffi::OsStr;\n use std::fs::read_to_string;\n@@ -217,7 +218,7 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n     println!(\"Checking which error codes lack tests...\");\n \n     for path in paths {\n-        super::walk(path, &mut super::filter_dirs, &mut |entry, contents| {\n+        walk(path, &mut filter_dirs, &mut |entry, contents| {\n             let file_name = entry.file_name();\n             let entry_path = entry.path();\n "}, {"sha": "fe5fd72b91a49946337ed8bdda075d9b41733dae", "filename": "src/tools/tidy/src/errors.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -3,14 +3,15 @@\n //! This ensures that error codes are used at most once and also prints out some\n //! statistics about the error codes.\n \n+use crate::walk::{filter_dirs, walk};\n use std::collections::HashMap;\n use std::path::Path;\n \n pub fn check(path: &Path, bad: &mut bool) {\n     let mut map: HashMap<_, Vec<_>> = HashMap::new();\n-    super::walk(\n+    walk(\n         path,\n-        &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),\n+        &mut |path| filter_dirs(path) || path.ends_with(\"src/test\"),\n         &mut |entry, contents| {\n             let file = entry.path();\n             let filename = file.file_name().unwrap().to_string_lossy();"}, {"sha": "28a0700a64bfdb8a27b6fd8e2d6464906126097d", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -9,6 +9,7 @@\n //! * All unstable lang features have tests to ensure they are actually unstable.\n //! * Language features in a group are sorted by feature name.\n \n+use crate::walk::{filter_dirs, walk, walk_many};\n use std::collections::HashMap;\n use std::fmt;\n use std::fs;\n@@ -92,14 +93,14 @@ pub fn check(\n     let lib_features = get_and_check_lib_features(lib_path, bad, &features);\n     assert!(!lib_features.is_empty());\n \n-    super::walk_many(\n+    walk_many(\n         &[\n             &src_path.join(\"test/ui\"),\n             &src_path.join(\"test/ui-fulldeps\"),\n             &src_path.join(\"test/rustdoc-ui\"),\n             &src_path.join(\"test/rustdoc\"),\n         ],\n-        &mut |path| super::filter_dirs(path),\n+        &mut filter_dirs,\n         &mut |entry, contents| {\n             let file = entry.path();\n             let filename = file.file_name().unwrap().to_string_lossy();\n@@ -466,9 +467,9 @@ fn map_lib_features(\n     base_src_path: &Path,\n     mf: &mut dyn FnMut(Result<(&str, Feature), &str>, &Path, usize),\n ) {\n-    super::walk(\n+    walk(\n         base_src_path,\n-        &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),\n+        &mut |path| filter_dirs(path) || path.ends_with(\"src/test\"),\n         &mut |entry, contents| {\n             let file = entry.path();\n             let filename = file.file_name().unwrap().to_string_lossy();"}, {"sha": "e82cca402e2d8b550e1a883f074ae9ea41831495", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -3,8 +3,6 @@\n //! This library contains the tidy lints and exposes it\n //! to be used by tools.\n \n-use walk::{filter_dirs, walk, walk_many, walk_no_read};\n-\n /// A helper macro to `unwrap` a result except also print out details like:\n ///\n /// * The expression that failed"}, {"sha": "f4592fdcff9dcb5f65a2f612c62b9fafb3665414", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -30,6 +30,7 @@\n //! platform-specific cfgs are allowed. Not sure yet how to deal with\n //! this in the long term.\n \n+use crate::walk::{filter_dirs, walk};\n use std::iter::Iterator;\n use std::path::Path;\n \n@@ -67,7 +68,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n     // Sanity check that the complex parsing here works.\n     let mut saw_target_arch = false;\n     let mut saw_cfg_bang = false;\n-    super::walk(path, &mut super::filter_dirs, &mut |entry, contents| {\n+    walk(path, &mut filter_dirs, &mut |entry, contents| {\n         let file = entry.path();\n         let filestr = file.to_string_lossy().replace(\"\\\\\", \"/\");\n         if !filestr.ends_with(\".rs\") {"}, {"sha": "541380cebde8d07d5211a78744bf281f97da0a2b", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -16,6 +16,7 @@\n //! A number of these checks can be opted-out of with various directives of the form:\n //! `// ignore-tidy-CHECK-NAME`.\n \n+use crate::walk::{filter_dirs, walk};\n use regex::Regex;\n use std::path::Path;\n \n@@ -218,13 +219,13 @@ fn is_unexplained_ignore(extension: &str, line: &str) -> bool {\n \n pub fn check(path: &Path, bad: &mut bool) {\n     fn skip(path: &Path) -> bool {\n-        super::filter_dirs(path) || skip_markdown_path(path)\n+        filter_dirs(path) || skip_markdown_path(path)\n     }\n     let problematic_consts_strings: Vec<String> = (PROBLEMATIC_CONSTS.iter().map(u32::to_string))\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:x}\", v)))\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:X}\", v)))\n         .collect();\n-    super::walk(path, &mut skip, &mut |entry, contents| {\n+    walk(path, &mut skip, &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n         let extensions = [\".rs\", \".py\", \".js\", \".sh\", \".c\", \".cpp\", \".h\", \".md\", \".css\", \".ftl\"];"}, {"sha": "8ba25705666a9479b4c1e9a4ce0778c003447512", "filename": "src/tools/tidy/src/target_specific_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -36,7 +36,7 @@ struct RevisionInfo<'a> {\n \n pub fn check(path: &Path, bad: &mut bool) {\n     let tests = path.join(\"test\");\n-    super::walk(\n+    crate::walk::walk(\n         &tests,\n         &mut |path| path.extension().map(|p| p == \"rs\") == Some(false),\n         &mut |entry, content| {"}, {"sha": "969d5fec60f371116b36ea0a756a14af618f8a01", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -47,7 +47,7 @@ fn check_entries(path: &Path, bad: &mut bool) {\n pub fn check(path: &Path, bad: &mut bool) {\n     check_entries(&path, bad);\n     for path in &[&path.join(\"test/ui\"), &path.join(\"test/ui-fulldeps\")] {\n-        super::walk_no_read(path, &mut |_| false, &mut |entry| {\n+        crate::walk::walk_no_read(path, &mut |_| false, &mut |entry| {\n             let file_path = entry.path();\n             if let Some(ext) = file_path.extension() {\n                 if ext == \"stderr\" || ext == \"stdout\" {"}, {"sha": "2c23b6ebc75e2c996c8eec89cf0ed772895fe7cd", "filename": "src/tools/tidy/src/unit_tests.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs?ref=626b02a8f97a9e35a647aa18fcdb67cbcb3b09c8", "patch": "@@ -7,6 +7,7 @@\n //! named `tests.rs` or `benches.rs`, or directories named `tests` or `benches` unconfigured\n //! during normal build.\n \n+use crate::walk::{filter_dirs, walk};\n use std::path::Path;\n \n pub fn check(root_path: &Path, bad: &mut bool) {\n@@ -20,7 +21,7 @@ pub fn check(root_path: &Path, bad: &mut bool) {\n     let mut skip = |path: &Path| {\n         let file_name = path.file_name().unwrap_or_default();\n         if path.is_dir() {\n-            super::filter_dirs(path)\n+            filter_dirs(path)\n                 || path.ends_with(\"src/test\")\n                 || path.ends_with(\"src/doc\")\n                 || (file_name == \"tests\" || file_name == \"benches\") && !is_core(path)\n@@ -34,7 +35,7 @@ pub fn check(root_path: &Path, bad: &mut bool) {\n         }\n     };\n \n-    super::walk(root_path, &mut skip, &mut |entry, contents| {\n+    walk(root_path, &mut skip, &mut |entry, contents| {\n         let path = entry.path();\n         let is_core = path.starts_with(core);\n         for (i, line) in contents.lines().enumerate() {"}]}