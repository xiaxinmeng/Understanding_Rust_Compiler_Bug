{"sha": "332799d914bdd35740c25c27f5bac7e4b3cba6c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMjc5OWQ5MTRiZGQzNTc0MGMyNWMyN2Y1YmFjN2U0YjNjYmE2Yzc=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-20T20:09:23Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-30T10:39:14Z"}, "message": "Reload only the properties that do not affect vfs", "tree": {"sha": "6f74a8011ecd46f16bd7476df7c2dafdcf7aa1c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f74a8011ecd46f16bd7476df7c2dafdcf7aa1c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/332799d914bdd35740c25c27f5bac7e4b3cba6c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/332799d914bdd35740c25c27f5bac7e4b3cba6c7", "html_url": "https://github.com/rust-lang/rust/commit/332799d914bdd35740c25c27f5bac7e4b3cba6c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/332799d914bdd35740c25c27f5bac7e4b3cba6c7/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2feaef91bd640dd842ee8e1f6244b877124eb8eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2feaef91bd640dd842ee8e1f6244b877124eb8eb", "html_url": "https://github.com/rust-lang/rust/commit/2feaef91bd640dd842ee8e1f6244b877124eb8eb"}], "stats": {"total": 149, "additions": 89, "deletions": 60}, "files": [{"sha": "937c9caa51868b4dbdf757a8ee64bfd097638843", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/332799d914bdd35740c25c27f5bac7e4b3cba6c7/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332799d914bdd35740c25c27f5bac7e4b3cba6c7/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=332799d914bdd35740c25c27f5bac7e4b3cba6c7", "patch": "@@ -138,6 +138,11 @@ impl AnalysisHost {\n     pub fn new(lru_capacity: Option<usize>) -> AnalysisHost {\n         AnalysisHost { db: RootDatabase::new(lru_capacity) }\n     }\n+\n+    pub fn update_lru_capacity(&mut self, lru_capacity: Option<usize>) {\n+        self.db.update_lru_capacity(lru_capacity);\n+    }\n+\n     /// Returns a snapshot of the current state, which you can query for\n     /// semantic information.\n     pub fn analysis(&self) -> Analysis {"}, {"sha": "e6f2d36e946324f2107351e6631a77fad49b79c4", "filename": "crates/ra_ide_db/src/lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/332799d914bdd35740c25c27f5bac7e4b3cba6c7/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332799d914bdd35740c25c27f5bac7e4b3cba6c7/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=332799d914bdd35740c25c27f5bac7e4b3cba6c7", "patch": "@@ -115,12 +115,16 @@ impl RootDatabase {\n         db.set_crate_graph_with_durability(Default::default(), Durability::HIGH);\n         db.set_local_roots_with_durability(Default::default(), Durability::HIGH);\n         db.set_library_roots_with_durability(Default::default(), Durability::HIGH);\n-        let lru_capacity = lru_capacity.unwrap_or(ra_db::DEFAULT_LRU_CAP);\n-        db.query_mut(ra_db::ParseQuery).set_lru_capacity(lru_capacity);\n-        db.query_mut(hir::db::ParseMacroQuery).set_lru_capacity(lru_capacity);\n-        db.query_mut(hir::db::MacroExpandQuery).set_lru_capacity(lru_capacity);\n+        db.update_lru_capacity(lru_capacity);\n         db\n     }\n+\n+    pub fn update_lru_capacity(&mut self, lru_capacity: Option<usize>) {\n+        let lru_capacity = lru_capacity.unwrap_or(ra_db::DEFAULT_LRU_CAP);\n+        self.query_mut(ra_db::ParseQuery).set_lru_capacity(lru_capacity);\n+        self.query_mut(hir::db::ParseMacroQuery).set_lru_capacity(lru_capacity);\n+        self.query_mut(hir::db::MacroExpandQuery).set_lru_capacity(lru_capacity);\n+    }\n }\n \n impl salsa::ParallelDatabase for RootDatabase {"}, {"sha": "85bde90bbc26fd0ae862a7d99982f827ca817d7f", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 65, "deletions": 56, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/332799d914bdd35740c25c27f5bac7e4b3cba6c7/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332799d914bdd35740c25c27f5bac7e4b3cba6c7/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=332799d914bdd35740c25c27f5bac7e4b3cba6c7", "patch": "@@ -17,8 +17,9 @@ use std::{\n use crossbeam_channel::{never, select, unbounded, RecvError, Sender};\n use lsp_server::{Connection, ErrorCode, Message, Notification, Request, RequestId, Response};\n use lsp_types::{\n-    ClientCapabilities, NumberOrString, WorkDoneProgress, WorkDoneProgressBegin,\n-    WorkDoneProgressCreateParams, WorkDoneProgressEnd, WorkDoneProgressReport,\n+    ClientCapabilities, NumberOrString, TextDocumentClientCapabilities, WorkDoneProgress,\n+    WorkDoneProgressBegin, WorkDoneProgressCreateParams, WorkDoneProgressEnd,\n+    WorkDoneProgressReport,\n };\n use ra_cargo_watch::{url_from_path_with_drive_lowercasing, CheckOptions, CheckTask};\n use ra_ide::{Canceled, FileId, InlayHintsOptions, LibraryData, SourceRootId};\n@@ -64,6 +65,53 @@ impl fmt::Display for LspError {\n \n impl Error for LspError {}\n \n+fn get_feature_flags(config: &ServerConfig, connection: &Connection) -> FeatureFlags {\n+    let mut ff = FeatureFlags::default();\n+    for (flag, &value) in &config.feature_flags {\n+        if ff.set(flag.as_str(), value).is_err() {\n+            log::error!(\"unknown feature flag: {:?}\", flag);\n+            show_message(\n+                req::MessageType::Error,\n+                format!(\"unknown feature flag: {:?}\", flag),\n+                &connection.sender,\n+            );\n+        }\n+    }\n+    log::info!(\"feature_flags: {:#?}\", ff);\n+    ff\n+}\n+\n+fn get_options(\n+    config: &ServerConfig,\n+    text_document_caps: Option<&TextDocumentClientCapabilities>,\n+) -> Options {\n+    Options {\n+        publish_decorations: config.publish_decorations,\n+        supports_location_link: text_document_caps\n+            .and_then(|it| it.definition)\n+            .and_then(|it| it.link_support)\n+            .unwrap_or(false),\n+        line_folding_only: text_document_caps\n+            .and_then(|it| it.folding_range.as_ref())\n+            .and_then(|it| it.line_folding_only)\n+            .unwrap_or(false),\n+        inlay_hints: InlayHintsOptions {\n+            type_hints: config.inlay_hints_type,\n+            parameter_hints: config.inlay_hints_parameter,\n+            chaining_hints: config.inlay_hints_chaining,\n+            max_length: config.inlay_hints_max_length,\n+        },\n+        cargo_watch: CheckOptions {\n+            enable: config.cargo_watch_enable,\n+            args: config.cargo_watch_args.clone(),\n+            command: config.cargo_watch_command.clone(),\n+            all_targets: config.cargo_watch_all_targets,\n+        },\n+        rustfmt_args: config.rustfmt_args.clone(),\n+        vscode_lldb: config.vscode_lldb,\n+    }\n+}\n+\n pub fn main_loop(\n     ws_roots: Vec<PathBuf>,\n     client_caps: ClientCapabilities,\n@@ -91,23 +139,10 @@ pub fn main_loop(\n         SetThreadPriority(thread, thread_priority_above_normal);\n     }\n \n+    let text_document_caps = client_caps.text_document.as_ref();\n     let mut loop_state = LoopState::default();\n     let mut world_state = {\n-        let feature_flags = {\n-            let mut ff = FeatureFlags::default();\n-            for (flag, value) in config.feature_flags {\n-                if ff.set(flag.as_str(), value).is_err() {\n-                    log::error!(\"unknown feature flag: {:?}\", flag);\n-                    show_message(\n-                        req::MessageType::Error,\n-                        format!(\"unknown feature flag: {:?}\", flag),\n-                        &connection.sender,\n-                    );\n-                }\n-            }\n-            ff\n-        };\n-        log::info!(\"feature_flags: {:#?}\", feature_flags);\n+        let feature_flags = get_feature_flags(&config, &connection);\n \n         // FIXME: support dynamic workspace loading.\n         let workspaces = {\n@@ -169,42 +204,13 @@ pub fn main_loop(\n             connection.sender.send(request.into()).unwrap();\n         }\n \n-        let options = {\n-            let text_document_caps = client_caps.text_document.as_ref();\n-            Options {\n-                publish_decorations: config.publish_decorations,\n-                supports_location_link: text_document_caps\n-                    .and_then(|it| it.definition)\n-                    .and_then(|it| it.link_support)\n-                    .unwrap_or(false),\n-                line_folding_only: text_document_caps\n-                    .and_then(|it| it.folding_range.as_ref())\n-                    .and_then(|it| it.line_folding_only)\n-                    .unwrap_or(false),\n-                inlay_hints: InlayHintsOptions {\n-                    type_hints: config.inlay_hints_type,\n-                    parameter_hints: config.inlay_hints_parameter,\n-                    chaining_hints: config.inlay_hints_chaining,\n-                    max_length: config.inlay_hints_max_length,\n-                },\n-                cargo_watch: CheckOptions {\n-                    enable: config.cargo_watch_enable,\n-                    args: config.cargo_watch_args,\n-                    command: config.cargo_watch_command,\n-                    all_targets: config.cargo_watch_all_targets,\n-                },\n-                rustfmt_args: config.rustfmt_args,\n-                vscode_lldb: config.vscode_lldb,\n-            }\n-        };\n-\n         WorldState::new(\n             ws_roots,\n             workspaces,\n             config.lru_capacity,\n             &globs,\n             Watch(!config.use_client_watching),\n-            options,\n+            get_options(&config, text_document_caps),\n             feature_flags,\n         )\n     };\n@@ -243,17 +249,16 @@ pub fn main_loop(\n                     break;\n                 };\n             }\n-            if let Some(new_server_config) = loop_turn(\n+            loop_turn(\n                 &pool,\n                 &task_sender,\n                 &libdata_sender,\n                 &connection,\n+                text_document_caps,\n                 &mut world_state,\n                 &mut loop_state,\n                 event,\n-            )? {\n-                dbg!(new_server_config);\n-            }\n+            )?;\n         }\n     }\n     world_state.analysis_host.request_cancellation();\n@@ -360,10 +365,11 @@ fn loop_turn(\n     task_sender: &Sender<Task>,\n     libdata_sender: &Sender<LibraryData>,\n     connection: &Connection,\n+    text_document_caps: Option<&TextDocumentClientCapabilities>,\n     world_state: &mut WorldState,\n     loop_state: &mut LoopState,\n     event: Event,\n-) -> Result<Option<ServerConfig>> {\n+) -> Result<()> {\n     let loop_start = Instant::now();\n \n     // NOTE: don't count blocking select! call as a loop-turn time\n@@ -374,8 +380,6 @@ fn loop_turn(\n         log::info!(\"queued count = {}\", queue_count);\n     }\n \n-    let mut new_server_config = None;\n-\n     match event {\n         Event::Task(task) => {\n             on_task(task, &connection.sender, &mut loop_state.pending_requests, world_state);\n@@ -411,13 +415,18 @@ fn loop_turn(\n                 }\n                 if Some(&resp.id) == loop_state.configuration_request_id.as_ref() {\n                     loop_state.configuration_request_id.take();\n+                    // TODO kb unwrap-unwrap-unwrap\n                     let new_config =\n                         serde_json::from_value::<Vec<ServerConfig>>(resp.result.unwrap())\n                             .unwrap()\n                             .first()\n                             .unwrap()\n                             .to_owned();\n-                    new_server_config = Some(new_config);\n+                    world_state.update_configuration(\n+                        new_config.lru_capacity,\n+                        get_options(&new_config, text_document_caps),\n+                        get_feature_flags(&new_config, connection),\n+                    );\n                 }\n             }\n         },\n@@ -488,7 +497,7 @@ fn loop_turn(\n         }\n     }\n \n-    Ok(new_server_config)\n+    Ok(())\n }\n \n fn on_task("}, {"sha": "d77844a3630872de17bdce42663139a3889be58f", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/332799d914bdd35740c25c27f5bac7e4b3cba6c7/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/332799d914bdd35740c25c27f5bac7e4b3cba6c7/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=332799d914bdd35740c25c27f5bac7e4b3cba6c7", "patch": "@@ -199,6 +199,17 @@ impl WorldState {\n         }\n     }\n \n+    pub fn update_configuration(\n+        &mut self,\n+        lru_capacity: Option<usize>,\n+        options: Options,\n+        feature_flags: FeatureFlags,\n+    ) {\n+        self.feature_flags = Arc::new(feature_flags);\n+        self.analysis_host.update_lru_capacity(lru_capacity);\n+        self.options = options;\n+    }\n+\n     /// Returns a vec of libraries\n     /// FIXME: better API here\n     pub fn process_changes("}]}