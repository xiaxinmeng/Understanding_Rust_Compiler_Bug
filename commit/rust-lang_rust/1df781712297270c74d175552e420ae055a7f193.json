{"sha": "1df781712297270c74d175552e420ae055a7f193", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZjc4MTcxMjI5NzI3MGM3NGQxNzU1NTJlNDIwYWUwNTVhN2YxOTM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-06-07T15:07:05Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-06-07T15:07:05Z"}, "message": "Revert \"Auto merge of #49719 - mark-i-m:no_sep, r=petrochenkov\"\n\nThis reverts commit d6ba1b9b021c408fcad60ee52acf8af5e1b2eb00, reversing\nchanges made to 8de5353f75dcde04abe947e0560dc5edd861cf3a.", "tree": {"sha": "5fe895051754a9688dc0885132bfd070ef395d97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fe895051754a9688dc0885132bfd070ef395d97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1df781712297270c74d175552e420ae055a7f193", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCAAGBQJbGUocAAoJEOjBBC3RYkUZ1ksIAIj9fSpcUjTVXQDbzPfQ+mtz\nc3RR5VeelTAerxb8xtUB0r+tfcQ8KxmJ1uuvrRK7HwhHpsNgcPLQuZ43VWEU9hxU\nDXee6GrJZ/2Z2y6xScIafOxQFY/8BUsCyIc2iw7kHlw50d1L3LvRfihs0Cdg0+M9\nR3366qwK9Lfi0x1ys8o2BiCU4+rmFoqEUohWV933HPC+kTSF9ZSUx37fmHq8kaul\nzp9Zkg9G8HE8FpqheN/++qa4IvbpgTditBlsgrbQbamzXXD+dzqSwzSkgY9WQ5Tj\nfWoG7tnEXm6+7IAruXCyYQdt5pxGAsIdCpjvq5YVp6YunFClGYLCYlahc9nYkmc=\n=VjgW\n-----END PGP SIGNATURE-----", "payload": "tree 5fe895051754a9688dc0885132bfd070ef395d97\nparent c131bdcaff68d35f96e954baac4340206779335f\nauthor Pietro Albini <pietro@pietroalbini.org> 1528384025 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1528384025 +0200\n\nRevert \"Auto merge of #49719 - mark-i-m:no_sep, r=petrochenkov\"\n\nThis reverts commit d6ba1b9b021c408fcad60ee52acf8af5e1b2eb00, reversing\nchanges made to 8de5353f75dcde04abe947e0560dc5edd861cf3a.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1df781712297270c74d175552e420ae055a7f193", "html_url": "https://github.com/rust-lang/rust/commit/1df781712297270c74d175552e420ae055a7f193", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1df781712297270c74d175552e420ae055a7f193/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c131bdcaff68d35f96e954baac4340206779335f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c131bdcaff68d35f96e954baac4340206779335f", "html_url": "https://github.com/rust-lang/rust/commit/c131bdcaff68d35f96e954baac4340206779335f"}], "stats": {"total": 228, "additions": 156, "deletions": 72}, "files": [{"sha": "01b971976a763c3d49bf72f5283e2303e52f0442", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 67, "deletions": 22, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/1df781712297270c74d175552e420ae055a7f193/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df781712297270c74d175552e420ae055a7f193/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=1df781712297270c74d175552e420ae055a7f193", "patch": "@@ -386,26 +386,72 @@ where\n {\n     // We basically look at two token trees here, denoted as #1 and #2 below\n     let span = match parse_kleene_op(input, span) {\n-        // #1 is any KleeneOp (`?`)\n-        Ok(Ok(op)) if op == KleeneOp::ZeroOrOne => {\n-            if !features.macro_at_most_once_rep\n-                && !attr::contains_name(attrs, \"allow_internal_unstable\")\n-            {\n-                let explain = feature_gate::EXPLAIN_MACRO_AT_MOST_ONCE_REP;\n-                emit_feature_err(\n-                    sess,\n-                    \"macro_at_most_once_rep\",\n-                    span,\n-                    GateIssue::Language,\n-                    explain,\n-                );\n+        // #1 is a `+` or `*` KleeneOp\n+        //\n+        // `?` is ambiguous: it could be a separator or a Kleene::ZeroOrOne, so we need to look\n+        // ahead one more token to be sure.\n+        Ok(Ok(op)) if op != KleeneOp::ZeroOrOne => return (None, op),\n+\n+        // #1 is `?` token, but it could be a Kleene::ZeroOrOne without a separator or it could\n+        // be a `?` separator followed by any Kleene operator. We need to look ahead 1 token to\n+        // find out which.\n+        Ok(Ok(op)) => {\n+            assert_eq!(op, KleeneOp::ZeroOrOne);\n+\n+            // Lookahead at #2. If it is a KleenOp, then #1 is a separator.\n+            let is_1_sep = if let Some(&tokenstream::TokenTree::Token(_, ref tok2)) = input.peek() {\n+                kleene_op(tok2).is_some()\n+            } else {\n+                false\n+            };\n+\n+            if is_1_sep {\n+                // #1 is a separator and #2 should be a KleepeOp::*\n+                // (N.B. We need to advance the input iterator.)\n+                match parse_kleene_op(input, span) {\n+                    // #2 is a KleeneOp (this is the only valid option) :)\n+                    Ok(Ok(op)) if op == KleeneOp::ZeroOrOne => {\n+                        if !features.macro_at_most_once_rep\n+                            && !attr::contains_name(attrs, \"allow_internal_unstable\")\n+                        {\n+                            let explain = feature_gate::EXPLAIN_MACRO_AT_MOST_ONCE_REP;\n+                            emit_feature_err(\n+                                sess,\n+                                \"macro_at_most_once_rep\",\n+                                span,\n+                                GateIssue::Language,\n+                                explain,\n+                            );\n+                        }\n+                        return (Some(token::Question), op);\n+                    }\n+                    Ok(Ok(op)) => return (Some(token::Question), op),\n+\n+                    // #2 is a random token (this is an error) :(\n+                    Ok(Err((_, span))) => span,\n+\n+                    // #2 is not even a token at all :(\n+                    Err(span) => span,\n+                }\n+            } else {\n+                if !features.macro_at_most_once_rep\n+                    && !attr::contains_name(attrs, \"allow_internal_unstable\")\n+                {\n+                    let explain = feature_gate::EXPLAIN_MACRO_AT_MOST_ONCE_REP;\n+                    emit_feature_err(\n+                        sess,\n+                        \"macro_at_most_once_rep\",\n+                        span,\n+                        GateIssue::Language,\n+                        explain,\n+                    );\n+                }\n+\n+                // #2 is a random tree and #1 is KleeneOp::ZeroOrOne\n+                return (None, op);\n             }\n-            return (None, op);\n         }\n \n-        // #1 is any KleeneOp (`+`, `*`)\n-        Ok(Ok(op)) => return (None, op),\n-\n         // #1 is a separator followed by #2, a KleeneOp\n         Ok(Err((tok, span))) => match parse_kleene_op(input, span) {\n             // #2 is a KleeneOp :D\n@@ -421,11 +467,8 @@ where\n                         GateIssue::Language,\n                         explain,\n                     );\n-                } else {\n-                    sess.span_diagnostic\n-                        .span_err(span, \"`?` macro repetition does not allow a separator\");\n                 }\n-                return (None, op);\n+                return (Some(tok), op);\n             }\n             Ok(Ok(op)) => return (Some(tok), op),\n \n@@ -440,7 +483,9 @@ where\n         Err(span) => span,\n     };\n \n-    if !features.macro_at_most_once_rep && !attr::contains_name(attrs, \"allow_internal_unstable\") {\n+    if !features.macro_at_most_once_rep\n+        && !attr::contains_name(attrs, \"allow_internal_unstable\")\n+    {\n         sess.span_diagnostic\n             .span_err(span, \"expected one of: `*`, `+`, or `?`\");\n     } else {"}, {"sha": "b7e942f938321ae8f033a65909cea38975d856e2", "filename": "src/test/run-pass/macro-at-most-once-rep.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1df781712297270c74d175552e420ae055a7f193/src%2Ftest%2Frun-pass%2Fmacro-at-most-once-rep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df781712297270c74d175552e420ae055a7f193/src%2Ftest%2Frun-pass%2Fmacro-at-most-once-rep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-at-most-once-rep.rs?ref=1df781712297270c74d175552e420ae055a7f193", "patch": "@@ -32,13 +32,25 @@ macro_rules! foo {\n     } }\n }\n \n+macro_rules! baz {\n+    ($($a:ident),? ; $num:expr) => { { // comma separator is meaningless for `?`\n+        let mut x = 0;\n+\n+        $(\n+            x += $a;\n+         )?\n+\n+        assert_eq!(x, $num);\n+    } }\n+}\n+\n macro_rules! barplus {\n     ($($a:ident)?+ ; $num:expr) => { {\n         let mut x = 0;\n \n         $(\n             x += $a;\n-         )?\n+         )+\n \n         assert_eq!(x, $num);\n     } }\n@@ -50,7 +62,7 @@ macro_rules! barstar {\n \n         $(\n             x += $a;\n-         )?\n+         )*\n \n         assert_eq!(x, $num);\n     } }\n@@ -62,10 +74,15 @@ pub fn main() {\n     // accept 0 or 1 repetitions\n     foo!( ; 0);\n     foo!(a ; 1);\n+    baz!( ; 0);\n+    baz!(a ; 1);\n \n     // Make sure using ? as a separator works as before\n-    barplus!(+ ; 0);\n-    barplus!(a + ; 1);\n-    barstar!(* ; 0);\n-    barstar!(a * ; 1);\n+    barplus!(a ; 1);\n+    barplus!(a?a ; 2);\n+    barplus!(a?a?a ; 3);\n+    barstar!( ; 0);\n+    barstar!(a ; 1);\n+    barstar!(a?a ; 2);\n+    barstar!(a?a?a ; 3);\n }"}, {"sha": "a5660f8b41f8da43aeeea29deefa8607dc764bf4", "filename": "src/test/ui/macros/macro-at-most-once-rep-ambig.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1df781712297270c74d175552e420ae055a7f193/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-ambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df781712297270c74d175552e420ae055a7f193/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-ambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-ambig.rs?ref=1df781712297270c74d175552e420ae055a7f193", "patch": "@@ -8,26 +8,30 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Tests the behavior of various Kleene operators in macros with respect to `?` terminals. In\n-// particular, `?` in the position of a separator and of a Kleene operator is tested.\n+// The logic for parsing Kleene operators in macros has a special case to disambiguate `?`.\n+// Specifically, `$(pat)?` is the ZeroOrOne operator whereas `$(pat)?+` or `$(pat)?*` are the\n+// ZeroOrMore and OneOrMore operators using `?` as a separator. These tests are intended to\n+// exercise that logic in the macro parser.\n+//\n+// Moreover, we also throw in some tests for using a separator with `?`, which is meaningless but\n+// included for consistency with `+` and `*`.\n+//\n+// This test focuses on error cases.\n \n #![feature(macro_at_most_once_rep)]\n \n-// should match `` and `a`\n macro_rules! foo {\n     ($(a)?) => {}\n }\n \n macro_rules! baz {\n-    ($(a),?) => {} //~ ERROR `?` macro repetition does not allow a separator\n+    ($(a),?) => {} // comma separator is meaningless for `?`\n }\n \n-// should match `+` and `a+`\n macro_rules! barplus {\n     ($(a)?+) => {}\n }\n \n-// should match `*` and `a*`\n macro_rules! barstar {\n     ($(a)?*) => {}\n }\n@@ -36,14 +40,14 @@ pub fn main() {\n     foo!(a?a?a); //~ ERROR no rules expected the token `?`\n     foo!(a?a); //~ ERROR no rules expected the token `?`\n     foo!(a?); //~ ERROR no rules expected the token `?`\n+    baz!(a?a?a); //~ ERROR no rules expected the token `?`\n+    baz!(a?a); //~ ERROR no rules expected the token `?`\n+    baz!(a?); //~ ERROR no rules expected the token `?`\n+    baz!(a,); //~ ERROR unexpected end of macro invocation\n+    baz!(a?a?a,); //~ ERROR no rules expected the token `?`\n+    baz!(a?a,); //~ ERROR no rules expected the token `?`\n+    baz!(a?,); //~ ERROR no rules expected the token `?`\n     barplus!(); //~ ERROR unexpected end of macro invocation\n-    barstar!(); //~ ERROR unexpected end of macro invocation\n-    barplus!(a?); //~ ERROR no rules expected the token `?`\n-    barplus!(a); //~ ERROR unexpected end of macro invocation\n-    barstar!(a?); //~ ERROR no rules expected the token `?`\n-    barstar!(a); //~ ERROR unexpected end of macro invocation\n-    barplus!(+); // ok\n-    barstar!(*); // ok\n-    barplus!(a+); // ok\n-    barstar!(a*); // ok\n+    barplus!(a?); //~ ERROR unexpected end of macro invocation\n+    barstar!(a?); //~ ERROR unexpected end of macro invocation\n }"}, {"sha": "d382082a5758562bb4f6163ef74237c8c0fbc3af", "filename": "src/test/ui/macros/macro-at-most-once-rep-ambig.stderr", "status": "modified", "additions": 47, "deletions": 29, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/1df781712297270c74d175552e420ae055a7f193/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1df781712297270c74d175552e420ae055a7f193/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-ambig.stderr?ref=1df781712297270c74d175552e420ae055a7f193", "patch": "@@ -1,62 +1,80 @@\n-error: `?` macro repetition does not allow a separator\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:22:10\n-   |\n-LL |     ($(a),?) => {} //~ ERROR `?` macro repetition does not allow a separator\n-   |          ^\n-\n error: no rules expected the token `?`\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:36:11\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:40:11\n    |\n LL |     foo!(a?a?a); //~ ERROR no rules expected the token `?`\n    |           ^\n \n error: no rules expected the token `?`\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:37:11\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:41:11\n    |\n LL |     foo!(a?a); //~ ERROR no rules expected the token `?`\n    |           ^\n \n error: no rules expected the token `?`\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:38:11\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:42:11\n    |\n LL |     foo!(a?); //~ ERROR no rules expected the token `?`\n    |           ^\n \n-error: unexpected end of macro invocation\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:39:5\n+error: no rules expected the token `?`\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:43:11\n    |\n-LL |     barplus!(); //~ ERROR unexpected end of macro invocation\n-   |     ^^^^^^^^^^^\n+LL |     baz!(a?a?a); //~ ERROR no rules expected the token `?`\n+   |           ^\n \n-error: unexpected end of macro invocation\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:40:5\n+error: no rules expected the token `?`\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:44:11\n    |\n-LL |     barstar!(); //~ ERROR unexpected end of macro invocation\n-   |     ^^^^^^^^^^^\n+LL |     baz!(a?a); //~ ERROR no rules expected the token `?`\n+   |           ^\n \n error: no rules expected the token `?`\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:41:15\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:45:11\n    |\n-LL |     barplus!(a?); //~ ERROR no rules expected the token `?`\n-   |               ^\n+LL |     baz!(a?); //~ ERROR no rules expected the token `?`\n+   |           ^\n \n error: unexpected end of macro invocation\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:42:14\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:46:11\n+   |\n+LL |     baz!(a,); //~ ERROR unexpected end of macro invocation\n+   |           ^\n+\n+error: no rules expected the token `?`\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:47:11\n+   |\n+LL |     baz!(a?a?a,); //~ ERROR no rules expected the token `?`\n+   |           ^\n+\n+error: no rules expected the token `?`\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:48:11\n    |\n-LL |     barplus!(a); //~ ERROR unexpected end of macro invocation\n-   |              ^\n+LL |     baz!(a?a,); //~ ERROR no rules expected the token `?`\n+   |           ^\n \n error: no rules expected the token `?`\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:43:15\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:49:11\n+   |\n+LL |     baz!(a?,); //~ ERROR no rules expected the token `?`\n+   |           ^\n+\n+error: unexpected end of macro invocation\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:50:5\n+   |\n+LL |     barplus!(); //~ ERROR unexpected end of macro invocation\n+   |     ^^^^^^^^^^^\n+\n+error: unexpected end of macro invocation\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:51:15\n    |\n-LL |     barstar!(a?); //~ ERROR no rules expected the token `?`\n+LL |     barplus!(a?); //~ ERROR unexpected end of macro invocation\n    |               ^\n \n error: unexpected end of macro invocation\n-  --> $DIR/macro-at-most-once-rep-ambig.rs:44:14\n+  --> $DIR/macro-at-most-once-rep-ambig.rs:52:15\n    |\n-LL |     barstar!(a); //~ ERROR unexpected end of macro invocation\n-   |              ^\n+LL |     barstar!(a?); //~ ERROR unexpected end of macro invocation\n+   |               ^\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 13 previous errors\n "}]}