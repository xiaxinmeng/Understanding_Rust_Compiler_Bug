{"sha": "b0fe3d929f6f8764f371970b9f9ca9e7c415dafd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZmUzZDkyOWY2Zjg3NjRmMzcxOTcwYjlmOWNhOWU3YzQxNWRhZmQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-03T18:22:59Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-04T11:16:38Z"}, "message": "Add TyBuilder::unit() and TyExt::is_unit()", "tree": {"sha": "384bd17e3428b591f1c82d1b061ceecee529c044", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/384bd17e3428b591f1c82d1b061ceecee529c044"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd", "html_url": "https://github.com/rust-lang/rust/commit/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b15152c430237d6850ec709ac75aab269c4b7dee", "url": "https://api.github.com/repos/rust-lang/rust/commits/b15152c430237d6850ec709ac75aab269c4b7dee", "html_url": "https://github.com/rust-lang/rust/commit/b15152c430237d6850ec709ac75aab269c4b7dee"}], "stats": {"total": 64, "additions": 39, "deletions": 25}, "files": [{"sha": "b7463366b8997e61159c59b25bde212f41ef3f85", "filename": "crates/hir_ty/src/chalk_ext.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs?ref=b0fe3d929f6f8764f371970b9f9ca9e7c415dafd", "patch": "@@ -0,0 +1,13 @@\n+//! Various extensions traits for Chalk types.\n+\n+use crate::{Interner, Ty, TyKind};\n+\n+pub trait TyExt {\n+    fn is_unit(&self) -> bool;\n+}\n+\n+impl TyExt for Ty {\n+    fn is_unit(&self) -> bool {\n+        matches!(self.kind(&Interner), TyKind::Tuple(0, _))\n+    }\n+}"}, {"sha": "8169b759f5189ba2773bf597a19efe5bdb45433a", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=b0fe3d929f6f8764f371970b9f9ca9e7c415dafd", "patch": "@@ -15,7 +15,7 @@ use crate::{\n         MissingPatFields, RemoveThisSemicolon,\n     },\n     utils::variant_data,\n-    AdtId, InferenceResult, Interner, Ty, TyKind,\n+    AdtId, InferenceResult, Interner, TyExt, TyKind,\n };\n \n pub(crate) use hir_def::{\n@@ -423,7 +423,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             None => return,\n         };\n \n-        if mismatch.actual != Ty::unit() || mismatch.expected != *possible_tail_ty {\n+        if !mismatch.actual.is_unit() || mismatch.expected != *possible_tail_ty {\n             return;\n         }\n "}, {"sha": "eb82e1a113d08da15e63cf3c6b015b7b5a8690dc", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=b0fe3d929f6f8764f371970b9f9ca9e7c415dafd", "patch": "@@ -19,7 +19,8 @@ use crate::{\n     db::HirDatabase, from_assoc_type_id, from_foreign_def_id, from_placeholder_idx, primitive,\n     to_assoc_type_id, traits::chalk::from_chalk, utils::generics, AdtId, AliasEq, AliasTy,\n     CallableDefId, CallableSig, DomainGoal, GenericArg, ImplTraitId, Interner, Lifetime, OpaqueTy,\n-    ProjectionTy, QuantifiedWhereClause, Scalar, Substitution, TraitRef, Ty, TyKind, WhereClause,\n+    ProjectionTy, QuantifiedWhereClause, Scalar, Substitution, TraitRef, Ty, TyExt, TyKind,\n+    WhereClause,\n };\n \n pub struct HirFormatter<'a> {\n@@ -423,7 +424,7 @@ impl HirDisplay for Ty {\n                 f.write_joined(sig.params(), \", \")?;\n                 write!(f, \")\")?;\n                 let ret = sig.ret();\n-                if *ret != Ty::unit() {\n+                if !ret.is_unit() {\n                     let ret_display = ret.into_displayable(\n                         f.db,\n                         f.max_size,\n@@ -663,7 +664,7 @@ impl HirDisplay for CallableSig {\n         }\n         write!(f, \")\")?;\n         let ret = self.ret();\n-        if *ret != Ty::unit() {\n+        if !ret.is_unit() {\n             let ret_display =\n                 ret.into_displayable(f.db, f.max_size, f.omit_verbose_types, f.display_target);\n             write!(f, \" -> {}\", ret_display)?;"}, {"sha": "db8aeead25d162052d9e959b3b3a62e209a86938", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=b0fe3d929f6f8764f371970b9f9ca9e7c415dafd", "patch": "@@ -23,7 +23,7 @@ use crate::{\n     traits::{chalk::from_chalk, FnTrait, InEnvironment},\n     utils::{generics, variant_data, Generics},\n     AdtId, Binders, CallableDefId, DomainGoal, FnPointer, FnSig, Interner, Rawness, Scalar,\n-    Substitution, TraitRef, Ty, TyKind,\n+    Substitution, TraitRef, Ty, TyBuilder, TyKind,\n };\n \n use super::{\n@@ -138,7 +138,7 @@ impl<'a> InferenceContext<'a> {\n                 both_arms_diverge &= mem::replace(&mut self.diverges, Diverges::Maybe);\n                 let else_ty = match else_branch {\n                     Some(else_branch) => self.infer_expr_inner(*else_branch, &expected),\n-                    None => Ty::unit(),\n+                    None => TyBuilder::unit(),\n                 };\n                 both_arms_diverge &= self.diverges;\n \n@@ -193,7 +193,7 @@ impl<'a> InferenceContext<'a> {\n                     break_ty: self.table.new_type_var(),\n                     label: label.map(|label| self.body[label].name.clone()),\n                 });\n-                self.infer_expr(*body, &Expectation::has_type(Ty::unit()));\n+                self.infer_expr(*body, &Expectation::has_type(TyBuilder::unit()));\n \n                 let ctxt = self.breakables.pop().expect(\"breakable stack broken\");\n                 if ctxt.may_break {\n@@ -217,11 +217,11 @@ impl<'a> InferenceContext<'a> {\n                     *condition,\n                     &Expectation::has_type(TyKind::Scalar(Scalar::Bool).intern(&Interner)),\n                 );\n-                self.infer_expr(*body, &Expectation::has_type(Ty::unit()));\n+                self.infer_expr(*body, &Expectation::has_type(TyBuilder::unit()));\n                 let _ctxt = self.breakables.pop().expect(\"breakable stack broken\");\n                 // the body may not run, so it diverging doesn't mean we diverge\n                 self.diverges = Diverges::Maybe;\n-                Ty::unit()\n+                TyBuilder::unit()\n             }\n             Expr::For { iterable, body, pat, label } => {\n                 let iterable_ty = self.infer_expr(*iterable, &Expectation::none());\n@@ -236,11 +236,11 @@ impl<'a> InferenceContext<'a> {\n \n                 self.infer_pat(*pat, &pat_ty, BindingMode::default());\n \n-                self.infer_expr(*body, &Expectation::has_type(Ty::unit()));\n+                self.infer_expr(*body, &Expectation::has_type(TyBuilder::unit()));\n                 let _ctxt = self.breakables.pop().expect(\"breakable stack broken\");\n                 // the body may not run, so it diverging doesn't mean we diverge\n                 self.diverges = Diverges::Maybe;\n-                Ty::unit()\n+                TyBuilder::unit()\n             }\n             Expr::Lambda { body, args, ret_type, arg_types } => {\n                 assert_eq!(args.len(), arg_types.len());\n@@ -360,7 +360,7 @@ impl<'a> InferenceContext<'a> {\n                 let val_ty = if let Some(expr) = expr {\n                     self.infer_expr(*expr, &Expectation::none())\n                 } else {\n-                    Ty::unit()\n+                    TyBuilder::unit()\n                 };\n \n                 let last_ty =\n@@ -386,7 +386,7 @@ impl<'a> InferenceContext<'a> {\n                 if let Some(expr) = expr {\n                     self.infer_expr_coerce(*expr, &Expectation::has_type(self.return_ty.clone()));\n                 } else {\n-                    let unit = Ty::unit();\n+                    let unit = TyBuilder::unit();\n                     self.coerce(&unit, &self.return_ty.clone());\n                 }\n                 TyKind::Never.intern(&Interner)\n@@ -828,8 +828,8 @@ impl<'a> InferenceContext<'a> {\n                 // we don't even make an attempt at coercion\n                 self.table.new_maybe_never_var()\n             } else {\n-                self.coerce(&Ty::unit(), &expected.coercion_target());\n-                Ty::unit()\n+                self.coerce(&TyBuilder::unit(), &expected.coercion_target());\n+                TyBuilder::unit()\n             }\n         };\n         ty"}, {"sha": "b6173d87cd22865fa64a8b573f14c0a6e31d12e3", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=b0fe3d929f6f8764f371970b9f9ca9e7c415dafd", "patch": "@@ -23,6 +23,7 @@ pub mod diagnostics;\n mod tests;\n #[cfg(test)]\n mod test_db;\n+mod chalk_ext;\n \n use std::{iter, mem, sync::Arc};\n \n@@ -42,6 +43,7 @@ use crate::{\n };\n \n pub use autoderef::autoderef;\n+pub use chalk_ext::TyExt;\n pub use infer::{could_unify, InferenceResult, InferenceVar};\n pub use lower::{\n     associated_type_shorthand_candidates, callable_item_sig, CallableDefId, ImplTraitLoweringMode,\n@@ -813,14 +815,12 @@ impl TypeWalk for CallableSig {\n struct TyBuilder {}\n \n impl TyBuilder {\n-\n-}\n-\n-impl Ty {\n-    pub fn unit() -> Self {\n+    pub fn unit() -> Ty {\n         TyKind::Tuple(0, Substitution::empty(&Interner)).intern(&Interner)\n     }\n+}\n \n+impl Ty {\n     pub fn adt_ty(adt: hir_def::AdtId, substs: Substitution) -> Ty {\n         TyKind::Adt(AdtId(adt), substs).intern(&Interner)\n     }"}, {"sha": "90dd31a356c9776d7ff4afa2cf61d82189e2a894", "filename": "crates/hir_ty/src/op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd/crates%2Fhir_ty%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd/crates%2Fhir_ty%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fop.rs?ref=b0fe3d929f6f8764f371970b9f9ca9e7c415dafd", "patch": "@@ -2,12 +2,12 @@\n use chalk_ir::TyVariableKind;\n use hir_def::expr::{ArithOp, BinaryOp, CmpOp};\n \n-use crate::{Interner, Scalar, Ty, TyKind};\n+use crate::{Interner, Scalar, Ty, TyBuilder, TyKind};\n \n pub(super) fn binary_op_return_ty(op: BinaryOp, lhs_ty: Ty, rhs_ty: Ty) -> Ty {\n     match op {\n         BinaryOp::LogicOp(_) | BinaryOp::CmpOp(_) => TyKind::Scalar(Scalar::Bool).intern(&Interner),\n-        BinaryOp::Assignment { .. } => Ty::unit(),\n+        BinaryOp::Assignment { .. } => TyBuilder::unit(),\n         BinaryOp::ArithOp(ArithOp::Shl) | BinaryOp::ArithOp(ArithOp::Shr) => {\n             match lhs_ty.kind(&Interner) {\n                 TyKind::Scalar(Scalar::Int(_))"}, {"sha": "36a397990bf1f8cf028c8500d1036c78a17b65d5", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=b0fe3d929f6f8764f371970b9f9ca9e7c415dafd", "patch": "@@ -22,7 +22,7 @@ use crate::{\n     to_assoc_type_id, to_chalk_trait_id,\n     utils::generics,\n     AliasEq, AliasTy, BoundVar, CallableDefId, DebruijnIndex, FnDefId, ProjectionTy, Substitution,\n-    TraitRef, Ty, TyKind, WhereClause,\n+    TraitRef, Ty, TyBuilder, TyKind, WhereClause,\n };\n use mapping::{\n     convert_where_clauses, generic_predicate_to_inline_bound, make_binders, TypeAliasAsValue,\n@@ -300,7 +300,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         _closure_id: chalk_ir::ClosureId<Interner>,\n         _substs: &chalk_ir::Substitution<Interner>,\n     ) -> chalk_ir::Binders<chalk_ir::Ty<Interner>> {\n-        let ty = Ty::unit().to_chalk(self.db);\n+        let ty = TyBuilder::unit().to_chalk(self.db);\n         make_binders(ty, 0)\n     }\n     fn closure_fn_substitution("}]}