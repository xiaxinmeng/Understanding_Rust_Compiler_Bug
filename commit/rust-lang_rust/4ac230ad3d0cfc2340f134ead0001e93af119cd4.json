{"sha": "4ac230ad3d0cfc2340f134ead0001e93af119cd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYzIzMGFkM2QwY2ZjMjM0MGYxMzRlYWQwMDAxZTkzYWYxMTljZDQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-13T13:09:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-13T13:09:10Z"}, "message": "Rollup merge of #65932 - guanqun:download-xz, r=alexcrichton\n\ndownload .tar.xz if python3 is used\n\nfixes https://github.com/rust-lang/rust/issues/65757", "tree": {"sha": "8fcdc295f50ebc0acae7c55f06aa5e13b79bfd77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fcdc295f50ebc0acae7c55f06aa5e13b79bfd77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ac230ad3d0cfc2340f134ead0001e93af119cd4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdzAB2CRBK7hj4Ov3rIwAAdHIIAI94oSebg+6l8J10F20Knir8\nKZ0p1x27ovLKB66+zQ/0BYzXX2lSjUn0nd1owjsJvJ+bA/NmP0Q/5msFHpfqqCyT\nGfzMjJNgZEOR8QVApR2WtiiinzOYNOl6cEbNdAeDkifhxFHTPZqPule2DJ2NWfOf\n50ZzrnVsJL9G+Fnlh7pmyNmAwa8lCM2UduwHQjkxRoYHxmfVxhjaBqT4UhGA45+N\naOc1VJEbh9P+kcWQ/d4Ya3BO9fUuJWJK/BMoLsZdw+4z+HWaELEiT/0twEq3P0gW\nwQtex0lx+dUKkfcp4KToJw3nAgGQZZ1PTeyUH9za7e69YazPH3+R7bB9yIM1yUY=\n=COlb\n-----END PGP SIGNATURE-----\n", "payload": "tree 8fcdc295f50ebc0acae7c55f06aa5e13b79bfd77\nparent 374ad1b0063963060a00a3110e44d76e7105d059\nparent 0019371e3d878c1031bd7395b52ab40f2441049c\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573650550 +0900\ncommitter GitHub <noreply@github.com> 1573650550 +0900\n\nRollup merge of #65932 - guanqun:download-xz, r=alexcrichton\n\ndownload .tar.xz if python3 is used\n\nfixes https://github.com/rust-lang/rust/issues/65757\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac230ad3d0cfc2340f134ead0001e93af119cd4", "html_url": "https://github.com/rust-lang/rust/commit/4ac230ad3d0cfc2340f134ead0001e93af119cd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ac230ad3d0cfc2340f134ead0001e93af119cd4/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "374ad1b0063963060a00a3110e44d76e7105d059", "url": "https://api.github.com/repos/rust-lang/rust/commits/374ad1b0063963060a00a3110e44d76e7105d059", "html_url": "https://github.com/rust-lang/rust/commit/374ad1b0063963060a00a3110e44d76e7105d059"}, {"sha": "0019371e3d878c1031bd7395b52ab40f2441049c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0019371e3d878c1031bd7395b52ab40f2441049c", "html_url": "https://github.com/rust-lang/rust/commit/0019371e3d878c1031bd7395b52ab40f2441049c"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "730e8cf05d41d784c02d25eb5bac589fcabe6de7", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4ac230ad3d0cfc2340f134ead0001e93af119cd4/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/4ac230ad3d0cfc2340f134ead0001e93af119cd4/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=4ac230ad3d0cfc2340f134ead0001e93af119cd4", "patch": "@@ -102,10 +102,10 @@ def verify(path, sha_path, verbose):\n     return verified\n \n \n-def unpack(tarball, dst, verbose=False, match=None):\n+def unpack(tarball, tarball_suffix, dst, verbose=False, match=None):\n     \"\"\"Unpack the given tarball file\"\"\"\n     print(\"extracting\", tarball)\n-    fname = os.path.basename(tarball).replace(\".tar.gz\", \"\")\n+    fname = os.path.basename(tarball).replace(tarball_suffix, \"\")\n     with contextlib.closing(tarfile.open(tarball)) as tar:\n         for member in tar.getnames():\n             if \"/\" not in member:\n@@ -331,6 +331,7 @@ def __init__(self):\n         self.use_vendored_sources = ''\n         self.verbose = False\n \n+\n     def download_stage0(self):\n         \"\"\"Fetch the build system for Rust, written in Rust\n \n@@ -344,18 +345,30 @@ def download_stage0(self):\n         rustc_channel = self.rustc_channel\n         cargo_channel = self.cargo_channel\n \n+        def support_xz():\n+            try:\n+                with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n+                    temp_path = temp_file.name\n+                with tarfile.open(temp_path, \"w:xz\") as tar:\n+                    pass\n+                return True\n+            except tarfile.CompressionError:\n+                return False\n+\n         if self.rustc().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.rustc()) or\n                  self.program_out_of_date(self.rustc_stamp())):\n             if os.path.exists(self.bin_root()):\n                 shutil.rmtree(self.bin_root())\n-            filename = \"rust-std-{}-{}.tar.gz\".format(\n-                rustc_channel, self.build)\n+            tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n+            filename = \"rust-std-{}-{}{}\".format(\n+                rustc_channel, self.build, tarball_suffix)\n             pattern = \"rust-std-{}\".format(self.build)\n-            self._download_stage0_helper(filename, pattern)\n+            self._download_stage0_helper(filename, pattern, tarball_suffix)\n \n-            filename = \"rustc-{}-{}.tar.gz\".format(rustc_channel, self.build)\n-            self._download_stage0_helper(filename, \"rustc\")\n+            filename = \"rustc-{}-{}{}\".format(rustc_channel, self.build,\n+                                              tarball_suffix)\n+            self._download_stage0_helper(filename, \"rustc\", tarball_suffix)\n             self.fix_executable(\"{}/bin/rustc\".format(self.bin_root()))\n             self.fix_executable(\"{}/bin/rustdoc\".format(self.bin_root()))\n             with output(self.rustc_stamp()) as rust_stamp:\n@@ -365,20 +378,22 @@ def download_stage0(self):\n             # libraries/binaries that are included in rust-std with\n             # the system MinGW ones.\n             if \"pc-windows-gnu\" in self.build:\n-                filename = \"rust-mingw-{}-{}.tar.gz\".format(\n-                    rustc_channel, self.build)\n-                self._download_stage0_helper(filename, \"rust-mingw\")\n+                filename = \"rust-mingw-{}-{}{}\".format(\n+                    rustc_channel, self.build, tarball_suffix)\n+                self._download_stage0_helper(filename, \"rust-mingw\", tarball_suffix)\n \n         if self.cargo().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.cargo()) or\n                  self.program_out_of_date(self.cargo_stamp())):\n-            filename = \"cargo-{}-{}.tar.gz\".format(cargo_channel, self.build)\n-            self._download_stage0_helper(filename, \"cargo\")\n+            tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n+            filename = \"cargo-{}-{}{}\".format(cargo_channel, self.build,\n+                                              tarball_suffix)\n+            self._download_stage0_helper(filename, \"cargo\", tarball_suffix)\n             self.fix_executable(\"{}/bin/cargo\".format(self.bin_root()))\n             with output(self.cargo_stamp()) as cargo_stamp:\n                 cargo_stamp.write(self.date)\n \n-    def _download_stage0_helper(self, filename, pattern):\n+    def _download_stage0_helper(self, filename, pattern, tarball_suffix):\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n         rustc_cache = os.path.join(cache_dst, self.date)\n         if not os.path.exists(rustc_cache):\n@@ -388,7 +403,7 @@ def _download_stage0_helper(self, filename, pattern):\n         tarball = os.path.join(rustc_cache, filename)\n         if not os.path.exists(tarball):\n             get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n-        unpack(tarball, self.bin_root(), match=pattern, verbose=self.verbose)\n+        unpack(tarball, tarball_suffix, self.bin_root(), match=pattern, verbose=self.verbose)\n \n     @staticmethod\n     def fix_executable(fname):"}]}