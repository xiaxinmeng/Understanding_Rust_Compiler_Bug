{"sha": "9689ada83891f63164bf117af35cc0abc37daaf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ODlhZGE4Mzg5MWY2MzE2NGJmMTE3YWYzNWNjMGFiYzM3ZGFhZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-22T07:16:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-22T07:16:11Z"}, "message": "Auto merge of #56842 - scottmcm:vecdeque-rotate, r=alexcrichton\n\nAdd unstable VecDeque::rotate_{left|right}\n\nLike the ones on slices, but more efficient because vecdeque is a circular buffer.\n\nIssue that proposed this: https://github.com/rust-lang/rust/issues/56686\n\n~~:bomb: Please someone look very carefully at the `unsafe` in this!  The `wrap_copy` seems to be exactly what this method needs, and the `len` passed to it is never more than half the length of the deque, but I haven't managed to prove to myself that it's correct :bomb:~~ I think I proved that this code meets the requirement of the unsafe code it's calling; please double-check, of course.", "tree": {"sha": "07391f5b735aa114f845cb0570dd642db42d96d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07391f5b735aa114f845cb0570dd642db42d96d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9689ada83891f63164bf117af35cc0abc37daaf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9689ada83891f63164bf117af35cc0abc37daaf1", "html_url": "https://github.com/rust-lang/rust/commit/9689ada83891f63164bf117af35cc0abc37daaf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9689ada83891f63164bf117af35cc0abc37daaf1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24667aa19d65b0827e780e2eab6b3b86e22a2516", "url": "https://api.github.com/repos/rust-lang/rust/commits/24667aa19d65b0827e780e2eab6b3b86e22a2516", "html_url": "https://github.com/rust-lang/rust/commit/24667aa19d65b0827e780e2eab6b3b86e22a2516"}, {"sha": "cbe9abb78cd6c1b8c74b78110b8c92c1f0984ba0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe9abb78cd6c1b8c74b78110b8c92c1f0984ba0", "html_url": "https://github.com/rust-lang/rust/commit/cbe9abb78cd6c1b8c74b78110b8c92c1f0984ba0"}], "stats": {"total": 249, "additions": 248, "deletions": 1}, "files": [{"sha": "5171ca254e48628d27137b60fb1c9384cde6cc2d", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/9689ada83891f63164bf117af35cc0abc37daaf1/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9689ada83891f63164bf117af35cc0abc37daaf1/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=9689ada83891f63164bf117af35cc0abc37daaf1", "patch": "@@ -1927,6 +1927,118 @@ impl<T> VecDeque<T> {\n             self.truncate(new_len);\n         }\n     }\n+\n+    /// Rotates the double-ended queue `mid` places to the left.\n+    ///\n+    /// Equivalently,\n+    /// - Rotates item `mid` into the first position.\n+    /// - Pops the first `mid` items and pushes them to the end.\n+    /// - Rotates `len() - mid` places to the right.\n+    ///\n+    /// # Panics\n+    ///\n+    /// If `mid` is greater than `len()`.  Note that `mid == len()`\n+    /// does _not_ panic and is a no-op rotation.\n+    ///\n+    /// # Complexity\n+    ///\n+    /// Takes `O(min(mid, len() - mid))` time and no extra space.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(vecdeque_rotate)]\n+    ///\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// let mut buf: VecDeque<_> = (0..10).collect();\n+    ///\n+    /// buf.rotate_left(3);\n+    /// assert_eq!(buf, [3, 4, 5, 6, 7, 8, 9, 0, 1, 2]);\n+    ///\n+    /// for i in 1..10 {\n+    ///     assert_eq!(i * 3 % 10, buf[0]);\n+    ///     buf.rotate_left(3);\n+    /// }\n+    /// assert_eq!(buf, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n+    /// ```\n+    #[unstable(feature = \"vecdeque_rotate\", issue = \"56686\")]\n+    pub fn rotate_left(&mut self, mid: usize) {\n+        assert!(mid <= self.len());\n+        let k = self.len() - mid;\n+        if mid <= k {\n+            unsafe { self.rotate_left_inner(mid) }\n+        } else {\n+            unsafe { self.rotate_right_inner(k) }\n+        }\n+    }\n+\n+    /// Rotates the double-ended queue `k` places to the right.\n+    ///\n+    /// Equivalently,\n+    /// - Rotates the first item into position `k`.\n+    /// - Pops the last `k` items and pushes them to the front.\n+    /// - Rotates `len() - k` places to the left.\n+    ///\n+    /// # Panics\n+    ///\n+    /// If `k` is greater than `len()`.  Note that `k == len()`\n+    /// does _not_ panic and is a no-op rotation.\n+    ///\n+    /// # Complexity\n+    ///\n+    /// Takes `O(min(k, len() - k))` time and no extra space.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(vecdeque_rotate)]\n+    ///\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// let mut buf: VecDeque<_> = (0..10).collect();\n+    ///\n+    /// buf.rotate_right(3);\n+    /// assert_eq!(buf, [7, 8, 9, 0, 1, 2, 3, 4, 5, 6]);\n+    ///\n+    /// for i in 1..10 {\n+    ///     assert_eq!(0, buf[i * 3 % 10]);\n+    ///     buf.rotate_right(3);\n+    /// }\n+    /// assert_eq!(buf, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n+    /// ```\n+    #[unstable(feature = \"vecdeque_rotate\", issue = \"56686\")]\n+    pub fn rotate_right(&mut self, k: usize) {\n+        assert!(k <= self.len());\n+        let mid = self.len() - k;\n+        if k <= mid {\n+            unsafe { self.rotate_right_inner(k) }\n+        } else {\n+            unsafe { self.rotate_left_inner(mid) }\n+        }\n+    }\n+\n+    // Safety: the following two methods require that the rotation amount\n+    // be less than half the length of the deque.\n+    //\n+    // `wrap_copy` requres that `min(x, cap() - x) + copy_len <= cap()`,\n+    // but than `min` is never more than half the capacity, regardless of x,\n+    // so it's sound to call here because we're calling with something\n+    // less than half the length, which is never above half the capacity.\n+\n+    unsafe fn rotate_left_inner(&mut self, mid: usize) {\n+        debug_assert!(mid * 2 <= self.len());\n+        self.wrap_copy(self.head, self.tail, mid);\n+        self.head = self.wrap_add(self.head, mid);\n+        self.tail = self.wrap_add(self.tail, mid);\n+    }\n+\n+    unsafe fn rotate_right_inner(&mut self, k: usize) {\n+        debug_assert!(k * 2 <= self.len());\n+        self.head = self.wrap_sub(self.head, k);\n+        self.tail = self.wrap_sub(self.tail, k);\n+        self.wrap_copy(self.tail, self.head, k);\n+    }\n }\n \n impl<T: Clone> VecDeque<T> {"}, {"sha": "146abd1b7508aa21acce24c74fdf590644c4cd6d", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9689ada83891f63164bf117af35cc0abc37daaf1/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9689ada83891f63164bf117af35cc0abc37daaf1/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=9689ada83891f63164bf117af35cc0abc37daaf1", "patch": "@@ -13,11 +13,12 @@\n #![feature(drain_filter)]\n #![feature(exact_size_is_empty)]\n #![feature(pattern)]\n+#![feature(repeat_generic_slice)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(str_escape)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n-#![feature(repeat_generic_slice)]\n+#![feature(vecdeque_rotate)]\n \n extern crate core;\n extern crate rand;"}, {"sha": "c8a6d86413ad6535a4ea8571908bf08e8e9da8cd", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/9689ada83891f63164bf117af35cc0abc37daaf1/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9689ada83891f63164bf117af35cc0abc37daaf1/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=9689ada83891f63164bf117af35cc0abc37daaf1", "patch": "@@ -1309,3 +1309,137 @@ fn test_try_reserve_exact() {\n     }\n \n }\n+\n+#[test]\n+fn test_rotate_nop() {\n+    let mut v: VecDeque<_> = (0..10).collect();\n+    assert_unchanged(&v);\n+\n+    v.rotate_left(0);\n+    assert_unchanged(&v);\n+\n+    v.rotate_left(10);\n+    assert_unchanged(&v);\n+\n+    v.rotate_right(0);\n+    assert_unchanged(&v);\n+\n+    v.rotate_right(10);\n+    assert_unchanged(&v);\n+\n+    v.rotate_left(3);\n+    v.rotate_right(3);\n+    assert_unchanged(&v);\n+\n+    v.rotate_right(3);\n+    v.rotate_left(3);\n+    assert_unchanged(&v);\n+\n+    v.rotate_left(6);\n+    v.rotate_right(6);\n+    assert_unchanged(&v);\n+\n+    v.rotate_right(6);\n+    v.rotate_left(6);\n+    assert_unchanged(&v);\n+\n+    v.rotate_left(3);\n+    v.rotate_left(7);\n+    assert_unchanged(&v);\n+\n+    v.rotate_right(4);\n+    v.rotate_right(6);\n+    assert_unchanged(&v);\n+\n+    v.rotate_left(1);\n+    v.rotate_left(2);\n+    v.rotate_left(3);\n+    v.rotate_left(4);\n+    assert_unchanged(&v);\n+\n+    v.rotate_right(1);\n+    v.rotate_right(2);\n+    v.rotate_right(3);\n+    v.rotate_right(4);\n+    assert_unchanged(&v);\n+\n+    fn assert_unchanged(v: &VecDeque<i32>) {\n+        assert_eq!(v, &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n+    }\n+}\n+\n+#[test]\n+fn test_rotate_left_parts() {\n+    let mut v: VecDeque<_> = (1..=7).collect();\n+    v.rotate_left(2);\n+    assert_eq!(v.as_slices(), (&[3, 4, 5, 6, 7, 1][..], &[2][..]));\n+    v.rotate_left(2);\n+    assert_eq!(v.as_slices(), (&[5, 6, 7, 1][..], &[2, 3, 4][..]));\n+    v.rotate_left(2);\n+    assert_eq!(v.as_slices(), (&[7, 1][..], &[2, 3, 4, 5, 6][..]));\n+    v.rotate_left(2);\n+    assert_eq!(v.as_slices(), (&[2, 3, 4, 5, 6, 7, 1][..], &[][..]));\n+    v.rotate_left(2);\n+    assert_eq!(v.as_slices(), (&[4, 5, 6, 7, 1, 2][..], &[3][..]));\n+    v.rotate_left(2);\n+    assert_eq!(v.as_slices(), (&[6, 7, 1, 2][..], &[3, 4, 5][..]));\n+    v.rotate_left(2);\n+    assert_eq!(v.as_slices(), (&[1, 2][..], &[3, 4, 5, 6, 7][..]));\n+}\n+\n+#[test]\n+fn test_rotate_right_parts() {\n+    let mut v: VecDeque<_> = (1..=7).collect();\n+    v.rotate_right(2);\n+    assert_eq!(v.as_slices(), (&[6, 7][..], &[1, 2, 3, 4, 5][..]));\n+    v.rotate_right(2);\n+    assert_eq!(v.as_slices(), (&[4, 5, 6, 7][..], &[1, 2, 3][..]));\n+    v.rotate_right(2);\n+    assert_eq!(v.as_slices(), (&[2, 3, 4, 5, 6, 7][..], &[1][..]));\n+    v.rotate_right(2);\n+    assert_eq!(v.as_slices(), (&[7, 1, 2, 3, 4, 5, 6][..], &[][..]));\n+    v.rotate_right(2);\n+    assert_eq!(v.as_slices(), (&[5, 6][..], &[7, 1, 2, 3, 4][..]));\n+    v.rotate_right(2);\n+    assert_eq!(v.as_slices(), (&[3, 4, 5, 6][..], &[7, 1, 2][..]));\n+    v.rotate_right(2);\n+    assert_eq!(v.as_slices(), (&[1, 2, 3, 4, 5, 6][..], &[7][..]));\n+}\n+\n+#[test]\n+fn test_rotate_left_random() {\n+    let shifts = [\n+        6, 1, 0, 11, 12, 1, 11, 7, 9, 3, 6, 1,\n+        4, 0, 5, 1, 3, 1, 12, 8, 3, 1, 11, 11,\n+        9, 4, 12, 3, 12, 9, 11, 1, 7, 9, 7, 2,\n+    ];\n+    let n = 12;\n+    let mut v: VecDeque<_> = (0..n).collect();\n+    let mut total_shift = 0;\n+    for shift in shifts.iter().cloned() {\n+        v.rotate_left(shift);\n+        total_shift += shift;\n+        for i in 0..n {\n+            assert_eq!(v[i], (i + total_shift) % n);\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_rotate_right_random() {\n+    let shifts = [\n+        6, 1, 0, 11, 12, 1, 11, 7, 9, 3, 6, 1,\n+        4, 0, 5, 1, 3, 1, 12, 8, 3, 1, 11, 11,\n+        9, 4, 12, 3, 12, 9, 11, 1, 7, 9, 7, 2,\n+    ];\n+    let n = 12;\n+    let mut v: VecDeque<_> = (0..n).collect();\n+    let mut total_shift = 0;\n+    for shift in shifts.iter().cloned() {\n+        v.rotate_right(shift);\n+        total_shift += shift;\n+        for i in 0..n {\n+            assert_eq!(v[(i + total_shift) % n], i);\n+        }\n+    }\n+}"}]}