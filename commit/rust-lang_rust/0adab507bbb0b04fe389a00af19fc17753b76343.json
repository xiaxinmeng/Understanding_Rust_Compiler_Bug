{"sha": "0adab507bbb0b04fe389a00af19fc17753b76343", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZGFiNTA3YmJiMGIwNGZlMzg5YTAwYWYxOWZjMTc3NTNiNzYzNDM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-21T12:14:28Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-24T21:27:22Z"}, "message": "Added `T:Send` bound to `sync::mpsc::Receiver` and `sync::mpsc::Sender`.\n\nThis was necessary to avoid specialized `Drop` impls for the two structs.", "tree": {"sha": "88e0e32469c0d0fd1e0bcd0ffc7c3124e77c4c7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88e0e32469c0d0fd1e0bcd0ffc7c3124e77c4c7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0adab507bbb0b04fe389a00af19fc17753b76343", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0adab507bbb0b04fe389a00af19fc17753b76343", "html_url": "https://github.com/rust-lang/rust/commit/0adab507bbb0b04fe389a00af19fc17753b76343", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0adab507bbb0b04fe389a00af19fc17753b76343/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fa4b4c4af14e391d7f16b4968aa25cca7c617c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa4b4c4af14e391d7f16b4968aa25cca7c617c6", "html_url": "https://github.com/rust-lang/rust/commit/5fa4b4c4af14e391d7f16b4968aa25cca7c617c6"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "48629beafc8cd5cdbab2298b2942f4af5a6fff9c", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0adab507bbb0b04fe389a00af19fc17753b76343/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adab507bbb0b04fe389a00af19fc17753b76343/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=0adab507bbb0b04fe389a00af19fc17753b76343", "patch": "@@ -342,7 +342,7 @@ mod spsc_queue;\n /// The receiving-half of Rust's channel type. This half can only be owned by\n /// one task\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct Receiver<T> {\n+pub struct Receiver<T:Send> {\n     inner: UnsafeCell<Flavor<T>>,\n }\n \n@@ -354,14 +354,14 @@ unsafe impl<T: Send> Send for Receiver<T> { }\n /// whenever `next` is called, waiting for a new message, and `None` will be\n /// returned when the corresponding channel has hung up.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct Iter<'a, T:'a> {\n+pub struct Iter<'a, T:Send+'a> {\n     rx: &'a Receiver<T>\n }\n \n /// The sending-half of Rust's asynchronous channel type. This half can only be\n /// owned by one task, but it can be cloned to send to other tasks.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct Sender<T> {\n+pub struct Sender<T:Send> {\n     inner: UnsafeCell<Flavor<T>>,\n }\n \n@@ -433,15 +433,15 @@ pub enum TrySendError<T> {\n     Disconnected(T),\n }\n \n-enum Flavor<T> {\n+enum Flavor<T:Send> {\n     Oneshot(Arc<UnsafeCell<oneshot::Packet<T>>>),\n     Stream(Arc<UnsafeCell<stream::Packet<T>>>),\n     Shared(Arc<UnsafeCell<shared::Packet<T>>>),\n     Sync(Arc<UnsafeCell<sync::Packet<T>>>),\n }\n \n #[doc(hidden)]\n-trait UnsafeFlavor<T> {\n+trait UnsafeFlavor<T:Send> {\n     fn inner_unsafe<'a>(&'a self) -> &'a UnsafeCell<Flavor<T>>;\n     unsafe fn inner_mut<'a>(&'a self) -> &'a mut Flavor<T> {\n         &mut *self.inner_unsafe().get()\n@@ -450,12 +450,12 @@ trait UnsafeFlavor<T> {\n         &*self.inner_unsafe().get()\n     }\n }\n-impl<T> UnsafeFlavor<T> for Sender<T> {\n+impl<T:Send> UnsafeFlavor<T> for Sender<T> {\n     fn inner_unsafe<'a>(&'a self) -> &'a UnsafeCell<Flavor<T>> {\n         &self.inner\n     }\n }\n-impl<T> UnsafeFlavor<T> for Receiver<T> {\n+impl<T:Send> UnsafeFlavor<T> for Receiver<T> {\n     fn inner_unsafe<'a>(&'a self) -> &'a UnsafeCell<Flavor<T>> {\n         &self.inner\n     }"}, {"sha": "13578ce0517911393e106c941ea30e73ce6845a8", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0adab507bbb0b04fe389a00af19fc17753b76343/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adab507bbb0b04fe389a00af19fc17753b76343/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=0adab507bbb0b04fe389a00af19fc17753b76343", "patch": "@@ -54,7 +54,7 @@ const DISCONNECTED: usize = 2;   // channel is disconnected OR upgraded\n // moves *from* a pointer, ownership of the token is transferred to\n // whoever changed the state.\n \n-pub struct Packet<T> {\n+pub struct Packet<T:Send> {\n     // Internal state of the chan/port pair (stores the blocked task as well)\n     state: AtomicUsize,\n     // One-shot data slot location\n@@ -64,7 +64,7 @@ pub struct Packet<T> {\n     upgrade: MyUpgrade<T>,\n }\n \n-pub enum Failure<T> {\n+pub enum Failure<T:Send> {\n     Empty,\n     Disconnected,\n     Upgraded(Receiver<T>),\n@@ -76,13 +76,13 @@ pub enum UpgradeResult {\n     UpWoke(SignalToken),\n }\n \n-pub enum SelectionResult<T> {\n+pub enum SelectionResult<T:Send> {\n     SelCanceled,\n     SelUpgraded(SignalToken, Receiver<T>),\n     SelSuccess,\n }\n \n-enum MyUpgrade<T> {\n+enum MyUpgrade<T:Send> {\n     NothingSent,\n     SendUsed,\n     GoUp(Receiver<T>),"}, {"sha": "b509b3472ee413276ecf52c78c64da05e97f4e2b", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0adab507bbb0b04fe389a00af19fc17753b76343/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adab507bbb0b04fe389a00af19fc17753b76343/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=0adab507bbb0b04fe389a00af19fc17753b76343", "patch": "@@ -80,7 +80,7 @@ impl !marker::Send for Select {}\n /// A handle to a receiver which is currently a member of a `Select` set of\n /// receivers.  This handle is used to keep the receiver in the set as well as\n /// interact with the underlying receiver.\n-pub struct Handle<'rx, T:'rx> {\n+pub struct Handle<'rx, T:Send+'rx> {\n     /// The ID of this handle, used to compare against the return value of\n     /// `Select::wait()`\n     id: usize,"}, {"sha": "a5a73314a6db3d36e29cd08540744954ee986c1e", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0adab507bbb0b04fe389a00af19fc17753b76343/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adab507bbb0b04fe389a00af19fc17753b76343/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=0adab507bbb0b04fe389a00af19fc17753b76343", "patch": "@@ -39,7 +39,7 @@ const MAX_STEALS: isize = 5;\n #[cfg(not(test))]\n const MAX_STEALS: isize = 1 << 20;\n \n-pub struct Packet<T> {\n+pub struct Packet<T:Send> {\n     queue: spsc::Queue<Message<T>>, // internal queue for all message\n \n     cnt: AtomicIsize, // How many items are on this channel\n@@ -49,7 +49,7 @@ pub struct Packet<T> {\n     port_dropped: AtomicBool, // flag if the channel has been destroyed.\n }\n \n-pub enum Failure<T> {\n+pub enum Failure<T:Send> {\n     Empty,\n     Disconnected,\n     Upgraded(Receiver<T>),\n@@ -61,15 +61,15 @@ pub enum UpgradeResult {\n     UpWoke(SignalToken),\n }\n \n-pub enum SelectionResult<T> {\n+pub enum SelectionResult<T:Send> {\n     SelSuccess,\n     SelCanceled,\n     SelUpgraded(SignalToken, Receiver<T>),\n }\n \n // Any message could contain an \"upgrade request\" to a new shared port, so the\n // internal queue it's a queue of T, but rather Message<T>\n-enum Message<T> {\n+enum Message<T:Send> {\n     Data(T),\n     GoUp(Receiver<T>),\n }"}, {"sha": "e8bec66d9875b431ab10f9a747c3cf1d5fcb31dc", "filename": "src/libstd/sys/common/helper_thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0adab507bbb0b04fe389a00af19fc17753b76343/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0adab507bbb0b04fe389a00af19fc17753b76343/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs?ref=0adab507bbb0b04fe389a00af19fc17753b76343", "patch": "@@ -38,7 +38,7 @@ use thread;\n ///\n /// The fields of this helper are all public, but they should not be used, this\n /// is for static initialization.\n-pub struct Helper<M> {\n+pub struct Helper<M:Send> {\n     /// Internal lock which protects the remaining fields\n     pub lock: StaticMutex,\n     pub cond: StaticCondvar,"}]}