{"sha": "55f3ff241a2105d2903266703474acbd24a85e84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZjNmZjI0MWEyMTA1ZDI5MDMyNjY3MDM0NzRhY2JkMjRhODVlODQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-12T13:52:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-12T13:52:30Z"}, "message": "Merge #2222\n\n2222: Remove owner from Body r=matklad a=matklad\n\ncc @flodiebold \r\n\r\nI do this so that it's easier to move lowering code to another crate (owner is the only thing that tethers Body to the rest of the code), but it's interesting that this is a net reduction of lines. I think this might be considered an evidence that it's a good idea to not add \"parent pointers\" / parent ids to data structures, and instead add them to `ctx` objects which are used when building data structures\r\n\r\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d953d49eac9da39748afabd512b5390875e18ba1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d953d49eac9da39748afabd512b5390875e18ba1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55f3ff241a2105d2903266703474acbd24a85e84", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdyrkeCRBK7hj4Ov3rIwAAdHIIAIM+r3v2zGysArLoeok1Yl95\nWwPPdjoGXf+K3krYfppdQs9a/DdMKZJ0nj2cprsTSOTryhzIwSDvH3IAsrVPwj7G\nFUGAgSRTC4LgrAzijqu6dzsUVmGB7m2ZxdfMU62iJ02vVSmPMFQJq/zdC2yG7h8T\n5+9mBfKUhVJ0+z/T6dt/gEaHzWK62oNblATcx996rOqhdZPI0Fdoj9OG/txcn3qd\nnak+d+YKUI+vio3xcGTSWwYloJDtwisZh7OpJ8JcVyGZz7cuToc3uLx1+2B67GIe\nzqojtorQ0SXdP5GcYsQPXO0SKIiXzGg0dbmhM4gdigwzdnogekv2t+Q9PNdDMuU=\n=0SWw\n-----END PGP SIGNATURE-----\n", "payload": "tree d953d49eac9da39748afabd512b5390875e18ba1\nparent 6149ee30ef9a379f642c8a645cea13f32c4f3d84\nparent fe00db72b91d266a61b0541bca59e38e5f2a703c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1573566750 +0000\ncommitter GitHub <noreply@github.com> 1573566750 +0000\n\nMerge #2222\n\n2222: Remove owner from Body r=matklad a=matklad\n\ncc @flodiebold \r\n\r\nI do this so that it's easier to move lowering code to another crate (owner is the only thing that tethers Body to the rest of the code), but it's interesting that this is a net reduction of lines. I think this might be considered an evidence that it's a good idea to not add \"parent pointers\" / parent ids to data structures, and instead add them to `ctx` objects which are used when building data structures\r\n\r\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55f3ff241a2105d2903266703474acbd24a85e84", "html_url": "https://github.com/rust-lang/rust/commit/55f3ff241a2105d2903266703474acbd24a85e84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55f3ff241a2105d2903266703474acbd24a85e84/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6149ee30ef9a379f642c8a645cea13f32c4f3d84", "url": "https://api.github.com/repos/rust-lang/rust/commits/6149ee30ef9a379f642c8a645cea13f32c4f3d84", "html_url": "https://github.com/rust-lang/rust/commit/6149ee30ef9a379f642c8a645cea13f32c4f3d84"}, {"sha": "fe00db72b91d266a61b0541bca59e38e5f2a703c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe00db72b91d266a61b0541bca59e38e5f2a703c", "html_url": "https://github.com/rust-lang/rust/commit/fe00db72b91d266a61b0541bca59e38e5f2a703c"}], "stats": {"total": 47, "additions": 19, "deletions": 28}, "files": [{"sha": "ddf6051118843834a56f931acf184d4013d36771", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/55f3ff241a2105d2903266703474acbd24a85e84/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f3ff241a2105d2903266703474acbd24a85e84/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=55f3ff241a2105d2903266703474acbd24a85e84", "patch": "@@ -22,8 +22,6 @@ pub use hir_def::expr::{\n /// The body of an item (function, const etc.).\n #[derive(Debug, Eq, PartialEq)]\n pub struct Body {\n-    /// The def of the item this body belongs to\n-    owner: DefWithBody,\n     exprs: Arena<ExprId, Expr>,\n     pats: Arena<PatId, Pat>,\n     /// The patterns for the function's parameters. While the parameter types are\n@@ -86,7 +84,7 @@ impl Body {\n             }\n         };\n \n-        let (body, source_map) = lower::lower(db, def.resolver(db), file_id, def, params, body);\n+        let (body, source_map) = lower::lower(db, def.resolver(db), file_id, params, body);\n         (Arc::new(body), Arc::new(source_map))\n     }\n \n@@ -102,10 +100,6 @@ impl Body {\n         self.body_expr\n     }\n \n-    pub fn owner(&self) -> DefWithBody {\n-        self.owner\n-    }\n-\n     pub fn exprs(&self) -> impl Iterator<Item = (ExprId, &Expr)> {\n         self.exprs.iter()\n     }\n@@ -117,21 +111,21 @@ impl Body {\n \n // needs arbitrary_self_types to be a method... or maybe move to the def?\n pub(crate) fn resolver_for_expr(\n-    body: Arc<Body>,\n     db: &impl HirDatabase,\n+    owner: DefWithBody,\n     expr_id: ExprId,\n ) -> Resolver {\n-    let scopes = db.expr_scopes(body.owner);\n-    resolver_for_scope(body, db, scopes.scope_for(expr_id))\n+    let scopes = db.expr_scopes(owner);\n+    resolver_for_scope(db, owner, scopes.scope_for(expr_id))\n }\n \n pub(crate) fn resolver_for_scope(\n-    body: Arc<Body>,\n     db: &impl HirDatabase,\n+    owner: DefWithBody,\n     scope_id: Option<scope::ScopeId>,\n ) -> Resolver {\n-    let mut r = body.owner.resolver(db);\n-    let scopes = db.expr_scopes(body.owner);\n+    let mut r = owner.resolver(db);\n+    let scopes = db.expr_scopes(owner);\n     let scope_chain = scopes.scope_chain(scope_id).collect::<Vec<_>>();\n     for scope in scope_chain.into_iter().rev() {\n         r = r.push_expr_scope(Arc::clone(&scopes), scope);"}, {"sha": "adc68b23c5730c7cd3206bdf8b4c9297caa82235", "filename": "crates/ra_hir/src/expr/lower.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55f3ff241a2105d2903266703474acbd24a85e84/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f3ff241a2105d2903266703474acbd24a85e84/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs?ref=55f3ff241a2105d2903266703474acbd24a85e84", "patch": "@@ -20,8 +20,8 @@ use ra_syntax::{\n use test_utils::tested_by;\n \n use crate::{\n-    db::HirDatabase, AstId, DefWithBody, Either, HirFileId, MacroCallLoc, MacroFileKind,\n-    Mutability, Path, Resolver, Source,\n+    db::HirDatabase, AstId, Either, HirFileId, MacroCallLoc, MacroFileKind, Mutability, Path,\n+    Resolver, Source,\n };\n \n use super::{\n@@ -33,7 +33,6 @@ pub(super) fn lower(\n     db: &impl HirDatabase,\n     resolver: Resolver,\n     file_id: HirFileId,\n-    owner: DefWithBody,\n     params: Option<ast::ParamList>,\n     body: Option<ast::Expr>,\n ) -> (Body, BodySourceMap) {\n@@ -44,7 +43,6 @@ pub(super) fn lower(\n         current_file_id: file_id,\n         source_map: BodySourceMap::default(),\n         body: Body {\n-            owner,\n             exprs: Arena::default(),\n             pats: Arena::default(),\n             params: Vec::new(),"}, {"sha": "f28e9c931abbaddba516e0b9fc8eb20d160e2352", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55f3ff241a2105d2903266703474acbd24a85e84/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f3ff241a2105d2903266703474acbd24a85e84/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=55f3ff241a2105d2903266703474acbd24a85e84", "patch": "@@ -150,7 +150,7 @@ impl SourceAnalyzer {\n                 None => scope_for(&scopes, &source_map, &node),\n                 Some(offset) => scope_for_offset(&scopes, &source_map, file_id.into(), offset),\n             };\n-            let resolver = expr::resolver_for_scope(def.body(db), db, scope);\n+            let resolver = expr::resolver_for_scope(db, def, scope);\n             SourceAnalyzer {\n                 resolver,\n                 body_owner: Some(def),"}, {"sha": "f17c6c6143397b58b01dd6644f50355f6f09caf5", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55f3ff241a2105d2903266703474acbd24a85e84/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f3ff241a2105d2903266703474acbd24a85e84/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=55f3ff241a2105d2903266703474acbd24a85e84", "patch": "@@ -43,7 +43,7 @@ use crate::{\n     expr::{BindingAnnotation, Body, ExprId, PatId},\n     resolve::{Resolver, TypeNs},\n     ty::infer::diagnostics::InferenceDiagnostic,\n-    Adt, AssocItem, ConstData, DefWithBody, FnData, Function, HasBody, Path, StructField,\n+    Adt, AssocItem, ConstData, DefWithBody, FnData, Function, Path, StructField,\n };\n \n macro_rules! ty_app {\n@@ -64,9 +64,8 @@ mod coerce;\n /// The entry point of type inference.\n pub fn infer_query(db: &impl HirDatabase, def: DefWithBody) -> Arc<InferenceResult> {\n     let _p = profile(\"infer_query\");\n-    let body = def.body(db);\n     let resolver = def.resolver(db);\n-    let mut ctx = InferenceContext::new(db, body, resolver);\n+    let mut ctx = InferenceContext::new(db, def, resolver);\n \n     match def {\n         DefWithBody::Const(ref c) => ctx.collect_const(&c.data(db)),\n@@ -187,6 +186,7 @@ impl Index<PatId> for InferenceResult {\n #[derive(Clone, Debug)]\n struct InferenceContext<'a, D: HirDatabase> {\n     db: &'a D,\n+    owner: DefWithBody,\n     body: Arc<Body>,\n     resolver: Resolver,\n     var_unification_table: InPlaceUnificationTable<TypeVarId>,\n@@ -204,7 +204,7 @@ struct InferenceContext<'a, D: HirDatabase> {\n }\n \n impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n-    fn new(db: &'a D, body: Arc<Body>, resolver: Resolver) -> Self {\n+    fn new(db: &'a D, owner: DefWithBody, resolver: Resolver) -> Self {\n         InferenceContext {\n             result: InferenceResult::default(),\n             var_unification_table: InPlaceUnificationTable::new(),\n@@ -213,7 +213,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             trait_env: lower::trait_env(db, &resolver),\n             coerce_unsized_map: Self::init_coerce_unsized_map(db, &resolver),\n             db,\n-            body,\n+            owner,\n+            body: db.body(owner),\n             resolver,\n         }\n     }"}, {"sha": "c6802487a0c6812bc34716dca84262ff99078d1e", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55f3ff241a2105d2903266703474acbd24a85e84/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f3ff241a2105d2903266703474acbd24a85e84/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=55f3ff241a2105d2903266703474acbd24a85e84", "patch": "@@ -130,10 +130,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     TypeCtor::FnPtr { num_args: sig_tys.len() as u16 - 1 },\n                     Substs(sig_tys.into()),\n                 );\n-                let closure_ty = Ty::apply_one(\n-                    TypeCtor::Closure { def: self.body.owner(), expr: tgt_expr },\n-                    sig_ty,\n-                );\n+                let closure_ty =\n+                    Ty::apply_one(TypeCtor::Closure { def: self.owner, expr: tgt_expr }, sig_ty);\n \n                 // Eagerly try to relate the closure type with the expected\n                 // type, otherwise we often won't have enough information to\n@@ -184,7 +182,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             Expr::Path(p) => {\n                 // FIXME this could be more efficient...\n-                let resolver = expr::resolver_for_expr(self.body.clone(), self.db, tgt_expr);\n+                let resolver = expr::resolver_for_expr(self.db, self.owner, tgt_expr);\n                 self.infer_path(&resolver, p, tgt_expr.into()).unwrap_or(Ty::Unknown)\n             }\n             Expr::Continue => Ty::simple(TypeCtor::Never),"}]}