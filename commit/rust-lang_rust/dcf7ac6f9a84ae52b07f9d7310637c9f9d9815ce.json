{"sha": "dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZjdhYzZmOWE4NGFlNTJiMDdmOWQ3MzEwNjM3YzlmOWQ5ODE1Y2U=", "commit": {"author": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2015-08-01T17:41:01Z"}, "committer": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2015-08-01T17:41:01Z"}, "message": "Fix and add tests regarding extern crate paths", "tree": {"sha": "1dd6a35035efb337f7cc145d88c85632141ec9a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dd6a35035efb337f7cc145d88c85632141ec9a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce", "html_url": "https://github.com/rust-lang/rust/commit/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce/comments", "author": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b4124684e26708038b6678a38fcfbeeecb90c6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b4124684e26708038b6678a38fcfbeeecb90c6e", "html_url": "https://github.com/rust-lang/rust/commit/2b4124684e26708038b6678a38fcfbeeecb90c6e"}], "stats": {"total": 94, "additions": 80, "deletions": 14}, "files": [{"sha": "8b467c2ba11f93a475a3c19e0cee5c5d5942bbed", "filename": "src/test/compile-fail/issue-12997-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs?ref=dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce", "patch": "@@ -15,7 +15,7 @@\n #[bench]\n fn bar(x: isize) { }\n //~^ ERROR mismatched types\n-//~| expected `fn(&mut test::Bencher)`\n+//~| expected `fn(&mut __test::test::Bencher)`\n //~| found `fn(isize) {bar}`\n //~| expected &-ptr\n //~| found isize"}, {"sha": "c26c5ff8421d960225202b71239249c9be20984d", "filename": "src/test/compile-fail/issue-1920-1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs?ref=dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Test that absolute path names are correct when a crate is not linked into the root namespace\n+\n+mod foo {\n+    extern crate core;\n+}\n+\n+fn assert_clone<T>() where T : Clone { }\n+\n+fn main() {\n+    assert_clone::<foo::core::atomic::AtomicBool>();\n+    //~^ ERROR the trait `foo::core::clone::Clone` is not implemented for the type `foo::core::\n+}\n\\ No newline at end of file"}, {"sha": "63cfcbdd8c700ac5a4b42191a93e316112f581db", "filename": "src/test/compile-fail/issue-1920-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce/src%2Ftest%2Fcompile-fail%2Fissue-1920-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce/src%2Ftest%2Fcompile-fail%2Fissue-1920-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-2.rs?ref=dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Test that when a crate is linked under another name that that name is used in global paths\n+\n+extern crate core as bar;\n+\n+fn assert_clone<T>() where T : Clone { }\n+\n+fn main() {\n+    assert_clone::<bar::atomic::AtomicBool>();\n+    //~^ ERROR the trait `bar::clone::Clone` is not implemented for the type `bar::atomic::\n+}\n\\ No newline at end of file"}, {"sha": "619c8c3f3a4f01d3b0e60ebd0650a48c67f407c5", "filename": "src/test/compile-fail/issue-1920-3.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs?ref=dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Test that when a crate is linked multiple times that the shortest absolute path name is used\n+\n+mod foo {\n+    extern crate core;\n+}\n+\n+extern crate core;\n+\n+fn assert_clone<T>() where T : Clone { }\n+\n+fn main() {\n+    assert_clone::<foo::core::atomic::AtomicBool>();\n+    //~^ ERROR the trait `core::clone::Clone` is not implemented for the type `core::atomic::\n+}\n\\ No newline at end of file"}, {"sha": "83e13ff52f69a80c08498de47f1ab90d7fd59984", "filename": "src/test/compile-fail/privacy5.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs?ref=dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce", "patch": "@@ -101,30 +101,30 @@ fn xcrate() {\n     let c = other::C(2, 3); //~ ERROR: cannot invoke tuple struct constructor\n     let d = other::D(4);\n \n-    let other::A(()) = a; //~ ERROR: field #1 of struct `privacy_tuple_struct::A` is private\n+    let other::A(()) = a; //~ ERROR: field #1 of struct `other::A` is private\n     let other::A(_) = a;\n     match a { other::A(()) => {} }\n-    //~^ ERROR: field #1 of struct `privacy_tuple_struct::A` is private\n+    //~^ ERROR: field #1 of struct `other::A` is private\n     match a { other::A(_) => {} }\n \n     let other::B(_) = b;\n-    let other::B(_b) = b; //~ ERROR: field #1 of struct `privacy_tuple_struct::B` is private\n+    let other::B(_b) = b; //~ ERROR: field #1 of struct `other::B` is private\n     match b { other::B(_) => {} }\n     match b { other::B(_b) => {} }\n-    //~^ ERROR: field #1 of struct `privacy_tuple_struct::B` is private\n+    //~^ ERROR: field #1 of struct `other::B` is private\n     match b { other::B(1) => {} other::B(_) => {} }\n-    //~^ ERROR: field #1 of struct `privacy_tuple_struct::B` is private\n+    //~^ ERROR: field #1 of struct `other::B` is private\n \n     let other::C(_, _) = c;\n     let other::C(_a, _) = c;\n-    let other::C(_, _b) = c; //~ ERROR: field #2 of struct `privacy_tuple_struct::C` is private\n-    let other::C(_a, _b) = c; //~ ERROR: field #2 of struct `privacy_tuple_struct::C` is private\n+    let other::C(_, _b) = c; //~ ERROR: field #2 of struct `other::C` is private\n+    let other::C(_a, _b) = c; //~ ERROR: field #2 of struct `other::C` is private\n     match c { other::C(_, _) => {} }\n     match c { other::C(_a, _) => {} }\n     match c { other::C(_, _b) => {} }\n-    //~^ ERROR: field #2 of struct `privacy_tuple_struct::C` is private\n+    //~^ ERROR: field #2 of struct `other::C` is private\n     match c { other::C(_a, _b) => {} }\n-    //~^ ERROR: field #2 of struct `privacy_tuple_struct::C` is private\n+    //~^ ERROR: field #2 of struct `other::C` is private\n \n     let other::D(_) = d;\n     let other::D(_d) = d;"}, {"sha": "aae09cc0eae5cb985376d02a0697dced7c56e5a4", "filename": "src/test/compile-fail/struct-field-privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs?ref=dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce", "patch": "@@ -37,11 +37,11 @@ fn test(a: A, b: inner::A, c: inner::B, d: xc::A, e: xc::B) {\n     c.a;\n     c.b; //~ ERROR: field `b` of struct `inner::B` is private\n \n-    d.a; //~ ERROR: field `a` of struct `struct_field_privacy::A` is private\n+    d.a; //~ ERROR: field `a` of struct `xc::A` is private\n     d.b;\n \n     e.a;\n-    e.b; //~ ERROR: field `b` of struct `struct_field_privacy::B` is private\n+    e.b; //~ ERROR: field `b` of struct `xc::B` is private\n }\n \n fn main() {}"}, {"sha": "8bc8a7a60bdd369695685297fef357360ea48866", "filename": "src/test/compile-fail/suggest-private-fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs?ref=dcf7ac6f9a84ae52b07f9d7310637c9f9d9815ce", "patch": "@@ -22,9 +22,9 @@ struct A {\n fn main () {\n     // external crate struct\n     let k = B {\n-        aa: 20, //~ ERROR structure `struct_field_privacy::B` has no field named `aa`\n+        aa: 20, //~ ERROR structure `xc::B` has no field named `aa`\n         //~^ HELP did you mean `a`?\n-        bb: 20, //~ ERROR structure `struct_field_privacy::B` has no field named `bb`\n+        bb: 20, //~ ERROR structure `xc::B` has no field named `bb`\n     };\n     // local crate struct\n     let l = A {"}]}