{"sha": "9d0a6aaee388c6bba43806c72e81a21ac7e07008", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMGE2YWFlZTM4OGM2YmJhNDM4MDZjNzJlODFhMjFhYzdlMDcwMDg=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-06-09T19:28:51Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-06-09T19:28:51Z"}, "message": "display Doctest code lens before comment #4785\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "c8df3efb4f08daca0328e51df29af23ce4feddf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8df3efb4f08daca0328e51df29af23ce4feddf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d0a6aaee388c6bba43806c72e81a21ac7e07008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d0a6aaee388c6bba43806c72e81a21ac7e07008", "html_url": "https://github.com/rust-lang/rust/commit/9d0a6aaee388c6bba43806c72e81a21ac7e07008", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d0a6aaee388c6bba43806c72e81a21ac7e07008/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba821afa248153a58eede29048d2b21d30a2ea55", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba821afa248153a58eede29048d2b21d30a2ea55", "html_url": "https://github.com/rust-lang/rust/commit/ba821afa248153a58eede29048d2b21d30a2ea55"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "820be583f23057dc2de454ed2642bffd1acf02f2", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9d0a6aaee388c6bba43806c72e81a21ac7e07008/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0a6aaee388c6bba43806c72e81a21ac7e07008/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=9d0a6aaee388c6bba43806c72e81a21ac7e07008", "patch": "@@ -4,6 +4,7 @@ use either::Either;\n use hir::{original_range, AssocItem, FieldSource, HasSource, InFile, ModuleSource};\n use ra_db::{FileId, SourceDatabase};\n use ra_ide_db::{defs::Definition, RootDatabase};\n+use ra_syntax::ast::AstToken;\n use ra_syntax::{\n     ast::{self, DocCommentsOwner, NameOwner},\n     match_ast, AstNode, SmolStr,\n@@ -135,8 +136,8 @@ impl NavigationTarget {\n         db: &RootDatabase,\n         node: InFile<&dyn ast::NameOwner>,\n     ) -> NavigationTarget {\n-        //FIXME: use `_` instead of empty string\n-        let name = node.value.name().map(|it| it.text().clone()).unwrap_or_default();\n+        let name =\n+            node.value.name().map(|it| it.text().clone()).unwrap_or_else(|| SmolStr::new(\"_\"));\n         let focus_range =\n             node.value.name().map(|it| original_range(db, node.with_value(it.syntax())).range);\n         let frange = original_range(db, node.map(|it| it.syntax()));\n@@ -150,6 +151,26 @@ impl NavigationTarget {\n         )\n     }\n \n+    /// Allows `NavigationTarget` to be created from a `DocCommentsOwner` and a `NameOwner`\n+    pub(crate) fn from_doc_commented(\n+        db: &RootDatabase,\n+        named: InFile<&dyn ast::NameOwner>,\n+        node: InFile<&dyn ast::DocCommentsOwner>,\n+    ) -> NavigationTarget {\n+        let name =\n+            named.value.name().map(|it| it.text().clone()).unwrap_or_else(|| SmolStr::new(\"_\"));\n+        let focus_range = node.value.doc_comments().next().map(|it| it.syntax().text_range());\n+        let frange = original_range(db, node.map(|it| it.syntax()));\n+\n+        NavigationTarget::from_syntax(\n+            frange.file_id,\n+            name,\n+            focus_range,\n+            frange.range,\n+            node.value.syntax().kind(),\n+        )\n+    }\n+\n     fn from_syntax(\n         file_id: FileId,\n         name: SmolStr,"}, {"sha": "be60b53235f2a5689c5f1b51a7f18ec1f927bbfb", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d0a6aaee388c6bba43806c72e81a21ac7e07008/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0a6aaee388c6bba43806c72e81a21ac7e07008/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=9d0a6aaee388c6bba43806c72e81a21ac7e07008", "patch": "@@ -171,7 +171,15 @@ fn runnable_fn(\n     let cfg_exprs =\n         attrs.by_key(\"cfg\").tt_values().map(|subtree| ra_cfg::parse_cfg(subtree)).collect();\n \n-    let nav = NavigationTarget::from_named(sema.db, InFile::new(file_id.into(), &fn_def));\n+    let nav = if let RunnableKind::DocTest { .. } = kind {\n+        NavigationTarget::from_doc_commented(\n+            sema.db,\n+            InFile::new(file_id.into(), &fn_def),\n+            InFile::new(file_id.into(), &fn_def),\n+        )\n+    } else {\n+        NavigationTarget::from_named(sema.db, InFile::new(file_id.into(), &fn_def))\n+    };\n     Some(Runnable { nav, kind, cfg_exprs })\n }\n "}]}