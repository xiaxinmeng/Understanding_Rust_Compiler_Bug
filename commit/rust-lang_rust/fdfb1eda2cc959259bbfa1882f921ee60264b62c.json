{"sha": "fdfb1eda2cc959259bbfa1882f921ee60264b62c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZmIxZWRhMmNjOTU5MjU5YmJmYTE4ODJmOTIxZWU2MDI2NGI2MmM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-09-21T09:30:29Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-09-21T09:30:29Z"}, "message": "Rustup to rustc 1.39.0-nightly (97e58c0d3 2019-09-20)", "tree": {"sha": "e86075360fc7387fc3fd62f21fa3f49d0f7e9749", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e86075360fc7387fc3fd62f21fa3f49d0f7e9749"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdfb1eda2cc959259bbfa1882f921ee60264b62c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdfb1eda2cc959259bbfa1882f921ee60264b62c", "html_url": "https://github.com/rust-lang/rust/commit/fdfb1eda2cc959259bbfa1882f921ee60264b62c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdfb1eda2cc959259bbfa1882f921ee60264b62c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e2c8f8bbfbdbbaa94066031a223e138a8aad573", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2c8f8bbfbdbbaa94066031a223e138a8aad573", "html_url": "https://github.com/rust-lang/rust/commit/2e2c8f8bbfbdbbaa94066031a223e138a8aad573"}], "stats": {"total": 57, "additions": 15, "deletions": 42}, "files": [{"sha": "f5d5445dab44599b18129d3751e328633323622c", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdfb1eda2cc959259bbfa1882f921ee60264b62c/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdfb1eda2cc959259bbfa1882f921ee60264b62c/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=fdfb1eda2cc959259bbfa1882f921ee60264b62c", "patch": "@@ -384,7 +384,7 @@ pub fn codegen_terminator_call<'tcx>(\n \n         match instance.def {\n             InstanceDef::Intrinsic(_) => {\n-                crate::intrinsics::codegen_intrinsic_call(fx, def_id, substs, args, destination);\n+                crate::intrinsics::codegen_intrinsic_call(fx, instance, args, destination);\n                 return;\n             }\n             InstanceDef::DropGlue(_, None) => {"}, {"sha": "21bd8365eb2b55ae1cc557b00c58a854d4c3c149", "filename": "src/intrinsics.rs", "status": "modified", "additions": 14, "deletions": 41, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/fdfb1eda2cc959259bbfa1882f921ee60264b62c/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdfb1eda2cc959259bbfa1882f921ee60264b62c/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=fdfb1eda2cc959259bbfa1882f921ee60264b62c", "patch": "@@ -1,7 +1,5 @@\n use crate::prelude::*;\n \n-use rustc::ty::subst::SubstsRef;\n-\n macro intrinsic_pat {\n     (_) => {\n         _\n@@ -337,11 +335,13 @@ macro_rules! simd_flt_binop {\n \n pub fn codegen_intrinsic_call<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n-    def_id: DefId,\n-    substs: SubstsRef<'tcx>,\n+    instance: Instance<'tcx>,\n     args: &[mir::Operand<'tcx>],\n     destination: Option<(CPlace<'tcx>, BasicBlock)>,\n ) {\n+    let def_id = instance.def_id();\n+    let substs = instance.substs;\n+\n     let intrinsic = fx.tcx.item_name(def_id).as_str();\n     let intrinsic = &intrinsic[..];\n \n@@ -368,7 +368,6 @@ pub fn codegen_intrinsic_call<'tcx>(\n         }\n     };\n \n-    let u64_layout = fx.layout_of(fx.tcx.types.u64);\n     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n \n     call_intrinsic_match! {\n@@ -448,11 +447,6 @@ pub fn codegen_intrinsic_call<'tcx>(\n             let discr = crate::discriminant::codegen_get_discriminant(fx, val, ret.layout());\n             ret.write_cvalue(fx, discr);\n         };\n-        size_of, <T> () {\n-            let size_of = fx.layout_of(T).size.bytes();\n-            let size_of = CValue::const_val(fx, usize_layout.ty, size_of.into());\n-            ret.write_cvalue(fx, size_of);\n-        };\n         size_of_val, <T> (c ptr) {\n             let layout = fx.layout_of(T);\n             let size = if layout.is_unsized() {\n@@ -467,11 +461,6 @@ pub fn codegen_intrinsic_call<'tcx>(\n             };\n             ret.write_cvalue(fx, CValue::by_val(size, usize_layout));\n         };\n-        min_align_of, <T> () {\n-            let min_align = fx.layout_of(T).align.abi.bytes();\n-            let min_align = CValue::const_val(fx, usize_layout.ty, min_align.into());\n-            ret.write_cvalue(fx, min_align);\n-        };\n         min_align_of_val, <T> (c ptr) {\n             let layout = fx.layout_of(T);\n             let align = if layout.is_unsized() {\n@@ -486,23 +475,6 @@ pub fn codegen_intrinsic_call<'tcx>(\n             };\n             ret.write_cvalue(fx, CValue::by_val(align, usize_layout));\n         };\n-        pref_align_of, <T> () {\n-            let pref_align = fx.layout_of(T).align.pref.bytes();\n-            let pref_align = CValue::const_val(fx, usize_layout.ty, pref_align.into());\n-            ret.write_cvalue(fx, pref_align);\n-        };\n-\n-\n-        type_id, <T> () {\n-            let type_id = fx.tcx.type_id_hash(T);\n-            let type_id = CValue::const_val(fx, u64_layout.ty, type_id.into());\n-            ret.write_cvalue(fx, type_id);\n-        };\n-        type_name, <T> () {\n-            let type_name = fx.tcx.type_name(T);\n-            let type_name = crate::constant::trans_const_value(fx, type_name);\n-            ret.write_cvalue(fx, type_name);\n-        };\n \n         _ if intrinsic.starts_with(\"unchecked_\") || intrinsic == \"exact_div\", (c x, c y) {\n             // FIXME trap on overflow\n@@ -814,15 +786,6 @@ pub fn codegen_intrinsic_call<'tcx>(\n             let res = CValue::by_val(swap(&mut fx.bcx, arg), fx.layout_of(T));\n             ret.write_cvalue(fx, res);\n         };\n-        needs_drop, <T> () {\n-            let needs_drop = if T.needs_drop(fx.tcx, ParamEnv::reveal_all()) {\n-                1\n-            } else {\n-                0\n-            };\n-            let needs_drop = CValue::const_val(fx, fx.tcx.types.bool, needs_drop);\n-            ret.write_cvalue(fx, needs_drop);\n-        };\n         panic_if_uninhabited, <T> () {\n             if fx.layout_of(T).abi.is_uninhabited() {\n                 crate::trap::trap_panic(fx, \"[panic] Called intrinsic::panic_if_uninhabited for uninhabited type.\");\n@@ -843,6 +806,16 @@ pub fn codegen_intrinsic_call<'tcx>(\n             dest.write_cvalue(fx, val);\n         };\n \n+        size_of | pref_align_of | min_align_of | needs_drop | type_id | type_name, () {\n+            let gid = rustc::mir::interpret::GlobalId {\n+                instance,\n+                promoted: None,\n+            };\n+            let const_val = fx.tcx.const_eval(ParamEnv::reveal_all().and(gid)).unwrap();\n+            let val = crate::constant::trans_const_value(fx, const_val);\n+            ret.write_cvalue(fx, val);\n+        };\n+\n         _ if intrinsic.starts_with(\"atomic_fence\"), () {};\n         _ if intrinsic.starts_with(\"atomic_singlethreadfence\"), () {};\n         _ if intrinsic.starts_with(\"atomic_load\"), (c ptr) {"}]}