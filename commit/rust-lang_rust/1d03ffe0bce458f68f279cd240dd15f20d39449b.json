{"sha": "1d03ffe0bce458f68f279cd240dd15f20d39449b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMDNmZmUwYmNlNDU4ZjY4ZjI3OWNkMjQwZGQxNWYyMGQzOTQ0OWI=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-08-08T03:55:01Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-08-09T19:25:22Z"}, "message": "rustc_typeck: use IndexSet in InteriorVisitor", "tree": {"sha": "3f5b6047c83977a49900b64b8d1378c206d38428", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f5b6047c83977a49900b64b8d1378c206d38428"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d03ffe0bce458f68f279cd240dd15f20d39449b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d03ffe0bce458f68f279cd240dd15f20d39449b", "html_url": "https://github.com/rust-lang/rust/commit/1d03ffe0bce458f68f279cd240dd15f20d39449b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d03ffe0bce458f68f279cd240dd15f20d39449b/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b25881711548060c98d9879790ea414a5cce32a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b25881711548060c98d9879790ea414a5cce32a6", "html_url": "https://github.com/rust-lang/rust/commit/b25881711548060c98d9879790ea414a5cce32a6"}], "stats": {"total": 33, "additions": 14, "deletions": 19}, "files": [{"sha": "93fdf93e9e3944af3f8d8eecbf5f2dda7e267e46", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1d03ffe0bce458f68f279cd240dd15f20d39449b/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d03ffe0bce458f68f279cd240dd15f20d39449b/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=1d03ffe0bce458f68f279cd240dd15f20d39449b", "patch": "@@ -4,7 +4,7 @@\n //! types computed here.\n \n use super::FnCtxt;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -16,7 +16,7 @@ use rustc_span::Span;\n \n struct InteriorVisitor<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n-    types: FxHashMap<ty::GeneratorInteriorTypeCause<'tcx>, usize>,\n+    types: FxIndexSet<ty::GeneratorInteriorTypeCause<'tcx>>,\n     region_scope_tree: &'tcx region::ScopeTree,\n     expr_count: usize,\n     kind: hir::GeneratorKind,\n@@ -88,18 +88,15 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                     .span_note(yield_data.span, &*note)\n                     .emit();\n             } else {\n-                // Map the type to the number of types added before it\n-                let entries = self.types.len();\n+                // Insert the type into the ordered set.\n                 let scope_span = scope.map(|s| s.span(self.fcx.tcx, self.region_scope_tree));\n-                self.types\n-                    .entry(ty::GeneratorInteriorTypeCause {\n-                        span: source_span,\n-                        ty: &ty,\n-                        scope_span,\n-                        yield_span: yield_data.span,\n-                        expr: expr.map(|e| e.hir_id),\n-                    })\n-                    .or_insert(entries);\n+                self.types.insert(ty::GeneratorInteriorTypeCause {\n+                    span: source_span,\n+                    ty: &ty,\n+                    scope_span,\n+                    yield_span: yield_data.span,\n+                    expr: expr.map(|e| e.hir_id),\n+                });\n             }\n         } else {\n             debug!(\n@@ -132,7 +129,7 @@ pub fn resolve_interior<'a, 'tcx>(\n     let body = fcx.tcx.hir().body(body_id);\n     let mut visitor = InteriorVisitor {\n         fcx,\n-        types: FxHashMap::default(),\n+        types: FxIndexSet::default(),\n         region_scope_tree: fcx.tcx.region_scope_tree(def_id),\n         expr_count: 0,\n         kind,\n@@ -144,10 +141,8 @@ pub fn resolve_interior<'a, 'tcx>(\n     let region_expr_count = visitor.region_scope_tree.body_expr_count(body_id).unwrap();\n     assert_eq!(region_expr_count, visitor.expr_count);\n \n-    let mut types: Vec<_> = visitor.types.drain().collect();\n-\n-    // Sort types by insertion order\n-    types.sort_by_key(|t| t.1);\n+    // The types are already kept in insertion order.\n+    let types = visitor.types;\n \n     // The types in the generator interior contain lifetimes local to the generator itself,\n     // which should not be exposed outside of the generator. Therefore, we replace these\n@@ -164,7 +159,7 @@ pub fn resolve_interior<'a, 'tcx>(\n     let mut captured_tys = FxHashSet::default();\n     let type_causes: Vec<_> = types\n         .into_iter()\n-        .filter_map(|(mut cause, _)| {\n+        .filter_map(|mut cause| {\n             // Erase regions and canonicalize late-bound regions to deduplicate as many types as we\n             // can.\n             let erased = fcx.tcx.erase_regions(&cause.ty);"}]}