{"sha": "6878fce9c707dd7449df1981303dfc2c1fedabab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NzhmY2U5YzcwN2RkNzQ0OWRmMTk4MTMwM2RmYzJjMWZlZGFiYWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-06T09:42:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-06T09:42:17Z"}, "message": "Auto merge of #29604 - bstrie:de_ms, r=alexcrichton", "tree": {"sha": "c40ef568e55faaf938901bff4928e21724bf0c4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c40ef568e55faaf938901bff4928e21724bf0c4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6878fce9c707dd7449df1981303dfc2c1fedabab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6878fce9c707dd7449df1981303dfc2c1fedabab", "html_url": "https://github.com/rust-lang/rust/commit/6878fce9c707dd7449df1981303dfc2c1fedabab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6878fce9c707dd7449df1981303dfc2c1fedabab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02d9f294558da746e8c5707f13cd9153d3ac5f40", "url": "https://api.github.com/repos/rust-lang/rust/commits/02d9f294558da746e8c5707f13cd9153d3ac5f40", "html_url": "https://github.com/rust-lang/rust/commit/02d9f294558da746e8c5707f13cd9153d3ac5f40"}, {"sha": "a2efa2aa291c938200da59b89b14214c8d2c70ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2efa2aa291c938200da59b89b14214c8d2c70ba", "html_url": "https://github.com/rust-lang/rust/commit/a2efa2aa291c938200da59b89b14214c8d2c70ba"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "8042e2f966ca73e8582579b9f9619dbcc7968e56", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6878fce9c707dd7449df1981303dfc2c1fedabab/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6878fce9c707dd7449df1981303dfc2c1fedabab/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=6878fce9c707dd7449df1981303dfc2c1fedabab", "patch": "@@ -430,7 +430,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                 .expect(&format!(\"failed to exec `{:?}`\", config.adb_path));\n             loop {\n                 //waiting 1 second for gdbserver start\n-                ::std::thread::sleep_ms(1000);\n+                ::std::thread::sleep(::std::time::Duration::new(1,0));\n                 if TcpStream::connect(\"127.0.0.1:5039\").is_ok() {\n                     break\n                 }"}, {"sha": "7a80a202dd9c125b76416359bb7729b53f3a0526", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6878fce9c707dd7449df1981303dfc2c1fedabab/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6878fce9c707dd7449df1981303dfc2c1fedabab/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=6878fce9c707dd7449df1981303dfc2c1fedabab", "patch": "@@ -167,6 +167,8 @@ impl Condvar {\n     /// Like `wait`, the lock specified will be re-acquired when this function\n     /// returns, regardless of whether the timeout elapsed or not.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[deprecated(since = \"1.6.0\", reason = \"replaced by `std::sync::Condvar::wait_timeout`\")]\n+    #[allow(deprecated)]\n     pub fn wait_timeout_ms<'a, T>(&self, guard: MutexGuard<'a, T>, ms: u32)\n                                   -> LockResult<(MutexGuard<'a, T>, bool)> {\n         unsafe {\n@@ -289,6 +291,7 @@ impl StaticCondvar {\n     #[unstable(feature = \"static_condvar\",\n                reason = \"may be merged with Condvar in the future\",\n                issue = \"27717\")]\n+    #[deprecated(since = \"1.6.0\", reason = \"replaced by `std::sync::StaticCondvar::wait_timeout`\")]\n     pub fn wait_timeout_ms<'a, T>(&'static self, guard: MutexGuard<'a, T>, ms: u32)\n                                   -> LockResult<(MutexGuard<'a, T>, bool)> {\n         match self.wait_timeout(guard, Duration::from_millis(ms as u64)) {"}, {"sha": "75e3a52feea65aed3d91d539b0d3b4dbc4b195ca", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6878fce9c707dd7449df1981303dfc2c1fedabab/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6878fce9c707dd7449df1981303dfc2c1fedabab/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=6878fce9c707dd7449df1981303dfc2c1fedabab", "patch": "@@ -390,6 +390,7 @@ pub fn catch_panic<F, R>(f: F) -> Result<R>\n /// this function will not return early due to a signal being received or a\n /// spurious wakeup.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[deprecated(since = \"1.6.0\", reason = \"replaced by `std::thread::sleep`\")]\n pub fn sleep_ms(ms: u32) {\n     sleep(Duration::from_millis(ms as u64))\n }\n@@ -456,6 +457,7 @@ pub fn park() {\n ///\n /// See the module doc for more detail.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[deprecated(since = \"1.6.0\", reason = \"replaced by `std::thread::park_timeout`\")]\n pub fn park_timeout_ms(ms: u32) {\n     park_timeout(Duration::from_millis(ms as u64))\n }"}]}