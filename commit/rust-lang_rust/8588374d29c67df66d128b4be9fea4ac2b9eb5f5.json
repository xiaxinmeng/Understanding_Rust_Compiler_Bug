{"sha": "8588374d29c67df66d128b4be9fea4ac2b9eb5f5", "node_id": "C_kwDOAAsO6NoAKDg1ODgzNzRkMjljNjdkZjY2ZDEyOGI0YmU5ZmVhNGFjMmI5ZWI1ZjU", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-08-30T21:54:37Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-08-30T21:54:37Z"}, "message": "Use in-page links for sanitizer docs.", "tree": {"sha": "6ee96b1dd80d9553453a6ca78f59df56a744863e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ee96b1dd80d9553453a6ca78f59df56a744863e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8588374d29c67df66d128b4be9fea4ac2b9eb5f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8588374d29c67df66d128b4be9fea4ac2b9eb5f5", "html_url": "https://github.com/rust-lang/rust/commit/8588374d29c67df66d128b4be9fea4ac2b9eb5f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8588374d29c67df66d128b4be9fea4ac2b9eb5f5/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "350cca3b6a89d08fe2a3309be5233e7c8a2274c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/350cca3b6a89d08fe2a3309be5233e7c8a2274c9", "html_url": "https://github.com/rust-lang/rust/commit/350cca3b6a89d08fe2a3309be5233e7c8a2274c9"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "b33405f18e90bcc2c92672cdaecfdc0df869a78b", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8588374d29c67df66d128b4be9fea4ac2b9eb5f5/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/8588374d29c67df66d128b4be9fea4ac2b9eb5f5/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=8588374d29c67df66d128b4be9fea4ac2b9eb5f5", "patch": "@@ -9,17 +9,17 @@ The tracking issues for this feature are:\n \n This feature allows for use of one of following sanitizers:\n \n-* [AddressSanitizer][clang-asan] a fast memory error detector.\n-* [ControlFlowIntegrity][clang-cfi] LLVM Control Flow Integrity (CFI) provides\n+* [AddressSanitizer](#addresssanitizer) a fast memory error detector.\n+* [ControlFlowIntegrity](#controlflowintegrity) LLVM Control Flow Integrity (CFI) provides\n   forward-edge control flow protection.\n-* [HWAddressSanitizer][clang-hwasan] a memory error detector similar to\n+* [HWAddressSanitizer](#hwaddresssanitizer) a memory error detector similar to\n   AddressSanitizer, but based on partial hardware assistance.\n-* [LeakSanitizer][clang-lsan] a run-time memory leak detector.\n-* [MemorySanitizer][clang-msan] a detector of uninitialized reads.\n-* [MemTagSanitizer][clang-memtag] fast memory error detector based on\n+* [LeakSanitizer](#leaksanitizer) a run-time memory leak detector.\n+* [MemorySanitizer](#memorysanitizer) a detector of uninitialized reads.\n+* [MemTagSanitizer](#memtagsanitizer) fast memory error detector based on\n   Armv8.5-A Memory Tagging Extension.\n-* [ShadowCallStack][clang-scs] provides backward-edge control flow protection.\n-* [ThreadSanitizer][clang-tsan] a fast data race detector.\n+* [ShadowCallStack](#shadowcallstack) provides backward-edge control flow protection.\n+* [ThreadSanitizer](#threadsanitizer) a fast data race detector.\n \n To enable a sanitizer compile with `-Zsanitizer=address`,`-Zsanitizer=cfi`,\n `-Zsanitizer=hwaddress`, `-Zsanitizer=leak`, `-Zsanitizer=memory`,\n@@ -58,6 +58,8 @@ AddressSanitizer works with non-instrumented code although it will impede its\n ability to detect some bugs.  It is not expected to produce false positive\n reports.\n \n+See the [Clang AddressSanitizer documentation][clang-asan] for more details.\n+\n ## Examples\n \n Stack buffer overflow:\n@@ -204,6 +206,8 @@ tracking issue [#89653](https://github.com/rust-lang/rust/issues/89653)).\n \n LLVM CFI can be enabled with -Zsanitizer=cfi and requires LTO (i.e., -Clto).\n \n+See the [Clang ControlFlowIntegrity documentation][clang-cfi] for more details.\n+\n ## Example\n \n ```text\n@@ -430,6 +434,8 @@ HWAddressSanitizer requires `tagged-globals` target feature to instrument\n globals. To enable this target feature compile with `-C\n target-feature=+tagged-globals`\n \n+See the [Clang HWAddressSanitizer documentation][clang-hwasan] for more details.\n+\n ## Example\n \n Heap buffer overflow:\n@@ -507,6 +513,8 @@ LeakSanitizer is supported on the following targets:\n * `x86_64-apple-darwin`\n * `x86_64-unknown-linux-gnu`\n \n+See the [Clang LeakSanitizer documentation][clang-lsan] for more details.\n+\n # MemorySanitizer\n \n MemorySanitizer is detector of uninitialized reads.\n@@ -521,6 +529,8 @@ MemorySanitizer requires all program code to be instrumented. C/C++ dependencies\n need to be recompiled using Clang with `-fsanitize=memory` option. Failing to\n achieve that will result in false positive reports.\n \n+See the [Clang MemorySanitizer documentation][clang-msan] for more details.\n+\n ## Example\n \n Detecting the use of uninitialized memory. The `-Zbuild-std` flag rebuilds and\n@@ -569,7 +579,7 @@ MemTagSanitizer is supported on the following targets:\n MemTagSanitizer requires hardware support and the `mte` target feature.\n To enable this target feature compile with `-C target-feature=\"+mte\"`.\n \n-More information can be found in the associated [LLVM documentation](https://llvm.org/docs/MemTagSanitizer.html).\n+See the [LLVM MemTagSanitizer documentation][llvm-memtag] for more details.\n \n # ShadowCallStack\n \n@@ -581,7 +591,9 @@ ShadowCallStack can be enabled with `-Zsanitizer=shadow-call-stack` option and i\n \n * `aarch64-linux-android`\n \n-A runtime must be provided by the application or operating system. See the [LLVM documentation][clang-scs] for further details.\n+A runtime must be provided by the application or operating system.\n+\n+See the [Clang ShadowCallStack documentation][clang-scs] for more details.\n \n # ThreadSanitizer\n \n@@ -604,6 +616,8 @@ can lead to false positive reports.\n ThreadSanitizer does not support atomic fences `std::sync::atomic::fence`,\n nor synchronization performed using inline assembly code.\n \n+See the [Clang ThreadSanitizer documentation][clang-tsan] for more details.\n+\n ## Example\n \n ```rust\n@@ -673,6 +687,7 @@ Sanitizers produce symbolized stacktraces when llvm-symbolizer binary is in `PAT\n * [HWAddressSanitizer in Clang][clang-hwasan]\n * [LeakSanitizer in Clang][clang-lsan]\n * [MemorySanitizer in Clang][clang-msan]\n+* [MemTagSanitizer in LLVM][llvm-memtag]\n * [ThreadSanitizer in Clang][clang-tsan]\n \n [clang-asan]: https://clang.llvm.org/docs/AddressSanitizer.html\n@@ -682,3 +697,4 @@ Sanitizers produce symbolized stacktraces when llvm-symbolizer binary is in `PAT\n [clang-msan]: https://clang.llvm.org/docs/MemorySanitizer.html\n [clang-scs]: https://clang.llvm.org/docs/ShadowCallStack.html\n [clang-tsan]: https://clang.llvm.org/docs/ThreadSanitizer.html\n+[llvm-memtag]: https://llvm.org/docs/MemTagSanitizer.html"}]}