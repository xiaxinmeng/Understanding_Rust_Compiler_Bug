{"sha": "85cee57fd791d670d92dc61e0ad71594128dd45a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1Y2VlNTdmZDc5MWQ2NzBkOTJkYzYxZTBhZDcxNTk0MTI4ZGQ0NWE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-09-05T14:28:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-05T14:28:36Z"}, "message": "Rollup merge of #76285 - matklad:censor-spacing, r=petrochenkov\n\nMove jointness censoring to proc_macro\n\nProc-macro API currently exposes jointness in `Punct` tokens. That is,\n`+` in `+one` is **non** joint.\n\nOur lexer produces jointness info for all tokens, so we need to censor\nit *somewhere*\n\nPreviously we did this in a lexer, but it makes more sense to do this\nin a proc-macro server.\n\nr? @petrochenkov", "tree": {"sha": "1c73e6113a1a479b514949d9db2ff538f3661357", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c73e6113a1a479b514949d9db2ff538f3661357"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85cee57fd791d670d92dc61e0ad71594128dd45a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfU6CUCRBK7hj4Ov3rIwAAdHIIAFdNNH05Uy7ZYLZRp3kne0TP\nojdXyZP6on9HMmsHOVw+xAmlszRvadrL1TkMQSC19StzCtkPBJmnADY4hxRyhVMR\nfwSyIzD4mq3arM9MI4/9qQB6hn1rvK1CH3qJ/a1yRp3cYZM6sYbyDDNyimQWSK2W\nSaAPnA2kbV+VD2AuFFE92125cR0Dz/60aJrfWFmGrjOruIeQQjXRyil2hrC5PyfP\n+oJpn39atpl6CbOdODKWNM2fEy/MAI1VgEKLS1a2EHPk+CTu7Skg+VcAAg3zcETH\nYSWYNDnsxyNkUWllK3Ytry1KOmRMTgcRBZp8VLwFCujKrvWkmnXbOl69LSSNk5U=\n=fB6Q\n-----END PGP SIGNATURE-----\n", "payload": "tree 1c73e6113a1a479b514949d9db2ff538f3661357\nparent b4d387302416c90a3f70211770292d8d8ab5e07d\nparent 09d3db2e590030de8ae7d00589f8a174e5f51f03\nauthor Dylan DPC <dylan.dpc@gmail.com> 1599316116 +0200\ncommitter GitHub <noreply@github.com> 1599316116 +0200\n\nRollup merge of #76285 - matklad:censor-spacing, r=petrochenkov\n\nMove jointness censoring to proc_macro\n\nProc-macro API currently exposes jointness in `Punct` tokens. That is,\n`+` in `+one` is **non** joint.\n\nOur lexer produces jointness info for all tokens, so we need to censor\nit *somewhere*\n\nPreviously we did this in a lexer, but it makes more sense to do this\nin a proc-macro server.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85cee57fd791d670d92dc61e0ad71594128dd45a", "html_url": "https://github.com/rust-lang/rust/commit/85cee57fd791d670d92dc61e0ad71594128dd45a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85cee57fd791d670d92dc61e0ad71594128dd45a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4d387302416c90a3f70211770292d8d8ab5e07d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d387302416c90a3f70211770292d8d8ab5e07d", "html_url": "https://github.com/rust-lang/rust/commit/b4d387302416c90a3f70211770292d8d8ab5e07d"}, {"sha": "09d3db2e590030de8ae7d00589f8a174e5f51f03", "url": "https://api.github.com/repos/rust-lang/rust/commits/09d3db2e590030de8ae7d00589f8a174e5f51f03", "html_url": "https://github.com/rust-lang/rust/commit/09d3db2e590030de8ae7d00589f8a174e5f51f03"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "fb98f55a2154a5757fcb5b7d885d57a55f4612cf", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85cee57fd791d670d92dc61e0ad71594128dd45a/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85cee57fd791d670d92dc61e0ad71594128dd45a/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=85cee57fd791d670d92dc61e0ad71594128dd45a", "patch": "@@ -403,8 +403,8 @@ impl Cursor {\n         self.index = index;\n     }\n \n-    pub fn look_ahead(&self, n: usize) -> Option<TokenTree> {\n-        self.stream.0[self.index..].get(n).map(|(tree, _)| tree.clone())\n+    pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {\n+        self.stream.0[self.index..].get(n).map(|(tree, _)| tree)\n     }\n }\n "}, {"sha": "765871a6396f353d8aea31812da16059a0ec9ac6", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/85cee57fd791d670d92dc61e0ad71594128dd45a/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85cee57fd791d670d92dc61e0ad71594128dd45a/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=85cee57fd791d670d92dc61e0ad71594128dd45a", "patch": "@@ -47,15 +47,26 @@ impl ToInternal<token::DelimToken> for Delimiter {\n     }\n }\n \n-impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n-    for TokenTree<Group, Punct, Ident, Literal>\n+impl\n+    FromInternal<(\n+        TreeAndJoint,\n+        Option<&'_ tokenstream::TokenTree>,\n+        &'_ ParseSess,\n+        &'_ mut Vec<Self>,\n+    )> for TokenTree<Group, Punct, Ident, Literal>\n {\n     fn from_internal(\n-        ((tree, is_joint), sess, stack): (TreeAndJoint, &ParseSess, &mut Vec<Self>),\n+        ((tree, is_joint), look_ahead, sess, stack): (\n+            TreeAndJoint,\n+            Option<&tokenstream::TokenTree>,\n+            &ParseSess,\n+            &mut Vec<Self>,\n+        ),\n     ) -> Self {\n         use rustc_ast::token::*;\n \n-        let joint = is_joint == Joint;\n+        let joint = is_joint == Joint\n+            && matches!(look_ahead, Some(tokenstream::TokenTree::Token(t)) if t.is_op());\n         let Token { kind, span } = match tree {\n             tokenstream::TokenTree::Delimited(span, delim, tts) => {\n                 let delimiter = Delimiter::from_internal(delim);\n@@ -445,7 +456,8 @@ impl server::TokenStreamIter for Rustc<'_> {\n         loop {\n             let tree = iter.stack.pop().or_else(|| {\n                 let next = iter.cursor.next_with_joint()?;\n-                Some(TokenTree::from_internal((next, self.sess, &mut iter.stack)))\n+                let lookahead = iter.cursor.look_ahead(0);\n+                Some(TokenTree::from_internal((next, lookahead, self.sess, &mut iter.stack)))\n             })?;\n             // A hack used to pass AST fragments to attribute and derive macros\n             // as a single nonterminal token instead of a token stream."}, {"sha": "fb27ccfbd9429b5a168064eec2b99f5b5f601ef5", "filename": "compiler/rustc_parse/src/lexer/tokentrees.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85cee57fd791d670d92dc61e0ad71594128dd45a/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85cee57fd791d670d92dc61e0ad71594128dd45a/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs?ref=85cee57fd791d670d92dc61e0ad71594128dd45a", "patch": "@@ -262,10 +262,7 @@ impl<'a> TokenTreesReader<'a> {\n             }\n             _ => {\n                 let tt = TokenTree::Token(self.token.take());\n-                let mut is_joint = self.bump();\n-                if !self.token.is_op() {\n-                    is_joint = NonJoint;\n-                }\n+                let is_joint = self.bump();\n                 Ok((tt, is_joint))\n             }\n         }"}, {"sha": "1b2067f8f256b49b182c8d38e9c0e9917113526a", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85cee57fd791d670d92dc61e0ad71594128dd45a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85cee57fd791d670d92dc61e0ad71594128dd45a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=85cee57fd791d670d92dc61e0ad71594128dd45a", "patch": "@@ -822,15 +822,15 @@ impl<'a> Parser<'a> {\n         }\n \n         let frame = &self.token_cursor.frame;\n-        looker(&match frame.tree_cursor.look_ahead(dist - 1) {\n+        match frame.tree_cursor.look_ahead(dist - 1) {\n             Some(tree) => match tree {\n-                TokenTree::Token(token) => token,\n+                TokenTree::Token(token) => looker(token),\n                 TokenTree::Delimited(dspan, delim, _) => {\n-                    Token::new(token::OpenDelim(delim), dspan.open)\n+                    looker(&Token::new(token::OpenDelim(delim.clone()), dspan.open))\n                 }\n             },\n-            None => Token::new(token::CloseDelim(frame.delim), frame.span.close),\n-        })\n+            None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),\n+        }\n     }\n \n     /// Returns whether any of the given keywords are `dist` tokens ahead of the current one."}]}