{"sha": "a9d033d0e5e29551fc578e8ea4eb3d5f43166b94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZDAzM2QwZTVlMjk1NTFmYzU3OGU4ZWE0ZWIzZDVmNDMxNjZiOTQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-16T08:46:34Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-16T08:46:37Z"}, "message": "Return 0 from cpuid for all subleaves of leaf 7\n\nThis is necessary to support the cpufeatures crate\n\nFixes #1173", "tree": {"sha": "d837054276dae436e8e3f0c2413e6f890b7266a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d837054276dae436e8e3f0c2413e6f890b7266a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9d033d0e5e29551fc578e8ea4eb3d5f43166b94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d033d0e5e29551fc578e8ea4eb3d5f43166b94", "html_url": "https://github.com/rust-lang/rust/commit/a9d033d0e5e29551fc578e8ea4eb3d5f43166b94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9d033d0e5e29551fc578e8ea4eb3d5f43166b94/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "328f06718a71e786e463ae6a5d1874bd13061cde", "url": "https://api.github.com/repos/rust-lang/rust/commits/328f06718a71e786e463ae6a5d1874bd13061cde", "html_url": "https://github.com/rust-lang/rust/commit/328f06718a71e786e463ae6a5d1874bd13061cde"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "d02dfd93c3ee3c533aa2b27a601306a59a757c6d", "filename": "src/intrinsics/cpuid.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a9d033d0e5e29551fc578e8ea4eb3d5f43166b94/src%2Fintrinsics%2Fcpuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d033d0e5e29551fc578e8ea4eb3d5f43166b94/src%2Fintrinsics%2Fcpuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fcpuid.rs?ref=a9d033d0e5e29551fc578e8ea4eb3d5f43166b94", "patch": "@@ -12,6 +12,7 @@ pub(crate) fn codegen_cpuid_call<'tcx>(\n ) -> (Value, Value, Value, Value) {\n     let leaf_0 = fx.bcx.create_block();\n     let leaf_1 = fx.bcx.create_block();\n+    let leaf_7 = fx.bcx.create_block();\n     let leaf_8000_0000 = fx.bcx.create_block();\n     let leaf_8000_0001 = fx.bcx.create_block();\n     let unsupported_leaf = fx.bcx.create_block();\n@@ -25,6 +26,7 @@ pub(crate) fn codegen_cpuid_call<'tcx>(\n     let mut switch = cranelift_frontend::Switch::new();\n     switch.set_entry(0, leaf_0);\n     switch.set_entry(1, leaf_1);\n+    switch.set_entry(7, leaf_7);\n     switch.set_entry(0x8000_0000, leaf_8000_0000);\n     switch.set_entry(0x8000_0001, leaf_8000_0001);\n     switch.emit(&mut fx.bcx, leaf, unsupported_leaf);\n@@ -43,6 +45,11 @@ pub(crate) fn codegen_cpuid_call<'tcx>(\n     let edx_features = fx.bcx.ins().iconst(types::I32, 1 << 25 /* sse */ | 1 << 26 /* sse2 */);\n     fx.bcx.ins().jump(dest, &[cpu_signature, additional_information, ecx_features, edx_features]);\n \n+    fx.bcx.switch_to_block(leaf_7);\n+    // This leaf technically has subleaves, but we just return zero for all subleaves.\n+    let zero = fx.bcx.ins().iconst(types::I32, 0);\n+    fx.bcx.ins().jump(dest, &[zero, zero, zero, zero]);\n+\n     fx.bcx.switch_to_block(leaf_8000_0000);\n     let extended_max_basic_leaf = fx.bcx.ins().iconst(types::I32, 0);\n     let zero = fx.bcx.ins().iconst(types::I32, 0);"}]}