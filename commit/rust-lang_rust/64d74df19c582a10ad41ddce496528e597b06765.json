{"sha": "64d74df19c582a10ad41ddce496528e597b06765", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZDc0ZGYxOWM1ODJhMTBhZDQxZGRjZTQ5NjUyOGU1OTdiMDY3NjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-05T13:12:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-05T13:12:43Z"}, "message": "Auto merge of #7243 - mgacek8:issue7145_strlen_on_c_strings, r=giraffate\n\nAdd new lint: `strlen_on_c_strings`\n\n~~This is WIP, linting in case of `CString` has been added, but for `CStr`, its diagnostic item needs to be available for clippy.\n[PR that adds diagnostic item for CStr on rust repo](https://github.com/rust-lang/rust/pull/85439).~~\nReady for the review. Please take a look.\nfixes #7145\nchangelog: Add new lint: `strlen_on_c_strings`, that lints on `libc::strlen(some_cstring.as_ptr())`", "tree": {"sha": "a5a8c1ebd92f7ce1139ed1ca2db80c8fa8cf49a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5a8c1ebd92f7ce1139ed1ca2db80c8fa8cf49a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64d74df19c582a10ad41ddce496528e597b06765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64d74df19c582a10ad41ddce496528e597b06765", "html_url": "https://github.com/rust-lang/rust/commit/64d74df19c582a10ad41ddce496528e597b06765", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64d74df19c582a10ad41ddce496528e597b06765/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cc67785121c57d285987770bec9a49471639d18", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cc67785121c57d285987770bec9a49471639d18", "html_url": "https://github.com/rust-lang/rust/commit/3cc67785121c57d285987770bec9a49471639d18"}, {"sha": "59a164e86c41b4ccfa1e41ec60d7bb8a0f2c87d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/59a164e86c41b4ccfa1e41ec60d7bb8a0f2c87d2", "html_url": "https://github.com/rust-lang/rust/commit/59a164e86c41b4ccfa1e41ec60d7bb8a0f2c87d2"}], "stats": {"total": 141, "additions": 141, "deletions": 0}, "files": [{"sha": "ad3722d4d0bd86d84c8a39e0795f101f80079a8c", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64d74df19c582a10ad41ddce496528e597b06765/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/64d74df19c582a10ad41ddce496528e597b06765/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=64d74df19c582a10ad41ddce496528e597b06765", "patch": "@@ -2798,6 +2798,7 @@ Released 2018-09-13\n [`string_from_utf8_as_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_from_utf8_as_bytes\n [`string_lit_as_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_lit_as_bytes\n [`string_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_to_string\n+[`strlen_on_c_strings`]: https://rust-lang.github.io/rust-clippy/master/index.html#strlen_on_c_strings\n [`struct_excessive_bools`]: https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools\n [`suboptimal_flops`]: https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops\n [`suspicious_arithmetic_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_arithmetic_impl"}, {"sha": "82519a9b5b73b1a16a8147d8412cbfb7a3cc8fdb", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64d74df19c582a10ad41ddce496528e597b06765/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d74df19c582a10ad41ddce496528e597b06765/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=64d74df19c582a10ad41ddce496528e597b06765", "patch": "@@ -338,6 +338,7 @@ mod size_of_in_element_count;\n mod slow_vector_initialization;\n mod stable_sort_primitive;\n mod strings;\n+mod strlen_on_c_strings;\n mod suspicious_operation_groupings;\n mod suspicious_trait_impl;\n mod swap;\n@@ -914,6 +915,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         strings::STRING_LIT_AS_BYTES,\n         strings::STRING_TO_STRING,\n         strings::STR_TO_STRING,\n+        strlen_on_c_strings::STRLEN_ON_C_STRINGS,\n         suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS,\n         suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL,\n         suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n@@ -1410,6 +1412,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n         LintId::of(stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n         LintId::of(strings::STRING_FROM_UTF8_AS_BYTES),\n+        LintId::of(strlen_on_c_strings::STRLEN_ON_C_STRINGS),\n         LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n         LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n         LintId::of(swap::ALMOST_SWAPPED),\n@@ -1639,6 +1642,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(reference::REF_IN_DEREF),\n         LintId::of(repeat_once::REPEAT_ONCE),\n         LintId::of(strings::STRING_FROM_UTF8_AS_BYTES),\n+        LintId::of(strlen_on_c_strings::STRLEN_ON_C_STRINGS),\n         LintId::of(swap::MANUAL_SWAP),\n         LintId::of(temporary_assignment::TEMPORARY_ASSIGNMENT),\n         LintId::of(transmute::CROSSPOINTER_TRANSMUTE),\n@@ -2096,6 +2100,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box missing_enforced_import_rename::ImportRename::new(import_renames.clone()));\n     let scripts = conf.allowed_scripts.clone();\n     store.register_early_pass(move || box disallowed_script_idents::DisallowedScriptIdents::new(&scripts));\n+    store.register_late_pass(|| box strlen_on_c_strings::StrlenOnCStrings);\n }\n \n #[rustfmt::skip]"}, {"sha": "2ccf3a3796d512379b7b6f9f067747384c3bf9d1", "filename": "clippy_lints/src/strlen_on_c_strings.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/64d74df19c582a10ad41ddce496528e597b06765/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d74df19c582a10ad41ddce496528e597b06765/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs?ref=64d74df19c582a10ad41ddce496528e597b06765", "patch": "@@ -0,0 +1,82 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::in_macro;\n+use clippy_utils::paths;\n+use clippy_utils::source::snippet_with_macro_callsite;\n+use clippy_utils::ty::{is_type_diagnostic_item, is_type_ref_to_diagnostic_item};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::{sym, Symbol};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `libc::strlen` on a `CString` or `CStr` value,\n+    /// and suggest calling `as_bytes().len()` or `to_bytes().len()` respectively instead.\n+    ///\n+    /// **Why is this bad?** This avoids calling an unsafe `libc` function.\n+    /// Currently, it also avoids calculating the length.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust, ignore\n+    /// use std::ffi::CString;\n+    /// let cstring = CString::new(\"foo\").expect(\"CString::new failed\");\n+    /// let len = unsafe { libc::strlen(cstring.as_ptr()) };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust, no_run\n+    /// use std::ffi::CString;\n+    /// let cstring = CString::new(\"foo\").expect(\"CString::new failed\");\n+    /// let len = cstring.as_bytes().len();\n+    /// ```\n+    pub STRLEN_ON_C_STRINGS,\n+    complexity,\n+    \"using `libc::strlen` on a `CString` or `CStr` value, while `as_bytes().len()` or `to_bytes().len()` respectively can be used instead\"\n+}\n+\n+declare_lint_pass!(StrlenOnCStrings => [STRLEN_ON_C_STRINGS]);\n+\n+impl LateLintPass<'tcx> for StrlenOnCStrings {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if in_macro(expr.span) {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let hir::ExprKind::Call(func, [recv]) = expr.kind;\n+            if let hir::ExprKind::Path(hir::QPath::Resolved(_, path)) = func.kind;\n+\n+            if (&paths::LIBC_STRLEN).iter().map(|x| Symbol::intern(x)).eq(\n+                path.segments.iter().map(|seg| seg.ident.name));\n+            if let hir::ExprKind::MethodCall(path, _, args, _) = recv.kind;\n+            if args.len() == 1;\n+            if !args.iter().any(|e| e.span.from_expansion());\n+            if path.ident.name == sym::as_ptr;\n+            then {\n+                let cstring = &args[0];\n+                let ty = cx.typeck_results().expr_ty(cstring);\n+                let val_name = snippet_with_macro_callsite(cx, cstring.span, \"..\");\n+                let sugg = if is_type_diagnostic_item(cx, ty, sym::cstring_type){\n+                    format!(\"{}.as_bytes().len()\", val_name)\n+                } else if is_type_ref_to_diagnostic_item(cx, ty, sym::CStr){\n+                    format!(\"{}.to_bytes().len()\", val_name)\n+                } else {\n+                    return;\n+                };\n+\n+                span_lint_and_sugg(\n+                    cx,\n+                    STRLEN_ON_C_STRINGS,\n+                    expr.span,\n+                    \"using `libc::strlen` on a `CString` or `CStr` value\",\n+                    \"try this (you might also need to get rid of `unsafe` block in some cases):\",\n+                    sugg,\n+                    Applicability::Unspecified // Sometimes unnecessary `unsafe` block\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "9ebfbd6b423d816785724a4a08b92aa0ce3d7715", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64d74df19c582a10ad41ddce496528e597b06765/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d74df19c582a10ad41ddce496528e597b06765/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=64d74df19c582a10ad41ddce496528e597b06765", "patch": "@@ -82,6 +82,7 @@ pub const ITER_REPEAT: [&str; 5] = [\"core\", \"iter\", \"sources\", \"repeat\", \"repeat\n pub const KW_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"kw\"];\n #[cfg(feature = \"internal-lints\")]\n pub const LATE_CONTEXT: [&str; 2] = [\"rustc_lint\", \"LateContext\"];\n+pub const LIBC_STRLEN: [&str; 2] = [\"libc\", \"strlen\"];\n pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];\n #[cfg(any(feature = \"internal-lints\", feature = \"metadata-collector-lint\"))]\n pub const LINT: [&str; 2] = [\"rustc_lint_defs\", \"Lint\"];"}, {"sha": "9e271b71204b588625de12ad89e52bbca7416f73", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/64d74df19c582a10ad41ddce496528e597b06765/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d74df19c582a10ad41ddce496528e597b06765/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=64d74df19c582a10ad41ddce496528e597b06765", "patch": "@@ -231,6 +231,17 @@ pub fn is_recursively_primitive_type(ty: Ty<'_>) -> bool {\n     }\n }\n \n+/// Checks if the type is a reference equals to a diagnostic item\n+pub fn is_type_ref_to_diagnostic_item(cx: &LateContext<'_>, ty: Ty<'_>, diag_item: Symbol) -> bool {\n+    match ty.kind() {\n+        ty::Ref(_, ref_ty, _) => match ref_ty.kind() {\n+            ty::Adt(adt, _) => cx.tcx.is_diagnostic_item(diag_item, adt.did),\n+            _ => false,\n+        },\n+        _ => false,\n+    }\n+}\n+\n /// Checks if the type is equal to a diagnostic item\n ///\n /// If you change the signature, remember to update the internal lint `MatchTypeOnDiagItem`"}, {"sha": "21902fa8483f3e9913fedd1572daa511fee13477", "filename": "tests/ui/strlen_on_c_strings.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/64d74df19c582a10ad41ddce496528e597b06765/tests%2Fui%2Fstrlen_on_c_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d74df19c582a10ad41ddce496528e597b06765/tests%2Fui%2Fstrlen_on_c_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrlen_on_c_strings.rs?ref=64d74df19c582a10ad41ddce496528e597b06765", "patch": "@@ -0,0 +1,16 @@\n+#![warn(clippy::strlen_on_c_strings)]\n+#![allow(dead_code)]\n+#![feature(rustc_private)]\n+extern crate libc;\n+\n+use std::ffi::{CStr, CString};\n+\n+fn main() {\n+    // CString\n+    let cstring = CString::new(\"foo\").expect(\"CString::new failed\");\n+    let len = unsafe { libc::strlen(cstring.as_ptr()) };\n+\n+    // CStr\n+    let cstr = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\n+    let len = unsafe { libc::strlen(cstr.as_ptr()) };\n+}"}, {"sha": "a212bd327c35dc71ee16e6e948ff3e2af26769d9", "filename": "tests/ui/strlen_on_c_strings.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/64d74df19c582a10ad41ddce496528e597b06765/tests%2Fui%2Fstrlen_on_c_strings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64d74df19c582a10ad41ddce496528e597b06765/tests%2Fui%2Fstrlen_on_c_strings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrlen_on_c_strings.stderr?ref=64d74df19c582a10ad41ddce496528e597b06765", "patch": "@@ -0,0 +1,25 @@\n+error: using `libc::strlen` on a `CString` or `CStr` value\n+  --> $DIR/strlen_on_c_strings.rs:11:24\n+   |\n+LL |     let len = unsafe { libc::strlen(cstring.as_ptr()) };\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::strlen-on-c-strings` implied by `-D warnings`\n+help: try this (you might also need to get rid of `unsafe` block in some cases):\n+   |\n+LL |     let len = unsafe { cstring.as_bytes().len() };\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: using `libc::strlen` on a `CString` or `CStr` value\n+  --> $DIR/strlen_on_c_strings.rs:15:24\n+   |\n+LL |     let len = unsafe { libc::strlen(cstr.as_ptr()) };\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try this (you might also need to get rid of `unsafe` block in some cases):\n+   |\n+LL |     let len = unsafe { cstr.to_bytes().len() };\n+   |                        ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}