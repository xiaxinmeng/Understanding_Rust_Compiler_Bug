{"sha": "42b39924d87739f2dcda3e788c6e8655d310954f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYjM5OTI0ZDg3NzM5ZjJkY2RhM2U3ODhjNmU4NjU1ZDMxMDk1NGY=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2014-04-15T23:35:18Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2014-04-15T23:35:31Z"}, "message": "Improve the copying code for slices and Vec", "tree": {"sha": "25b6b5fabb3b1ed9aef4f2373b9354f099c660b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25b6b5fabb3b1ed9aef4f2373b9354f099c660b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42b39924d87739f2dcda3e788c6e8655d310954f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42b39924d87739f2dcda3e788c6e8655d310954f", "html_url": "https://github.com/rust-lang/rust/commit/42b39924d87739f2dcda3e788c6e8655d310954f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42b39924d87739f2dcda3e788c6e8655d310954f/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10f94e3fe5859fe7fc001cf26f4fa401d9a2ee2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f94e3fe5859fe7fc001cf26f4fa401d9a2ee2e", "html_url": "https://github.com/rust-lang/rust/commit/10f94e3fe5859fe7fc001cf26f4fa401d9a2ee2e"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "f4f97ea8c9202f7511b873e917f2966b61e16e28", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42b39924d87739f2dcda3e788c6e8655d310954f/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b39924d87739f2dcda3e788c6e8655d310954f/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=42b39924d87739f2dcda3e788c6e8655d310954f", "patch": "@@ -760,9 +760,20 @@ impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n     /// Returns a copy of `v`.\n     #[inline]\n     fn to_owned(&self) -> ~[T] {\n-        let mut result = with_capacity(self.len());\n-        for e in self.iter() {\n-            result.push((*e).clone());\n+        let len = self.len();\n+        let mut result = with_capacity(len);\n+        unsafe {\n+            // Unsafe code so this can be optimised to a memcpy (or something\n+            // similarly fast) when T is Copy. LLVM is easily confused, so any\n+            // extra operations during the loop can prevent this optimisation\n+            result.set_len(len);\n+            let mut i = 0;\n+            while i < len {\n+                mem::move_val_init(\n+                    result.unsafe_mut_ref(i),\n+                    self.unsafe_ref(i).clone());\n+                i = i + 1;\n+            }\n         }\n         result\n     }\n@@ -2584,7 +2595,8 @@ pub mod bytes {\n impl<A: Clone> Clone for ~[A] {\n     #[inline]\n     fn clone(&self) -> ~[A] {\n-        self.iter().map(|item| item.clone()).collect()\n+        // Use the fast to_owned on &[A] for cloning\n+        self.as_slice().to_owned()\n     }\n \n     fn clone_from(&mut self, source: &~[A]) {"}, {"sha": "034d53aa78bdb76533783c2c2ca1bd0c8cbca506", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/42b39924d87739f2dcda3e788c6e8655d310954f/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b39924d87739f2dcda3e788c6e8655d310954f/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=42b39924d87739f2dcda3e788c6e8655d310954f", "patch": "@@ -311,7 +311,26 @@ impl<T: Clone> Vec<T> {\n \n impl<T:Clone> Clone for Vec<T> {\n     fn clone(&self) -> Vec<T> {\n-        self.iter().map(|x| x.clone()).collect()\n+        let len = self.len;\n+        let mut vector = Vec::with_capacity(len);\n+        vector.len = len;\n+        // Unsafe code so this can be optimised to a memcpy (or something\n+        // similarly fast) when T is Copy. LLVM is easily confused, so any\n+        // extra operations during the loop can prevent this optimisation\n+        {\n+            let slice = vector.as_mut_slice();\n+            let this_slice = self.as_slice();\n+            let mut i = 0;\n+            while i < len {\n+                unsafe {\n+                    mem::move_val_init(\n+                        slice.unsafe_mut_ref(i),\n+                        this_slice.unsafe_ref(i).clone());\n+                }\n+                i = i + 1;\n+            }\n+        }\n+        vector\n     }\n \n     fn clone_from(&mut self, other: &Vec<T>) {"}]}