{"sha": "26958a1c105c92e4aa73aa8d4948c38cc520a1c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2OTU4YTFjMTA1YzkyZTRhYTczYWE4ZDQ5NDhjMzhjYzUyMGExYzg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-10-22T21:38:16Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-10-23T20:46:14Z"}, "message": "Move option parsing to crates.io-based getopts crate\n\nShould help adding more options in the future as well!", "tree": {"sha": "1c9b8eccbb689d50af6ac096291899c37f7a1c4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c9b8eccbb689d50af6ac096291899c37f7a1c4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26958a1c105c92e4aa73aa8d4948c38cc520a1c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26958a1c105c92e4aa73aa8d4948c38cc520a1c8", "html_url": "https://github.com/rust-lang/rust/commit/26958a1c105c92e4aa73aa8d4948c38cc520a1c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26958a1c105c92e4aa73aa8d4948c38cc520a1c8/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "579fb34417844cf6242c62ba0b6f2f9c72772ba0", "url": "https://api.github.com/repos/rust-lang/rust/commits/579fb34417844cf6242c62ba0b6f2f9c72772ba0", "html_url": "https://github.com/rust-lang/rust/commit/579fb34417844cf6242c62ba0b6f2f9c72772ba0"}], "stats": {"total": 83, "additions": 47, "deletions": 36}, "files": [{"sha": "66061bd1e256617ad38ac9a45a037c7b150623aa", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26958a1c105c92e4aa73aa8d4948c38cc520a1c8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/26958a1c105c92e4aa73aa8d4948c38cc520a1c8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=26958a1c105c92e4aa73aa8d4948c38cc520a1c8", "patch": "@@ -4,6 +4,7 @@ version = \"0.0.1\"\n dependencies = [\n  \"diff 0.1.7 (git+https://github.com/utkarshkukreti/diff.rs.git)\",\n  \"env_logger 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -41,6 +42,11 @@ dependencies = [\n  \"regex 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"getopts\"\n+version = \"0.2.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"kernel32-sys\"\n version = \"0.1.4\""}, {"sha": "ebd4e8e7f1e73b6f7f87b9b82cc074191922588f", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26958a1c105c92e4aa73aa8d4948c38cc520a1c8/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/26958a1c105c92e4aa73aa8d4948c38cc520a1c8/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=26958a1c105c92e4aa73aa8d4948c38cc520a1c8", "patch": "@@ -19,5 +19,6 @@ diff = { git = \"https://github.com/utkarshkukreti/diff.rs.git\" }\n syntex_syntax = { git = \"https://github.com/serde-rs/syntex\" }\n log = \"0.3.2\"\n env_logger = \"0.3.1\"\n+getopts = \"0.2\"\n \n [dev-dependencies]"}, {"sha": "6b3405aa936fd4316048399e5f6e411ed6893281", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 40, "deletions": 36, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/26958a1c105c92e4aa73aa8d4948c38cc520a1c8/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26958a1c105c92e4aa73aa8d4948c38cc520a1c8/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=26958a1c105c92e4aa73aa8d4948c38cc520a1c8", "patch": "@@ -15,6 +15,7 @@ extern crate log;\n extern crate rustfmt;\n extern crate toml;\n extern crate env_logger;\n+extern crate getopts;\n \n use rustfmt::{WriteMode, run};\n use rustfmt::config::Config;\n@@ -23,7 +24,8 @@ use std::env;\n use std::fs::{self, File};\n use std::io::{self, Read};\n use std::path::PathBuf;\n-use std::str::FromStr;\n+\n+use getopts::Options;\n \n // Try to find a project file in the current directory and its parents.\n fn lookup_project_file() -> io::Result<PathBuf> {\n@@ -52,7 +54,7 @@ fn lookup_and_read_project_file() -> io::Result<(PathBuf, String)> {\n }\n \n fn execute() -> i32 {\n-    let (args, write_mode) = match determine_params(std::env::args()) {\n+    let (file, write_mode) = match determine_params(std::env::args().skip(1)) {\n         Some(params) => params,\n         None => return 1,\n     };\n@@ -65,7 +67,7 @@ fn execute() -> i32 {\n         Err(_) => Default::default(),\n     };\n \n-    run(args, write_mode, &config);\n+    run(&file, write_mode, &config);\n     0\n }\n \n@@ -83,50 +85,52 @@ fn main() {\n     std::process::exit(exit_code);\n }\n \n-fn print_usage<S: Into<String>>(reason: S) {\n-    println!(\"{}\\n\\r usage: rustfmt [-h Help] [--write-mode=[replace|overwrite|display|diff]] \\\n-              <file_name>\",\n-             reason.into());\n+fn print_usage(opts: &Options, reason: &str) {\n+    let reason = format!(\"{}\\nusage: {} [options] <file>\",\n+                         reason,\n+                         env::current_exe().unwrap().display());\n+    println!(\"{}\", opts.usage(&reason));\n     Config::print_docs();\n }\n \n-fn determine_params<I>(args: I) -> Option<(Vec<String>, WriteMode)>\n+fn determine_params<I>(args: I) -> Option<(PathBuf, WriteMode)>\n     where I: Iterator<Item = String>\n {\n-    let arg_prefix = \"-\";\n-    let write_mode_prefix = \"--write-mode=\";\n-    let help_mode = \"-h\";\n-    let long_help_mode = \"--help\";\n-    let mut write_mode = WriteMode::Replace;\n-    let mut rustc_args = Vec::new();\n-\n-    // The NewFile option currently isn't supported because it requires another\n-    // parameter, but it can be added later.\n-    for arg in args {\n-        if arg.starts_with(write_mode_prefix) {\n-            match FromStr::from_str(&arg[write_mode_prefix.len()..]) {\n-                Ok(mode) => write_mode = mode,\n-                Err(_) => {\n-                    print_usage(\"Unrecognized write mode\");\n+    let mut opts = Options::new();\n+    opts.optflag(\"h\", \"help\", \"show this message\");\n+    opts.optopt(\"\",\n+                \"write-mode\",\n+                \"mode to write in\",\n+                \"[replace|overwrite|display|diff]\");\n+    let matches = match opts.parse(args) {\n+        Ok(m) => m,\n+        Err(e) => {\n+            print_usage(&opts, &e.to_string());\n+            return None;\n+        }\n+    };\n+\n+    if matches.opt_present(\"h\") {\n+        print_usage(&opts, \"\");\n+    }\n+\n+    let write_mode = match matches.opt_str(\"write-mode\") {\n+        Some(mode) => {\n+            match mode.parse() {\n+                Ok(mode) => mode,\n+                Err(..) => {\n+                    print_usage(&opts, \"Unrecognized write mode\");\n                     return None;\n                 }\n             }\n-        } else if arg.starts_with(help_mode) || arg.starts_with(long_help_mode) {\n-            print_usage(\"\");\n-            return None;\n-        } else if arg.starts_with(arg_prefix) {\n-            print_usage(\"Invalid argument\");\n-            return None;\n-        } else {\n-            // Pass everything else to rustc\n-            rustc_args.push(arg);\n         }\n-    }\n+        None => WriteMode::Replace,\n+    };\n \n-    if rustc_args.len() < 2 {\n-        print_usage(\"Please provide a file to be formatted\");\n+    if matches.free.len() != 1 {\n+        print_usage(&opts, \"Please provide one file to format\");\n         return None;\n     }\n \n-    Some((rustc_args, write_mode))\n+    Some((PathBuf::from(&matches.free[0]), write_mode))\n }"}]}