{"sha": "247188803356234ae5d6ecf947ffb2308688dc90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NzE4ODgwMzM1NjIzNGFlNWQ2ZWNmOTQ3ZmZiMjMwODY4OGRjOTA=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-28T06:19:06Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-02-28T22:13:39Z"}, "message": "Avoid `Token::{OpenDelim, CloseDelim}`.", "tree": {"sha": "0153f68fc9c827674a2d6fbdca15d76c07e61567", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0153f68fc9c827674a2d6fbdca15d76c07e61567"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/247188803356234ae5d6ecf947ffb2308688dc90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/247188803356234ae5d6ecf947ffb2308688dc90", "html_url": "https://github.com/rust-lang/rust/commit/247188803356234ae5d6ecf947ffb2308688dc90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/247188803356234ae5d6ecf947ffb2308688dc90/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c4960bfde5c18d119f5d6398bbca04640298164", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c4960bfde5c18d119f5d6398bbca04640298164", "html_url": "https://github.com/rust-lang/rust/commit/8c4960bfde5c18d119f5d6398bbca04640298164"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "46bc1dc8b760affaba91c3d681dae796e9cf8ae0", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/247188803356234ae5d6ecf947ffb2308688dc90/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247188803356234ae5d6ecf947ffb2308688dc90/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=247188803356234ae5d6ecf947ffb2308688dc90", "patch": "@@ -17,6 +17,7 @@ use tokenstream::{self, TokenTree, Delimited, SequenceRepetition};\n use util::small_vector::SmallVector;\n \n use std::rc::Rc;\n+use std::mem;\n use std::ops::Add;\n use std::collections::HashMap;\n \n@@ -52,17 +53,9 @@ impl Iterator for Frame {\n \n     fn next(&mut self) -> Option<TokenTree> {\n         match *self {\n-            Frame::Delimited { ref forest, ref mut idx, span } => {\n+            Frame::Delimited { ref forest, ref mut idx, .. } => {\n                 *idx += 1;\n-                if *idx == forest.delim.len() {\n-                    Some(forest.open_tt(span))\n-                } else if let Some(tree) = forest.tts.get(*idx - forest.delim.len() - 1) {\n-                    Some(tree.clone())\n-                } else if *idx == forest.tts.len() + 2 * forest.delim.len() {\n-                    Some(forest.close_tt(span))\n-                } else {\n-                    None\n-                }\n+                forest.tts.get(*idx - 1).cloned()\n             }\n             Frame::Sequence { ref forest, ref mut idx, .. } => {\n                 *idx += 1;\n@@ -93,6 +86,7 @@ pub fn transcribe(sp_diag: &Handler,\n     let mut repeat_idx = Vec::new();\n     let mut repeat_len = Vec::new();\n     let mut result = Vec::new();\n+    let mut result_stack = Vec::new();\n \n     loop {\n         let tree = if let Some(tree) = stack.last_mut().unwrap().next() {\n@@ -111,12 +105,23 @@ pub fn transcribe(sp_diag: &Handler,\n                 }\n             }\n \n-            if let Frame::Sequence { .. } = stack.pop().unwrap() {\n-                repeat_idx.pop();\n-                repeat_len.pop();\n-            }\n-            if stack.is_empty() {\n-                return result;\n+            match stack.pop().unwrap() {\n+                Frame::Sequence { .. } => {\n+                    repeat_idx.pop();\n+                    repeat_len.pop();\n+                }\n+                Frame::Delimited { forest, span, .. } => {\n+                    if result_stack.is_empty() {\n+                        return result;\n+                    }\n+                    let tree = TokenTree::Delimited(span, Rc::new(Delimited {\n+                        delim: forest.delim,\n+                        tts: result,\n+                    }));\n+                    result = result_stack.pop().unwrap();\n+                    result.push(tree);\n+                }\n+                _ => {}\n             }\n             continue\n         };\n@@ -184,6 +189,7 @@ pub fn transcribe(sp_diag: &Handler,\n             }\n             TokenTree::Delimited(span, delimited) => {\n                 stack.push(Frame::Delimited { forest: delimited, idx: 0, span: span });\n+                result_stack.push(mem::replace(&mut result, Vec::new()));\n             }\n             TokenTree::Token(span, MatchNt(name, kind)) => {\n                 stack.push(Frame::MatchNt { name: name, kind: kind, idx: 0, span: span });"}, {"sha": "3a3c20dfb64d7ff114264aef6280f680e9ded6a8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/247188803356234ae5d6ecf947ffb2308688dc90/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247188803356234ae5d6ecf947ffb2308688dc90/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=247188803356234ae5d6ecf947ffb2308688dc90", "patch": "@@ -2694,7 +2694,7 @@ impl<'a> Parser<'a> {\n         // yet.\n         match self.token {\n             token::OpenDelim(delim) => {\n-                if self.quote_depth == 0 && self.tts.last().map(|&(_, i)| i == 1).unwrap_or(false) {\n+                if self.quote_depth == 0 {\n                     let tt = self.tts.pop().unwrap().0;\n                     self.bump();\n                     return Ok(tt);"}]}