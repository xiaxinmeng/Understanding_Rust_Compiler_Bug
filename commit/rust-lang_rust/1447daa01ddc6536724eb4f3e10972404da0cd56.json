{"sha": "1447daa01ddc6536724eb4f3e10972404da0cd56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NDdkYWEwMWRkYzY1MzY3MjRlYjRmM2UxMDk3MjQwNGRhMGNkNTY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-07-31T13:00:12Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-07-31T21:12:30Z"}, "message": "remove the span field from `diverge_cleanup`", "tree": {"sha": "611c747ead22c6e7aa09883961b673808f0079e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/611c747ead22c6e7aa09883961b673808f0079e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1447daa01ddc6536724eb4f3e10972404da0cd56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1447daa01ddc6536724eb4f3e10972404da0cd56", "html_url": "https://github.com/rust-lang/rust/commit/1447daa01ddc6536724eb4f3e10972404da0cd56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1447daa01ddc6536724eb4f3e10972404da0cd56/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91aff5775d3b4a95e2b0c2fe50785f3d28fa3dd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/91aff5775d3b4a95e2b0c2fe50785f3d28fa3dd8", "html_url": "https://github.com/rust-lang/rust/commit/91aff5775d3b4a95e2b0c2fe50785f3d28fa3dd8"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "4583d80b83ddce228a8db1f122e33342d2dfa8cc", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1447daa01ddc6536724eb4f3e10972404da0cd56/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1447daa01ddc6536724eb4f3e10972404da0cd56/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=1447daa01ddc6536724eb4f3e10972404da0cd56", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let tcx = this.hir.tcx();\n \n                     // Enter the remainder scope, i.e. the bindings' destruction scope.\n-                    this.push_scope(remainder_scope);\n+                    this.push_scope((remainder_scope, source_info));\n                     let_extent_stack.push(remainder_scope);\n \n                     // Declare the bindings, which may create a visibility scope."}, {"sha": "7ae5d6b0ec19aa483151274f9641115f9ecdc12a", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1447daa01ddc6536724eb4f3e10972404da0cd56/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1447daa01ddc6536724eb4f3e10972404da0cd56/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=1447daa01ddc6536724eb4f3e10972404da0cd56", "patch": "@@ -237,7 +237,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             .collect();\n \n                     let success = this.cfg.start_new_block();\n-                    let cleanup = this.diverge_cleanup(expr_span);\n+                    let cleanup = this.diverge_cleanup();\n                     this.cfg.terminate(block, source_info, TerminatorKind::Call {\n                         func: fun,\n                         args: args,"}, {"sha": "28386fa598ce6c7890ddd6762a44d3e4bb65d369", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1447daa01ddc6536724eb4f3e10972404da0cd56/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1447daa01ddc6536724eb4f3e10972404da0cd56/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=1447daa01ddc6536724eb4f3e10972404da0cd56", "patch": "@@ -306,7 +306,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let bool_ty = self.hir.bool_ty();\n                     let eq_result = self.temp(bool_ty, test.span);\n                     let eq_block = self.cfg.start_new_block();\n-                    let cleanup = self.diverge_cleanup(test.span);\n+                    let cleanup = self.diverge_cleanup();\n                     self.cfg.terminate(block, source_info, TerminatorKind::Call {\n                         func: Operand::Constant(box Constant {\n                             span: test.span,"}, {"sha": "2b52198c25065ee8b0580a095e6429e507a208ea", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1447daa01ddc6536724eb4f3e10972404da0cd56/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1447daa01ddc6536724eb4f3e10972404da0cd56/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=1447daa01ddc6536724eb4f3e10972404da0cd56", "patch": "@@ -107,6 +107,9 @@ pub struct Scope<'tcx> {\n     /// the extent of this scope within source code.\n     extent: CodeExtent,\n \n+    /// the span of that extent\n+    extent_span: Span,\n+\n     /// Whether there's anything to do for the cleanup path, that is,\n     /// when unwinding through this scope. This includes destructors,\n     /// but not StorageDead statements, which don't get emitted at all\n@@ -116,7 +119,7 @@ pub struct Scope<'tcx> {\n     ///  * pollutting the cleanup MIR with StorageDead creates\n     ///    landing pads even though there's no actual destructors\n     ///  * freeing up stack space has no effect during unwinding\n-    pub(super) needs_cleanup: bool,\n+    needs_cleanup: bool,\n \n     /// set of lvalues to drop when exiting this scope. This starts\n     /// out empty but grows as variables are declared during the\n@@ -282,7 +285,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         where F: FnOnce(&mut Builder<'a, 'gcx, 'tcx>) -> BlockAnd<R>\n     {\n         debug!(\"in_opt_scope(opt_extent={:?}, block={:?})\", opt_extent, block);\n-        if let Some(extent) = opt_extent { self.push_scope(extent.0); }\n+        if let Some(extent) = opt_extent { self.push_scope(extent); }\n         let rv = unpack!(block = f(self));\n         if let Some(extent) = opt_extent {\n             unpack!(block = self.pop_scope(extent, block));\n@@ -301,7 +304,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         where F: FnOnce(&mut Builder<'a, 'gcx, 'tcx>) -> BlockAnd<R>\n     {\n         debug!(\"in_scope(extent={:?}, block={:?})\", extent, block);\n-        self.push_scope(extent.0);\n+        self.push_scope(extent);\n         let rv = unpack!(block = f(self));\n         unpack!(block = self.pop_scope(extent, block));\n         debug!(\"in_scope: exiting extent={:?} block={:?}\", extent, block);\n@@ -312,12 +315,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// scope and call `pop_scope` afterwards. Note that these two\n     /// calls must be paired; using `in_scope` as a convenience\n     /// wrapper maybe preferable.\n-    pub fn push_scope(&mut self, extent: CodeExtent) {\n+    pub fn push_scope(&mut self, extent: (CodeExtent, SourceInfo)) {\n         debug!(\"push_scope({:?})\", extent);\n         let vis_scope = self.visibility_scope;\n         self.scopes.push(Scope {\n             visibility_scope: vis_scope,\n-            extent: extent,\n+            extent: extent.0,\n+            extent_span: extent.1.span,\n             needs_cleanup: false,\n             drops: vec![],\n             free: None,\n@@ -335,7 +339,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         debug!(\"pop_scope({:?}, {:?})\", extent, block);\n         // We need to have `cached_block`s available for all the drops, so we call diverge_cleanup\n         // to make sure all the `cached_block`s are filled in.\n-        self.diverge_cleanup(extent.1.span);\n+        self.diverge_cleanup();\n         let scope = self.scopes.pop().unwrap();\n         assert_eq!(scope.extent, extent.0);\n         unpack!(block = build_scope_drops(&mut self.cfg,\n@@ -618,7 +622,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// This path terminates in Resume. Returns the start of the path.\n     /// See module comment for more details. None indicates there\u2019s no\n     /// cleanup to do at this point.\n-    pub fn diverge_cleanup(&mut self, span: Span) -> Option<BasicBlock> {\n+    pub fn diverge_cleanup(&mut self) -> Option<BasicBlock> {\n         if !self.scopes.iter().any(|scope| scope.needs_cleanup) {\n             return None;\n         }\n@@ -652,7 +656,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         };\n \n         for scope in scopes.iter_mut() {\n-            target = build_diverge_scope(hir.tcx(), cfg, &unit_temp, span, scope, target);\n+            target = build_diverge_scope(\n+                hir.tcx(), cfg, &unit_temp, scope.extent_span, scope, target);\n         }\n         Some(target)\n     }\n@@ -668,7 +673,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n         let source_info = self.source_info(span);\n         let next_target = self.cfg.start_new_block();\n-        let diverge_target = self.diverge_cleanup(span);\n+        let diverge_target = self.diverge_cleanup();\n         self.cfg.terminate(block, source_info,\n                            TerminatorKind::Drop {\n                                location: location,\n@@ -686,7 +691,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                   value: Operand<'tcx>) -> BlockAnd<()> {\n         let source_info = self.source_info(span);\n         let next_target = self.cfg.start_new_block();\n-        let diverge_target = self.diverge_cleanup(span);\n+        let diverge_target = self.diverge_cleanup();\n         self.cfg.terminate(block, source_info,\n                            TerminatorKind::DropAndReplace {\n                                location: location,\n@@ -709,7 +714,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let source_info = self.source_info(span);\n \n         let success_block = self.cfg.start_new_block();\n-        let cleanup = self.diverge_cleanup(span);\n+        let cleanup = self.diverge_cleanup();\n \n         self.cfg.terminate(block, source_info,\n                            TerminatorKind::Assert {"}]}