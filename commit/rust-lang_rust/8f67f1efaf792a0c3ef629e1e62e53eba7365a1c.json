{"sha": "8f67f1efaf792a0c3ef629e1e62e53eba7365a1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNjdmMWVmYWY3OTJhMGMzZWY2MjllMWU2MmU1M2ViYTczNjVhMWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-07-31T15:13:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-07-31T15:13:49Z"}, "message": "add comments from arielb1", "tree": {"sha": "ded11cf8d42c93120e8bc3c2c66fc78b09841273", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ded11cf8d42c93120e8bc3c2c66fc78b09841273"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f67f1efaf792a0c3ef629e1e62e53eba7365a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f67f1efaf792a0c3ef629e1e62e53eba7365a1c", "html_url": "https://github.com/rust-lang/rust/commit/8f67f1efaf792a0c3ef629e1e62e53eba7365a1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f67f1efaf792a0c3ef629e1e62e53eba7365a1c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "851c77088db304f0fba5318db39b3b31521aa274", "url": "https://api.github.com/repos/rust-lang/rust/commits/851c77088db304f0fba5318db39b3b31521aa274", "html_url": "https://github.com/rust-lang/rust/commit/851c77088db304f0fba5318db39b3b31521aa274"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "eaff8e7b8ace7d195d54fd472bcff4c59314a4b3", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8f67f1efaf792a0c3ef629e1e62e53eba7365a1c/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f67f1efaf792a0c3ef629e1e62e53eba7365a1c/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=8f67f1efaf792a0c3ef629e1e62e53eba7365a1c", "patch": "@@ -410,6 +410,49 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // is problematic as the HIR is being scraped, but ref bindings may be\n         // implicit after #42640. We need to make sure that pat_adjustments\n         // (once introduced) is populated by the time we get here.\n+        //\n+        // arielb1 [writes here in this comment thread][c] that there\n+        // is certainly *some* potential danger, e.g. for an example\n+        // like:\n+        //\n+        // [c]: https://github.com/rust-lang/rust/pull/43399#discussion_r130223956\n+        //\n+        // ```\n+        // let Foo(x) = f()[0];\n+        // ```\n+        //\n+        // Then if the pattern matches by reference, we want to match\n+        // `f()[0]` as a lexpr, so we can't allow it to be\n+        // coerced. But if the pattern matches by value, `f()[0]` is\n+        // still syntactically a lexpr, but we *do* want to allow\n+        // coercions.\n+        //\n+        // However, *likely* we are ok with allowing coercions to\n+        // happen if there are no explicit ref mut patterns - all\n+        // implicit ref mut patterns must occur behind a reference, so\n+        // they will have the \"correct\" variance and lifetime.\n+        //\n+        // This does mean that the following pattern would be legal:\n+        //\n+        // ```\n+        // struct Foo(Bar);\n+        // struct Bar(u32);\n+        // impl Deref for Foo {\n+        //     type Target = Bar;\n+        //     fn deref(&self) -> &Bar { &self.0 }\n+        // }\n+        // impl DerefMut for Foo {\n+        //     fn deref_mut(&mut self) -> &mut Bar { &mut self.0 }\n+        // }\n+        // fn foo(x: &mut Foo) {\n+        //     {\n+        //         let Bar(z): &mut Bar = x;\n+        //         *z = 42;\n+        //     }\n+        //     assert_eq!(foo.0.0, 42);\n+        // }\n+        // ```\n+\n         let contains_ref_bindings = arms.iter()\n                                         .filter_map(|a| a.contains_explicit_ref_binding())\n                                         .max_by_key(|m| match *m {"}]}