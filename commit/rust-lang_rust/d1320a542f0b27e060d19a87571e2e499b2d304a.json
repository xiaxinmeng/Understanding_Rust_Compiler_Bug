{"sha": "d1320a542f0b27e060d19a87571e2e499b2d304a", "node_id": "C_kwDOAAsO6NoAKGQxMzIwYTU0MmYwYjI3ZTA2MGQxOWE4NzU3MWUyZTQ5OWIyZDMwNGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-30T16:50:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-30T16:50:09Z"}, "message": "Rollup merge of #107177 - thanatos:fix-doc-errant-light-theme, r=notriddle\n\nKeep all theme-updating logic together\n\nPrior to this PR, if the page is restored from the browser bfcache\u00b9, we call `switchToSavedTheme`. But `switchToSavedTheme` never looks at the `use-system-theme` preference. Further, if it can't find a saved theme, it will fall back to the default of \"light\".\n\nFor a user with cookies disabled\u00b2 whose preferred color scheme is dark, this means the theme will wobble back and forth between dark and light. The sequence that occurs is,\n\n1. The page is loaded. During a page load, we consult `use-system-theme`: as cookies are disabled, this preference is unset. The default is true.\n\n   Because the default is true, we look at the preferred color scheme: for our example user, that's \"dark\". **The page theme is set to dark.** We'll attempt to store these preferences in localStorage, but fail due to cookies being disabled.\n\n2. The user navigates through the docs. Subsequent page loads happen, and the same process in step 1 recurs. Previous pages are (potentially) put into the bfcache.\n\n3. The user navigates backwards/forwards, causing a page in bfcache to be pulled out of cache. The `pageShow` event handler is triggered. However, this calls `switchToSavedTheme`: this doesn't consider the system theme, as noted above. Instead, it only looks for a saved theme. However, with cookies disabled, there is none. It defaults to light. **The page theme is set to light!** The user wonders why the dark theme is lost.\n\nThere are effectively two functions trying to determine and apply the correct theme: `updateSystemTheme` and `switchToSavedTheme`. Thus, we merge them into just one: `updateTheme`. This function contains all the logic for determining the correct theme, and is called in all circumstances where we need to set the theme:\n\n* The initial page load\n* If the browser preferred color scheme (i.e., light/dark mode) is changed\n* If the page is restored from bfcache\n* If the user updates the theme preferences (i.e., in `settings.js`)\n\nFixes https://github.com/rust-lang/rust/issues/94250.\n\n\u00b9bfcache: https://web.dev/bfcache/ The bfcache is used to sleep a page, if the user navigates away from it, and to restore it from cache if the user returns to it.\n\n\u00b2Note that the browser preference that enables/disables cookies really controls many forms of storage. The same preference thus also affects localStorage. (This is so a normal browser user doesn't need to understand the distinction between \"cookies\" and \"localStorage\".)", "tree": {"sha": "3213419954ad5420684966739b82614fccd141ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3213419954ad5420684966739b82614fccd141ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1320a542f0b27e060d19a87571e2e499b2d304a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj1/VBCRBK7hj4Ov3rIwAAPsIIADbUNAEMkLy66GXeL8zQk7hT\nXPPxGMIl2uWhq2w5xfeyFLX6D2s7XrVxtiJmvbSrjSBGQTt9psIFHZbyAG4ukXlN\nw9iafx5UAe7cPaROXgq8+eBiD6Jp0xr8pKnDb6GjkTRn5Uamu989j4TYCRoc3UAe\nG885l3ByxvyyMlocTPwNjSq6RaUhazUdOLg5pQF1Lqcctd0gfT6+bjR07MDHSE/k\nePB2ioa7gcXIl4MgNphvIWVo5Km1NbHdnxvVeRxe/eDua7U7ekSoNEJzQD4JmTq1\n42J0JDZtb2NJW67ApRjPdGggXVb9ixlhE1Q4ShtGPxOvX5N7SWE9LLbWOaxLbEo=\n=YEWB\n-----END PGP SIGNATURE-----\n", "payload": "tree 3213419954ad5420684966739b82614fccd141ec\nparent db9774951daab59074c81fb48a189a19cd80265a\nparent 727a1fd1945685f21d4d2b1d86dbf6429372f3ef\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675097409 +0100\ncommitter GitHub <noreply@github.com> 1675097409 +0100\n\nRollup merge of #107177 - thanatos:fix-doc-errant-light-theme, r=notriddle\n\nKeep all theme-updating logic together\n\nPrior to this PR, if the page is restored from the browser bfcache\u00b9, we call `switchToSavedTheme`. But `switchToSavedTheme` never looks at the `use-system-theme` preference. Further, if it can't find a saved theme, it will fall back to the default of \"light\".\n\nFor a user with cookies disabled\u00b2 whose preferred color scheme is dark, this means the theme will wobble back and forth between dark and light. The sequence that occurs is,\n\n1. The page is loaded. During a page load, we consult `use-system-theme`: as cookies are disabled, this preference is unset. The default is true.\n\n   Because the default is true, we look at the preferred color scheme: for our example user, that's \"dark\". **The page theme is set to dark.** We'll attempt to store these preferences in localStorage, but fail due to cookies being disabled.\n\n2. The user navigates through the docs. Subsequent page loads happen, and the same process in step 1 recurs. Previous pages are (potentially) put into the bfcache.\n\n3. The user navigates backwards/forwards, causing a page in bfcache to be pulled out of cache. The `pageShow` event handler is triggered. However, this calls `switchToSavedTheme`: this doesn't consider the system theme, as noted above. Instead, it only looks for a saved theme. However, with cookies disabled, there is none. It defaults to light. **The page theme is set to light!** The user wonders why the dark theme is lost.\n\nThere are effectively two functions trying to determine and apply the correct theme: `updateSystemTheme` and `switchToSavedTheme`. Thus, we merge them into just one: `updateTheme`. This function contains all the logic for determining the correct theme, and is called in all circumstances where we need to set the theme:\n\n* The initial page load\n* If the browser preferred color scheme (i.e., light/dark mode) is changed\n* If the page is restored from bfcache\n* If the user updates the theme preferences (i.e., in `settings.js`)\n\nFixes https://github.com/rust-lang/rust/issues/94250.\n\n\u00b9bfcache: https://web.dev/bfcache/ The bfcache is used to sleep a page, if the user navigates away from it, and to restore it from cache if the user returns to it.\n\n\u00b2Note that the browser preference that enables/disables cookies really controls many forms of storage. The same preference thus also affects localStorage. (This is so a normal browser user doesn't need to understand the distinction between \"cookies\" and \"localStorage\".)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1320a542f0b27e060d19a87571e2e499b2d304a", "html_url": "https://github.com/rust-lang/rust/commit/d1320a542f0b27e060d19a87571e2e499b2d304a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1320a542f0b27e060d19a87571e2e499b2d304a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db9774951daab59074c81fb48a189a19cd80265a", "url": "https://api.github.com/repos/rust-lang/rust/commits/db9774951daab59074c81fb48a189a19cd80265a", "html_url": "https://github.com/rust-lang/rust/commit/db9774951daab59074c81fb48a189a19cd80265a"}, {"sha": "727a1fd1945685f21d4d2b1d86dbf6429372f3ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/727a1fd1945685f21d4d2b1d86dbf6429372f3ef", "html_url": "https://github.com/rust-lang/rust/commit/727a1fd1945685f21d4d2b1d86dbf6429372f3ef"}], "stats": {"total": 118, "additions": 55, "deletions": 63}, "files": [{"sha": "2c514a0c8267b80b7763660520a80b5803e2e3e1", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1320a542f0b27e060d19a87571e2e499b2d304a/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1320a542f0b27e060d19a87571e2e499b2d304a/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=d1320a542f0b27e060d19a87571e2e499b2d304a", "patch": "@@ -509,7 +509,7 @@ impl Options {\n                 // these values up both in `dataset` and in the storage API, so it needs to be able\n                 // to convert the names back and forth.  Despite doing this kebab-case to\n                 // StudlyCaps transformation automatically, the JS DOM API does not provide a\n-                // mechanism for doing the just transformation on a string.  So we want to avoid\n+                // mechanism for doing just the transformation on a string.  So we want to avoid\n                 // the StudlyCaps representation in the `dataset` property.\n                 //\n                 // We solve this by replacing all the `-`s with `_`s.  We do that here, when we"}, {"sha": "1cd552e7f25b712799c2855fd2dc6281e34ed215", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1320a542f0b27e060d19a87571e2e499b2d304a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/d1320a542f0b27e060d19a87571e2e499b2d304a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=d1320a542f0b27e060d19a87571e2e499b2d304a", "patch": "@@ -1,5 +1,5 @@\n // Local js definitions:\n-/* global getSettingValue, getVirtualKey, updateLocalStorage, updateSystemTheme */\n+/* global getSettingValue, getVirtualKey, updateLocalStorage, updateTheme */\n /* global addClass, removeClass, onEach, onEachLazy, blurHandler, elemIsInParent */\n /* global MAIN_ID, getVar, getSettingsButton */\n \n@@ -19,7 +19,7 @@\n             case \"theme\":\n             case \"preferred-dark-theme\":\n             case \"preferred-light-theme\":\n-                updateSystemTheme();\n+                updateTheme();\n                 updateLightAndDark();\n                 break;\n             case \"line-numbers\":"}, {"sha": "8836d1b2e464bca1dd00c35ad9bd240ddbf72152", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 52, "deletions": 60, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/d1320a542f0b27e060d19a87571e2e499b2d304a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/d1320a542f0b27e060d19a87571e2e499b2d304a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=d1320a542f0b27e060d19a87571e2e499b2d304a", "patch": "@@ -153,79 +153,74 @@ function switchTheme(styleElem, mainStyleElem, newThemeName, saveTheme) {\n     }\n }\n \n-// This function is called from \"main.js\".\n-// eslint-disable-next-line no-unused-vars\n-function useSystemTheme(value) {\n-    if (value === undefined) {\n-        value = true;\n-    }\n-\n-    updateLocalStorage(\"use-system-theme\", value);\n-\n-    // update the toggle if we're on the settings page\n-    const toggle = document.getElementById(\"use-system-theme\");\n-    if (toggle && toggle instanceof HTMLInputElement) {\n-        toggle.checked = value;\n-    }\n-}\n-\n-const updateSystemTheme = (function() {\n-    if (!window.matchMedia) {\n-        // fallback to the CSS computed value\n-        return () => {\n-            const cssTheme = getComputedStyle(document.documentElement)\n-                .getPropertyValue(\"content\");\n-\n-            switchTheme(\n-                window.currentTheme,\n-                window.mainTheme,\n-                JSON.parse(cssTheme) || \"light\",\n-                true\n-            );\n+const updateTheme = (function() {\n+    /**\n+     * Update the current theme to match whatever the current combination of\n+     * * the preference for using the system theme\n+     *   (if this is the case, the value of preferred-light-theme, if the\n+     *   system theme is light, otherwise if dark, the value of\n+     *   preferred-dark-theme.)\n+     * * the preferred theme\n+     * \u2026 dictates that it should be.\n+     */\n+    function updateTheme() {\n+        const use = (theme, saveTheme) => {\n+            switchTheme(window.currentTheme, window.mainTheme, theme, saveTheme);\n         };\n-    }\n-\n-    // only listen to (prefers-color-scheme: dark) because light is the default\n-    const mql = window.matchMedia(\"(prefers-color-scheme: dark)\");\n \n-    function handlePreferenceChange(mql) {\n-        const use = theme => {\n-            switchTheme(window.currentTheme, window.mainTheme, theme, true);\n-        };\n         // maybe the user has disabled the setting in the meantime!\n         if (getSettingValue(\"use-system-theme\") !== \"false\") {\n             const lightTheme = getSettingValue(\"preferred-light-theme\") || \"light\";\n             const darkTheme = getSettingValue(\"preferred-dark-theme\") || \"dark\";\n \n-            if (mql.matches) {\n-                use(darkTheme);\n+            if (isDarkMode()) {\n+                use(darkTheme, true);\n             } else {\n                 // prefers a light theme, or has no preference\n-                use(lightTheme);\n+                use(lightTheme, true);\n             }\n             // note: we save the theme so that it doesn't suddenly change when\n             // the user disables \"use-system-theme\" and reloads the page or\n             // navigates to another page\n         } else {\n-            use(getSettingValue(\"theme\"));\n+            use(getSettingValue(\"theme\"), false);\n         }\n     }\n \n-    mql.addListener(handlePreferenceChange);\n+    // This is always updated below to a function () => bool.\n+    let isDarkMode;\n \n-    return () => {\n-        handlePreferenceChange(mql);\n-    };\n-})();\n+    // Determine the function for isDarkMode, and if we have\n+    // `window.matchMedia`, set up an event listener on the preferred color\n+    // scheme.\n+    //\n+    // Otherwise, fall back to the prefers-color-scheme value CSS captured in\n+    // the \"content\" property.\n+    if (window.matchMedia) {\n+        // only listen to (prefers-color-scheme: dark) because light is the default\n+        const mql = window.matchMedia(\"(prefers-color-scheme: dark)\");\n \n-function switchToSavedTheme() {\n-    switchTheme(\n-        window.currentTheme,\n-        window.mainTheme,\n-        getSettingValue(\"theme\") || \"light\",\n-        false\n-    );\n-}\n+        isDarkMode = () => mql.matches;\n+\n+        if (mql.addEventListener) {\n+            mql.addEventListener(\"change\", updateTheme);\n+        } else {\n+            // This is deprecated, see:\n+            // https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/addListener\n+            mql.addListener(updateTheme);\n+        }\n+    } else {\n+        // fallback to the CSS computed value\n+        const cssContent = getComputedStyle(document.documentElement)\n+            .getPropertyValue(\"content\");\n+        // (Note: the double-quotes come from that this is a CSS value, which\n+        // might be a length, string, etc.)\n+        const cssColorScheme = cssContent || \"\\\"light\\\"\";\n+        isDarkMode = () => (cssColorScheme === \"\\\"dark\\\"\");\n+    }\n+\n+    return updateTheme;\n+})();\n \n if (getSettingValue(\"use-system-theme\") !== \"false\" && window.matchMedia) {\n     // update the preferred dark theme if the user is already using a dark theme\n@@ -235,13 +230,10 @@ if (getSettingValue(\"use-system-theme\") !== \"false\" && window.matchMedia) {\n         && darkThemes.indexOf(localStoredTheme) >= 0) {\n         updateLocalStorage(\"preferred-dark-theme\", localStoredTheme);\n     }\n-\n-    // call the function to initialize the theme at least once!\n-    updateSystemTheme();\n-} else {\n-    switchToSavedTheme();\n }\n \n+updateTheme();\n+\n if (getSettingValue(\"source-sidebar-show\") === \"true\") {\n     // At this point in page load, `document.body` is not available yet.\n     // Set a class on the `<html>` element instead.\n@@ -259,6 +251,6 @@ if (getSettingValue(\"source-sidebar-show\") === \"true\") {\n // specifically when talking to a remote website with no caching.\n window.addEventListener(\"pageshow\", ev => {\n     if (ev.persisted) {\n-        setTimeout(switchToSavedTheme, 0);\n+        setTimeout(updateTheme, 0);\n     }\n });"}]}