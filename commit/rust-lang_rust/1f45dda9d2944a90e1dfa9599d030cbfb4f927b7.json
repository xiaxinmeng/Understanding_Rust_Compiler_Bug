{"sha": "1f45dda9d2944a90e1dfa9599d030cbfb4f927b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNDVkZGE5ZDI5NDRhOTBlMWRmYTk1OTlkMDMwY2JmYjRmOTI3Yjc=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-05T18:17:44Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-05T18:19:43Z"}, "message": "Remove 'deprecated mutable...' from our code\n\nThis should make compilation a bit less noisy.", "tree": {"sha": "1a1d7c3e15af362539d6788af29ab27d751c6416", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a1d7c3e15af362539d6788af29ab27d751c6416"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7", "html_url": "https://github.com/rust-lang/rust/commit/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d738e9e0634a4cd6239d1317bd7dad53be68dc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d738e9e0634a4cd6239d1317bd7dad53be68dc8", "html_url": "https://github.com/rust-lang/rust/commit/3d738e9e0634a4cd6239d1317bd7dad53be68dc8"}], "stats": {"total": 86, "additions": 43, "deletions": 43}, "files": [{"sha": "9ef6ea272c30c0537c8be9b58133df41c7e2c572", "filename": "src/comp/front/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Fcomp%2Ffront%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Fcomp%2Ffront%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Flexer.rs?ref=1f45dda9d2944a90e1dfa9599d030cbfb4f927b7", "patch": "@@ -382,7 +382,7 @@ fn scan_dec_digits(reader rdr) -> str {\n     ret res;\n }\n \n-fn scan_number(mutable char c, reader rdr) -> token.token {\n+fn scan_number(char c, reader rdr) -> token.token {\n     auto accum_int = 0;\n     let str dec_str = \"\";\n     let bool is_dec_integer = false;"}, {"sha": "3ef16c716ad8cc2cdeeaf246ce86d6524b8f8452", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=1f45dda9d2944a90e1dfa9599d030cbfb4f927b7", "patch": "@@ -497,7 +497,7 @@ fn parse_arg(parser p) -> ast.arg {\n fn parse_seq_to_end[T](token.token ket,\n                               option.t[token.token] sep,\n                               (fn(parser) -> T) f,\n-                              mutable uint hi,\n+                              uint hi,\n                               parser p) -> vec[T] {\n     let bool first = true;\n     let vec[T] v = vec();"}, {"sha": "9e6b4489d35896d487804b4722d28bdeda6393ed", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=1f45dda9d2944a90e1dfa9599d030cbfb4f927b7", "patch": "@@ -2281,7 +2281,7 @@ mod Unify {\n \n                     case (_) {\n                         // Just bind the type variable to the expected type.\n-                        auto vlen = _vec.len[mutable vec[t]](cx.types);\n+                        auto vlen = _vec.len[vec[t]](cx.types);\n                         if (actual_n < vlen) {\n                             cx.types.(actual_n) += vec(expected);\n                         } else {\n@@ -2649,7 +2649,7 @@ mod Unify {\n             case (ty.ty_var(?expected_id)) {\n                 // Add a binding.\n                 auto expected_n = get_or_create_set(cx, expected_id);\n-                auto vlen = _vec.len[mutable vec[t]](cx.types);\n+                auto vlen = _vec.len[vec[t]](cx.types);\n                 if (expected_n < vlen) {\n                     cx.types.(expected_n) += vec(actual);\n                 } else {\n@@ -2713,15 +2713,15 @@ mod Unify {\n     fn unify_sets(@ctxt cx) -> vec[t] {\n         let vec[t] throwaway = vec();\n         let vec[mutable vec[t]] set_types = vec(mutable throwaway);\n-        _vec.pop[mutable vec[t]](set_types);   // FIXME: botch\n+        _vec.pop[vec[t]](set_types);   // FIXME: botch\n \n         for (UFind.node node in cx.sets.nodes) {\n             let vec[t] v = vec();\n             set_types += vec(mutable v);\n         }\n \n         auto i = 0u;\n-        while (i < _vec.len[mutable vec[t]](set_types)) {\n+        while (i < _vec.len[vec[t]](set_types)) {\n             auto root = UFind.find(cx.sets, i);\n             set_types.(root) += cx.types.(i);\n             i += 1u;\n@@ -2746,7 +2746,7 @@ mod Unify {\n              ty_ctxt tcx) -> result {\n         let vec[t] throwaway = vec();\n         let vec[mutable vec[t]] types = vec(mutable throwaway);\n-        _vec.pop[mutable vec[t]](types);   // FIXME: botch\n+        _vec.pop[vec[t]](types);   // FIXME: botch\n \n         auto cx = @rec(sets=UFind.make(),\n                        var_ids=common.new_int_hash[uint](),\n@@ -2759,7 +2759,7 @@ mod Unify {\n         case (ures_ok(?typ)) {\n             // Fast path: if there are no local variables, don't perform\n             // substitutions.\n-            if (_vec.len[mutable UFind.node](cx.sets.nodes) == 0u) {\n+            if (_vec.len(cx.sets.nodes) == 0u) {\n                 ret ures_ok(typ);\n             }\n "}, {"sha": "ec50fd841c04c9d28405488b6112123c6e913d82", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=1f45dda9d2944a90e1dfa9599d030cbfb4f927b7", "patch": "@@ -843,7 +843,7 @@ mod Unify {\n         // FIXME: horrid botch\n         let vec[mutable ty.t] param_substs =\n             vec(mutable ty.mk_nil(fcx.ccx.tcx));\n-        _vec.pop[mutable ty.t](param_substs);\n+        _vec.pop(param_substs);\n         ret with_params(fcx, expected, actual, param_substs);\n     }\n \n@@ -1000,7 +1000,7 @@ mod Demand {\n \n         let vec[mutable ty.t] ty_param_substs =\n             vec(mutable ty.mk_nil(fcx.ccx.tcx));\n-        _vec.pop[mutable ty.t](ty_param_substs);   // FIXME: horrid botch\n+        _vec.pop(ty_param_substs);   // FIXME: horrid botch\n         for (ty.t ty_param_subst in ty_param_substs_0) {\n             ty_param_substs += vec(mutable ty_param_subst);\n         }\n@@ -1009,7 +1009,7 @@ mod Demand {\n             case (ures_ok(?t)) {\n                 // TODO: Use \"freeze\", when we have it.\n                 let vec[ty.t] result_ty_param_substs = vec();\n-                for (mutable ty.t ty_param_subst in ty_param_substs) {\n+                for (ty.t ty_param_subst in ty_param_substs) {\n                     result_ty_param_substs += vec(ty_param_subst);\n                 }\n \n@@ -2782,7 +2782,7 @@ fn hash_unify_cache_entry(&unify_cache_entry uce) -> uint {\n     h += h << 5u + ty.hash_ty(uce._1);\n \n     auto i = 0u;\n-    auto tys_len = _vec.len[mutable ty.t](uce._2);\n+    auto tys_len = _vec.len(uce._2);\n     while (i < tys_len) {\n         h += h << 5u + ty.hash_ty(uce._2.(i));\n         i += 1u;\n@@ -2795,8 +2795,8 @@ fn eq_unify_cache_entry(&unify_cache_entry a, &unify_cache_entry b) -> bool {\n     if (!ty.eq_ty(a._0, b._0) || !ty.eq_ty(a._1, b._1)) { ret false; }\n \n     auto i = 0u;\n-    auto tys_len = _vec.len[mutable ty.t](a._2);\n-    if (_vec.len[mutable ty.t](b._2) != tys_len) { ret false; }\n+    auto tys_len = _vec.len(a._2);\n+    if (_vec.len(b._2) != tys_len) { ret false; }\n \n     while (i < tys_len) {\n         if (!ty.eq_ty(a._2.(i), b._2.(i))) { ret false; }"}, {"sha": "9593e787e0d7701f86c1c6b88e68e4832d89a1c0", "filename": "src/lib/UFind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Flib%2FUFind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Flib%2FUFind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FUFind.rs?ref=1f45dda9d2944a90e1dfa9599d030cbfb4f927b7", "patch": "@@ -8,12 +8,12 @@ type ufind = rec(mutable vec[mutable node] nodes);\n \n fn make() -> ufind {\n     let vec[mutable node] v = vec(mutable none[uint]);\n-    _vec.pop[mutable node](v);  // FIXME: botch\n+    _vec.pop(v);  // FIXME: botch\n     ret rec(mutable nodes=v);\n }\n \n fn make_set(&ufind ufnd) -> uint {\n-    auto idx = _vec.len[mutable node](ufnd.nodes);\n+    auto idx = _vec.len(ufnd.nodes);\n     ufnd.nodes += vec(mutable none[uint]);\n     ret idx;\n }"}, {"sha": "5239afb1fea05884a5f0df150a5f6ec4713c0601", "filename": "src/lib/_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Flib%2F_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Flib%2F_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_str.rs?ref=1f45dda9d2944a90e1dfa9599d030cbfb4f927b7", "patch": "@@ -142,7 +142,7 @@ fn unsafe_from_bytes(vec[mutable? u8] v) -> str {\n // FIXME even temp-er thing; rustc can use \"unsafe_from_bytes\" above\n fn unsafe_from_mutable_bytes(vec[mutable u8] mv) -> str {\n     let vec[u8] v = vec();\n-    for (mutable u8 b in mv) {\n+    for (u8 b in mv) {\n         v += vec(b);\n     }\n     ret rustrt.str_from_vec(v);"}, {"sha": "e094e5812bddb5b86663266f37fa84aec9ce65b1", "filename": "src/lib/_u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Flib%2F_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Flib%2F_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_u8.rs?ref=1f45dda9d2944a90e1dfa9599d030cbfb4f927b7", "patch": "@@ -11,7 +11,7 @@ fn ne(u8 x, u8 y) -> bool { ret x != y; }\n fn ge(u8 x, u8 y) -> bool { ret x >= y; }\n fn gt(u8 x, u8 y) -> bool { ret x > y; }\n \n-iter range(mutable u8 lo, u8 hi) -> u8 {\n+iter range(u8 lo, u8 hi) -> u8 {\n     while (lo < hi) {\n         put lo;\n         lo += 1u8;"}, {"sha": "3a197ac24bfda20b7d08341acf909e7d6e4a443f", "filename": "src/lib/_vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Flib%2F_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Flib%2F_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_vec.rs?ref=1f45dda9d2944a90e1dfa9599d030cbfb4f927b7", "patch": "@@ -190,18 +190,18 @@ fn unshift[T](&mutable array[T] v, &T t) {\n     v = res;\n }\n \n-fn grow[T](&mutable array[T] v, uint n, &T initval) {\n+fn grow[T](&array[T] v, uint n, &T initval) {\n     let uint i = n;\n     while (i > 0u) {\n         i -= 1u;\n         v += vec(initval);\n     }\n }\n \n-fn grow_set[T](&mutable vec[mutable T] v, uint index, &T initval, &T val) {\n-    auto length = _vec.len[mutable T](v);\n+fn grow_set[T](&vec[mutable T] v, uint index, &T initval, &T val) {\n+    auto length = _vec.len(v);\n     if (index >= length) {\n-        grow[mutable T](v, index - length + 1u, initval);\n+        grow(v, index - length + 1u, initval);\n     }\n     v.(index) = val;\n }"}, {"sha": "1002abc83a6b53b6e737b3b5a929752bfe2aaafa", "filename": "src/lib/bitv.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Flib%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Flib%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fbitv.rs?ref=1f45dda9d2944a90e1dfa9599d030cbfb4f927b7", "patch": "@@ -26,9 +26,9 @@ fn create(uint nbits, bool init) -> t {\n }\n \n fn process(&fn(uint, uint) -> uint op, &t v0, &t v1) -> bool {\n-    auto len = _vec.len[mutable uint](v1.storage);\n+    auto len = _vec.len(v1.storage);\n \n-    assert (_vec.len[mutable uint](v0.storage) == len);\n+    assert (_vec.len(v0.storage) == len);\n     assert (v0.nbits == v1.nbits);\n \n     auto changed = false;\n@@ -76,7 +76,7 @@ fn copy(&t v0, t v1) -> bool {\n \n fn clone(t v) -> t {\n     auto storage = _vec.init_elt_mut[uint](0u, v.nbits / uint_bits() + 1u);\n-    auto len = _vec.len[mutable uint](v.storage);\n+    auto len = _vec.len(v.storage);\n     for each (uint i in _uint.range(0u, len)) {\n         storage.(i) = v.storage.(i);\n     }\n@@ -97,7 +97,7 @@ fn get(&t v, uint i) -> bool {\n fn equal(&t v0, &t v1) -> bool {\n     // FIXME: when we can break or return from inside an iterator loop,\n     //        we can eliminate this painful while-loop\n-    auto len = _vec.len[mutable uint](v1.storage);\n+    auto len = _vec.len(v1.storage);\n     auto i = 0u;\n     while (i < len) {\n         if (v0.storage.(i) != v1.storage.(i)) {\n@@ -109,13 +109,13 @@ fn equal(&t v0, &t v1) -> bool {\n }\n \n fn clear(&t v) {\n-    for each (uint i in _uint.range(0u, _vec.len[mutable uint](v.storage))) {\n+    for each (uint i in _uint.range(0u, _vec.len(v.storage))) {\n         v.storage.(i) = 0u;\n     }\n }\n \n fn invert(&t v) {\n-    for each (uint i in _uint.range(0u, _vec.len[mutable uint](v.storage))) {\n+    for each (uint i in _uint.range(0u, _vec.len(v.storage))) {\n         v.storage.(i) = ~v.storage.(i);\n     }\n }"}, {"sha": "b8404a7d885e3912fe0a8f0e7ff841051fa9bbce", "filename": "src/lib/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Flib%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Flib%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fdeque.rs?ref=1f45dda9d2944a90e1dfa9599d030cbfb4f927b7", "patch": "@@ -19,7 +19,7 @@ type t[T] = obj {\n \n fn create[T]() -> t[T] {\n \n-    type cell[T] = mutable option.t[T];\n+    type cell[T] = option.t[T];\n \n     let uint initial_capacity = 32u; // 2^5\n "}, {"sha": "364810ba3d3a25f526ebe303442b0d5342a5b195", "filename": "src/lib/io.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=1f45dda9d2944a90e1dfa9599d030cbfb4f927b7", "patch": "@@ -451,7 +451,7 @@ type mutable_byte_buf = @rec(mutable vec[mutable u8] buf, mutable uint pos);\n state obj byte_buf_writer(mutable_byte_buf buf) {\n     fn write(vec[u8] v) {\n         // Fast path.\n-        if (buf.pos == _vec.len[mutable u8](buf.buf)) {\n+        if (buf.pos == _vec.len(buf.buf)) {\n             // FIXME: Fix our type system. There's no reason you shouldn't be\n             // able to add a mutable vector to an immutable one.\n             auto mv = _vec.rustrt.unsafe_vec_to_mut[u8](v);\n@@ -465,7 +465,7 @@ state obj byte_buf_writer(mutable_byte_buf buf) {\n         auto vpos = 0u;\n         while (vpos < vlen) {\n             auto b = v.(vpos);\n-            if (buf.pos == _vec.len[mutable u8](buf.buf)) {\n+            if (buf.pos == _vec.len(buf.buf)) {\n                 buf.buf += vec(mutable b);\n             } else {\n                 buf.buf.(buf.pos) = b;\n@@ -477,7 +477,7 @@ state obj byte_buf_writer(mutable_byte_buf buf) {\n \n     fn seek(int offset, seek_style whence) {\n         auto pos = buf.pos;\n-        auto len = _vec.len[mutable u8](buf.buf);\n+        auto len = _vec.len(buf.buf);\n         buf.pos = seek_in_buf(offset, pos, len, whence);\n     }\n \n@@ -487,7 +487,7 @@ state obj byte_buf_writer(mutable_byte_buf buf) {\n fn string_writer() -> str_writer {\n     // FIXME: yikes, this is bad. Needs fixing of mutable syntax.\n     let vec[mutable u8] b = vec(mutable 0u8);\n-    _vec.pop[mutable u8](b);\n+    _vec.pop(b);\n \n     let mutable_byte_buf buf = @rec(mutable buf = b, mutable pos = 0u);\n     state obj str_writer_wrap(writer wr, mutable_byte_buf buf) {"}, {"sha": "a37db418109b08c16acc6bb29982eb20585e3339", "filename": "src/lib/linux_os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Flib%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Flib%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flinux_os.rs?ref=1f45dda9d2944a90e1dfa9599d030cbfb4f927b7", "patch": "@@ -66,7 +66,7 @@ fn dylib_filename(str base) -> str {\n \n fn pipe() -> tup(int, int) {\n     let vec[mutable int] fds = vec(mutable 0, 0);\n-    assert (os.libc.pipe(_vec.buf[mutable int](fds)) == 0);\n+    assert (os.libc.pipe(_vec.buf(fds)) == 0);\n     ret tup(fds.(0), fds.(1));\n }\n \n@@ -76,7 +76,7 @@ fn fd_FILE(int fd) -> libc.FILE {\n \n fn waitpid(int pid) -> int {\n     let vec[mutable int] status = vec(mutable 0);\n-    assert (os.libc.waitpid(pid, _vec.buf[mutable int](status), 0) != -1);\n+    assert (os.libc.waitpid(pid, _vec.buf(status), 0) != -1);\n     ret status.(0);\n }\n "}, {"sha": "e84787a23d7125bf23fbe3bb5646c21027ff3659", "filename": "src/lib/sha1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Flib%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Flib%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsha1.rs?ref=1f45dda9d2944a90e1dfa9599d030cbfb4f927b7", "patch": "@@ -67,7 +67,7 @@ fn mk_sha1() -> sha1 {\n     fn process_msg_block(&sha1state st) {\n \n         // FIXME: Make precondition\n-        assert (_vec.len[mutable u32](st.h) == digest_buf_len);\n+        assert (_vec.len(st.h) == digest_buf_len);\n \n         // Constants\n         auto k = vec(0x5A827999u32,\n@@ -192,7 +192,7 @@ fn mk_sha1() -> sha1 {\n      */\n     fn pad_msg(&sha1state st) {\n         // FIXME: Should be a precondition\n-        assert (_vec.len[mutable u8](st.msg_block) == msg_block_len);\n+        assert (_vec.len(st.msg_block) == msg_block_len);\n \n         /*\n          * Check to see if the current message block is too small to hold\n@@ -236,7 +236,7 @@ fn mk_sha1() -> sha1 {\n \n         fn reset() {\n             // FIXME: Should be typestate precondition\n-            assert (_vec.len[mutable u32](st.h) == digest_buf_len);\n+            assert (_vec.len(st.h) == digest_buf_len);\n \n             st.len_low = 0u32;\n             st.len_high = 0u32;"}, {"sha": "b6f6339284a9bec8569370cbb84669a1d81dad85", "filename": "src/test/run-pass/obj-self-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Ftest%2Frun-pass%2Fobj-self-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Ftest%2Frun-pass%2Fobj-self-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-self-2.rs?ref=1f45dda9d2944a90e1dfa9599d030cbfb4f927b7", "patch": "@@ -2,11 +2,11 @@\n fn main() {\n \n   obj foo() {\n-      fn m1(mutable int i) {\n+      fn m1(int i) {\n           i += 1;\n           log \"hi!\";\n       }\n-      fn m2(mutable int i) {\n+      fn m2(int i) {\n           i += 1;\n           self.m1(i);\n       }"}, {"sha": "1053029ed52e5641a768dcc329223cfacaf2b273", "filename": "src/test/run-pass/obj-self-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Ftest%2Frun-pass%2Fobj-self-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f45dda9d2944a90e1dfa9599d030cbfb4f927b7/src%2Ftest%2Frun-pass%2Fobj-self-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-self-3.rs?ref=1f45dda9d2944a90e1dfa9599d030cbfb4f927b7", "patch": "@@ -2,14 +2,14 @@\n fn main() {\n \n   obj foo() {\n-      fn m1(mutable int i) -> int {\n+      fn m1(int i) -> int {\n           i += 1;\n           ret i;\n       }\n-      fn m2(mutable int i) -> int {\n+      fn m2(int i) -> int {\n           ret self.m1(i);\n       }\n-      fn m3(mutable int i) -> int {\n+      fn m3(int i) -> int {\n           i += 1;\n           ret self.m1(i);\n       }"}]}