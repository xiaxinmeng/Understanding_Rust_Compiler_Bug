{"sha": "1bc7da2fec5192a4ab98ec5b348812a540a1d02f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYzdkYTJmZWM1MTkyYTRhYjk4ZWM1YjM0ODgxMmE1NDBhMWQwMmY=", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-03-11T18:40:30Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-03-11T18:40:30Z"}, "message": "Fix `needless_continue` false positive", "tree": {"sha": "1bb9cb9dc6a3fcb3f3ef376a6a68a28918d30516", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bb9cb9dc6a3fcb3f3ef376a6a68a28918d30516"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bc7da2fec5192a4ab98ec5b348812a540a1d02f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bc7da2fec5192a4ab98ec5b348812a540a1d02f", "html_url": "https://github.com/rust-lang/rust/commit/1bc7da2fec5192a4ab98ec5b348812a540a1d02f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bc7da2fec5192a4ab98ec5b348812a540a1d02f/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cdac4a9c798f8e22a4db220020713175eb9159b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cdac4a9c798f8e22a4db220020713175eb9159b", "html_url": "https://github.com/rust-lang/rust/commit/1cdac4a9c798f8e22a4db220020713175eb9159b"}], "stats": {"total": 154, "additions": 136, "deletions": 18}, "files": [{"sha": "102b3ea2fff9265ad6a646fa06cd67d585ff854c", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1bc7da2fec5192a4ab98ec5b348812a540a1d02f/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc7da2fec5192a4ab98ec5b348812a540a1d02f/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=1bc7da2fec5192a4ab98ec5b348812a540a1d02f", "patch": "@@ -175,19 +175,19 @@ impl EarlyLintPass for NeedlessContinue {\n /// - The expression is a `continue` node.\n /// - The expression node is a block with the first statement being a\n /// `continue`.\n-fn needless_continue_in_else(else_expr: &ast::Expr) -> bool {\n+fn needless_continue_in_else(else_expr: &ast::Expr, label: Option<&ast::Label>) -> bool {\n     match else_expr.node {\n-        ast::ExprKind::Block(ref else_block, _) => is_first_block_stmt_continue(else_block),\n-        ast::ExprKind::Continue(_) => true,\n+        ast::ExprKind::Block(ref else_block, _) => is_first_block_stmt_continue(else_block, label),\n+        ast::ExprKind::Continue(l) => compare_labels(label, l.as_ref()),\n         _ => false,\n     }\n }\n \n-fn is_first_block_stmt_continue(block: &ast::Block) -> bool {\n+fn is_first_block_stmt_continue(block: &ast::Block, label: Option<&ast::Label>) -> bool {\n     block.stmts.get(0).map_or(false, |stmt| match stmt.node {\n         ast::StmtKind::Semi(ref e) | ast::StmtKind::Expr(ref e) => {\n-            if let ast::ExprKind::Continue(_) = e.node {\n-                true\n+            if let ast::ExprKind::Continue(ref l) = e.node {\n+                compare_labels(label, l.as_ref())\n             } else {\n                 false\n             }\n@@ -196,17 +196,29 @@ fn is_first_block_stmt_continue(block: &ast::Block) -> bool {\n     })\n }\n \n+/// If the `continue` has a label, check it matches the label of the loop.\n+fn compare_labels(loop_label: Option<&ast::Label>, continue_label: Option<&ast::Label>) -> bool {\n+    match (loop_label, continue_label) {\n+        // `loop { continue; }` or `'a loop { continue; }`\n+        (_, None) => true,\n+        // `loop { continue 'a; }`\n+        (None, _) => false,\n+        // `'a loop { continue 'a; }` or `'a loop { continue 'b; }`\n+        (Some(x), Some(y)) => x.ident == y.ident,\n+    }\n+}\n+\n /// If `expr` is a loop expression (while/while let/for/loop), calls `func` with\n /// the AST object representing the loop block of `expr`.\n fn with_loop_block<F>(expr: &ast::Expr, mut func: F)\n where\n-    F: FnMut(&ast::Block),\n+    F: FnMut(&ast::Block, Option<&ast::Label>),\n {\n     match expr.node {\n-        ast::ExprKind::While(_, ref loop_block, _)\n-        | ast::ExprKind::WhileLet(_, _, ref loop_block, _)\n-        | ast::ExprKind::ForLoop(_, _, ref loop_block, _)\n-        | ast::ExprKind::Loop(ref loop_block, _) => func(loop_block),\n+        ast::ExprKind::While(_, ref loop_block, ref label)\n+        | ast::ExprKind::WhileLet(_, _, ref loop_block, ref label)\n+        | ast::ExprKind::ForLoop(_, _, ref loop_block, ref label)\n+        | ast::ExprKind::Loop(ref loop_block, ref label) => func(loop_block, label.as_ref()),\n         _ => {},\n     }\n }\n@@ -344,7 +356,7 @@ fn suggestion_snippet_for_continue_inside_else<'a>(\n }\n \n fn check_and_warn<'a>(ctx: &EarlyContext<'_>, expr: &'a ast::Expr) {\n-    with_loop_block(expr, |loop_block| {\n+    with_loop_block(expr, |loop_block, label| {\n         for (i, stmt) in loop_block.stmts.iter().enumerate() {\n             with_if_expr(stmt, |if_expr, cond, then_block, else_expr| {\n                 let data = &LintData {\n@@ -355,14 +367,14 @@ fn check_and_warn<'a>(ctx: &EarlyContext<'_>, expr: &'a ast::Expr) {\n                     else_expr,\n                     block_stmts: &loop_block.stmts,\n                 };\n-                if needless_continue_in_else(else_expr) {\n+                if needless_continue_in_else(else_expr, label) {\n                     emit_warning(\n                         ctx,\n                         data,\n                         DROP_ELSE_BLOCK_AND_MERGE_MSG,\n                         LintType::ContinueInsideElseBlock,\n                     );\n-                } else if is_first_block_stmt_continue(then_block) {\n+                } else if is_first_block_stmt_continue(then_block, label) {\n                     emit_warning(ctx, data, DROP_ELSE_BLOCK_MSG, LintType::ContinueInsideThenBlock);\n                 }\n             });"}, {"sha": "5da95647f2c155d4bc7741d731b7561d095411bf", "filename": "tests/ui/needless_continue.rs", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1bc7da2fec5192a4ab98ec5b348812a540a1d02f/tests%2Fui%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc7da2fec5192a4ab98ec5b348812a540a1d02f/tests%2Fui%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_continue.rs?ref=1bc7da2fec5192a4ab98ec5b348812a540a1d02f", "patch": "@@ -1,3 +1,5 @@\n+#![warn(clippy::needless_continue)]\n+\n macro_rules! zero {\n     ($x:expr) => {\n         $x == 0\n@@ -10,7 +12,6 @@ macro_rules! nonzero {\n     };\n }\n \n-#[warn(clippy::needless_continue)]\n fn main() {\n     let mut i = 1;\n     while i < 10 {\n@@ -49,3 +50,66 @@ fn main() {\n         println!(\"bleh\");\n     }\n }\n+\n+mod issue_2329 {\n+    fn condition() -> bool {\n+        unimplemented!()\n+    }\n+    fn update_condition() {}\n+\n+    // only the outer loop has a label\n+    fn foo() {\n+        'outer: loop {\n+            println!(\"Entry\");\n+            while condition() {\n+                update_condition();\n+                if condition() {\n+                    println!(\"foo-1\");\n+                } else {\n+                    continue 'outer; // should not lint here\n+                }\n+                println!(\"foo-2\");\n+\n+                update_condition();\n+                if condition() {\n+                    continue 'outer; // should not lint here\n+                } else {\n+                    println!(\"foo-3\");\n+                }\n+                println!(\"foo-4\");\n+            }\n+        }\n+    }\n+\n+    // both loops have labels\n+    fn bar() {\n+        'outer: loop {\n+            println!(\"Entry\");\n+            'inner: while condition() {\n+                update_condition();\n+                if condition() {\n+                    println!(\"bar-1\");\n+                } else {\n+                    continue 'outer; // should not lint here\n+                }\n+                println!(\"bar-2\");\n+\n+                update_condition();\n+                if condition() {\n+                    println!(\"bar-3\");\n+                } else {\n+                    continue 'inner; // should lint here\n+                }\n+                println!(\"bar-4\");\n+\n+                update_condition();\n+                if condition() {\n+                    continue; // should lint here\n+                } else {\n+                    println!(\"bar-5\");\n+                }\n+                println!(\"bar-6\");\n+            }\n+        }\n+    }\n+}"}, {"sha": "340ae66dae4958e880b0cdf181fa8dbd730d3dc5", "filename": "tests/ui/needless_continue.stderr", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1bc7da2fec5192a4ab98ec5b348812a540a1d02f/tests%2Fui%2Fneedless_continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bc7da2fec5192a4ab98ec5b348812a540a1d02f/tests%2Fui%2Fneedless_continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_continue.stderr?ref=1bc7da2fec5192a4ab98ec5b348812a540a1d02f", "patch": "@@ -1,6 +1,6 @@\n error: This else block is redundant.\n \n-  --> $DIR/needless_continue.rs:27:16\n+  --> $DIR/needless_continue.rs:28:16\n    |\n LL |           } else {\n    |  ________________^\n@@ -37,7 +37,7 @@ LL | |         }\n \n error: There is no need for an explicit `else` block for this `if` expression\n \n-  --> $DIR/needless_continue.rs:42:9\n+  --> $DIR/needless_continue.rs:43:9\n    |\n LL | /         if (zero!(i % 2) || nonzero!(i % 5)) && i % 3 != 0 {\n LL | |             continue;\n@@ -55,5 +55,47 @@ LL | |         }\n            println!(\"Jabber\");\n            ...\n \n-error: aborting due to 2 previous errors\n+error: This else block is redundant.\n+\n+  --> $DIR/needless_continue.rs:100:24\n+   |\n+LL |                   } else {\n+   |  ________________________^\n+LL | |                     continue 'inner; // should lint here\n+LL | |                 }\n+   | |_________________^\n+   |\n+   = help: Consider dropping the else clause and merging the code that follows (in the loop) with the if block, like so:\n+           if condition() {\n+           println!(\"bar-3\");\n+           // Merged code follows...println!(\"bar-4\");\n+           update_condition();\n+           if condition() {\n+               continue; // should lint here\n+           } else {\n+               println!(\"bar-5\");\n+           }\n+           println!(\"bar-6\");\n+           }\n+           \n+\n+error: There is no need for an explicit `else` block for this `if` expression\n+\n+  --> $DIR/needless_continue.rs:106:17\n+   |\n+LL | /                 if condition() {\n+LL | |                     continue; // should lint here\n+LL | |                 } else {\n+LL | |                     println!(\"bar-5\");\n+LL | |                 }\n+   | |_________________^\n+   |\n+   = help: Consider dropping the else clause, and moving out the code in the else block, like so:\n+           if condition() {\n+               continue;\n+           }\n+           println!(\"bar-5\");\n+           ...\n+\n+error: aborting due to 4 previous errors\n "}]}