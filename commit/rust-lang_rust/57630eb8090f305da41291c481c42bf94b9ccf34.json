{"sha": "57630eb8090f305da41291c481c42bf94b9ccf34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NjMwZWI4MDkwZjMwNWRhNDEyOTFjNDgxYzQyYmY5NGI5Y2NmMzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-08T19:51:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-08T19:51:11Z"}, "message": "auto merge of #16336 : retep998/rust/master, r=brson\n\nSeveral of the tests in `make check-fast` were failing so this fixes those tests.", "tree": {"sha": "192aa3f075753d60e49ab7724ad5d9a6dde53a76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/192aa3f075753d60e49ab7724ad5d9a6dde53a76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57630eb8090f305da41291c481c42bf94b9ccf34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57630eb8090f305da41291c481c42bf94b9ccf34", "html_url": "https://github.com/rust-lang/rust/commit/57630eb8090f305da41291c481c42bf94b9ccf34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57630eb8090f305da41291c481c42bf94b9ccf34/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98f1b0fb6861b624b54a2fcce0cf827261ae5460", "url": "https://api.github.com/repos/rust-lang/rust/commits/98f1b0fb6861b624b54a2fcce0cf827261ae5460", "html_url": "https://github.com/rust-lang/rust/commit/98f1b0fb6861b624b54a2fcce0cf827261ae5460"}, {"sha": "24ebbb442014d0bca9f32b36c25f739bf18146bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ebbb442014d0bca9f32b36c25f739bf18146bf", "html_url": "https://github.com/rust-lang/rust/commit/24ebbb442014d0bca9f32b36c25f739bf18146bf"}], "stats": {"total": 83, "additions": 50, "deletions": 33}, "files": [{"sha": "e368a5644159c7126b27386e07385a75c4ae28c0", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/57630eb8090f305da41291c481c42bf94b9ccf34/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57630eb8090f305da41291c481c42bf94b9ccf34/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=57630eb8090f305da41291c481c42bf94b9ccf34", "patch": "@@ -1142,18 +1142,16 @@ pub mod types {\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n-                use types::os::arch::c95::{c_short, time_t, suseconds_t,\n-                                                 c_long};\n+                use types::os::arch::c95::{c_short, time_t, c_long};\n                 use types::os::arch::extra::{int64, time64_t};\n                 use types::os::arch::posix88::{dev_t, ino_t};\n-                use types::os::arch::posix88::mode_t;\n \n                 // pub Note: this is the struct called stat64 in win32. Not stat,\n                 // nor stati64.\n                 pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n-                    pub st_mode: mode_t,\n+                    pub st_mode: u16,\n                     pub st_nlink: c_short,\n                     pub st_uid: c_short,\n                     pub st_gid: c_short,\n@@ -1171,8 +1169,8 @@ pub mod types {\n                 }\n \n                 pub struct timeval {\n-                    pub tv_sec: time_t,\n-                    pub tv_usec: suseconds_t,\n+                    pub tv_sec: c_long,\n+                    pub tv_usec: c_long,\n                 }\n \n                 pub struct timespec {\n@@ -1186,7 +1184,7 @@ pub mod types {\n             pub mod bsd44 {\n                 use types::os::arch::c95::{c_char, c_int, c_uint, size_t};\n \n-                pub type SOCKET = c_uint;\n+                pub type SOCKET = uint;\n                 pub type socklen_t = c_int;\n                 pub type sa_family_t = u16;\n                 pub type in_port_t = u16;\n@@ -1197,6 +1195,7 @@ pub mod types {\n                 }\n                 pub struct sockaddr_storage {\n                     pub ss_family: sa_family_t,\n+                    pub __ss_pad1: [u8, ..6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8, ..112],\n                 }\n@@ -1293,12 +1292,9 @@ pub mod types {\n             pub mod posix88 {\n                 pub type off_t = i32;\n                 pub type dev_t = u32;\n-                pub type ino_t = i16;\n+                pub type ino_t = u16;\n \n-                #[cfg(target_arch = \"x86\")]\n-                pub type pid_t = i32;\n-                #[cfg(target_arch = \"x86_64\")]\n-                pub type pid_t = i64;\n+                pub type pid_t = u32;\n \n                 pub type useconds_t = u32;\n                 pub type mode_t = u16;\n@@ -1415,7 +1411,7 @@ pub mod types {\n                     pub dwPageSize: DWORD,\n                     pub lpMinimumApplicationAddress: LPVOID,\n                     pub lpMaximumApplicationAddress: LPVOID,\n-                    pub dwActiveProcessorMask: DWORD,\n+                    pub dwActiveProcessorMask: uint,\n                     pub dwNumberOfProcessors: DWORD,\n                     pub dwProcessorType: DWORD,\n                     pub dwAllocationGranularity: DWORD,\n@@ -1950,7 +1946,7 @@ pub mod consts {\n         }\n         pub mod extra {\n             use types::os::arch::c95::c_int;\n-            use types::os::arch::extra::{WORD, DWORD, BOOL};\n+            use types::os::arch::extra::{WORD, DWORD, BOOL, HANDLE};\n \n             pub static TRUE : BOOL = 1;\n             pub static FALSE : BOOL = 0;\n@@ -1979,7 +1975,7 @@ pub mod consts {\n             pub static ERROR_IO_PENDING: c_int = 997;\n             pub static ERROR_FILE_INVALID : c_int = 1006;\n             pub static ERROR_NOT_FOUND: c_int = 1168;\n-            pub static INVALID_HANDLE_VALUE : c_int = -1;\n+            pub static INVALID_HANDLE_VALUE: HANDLE = -1 as HANDLE;\n \n             pub static DELETE : DWORD = 0x00010000;\n             pub static READ_CONTROL : DWORD = 0x00020000;"}, {"sha": "80c9e91b48f7a5e24e3ba6db156d142c94090133", "filename": "src/libnative/io/c_win32.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57630eb8090f305da41291c481c42bf94b9ccf34/src%2Flibnative%2Fio%2Fc_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57630eb8090f305da41291c481c42bf94b9ccf34/src%2Flibnative%2Fio%2Fc_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fc_win32.rs?ref=57630eb8090f305da41291c481c42bf94b9ccf34", "patch": "@@ -28,6 +28,7 @@ pub static ENABLE_PROCESSED_INPUT: libc::DWORD = 0x1;\n pub static ENABLE_QUICK_EDIT_MODE: libc::DWORD = 0x40;\n \n #[repr(C)]\n+#[cfg(target_arch = \"x86\")]\n pub struct WSADATA {\n     pub wVersion: libc::WORD,\n     pub wHighVersion: libc::WORD,\n@@ -37,6 +38,17 @@ pub struct WSADATA {\n     pub iMaxUdpDg: u16,\n     pub lpVendorInfo: *mut u8,\n }\n+#[repr(C)]\n+#[cfg(target_arch = \"x86_64\")]\n+pub struct WSADATA {\n+    pub wVersion: libc::WORD,\n+    pub wHighVersion: libc::WORD,\n+    pub iMaxSockets: u16,\n+    pub iMaxUdpDg: u16,\n+    pub lpVendorInfo: *mut u8,\n+    pub szDescription: [u8, ..WSADESCRIPTION_LEN + 1],\n+    pub szSystemStatus: [u8, ..WSASYS_STATUS_LEN + 1],\n+}\n \n pub type LPWSADATA = *mut WSADATA;\n "}, {"sha": "fe29c0245297cd34709e4d189ac1aa02d49710cc", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57630eb8090f305da41291c481c42bf94b9ccf34/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57630eb8090f305da41291c481c42bf94b9ccf34/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=57630eb8090f305da41291c481c42bf94b9ccf34", "patch": "@@ -320,7 +320,7 @@ pub fn open(path: &CString, fm: rtio::FileMode, fa: rtio::FileAccess)\n                           dwFlagsAndAttributes,\n                           ptr::mut_null())\n     };\n-    if handle == libc::INVALID_HANDLE_VALUE as libc::HANDLE {\n+    if handle == libc::INVALID_HANDLE_VALUE {\n         Err(super::last_error())\n     } else {\n         let fd = unsafe {\n@@ -368,7 +368,7 @@ pub fn readdir(p: &CString) -> IoResult<Vec<CString>> {\n         let wfd_ptr = malloc_raw(rust_list_dir_wfd_size() as uint);\n         let find_handle = libc::FindFirstFileW(path.as_ptr(),\n                                                wfd_ptr as libc::HANDLE);\n-        if find_handle as libc::c_int != libc::INVALID_HANDLE_VALUE {\n+        if find_handle != libc::INVALID_HANDLE_VALUE {\n             let mut paths = vec!();\n             let mut more_files = 1 as libc::c_int;\n             while more_files != 0 {\n@@ -440,7 +440,7 @@ pub fn readlink(p: &CString) -> IoResult<CString> {\n                           libc::FILE_ATTRIBUTE_NORMAL,\n                           ptr::mut_null())\n     };\n-    if handle as int == libc::INVALID_HANDLE_VALUE as int {\n+    if handle == libc::INVALID_HANDLE_VALUE {\n         return Err(super::last_error())\n     }\n     // Specify (sz - 1) because the documentation states that it's the size"}, {"sha": "717915e5d23bde51c181ace0c4768f436dec4738", "filename": "src/libnative/io/pipe_win32.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57630eb8090f305da41291c481c42bf94b9ccf34/src%2Flibnative%2Fio%2Fpipe_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57630eb8090f305da41291c481c42bf94b9ccf34/src%2Flibnative%2Fio%2Fpipe_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_win32.rs?ref=57630eb8090f305da41291c481c42bf94b9ccf34", "patch": "@@ -223,7 +223,7 @@ impl UnixStream {\n                 libc::FILE_FLAG_OVERLAPPED,\n                 ptr::mut_null())\n         };\n-        if result != libc::INVALID_HANDLE_VALUE as libc::HANDLE {\n+        if result != libc::INVALID_HANDLE_VALUE {\n             return Some(result)\n         }\n \n@@ -238,7 +238,7 @@ impl UnixStream {\n                     libc::FILE_FLAG_OVERLAPPED,\n                     ptr::mut_null())\n             };\n-            if result != libc::INVALID_HANDLE_VALUE as libc::HANDLE {\n+            if result != libc::INVALID_HANDLE_VALUE {\n                 return Some(result)\n             }\n         }\n@@ -253,7 +253,7 @@ impl UnixStream {\n                     libc::FILE_FLAG_OVERLAPPED,\n                     ptr::mut_null())\n             };\n-            if result != libc::INVALID_HANDLE_VALUE as libc::HANDLE {\n+            if result != libc::INVALID_HANDLE_VALUE {\n                 return Some(result)\n             }\n         }\n@@ -565,7 +565,7 @@ impl UnixListener {\n         // and such.\n         let addr_v = try!(to_utf16(addr));\n         let ret = unsafe { pipe(addr_v.as_ptr(), true) };\n-        if ret == libc::INVALID_HANDLE_VALUE as libc::HANDLE {\n+        if ret == libc::INVALID_HANDLE_VALUE {\n             Err(super::last_error())\n         } else {\n             Ok(UnixListener { handle: ret, name: addr.clone() })\n@@ -680,7 +680,7 @@ impl UnixAcceptor {\n         // create a second server pipe. If this fails, we disconnect the\n         // connected client and return an error (see comments above).\n         let new_handle = unsafe { pipe(name.as_ptr(), false) };\n-        if new_handle == libc::INVALID_HANDLE_VALUE as libc::HANDLE {\n+        if new_handle == libc::INVALID_HANDLE_VALUE {\n             let ret = Err(super::last_error());\n             // If our disconnection fails, then there's not really a whole lot\n             // that we can do, so fail the task."}, {"sha": "d83e36a5e2a9c6e0835e8683ab642f10acedc894", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57630eb8090f305da41291c481c42bf94b9ccf34/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57630eb8090f305da41291c481c42bf94b9ccf34/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=57630eb8090f305da41291c481c42bf94b9ccf34", "patch": "@@ -359,13 +359,13 @@ fn spawn_process_os(cfg: ProcessConfig,\n                                               libc::OPEN_EXISTING,\n                                               0,\n                                               ptr::mut_null());\n-                    if *slot == INVALID_HANDLE_VALUE as libc::HANDLE {\n+                    if *slot == INVALID_HANDLE_VALUE {\n                         return Err(super::last_error())\n                     }\n                 }\n                 Some(ref fd) => {\n                     let orig = get_osfhandle(fd.fd()) as HANDLE;\n-                    if orig == INVALID_HANDLE_VALUE as HANDLE {\n+                    if orig == INVALID_HANDLE_VALUE {\n                         return Err(super::last_error())\n                     }\n                     if DuplicateHandle(cur_proc, orig, cur_proc, slot,\n@@ -450,9 +450,9 @@ fn zeroed_startupinfo() -> libc::types::os::arch::extra::STARTUPINFO {\n         wShowWindow: 0,\n         cbReserved2: 0,\n         lpReserved2: ptr::mut_null(),\n-        hStdInput: libc::INVALID_HANDLE_VALUE as libc::HANDLE,\n-        hStdOutput: libc::INVALID_HANDLE_VALUE as libc::HANDLE,\n-        hStdError: libc::INVALID_HANDLE_VALUE as libc::HANDLE,\n+        hStdInput: libc::INVALID_HANDLE_VALUE,\n+        hStdOutput: libc::INVALID_HANDLE_VALUE,\n+        hStdError: libc::INVALID_HANDLE_VALUE,\n     }\n }\n "}, {"sha": "97518bbf1999587fa027df320b3f454b30e34a12", "filename": "src/libnative/io/util.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57630eb8090f305da41291c481c42bf94b9ccf34/src%2Flibnative%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57630eb8090f305da41291c481c42bf94b9ccf34/src%2Flibnative%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Futil.rs?ref=57630eb8090f305da41291c481c42bf94b9ccf34", "patch": "@@ -52,6 +52,14 @@ pub fn eof() -> IoError {\n     }\n }\n \n+#[cfg(windows)]\n+pub fn ms_to_timeval(ms: u64) -> libc::timeval {\n+    libc::timeval {\n+        tv_sec: (ms / 1000) as libc::c_long,\n+        tv_usec: ((ms % 1000) * 1000) as libc::c_long,\n+    }\n+}\n+#[cfg(not(windows))]\n pub fn ms_to_timeval(ms: u64) -> libc::timeval {\n     libc::timeval {\n         tv_sec: (ms / 1000) as libc::time_t,"}, {"sha": "cb8be9c899757d4c24a97f6cc3393100c34cba5a", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57630eb8090f305da41291c481c42bf94b9ccf34/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57630eb8090f305da41291c481c42bf94b9ccf34/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=57630eb8090f305da41291c481c42bf94b9ccf34", "patch": "@@ -197,7 +197,7 @@ mod imp {\n                                   libc::FILE_ATTRIBUTE_NORMAL,\n                                   ptr::mut_null())\n             };\n-            if handle as uint == libc::INVALID_HANDLE_VALUE as uint {\n+            if handle == libc::INVALID_HANDLE_VALUE {\n                 fail!(\"create file error: {}\", os::last_os_error());\n             }\n             let mut overlapped: libc::OVERLAPPED = unsafe { mem::zeroed() };"}, {"sha": "7335511ed857e42781339027bf7a530b7ddd06bd", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57630eb8090f305da41291c481c42bf94b9ccf34/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57630eb8090f305da41291c481c42bf94b9ccf34/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=57630eb8090f305da41291c481c42bf94b9ccf34", "patch": "@@ -1592,10 +1592,11 @@ mod test {\n         let tmpdir = tmpdir();\n         let path = tmpdir.join(\"a\");\n         check!(File::create(&path));\n-\n-        check!(change_file_times(&path, 1000, 2000));\n-        assert_eq!(check!(path.stat()).accessed, 1000);\n-        assert_eq!(check!(path.stat()).modified, 2000);\n+        // These numbers have to be bigger than the time in the day to account for timezones\n+        // Windows in particular will fail in certain timezones with small enough values\n+        check!(change_file_times(&path, 100000, 200000));\n+        assert_eq!(check!(path.stat()).accessed, 100000);\n+        assert_eq!(check!(path.stat()).modified, 200000);\n     })\n \n     iotest!(fn utime_noexist() {"}]}