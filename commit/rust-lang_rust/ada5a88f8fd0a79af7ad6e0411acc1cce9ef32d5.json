{"sha": "ada5a88f8fd0a79af7ad6e0411acc1cce9ef32d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYTVhODhmOGZkMGE3OWFmN2FkNmUwNDExYWNjMWNjZTllZjMyZDU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-09T23:41:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-09T23:41:43Z"}, "message": "Merge #6512\n\n6512: Don't replace parent node when inserting as first child in algo::diff r=SomeoneToIgnore a=Veykril\n\nThis makes the diff a bit more detailed.\r\n\r\nSee https://github.com/rust-analyzer/rust-analyzer/pull/6287#issuecomment-723889267 for context\r\ncc @SomeoneToIgnore \n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "b64fc865a6b63b4b7342d27df5b43388ac56fa3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b64fc865a6b63b4b7342d27df5b43388ac56fa3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ada5a88f8fd0a79af7ad6e0411acc1cce9ef32d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfqdO4CRBK7hj4Ov3rIwAAdHIIAAhNkelTs55oE3KrxDVB4tlU\nXWoBg4wMkEIOgpMN0BHbOiyA419sfjHJZvZB/n93rKlDzqgj96MP58ywsS4ecO21\n6CJGrY/z+7r07pnABB/U3qPLxPYDoAe8UIPEtN1ntF5ZEcrxOPuRRRhF6cT7MMsK\nDEpdbMdzZ+RdojtbxJZFkQQ0yC/4x1Qf8Af/goHDEuaVTWkivfFxrMYQkf0lxKyx\nAtFStJSqQ7f1DlzxkeuEJQJtP8l3df1Kd3TJtAsdJ8vc/jutsR/17v9cbXUkF9e/\nPrmNEvOVq3t0oBDPmjIUzhbTWUo1syW5kq+cTz62UO2BMPs+8Csa2pcm+RH7LUc=\n=rg9E\n-----END PGP SIGNATURE-----\n", "payload": "tree b64fc865a6b63b4b7342d27df5b43388ac56fa3f\nparent f5f33741dacfa90933b5b088860f91859554c397\nparent a61bb4abb56356ea6f7cc758cb774f552c09b040\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1604965303 +0000\ncommitter GitHub <noreply@github.com> 1604965303 +0000\n\nMerge #6512\n\n6512: Don't replace parent node when inserting as first child in algo::diff r=SomeoneToIgnore a=Veykril\n\nThis makes the diff a bit more detailed.\r\n\r\nSee https://github.com/rust-analyzer/rust-analyzer/pull/6287#issuecomment-723889267 for context\r\ncc @SomeoneToIgnore \n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ada5a88f8fd0a79af7ad6e0411acc1cce9ef32d5", "html_url": "https://github.com/rust-lang/rust/commit/ada5a88f8fd0a79af7ad6e0411acc1cce9ef32d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ada5a88f8fd0a79af7ad6e0411acc1cce9ef32d5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5f33741dacfa90933b5b088860f91859554c397", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f33741dacfa90933b5b088860f91859554c397", "html_url": "https://github.com/rust-lang/rust/commit/f5f33741dacfa90933b5b088860f91859554c397"}, {"sha": "a61bb4abb56356ea6f7cc758cb774f552c09b040", "url": "https://api.github.com/repos/rust-lang/rust/commits/a61bb4abb56356ea6f7cc758cb774f552c09b040", "html_url": "https://github.com/rust-lang/rust/commit/a61bb4abb56356ea6f7cc758cb774f552c09b040"}], "stats": {"total": 125, "additions": 89, "deletions": 36}, "files": [{"sha": "320c430c94ecb9b6f6e6b4384f3a62e03d74bd3f", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 89, "deletions": 36, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/ada5a88f8fd0a79af7ad6e0411acc1cce9ef32d5/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada5a88f8fd0a79af7ad6e0411acc1cce9ef32d5/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=ada5a88f8fd0a79af7ad6e0411acc1cce9ef32d5", "patch": "@@ -111,18 +111,28 @@ pub enum InsertPosition<T> {\n \n type FxIndexMap<K, V> = IndexMap<K, V, BuildHasherDefault<rustc_hash::FxHasher>>;\n \n+#[derive(Debug, Hash, PartialEq, Eq)]\n+enum TreeDiffInsertPos {\n+    After(SyntaxElement),\n+    AsFirstChild(SyntaxElement),\n+}\n+\n #[derive(Debug)]\n pub struct TreeDiff {\n     replacements: FxHashMap<SyntaxElement, SyntaxElement>,\n     deletions: Vec<SyntaxElement>,\n     // the vec as well as the indexmap are both here to preserve order\n-    insertions: FxIndexMap<SyntaxElement, Vec<SyntaxElement>>,\n+    insertions: FxIndexMap<TreeDiffInsertPos, Vec<SyntaxElement>>,\n }\n \n impl TreeDiff {\n     pub fn into_text_edit(&self, builder: &mut TextEditBuilder) {\n         for (anchor, to) in self.insertions.iter() {\n-            to.iter().for_each(|to| builder.insert(anchor.text_range().end(), to.to_string()));\n+            let offset = match anchor {\n+                TreeDiffInsertPos::After(it) => it.text_range().end(),\n+                TreeDiffInsertPos::AsFirstChild(it) => it.text_range().start(),\n+            };\n+            to.iter().for_each(|to| builder.insert(offset, to.to_string()));\n         }\n         for (from, to) in self.replacements.iter() {\n             builder.replace(from.text_range(), to.to_string())\n@@ -188,19 +198,20 @@ pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n             let lhs_child = lhs_children.next();\n             match (lhs_child.clone(), rhs_children.next()) {\n                 (None, None) => break,\n-                (None, Some(element)) => match last_lhs.clone() {\n-                    Some(prev) => {\n-                        mark::hit!(diff_insert);\n-                        diff.insertions.entry(prev).or_insert_with(Vec::new).push(element);\n-                    }\n-                    // first iteration, this means we got no anchor element to insert after\n-                    // therefor replace the parent node instead\n-                    None => {\n-                        mark::hit!(diff_replace_parent);\n-                        diff.replacements.insert(lhs.clone().into(), rhs.clone().into());\n-                        break;\n-                    }\n-                },\n+                (None, Some(element)) => {\n+                    let insert_pos = match last_lhs.clone() {\n+                        Some(prev) => {\n+                            mark::hit!(diff_insert);\n+                            TreeDiffInsertPos::After(prev)\n+                        }\n+                        // first iteration, insert into out parent as the first child\n+                        None => {\n+                            mark::hit!(diff_insert_as_first_child);\n+                            TreeDiffInsertPos::AsFirstChild(lhs.clone().into())\n+                        }\n+                    };\n+                    diff.insertions.entry(insert_pos).or_insert_with(Vec::new).push(element);\n+                }\n                 (Some(element), None) => {\n                     mark::hit!(diff_delete);\n                     diff.deletions.push(element);\n@@ -224,8 +235,15 @@ pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n                         }\n                     }\n                     let drain = look_ahead_scratch.drain(..);\n-                    if let Some(prev) = last_lhs.clone().filter(|_| insert) {\n-                        diff.insertions.entry(prev).or_insert_with(Vec::new).extend(drain);\n+                    if insert {\n+                        let insert_pos = if let Some(prev) = last_lhs.clone().filter(|_| insert) {\n+                            TreeDiffInsertPos::After(prev)\n+                        } else {\n+                            mark::hit!(insert_first_child);\n+                            TreeDiffInsertPos::AsFirstChild(lhs.clone().into())\n+                        };\n+\n+                        diff.insertions.entry(insert_pos).or_insert_with(Vec::new).extend(drain);\n                         rhs_children = rhs_children_clone;\n                     } else {\n                         go(diff, lhs_ele, rhs_ele)\n@@ -632,18 +650,19 @@ mod tests {\n \n     #[test]\n     fn replace_parent() {\n-        mark::check!(diff_replace_parent);\n+        mark::check!(diff_insert_as_first_child);\n         check_diff(\n             r#\"\"#,\n             r#\"use foo::bar;\"#,\n             expect![[r#\"\n                 insertions:\n \n-\n+                Line 0: AsFirstChild(Node(SOURCE_FILE@0..0))\n+                -> use foo::bar;\n \n                 replacements:\n \n-                Line 0: Node(SOURCE_FILE@0..0) -> use foo::bar;\n+\n \n                 deletions:\n \n@@ -666,7 +685,7 @@ use baz;\"#,\n             expect![[r#\"\n                 insertions:\n \n-                Line 2: Node(USE@10..18)\n+                Line 2: After(Node(USE@10..18))\n                 -> \"\\n\"\n                 -> use baz;\n \n@@ -694,7 +713,7 @@ use baz;\"#,\n             expect![[r#\"\n                 insertions:\n \n-                Line 2: Token(WHITESPACE@9..10 \"\\n\")\n+                Line 2: After(Token(WHITESPACE@9..10 \"\\n\"))\n                 -> use bar;\n                 -> \"\\n\"\n \n@@ -722,7 +741,7 @@ use baz;\"#,\n             expect![[r#\"\n                 insertions:\n \n-                Line 0: Token(WHITESPACE@0..1 \"\\n\")\n+                Line 0: After(Token(WHITESPACE@0..1 \"\\n\"))\n                 -> use foo;\n                 -> \"\\n\"\n \n@@ -737,6 +756,36 @@ use baz;\"#,\n         )\n     }\n \n+    #[test]\n+    fn first_child_insertion() {\n+        mark::check!(insert_first_child);\n+        check_diff(\n+            r#\"fn main() {\n+        stdi\n+    }\"#,\n+            r#\"use foo::bar;\n+\n+    fn main() {\n+        stdi\n+    }\"#,\n+            expect![[r#\"\n+                insertions:\n+\n+                Line 0: AsFirstChild(Node(SOURCE_FILE@0..30))\n+                -> use foo::bar;\n+                -> \"\\n\\n    \"\n+\n+                replacements:\n+\n+\n+\n+                deletions:\n+\n+\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn delete_last() {\n         mark::check!(diff_delete);\n@@ -779,7 +828,7 @@ use crate::AstNode;\n             expect![[r#\"\n                 insertions:\n \n-                Line 1: Node(USE@1..35)\n+                Line 1: After(Node(USE@1..35))\n                 -> \"\\n\\n\"\n                 -> use crate::AstNode;\n \n@@ -845,10 +894,10 @@ use std::ops::{self, RangeInclusive};\n             expect![[r#\"\n                 insertions:\n \n-                Line 2: Node(PATH_SEGMENT@5..8)\n+                Line 2: After(Node(PATH_SEGMENT@5..8))\n                 -> ::\n                 -> fmt\n-                Line 6: Token(WHITESPACE@86..87 \"\\n\")\n+                Line 6: After(Token(WHITESPACE@86..87 \"\\n\"))\n                 -> use std::hash::BuildHasherDefault;\n                 -> \"\\n\"\n                 -> use std::ops::{self, RangeInclusive};\n@@ -892,14 +941,14 @@ fn main() {\n             expect![[r#\"\n                 insertions:\n \n-                Line 3: Node(BLOCK_EXPR@40..63)\n+                Line 3: After(Node(BLOCK_EXPR@40..63))\n                 -> \" \"\n                 -> match Err(92) {\n                         Ok(it) => it,\n                         _ => return,\n                     }\n                 -> ;\n-                Line 3: Node(IF_EXPR@17..63)\n+                Line 3: After(Node(IF_EXPR@17..63))\n                 -> \"\\n    \"\n                 -> foo(x);\n \n@@ -934,14 +983,18 @@ fn main() {\n             _ => format!(\"{}\", syn),\n         };\n \n-        let insertions = diff.insertions.iter().format_with(\"\\n\", |(k, v), f| {\n-            f(&format!(\n-                \"Line {}: {:?}\\n-> {}\",\n-                line_number(k),\n-                k,\n-                v.iter().format_with(\"\\n-> \", |v, f| f(&fmt_syntax(v)))\n-            ))\n-        });\n+        let insertions =\n+            diff.insertions.iter().format_with(\"\\n\", |(k, v), f| -> Result<(), std::fmt::Error> {\n+                f(&format!(\n+                    \"Line {}: {:?}\\n-> {}\",\n+                    line_number(match k {\n+                        super::TreeDiffInsertPos::After(syn) => syn,\n+                        super::TreeDiffInsertPos::AsFirstChild(syn) => syn,\n+                    }),\n+                    k,\n+                    v.iter().format_with(\"\\n-> \", |v, f| f(&fmt_syntax(v)))\n+                ))\n+            });\n \n         let replacements = diff\n             .replacements"}]}