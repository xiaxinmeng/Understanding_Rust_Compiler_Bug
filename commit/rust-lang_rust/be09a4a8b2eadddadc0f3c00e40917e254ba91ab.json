{"sha": "be09a4a8b2eadddadc0f3c00e40917e254ba91ab", "node_id": "C_kwDOAAsO6NoAKGJlMDlhNGE4YjJlYWRkZGFkYzBmM2MwMGU0MDkxN2UyNTRiYTkxYWI", "commit": {"author": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-08-15T12:33:12Z"}, "committer": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-09-19T21:27:26Z"}, "message": "std: use `sync::RwLock` for internal statics", "tree": {"sha": "deccfa130892af2d5c1032767b0d40035c010b52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deccfa130892af2d5c1032767b0d40035c010b52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be09a4a8b2eadddadc0f3c00e40917e254ba91ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAmMo3sIACgkQcE4BSbAZ\nSzwTpw//Y43t6zTiAowH7LK3ggihcaAEF9M80Cpadon5oAqs+Id11UKe4aRT/LgL\n7RPHptXBUzTlOiIywC4Nl1uOPv9D4o59XrfblXRsebdU3wMYXe5NvyKYbuA7/4ZL\nmjb6NJvpWSqDrGYDxF9UcRMQLxakBf3wVMNwIIi/EiGP+r98KsROob8pk+N5liGs\n4nyDiRJyYSAaeXBWgCw2orzs0XY3FJUgBwoJR2L4ywBlDPgyTLj9SAvrQ98ETcgN\ndNrUlyqrm9XSM3hZK7z9VLLCO7spOSa6ZZBl1DJ+65kfbLq/6i4A1j8lDatcn2wg\nMarqVhcIQlXLVamh+q3YFXopCIx300JfJ9CVd44QmkFJcIKJebvma5PB71E/fiQE\n93VEB3hugkJ6/00i6ZeXhJd42+FMdszi2GJ11Axsp3AaP6cDEoPQ5EmmofFOY6Yr\nLnCsUCSEvm67pH0TCDdhb1bB3Wg3gZy02wBM9i5sJSJg7324eZQua6yh3Uxz0wCB\nAApB5T3fO7F0+OyDeVs9ugjkXp36ep+oHmrhkJplVW+VEppSJ697KZcrzhHSoIqS\nEPGKiQLHaxU6mBZltjm/JsFq0qY7mGjbQXoZ3CHLGVfdX0M2NB7z9kwhHMyEhWL7\nDUNghQIcIe/twXS9jugT8J+3FsQymN/Y6S0L22cMYhQyu2S3HmI=\n=zBVv\n-----END PGP SIGNATURE-----", "payload": "tree deccfa130892af2d5c1032767b0d40035c010b52\nparent 75b7e52e92c3b00fc891b47f5b2efdff0a2be55a\nauthor joboet <jonasboettiger@icloud.com> 1660566792 +0200\ncommitter joboet <jonasboettiger@icloud.com> 1663622846 +0200\n\nstd: use `sync::RwLock` for internal statics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be09a4a8b2eadddadc0f3c00e40917e254ba91ab", "html_url": "https://github.com/rust-lang/rust/commit/be09a4a8b2eadddadc0f3c00e40917e254ba91ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be09a4a8b2eadddadc0f3c00e40917e254ba91ab/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b7e52e92c3b00fc891b47f5b2efdff0a2be55a", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b7e52e92c3b00fc891b47f5b2efdff0a2be55a", "html_url": "https://github.com/rust-lang/rust/commit/75b7e52e92c3b00fc891b47f5b2efdff0a2be55a"}], "stats": {"total": 213, "additions": 62, "deletions": 151}, "files": [{"sha": "38dcf6cbf7db74c992650beabc1661b0cdadf6c6", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 50, "deletions": 79, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/be09a4a8b2eadddadc0f3c00e40917e254ba91ab/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be09a4a8b2eadddadc0f3c00e40917e254ba91ab/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=be09a4a8b2eadddadc0f3c00e40917e254ba91ab", "patch": "@@ -18,9 +18,9 @@ use crate::intrinsics;\n use crate::mem::{self, ManuallyDrop};\n use crate::process;\n use crate::sync::atomic::{AtomicBool, Ordering};\n+use crate::sync::{PoisonError, RwLock};\n use crate::sys::stdio::panic_output;\n use crate::sys_common::backtrace;\n-use crate::sys_common::rwlock::StaticRwLock;\n use crate::sys_common::thread_info;\n use crate::thread;\n \n@@ -71,20 +71,29 @@ extern \"C\" fn __rust_foreign_exception() -> ! {\n     rtabort!(\"Rust cannot catch foreign exceptions\");\n }\n \n-#[derive(Copy, Clone)]\n enum Hook {\n     Default,\n-    Custom(*mut (dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send)),\n+    Custom(Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>),\n }\n \n impl Hook {\n-    fn custom(f: impl Fn(&PanicInfo<'_>) + 'static + Sync + Send) -> Self {\n-        Self::Custom(Box::into_raw(Box::new(f)))\n+    #[inline]\n+    fn into_box(self) -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send> {\n+        match self {\n+            Hook::Default => Box::new(default_hook),\n+            Hook::Custom(hook) => hook,\n+        }\n     }\n }\n \n-static HOOK_LOCK: StaticRwLock = StaticRwLock::new();\n-static mut HOOK: Hook = Hook::Default;\n+impl Default for Hook {\n+    #[inline]\n+    fn default() -> Hook {\n+        Hook::Default\n+    }\n+}\n+\n+static HOOK: RwLock<Hook> = RwLock::new(Hook::Default);\n \n /// Registers a custom panic hook, replacing any that was previously registered.\n ///\n@@ -125,24 +134,13 @@ pub fn set_hook(hook: Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>) {\n         panic!(\"cannot modify the panic hook from a panicking thread\");\n     }\n \n-    // SAFETY:\n-    //\n-    // - `HOOK` can only be modified while holding write access to `HOOK_LOCK`.\n-    // - The argument of `Box::from_raw` is always a valid pointer that was created using\n-    // `Box::into_raw`.\n-    unsafe {\n-        let guard = HOOK_LOCK.write();\n-        let old_hook = HOOK;\n-        HOOK = Hook::Custom(Box::into_raw(hook));\n-        drop(guard);\n-\n-        if let Hook::Custom(ptr) = old_hook {\n-            #[allow(unused_must_use)]\n-            {\n-                Box::from_raw(ptr);\n-            }\n-        }\n-    }\n+    let new = Hook::Custom(hook);\n+    let mut hook = HOOK.write().unwrap_or_else(PoisonError::into_inner);\n+    let old = mem::replace(&mut *hook, new);\n+    drop(hook);\n+    // Only drop the old hook after releasing the lock to avoid deadlocking\n+    // if its destructor panics.\n+    drop(old);\n }\n \n /// Unregisters the current panic hook, returning it.\n@@ -179,22 +177,11 @@ pub fn take_hook() -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send> {\n         panic!(\"cannot modify the panic hook from a panicking thread\");\n     }\n \n-    // SAFETY:\n-    //\n-    // - `HOOK` can only be modified while holding write access to `HOOK_LOCK`.\n-    // - The argument of `Box::from_raw` is always a valid pointer that was created using\n-    // `Box::into_raw`.\n-    unsafe {\n-        let guard = HOOK_LOCK.write();\n-        let hook = HOOK;\n-        HOOK = Hook::Default;\n-        drop(guard);\n+    let mut hook = HOOK.write().unwrap_or_else(PoisonError::into_inner);\n+    let old_hook = mem::take(&mut *hook);\n+    drop(hook);\n \n-        match hook {\n-            Hook::Default => Box::new(default_hook),\n-            Hook::Custom(ptr) => Box::from_raw(ptr),\n-        }\n-    }\n+    old_hook.into_box()\n }\n \n /// Atomic combination of [`take_hook`] and [`set_hook`]. Use this to replace the panic handler with\n@@ -240,24 +227,9 @@ where\n         panic!(\"cannot modify the panic hook from a panicking thread\");\n     }\n \n-    // SAFETY:\n-    //\n-    // - `HOOK` can only be modified while holding write access to `HOOK_LOCK`.\n-    // - The argument of `Box::from_raw` is always a valid pointer that was created using\n-    // `Box::into_raw`.\n-    unsafe {\n-        let guard = HOOK_LOCK.write();\n-        let old_hook = HOOK;\n-        HOOK = Hook::Default;\n-\n-        let prev = match old_hook {\n-            Hook::Default => Box::new(default_hook),\n-            Hook::Custom(ptr) => Box::from_raw(ptr),\n-        };\n-\n-        HOOK = Hook::custom(move |info| hook_fn(&prev, info));\n-        drop(guard);\n-    }\n+    let mut hook = HOOK.write().unwrap_or_else(PoisonError::into_inner);\n+    let prev = mem::take(&mut *hook).into_box();\n+    *hook = Hook::Custom(Box::new(move |info| hook_fn(&prev, info)));\n }\n \n fn default_hook(info: &PanicInfo<'_>) {\n@@ -682,27 +654,26 @@ fn rust_panic_with_hook(\n         crate::sys::abort_internal();\n     }\n \n-    unsafe {\n-        let mut info = PanicInfo::internal_constructor(message, location, can_unwind);\n-        let _guard = HOOK_LOCK.read();\n-        match HOOK {\n-            // Some platforms (like wasm) know that printing to stderr won't ever actually\n-            // print anything, and if that's the case we can skip the default\n-            // hook. Since string formatting happens lazily when calling `payload`\n-            // methods, this means we avoid formatting the string at all!\n-            // (The panic runtime might still call `payload.take_box()` though and trigger\n-            // formatting.)\n-            Hook::Default if panic_output().is_none() => {}\n-            Hook::Default => {\n-                info.set_payload(payload.get());\n-                default_hook(&info);\n-            }\n-            Hook::Custom(ptr) => {\n-                info.set_payload(payload.get());\n-                (*ptr)(&info);\n-            }\n-        };\n-    }\n+    let mut info = PanicInfo::internal_constructor(message, location, can_unwind);\n+    let hook = HOOK.read().unwrap_or_else(PoisonError::into_inner);\n+    match *hook {\n+        // Some platforms (like wasm) know that printing to stderr won't ever actually\n+        // print anything, and if that's the case we can skip the default\n+        // hook. Since string formatting happens lazily when calling `payload`\n+        // methods, this means we avoid formatting the string at all!\n+        // (The panic runtime might still call `payload.take_box()` though and trigger\n+        // formatting.)\n+        Hook::Default if panic_output().is_none() => {}\n+        Hook::Default => {\n+            info.set_payload(payload.get());\n+            default_hook(&info);\n+        }\n+        Hook::Custom(ref hook) => {\n+            info.set_payload(payload.get());\n+            hook(&info);\n+        }\n+    };\n+    drop(hook);\n \n     if panics > 1 || !can_unwind {\n         // If a thread panics while it's already unwinding then we"}, {"sha": "eecb347e599efff7095ab8dd133cc27aa137384a", "filename": "library/std/src/sys/solid/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be09a4a8b2eadddadc0f3c00e40917e254ba91ab/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be09a4a8b2eadddadc0f3c00e40917e254ba91ab/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs?ref=be09a4a8b2eadddadc0f3c00e40917e254ba91ab", "patch": "@@ -8,7 +8,7 @@ use crate::os::{\n     solid::ffi::{OsStrExt, OsStringExt},\n };\n use crate::path::{self, PathBuf};\n-use crate::sys_common::rwlock::StaticRwLock;\n+use crate::sync::RwLock;\n use crate::vec;\n \n use super::{error, itron, memchr};\n@@ -78,7 +78,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     unsupported()\n }\n \n-static ENV_LOCK: StaticRwLock = StaticRwLock::new();\n+static ENV_LOCK: RwLock<()> = RwLock::new(());\n \n pub struct Env {\n     iter: vec::IntoIter<(OsString, OsString)>,"}, {"sha": "9bb314b7010a572686bd3a0e116356f39cd57e6b", "filename": "library/std/src/sys/unix/locks/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be09a4a8b2eadddadc0f3c00e40917e254ba91ab/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be09a4a8b2eadddadc0f3c00e40917e254ba91ab/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs?ref=be09a4a8b2eadddadc0f3c00e40917e254ba91ab", "patch": "@@ -11,21 +11,21 @@ cfg_if::cfg_if! {\n         mod futex_rwlock;\n         mod futex_condvar;\n         pub(crate) use futex_mutex::{Mutex, MovableMutex};\n-        pub(crate) use futex_rwlock::{RwLock, MovableRwLock};\n+        pub(crate) use futex_rwlock::MovableRwLock;\n         pub(crate) use futex_condvar::MovableCondvar;\n     } else if #[cfg(target_os = \"fuchsia\")] {\n         mod fuchsia_mutex;\n         mod futex_rwlock;\n         mod futex_condvar;\n         pub(crate) use fuchsia_mutex::{Mutex, MovableMutex};\n-        pub(crate) use futex_rwlock::{RwLock, MovableRwLock};\n+        pub(crate) use futex_rwlock::MovableRwLock;\n         pub(crate) use futex_condvar::MovableCondvar;\n     } else {\n         mod pthread_mutex;\n         mod pthread_rwlock;\n         mod pthread_condvar;\n         pub(crate) use pthread_mutex::{Mutex, MovableMutex};\n-        pub(crate) use pthread_rwlock::{RwLock, MovableRwLock};\n+        pub(crate) use pthread_rwlock::MovableRwLock;\n         pub(crate) use pthread_condvar::MovableCondvar;\n     }\n }"}, {"sha": "3c3770708b149b210588a3e1a8c3fba3833185ec", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be09a4a8b2eadddadc0f3c00e40917e254ba91ab/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be09a4a8b2eadddadc0f3c00e40917e254ba91ab/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=be09a4a8b2eadddadc0f3c00e40917e254ba91ab", "patch": "@@ -17,10 +17,10 @@ use crate::path::{self, PathBuf};\n use crate::ptr;\n use crate::slice;\n use crate::str;\n+use crate::sync::{PoisonError, RwLock};\n use crate::sys::cvt;\n use crate::sys::fd;\n use crate::sys::memchr;\n-use crate::sys_common::rwlock::{StaticRwLock, StaticRwLockReadGuard};\n use crate::vec;\n \n #[cfg(all(target_env = \"gnu\", not(target_os = \"vxworks\")))]\n@@ -501,10 +501,10 @@ pub unsafe fn environ() -> *mut *const *const c_char {\n     ptr::addr_of_mut!(environ)\n }\n \n-static ENV_LOCK: StaticRwLock = StaticRwLock::new();\n+static ENV_LOCK: RwLock<()> = RwLock::new(());\n \n-pub fn env_read_lock() -> StaticRwLockReadGuard {\n-    ENV_LOCK.read()\n+pub fn env_read_lock() -> impl Drop {\n+    ENV_LOCK.read().unwrap_or_else(PoisonError::into_inner)\n }\n \n /// Returns a vector of (variable, value) byte-vector pairs for all the"}, {"sha": "602a2d6231a292befbfe7559874ce3e07e4f28b7", "filename": "library/std/src/sys/unsupported/locks/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be09a4a8b2eadddadc0f3c00e40917e254ba91ab/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be09a4a8b2eadddadc0f3c00e40917e254ba91ab/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fmod.rs?ref=be09a4a8b2eadddadc0f3c00e40917e254ba91ab", "patch": "@@ -3,4 +3,4 @@ mod mutex;\n mod rwlock;\n pub use condvar::{Condvar, MovableCondvar};\n pub use mutex::{MovableMutex, Mutex};\n-pub use rwlock::{MovableRwLock, RwLock};\n+pub use rwlock::MovableRwLock;"}, {"sha": "93838390bee6e673411518befb232ed76138f103", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be09a4a8b2eadddadc0f3c00e40917e254ba91ab/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be09a4a8b2eadddadc0f3c00e40917e254ba91ab/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=be09a4a8b2eadddadc0f3c00e40917e254ba91ab", "patch": "@@ -57,7 +57,7 @@ cfg_if::cfg_if! {\n             mod futex_rwlock;\n             pub(crate) use futex_condvar::{Condvar, MovableCondvar};\n             pub(crate) use futex_mutex::{Mutex, MovableMutex};\n-            pub(crate) use futex_rwlock::{RwLock, MovableRwLock};\n+            pub(crate) use futex_rwlock::MovableRwLock;\n         }\n         #[path = \"atomics/futex.rs\"]\n         pub mod futex;"}, {"sha": "602a2d6231a292befbfe7559874ce3e07e4f28b7", "filename": "library/std/src/sys/windows/locks/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be09a4a8b2eadddadc0f3c00e40917e254ba91ab/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be09a4a8b2eadddadc0f3c00e40917e254ba91ab/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fmod.rs?ref=be09a4a8b2eadddadc0f3c00e40917e254ba91ab", "patch": "@@ -3,4 +3,4 @@ mod mutex;\n mod rwlock;\n pub use condvar::{Condvar, MovableCondvar};\n pub use mutex::{MovableMutex, Mutex};\n-pub use rwlock::{MovableRwLock, RwLock};\n+pub use rwlock::MovableRwLock;"}, {"sha": "36d721fcbcbf52c913a00869da83fb53e7b3b977", "filename": "library/std/src/sys_common/rwlock.rs", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/be09a4a8b2eadddadc0f3c00e40917e254ba91ab/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be09a4a8b2eadddadc0f3c00e40917e254ba91ab/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs?ref=be09a4a8b2eadddadc0f3c00e40917e254ba91ab", "patch": "@@ -1,65 +1,5 @@\n use crate::sys::locks as imp;\n \n-/// An OS-based reader-writer lock, meant for use in static variables.\n-///\n-/// This rwlock does not implement poisoning.\n-///\n-/// This rwlock has a const constructor ([`StaticRwLock::new`]), does not\n-/// implement `Drop` to cleanup resources.\n-pub struct StaticRwLock(imp::RwLock);\n-\n-impl StaticRwLock {\n-    /// Creates a new rwlock for use.\n-    #[inline]\n-    pub const fn new() -> Self {\n-        Self(imp::RwLock::new())\n-    }\n-\n-    /// Acquires shared access to the underlying lock, blocking the current\n-    /// thread to do so.\n-    ///\n-    /// The lock is automatically unlocked when the returned guard is dropped.\n-    #[inline]\n-    pub fn read(&'static self) -> StaticRwLockReadGuard {\n-        unsafe { self.0.read() };\n-        StaticRwLockReadGuard(&self.0)\n-    }\n-\n-    /// Acquires write access to the underlying lock, blocking the current thread\n-    /// to do so.\n-    ///\n-    /// The lock is automatically unlocked when the returned guard is dropped.\n-    #[inline]\n-    pub fn write(&'static self) -> StaticRwLockWriteGuard {\n-        unsafe { self.0.write() };\n-        StaticRwLockWriteGuard(&self.0)\n-    }\n-}\n-\n-#[must_use]\n-pub struct StaticRwLockReadGuard(&'static imp::RwLock);\n-\n-impl Drop for StaticRwLockReadGuard {\n-    #[inline]\n-    fn drop(&mut self) {\n-        unsafe {\n-            self.0.read_unlock();\n-        }\n-    }\n-}\n-\n-#[must_use]\n-pub struct StaticRwLockWriteGuard(&'static imp::RwLock);\n-\n-impl Drop for StaticRwLockWriteGuard {\n-    #[inline]\n-    fn drop(&mut self) {\n-        unsafe {\n-            self.0.write_unlock();\n-        }\n-    }\n-}\n-\n /// An OS-based reader-writer lock.\n ///\n /// This rwlock cleans up its resources in its `Drop` implementation and may"}]}