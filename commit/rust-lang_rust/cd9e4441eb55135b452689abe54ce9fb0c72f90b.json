{"sha": "cd9e4441eb55135b452689abe54ce9fb0c72f90b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkOWU0NDQxZWI1NTEzNWI0NTI2ODlhYmU1NGNlOWZiMGM3MmY5MGI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-18T00:14:57Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-18T00:14:57Z"}, "message": "rustc: arena-allocate the slice in `ty::GenericsPredicate`, not the whole struct.", "tree": {"sha": "48dd9c59d021ada8a73bdf9db71c4eb9aec14fe3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48dd9c59d021ada8a73bdf9db71c4eb9aec14fe3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd9e4441eb55135b452689abe54ce9fb0c72f90b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd9e4441eb55135b452689abe54ce9fb0c72f90b", "html_url": "https://github.com/rust-lang/rust/commit/cd9e4441eb55135b452689abe54ce9fb0c72f90b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd9e4441eb55135b452689abe54ce9fb0c72f90b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b04338087eed5f26c72bdb0e426dc38e215e2dbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b04338087eed5f26c72bdb0e426dc38e215e2dbb", "html_url": "https://github.com/rust-lang/rust/commit/b04338087eed5f26c72bdb0e426dc38e215e2dbb"}], "stats": {"total": 258, "additions": 120, "deletions": 138}, "files": [{"sha": "3daf0fc9df7a06606cd090f84ca7d1d29cdcbaf9", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -98,7 +98,6 @@ macro_rules! arena_types {\n                 rustc::hir::def_id::DefId,\n             >,\n             [few] resolve_lifetimes: rustc::middle::resolve_lifetime::ResolveLifetimes,\n-            [decode] generic_predicates: rustc::ty::GenericPredicates<'tcx>,\n             [few] lint_levels: rustc::lint::LintLevelMap,\n             [few] stability_index: rustc::middle::stability::Index<'tcx>,\n             [few] features: syntax::feature_gate::Features,"}, {"sha": "2c407a24493ffc956560b0287ab0dc8e88743bc6", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -61,7 +61,7 @@ rustc_queries! {\n         /// predicate gets in the way of some checks, which are intended\n         /// to operate over only the actual where-clauses written by the\n         /// user.)\n-        query predicates_of(key: DefId) -> &'tcx ty::GenericPredicates<'tcx> {\n+        query predicates_of(key: DefId) -> ty::GenericPredicates<'tcx> {\n             cache_on_disk_if { key.is_local() }\n         }\n \n@@ -184,12 +184,10 @@ rustc_queries! {\n         /// predicates (where-clauses) directly defined on it. This is\n         /// equal to the `explicit_predicates_of` predicates plus the\n         /// `inferred_outlives_of` predicates.\n-        query predicates_defined_on(_: DefId)\n-            -> &'tcx ty::GenericPredicates<'tcx> {}\n+        query predicates_defined_on(_: DefId) -> ty::GenericPredicates<'tcx> {}\n \n         /// Returns the predicates written explicitly by the user.\n-        query explicit_predicates_of(_: DefId)\n-            -> &'tcx ty::GenericPredicates<'tcx> {}\n+        query explicit_predicates_of(_: DefId) -> ty::GenericPredicates<'tcx> {}\n \n         /// Returns the inferred outlives predicates (e.g., for `struct\n         /// Foo<'a, T> { x: &'a T }`, this would return `T: 'a`).\n@@ -201,14 +199,13 @@ rustc_queries! {\n         /// evaluate them even during type conversion, often before the\n         /// full predicates are available (note that supertraits have\n         /// additional acyclicity requirements).\n-        query super_predicates_of(key: DefId) -> &'tcx ty::GenericPredicates<'tcx> {\n+        query super_predicates_of(key: DefId) -> ty::GenericPredicates<'tcx> {\n             desc { |tcx| \"computing the supertraits of `{}`\", tcx.def_path_str(key) }\n         }\n \n         /// To avoid cycles within the predicates of a single item we compute\n         /// per-type-parameter predicates for resolving `T::AssocTy`.\n-        query type_param_predicates(key: (DefId, DefId))\n-            -> &'tcx ty::GenericPredicates<'tcx> {\n+        query type_param_predicates(key: (DefId, DefId)) -> ty::GenericPredicates<'tcx> {\n             no_force\n             desc { |tcx| \"computing the bounds for type parameter `{}`\", {\n                 let id = tcx.hir().as_local_hir_id(key.1).unwrap();"}, {"sha": "c1c6eb850f591158a4a53fd63a053f7fc73b3261", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -419,7 +419,7 @@ fn to_pretty_impl_header(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Option<String>\n \n     // The predicates will contain default bounds like `T: Sized`. We need to\n     // remove these bounds, and add `T: ?Sized` to any untouched type parameters.\n-    let predicates = &tcx.predicates_of(impl_def_id).predicates;\n+    let predicates = tcx.predicates_of(impl_def_id).predicates;\n     let mut pretty_predicates = Vec::with_capacity(\n         predicates.len() + types_without_default_bounds.len());\n "}, {"sha": "03cb4775bd83f9958fb851128773e1b10261bced", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -16,6 +16,7 @@ use std::intrinsics;\n use crate::ty::{self, Ty, TyCtxt};\n use crate::ty::subst::SubstsRef;\n use crate::mir::interpret::Allocation;\n+use syntax_pos::Span;\n \n /// The shorthand encoding uses an enum's variant index `usize`\n /// and is offset by this value so it never matches a real variant.\n@@ -92,16 +93,16 @@ pub fn encode_with_shorthand<E, T, M>(encoder: &mut E,\n     Ok(())\n }\n \n-pub fn encode_predicates<'tcx, E, C>(encoder: &mut E,\n-                                     predicates: &ty::GenericPredicates<'tcx>,\n-                                     cache: C)\n-                                     -> Result<(), E::Error>\n+pub fn encode_spanned_predicates<'tcx, E, C>(\n+    encoder: &mut E,\n+    predicates: &'tcx [(ty::Predicate<'tcx>, Span)],\n+    cache: C,\n+) -> Result<(), E::Error>\n     where E: TyEncoder,\n           C: for<'b> Fn(&'b mut E) -> &'b mut FxHashMap<ty::Predicate<'tcx>, usize>,\n {\n-    predicates.parent.encode(encoder)?;\n-    predicates.predicates.len().encode(encoder)?;\n-    for (predicate, span) in &predicates.predicates {\n+    predicates.len().encode(encoder)?;\n+    for (predicate, span) in predicates {\n         encode_with_shorthand(encoder, predicate, &cache)?;\n         span.encode(encoder)?;\n     }\n@@ -182,13 +183,15 @@ where\n }\n \n #[inline]\n-pub fn decode_predicates<D>(decoder: &mut D) -> Result<ty::GenericPredicates<'tcx>, D::Error>\n+pub fn decode_spanned_predicates<D>(\n+    decoder: &mut D,\n+) -> Result<&'tcx [(ty::Predicate<'tcx>, Span)], D::Error>\n where\n     D: TyDecoder<'tcx>,\n {\n-    Ok(ty::GenericPredicates {\n-        parent: Decodable::decode(decoder)?,\n-        predicates: (0..decoder.read_usize()?).map(|_| {\n+    let tcx = decoder.tcx();\n+    Ok(tcx.arena.alloc_from_iter(\n+        (0..decoder.read_usize()?).map(|_| {\n             // Handle shorthands first, if we have an usize > 0x80.\n             let predicate = if decoder.positioned_at_shorthand() {\n                 let pos = decoder.read_usize()?;\n@@ -202,7 +205,7 @@ where\n             Ok((predicate, Decodable::decode(decoder)?))\n         })\n         .collect::<Result<Vec<_>, _>>()?,\n-    })\n+    ))\n }\n \n #[inline]\n@@ -339,6 +342,8 @@ macro_rules! implement_ty_decoder {\n             use $crate::ty::subst::SubstsRef;\n             use $crate::hir::def_id::{CrateNum};\n \n+            use syntax_pos::Span;\n+\n             use super::$DecoderName;\n \n             impl<$($typaram ),*> Decoder for $DecoderName<$($typaram),*> {\n@@ -393,11 +398,11 @@ macro_rules! implement_ty_decoder {\n                 }\n             }\n \n-            impl<$($typaram),*> SpecializedDecoder<ty::GenericPredicates<'tcx>>\n+            impl<$($typaram),*> SpecializedDecoder<&'tcx [(ty::Predicate<'tcx>, Span)]>\n             for $DecoderName<$($typaram),*> {\n                 fn specialized_decode(&mut self)\n-                                      -> Result<ty::GenericPredicates<'tcx>, Self::Error> {\n-                    decode_predicates(self)\n+                                      -> Result<&'tcx [(ty::Predicate<'tcx>, Span)], Self::Error> {\n+                    decode_spanned_predicates(self)\n                 }\n             }\n "}, {"sha": "665d4c2d0696ababaf3fe164ee24ce21d534a088", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -148,10 +148,6 @@ impl<'tcx> CtxtInterners<'tcx> {\n     }\n }\n \n-pub struct Common<'tcx> {\n-    pub empty_predicates: ty::GenericPredicates<'tcx>,\n-}\n-\n pub struct CommonTypes<'tcx> {\n     pub unit: Ty<'tcx>,\n     pub bool: Ty<'tcx>,\n@@ -1039,9 +1035,6 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub prof: SelfProfilerRef,\n \n-    /// Common objects.\n-    pub common: Common<'tcx>,\n-\n     /// Common types, pre-interned for your convenience.\n     pub types: CommonTypes<'tcx>,\n \n@@ -1213,12 +1206,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             s.fatal(&err);\n         });\n         let interners = CtxtInterners::new(&arenas.interner);\n-        let common = Common {\n-            empty_predicates: ty::GenericPredicates {\n-                parent: None,\n-                predicates: vec![],\n-            },\n-        };\n         let common_types = CommonTypes::new(&interners);\n         let common_lifetimes = CommonLifetimes::new(&interners);\n         let common_consts = CommonConsts::new(&interners, &common_types);\n@@ -1273,7 +1260,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             interners,\n             dep_graph,\n             prof: s.prof.clone(),\n-            common,\n             types: common_types,\n             lifetimes: common_lifetimes,\n             consts: common_consts,"}, {"sha": "14f0c3284fcb7ed95d9cad8cad8fbccdbe86976b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -1018,15 +1018,12 @@ impl<'tcx> Generics {\n }\n \n /// Bounds on generics.\n-#[derive(Clone, Default, Debug, HashStable)]\n+#[derive(Copy, Clone, Default, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct GenericPredicates<'tcx> {\n     pub parent: Option<DefId>,\n-    pub predicates: Vec<(Predicate<'tcx>, Span)>,\n+    pub predicates: &'tcx [(Predicate<'tcx>, Span)],\n }\n \n-impl<'tcx> rustc_serialize::UseSpecializedEncodable for GenericPredicates<'tcx> {}\n-impl<'tcx> rustc_serialize::UseSpecializedDecodable for GenericPredicates<'tcx> {}\n-\n impl<'tcx> GenericPredicates<'tcx> {\n     pub fn instantiate(\n         &self,\n@@ -2321,7 +2318,7 @@ impl<'tcx> AdtDef {\n     }\n \n     #[inline]\n-    pub fn predicates(&self, tcx: TyCtxt<'tcx>) -> &'tcx GenericPredicates<'tcx> {\n+    pub fn predicates(&self, tcx: TyCtxt<'tcx>) -> GenericPredicates<'tcx> {\n         tcx.predicates_of(self.did)\n     }\n \n@@ -2561,7 +2558,7 @@ impl<'tcx> AdtDef {\n                     def_id: sized_trait,\n                     substs: tcx.mk_substs_trait(ty, &[])\n                 }).to_predicate();\n-                let predicates = &tcx.predicates_of(self.did).predicates;\n+                let predicates = tcx.predicates_of(self.did).predicates;\n                 if predicates.iter().any(|(p, _)| *p == sized_predicate) {\n                     vec![]\n                 } else {"}, {"sha": "21a7cf00b283f54c43d5783e440697a090527d0f", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -882,15 +882,16 @@ where\n     }\n }\n \n-impl<'a, 'tcx, E> SpecializedEncoder<ty::GenericPredicates<'tcx>> for CacheEncoder<'a, 'tcx, E>\n+impl<'a, 'tcx, E> SpecializedEncoder<&'tcx [(ty::Predicate<'tcx>, Span)]>\n+    for CacheEncoder<'a, 'tcx, E>\n where\n     E: 'a + TyEncoder,\n {\n     #[inline]\n     fn specialized_encode(&mut self,\n-                          predicates: &ty::GenericPredicates<'tcx>)\n+                          predicates: &&'tcx [(ty::Predicate<'tcx>, Span)])\n                           -> Result<(), Self::Error> {\n-        ty_codec::encode_predicates(self, predicates,\n+        ty_codec::encode_spanned_predicates(self, predicates,\n             |encoder| &mut encoder.predicate_shorthands)\n     }\n }"}, {"sha": "83ec98f9ddd2f2dfbd87ab39978e22681bfd9ade", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -1218,12 +1218,6 @@ EnumTypeFoldableImpl! {\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::GenericPredicates<'tcx> {\n-        parent, predicates\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         // This code is hot enough that it's worth specializing for a list of"}, {"sha": "08f6f43ab0cff4831c94c6b421c4e03d97928188", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -1241,7 +1241,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TrivialConstraints {\n         if cx.tcx.features().trivial_bounds {\n             let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n             let predicates = cx.tcx.predicates_of(def_id);\n-            for &(predicate, span) in &predicates.predicates {\n+            for &(predicate, span) in predicates.predicates {\n                 let predicate_kind_name = match predicate {\n                     Trait(..) => \"Trait\",\n                     TypeOutlives(..) |"}, {"sha": "a93946df68f9235d484b50da6fae287bada285ab", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -156,7 +156,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                 }\n                 ty::Opaque(def, _) => {\n                     let mut has_emitted = false;\n-                    for (predicate, _) in &cx.tcx.predicates_of(def).predicates {\n+                    for (predicate, _) in cx.tcx.predicates_of(def).predicates {\n                         if let ty::Predicate::Trait(ref poly_trait_predicate) = predicate {\n                             let trait_ref = poly_trait_predicate.skip_binder().trait_ref;\n                             let def_id = trait_ref.def_id;"}, {"sha": "4cd1ff7b4a4ff8ed47ae02a8b3742a8df27f02a5", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -97,11 +97,9 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     generics_of => {\n         tcx.arena.alloc(cdata.get_generics(def_id.index, tcx.sess))\n     }\n-    predicates_of => { tcx.arena.alloc(cdata.get_predicates(def_id.index, tcx)) }\n-    predicates_defined_on => {\n-        tcx.arena.alloc(cdata.get_predicates_defined_on(def_id.index, tcx))\n-    }\n-    super_predicates_of => { tcx.arena.alloc(cdata.get_super_predicates(def_id.index, tcx)) }\n+    predicates_of => { cdata.get_predicates(def_id.index, tcx) }\n+    predicates_defined_on => { cdata.get_predicates_defined_on(def_id.index, tcx) }\n+    super_predicates_of => { cdata.get_super_predicates(def_id.index, tcx) }\n     trait_def => {\n         tcx.arena.alloc(cdata.get_trait_def(def_id.index, tcx.sess))\n     }"}, {"sha": "ce4969146135bd55d133899350fa798f222a1b3a", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -243,11 +243,11 @@ impl<'tcx> SpecializedEncoder<interpret::AllocId> for EncodeContext<'tcx> {\n     }\n }\n \n-impl<'tcx> SpecializedEncoder<ty::GenericPredicates<'tcx>> for EncodeContext<'tcx> {\n+impl<'tcx> SpecializedEncoder<&'tcx [(ty::Predicate<'tcx>, Span)]> for EncodeContext<'tcx> {\n     fn specialized_encode(&mut self,\n-                          predicates: &ty::GenericPredicates<'tcx>)\n+                          predicates: &&'tcx [(ty::Predicate<'tcx>, Span)])\n                           -> Result<(), Self::Error> {\n-        ty_codec::encode_predicates(self, predicates, |ecx| &mut ecx.predicate_shorthands)\n+        ty_codec::encode_spanned_predicates(self, predicates, |ecx| &mut ecx.predicate_shorthands)\n     }\n }\n \n@@ -826,13 +826,13 @@ impl EncodeContext<'tcx> {\n \n     fn encode_predicates(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_predicates({:?})\", def_id);\n-        record!(self.per_def.predicates[def_id] <- &*self.tcx.predicates_of(def_id));\n+        record!(self.per_def.predicates[def_id] <- self.tcx.predicates_of(def_id));\n     }\n \n     fn encode_predicates_defined_on(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_predicates_defined_on({:?})\", def_id);\n         record!(self.per_def.predicates_defined_on[def_id] <-\n-            &*self.tcx.predicates_defined_on(def_id))\n+            self.tcx.predicates_defined_on(def_id))\n     }\n \n     fn encode_info_for_trait_item(&mut self, def_id: DefId) {\n@@ -1166,14 +1166,14 @@ impl EncodeContext<'tcx> {\n                     paren_sugar: trait_def.paren_sugar,\n                     has_auto_impl: self.tcx.trait_is_auto(def_id),\n                     is_marker: trait_def.is_marker,\n-                    super_predicates: self.lazy(&*tcx.super_predicates_of(def_id)),\n+                    super_predicates: self.lazy(tcx.super_predicates_of(def_id)),\n                 };\n \n                 EntryKind::Trait(self.lazy(data))\n             }\n             hir::ItemKind::TraitAlias(..) => {\n                 let data = TraitAliasData {\n-                    super_predicates: self.lazy(&*tcx.super_predicates_of(def_id)),\n+                    super_predicates: self.lazy(tcx.super_predicates_of(def_id)),\n                 };\n \n                 EntryKind::TraitAlias(self.lazy(data))"}, {"sha": "7b6255defd148cae58f4dcd0d5150bef7586188f", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -14,7 +14,7 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n     let mut current = def_id;\n     loop {\n         let predicates = tcx.predicates_of(current);\n-        for (predicate, _) in &predicates.predicates {\n+        for (predicate, _) in predicates.predicates {\n             match predicate {\n                 | Predicate::RegionOutlives(_)\n                 | Predicate::TypeOutlives(_)"}, {"sha": "eb79ce69a3e1f354ae7d9f5685a77328e630750e", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -64,7 +64,7 @@ trait DefIdVisitor<'tcx> {\n     fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> bool {\n         self.skeleton().visit_trait(trait_ref)\n     }\n-    fn visit_predicates(&mut self, predicates: &ty::GenericPredicates<'tcx>) -> bool {\n+    fn visit_predicates(&mut self, predicates: ty::GenericPredicates<'tcx>) -> bool {\n         self.skeleton().visit_predicates(predicates)\n     }\n }\n@@ -88,7 +88,7 @@ where\n         (!self.def_id_visitor.shallow() && substs.visit_with(self))\n     }\n \n-    fn visit_predicates(&mut self, predicates: &ty::GenericPredicates<'tcx>) -> bool {\n+    fn visit_predicates(&mut self, predicates: ty::GenericPredicates<'tcx>) -> bool {\n         let ty::GenericPredicates { parent: _, predicates } = predicates;\n         for (predicate, _span) in predicates {\n             match predicate {"}, {"sha": "0df367fcca83c307fb4d5dc73c9d81311115c1c2", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -218,7 +218,7 @@ fn program_clauses_for_trait(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n \n     let implemented_from_env = Clause::ForAll(ty::Binder::bind(implemented_from_env));\n \n-    let predicates = &tcx.predicates_defined_on(def_id).predicates;\n+    let predicates = tcx.predicates_defined_on(def_id).predicates;\n \n     // Warning: these where clauses are not substituted for bound vars yet,\n     // so that we don't need to adjust binders in the `FromEnv` rules below\n@@ -319,7 +319,7 @@ fn program_clauses_for_impl(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<'tcx> {\n     let trait_pred = ty::TraitPredicate { trait_ref }.lower();\n \n     // `WC`\n-    let predicates = &tcx.predicates_of(def_id).predicates;\n+    let predicates = tcx.predicates_of(def_id).predicates;\n     let where_clauses = predicates\n         .iter()\n         .map(|(wc, _)| wc.lower())"}, {"sha": "7e0a9bc4011c0fdc4240549b8940470d012d87e3", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -54,8 +54,7 @@ pub trait AstConv<'tcx> {\n     /// but this can lead to cycle errors. The problem is that we have\n     /// to do this resolution *in order to create the predicates in\n     /// the first place*. Hence, we have this \"special pass\".\n-    fn get_type_parameter_bounds(&self, span: Span, def_id: DefId)\n-                                 -> &'tcx ty::GenericPredicates<'tcx>;\n+    fn get_type_parameter_bounds(&self, span: Span, def_id: DefId) -> ty::GenericPredicates<'tcx>;\n \n     /// Returns the lifetime to use when a lifetime is omitted (and not elided).\n     fn re_infer("}, {"sha": "0c8df9bad448fdce38f9058397424495a11893e6", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -44,7 +44,7 @@ pub fn check_drop_impl(tcx: TyCtxt<'_>, drop_impl_did: DefId) -> Result<(), Erro\n             ensure_drop_predicates_are_implied_by_item_defn(\n                 tcx,\n                 drop_impl_did,\n-                &dtor_predicates,\n+                dtor_predicates,\n                 adt_def.did,\n                 self_to_impl_substs,\n             )\n@@ -140,7 +140,7 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     drop_impl_did: DefId,\n-    dtor_predicates: &ty::GenericPredicates<'tcx>,\n+    dtor_predicates: ty::GenericPredicates<'tcx>,\n     self_type_did: DefId,\n     self_to_impl_substs: SubstsRef<'tcx>,\n ) -> Result<(), ErrorReported> {\n@@ -199,7 +199,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n     // just to look for all the predicates directly.\n \n     assert_eq!(dtor_predicates.parent, None);\n-    for (predicate, _) in &dtor_predicates.predicates {\n+    for (predicate, _) in dtor_predicates.predicates {\n         // (We do not need to worry about deep analysis of type\n         // expressions etc because the Drop impls are already forced\n         // to take on a structure that is roughly an alpha-renaming of"}, {"sha": "152edf8dd0e5ad2989be33191a22e7cd5e67f704", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -2245,29 +2245,27 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         self.tcx\n     }\n \n-    fn get_type_parameter_bounds(&self, _: Span, def_id: DefId)\n-                                 -> &'tcx ty::GenericPredicates<'tcx>\n-    {\n+    fn get_type_parameter_bounds(&self, _: Span, def_id: DefId) -> ty::GenericPredicates<'tcx> {\n         let tcx = self.tcx;\n         let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n         let item_id = tcx.hir().ty_param_owner(hir_id);\n         let item_def_id = tcx.hir().local_def_id(item_id);\n         let generics = tcx.generics_of(item_def_id);\n         let index = generics.param_def_id_to_index[&def_id];\n-        tcx.arena.alloc(ty::GenericPredicates {\n+        ty::GenericPredicates {\n             parent: None,\n-            predicates: self.param_env.caller_bounds.iter().filter_map(|&predicate| {\n-                match predicate {\n+            predicates: tcx.arena.alloc_from_iter(\n+                self.param_env.caller_bounds.iter().filter_map(|&predicate| match predicate {\n                     ty::Predicate::Trait(ref data)\n                     if data.skip_binder().self_ty().is_param(index) => {\n                         // HACK(eddyb) should get the original `Span`.\n                         let span = tcx.def_span(def_id);\n                         Some((predicate, span))\n                     }\n                     _ => None\n-                }\n-            }).collect()\n-        })\n+                }),\n+            ),\n+        }\n     }\n \n     fn re_infer("}, {"sha": "18b103960c74595b5f684ea77eeb9434b58d9bf6", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -791,7 +791,7 @@ fn check_opaque_types<'fcx, 'tcx>(\n                         \"check_opaque_types: may define, predicates={:#?}\",\n                         predicates,\n                     );\n-                    for &(pred, _) in predicates.predicates.iter() {\n+                    for &(pred, _) in predicates.predicates {\n                         let substituted_pred = pred.subst(fcx.tcx, substs);\n                         // Avoid duplication of predicates that contain no parameters, for example.\n                         if !predicates.predicates.iter().any(|&(p, _)| p == substituted_pred) {\n@@ -1011,7 +1011,7 @@ fn check_variances_for_type_defn<'tcx>(\n \n     identify_constrained_generic_params(\n         tcx,\n-        &ty_predicates,\n+        ty_predicates,\n         None,\n         &mut constrained_parameters,\n     );"}, {"sha": "1749fd1075e0524a86f0a904f8dbf3cfb8dd1f9b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -182,8 +182,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         self.tcx\n     }\n \n-    fn get_type_parameter_bounds(&self, span: Span, def_id: DefId)\n-                                 -> &'tcx ty::GenericPredicates<'tcx> {\n+    fn get_type_parameter_bounds(&self, span: Span, def_id: DefId) -> ty::GenericPredicates<'tcx> {\n         self.tcx\n             .at(span)\n             .type_param_predicates((self.item_def_id, def_id))\n@@ -254,7 +253,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n fn type_param_predicates(\n     tcx: TyCtxt<'_>,\n     (item_def_id, def_id): (DefId, DefId),\n-) -> &ty::GenericPredicates<'_> {\n+) -> ty::GenericPredicates<'_> {\n     use rustc::hir::*;\n \n     // In the AST, bounds can derive from two places. Either\n@@ -275,10 +274,10 @@ fn type_param_predicates(\n         tcx.generics_of(item_def_id).parent\n     };\n \n-    let result = parent.map_or(&tcx.common.empty_predicates, |parent| {\n+    let mut result = parent.map(|parent| {\n         let icx = ItemCtxt::new(tcx, parent);\n         icx.get_type_parameter_bounds(DUMMY_SP, def_id)\n-    });\n+    }).unwrap_or_default();\n     let mut extend = None;\n \n     let item_hir_id = tcx.hir().as_local_hir_id(item_def_id).unwrap();\n@@ -321,19 +320,20 @@ fn type_param_predicates(\n     };\n \n     let icx = ItemCtxt::new(tcx, item_def_id);\n-    let mut result = (*result).clone();\n-    result.predicates.extend(extend.into_iter());\n-    result.predicates.extend(\n+    let extra_predicates = extend.into_iter().chain(\n         icx.type_parameter_bounds_in_generics(ast_generics, param_id, ty, OnlySelfBounds(true))\n             .into_iter()\n             .filter(|(predicate, _)| {\n                 match predicate {\n                     ty::Predicate::Trait(ref data) => data.skip_binder().self_ty().is_param(index),\n                     _ => false,\n                 }\n-            })\n+            }),\n+    );\n+    result.predicates = tcx.arena.alloc_from_iter(\n+        result.predicates.iter().copied().chain(extra_predicates),\n     );\n-    tcx.arena.alloc(result)\n+    result\n }\n \n impl ItemCtxt<'tcx> {\n@@ -698,7 +698,7 @@ fn adt_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::AdtDef {\n fn super_predicates_of(\n     tcx: TyCtxt<'_>,\n     trait_def_id: DefId,\n-) -> &ty::GenericPredicates<'_> {\n+) -> ty::GenericPredicates<'_> {\n     debug!(\"super_predicates(trait_def_id={:?})\", trait_def_id);\n     let trait_hir_id = tcx.hir().as_local_hir_id(trait_def_id).unwrap();\n \n@@ -732,21 +732,23 @@ fn super_predicates_of(\n         generics, item.hir_id, self_param_ty, OnlySelfBounds(!is_trait_alias));\n \n     // Combine the two lists to form the complete set of superbounds:\n-    let superbounds: Vec<_> = superbounds1.into_iter().chain(superbounds2).collect();\n+    let superbounds = &*tcx.arena.alloc_from_iter(\n+        superbounds1.into_iter().chain(superbounds2)\n+    );\n \n     // Now require that immediate supertraits are converted,\n     // which will, in turn, reach indirect supertraits.\n-    for &(pred, span) in &superbounds {\n+    for &(pred, span) in superbounds {\n         debug!(\"superbound: {:?}\", pred);\n         if let ty::Predicate::Trait(bound) = pred {\n             tcx.at(span).super_predicates_of(bound.def_id());\n         }\n     }\n \n-    tcx.arena.alloc(ty::GenericPredicates {\n+    ty::GenericPredicates {\n         parent: None,\n         predicates: superbounds,\n-    })\n+    }\n }\n \n fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TraitDef {\n@@ -1958,7 +1960,7 @@ fn early_bound_lifetimes_from_generics<'a, 'tcx: 'a>(\n fn predicates_defined_on(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n-) -> &ty::GenericPredicates<'_> {\n+) -> ty::GenericPredicates<'_> {\n     debug!(\"predicates_defined_on({:?})\", def_id);\n     let mut result = tcx.explicit_predicates_of(def_id);\n     debug!(\n@@ -1974,9 +1976,13 @@ fn predicates_defined_on(\n             def_id,\n             inferred_outlives,\n         );\n-        let mut predicates = (*result).clone();\n-        predicates.predicates.extend(inferred_outlives.iter().map(|&p| (p, span)));\n-        result = tcx.arena.alloc(predicates);\n+        result.predicates = tcx.arena.alloc_from_iter(\n+            result.predicates.iter().copied().chain(\n+                // FIXME(eddyb) use better spans - maybe add `Span`s\n+                // to `inferred_outlives_of` predicates as well?\n+                inferred_outlives.iter().map(|&p| (p, span)),\n+            ),\n+        );\n     }\n     debug!(\"predicates_defined_on({:?}) = {:?}\", def_id, result);\n     result\n@@ -1985,7 +1991,7 @@ fn predicates_defined_on(\n /// Returns a list of all type predicates (explicit and implicit) for the definition with\n /// ID `def_id`. This includes all predicates returned by `predicates_defined_on`, plus\n /// `Self: Trait` predicates for traits.\n-fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::GenericPredicates<'_> {\n+fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n     let mut result = tcx.predicates_defined_on(def_id);\n \n     if tcx.is_trait(def_id) {\n@@ -2002,9 +2008,11 @@ fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::GenericPredicates<'_> {\n         // used, and adding the predicate into this list ensures\n         // that this is done.\n         let span = tcx.def_span(def_id);\n-        let mut predicates = (*result).clone();\n-        predicates.predicates.push((ty::TraitRef::identity(tcx, def_id).to_predicate(), span));\n-        result = tcx.arena.alloc(predicates);\n+        result.predicates = tcx.arena.alloc_from_iter(\n+            result.predicates.iter().copied().chain(\n+                std::iter::once((ty::TraitRef::identity(tcx, def_id).to_predicate(), span))\n+            ),\n+        );\n     }\n     debug!(\"predicates_of(def_id={:?}) = {:?}\", def_id, result);\n     result\n@@ -2015,7 +2023,7 @@ fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::GenericPredicates<'_> {\n fn explicit_predicates_of(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n-) -> &ty::GenericPredicates<'_> {\n+) -> ty::GenericPredicates<'_> {\n     use rustc::hir::*;\n     use rustc_data_structures::fx::FxHashSet;\n \n@@ -2024,6 +2032,7 @@ fn explicit_predicates_of(\n     /// A data structure with unique elements, which preserves order of insertion.\n     /// Preserving the order of insertion is important here so as not to break\n     /// compile-fail UI tests.\n+    // FIXME(eddyb) just use `IndexSet` from `indexmap`.\n     struct UniquePredicates<'tcx> {\n         predicates: Vec<(ty::Predicate<'tcx>, Span)>,\n         uniques: FxHashSet<(ty::Predicate<'tcx>, Span)>,\n@@ -2133,10 +2142,10 @@ fn explicit_predicates_of(\n                     let bounds_predicates = bounds.predicates(tcx, opaque_ty);\n                     if impl_trait_fn.is_some() {\n                         // opaque types\n-                        return tcx.arena.alloc(ty::GenericPredicates {\n+                        return ty::GenericPredicates {\n                             parent: None,\n-                            predicates: bounds_predicates,\n-                        });\n+                            predicates: tcx.arena.alloc_from_iter(bounds_predicates),\n+                        };\n                     } else {\n                         // named opaque types\n                         predicates.extend(bounds_predicates);\n@@ -2339,10 +2348,10 @@ fn explicit_predicates_of(\n         );\n     }\n \n-    let result = tcx.arena.alloc(ty::GenericPredicates {\n+    let result = ty::GenericPredicates {\n         parent: generics.parent,\n-        predicates,\n-    });\n+        predicates: tcx.arena.alloc_from_iter(predicates),\n+    };\n     debug!(\"explicit_predicates_of(def_id={:?}) = {:?}\", def_id, result);\n     result\n }"}, {"sha": "1fdf49fde55b53082907be472a3865d543e88fc9", "filename": "src/librustc_typeck/constrained_generic_params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -86,11 +86,11 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n \n pub fn identify_constrained_generic_params<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    predicates: &ty::GenericPredicates<'tcx>,\n+    predicates: ty::GenericPredicates<'tcx>,\n     impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n     input_parameters: &mut FxHashSet<Parameter>,\n ) {\n-    let mut predicates = predicates.predicates.clone();\n+    let mut predicates = predicates.predicates.to_vec();\n     setup_constraining_predicates(tcx, &mut predicates, impl_trait_ref, input_parameters);\n }\n "}, {"sha": "2d188007712ad376c4bb570e3cec41177fed30a1", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -114,7 +114,7 @@ fn enforce_impl_params_are_constrained(\n \n     let mut input_parameters = cgp::parameters_for_impl(impl_self_ty, impl_trait_ref);\n     cgp::identify_constrained_generic_params(\n-        tcx, &impl_predicates, impl_trait_ref, &mut input_parameters);\n+        tcx, impl_predicates, impl_trait_ref, &mut input_parameters);\n \n     // Disallow unconstrained lifetimes, but only if they appear in assoc types.\n     let lifetimes_in_associated_types: FxHashSet<_> = impl_item_refs.iter()"}, {"sha": "83194144216ee8d7177a0b0eb1d2c8d450f96a1c", "filename": "src/librustc_typeck/outlives/explicit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -30,7 +30,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n             let mut required_predicates = RequiredPredicates::default();\n \n             // process predicates and convert to `RequiredPredicates` entry, see below\n-            for (pred, _) in predicates.predicates.iter() {\n+            for (pred, _) in predicates.predicates {\n                 match pred {\n                     ty::Predicate::TypeOutlives(predicate) => {\n                         let OutlivesPredicate(ref ty, ref reg) = predicate.skip_binder();"}, {"sha": "b7f5ed9d004d49506deaf897f26c1bda3f466131", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     // regardless of the choice of `T`.\n                     let params = (\n                         self.cx.tcx.generics_of(param_env_def_id),\n-                        &&self.cx.tcx.common.empty_predicates,\n+                        ty::GenericPredicates::default(),\n                     ).clean(self.cx).params;\n \n                     Generics {\n@@ -489,7 +489,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n \n         let mut generic_params = (\n             tcx.generics_of(param_env_def_id),\n-            &tcx.explicit_predicates_of(param_env_def_id),\n+            tcx.explicit_predicates_of(param_env_def_id),\n         ).clean(self.cx).params;\n \n         let mut has_sized = FxHashSet::default();"}, {"sha": "ff59dcab672f37b49642f5d67aa7c0057b0d5fcc", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                         unsafety: hir::Unsafety::Normal,\n                         generics: (\n                             self.cx.tcx.generics_of(impl_def_id),\n-                            &self.cx.tcx.explicit_predicates_of(impl_def_id),\n+                            self.cx.tcx.explicit_predicates_of(impl_def_id),\n                         ).clean(self.cx),\n                         provided_trait_methods,\n                         // FIXME(eddyb) compute both `trait_` and `for_` from"}, {"sha": "b3227c9f600293b99af386427bd02a24f66f02da", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -193,7 +193,7 @@ pub fn build_external_trait(cx: &DocContext<'_>, did: DefId) -> clean::Trait {\n     let auto_trait = cx.tcx.trait_def(did).has_auto_impl;\n     let trait_items = cx.tcx.associated_items(did).map(|item| item.clean(cx)).collect();\n     let predicates = cx.tcx.predicates_of(did);\n-    let generics = (cx.tcx.generics_of(did), &predicates).clean(cx);\n+    let generics = (cx.tcx.generics_of(did), predicates).clean(cx);\n     let generics = filter_non_trait_generics(did, generics);\n     let (generics, supertrait_bounds) = separate_supertrait_bounds(generics);\n     let is_spotlight = load_attrs(cx, did).clean(cx).has_doc_flag(sym::spotlight);\n@@ -220,7 +220,7 @@ fn build_external_function(cx: &DocContext<'_>, did: DefId) -> clean::Function {\n     let asyncness =  cx.tcx.asyncness(did);\n     let predicates = cx.tcx.predicates_of(did);\n     let (generics, decl) = clean::enter_impl_trait(cx, || {\n-        ((cx.tcx.generics_of(did), &predicates).clean(cx), (did, sig).clean(cx))\n+        ((cx.tcx.generics_of(did), predicates).clean(cx), (did, sig).clean(cx))\n     });\n     let (all_types, ret_types) = clean::get_all_types(&generics, &decl, cx);\n     clean::Function {\n@@ -241,7 +241,7 @@ fn build_enum(cx: &DocContext<'_>, did: DefId) -> clean::Enum {\n     let predicates = cx.tcx.explicit_predicates_of(did);\n \n     clean::Enum {\n-        generics: (cx.tcx.generics_of(did), &predicates).clean(cx),\n+        generics: (cx.tcx.generics_of(did), predicates).clean(cx),\n         variants_stripped: false,\n         variants: cx.tcx.adt_def(did).variants.clean(cx),\n     }\n@@ -257,7 +257,7 @@ fn build_struct(cx: &DocContext<'_>, did: DefId) -> clean::Struct {\n             CtorKind::Fn => doctree::Tuple,\n             CtorKind::Const => doctree::Unit,\n         },\n-        generics: (cx.tcx.generics_of(did), &predicates).clean(cx),\n+        generics: (cx.tcx.generics_of(did), predicates).clean(cx),\n         fields: variant.fields.clean(cx),\n         fields_stripped: false,\n     }\n@@ -269,7 +269,7 @@ fn build_union(cx: &DocContext<'_>, did: DefId) -> clean::Union {\n \n     clean::Union {\n         struct_type: doctree::Plain,\n-        generics: (cx.tcx.generics_of(did), &predicates).clean(cx),\n+        generics: (cx.tcx.generics_of(did), predicates).clean(cx),\n         fields: variant.fields.clean(cx),\n         fields_stripped: false,\n     }\n@@ -280,7 +280,7 @@ fn build_type_alias(cx: &DocContext<'_>, did: DefId) -> clean::Typedef {\n \n     clean::Typedef {\n         type_: cx.tcx.type_of(did).clean(cx),\n-        generics: (cx.tcx.generics_of(did), &predicates).clean(cx),\n+        generics: (cx.tcx.generics_of(did), predicates).clean(cx),\n     }\n }\n \n@@ -376,7 +376,7 @@ pub fn build_impl(cx: &DocContext<'_>, did: DefId, attrs: Option<Attrs<'_>>,\n                 }\n             }).collect::<Vec<_>>(),\n             clean::enter_impl_trait(cx, || {\n-                (tcx.generics_of(did), &predicates).clean(cx)\n+                (tcx.generics_of(did), predicates).clean(cx)\n             }),\n         )\n     };"}, {"sha": "d9c853aa7aa35719d9348bfc09df653ee582d18e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd9e4441eb55135b452689abe54ce9fb0c72f90b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cd9e4441eb55135b452689abe54ce9fb0c72f90b", "patch": "@@ -1664,8 +1664,7 @@ impl Clean<Generics> for hir::Generics {\n     }\n }\n \n-impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n-                                    &'a &'tcx ty::GenericPredicates<'tcx>) {\n+impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Generics {\n         use self::WherePredicate as WP;\n         use std::collections::BTreeMap;\n@@ -2369,7 +2368,7 @@ impl Clean<Item> for ty::AssocItem {\n             }\n             ty::AssocKind::Method => {\n                 let generics = (cx.tcx.generics_of(self.def_id),\n-                                &cx.tcx.explicit_predicates_of(self.def_id)).clean(cx);\n+                                cx.tcx.explicit_predicates_of(self.def_id)).clean(cx);\n                 let sig = cx.tcx.fn_sig(self.def_id);\n                 let mut decl = (self.def_id, sig).clean(cx);\n \n@@ -2448,7 +2447,7 @@ impl Clean<Item> for ty::AssocItem {\n                     // all of the generics from there and then look for bounds that are\n                     // applied to this associated type in question.\n                     let predicates = cx.tcx.explicit_predicates_of(did);\n-                    let generics = (cx.tcx.generics_of(did), &predicates).clean(cx);\n+                    let generics = (cx.tcx.generics_of(did), predicates).clean(cx);\n                     let mut bounds = generics.where_predicates.iter().filter_map(|pred| {\n                         let (name, self_type, trait_, bounds) = match *pred {\n                             WherePredicate::BoundPredicate {"}]}