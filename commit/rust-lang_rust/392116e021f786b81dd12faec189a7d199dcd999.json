{"sha": "392116e021f786b81dd12faec189a7d199dcd999", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MjExNmUwMjFmNzg2YjgxZGQxMmZhZWMxODlhN2QxOTlkY2Q5OTk=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-08-11T23:05:43Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-08-11T23:05:43Z"}, "message": "Platform Support page updates.\n\nA few updates:\n- Some minor wording and formatting changes.\n- Remove the `cargo` column.\n- Explain the columns up-front.\n- Add no-wrap on the target-triple, which looks better to me.\n- Minor mention on how to install support for a built-in target via rustup.", "tree": {"sha": "bf9960ffee6955caa3c59e1e2e428068bb5c1dd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf9960ffee6955caa3c59e1e2e428068bb5c1dd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/392116e021f786b81dd12faec189a7d199dcd999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/392116e021f786b81dd12faec189a7d199dcd999", "html_url": "https://github.com/rust-lang/rust/commit/392116e021f786b81dd12faec189a7d199dcd999", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/392116e021f786b81dd12faec189a7d199dcd999/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1902983f4520a798c50ee795322def8a60184aa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1902983f4520a798c50ee795322def8a60184aa9", "html_url": "https://github.com/rust-lang/rust/commit/1902983f4520a798c50ee795322def8a60184aa9"}], "stats": {"total": 391, "additions": 198, "deletions": 193}, "files": [{"sha": "683d402930614157a63330a0da68735f5429100c", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 188, "deletions": 188, "changes": 376, "blob_url": "https://github.com/rust-lang/rust/blob/392116e021f786b81dd12faec189a7d199dcd999/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/392116e021f786b81dd12faec189a7d199dcd999/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=392116e021f786b81dd12faec189a7d199dcd999", "patch": "@@ -1,34 +1,49 @@\n-# Rust Platform Support\n+# Platform Support\n \n-The Rust compiler runs on, and compiles to, a great number of platforms, though\n-not all platforms are equally supported. Rust's support levels are organized\n-into three tiers, each with a different set of guarantees.\n+<style type=\"text/css\">\n+    td code {\n+        white-space: nowrap;\n+    }\n+</style>\n \n-Platforms are identified by their \"target triple\" which is the string to inform\n-the compiler what kind of output should be produced. The columns below indicate\n-whether the corresponding component works on the specified platform.\n+Support for different platforms are organized into three tiers, each with a\n+different set of guarantees.\n+\n+Platforms are identified by their \"target triple\" which is the string to\n+inform the compiler what kind of output should be produced. The columns in the\n+tables below have the following meanings:\n+\n+* std:\n+    * \u2713 indicates the full standard library is available.\n+    * \\* indicates the target only supports [`no_std`] development.\n+    * ? indicates the standard library support is unknown or a work-in-progress.\n+* host: A \u2713 indicates that `rustc` and `cargo` can run on the host platform.\n+\n+[`no_std`]: https://rust-embedded.github.io/book/intro/no-std.html\n \n ## Tier 1\n+\n Tier 1 platforms can be thought of as \"guaranteed to work\".\n Specifically they will each satisfy the following requirements:\n \n * Official binary releases are provided for the platform.\n * Automated testing is set up to run tests for the platform.\n-* Landing changes to the `rust-lang/rust` repository's master branch is gated on\n-    tests passing.\n+* Landing changes to the `rust-lang/rust` repository's master branch is gated\n+  on tests passing.\n * Documentation for how to use and how to build the platform is available.\n \n-target | std | rustc | cargo | notes\n--------|-----|-------|-------|-------\n-`i686-pc-windows-gnu` | \u2713 | \u2713 | \u2713 | 32-bit MinGW (Windows 7+)\n-`i686-pc-windows-msvc` | \u2713 | \u2713 | \u2713 | 32-bit MSVC (Windows 7+)\n-`i686-unknown-linux-gnu` | \u2713 | \u2713 | \u2713 | 32-bit Linux (kernel 2.6.32+, glibc 2.11+)\n-`x86_64-apple-darwin` | \u2713 | \u2713 | \u2713 | 64-bit OSX (10.7+, Lion+)\n-`x86_64-pc-windows-gnu` | \u2713 | \u2713 | \u2713 | 64-bit MinGW (Windows 7+)\n-`x86_64-pc-windows-msvc` | \u2713 | \u2713 | \u2713 | 64-bit MSVC (Windows 7+)\n-`x86_64-unknown-linux-gnu` | \u2713 | \u2713 | \u2713 | 64-bit Linux (kernel 2.6.32+, glibc 2.11+)\n+target | std | host | notes\n+-------|-----|------|-------\n+`i686-pc-windows-gnu` | \u2713 | \u2713 | 32-bit MinGW (Windows 7+)\n+`i686-pc-windows-msvc` | \u2713 | \u2713 | 32-bit MSVC (Windows 7+)\n+`i686-unknown-linux-gnu` | \u2713 | \u2713 | 32-bit Linux (kernel 2.6.32+, glibc 2.11+)\n+`x86_64-apple-darwin` | \u2713 | \u2713 | 64-bit OSX (10.7+, Lion+)\n+`x86_64-pc-windows-gnu` | \u2713 | \u2713 | 64-bit MinGW (Windows 7+)\n+`x86_64-pc-windows-msvc` | \u2713 | \u2713 | 64-bit MSVC (Windows 7+)\n+`x86_64-unknown-linux-gnu` | \u2713 | \u2713 | 64-bit Linux (kernel 2.6.32+, glibc 2.11+)\n \n ## Tier 2\n+\n Tier 2 platforms can be thought of as \"guaranteed to build\". Automated tests\n are not run so it's not guaranteed to produce a working build, but platforms\n often work to quite a good degree and patches are always welcome!\n@@ -40,183 +55,168 @@ Specifically, these platforms are required to have each of the following:\n     platforms **building**. For some platforms only the standard library is\n     compiled, but for others `rustc` and `cargo` are too.\n \n-target | std | rustc | cargo | notes\n--------|-----|-------|-------|-------\n-`aarch64-apple-ios` | \u2713 |  |  | ARM64 iOS\n-`aarch64-fuchsia` | \u2713 |  |  | ARM64 Fuchsia\n-`aarch64-linux-android` | \u2713 |  |  | ARM64 Android\n-`aarch64-pc-windows-msvc` | \u2713 |  |  | ARM64 Windows MSVC\n-`aarch64-unknown-linux-gnu` | \u2713 | \u2713 | \u2713 | ARM64 Linux (kernel 4.2, glibc 2.17)\n-`aarch64-unknown-linux-musl` | \u2713 |  |  | ARM64 Linux with MUSL\n-`aarch64-unknown-none` | * |  |  | Bare ARM64, hardfloat\n-`aarch64-unknown-none-softfloat` | * |  |  | Bare ARM64, softfloat\n-`arm-linux-androideabi` | \u2713 |  |  | ARMv7 Android\n-`arm-unknown-linux-gnueabi` | \u2713 | \u2713 | \u2713 | ARMv6 Linux (kernel 3.2, glibc 2.17)\n-`arm-unknown-linux-gnueabihf` | \u2713 | \u2713 | \u2713 | ARMv6 Linux, hardfloat (kernel 3.2, glibc 2.17)\n-`arm-unknown-linux-musleabi` | \u2713 |  |  | ARMv6 Linux with MUSL\n-`arm-unknown-linux-musleabihf` | \u2713 |  |  | ARMv6 Linux with MUSL, hardfloat\n-`armebv7r-none-eabi` | * |  |  | Bare ARMv7-R, Big Endian\n-`armebv7r-none-eabihf` | * |  |  | Bare ARMv7-R, Big Endian, hardfloat\n-`armv5te-unknown-linux-gnueabi` | \u2713 |  |  | ARMv5TE Linux (kernel 4.4, glibc 2.23)\n-`armv5te-unknown-linux-musleabi` | \u2713 |  |  | ARMv5TE Linux with MUSL\n-`armv7-linux-androideabi` | \u2713 |  |  | ARMv7a Android\n-`armv7a-none-eabi` | * |  |  | Bare ARMv7-A\n-`armv7r-none-eabi` | * |  |  | Bare ARMv7-R\n-`armv7r-none-eabihf` | * |  |  | Bare ARMv7-R, hardfloat\n-`armv7-unknown-linux-gnueabi` | \u2713 |   |   | ARMv7 Linux (kernel 4.15, glibc 2.27)\n-`armv7-unknown-linux-gnueabihf` | \u2713 | \u2713 | \u2713 | ARMv7 Linux, hardfloat (kernel 3.2, glibc 2.17)\n-`armv7-unknown-linux-musleabi` | \u2713 |   |   | ARMv7 Linux, MUSL\n-`armv7-unknown-linux-musleabihf` | \u2713 |  |  | ARMv7 Linux with MUSL\n-`asmjs-unknown-emscripten` | \u2713 |  |  | asm.js via Emscripten\n-`i586-pc-windows-msvc` | \u2713 |  |  | 32-bit Windows w/o SSE\n-`i586-unknown-linux-gnu` | \u2713 |  |  | 32-bit Linux w/o SSE (kernel 4.4, glibc 2.23)\n-`i586-unknown-linux-musl` | \u2713 |  |  | 32-bit Linux w/o SSE, MUSL\n-`i686-linux-android` | \u2713 |  |  | 32-bit x86 Android\n-`i686-unknown-freebsd` | \u2713 | \u2713 | \u2713 | 32-bit FreeBSD\n-`i686-unknown-linux-musl` | \u2713 |  |  | 32-bit Linux with MUSL\n-`mips-unknown-linux-gnu` | \u2713 | \u2713 | \u2713 | MIPS Linux (kernel 4.4, glibc 2.23)\n-`mips-unknown-linux-musl` | \u2713 |  |  | MIPS Linux with MUSL\n-`mips64-unknown-linux-gnuabi64` | \u2713 | \u2713 | \u2713 | MIPS64 Linux, n64 ABI (kernel 4.4, glibc 2.23)\n-`mips64-unknown-linux-muslabi64` | \u2713 |  |  | MIPS64 Linux, n64 ABI, MUSL\n-`mips64el-unknown-linux-gnuabi64` | \u2713 | \u2713 | \u2713 | MIPS64 (LE) Linux, n64 ABI (kernel 4.4, glibc 2.23)\n-`mips64el-unknown-linux-muslabi64` | \u2713 |  |  | MIPS64 (LE) Linux, n64 ABI, MUSL\n-`mipsel-unknown-linux-gnu` | \u2713 | \u2713 | \u2713 | MIPS (LE) Linux (kernel 4.4, glibc 2.23)\n-`mipsel-unknown-linux-musl` | \u2713 |  |  | MIPS (LE) Linux with MUSL\n-`nvptx64-nvidia-cuda` | \u2713 |  |  | --emit=asm generates PTX code that [runs on NVIDIA GPUs]\n-`powerpc-unknown-linux-gnu` | \u2713 | \u2713 | \u2713 | PowerPC Linux (kernel 2.6.32, glibc 2.11)\n-`powerpc64-unknown-linux-gnu` | \u2713 | \u2713 | \u2713 | PPC64 Linux (kernel 2.6.32, glibc 2.11)\n-`powerpc64le-unknown-linux-gnu` | \u2713 | \u2713 | \u2713 | PPC64LE Linux (kernel 3.10, glibc 2.17)\n-`riscv32i-unknown-none-elf` | * |  |  | Bare RISC-V (RV32I ISA)\n-`riscv32imac-unknown-none-elf` | * |  |  | Bare RISC-V (RV32IMAC ISA)\n-`riscv32imc-unknown-none-elf` | * |  |  | Bare RISC-V (RV32IMC ISA)\n-`riscv64gc-unknown-linux-gnu` | \u2713 | \u2713 | \u2713 | RISC-V Linux (kernel 4.20, glibc 2.29)\n-`riscv64gc-unknown-none-elf` | * |  |  | Bare RISC-V (RV64IMAFDC ISA)\n-`riscv64imac-unknown-none-elf` | * |  |  | Bare RISC-V (RV64IMAC ISA)\n-`s390x-unknown-linux-gnu` | \u2713 | \u2713 | \u2713 | S390x Linux (kernel 2.6.32, glibc 2.11)\n-`sparc64-unknown-linux-gnu` | \u2713 |  |  | SPARC Linux (kernel 4.4, glibc 2.23)\n-`sparcv9-sun-solaris` | \u2713 |  |  | SPARC Solaris 10/11, illumos\n-`thumbv6m-none-eabi` | * |  |  | Bare Cortex-M0, M0+, M1\n-`thumbv7em-none-eabi` | * |  |  | Bare Cortex-M4, M7\n-`thumbv7em-none-eabihf` | * |  |  | Bare Cortex-M4F, M7F, FPU, hardfloat\n-`thumbv7m-none-eabi` | * |  |  | Bare Cortex-M3\n-`thumbv7neon-linux-androideabi` | \u2713 |  |  | Thumb2-mode ARMv7a Android with NEON\n-`thumbv7neon-unknown-linux-gnueabihf` | \u2713 |  |  | Thumb2-mode ARMv7a Linux with NEON (kernel 4.4, glibc 2.23)\n-`thumbv8m.base-none-eabi` | * |  |  | ARMv8-M Baseline\n-`thumbv8m.main-none-eabi` | * |  |  | ARMv8-M Mainline\n-`thumbv8m.main-none-eabihf` | * |  |  | ARMv8-M Baseline, hardfloat\n-`wasm32-unknown-emscripten` | \u2713 |  |  | WebAssembly via Emscripten\n-`wasm32-unknown-unknown` | \u2713 |  |  | WebAssembly\n-`wasm32-wasi` | \u2713 |  |  | WebAssembly with WASI\n-`x86_64-apple-ios` | \u2713 |  |  | 64-bit x86 iOS\n-`x86_64-fortanix-unknown-sgx` | \u2713 |  |  | [Fortanix ABI] for 64-bit Intel SGX\n-`x86_64-fuchsia` | \u2713 |  |  | 64-bit Fuchsia\n-`x86_64-linux-android` | \u2713 |  |  | 64-bit x86 Android\n-`x86_64-rumprun-netbsd` | \u2713 |  |  | 64-bit NetBSD Rump Kernel\n-`x86_64-sun-solaris` | \u2713 |  |  | 64-bit Solaris 10/11, illumos\n-`x86_64-unknown-cloudabi` | \u2713 |  |  | 64-bit CloudABI\n-`x86_64-unknown-freebsd` | \u2713 | \u2713 | \u2713 | 64-bit FreeBSD\n-`x86_64-unknown-illumos` | \u2713 | \u2713 | \u2713 | illumos\n-`x86_64-unknown-linux-gnux32` | \u2713 |  |  | 64-bit Linux (x32 ABI) (kernel 4.15, glibc 2.27)\n-`x86_64-unknown-linux-musl` | \u2713 | \u2713 | \u2713 | 64-bit Linux with MUSL\n-`x86_64-unknown-netbsd` | \u2713 | \u2713 | \u2713 | NetBSD/amd64\n-`x86_64-unknown-redox` | \u2713 |  |  | Redox OS\n+target | std | host | notes\n+-------|-----|------|-------\n+`aarch64-apple-ios` | \u2713 |  | ARM64 iOS\n+`aarch64-fuchsia` | \u2713 |  | ARM64 Fuchsia\n+`aarch64-linux-android` | \u2713 |  | ARM64 Android\n+`aarch64-pc-windows-msvc` | \u2713 |  | ARM64 Windows MSVC\n+`aarch64-unknown-linux-gnu` | \u2713 | \u2713 | ARM64 Linux (kernel 4.2, glibc 2.17)\n+`aarch64-unknown-linux-musl` | \u2713 |  | ARM64 Linux with MUSL\n+`aarch64-unknown-none` | * |  | Bare ARM64, hardfloat\n+`aarch64-unknown-none-softfloat` | * |  | Bare ARM64, softfloat\n+`arm-linux-androideabi` | \u2713 |  | ARMv7 Android\n+`arm-unknown-linux-gnueabi` | \u2713 | \u2713 | ARMv6 Linux (kernel 3.2, glibc 2.17)\n+`arm-unknown-linux-gnueabihf` | \u2713 | \u2713 | ARMv6 Linux, hardfloat (kernel 3.2, glibc 2.17)\n+`arm-unknown-linux-musleabi` | \u2713 |  | ARMv6 Linux with MUSL\n+`arm-unknown-linux-musleabihf` | \u2713 |  | ARMv6 Linux with MUSL, hardfloat\n+`armebv7r-none-eabi` | * |  | Bare ARMv7-R, Big Endian\n+`armebv7r-none-eabihf` | * |  | Bare ARMv7-R, Big Endian, hardfloat\n+`armv5te-unknown-linux-gnueabi` | \u2713 |  | ARMv5TE Linux (kernel 4.4, glibc 2.23)\n+`armv5te-unknown-linux-musleabi` | \u2713 |  | ARMv5TE Linux with MUSL\n+`armv7-linux-androideabi` | \u2713 |  | ARMv7a Android\n+`armv7a-none-eabi` | * |  | Bare ARMv7-A\n+`armv7r-none-eabi` | * |  | Bare ARMv7-R\n+`armv7r-none-eabihf` | * |  | Bare ARMv7-R, hardfloat\n+`armv7-unknown-linux-gnueabi` | \u2713 |   | ARMv7 Linux (kernel 4.15, glibc 2.27)\n+`armv7-unknown-linux-gnueabihf` | \u2713 | \u2713 | ARMv7 Linux, hardfloat (kernel 3.2, glibc 2.17)\n+`armv7-unknown-linux-musleabi` | \u2713 |   | ARMv7 Linux, MUSL\n+`armv7-unknown-linux-musleabihf` | \u2713 |  | ARMv7 Linux with MUSL\n+`asmjs-unknown-emscripten` | \u2713 |  | asm.js via Emscripten\n+`i586-pc-windows-msvc` | \u2713 |  | 32-bit Windows w/o SSE\n+`i586-unknown-linux-gnu` | \u2713 |  | 32-bit Linux w/o SSE (kernel 4.4, glibc 2.23)\n+`i586-unknown-linux-musl` | \u2713 |  | 32-bit Linux w/o SSE, MUSL\n+`i686-linux-android` | \u2713 |  | 32-bit x86 Android\n+`i686-unknown-freebsd` | \u2713 | \u2713 | 32-bit FreeBSD\n+`i686-unknown-linux-musl` | \u2713 |  | 32-bit Linux with MUSL\n+`mips-unknown-linux-gnu` | \u2713 | \u2713 | MIPS Linux (kernel 4.4, glibc 2.23)\n+`mips-unknown-linux-musl` | \u2713 |  | MIPS Linux with MUSL\n+`mips64-unknown-linux-gnuabi64` | \u2713 | \u2713 | MIPS64 Linux, n64 ABI (kernel 4.4, glibc 2.23)\n+`mips64-unknown-linux-muslabi64` | \u2713 |  | MIPS64 Linux, n64 ABI, MUSL\n+`mips64el-unknown-linux-gnuabi64` | \u2713 | \u2713 | MIPS64 (LE) Linux, n64 ABI (kernel 4.4, glibc 2.23)\n+`mips64el-unknown-linux-muslabi64` | \u2713 |  | MIPS64 (LE) Linux, n64 ABI, MUSL\n+`mipsel-unknown-linux-gnu` | \u2713 | \u2713 | MIPS (LE) Linux (kernel 4.4, glibc 2.23)\n+`mipsel-unknown-linux-musl` | \u2713 |  | MIPS (LE) Linux with MUSL\n+`nvptx64-nvidia-cuda` | \u2713 |  | --emit=asm generates PTX code that [runs on NVIDIA GPUs]\n+`powerpc-unknown-linux-gnu` | \u2713 | \u2713 | PowerPC Linux (kernel 2.6.32, glibc 2.11)\n+`powerpc64-unknown-linux-gnu` | \u2713 | \u2713 | PPC64 Linux (kernel 2.6.32, glibc 2.11)\n+`powerpc64le-unknown-linux-gnu` | \u2713 | \u2713 | PPC64LE Linux (kernel 3.10, glibc 2.17)\n+`riscv32i-unknown-none-elf` | * |  | Bare RISC-V (RV32I ISA)\n+`riscv32imac-unknown-none-elf` | * |  | Bare RISC-V (RV32IMAC ISA)\n+`riscv32imc-unknown-none-elf` | * |  | Bare RISC-V (RV32IMC ISA)\n+`riscv64gc-unknown-linux-gnu` | \u2713 | \u2713 | RISC-V Linux (kernel 4.20, glibc 2.29)\n+`riscv64gc-unknown-none-elf` | * |  | Bare RISC-V (RV64IMAFDC ISA)\n+`riscv64imac-unknown-none-elf` | * |  | Bare RISC-V (RV64IMAC ISA)\n+`s390x-unknown-linux-gnu` | \u2713 | \u2713 | S390x Linux (kernel 2.6.32, glibc 2.11)\n+`sparc64-unknown-linux-gnu` | \u2713 |  | SPARC Linux (kernel 4.4, glibc 2.23)\n+`sparcv9-sun-solaris` | \u2713 |  | SPARC Solaris 10/11, illumos\n+`thumbv6m-none-eabi` | * |  | Bare Cortex-M0, M0+, M1\n+`thumbv7em-none-eabi` | * |  | Bare Cortex-M4, M7\n+`thumbv7em-none-eabihf` | * |  | Bare Cortex-M4F, M7F, FPU, hardfloat\n+`thumbv7m-none-eabi` | * |  | Bare Cortex-M3\n+`thumbv7neon-linux-androideabi` | \u2713 |  | Thumb2-mode ARMv7a Android with NEON\n+`thumbv7neon-unknown-linux-gnueabihf` | \u2713 |  | Thumb2-mode ARMv7a Linux with NEON (kernel 4.4, glibc 2.23)\n+`thumbv8m.base-none-eabi` | * |  | ARMv8-M Baseline\n+`thumbv8m.main-none-eabi` | * |  | ARMv8-M Mainline\n+`thumbv8m.main-none-eabihf` | * |  | ARMv8-M Baseline, hardfloat\n+`wasm32-unknown-emscripten` | \u2713 |  | WebAssembly via Emscripten\n+`wasm32-unknown-unknown` | \u2713 |  | WebAssembly\n+`wasm32-wasi` | \u2713 |  | WebAssembly with WASI\n+`x86_64-apple-ios` | \u2713 |  | 64-bit x86 iOS\n+`x86_64-fortanix-unknown-sgx` | \u2713 |  | [Fortanix ABI] for 64-bit Intel SGX\n+`x86_64-fuchsia` | \u2713 |  | 64-bit Fuchsia\n+`x86_64-linux-android` | \u2713 |  | 64-bit x86 Android\n+`x86_64-rumprun-netbsd` | \u2713 |  | 64-bit NetBSD Rump Kernel\n+`x86_64-sun-solaris` | \u2713 |  | 64-bit Solaris 10/11, illumos\n+`x86_64-unknown-cloudabi` | \u2713 |  | 64-bit CloudABI\n+`x86_64-unknown-freebsd` | \u2713 | \u2713 | 64-bit FreeBSD\n+`x86_64-unknown-illumos` | \u2713 | \u2713 | illumos\n+`x86_64-unknown-linux-gnux32` | \u2713 |  | 64-bit Linux (x32 ABI) (kernel 4.15, glibc 2.27)\n+`x86_64-unknown-linux-musl` | \u2713 | \u2713 | 64-bit Linux with MUSL\n+`x86_64-unknown-netbsd` | \u2713 | \u2713 | NetBSD/amd64\n+`x86_64-unknown-redox` | \u2713 |  | Redox OS\n \n [Fortanix ABI]: https://edp.fortanix.com/\n \n ## Tier 3\n+\n Tier 3 platforms are those which the Rust codebase has support for, but which\n are not built or tested automatically, and may not work. Official builds are\n not available.\n \n-target | std | rustc | cargo | notes\n--------|-----|-------|-------|-------\n-`aarch64-apple-darwin` | ? |  |  | ARM64 macOS\n-`aarch64-apple-tvos` | ** |  |  | ARM64 tvOS\n-`aarch64-unknown-cloudabi` | \u2713 |  |  | ARM64 CloudABI\n-`aarch64-unknown-freebsd` | \u2713 | \u2713 | \u2713 | ARM64 FreeBSD\n-`aarch64-unknown-hermit` | ? |  |  |\n-`aarch64-unknown-netbsd` | ? |  |  |\n-`aarch64-unknown-openbsd` | \u2713 | \u2713 | \u2713 | ARM64 OpenBSD\n-`aarch64-unknown-redox` | ? |  |  | ARM64 Redox OS\n-`aarch64-uwp-windows-msvc` | ? |  |  |\n-`aarch64-wrs-vxworks` | ? |  |  |\n-`armv4t-unknown-linux-gnueabi` | ? |  |  |\n-`armv6-unknown-freebsd` | \u2713 | \u2713 | \u2713 | ARMv6 FreeBSD\n-`armv6-unknown-netbsd-eabihf` | ? |  |  |\n-`armv7-apple-ios` | \u2713 |  |  | RMv7 iOS, Cortex-\n-`armv7-unknown-cloudabi-eabihf` | \u2713 |  |  | ARMv7 CloudABI, hardfloat\n-`armv7-unknown-freebsd` | \u2713 | \u2713 | \u2713 | ARMv7 FreeBSD\n-`armv7-unknown-netbsd-eabihf` | ? |  |  |\n-`armv7-wrs-vxworks-eabihf` | ? |  |  |\n-`armv7a-none-eabihf` | * | | | ARM Cortex-A, hardfloat\n-`armv7s-apple-ios` | \u2713 |  |  |\n-`avr-unknown-unknown` | ? |  |  | AVR\n-`hexagon-unknown-linux-musl` | ? |  |  |\n-`i386-apple-ios` | \u2713 |  |  | 32-bit x86 iOS\n-`i686-apple-darwin` | \u2713 | \u2713 | \u2713 | 32-bit OSX (10.7+, Lion+)\n-`i686-pc-windows-msvc` | \u2713 |  |  | 32-bit Windows XP support\n-`i686-unknown-cloudabi` | \u2713 |  |  | 32-bit CloudABI\n-`i686-unknown-uefi` | ? |  |  | 32-bit UEFI\n-`i686-unknown-haiku` | \u2713 | \u2713 | \u2713 | 32-bit Haiku\n-`i686-unknown-netbsd` | \u2713 |  |  | NetBSD/i386 with SSE2\n-`i686-unknown-openbsd` | \u2713 | \u2713 | \u2713 | 32-bit OpenBSD\n-`i686-uwp-windows-gnu` | ? |  |  |\n-`i686-uwp-windows-msvc` | ? |  |  |\n-`i686-wrs-vxworks` | ? |  |  |\n-`mips-unknown-linux-uclibc` | \u2713 |  |  | MIPS Linux with uClibc\n-`mipsel-unknown-linux-uclibc` | \u2713 |  |  | MIPS (LE) Linux with uClibc\n-`mipsel-sony-psp` | ** |  |  | MIPS (LE) Sony PlayStation Portable (PSP)\n-`mipsisa32r6-unknown-linux-gnu` | ? |  |  |\n-`mipsisa32r6el-unknown-linux-gnu` | ? |  |  |\n-`mipsisa64r6-unknown-linux-gnuabi64` | ? |  |  |\n-`mipsisa64r6el-unknown-linux-gnuabi64` | ? |  |  |\n-`msp430-none-elf` | * |  |  | 16-bit MSP430 microcontrollers\n-`powerpc-unknown-linux-gnuspe` | \u2713 |  |  | PowerPC SPE Linux\n-`powerpc-unknown-linux-musl` | ? |  |  |\n-`powerpc-unknown-netbsd` | ? |  |  |\n-`powerpc-wrs-vxworks` | ? |  |  |\n-`powerpc-wrs-vxworks-spe` | ? |  |  |\n-`powerpc64-unknown-freebsd` | \u2713 | \u2713 | \u2713 | PPC64 FreeBSD (ELFv1 and ELFv2)\n-`powerpc64-unknown-linux-musl` | ? |  |  |\n-`powerpc64-wrs-vxworks` | ? |  |  |\n-`powerpc64le-unknown-linux-musl` | ? |  |  |\n-`sparc-unknown-linux-gnu` | \u2713 |  |  | 32-bit SPARC Linux\n-`sparc64-unknown-netbsd` | \u2713 | \u2713 |  | NetBSD/sparc64\n-`sparc64-unknown-openbsd` | ? |  |  |\n-`thumbv7a-pc-windows-msvc` | ? |  |  |\n-`thumbv7a-uwp-windows-msvc` | \u2713 |  |  |\n-`thumbv7neon-unknown-linux-musleabihf` | ? |  |  | Thumb2-mode ARMv7a Linux with NEON, MUSL\n-`thumbv4t-none-eabi` | * |  |  | ARMv4T T32\n-`x86_64-apple-ios-macabi` | \u2713 |  |  | Apple Catalyst\n-`x86_64-apple-tvos` | ** | | | x86 64-bit tvOS\n-`x86_64-linux-kernel` | ? |  |  | Linux kernel modules\n-`x86_64-pc-solaris` | ? |  |  |\n-`x86_64-pc-windows-msvc` | \u2713 |  |  | 64-bit Windows XP support\n-`x86_64-unknown-dragonfly` | \u2713 | \u2713 | \u2713 | 64-bit DragonFlyBSD\n-`x86_64-unknown-haiku` | \u2713 | \u2713 | \u2713 | 64-bit Haiku\n-`x86_64-unknown-hermit` | ? |  |  |\n-`x86_64-unknown-hermit-kernel` | ? |  |  | HermitCore kernel\n-`x86_64-unknown-l4re-uclibc` | ? |  |  |\n-`x86_64-unknown-openbsd` | \u2713 | \u2713 | \u2713 | 64-bit OpenBSD\n-`x86_64-unknown-uefi` | ? |  |  |\n-`x86_64-uwp-windows-gnu` | \u2713 |  |  |\n-`x86_64-uwp-windows-msvc` | \u2713 |  |  |\n-`x86_64-wrs-vxworks` | ? |  |  |\n-\n-\n-\\* These targets only support `core`, not `alloc` or `std`.\n-\n-\\*\\* These targets only support `core` or `alloc`, not `std`.\n-\n-? These are targets that haven't yet been documented here. If you can shed some\n-  light on these platforms support, please create an issue or PR on the [Rust\n-  Forge repo].\n-\n-But those aren't the only platforms Rust can compile to! Those are the ones with\n-built-in target definitions and/or standard library support. When linking only\n-to the core library, Rust can also target additional \"bare metal\" platforms in\n-the x86, ARM, MIPS, and PowerPC families, though it may require defining custom\n-target specifications to do so.\n+target | std | host | notes\n+-------|-----|------|-------\n+`aarch64-apple-darwin` | ? |  | ARM64 macOS\n+`aarch64-apple-tvos` | * |  | ARM64 tvOS\n+`aarch64-unknown-cloudabi` | \u2713 |  | ARM64 CloudABI\n+`aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n+`aarch64-unknown-hermit` | ? |  |\n+`aarch64-unknown-netbsd` | ? |  |\n+`aarch64-unknown-openbsd` | \u2713 | \u2713 | ARM64 OpenBSD\n+`aarch64-unknown-redox` | ? |  | ARM64 Redox OS\n+`aarch64-uwp-windows-msvc` | ? |  |\n+`aarch64-wrs-vxworks` | ? |  |\n+`armv4t-unknown-linux-gnueabi` | ? |  |\n+`armv6-unknown-freebsd` | \u2713 | \u2713 | ARMv6 FreeBSD\n+`armv6-unknown-netbsd-eabihf` | ? |  |\n+`armv7-apple-ios` | \u2713 |  | RMv7 iOS, Cortex-\n+`armv7-unknown-cloudabi-eabihf` | \u2713 |  | ARMv7 CloudABI, hardfloat\n+`armv7-unknown-freebsd` | \u2713 | \u2713 | ARMv7 FreeBSD\n+`armv7-unknown-netbsd-eabihf` | ? |  |\n+`armv7-wrs-vxworks-eabihf` | ? |  |\n+`armv7a-none-eabihf` | * | | ARM Cortex-A, hardfloat\n+`armv7s-apple-ios` | \u2713 |  |\n+`avr-unknown-unknown` | ? |  | AVR\n+`hexagon-unknown-linux-musl` | ? |  |\n+`i386-apple-ios` | \u2713 |  | 32-bit x86 iOS\n+`i686-apple-darwin` | \u2713 | \u2713 | 32-bit OSX (10.7+, Lion+)\n+`i686-pc-windows-msvc` | \u2713 |  | 32-bit Windows XP support\n+`i686-unknown-cloudabi` | \u2713 |  | 32-bit CloudABI\n+`i686-unknown-uefi` | ? |  | 32-bit UEFI\n+`i686-unknown-haiku` | \u2713 | \u2713 | 32-bit Haiku\n+`i686-unknown-netbsd` | \u2713 |  | NetBSD/i386 with SSE2\n+`i686-unknown-openbsd` | \u2713 | \u2713 | 32-bit OpenBSD\n+`i686-uwp-windows-gnu` | ? |  |\n+`i686-uwp-windows-msvc` | ? |  |\n+`i686-wrs-vxworks` | ? |  |\n+`mips-unknown-linux-uclibc` | \u2713 |  | MIPS Linux with uClibc\n+`mipsel-unknown-linux-uclibc` | \u2713 |  | MIPS (LE) Linux with uClibc\n+`mipsel-sony-psp` | * |  | MIPS (LE) Sony PlayStation Portable (PSP)\n+`mipsisa32r6-unknown-linux-gnu` | ? |  |\n+`mipsisa32r6el-unknown-linux-gnu` | ? |  |\n+`mipsisa64r6-unknown-linux-gnuabi64` | ? |  |\n+`mipsisa64r6el-unknown-linux-gnuabi64` | ? |  |\n+`msp430-none-elf` | * |  | 16-bit MSP430 microcontrollers\n+`powerpc-unknown-linux-gnuspe` | \u2713 |  | PowerPC SPE Linux\n+`powerpc-unknown-linux-musl` | ? |  |\n+`powerpc-unknown-netbsd` | ? |  |\n+`powerpc-wrs-vxworks` | ? |  |\n+`powerpc-wrs-vxworks-spe` | ? |  |\n+`powerpc64-unknown-freebsd` | \u2713 | \u2713 | PPC64 FreeBSD (ELFv1 and ELFv2)\n+`powerpc64-unknown-linux-musl` | ? |  |\n+`powerpc64-wrs-vxworks` | ? |  |\n+`powerpc64le-unknown-linux-musl` | ? |  |\n+`sparc-unknown-linux-gnu` | \u2713 |  | 32-bit SPARC Linux\n+`sparc64-unknown-netbsd` | \u2713 | \u2713 | NetBSD/sparc64\n+`sparc64-unknown-openbsd` | ? |  |\n+`thumbv7a-pc-windows-msvc` | ? |  |\n+`thumbv7a-uwp-windows-msvc` | \u2713 |  |\n+`thumbv7neon-unknown-linux-musleabihf` | ? |  | Thumb2-mode ARMv7a Linux with NEON, MUSL\n+`thumbv4t-none-eabi` | * |  | ARMv4T T32\n+`x86_64-apple-ios-macabi` | \u2713 |  | Apple Catalyst\n+`x86_64-apple-tvos` | * | | x86 64-bit tvOS\n+`x86_64-linux-kernel` | ? |  | Linux kernel modules\n+`x86_64-pc-solaris` | ? |  |\n+`x86_64-pc-windows-msvc` | \u2713 |  | 64-bit Windows XP support\n+`x86_64-unknown-dragonfly` | \u2713 | \u2713 | 64-bit DragonFlyBSD\n+`x86_64-unknown-haiku` | \u2713 | \u2713 | 64-bit Haiku\n+`x86_64-unknown-hermit` | ? |  |\n+`x86_64-unknown-hermit-kernel` | ? |  | HermitCore kernel\n+`x86_64-unknown-l4re-uclibc` | ? |  |\n+`x86_64-unknown-openbsd` | \u2713 | \u2713 | 64-bit OpenBSD\n+`x86_64-unknown-uefi` | ? |  |\n+`x86_64-uwp-windows-gnu` | \u2713 |  |\n+`x86_64-uwp-windows-msvc` | \u2713 |  |\n+`x86_64-wrs-vxworks` | ? |  |\n \n [runs on NVIDIA GPUs]: https://github.com/japaric-archived/nvptx#targets\n-[Rust Forge repo]: https://github.com/rust-lang/rust-forge"}, {"sha": "c33b506cdaefbbe8c7b861e02d6b97bcec0a05ae", "filename": "src/doc/rustc/src/targets/built-in.md", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/392116e021f786b81dd12faec189a7d199dcd999/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fbuilt-in.md", "raw_url": "https://github.com/rust-lang/rust/raw/392116e021f786b81dd12faec189a7d199dcd999/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fbuilt-in.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fbuilt-in.md?ref=392116e021f786b81dd12faec189a7d199dcd999", "patch": "@@ -2,9 +2,14 @@\n \n `rustc` ships with the ability to compile to many targets automatically, we\n call these \"built-in\" targets, and they generally correspond to targets that\n-the team is supporting directly.\n+the team is supporting directly. To see the list of built-in targets, you can\n+run `rustc --print target-list`.\n \n-To see the list of built-in targets, you can run `rustc --print target-list`,\n-or look at [the API\n-docs](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_target/spec/index.html#modules).\n-Each module there defines a builder for a particular target.\n\\ No newline at end of file\n+Typically, a target needs a compiled copy of the Rust standard library to\n+work. If using [rustup], then check out the documentation on\n+[Cross-compilation][rustup-cross] on how to download a pre-built standard\n+library built by the official Rust distributions. Most targets will need a\n+system linker, and possibly other things.\n+\n+[rustup]: https://github.com/rust-lang/rustup\n+[rustup-cross]: https://github.com/rust-lang/rustup#cross-compilation"}]}