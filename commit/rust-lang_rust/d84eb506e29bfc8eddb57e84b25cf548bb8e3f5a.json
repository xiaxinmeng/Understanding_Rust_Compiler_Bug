{"sha": "d84eb506e29bfc8eddb57e84b25cf548bb8e3f5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NGViNTA2ZTI5YmZjOGVkZGI1N2U4NGIyNWNmNTQ4YmI4ZTNmNWE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-03T21:52:45Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-03T22:35:40Z"}, "message": "Fix TypedArena.", "tree": {"sha": "44da8ef62c2d8351e136d6e7f9da58c1eb38fc21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44da8ef62c2d8351e136d6e7f9da58c1eb38fc21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d84eb506e29bfc8eddb57e84b25cf548bb8e3f5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d84eb506e29bfc8eddb57e84b25cf548bb8e3f5a", "html_url": "https://github.com/rust-lang/rust/commit/d84eb506e29bfc8eddb57e84b25cf548bb8e3f5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d84eb506e29bfc8eddb57e84b25cf548bb8e3f5a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "html_url": "https://github.com/rust-lang/rust/commit/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9"}], "stats": {"total": 59, "additions": 12, "deletions": 47}, "files": [{"sha": "854942dad3ded1c849a57ad568570df4aa406a5d", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 12, "deletions": 47, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d84eb506e29bfc8eddb57e84b25cf548bb8e3f5a/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84eb506e29bfc8eddb57e84b25cf548bb8e3f5a/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=d84eb506e29bfc8eddb57e84b25cf548bb8e3f5a", "patch": "@@ -202,53 +202,18 @@ impl<T> TypedArena<T> {\n     #[inline]\n     pub fn alloc_from_iter<I: IntoIterator<Item = T>>(&self, iter: I) -> &mut [T] {\n         assert!(mem::size_of::<T>() != 0);\n-        let mut iter = iter.into_iter();\n-        let size_hint = iter.size_hint();\n-\n-        match size_hint {\n-            (min, Some(max)) if min == max => {\n-                // We know the exact number of elements the iterator will produce here\n-                let len = min;\n-\n-                if len == 0 {\n-                    return &mut [];\n-                }\n-\n-                self.ensure_capacity(len);\n-\n-                let slice = self.ptr.get();\n-\n-                unsafe {\n-                    let mut ptr = self.ptr.get();\n-                    for _ in 0..len {\n-                        // Write into uninitialized memory.\n-                        ptr::write(ptr, iter.next().unwrap());\n-                        // Advance the pointer.\n-                        ptr = ptr.offset(1);\n-                        // Update the pointer per iteration so if `iter.next()` panics\n-                        // we destroy the correct amount\n-                        self.ptr.set(ptr);\n-                    }\n-                    slice::from_raw_parts_mut(slice, len)\n-                }\n-            }\n-            _ => {\n-                cold_path(move || -> &mut [T] {\n-                    let mut vec: SmallVec<[_; 8]> = iter.collect();\n-                    if vec.is_empty() {\n-                        return &mut [];\n-                    }\n-                    // Move the content to the arena by copying it and then forgetting\n-                    // the content of the SmallVec\n-                    unsafe {\n-                        let len = vec.len();\n-                        let start_ptr = self.alloc_raw_slice(len);\n-                        vec.as_ptr().copy_to_nonoverlapping(start_ptr, len);\n-                        vec.set_len(0);\n-                        slice::from_raw_parts_mut(start_ptr, len)\n-                    }\n-                })\n-            }\n+        let mut vec: SmallVec<[_; 8]> = iter.into_iter().collect();\n+        if vec.is_empty() {\n+            return &mut [];\n+        }\n+        // Move the content to the arena by copying it and then forgetting\n+        // the content of the SmallVec\n+        unsafe {\n+            let len = vec.len();\n+            let start_ptr = self.alloc_raw_slice(len);\n+            vec.as_ptr().copy_to_nonoverlapping(start_ptr, len);\n+            vec.set_len(0);\n+            slice::from_raw_parts_mut(start_ptr, len)\n         }\n     }\n "}]}