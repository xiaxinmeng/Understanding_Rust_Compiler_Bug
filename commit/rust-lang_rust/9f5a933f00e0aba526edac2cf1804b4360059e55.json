{"sha": "9f5a933f00e0aba526edac2cf1804b4360059e55", "node_id": "C_kwDOAAsO6NoAKDlmNWE5MzNmMDBlMGFiYTUyNmVkYWMyY2YxODA0YjQzNjAwNTllNTU", "commit": {"author": {"name": "Arpad Borsos", "email": "swatinem@swatinem.de", "date": "2023-01-09T08:31:34Z"}, "committer": {"name": "Arpad Borsos", "email": "swatinem@swatinem.de", "date": "2023-01-09T15:31:24Z"}, "message": "Remove backwards compat for LLVM 12 coverage format", "tree": {"sha": "540a0f0bb5dfc6c6ba6277bc222129679570e49d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/540a0f0bb5dfc6c6ba6277bc222129679570e49d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f5a933f00e0aba526edac2cf1804b4360059e55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZNNjbpmzULCa7LeL/HvKd4JLMpgFAmO8M1AACgkQ/HvKd4JL\nMpi5vA//Zfx4mlNolG9Jv1U7TXDLf6ZiRhod50IIZiz8/75+0na4CZVlb3AbxO09\n1vWf29GAUmaFyfP7Yf+VLv1ar9CBZfT7pvIlo4TGckcNInbiXjfWWCOnWp0C1pZM\nnVP/mwO03EAMWqAUSci5pHeEZ91IDlsO1zykg9TNPDRZ4PSoW50zWTLFo5T2IMT5\n6CkvHFqEgG3G3aJCWcljoQ0x4ExP1R1QD3Bgdxf4v9gmDGUdh0XNB/y61Yh8nlig\nWeQfrg3OdNYvz8h+WWhLXAS/e6W3lUf/4lJvU68olVASmPfMMSGojDR7CCMkT9uF\nq9wTuseeBPFY+vr9NjeZqiEuF2sO/it1f3YzIKyEa8fZCJFFjOxMM8oZDy57uP9q\n7HOJ0jJHkcCf5nRHuweak8KMtx+/Zglf6P7Cwyg57ygx/RUpSMzvOkT7NipF9vDl\nG9PzR811K70+zf7IqE4mHKg7FSNSxfM+2A1+QHzk/HVNXl4yNQHuCnxX2Et3iCHN\nLetxPrBSWjEdNYd4uBxvM0Gto4RCPHvt0QGMKd8xa7bd4L6hCq/+EUTRDZLnL5jL\nGPKJ6NE7dmaEDMml5hlQeLBS4jms39QGR9kYErMVWbTHEqB+DBBnwcAzl8/2GOFf\npkRK+S387GK2qymR5TSvLcmdJ9ISQnDPo1GYCXPevGX80zarvbk=\n=8rG5\n-----END PGP SIGNATURE-----", "payload": "tree 540a0f0bb5dfc6c6ba6277bc222129679570e49d\nparent e94fab69d020d75517cb55fafacb2d270ad6e0ac\nauthor Arpad Borsos <swatinem@swatinem.de> 1673253094 +0100\ncommitter Arpad Borsos <swatinem@swatinem.de> 1673278284 +0100\n\nRemove backwards compat for LLVM 12 coverage format\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f5a933f00e0aba526edac2cf1804b4360059e55", "html_url": "https://github.com/rust-lang/rust/commit/9f5a933f00e0aba526edac2cf1804b4360059e55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f5a933f00e0aba526edac2cf1804b4360059e55/comments", "author": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e94fab69d020d75517cb55fafacb2d270ad6e0ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/e94fab69d020d75517cb55fafacb2d270ad6e0ac", "html_url": "https://github.com/rust-lang/rust/commit/e94fab69d020d75517cb55fafacb2d270ad6e0ac"}], "stats": {"total": 52, "additions": 17, "deletions": 35}, "files": [{"sha": "ca49c862324a087c19bea129ac564cba3928114b", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 17, "deletions": 28, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9f5a933f00e0aba526edac2cf1804b4360059e55/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5a933f00e0aba526edac2cf1804b4360059e55/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=9f5a933f00e0aba526edac2cf1804b4360059e55", "patch": "@@ -1,6 +1,5 @@\n use crate::common::CodegenCx;\n use crate::coverageinfo;\n-use crate::errors::InstrumentCoverageRequiresLLVM12;\n use crate::llvm;\n \n use llvm::coverageinfo::CounterMappingRegion;\n@@ -19,8 +18,8 @@ use std::ffi::CString;\n \n /// Generates and exports the Coverage Map.\n ///\n-/// Rust Coverage Map generation supports LLVM Coverage Mapping Format versions\n-/// 5 (LLVM 12, only) and 6 (zero-based encoded as 4 and 5, respectively), as defined at\n+/// Rust Coverage Map generation supports LLVM Coverage Mapping Format version\n+/// 6 (zero-based encoded as 5), as defined at\n /// [LLVM Code Coverage Mapping Format](https://github.com/rust-lang/llvm-project/blob/rustc/13.0-2021-09-30/llvm/docs/CoverageMappingFormat.rst#llvm-code-coverage-mapping-format).\n /// These versions are supported by the LLVM coverage tools (`llvm-profdata` and `llvm-cov`)\n /// bundled with Rust's fork of LLVM.\n@@ -33,13 +32,10 @@ use std::ffi::CString;\n pub fn finalize(cx: &CodegenCx<'_, '_>) {\n     let tcx = cx.tcx;\n \n-    // Ensure the installed version of LLVM supports at least Coverage Map\n-    // Version 5 (encoded as a zero-based value: 4), which was introduced with\n-    // LLVM 12.\n+    // Ensure the installed version of LLVM supports Coverage Map Version 6\n+    // (encoded as a zero-based value: 5), which was introduced with LLVM 13.\n     let version = coverageinfo::mapping_version();\n-    if version < 4 {\n-        tcx.sess.emit_fatal(InstrumentCoverageRequiresLLVM12);\n-    }\n+    assert_eq!(version, 5, \"The `CoverageMappingVersion` exposed by `llvm-wrapper` is out of sync\");\n \n     debug!(\"Generating coverage map for CodegenUnit: `{}`\", cx.codegen_unit.name());\n \n@@ -61,7 +57,7 @@ pub fn finalize(cx: &CodegenCx<'_, '_>) {\n         return;\n     }\n \n-    let mut mapgen = CoverageMapGenerator::new(tcx, version);\n+    let mut mapgen = CoverageMapGenerator::new(tcx);\n \n     // Encode coverage mappings and generate function records\n     let mut function_data = Vec::new();\n@@ -124,25 +120,18 @@ struct CoverageMapGenerator {\n }\n \n impl CoverageMapGenerator {\n-    fn new(tcx: TyCtxt<'_>, version: u32) -> Self {\n+    fn new(tcx: TyCtxt<'_>) -> Self {\n         let mut filenames = FxIndexSet::default();\n-        if version >= 5 {\n-            // LLVM Coverage Mapping Format version 6 (zero-based encoded as 5)\n-            // requires setting the first filename to the compilation directory.\n-            // Since rustc generates coverage maps with relative paths, the\n-            // compilation directory can be combined with the relative paths\n-            // to get absolute paths, if needed.\n-            let working_dir = tcx\n-                .sess\n-                .opts\n-                .working_dir\n-                .remapped_path_if_available()\n-                .to_string_lossy()\n-                .to_string();\n-            let c_filename =\n-                CString::new(working_dir).expect(\"null error converting filename to C string\");\n-            filenames.insert(c_filename);\n-        }\n+        // LLVM Coverage Mapping Format version 6 (zero-based encoded as 5)\n+        // requires setting the first filename to the compilation directory.\n+        // Since rustc generates coverage maps with relative paths, the\n+        // compilation directory can be combined with the relative paths\n+        // to get absolute paths, if needed.\n+        let working_dir =\n+            tcx.sess.opts.working_dir.remapped_path_if_available().to_string_lossy().to_string();\n+        let c_filename =\n+            CString::new(working_dir).expect(\"null error converting filename to C string\");\n+        filenames.insert(c_filename);\n         Self { filenames }\n     }\n "}, {"sha": "001d1ce93d8b479ee6184658373b78504813dab9", "filename": "compiler/rustc_codegen_llvm/src/errors.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f5a933f00e0aba526edac2cf1804b4360059e55/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5a933f00e0aba526edac2cf1804b4360059e55/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs?ref=9f5a933f00e0aba526edac2cf1804b4360059e55", "patch": "@@ -39,10 +39,6 @@ pub(crate) struct ErrorCreatingImportLibrary<'a> {\n     pub error: String,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(codegen_llvm_instrument_coverage_requires_llvm_12)]\n-pub(crate) struct InstrumentCoverageRequiresLLVM12;\n-\n #[derive(Diagnostic)]\n #[diag(codegen_llvm_symbol_already_defined)]\n pub(crate) struct SymbolAlreadyDefined<'a> {"}, {"sha": "b82c903290b9a2c10c42db4fcfd036335bbdd8d4", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_llvm.ftl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f5a933f00e0aba526edac2cf1804b4360059e55/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9f5a933f00e0aba526edac2cf1804b4360059e55/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl?ref=9f5a933f00e0aba526edac2cf1804b4360059e55", "patch": "@@ -11,9 +11,6 @@ codegen_llvm_unknown_ctarget_feature_prefix =\n codegen_llvm_error_creating_import_library =\n     Error creating import library for {$lib_name}: {$error}\n \n-codegen_llvm_instrument_coverage_requires_llvm_12 =\n-    rustc option `-C instrument-coverage` requires LLVM 12 or higher.\n-\n codegen_llvm_symbol_already_defined =\n     symbol `{$symbol_name}` is already defined\n "}]}