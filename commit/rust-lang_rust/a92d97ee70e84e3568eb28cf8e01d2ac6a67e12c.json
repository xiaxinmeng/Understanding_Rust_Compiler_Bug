{"sha": "a92d97ee70e84e3568eb28cf8e01d2ac6a67e12c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MmQ5N2VlNzBlODRlMzU2OGViMjhjZjhlMDFkMmFjNmE2N2UxMmM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-04-02T12:23:23Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-05-25T08:07:01Z"}, "message": "There's a tcx in scope, don't use the tls one", "tree": {"sha": "ada0c49b26e5146704e6acc46c83c68ee30fcbfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ada0c49b26e5146704e6acc46c83c68ee30fcbfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a92d97ee70e84e3568eb28cf8e01d2ac6a67e12c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a92d97ee70e84e3568eb28cf8e01d2ac6a67e12c", "html_url": "https://github.com/rust-lang/rust/commit/a92d97ee70e84e3568eb28cf8e01d2ac6a67e12c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a92d97ee70e84e3568eb28cf8e01d2ac6a67e12c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b", "html_url": "https://github.com/rust-lang/rust/commit/8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "81f5c87184e3c335fa041a0e1dab8a8764f5568e", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a92d97ee70e84e3568eb28cf8e01d2ac6a67e12c/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a92d97ee70e84e3568eb28cf8e01d2ac6a67e12c/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=a92d97ee70e84e3568eb28cf8e01d2ac6a67e12c", "patch": "@@ -1557,31 +1557,27 @@ define_print_and_forward_display! {\n             (ConstValue::Scalar(Scalar::Bits { bits, ..}), ty::Uint(ui)) =>\n                 p!(write(\"{}{}\", bits, ui)),\n             (ConstValue::Scalar(Scalar::Bits { bits, ..}), ty::Int(i)) => {\n-                let size = ty::tls::with(|tcx| {\n-                    let ty = tcx.lift_to_global(&self.ty).unwrap();\n-                    tcx.layout_of(ty::ParamEnv::empty().and(ty))\n-                        .unwrap()\n-                        .size\n-                });\n+                let ty = cx.tcx().lift_to_global(&self.ty).unwrap();\n+                let size = cx.tcx().layout_of(ty::ParamEnv::empty().and(ty))\n+                    .unwrap()\n+                    .size;\n                 p!(write(\"{}{}\", sign_extend(bits, size) as i128, i))\n             },\n             (ConstValue::Scalar(Scalar::Bits { bits, ..}), ty::Char)\n                 => p!(write(\"{}\", ::std::char::from_u32(bits as u32).unwrap())),\n-            (_, ty::FnDef(did, _)) => p!(write(\"{}\", ty::tls::with(|tcx| tcx.def_path_str(*did)))),\n+            (_, ty::FnDef(did, _)) => p!(write(\"{}\", cx.tcx().def_path_str(*did))),\n             (ConstValue::Slice(_, 0), ty::Ref(_, &ty::TyS { sty: ty::Str, .. }, _)) =>\n                 p!(write(\"\\\"\\\"\")),\n             (\n                 ConstValue::Slice(Scalar::Ptr(ptr), len),\n                 ty::Ref(_, &ty::TyS { sty: ty::Str, .. }, _),\n             ) => {\n-                ty::tls::with(|tcx| {\n-                    let alloc = tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id);\n-                    assert_eq!(len as usize as u64, len);\n-                    let slice =\n-                        &alloc.bytes[(ptr.offset.bytes() as usize)..][..(len as usize)];\n-                    let s = ::std::str::from_utf8(slice).expect(\"non utf8 str from miri\");\n-                    Ok(p!(write(\"{:?}\", s)))\n-                })?;\n+                let alloc = cx.tcx().alloc_map.lock().unwrap_memory(ptr.alloc_id);\n+                assert_eq!(len as usize as u64, len);\n+                let slice =\n+                    &alloc.bytes[(ptr.offset.bytes() as usize)..][..(len as usize)];\n+                let s = ::std::str::from_utf8(slice).expect(\"non utf8 str from miri\");\n+                p!(write(\"{:?}\", s))\n             },\n             _ => p!(write(\"{:?} : \", self.val), print(self.ty)),\n         }"}]}