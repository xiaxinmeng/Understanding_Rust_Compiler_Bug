{"sha": "758091c06329e71ba54d5756cc064cba56f68403", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ODA5MWMwNjMyOWU3MWJhNTRkNTc1NmNjMDY0Y2JhNTZmNjg0MDM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-12-19T10:47:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-19T10:47:17Z"}, "message": "Rollup merge of #56918 - ljedrz:profiler_nits, r=wesleywiser\n\nProfiler: simplify total_duration, improve readability\n\nr? @wesleywiser", "tree": {"sha": "086af00a2a48b43fea92df369dbe0186e7c62b58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/086af00a2a48b43fea92df369dbe0186e7c62b58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/758091c06329e71ba54d5756cc064cba56f68403", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcGiG2CRBK7hj4Ov3rIwAAdHIIAHgbZYoVv1Xm78tJZ45NGbpi\nnRIgCkowN9sMdYmFNq0c31kXaiGIWc9bIFaupnE8HsLZK6fczXae0leQWFVQOxt5\ny1v/5DB7R6XgnM4m+HDxUsuRp0l7LDh8JoT/51rtRWtzspRhWAP1lolqOvdPVJ4U\nFKSdLgkRxCXC3V55u2i+ISwMoyhDFano7ke6kpmK4wsgGwBDyG9MLiTOvR98QO8w\n+kUQm5npixJlXMkFuIQcolvYxLe591QVKW6CcGk9jVkGnyHTBPcp0ry9z0M636gp\nocBr3zzPLqAQv+RR9XfUl+CPlhME/orrkzfE0RA57cpH4tT3fA9aPUhmUW+y+hg=\n=TKUG\n-----END PGP SIGNATURE-----\n", "payload": "tree 086af00a2a48b43fea92df369dbe0186e7c62b58\nparent 4bd8f2bb74329fbdaca684fe163c8e840591d4af\nparent 826cda664089f6468460e68a1f5f7ae0a47d1587\nauthor Pietro Albini <pietro@pietroalbini.org> 1545216437 +0100\ncommitter GitHub <noreply@github.com> 1545216437 +0100\n\nRollup merge of #56918 - ljedrz:profiler_nits, r=wesleywiser\n\nProfiler: simplify total_duration, improve readability\n\nr? @wesleywiser\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/758091c06329e71ba54d5756cc064cba56f68403", "html_url": "https://github.com/rust-lang/rust/commit/758091c06329e71ba54d5756cc064cba56f68403", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/758091c06329e71ba54d5756cc064cba56f68403/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bd8f2bb74329fbdaca684fe163c8e840591d4af", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd8f2bb74329fbdaca684fe163c8e840591d4af", "html_url": "https://github.com/rust-lang/rust/commit/4bd8f2bb74329fbdaca684fe163c8e840591d4af"}, {"sha": "826cda664089f6468460e68a1f5f7ae0a47d1587", "url": "https://api.github.com/repos/rust-lang/rust/commits/826cda664089f6468460e68a1f5f7ae0a47d1587", "html_url": "https://github.com/rust-lang/rust/commit/826cda664089f6468460e68a1f5f7ae0a47d1587"}], "stats": {"total": 119, "additions": 57, "deletions": 62}, "files": [{"sha": "0d4610d288ce6f0818e975b9da43e49f70c647a5", "filename": "src/librustc_driver/profile/mod.rs", "status": "modified", "additions": 57, "deletions": 62, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/758091c06329e71ba54d5756cc064cba56f68403/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/758091c06329e71ba54d5756cc064cba56f68403/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Fmod.rs?ref=758091c06329e71ba54d5756cc064cba56f68403", "patch": "@@ -64,9 +64,7 @@ struct StackFrame {\n }\n \n fn total_duration(traces: &[trace::Rec]) -> Duration {\n-    let mut sum : Duration = Duration::new(0, 0);\n-    for t in traces.iter() { sum += t.dur_total; }\n-    return sum\n+    Duration::new(0, 0) + traces.iter().map(|t| t.dur_total).sum()\n }\n \n // profiling thread; retains state (in local variables) and dump traces, upon request.\n@@ -93,50 +91,48 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n             ProfileQueriesMsg::Dump(params) => {\n                 assert!(stack.is_empty());\n                 assert!(frame.parse_st == ParseState::Clear);\n-                {\n-                    // write log of all messages\n-                    if params.dump_profq_msg_log {\n-                        let mut log_file =\n-                            File::create(format!(\"{}.log.txt\", params.path)).unwrap();\n-                        for m in profq_msgs.iter() {\n-                            writeln!(&mut log_file, \"{:?}\", m).unwrap()\n-                        };\n-                    }\n \n-                    // write HTML file, and counts file\n-                    let html_path = format!(\"{}.html\", params.path);\n-                    let mut html_file = File::create(&html_path).unwrap();\n+                // write log of all messages\n+                if params.dump_profq_msg_log {\n+                    let mut log_file =\n+                        File::create(format!(\"{}.log.txt\", params.path)).unwrap();\n+                    for m in profq_msgs.iter() {\n+                        writeln!(&mut log_file, \"{:?}\", m).unwrap()\n+                    };\n+                }\n \n-                    let counts_path = format!(\"{}.counts.txt\", params.path);\n-                    let mut counts_file = File::create(&counts_path).unwrap();\n+                // write HTML file, and counts file\n+                let html_path = format!(\"{}.html\", params.path);\n+                let mut html_file = File::create(&html_path).unwrap();\n \n-                    writeln!(html_file,\n-                        \"<html>\\n<head>\\n<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{}\\\">\",\n-                        \"profile_queries.css\").unwrap();\n-                    writeln!(html_file, \"<style>\").unwrap();\n-                    trace::write_style(&mut html_file);\n-                    writeln!(html_file, \"</style>\\n</head>\\n<body>\").unwrap();\n-                    trace::write_traces(&mut html_file, &mut counts_file, &frame.traces);\n-                    writeln!(html_file, \"</body>\\n</html>\").unwrap();\n+                let counts_path = format!(\"{}.counts.txt\", params.path);\n+                let mut counts_file = File::create(&counts_path).unwrap();\n \n-                    let ack_path = format!(\"{}.ack\", params.path);\n-                    let ack_file = File::create(&ack_path).unwrap();\n-                    drop(ack_file);\n+                writeln!(html_file,\n+                    \"<html>\\n<head>\\n<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{}\\\">\",\n+                    \"profile_queries.css\").unwrap();\n+                writeln!(html_file, \"<style>\").unwrap();\n+                trace::write_style(&mut html_file);\n+                writeln!(html_file, \"</style>\\n</head>\\n<body>\").unwrap();\n+                trace::write_traces(&mut html_file, &mut counts_file, &frame.traces);\n+                writeln!(html_file, \"</body>\\n</html>\").unwrap();\n \n-                    // Tell main thread that we are done, e.g., so it can exit\n-                    params.ack.send(()).unwrap();\n-                }\n-                continue\n+                let ack_path = format!(\"{}.ack\", params.path);\n+                let ack_file = File::create(&ack_path).unwrap();\n+                drop(ack_file);\n+\n+                // Tell main thread that we are done, e.g., so it can exit\n+                params.ack.send(()).unwrap();\n             }\n             // Actual query message:\n             msg => {\n                 // Record msg in our log\n                 profq_msgs.push(msg.clone());\n                 // Respond to the message, knowing that we've already handled Halt and Dump, above.\n                 match (frame.parse_st.clone(), msg) {\n-                    (_,ProfileQueriesMsg::Halt) => unreachable!(),\n-                    (_,ProfileQueriesMsg::Dump(_)) => unreachable!(),\n-\n+                    (_, ProfileQueriesMsg::Halt) | (_, ProfileQueriesMsg::Dump(_)) => {\n+                        unreachable!();\n+                    },\n                     // Parse State: Clear\n                     (ParseState::Clear,\n                      ProfileQueriesMsg::QueryBegin(span, querymsg)) => {\n@@ -163,8 +159,8 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                                     ParseState::HaveQuery(q, start) => {\n                                         let duration = start.elapsed();\n                                         frame = StackFrame{\n-                                            parse_st:ParseState::Clear,\n-                                            traces:old_frame.traces\n+                                            parse_st: ParseState::Clear,\n+                                            traces: old_frame.traces\n                                         };\n                                         let dur_extent = total_duration(&provider_extent);\n                                         let trace = Rec {\n@@ -181,18 +177,16 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                             }\n                         }\n                     },\n-\n-\n                     (ParseState::Clear,\n                      ProfileQueriesMsg::TimeBegin(msg)) => {\n                         let start = Instant::now();\n                         frame.parse_st = ParseState::HaveTimeBegin(msg, start);\n                         stack.push(frame);\n-                        frame = StackFrame{parse_st:ParseState::Clear, traces:vec![]};\n+                        frame = StackFrame{parse_st: ParseState::Clear, traces: vec![]};\n+                    },\n+                    (_, ProfileQueriesMsg::TimeBegin(_)) => {\n+                        panic!(\"parse error; did not expect time begin here\");\n                     },\n-                    (_, ProfileQueriesMsg::TimeBegin(_)) =>\n-                        panic!(\"parse error; did not expect time begin here\"),\n-\n                     (ParseState::Clear,\n                      ProfileQueriesMsg::TimeEnd) => {\n                         let provider_extent = frame.traces;\n@@ -204,8 +198,8 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                                     ParseState::HaveTimeBegin(msg, start) => {\n                                         let duration = start.elapsed();\n                                         frame = StackFrame{\n-                                            parse_st:ParseState::Clear,\n-                                            traces:old_frame.traces\n+                                            parse_st: ParseState::Clear,\n+                                            traces: old_frame.traces\n                                         };\n                                         let dur_extent = total_duration(&provider_extent);\n                                         let trace = Rec {\n@@ -222,18 +216,19 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                             }\n                         }\n                     },\n-                    (_, ProfileQueriesMsg::TimeEnd) => { panic!(\"parse error\") }\n-\n+                    (_, ProfileQueriesMsg::TimeEnd) => {\n+                        panic!(\"parse error\")\n+                    },\n                     (ParseState::Clear,\n                      ProfileQueriesMsg::TaskBegin(key)) => {\n                         let start = Instant::now();\n                         frame.parse_st = ParseState::HaveTaskBegin(key, start);\n                         stack.push(frame);\n-                        frame = StackFrame{parse_st:ParseState::Clear, traces:vec![]};\n+                        frame = StackFrame{ parse_st: ParseState::Clear, traces: vec![] };\n+                    },\n+                    (_, ProfileQueriesMsg::TaskBegin(_)) => {\n+                        panic!(\"parse error; did not expect time begin here\");\n                     },\n-                    (_, ProfileQueriesMsg::TaskBegin(_)) =>\n-                        panic!(\"parse error; did not expect time begin here\"),\n-\n                     (ParseState::Clear,\n                      ProfileQueriesMsg::TaskEnd) => {\n                         let provider_extent = frame.traces;\n@@ -245,8 +240,8 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                                     ParseState::HaveTaskBegin(key, start) => {\n                                         let duration = start.elapsed();\n                                         frame = StackFrame{\n-                                            parse_st:ParseState::Clear,\n-                                            traces:old_frame.traces\n+                                            parse_st: ParseState::Clear,\n+                                            traces: old_frame.traces\n                                         };\n                                         let dur_extent = total_duration(&provider_extent);\n                                         let trace = Rec {\n@@ -263,8 +258,9 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                             }\n                         }\n                     },\n-                    (_, ProfileQueriesMsg::TaskEnd) => { panic!(\"parse error\") }\n-\n+                    (_, ProfileQueriesMsg::TaskEnd) => {\n+                        panic!(\"parse error\")\n+                    },\n                     // Parse State: HaveQuery\n                     (ParseState::HaveQuery(q,start),\n                      ProfileQueriesMsg::CacheHit) => {\n@@ -279,26 +275,25 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                         frame.traces.push( trace );\n                         frame.parse_st = ParseState::Clear;\n                     },\n-                    (ParseState::HaveQuery(_,_),\n+                    (ParseState::HaveQuery(_, _),\n                      ProfileQueriesMsg::ProviderBegin) => {\n                         stack.push(frame);\n-                        frame = StackFrame{parse_st:ParseState::Clear, traces:vec![]};\n+                        frame = StackFrame{ parse_st: ParseState::Clear, traces: vec![] };\n                     },\n \n                     // Parse errors:\n \n-                    (ParseState::HaveQuery(q,_),\n+                    (ParseState::HaveQuery(q, _),\n                      ProfileQueriesMsg::ProviderEnd) => {\n                         panic!(\"parse error: unexpected ProviderEnd; \\\n                                 expected something else to follow BeginQuery for {:?}\", q)\n                     },\n-                    (ParseState::HaveQuery(q1,_),\n-                     ProfileQueriesMsg::QueryBegin(span2,querymsg2)) => {\n+                    (ParseState::HaveQuery(q1, _),\n+                     ProfileQueriesMsg::QueryBegin(span2, querymsg2)) => {\n                         panic!(\"parse error: unexpected QueryBegin; \\\n                                 earlier query is unfinished: {:?} and now {:?}\",\n-                               q1, Query{span:span2, msg:querymsg2})\n+                               q1, Query{span:span2, msg: querymsg2})\n                     },\n-\n                     (ParseState::HaveTimeBegin(_, _), _) => {\n                         unreachable!()\n                     },"}]}