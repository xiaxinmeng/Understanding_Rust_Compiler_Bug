{"sha": "08d951768f6f9b98ca5ffe3385adfb3f1935af22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZDk1MTc2OGY2ZjliOThjYTVmZmUzMzg1YWRmYjNmMTkzNWFmMjI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2020-08-11T13:19:16Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.de", "date": "2020-08-13T12:14:33Z"}, "message": "self-profile: Cache more query key strings when doing self-profiling.", "tree": {"sha": "d30c023fc69e46dbc1d3f4db8f935beacd57ff14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d30c023fc69e46dbc1d3f4db8f935beacd57ff14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08d951768f6f9b98ca5ffe3385adfb3f1935af22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08d951768f6f9b98ca5ffe3385adfb3f1935af22", "html_url": "https://github.com/rust-lang/rust/commit/08d951768f6f9b98ca5ffe3385adfb3f1935af22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08d951768f6f9b98ca5ffe3385adfb3f1935af22/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fbed1739c384faabf00cd8a62abedbf506e949b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fbed1739c384faabf00cd8a62abedbf506e949b", "html_url": "https://github.com/rust-lang/rust/commit/3fbed1739c384faabf00cd8a62abedbf506e949b"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "9b1837356e3053df7778812c8de0e2b1864b1d49", "filename": "src/librustc_middle/ty/query/profiling_support.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/08d951768f6f9b98ca5ffe3385adfb3f1935af22/src%2Flibrustc_middle%2Fty%2Fquery%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08d951768f6f9b98ca5ffe3385adfb3f1935af22/src%2Flibrustc_middle%2Fty%2Fquery%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fprofiling_support.rs?ref=08d951768f6f9b98ca5ffe3385adfb3f1935af22", "patch": "@@ -1,8 +1,9 @@\n use crate::ty::context::TyCtxt;\n+use crate::ty::WithOptConstParam;\n use measureme::{StringComponent, StringId};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::SelfProfiler;\n-use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathData;\n use rustc_query_system::query::QueryCache;\n use rustc_query_system::query::QueryState;\n@@ -154,6 +155,49 @@ impl SpecIntoSelfProfilingString for DefIndex {\n     }\n }\n \n+impl SpecIntoSelfProfilingString for LocalDefId {\n+    fn spec_to_self_profile_string(\n+        &self,\n+        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n+    ) -> StringId {\n+        builder.def_id_to_string_id(DefId { krate: LOCAL_CRATE, index: self.local_def_index })\n+    }\n+}\n+\n+impl<T: SpecIntoSelfProfilingString> SpecIntoSelfProfilingString for WithOptConstParam<T> {\n+    fn spec_to_self_profile_string(\n+        &self,\n+        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n+    ) -> StringId {\n+        // We print `WithOptConstParam` values as tuples to make them shorter\n+        // and more readable, without losing information:\n+        //\n+        // \"WithOptConstParam { did: foo::bar, const_param_did: Some(foo::baz) }\"\n+        // becomes \"(foo::bar, foo::baz)\" and\n+        // \"WithOptConstParam { did: foo::bar, const_param_did: None }\"\n+        // becomes \"(foo::bar, _)\".\n+\n+        let did = StringComponent::Ref(self.did.to_self_profile_string(builder));\n+\n+        let const_param_did = if let Some(const_param_did) = self.const_param_did {\n+            let const_param_did = builder.def_id_to_string_id(const_param_did);\n+            StringComponent::Ref(const_param_did)\n+        } else {\n+            StringComponent::Value(\"_\")\n+        };\n+\n+        let components = [\n+            StringComponent::Value(\"(\"),\n+            did,\n+            StringComponent::Value(\", \"),\n+            const_param_did,\n+            StringComponent::Value(\")\"),\n+        ];\n+\n+        builder.profiler.alloc_string(&components[..])\n+    }\n+}\n+\n impl<T0, T1> SpecIntoSelfProfilingString for (T0, T1)\n where\n     T0: SpecIntoSelfProfilingString,"}]}