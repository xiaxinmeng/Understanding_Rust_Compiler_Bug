{"sha": "9eb336a0206178f52146d41dd152166233df703b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYjMzNmEwMjA2MTc4ZjUyMTQ2ZDQxZGQxNTIxNjYyMzNkZjcwM2I=", "commit": {"author": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2014-04-09T16:27:35Z"}, "committer": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2014-04-14T01:00:49Z"}, "message": "rustdoc: Get rid of `allPaths` global variable by merging it into `searchIndex`.", "tree": {"sha": "0a9d3f97b43886a8ed6e205043638b7d2cbc2f2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a9d3f97b43886a8ed6e205043638b7d2cbc2f2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9eb336a0206178f52146d41dd152166233df703b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb336a0206178f52146d41dd152166233df703b", "html_url": "https://github.com/rust-lang/rust/commit/9eb336a0206178f52146d41dd152166233df703b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9eb336a0206178f52146d41dd152166233df703b/comments", "author": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6854ab46c1303cfee508a4537e235166cd6cc3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6854ab46c1303cfee508a4537e235166cd6cc3e", "html_url": "https://github.com/rust-lang/rust/commit/f6854ab46c1303cfee508a4537e235166cd6cc3e"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "d7739daad57e7bac77114ef9bcbfdb87809036e5", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9eb336a0206178f52146d41dd152166233df703b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb336a0206178f52146d41dd152166233df703b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=9eb336a0206178f52146d41dd152166233df703b", "patch": "@@ -308,7 +308,7 @@ pub fn run(mut krate: clean::Crate, dst: Path) -> io::IoResult<()> {\n     // Publish the search index\n     let index = {\n         let mut w = MemWriter::new();\n-        try!(write!(&mut w, \"searchIndex['{}'] = [\", krate.name));\n+        try!(write!(&mut w, r#\"searchIndex['{}'] = \\{\"items\":[\"#, krate.name));\n         for (i, item) in cache.search_index.iter().enumerate() {\n             if i > 0 {\n                 try!(write!(&mut w, \",\"));\n@@ -325,8 +325,7 @@ pub fn run(mut krate: clean::Crate, dst: Path) -> io::IoResult<()> {\n             }\n             try!(write!(&mut w, \"]\"));\n         }\n-        try!(write!(&mut w, \"];\"));\n-        try!(write!(&mut w, \"allPaths['{}'] = [\", krate.name));\n+        try!(write!(&mut w, r#\"],\"paths\":[\"#));\n         for (i, &nodeid) in pathid_to_nodeid.iter().enumerate() {\n             let &(ref fqp, short) = cache.paths.find(&nodeid).unwrap();\n             if i > 0 {\n@@ -335,7 +334,7 @@ pub fn run(mut krate: clean::Crate, dst: Path) -> io::IoResult<()> {\n             try!(write!(&mut w, r#\"[{:u},\"{}\"]\"#,\n                         short, *fqp.last().unwrap()));\n         }\n-        try!(write!(&mut w, \"];\"));\n+        try!(write!(&mut w, r\"]\\};\"));\n \n         str::from_utf8(w.unwrap().as_slice()).unwrap().to_owned()\n     };\n@@ -371,7 +370,7 @@ pub fn run(mut krate: clean::Crate, dst: Path) -> io::IoResult<()> {\n             }\n         }\n         let mut w = try!(File::create(&dst));\n-        try!(writeln!(&mut w, r\"var searchIndex = \\{\\}; var allPaths = \\{\\};\"));\n+        try!(writeln!(&mut w, r\"var searchIndex = \\{\\};\"));\n         for index in all_indexes.iter() {\n             try!(writeln!(&mut w, \"{}\", *index));\n         }"}, {"sha": "9ef25c50206f650ff72cf606bfcc5faa6c7690ea", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9eb336a0206178f52146d41dd152166233df703b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/9eb336a0206178f52146d41dd152166233df703b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=9eb336a0206178f52146d41dd152166233df703b", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n /*jslint browser: true, es5: true */\n-/*globals $: true, rootPath: true, allPaths: true */\n+/*globals $: true, rootPath: true */\n \n (function() {\n     \"use strict\";\n@@ -258,7 +258,7 @@\n                 var result = results[i],\n                     name = result.item.name.toLowerCase(),\n                     path = result.item.path.toLowerCase(),\n-                    parent = allPaths[result.item.crate][result.item.parent];\n+                    parent = result.item.parent;\n \n                 var valid = validateResult(name, path, split, parent);\n                 if (!valid) {\n@@ -294,7 +294,7 @@\n                     if ((validate) &&\n                         (name.toLowerCase().indexOf(keys[i]) > -1 ||\n                          path.toLowerCase().indexOf(keys[i]) > -1 ||\n-                         parent[1].toLowerCase().indexOf(keys[i]) > -1))\n+                         parent.name.toLowerCase().indexOf(keys[i]) > -1))\n                     {\n                         validate = true;\n                     } else {\n@@ -422,15 +422,13 @@\n                             '/index.html\" class=\"' + type +\n                             '\">' + name + '</a>';\n                     } else if (item.parent !== undefined) {\n-                        var myparent = allPaths[item.crate][item.parent];\n-                        var parentType = myparent[0];\n-                        var parentName = myparent[1];\n+                        var myparent = item.parent;\n                         var anchor = '#' + type + '.' + name;\n-                        output += item.path + '::' + parentName +\n+                        output += item.path + '::' + myparent.name +\n                             '::<a href=\"' + rootPath +\n                             item.path.replace(/::/g, '/') +\n-                            '/' + itemTypes[parentType] +\n-                            '.' + parentName +\n+                            '/' + itemTypes[myparent.ty] +\n+                            '.' + myparent.name +\n                             '.html' + anchor +\n                             '\" class=\"' + type +\n                             '\">' + name + '</a>';\n@@ -538,18 +536,36 @@\n             var searchWords = [];\n             for (var crate in rawSearchIndex) {\n                 if (!rawSearchIndex.hasOwnProperty(crate)) { continue }\n-                var len = rawSearchIndex[crate].length;\n-                var i = 0;\n \n+                // an array of [(Number) item type,\n+                //              (String) name,\n+                //              (String) full path,\n+                //              (String) description,\n+                //              (optional Number) the parent path index to `paths`]\n+                var items = rawSearchIndex[crate].items;\n+                // an array of [(Number) item type,\n+                //              (String) name]\n+                var paths = rawSearchIndex[crate].paths;\n+\n+                // convert `paths` into an object form\n+                var len = paths.length;\n+                for (var i = 0; i < len; ++i) {\n+                    paths[i] = {ty: paths[i][0], name: paths[i][1]};\n+                }\n+\n+                // convert `items` into an object form, and construct word indices.\n+                //\n                 // before any analysis is performed lets gather the search terms to\n                 // search against apart from the rest of the data.  This is a quick\n                 // operation that is cached for the life of the page state so that\n                 // all other search operations have access to this cached data for\n                 // faster analysis operations\n-                for (i = 0; i < len; i += 1) {\n-                    var rawRow = rawSearchIndex[crate][i];\n+                var len = items.length;\n+                for (var i = 0; i < len; i += 1) {\n+                    var rawRow = items[i];\n                     var row = {crate: crate, ty: rawRow[0], name: rawRow[1],\n-                               path: rawRow[2], desc: rawRow[3], parent: rawRow[4]};\n+                               path: rawRow[2], desc: rawRow[3],\n+                               parent: paths[rawRow[4]]};\n                     searchIndex.push(row);\n                     if (typeof row.name === \"string\") {\n                         var word = row.name.toLowerCase();"}]}