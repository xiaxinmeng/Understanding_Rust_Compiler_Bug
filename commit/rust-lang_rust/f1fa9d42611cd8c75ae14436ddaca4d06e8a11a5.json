{"sha": "f1fa9d42611cd8c75ae14436ddaca4d06e8a11a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZmE5ZDQyNjExY2Q4Yzc1YWUxNDQzNmRkYWNhNGQwNmU4YTExYTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-16T13:08:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-16T13:08:28Z"}, "message": "Rollup merge of #56789 - alexcrichton:simd_select_bitmask, r=rkruppe\n\nrustc: Add an unstable `simd_select_bitmask` intrinsic\n\nThis is going to be required for binding a number of AVX-512 intrinsics\nin the `stdsimd` repository, and this intrinsic is the same as\n`simd_select` except that it takes a bitmask as the first argument\ninstead of a SIMD vector. This bitmask is then transmuted into a `<NN x\ni8>` argument, depending on how many bits it is.\n\ncc rust-lang-nursery/stdsimd#310", "tree": {"sha": "69774d62cfeb159aefe9f377376a00ba0d65ac70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69774d62cfeb159aefe9f377376a00ba0d65ac70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1fa9d42611cd8c75ae14436ddaca4d06e8a11a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcFk5MCRBK7hj4Ov3rIwAAdHIIACxL9eJH8TYJ3tTfxn3+UM5X\ncJ1pV61B0JswaeQ7ViXj3hFBwkuHnoR/AQ3mNXEto3RjmbzunPHmPiQnGxDALrWy\n2wQBzU7BNh0Wbu+P6OuszEJz1870BnO1gpuvJtP/kVm4Mc8SRJ/epsh17hLkuj6N\n1LJl3eCYj1yoRjwUjEXdsNj/Oho5+5nBbkk7LgT851D1C9f2/E0zgUJaczurutaj\nZHqlndU+FJy6s2IqA0OkhuOC0vv43/7P1/P0kO52KqjQtToqDwxUm5pSYgx6+VvQ\nutvxKJvXOiM42uuewPzG/F0z3s/MYcgXKLM9ZdjZlugUf1PL3V+ZM+R9v3W26o8=\n=nB73\n-----END PGP SIGNATURE-----\n", "payload": "tree 69774d62cfeb159aefe9f377376a00ba0d65ac70\nparent c269468eb9a407633dae8bfdd4406a955072c1e8\nparent ceee7f34f5cfae23f8b9f43314cf81cf26150b4f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1544965708 +0100\ncommitter GitHub <noreply@github.com> 1544965708 +0100\n\nRollup merge of #56789 - alexcrichton:simd_select_bitmask, r=rkruppe\n\nrustc: Add an unstable `simd_select_bitmask` intrinsic\n\nThis is going to be required for binding a number of AVX-512 intrinsics\nin the `stdsimd` repository, and this intrinsic is the same as\n`simd_select` except that it takes a bitmask as the first argument\ninstead of a SIMD vector. This bitmask is then transmuted into a `<NN x\ni8>` argument, depending on how many bits it is.\n\ncc rust-lang-nursery/stdsimd#310\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1fa9d42611cd8c75ae14436ddaca4d06e8a11a5", "html_url": "https://github.com/rust-lang/rust/commit/f1fa9d42611cd8c75ae14436ddaca4d06e8a11a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1fa9d42611cd8c75ae14436ddaca4d06e8a11a5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c269468eb9a407633dae8bfdd4406a955072c1e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c269468eb9a407633dae8bfdd4406a955072c1e8", "html_url": "https://github.com/rust-lang/rust/commit/c269468eb9a407633dae8bfdd4406a955072c1e8"}, {"sha": "ceee7f34f5cfae23f8b9f43314cf81cf26150b4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceee7f34f5cfae23f8b9f43314cf81cf26150b4f", "html_url": "https://github.com/rust-lang/rust/commit/ceee7f34f5cfae23f8b9f43314cf81cf26150b4f"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "e229f8d95cd5b566d09c8ef47cc9f6e445fa8cc3", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1fa9d42611cd8c75ae14436ddaca4d06e8a11a5/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1fa9d42611cd8c75ae14436ddaca4d06e8a11a5/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=f1fa9d42611cd8c75ae14436ddaca4d06e8a11a5", "patch": "@@ -1192,7 +1192,7 @@ fn generic_simd_intrinsic(\n         return Ok(bx.select(m_i1s, args[1].immediate(), args[2].immediate()));\n     }\n \n-    // every intrinsic takes a SIMD vector as its first argument\n+    // every intrinsic below takes a SIMD vector as its first argument\n     require_simd!(arg_tys[0], \"input\");\n     let in_ty = arg_tys[0];\n     let in_elem = arg_tys[0].simd_type(tcx);\n@@ -1296,6 +1296,7 @@ fn generic_simd_intrinsic(\n     if name == \"simd_select\" {\n         let m_elem_ty = in_elem;\n         let m_len = in_len;\n+        require_simd!(arg_tys[1], \"argument\");\n         let v_len = arg_tys[1].simd_size(tcx);\n         require!(m_len == v_len,\n                  \"mismatched lengths: mask length `{}` != other vector length `{}`\","}, {"sha": "31ec8a7dc1c83a8a227f7cfa69f7993ebe101510", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-select.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1fa9d42611cd8c75ae14436ddaca4d06e8a11a5/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1fa9d42611cd8c75ae14436ddaca4d06e8a11a5/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.rs?ref=f1fa9d42611cd8c75ae14436ddaca4d06e8a11a5", "patch": "@@ -54,8 +54,14 @@ fn main() {\n         simd_select(z, z, z);\n         //~^ ERROR mask element type is `f32`, expected `i_`\n \n+        simd_select(m4, 0u32, 1u32);\n+        //~^ ERROR found non-SIMD `u32`\n+\n         simd_select_bitmask(0u8, x, x);\n         //~^ ERROR mask length `8` != other vector length `4`\n+        //\n+        simd_select_bitmask(0u8, 1u32, 2u32);\n+        //~^ ERROR found non-SIMD `u32`\n \n         simd_select_bitmask(0.0f32, x, x);\n         //~^ ERROR `f32` is not an integral type"}, {"sha": "05317da2475f1298f488d6828c5632538222de39", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-select.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1fa9d42611cd8c75ae14436ddaca4d06e8a11a5/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1fa9d42611cd8c75ae14436ddaca4d06e8a11a5/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.stderr?ref=f1fa9d42611cd8c75ae14436ddaca4d06e8a11a5", "patch": "@@ -16,24 +16,36 @@ error[E0511]: invalid monomorphization of `simd_select` intrinsic: mask element\n LL |         simd_select(z, z, z);\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: mismatched lengths: mask length `8` != other vector length `4`\n+error[E0511]: invalid monomorphization of `simd_select` intrinsic: expected SIMD argument type, found non-SIMD `u32`\n   --> $DIR/simd-intrinsic-generic-select.rs:57:9\n    |\n+LL |         simd_select(m4, 0u32, 1u32);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: mismatched lengths: mask length `8` != other vector length `4`\n+  --> $DIR/simd-intrinsic-generic-select.rs:60:9\n+   |\n LL |         simd_select_bitmask(0u8, x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: expected SIMD argument type, found non-SIMD `u32`\n+  --> $DIR/simd-intrinsic-generic-select.rs:63:9\n+   |\n+LL |         simd_select_bitmask(0u8, 1u32, 2u32);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: `f32` is not an integral type\n-  --> $DIR/simd-intrinsic-generic-select.rs:60:9\n+  --> $DIR/simd-intrinsic-generic-select.rs:66:9\n    |\n LL |         simd_select_bitmask(0.0f32, x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: `&str` is not an integral type\n-  --> $DIR/simd-intrinsic-generic-select.rs:63:9\n+  --> $DIR/simd-intrinsic-generic-select.rs:69:9\n    |\n LL |         simd_select_bitmask(\"x\", x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0511`."}]}