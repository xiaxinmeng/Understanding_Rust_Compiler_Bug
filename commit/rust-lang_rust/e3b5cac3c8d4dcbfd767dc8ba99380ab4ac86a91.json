{"sha": "e3b5cac3c8d4dcbfd767dc8ba99380ab4ac86a91", "node_id": "C_kwDOAAsO6NoAKGUzYjVjYWMzYzhkNGRjYmZkNzY3ZGM4YmE5OTM4MGFiNGFjODZhOTE", "commit": {"author": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-02-21T04:25:53Z"}, "committer": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-02-21T04:25:53Z"}, "message": "fix", "tree": {"sha": "a5baddefe311987b18c04d2746867b71e4900900", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5baddefe311987b18c04d2746867b71e4900900"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3b5cac3c8d4dcbfd767dc8ba99380ab4ac86a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3b5cac3c8d4dcbfd767dc8ba99380ab4ac86a91", "html_url": "https://github.com/rust-lang/rust/commit/e3b5cac3c8d4dcbfd767dc8ba99380ab4ac86a91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3b5cac3c8d4dcbfd767dc8ba99380ab4ac86a91/comments", "author": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29ee5e25d1096f142729ea44c1286e50823762e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/29ee5e25d1096f142729ea44c1286e50823762e8", "html_url": "https://github.com/rust-lang/rust/commit/29ee5e25d1096f142729ea44c1286e50823762e8"}], "stats": {"total": 92, "additions": 64, "deletions": 28}, "files": [{"sha": "d1dc6b775c567ed467214db9d66683f9d506a7b9", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 23, "deletions": 27, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e3b5cac3c8d4dcbfd767dc8ba99380ab4ac86a91/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b5cac3c8d4dcbfd767dc8ba99380ab4ac86a91/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=e3b5cac3c8d4dcbfd767dc8ba99380ab4ac86a91", "patch": "@@ -84,34 +84,30 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n             if adt.variants.len() <= 1 {\n                 return;\n             }\n-            let mut variants_size: Vec<VariantInfo> = adt\n-                .variants\n-                .iter()\n-                .enumerate()\n-                .map(|(i, variant)| {\n-                    let mut fields_size = Vec::new();\n-                    let size: u64 = variant\n-                        .fields\n-                        .iter()\n-                        .enumerate()\n-                        .filter_map(|(i, f)| {\n-                            let ty = cx.tcx.type_of(f.did);\n-                            // don't count generics by filtering out everything\n-                            // that does not have a layout\n-                            cx.layout_of(ty).ok().map(|l| {\n-                                let size = l.size.bytes();\n-                                fields_size.push(FieldInfo { ind: i, size });\n-                                size\n-                            })\n-                        })\n-                        .sum();\n-                    VariantInfo {\n-                        ind: i,\n-                        size,\n-                        fields_size,\n+            let mut variants_size: Vec<VariantInfo> = Vec::new();\n+            for (i, variant) in adt.variants.iter().enumerate() {\n+                let mut fields_size = Vec::new();\n+                for (i, f) in variant.fields.iter().enumerate() {\n+                    let ty = cx.tcx.type_of(f.did);\n+                    // don't lint variants which have a field of generic type.\n+                    match cx.layout_of(ty) {\n+                        Ok(l) => {\n+                            let fsize = l.size.bytes();\n+                            fields_size.push(FieldInfo { ind: i, size: fsize });\n+                        },\n+                        Err(_) => {\n+                            return;\n+                        },\n                     }\n-                })\n-                .collect();\n+                }\n+                let size: u64 = fields_size.iter().map(|info| info.size).sum();\n+\n+                variants_size.push(VariantInfo {\n+                    ind: i,\n+                    size,\n+                    fields_size,\n+                });\n+            }\n \n             variants_size.sort_by(|a, b| (b.size.cmp(&a.size)));\n "}, {"sha": "cee9e2372c2271f5a07e5fb30feb72a5bfa9e9d6", "filename": "tests/ui/large_enum_variant.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e3b5cac3c8d4dcbfd767dc8ba99380ab4ac86a91/tests%2Fui%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b5cac3c8d4dcbfd767dc8ba99380ab4ac86a91/tests%2Fui%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.rs?ref=e3b5cac3c8d4dcbfd767dc8ba99380ab4ac86a91", "patch": "@@ -74,6 +74,30 @@ enum LargeEnum8 {\n     ContainingMoreThanOneField([i32; 8000], [i32; 2], [i32; 9500], [i32; 30]),\n }\n \n+enum LargeEnum9 {\n+    A(Struct<()>),\n+    B(Struct2),\n+}\n+\n+enum LargeEnumOk2<T> {\n+    A(T),\n+    B(Struct2),\n+}\n+\n+enum LargeEnumOk3<T> {\n+    A(Struct<T>),\n+    B(Struct2),\n+}\n+\n+struct Struct<T> {\n+    a: i32,\n+    t: T,\n+}\n+\n+struct Struct2 {\n+    a: [i32; 8000],\n+}\n+\n fn main() {\n     large_enum_variant!();\n }"}, {"sha": "cbf2ac972e2b2102d60318d55b129ee66af73e47", "filename": "tests/ui/large_enum_variant.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e3b5cac3c8d4dcbfd767dc8ba99380ab4ac86a91/tests%2Fui%2Flarge_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3b5cac3c8d4dcbfd767dc8ba99380ab4ac86a91/tests%2Fui%2Flarge_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.stderr?ref=e3b5cac3c8d4dcbfd767dc8ba99380ab4ac86a91", "patch": "@@ -111,5 +111,21 @@ help: consider boxing the large fields to reduce the total size of the enum\n LL |     ContainingMoreThanOneField(Box<[i32; 8000]>, [i32; 2], Box<[i32; 9500]>, [i32; 30]),\n    |                                ~~~~~~~~~~~~~~~~            ~~~~~~~~~~~~~~~~\n \n-error: aborting due to 7 previous errors\n+error: large size difference between variants\n+  --> $DIR/large_enum_variant.rs:79:5\n+   |\n+LL |     B(Struct2),\n+   |     ^^^^^^^^^^ this variant is 32000 bytes\n+   |\n+note: and the second-largest variant is 4 bytes:\n+  --> $DIR/large_enum_variant.rs:78:5\n+   |\n+LL |     A(Struct<()>),\n+   |     ^^^^^^^^^^^^^\n+help: consider boxing the large fields to reduce the total size of the enum\n+   |\n+LL |     B(Box<Struct2>),\n+   |       ~~~~~~~~~~~~\n+\n+error: aborting due to 8 previous errors\n "}]}