{"sha": "278cc2f15766402d26b4173d636f765018b68878", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3OGNjMmYxNTc2NjQwMmQyNmI0MTczZDYzNmY3NjUwMThiNjg4Nzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-26T17:44:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-26T17:44:37Z"}, "message": "Auto merge of #29287 - Ryman:fn_nopat, r=alexcrichton\n\nPreviously, if you copied a signature from a trait definition such as:\r\n\r\n```rust\r\nfn foo<'a>(&'a Bar) -> bool {}\r\n```\r\n\r\nand moved it into an `impl`, there would be an error message:\r\n\r\n\"unexpected token `'a`\"\r\n\r\nAdding to the error message that a pattern is expected should help\r\nusers to find the actual problem with using a lifetime here.", "tree": {"sha": "1e99a5b48666217b21ad018035d0cc30904c04bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e99a5b48666217b21ad018035d0cc30904c04bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/278cc2f15766402d26b4173d636f765018b68878", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/278cc2f15766402d26b4173d636f765018b68878", "html_url": "https://github.com/rust-lang/rust/commit/278cc2f15766402d26b4173d636f765018b68878", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/278cc2f15766402d26b4173d636f765018b68878/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5d650cf74e76561b97dcbf7e4836f19bf1c1e6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d650cf74e76561b97dcbf7e4836f19bf1c1e6e", "html_url": "https://github.com/rust-lang/rust/commit/c5d650cf74e76561b97dcbf7e4836f19bf1c1e6e"}, {"sha": "1a235274a1aec01d8bf7f30e1631fba62e2ca411", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a235274a1aec01d8bf7f30e1631fba62e2ca411", "html_url": "https://github.com/rust-lang/rust/commit/1a235274a1aec01d8bf7f30e1631fba62e2ca411"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "7d15389d5610269cabf4c8eb68c73b9d03cc9f62", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/278cc2f15766402d26b4173d636f765018b68878/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278cc2f15766402d26b4173d636f765018b68878/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=278cc2f15766402d26b4173d636f765018b68878", "patch": "@@ -3196,6 +3196,10 @@ impl<'a> Parser<'a> {\n             // Parse &pat / &mut pat\n             try!(self.expect_and());\n             let mutbl = try!(self.parse_mutability());\n+            if let token::Lifetime(ident) = self.token {\n+                return Err(self.fatal(&format!(\"unexpected lifetime `{}` in pattern\", ident)));\n+            }\n+\n             let subpat = try!(self.parse_pat_nopanic());\n             pat = PatRegion(subpat, mutbl);\n           }\n@@ -3272,23 +3276,17 @@ impl<'a> Parser<'a> {\n                       }\n                       token::OpenDelim(token::Brace) => {\n                          if qself.is_some() {\n-                            let span = self.span;\n-                            self.span_err(span,\n-                                          \"unexpected `{` after qualified path\");\n-                            self.abort_if_errors();\n+                            return Err(self.fatal(\"unexpected `{` after qualified path\"));\n                         }\n-                       // Parse struct pattern\n+                        // Parse struct pattern\n                         try!(self.bump());\n                         let (fields, etc) = try!(self.parse_pat_fields());\n                         try!(self.bump());\n                         pat = PatStruct(path, fields, etc);\n                       }\n                       token::OpenDelim(token::Paren) => {\n                         if qself.is_some() {\n-                            let span = self.span;\n-                            self.span_err(span,\n-                                          \"unexpected `(` after qualified path\");\n-                            self.abort_if_errors();\n+                            return Err(self.fatal(\"unexpected `(` after qualified path\"));\n                         }\n                         // Parse tuple struct or enum pattern\n                         if self.look_ahead(1, |t| *t == token::DotDot) {\n@@ -3306,13 +3304,13 @@ impl<'a> Parser<'a> {\n                             pat = PatEnum(path, Some(args));\n                         }\n                       }\n-                      _ if qself.is_some() => {\n-                        // Parse qualified path\n-                        pat = PatQPath(qself.unwrap(), path);\n-                      }\n                       _ => {\n-                        // Parse nullary enum\n-                        pat = PatEnum(path, Some(vec![]));\n+                        pat = match qself {\n+                            // Parse qualified path\n+                            Some(qself) => PatQPath(qself, path),\n+                            // Parse nullary enum\n+                            None => PatEnum(path, Some(vec![]))\n+                        };\n                       }\n                     }\n                 }"}, {"sha": "8802497ae1bfd83e3d0f7e8df53b11cd8b37fd12", "filename": "src/test/parse-fail/lifetime-in-pattern.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/278cc2f15766402d26b4173d636f765018b68878/src%2Ftest%2Fparse-fail%2Flifetime-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278cc2f15766402d26b4173d636f765018b68878/src%2Ftest%2Fparse-fail%2Flifetime-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Flifetime-in-pattern.rs?ref=278cc2f15766402d26b4173d636f765018b68878", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn test(&'a str) {\n+    //~^ ERROR unexpected lifetime `'a` in pattern\n+}\n+\n+fn main() {\n+}"}]}