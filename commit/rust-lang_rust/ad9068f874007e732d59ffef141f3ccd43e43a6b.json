{"sha": "ad9068f874007e732d59ffef141f3ccd43e43a6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkOTA2OGY4NzQwMDdlNzMyZDU5ZmZlZjE0MWYzY2NkNDNlNDNhNmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-05T22:25:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-05T22:25:47Z"}, "message": "Auto merge of #57230 - estebank:return-mismatch, r=varkor\n\nModify mismatched type error for functions with no return\n\nFix #50009.\n\n```\nerror[E0308]: mismatched types\n  --> $DIR/coercion-missing-tail-expected-type.rs:3:24\n   |\nLL | fn plus_one(x: i32) -> i32 { //~ ERROR mismatched types\n   |    --------            ^^^ expected i32, found ()\n   |    |\n   |    this function's body doesn't return\nLL |     x + 1;\n   |          - help: consider removing this semicolon\n   |\n   = note: expected type `i32`\n              found type `()`\n```\n\ninstead of\n\n```\nerror[E0308]: mismatched types\n  --> $DIR/coercion-missing-tail-expected-type.rs:3:28\n   |\nLL |   fn plus_one(x: i32) -> i32 { //~ ERROR mismatched types\n   |  ____________________________^\nLL | |     x + 1;\n   | |          - help: consider removing this semicolon\nLL | | }\n   | |_^ expected i32, found ()\n   |\n   = note: expected type `i32`\n              found type `()`\n```", "tree": {"sha": "d5406cd031b26855632d8bb9ff37fc021111df52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5406cd031b26855632d8bb9ff37fc021111df52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad9068f874007e732d59ffef141f3ccd43e43a6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad9068f874007e732d59ffef141f3ccd43e43a6b", "html_url": "https://github.com/rust-lang/rust/commit/ad9068f874007e732d59ffef141f3ccd43e43a6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad9068f874007e732d59ffef141f3ccd43e43a6b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68fe5182c967259ef89dbe313e4bf80f45a53e7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/68fe5182c967259ef89dbe313e4bf80f45a53e7e", "html_url": "https://github.com/rust-lang/rust/commit/68fe5182c967259ef89dbe313e4bf80f45a53e7e"}, {"sha": "211365d68c8eb5515cb658c4c240c73c122d2c5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/211365d68c8eb5515cb658c4c240c73c122d2c5e", "html_url": "https://github.com/rust-lang/rust/commit/211365d68c8eb5515cb658c4c240c73c122d2c5e"}], "stats": {"total": 355, "additions": 199, "deletions": 156}, "files": [{"sha": "5bcbeeefa50309ca72be9f10cfbf2201552693ef", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=ad9068f874007e732d59ffef141f3ccd43e43a6b", "patch": "@@ -667,6 +667,7 @@ impl<'hir> Map<'hir> {\n                 Node::Item(_) |\n                 Node::ForeignItem(_) |\n                 Node::TraitItem(_) |\n+                Node::Expr(Expr { node: ExprKind::Closure(..), ..}) |\n                 Node::ImplItem(_) => true,\n                 _ => false,\n             }\n@@ -675,7 +676,7 @@ impl<'hir> Map<'hir> {\n             match *node {\n                 Node::Expr(ref expr) => {\n                     match expr.node {\n-                        ExprKind::While(..) | ExprKind::Loop(..) => true,\n+                        ExprKind::While(..) | ExprKind::Loop(..) | ExprKind::Ret(..) => true,\n                         _ => false,\n                     }\n                 }"}, {"sha": "772a5b587a36bf54af8dfccb8d59f6bc81644d37", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 85, "deletions": 43, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ad9068f874007e732d59ffef141f3ccd43e43a6b", "patch": "@@ -4843,11 +4843,31 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // #41425 -- label the implicit `()` as being the\n                 // \"found type\" here, rather than the \"expected type\".\n                 if !self.diverges.get().always() {\n-                    coerce.coerce_forced_unit(self, &self.misc(blk.span), &mut |err| {\n+                    // #50009 -- Do not point at the entire fn block span, point at the return type\n+                    // span, as it is the cause of the requirement, and\n+                    // `consider_hint_about_removing_semicolon` will point at the last expression\n+                    // if it were a relevant part of the error. This improves usability in editors\n+                    // that highlight errors inline.\n+                    let mut sp = blk.span;\n+                    let mut fn_span = None;\n+                    if let Some((decl, ident)) = self.get_parent_fn_decl(blk.id) {\n+                        let ret_sp = decl.output.span();\n+                        if let Some(block_sp) = self.parent_item_span(blk.id) {\n+                            // HACK: on some cases (`ui/liveness/liveness-issue-2163.rs`) the\n+                            // output would otherwise be incorrect and even misleading. Make sure\n+                            // the span we're aiming at correspond to a `fn` body.\n+                            if block_sp == blk.span {\n+                                sp = ret_sp;\n+                                fn_span = Some(ident.span);\n+                            }\n+                        }\n+                    }\n+                    coerce.coerce_forced_unit(self, &self.misc(sp), &mut |err| {\n                         if let Some(expected_ty) = expected.only_has_type(self) {\n-                            self.consider_hint_about_removing_semicolon(blk,\n-                                                                        expected_ty,\n-                                                                        err);\n+                            self.consider_hint_about_removing_semicolon(blk, expected_ty, err);\n+                        }\n+                        if let Some(fn_span) = fn_span {\n+                            err.span_label(fn_span, \"this function's body doesn't return\");\n                         }\n                     }, false);\n                 }\n@@ -4872,59 +4892,81 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         ty\n     }\n \n-    /// Given a `NodeId`, return the `FnDecl` of the method it is enclosed by and whether a\n-    /// suggestion can be made, `None` otherwise.\n-    pub fn get_fn_decl(&self, blk_id: ast::NodeId) -> Option<(hir::FnDecl, bool)> {\n-        // Get enclosing Fn, if it is a function or a trait method, unless there's a `loop` or\n-        // `while` before reaching it, as block tail returns are not available in them.\n-        if let Some(fn_id) = self.tcx.hir().get_return_block(blk_id) {\n-            let parent = self.tcx.hir().get(fn_id);\n+    fn parent_item_span(&self, id: ast::NodeId) -> Option<Span> {\n+        let node = self.tcx.hir().get(self.tcx.hir().get_parent(id));\n+        match node {\n+            Node::Item(&hir::Item {\n+                node: hir::ItemKind::Fn(_, _, _, body_id), ..\n+            }) |\n+            Node::ImplItem(&hir::ImplItem {\n+                node: hir::ImplItemKind::Method(_, body_id), ..\n+            }) => {\n+                let body = self.tcx.hir().body(body_id);\n+                if let ExprKind::Block(block, _) = &body.value.node {\n+                    return Some(block.span);\n+                }\n+            }\n+            _ => {}\n+        }\n+        None\n+    }\n \n-            if let Node::Item(&hir::Item {\n+    /// Given a function block's `NodeId`, return its `FnDecl` if it exists, or `None` otherwise.\n+    fn get_parent_fn_decl(&self, blk_id: ast::NodeId) -> Option<(hir::FnDecl, ast::Ident)> {\n+        let parent = self.tcx.hir().get(self.tcx.hir().get_parent(blk_id));\n+        self.get_node_fn_decl(parent).map(|(fn_decl, ident, _)| (fn_decl, ident))\n+    }\n+\n+    /// Given a function `Node`, return its `FnDecl` if it exists, or `None` otherwise.\n+    fn get_node_fn_decl(&self, node: Node) -> Option<(hir::FnDecl, ast::Ident, bool)> {\n+        match node {\n+            Node::Item(&hir::Item {\n                 ident, node: hir::ItemKind::Fn(ref decl, ..), ..\n-            }) = parent {\n-                decl.clone().and_then(|decl| {\n-                    // This is less than ideal, it will not suggest a return type span on any\n-                    // method called `main`, regardless of whether it is actually the entry point,\n-                    // but it will still present it as the reason for the expected type.\n-                    Some((decl, ident.name != Symbol::intern(\"main\")))\n-                })\n-            } else if let Node::TraitItem(&hir::TraitItem {\n-                node: hir::TraitItemKind::Method(hir::MethodSig {\n+            }) => decl.clone().and_then(|decl| {\n+                // This is less than ideal, it will not suggest a return type span on any\n+                // method called `main`, regardless of whether it is actually the entry point,\n+                // but it will still present it as the reason for the expected type.\n+                Some((decl, ident, ident.name != Symbol::intern(\"main\")))\n+            }),\n+            Node::TraitItem(&hir::TraitItem {\n+                ident, node: hir::TraitItemKind::Method(hir::MethodSig {\n                     ref decl, ..\n                 }, ..), ..\n-            }) = parent {\n-                decl.clone().and_then(|decl| {\n-                    Some((decl, true))\n-                })\n-            } else if let Node::ImplItem(&hir::ImplItem {\n-                node: hir::ImplItemKind::Method(hir::MethodSig {\n+            }) => decl.clone().and_then(|decl| Some((decl, ident, true))),\n+            Node::ImplItem(&hir::ImplItem {\n+                ident, node: hir::ImplItemKind::Method(hir::MethodSig {\n                     ref decl, ..\n                 }, ..), ..\n-            }) = parent {\n-                decl.clone().and_then(|decl| {\n-                    Some((decl, false))\n-                })\n-            } else {\n-                None\n-            }\n-        } else {\n-            None\n+            }) => decl.clone().and_then(|decl| Some((decl, ident, false))),\n+            _ => None,\n         }\n     }\n \n+    /// Given a `NodeId`, return the `FnDecl` of the method it is enclosed by and whether a\n+    /// suggestion can be made, `None` otherwise.\n+    pub fn get_fn_decl(&self, blk_id: ast::NodeId) -> Option<(hir::FnDecl, bool)> {\n+        // Get enclosing Fn, if it is a function or a trait method, unless there's a `loop` or\n+        // `while` before reaching it, as block tail returns are not available in them.\n+        self.tcx.hir().get_return_block(blk_id).and_then(|blk_id| {\n+            let parent = self.tcx.hir().get(blk_id);\n+            self.get_node_fn_decl(parent).map(|(fn_decl, _, is_main)| (fn_decl, is_main))\n+        })\n+    }\n+\n     /// On implicit return expressions with mismatched types, provide the following suggestions:\n     ///\n     ///  - Point out the method's return type as the reason for the expected type\n     ///  - Possible missing semicolon\n     ///  - Possible missing return type if the return type is the default, and not `fn main()`\n-    pub fn suggest_mismatched_types_on_tail(&self,\n-                                            err: &mut DiagnosticBuilder<'tcx>,\n-                                            expression: &'gcx hir::Expr,\n-                                            expected: Ty<'tcx>,\n-                                            found: Ty<'tcx>,\n-                                            cause_span: Span,\n-                                            blk_id: ast::NodeId) {\n+    pub fn suggest_mismatched_types_on_tail(\n+        &self,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        expression: &'gcx hir::Expr,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+        cause_span: Span,\n+        blk_id: ast::NodeId,\n+    ) {\n         self.suggest_missing_semicolon(err, expression, expected, cause_span);\n         if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n             self.suggest_missing_return_type(err, &fn_decl, expected, found, can_suggest);"}, {"sha": "1bf17db21ac5ac5f6f23b0e7a24875d25546ee79", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=ad9068f874007e732d59ffef141f3ccd43e43a6b", "patch": "@@ -1,27 +1,27 @@\n error[E0308]: mismatched types\n-  --> $DIR/consider-removing-last-semi.rs:1:18\n+  --> $DIR/consider-removing-last-semi.rs:1:11\n    |\n-LL |   fn f() -> String {  //~ ERROR mismatched types\n-   |  __________________^\n-LL | |     0u8;\n-LL | |     \"bla\".to_string();\n-   | |                      - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected struct `std::string::String`, found ()\n+LL | fn f() -> String {  //~ ERROR mismatched types\n+   |    -      ^^^^^^ expected struct `std::string::String`, found ()\n+   |    |\n+   |    this function's body doesn't return\n+LL |     0u8;\n+LL |     \"bla\".to_string();\n+   |                      - help: consider removing this semicolon\n    |\n    = note: expected type `std::string::String`\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/consider-removing-last-semi.rs:6:18\n+  --> $DIR/consider-removing-last-semi.rs:6:11\n    |\n-LL |   fn g() -> String {  //~ ERROR mismatched types\n-   |  __________________^\n-LL | |     \"this won't work\".to_string();\n-LL | |     \"removeme\".to_string();\n-   | |                           - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected struct `std::string::String`, found ()\n+LL | fn g() -> String {  //~ ERROR mismatched types\n+   |    -      ^^^^^^ expected struct `std::string::String`, found ()\n+   |    |\n+   |    this function's body doesn't return\n+LL |     \"this won't work\".to_string();\n+LL |     \"removeme\".to_string();\n+   |                           - help: consider removing this semicolon\n    |\n    = note: expected type `std::string::String`\n               found type `()`"}, {"sha": "2c13b28766943a2b06874eba673985c554c4bd68", "filename": "src/test/ui/block-result/issue-11714.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr?ref=ad9068f874007e732d59ffef141f3ccd43e43a6b", "patch": "@@ -1,14 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-11714.rs:1:18\n+  --> $DIR/issue-11714.rs:1:14\n    |\n-LL |   fn blah() -> i32 { //~ ERROR mismatched types\n-   |  __________________^\n-LL | |     1\n-LL | |\n-LL | |     ;\n-   | |     - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected i32, found ()\n+LL | fn blah() -> i32 { //~ ERROR mismatched types\n+   |    ----      ^^^ expected i32, found ()\n+   |    |\n+   |    this function's body doesn't return\n+...\n+LL |     ;\n+   |     - help: consider removing this semicolon\n    |\n    = note: expected type `i32`\n               found type `()`"}, {"sha": "91e926eb5a73b924429be7f3a89e32212bae2899", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=ad9068f874007e732d59ffef141f3ccd43e43a6b", "patch": "@@ -1,30 +1,27 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-13428.rs:3:20\n+  --> $DIR/issue-13428.rs:3:13\n    |\n-LL |   fn foo() -> String {  //~ ERROR mismatched types\n-   |  ____________________^\n-LL | |     format!(\"Hello {}\",\n-LL | |             \"world\")\n-LL | |     // Put the trailing semicolon on its own line to test that the\n-LL | |     // note message gets the offending semicolon exactly\n-LL | |     ;\n-   | |     - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected struct `std::string::String`, found ()\n+LL | fn foo() -> String {  //~ ERROR mismatched types\n+   |    ---      ^^^^^^ expected struct `std::string::String`, found ()\n+   |    |\n+   |    this function's body doesn't return\n+...\n+LL |     ;\n+   |     - help: consider removing this semicolon\n    |\n    = note: expected type `std::string::String`\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-13428.rs:11:20\n+  --> $DIR/issue-13428.rs:11:13\n    |\n-LL |   fn bar() -> String {  //~ ERROR mismatched types\n-   |  ____________________^\n-LL | |     \"foobar\".to_string()\n-LL | |     ;\n-   | |     - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected struct `std::string::String`, found ()\n+LL | fn bar() -> String {  //~ ERROR mismatched types\n+   |    ---      ^^^^^^ expected struct `std::string::String`, found ()\n+   |    |\n+   |    this function's body doesn't return\n+LL |     \"foobar\".to_string()\n+LL |     ;\n+   |     - help: consider removing this semicolon\n    |\n    = note: expected type `std::string::String`\n               found type `()`"}, {"sha": "c8ec2f0545e6b0479dbdb081023430b2ccabeef8", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr?ref=ad9068f874007e732d59ffef141f3ccd43e43a6b", "patch": "@@ -1,25 +1,25 @@\n error[E0308]: mismatched types\n-  --> $DIR/coercion-missing-tail-expected-type.rs:3:28\n+  --> $DIR/coercion-missing-tail-expected-type.rs:3:24\n    |\n-LL |   fn plus_one(x: i32) -> i32 { //~ ERROR mismatched types\n-   |  ____________________________^\n-LL | |     x + 1;\n-   | |          - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected i32, found ()\n+LL | fn plus_one(x: i32) -> i32 { //~ ERROR mismatched types\n+   |    --------            ^^^ expected i32, found ()\n+   |    |\n+   |    this function's body doesn't return\n+LL |     x + 1;\n+   |          - help: consider removing this semicolon\n    |\n    = note: expected type `i32`\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercion-missing-tail-expected-type.rs:7:29\n+  --> $DIR/coercion-missing-tail-expected-type.rs:7:13\n    |\n-LL |   fn foo() -> Result<u8, u64> { //~ ERROR mismatched types\n-   |  _____________________________^\n-LL | |     Ok(1);\n-   | |          - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected enum `std::result::Result`, found ()\n+LL | fn foo() -> Result<u8, u64> { //~ ERROR mismatched types\n+   |    ---      ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n+   |    |\n+   |    this function's body doesn't return\n+LL |     Ok(1);\n+   |          - help: consider removing this semicolon\n    |\n    = note: expected type `std::result::Result<u8, u64>`\n               found type `()`"}, {"sha": "0339fdc55b9c83157860ce5422091cf8510348f0", "filename": "src/test/ui/issues/issue-32323.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr?ref=ad9068f874007e732d59ffef141f3ccd43e43a6b", "patch": "@@ -1,8 +1,10 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-32323.rs:5:49\n+  --> $DIR/issue-32323.rs:5:30\n    |\n LL | pub fn f<'a, T: Tr<'a>>() -> <T as Tr<'a>>::Out {}\n-   |                                                 ^^ expected associated type, found ()\n+   |        -                     ^^^^^^^^^^^^^^^^^^ expected associated type, found ()\n+   |        |\n+   |        this function's body doesn't return\n    |\n    = note: expected type `<T as Tr<'a>>::Out`\n               found type `()`"}, {"sha": "3fc5317830e48f879778a9f7ec38faf9405d97d0", "filename": "src/test/ui/issues/issue-43162.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr?ref=ad9068f874007e732d59ffef141f3ccd43e43a6b", "patch": "@@ -11,15 +11,15 @@ LL |     break {}; //~ ERROR E0268\n    |     ^^^^^^^^ cannot break outside of a loop\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-43162.rs:1:18\n+  --> $DIR/issue-43162.rs:1:13\n    |\n-LL |   fn foo() -> bool {\n-   |  __________________^\n-LL | |     //~^ ERROR E0308\n-LL | |     break true; //~ ERROR E0268\n-   | |               - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected bool, found ()\n+LL | fn foo() -> bool {\n+   |    ---      ^^^^ expected bool, found ()\n+   |    |\n+   |    this function's body doesn't return\n+LL |     //~^ ERROR E0308\n+LL |     break true; //~ ERROR E0268\n+   |               - help: consider removing this semicolon\n    |\n    = note: expected type `bool`\n               found type `()`"}, {"sha": "f1962a86ee03a8f3020864ba2ba25704a00b3f2b", "filename": "src/test/ui/issues/issue-44023.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr?ref=ad9068f874007e732d59ffef141f3ccd43e43a6b", "patch": "@@ -1,10 +1,10 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-44023.rs:5:42\n+  --> $DIR/issue-44023.rs:5:36\n    |\n-LL |   fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( ) -> isize { //~ ERROR mismatched types\n-   |  __________________________________________^\n-LL | | }\n-   | |_^ expected isize, found ()\n+LL | fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( ) -> isize { //~ ERROR mismatched types\n+   |    ------------------------        ^^^^^ expected isize, found ()\n+   |    |\n+   |    this function's body doesn't return\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "c087292e978c28acdb9770ef3d1e6bd1f9dfc087", "filename": "src/test/ui/issues/issue-6458-4.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr?ref=ad9068f874007e732d59ffef141f3ccd43e43a6b", "patch": "@@ -1,12 +1,12 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-6458-4.rs:1:40\n+  --> $DIR/issue-6458-4.rs:1:20\n    |\n-LL |   fn foo(b: bool) -> Result<bool,String> { //~ ERROR mismatched types\n-   |  ________________________________________^\n-LL | |     Err(\"bar\".to_string());\n-   | |                           - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected enum `std::result::Result`, found ()\n+LL | fn foo(b: bool) -> Result<bool,String> { //~ ERROR mismatched types\n+   |    ---             ^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n+   |    |\n+   |    this function's body doesn't return\n+LL |     Err(\"bar\".to_string());\n+   |                           - help: consider removing this semicolon\n    |\n    = note: expected type `std::result::Result<bool, std::string::String>`\n               found type `()`"}, {"sha": "bbcbbdbe8dd5bccca7640f06f600d711e7d2faf7", "filename": "src/test/ui/liveness/liveness-forgot-ret.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr?ref=ad9068f874007e732d59ffef141f3ccd43e43a6b", "patch": "@@ -1,8 +1,10 @@\n error[E0308]: mismatched types\n-  --> $DIR/liveness-forgot-ret.rs:3:25\n+  --> $DIR/liveness-forgot-ret.rs:3:19\n    |\n LL | fn f(a: isize) -> isize { if god_exists(a) { return 5; }; }\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected isize, found ()\n+   |    -              ^^^^^ expected isize, found ()    - expected because of this statement\n+   |    |\n+   |    this function's body doesn't return\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "58d0249ee3b24996024dfbd059bcdf52ea78b955", "filename": "src/test/ui/liveness/liveness-missing-ret2.stderr", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr?ref=ad9068f874007e732d59ffef141f3ccd43e43a6b", "patch": "@@ -1,13 +1,10 @@\n error[E0308]: mismatched types\n-  --> $DIR/liveness-missing-ret2.rs:1:17\n+  --> $DIR/liveness-missing-ret2.rs:1:11\n    |\n-LL |   fn f() -> isize { //~ ERROR mismatched types\n-   |  _________________^\n-LL | |     // Make sure typestate doesn't interpret this match expression as\n-LL | |     // the function result\n-LL | |    match true { true => { } _ => {} };\n-LL | | }\n-   | |_^ expected isize, found ()\n+LL | fn f() -> isize { //~ ERROR mismatched types\n+   |    -      ^^^^^ expected isize, found ()\n+   |    |\n+   |    this function's body doesn't return\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "c6d166d8b31a07b745b902de48ba71163ccf59b7", "filename": "src/test/ui/liveness/liveness-return-last-stmt-semi.stderr", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr?ref=ad9068f874007e732d59ffef141f3ccd43e43a6b", "patch": "@@ -1,11 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/liveness-return-last-stmt-semi.rs:4:45\n+  --> $DIR/liveness-return-last-stmt-semi.rs:4:41\n    |\n LL | macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n-   |                                             ^^^-^^\n-   |                                             |  |\n-   |                                             |  help: consider removing this semicolon\n-   |                                             expected i32, found ()\n+   |                                ---      ^^^    - help: consider removing this semicolon\n+   |                                |        |\n+   |                                |        expected i32, found ()\n+   |                                this function's body doesn't return\n ...\n LL |     test!();\n    |     -------- in this macro invocation\n@@ -14,35 +14,36 @@ LL |     test!();\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/liveness-return-last-stmt-semi.rs:7:23\n+  --> $DIR/liveness-return-last-stmt-semi.rs:7:19\n    |\n LL | fn no_return() -> i32 {} //~ ERROR mismatched types\n-   |                       ^^ expected i32, found ()\n+   |    ---------      ^^^ expected i32, found ()\n+   |    |\n+   |    this function's body doesn't return\n    |\n    = note: expected type `i32`\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/liveness-return-last-stmt-semi.rs:9:23\n+  --> $DIR/liveness-return-last-stmt-semi.rs:9:19\n    |\n-LL |   fn bar(x: u32) -> u32 { //~ ERROR mismatched types\n-   |  _______________________^\n-LL | |     x * 2;\n-   | |          - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected u32, found ()\n+LL | fn bar(x: u32) -> u32 { //~ ERROR mismatched types\n+   |    ---            ^^^ expected u32, found ()\n+   |    |\n+   |    this function's body doesn't return\n+LL |     x * 2;\n+   |          - help: consider removing this semicolon\n    |\n    = note: expected type `u32`\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/liveness-return-last-stmt-semi.rs:13:23\n+  --> $DIR/liveness-return-last-stmt-semi.rs:13:19\n    |\n-LL |   fn baz(x: u64) -> u32 { //~ ERROR mismatched types\n-   |  _______________________^\n-LL | |     x * 2;\n-LL | | }\n-   | |_^ expected u32, found ()\n+LL | fn baz(x: u64) -> u32 { //~ ERROR mismatched types\n+   |    ---            ^^^ expected u32, found ()\n+   |    |\n+   |    this function's body doesn't return\n    |\n    = note: expected type `u32`\n               found type `()`"}, {"sha": "42466e2fc6574f8fba377aed422388bc9e55df00", "filename": "src/test/ui/missing/missing-return.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad9068f874007e732d59ffef141f3ccd43e43a6b/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr?ref=ad9068f874007e732d59ffef141f3ccd43e43a6b", "patch": "@@ -1,8 +1,10 @@\n error[E0308]: mismatched types\n-  --> $DIR/missing-return.rs:3:17\n+  --> $DIR/missing-return.rs:3:11\n    |\n LL | fn f() -> isize { }\n-   |                 ^^^ expected isize, found ()\n+   |    -      ^^^^^ expected isize, found ()\n+   |    |\n+   |    this function's body doesn't return\n    |\n    = note: expected type `isize`\n               found type `()`"}]}