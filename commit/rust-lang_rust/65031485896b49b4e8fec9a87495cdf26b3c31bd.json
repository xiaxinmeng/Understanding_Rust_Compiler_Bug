{"sha": "65031485896b49b4e8fec9a87495cdf26b3c31bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MDMxNDg1ODk2YjQ5YjRlOGZlYzlhODc0OTVjZGYyNmIzYzMxYmQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-17T01:58:22Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-17T01:58:22Z"}, "message": "Optimize reads of field projections of ByValPairs.\n\nThis helps in the case of field projections of the results of checked\nbinary operations. E.g.:\n\n    _1 = CheckedAdd(const 1i32, const 2i32);\n    assert(!(_1.1: bool), \"attempt to add with overflow\" -> bb1\n\nPreviously, the `_1.1` field projection lvalue would force_allocate `_1`\nso it could read the memory in the old-style way. Now checked math with\nits assertions will not allocate at all.\n\nThe oom2.rs compile-fail test had to be re-written, because the old\nversion of it no longer allocates _at all_ (yay!), so it would hit the\nstack depth limit instead, from recursion.", "tree": {"sha": "77b43904300dc2f4283772f2a1bac4a8b6f6bab7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77b43904300dc2f4283772f2a1bac4a8b6f6bab7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65031485896b49b4e8fec9a87495cdf26b3c31bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65031485896b49b4e8fec9a87495cdf26b3c31bd", "html_url": "https://github.com/rust-lang/rust/commit/65031485896b49b4e8fec9a87495cdf26b3c31bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65031485896b49b4e8fec9a87495cdf26b3c31bd/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "701eb3f62bca0b34fd6ff1bb245a787c33af2084", "url": "https://api.github.com/repos/rust-lang/rust/commits/701eb3f62bca0b34fd6ff1bb245a787c33af2084", "html_url": "https://github.com/rust-lang/rust/commit/701eb3f62bca0b34fd6ff1bb245a787c33af2084"}], "stats": {"total": 60, "additions": 15, "deletions": 45}, "files": [{"sha": "8667585e5c8d482cd695e58e19a1f1931cd0e933", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65031485896b49b4e8fec9a87495cdf26b3c31bd/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65031485896b49b4e8fec9a87495cdf26b3c31bd/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=65031485896b49b4e8fec9a87495cdf26b3c31bd", "patch": "@@ -843,6 +843,17 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     }\n \n     fn eval_and_read_lvalue(&mut self, lvalue: &mir::Lvalue<'tcx>) -> EvalResult<'tcx, Value> {\n+        if let mir::Lvalue::Projection(ref proj) = *lvalue {\n+            if let mir::Lvalue::Local(index) = proj.base {\n+                if let Some(Value::ByValPair(a, b)) = self.frame().get_local(index) {\n+                    if let mir::ProjectionElem::Field(ref field, _) = proj.elem {\n+                        let val = [a, b][field.index()];\n+                        return Ok(Value::ByVal(val));\n+                    }\n+                }\n+            }\n+        }\n+\n         match self.eval_lvalue(lvalue)? {\n             Lvalue::Ptr { ptr, extra } => {\n                 assert_eq!(extra, LvalueExtra::None);"}, {"sha": "a87e34474cff3491ee3372e46988af043f69b1d9", "filename": "tests/compile-fail/oom2.rs", "status": "modified", "additions": 4, "deletions": 45, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/65031485896b49b4e8fec9a87495cdf26b3c31bd/tests%2Fcompile-fail%2Foom2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65031485896b49b4e8fec9a87495cdf26b3c31bd/tests%2Fcompile-fail%2Foom2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foom2.rs?ref=65031485896b49b4e8fec9a87495cdf26b3c31bd", "patch": "@@ -1,49 +1,8 @@\n-#![feature(custom_attribute, attr_literals)]\n+#![feature(box_syntax, custom_attribute, attr_literals)]\n #![miri(memory_size=1000)]\n \n-fn bar(i: i32) {\n-    if i < 1000 { //~ERROR tried to allocate 4 more bytes, but only 0 bytes are free of the 1000 byte memory\n-        bar(i + 1)\n-        //~^NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n-        //~|NOTE inside call to bar\n+fn main() {\n+    loop {\n+        ::std::mem::forget(box 42); //~ ERROR tried to allocate 4 more bytes\n     }\n }\n-\n-fn main() { //~NOTE inside call to main\n-    bar(1);\n-    //~^NOTE inside call to bar\n-}"}]}