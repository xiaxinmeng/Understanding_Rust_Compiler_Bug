{"sha": "9e2a6a29ce82e4fc5decad86dab7911a38582438", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMmE2YTI5Y2U4MmU0ZmM1ZGVjYWQ4NmRhYjc5MTFhMzg1ODI0Mzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-18T11:11:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-18T11:11:19Z"}, "message": "Auto merge of #72289 - RalfJung:abort_internal, r=Mark-Simulacrum\n\nabort_internal is safe\n\n`sys::abort_internal` is stably exposed as a safe function. Forward that assumption \"inwards\" to the `sys` module by making the function itself safe, too.\n\nThis corresponds to what https://github.com/rust-lang/rust/pull/72204 did for the intrinsic. We should probably wait until that lands because some of the intrinsic calls in this PR might then need adjustments.", "tree": {"sha": "e6cb48e01bb939c8962a206153f763b960099ad0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6cb48e01bb939c8962a206153f763b960099ad0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e2a6a29ce82e4fc5decad86dab7911a38582438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e2a6a29ce82e4fc5decad86dab7911a38582438", "html_url": "https://github.com/rust-lang/rust/commit/9e2a6a29ce82e4fc5decad86dab7911a38582438", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e2a6a29ce82e4fc5decad86dab7911a38582438/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4bf05693c2c16e299f1adc279b54c37a8edef27", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4bf05693c2c16e299f1adc279b54c37a8edef27", "html_url": "https://github.com/rust-lang/rust/commit/d4bf05693c2c16e299f1adc279b54c37a8edef27"}, {"sha": "2764673dca6badb2ef89450bbdd84b19c317a9c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2764673dca6badb2ef89450bbdd84b19c317a9c7", "html_url": "https://github.com/rust-lang/rust/commit/2764673dca6badb2ef89450bbdd84b19c317a9c7"}], "stats": {"total": 52, "additions": 29, "deletions": 23}, "files": [{"sha": "38d223d84e90fa3e296656123e7dfba4acf0f14d", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=9e2a6a29ce82e4fc5decad86dab7911a38582438", "patch": "@@ -279,7 +279,7 @@ pub fn rust_oom(layout: Layout) -> ! {\n     let hook: fn(Layout) =\n         if hook.is_null() { default_alloc_error_hook } else { unsafe { mem::transmute(hook) } };\n     hook(layout);\n-    unsafe { crate::sys::abort_internal() }\n+    crate::process::abort()\n }\n \n #[cfg(not(test))]"}, {"sha": "f7e7a5abf8ea693d5d10df3cca2a36c754f8c565", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=9e2a6a29ce82e4fc5decad86dab7911a38582438", "patch": "@@ -1620,7 +1620,7 @@ pub fn exit(code: i32) -> ! {\n /// [panic hook]: ../../std/panic/fn.set_hook.html\n #[stable(feature = \"process_abort\", since = \"1.17.0\")]\n pub fn abort() -> ! {\n-    unsafe { crate::sys::abort_internal() };\n+    crate::sys::abort_internal();\n }\n \n /// Returns the OS-assigned process identifier associated with this process."}, {"sha": "dde2b21c9bcff5784740a04a2ec82cc21a85758a", "filename": "src/libstd/sys/cloudabi/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs?ref=9e2a6a29ce82e4fc5decad86dab7911a38582438", "patch": "@@ -51,8 +51,11 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n     }\n }\n \n-pub unsafe fn abort_internal() -> ! {\n-    core::intrinsics::abort();\n+pub fn abort_internal() -> ! {\n+    #[cfg_attr(not(bootstrap), allow(unused_unsafe))] // remove `unsafe` on bootstrap bump\n+    unsafe {\n+        core::intrinsics::abort();\n+    }\n }\n \n pub use libc::strlen;"}, {"sha": "7bdc1be3b1702902c897196e16496692b93f64d2", "filename": "src/libstd/sys/hermit/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs?ref=9e2a6a29ce82e4fc5decad86dab7911a38582438", "patch": "@@ -74,8 +74,10 @@ pub extern \"C\" fn floor(x: f64) -> f64 {\n     unsafe { intrinsics::floorf64(x) }\n }\n \n-pub unsafe fn abort_internal() -> ! {\n-    abi::abort();\n+pub fn abort_internal() -> ! {\n+    unsafe {\n+        abi::abort();\n+    }\n }\n \n // FIXME: just a workaround to test the system\n@@ -88,7 +90,7 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n #[cfg(not(test))]\n #[no_mangle]\n // NB. used by both libunwind and libpanic_abort\n-pub unsafe extern \"C\" fn __rust_abort() {\n+pub extern \"C\" fn __rust_abort() {\n     abort_internal();\n }\n "}, {"sha": "397dd496ae8afa468e788326d3547c782c6cac40", "filename": "src/libstd/sys/sgx/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs?ref=9e2a6a29ce82e4fc5decad86dab7911a38582438", "patch": "@@ -124,7 +124,7 @@ pub unsafe fn strlen(mut s: *const c_char) -> usize {\n     return n;\n }\n \n-pub unsafe fn abort_internal() -> ! {\n+pub fn abort_internal() -> ! {\n     abi::usercalls::exit(true)\n }\n \n@@ -133,7 +133,7 @@ pub unsafe fn abort_internal() -> ! {\n #[cfg(not(test))]\n #[no_mangle]\n // NB. used by both libunwind and libpanic_abort\n-pub unsafe extern \"C\" fn __rust_abort() {\n+pub extern \"C\" fn __rust_abort() {\n     abort_internal();\n }\n "}, {"sha": "b1688e74173d71560ec45f5a45273f1e111c5e8e", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=9e2a6a29ce82e4fc5decad86dab7911a38582438", "patch": "@@ -163,6 +163,6 @@ where\n // understandable error message like \"Abort trap\" rather than \"Illegal\n // instruction\" that intrinsics::abort would cause, as intrinsics::abort is\n // implemented as an illegal instruction.\n-pub unsafe fn abort_internal() -> ! {\n-    libc::abort()\n+pub fn abort_internal() -> ! {\n+    unsafe { libc::abort() }\n }"}, {"sha": "0787e7098988ccef4060718d842aa2bdbb6e6d7f", "filename": "src/libstd/sys/vxworks/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fsys%2Fvxworks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fsys%2Fvxworks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fmod.rs?ref=9e2a6a29ce82e4fc5decad86dab7911a38582438", "patch": "@@ -108,6 +108,6 @@ where\n // understandable error message like \"Abort trap\" rather than \"Illegal\n // instruction\" that intrinsics::abort would cause, as intrinsics::abort is\n // implemented as an illegal instruction.\n-pub unsafe fn abort_internal() -> ! {\n-    libc::abort()\n+pub fn abort_internal() -> ! {\n+    unsafe { libc::abort() }\n }"}, {"sha": "29fafaaa0b94f66bc9bf847d6f408ed66d928557", "filename": "src/libstd/sys/wasi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs?ref=9e2a6a29ce82e4fc5decad86dab7911a38582438", "patch": "@@ -100,8 +100,8 @@ pub unsafe fn strlen(mut s: *const c_char) -> usize {\n     return n;\n }\n \n-pub unsafe fn abort_internal() -> ! {\n-    libc::abort()\n+pub fn abort_internal() -> ! {\n+    unsafe { libc::abort() }\n }\n \n pub fn hashmap_random_keys() -> (u64, u64) {"}, {"sha": "050e8099af4badf7de0778abf9899ee9a8d1cbaa", "filename": "src/libstd/sys/wasm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs?ref=9e2a6a29ce82e4fc5decad86dab7911a38582438", "patch": "@@ -81,8 +81,8 @@ pub unsafe fn strlen(mut s: *const c_char) -> usize {\n     return n;\n }\n \n-pub unsafe fn abort_internal() -> ! {\n-    crate::arch::wasm32::unreachable()\n+pub fn abort_internal() -> ! {\n+    unsafe { crate::arch::wasm32::unreachable() }\n }\n \n // We don't have randomness yet, but I totally used a random number generator to"}, {"sha": "4098c6b3ee9377ee7966d9c0934911b6ed201cfa", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=9e2a6a29ce82e4fc5decad86dab7911a38582438", "patch": "@@ -308,11 +308,14 @@ pub fn dur2timeout(dur: Duration) -> c::DWORD {\n //\n // https://docs.microsoft.com/en-us/cpp/intrinsics/fastfail\n #[allow(unreachable_code)]\n-pub unsafe fn abort_internal() -> ! {\n+pub fn abort_internal() -> ! {\n     #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-    {\n+    unsafe {\n         llvm_asm!(\"int $$0x29\" :: \"{ecx}\"(7) ::: volatile); // 7 is FAST_FAIL_FATAL_APP_EXIT\n         crate::intrinsics::unreachable();\n     }\n-    crate::intrinsics::abort();\n+    #[cfg_attr(not(bootstrap), allow(unused_unsafe))] // remove `unsafe` on bootstrap bump\n+    unsafe {\n+        crate::intrinsics::abort();\n+    }\n }"}, {"sha": "9f7c3bd87952f31fcab40fa22d9034425df5d04e", "filename": "src/libstd/sys_common/util.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fsys_common%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2a6a29ce82e4fc5decad86dab7911a38582438/src%2Flibstd%2Fsys_common%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Futil.rs?ref=9e2a6a29ce82e4fc5decad86dab7911a38582438", "patch": "@@ -16,9 +16,7 @@ pub fn dumb_print(args: fmt::Arguments<'_>) {\n \n pub fn abort(args: fmt::Arguments<'_>) -> ! {\n     dumb_print(format_args!(\"fatal runtime error: {}\\n\", args));\n-    unsafe {\n-        crate::sys::abort_internal();\n-    }\n+    crate::sys::abort_internal();\n }\n \n #[allow(dead_code)] // stack overflow detection not enabled on all platforms"}]}