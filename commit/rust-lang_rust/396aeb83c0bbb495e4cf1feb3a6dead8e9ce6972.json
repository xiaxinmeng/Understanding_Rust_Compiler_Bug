{"sha": "396aeb83c0bbb495e4cf1feb3a6dead8e9ce6972", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NmFlYjgzYzBiYmI0OTVlNGNmMWZlYjNhNmRlYWQ4ZTljZTY5NzI=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-10T16:00:49Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-03-14T21:52:31Z"}, "message": "Optimize the HIR map", "tree": {"sha": "c90447fbfb0ca10edaf7786c8bd964f056651e54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c90447fbfb0ca10edaf7786c8bd964f056651e54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/396aeb83c0bbb495e4cf1feb3a6dead8e9ce6972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/396aeb83c0bbb495e4cf1feb3a6dead8e9ce6972", "html_url": "https://github.com/rust-lang/rust/commit/396aeb83c0bbb495e4cf1feb3a6dead8e9ce6972", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/396aeb83c0bbb495e4cf1feb3a6dead8e9ce6972/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aea57aee5fd6debadb91dd30cd4bb4ccb92411f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/aea57aee5fd6debadb91dd30cd4bb4ccb92411f6", "html_url": "https://github.com/rust-lang/rust/commit/aea57aee5fd6debadb91dd30cd4bb4ccb92411f6"}], "stats": {"total": 95, "additions": 49, "deletions": 46}, "files": [{"sha": "da2a8c05af5ec1e0a6768b80f9067bf19310b7cf", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 36, "deletions": 34, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/396aeb83c0bbb495e4cf1feb3a6dead8e9ce6972/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396aeb83c0bbb495e4cf1feb3a6dead8e9ce6972/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=396aeb83c0bbb495e4cf1feb3a6dead8e9ce6972", "patch": "@@ -1,6 +1,6 @@\n use crate::arena::Arena;\n use crate::hir::map::definitions::{self, DefPathHash};\n-use crate::hir::map::{Entry, Map};\n+use crate::hir::map::{Entry, HirOwnerData, Map};\n use crate::hir::{HirItem, HirOwner, HirOwnerItems};\n use crate::ich::StableHashingContext;\n use crate::middle::cstore::CrateStore;\n@@ -14,7 +14,7 @@ use rustc_hir::def_id::CRATE_DEF_INDEX;\n use rustc_hir::def_id::{CrateNum, DefIndex, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{Idx, IndexVec};\n use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::source_map::SourceMap;\n use rustc_span::{Span, Symbol, DUMMY_SP};\n@@ -31,8 +31,7 @@ pub(super) struct NodeCollector<'a, 'hir> {\n     /// Source map\n     source_map: &'a SourceMap,\n \n-    owner_map: FxHashMap<DefIndex, &'hir HirOwner<'hir>>,\n-    owner_items_map: FxHashMap<DefIndex, &'hir mut HirOwnerItems<'hir>>,\n+    map: IndexVec<DefIndex, HirOwnerData<'hir>>,\n \n     /// The parent of this node\n     parent_node: hir::HirId,\n@@ -49,6 +48,15 @@ pub(super) struct NodeCollector<'a, 'hir> {\n     hir_body_nodes: Vec<(DefPathHash, Fingerprint)>,\n }\n \n+fn insert_vec_map<K: Idx, V: Clone>(map: &mut IndexVec<K, Option<V>>, k: K, v: V) {\n+    let i = k.index();\n+    let len = map.len();\n+    if i >= len {\n+        map.extend(repeat(None).take(i - len + 1));\n+    }\n+    map[k] = Some(v);\n+}\n+\n fn hash(\n     hcx: &mut StableHashingContext<'_>,\n     input: impl for<'a> HashStable<StableHashingContext<'a>>,\n@@ -126,14 +134,9 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             hir_to_node_id,\n             hcx,\n             hir_body_nodes,\n-            owner_map: FxHashMap::with_capacity_and_hasher(\n-                definitions.def_index_count(),\n-                Default::default(),\n-            ),\n-            owner_items_map: FxHashMap::with_capacity_and_hasher(\n-                definitions.def_index_count(),\n-                Default::default(),\n-            ),\n+            map: (0..definitions.def_index_count())\n+                .map(|_| HirOwnerData { signature: None, with_bodies: None })\n+                .collect(),\n         };\n         collector.insert_entry(\n             hir::CRATE_HIR_ID,\n@@ -149,14 +152,10 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         crate_disambiguator: CrateDisambiguator,\n         cstore: &dyn CrateStore,\n         commandline_args_hash: u64,\n-    ) -> (\n-        FxHashMap<DefIndex, &'hir HirOwner<'hir>>,\n-        FxHashMap<DefIndex, &'hir mut HirOwnerItems<'hir>>,\n-        Svh,\n-    ) {\n+    ) -> (IndexVec<DefIndex, HirOwnerData<'hir>>, Svh) {\n         // Insert bodies into the map\n         for (id, body) in self.krate.bodies.iter() {\n-            let bodies = &mut self.owner_items_map.get_mut(&id.hir_id.owner).unwrap().bodies;\n+            let bodies = &mut self.map[id.hir_id.owner].with_bodies.as_mut().unwrap().bodies;\n             assert!(bodies.insert(id.hir_id.local_id, body).is_none());\n         }\n \n@@ -196,39 +195,42 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         let crate_hash: Fingerprint = stable_hasher.finish();\n \n         let svh = Svh::new(crate_hash.to_smaller_hash());\n-        (self.owner_map, self.owner_items_map, svh)\n+        (self.map, svh)\n     }\n \n     fn insert_entry(&mut self, id: HirId, entry: Entry<'hir>, hash: Fingerprint) {\n         let i = id.local_id.as_u32() as usize;\n \n-        let owner = HirOwner { parent: entry.parent, node: entry.node };\n-\n         let arena = self.arena;\n \n-        let items = self.owner_items_map.entry(id.owner).or_insert_with(|| {\n-            arena.alloc(HirOwnerItems {\n+        let data = &mut self.map[id.owner];\n+\n+        if data.with_bodies.is_none() {\n+            data.with_bodies = Some(arena.alloc(HirOwnerItems {\n                 hash,\n                 items: IndexVec::new(),\n                 bodies: FxHashMap::default(),\n-            })\n-        });\n+            }));\n+        }\n+\n+        let items = data.with_bodies.as_mut().unwrap();\n \n         if i == 0 {\n             // Overwrite the dummy hash with the real HIR owner hash.\n             items.hash = hash;\n \n-            self.owner_map.insert(id.owner, self.arena.alloc(owner));\n-        // FIXME: feature(impl_trait_in_bindings) broken and trigger this assert\n-        //assert!(self.owner_map.insert(id.owner, self.arena.alloc(owner)).is_none());\n+            // FIXME: feature(impl_trait_in_bindings) broken and trigger this assert\n+            //assert!(data.signature.is_none());\n+\n+            data.signature =\n+                Some(self.arena.alloc(HirOwner { parent: entry.parent, node: entry.node }));\n         } else {\n-            let len = items.items.len();\n-            if i >= len {\n-                items.items.extend(repeat(None).take(i - len + 1));\n-            }\n             assert_eq!(entry.parent.owner, id.owner);\n-            items.items[id.local_id] =\n-                Some(HirItem { parent: entry.parent.local_id, node: entry.node });\n+            insert_vec_map(\n+                &mut items.items,\n+                id.local_id,\n+                HirItem { parent: entry.parent.local_id, node: entry.node },\n+            );\n         }\n     }\n "}, {"sha": "3bdd2b1ac3ca73cbdadfb3336254e49f5cfe3980", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/396aeb83c0bbb495e4cf1feb3a6dead8e9ce6972/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396aeb83c0bbb495e4cf1feb3a6dead8e9ce6972/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=396aeb83c0bbb495e4cf1feb3a6dead8e9ce6972", "patch": "@@ -15,6 +15,7 @@ use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::print::Nested;\n use rustc_hir::*;\n+use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::kw;\n@@ -128,12 +129,16 @@ fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {\n     }\n }\n \n+pub(super) struct HirOwnerData<'hir> {\n+    pub(super) signature: Option<&'hir HirOwner<'hir>>,\n+    pub(super) with_bodies: Option<&'hir mut HirOwnerItems<'hir>>,\n+}\n+\n pub struct IndexedHir<'hir> {\n     /// The SVH of the local crate.\n     pub crate_hash: Svh,\n \n-    pub(super) owner_map: FxHashMap<DefIndex, &'hir HirOwner<'hir>>,\n-    pub(super) owner_items_map: FxHashMap<DefIndex, &'hir HirOwnerItems<'hir>>,\n+    pub(super) map: IndexVec<DefIndex, HirOwnerData<'hir>>,\n \n     /// The reverse mapping of `node_to_hir_id`.\n     pub(super) hir_to_node_id: FxHashMap<HirId, NodeId>,\n@@ -1036,7 +1041,7 @@ pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx Indexe\n         .map(|(node_id, &hir_id)| (hir_id, node_id))\n         .collect();\n \n-    let (owner_map, owner_items_map, crate_hash) = {\n+    let (map, crate_hash) = {\n         let hcx = tcx.create_stable_hashing_context();\n \n         let mut collector = NodeCollector::root(\n@@ -1054,12 +1059,7 @@ pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx Indexe\n         collector.finalize_and_compute_crate_hash(crate_disambiguator, &*tcx.cstore, cmdline_args)\n     };\n \n-    let map = tcx.arena.alloc(IndexedHir {\n-        crate_hash,\n-        owner_map,\n-        owner_items_map: owner_items_map.into_iter().map(|(k, v)| (k, &*v)).collect(),\n-        hir_to_node_id,\n-    });\n+    let map = tcx.arena.alloc(IndexedHir { crate_hash, map, hir_to_node_id });\n \n     map\n }"}, {"sha": "3b69fc8d8f2ac7e21f5c0d2e378efc674859bca1", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/396aeb83c0bbb495e4cf1feb3a6dead8e9ce6972/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396aeb83c0bbb495e4cf1feb3a6dead8e9ce6972/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=396aeb83c0bbb495e4cf1feb3a6dead8e9ce6972", "patch": "@@ -78,8 +78,9 @@ pub fn provide(providers: &mut Providers<'_>) {\n         let module = hir.as_local_hir_id(id).unwrap();\n         &tcx.untracked_crate.modules[&module]\n     };\n-    providers.hir_owner = |tcx, id| *tcx.index_hir(id.krate).owner_map.get(&id.index).unwrap();\n-    providers.hir_owner_items =\n-        |tcx, id| *tcx.index_hir(id.krate).owner_items_map.get(&id.index).unwrap();\n+    providers.hir_owner = |tcx, id| tcx.index_hir(id.krate).map[id.index].signature.unwrap();\n+    providers.hir_owner_items = |tcx, id| {\n+        tcx.index_hir(id.krate).map[id.index].with_bodies.as_ref().map(|items| &**items).unwrap()\n+    };\n     map::provide(providers);\n }"}]}