{"sha": "9fe03b3c556eddd99887e7968f9757f7bdf91cc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZTAzYjNjNTU2ZWRkZDk5ODg3ZTc5NjhmOTc1N2Y3YmRmOTFjYzE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-11T23:55:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-11T23:56:02Z"}, "message": "Pull lexer creation out of new_parser\n\nThis will allow custom lexers to be injected into the parser (for fuzzing)", "tree": {"sha": "f8d2c1f5039a7666410f2b36e1e02d9612174e69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8d2c1f5039a7666410f2b36e1e02d9612174e69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fe03b3c556eddd99887e7968f9757f7bdf91cc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe03b3c556eddd99887e7968f9757f7bdf91cc1", "html_url": "https://github.com/rust-lang/rust/commit/9fe03b3c556eddd99887e7968f9757f7bdf91cc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fe03b3c556eddd99887e7968f9757f7bdf91cc1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08f8753d8036bcb51c8ead8a69fb16cacc8c80ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/08f8753d8036bcb51c8ead8a69fb16cacc8c80ec", "html_url": "https://github.com/rust-lang/rust/commit/08f8753d8036bcb51c8ead8a69fb16cacc8c80ec"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "226d84233e0b214eea3d65055a13abd88471e3fb", "filename": "src/comp/syntax/parse/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fe03b3c556eddd99887e7968f9757f7bdf91cc1/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe03b3c556eddd99887e7968f9757f7bdf91cc1/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs?ref=9fe03b3c556eddd99887e7968f9757f7bdf91cc1", "patch": "@@ -7,7 +7,7 @@ import std::option::none;\n import syntax::ast;\n import syntax::parse::token;\n import syntax::parse::parser::parser;\n-import syntax::parse::parser::new_parser;\n+import syntax::parse::parser::new_parser_from_file;\n import syntax::parse::parser::parse_inner_attrs_and_next;\n import syntax::parse::parser::parse_mod_items;\n \n@@ -57,7 +57,7 @@ fn eval_crate_directive(ctx cx, @ast::crate_directive cdir, str prefix,\n             };\n             if (cx.mode == mode_depend) { cx.deps += [full_path]; ret; }\n             auto p0 =\n-                new_parser(cx.sess, cx.cfg, full_path, cx.chpos);\n+                new_parser_from_file(cx.sess, cx.cfg, full_path, cx.chpos);\n             auto inner_attrs = parse_inner_attrs_and_next(p0);\n             auto mod_attrs = attrs + inner_attrs._0;\n             auto first_item_outer_attrs = inner_attrs._1;"}, {"sha": "7a1cb6edaeddf22ae2680b338fed63f0dbb4b53e", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9fe03b3c556eddd99887e7968f9757f7bdf91cc1/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe03b3c556eddd99887e7968f9757f7bdf91cc1/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=9fe03b3c556eddd99887e7968f9757f7bdf91cc1", "patch": "@@ -56,8 +56,22 @@ type parser =\n         fn get_sess() -> parse_sess;\n     };\n \n-fn new_parser(parse_sess sess, ast::crate_cfg cfg,\n-              str path, uint pos) -> parser {\n+fn new_parser_from_file(parse_sess sess, ast::crate_cfg cfg,\n+                        str path, uint pos) -> parser {\n+    auto ftype = SOURCE_FILE;\n+    if (str::ends_with(path, \".rc\")) { ftype = CRATE_FILE; }\n+    auto srdr = io::file_reader(path);\n+    auto src = str::unsafe_from_bytes(srdr.read_whole_stream());\n+    auto filemap = codemap::new_filemap(path, pos);\n+    vec::push(sess.cm.files, filemap);\n+    auto itr = @interner::mk(str::hash, str::eq);\n+    auto rdr = lexer::new_reader(sess.cm, src, filemap, itr);\n+\n+    ret new_parser(sess, cfg, rdr, ftype);\n+}\n+\n+fn new_parser(parse_sess sess, ast::crate_cfg cfg, lexer::reader rdr,\n+              file_type ftype) -> parser {\n     obj stdio_parser(parse_sess sess,\n                      ast::crate_cfg cfg,\n                      file_type ftype,\n@@ -110,16 +124,7 @@ fn new_parser(parse_sess sess, ast::crate_cfg cfg,\n         fn get_sess() -> parse_sess { ret sess; }\n     }\n \n-    auto ftype = SOURCE_FILE;\n-    if (str::ends_with(path, \".rc\")) { ftype = CRATE_FILE; }\n-    auto srdr = io::file_reader(path);\n-    auto src = str::unsafe_from_bytes(srdr.read_whole_stream());\n-    auto filemap = codemap::new_filemap(path, pos);\n-    vec::push(sess.cm.files, filemap);\n-    auto itr = @interner::mk(str::hash, str::eq);\n-    auto rdr = lexer::new_reader(sess.cm, src, filemap, itr);\n     // Make sure npos points at first actual token:\n-\n     lexer::consume_whitespace_and_comments(rdr);\n     auto npos = rdr.get_chpos();\n     ret stdio_parser(sess, cfg, ftype, lexer::next_token(rdr),\n@@ -2426,7 +2431,7 @@ fn parse_native_view(&parser p) -> (@ast::view_item)[] {\n fn parse_crate_from_source_file(&str input, &ast::crate_cfg cfg,\n                                 &codemap::codemap cm) -> @ast::crate {\n     auto sess = @rec(cm=cm, mutable next_id=0);\n-    auto p = new_parser(sess, cfg, input, 0u);\n+    auto p = new_parser_from_file(sess, cfg, input, 0u);\n     auto lo = p.get_lo_pos();\n     auto crate_attrs = parse_inner_attrs_and_next(p);\n     auto first_item_outer_attrs = crate_attrs._1;\n@@ -2535,7 +2540,7 @@ fn parse_crate_directives(&parser p, token::token term,\n fn parse_crate_from_crate_file(&str input, &ast::crate_cfg cfg,\n                                &codemap::codemap cm) -> @ast::crate {\n     auto sess = @rec(cm=cm, mutable next_id=0);\n-    auto p = new_parser(sess, cfg, input, 0u);\n+    auto p = new_parser_from_file(sess, cfg, input, 0u);\n     auto lo = p.get_lo_pos();\n     auto prefix = std::fs::dirname(p.get_filemap().name);\n     auto leading_attrs = parse_inner_attrs_and_next(p);"}]}