{"sha": "cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZGJkOTk4YTQ2NjllMDI2YjJhMWIzNGRlOTVkOTFjZDBmZGUxYTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-13T19:45:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-13T19:45:15Z"}, "message": "Auto merge of #28339 - alexcrichton:stabilize-1.4, r=aturon\n\nThe FCP is coming to a close and 1.4 is coming out soon, so this brings in the\r\nlibs team decision for all library features this cycle.\r\n\r\nStabilized APIs:\r\n\r\n* `<Box<str>>::into_string`\r\n* `Arc::downgrade`\r\n* `Arc::get_mut`\r\n* `Arc::make_mut`\r\n* `Arc::try_unwrap`\r\n* `Box::from_raw`\r\n* `Box::into_raw`\r\n* `CStr::to_str`\r\n* `CStr::to_string_lossy`\r\n* `CString::from_raw`\r\n* `CString::into_raw`\r\n* `IntoRawFd::into_raw_fd`\r\n* `IntoRawFd`\r\n* `IntoRawHandle::into_raw_handle`\r\n* `IntoRawHandle`\r\n* `IntoRawSocket::into_raw_socket`\r\n* `IntoRawSocket`\r\n* `Rc::downgrade`\r\n* `Rc::get_mut`\r\n* `Rc::make_mut`\r\n* `Rc::try_unwrap`\r\n* `Result::expect`\r\n* `String::into_boxed_slice`\r\n* `TcpSocket::read_timeout`\r\n* `TcpSocket::set_read_timeout`\r\n* `TcpSocket::set_write_timeout`\r\n* `TcpSocket::write_timeout`\r\n* `UdpSocket::read_timeout`\r\n* `UdpSocket::set_read_timeout`\r\n* `UdpSocket::set_write_timeout`\r\n* `UdpSocket::write_timeout`\r\n* `Vec::append`\r\n* `Vec::split_off`\r\n* `VecDeque::append`\r\n* `VecDeque::retain`\r\n* `VecDeque::split_off`\r\n* `rc::Weak::upgrade`\r\n* `rc::Weak`\r\n* `slice::Iter::as_slice`\r\n* `slice::IterMut::into_slice`\r\n* `str::CharIndices::as_str`\r\n* `str::Chars::as_str`\r\n* `str::split_at_mut`\r\n* `str::split_at`\r\n* `sync::Weak::upgrade`\r\n* `sync::Weak`\r\n* `thread::park_timeout`\r\n* `thread::sleep`\r\n\r\nDeprecated APIs\r\n\r\n* `BTreeMap::with_b`\r\n* `BTreeSet::with_b`\r\n* `Option::as_mut_slice`\r\n* `Option::as_slice`\r\n* `Result::as_mut_slice`\r\n* `Result::as_slice`\r\n* `f32::from_str_radix`\r\n* `f64::from_str_radix`\r\n\r\nCloses #27277\r\nCloses #27718\r\nCloses #27736\r\nCloses #27764\r\nCloses #27765\r\nCloses #27766\r\nCloses #27767\r\nCloses #27768\r\nCloses #27769\r\nCloses #27771\r\nCloses #27773\r\nCloses #27775\r\nCloses #27776\r\nCloses #27785\r\nCloses #27792\r\nCloses #27795\r\nCloses #27797", "tree": {"sha": "c201a78235b82e78e92cd4f5b51d7022ffddfea6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c201a78235b82e78e92cd4f5b51d7022ffddfea6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "html_url": "https://github.com/rust-lang/rust/commit/cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c494cf1d01befbc85247a4bb82c3d15cadcfedeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c494cf1d01befbc85247a4bb82c3d15cadcfedeb", "html_url": "https://github.com/rust-lang/rust/commit/c494cf1d01befbc85247a4bb82c3d15cadcfedeb"}, {"sha": "f0b1326dc79e186f89b65336ae85f3a8ac6db4c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0b1326dc79e186f89b65336ae85f3a8ac6db4c1", "html_url": "https://github.com/rust-lang/rust/commit/f0b1326dc79e186f89b65336ae85f3a8ac6db4c1"}], "stats": {"total": 261, "additions": 121, "deletions": 140}, "files": [{"sha": "78821403de0116cf2a5700cb1b2e6de1f2f391b3", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -137,7 +137,7 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Arc<U>> for Arc<T> {}\n /// Weak pointers will not keep the data inside of the `Arc` alive, and can be\n /// used to break cycles between `Arc` pointers.\n #[unsafe_no_drop_flag]\n-#[unstable(feature = \"arc_weak\", reason = \"needs FCP\", issue = \"27718\")]\n+#[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n pub struct Weak<T: ?Sized> {\n     // FIXME #12808: strange name to try to avoid interfering with\n     // field accesses of the contained type via Deref\n@@ -201,7 +201,6 @@ impl<T> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(arc_unique)]\n     /// use std::sync::Arc;\n     ///\n     /// let x = Arc::new(3);\n@@ -212,7 +211,7 @@ impl<T> Arc<T> {\n     /// assert_eq!(Arc::try_unwrap(x), Err(Arc::new(4)));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"arc_unique\", reason = \"needs FCP\", issue = \"27718\")]\n+    #[stable(feature = \"arc_unique\", since = \"1.4.0\")]\n     pub fn try_unwrap(this: Self) -> Result<T, Self> {\n         // See `drop` for why all these atomics are like this\n         if this.inner().strong.compare_and_swap(1, 0, Release) != 1 { return Err(this) }\n@@ -238,14 +237,13 @@ impl<T: ?Sized> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(arc_weak)]\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n     ///\n     /// let weak_five = Arc::downgrade(&five);\n     /// ```\n-    #[unstable(feature = \"arc_weak\", reason = \"needs FCP\", issue = \"27718\")]\n+    #[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n     pub fn downgrade(this: &Self) -> Weak<T> {\n         loop {\n             // This Relaxed is OK because we're checking the value in the CAS\n@@ -270,14 +268,16 @@ impl<T: ?Sized> Arc<T> {\n \n     /// Get the number of weak references to this value.\n     #[inline]\n-    #[unstable(feature = \"arc_counts\", reason = \"not clearly useful, and racy\", issue = \"27718\")]\n+    #[unstable(feature = \"arc_counts\", reason = \"not clearly useful, and racy\",\n+               issue = \"28356\")]\n     pub fn weak_count(this: &Self) -> usize {\n         this.inner().weak.load(SeqCst) - 1\n     }\n \n     /// Get the number of strong references to this value.\n     #[inline]\n-    #[unstable(feature = \"arc_counts\", reason = \"not clearly useful, and racy\", issue = \"27718\")]\n+    #[unstable(feature = \"arc_counts\", reason = \"not clearly useful, and racy\",\n+               issue = \"28356\")]\n     pub fn strong_count(this: &Self) -> usize {\n         this.inner().strong.load(SeqCst)\n     }\n@@ -366,7 +366,8 @@ impl<T: ?Sized> Deref for Arc<T> {\n }\n \n impl<T: Clone> Arc<T> {\n-    #[unstable(feature = \"arc_unique\", reason = \"renamed to Arc::make_mut\", issue = \"27718\")]\n+    #[unstable(feature = \"arc_make_unique\", reason = \"renamed to Arc::make_mut\",\n+               issue = \"27718\")]\n     #[deprecated(since = \"1.4.0\", reason = \"renamed to Arc::make_mut\")]\n     pub fn make_unique(this: &mut Self) -> &mut T {\n         Arc::make_mut(this)\n@@ -381,7 +382,6 @@ impl<T: Clone> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(arc_unique)]\n     /// use std::sync::Arc;\n     ///\n     /// let mut data = Arc::new(5);\n@@ -398,7 +398,7 @@ impl<T: Clone> Arc<T> {\n     ///\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"arc_unique\", reason = \"needs FCP\", issue = \"27718\")]\n+    #[stable(feature = \"arc_unique\", since = \"1.4.0\")]\n     pub fn make_mut(this: &mut Self) -> &mut T {\n         // Note that we hold both a strong reference and a weak reference.\n         // Thus, releasing our strong reference only will not, by itself, cause\n@@ -460,7 +460,6 @@ impl<T: ?Sized> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(arc_unique)]\n     /// use std::sync::Arc;\n     ///\n     /// let mut x = Arc::new(3);\n@@ -471,7 +470,7 @@ impl<T: ?Sized> Arc<T> {\n     /// assert!(Arc::get_mut(&mut x).is_none());\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"arc_unique\", reason = \"needs FCP\", issue = \"27718\")]\n+    #[stable(feature = \"arc_unique\", since = \"1.4.0\")]\n     pub fn get_mut(this: &mut Self) -> Option<&mut T> {\n         if this.is_unique() {\n             // This unsafety is ok because we're guaranteed that the pointer\n@@ -595,7 +594,6 @@ impl<T: ?Sized> Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(arc_weak)]\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n@@ -604,7 +602,7 @@ impl<T: ?Sized> Weak<T> {\n     ///\n     /// let strong_five: Option<Arc<_>> = weak_five.upgrade();\n     /// ```\n-    #[unstable(feature = \"arc_weak\", reason = \"needs FCP\", issue = \"27718\")]\n+    #[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n     pub fn upgrade(&self) -> Option<Arc<T>> {\n         // We use a CAS loop to increment the strong count instead of a\n         // fetch_add because once the count hits 0 it must never be above 0.\n@@ -630,7 +628,7 @@ impl<T: ?Sized> Weak<T> {\n     }\n }\n \n-#[unstable(feature = \"arc_weak\", reason = \"needs FCP\", issue = \"27718\")]\n+#[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n impl<T: ?Sized> Clone for Weak<T> {\n     /// Makes a clone of the `Weak<T>`.\n     ///\n@@ -639,7 +637,6 @@ impl<T: ?Sized> Clone for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(arc_weak)]\n     /// use std::sync::Arc;\n     ///\n     /// let weak_five = Arc::downgrade(&Arc::new(5));\n@@ -672,7 +669,6 @@ impl<T: ?Sized> Drop for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(arc_weak)]\n     /// use std::sync::Arc;\n     ///\n     /// {"}, {"sha": "4293b4765e127777fb6614bae1b2f77c835f28cd", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -226,11 +226,8 @@ impl<T : ?Sized> Box<T> {\n     /// Function is unsafe, because improper use of this function may\n     /// lead to memory problems like double-free, for example if the\n     /// function is called twice on the same raw pointer.\n-    #[unstable(feature = \"box_raw\",\n-               reason = \"may be renamed or moved out of Box scope\",\n-               issue = \"27768\")]\n+    #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n-    // NB: may want to be called from_ptr, see comments on CStr::from_ptr\n     pub unsafe fn from_raw(raw: *mut T) -> Self {\n         mem::transmute(raw)\n     }\n@@ -244,17 +241,14 @@ impl<T : ?Sized> Box<T> {\n     /// `Box` does not specify, how memory is allocated.\n     ///\n     /// # Examples\n-    /// ```\n-    /// #![feature(box_raw)]\n     ///\n+    /// ```\n     /// let seventeen = Box::new(17u32);\n     /// let raw = Box::into_raw(seventeen);\n     /// let boxed_again = unsafe { Box::from_raw(raw) };\n     /// ```\n-    #[unstable(feature = \"box_raw\", reason = \"may be renamed\",\n-               issue = \"27768\")]\n+    #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n-    // NB: may want to be called into_ptr, see comments on CStr::from_ptr\n     pub fn into_raw(b: Box<T>) -> *mut T {\n         unsafe { mem::transmute(b) }\n     }\n@@ -289,8 +283,6 @@ impl<T: Clone> Clone for Box<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(box_raw)]\n-    ///\n     /// let x = Box::new(5);\n     /// let mut y = Box::new(10);\n     ///"}, {"sha": "1beb015364d9e4f80ed4091a7eaab02d0a5cecbe", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -100,7 +100,7 @@\n #![cfg_attr(stage0, feature(alloc_system))]\n #![cfg_attr(not(stage0), feature(needs_allocator))]\n \n-#![cfg_attr(test, feature(test, rustc_private, box_raw))]\n+#![cfg_attr(test, feature(test, rustc_private))]\n \n #[cfg(stage0)]\n extern crate alloc_system;"}, {"sha": "4fe474cef0a26e21a69fc69ebb126bed2e16d7f4", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME(27718): rc_counts stuff is useful internally, but was previously public\n #![allow(deprecated)]\n \n //! Thread-local reference-counted boxes (the `Rc<T>` type).\n@@ -94,8 +93,6 @@\n //! documentation for more details on interior mutability.\n //!\n //! ```rust\n-//! #![feature(rc_weak)]\n-//!\n //! use std::rc::Rc;\n //! use std::rc::Weak;\n //! use std::cell::RefCell;\n@@ -242,7 +239,7 @@ impl<T> Rc<T> {\n     /// assert_eq!(Rc::try_unwrap(x), Err(Rc::new(4)));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"rc_unique\", reason=  \"needs FCP\", issue = \"27718\")]\n+    #[stable(feature = \"rc_unique\", since = \"1.4.0\")]\n     pub fn try_unwrap(this: Self) -> Result<T, Self> {\n         if Rc::would_unwrap(&this) {\n             unsafe {\n@@ -263,8 +260,9 @@ impl<T> Rc<T> {\n     }\n \n     /// Checks if `Rc::try_unwrap` would return `Ok`.\n-    #[unstable(feature = \"rc_would_unwrap\", reason = \"just added for niche usecase\",\n-               issue = \"27718\")]\n+    #[unstable(feature = \"rc_would_unwrap\",\n+               reason = \"just added for niche usecase\",\n+               issue = \"28356\")]\n     pub fn would_unwrap(this: &Self) -> bool {\n         Rc::strong_count(&this) == 1\n     }\n@@ -276,28 +274,28 @@ impl<T: ?Sized> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rc_weak)]\n-    ///\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n     ///\n     /// let weak_five = Rc::downgrade(&five);\n     /// ```\n-    #[unstable(feature = \"rc_weak\", reason = \"needs FCP\", issue = \"27718\")]\n+    #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n     pub fn downgrade(this: &Self) -> Weak<T> {\n         this.inc_weak();\n         Weak { _ptr: this._ptr }\n     }\n \n     /// Get the number of weak references to this value.\n     #[inline]\n-    #[unstable(feature = \"rc_counts\", reason = \"not clearly useful\", issue = \"27718\")]\n+    #[unstable(feature = \"rc_counts\", reason = \"not clearly useful\",\n+               issue = \"28356\")]\n     pub fn weak_count(this: &Self) -> usize { this.weak() - 1 }\n \n     /// Get the number of strong references to this value.\n     #[inline]\n-    #[unstable(feature = \"rc_counts\", reason = \"not clearly useful\", issue = \"27718\")]\n+    #[unstable(feature = \"rc_counts\", reason = \"not clearly useful\",\n+               issue = \"28356\")]\n     pub fn strong_count(this: &Self) -> usize { this.strong() }\n \n     /// Returns true if there are no other `Rc` or `Weak<T>` values that share\n@@ -315,7 +313,8 @@ impl<T: ?Sized> Rc<T> {\n     /// assert!(Rc::is_unique(&five));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"rc_counts\", reason = \"uniqueness has unclear meaning\", issue = \"27718\")]\n+    #[unstable(feature = \"rc_counts\", reason = \"uniqueness has unclear meaning\",\n+               issue = \"28356\")]\n     pub fn is_unique(this: &Self) -> bool {\n         Rc::weak_count(this) == 0 && Rc::strong_count(this) == 1\n     }\n@@ -328,8 +327,6 @@ impl<T: ?Sized> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rc_unique)]\n-    ///\n     /// use std::rc::Rc;\n     ///\n     /// let mut x = Rc::new(3);\n@@ -340,7 +337,7 @@ impl<T: ?Sized> Rc<T> {\n     /// assert!(Rc::get_mut(&mut x).is_none());\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"rc_unique\", reason = \"needs FCP\", issue = \"27718\")]\n+    #[stable(feature = \"rc_unique\", since = \"1.4.0\")]\n     pub fn get_mut(this: &mut Self) -> Option<&mut T> {\n         if Rc::is_unique(this) {\n             let inner = unsafe { &mut **this._ptr };\n@@ -353,7 +350,8 @@ impl<T: ?Sized> Rc<T> {\n \n impl<T: Clone> Rc<T> {\n     #[inline]\n-    #[unstable(feature = \"rc_unique\", reason = \"renamed to Rc::make_mut\", issue = \"27718\")]\n+    #[unstable(feature = \"rc_make_unique\", reason = \"renamed to Rc::make_mut\",\n+               issue = \"27718\")]\n     #[deprecated(since = \"1.4.0\", reason = \"renamed to Rc::make_mut\")]\n     pub fn make_unique(&mut self) -> &mut T {\n         Rc::make_mut(self)\n@@ -385,7 +383,7 @@ impl<T: Clone> Rc<T> {\n     ///\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"rc_unique\", reason = \"needs FCP\", issue = \"27718\")]\n+    #[stable(feature = \"rc_unique\", since = \"1.4.0\")]\n     pub fn make_mut(this: &mut Self) -> &mut T {\n         if Rc::strong_count(this) != 1 {\n             // Gotta clone the data, there are other Rcs\n@@ -693,7 +691,7 @@ impl<T> fmt::Pointer for Rc<T> {\n ///\n /// See the [module level documentation](./index.html) for more.\n #[unsafe_no_drop_flag]\n-#[unstable(feature = \"rc_weak\", reason = \"needs FCP\", issue = \"27718\")]\n+#[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n pub struct Weak<T: ?Sized> {\n     // FIXME #12808: strange names to try to avoid interfering with\n     // field accesses of the contained type via Deref\n@@ -716,8 +714,6 @@ impl<T: ?Sized> Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rc_weak)]\n-    ///\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n@@ -726,7 +722,7 @@ impl<T: ?Sized> Weak<T> {\n     ///\n     /// let strong_five: Option<Rc<_>> = weak_five.upgrade();\n     /// ```\n-    #[unstable(feature = \"rc_weak\", reason = \"needs FCP\", issue = \"27718\")]\n+    #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n     pub fn upgrade(&self) -> Option<Rc<T>> {\n         if self.strong() == 0 {\n             None\n@@ -746,8 +742,6 @@ impl<T: ?Sized> Drop for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rc_weak)]\n-    ///\n     /// use std::rc::Rc;\n     ///\n     /// {\n@@ -783,7 +777,7 @@ impl<T: ?Sized> Drop for Weak<T> {\n     }\n }\n \n-#[unstable(feature = \"rc_weak\", reason = \"needs FCP\", issue = \"27718\")]\n+#[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n impl<T: ?Sized> Clone for Weak<T> {\n \n     /// Makes a clone of the `Weak<T>`.\n@@ -793,8 +787,6 @@ impl<T: ?Sized> Clone for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rc_weak)]\n-    ///\n     /// use std::rc::Rc;\n     ///\n     /// let weak_five = Rc::downgrade(&Rc::new(5));"}, {"sha": "aedfbe546de65e38f6545a503ea188f640d91aef", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -149,6 +149,7 @@ pub struct OccupiedEntry<'a, K:'a, V:'a> {\n impl<K: Ord, V> BTreeMap<K, V> {\n     /// Makes a new empty BTreeMap with a reasonable choice for B.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[allow(deprecated)]\n     pub fn new() -> BTreeMap<K, V> {\n         //FIXME(Gankro): Tune this as a function of size_of<K/V>?\n         BTreeMap::with_b(6)\n@@ -160,6 +161,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     #[unstable(feature = \"btree_b\",\n                reason = \"probably want this to be on the type, eventually\",\n                issue = \"27795\")]\n+    #[deprecated(since = \"1.4.0\", reason = \"niche API\")]\n     pub fn with_b(b: usize) -> BTreeMap<K, V> {\n         assert!(b > 1, \"B must be greater than 1\");\n         BTreeMap {\n@@ -183,6 +185,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// assert!(a.is_empty());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[allow(deprecated)]\n     pub fn clear(&mut self) {\n         let b = self.b;\n         // avoid recursive destructors by manually traversing the tree"}, {"sha": "eb2a6d5e088948bce606212b7b6443c5dffa94dc", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -104,6 +104,8 @@ impl<T: Ord> BTreeSet<T> {\n     #[unstable(feature = \"btree_b\",\n                reason = \"probably want this to be on the type, eventually\",\n                issue = \"27795\")]\n+    #[deprecated(since = \"1.4.0\", reason = \"niche API\")]\n+    #[allow(deprecated)]\n     pub fn with_b(b: usize) -> BTreeSet<T> {\n         BTreeSet { map: BTreeMap::with_b(b) }\n     }"}, {"sha": "fbb6c279bbcd8c951efbdd23ee63a18601951f0f", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -515,16 +515,14 @@ impl str {\n     /// assert_eq!(b, \" \u8001\u864e L\u00e9opard\");\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_at\", reason = \"recently added\",\n-               issue = \"27792\")]\n+    #[stable(feature = \"str_split_at\", since = \"1.4.0\")]\n     pub fn split_at(&self, mid: usize) -> (&str, &str) {\n         core_str::StrExt::split_at(self, mid)\n     }\n \n     /// Divide one mutable string slice into two at an index.\n     #[inline]\n-    #[unstable(feature = \"str_split_at\", reason = \"recently added\",\n-               issue = \"27792\")]\n+    #[stable(feature = \"str_split_at\", since = \"1.4.0\")]\n     pub fn split_at_mut(&mut self, mid: usize) -> (&mut str, &mut str) {\n         core_str::StrExt::split_at_mut(self, mid)\n     }\n@@ -1505,9 +1503,7 @@ impl str {\n     }\n \n     /// Converts the `Box<str>` into a `String` without copying or allocating.\n-    #[unstable(feature = \"box_str\",\n-               reason = \"recently added, matches RFC\",\n-               issue = \"27785\")]\n+    #[stable(feature = \"box_str\", since = \"1.4.0\")]\n     pub fn into_string(self: Box<str>) -> String {\n         unsafe {\n             let slice = mem::transmute::<Box<str>, Box<[u8]>>(self);"}, {"sha": "bb65d7469ab14938ecb7021f7f93ec6a2b9c9e90", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -722,9 +722,7 @@ impl String {\n     /// Converts the string into `Box<str>`.\n     ///\n     /// Note that this will drop any excess capacity.\n-    #[unstable(feature = \"box_str\",\n-               reason = \"recently added, matches RFC\",\n-               issue = \"27785\")]\n+    #[stable(feature = \"box_str\", since = \"1.4.0\")]\n     pub fn into_boxed_str(self) -> Box<str> {\n         let slice = self.vec.into_boxed_slice();\n         unsafe { mem::transmute::<Box<[u8]>, Box<str>>(slice) }\n@@ -733,7 +731,7 @@ impl String {\n     /// Converts the string into `Box<str>`.\n     ///\n     /// Note that this will drop any excess capacity.\n-    #[unstable(feature = \"box_str\",\n+    #[unstable(feature = \"box_str2\",\n                reason = \"recently added, matches RFC\",\n                issue = \"27785\")]\n     #[deprecated(since = \"1.4.0\", reason = \"renamed to `into_boxed_str`\")]"}, {"sha": "c99460a55c9522a82a350c462f7837fb7b798ec4", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -614,18 +614,14 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(append)]\n-    ///\n     /// let mut vec = vec![1, 2, 3];\n     /// let mut vec2 = vec![4, 5, 6];\n     /// vec.append(&mut vec2);\n     /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);\n     /// assert_eq!(vec2, []);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"append\",\n-               reason = \"new API, waiting for dust to settle\",\n-               issue = \"27765\")]\n+    #[stable(feature = \"append\", since = \"1.4.0\")]\n     pub fn append(&mut self, other: &mut Self) {\n         self.reserve(other.len());\n         let len = self.len();\n@@ -765,9 +761,7 @@ impl<T> Vec<T> {\n     /// assert_eq!(vec2, [2, 3]);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"split_off\",\n-               reason = \"new API, waiting for dust to settle\",\n-               issue = \"27766\")]\n+    #[stable(feature = \"split_off\", since = \"1.4.0\")]\n     pub fn split_off(&mut self, at: usize) -> Self {\n         assert!(at <= self.len(), \"`at` out of bounds\");\n "}, {"sha": "b6bf0669d0ff17f91dc2d0334379442a7bb6fa58", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -1322,9 +1322,7 @@ impl<T> VecDeque<T> {\n     /// assert_eq!(buf2.len(), 2);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"split_off\",\n-               reason = \"new API, waiting for dust to settle\",\n-               issue = \"27766\")]\n+    #[stable(feature = \"split_off\", since = \"1.4.0\")]\n     pub fn split_off(&mut self, at: usize) -> Self {\n         let len = self.len();\n         assert!(at <= len, \"`at` out of bounds\");\n@@ -1376,8 +1374,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(append)]\n-    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<_> = vec![1, 2, 3].into_iter().collect();\n@@ -1387,9 +1383,7 @@ impl<T> VecDeque<T> {\n     /// assert_eq!(buf2.len(), 0);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"append\",\n-               reason = \"new API, waiting for dust to settle\",\n-               issue = \"27765\")]\n+    #[stable(feature = \"append\", since = \"1.4.0\")]\n     pub fn append(&mut self, other: &mut Self) {\n         // naive impl\n         self.extend(other.drain());\n@@ -1415,9 +1409,7 @@ impl<T> VecDeque<T> {\n     /// let v: Vec<_> = buf.into_iter().collect();\n     /// assert_eq!(&v[..], &[2, 4]);\n     /// ```\n-    #[unstable(feature = \"vec_deque_retain\",\n-               reason = \"new API, waiting for dust to settle\",\n-               issue = \"27767\")]\n+    #[stable(feature = \"vec_deque_retain\", since = \"1.4.0\")]\n     pub fn retain<F>(&mut self, mut f: F) where F: FnMut(&T) -> bool {\n         let len = self.len();\n         let mut del = 0;"}, {"sha": "a539ef81db89cf8cf7c19bec0a5d77470a4eb44c", "filename": "src/libcore/option.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -289,6 +289,7 @@ impl<T> Option<T> {\n     #[unstable(feature = \"as_slice\",\n                reason = \"waiting for mut conventions\",\n                issue = \"27776\")]\n+    #[deprecated(since = \"1.4.0\", reason = \"niche API, unclear of usefulness\")]\n     pub fn as_mut_slice(&mut self) -> &mut [T] {\n         match *self {\n             Some(ref mut x) => {\n@@ -690,8 +691,9 @@ impl<T> Option<T> {\n \n     /// Converts from `Option<T>` to `&[T]` (without copying)\n     #[inline]\n-    #[unstable(feature = \"as_slice\", since = \"unsure of the utility here\",\n+    #[unstable(feature = \"as_slice\", reason = \"unsure of the utility here\",\n                issue = \"27776\")]\n+    #[deprecated(since = \"1.4.0\", reason = \"niche API, unclear of usefulness\")]\n     pub fn as_slice(&self) -> &[T] {\n         match *self {\n             Some(ref x) => slice::ref_slice(x),"}, {"sha": "e9a67196751e00f2e6eec7328ccc236133223c97", "filename": "src/libcore/result.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -405,8 +405,9 @@ impl<T, E> Result<T, E> {\n \n     /// Converts from `Result<T, E>` to `&[T]` (without copying)\n     #[inline]\n-    #[unstable(feature = \"as_slice\", since = \"unsure of the utility here\",\n+    #[unstable(feature = \"as_slice\", reason = \"unsure of the utility here\",\n                issue = \"27776\")]\n+    #[deprecated(since = \"1.4.0\", reason = \"niche API, unclear of usefulness\")]\n     pub fn as_slice(&self) -> &[T] {\n         match *self {\n             Ok(ref x) => slice::ref_slice(x),\n@@ -439,6 +440,7 @@ impl<T, E> Result<T, E> {\n     #[unstable(feature = \"as_slice\",\n                reason = \"waiting for mut conventions\",\n                issue = \"27776\")]\n+    #[deprecated(since = \"1.4.0\", reason = \"niche API, unclear of usefulness\")]\n     pub fn as_mut_slice(&mut self) -> &mut [T] {\n         match *self {\n             Ok(ref mut x) => slice::mut_ref_slice(x),\n@@ -742,12 +744,11 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     ///\n     /// # Examples\n     /// ```{.should_panic}\n-    /// #![feature(result_expect)]\n     /// let x: Result<u32, &str> = Err(\"emergency failure\");\n     /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"result_expect\", reason = \"newly introduced\", issue = \"27277\")]\n+    #[stable(feature = \"result_expect\", since = \"1.4.0\")]\n     pub fn expect(self, msg: &str) -> T {\n         match self {\n             Ok(t) => t,"}, {"sha": "8d3d798afef131215c71fdff08e0c9bad16844e1", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -800,7 +800,7 @@ impl<'a, T> Iter<'a, T> {\n     ///\n     /// This has the same lifetime as the original slice, and so the\n     /// iterator can continue to be used while this exists.\n-    #[unstable(feature = \"iter_to_slice\", issue = \"27775\")]\n+    #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]\n     pub fn as_slice(&self) -> &'a [T] {\n         make_slice!(self.ptr, self.end)\n     }\n@@ -848,7 +848,7 @@ impl<'a, T> IterMut<'a, T> {\n     /// to consume the iterator. Consider using the `Slice` and\n     /// `SliceMut` implementations for obtaining slices with more\n     /// restricted lifetimes that do not consume the iterator.\n-    #[unstable(feature = \"iter_to_slice\", issue = \"27775\")]\n+    #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]\n     pub fn into_slice(self) -> &'a mut [T] {\n         make_mut_slice!(self.ptr, self.end)\n     }"}, {"sha": "69ebcb1ab7e14928ed96f3f24b43460a5d522343", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -297,7 +297,7 @@ impl<'a> Chars<'a> {\n     ///\n     /// This has the same lifetime as the original slice, and so the\n     /// iterator can continue to be used while this exists.\n-    #[unstable(feature = \"iter_to_slice\", issue = \"27775\")]\n+    #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]\n     #[inline]\n     pub fn as_str(&self) -> &'a str {\n         unsafe { from_utf8_unchecked(self.iter.as_slice()) }\n@@ -356,7 +356,7 @@ impl<'a> CharIndices<'a> {\n     ///\n     /// This has the same lifetime as the original slice, and so the\n     /// iterator can continue to be used while this exists.\n-    #[unstable(feature = \"iter_to_slice\", issue = \"27775\")]\n+    #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]\n     #[inline]\n     pub fn as_str(&self) -> &'a str {\n         self.iter.as_str()"}, {"sha": "e87a179f58d144f8db7f98e4c2602e2184dc9342", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -33,7 +33,6 @@\n #![feature(rand)]\n #![feature(range_inclusive)]\n #![feature(raw)]\n-#![feature(result_expect)]\n #![feature(slice_bytes)]\n #![feature(slice_patterns)]\n #![feature(step_by)]"}, {"sha": "2c91a88f6ec9e8a5efd561757d0d321cb47ee7e3", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -170,7 +170,6 @@\n        html_playground_url = \"https://play.rust-lang.org/\")]\n #![deny(missing_docs)]\n \n-#![feature(box_raw)]\n #![feature(box_syntax)]\n #![feature(const_fn)]\n #![feature(iter_cmp)]"}, {"sha": "b11bf6f80fb7b556e0fada2045cae8d97e4d4597", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -25,7 +25,6 @@\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n-#![feature(append)]\n #![feature(associated_consts)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "8939028f6d90d63338cdd6537d9cd19d3d1d6311", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -25,7 +25,6 @@\n #![feature(rustc_private)]\n #![feature(slice_splits)]\n #![feature(staged_api)]\n-#![feature(rc_weak)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "a7fb3af138453ffa024b9b5eb2ad05d20425e340", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -42,7 +42,6 @@\n #![feature(unicode)]\n #![feature(unicode)]\n #![feature(vec_push_all)]\n-#![feature(rc_weak)]\n \n #![allow(trivial_casts)]\n "}, {"sha": "a11cd54b6580e98726c7511c9a74aa99657dd5f3", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -75,7 +75,6 @@ This API is completely unstable and subject to change.\n \n #![allow(non_camel_case_types)]\n \n-#![feature(append)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(drain)]"}, {"sha": "3a1853a7a6c623146d4f857dbb78ee55cf60a6c2", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -119,7 +119,7 @@ pub struct CString {\n /// Converting a foreign C string into a Rust `String`\n ///\n /// ```no_run\n-/// # #![feature(libc,cstr_to_str)]\n+/// # #![feature(libc)]\n /// extern crate libc;\n /// use std::ffi::CStr;\n ///\n@@ -205,7 +205,7 @@ impl CString {\n     /// The only appropriate argument is a pointer obtained by calling\n     /// `into_ptr`. The length of the string will be recalculated\n     /// using the pointer.\n-    #[unstable(feature = \"cstr_memory\", reason = \"recently added\",\n+    #[unstable(feature = \"cstr_memory2\", reason = \"recently added\",\n                issue = \"27769\")]\n     #[deprecated(since = \"1.4.0\", reason = \"renamed to from_raw\")]\n     pub unsafe fn from_ptr(ptr: *const libc::c_char) -> CString {\n@@ -217,8 +217,7 @@ impl CString {\n     /// The only appropriate argument is a pointer obtained by calling\n     /// `into_raw`. The length of the string will be recalculated\n     /// using the pointer.\n-    #[unstable(feature = \"cstr_memory\", reason = \"recently added\",\n-               issue = \"27769\")]\n+    #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub unsafe fn from_raw(ptr: *mut libc::c_char) -> CString {\n         let len = libc::strlen(ptr) + 1; // Including the NUL byte\n         let slice = slice::from_raw_parts(ptr, len as usize);\n@@ -233,7 +232,7 @@ impl CString {\n     /// this string.\n     ///\n     /// Failure to call `from_raw` will lead to a memory leak.\n-    #[unstable(feature = \"cstr_memory\", reason = \"recently added\",\n+    #[unstable(feature = \"cstr_memory2\", reason = \"recently added\",\n                issue = \"27769\")]\n     #[deprecated(since = \"1.4.0\", reason = \"renamed to into_raw\")]\n     pub fn into_ptr(self) -> *const libc::c_char {\n@@ -248,8 +247,7 @@ impl CString {\n     /// this string.\n     ///\n     /// Failure to call `from_ptr` will lead to a memory leak.\n-    #[unstable(feature = \"cstr_memory\", reason = \"recently added\",\n-               issue = \"27769\")]\n+    #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub fn into_raw(self) -> *mut libc::c_char {\n         Box::into_raw(self.inner) as *mut libc::c_char\n     }\n@@ -429,8 +427,7 @@ impl CStr {\n     /// > after a 0-cost cast, but it is planned to alter its definition in the\n     /// > future to perform the length calculation in addition to the UTF-8\n     /// > check whenever this method is called.\n-    #[unstable(feature = \"cstr_to_str\", reason = \"recently added\",\n-               issue = \"27764\")]\n+    #[stable(feature = \"cstr_to_str\", since = \"1.4.0\")]\n     pub fn to_str(&self) -> Result<&str, str::Utf8Error> {\n         // NB: When CStr is changed to perform the length check in .to_bytes()\n         // instead of in from_ptr(), it may be worth considering if this should\n@@ -450,8 +447,7 @@ impl CStr {\n     /// > after a 0-cost cast, but it is planned to alter its definition in the\n     /// > future to perform the length calculation in addition to the UTF-8\n     /// > check whenever this method is called.\n-    #[unstable(feature = \"cstr_to_str\", reason = \"recently added\",\n-               issue = \"27764\")]\n+    #[stable(feature = \"cstr_to_str\", since = \"1.4.0\")]\n     pub fn to_string_lossy(&self) -> Cow<str> {\n         String::from_utf8_lossy(self.to_bytes())\n     }"}, {"sha": "868fef06aa407907b00c853dd5f5f2eb24fc8d95", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -203,7 +203,6 @@\n #![feature(allow_internal_unstable)]\n #![feature(associated_consts)]\n #![feature(borrow_state)]\n-#![feature(box_raw)]\n #![feature(box_syntax)]\n #![feature(char_from_unchecked)]\n #![feature(char_internals)]"}, {"sha": "d563ba0b620425fcf686a3cd5ef36f85ce34149d", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -130,8 +130,13 @@ impl TcpStream {\n     /// If the value specified is `None`, then `read` calls will block\n     /// indefinitely. It is an error to pass the zero `Duration` to this\n     /// method.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n-               issue = \"27773\")]\n+    ///\n+    /// # Note\n+    ///\n+    /// Platforms may return a different error code whenever a read times out as\n+    /// a result of setting this option. For example Unix typically returns an\n+    /// error of the kind `WouldBlock`, but Windows may return `TimedOut`.\n+    #[stable(feature = \"socket_timeout\", since = \"1.4.0\")]\n     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {\n         self.0.set_read_timeout(dur)\n     }\n@@ -141,8 +146,13 @@ impl TcpStream {\n     /// If the value specified is `None`, then `write` calls will block\n     /// indefinitely. It is an error to pass the zero `Duration` to this\n     /// method.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n-               issue = \"27773\")]\n+    ///\n+    /// # Note\n+    ///\n+    /// Platforms may return a different error code whenever a write times out\n+    /// as a result of setting this option. For example Unix typically returns\n+    /// an error of the kind `WouldBlock`, but Windows may return `TimedOut`.\n+    #[stable(feature = \"socket_timeout\", since = \"1.4.0\")]\n     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {\n         self.0.set_write_timeout(dur)\n     }\n@@ -154,8 +164,7 @@ impl TcpStream {\n     /// # Note\n     ///\n     /// Some platforms do not provide access to the current timeout.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n-               issue = \"27773\")]\n+    #[stable(feature = \"socket_timeout\", since = \"1.4.0\")]\n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n         self.0.read_timeout()\n     }\n@@ -167,8 +176,7 @@ impl TcpStream {\n     /// # Note\n     ///\n     /// Some platforms do not provide access to the current timeout.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n-               issue = \"27773\")]\n+    #[stable(feature = \"socket_timeout\", since = \"1.4.0\")]\n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n         self.0.write_timeout()\n     }"}, {"sha": "74c4416b35bfe5a32f0a988e2d88f793901128f1", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -97,8 +97,13 @@ impl UdpSocket {\n     /// If the value specified is `None`, then `read` calls will block\n     /// indefinitely. It is an error to pass the zero `Duration` to this\n     /// method.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n-               issue = \"27773\")]\n+    ///\n+    /// # Note\n+    ///\n+    /// Platforms may return a different error code whenever a read times out as\n+    /// a result of setting this option. For example Unix typically returns an\n+    /// error of the kind `WouldBlock`, but Windows may return `TimedOut`.\n+    #[stable(feature = \"socket_timeout\", since = \"1.4.0\")]\n     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {\n         self.0.set_read_timeout(dur)\n     }\n@@ -108,26 +113,29 @@ impl UdpSocket {\n     /// If the value specified is `None`, then `write` calls will block\n     /// indefinitely. It is an error to pass the zero `Duration` to this\n     /// method.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n-               issue = \"27773\")]\n+    ///\n+    /// # Note\n+    ///\n+    /// Platforms may return a different error code whenever a write times out\n+    /// as a result of setting this option. For example Unix typically returns\n+    /// an error of the kind `WouldBlock`, but Windows may return `TimedOut`.\n+    #[stable(feature = \"socket_timeout\", since = \"1.4.0\")]\n     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {\n         self.0.set_write_timeout(dur)\n     }\n \n     /// Returns the read timeout of this socket.\n     ///\n     /// If the timeout is `None`, then `read` calls will block indefinitely.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n-               issue = \"27773\")]\n+    #[stable(feature = \"socket_timeout\", since = \"1.4.0\")]\n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n         self.0.read_timeout()\n     }\n \n     /// Returns the write timeout of this socket.\n     ///\n     /// If the timeout is `None`, then `write` calls will block indefinitely.\n-    #[unstable(feature = \"socket_timeout\", reason = \"RFC 1047 - recently added\",\n-               issue = \"27773\")]\n+    #[stable(feature = \"socket_timeout\", since = \"1.4.0\")]\n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n         self.0.write_timeout()\n     }"}, {"sha": "a04dfbeebe8e6b18704e3d2b88d4057a4381ef05", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -125,6 +125,8 @@ impl f32 {\n     /// Parses a float as with a given radix\n     #[unstable(feature = \"float_from_str_radix\", reason = \"recently moved API\",\n                issue = \"27736\")]\n+    #[deprecated(since = \"1.4.0\",\n+                 reason = \"unclear how useful or correct this is\")]\n     pub fn from_str_radix(s: &str, radix: u32) -> Result<f32, ParseFloatError> {\n         num::Float::from_str_radix(s, radix)\n     }"}, {"sha": "329d3329be6499e36cc7d2605c66b0c0c7844193", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -82,6 +82,8 @@ impl f64 {\n     /// Parses a float as with a given radix\n     #[unstable(feature = \"float_from_str_radix\", reason = \"recently moved API\",\n                issue = \"27736\")]\n+    #[deprecated(since = \"1.4.0\",\n+                 reason = \"unclear how useful or correct this is\")]\n     pub fn from_str_radix(s: &str, radix: u32) -> Result<f64, ParseFloatError> {\n         num::Float::from_str_radix(s, radix)\n     }"}, {"sha": "f2ae168e560bd1bfe07204d41084a2783fd6bb11", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -111,8 +111,6 @@ mod prim_unit { }\n /// the raw pointer. It doesn't destroy `T` or deallocate any memory.\n ///\n /// ```\n-/// #![feature(box_raw)]\n-///\n /// let my_speed: Box<i32> = Box::new(88);\n /// let my_speed: *mut i32 = Box::into_raw(my_speed);\n ///"}, {"sha": "52ac37c6e334da4194ebbe0e3c1a1bb41110c0f8", "filename": "src/libstd/sys/unix/ext/io.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -61,14 +61,14 @@ pub trait FromRawFd {\n \n /// A trait to express the ability to consume an object and acquire ownership of\n /// its raw file descriptor.\n-#[unstable(feature = \"into_raw_os\", reason = \"recently added API\",\n-           issue = \"27797\")]\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n pub trait IntoRawFd {\n     /// Consumes this object, returning the raw underlying file descriptor.\n     ///\n     /// This function **transfers ownership** of the underlying file descriptor\n     /// to the caller. Callers are then the unique owners of the file descriptor\n     /// and must close the descriptor once it's no longer needed.\n+    #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n     fn into_raw_fd(self) -> RawFd;\n }\n \n@@ -84,6 +84,7 @@ impl FromRawFd for fs::File {\n         fs::File::from_inner(sys::fs::File::from_inner(fd))\n     }\n }\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for fs::File {\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n@@ -125,16 +126,19 @@ impl FromRawFd for net::UdpSocket {\n     }\n }\n \n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for net::TcpStream {\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_socket().into_inner()\n     }\n }\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for net::TcpListener {\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_socket().into_inner()\n     }\n }\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for net::UdpSocket {\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_socket().into_inner()"}, {"sha": "9f10b0e85637041662aa2afa8334bf9f7c1af51a", "filename": "src/libstd/sys/windows/ext/io.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -52,14 +52,14 @@ pub trait FromRawHandle {\n \n /// A trait to express the ability to consume an object and acquire ownership of\n /// its raw `HANDLE`.\n-#[unstable(feature = \"into_raw_os\", reason = \"recently added API\",\n-           issue = \"27797\")]\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n pub trait IntoRawHandle {\n     /// Consumes this object, returning the raw underlying handle.\n     ///\n     /// This function **transfers ownership** of the underlying handle to the\n     /// caller. Callers are then the unique owners of the handle and must close\n     /// it once it's no longer needed.\n+    #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n     fn into_raw_handle(self) -> RawHandle;\n }\n \n@@ -78,6 +78,7 @@ impl FromRawHandle for fs::File {\n     }\n }\n \n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawHandle for fs::File {\n     fn into_raw_handle(self) -> RawHandle {\n         self.into_inner().into_handle().into_raw() as *mut _\n@@ -111,14 +112,14 @@ pub trait FromRawSocket {\n \n /// A trait to express the ability to consume an object and acquire ownership of\n /// its raw `SOCKET`.\n-#[unstable(feature = \"into_raw_os\", reason = \"recently added API\",\n-           issue = \"27797\")]\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n pub trait IntoRawSocket {\n     /// Consumes this object, returning the raw underlying socket.\n     ///\n     /// This function **transfers ownership** of the underlying socket to the\n     /// caller. Callers are then the unique owners of the socket and must close\n     /// it once it's no longer needed.\n+    #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n     fn into_raw_socket(self) -> RawSocket;\n }\n \n@@ -163,18 +164,21 @@ impl FromRawSocket for net::UdpSocket {\n     }\n }\n \n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawSocket for net::TcpStream {\n     fn into_raw_socket(self) -> RawSocket {\n         self.into_inner().into_socket().into_inner()\n     }\n }\n \n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawSocket for net::TcpListener {\n     fn into_raw_socket(self) -> RawSocket {\n         self.into_inner().into_socket().into_inner()\n     }\n }\n \n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawSocket for net::UdpSocket {\n     fn into_raw_socket(self) -> RawSocket {\n         self.into_inner().into_socket().into_inner()"}, {"sha": "43c23ec8a47157fb69d680c89d416d654838feea", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -411,8 +411,7 @@ pub fn sleep_ms(ms: u32) {\n /// signal being received or a spurious wakeup. Platforms which do not support\n /// nanosecond precision for sleeping will have `dur` rounded up to the nearest\n /// granularity of time they can sleep for.\n-#[unstable(feature = \"thread_sleep\", reason = \"waiting on Duration\",\n-           issue = \"27771\")]\n+#[stable(feature = \"thread_sleep\", since = \"1.4.0\")]\n pub fn sleep(dur: Duration) {\n     imp::Thread::sleep(dur)\n }\n@@ -482,8 +481,7 @@ pub fn park_timeout_ms(ms: u32) {\n ///\n /// Platforms which do not support nanosecond precision for sleeping will have\n /// `dur` rounded up to the nearest granularity of time they can sleep for.\n-#[unstable(feature = \"park_timeout\", reason = \"waiting on Duration\",\n-           issue = \"27771\")]\n+#[stable(feature = \"park_timeout\", since = \"1.4.0\")]\n pub fn park_timeout(dur: Duration) {\n     let thread = current();\n     let mut guard = thread.inner.lock.lock().unwrap();"}, {"sha": "2c29787e128fb7e5359ddfae65c12bf579efaffa", "filename": "src/test/run-pass/std-sync-right-kind-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Ftest%2Frun-pass%2Fstd-sync-right-kind-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedbd998a4669e026b2a1b34de95d91cd0fde1a5/src%2Ftest%2Frun-pass%2Fstd-sync-right-kind-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstd-sync-right-kind-impls.rs?ref=cedbd998a4669e026b2a1b34de95d91cd0fde1a5", "patch": "@@ -11,7 +11,7 @@\n // pretty-expanded FIXME #23616\n \n #![feature(static_mutex, static_rwlock, static_condvar)]\n-#![feature(arc_weak, semaphore)]\n+#![feature(semaphore)]\n \n use std::sync;\n "}]}