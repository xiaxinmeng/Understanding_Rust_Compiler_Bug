{"sha": "843dc604447139463b76014d51e6976dc07ec0db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0M2RjNjA0NDQ3MTM5NDYzYjc2MDE0ZDUxZTY5NzZkYzA3ZWMwZGI=", "commit": {"author": {"name": "Thomas Jespersen", "email": "laumann.thomas@gmail.com", "date": "2017-10-09T22:21:09Z"}, "committer": {"name": "Thomas Jespersen", "email": "laumann.thomas@gmail.com", "date": "2017-10-10T15:22:14Z"}, "message": "Add suggestions for misspelled labels\n\nAnother part of #30197", "tree": {"sha": "6a5fababe7465cef450b7bc3d7812f5f6556930c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a5fababe7465cef450b7bc3d7812f5f6556930c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/843dc604447139463b76014d51e6976dc07ec0db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/843dc604447139463b76014d51e6976dc07ec0db", "html_url": "https://github.com/rust-lang/rust/commit/843dc604447139463b76014d51e6976dc07ec0db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/843dc604447139463b76014d51e6976dc07ec0db/comments", "author": null, "committer": null, "parents": [{"sha": "5f578dfad0dd5d43b28eff71a7e857d10c3f55fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f578dfad0dd5d43b28eff71a7e857d10c3f55fe", "html_url": "https://github.com/rust-lang/rust/commit/5f578dfad0dd5d43b28eff71a7e857d10c3f55fe"}], "stats": {"total": 82, "additions": 72, "deletions": 10}, "files": [{"sha": "4aab43cbec701cfd0a87bcfb33e3d275172ea4c5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/843dc604447139463b76014d51e6976dc07ec0db/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/843dc604447139463b76014d51e6976dc07ec0db/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=843dc604447139463b76014d51e6976dc07ec0db", "patch": "@@ -137,7 +137,7 @@ enum ResolutionError<'a> {\n     /// error E0416: identifier is bound more than once in the same pattern\n     IdentifierBoundMoreThanOnceInSamePattern(&'a str),\n     /// error E0426: use of undeclared label\n-    UndeclaredLabel(&'a str),\n+    UndeclaredLabel(&'a str, Option<Name>),\n     /// error E0429: `self` imports are only allowed within a { } list\n     SelfImportsOnlyAllowedWithin,\n     /// error E0430: `self` import can only appear once in the list\n@@ -263,13 +263,17 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             err.span_label(span, \"used in a pattern more than once\");\n             err\n         }\n-        ResolutionError::UndeclaredLabel(name) => {\n+        ResolutionError::UndeclaredLabel(name, lev_candidate) => {\n             let mut err = struct_span_err!(resolver.session,\n                                            span,\n                                            E0426,\n                                            \"use of undeclared label `{}`\",\n                                            name);\n-            err.span_label(span, format!(\"undeclared label `{}`\", name));\n+            if let Some(lev_candidate) = lev_candidate {\n+                err.span_label(span, format!(\"did you mean `{}`?\", lev_candidate));\n+            } else {\n+                err.span_label(span, format!(\"undeclared label `{}`\", name));\n+            }\n             err\n         }\n         ResolutionError::SelfImportsOnlyAllowedWithin => {\n@@ -1790,9 +1794,13 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    /// Searches the current set of local scopes for labels.\n+    /// Searches the current set of local scopes for labels. Returns the first non-None label that\n+    /// is returned by the given predicate function\n+    ///\n     /// Stops after meeting a closure.\n-    fn search_label(&self, mut ident: Ident) -> Option<Def> {\n+    fn search_label<P, R>(&self, mut ident: Ident, pred: P) -> Option<R>\n+        where P: Fn(&Rib, Ident) -> Option<R>\n+    {\n         for rib in self.label_ribs.iter().rev() {\n             match rib.kind {\n                 NormalRibKind => {}\n@@ -1808,9 +1816,9 @@ impl<'a> Resolver<'a> {\n                     return None;\n                 }\n             }\n-            let result = rib.bindings.get(&ident).cloned();\n-            if result.is_some() {\n-                return result;\n+            let r = pred(rib, ident);\n+            if r.is_some() {\n+                return r;\n             }\n         }\n         None\n@@ -3202,12 +3210,20 @@ impl<'a> Resolver<'a> {\n             }\n \n             ExprKind::Break(Some(label), _) | ExprKind::Continue(Some(label)) => {\n-                match self.search_label(label.node) {\n+                match self.search_label(label.node, |rib, id| rib.bindings.get(&id).cloned()) {\n                     None => {\n+                        // Search again for close matches...\n+                        // Picks the first label that is \"close enough\", which is not necessarily\n+                        // the closest match\n+                        let close_match = self.search_label(label.node, |rib, ident| {\n+                            let names = rib.bindings.iter().map(|(id, _)| &id.name);\n+                            find_best_match_for_name(names, &*ident.name.as_str(), None)\n+                        });\n                         self.record_def(expr.id, err_path_resolution());\n                         resolve_error(self,\n                                       label.span,\n-                                      ResolutionError::UndeclaredLabel(&label.node.name.as_str()));\n+                                      ResolutionError::UndeclaredLabel(&label.node.name.as_str(),\n+                                                                       close_match));\n                     }\n                     Some(def @ Def::Label(_)) => {\n                         // Since this def is a label, it is never read."}, {"sha": "5bebce79eccbc2b3a1cd9961d8c851e6f134c232", "filename": "src/test/ui/suggestions/suggest-labels.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/843dc604447139463b76014d51e6976dc07ec0db/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/843dc604447139463b76014d51e6976dc07ec0db/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-labels.rs?ref=843dc604447139463b76014d51e6976dc07ec0db", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(unreachable_code)]\n+fn main() {\n+    'foo: loop {\n+        break 'fo;\n+    }\n+\n+    'bar: loop {\n+        continue 'bor;\n+    }\n+\n+    'longlabel: loop {\n+        'longlabel1: loop {\n+            break 'longlable;\n+        }\n+    }\n+}"}, {"sha": "23aa18a3655fb1ec90214b2a2ec5c75de524a9bc", "filename": "src/test/ui/suggestions/suggest-labels.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/843dc604447139463b76014d51e6976dc07ec0db/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/843dc604447139463b76014d51e6976dc07ec0db/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-labels.stderr?ref=843dc604447139463b76014d51e6976dc07ec0db", "patch": "@@ -0,0 +1,20 @@\n+error[E0426]: use of undeclared label `'fo`\n+  --> $DIR/suggest-labels.rs:14:15\n+   |\n+14 |         break 'fo;\n+   |               ^^^ did you mean `'foo`?\n+\n+error[E0426]: use of undeclared label `'bor`\n+  --> $DIR/suggest-labels.rs:18:18\n+   |\n+18 |         continue 'bor;\n+   |                  ^^^^ did you mean `'bar`?\n+\n+error[E0426]: use of undeclared label `'longlable`\n+  --> $DIR/suggest-labels.rs:23:19\n+   |\n+23 |             break 'longlable;\n+   |                   ^^^^^^^^^^ did you mean `'longlabel1`?\n+\n+error: aborting due to 3 previous errors\n+"}]}