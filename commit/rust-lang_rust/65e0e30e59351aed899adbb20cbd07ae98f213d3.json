{"sha": "65e0e30e59351aed899adbb20cbd07ae98f213d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZTBlMzBlNTkzNTFhZWQ4OTlhZGJiMjBjYmQwN2FlOThmMjEzZDM=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-08-02T22:52:30Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-08-03T00:15:36Z"}, "message": "Make typeck::collect aware of provided methods in traits.", "tree": {"sha": "5bb12d679c68a9f9ab2ac2df52aab2a38c6a3dfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bb12d679c68a9f9ab2ac2df52aab2a38c6a3dfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65e0e30e59351aed899adbb20cbd07ae98f213d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65e0e30e59351aed899adbb20cbd07ae98f213d3", "html_url": "https://github.com/rust-lang/rust/commit/65e0e30e59351aed899adbb20cbd07ae98f213d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65e0e30e59351aed899adbb20cbd07ae98f213d3/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7", "html_url": "https://github.com/rust-lang/rust/commit/2fe299d1a53355c9bb78b9067bd2d18bd4eb94e7"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "58650e147cc3bee56cb1bd8fbf51e46d499e32e1", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65e0e30e59351aed899adbb20cbd07ae98f213d3/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e0e30e59351aed899adbb20cbd07ae98f213d3/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=65e0e30e59351aed899adbb20cbd07ae98f213d3", "patch": "@@ -329,6 +329,18 @@ fn trait_method_to_ty_method(method: trait_method) -> ty_method {\n     }\n }\n \n+fn split_trait_methods(trait_methods: ~[trait_method])\n+    -> (~[ty_method], ~[@method]) {\n+    let mut reqd = ~[], provd = ~[];\n+    for trait_methods.each |trt_method| {\n+        alt trt_method {\n+          required(tm) { vec::push(reqd, tm); }\n+          provided(m) { vec::push(provd, m); }\n+        }\n+    };\n+    (reqd, provd)\n+}\n+\n pure fn class_member_visibility(ci: @class_member) -> visibility {\n   alt ci.node {\n      instance_var(_, _, _, _, vis) { vis }"}, {"sha": "910d57e875eaed5b8cb4bc9c3873799590575a03", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65e0e30e59351aed899adbb20cbd07ae98f213d3/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e0e30e59351aed899adbb20cbd07ae98f213d3/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=65e0e30e59351aed899adbb20cbd07ae98f213d3", "patch": "@@ -43,7 +43,8 @@ import syntax::{ast, ast_util, ast_map};\n import ast::spanned;\n import ast::{required, provided};\n import syntax::ast_map::node_id_to_str;\n-import syntax::ast_util::{local_def, respan, split_class_items};\n+import syntax::ast_util::{local_def, respan, split_class_items,\n+                          split_trait_methods};\n import syntax::visit;\n import metadata::csearch;\n import driver::session::session;"}, {"sha": "da9575b898ef788511f6852b64a5daf6fbce1fdb", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65e0e30e59351aed899adbb20cbd07ae98f213d3/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e0e30e59351aed899adbb20cbd07ae98f213d3/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=65e0e30e59351aed899adbb20cbd07ae98f213d3", "patch": "@@ -339,12 +339,22 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n             check_methods_against_trait(ccx, tps, rp, selfty, t, cms);\n         }\n       }\n-      ast::item_trait(*) {\n+      ast::item_trait(tps, trait_methods) {\n         let tpt = ty_of_item(ccx, it);\n         debug!{\"item_trait(it.id=%d, tpt.ty=%s)\",\n                it.id, ty_to_str(tcx, tpt.ty)};\n         write_ty_to_tcx(tcx, it.id, tpt.ty);\n         ensure_trait_methods(ccx, it.id);\n+\n+        let (_, provided_methods) = split_trait_methods(trait_methods);\n+        let selfty = ty::mk_self(tcx);\n+        let {bounds, _} = mk_substs(ccx, tps, rp);\n+        let _cms = convert_methods(ccx, provided_methods, rp, bounds, selfty);\n+        // FIXME (#2616): something like this, when we start having\n+        // trait inheritance?\n+        // for trt.each |t| {\n+        // check_methods_against_trait(ccx, tps, rp, selfty, t, cms);\n+        // }\n       }\n       ast::item_class(tps, traits, members, m_ctor, m_dtor) {\n         // Write the class type"}]}