{"sha": "5910116b17061fdc58d916b61795c40012df2219", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MTAxMTZiMTcwNjFmZGM1OGQ5MTZiNjE3OTVjNDAwMTJkZjIyMTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-06T02:28:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-06T02:28:05Z"}, "message": "Rollup merge of #65892 - pnkfelix:trim-special-derives, r=petrochenkov\n\nRemove `PartialEq` and `Eq` from the `SpecialDerives`.\n\nNow that PR #65519 landed, this is the follow-on work of removing `PartialEq` and `Eq` from the set of `SpecialDerives` .", "tree": {"sha": "465423a4c11aa1d13264279d22fe92e6c9cb0fe4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/465423a4c11aa1d13264279d22fe92e6c9cb0fe4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5910116b17061fdc58d916b61795c40012df2219", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdwi+1CRBK7hj4Ov3rIwAAdHIIADHnwyohtYIlcD9N2v4FkG4x\nX9hMIlETJP/LHhSCjzoZaVnMhej+lNgMxvgzz89MRYTYs4wO0IWubcGLqXGUB2Kr\n2CYzt/lXFLO0zqzG1RECww0hwHM0MLqtBc5vMmUPjTZd5W9hVJ61jMO9r20K0Y/m\nLaLOOW473yiKR/yeXJKvUnV+htNOxuXSdjLVcd6PW+ApxdnAXJK3TmweWLgr03VS\nQIxJAX26t/6gYniFhc6qvAD7q3RDZ/OWR5HdqOzgympW5tDlegwQorw9omUhp1GG\nmH/ftBvIr4yr7tPiB63yDliWqWLEl7aHM7bbXWR2iQ4jXEgIUD8jvcG9TcImY88=\n=9iaL\n-----END PGP SIGNATURE-----\n", "payload": "tree 465423a4c11aa1d13264279d22fe92e6c9cb0fe4\nparent 1423bec54cf2db283b614e527cfd602b481485d1\nparent 99243616cc0c096e1d35b7c60d0b0ca6fc10fd48\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1573007285 +0100\ncommitter GitHub <noreply@github.com> 1573007285 +0100\n\nRollup merge of #65892 - pnkfelix:trim-special-derives, r=petrochenkov\n\nRemove `PartialEq` and `Eq` from the `SpecialDerives`.\n\nNow that PR #65519 landed, this is the follow-on work of removing `PartialEq` and `Eq` from the set of `SpecialDerives` .\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5910116b17061fdc58d916b61795c40012df2219", "html_url": "https://github.com/rust-lang/rust/commit/5910116b17061fdc58d916b61795c40012df2219", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5910116b17061fdc58d916b61795c40012df2219/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1423bec54cf2db283b614e527cfd602b481485d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1423bec54cf2db283b614e527cfd602b481485d1", "html_url": "https://github.com/rust-lang/rust/commit/1423bec54cf2db283b614e527cfd602b481485d1"}, {"sha": "99243616cc0c096e1d35b7c60d0b0ca6fc10fd48", "url": "https://api.github.com/repos/rust-lang/rust/commits/99243616cc0c096e1d35b7c60d0b0ca6fc10fd48", "html_url": "https://github.com/rust-lang/rust/commit/99243616cc0c096e1d35b7c60d0b0ca6fc10fd48"}], "stats": {"total": 73, "additions": 14, "deletions": 59}, "files": [{"sha": "c6acdf53de30b0ebe24c02cfda14e7693a2f52a9", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5910116b17061fdc58d916b61795c40012df2219/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5910116b17061fdc58d916b61795c40012df2219/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=5910116b17061fdc58d916b61795c40012df2219", "patch": "@@ -65,7 +65,6 @@ use syntax::ast;\n use syntax::ptr::P as AstP;\n use syntax::ast::*;\n use syntax::errors;\n-use syntax::expand::SpecialDerives;\n use syntax::print::pprust;\n use syntax::parse::token::{self, Nonterminal, Token};\n use syntax::tokenstream::{TokenStream, TokenTree};\n@@ -184,8 +183,6 @@ pub trait Resolver {\n         ns: Namespace,\n     ) -> (ast::Path, Res<NodeId>);\n \n-    fn has_derives(&self, node_id: NodeId, derives: SpecialDerives) -> bool;\n-\n     fn lint_buffer(&mut self) -> &mut lint::LintBuffer;\n }\n "}, {"sha": "f1b999cdd6f0f42994efd692fad04c3a6bd08048", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5910116b17061fdc58d916b61795c40012df2219/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5910116b17061fdc58d916b61795c40012df2219/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=5910116b17061fdc58d916b61795c40012df2219", "patch": "@@ -18,7 +18,6 @@ use smallvec::SmallVec;\n use syntax::attr;\n use syntax::ast::*;\n use syntax::visit::{self, Visitor};\n-use syntax::expand::SpecialDerives;\n use syntax::source_map::{respan, DesugaringKind, Spanned};\n use syntax::symbol::{kw, sym};\n use syntax_pos::Span;\n@@ -227,13 +226,7 @@ impl LoweringContext<'_> {\n     pub fn lower_item(&mut self, i: &Item) -> Option<hir::Item> {\n         let mut ident = i.ident;\n         let mut vis = self.lower_visibility(&i.vis, None);\n-        let mut attrs = self.lower_attrs_extendable(&i.attrs);\n-        if self.resolver.has_derives(i.id, SpecialDerives::PARTIAL_EQ | SpecialDerives::EQ) {\n-            // Add `#[structural_match]` if the item derived both `PartialEq` and `Eq`.\n-            let ident = Ident::new(sym::structural_match, i.span);\n-            attrs.push(attr::mk_attr_outer(attr::mk_word_item(ident)));\n-        }\n-        let attrs = attrs.into();\n+        let attrs = self.lower_attrs(&i.attrs);\n \n         if let ItemKind::MacroDef(ref def) = i.kind {\n             if !def.legacy || attr::contains_name(&i.attrs, sym::macro_export) {"}, {"sha": "5c996bffb9ad9431c46cdc08fbbb320d274513af", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5910116b17061fdc58d916b61795c40012df2219/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5910116b17061fdc58d916b61795c40012df2219/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5910116b17061fdc58d916b61795c40012df2219", "patch": "@@ -36,7 +36,6 @@ use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::CStore;\n \n use syntax::{struct_span_err, unwrap_or};\n-use syntax::expand::SpecialDerives;\n use syntax::ast::{self, Name, NodeId, Ident, FloatTy, IntTy, UintTy};\n use syntax::ast::{CRATE_NODE_ID, Crate};\n use syntax::ast::{ItemKind, Path};\n@@ -934,12 +933,10 @@ pub struct Resolver<'a> {\n     multi_segment_macro_resolutions: Vec<(Vec<Segment>, Span, MacroKind, ParentScope<'a>,\n                                           Option<Res>)>,\n     builtin_attrs: Vec<(Ident, ParentScope<'a>)>,\n-    /// Some built-in derives mark items they are applied to so they are treated specially later.\n+    /// `derive(Copy)` marks items they are applied to so they are treated specially later.\n     /// Derive macros cannot modify the item themselves and have to store the markers in the global\n     /// context, so they attach the markers to derive container IDs using this resolver table.\n-    /// FIXME: Find a way for `PartialEq` and `Eq` to emulate `#[structural_match]`\n-    /// by marking the produced impls rather than the original items.\n-    special_derives: FxHashMap<ExpnId, SpecialDerives>,\n+    containers_deriving_copy: FxHashSet<ExpnId>,\n     /// Parent scopes in which the macros were invoked.\n     /// FIXME: `derives` are missing in these parent scopes and need to be taken from elsewhere.\n     invocation_parent_scopes: FxHashMap<ExpnId, ParentScope<'a>>,\n@@ -1078,12 +1075,6 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n         &mut self.definitions\n     }\n \n-    fn has_derives(&self, node_id: NodeId, derives: SpecialDerives) -> bool {\n-        let def_id = self.definitions.local_def_id(node_id);\n-        let expn_id = self.definitions.expansion_that_defined(def_id.index);\n-        self.has_derives(expn_id, derives)\n-    }\n-\n     fn lint_buffer(&mut self) -> &mut lint::LintBuffer {\n         &mut self.lint_buffer\n     }\n@@ -1228,7 +1219,7 @@ impl<'a> Resolver<'a> {\n             single_segment_macro_resolutions: Default::default(),\n             multi_segment_macro_resolutions: Default::default(),\n             builtin_attrs: Default::default(),\n-            special_derives: Default::default(),\n+            containers_deriving_copy: Default::default(),\n             active_features:\n                 features.declared_lib_features.iter().map(|(feat, ..)| *feat)\n                     .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))\n@@ -1314,10 +1305,6 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn has_derives(&self, expn_id: ExpnId, markers: SpecialDerives) -> bool {\n-        self.special_derives.get(&expn_id).map_or(false, |m| m.contains(markers))\n-    }\n-\n     /// Entry point to crate resolution.\n     pub fn resolve_crate(&mut self, krate: &Crate) {\n         let _prof_timer ="}, {"sha": "0fbd6b0e5d3062b642549a83ac0b4b45cf2ad65a", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5910116b17061fdc58d916b61795c40012df2219/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5910116b17061fdc58d916b61795c40012df2219/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=5910116b17061fdc58d916b61795c40012df2219", "patch": "@@ -14,7 +14,6 @@ use rustc::{ty, lint, span_bug};\n use syntax::ast::{self, NodeId, Ident};\n use syntax::attr::StabilityLevel;\n use syntax::edition::Edition;\n-use syntax::expand::SpecialDerives;\n use syntax::feature_gate::{emit_feature_err, is_builtin_attr_name};\n use syntax::feature_gate::GateIssue;\n use syntax::print::pprust;\n@@ -255,12 +254,12 @@ impl<'a> base::Resolver for Resolver<'a> {\n         }\n     }\n \n-    fn has_derives(&self, expn_id: ExpnId, derives: SpecialDerives) -> bool {\n-        self.has_derives(expn_id, derives)\n+    fn has_derive_copy(&self, expn_id: ExpnId) -> bool {\n+        self.containers_deriving_copy.contains(&expn_id)\n     }\n \n-    fn add_derives(&mut self, expn_id: ExpnId, derives: SpecialDerives) {\n-        *self.special_derives.entry(expn_id).or_default() |= derives;\n+    fn add_derive_copy(&mut self, expn_id: ExpnId) {\n+        self.containers_deriving_copy.insert(expn_id);\n     }\n }\n "}, {"sha": "03b30fda745f9bbee5c043d3c31f1c7431818f6c", "filename": "src/libsyntax/expand/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5910116b17061fdc58d916b61795c40012df2219/src%2Flibsyntax%2Fexpand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5910116b17061fdc58d916b61795c40012df2219/src%2Flibsyntax%2Fexpand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fexpand%2Fmod.rs?ref=5910116b17061fdc58d916b61795c40012df2219", "patch": "@@ -5,16 +5,6 @@ use syntax_pos::symbol::sym;\n \n pub mod allocator;\n \n-bitflags::bitflags! {\n-    /// Built-in derives that need some extra tracking beyond the usual macro functionality.\n-    #[derive(Default)]\n-    pub struct SpecialDerives: u8 {\n-        const PARTIAL_EQ = 1 << 0;\n-        const EQ         = 1 << 1;\n-        const COPY       = 1 << 2;\n-    }\n-}\n-\n pub fn is_proc_macro_attr(attr: &Attribute) -> bool {\n     [sym::proc_macro, sym::proc_macro_attribute, sym::proc_macro_derive]\n         .iter().any(|kind| attr.check_name(*kind))"}, {"sha": "6cc7b7da53b266f3cbd031bd1323bc1519d7625c", "filename": "src/libsyntax_expand/base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5910116b17061fdc58d916b61795c40012df2219/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5910116b17061fdc58d916b61795c40012df2219/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=5910116b17061fdc58d916b61795c40012df2219", "patch": "@@ -13,7 +13,6 @@ use syntax::symbol::{kw, sym, Ident, Symbol};\n use syntax::{ThinVec, MACRO_ARGUMENTS};\n use syntax::tokenstream::{self, TokenStream};\n use syntax::visit::Visitor;\n-crate use syntax::expand::SpecialDerives;\n \n use errors::{DiagnosticBuilder, DiagnosticId};\n use smallvec::{smallvec, SmallVec};\n@@ -860,8 +859,8 @@ pub trait Resolver {\n \n     fn check_unused_macros(&mut self);\n \n-    fn has_derives(&self, expn_id: ExpnId, derives: SpecialDerives) -> bool;\n-    fn add_derives(&mut self, expn_id: ExpnId, derives: SpecialDerives);\n+    fn has_derive_copy(&self, expn_id: ExpnId) -> bool;\n+    fn add_derive_copy(&mut self, expn_id: ExpnId);\n }\n \n #[derive(Clone)]"}, {"sha": "da70fdbb0f308789cad3f5c3eeac9e7af2eb032c", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5910116b17061fdc58d916b61795c40012df2219/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5910116b17061fdc58d916b61795c40012df2219/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=5910116b17061fdc58d916b61795c40012df2219", "patch": "@@ -432,7 +432,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     // can be in scope for all code produced by that container's expansion.\n                     item.visit_with(&mut MarkAttrs(&helper_attrs));\n                     if has_copy {\n-                        self.cx.resolver.add_derives(invoc.expansion_data.id, SpecialDerives::COPY);\n+                        self.cx.resolver.add_derive_copy(invoc.expansion_data.id);\n                     }\n \n                     let mut derive_placeholders = Vec::with_capacity(derives.len());"}, {"sha": "c056d03614d00525683ebe2b035e97fb9055255d", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5910116b17061fdc58d916b61795c40012df2219/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5910116b17061fdc58d916b61795c40012df2219/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=5910116b17061fdc58d916b61795c40012df2219", "patch": "@@ -3,7 +3,6 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{self, Expr, GenericArg, Generics, ItemKind, MetaItem, VariantData};\n-use syntax::expand::SpecialDerives;\n use syntax_expand::base::{Annotatable, ExtCtxt};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};\n@@ -37,7 +36,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt<'_>,\n                 ItemKind::Struct(_, Generics { ref params, .. }) |\n                 ItemKind::Enum(_, Generics { ref params, .. }) => {\n                     let container_id = cx.current_expansion.id.expn_data().parent;\n-                    if cx.resolver.has_derives(container_id, SpecialDerives::COPY) &&\n+                    if cx.resolver.has_derive_copy(container_id) &&\n                         !params.iter().any(|param| match param.kind {\n                             ast::GenericParamKind::Type { .. } => true,\n                             _ => false,"}, {"sha": "41189de7fa213e60577a7038dc7ea5f119babdba", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5910116b17061fdc58d916b61795c40012df2219/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5910116b17061fdc58d916b61795c40012df2219/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=5910116b17061fdc58d916b61795c40012df2219", "patch": "@@ -3,7 +3,6 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{self, Ident, Expr, MetaItem, GenericArg};\n-use syntax::expand::SpecialDerives;\n use syntax::ptr::P;\n use syntax::symbol::{sym, Symbol};\n use syntax_expand::base::{Annotatable, ExtCtxt};\n@@ -14,8 +13,6 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt<'_>,\n                           mitem: &MetaItem,\n                           item: &Annotatable,\n                           push: &mut dyn FnMut(Annotatable)) {\n-    cx.resolver.add_derives(cx.current_expansion.id.expn_data().parent, SpecialDerives::EQ);\n-\n     let inline = cx.meta_word(span, sym::inline);\n     let hidden = syntax::attr::mk_nested_word_item(Ident::new(sym::hidden, span));\n     let doc = syntax::attr::mk_list_item(Ident::new(sym::doc, span), vec![hidden]);"}, {"sha": "19562e350ddb7bddcc2c53338478d2184fa02c07", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5910116b17061fdc58d916b61795c40012df2219/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5910116b17061fdc58d916b61795c40012df2219/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=5910116b17061fdc58d916b61795c40012df2219", "patch": "@@ -3,7 +3,6 @@ use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n use syntax::ast::{BinOpKind, Expr, MetaItem};\n-use syntax::expand::SpecialDerives;\n use syntax::ptr::P;\n use syntax::symbol::sym;\n use syntax_expand::base::{Annotatable, ExtCtxt};\n@@ -14,8 +13,6 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt<'_>,\n                                   mitem: &MetaItem,\n                                   item: &Annotatable,\n                                   push: &mut dyn FnMut(Annotatable)) {\n-    cx.resolver.add_derives(cx.current_expansion.id.expn_data().parent, SpecialDerives::PARTIAL_EQ);\n-\n     // structures are equal if all fields are equal, and non equal, if\n     // any fields are not equal or if the enum variants are different\n     fn cs_op(cx: &mut ExtCtxt<'_>,"}, {"sha": "2e5ae235893cb4dc37e9dd3e1a44efee50f56ca2", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5910116b17061fdc58d916b61795c40012df2219/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5910116b17061fdc58d916b61795c40012df2219/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=5910116b17061fdc58d916b61795c40012df2219", "patch": "@@ -186,7 +186,6 @@ use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n use syntax::ast::{VariantData, GenericParamKind, GenericArg};\n use syntax::attr;\n-use syntax::expand::SpecialDerives;\n use syntax::source_map::respan;\n use syntax::util::map_in_place::MapInPlace;\n use syntax::ptr::P;\n@@ -427,10 +426,8 @@ impl<'a> TraitDef<'a> {\n                     }\n                 };\n                 let container_id = cx.current_expansion.id.expn_data().parent;\n-                let is_always_copy =\n-                    cx.resolver.has_derives(container_id, SpecialDerives::COPY) &&\n-                    has_no_type_params;\n-                let use_temporaries = is_packed && is_always_copy;\n+                let always_copy = has_no_type_params && cx.resolver.has_derive_copy(container_id);\n+                let use_temporaries = is_packed && always_copy;\n \n                 let newitem = match item.kind {\n                     ast::ItemKind::Struct(ref struct_def, ref generics) => {"}]}