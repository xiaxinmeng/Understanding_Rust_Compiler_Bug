{"sha": "0d48f76224371e884496182f6cfb3e2dad7690a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNDhmNzYyMjQzNzFlODg0NDk2MTgyZjZjZmIzZTJkYWQ3NjkwYTI=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-04T17:59:28Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-29T00:40:47Z"}, "message": "liballoc: Use NonZero in Rc.", "tree": {"sha": "ce4bb26e8cc0a3cf59b0cf987abaa8ca678c1f6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce4bb26e8cc0a3cf59b0cf987abaa8ca678c1f6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d48f76224371e884496182f6cfb3e2dad7690a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d48f76224371e884496182f6cfb3e2dad7690a2", "html_url": "https://github.com/rust-lang/rust/commit/0d48f76224371e884496182f6cfb3e2dad7690a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d48f76224371e884496182f6cfb3e2dad7690a2/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb4473774866a1a9a3965a62db3298f1be874418", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb4473774866a1a9a3965a62db3298f1be874418", "html_url": "https://github.com/rust-lang/rust/commit/bb4473774866a1a9a3965a62db3298f1be874418"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "41efa0468acbeadbaf8811a1c752344effb897c6", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0d48f76224371e884496182f6cfb3e2dad7690a2/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d48f76224371e884496182f6cfb3e2dad7690a2/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=0d48f76224371e884496182f6cfb3e2dad7690a2", "patch": "@@ -153,8 +153,7 @@ use core::mem::{transmute, min_align_of, size_of, forget};\n use core::ops::{Deref, Drop};\n use core::option::Option;\n use core::option::Option::{Some, None};\n-use core::ptr;\n-use core::ptr::RawPtr;\n+use core::ptr::{mod, NonZero, RawPtr};\n use core::result::Result;\n use core::result::Result::{Ok, Err};\n \n@@ -174,7 +173,7 @@ struct RcBox<T> {\n pub struct Rc<T> {\n     // FIXME #12808: strange names to try to avoid interfering with field accesses of the contained\n     // type via Deref\n-    _ptr: *mut RcBox<T>,\n+    _ptr: NonZero<*mut RcBox<T>>,\n     _nosend: marker::NoSend,\n     _noshare: marker::NoSync\n }\n@@ -196,11 +195,11 @@ impl<T> Rc<T> {\n                 // there is an implicit weak pointer owned by all the strong pointers, which\n                 // ensures that the weak destructor never frees the allocation while the strong\n                 // destructor is running, even if the weak pointer is stored inside the strong one.\n-                _ptr: transmute(box RcBox {\n+                _ptr: NonZero(transmute(box RcBox {\n                     value: value,\n                     strong: Cell::new(1),\n                     weak: Cell::new(1)\n-                }),\n+                })),\n                 _nosend: marker::NoSend,\n                 _noshare: marker::NoSync\n             }\n@@ -281,7 +280,8 @@ pub fn try_unwrap<T>(rc: Rc<T>) -> Result<T, Rc<T>> {\n             let val = ptr::read(&*rc); // copy the contained object\n             // destruct the box and skip our Drop\n             // we can ignore the refcounts because we know we're unique\n-            deallocate(rc._ptr as *mut u8, size_of::<RcBox<T>>(),\n+            let NonZero(ptr) = rc._ptr;\n+            deallocate(ptr as *mut u8, size_of::<RcBox<T>>(),\n                         min_align_of::<RcBox<T>>());\n             forget(rc);\n             Ok(val)\n@@ -311,7 +311,10 @@ pub fn try_unwrap<T>(rc: Rc<T>) -> Result<T, Rc<T>> {\n #[experimental]\n pub fn get_mut<'a, T>(rc: &'a mut Rc<T>) -> Option<&'a mut T> {\n     if is_unique(rc) {\n-        let inner = unsafe { &mut *rc._ptr };\n+        let inner = unsafe {\n+            let NonZero(ptr) = rc._ptr;\n+            &mut *ptr\n+        };\n         Some(&mut inner.value)\n     } else {\n         None\n@@ -343,7 +346,10 @@ impl<T: Clone> Rc<T> {\n         // pointer that will ever be returned to T. Our reference count is guaranteed to be 1 at\n         // this point, and we required the `Rc<T>` itself to be `mut`, so we're returning the only\n         // possible reference to the inner value.\n-        let inner = unsafe { &mut *self._ptr };\n+        let inner = unsafe {\n+            let NonZero(ptr) = self._ptr;\n+            &mut *ptr\n+        };\n         &mut inner.value\n     }\n }\n@@ -391,7 +397,8 @@ impl<T> Drop for Rc<T> {\n     /// ```\n     fn drop(&mut self) {\n         unsafe {\n-            if !self._ptr.is_null() {\n+            let NonZero(ptr) = self._ptr;\n+            if !ptr.is_null() {\n                 self.dec_strong();\n                 if self.strong() == 0 {\n                     ptr::read(&**self); // destroy the contained object\n@@ -401,7 +408,7 @@ impl<T> Drop for Rc<T> {\n                     self.dec_weak();\n \n                     if self.weak() == 0 {\n-                        deallocate(self._ptr as *mut u8, size_of::<RcBox<T>>(),\n+                        deallocate(ptr as *mut u8, size_of::<RcBox<T>>(),\n                                    min_align_of::<RcBox<T>>())\n                     }\n                 }\n@@ -618,7 +625,7 @@ impl<T: fmt::Show> fmt::Show for Rc<T> {\n pub struct Weak<T> {\n     // FIXME #12808: strange names to try to avoid interfering with\n     // field accesses of the contained type via Deref\n-    _ptr: *mut RcBox<T>,\n+    _ptr: NonZero<*mut RcBox<T>>,\n     _nosend: marker::NoSend,\n     _noshare: marker::NoSync\n }\n@@ -682,12 +689,13 @@ impl<T> Drop for Weak<T> {\n     /// ```\n     fn drop(&mut self) {\n         unsafe {\n-            if !self._ptr.is_null() {\n+            let NonZero(ptr) = self._ptr;\n+            if !ptr.is_null() {\n                 self.dec_weak();\n                 // the weak count starts at 1, and will only go to zero if all the strong pointers\n                 // have disappeared.\n                 if self.weak() == 0 {\n-                    deallocate(self._ptr as *mut u8, size_of::<RcBox<T>>(),\n+                    deallocate(ptr as *mut u8, size_of::<RcBox<T>>(),\n                                min_align_of::<RcBox<T>>())\n                 }\n             }\n@@ -742,12 +750,18 @@ trait RcBoxPtr<T> {\n \n impl<T> RcBoxPtr<T> for Rc<T> {\n     #[inline(always)]\n-    fn inner(&self) -> &RcBox<T> { unsafe { &(*self._ptr) } }\n+    fn inner(&self) -> &RcBox<T> {\n+        let NonZero(ptr) = self._ptr;\n+        unsafe { &(*ptr) }\n+    }\n }\n \n impl<T> RcBoxPtr<T> for Weak<T> {\n     #[inline(always)]\n-    fn inner(&self) -> &RcBox<T> { unsafe { &(*self._ptr) } }\n+    fn inner(&self) -> &RcBox<T> {\n+        let NonZero(ptr) = self._ptr;\n+        unsafe { &(*ptr) }\n+    }\n }\n \n #[cfg(test)]"}]}