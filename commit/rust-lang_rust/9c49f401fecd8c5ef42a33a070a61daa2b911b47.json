{"sha": "9c49f401fecd8c5ef42a33a070a61daa2b911b47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNDlmNDAxZmVjZDhjNWVmNDJhMzNhMDcwYTYxZGFhMmI5MTFiNDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-07T18:13:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-07T18:13:10Z"}, "message": "Auto merge of #46532 - est31:master, r=est31\n\nAllow feature-gate tests to live in ui/ and migrate most of the tests from compile-fail\n\nThe PR consists of three commits:\n\n1. change tidy to allow feature-gate tests to live in ui/\n2. migrate some feature gate tests to ui/ with renaming only\n3. migrate some feature gate tests to ui/ with also removing `// gate-test-...` lines and renaming them to the standard `feature-gate-<feat-name>.rs` format.", "tree": {"sha": "96000b17cb140280ee919bccbdf29b2350537115", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96000b17cb140280ee919bccbdf29b2350537115"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c49f401fecd8c5ef42a33a070a61daa2b911b47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c49f401fecd8c5ef42a33a070a61daa2b911b47", "html_url": "https://github.com/rust-lang/rust/commit/9c49f401fecd8c5ef42a33a070a61daa2b911b47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c49f401fecd8c5ef42a33a070a61daa2b911b47/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8437a0accccc4140731b1a73c13ada7305883ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8437a0accccc4140731b1a73c13ada7305883ac", "html_url": "https://github.com/rust-lang/rust/commit/a8437a0accccc4140731b1a73c13ada7305883ac"}, {"sha": "6dba3e68e670a3b1418b259ca5f3758444dd1a68", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dba3e68e670a3b1418b259ca5f3758444dd1a68", "html_url": "https://github.com/rust-lang/rust/commit/6dba3e68e670a3b1418b259ca5f3758444dd1a68"}], "stats": {"total": 4607, "additions": 4534, "deletions": 73}, "files": [{"sha": "27f8fda98ab3430bce3e1c61e08a83b9de816b01", "filename": "src/test/compile-fail/no-core-gated.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a8437a0accccc4140731b1a73c13ada7305883ac/src%2Ftest%2Fcompile-fail%2Fno-core-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8437a0accccc4140731b1a73c13ada7305883ac/src%2Ftest%2Fcompile-fail%2Fno-core-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-core-gated.rs?ref=a8437a0accccc4140731b1a73c13ada7305883ac", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// gate-test-no_core\n-\n-#![no_core] //~ ERROR no_core is experimental\n-\n-fn main() {}"}, {"sha": "d1971a5e1aea40403f0a486d23d25285de263685", "filename": "src/test/ui/auxiliary/cfg-target-thread-local.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Fauxiliary%2Fcfg-target-thread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Fauxiliary%2Fcfg-target-thread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fcfg-target-thread-local.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/auxiliary/cfg-target-thread-local.rs"}, {"sha": "030e37475c0a8fd70d2249164252a15f5e4ffc68", "filename": "src/test/ui/feature-gate-abi-msp430-interrupt.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-abi-msp430-interrupt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-abi-msp430-interrupt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-abi-msp430-interrupt.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-abi-msp430-interrupt.rs"}, {"sha": "b05be6e4391b4c363080f831b5ce1d9cdba85fa5", "filename": "src/test/ui/feature-gate-abi-msp430-interrupt.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-abi-msp430-interrupt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-abi-msp430-interrupt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-abi-msp430-interrupt.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+  --> $DIR/feature-gate-abi-msp430-interrupt.rs:14:1\n+   |\n+14 | extern \"msp430-interrupt\" fn foo() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "45c715f51fe4810f8ca8868d5e8842519a185def", "filename": "src/test/ui/feature-gate-abi.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-abi.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-abi.rs"}, {"sha": "7d2ad0be391c134a0ba42c94bd122842998da52a", "filename": "src/test/ui/feature-gate-abi.stderr", "status": "added", "additions": 450, "deletions": 0, "changes": 450, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-abi.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,450 @@\n+error: intrinsics are subject to change\n+  --> $DIR/feature-gate-abi.rs:19:1\n+   |\n+19 | extern \"rust-intrinsic\" fn f1() {} //~ ERROR intrinsics are subject to change\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(intrinsics)] to the crate attributes to enable\n+\n+error: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+  --> $DIR/feature-gate-abi.rs:20:1\n+   |\n+20 | extern \"platform-intrinsic\" fn f2() {} //~ ERROR platform intrinsics are experimental\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n+\n+error: vectorcall is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:21:1\n+   |\n+21 | extern \"vectorcall\" fn f3() {} //~ ERROR vectorcall is experimental and subject to change\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n+\n+error: rust-call ABI is subject to change (see issue #29625)\n+  --> $DIR/feature-gate-abi.rs:22:1\n+   |\n+22 | extern \"rust-call\" fn f4() {} //~ ERROR rust-call ABI is subject to change\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n+\n+error: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+  --> $DIR/feature-gate-abi.rs:23:1\n+   |\n+23 | extern \"msp430-interrupt\" fn f5() {} //~ ERROR msp430-interrupt ABI is experimental\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n+\n+error: PTX ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:24:1\n+   |\n+24 | extern \"ptx-kernel\" fn f6() {} //~ ERROR PTX ABIs are experimental and subject to change\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_ptx)] to the crate attributes to enable\n+\n+error: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+  --> $DIR/feature-gate-abi.rs:25:1\n+   |\n+25 | extern \"x86-interrupt\" fn f7() {} //~ ERROR x86-interrupt ABI is experimental\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n+\n+error: thiscall is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:26:1\n+   |\n+26 | extern \"thiscall\" fn f8() {} //~ ERROR thiscall is experimental and subject to change\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n+\n+error: intrinsics are subject to change\n+  --> $DIR/feature-gate-abi.rs:30:5\n+   |\n+30 |     extern \"rust-intrinsic\" fn m1(); //~ ERROR intrinsics are subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(intrinsics)] to the crate attributes to enable\n+\n+error: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+  --> $DIR/feature-gate-abi.rs:31:5\n+   |\n+31 |     extern \"platform-intrinsic\" fn m2(); //~ ERROR platform intrinsics are experimental\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n+\n+error: vectorcall is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:32:5\n+   |\n+32 |     extern \"vectorcall\" fn m3(); //~ ERROR vectorcall is experimental and subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n+\n+error: rust-call ABI is subject to change (see issue #29625)\n+  --> $DIR/feature-gate-abi.rs:33:5\n+   |\n+33 |     extern \"rust-call\" fn m4(); //~ ERROR rust-call ABI is subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n+\n+error: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+  --> $DIR/feature-gate-abi.rs:34:5\n+   |\n+34 |     extern \"msp430-interrupt\" fn m5(); //~ ERROR msp430-interrupt ABI is experimental\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n+\n+error: PTX ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:35:5\n+   |\n+35 |     extern \"ptx-kernel\" fn m6(); //~ ERROR PTX ABIs are experimental and subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_ptx)] to the crate attributes to enable\n+\n+error: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+  --> $DIR/feature-gate-abi.rs:36:5\n+   |\n+36 |     extern \"x86-interrupt\" fn m7(); //~ ERROR x86-interrupt ABI is experimental\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n+\n+error: thiscall is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:37:5\n+   |\n+37 |     extern \"thiscall\" fn m8(); //~ ERROR thiscall is experimental and subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n+\n+error: intrinsics are subject to change\n+  --> $DIR/feature-gate-abi.rs:39:5\n+   |\n+39 |     extern \"rust-intrinsic\" fn dm1() {} //~ ERROR intrinsics are subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(intrinsics)] to the crate attributes to enable\n+\n+error: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+  --> $DIR/feature-gate-abi.rs:40:5\n+   |\n+40 |     extern \"platform-intrinsic\" fn dm2() {} //~ ERROR platform intrinsics are experimental\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n+\n+error: vectorcall is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:41:5\n+   |\n+41 |     extern \"vectorcall\" fn dm3() {} //~ ERROR vectorcall is experimental and subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n+\n+error: rust-call ABI is subject to change (see issue #29625)\n+  --> $DIR/feature-gate-abi.rs:42:5\n+   |\n+42 |     extern \"rust-call\" fn dm4() {} //~ ERROR rust-call ABI is subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n+\n+error: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+  --> $DIR/feature-gate-abi.rs:43:5\n+   |\n+43 |     extern \"msp430-interrupt\" fn dm5() {} //~ ERROR msp430-interrupt ABI is experimental\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n+\n+error: PTX ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:44:5\n+   |\n+44 |     extern \"ptx-kernel\" fn dm6() {} //~ ERROR PTX ABIs are experimental and subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_ptx)] to the crate attributes to enable\n+\n+error: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+  --> $DIR/feature-gate-abi.rs:45:5\n+   |\n+45 |     extern \"x86-interrupt\" fn dm7() {} //~ ERROR x86-interrupt ABI is experimental\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n+\n+error: thiscall is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:46:5\n+   |\n+46 |     extern \"thiscall\" fn dm8() {} //~ ERROR thiscall is experimental and subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n+\n+error: intrinsics are subject to change\n+  --> $DIR/feature-gate-abi.rs:53:5\n+   |\n+53 |     extern \"rust-intrinsic\" fn m1() {} //~ ERROR intrinsics are subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(intrinsics)] to the crate attributes to enable\n+\n+error: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+  --> $DIR/feature-gate-abi.rs:54:5\n+   |\n+54 |     extern \"platform-intrinsic\" fn m2() {} //~ ERROR platform intrinsics are experimental\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n+\n+error: vectorcall is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:55:5\n+   |\n+55 |     extern \"vectorcall\" fn m3() {} //~ ERROR vectorcall is experimental and subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n+\n+error: rust-call ABI is subject to change (see issue #29625)\n+  --> $DIR/feature-gate-abi.rs:56:5\n+   |\n+56 |     extern \"rust-call\" fn m4() {} //~ ERROR rust-call ABI is subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n+\n+error: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+  --> $DIR/feature-gate-abi.rs:57:5\n+   |\n+57 |     extern \"msp430-interrupt\" fn m5() {} //~ ERROR msp430-interrupt ABI is experimental\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n+\n+error: PTX ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:58:5\n+   |\n+58 |     extern \"ptx-kernel\" fn m6() {} //~ ERROR PTX ABIs are experimental and subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_ptx)] to the crate attributes to enable\n+\n+error: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+  --> $DIR/feature-gate-abi.rs:59:5\n+   |\n+59 |     extern \"x86-interrupt\" fn m7() {} //~ ERROR x86-interrupt ABI is experimental\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n+\n+error: thiscall is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:60:5\n+   |\n+60 |     extern \"thiscall\" fn m8() {} //~ ERROR thiscall is experimental and subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n+\n+error: intrinsics are subject to change\n+  --> $DIR/feature-gate-abi.rs:65:5\n+   |\n+65 |     extern \"rust-intrinsic\" fn im1() {} //~ ERROR intrinsics are subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(intrinsics)] to the crate attributes to enable\n+\n+error: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+  --> $DIR/feature-gate-abi.rs:66:5\n+   |\n+66 |     extern \"platform-intrinsic\" fn im2() {} //~ ERROR platform intrinsics are experimental\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n+\n+error: vectorcall is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:67:5\n+   |\n+67 |     extern \"vectorcall\" fn im3() {} //~ ERROR vectorcall is experimental and subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n+\n+error: rust-call ABI is subject to change (see issue #29625)\n+  --> $DIR/feature-gate-abi.rs:68:5\n+   |\n+68 |     extern \"rust-call\" fn im4() {} //~ ERROR rust-call ABI is subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n+\n+error: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+  --> $DIR/feature-gate-abi.rs:69:5\n+   |\n+69 |     extern \"msp430-interrupt\" fn im5() {} //~ ERROR msp430-interrupt ABI is experimental\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n+\n+error: PTX ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:70:5\n+   |\n+70 |     extern \"ptx-kernel\" fn im6() {} //~ ERROR PTX ABIs are experimental and subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_ptx)] to the crate attributes to enable\n+\n+error: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+  --> $DIR/feature-gate-abi.rs:71:5\n+   |\n+71 |     extern \"x86-interrupt\" fn im7() {} //~ ERROR x86-interrupt ABI is experimental\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n+\n+error: thiscall is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:72:5\n+   |\n+72 |     extern \"thiscall\" fn im8() {} //~ ERROR thiscall is experimental and subject to change\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n+\n+error: intrinsics are subject to change\n+  --> $DIR/feature-gate-abi.rs:76:11\n+   |\n+76 | type A1 = extern \"rust-intrinsic\" fn(); //~ ERROR intrinsics are subject to change\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(intrinsics)] to the crate attributes to enable\n+\n+error: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+  --> $DIR/feature-gate-abi.rs:77:11\n+   |\n+77 | type A2 = extern \"platform-intrinsic\" fn(); //~ ERROR platform intrinsics are experimental\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n+\n+error: vectorcall is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:78:11\n+   |\n+78 | type A3 = extern \"vectorcall\" fn(); //~ ERROR vectorcall is experimental and subject to change\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n+\n+error: rust-call ABI is subject to change (see issue #29625)\n+  --> $DIR/feature-gate-abi.rs:79:11\n+   |\n+79 | type A4 = extern \"rust-call\" fn(); //~ ERROR rust-call ABI is subject to change\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n+\n+error: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+  --> $DIR/feature-gate-abi.rs:80:11\n+   |\n+80 | type A5 = extern \"msp430-interrupt\" fn(); //~ ERROR msp430-interrupt ABI is experimental\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n+\n+error: PTX ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:81:11\n+   |\n+81 | type A6 = extern \"ptx-kernel\" fn (); //~ ERROR PTX ABIs are experimental and subject to change\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_ptx)] to the crate attributes to enable\n+\n+error: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+  --> $DIR/feature-gate-abi.rs:82:11\n+   |\n+82 | type A7 = extern \"x86-interrupt\" fn(); //~ ERROR x86-interrupt ABI is experimental\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n+\n+error: thiscall is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:83:11\n+   |\n+83 | type A8 = extern \"thiscall\" fn(); //~ ERROR thiscall is experimental and subject to change\n+   |           ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n+\n+error: intrinsics are subject to change\n+  --> $DIR/feature-gate-abi.rs:86:1\n+   |\n+86 | extern \"rust-intrinsic\" {} //~ ERROR intrinsics are subject to change\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(intrinsics)] to the crate attributes to enable\n+\n+error: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+  --> $DIR/feature-gate-abi.rs:87:1\n+   |\n+87 | extern \"platform-intrinsic\" {} //~ ERROR platform intrinsics are experimental\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n+\n+error: vectorcall is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:88:1\n+   |\n+88 | extern \"vectorcall\" {} //~ ERROR vectorcall is experimental and subject to change\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n+\n+error: rust-call ABI is subject to change (see issue #29625)\n+  --> $DIR/feature-gate-abi.rs:89:1\n+   |\n+89 | extern \"rust-call\" {} //~ ERROR rust-call ABI is subject to change\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n+\n+error: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+  --> $DIR/feature-gate-abi.rs:90:1\n+   |\n+90 | extern \"msp430-interrupt\" {} //~ ERROR msp430-interrupt ABI is experimental\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n+\n+error: PTX ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:91:1\n+   |\n+91 | extern \"ptx-kernel\" {} //~ ERROR PTX ABIs are experimental and subject to change\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_ptx)] to the crate attributes to enable\n+\n+error: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+  --> $DIR/feature-gate-abi.rs:92:1\n+   |\n+92 | extern \"x86-interrupt\" {} //~ ERROR x86-interrupt ABI is experimental\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n+\n+error: thiscall is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:93:1\n+   |\n+93 | extern \"thiscall\" {} //~ ERROR thiscall is experimental and subject to change\n+   | ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n+\n+error: aborting due to 56 previous errors\n+"}, {"sha": "501f4451ed8d51b6982f001ec10ddc214210001c", "filename": "src/test/ui/feature-gate-abi_unadjusted.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-abi_unadjusted\n-\n extern \"unadjusted\" fn foo() {\n //~^ ERROR: unadjusted ABI is an implementation detail and perma-unstable\n }", "previous_filename": "src/test/compile-fail/unadjusted-unstable.rs"}, {"sha": "3cc43847156a1d6fba3c5e943987f183e5e9284b", "filename": "src/test/ui/feature-gate-abi_unadjusted.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,12 @@\n+error: unadjusted ABI is an implementation detail and perma-unstable\n+  --> $DIR/feature-gate-abi_unadjusted.rs:11:1\n+   |\n+11 | / extern \"unadjusted\" fn foo() {\n+12 | | //~^ ERROR: unadjusted ABI is an implementation detail and perma-unstable\n+13 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(abi_unadjusted)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "dc9b4e634ab723952797879d048cdca3ff91656c", "filename": "src/test/ui/feature-gate-advanced-slice-features.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-advanced-slice-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-advanced-slice-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-advanced-slice-features.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-advanced-slice-features.rs"}, {"sha": "815593d07a5f4de3329fdc8e29dd393cecaf2f72", "filename": "src/test/ui/feature-gate-advanced-slice-features.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-advanced-slice-features.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-advanced-slice-features.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-advanced-slice-features.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,18 @@\n+error: multiple-element slice matches anywhere but at the end of a slice (e.g. `[0, ..xs, 0]`) are experimental (see issue #23121)\n+  --> $DIR/feature-gate-advanced-slice-features.rs:18:9\n+   |\n+18 |         [ xs.., 4, 5 ] => {}    //~ ERROR multiple-element slice matches\n+   |         ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(advanced_slice_patterns)] to the crate attributes to enable\n+\n+error: multiple-element slice matches anywhere but at the end of a slice (e.g. `[0, ..xs, 0]`) are experimental (see issue #23121)\n+  --> $DIR/feature-gate-advanced-slice-features.rs:19:9\n+   |\n+19 |         [ 1, xs.., 5 ] => {}    //~ ERROR multiple-element slice matches\n+   |         ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(advanced_slice_patterns)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "b519a985ec5e7f3ed359caca12590922ae5d9f0d", "filename": "src/test/ui/feature-gate-allocator_internals.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allocator_internals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allocator_internals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-allocator_internals.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-allocator_internals.rs"}, {"sha": "f1f4705b3bbc1154c8420b4bb90cecaef178f0d1", "filename": "src/test/ui/feature-gate-allocator_internals.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allocator_internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allocator_internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-allocator_internals.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: the `#[default_lib_allocator]` attribute is an experimental feature\n+  --> $DIR/feature-gate-allocator_internals.rs:11:1\n+   |\n+11 | #![default_lib_allocator] //~ ERROR: attribute is an experimental feature\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(allocator_internals)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "590dc619f2f1aa3bc32f110f964cc82ba8dee167", "filename": "src/test/ui/feature-gate-allow-internal-unsafe-nested-macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unsafe-nested-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unsafe-nested-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unsafe-nested-macro.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-allow-internal-unsafe-nested-macro.rs"}, {"sha": "40bdde37ee8cecc80a427e80aa03892ab2f425e9", "filename": "src/test/ui/feature-gate-allow-internal-unsafe-nested-macro.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unsafe-nested-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unsafe-nested-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unsafe-nested-macro.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,13 @@\n+error: allow_internal_unsafe side-steps the unsafe_code lint\n+  --> $DIR/feature-gate-allow-internal-unsafe-nested-macro.rs:18:9\n+   |\n+18 |         #[allow_internal_unsafe] //~ ERROR allow_internal_unsafe side-steps\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+25 | bar!();\n+   | ------- in this macro invocation\n+   |\n+   = help: add #![feature(allow_internal_unsafe)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "9af501b141955f97d777a210afcf40c1e0a4914e", "filename": "src/test/ui/feature-gate-allow-internal-unstable-nested-macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable-nested-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable-nested-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable-nested-macro.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-allow-internal-unstable-nested-macro.rs"}, {"sha": "60d72fbc3b3356d9165da7321173dc9faf5f8d7f", "filename": "src/test/ui/feature-gate-allow-internal-unstable-nested-macro.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable-nested-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable-nested-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable-nested-macro.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,13 @@\n+error: allow_internal_unstable side-steps feature gating and stability checks\n+  --> $DIR/feature-gate-allow-internal-unstable-nested-macro.rs:18:9\n+   |\n+18 |         #[allow_internal_unstable] //~ ERROR allow_internal_unstable side-steps\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+25 | bar!();\n+   | ------- in this macro invocation\n+   |\n+   = help: add #![feature(allow_internal_unstable)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "b186278ef8b7b200d5909b880d5c910a95a34c61", "filename": "src/test/ui/feature-gate-allow-internal-unstable-struct.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable-struct.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-allow-internal-unstable-struct.rs"}, {"sha": "2fb86ce8f4e5b2913e1dae1e6f1c8d43ee5c25c2", "filename": "src/test/ui/feature-gate-allow-internal-unstable-struct.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable-struct.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: allow_internal_unstable side-steps feature gating and stability checks\n+  --> $DIR/feature-gate-allow-internal-unstable-struct.rs:14:1\n+   |\n+14 | #[allow_internal_unstable] //~ ERROR allow_internal_unstable side-steps\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(allow_internal_unstable)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "61a362cb37fb2c0d8d674447ba9af2b348bcf586", "filename": "src/test/ui/feature-gate-allow-internal-unstable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-allow-internal-unstable.rs"}, {"sha": "a5740a1a78927578ebab874f279ea9456d3253f9", "filename": "src/test/ui/feature-gate-allow-internal-unstable.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: allow_internal_unstable side-steps feature gating and stability checks\n+  --> $DIR/feature-gate-allow-internal-unstable.rs:13:1\n+   |\n+13 | #[allow_internal_unstable] //~ ERROR allow_internal_unstable side-steps\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(allow_internal_unstable)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "1124740280960de2f7a63106294cec0df364f7b4", "filename": "src/test/ui/feature-gate-allow_fail.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-allow_fail.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-allow_fail.rs"}, {"sha": "65cd137459ae8c5b1d4b685ed18db3f52b58c109", "filename": "src/test/ui/feature-gate-allow_fail.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-allow_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-allow_fail.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: allow_fail attribute is currently unstable (see issue #42219)\n+  --> $DIR/feature-gate-allow_fail.rs:13:1\n+   |\n+13 | #[allow_fail] //~ ERROR allow_fail attribute is currently unstable\n+   | ^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(allow_fail)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "ff0306f199310c271a112045bf5073571661f927", "filename": "src/test/ui/feature-gate-arbitrary-self-types.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-arbitrary-self-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-arbitrary-self-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-arbitrary-self-types.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-arbitrary-self-types.rs"}, {"sha": "2ef517cc9e1317a95c209da210377a0c9108e99a", "filename": "src/test/ui/feature-gate-arbitrary-self-types.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-arbitrary-self-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-arbitrary-self-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-arbitrary-self-types.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,29 @@\n+error: arbitrary `self` types are unstable (see issue #44874)\n+  --> $DIR/feature-gate-arbitrary-self-types.rs:14:18\n+   |\n+14 |     fn foo(self: Rc<Box<Self>>); //~ ERROR arbitrary `self` types are unstable\n+   |                  ^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(arbitrary_self_types)] to the crate attributes to enable\n+   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+\n+error: arbitrary `self` types are unstable (see issue #44874)\n+  --> $DIR/feature-gate-arbitrary-self-types.rs:20:18\n+   |\n+20 |     fn foo(self: Rc<Box<Self>>) {} //~ ERROR arbitrary `self` types are unstable\n+   |                  ^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(arbitrary_self_types)] to the crate attributes to enable\n+   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+\n+error: arbitrary `self` types are unstable (see issue #44874)\n+  --> $DIR/feature-gate-arbitrary-self-types.rs:24:18\n+   |\n+24 |     fn bar(self: Box<Rc<Self>>) {} //~ ERROR arbitrary `self` types are unstable\n+   |                  ^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(arbitrary_self_types)] to the crate attributes to enable\n+   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "8d053bdae789b1e3358a87a286a628eaefeca326", "filename": "src/test/ui/feature-gate-asm.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-asm.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-asm\n-\n fn main() {\n     unsafe {\n         asm!(\"\"); //~ ERROR inline assembly is not stable enough", "previous_filename": "src/test/compile-fail/asm-gated.rs"}, {"sha": "ff68a4fb23ee11c5983ad42c8e2f89c3cd18fad8", "filename": "src/test/ui/feature-gate-asm.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-asm.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: inline assembly is not stable enough for use and is subject to change (see issue #29722)\n+  --> $DIR/feature-gate-asm.rs:13:9\n+   |\n+13 |         asm!(\"\"); //~ ERROR inline assembly is not stable enough\n+   |         ^^^^^^^^^\n+   |\n+   = help: add #![feature(asm)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "222190de9fe9c4a25651f78858bc413f5f8bc245", "filename": "src/test/ui/feature-gate-asm2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-asm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-asm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-asm2.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/asm-gated2.rs"}, {"sha": "1e02cede61dc710bf149ca756a75f548c55245d8", "filename": "src/test/ui/feature-gate-asm2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-asm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-asm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-asm2.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: inline assembly is not stable enough for use and is subject to change (see issue #29722)\n+  --> $DIR/feature-gate-asm2.rs:15:24\n+   |\n+15 |         println!(\"{}\", asm!(\"\")); //~ ERROR inline assembly is not stable\n+   |                        ^^^^^^^^\n+   |\n+   = help: add #![feature(asm)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "de3521eb0f20bc8d54616b922542fb90b0b5cdf6", "filename": "src/test/ui/feature-gate-assoc-type-defaults.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-assoc-type-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-assoc-type-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-assoc-type-defaults.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-assoc-type-defaults.rs"}, {"sha": "5e2884691682d45a78d6af339d3d51c8569aadf6", "filename": "src/test/ui/feature-gate-assoc-type-defaults.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-assoc-type-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-assoc-type-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-assoc-type-defaults.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: associated type defaults are unstable (see issue #29661)\n+  --> $DIR/feature-gate-assoc-type-defaults.rs:14:5\n+   |\n+14 |     type Bar = u8; //~ ERROR associated type defaults are unstable\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(associated_type_defaults)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "65d437d0c0d31861834129994b39ca5c14639f62", "filename": "src/test/ui/feature-gate-box-expr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-box-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-box-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-box-expr.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-box-expr.rs"}, {"sha": "cef5adbd15a7dc0511a8d5c77f4c067220db3385", "filename": "src/test/ui/feature-gate-box-expr.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-box-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-box-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-box-expr.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: box expression syntax is experimental; you can call `Box::new` instead. (see issue #27779)\n+  --> $DIR/feature-gate-box-expr.rs:22:13\n+   |\n+22 |     let x = box 'c'; //~ ERROR box expression syntax is experimental\n+   |             ^^^^^^^\n+   |\n+   = help: add #![feature(box_syntax)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "e64081823e74c444ba225ee9fc5853e190e0ee2a", "filename": "src/test/ui/feature-gate-box_patterns.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-box_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-box_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-box_patterns.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-box_patterns\n-\n fn main() {\n     let box x = Box::new('c'); //~ ERROR box pattern syntax is experimental\n     println!(\"x: {}\", x);", "previous_filename": "src/test/compile-fail/feature-gate-box-pat.rs"}, {"sha": "0a30de58a1fcece7d0961d2ce46734e3d20a4869", "filename": "src/test/ui/feature-gate-box_patterns.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-box_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-box_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-box_patterns.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: box pattern syntax is experimental (see issue #29641)\n+  --> $DIR/feature-gate-box_patterns.rs:12:9\n+   |\n+12 |     let box x = Box::new('c'); //~ ERROR box pattern syntax is experimental\n+   |         ^^^^^\n+   |\n+   = help: add #![feature(box_patterns)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "a2643fe02b8f72bdc6fdd0594b73238386d01297", "filename": "src/test/ui/feature-gate-box_syntax.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-box_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-box_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-box_syntax.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -10,8 +10,6 @@\n \n // Test that the use of the box syntax is gated by `box_syntax` feature gate.\n \n-// gate-test-box_syntax\n-\n fn main() {\n     let x = box 3;\n     //~^ ERROR box expression syntax is experimental; you can call `Box::new` instead.", "previous_filename": "src/test/compile-fail/gated-box-syntax.rs"}, {"sha": "9b21dd03051bff3f4a1960166ace19fb4f178f7d", "filename": "src/test/ui/feature-gate-box_syntax.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-box_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-box_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-box_syntax.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: box expression syntax is experimental; you can call `Box::new` instead. (see issue #27779)\n+  --> $DIR/feature-gate-box_syntax.rs:14:13\n+   |\n+14 |     let x = box 3;\n+   |             ^^^^^\n+   |\n+   = help: add #![feature(box_syntax)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "5568a5cf0aac267e8bfe79374206c997ccee4df1", "filename": "src/test/ui/feature-gate-catch_expr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-catch_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-catch_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-catch_expr.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-catch_expr.rs"}, {"sha": "f486373d225c3fc82dc602de1dc87cdaf383b774", "filename": "src/test/ui/feature-gate-catch_expr.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-catch_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-catch_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-catch_expr.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,14 @@\n+error: `catch` expression is experimental (see issue #31436)\n+  --> $DIR/feature-gate-catch_expr.rs:12:24\n+   |\n+12 |       let catch_result = do catch { //~ ERROR `catch` expression is experimental\n+   |  ________________________^\n+13 | |         let x = 5;\n+14 | |         x\n+15 | |     };\n+   | |_____^\n+   |\n+   = help: add #![feature(catch_expr)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "7832e1c7c51520e7978b491b2bad1426d52f65c2", "filename": "src/test/ui/feature-gate-cfg-target-feature.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-cfg-target-feature.rs"}, {"sha": "60dc6fbb57e969ecb0469c973cdf2344077d7aef", "filename": "src/test/ui/feature-gate-cfg-target-feature.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,34 @@\n+error: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n+  --> $DIR/feature-gate-cfg-target-feature.rs:12:12\n+   |\n+12 | #[cfg_attr(target_feature = \"x\", x)] //~ ERROR `cfg(target_feature)` is experimental\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_feature)] to the crate attributes to enable\n+\n+error: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n+  --> $DIR/feature-gate-cfg-target-feature.rs:11:7\n+   |\n+11 | #[cfg(target_feature = \"x\")] //~ ERROR `cfg(target_feature)` is experimental\n+   |       ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_feature)] to the crate attributes to enable\n+\n+error: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n+  --> $DIR/feature-gate-cfg-target-feature.rs:15:19\n+   |\n+15 | #[cfg(not(any(all(target_feature = \"x\"))))] //~ ERROR `cfg(target_feature)` is experimental\n+   |                   ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_feature)] to the crate attributes to enable\n+\n+error: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n+  --> $DIR/feature-gate-cfg-target-feature.rs:19:10\n+   |\n+19 |     cfg!(target_feature = \"x\");\n+   |          ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_feature)] to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "aa27f8922c005d7a77af19294583b7c2e77e42ba", "filename": "src/test/ui/feature-gate-cfg-target-has-atomic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-has-atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-has-atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-has-atomic.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-cfg-target-has-atomic.rs"}, {"sha": "5daf5de7123d5b1e6d585afeea963919727f56ef", "filename": "src/test/ui/feature-gate-cfg-target-has-atomic.stderr", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-has-atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-has-atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-has-atomic.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,122 @@\n+error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:23:7\n+   |\n+23 | #[cfg(target_has_atomic = \"8\")]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n+\n+error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:29:7\n+   |\n+29 | #[cfg(target_has_atomic = \"8\")]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n+\n+error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:34:7\n+   |\n+34 | #[cfg(target_has_atomic = \"16\")]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n+\n+error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:39:7\n+   |\n+39 | #[cfg(target_has_atomic = \"16\")]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n+\n+error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:44:7\n+   |\n+44 | #[cfg(target_has_atomic = \"32\")]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n+\n+error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:49:7\n+   |\n+49 | #[cfg(target_has_atomic = \"32\")]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n+\n+error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:54:7\n+   |\n+54 | #[cfg(target_has_atomic = \"64\")]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n+\n+error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:59:7\n+   |\n+59 | #[cfg(target_has_atomic = \"64\")]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n+\n+error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:64:7\n+   |\n+64 | #[cfg(target_has_atomic = \"ptr\")]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n+\n+error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:69:7\n+   |\n+69 | #[cfg(target_has_atomic = \"ptr\")]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n+\n+error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:76:10\n+   |\n+76 |     cfg!(target_has_atomic = \"8\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n+\n+error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:78:10\n+   |\n+78 |     cfg!(target_has_atomic = \"16\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n+\n+error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:80:10\n+   |\n+80 |     cfg!(target_has_atomic = \"32\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n+\n+error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:82:10\n+   |\n+82 |     cfg!(target_has_atomic = \"64\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n+\n+error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+  --> $DIR/feature-gate-cfg-target-has-atomic.rs:84:10\n+   |\n+84 |     cfg!(target_has_atomic = \"ptr\");\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n+\n+error: aborting due to 15 previous errors\n+"}, {"sha": "985bd8320e05938d9449dc6b75b970d909ab16e4", "filename": "src/test/ui/feature-gate-cfg-target-thread-local.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-thread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-thread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-thread-local.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-cfg-target-thread-local.rs"}, {"sha": "9e2eea6e0a48eae5f3bd63e563258ad9b59acba5", "filename": "src/test/ui/feature-gate-cfg-target-thread-local.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-thread-local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-thread-local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-thread-local.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: `cfg(target_thread_local)` is experimental and subject to change (see issue #29594)\n+  --> $DIR/feature-gate-cfg-target-thread-local.rs:19:16\n+   |\n+19 |     #[cfg_attr(target_thread_local, thread_local)]\n+   |                ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_thread_local)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "e68a84d35534f4d46112c2df65b716e1db532fcf", "filename": "src/test/ui/feature-gate-cfg-target-vendor.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-vendor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-vendor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-vendor.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-cfg-target-vendor.rs"}, {"sha": "c5709600dba70b628de170a15bf6ca72365090ff", "filename": "src/test/ui/feature-gate-cfg-target-vendor.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-vendor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-vendor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-vendor.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,34 @@\n+error: `cfg(target_vendor)` is experimental and subject to change (see issue #29718)\n+  --> $DIR/feature-gate-cfg-target-vendor.rs:12:12\n+   |\n+12 | #[cfg_attr(target_vendor = \"x\", x)] //~ ERROR `cfg(target_vendor)` is experimental\n+   |            ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_vendor)] to the crate attributes to enable\n+\n+error: `cfg(target_vendor)` is experimental and subject to change (see issue #29718)\n+  --> $DIR/feature-gate-cfg-target-vendor.rs:11:7\n+   |\n+11 | #[cfg(target_vendor = \"x\")] //~ ERROR `cfg(target_vendor)` is experimental\n+   |       ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_vendor)] to the crate attributes to enable\n+\n+error: `cfg(target_vendor)` is experimental and subject to change (see issue #29718)\n+  --> $DIR/feature-gate-cfg-target-vendor.rs:15:19\n+   |\n+15 | #[cfg(not(any(all(target_vendor = \"x\"))))] //~ ERROR `cfg(target_vendor)` is experimental\n+   |                   ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_vendor)] to the crate attributes to enable\n+\n+error: `cfg(target_vendor)` is experimental and subject to change (see issue #29718)\n+  --> $DIR/feature-gate-cfg-target-vendor.rs:19:10\n+   |\n+19 |     cfg!(target_vendor = \"x\");\n+   |          ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_target_vendor)] to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "a15153ea7bf0ab947bbd0b04b0288bfc4899ef1d", "filename": "src/test/ui/feature-gate-clone-closures.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-clone-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-clone-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-clone-closures.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-clone-closures.rs"}, {"sha": "3e07aa17440806fefbdd7f903d670622ca215899", "filename": "src/test/ui/feature-gate-clone-closures.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-clone-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-clone-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-clone-closures.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error[E0599]: no method named `clone` found for type `[closure@$DIR/feature-gate-clone-closures.rs:16:17: 18:6 a:_]` in the current scope\n+  --> $DIR/feature-gate-clone-closures.rs:20:23\n+   |\n+20 |     let hello = hello.clone(); //~ ERROR no method named `clone` found for type\n+   |                       ^^^^^\n+   |\n+   = note: hello is a function, perhaps you wish to call it\n+\n+error: aborting due to previous error\n+"}, {"sha": "f9334f1d3b072ca7372c6b20a968b07b7803ada0", "filename": "src/test/ui/feature-gate-compiler-builtins.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-compiler-builtins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-compiler-builtins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-compiler-builtins.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-compiler-builtins.rs"}, {"sha": "ebf42b2bdd8944493361ea199e17151a526ff995", "filename": "src/test/ui/feature-gate-compiler-builtins.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-compiler-builtins.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-compiler-builtins.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-compiler-builtins.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: the `#[compiler_builtins]` attribute is used to identify the `compiler_builtins` crate which contains compiler-rt intrinsics and will never be stable\n+  --> $DIR/feature-gate-compiler-builtins.rs:11:1\n+   |\n+11 | #![compiler_builtins] //~ ERROR the `#[compiler_builtins]` attribute is\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(compiler_builtins)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "f4d97445725cd37de1a6b5f6f57e62e78e146ad7", "filename": "src/test/ui/feature-gate-concat_idents.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-concat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-concat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-concat_idents.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-concat_idents\n-\n const XY_1: i32 = 10;\n \n fn main() {", "previous_filename": "src/test/compile-fail/concat_idents-gate.rs"}, {"sha": "c980668c298b42cbb6bdb51c56f914a7d8dacb79", "filename": "src/test/ui/feature-gate-concat_idents.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-concat_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-concat_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-concat_idents.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,18 @@\n+error: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+  --> $DIR/feature-gate-concat_idents.rs:15:13\n+   |\n+15 |     let a = concat_idents!(X, Y_1); //~ ERROR `concat_idents` is not stable\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(concat_idents)] to the crate attributes to enable\n+\n+error: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+  --> $DIR/feature-gate-concat_idents.rs:16:13\n+   |\n+16 |     let b = concat_idents!(X, Y_2); //~ ERROR `concat_idents` is not stable\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(concat_idents)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "af288a97904400eecdda6f45010f0c43fe003aa0", "filename": "src/test/ui/feature-gate-concat_idents2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-concat_idents2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-concat_idents2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-concat_idents2.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/gated-concat_idents.rs"}, {"sha": "9cfd954eec8606732a5f7bd588d28e5d397460ca", "filename": "src/test/ui/feature-gate-concat_idents2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-concat_idents2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-concat_idents2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-concat_idents2.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+  --> $DIR/feature-gate-concat_idents2.rs:14:5\n+   |\n+14 |     concat_idents!(a, b); //~ ERROR `concat_idents` is not stable enough\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(concat_idents)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "5a9ffe98c93cae0b8834dce062fd09cf3b0f8a45", "filename": "src/test/ui/feature-gate-concat_idents3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-concat_idents3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-concat_idents3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-concat_idents3.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/concat_idents-gate2.rs"}, {"sha": "8399ca3c5018cd83f0bc25b0ccc6a2ac332f9145", "filename": "src/test/ui/feature-gate-concat_idents3.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-concat_idents3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-concat_idents3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-concat_idents3.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,18 @@\n+error: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+  --> $DIR/feature-gate-concat_idents3.rs:17:20\n+   |\n+17 |     assert_eq!(10, concat_idents!(X, Y_1)); //~ ERROR `concat_idents` is not stable\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(concat_idents)] to the crate attributes to enable\n+\n+error: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+  --> $DIR/feature-gate-concat_idents3.rs:18:20\n+   |\n+18 |     assert_eq!(20, concat_idents!(X, Y_2)); //~ ERROR `concat_idents` is not stable\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(concat_idents)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7a3ae639bfc8927ddddcc13207fa423dd535d40f", "filename": "src/test/ui/feature-gate-conservative_impl_trait.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-conservative_impl_trait\n-\n fn foo() -> impl Fn() { || {} }\n //~^ ERROR `impl Trait` in return position is experimental\n ", "previous_filename": "src/test/compile-fail/impl-trait/feature-gate.rs"}, {"sha": "72a4f52926a6c842fc81ecfbfb344da177a8cfa3", "filename": "src/test/ui/feature-gate-conservative_impl_trait.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: `impl Trait` in return position is experimental (see issue #34511)\n+  --> $DIR/feature-gate-conservative_impl_trait.rs:11:13\n+   |\n+11 | fn foo() -> impl Fn() { || {} }\n+   |             ^^^^^^^^^\n+   |\n+   = help: add #![feature(conservative_impl_trait)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "0d61878cd8073b25164202a1c41aa42803df15e5", "filename": "src/test/ui/feature-gate-const-indexing.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-const-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-const-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-const-indexing.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-const-indexing.rs"}, {"sha": "bc4b687800d755150d666f07db940d656ea4a664", "filename": "src/test/ui/feature-gate-const-indexing.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-const-indexing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-const-indexing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-const-indexing.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,8 @@\n+error[E0080]: constant evaluation error\n+  --> $DIR/feature-gate-const-indexing.rs:16:24\n+   |\n+16 |     const BLUB: [i32; (ARR[0] - 41) as usize] = [5]; //~ ERROR constant evaluation error\n+   |                        ^^^^^^ the index operation on const values is unstable\n+\n+error: aborting due to previous error\n+"}, {"sha": "1d1dedddaaa3e72099f70dab571a40f976d0359e", "filename": "src/test/ui/feature-gate-const_fn.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-const_fn.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-const_fn\n-\n // Test use of const fn without feature gate.\n \n const fn foo() -> usize { 0 } //~ ERROR const fn is unstable", "previous_filename": "src/test/compile-fail/const-fn-stability.rs"}, {"sha": "c62229ac71bad16319afb9aace035c38113bba27", "filename": "src/test/ui/feature-gate-const_fn.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-const_fn.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,60 @@\n+error[E0379]: trait fns cannot be declared const\n+  --> $DIR/feature-gate-const_fn.rs:16:5\n+   |\n+16 |     const fn foo() -> u32; //~ ERROR const fn is unstable\n+   |     ^^^^^ trait fns cannot be const\n+\n+error[E0379]: trait fns cannot be declared const\n+  --> $DIR/feature-gate-const_fn.rs:18:5\n+   |\n+18 |     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n+   |     ^^^^^ trait fns cannot be const\n+\n+error[E0379]: trait fns cannot be declared const\n+  --> $DIR/feature-gate-const_fn.rs:27:5\n+   |\n+27 |     const fn foo() -> u32 { 0 } //~ ERROR const fn is unstable\n+   |     ^^^^^ trait fns cannot be const\n+\n+error: const fn is unstable (see issue #24111)\n+  --> $DIR/feature-gate-const_fn.rs:13:1\n+   |\n+13 | const fn foo() -> usize { 0 } //~ ERROR const fn is unstable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error: const fn is unstable (see issue #24111)\n+  --> $DIR/feature-gate-const_fn.rs:16:5\n+   |\n+16 |     const fn foo() -> u32; //~ ERROR const fn is unstable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error: const fn is unstable (see issue #24111)\n+  --> $DIR/feature-gate-const_fn.rs:18:5\n+   |\n+18 |     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error: const fn is unstable (see issue #24111)\n+  --> $DIR/feature-gate-const_fn.rs:23:5\n+   |\n+23 |     const fn baz() -> u32 { 0 } //~ ERROR const fn is unstable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error: const fn is unstable (see issue #24111)\n+  --> $DIR/feature-gate-const_fn.rs:27:5\n+   |\n+27 |     const fn foo() -> u32 { 0 } //~ ERROR const fn is unstable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "b11b09eb9fd9bfab6787d6dc53f5332d98ae1288", "filename": "src/test/ui/feature-gate-copy-closures.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-copy-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-copy-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-copy-closures.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-copy-closures.rs"}, {"sha": "9b324672f22466ed5b2f3231591519a1a04353cb", "filename": "src/test/ui/feature-gate-copy-closures.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-copy-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-copy-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-copy-closures.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,12 @@\n+error[E0382]: use of moved value: `hello`\n+  --> $DIR/feature-gate-copy-closures.rs:18:9\n+   |\n+17 |     let b = hello;\n+   |         - value moved here\n+18 |     let c = hello; //~ ERROR use of moved value: `hello` [E0382]\n+   |         ^ value used here after move\n+   |\n+   = note: move occurs because `hello` has type `[closure@$DIR/feature-gate-copy-closures.rs:13:17: 15:6 a:&i32]`, which does not implement the `Copy` trait\n+\n+error: aborting due to previous error\n+"}, {"sha": "830ec5959b7027e18476d98996c551ba8f1bfa7d", "filename": "src/test/ui/feature-gate-crate_in_paths.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-crate_in_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-crate_in_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-crate_in_paths.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/rfc-2126-crate-paths/feature-gate-crate_in_paths.rs"}, {"sha": "b13c82ecfc9079a55f11b04f7cd08d6e8d8db1a5", "filename": "src/test/ui/feature-gate-crate_in_paths.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-crate_in_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-crate_in_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-crate_in_paths.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: `crate` in paths is experimental (see issue #45477)\n+  --> $DIR/feature-gate-crate_in_paths.rs:14:15\n+   |\n+14 |     let _ = ::crate::S; //~ ERROR `crate` in paths is experimental\n+   |               ^^^^^\n+   |\n+   = help: add #![feature(crate_in_paths)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "a2937d6de31f3501a9db2d98872164a94810a744", "filename": "src/test/ui/feature-gate-crate_visibility_modifier.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-crate_visibility_modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-crate_visibility_modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-crate_visibility_modifier.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-crate_visibility_modifier.rs"}, {"sha": "0862744b87b329c9e1ad70e09dc56df1854afb0a", "filename": "src/test/ui/feature-gate-crate_visibility_modifier.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-crate_visibility_modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-crate_visibility_modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-crate_visibility_modifier.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: `crate` visibility modifier is experimental (see issue #45388)\n+  --> $DIR/feature-gate-crate_visibility_modifier.rs:11:1\n+   |\n+11 | crate struct Bender { //~ ERROR `crate` visibility modifier is experimental\n+   | ^^^^^\n+   |\n+   = help: add #![feature(crate_visibility_modifier)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "b54288035175d33c9a477d8279841fe374ad1c62", "filename": "src/test/ui/feature-gate-custom_attribute.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -10,8 +10,6 @@\n \n // Check that literals in attributes parse just fine.\n \n-// gate-test-custom_attribute\n-\n #![feature(rustc_attrs, attr_literals)]\n #![allow(dead_code)]\n #![allow(unused_variables)]", "previous_filename": "src/test/compile-fail/attr-literals.rs"}, {"sha": "866ebfe8f2f3a350ee97dc7708e22b7d93aec3bc", "filename": "src/test/ui/feature-gate-custom_attribute.stderr", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,106 @@\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:17:1\n+   |\n+17 | #[fake_attr] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:18:1\n+   |\n+18 | #[fake_attr(100)] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:19:1\n+   |\n+19 | #[fake_attr(1, 2, 3)] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:20:1\n+   |\n+20 | #[fake_attr(\"hello\")] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:21:1\n+   |\n+21 | #[fake_attr(name = \"hello\")] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:22:1\n+   |\n+22 | #[fake_attr(1, \"hi\", key = 12, true, false)] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:23:1\n+   |\n+23 | #[fake_attr(key = \"hello\", val = 10)] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:24:1\n+   |\n+24 | #[fake_attr(key(\"hello\"), val(10))] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:25:1\n+   |\n+25 | #[fake_attr(enabled = true, disabled = false)] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:26:1\n+   |\n+26 | #[fake_attr(true)] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:27:1\n+   |\n+27 | #[fake_attr(pi = 3.14159)] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:28:1\n+   |\n+28 | #[fake_attr(b\"hi\")] //~ ERROR attribute `fake_attr` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `fake_doc` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute.rs:29:1\n+   |\n+29 | #[fake_doc(r\"doc\")] //~ ERROR attribute `fake_doc` is currently unknown\n+   | ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: aborting due to 13 previous errors\n+"}, {"sha": "0d89c52d885f9022a85dfffaddd905ddd7914263", "filename": "src/test/ui/feature-gate-custom_attribute2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/attr-on-generic-formals-are-visited.rs"}, {"sha": "3e4ea58a7a3fb1e30e67ce5ad72d29937d3ad2d9", "filename": "src/test/ui/feature-gate-custom_attribute2.stderr", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,138 @@\n+error: The attribute `lt_struct` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:23:13\n+   |\n+23 | struct StLt<#[lt_struct] 'a>(&'a u32);\n+   |             ^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `ty_struct` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:25:13\n+   |\n+25 | struct StTy<#[ty_struct] I>(I);\n+   |             ^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `lt_enum` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:28:11\n+   |\n+28 | enum EnLt<#[lt_enum] 'b> { A(&'b u32), B }\n+   |           ^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `ty_enum` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:30:11\n+   |\n+30 | enum EnTy<#[ty_enum] J> { A(J), B }\n+   |           ^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `lt_trait` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:33:12\n+   |\n+33 | trait TrLt<#[lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n+   |            ^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `ty_trait` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:35:12\n+   |\n+35 | trait TrTy<#[ty_trait] K> { fn foo(&self, _: K); }\n+   |            ^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `lt_type` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:38:11\n+   |\n+38 | type TyLt<#[lt_type] 'd> = &'d u32;\n+   |           ^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `ty_type` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:40:11\n+   |\n+40 | type TyTy<#[ty_type] L> = (L, );\n+   |           ^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `lt_inherent` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:43:6\n+   |\n+43 | impl<#[lt_inherent] 'e> StLt<'e> { }\n+   |      ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `ty_inherent` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:45:6\n+   |\n+45 | impl<#[ty_inherent] M> StTy<M> { }\n+   |      ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `lt_impl_for` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:48:6\n+   |\n+48 | impl<#[lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n+   |      ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `ty_impl_for` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:52:6\n+   |\n+52 | impl<#[ty_impl_for] N> TrTy<N> for StTy<N> {\n+   |      ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `lt_fn` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:57:9\n+   |\n+57 | fn f_lt<#[lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n+   |         ^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `ty_fn` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:59:9\n+   |\n+59 | fn f_ty<#[ty_fn] O>(_: O) { }\n+   |         ^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `lt_meth` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:63:13\n+   |\n+63 |     fn m_lt<#[lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n+   |             ^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `ty_meth` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:65:13\n+   |\n+65 |     fn m_ty<#[ty_meth] P>(_: P) { }\n+   |             ^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: The attribute `lt_hof` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+  --> $DIR/feature-gate-custom_attribute2.rs:70:19\n+   |\n+70 |     where Q: for <#[lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n+   |                   ^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: aborting due to 17 previous errors\n+"}, {"sha": "0b1b3141f5bf7745e63496c1e0599399a2ba68c4", "filename": "src/test/ui/feature-gate-custom_derive.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-custom_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-custom_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-custom_derive.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-custom_derive\n-\n #[derive_Clone]\n //~^ ERROR attributes of the form `#[derive_*]` are reserved\n struct Test;", "previous_filename": "src/test/compile-fail/single-derive-attr.rs"}, {"sha": "e806c808631197e9509b9a4b8c2397e2b6880607", "filename": "src/test/ui/feature-gate-custom_derive.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-custom_derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-custom_derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-custom_derive.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: attributes of the form `#[derive_*]` are reserved for the compiler (see issue #29644)\n+  --> $DIR/feature-gate-custom_derive.rs:11:1\n+   |\n+11 | #[derive_Clone]\n+   | ^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(custom_derive)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "c5c83977c77fd0ae0e820a8d209b37247b82e9c8", "filename": "src/test/ui/feature-gate-decl_macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-decl_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-decl_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-decl_macro.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-decl_macro.rs"}, {"sha": "49ce4eb10b615cd4d638ffc30d9b1694beccba71", "filename": "src/test/ui/feature-gate-decl_macro.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-decl_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-decl_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-decl_macro.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: `macro` is experimental (see issue #39412)\n+  --> $DIR/feature-gate-decl_macro.rs:13:1\n+   |\n+13 | macro m() {} //~ ERROR `macro` is experimental (see issue #39412)\n+   | ^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(decl_macro)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "ccc5ec49f1302500f1b7d8900468d2d599bcad4d", "filename": "src/test/ui/feature-gate-default_type_parameter_fallback.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-default_type_parameter_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-default_type_parameter_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-default_type_parameter_fallback.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-default_type_parameter_fallback\n-\n #![allow(unused)]\n \n fn avg<T=i32>(_: T) {}", "previous_filename": "src/test/compile-fail/type-parameter-invalid-lint.rs"}, {"sha": "d756a69e8c1ec944ef999defbe35add0d7cbc78c", "filename": "src/test/ui/feature-gate-default_type_parameter_fallback.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-default_type_parameter_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-default_type_parameter_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-default_type_parameter_fallback.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,21 @@\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions.\n+  --> $DIR/feature-gate-default_type_parameter_fallback.rs:13:8\n+   |\n+13 | fn avg<T=i32>(_: T) {}\n+   |        ^\n+   |\n+   = note: #[deny(invalid_type_param_default)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n+\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions.\n+  --> $DIR/feature-gate-default_type_parameter_fallback.rs:18:6\n+   |\n+18 | impl<T=i32> S<T> {}\n+   |      ^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1a77d918014572c3c4974867dec71738a8665d4a", "filename": "src/test/ui/feature-gate-doc_cfg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-doc_cfg.rs"}, {"sha": "c2d8a934ab8e42a91d573e9915cd696300b3345e", "filename": "src/test/ui/feature-gate-doc_cfg.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: #[doc(cfg(...))] is experimental (see issue #43781)\n+  --> $DIR/feature-gate-doc_cfg.rs:11:1\n+   |\n+11 | #[doc(cfg(unix))] //~ ERROR: #[doc(cfg(...))] is experimental\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(doc_cfg)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "bb5be9d69710f947844ab4118e92a0e0176bdf32", "filename": "src/test/ui/feature-gate-doc_masked.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-doc_masked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-doc_masked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-doc_masked.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-doc_masked.rs"}, {"sha": "11020765304f754d858a4ce94858d9717e65e278", "filename": "src/test/ui/feature-gate-doc_masked.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-doc_masked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-doc_masked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-doc_masked.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: #[doc(masked)] is experimental (see issue #44027)\n+  --> $DIR/feature-gate-doc_masked.rs:11:1\n+   |\n+11 | #[doc(masked)] //~ ERROR: #[doc(masked)] is experimental\n+   | ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(doc_masked)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "6369358538d50417bac4f2e58da643eb6fddf16c", "filename": "src/test/ui/feature-gate-doc_spotlight.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-doc_spotlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-doc_spotlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-doc_spotlight.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-doc_spotlight.rs"}, {"sha": "b743a1e94bc751e176c98848f0eee3478dd2a19e", "filename": "src/test/ui/feature-gate-doc_spotlight.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-doc_spotlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-doc_spotlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-doc_spotlight.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: #[doc(spotlight)] is experimental (see issue #45040)\n+  --> $DIR/feature-gate-doc_spotlight.rs:11:1\n+   |\n+11 | #[doc(spotlight)] //~ ERROR: #[doc(spotlight)] is experimental\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(doc_spotlight)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "1fb139bf07f411fced6eb630d1594edce3b3e6ce", "filename": "src/test/ui/feature-gate-dotdoteq_in_patterns.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-dotdoteq_in_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-dotdoteq_in_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-dotdoteq_in_patterns.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-dotdoteq_in_patterns.rs"}, {"sha": "5319dcef2d5e697c897a1371bf7b55d93ec712b5", "filename": "src/test/ui/feature-gate-dotdoteq_in_patterns.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-dotdoteq_in_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-dotdoteq_in_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-dotdoteq_in_patterns.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: `..=` syntax in patterns is experimental (see issue #28237)\n+  --> $DIR/feature-gate-dotdoteq_in_patterns.rs:13:9\n+   |\n+13 |         0 ..= 3 => {} //~ ERROR `..=` syntax in patterns is experimental\n+   |         ^^^^^^^\n+   |\n+   = help: add #![feature(dotdoteq_in_patterns)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "70ec561439c61a314471ac2cebd4b230fadd1cd7", "filename": "src/test/ui/feature-gate-dropck-ugeh-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-dropck-ugeh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-dropck-ugeh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-dropck-ugeh-2.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-dropck-ugeh-2.rs"}, {"sha": "0555b485d4c0566905ffb8de9dbf7718e7e71c82", "filename": "src/test/ui/feature-gate-dropck-ugeh-2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-dropck-ugeh-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-dropck-ugeh-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-dropck-ugeh-2.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,14 @@\n+error: use of deprecated attribute `dropck_parametricity`: unsafe_destructor_blind_to_params has been replaced by may_dangle and will be removed in the future. See https://github.com/rust-lang/rust/issues/34761\n+  --> $DIR/feature-gate-dropck-ugeh-2.rs:17:5\n+   |\n+17 |     #[unsafe_destructor_blind_to_params]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: lint level defined here\n+  --> $DIR/feature-gate-dropck-ugeh-2.rs:11:9\n+   |\n+11 | #![deny(deprecated)]\n+   |         ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "360895d30b0b7e39866ea4ba4e754299dbf1fb84", "filename": "src/test/ui/feature-gate-dropck-ugeh.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-dropck-ugeh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-dropck-ugeh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-dropck-ugeh.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-dropck-ugeh.rs"}, {"sha": "b030ebcd8814178570b75637790d29612f587c81", "filename": "src/test/ui/feature-gate-dropck-ugeh.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-dropck-ugeh.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-dropck-ugeh.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-dropck-ugeh.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: unsafe_destructor_blind_to_params has been replaced by may_dangle and will be removed in the future (see issue #28498)\n+  --> $DIR/feature-gate-dropck-ugeh.rs:29:5\n+   |\n+29 |     #[unsafe_destructor_blind_to_params] // This is the UGEH attribute\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(dropck_parametricity)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "4b3803d019baa043e0a2038616ac4cffbd95f341", "filename": "src/test/ui/feature-gate-dyn-trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-dyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-dyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-dyn-trait.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-dyn-trait.rs"}, {"sha": "28ecfdf1131da74ea32fde6a1ef8c168e655f985", "filename": "src/test/ui/feature-gate-dyn-trait.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-dyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-dyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-dyn-trait.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: `dyn Trait` syntax is unstable (see issue #44662)\n+  --> $DIR/feature-gate-dyn-trait.rs:12:14\n+   |\n+12 | type A = Box<dyn Trait>; //~ ERROR `dyn Trait` syntax is unstable\n+   |              ^^^^^^^^^\n+   |\n+   = help: add #![feature(dyn_trait)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "e0b6d5986ff3734e07f5576eff8f4963a811aca1", "filename": "src/test/ui/feature-gate-exclusive-range-pattern.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-exclusive-range-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-exclusive-range-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-exclusive-range-pattern.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-exclusive-range-pattern.rs"}, {"sha": "c6785d6f29da407adc5b9643da99b7d16f6d162b", "filename": "src/test/ui/feature-gate-exclusive-range-pattern.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-exclusive-range-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-exclusive-range-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-exclusive-range-pattern.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: exclusive range pattern syntax is experimental (see issue #37854)\n+  --> $DIR/feature-gate-exclusive-range-pattern.rs:13:9\n+   |\n+13 |         0 .. 3 => {} //~ ERROR exclusive range pattern syntax is experimental\n+   |         ^^^^^^\n+   |\n+   = help: add #![feature(exclusive_range_pattern)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "1203b598df3c2e7800525ecf9dda1720ac6f215e", "filename": "src/test/ui/feature-gate-extern_types.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-extern_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-extern_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-extern_types.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-extern_types.rs"}, {"sha": "3815862e89912ac18e2937f94e80fd51b6693c33", "filename": "src/test/ui/feature-gate-extern_types.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-extern_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-extern_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-extern_types.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: extern types are experimental (see issue #43467)\n+  --> $DIR/feature-gate-extern_types.rs:12:5\n+   |\n+12 |     type T; //~ ERROR extern types are experimental\n+   |     ^^^^^^^\n+   |\n+   = help: add #![feature(extern_types)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "fa0a2a29078c556746a115418085ed214e71f085", "filename": "src/test/ui/feature-gate-external_doc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-external_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-external_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-external_doc.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-external_doc.rs"}, {"sha": "5479ab8bc912834a45e2615ed640de5d43beb99c", "filename": "src/test/ui/feature-gate-external_doc.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-external_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-external_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-external_doc.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: #[doc(include = \"...\")] is experimental (see issue #44732)\n+  --> $DIR/feature-gate-external_doc.rs:11:1\n+   |\n+11 | #[doc(include=\"asdf.md\")] //~ ERROR: #[doc(include = \"...\")] is experimental\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(external_doc)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "b903b29658bbb6c2e243cc298415bbd27e0839b5", "filename": "src/test/ui/feature-gate-feature-gate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-feature-gate.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-feature-gate.rs"}, {"sha": "3d5f0d70bb2d745352a99bb6c4bb9e2aaaa34bdf", "filename": "src/test/ui/feature-gate-feature-gate.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-feature-gate.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,14 @@\n+error: unstable feature\n+  --> $DIR/feature-gate-feature-gate.rs:12:12\n+   |\n+12 | #![feature(intrinsics)] //~ ERROR unstable feature\n+   |            ^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/feature-gate-feature-gate.rs:11:11\n+   |\n+11 | #![forbid(unstable_features)]\n+   |           ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "1c04199c05f7c7ec60e1af295be21fe3de263d3e", "filename": "src/test/ui/feature-gate-fn_must_use-cap-lints-allow.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use-cap-lints-allow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use-cap-lints-allow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use-cap-lints-allow.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-fn_must_use-cap-lints-allow.rs"}, {"sha": "9b16e9be68ab33ff263fdfe9528a81375e4a7c93", "filename": "src/test/ui/feature-gate-fn_must_use-cap-lints-allow.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use-cap-lints-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use-cap-lints-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use-cap-lints-allow.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,6 @@\n+error: compilation successful\n+  --> $DIR/feature-gate-fn_must_use-cap-lints-allow.rs:22:1\n+   |\n+22 | fn main() {} //~ ERROR compilation successful\n+   | ^^^^^^^^^^^^\n+"}, {"sha": "72fdcc76cf4f62a236e2453290f31db54a12f9df", "filename": "src/test/ui/feature-gate-fn_must_use.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-fn_must_use.rs"}, {"sha": "ed4953d27b85f15ce173c3b1e862507709298aae", "filename": "src/test/ui/feature-gate-fn_must_use.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-fn_must_use.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,22 @@\n+warning: `#[must_use]` on methods is experimental (see issue #43302)\n+  --> $DIR/feature-gate-fn_must_use.rs:16:5\n+   |\n+16 |     #[must_use] //~ WARN `#[must_use]` on methods is experimental\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: add #![feature(fn_must_use)] to the crate attributes to enable\n+\n+warning: `#[must_use]` on functions is experimental (see issue #43302)\n+  --> $DIR/feature-gate-fn_must_use.rs:20:1\n+   |\n+20 | #[must_use] //~ WARN `#[must_use]` on functions is experimental\n+   | ^^^^^^^^^^^\n+   |\n+   = help: add #![feature(fn_must_use)] to the crate attributes to enable\n+\n+error: compilation successful\n+  --> $DIR/feature-gate-fn_must_use.rs:31:1\n+   |\n+31 | fn main() {} //~ ERROR compilation successful\n+   | ^^^^^^^^^^^^\n+"}, {"sha": "18718a0d0be93ee621b7c06cdb8ee312c5f3730b", "filename": "src/test/ui/feature-gate-fundamental.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-fundamental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-fundamental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-fundamental.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-fundamental.rs"}, {"sha": "0fc75ee30b96a87139fa8e353ae9f70b3268fd7c", "filename": "src/test/ui/feature-gate-fundamental.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-fundamental.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-fundamental.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-fundamental.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: the `#[fundamental]` attribute is an experimental feature (see issue #29635)\n+  --> $DIR/feature-gate-fundamental.rs:11:1\n+   |\n+11 | #[fundamental] //~ ERROR the `#[fundamental]` attribute is an experimental feature\n+   | ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(fundamental)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "3754f92d8cde28abfc3033b8fa89b3076e599af8", "filename": "src/test/ui/feature-gate-generators.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-generators.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-generators.rs"}, {"sha": "82acb4013380216f52df82cb76bf2b11d32f7a3b", "filename": "src/test/ui/feature-gate-generators.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-generators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-generators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-generators.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: yield syntax is experimental\n+  --> $DIR/feature-gate-generators.rs:12:5\n+   |\n+12 |     yield true; //~ ERROR yield syntax is experimental\n+   |     ^^^^^^^^^^\n+   |\n+   = help: add #![feature(generators)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "724ec2496f24cdc6a342f903b786e68caa392969", "filename": "src/test/ui/feature-gate-generic_associated_types.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-generic_associated_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-generic_associated_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-generic_associated_types.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-generic_associated_types.rs"}, {"sha": "7b2507e1fb1412de48a4290a1409242e3c4164d6", "filename": "src/test/ui/feature-gate-generic_associated_types.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-generic_associated_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-generic_associated_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-generic_associated_types.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,34 @@\n+error: generic associated types are unstable (see issue #44265)\n+  --> $DIR/feature-gate-generic_associated_types.rs:14:5\n+   |\n+14 |     type Pointer<T>: Deref<Target = T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_associated_types)] to the crate attributes to enable\n+\n+error: generic associated types are unstable (see issue #44265)\n+  --> $DIR/feature-gate-generic_associated_types.rs:16:5\n+   |\n+16 |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_associated_types)] to the crate attributes to enable\n+\n+error: generic associated types are unstable (see issue #44265)\n+  --> $DIR/feature-gate-generic_associated_types.rs:22:5\n+   |\n+22 |     type Pointer<usize> = Box<usize>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_associated_types)] to the crate attributes to enable\n+\n+error: generic associated types are unstable (see issue #44265)\n+  --> $DIR/feature-gate-generic_associated_types.rs:24:5\n+   |\n+24 |     type Pointer2<u32> = Box<u32>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_associated_types)] to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "944802f450a6d0eee317fd634188dd448d9d8944", "filename": "src/test/ui/feature-gate-generic_param_attrs.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-generic_param_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-generic_param_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-generic_param_attrs.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -16,8 +16,6 @@\n // using `rustc_attrs` feature. There is a separate compile-fail/ test\n // ensuring that the attribute feature-gating works in this context.)\n \n-// gate-test-generic_param_attrs\n-\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n ", "previous_filename": "src/test/compile-fail/attr-on-generic-formals-wo-feature-gate.rs"}, {"sha": "da2e64030292c8bd46c84baba9ca675cbbde3271", "filename": "src/test/ui/feature-gate-generic_param_attrs.stderr", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-generic_param_attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-generic_param_attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-generic_param_attrs.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,138 @@\n+error: attributes on lifetime bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:22:13\n+   |\n+22 | struct StLt<#[rustc_lt_struct] 'a>(&'a u32);\n+   |             ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on type parameter bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:24:13\n+   |\n+24 | struct StTy<#[rustc_ty_struct] I>(I);\n+   |             ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on lifetime bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:27:11\n+   |\n+27 | enum EnLt<#[rustc_lt_enum] 'b> { A(&'b u32), B }\n+   |           ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on type parameter bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:29:11\n+   |\n+29 | enum EnTy<#[rustc_ty_enum] J> { A(J), B }\n+   |           ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on lifetime bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:32:12\n+   |\n+32 | trait TrLt<#[rustc_lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on type parameter bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:34:12\n+   |\n+34 | trait TrTy<#[rustc_ty_trait] K> { fn foo(&self, _: K); }\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on lifetime bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:37:11\n+   |\n+37 | type TyLt<#[rustc_lt_type] 'd> = &'d u32;\n+   |           ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on type parameter bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:39:11\n+   |\n+39 | type TyTy<#[rustc_ty_type] L> = (L, );\n+   |           ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on lifetime bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:42:6\n+   |\n+42 | impl<#[rustc_lt_inherent] 'e> StLt<'e> { }\n+   |      ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on type parameter bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:44:6\n+   |\n+44 | impl<#[rustc_ty_inherent] M> StTy<M> { }\n+   |      ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on lifetime bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:47:6\n+   |\n+47 | impl<#[rustc_lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n+   |      ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on type parameter bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:51:6\n+   |\n+51 | impl<#[rustc_ty_impl_for] N> TrTy<N> for StTy<N> {\n+   |      ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on lifetime bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:56:9\n+   |\n+56 | fn f_lt<#[rustc_lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n+   |         ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on type parameter bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:58:9\n+   |\n+58 | fn f_ty<#[rustc_ty_fn] O>(_: O) { }\n+   |         ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on lifetime bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:62:13\n+   |\n+62 |     fn m_lt<#[rustc_lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n+   |             ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on type parameter bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:64:13\n+   |\n+64 |     fn m_ty<#[rustc_ty_meth] P>(_: P) { }\n+   |             ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: attributes on lifetime bindings are experimental (see issue #34761)\n+  --> $DIR/feature-gate-generic_param_attrs.rs:69:19\n+   |\n+69 |     where Q: for <#[rustc_lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n+   |                   ^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n+\n+error: aborting due to 17 previous errors\n+"}, {"sha": "ff3c342f9e00343f223452e3ee15c2efeaf63f06", "filename": "src/test/ui/feature-gate-global_allocator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-global_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-global_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-global_allocator.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-global_allocator.rs"}, {"sha": "7e6c4288ff39c2a3a07605deeaa3ea0f35ffbecb", "filename": "src/test/ui/feature-gate-global_allocator.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-global_allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-global_allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-global_allocator.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: the `#[global_allocator]` attribute is an experimental feature\n+  --> $DIR/feature-gate-global_allocator.rs:11:1\n+   |\n+11 | #[global_allocator] //~ ERROR: attribute is an experimental feature\n+   | ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(global_allocator)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "77f61ba47b005ebe9b077ec302f412ba0a2a2e11", "filename": "src/test/ui/feature-gate-global_asm.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-global_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-global_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-global_asm.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-global_asm.rs"}, {"sha": "de0ba1a7b3278e8122bd73b7eceb10b2330588ca", "filename": "src/test/ui/feature-gate-global_asm.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-global_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-global_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-global_asm.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: `global_asm!` is not stable enough for use and is subject to change (see issue #35119)\n+  --> $DIR/feature-gate-global_asm.rs:11:1\n+   |\n+11 | global_asm!(\"\"); //~ ERROR `global_asm!` is not stable\n+   | ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(global_asm)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "ddb49a3e5d92a934d853e1553693a8481035d5f2", "filename": "src/test/ui/feature-gate-i128_type.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-i128_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-i128_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-i128_type.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-i128_type\n-\n fn test2() {\n     0i128; //~ ERROR 128-bit integers are not stable\n }", "previous_filename": "src/test/compile-fail/i128-feature.rs"}, {"sha": "df623cac49a94da9605a637a8cd7b82fef14e2b8", "filename": "src/test/ui/feature-gate-i128_type.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-i128_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-i128_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-i128_type.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,18 @@\n+error: 128-bit integers are not stable (see issue #35118)\n+  --> $DIR/feature-gate-i128_type.rs:12:5\n+   |\n+12 |     0i128; //~ ERROR 128-bit integers are not stable\n+   |     ^^^^^\n+   |\n+   = help: add #![feature(i128_type)] to the crate attributes to enable\n+\n+error: 128-bit integers are not stable (see issue #35118)\n+  --> $DIR/feature-gate-i128_type.rs:16:5\n+   |\n+16 |     0u128; //~ ERROR 128-bit integers are not stable\n+   |     ^^^^^\n+   |\n+   = help: add #![feature(i128_type)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d3bd810ceb2b439100018e9ab621cf1c3e6d4e7f", "filename": "src/test/ui/feature-gate-i128_type2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/i128-feature-2.rs"}, {"sha": "26653a5739b2c922a465640013a1c34f1496b176", "filename": "src/test/ui/feature-gate-i128_type2.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,46 @@\n+error: 128-bit type is unstable (see issue #35118)\n+  --> $DIR/feature-gate-i128_type2.rs:13:15\n+   |\n+13 | fn test1() -> i128 { //~ ERROR 128-bit type is unstable\n+   |               ^^^^\n+   |\n+   = help: add #![feature(i128_type)] to the crate attributes to enable\n+\n+error: 128-bit type is unstable (see issue #35118)\n+  --> $DIR/feature-gate-i128_type2.rs:17:17\n+   |\n+17 | fn test1_2() -> u128 { //~ ERROR 128-bit type is unstable\n+   |                 ^^^^\n+   |\n+   = help: add #![feature(i128_type)] to the crate attributes to enable\n+\n+error: 128-bit type is unstable (see issue #35118)\n+  --> $DIR/feature-gate-i128_type2.rs:22:12\n+   |\n+22 |     let x: i128 = 0; //~ ERROR 128-bit type is unstable\n+   |            ^^^^\n+   |\n+   = help: add #![feature(i128_type)] to the crate attributes to enable\n+\n+error: 128-bit type is unstable (see issue #35118)\n+  --> $DIR/feature-gate-i128_type2.rs:26:12\n+   |\n+26 |     let x: u128 = 0; //~ ERROR 128-bit type is unstable\n+   |            ^^^^\n+   |\n+   = help: add #![feature(i128_type)] to the crate attributes to enable\n+\n+error[E0601]: main function not found\n+\n+error: repr with 128-bit type is unstable (see issue #35118)\n+  --> $DIR/feature-gate-i128_type2.rs:30:1\n+   |\n+30 | / enum A { //~ ERROR 128-bit type is unstable\n+31 | |     A(u64)\n+32 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(repr128)] to the crate attributes to enable\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "ae1f81c2f5721fd54742b3036ebd2b7d0dcb8b60", "filename": "src/test/ui/feature-gate-in_band_lifetimes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-in_band_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-in_band_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-in_band_lifetimes.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-in_band_lifetimes.rs"}, {"sha": "3b03ef2dd338af477899f727425bea7a0c5e360b", "filename": "src/test/ui/feature-gate-in_band_lifetimes.stderr", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-in_band_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-in_band_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-in_band_lifetimes.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,104 @@\n+error[E0261]: use of undeclared lifetime name `'x`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:13:12\n+   |\n+13 | fn foo(x: &'x u8) -> &'x u8 { x }\n+   |            ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'x`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:13:23\n+   |\n+13 | fn foo(x: &'x u8) -> &'x u8 { x }\n+   |                       ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:25:12\n+   |\n+25 | impl<'a> X<'b> {\n+   |            ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:27:27\n+   |\n+27 |     fn inner_2(&self) -> &'b u8 {\n+   |                           ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:33:8\n+   |\n+33 | impl X<'b> {\n+   |        ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:35:27\n+   |\n+35 |     fn inner_3(&self) -> &'b u8 {\n+   |                           ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:43:9\n+   |\n+43 | impl Y<&'a u8> {\n+   |         ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:45:25\n+   |\n+45 |     fn inner(&self) -> &'a u8 {\n+   |                         ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:53:27\n+   |\n+53 |     fn any_lifetime() -> &'b u8;\n+   |                           ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:55:27\n+   |\n+55 |     fn borrowed_lifetime(&'b self) -> &'b u8;\n+   |                           ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:55:40\n+   |\n+55 |     fn borrowed_lifetime(&'b self) -> &'b u8;\n+   |                                        ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:60:14\n+   |\n+60 | impl MyTrait<'a> for Y<&'a u8> {\n+   |              ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:60:25\n+   |\n+60 | impl MyTrait<'a> for Y<&'a u8> {\n+   |                         ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:63:31\n+   |\n+63 |     fn my_lifetime(&self) -> &'a u8 { self.0 }\n+   |                               ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:65:27\n+   |\n+65 |     fn any_lifetime() -> &'b u8 { &0 }\n+   |                           ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:67:27\n+   |\n+67 |     fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n+   |                           ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:67:40\n+   |\n+67 |     fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n+   |                                        ^^ undeclared lifetime\n+\n+error: aborting due to 17 previous errors\n+"}, {"sha": "a4c09b21c90a6ce519b9b327ccd0120f6d03b9ce", "filename": "src/test/ui/feature-gate-intrinsics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-intrinsics.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-intrinsics.rs"}, {"sha": "5382122e30edd80d2329dc2cdc3ee44182b8a078", "filename": "src/test/ui/feature-gate-intrinsics.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-intrinsics.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,21 @@\n+error: intrinsics are subject to change\n+  --> $DIR/feature-gate-intrinsics.rs:11:1\n+   |\n+11 | / extern \"rust-intrinsic\" {   //~ ERROR intrinsics are subject to change\n+12 | |     fn bar();\n+13 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(intrinsics)] to the crate attributes to enable\n+\n+error: intrinsics are subject to change\n+  --> $DIR/feature-gate-intrinsics.rs:15:1\n+   |\n+15 | / extern \"rust-intrinsic\" fn baz() {  //~ ERROR intrinsics are subject to change\n+16 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(intrinsics)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "0435ff4c332d522f15dfd07ef643f4102371b1f2", "filename": "src/test/ui/feature-gate-lang-items.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-lang-items.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-lang-items.rs"}, {"sha": "dab8ce23192a838ca6fbac1148b59ada0dfa92f6", "filename": "src/test/ui/feature-gate-lang-items.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-lang-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-lang-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-lang-items.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: language items are subject to change\n+  --> $DIR/feature-gate-lang-items.rs:11:1\n+   |\n+11 | #[lang=\"foo\"]   //~ ERROR language items are subject to change\n+   | ^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(lang_items)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "bd48ac673dd34eaf840086c3832a402f14af11ef", "filename": "src/test/ui/feature-gate-link_args.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-link_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-link_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-link_args.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -12,8 +12,6 @@\n // feature gate, both when it occurs where expected (atop\n // `extern { }` blocks) and where unexpected.\n \n-// gate-test-link_args\n-\n // sidestep warning (which is correct, but misleading for\n // purposes of this test)\n #![allow(unused_attributes)]", "previous_filename": "src/test/compile-fail/gated-link-args.rs"}, {"sha": "d6d059007d1f3d01b0faacbd4a392283c5aff4f8", "filename": "src/test/ui/feature-gate-link_args.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-link_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-link_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-link_args.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,26 @@\n+error: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead (see issue #29596)\n+  --> $DIR/feature-gate-link_args.rs:22:1\n+   |\n+22 | #[link_args = \"-l expected_use_case\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(link_args)] to the crate attributes to enable\n+\n+error: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead (see issue #29596)\n+  --> $DIR/feature-gate-link_args.rs:26:1\n+   |\n+26 | #[link_args = \"-l unexected_use_on_non_extern_item\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(link_args)] to the crate attributes to enable\n+\n+error: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead (see issue #29596)\n+  --> $DIR/feature-gate-link_args.rs:19:1\n+   |\n+19 | #![link_args = \"-l unexpected_use_as_inner_attr_on_mod\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(link_args)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "27918a27caf50793fe7f63010d6d6c7188ef5336", "filename": "src/test/ui/feature-gate-link_cfg.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-link_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-link_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-link_cfg.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-link_cfg\n-\n #[link(name = \"foo\", cfg(foo))]\n //~^ ERROR: is feature gated\n extern {}", "previous_filename": "src/test/compile-fail/link-cfg-gated.rs"}, {"sha": "bbc52bd9d20af02efe38c38f18159b9c6d7df525", "filename": "src/test/ui/feature-gate-link_cfg.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-link_cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-link_cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-link_cfg.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: is feature gated (see issue #37406)\n+  --> $DIR/feature-gate-link_cfg.rs:11:1\n+   |\n+11 | #[link(name = \"foo\", cfg(foo))]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(link_cfg)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "92a1b071437e60f9fb0867198ce5f1a46aaa3716", "filename": "src/test/ui/feature-gate-link_llvm_intrinsics.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-link_llvm_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-link_llvm_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-link_llvm_intrinsics.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-link_llvm_intrinsics\n-\n extern {\n     #[link_name = \"llvm.sqrt.f32\"]\n     fn sqrt(x: f32) -> f32;", "previous_filename": "src/test/compile-fail/gated-link-llvm-intrinsics.rs"}, {"sha": "b2e2caaa51af38b4b57d383289590e5821193803", "filename": "src/test/ui/feature-gate-link_llvm_intrinsics.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-link_llvm_intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-link_llvm_intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-link_llvm_intrinsics.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: linking to LLVM intrinsics is experimental (see issue #29602)\n+  --> $DIR/feature-gate-link_llvm_intrinsics.rs:13:5\n+   |\n+13 |     fn sqrt(x: f32) -> f32;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(link_llvm_intrinsics)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "555cc2b9a7aad95c8c43b10932550e08154b65c8", "filename": "src/test/ui/feature-gate-linkage.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-linkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-linkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-linkage.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-linkage\n-\n extern {\n     #[linkage = \"extern_weak\"] static foo: isize;\n     //~^ ERROR: the `linkage` attribute is experimental and not portable", "previous_filename": "src/test/compile-fail/linkage1.rs"}, {"sha": "62d857ddf2c06fdf98d47d832df5b91e6c6f503a", "filename": "src/test/ui/feature-gate-linkage.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-linkage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-linkage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-linkage.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: the `linkage` attribute is experimental and not portable across platforms (see issue #29603)\n+  --> $DIR/feature-gate-linkage.rs:12:5\n+   |\n+12 |     #[linkage = \"extern_weak\"] static foo: isize;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(linkage)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "955ec39cda1e550a3db00ae58f303fccda711e6f", "filename": "src/test/ui/feature-gate-linker-flavor.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-linker-flavor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-linker-flavor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-linker-flavor.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-linker-flavor.rs"}, {"sha": "383e75e3d1737101edbb396c538717236ab9af4e", "filename": "src/test/ui/feature-gate-linker-flavor.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-linker-flavor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-linker-flavor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-linker-flavor.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: the `#[used]` attribute is an experimental feature (see issue #40289)\n+  --> $DIR/feature-gate-linker-flavor.rs:16:1\n+   |\n+16 | #[used]\n+   | ^^^^^^^\n+   |\n+   = help: add #![feature(used)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "63c66e53c5ee8909ccb4fb9c5f47405fbccd3d54", "filename": "src/test/ui/feature-gate-log_syntax.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-log_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-log_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-log_syntax.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-log_syntax\n-\n fn main() {\n     log_syntax!() //~ ERROR `log_syntax!` is not stable enough\n }", "previous_filename": "src/test/compile-fail/log-syntax-gate.rs"}, {"sha": "f1c0d305f6c31f02ed77424065b4ee93723bb47d", "filename": "src/test/ui/feature-gate-log_syntax.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-log_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-log_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-log_syntax.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: `log_syntax!` is not stable enough for use and is subject to change (see issue #29598)\n+  --> $DIR/feature-gate-log_syntax.rs:12:5\n+   |\n+12 |     log_syntax!() //~ ERROR `log_syntax!` is not stable enough\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(log_syntax)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "dcbe7eefee52c7004aea875cd588e4f7e9e06902", "filename": "src/test/ui/feature-gate-log_syntax2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-log_syntax2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-log_syntax2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-log_syntax2.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/log-syntax-gate2.rs"}, {"sha": "b1bb5557eed14dcd7a5c02c0280c7c28da12f05b", "filename": "src/test/ui/feature-gate-log_syntax2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-log_syntax2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-log_syntax2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-log_syntax2.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: `log_syntax!` is not stable enough for use and is subject to change (see issue #29598)\n+  --> $DIR/feature-gate-log_syntax2.rs:14:20\n+   |\n+14 |     println!(\"{}\", log_syntax!()); //~ ERROR `log_syntax!` is not stable\n+   |                    ^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(log_syntax)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "5d6f2acea83cea7c31da88f4f36a91de4b8988f1", "filename": "src/test/ui/feature-gate-macro-vis-matcher.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-macro-vis-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-macro-vis-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-macro-vis-matcher.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-macro-vis-matcher.rs"}, {"sha": "09db5009165d1e2f757a415294d2062878e063ad", "filename": "src/test/ui/feature-gate-macro-vis-matcher.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-macro-vis-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-macro-vis-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-macro-vis-matcher.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: :vis fragment specifier is experimental and subject to change (see issue #41022)\n+  --> $DIR/feature-gate-macro-vis-matcher.rs:14:19\n+   |\n+14 | macro_rules! m { ($v:vis) => {} }\n+   |                   ^^^^^^\n+   |\n+   = help: add #![feature(macro_vis_matcher)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "db1c1a944172d5d1ce6508b297480fc9742bd69e", "filename": "src/test/ui/feature-gate-main.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-main.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-main.rs"}, {"sha": "90cf12822c804315fa2154a360b44e6f38fa86d0", "filename": "src/test/ui/feature-gate-main.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-main.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: declaration of a nonstandard #[main] function may change over time, for now a top-level `fn main()` is required (see issue #29634)\n+  --> $DIR/feature-gate-main.rs:12:1\n+   |\n+12 | fn foo() {} //~ ERROR: declaration of a nonstandard #[main] function may change over time\n+   | ^^^^^^^^^^^\n+   |\n+   = help: add #![feature(main)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "9085563c99d6d5db3c0cd289a4f162e6f4c69cc7", "filename": "src/test/ui/feature-gate-match_beginning_vert.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-match_beginning_vert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-match_beginning_vert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-match_beginning_vert.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-match_beginning_vert.rs"}, {"sha": "88053adfafaa821d78d7a46ef7ce75ca5584e4d9", "filename": "src/test/ui/feature-gate-match_beginning_vert.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-match_beginning_vert.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-match_beginning_vert.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-match_beginning_vert.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,26 @@\n+error: Use of a '|' at the beginning of a match arm is experimental (see issue #44101)\n+  --> $DIR/feature-gate-match_beginning_vert.rs:24:9\n+   |\n+24 |         | A => println!(\"A\"),\n+   |         ^\n+   |\n+   = help: add #![feature(match_beginning_vert)] to the crate attributes to enable\n+\n+error: Use of a '|' at the beginning of a match arm is experimental (see issue #44101)\n+  --> $DIR/feature-gate-match_beginning_vert.rs:26:9\n+   |\n+26 |         | B | C => println!(\"BC!\"),\n+   |         ^\n+   |\n+   = help: add #![feature(match_beginning_vert)] to the crate attributes to enable\n+\n+error: Use of a '|' at the beginning of a match arm is experimental (see issue #44101)\n+  --> $DIR/feature-gate-match_beginning_vert.rs:28:9\n+   |\n+28 |         | _ => {},\n+   |         ^\n+   |\n+   = help: add #![feature(match_beginning_vert)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "4ee2c1e2936a85a2f168e053486dad28964a6481", "filename": "src/test/ui/feature-gate-match_default_bindings.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-match_default_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-match_default_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-match_default_bindings.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-match_default_bindings.rs"}, {"sha": "d86e8248f088d77829e00ae80bfb76693fdf07b7", "filename": "src/test/ui/feature-gate-match_default_bindings.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-match_default_bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-match_default_bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-match_default_bindings.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: non-reference pattern used to match a reference (see issue #42640)\n+  --> $DIR/feature-gate-match_default_bindings.rs:13:9\n+   |\n+13 |         Some(n) => {},\n+   |         ^^^^^^^ help: consider using a reference: `&Some(n)`\n+   |\n+   = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "0bf1e93d9aace4b40420d9c10b042f84ea7cf393", "filename": "src/test/ui/feature-gate-may-dangle.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-may-dangle.rs"}, {"sha": "e51723d058e4b8ec4838ecb72326c2ff3070edd1", "filename": "src/test/ui/feature-gate-may-dangle.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: may_dangle has unstable semantics and may be removed in the future (see issue #34761)\n+  --> $DIR/feature-gate-may-dangle.rs:18:6\n+   |\n+18 | impl<#[may_dangle] A> Drop for Pt<A> {\n+   |      ^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(dropck_eyepatch)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "ceb475e1192176c917e5a96679d16467d6a4e293", "filename": "src/test/ui/feature-gate-naked_functions.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-naked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-naked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-naked_functions.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-naked_functions\n-\n #[naked]\n //~^ the `#[naked]` attribute is an experimental feature\n fn naked() {}", "previous_filename": "src/test/compile-fail/gated-naked_functions.rs"}, {"sha": "9655982574ca33a1ae7b0d5e5455ee740df4754d", "filename": "src/test/ui/feature-gate-naked_functions.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-naked_functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-naked_functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-naked_functions.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,18 @@\n+error: the `#[naked]` attribute is an experimental feature (see issue #32408)\n+  --> $DIR/feature-gate-naked_functions.rs:11:1\n+   |\n+11 | #[naked]\n+   | ^^^^^^^^\n+   |\n+   = help: add #![feature(naked_functions)] to the crate attributes to enable\n+\n+error: the `#[naked]` attribute is an experimental feature (see issue #32408)\n+  --> $DIR/feature-gate-naked_functions.rs:15:1\n+   |\n+15 | #[naked]\n+   | ^^^^^^^^\n+   |\n+   = help: add #![feature(naked_functions)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1809564f5de1e826f1ac0386c95a9129ab77f5f6", "filename": "src/test/ui/feature-gate-needs-allocator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-needs-allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-needs-allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-needs-allocator.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-needs-allocator.rs"}, {"sha": "5124c10cb472a77c97547703f47689dd06e083fb", "filename": "src/test/ui/feature-gate-needs-allocator.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-needs-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-needs-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-needs-allocator.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: the `#[needs_allocator]` attribute is an experimental feature\n+  --> $DIR/feature-gate-needs-allocator.rs:11:1\n+   |\n+11 | #![needs_allocator] //~ ERROR the `#[needs_allocator]` attribute is\n+   | ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(allocator_internals)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "599e31341f2332a69a6c84c31c804698df838120", "filename": "src/test/ui/feature-gate-negate-unsigned.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-negate-unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-negate-unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-negate-unsigned.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-negate-unsigned.rs"}, {"sha": "d4311594517c70e68a5ed3765300f4901fbf90b1", "filename": "src/test/ui/feature-gate-negate-unsigned.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-negate-unsigned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-negate-unsigned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-negate-unsigned.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,14 @@\n+error[E0600]: cannot apply unary operator `-` to type `usize`\n+  --> $DIR/feature-gate-negate-unsigned.rs:20:23\n+   |\n+20 |     let _max: usize = -1;\n+   |                       ^^\n+\n+error[E0600]: cannot apply unary operator `-` to type `u8`\n+  --> $DIR/feature-gate-negate-unsigned.rs:24:14\n+   |\n+24 |     let _y = -x;\n+   |              ^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "11b9f412957eb52c2ef5c5da3241c942a13733bd", "filename": "src/test/ui/feature-gate-never_type.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-never_type.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -10,8 +10,6 @@\n \n // Test that ! errors when used in illegal positions with feature(never_type) disabled\n \n-// gate-test-never_type\n-\n trait Foo {\n     type Wub;\n }", "previous_filename": "src/test/compile-fail/never-disabled.rs"}, {"sha": "c242e613ead755105f4d7dc3093a534c8abdc705", "filename": "src/test/ui/feature-gate-never_type.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-never_type.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,42 @@\n+error: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:17:17\n+   |\n+17 | type Ma = (u32, !, i32); //~ ERROR type is experimental\n+   |                 ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:18:20\n+   |\n+18 | type Meeshka = Vec<!>; //~ ERROR type is experimental\n+   |                    ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:19:16\n+   |\n+19 | type Mow = &fn(!) -> !; //~ ERROR type is experimental\n+   |                ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:20:19\n+   |\n+20 | type Skwoz = &mut !; //~ ERROR type is experimental\n+   |                   ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error: The `!` type is experimental (see issue #35121)\n+  --> $DIR/feature-gate-never_type.rs:23:16\n+   |\n+23 |     type Wub = !; //~ ERROR type is experimental\n+   |                ^\n+   |\n+   = help: add #![feature(never_type)] to the crate attributes to enable\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "b663c136ee525bc9f54cac840bbe4d8a3c2d0ca2", "filename": "src/test/ui/feature-gate-no-debug-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-no-debug-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-no-debug-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-no-debug-2.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-no-debug-2.rs"}, {"sha": "231fc400115141aec410f447c6e078ea893b1254", "filename": "src/test/ui/feature-gate-no-debug-2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-no-debug-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-no-debug-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-no-debug-2.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,14 @@\n+error: use of deprecated attribute `no_debug`: the `#[no_debug]` attribute was an experimental feature that has been deprecated due to lack of demand. See https://github.com/rust-lang/rust/issues/29721\n+  --> $DIR/feature-gate-no-debug-2.rs:14:1\n+   |\n+14 | #[no_debug] //~ ERROR use of deprecated attribute `no_debug`\n+   | ^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: lint level defined here\n+  --> $DIR/feature-gate-no-debug-2.rs:11:9\n+   |\n+11 | #![deny(deprecated)]\n+   |         ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d21493de50a7fed484baf5aff3f234cf3df31b3a", "filename": "src/test/ui/feature-gate-no-debug.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-no-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-no-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-no-debug.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-no-debug.rs"}, {"sha": "83a8189c095b38604a75d80103daee07e28229b2", "filename": "src/test/ui/feature-gate-no-debug.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-no-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-no-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-no-debug.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: the `#[no_debug]` attribute was an experimental feature that has been deprecated due to lack of demand (see issue #29721)\n+  --> $DIR/feature-gate-no-debug.rs:13:1\n+   |\n+13 | #[no_debug] //~ ERROR the `#[no_debug]` attribute was\n+   | ^^^^^^^^^^^\n+   |\n+   = help: add #![feature(no_debug)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "0a55a8a78ce5a8f3f8478be689c484008399cd49", "filename": "src/test/ui/feature-gate-no_core.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-no_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-no_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-no_core.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-no_core\n-\n #![no_core] //~ ERROR no_core is experimental\n \n fn main() {}", "previous_filename": "src/test/compile-fail/gated-no-core.rs"}, {"sha": "02e0b176249682ca9c01db57f68081be014dece2", "filename": "src/test/ui/feature-gate-no_core.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-no_core.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-no_core.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-no_core.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: no_core is experimental (see issue #29639)\n+  --> $DIR/feature-gate-no_core.rs:11:1\n+   |\n+11 | #![no_core] //~ ERROR no_core is experimental\n+   | ^^^^^^^^^^^\n+   |\n+   = help: add #![feature(no_core)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "9e042c3a7d50e2313ad3bfd849133a35dfb552d1", "filename": "src/test/ui/feature-gate-non_ascii_idents.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-non_ascii_idents\n-\n extern crate core as b\u00e4z; //~ ERROR non-ascii idents\n \n use f\u00f6\u00f6::bar; //~ ERROR non-ascii idents", "previous_filename": "src/test/compile-fail/gated-non-ascii-idents.rs"}, {"sha": "df6ce6b61626844536056722ec43a3b63fa13056", "filename": "src/test/ui/feature-gate-non_ascii_idents.stderr", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,122 @@\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:11:1\n+   |\n+11 | extern crate core as b\u00e4z; //~ ERROR non-ascii idents\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:13:5\n+   |\n+13 | use f\u00f6\u00f6::bar; //~ ERROR non-ascii idents\n+   |     ^^^^^^^^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:15:1\n+   |\n+15 | / mod f\u00f6\u00f6 { //~ ERROR non-ascii idents\n+16 | |     pub fn bar() {}\n+17 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:19:1\n+   |\n+19 | / fn b\u00e4r( //~ ERROR non-ascii idents\n+20 | |     b\u00e4z: isize //~ ERROR non-ascii idents\n+21 | |     ) {\n+22 | |     let _\u00f6: isize; //~ ERROR non-ascii idents\n+...  |\n+26 | |     }\n+27 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:20:5\n+   |\n+20 |     b\u00e4z: isize //~ ERROR non-ascii idents\n+   |     ^^^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:22:9\n+   |\n+22 |     let _\u00f6: isize; //~ ERROR non-ascii idents\n+   |         ^^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:25:10\n+   |\n+25 |         (_\u00e4, _) => {} //~ ERROR non-ascii idents\n+   |          ^^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:29:1\n+   |\n+29 | / struct F\u00f6\u00f6 { //~ ERROR non-ascii idents\n+30 | |     f\u00f6\u00f6: isize //~ ERROR non-ascii idents\n+31 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:30:5\n+   |\n+30 |     f\u00f6\u00f6: isize //~ ERROR non-ascii idents\n+   |     ^^^^^^^^^^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:33:1\n+   |\n+33 | / enum B\u00e4r { //~ ERROR non-ascii idents\n+34 | |     B\u00e4z { //~ ERROR non-ascii idents\n+35 | |         q\u00fcx: isize //~ ERROR non-ascii idents\n+36 | |     }\n+37 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:34:5\n+   |\n+34 | /     B\u00e4z { //~ ERROR non-ascii idents\n+35 | |         q\u00fcx: isize //~ ERROR non-ascii idents\n+36 | |     }\n+   | |_____^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:35:9\n+   |\n+35 |         q\u00fcx: isize //~ ERROR non-ascii idents\n+   |         ^^^^^^^^^^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: non-ascii idents are not fully supported. (see issue #28979)\n+  --> $DIR/feature-gate-non_ascii_idents.rs:40:5\n+   |\n+40 |     fn q\u00fcx();  //~ ERROR non-ascii idents\n+   |     ^^^^^^^^^\n+   |\n+   = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n+\n+error: aborting due to 13 previous errors\n+"}, {"sha": "d2711084a4d48d06cb24a9c8a1b687a1c57ca42e", "filename": "src/test/ui/feature-gate-non_exhaustive.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-non_exhaustive.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-non_exhaustive.rs"}, {"sha": "775e65b90faaf768d7cbea74538418c20f457ded", "filename": "src/test/ui/feature-gate-non_exhaustive.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-non_exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-non_exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-non_exhaustive.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: non exhaustive is an experimental feature (see issue #44109)\n+  --> $DIR/feature-gate-non_exhaustive.rs:13:1\n+   |\n+13 | #[non_exhaustive] //~ERROR non exhaustive is an experimental feature (see issue #44109)\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(non_exhaustive)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "a837a7f213e881a646c149c62a68f2885b171c6a", "filename": "src/test/ui/feature-gate-omit-gdb-pretty-printer-section.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-omit-gdb-pretty-printer-section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-omit-gdb-pretty-printer-section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-omit-gdb-pretty-printer-section.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-omit-gdb-pretty-printer-section.rs"}, {"sha": "e50e1b4c0b5b1d978ce60f87944af719e71c20d9", "filename": "src/test/ui/feature-gate-omit-gdb-pretty-printer-section.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-omit-gdb-pretty-printer-section.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-omit-gdb-pretty-printer-section.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-omit-gdb-pretty-printer-section.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: the `#[omit_gdb_pretty_printer_section]` attribute is just used for the Rust test suite\n+  --> $DIR/feature-gate-omit-gdb-pretty-printer-section.rs:11:1\n+   |\n+11 | #[omit_gdb_pretty_printer_section] //~ ERROR the `#[omit_gdb_pretty_printer_section]` attribute is\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(omit_gdb_pretty_printer_section)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "5d32bba6a766cad91161e33872501c1c0da817f6", "filename": "src/test/ui/feature-gate-on-unimplemented.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-on-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-on-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-on-unimplemented.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-on-unimplemented.rs"}, {"sha": "06944a14736cff259cdfb7edc411faf490833b3f", "filename": "src/test/ui/feature-gate-on-unimplemented.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-on-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-on-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-on-unimplemented.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: the `#[rustc_on_unimplemented]` attribute is an experimental feature (see issue #29628)\n+  --> $DIR/feature-gate-on-unimplemented.rs:14:1\n+   |\n+14 | #[rustc_on_unimplemented = \"test error `{Self}` with `{Bar}`\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(on_unimplemented)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "4c5502cec18a851ff4c7d25cb6e07c17dab1f9ea", "filename": "src/test/ui/feature-gate-optin-builtin-traits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-optin-builtin-traits.rs"}, {"sha": "c5e9614c29ad7239257e864bf921f1380bf38297", "filename": "src/test/ui/feature-gate-optin-builtin-traits.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,26 @@\n+error: auto traits are experimental and possibly buggy (see issue #13231)\n+  --> $DIR/feature-gate-optin-builtin-traits.rs:20:1\n+   |\n+20 | auto trait AutoDummyTrait {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(optin_builtin_traits)] to the crate attributes to enable\n+\n+error: auto trait implementations are experimental and possibly buggy (see issue #13231)\n+  --> $DIR/feature-gate-optin-builtin-traits.rs:24:1\n+   |\n+24 | impl DummyTrait for .. {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(optin_builtin_traits)] to the crate attributes to enable\n+\n+error: negative trait bounds are not yet fully implemented; use marker types for now (see issue #13231)\n+  --> $DIR/feature-gate-optin-builtin-traits.rs:27:1\n+   |\n+27 | impl !DummyTrait for DummyStruct {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(optin_builtin_traits)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "d2aa4e59b5ba9615455f4feebf4ade3137fc9ada", "filename": "src/test/ui/feature-gate-overlapping_marker_traits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-overlapping_marker_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-overlapping_marker_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-overlapping_marker_traits.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-overlapping_marker_traits.rs"}, {"sha": "9028b14fcd7ad3a3dd5ccf54b67c8df534521e6e", "filename": "src/test/ui/feature-gate-overlapping_marker_traits.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-overlapping_marker_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-overlapping_marker_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-overlapping_marker_traits.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error[E0119]: conflicting implementations of trait `MyMarker`:\n+  --> $DIR/feature-gate-overlapping_marker_traits.rs:16:1\n+   |\n+15 | impl<T: Display> MyMarker for T {}\n+   | ---------------------------------- first implementation here\n+16 | impl<T: Debug> MyMarker for T {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error: aborting due to previous error\n+"}, {"sha": "e3478876763b4dcffc4eea579be871794ce181ba", "filename": "src/test/ui/feature-gate-placement-expr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-placement-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-placement-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-placement-expr.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-placement-expr.rs"}, {"sha": "fdb7b506711945c9fbe39e79978634fe7f7a9d5b", "filename": "src/test/ui/feature-gate-placement-expr.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-placement-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-placement-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-placement-expr.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: placement-in expression syntax is experimental and subject to change. (see issue #27779)\n+  --> $DIR/feature-gate-placement-expr.rs:24:13\n+   |\n+24 |     let x = HEAP <- 'c'; //~ ERROR placement-in expression syntax is experimental\n+   |             ^^^^^^^^^^^\n+   |\n+   = help: add #![feature(placement_in_syntax)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "3b5d7626ce309aab0247d5b32ce9c5cc4b8256cf", "filename": "src/test/ui/feature-gate-plugin.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-plugin.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-plugin.rs"}, {"sha": "b94d3299abcf75c8c76d7dcfd8490a195d485ddd", "filename": "src/test/ui/feature-gate-plugin.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-plugin.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+  --> $DIR/feature-gate-plugin.rs:13:1\n+   |\n+13 | #![plugin(foo)]\n+   | ^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(plugin)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "9cdebde7b7b9879946e83a4aaf2c274540cf6cda", "filename": "src/test/ui/feature-gate-plugin_registrar.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-plugin_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-plugin_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-plugin_registrar.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-plugin_registrar\n-\n // Test that `#[plugin_registrar]` attribute is gated by `plugin_registrar`\n // feature gate.\n ", "previous_filename": "src/test/compile-fail/gated-plugin_registrar.rs"}, {"sha": "3710239142af61e31abf4019223cf0443aa7b4d7", "filename": "src/test/ui/feature-gate-plugin_registrar.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-plugin_registrar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-plugin_registrar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-plugin_registrar.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+  --> $DIR/feature-gate-plugin_registrar.rs:16:1\n+   |\n+16 | pub fn registrar() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(plugin_registrar)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "8bc3df247ec12d8eb0fa98a107252acaaa8e6d7b", "filename": "src/test/ui/feature-gate-prelude_import.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-prelude_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-prelude_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-prelude_import.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-prelude_import.rs"}, {"sha": "df44dfff40b77a2b399673f09c89bbd46c838805", "filename": "src/test/ui/feature-gate-prelude_import.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-prelude_import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-prelude_import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-prelude_import.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: `#[prelude_import]` is for use by rustc only\n+  --> $DIR/feature-gate-prelude_import.rs:11:1\n+   |\n+11 | #[prelude_import] //~ ERROR `#[prelude_import]` is for use by rustc only\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(prelude_import)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "c6b2cb2eb07724bfcefacd6e1af446efe94cba5a", "filename": "src/test/ui/feature-gate-profiler-runtime.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-profiler-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-profiler-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-profiler-runtime.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-profiler-runtime.rs"}, {"sha": "c3165438cdbc83cca27871bafcaedcf07a648d1c", "filename": "src/test/ui/feature-gate-profiler-runtime.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-profiler-runtime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-profiler-runtime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-profiler-runtime.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: the `#[profiler_runtime]` attribute is used to identify the `profiler_builtins` crate which contains the profiler runtime and will never be stable\n+  --> $DIR/feature-gate-profiler-runtime.rs:11:1\n+   |\n+11 | #![profiler_runtime] //~ ERROR the `#[profiler_runtime]` attribute is\n+   | ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(profiler_runtime)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "429cec7ec90d05076456f82abf144c65f2624e0c", "filename": "src/test/ui/feature-gate-repr-simd.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-repr-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-repr-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-repr-simd.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-repr-simd.rs"}, {"sha": "a2ff06dd59ffe5eeb36e085819174b421259ed69", "filename": "src/test/ui/feature-gate-repr-simd.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-repr-simd.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-repr-simd.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-repr-simd.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: SIMD types are experimental and possibly buggy (see issue #27731)\n+  --> $DIR/feature-gate-repr-simd.rs:11:1\n+   |\n+11 | #[repr(simd)] //~ error: SIMD types are experimental\n+   | ^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(repr_simd)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "96fffa6cdd0dcee0625459da8023f981709789f7", "filename": "src/test/ui/feature-gate-repr128.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-repr128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-repr128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-repr128.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-repr128.rs"}, {"sha": "2d32eda3b3718ad924613f2f2e37e2e7fcd39f04", "filename": "src/test/ui/feature-gate-repr128.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-repr128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-repr128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-repr128.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,13 @@\n+error: repr with 128-bit type is unstable (see issue #35118)\n+  --> $DIR/feature-gate-repr128.rs:12:1\n+   |\n+12 | / enum A { //~ ERROR repr with 128-bit type is unstable\n+13 | |     //~| HELP: add #![feature(repr128)]\n+14 | |     A(u64)\n+15 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(repr128)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "9591d367a2d191ef99a2e92476c602dc28184a10", "filename": "src/test/ui/feature-gate-repr_align.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-repr_align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-repr_align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-repr_align.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-repr_align.rs"}, {"sha": "16fdc135a5fa839880d15e1d607423d469e3384a", "filename": "src/test/ui/feature-gate-repr_align.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-repr_align.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-repr_align.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-repr_align.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: the struct `#[repr(align(u16))]` attribute is experimental (see issue #33626)\n+  --> $DIR/feature-gate-repr_align.rs:12:1\n+   |\n+12 | #[repr(align(64))] //~ error: the struct `#[repr(align(u16))]` attribute is experimental\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(repr_align)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "8cfd3e020c69a47da7d3eeb1cf1eb8be261a62fa", "filename": "src/test/ui/feature-gate-rustc-attrs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-rustc-attrs.rs"}, {"sha": "c818b57ef1219e56e81338f147f0af7b63d28543", "filename": "src/test/ui/feature-gate-rustc-attrs.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,26 @@\n+error: the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable (see issue #29642)\n+  --> $DIR/feature-gate-rustc-attrs.rs:15:1\n+   |\n+15 | #[rustc_variance] //~ ERROR the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n+\n+error: the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable (see issue #29642)\n+  --> $DIR/feature-gate-rustc-attrs.rs:16:1\n+   |\n+16 | #[rustc_error] //~ ERROR the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n+   | ^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n+\n+error: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics (see issue #29642)\n+  --> $DIR/feature-gate-rustc-attrs.rs:17:1\n+   |\n+17 | #[rustc_foo]\n+   | ^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "bbdf248780f3397c473f9e59d267e7e3590ba8ce", "filename": "src/test/ui/feature-gate-rustc-diagnostic-macros.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-rustc-diagnostic-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-rustc-diagnostic-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-rustc-diagnostic-macros.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-rustc-diagnostic-macros.rs"}, {"sha": "843879036ed4aa11cf2479ea90411d5f6d1456e0", "filename": "src/test/ui/feature-gate-rustc-diagnostic-macros.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-rustc-diagnostic-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-rustc-diagnostic-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-rustc-diagnostic-macros.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,20 @@\n+error: cannot find macro `__build_diagnostic_array!` in this scope\n+  --> $DIR/feature-gate-rustc-diagnostic-macros.rs:22:1\n+   |\n+22 | __build_diagnostic_array!(DIAGNOSTICS);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: cannot find macro `__register_diagnostic!` in this scope\n+  --> $DIR/feature-gate-rustc-diagnostic-macros.rs:14:1\n+   |\n+14 | __register_diagnostic!(E0001);\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: cannot find macro `__diagnostic_used!` in this scope\n+  --> $DIR/feature-gate-rustc-diagnostic-macros.rs:18:5\n+   |\n+18 |     __diagnostic_used!(E0001);\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "38a3e15fd7eb36317e232116ebacfcfa49468964", "filename": "src/test/ui/feature-gate-rustc_const_unstable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-rustc_const_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-rustc_const_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-rustc_const_unstable.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-rustc_const_unstable.rs"}, {"sha": "c32abb8b85748ee674af334661a31c02ceab1024", "filename": "src/test/ui/feature-gate-rustc_const_unstable.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-rustc_const_unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-rustc_const_unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-rustc_const_unstable.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: the `#[rustc_const_unstable]` attribute is an internal feature\n+  --> $DIR/feature-gate-rustc_const_unstable.rs:18:1\n+   |\n+18 | #[rustc_const_unstable(feature=\"fzzzzzt\")] //~ERROR internal feature\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(rustc_const_unstable)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "a18641d824691534bd1934a1cef8969ef724b0dc", "filename": "src/test/ui/feature-gate-sanitizer-runtime.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-sanitizer-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-sanitizer-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-sanitizer-runtime.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-sanitizer-runtime.rs"}, {"sha": "b9a43f8098d2da27559b2e86024c95d519759592", "filename": "src/test/ui/feature-gate-sanitizer-runtime.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-sanitizer-runtime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-sanitizer-runtime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-sanitizer-runtime.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: the `#[sanitizer_runtime]` attribute is used to identify crates that contain the runtime of a sanitizer and will never be stable\n+  --> $DIR/feature-gate-sanitizer-runtime.rs:11:1\n+   |\n+11 | #![sanitizer_runtime] //~ ERROR the `#[sanitizer_runtime]` attribute is\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(sanitizer_runtime)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "31c055f229c3e7a66bdc216563393f6420548ef1", "filename": "src/test/ui/feature-gate-simd-ffi.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-simd-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-simd-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-simd-ffi.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-simd-ffi.rs"}, {"sha": "fa47e1a2903ccde8dd4cb005351602eeed5dbb18", "filename": "src/test/ui/feature-gate-simd-ffi.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-simd-ffi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-simd-ffi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-simd-ffi.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,18 @@\n+error: use of SIMD type `LocalSimd` in FFI is highly experimental and may result in invalid code\n+  --> $DIR/feature-gate-simd-ffi.rs:20:17\n+   |\n+20 |     fn baz() -> LocalSimd; //~ ERROR use of SIMD type\n+   |                 ^^^^^^^^^\n+   |\n+   = help: add #![feature(simd_ffi)] to the crate attributes to enable\n+\n+error: use of SIMD type `LocalSimd` in FFI is highly experimental and may result in invalid code\n+  --> $DIR/feature-gate-simd-ffi.rs:21:15\n+   |\n+21 |     fn qux(x: LocalSimd); //~ ERROR use of SIMD type\n+   |               ^^^^^^^^^\n+   |\n+   = help: add #![feature(simd_ffi)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "025eaca5533362321cbf767b0ef7f7af67305c54", "filename": "src/test/ui/feature-gate-simd.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-simd.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-simd.rs"}, {"sha": "b3225d580bf0520953123fc41b80163987179d8d", "filename": "src/test/ui/feature-gate-simd.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-simd.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-simd.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-simd.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: SIMD types are experimental and possibly buggy (see issue #27731)\n+  --> $DIR/feature-gate-simd.rs:14:1\n+   |\n+14 | #[repr(simd)] //~ ERROR SIMD types are experimental\n+   | ^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(repr_simd)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "625cb2d351553709b9c7dac7379c2b4ec7ebdb88", "filename": "src/test/ui/feature-gate-slice-patterns.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-slice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-slice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-slice-patterns.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-slice-patterns.rs"}, {"sha": "e5ba318b3365f79a99273d9885e584aa6aa0da94", "filename": "src/test/ui/feature-gate-slice-patterns.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-slice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-slice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-slice-patterns.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: slice pattern syntax is experimental (see issue #23121)\n+  --> $DIR/feature-gate-slice-patterns.rs:16:9\n+   |\n+16 |         [1, 2, xs..] => {} //~ ERROR slice pattern syntax is experimental\n+   |         ^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(slice_patterns)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "014a0aaaf68e67b0bb0fb93c4dbc9c652c812042", "filename": "src/test/ui/feature-gate-staged_api.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-staged_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-staged_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-staged_api.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-staged_api.rs"}, {"sha": "30593d45760ef7faf0982cbd7a55c3501ff907f5", "filename": "src/test/ui/feature-gate-staged_api.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-staged_api.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-staged_api.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-staged_api.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,14 @@\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/feature-gate-staged_api.rs:11:1\n+   |\n+11 | #![stable(feature = \"a\", since = \"b\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/feature-gate-staged_api.rs:18:1\n+   |\n+18 | #[stable(feature = \"a\", since = \"b\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7a0924d8adf1ba8fce115cfc36bbfb917e25f826", "filename": "src/test/ui/feature-gate-start.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-start.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-start.rs"}, {"sha": "b36fae2aacfda6963194f78cf3f6ab177f97ef72", "filename": "src/test/ui/feature-gate-start.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-start.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-start.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-start.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: a #[start] function is an experimental feature whose signature may change over time (see issue #29633)\n+  --> $DIR/feature-gate-start.rs:12:1\n+   |\n+12 | fn foo() {} //~ ERROR: a #[start] function is an experimental feature\n+   | ^^^^^^^^^^^\n+   |\n+   = help: add #![feature(start)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "0d13a4937c468ccb397a1e8cefe68687e4709323", "filename": "src/test/ui/feature-gate-static-nobundle.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-static-nobundle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-static-nobundle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-static-nobundle.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-static-nobundle.rs"}, {"sha": "052516fad7691ac69f9f5b6ab5abe914c1f90296", "filename": "src/test/ui/feature-gate-static-nobundle.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-static-nobundle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-static-nobundle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-static-nobundle.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: kind=\"static-nobundle\" is feature gated (see issue #37403)\n+  --> $DIR/feature-gate-static-nobundle.rs:11:1\n+   |\n+11 | #[link(name=\"foo\", kind=\"static-nobundle\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(static_nobundle)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "831d8862e109ce36b7baeeeec5a7dd00943e028e", "filename": "src/test/ui/feature-gate-stmt_expr_attributes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-stmt_expr_attributes.rs"}, {"sha": "80910594d1c065b1a53a58e0cf2b5cf423927ffc", "filename": "src/test/ui/feature-gate-stmt_expr_attributes.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: attributes on non-item statements and expressions are experimental. (see issue #15701)\n+  --> $DIR/feature-gate-stmt_expr_attributes.rs:11:16\n+   |\n+11 | const X: i32 = #[allow(dead_code)] 8;\n+   |                ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "da2e41a0f5e422347b8643fa42b683f2f517a25b", "filename": "src/test/ui/feature-gate-target_feature.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-target_feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-target_feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-target_feature.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-target_feature\n-\n #[target_feature = \"+sse2\"]\n //~^ the `#[target_feature]` attribute is an experimental feature\n fn foo() {}", "previous_filename": "src/test/compile-fail/gated-target_feature.rs"}, {"sha": "8c89eabf753889084682b86192bd66c150eb9431", "filename": "src/test/ui/feature-gate-target_feature.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-target_feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-target_feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-target_feature.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: the `#[target_feature]` attribute is an experimental feature\n+  --> $DIR/feature-gate-target_feature.rs:11:1\n+   |\n+11 | #[target_feature = \"+sse2\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(target_feature)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "f355c6562c8b0a2e18cd8babd32c44c608297ff2", "filename": "src/test/ui/feature-gate-thread_local.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-thread_local.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-thread_local\n-\n // Test that `#[thread_local]` attribute is gated by `thread_local`\n // feature gate.\n //", "previous_filename": "src/test/compile-fail/gated-thread-local.rs"}, {"sha": "2608018528ce74a6e849e014294885e3b5873f4d", "filename": "src/test/ui/feature-gate-thread_local.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-thread_local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-thread_local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-thread_local.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: `#[thread_local]` is an experimental feature, and does not currently handle destructors. There is no corresponding `#[task_local]` mapping to the task model (see issue #29594)\n+  --> $DIR/feature-gate-thread_local.rs:18:1\n+   |\n+18 | #[thread_local] //~ ERROR `#[thread_local]` is an experimental feature\n+   | ^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(thread_local)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "367ee6df50dfe9b7ab838b8cb3039f36d896e974", "filename": "src/test/ui/feature-gate-trace_macros.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-trace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-trace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-trace_macros.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-trace_macros\n-\n fn main() {\n     trace_macros!(true); //~ ERROR: `trace_macros` is not stable\n }", "previous_filename": "src/test/compile-fail/gated-trace_macros.rs"}, {"sha": "aca74099b7d99414c7d9f5c3857b197535501590", "filename": "src/test/ui/feature-gate-trace_macros.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-trace_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-trace_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-trace_macros.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: `trace_macros` is not stable enough for use and is subject to change (see issue #29598)\n+  --> $DIR/feature-gate-trace_macros.rs:12:5\n+   |\n+12 |     trace_macros!(true); //~ ERROR: `trace_macros` is not stable\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(trace_macros)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "d3c07d653f40ce548d57cf994321f87f294896ad", "filename": "src/test/ui/feature-gate-type_ascription.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-type_ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-type_ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-type_ascription.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-type_ascription\n-\n // Type ascription is feature gated\n \n fn main() {", "previous_filename": "src/test/compile-fail/type-ascription-feature-gate.rs"}, {"sha": "d2a3ee2cf8f9c7506b203e4b86eb7c435ad9e48d", "filename": "src/test/ui/feature-gate-type_ascription.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-type_ascription.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-type_ascription.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-type_ascription.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: type ascription is experimental (see issue #23416)\n+  --> $DIR/feature-gate-type_ascription.rs:14:13\n+   |\n+14 |     let a = 10: u8; //~ ERROR type ascription is experimental\n+   |             ^^^^^^\n+   |\n+   = help: add #![feature(type_ascription)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "5df309321d3108a956131d8494dfc1d1a1ccd1f4", "filename": "src/test/ui/feature-gate-unboxed-closures-manual-impls.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-manual-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-manual-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-manual-impls.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-unboxed-closures-manual-impls.rs"}, {"sha": "280fc12f1a642c1319d0fa2212adbd9378a3630e", "filename": "src/test/ui/feature-gate-unboxed-closures-manual-impls.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-manual-impls.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,34 @@\n+error: rust-call ABI is subject to change (see issue #29625)\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:20:5\n+   |\n+20 |     extern \"rust-call\" fn call(self, args: ()) -> () {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n+\n+error: rust-call ABI is subject to change (see issue #29625)\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:25:5\n+   |\n+25 |     extern \"rust-call\" fn call_once(self, args: ()) -> () {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n+\n+error: rust-call ABI is subject to change (see issue #29625)\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:30:5\n+   |\n+30 |     extern \"rust-call\" fn call_mut(&self, args: ()) -> () {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n+\n+error: rust-call ABI is subject to change (see issue #29625)\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:35:5\n+   |\n+35 |     extern \"rust-call\" fn call_once(&self, args: ()) -> () {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "253d1633b1c4eb95c3e12036bf3312a3cbcff354", "filename": "src/test/ui/feature-gate-unboxed-closures-method-calls.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-method-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-method-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-method-calls.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-unboxed-closures-method-calls.rs"}, {"sha": "1167bf0a6966a48b3fb5a3c4b418196a0890ebe4", "filename": "src/test/ui/feature-gate-unboxed-closures-method-calls.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-method-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-method-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-method-calls.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,26 @@\n+error: use of unstable library feature 'fn_traits' (see issue #29625)\n+  --> $DIR/feature-gate-unboxed-closures-method-calls.rs:14:7\n+   |\n+14 |     f.call(()); //~ ERROR use of unstable library feature 'fn_traits'\n+   |       ^^^^\n+   |\n+   = help: add #![feature(fn_traits)] to the crate attributes to enable\n+\n+error: use of unstable library feature 'fn_traits' (see issue #29625)\n+  --> $DIR/feature-gate-unboxed-closures-method-calls.rs:15:7\n+   |\n+15 |     f.call_mut(()); //~ ERROR use of unstable library feature 'fn_traits'\n+   |       ^^^^^^^^\n+   |\n+   = help: add #![feature(fn_traits)] to the crate attributes to enable\n+\n+error: use of unstable library feature 'fn_traits' (see issue #29625)\n+  --> $DIR/feature-gate-unboxed-closures-method-calls.rs:16:7\n+   |\n+16 |     f.call_once(()); //~ ERROR use of unstable library feature 'fn_traits'\n+   |       ^^^^^^^^^\n+   |\n+   = help: add #![feature(fn_traits)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "902b3c1774c1d638c1a39435ffef5ee3f083fea4", "filename": "src/test/ui/feature-gate-unboxed-closures-ufcs-calls.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-ufcs-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-ufcs-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-ufcs-calls.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-unboxed-closures-ufcs-calls.rs"}, {"sha": "7eb491cebfeb990e45b56a86dda0bc07341a40b3", "filename": "src/test/ui/feature-gate-unboxed-closures-ufcs-calls.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-ufcs-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-ufcs-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-ufcs-calls.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,26 @@\n+error: use of unstable library feature 'fn_traits' (see issue #29625)\n+  --> $DIR/feature-gate-unboxed-closures-ufcs-calls.rs:14:5\n+   |\n+14 |     Fn::call(&f, ()); //~ ERROR use of unstable library feature 'fn_traits'\n+   |     ^^^^^^^^\n+   |\n+   = help: add #![feature(fn_traits)] to the crate attributes to enable\n+\n+error: use of unstable library feature 'fn_traits' (see issue #29625)\n+  --> $DIR/feature-gate-unboxed-closures-ufcs-calls.rs:15:5\n+   |\n+15 |     FnMut::call_mut(&mut f, ()); //~ ERROR use of unstable library feature 'fn_traits'\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(fn_traits)] to the crate attributes to enable\n+\n+error: use of unstable library feature 'fn_traits' (see issue #29625)\n+  --> $DIR/feature-gate-unboxed-closures-ufcs-calls.rs:16:5\n+   |\n+16 |     FnOnce::call_once(f, ()); //~ ERROR use of unstable library feature 'fn_traits'\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(fn_traits)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "4005021774443ec8170e42e85e8c48d5deefbbfb", "filename": "src/test/ui/feature-gate-unboxed-closures.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-unboxed-closures.rs"}, {"sha": "b79165147e590681031b7a6c3187087801be951c", "filename": "src/test/ui/feature-gate-unboxed-closures.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,12 @@\n+error: rust-call ABI is subject to change (see issue #29625)\n+  --> $DIR/feature-gate-unboxed-closures.rs:16:5\n+   |\n+16 | /     extern \"rust-call\" fn call_once(self, (a, b): (u32, u32)) -> u32 {\n+17 | |         a + b\n+18 | |     }\n+   | |_____^\n+   |\n+   = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "9da50c5c8771985bbe9cd9ef3f005722a2e403b7", "filename": "src/test/ui/feature-gate-underscore-lifetimes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-underscore-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-underscore-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-underscore-lifetimes.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-underscore-lifetimes.rs"}, {"sha": "875b958aa8804ed0f74b2c67b1ebfda3ff10b234", "filename": "src/test/ui/feature-gate-underscore-lifetimes.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-underscore-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-underscore-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-underscore-lifetimes.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: underscore lifetimes are unstable (see issue #44524)\n+  --> $DIR/feature-gate-underscore-lifetimes.rs:13:23\n+   |\n+13 | fn foo(x: &u8) -> Foo<'_> { //~ ERROR underscore lifetimes are unstable\n+   |                       ^^\n+   |\n+   = help: add #![feature(underscore_lifetimes)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "e5bdf3a42eb3e6b0d1ad5a170830d258833125aa", "filename": "src/test/ui/feature-gate-universal.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-universal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-universal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-universal.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/impl-trait/feature-gate-universal.rs"}, {"sha": "7f889f9622487b9cde974683abc3f1c3d683124a", "filename": "src/test/ui/feature-gate-universal.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-universal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-universal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-universal.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: `impl Trait` in argument position is experimental (see issue #34511)\n+  --> $DIR/feature-gate-universal.rs:13:11\n+   |\n+13 | fn foo(x: impl std::fmt::Debug) { print!(\"{:?}\", x); }\n+   |           ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(universal_impl_trait)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "4ddde01126363524b22040d662bd5d792d28a411", "filename": "src/test/ui/feature-gate-unsized_tuple_coercion.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unsized_tuple_coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unsized_tuple_coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unsized_tuple_coercion.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-unsized_tuple_coercion.rs"}, {"sha": "f166b10613a2670fb354dbe5bf559093fb01ffae", "filename": "src/test/ui/feature-gate-unsized_tuple_coercion.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unsized_tuple_coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unsized_tuple_coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unsized_tuple_coercion.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: Unsized tuple coercion is not stable enough for use and is subject to change (see issue #42877)\n+  --> $DIR/feature-gate-unsized_tuple_coercion.rs:12:24\n+   |\n+12 |     let _ : &(Send,) = &((),);\n+   |                        ^^^^^^\n+   |\n+   = help: add #![feature(unsized_tuple_coercion)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "6533fddd947141c2f91f83037f257e46bc7550fa", "filename": "src/test/ui/feature-gate-untagged_unions.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-untagged_unions\n-\n union U1 { // OK\n     a: u8,\n }", "previous_filename": "src/test/compile-fail/union/union-feature-gate.rs"}, {"sha": "26b698912bc95eae650633169341256634329fc5", "filename": "src/test/ui/feature-gate-untagged_unions.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,32 @@\n+error: unions with non-`Copy` fields are unstable (see issue #32836)\n+  --> $DIR/feature-gate-untagged_unions.rs:19:1\n+   |\n+19 | / union U3 { //~ ERROR unions with non-`Copy` fields are unstable\n+20 | |     a: String,\n+21 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(untagged_unions)] to the crate attributes to enable\n+\n+error: unions with non-`Copy` fields are unstable (see issue #32836)\n+  --> $DIR/feature-gate-untagged_unions.rs:23:1\n+   |\n+23 | / union U4<T> { //~ ERROR unions with non-`Copy` fields are unstable\n+24 | |     a: T,\n+25 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(untagged_unions)] to the crate attributes to enable\n+\n+error: unions with `Drop` implementations are unstable (see issue #32836)\n+  --> $DIR/feature-gate-untagged_unions.rs:27:1\n+   |\n+27 | / union U5 { //~ ERROR unions with `Drop` implementations are unstable\n+28 | |     a: u8,\n+29 | | }\n+   | |_^\n+   |\n+   = help: add #![feature(untagged_unions)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "c8f9cd943cdaaf9ab61d41e2b71cc1faefbef3e0", "filename": "src/test/ui/feature-gate-unwind-attributes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unwind-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unwind-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unwind-attributes.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-unwind-attributes.rs"}, {"sha": "02d8bf914ebf8325f1710e57b0a3b2acf391a361", "filename": "src/test/ui/feature-gate-unwind-attributes.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unwind-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-unwind-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unwind-attributes.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: #[unwind] is experimental\n+  --> $DIR/feature-gate-unwind-attributes.rs:21:5\n+   |\n+21 |     #[unwind] //~ ERROR #[unwind] is experimental\n+   |     ^^^^^^^^^\n+   |\n+   = help: add #![feature(unwind_attributes)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "56413a999d7f78e23894ed0d0fa9aa1665660b3a", "filename": "src/test/ui/feature-gate-use_nested_groups.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-use_nested_groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-use_nested_groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-use_nested_groups.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-use_nested_groups.rs"}, {"sha": "79f1d1a168f064e35d6a2d64a7d5d7f14bb783b1", "filename": "src/test/ui/feature-gate-use_nested_groups.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-use_nested_groups.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-use_nested_groups.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-use_nested_groups.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,26 @@\n+error: nested groups in `use` are experimental (see issue #44494)\n+  --> $DIR/feature-gate-use_nested_groups.rs:27:12\n+   |\n+27 | use a::{B, d::{*, g::H}};  //~ ERROR glob imports in `use` groups are experimental\n+   |            ^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(use_nested_groups)] to the crate attributes to enable\n+\n+error: glob imports in `use` groups are experimental (see issue #44494)\n+  --> $DIR/feature-gate-use_nested_groups.rs:27:16\n+   |\n+27 | use a::{B, d::{*, g::H}};  //~ ERROR glob imports in `use` groups are experimental\n+   |                ^\n+   |\n+   = help: add #![feature(use_nested_groups)] to the crate attributes to enable\n+\n+error: paths in `use` groups are experimental (see issue #44494)\n+  --> $DIR/feature-gate-use_nested_groups.rs:27:19\n+   |\n+27 | use a::{B, d::{*, g::H}};  //~ ERROR glob imports in `use` groups are experimental\n+   |                   ^^^^\n+   |\n+   = help: add #![feature(use_nested_groups)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "68679d7dac896a22a04f855fdc6ca7aea911cf22", "filename": "src/test/ui/feature-gate-used.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-used.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-used.rs"}, {"sha": "228cf12a08b4dc4a178b7359a713eee8e7fb6d39", "filename": "src/test/ui/feature-gate-used.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-used.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: the `#[used]` attribute is an experimental feature (see issue #40289)\n+  --> $DIR/feature-gate-used.rs:11:1\n+   |\n+11 | #[used]\n+   | ^^^^^^^\n+   |\n+   = help: add #![feature(used)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "a010ebb3551d0f7a13c9db60b046a1eb0a841625", "filename": "src/test/ui/feature-gate-wasm_import_memory.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_memory.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate-wasm_import_memory.rs"}, {"sha": "c0486d0d5f57f5813cf68f781117a2feac64e09d", "filename": "src/test/ui/feature-gate-wasm_import_memory.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_memory.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_memory.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_memory.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: wasm_import_memory attribute is currently unstable\n+  --> $DIR/feature-gate-wasm_import_memory.rs:11:1\n+   |\n+11 | #![wasm_import_memory] //~ ERROR: currently unstable\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(wasm_import_memory)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "a34f98f03559f6b5b5bad8b39298f3f5216a6a00", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-bench.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-bench.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-bench.rs"}, {"sha": "f7d5473f443fa5a442658602aec9c438f3dbe29e", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-bench.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-bench.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-bench.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-bench.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,4 @@\n+error[E0601]: main function not found\n+\n+error: aborting due to previous error\n+"}, {"sha": "ab2fe02bb147667a75677d1846e049b5d29b9f8f", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-builtin-attrs.rs"}, {"sha": "0e72442143b0747a6ad2ea3690ec64015ddd4ec2", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "added", "additions": 1354, "deletions": 0, "changes": 1354, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,1354 @@\n+warning: macro_escape is a deprecated synonym for macro_use\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:532:1\n+    |\n+532 | #[macro_escape]\n+    | ^^^^^^^^^^^^^^^\n+\n+warning: macro_escape is a deprecated synonym for macro_use\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:535:17\n+    |\n+535 |     mod inner { #![macro_escape] }\n+    |                 ^^^^^^^^^^^^^^^^\n+    |\n+    = help: consider an outer attribute, #[macro_use] mod ...\n+\n+warning: `#[must_use]` on functions is experimental (see issue #43302)\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:682:5\n+    |\n+682 |     #[must_use = \"1400\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = help: add #![feature(fn_must_use)] to the crate attributes to enable\n+\n+warning: unknown lint: `x5400`\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:49:33\n+   |\n+49 | #![warn                        (x5400)] //~ WARN unknown lint: `x5400`\n+   |                                 ^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:44:28\n+   |\n+44 | #![warn(unused_attributes, unknown_lints)]\n+   |                            ^^^^^^^^^^^^^\n+\n+warning: unknown lint: `x5300`\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:50:33\n+   |\n+50 | #![allow                       (x5300)] //~ WARN unknown lint: `x5300`\n+   |                                 ^^^^^\n+\n+warning: unknown lint: `x5200`\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:51:33\n+   |\n+51 | #![forbid                      (x5200)] //~ WARN unknown lint: `x5200`\n+   |                                 ^^^^^\n+\n+warning: unknown lint: `x5100`\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:52:33\n+   |\n+52 | #![deny                        (x5100)] //~ WARN unknown lint: `x5100`\n+   |                                 ^^^^^\n+\n+warning: unknown lint: `x5400`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:114:8\n+    |\n+114 | #[warn(x5400)]\n+    |        ^^^^^\n+\n+warning: unknown lint: `x5400`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:117:25\n+    |\n+117 |     mod inner { #![warn(x5400)] }\n+    |                         ^^^^^\n+\n+warning: unknown lint: `x5400`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:120:12\n+    |\n+120 |     #[warn(x5400)] fn f() { }\n+    |            ^^^^^\n+\n+warning: unknown lint: `x5400`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:123:12\n+    |\n+123 |     #[warn(x5400)] struct S;\n+    |            ^^^^^\n+\n+warning: unknown lint: `x5400`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:126:12\n+    |\n+126 |     #[warn(x5400)] type T = S;\n+    |            ^^^^^\n+\n+warning: unknown lint: `x5400`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:129:12\n+    |\n+129 |     #[warn(x5400)] impl S { }\n+    |            ^^^^^\n+\n+warning: unknown lint: `x5300`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:133:9\n+    |\n+133 | #[allow(x5300)]\n+    |         ^^^^^\n+\n+warning: unknown lint: `x5300`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:136:26\n+    |\n+136 |     mod inner { #![allow(x5300)] }\n+    |                          ^^^^^\n+\n+warning: unknown lint: `x5300`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:139:13\n+    |\n+139 |     #[allow(x5300)] fn f() { }\n+    |             ^^^^^\n+\n+warning: unknown lint: `x5300`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:142:13\n+    |\n+142 |     #[allow(x5300)] struct S;\n+    |             ^^^^^\n+\n+warning: unknown lint: `x5300`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:145:13\n+    |\n+145 |     #[allow(x5300)] type T = S;\n+    |             ^^^^^\n+\n+warning: unknown lint: `x5300`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:148:13\n+    |\n+148 |     #[allow(x5300)] impl S { }\n+    |             ^^^^^\n+\n+warning: unknown lint: `x5200`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:152:10\n+    |\n+152 | #[forbid(x5200)]\n+    |          ^^^^^\n+\n+warning: unknown lint: `x5200`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:155:27\n+    |\n+155 |     mod inner { #![forbid(x5200)] }\n+    |                           ^^^^^\n+\n+warning: unknown lint: `x5200`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:158:14\n+    |\n+158 |     #[forbid(x5200)] fn f() { }\n+    |              ^^^^^\n+\n+warning: unknown lint: `x5200`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:161:14\n+    |\n+161 |     #[forbid(x5200)] struct S;\n+    |              ^^^^^\n+\n+warning: unknown lint: `x5200`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:164:14\n+    |\n+164 |     #[forbid(x5200)] type T = S;\n+    |              ^^^^^\n+\n+warning: unknown lint: `x5200`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:167:14\n+    |\n+167 |     #[forbid(x5200)] impl S { }\n+    |              ^^^^^\n+\n+warning: unknown lint: `x5100`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:171:8\n+    |\n+171 | #[deny(x5100)]\n+    |        ^^^^^\n+\n+warning: unknown lint: `x5100`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:174:25\n+    |\n+174 |     mod inner { #![deny(x5100)] }\n+    |                         ^^^^^\n+\n+warning: unknown lint: `x5100`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:177:12\n+    |\n+177 |     #[deny(x5100)] fn f() { }\n+    |            ^^^^^\n+\n+warning: unknown lint: `x5100`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:180:12\n+    |\n+180 |     #[deny(x5100)] struct S;\n+    |            ^^^^^\n+\n+warning: unknown lint: `x5100`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:183:12\n+    |\n+183 |     #[deny(x5100)] type T = S;\n+    |            ^^^^^\n+\n+warning: unknown lint: `x5100`\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:186:12\n+    |\n+186 |     #[deny(x5100)] impl S { }\n+    |            ^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:193:17\n+    |\n+193 |     mod inner { #![macro_reexport=\"5000\"] }\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+note: lint level defined here\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:44:9\n+    |\n+44  | #![warn(unused_attributes, unknown_lints)]\n+    |         ^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:196:5\n+    |\n+196 |     #[macro_reexport = \"5000\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:199:5\n+    |\n+199 |     #[macro_reexport = \"5000\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:202:5\n+    |\n+202 |     #[macro_reexport = \"5000\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:205:5\n+    |\n+205 |     #[macro_reexport = \"5000\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:190:1\n+    |\n+190 | #[macro_reexport = \"5000\"]\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:213:5\n+    |\n+213 |     #[macro_use] fn f() { }\n+    |     ^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:216:5\n+    |\n+216 |     #[macro_use] struct S;\n+    |     ^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:219:5\n+    |\n+219 |     #[macro_use] type T = S;\n+    |     ^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:222:5\n+    |\n+222 |     #[macro_use] impl S { }\n+    |     ^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:229:17\n+    |\n+229 |     mod inner { #![macro_export=\"4800\"] }\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:232:5\n+    |\n+232 |     #[macro_export = \"4800\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:235:5\n+    |\n+235 |     #[macro_export = \"4800\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:238:5\n+    |\n+238 |     #[macro_export = \"4800\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:241:5\n+    |\n+241 |     #[macro_export = \"4800\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:226:1\n+    |\n+226 | #[macro_export = \"4800\"]\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:248:17\n+    |\n+248 |     mod inner { #![plugin_registrar=\"4700\"] }\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:253:5\n+    |\n+253 |     #[plugin_registrar = \"4700\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:256:5\n+    |\n+256 |     #[plugin_registrar = \"4700\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:259:5\n+    |\n+259 |     #[plugin_registrar = \"4700\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:245:1\n+    |\n+245 | #[plugin_registrar = \"4700\"]\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:266:17\n+    |\n+266 |     mod inner { #![main=\"4300\"] }\n+    |                 ^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:271:5\n+    |\n+271 |     #[main = \"4400\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:274:5\n+    |\n+274 |     #[main = \"4400\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:277:5\n+    |\n+277 |     #[main = \"4400\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:263:1\n+    |\n+263 | #[main = \"4400\"]\n+    | ^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:284:17\n+    |\n+284 |     mod inner { #![start=\"4300\"] }\n+    |                 ^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:289:5\n+    |\n+289 |     #[start = \"4300\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:292:5\n+    |\n+292 |     #[start = \"4300\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:295:5\n+    |\n+295 |     #[start = \"4300\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:281:1\n+    |\n+281 | #[start = \"4300\"]\n+    | ^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:334:17\n+    |\n+334 |     mod inner { #![simd=\"4000\"] }\n+    |                 ^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:337:5\n+    |\n+337 |     #[simd = \"4000\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:342:5\n+    |\n+342 |     #[simd = \"4000\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:345:5\n+    |\n+345 |     #[simd = \"4000\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:331:1\n+    |\n+331 | #[simd = \"4000\"]\n+    | ^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:352:17\n+    |\n+352 |     mod inner { #![repr=\"3900\"] }\n+    |                 ^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:355:5\n+    |\n+355 |     #[repr = \"3900\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:360:5\n+    |\n+360 |     #[repr = \"3900\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:363:5\n+    |\n+363 |     #[repr = \"3900\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:349:1\n+    |\n+349 | #[repr = \"3900\"]\n+    | ^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:371:5\n+    |\n+371 |     #[path = \"3800\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:374:5\n+    |\n+374 |     #[path = \"3800\"]  struct S;\n+    |     ^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:377:5\n+    |\n+377 |     #[path = \"3800\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:380:5\n+    |\n+380 |     #[path = \"3800\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:387:17\n+    |\n+387 |     mod inner { #![abi=\"3700\"] }\n+    |                 ^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:390:5\n+    |\n+390 |     #[abi = \"3700\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:393:5\n+    |\n+393 |     #[abi = \"3700\"] struct S;\n+    |     ^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:396:5\n+    |\n+396 |     #[abi = \"3700\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:399:5\n+    |\n+399 |     #[abi = \"3700\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:384:1\n+    |\n+384 | #[abi = \"3700\"]\n+    | ^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:406:17\n+    |\n+406 |     mod inner { #![automatically_derived=\"3600\"] }\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:409:5\n+    |\n+409 |     #[automatically_derived = \"3600\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:412:5\n+    |\n+412 |     #[automatically_derived = \"3600\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:415:5\n+    |\n+415 |     #[automatically_derived = \"3600\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:418:5\n+    |\n+418 |     #[automatically_derived = \"3600\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:403:1\n+    |\n+403 | #[automatically_derived = \"3600\"]\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: function is marked #[no_mangle], but not exported\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:426:27\n+    |\n+426 |     #[no_mangle = \"3500\"] fn f() { }\n+    |                           -^^^^^^^^^\n+    |                           |\n+    |                           help: try making it public: `pub `\n+    |\n+    = note: #[warn(private_no_mangle_fns)] on by default\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:439:17\n+    |\n+439 |     mod inner { #![no_link=\"3400\"] }\n+    |                 ^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:442:5\n+    |\n+442 |     #[no_link = \"3400\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:445:5\n+    |\n+445 |     #[no_link = \"3400\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:448:5\n+    |\n+448 |     #[no_link = \"3400\"]type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:451:5\n+    |\n+451 |     #[no_link = \"3400\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:436:1\n+    |\n+436 | #[no_link = \"3400\"]\n+    | ^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:458:17\n+    |\n+458 |     mod inner { #![should_panic=\"3200\"] }\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:461:5\n+    |\n+461 |     #[should_panic = \"3200\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:464:5\n+    |\n+464 |     #[should_panic = \"3200\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:467:5\n+    |\n+467 |     #[should_panic = \"3200\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:470:5\n+    |\n+470 |     #[should_panic = \"3200\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:455:1\n+    |\n+455 | #[should_panic = \"3200\"]\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:477:17\n+    |\n+477 |     mod inner { #![ignore=\"3100\"] }\n+    |                 ^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:480:5\n+    |\n+480 |     #[ignore = \"3100\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:483:5\n+    |\n+483 |     #[ignore = \"3100\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:486:5\n+    |\n+486 |     #[ignore = \"3100\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:489:5\n+    |\n+489 |     #[ignore = \"3100\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:474:1\n+    |\n+474 | #[ignore = \"3100\"]\n+    | ^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:496:17\n+    |\n+496 |     mod inner { #![no_implicit_prelude=\"3000\"] }\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:499:5\n+    |\n+499 |     #[no_implicit_prelude = \"3000\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:502:5\n+    |\n+502 |     #[no_implicit_prelude = \"3000\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:505:5\n+    |\n+505 |     #[no_implicit_prelude = \"3000\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:508:5\n+    |\n+508 |     #[no_implicit_prelude = \"3000\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:493:1\n+    |\n+493 | #[no_implicit_prelude = \"3000\"]\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:515:17\n+    |\n+515 |     mod inner { #![reexport_test_harness_main=\"2900\"] }\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:518:5\n+    |\n+518 |     #[reexport_test_harness_main = \"2900\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:521:5\n+    |\n+521 |     #[reexport_test_harness_main = \"2900\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:524:5\n+    |\n+524 |     #[reexport_test_harness_main = \"2900\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:527:5\n+    |\n+527 |     #[reexport_test_harness_main = \"2900\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:512:1\n+    |\n+512 | #[reexport_test_harness_main = \"2900\"]\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:538:5\n+    |\n+538 |     #[macro_escape] fn f() { }\n+    |     ^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:541:5\n+    |\n+541 |     #[macro_escape] struct S;\n+    |     ^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:544:5\n+    |\n+544 |     #[macro_escape] type T = S;\n+    |     ^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:547:5\n+    |\n+547 |     #[macro_escape] impl S { }\n+    |     ^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:555:17\n+    |\n+555 |     mod inner { #![no_std=\"2600\"] }\n+    |                 ^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be in the root module\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:555:17\n+    |\n+555 |     mod inner { #![no_std=\"2600\"] }\n+    |                 ^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:559:5\n+    |\n+559 |     #[no_std = \"2600\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:559:5\n+    |\n+559 |     #[no_std = \"2600\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:563:5\n+    |\n+563 |     #[no_std = \"2600\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:563:5\n+    |\n+563 |     #[no_std = \"2600\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:567:5\n+    |\n+567 |     #[no_std = \"2600\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:567:5\n+    |\n+567 |     #[no_std = \"2600\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:571:5\n+    |\n+571 |     #[no_std = \"2600\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:571:5\n+    |\n+571 |     #[no_std = \"2600\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:551:1\n+    |\n+551 | #[no_std = \"2600\"]\n+    | ^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:551:1\n+    |\n+551 | #[no_std = \"2600\"]\n+    | ^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:711:17\n+    |\n+711 |     mod inner { #![crate_name=\"0900\"] }\n+    |                 ^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be in the root module\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:711:17\n+    |\n+711 |     mod inner { #![crate_name=\"0900\"] }\n+    |                 ^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:715:5\n+    |\n+715 |     #[crate_name = \"0900\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:715:5\n+    |\n+715 |     #[crate_name = \"0900\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:719:5\n+    |\n+719 |     #[crate_name = \"0900\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:719:5\n+    |\n+719 |     #[crate_name = \"0900\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:723:5\n+    |\n+723 |     #[crate_name = \"0900\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:723:5\n+    |\n+723 |     #[crate_name = \"0900\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:727:5\n+    |\n+727 |     #[crate_name = \"0900\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:727:5\n+    |\n+727 |     #[crate_name = \"0900\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:1\n+    |\n+707 | #[crate_name = \"0900\"]\n+    | ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:1\n+    |\n+707 | #[crate_name = \"0900\"]\n+    | ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:736:17\n+    |\n+736 |     mod inner { #![crate_type=\"0800\"] }\n+    |                 ^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be in the root module\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:736:17\n+    |\n+736 |     mod inner { #![crate_type=\"0800\"] }\n+    |                 ^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:740:5\n+    |\n+740 |     #[crate_type = \"0800\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:740:5\n+    |\n+740 |     #[crate_type = \"0800\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:744:5\n+    |\n+744 |     #[crate_type = \"0800\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:744:5\n+    |\n+744 |     #[crate_type = \"0800\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:748:5\n+    |\n+748 |     #[crate_type = \"0800\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:748:5\n+    |\n+748 |     #[crate_type = \"0800\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:752:5\n+    |\n+752 |     #[crate_type = \"0800\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:752:5\n+    |\n+752 |     #[crate_type = \"0800\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:732:1\n+    |\n+732 | #[crate_type = \"0800\"]\n+    | ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:732:1\n+    |\n+732 | #[crate_type = \"0800\"]\n+    | ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:761:17\n+    |\n+761 |     mod inner { #![feature(x0600)] }\n+    |                 ^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be in the root module\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:761:17\n+    |\n+761 |     mod inner { #![feature(x0600)] }\n+    |                 ^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:765:5\n+    |\n+765 |     #[feature(x0600)] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:765:5\n+    |\n+765 |     #[feature(x0600)] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:769:5\n+    |\n+769 |     #[feature(x0600)] struct S;\n+    |     ^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:769:5\n+    |\n+769 |     #[feature(x0600)] struct S;\n+    |     ^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:773:5\n+    |\n+773 |     #[feature(x0600)] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:773:5\n+    |\n+773 |     #[feature(x0600)] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:777:5\n+    |\n+777 |     #[feature(x0600)] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:777:5\n+    |\n+777 |     #[feature(x0600)] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:757:1\n+    |\n+757 | #[feature(x0600)]\n+    | ^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:757:1\n+    |\n+757 | #[feature(x0600)]\n+    | ^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:787:17\n+    |\n+787 |     mod inner { #![no_main=\"0400\"] }\n+    |                 ^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be in the root module\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:787:17\n+    |\n+787 |     mod inner { #![no_main=\"0400\"] }\n+    |                 ^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:791:5\n+    |\n+791 |     #[no_main = \"0400\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:791:5\n+    |\n+791 |     #[no_main = \"0400\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:795:5\n+    |\n+795 |     #[no_main = \"0400\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:795:5\n+    |\n+795 |     #[no_main = \"0400\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:799:5\n+    |\n+799 |     #[no_main = \"0400\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:799:5\n+    |\n+799 |     #[no_main = \"0400\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:803:5\n+    |\n+803 |     #[no_main = \"0400\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:803:5\n+    |\n+803 |     #[no_main = \"0400\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:783:1\n+    |\n+783 | #[no_main = \"0400\"]\n+    | ^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:783:1\n+    |\n+783 | #[no_main = \"0400\"]\n+    | ^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:825:17\n+    |\n+825 |     mod inner { #![recursion_limit=\"0200\"] }\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be in the root module\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:825:17\n+    |\n+825 |     mod inner { #![recursion_limit=\"0200\"] }\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:829:5\n+    |\n+829 |     #[recursion_limit=\"0200\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:829:5\n+    |\n+829 |     #[recursion_limit=\"0200\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:833:5\n+    |\n+833 |     #[recursion_limit=\"0200\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:833:5\n+    |\n+833 |     #[recursion_limit=\"0200\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:837:5\n+    |\n+837 |     #[recursion_limit=\"0200\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:837:5\n+    |\n+837 |     #[recursion_limit=\"0200\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:841:5\n+    |\n+841 |     #[recursion_limit=\"0200\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:841:5\n+    |\n+841 |     #[recursion_limit=\"0200\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:821:1\n+    |\n+821 | #[recursion_limit=\"0200\"]\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:821:1\n+    |\n+821 | #[recursion_limit=\"0200\"]\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:850:17\n+    |\n+850 |     mod inner { #![type_length_limit=\"0100\"] }\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be in the root module\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:850:17\n+    |\n+850 |     mod inner { #![type_length_limit=\"0100\"] }\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:854:5\n+    |\n+854 |     #[type_length_limit=\"0100\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:854:5\n+    |\n+854 |     #[type_length_limit=\"0100\"] fn f() { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:858:5\n+    |\n+858 |     #[type_length_limit=\"0100\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:858:5\n+    |\n+858 |     #[type_length_limit=\"0100\"] struct S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:862:5\n+    |\n+862 |     #[type_length_limit=\"0100\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:862:5\n+    |\n+862 |     #[type_length_limit=\"0100\"] type T = S;\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:866:5\n+    |\n+866 |     #[type_length_limit=\"0100\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:866:5\n+    |\n+866 |     #[type_length_limit=\"0100\"] impl S { }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:846:1\n+    |\n+846 | #[type_length_limit=\"0100\"]\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:846:1\n+    |\n+846 | #[type_length_limit=\"0100\"]\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:53:1\n+   |\n+53 | #![macro_reexport             = \"5000\"] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:55:1\n+   |\n+55 | #![macro_export               = \"4800\"] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:56:1\n+   |\n+56 | #![plugin_registrar           = \"4700\"] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:59:1\n+   |\n+59 | #![main                      = \"x4400\"] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:60:1\n+   |\n+60 | #![start                     = \"x4300\"] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:63:1\n+   |\n+63 | #![simd                       = \"4000\"] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:64:1\n+   |\n+64 | #![repr                       = \"3900\"] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:65:1\n+   |\n+65 | #![path                       = \"3800\"] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:66:1\n+   |\n+66 | #![abi                        = \"3700\"] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:67:1\n+   |\n+67 | #![automatically_derived      = \"3600\"] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:69:1\n+   |\n+69 | #![no_link                    = \"3400\"] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:71:1\n+   |\n+71 | #![should_panic               = \"3200\"] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:72:1\n+   |\n+72 | #![ignore                     = \"3100\"] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:78:1\n+   |\n+78 | #![proc_macro_derive          = \"2500\"] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: compilation successful\n+   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:877:1\n+    |\n+877 | / fn main() { //~ ERROR compilation successful\n+878 | |     println!(\"Hello World\");\n+879 | | }\n+    | |_^\n+"}, {"sha": "98da43c3a2252ffd078d0609b8105aad460b5158", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-deprecated.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-deprecated.rs"}, {"sha": "a413fcc56a015a94dda88d8efcd5f01f331ea3ee", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-deprecated.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,8 @@\n+error: compilation successful\n+  --> $DIR/issue-43106-gating-of-deprecated.rs:29:1\n+   |\n+29 | / fn main() { //~ ERROR compilation successful\n+30 | |     println!(\"Hello World\");\n+31 | | }\n+   | |_^\n+"}, {"sha": "2dbc6cb140db3f957c01f288516fefdc6f6e72b6", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-derive-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-derive-2.rs"}, {"sha": "c5b33384b917ad067da220681cb0fe59ba928194", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-derive-2.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive-2.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,20 @@\n+error: cannot find derive macro `x3300` in this scope\n+  --> $DIR/issue-43106-gating-of-derive-2.rs:14:14\n+   |\n+14 |     #[derive(x3300)]\n+   |              ^^^^^\n+\n+error: cannot find derive macro `x3300` in this scope\n+  --> $DIR/issue-43106-gating-of-derive-2.rs:18:14\n+   |\n+18 |     #[derive(x3300)]\n+   |              ^^^^^\n+\n+error: cannot find derive macro `x3300` in this scope\n+  --> $DIR/issue-43106-gating-of-derive-2.rs:22:14\n+   |\n+22 |     #[derive(x3300)]\n+   |              ^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "e5293ebb94ddc8c0161a9147737efdd3385e473e", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-derive.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-derive.rs"}, {"sha": "a0b12585f3c48058bab0a9f7386fa63391319912", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-derive.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-derive.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,38 @@\n+error: `derive` may only be applied to structs, enums and unions\n+  --> $DIR/issue-43106-gating-of-derive.rs:14:1\n+   |\n+14 | #![derive(Debug)]\n+   | ^^^^^^^^^^^^^^^^^ help: try an outer attribute: `#[derive(Debug)]`\n+\n+error: `derive` may only be applied to structs, enums and unions\n+  --> $DIR/issue-43106-gating-of-derive.rs:17:1\n+   |\n+17 | #[derive(Debug)]\n+   | ^^^^^^^^^^^^^^^^\n+\n+error: `derive` may only be applied to structs, enums and unions\n+  --> $DIR/issue-43106-gating-of-derive.rs:20:17\n+   |\n+20 |     mod inner { #![derive(Debug)] }\n+   |                 ^^^^^^^^^^^^^^^^^ help: try an outer attribute: `#[derive(Debug)]`\n+\n+error: `derive` may only be applied to structs, enums and unions\n+  --> $DIR/issue-43106-gating-of-derive.rs:23:5\n+   |\n+23 |     #[derive(Debug)]\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: `derive` may only be applied to structs, enums and unions\n+  --> $DIR/issue-43106-gating-of-derive.rs:36:5\n+   |\n+36 |     #[derive(Debug)]\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: `derive` may only be applied to structs, enums and unions\n+  --> $DIR/issue-43106-gating-of-derive.rs:40:5\n+   |\n+40 |     #[derive(Debug)]\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "24e77bf60a8d1e76709b51400fe133fe2074e786", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-inline.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-inline.rs"}, {"sha": "92bda4d0446d9490455942f8f8302d967574190c", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-inline.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,43 @@\n+error[E0518]: attribute should be applied to function\n+  --> $DIR/issue-43106-gating-of-inline.rs:21:1\n+   |\n+21 |   #[inline = \"2100\"]\n+   |   ^^^^^^^^^^^^^^^^^^\n+22 |   //~^ ERROR attribute should be applied to function\n+23 | / mod inline {\n+24 | |     mod inner { #![inline=\"2100\"] }\n+25 | |     //~^ ERROR attribute should be applied to function\n+26 | |\n+...  |\n+36 | |     //~^ ERROR attribute should be applied to function\n+37 | | }\n+   | |_- not a function\n+\n+error[E0518]: attribute should be applied to function\n+  --> $DIR/issue-43106-gating-of-inline.rs:24:17\n+   |\n+24 |     mod inner { #![inline=\"2100\"] }\n+   |     ------------^^^^^^^^^^^^^^^^^-- not a function\n+\n+error[E0518]: attribute should be applied to function\n+  --> $DIR/issue-43106-gating-of-inline.rs:29:5\n+   |\n+29 |     #[inline = \"2100\"] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^ --------- not a function\n+\n+error[E0518]: attribute should be applied to function\n+  --> $DIR/issue-43106-gating-of-inline.rs:32:5\n+   |\n+32 |     #[inline = \"2100\"] type T = S;\n+   |     ^^^^^^^^^^^^^^^^^^ ----------- not a function\n+\n+error[E0518]: attribute should be applied to function\n+  --> $DIR/issue-43106-gating-of-inline.rs:35:5\n+   |\n+35 |     #[inline = \"2100\"] impl S { }\n+   |     ^^^^^^^^^^^^^^^^^^ ---------- not a function\n+\n+error[E0601]: main function not found\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "3b2dbdefebad855776cf1f5c943305ff006d5423", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_escape.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-macro_escape.rs"}, {"sha": "60a9382bdb8b17ef142a01eafcde6f31e99c3597", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_escape.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,12 @@\n+warning: macro_escape is a deprecated synonym for macro_use\n+  --> $DIR/issue-43106-gating-of-macro_escape.rs:16:1\n+   |\n+16 | #![macro_escape]\n+   | ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider an outer attribute, #[macro_use] mod ...\n+\n+error[E0601]: main function not found\n+\n+error: aborting due to previous error\n+"}, {"sha": "cf5619da3c7c8a9dfc91582ea2acfe9c50e1dddc", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_use.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-macro_use.rs"}, {"sha": "2977384f62db6e0adeda65934f3f33283adc5e54", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_use.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,20 @@\n+error: arguments to macro_use are not allowed here\n+  --> $DIR/issue-43106-gating-of-macro_use.rs:16:1\n+   |\n+16 | #![macro_use                  = \"4900\"] //~ ERROR arguments to macro_use are not allowed here\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: arguments to macro_use are not allowed here\n+  --> $DIR/issue-43106-gating-of-macro_use.rs:18:1\n+   |\n+18 | #[macro_use = \"2700\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: arguments to macro_use are not allowed here\n+  --> $DIR/issue-43106-gating-of-macro_use.rs:21:17\n+   |\n+21 |     mod inner { #![macro_use=\"2700\"] }\n+   |                 ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "133f70e0f3b19b9a26411cbc7b917d41e76ce986", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-proc_macro_derive.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-proc_macro_derive.rs"}, {"sha": "a76f0219f7a81c4ad5250a05c6ce51c5b714b9e7", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-proc_macro_derive.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,40 @@\n+error: the `#[proc_macro_derive]` attribute may only be used on bare functions\n+  --> $DIR/issue-43106-gating-of-proc_macro_derive.rs:20:1\n+   |\n+20 | #[proc_macro_derive = \"2500\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the `#[proc_macro_derive]` attribute may only be used on bare functions\n+  --> $DIR/issue-43106-gating-of-proc_macro_derive.rs:28:17\n+   |\n+28 |     mod inner { #![proc_macro_derive=\"2500\"] }\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the `#[proc_macro_derive]` attribute is only usable with crates of the `proc-macro` crate type\n+  --> $DIR/issue-43106-gating-of-proc_macro_derive.rs:31:5\n+   |\n+31 |     #[proc_macro_derive = \"2500\"] fn f() { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the `#[proc_macro_derive]` attribute may only be used on bare functions\n+  --> $DIR/issue-43106-gating-of-proc_macro_derive.rs:34:5\n+   |\n+34 |     #[proc_macro_derive = \"2500\"] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the `#[proc_macro_derive]` attribute may only be used on bare functions\n+  --> $DIR/issue-43106-gating-of-proc_macro_derive.rs:37:5\n+   |\n+37 |     #[proc_macro_derive = \"2500\"] type T = S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the `#[proc_macro_derive]` attribute may only be used on bare functions\n+  --> $DIR/issue-43106-gating-of-proc_macro_derive.rs:40:5\n+   |\n+40 |     #[proc_macro_derive = \"2500\"] impl S { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0601]: main function not found\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "10c1398634923191a61ef9bd3401d8b86773a132", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-rustc_deprecated.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-rustc_deprecated.rs"}, {"sha": "6f6f587cb535286caa181865a89e71aa1cd8dafc", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-rustc_deprecated.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,46 @@\n+error[E0601]: main function not found\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:17:1\n+   |\n+17 | #![rustc_deprecated           = \"1500\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:20:1\n+   |\n+20 | #[rustc_deprecated = \"1500\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:23:17\n+   |\n+23 |     mod inner { #![rustc_deprecated=\"1500\"] }\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:26:5\n+   |\n+26 |     #[rustc_deprecated = \"1500\"] fn f() { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:29:5\n+   |\n+29 |     #[rustc_deprecated = \"1500\"] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:32:5\n+   |\n+32 |     #[rustc_deprecated = \"1500\"] type T = S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:35:5\n+   |\n+35 |     #[rustc_deprecated = \"1500\"] impl S { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "a6eaabf7a383e4109429ba7f16463a65fbd94781", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-stable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-stable.rs"}, {"sha": "59f0431c708da2df9fc6ac3380c5c63c2b7a0d8a", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-stable.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,46 @@\n+error[E0601]: main function not found\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-stable.rs:17:1\n+   |\n+17 | #![stable                     = \"1300\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-stable.rs:20:1\n+   |\n+20 | #[stable = \"1300\"]\n+   | ^^^^^^^^^^^^^^^^^^\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-stable.rs:23:17\n+   |\n+23 |     mod inner { #![stable=\"1300\"] }\n+   |                 ^^^^^^^^^^^^^^^^^\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-stable.rs:26:5\n+   |\n+26 |     #[stable = \"1300\"] fn f() { }\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-stable.rs:29:5\n+   |\n+29 |     #[stable = \"1300\"] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-stable.rs:32:5\n+   |\n+32 |     #[stable = \"1300\"] type T = S;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-stable.rs:35:5\n+   |\n+35 |     #[stable = \"1300\"] impl S { }\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "adcbfe77280b7ce2f2057dea20b5bd6b99f26ea8", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-test.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-test.rs"}, {"sha": "f7d5473f443fa5a442658602aec9c438f3dbe29e", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-test.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-test.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,4 @@\n+error[E0601]: main function not found\n+\n+error: aborting due to previous error\n+"}, {"sha": "ff0600deb1936b0c1caa88f422afc3989269ebd5", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-unstable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-unstable.rs"}, {"sha": "00cbc62ab479f1120dd60d9eeeb9fab5f3f904e4", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-unstable.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,46 @@\n+error[E0601]: main function not found\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-unstable.rs:17:1\n+   |\n+17 | #![unstable                   = \"1200\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-unstable.rs:20:1\n+   |\n+20 | #[unstable = \"1200\"]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-unstable.rs:23:17\n+   |\n+23 |     mod inner { #![unstable=\"1200\"] }\n+   |                 ^^^^^^^^^^^^^^^^^^^\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-unstable.rs:26:5\n+   |\n+26 |     #[unstable = \"1200\"] fn f() { }\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-unstable.rs:29:5\n+   |\n+29 |     #[unstable = \"1200\"] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-unstable.rs:32:5\n+   |\n+32 |     #[unstable = \"1200\"] type T = S;\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: stability attributes may not be used outside of the standard library\n+  --> $DIR/issue-43106-gating-of-unstable.rs:35:5\n+   |\n+35 |     #[unstable = \"1200\"] impl S { }\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "3a01ecdf9db6f71502f3776fa55b3df79de4d969", "filename": "src/test/ui/specialization-feature-gate-default.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Fspecialization-feature-gate-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Fspecialization-feature-gate-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization-feature-gate-default.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/specialization/specialization-feature-gate-default.rs"}, {"sha": "e17d13083858e617882fa1dd6f6c4fc7560f82a2", "filename": "src/test/ui/specialization-feature-gate-default.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Fspecialization-feature-gate-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Fspecialization-feature-gate-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization-feature-gate-default.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,10 @@\n+error: specialization is unstable (see issue #31844)\n+  --> $DIR/specialization-feature-gate-default.rs:20:5\n+   |\n+20 |     default fn foo(&self) {} //~ ERROR specialization is unstable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(specialization)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "5eb48eab15e52468a38da694093aef6f72fa6d34", "filename": "src/test/ui/specialization-feature-gate-overlap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Fspecialization-feature-gate-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Fspecialization-feature-gate-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization-feature-gate-overlap.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "previous_filename": "src/test/compile-fail/specialization/specialization-feature-gate-overlap.rs"}, {"sha": "7fe2891c9082de316f8020f531c04a86e1de87eb", "filename": "src/test/ui/specialization-feature-gate-overlap.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Fspecialization-feature-gate-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftest%2Fui%2Fspecialization-feature-gate-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization-feature-gate-overlap.stderr?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -0,0 +1,15 @@\n+error[E0119]: conflicting implementations of trait `Foo` for type `u8`:\n+  --> $DIR/specialization-feature-gate-overlap.rs:23:1\n+   |\n+19 | / impl<T> Foo for T {\n+20 | |     fn foo(&self) {}\n+21 | | }\n+   | |_- first implementation here\n+22 | \n+23 | / impl Foo for u8 { //~ ERROR E0119\n+24 | |     fn foo(&self) {}\n+25 | | }\n+   | |_^ conflicting implementation for `u8`\n+\n+error: aborting due to previous error\n+"}, {"sha": "eca225ee8a8c077ad25c72ba49fc951b224a1900", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c49f401fecd8c5ef42a33a070a61daa2b911b47/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=9c49f401fecd8c5ef42a33a070a61daa2b911b47", "patch": "@@ -89,7 +89,9 @@ pub fn check(path: &Path, bad: &mut bool, quiet: bool) {\n \n     let mut contents = String::new();\n \n-    super::walk_many(&[&path.join(\"test/compile-fail\"),\n+    super::walk_many(&[&path.join(\"test/ui-fulldeps\"),\n+                       &path.join(\"test/ui\"),\n+                       &path.join(\"test/compile-fail\"),\n                        &path.join(\"test/compile-fail-fulldeps\"),\n                        &path.join(\"test/parse-fail\"),],\n                      &mut |path| super::filter_dirs(path),\n@@ -150,9 +152,9 @@ pub fn check(path: &Path, bad: &mut bool, quiet: bool) {\n \n     for &(name, _) in gate_untested.iter() {\n         println!(\"Expected a gate test for the feature '{}'.\", name);\n-        println!(\"Hint: create a file named 'feature-gate-{}.rs' in the compile-fail\\\n-                \\n      test suite, with its failures due to missing usage of\\\n-                \\n      #![feature({})].\", name, name);\n+        println!(\"Hint: create a failing test file named 'feature-gate-{}.rs'\\\n+                \\n      in the 'ui' test suite, with its failures due to\\\n+                \\n      missing usage of #![feature({})].\", name, name);\n         println!(\"Hint: If you already have such a test and don't want to rename it,\\\n                 \\n      you can also add a // gate-test-{} line to the test file.\",\n                  name);"}]}