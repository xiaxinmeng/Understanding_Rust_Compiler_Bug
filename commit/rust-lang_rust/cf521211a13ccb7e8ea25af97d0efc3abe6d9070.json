{"sha": "cf521211a13ccb7e8ea25af97d0efc3abe6d9070", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNTIxMjExYTEzY2NiN2U4ZWEyNWFmOTdkMGVmYzNhYmU2ZDkwNzA=", "commit": {"author": {"name": "Christian Poveda", "email": "z1mvader@protonmail.com", "date": "2017-04-26T16:54:17Z"}, "committer": {"name": "Christian Poveda", "email": "z1mvader@protonmail.com", "date": "2017-04-26T16:54:17Z"}, "message": "restructured docs for thread and added links", "tree": {"sha": "c645782568054a61c86e8586b38c8fbcbaa0ae3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c645782568054a61c86e8586b38c8fbcbaa0ae3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf521211a13ccb7e8ea25af97d0efc3abe6d9070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf521211a13ccb7e8ea25af97d0efc3abe6d9070", "html_url": "https://github.com/rust-lang/rust/commit/cf521211a13ccb7e8ea25af97d0efc3abe6d9070", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf521211a13ccb7e8ea25af97d0efc3abe6d9070/comments", "author": null, "committer": null, "parents": [{"sha": "bdb6bb9684e5cc874d69d6cd65be3d9fb1e64401", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb6bb9684e5cc874d69d6cd65be3d9fb1e64401", "html_url": "https://github.com/rust-lang/rust/commit/bdb6bb9684e5cc874d69d6cd65be3d9fb1e64401"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "4e49c485f109f93e59e2178d76342f367fc8694f", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cf521211a13ccb7e8ea25af97d0efc3abe6d9070/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf521211a13ccb7e8ea25af97d0efc3abe6d9070/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=cf521211a13ccb7e8ea25af97d0efc3abe6d9070", "patch": "@@ -713,28 +713,34 @@ struct Inner {\n \n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-/// A handle to a thread, its just an abstract reference and as such\n-/// it can be used to identify a thread (by name, for example). In most\n-/// usage cases, this struct is not used directly.\n+/// A handle to a thread.\n+///\n+/// You can use it to identify a thread (by name, for example). Most of the\n+/// time, there is no need to directly create a `Thread` struct using the\n+/// constructor, instead you should use a function like `spawn` to create\n+/// new threads, see the docs of [`Builder`] and [`spawn`] for more.\n ///\n /// # Examples\n ///\n /// ```\n-/// use std::thread;\n+/// use std::thread::Builder;\n ///\n /// for i in 0..5 {\n ///     let thread_name = format!(\"thread_{}\", i);\n-///     thread::Builder::new()\n-///     .name(thread_name) // Now you can identify which thread panicked\n-///                        // thanks to the handle's name\n-///     .spawn(move || {\n-///         if i == 3 {\n-///             panic!(\"I'm scared!!!\");\n-///         }\n-///     })\n-///     .unwrap();\n+///     Builder::new()\n+///         .name(thread_name) // Now you can identify which thread panicked\n+///                            // thanks to the handle's name\n+///         .spawn(move || {\n+///             if i == 3 {\n+///                  panic!(\"I'm scared!!!\");\n+///             }\n+///         })\n+///         .unwrap();\n /// }\n /// ```\n+/// [`Builder`]: ../../std/thread/struct.Builder.html\n+/// [`spawn`]: ../../std/thread/fn.spawn.html\n+\n pub struct Thread {\n     inner: Arc<Inner>,\n }"}]}