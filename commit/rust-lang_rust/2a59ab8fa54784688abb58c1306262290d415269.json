{"sha": "2a59ab8fa54784688abb58c1306262290d415269", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNTlhYjhmYTU0Nzg0Njg4YWJiNThjMTMwNjI2MjI5MGQ0MTUyNjk=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-01-21T17:20:22Z"}, "committer": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-01-21T17:33:37Z"}, "message": "rustc: Specify lint checks via crate attributes\n\nA crate attribute like `#[lint(no_ctypes)]` can now be used to turn off\nctypes checking.\n\nIssue #1543", "tree": {"sha": "48ff192470d446e13122577ae09450fdca887081", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48ff192470d446e13122577ae09450fdca887081"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a59ab8fa54784688abb58c1306262290d415269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a59ab8fa54784688abb58c1306262290d415269", "html_url": "https://github.com/rust-lang/rust/commit/2a59ab8fa54784688abb58c1306262290d415269", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a59ab8fa54784688abb58c1306262290d415269/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d757b9e9fd84b0bef547b615350f6bfec829690", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d757b9e9fd84b0bef547b615350f6bfec829690", "html_url": "https://github.com/rust-lang/rust/commit/4d757b9e9fd84b0bef547b615350f6bfec829690"}], "stats": {"total": 114, "additions": 101, "deletions": 13}, "files": [{"sha": "9d9c0542c8235f2e0c63e73c6b8fed4eb44cead2", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2a59ab8fa54784688abb58c1306262290d415269/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a59ab8fa54784688abb58c1306262290d415269/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=2a59ab8fa54784688abb58c1306262290d415269", "patch": "@@ -204,14 +204,7 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n     time(time_passes, \"kind checking\",\n          bind kind::check_crate(ty_cx, method_map, last_uses, crate));\n \n-    vec::iter(sess.opts.lint_opts) {|lopt|\n-        alt lopt {\n-          ctypes {\n-            time(time_passes, \"ctypes usage checking\",\n-                 bind lint::check_ctypes(ty_cx, crate))\n-          }\n-        }\n-    }\n+    lint::check_crate(ty_cx, crate, sess.opts.lint_opts, time_passes);\n \n     if upto == cu_no_trans { ret {crate: crate, tcx: some(ty_cx), src: src}; }\n     let outputs = option::get(outputs);\n@@ -390,8 +383,8 @@ fn build_session_options(match: getopts::match,\n     let parse_only = opt_present(match, \"parse-only\");\n     let no_trans = opt_present(match, \"no-trans\");\n     let lint_opts = [];\n-    if !opt_present(match, \"no-lint-ctypes\") {\n-        lint_opts += [lint::ctypes];\n+    if opt_present(match, \"no-lint-ctypes\") {\n+        lint_opts += [(lint::ctypes, false)];\n     }\n \n     let output_type ="}, {"sha": "ec9d71c6f7956f0dde6c07dc38ce917df0d1c1ee", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a59ab8fa54784688abb58c1306262290d415269/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a59ab8fa54784688abb58c1306262290d415269/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=2a59ab8fa54784688abb58c1306262290d415269", "patch": "@@ -34,7 +34,7 @@ type options =\n      debuginfo: bool,\n      extra_debuginfo: bool,\n      verify: bool,\n-     lint_opts: [lint::option],\n+     lint_opts: [(lint::option, bool)],\n      save_temps: bool,\n      stats: bool,\n      time_passes: bool,"}, {"sha": "7cba82e80be37097f9f4d616afafcec9e1048644", "filename": "src/comp/middle/lint.rs", "status": "modified", "additions": 97, "deletions": 2, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/2a59ab8fa54784688abb58c1306262290d415269/src%2Fcomp%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a59ab8fa54784688abb58c1306262290d415269/src%2Fcomp%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Flint.rs?ref=2a59ab8fa54784688abb58c1306262290d415269", "patch": "@@ -1,13 +1,98 @@\n import driver::session::session;\n import middle::ty::ctxt;\n import syntax::{ast, visit};\n-\n-type crate_ctxt = {tcx: ty::ctxt};\n+import front::attr;\n+import std::io;\n+import io::writer_util;\n \n enum option {\n     ctypes,\n }\n \n+impl opt_ for option {\n+    fn desc() -> str {\n+        \"lint: \" + alt self {\n+          ctypes { \"ctypes usage checking\" }\n+        }\n+    }\n+    fn run(tcx: ty::ctxt, crate: @ast::crate, time_pass: bool) {\n+        let checker = alt self {\n+          ctypes {\n+            bind check_ctypes(tcx, crate)\n+          }\n+        };\n+        time(time_pass, self.desc(), checker);\n+    }\n+}\n+\n+// FIXME: Copied from driver.rs, to work around a bug(#1566)\n+fn time(do_it: bool, what: str, thunk: block()) {\n+    if !do_it{ ret thunk(); }\n+    let start = std::time::precise_time_s();\n+    thunk();\n+    let end = std::time::precise_time_s();\n+    io::stdout().write_str(#fmt(\"time: %3.3f s\\t%s\\n\",\n+                                end - start, what));\n+}\n+\n+// Merge lint options specified by crate attributes and rustc command\n+// line. Precedence: cmdline > attribute > default\n+fn merge_opts(attrs: [ast::attribute], cmd_opts: [(option, bool)]) ->\n+    [(option, bool)] {\n+    fn str_to_option(name: str) -> (option, bool) {\n+        ret alt name {\n+          \"ctypes\" { (ctypes, true) }\n+          \"no_ctypes\" { (ctypes, false) }\n+        }\n+    }\n+\n+    fn meta_to_option(meta: @ast::meta_item) -> (option, bool) {\n+        ret alt meta.node {\n+          ast::meta_word(name) {\n+            str_to_option(name)\n+          }\n+        };\n+    }\n+\n+    fn default() -> [(option, bool)] {\n+        [(ctypes, true)]\n+    }\n+\n+    fn contains(xs: [(option, bool)], x: option) -> bool {\n+        for (o, _) in xs {\n+            if o == x { ret true; }\n+        }\n+        ret false;\n+    }\n+\n+    let result = cmd_opts;\n+\n+    let lint_metas =\n+        attr::attr_metas(attr::find_attrs_by_name(attrs, \"lint\"));\n+\n+    vec::iter(lint_metas) {|mi|\n+        alt mi.node {\n+          ast::meta_list(_, list) {\n+            vec::iter(list) {|e|\n+                let (o, v) = meta_to_option(e);\n+                if !contains(cmd_opts, o) {\n+                    result += [(o, v)];\n+                }\n+            }\n+          }\n+          _ { }\n+        }\n+    };\n+\n+    for (o, v) in default() {\n+        if !contains(result, o) {\n+            result += [(o, v)];\n+        }\n+    }\n+\n+    ret result;\n+}\n+\n fn check_ctypes(tcx: ty::ctxt, crate: @ast::crate) {\n     fn check_native_fn(tcx: ty::ctxt, decl: ast::fn_decl) {\n         let tys = vec::map(decl.inputs) {|a| a.ty };\n@@ -52,6 +137,16 @@ fn check_ctypes(tcx: ty::ctxt, crate: @ast::crate) {\n     });\n     visit::visit_crate(*crate, (), visit);\n }\n+\n+fn check_crate(tcx: ty::ctxt, crate: @ast::crate,\n+               opts: [(option, bool)], time: bool) {\n+    let lint_opts = lint::merge_opts(crate.node.attrs, opts);\n+    for (lopt, switch) in lint_opts {\n+        if switch == true {\n+            lopt.run(tcx, crate, time);\n+        }\n+    }\n+}\n //\n // Local Variables:\n // mode: rust"}]}