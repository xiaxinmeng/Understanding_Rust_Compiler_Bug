{"sha": "2cb079ba9add594908f40d48ee2c9ac553306b33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYjA3OWJhOWFkZDU5NDkwOGY0MGQ0OGVlMmM5YWM1NTMzMDZiMzM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-05T22:29:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-05T22:29:27Z"}, "message": "Merge #5672\n\n5672: align names in make\n\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d9280e139c278868f77719652925e49de3ff8cca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9280e139c278868f77719652925e49de3ff8cca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cb079ba9add594908f40d48ee2c9ac553306b33", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfKzLHCRBK7hj4Ov3rIwAAdHIIADfBErTNrwxxoZR6tiJ3MoNn\nZ5m1GGORwr8F6Tgqg12Gzs+I5bNSWzO613gVw7O9eQmsfyPlYzXo8ymUsCQfQdt5\nFWJ6Bk3KhafrUUTFFua8VGUlq1mmgOvuT0ebLjzUrIA0cBrbH51ONiifre8Nd1rw\nr46OrwGAVnS3JXCBmHcAvoWL3MCuFpFjZ4cKukGk+Yu9a02EozNWwCTUYXiJoY6u\nFopo86oor/Rksy70rdWX2MtRDGEsZFsRdklQINfamIB3WuxwYXjSr5ip6ERlv7FH\n8lxwj6qhCH8gCuEPwk5+TpN+3QpSfYZ8CU2vfRkFIpsqB3XBszoiQwtqCuxjQug=\n=Klvh\n-----END PGP SIGNATURE-----\n", "payload": "tree d9280e139c278868f77719652925e49de3ff8cca\nparent ed4687f698fa3c03649819ea6c71ce0a290b7888\nparent 09d3b7d7a2ae23a0463fadee9ae8cb6a0fa2c4bf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596666567 +0000\ncommitter GitHub <noreply@github.com> 1596666567 +0000\n\nMerge #5672\n\n5672: align names in make\n\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cb079ba9add594908f40d48ee2c9ac553306b33", "html_url": "https://github.com/rust-lang/rust/commit/2cb079ba9add594908f40d48ee2c9ac553306b33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cb079ba9add594908f40d48ee2c9ac553306b33/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed4687f698fa3c03649819ea6c71ce0a290b7888", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed4687f698fa3c03649819ea6c71ce0a290b7888", "html_url": "https://github.com/rust-lang/rust/commit/ed4687f698fa3c03649819ea6c71ce0a290b7888"}, {"sha": "09d3b7d7a2ae23a0463fadee9ae8cb6a0fa2c4bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/09d3b7d7a2ae23a0463fadee9ae8cb6a0fa2c4bf", "html_url": "https://github.com/rust-lang/rust/commit/09d3b7d7a2ae23a0463fadee9ae8cb6a0fa2c4bf"}], "stats": {"total": 57, "additions": 29, "deletions": 28}, "files": [{"sha": "15ec75c956a50827b982a86a5832ec338ff1680b", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=2cb079ba9add594908f40d48ee2c9ac553306b33", "patch": "@@ -63,7 +63,7 @@ impl<'a> SubstituteTypeParams<'a> {\n                     let default = k.default(source_scope.db)?;\n                     Some((\n                         k,\n-                        ast::make::type_ref(\n+                        ast::make::ty(\n                             &default\n                                 .display_source_code(source_scope.db, source_scope.module()?.into())\n                                 .ok()?,"}, {"sha": "6816a2709e47c5ed949509c0ced1141dc125ca9b", "filename": "crates/ra_assists/src/handlers/early_return.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=2cb079ba9add594908f40d48ee2c9ac553306b33", "patch": "@@ -123,7 +123,7 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n                         let happy_arm = {\n                             let pat = make::tuple_struct_pat(\n                                 path,\n-                                once(make::bind_pat(make::name(\"it\")).into()),\n+                                once(make::ident_pat(make::name(\"it\")).into()),\n                             );\n                             let expr = {\n                                 let name_ref = make::name_ref(\"it\");\n@@ -136,15 +136,15 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n \n                         let sad_arm = make::match_arm(\n                             // FIXME: would be cool to use `None` or `Err(_)` if appropriate\n-                            once(make::placeholder_pat().into()),\n+                            once(make::wildcard_pat().into()),\n                             early_expression,\n                         );\n \n                         make::expr_match(cond_expr, make::match_arm_list(vec![happy_arm, sad_arm]))\n                     };\n \n                     let let_stmt = make::let_stmt(\n-                        make::bind_pat(make::name(&bound_ident.syntax().to_string())).into(),\n+                        make::ident_pat(make::name(&bound_ident.syntax().to_string())).into(),\n                         Some(match_expr),\n                     );\n                     let let_stmt = let_stmt.indent(if_indent_level);"}, {"sha": "eb216a81a11a86e4beacb94b15a80d49d97f02af", "filename": "crates/ra_assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=2cb079ba9add594908f40d48ee2c9ac553306b33", "patch": "@@ -173,7 +173,7 @@ fn replace_ast(\n                 replace_node(replacement);\n             },\n             ast::Use(use_item) => {\n-                builder.replace_ast(use_item, ast::make::use_item(replacement.left_or_else(|ut| ast::make::use_tree(path, Some(ut), None, false))));\n+                builder.replace_ast(use_item, ast::make::use_(replacement.left_or_else(|ut| ast::make::use_tree(path, Some(ut), None, false))));\n             },\n             _ => {},\n         }"}, {"sha": "6698d1a27a21b3e5f06d534878c08c88c8912b8d", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=2cb079ba9add594908f40d48ee2c9ac553306b33", "patch": "@@ -197,12 +197,11 @@ fn build_pat(db: &RootDatabase, module: hir::Module, var: hir::EnumVariant) -> O\n     // FIXME: use HIR for this; it doesn't currently expose struct vs. tuple vs. unit variants though\n     let pat: ast::Pat = match var.source(db).value.kind() {\n         ast::StructKind::Tuple(field_list) => {\n-            let pats =\n-                iter::repeat(make::placeholder_pat().into()).take(field_list.fields().count());\n+            let pats = iter::repeat(make::wildcard_pat().into()).take(field_list.fields().count());\n             make::tuple_struct_pat(path, pats).into()\n         }\n         ast::StructKind::Record(field_list) => {\n-            let pats = field_list.fields().map(|f| make::bind_pat(f.name().unwrap()).into());\n+            let pats = field_list.fields().map(|f| make::ident_pat(f.name().unwrap()).into());\n             make::record_pat(path, pats).into()\n         }\n         ast::StructKind::Unit => make::path_pat(path),"}, {"sha": "acc97e64820e43304746879ec0d86026f66b2e77", "filename": "crates/ra_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=2cb079ba9add594908f40d48ee2c9ac553306b33", "patch": "@@ -142,7 +142,7 @@ impl FunctionBuilder {\n         let fn_body = make::block_expr(vec![], Some(placeholder_expr));\n         let visibility = if self.needs_pub { Some(make::visibility_pub_crate()) } else { None };\n         let mut fn_def =\n-            make::fn_def(visibility, self.fn_name, self.type_params, self.params, fn_body);\n+            make::fn_(visibility, self.fn_name, self.type_params, self.params, fn_body);\n         let leading_ws;\n         let trailing_ws;\n "}, {"sha": "ecafb74a1e1d94e85a2c1ed28346b931851ba215", "filename": "crates/ra_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=2cb079ba9add594908f40d48ee2c9ac553306b33", "patch": "@@ -65,7 +65,7 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n                         .type_of_pat(&pat)\n                         .and_then(|ty| TryEnum::from_ty(&ctx.sema, &ty))\n                         .map(|it| it.sad_pattern())\n-                        .unwrap_or_else(|| make::placeholder_pat().into());\n+                        .unwrap_or_else(|| make::wildcard_pat().into());\n                     let else_expr = unwrap_trivial_block(else_block);\n                     make::match_arm(vec![pattern], else_expr)\n                 };"}, {"sha": "e4d436decc8c77a306973a074ef59e1dcea6ae2d", "filename": "crates/ra_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=2cb079ba9add594908f40d48ee2c9ac553306b33", "patch": "@@ -50,10 +50,10 @@ pub(crate) fn replace_let_with_if_let(acc: &mut Assists, ctx: &AssistContext) ->\n         target,\n         |edit| {\n             let with_placeholder: ast::Pat = match happy_variant {\n-                None => make::placeholder_pat().into(),\n+                None => make::wildcard_pat().into(),\n                 Some(var_name) => make::tuple_struct_pat(\n                     make::path_unqualified(make::path_segment(make::name_ref(var_name))),\n-                    once(make::placeholder_pat().into()),\n+                    once(make::wildcard_pat().into()),\n                 )\n                 .into(),\n             };"}, {"sha": "d69f2c1b0e2d13f6d1973f9ceae4752b949853aa", "filename": "crates/ra_assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=2cb079ba9add594908f40d48ee2c9ac553306b33", "patch": "@@ -52,15 +52,15 @@ pub(crate) fn replace_unwrap_with_match(acc: &mut Assists, ctx: &AssistContext)\n         target,\n         |builder| {\n             let ok_path = make::path_unqualified(make::path_segment(make::name_ref(happy_variant)));\n-            let it = make::bind_pat(make::name(\"a\")).into();\n+            let it = make::ident_pat(make::name(\"a\")).into();\n             let ok_tuple = make::tuple_struct_pat(ok_path, iter::once(it)).into();\n \n             let bind_path = make::path_unqualified(make::path_segment(make::name_ref(\"a\")));\n             let ok_arm = make::match_arm(iter::once(ok_tuple), make::expr_path(bind_path));\n \n             let unreachable_call = make::expr_unreachable();\n             let err_arm =\n-                make::match_arm(iter::once(make::placeholder_pat().into()), unreachable_call);\n+                make::match_arm(iter::once(make::wildcard_pat().into()), unreachable_call);\n \n             let match_arm_list = make::match_arm_list(vec![ok_arm, err_arm]);\n             let match_expr = make::expr_match(caller.clone(), match_arm_list)"}, {"sha": "54d5678d14dbb4219ae76d05cd6b9baddbb11199", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=2cb079ba9add594908f40d48ee2c9ac553306b33", "patch": "@@ -181,10 +181,10 @@ impl TryEnum {\n         match self {\n             TryEnum::Result => make::tuple_struct_pat(\n                 make::path_unqualified(make::path_segment(make::name_ref(\"Err\"))),\n-                iter::once(make::placeholder_pat().into()),\n+                iter::once(make::wildcard_pat().into()),\n             )\n             .into(),\n-            TryEnum::Option => make::bind_pat(make::name(\"None\")).into(),\n+            TryEnum::Option => make::ident_pat(make::name(\"None\")).into(),\n         }\n     }\n "}, {"sha": "73c0b82754e57779636a81eddeb708d7188daaf8", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=2cb079ba9add594908f40d48ee2c9ac553306b33", "patch": "@@ -78,8 +78,10 @@ pub(crate) fn diagnostics(\n             } else {\n                 let mut field_list = d.ast(db);\n                 for f in d.missed_fields.iter() {\n-                    let field =\n-                        make::record_field(make::name_ref(&f.to_string()), Some(make::expr_unit()));\n+                    let field = make::record_expr_field(\n+                        make::name_ref(&f.to_string()),\n+                        Some(make::expr_unit()),\n+                    );\n                     field_list = field_list.append_field(&field);\n                 }\n \n@@ -178,9 +180,9 @@ fn missing_struct_field_fix(\n     if new_field_type.is_unknown() {\n         return None;\n     }\n-    let new_field = make::record_field_def(\n+    let new_field = make::record_field(\n         record_expr.field_name()?,\n-        make::type_ref(&new_field_type.display_source_code(sema.db, module.into()).ok()?),\n+        make::ty(&new_field_type.display_source_code(sema.db, module.into()).ok()?),\n     );\n \n     let last_field = record_fields.fields().last()?;"}, {"sha": "5ed123f91fe048983811ac0b991723b727c1f99a", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=2cb079ba9add594908f40d48ee2c9ac553306b33", "patch": "@@ -621,7 +621,7 @@ fn single_node(element: impl Into<SyntaxElement>) -> RangeInclusive<SyntaxElemen\n #[test]\n fn test_increase_indent() {\n     let arm_list = {\n-        let arm = make::match_arm(iter::once(make::placeholder_pat().into()), make::expr_unit());\n+        let arm = make::match_arm(iter::once(make::wildcard_pat().into()), make::expr_unit());\n         make::match_arm_list(vec![arm.clone(), arm])\n     };\n     assert_eq!("}, {"sha": "254a37fe3e4709d4f343612d82c94b023f55a6cb", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb079ba9add594908f40d48ee2c9ac553306b33/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=2cb079ba9add594908f40d48ee2c9ac553306b33", "patch": "@@ -17,7 +17,7 @@ pub fn name_ref(text: &str) -> ast::NameRef {\n     ast_from_text(&format!(\"fn f() {{ {}; }}\", text))\n }\n \n-pub fn type_ref(text: &str) -> ast::Type {\n+pub fn ty(text: &str) -> ast::Type {\n     ast_from_text(&format!(\"impl {} for D {{}};\", text))\n }\n \n@@ -60,11 +60,11 @@ pub fn use_tree_list(use_trees: impl IntoIterator<Item = ast::UseTree>) -> ast::\n     ast_from_text(&format!(\"use {{{}}};\", use_trees))\n }\n \n-pub fn use_item(use_tree: ast::UseTree) -> ast::Use {\n+pub fn use_(use_tree: ast::UseTree) -> ast::Use {\n     ast_from_text(&format!(\"use {};\", use_tree))\n }\n \n-pub fn record_field(name: ast::NameRef, expr: Option<ast::Expr>) -> ast::RecordExprField {\n+pub fn record_expr_field(name: ast::NameRef, expr: Option<ast::Expr>) -> ast::RecordExprField {\n     return match expr {\n         Some(expr) => from_text(&format!(\"{}: {}\", name, expr)),\n         None => from_text(&name.to_string()),\n@@ -75,7 +75,7 @@ pub fn record_field(name: ast::NameRef, expr: Option<ast::Expr>) -> ast::RecordE\n     }\n }\n \n-pub fn record_field_def(name: ast::NameRef, ty: ast::Type) -> ast::RecordField {\n+pub fn record_field(name: ast::NameRef, ty: ast::Type) -> ast::RecordField {\n     ast_from_text(&format!(\"struct S {{ {}: {}, }}\", name, ty))\n }\n \n@@ -148,15 +148,15 @@ pub fn condition(expr: ast::Expr, pattern: Option<ast::Pat>) -> ast::Condition {\n     }\n }\n \n-pub fn bind_pat(name: ast::Name) -> ast::IdentPat {\n+pub fn ident_pat(name: ast::Name) -> ast::IdentPat {\n     return from_text(name.text());\n \n     fn from_text(text: &str) -> ast::IdentPat {\n         ast_from_text(&format!(\"fn f({}: ())\", text))\n     }\n }\n \n-pub fn placeholder_pat() -> ast::WildcardPat {\n+pub fn wildcard_pat() -> ast::WildcardPat {\n     return from_text(\"_\");\n \n     fn from_text(text: &str) -> ast::WildcardPat {\n@@ -288,7 +288,7 @@ pub fn visibility_pub_crate() -> ast::Visibility {\n     ast_from_text(\"pub(crate) struct S\")\n }\n \n-pub fn fn_def(\n+pub fn fn_(\n     visibility: Option<ast::Visibility>,\n     fn_name: ast::Name,\n     type_params: Option<ast::GenericParamList>,"}]}