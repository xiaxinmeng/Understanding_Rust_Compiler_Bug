{"sha": "a9e13fa5533df7fc004aeab00d45822eacb8461e", "node_id": "C_kwDOAAsO6NoAKGE5ZTEzZmE1NTMzZGY3ZmMwMDRhZWFiMDBkNDU4MjJlYWNiODQ2MWU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-10T22:12:35Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-17T09:03:34Z"}, "message": "Lint elided lifetimes in path on the AST.", "tree": {"sha": "6d759bc7958cc987f346f6e7f1d00b3487fc7b01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d759bc7958cc987f346f6e7f1d00b3487fc7b01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9e13fa5533df7fc004aeab00d45822eacb8461e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9e13fa5533df7fc004aeab00d45822eacb8461e", "html_url": "https://github.com/rust-lang/rust/commit/a9e13fa5533df7fc004aeab00d45822eacb8461e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9e13fa5533df7fc004aeab00d45822eacb8461e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca57bada05373ff227c661cc542e99c92b70c0ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca57bada05373ff227c661cc542e99c92b70c0ee", "html_url": "https://github.com/rust-lang/rust/commit/ca57bada05373ff227c661cc542e99c92b70c0ee"}], "stats": {"total": 433, "additions": 279, "deletions": 154}, "files": [{"sha": "9cb205074e7eaf6b9a81413042c3127e991a14bd", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -1835,7 +1835,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             // Output lifetime like `'_`:\n             for (span, node_id) in lifetimes_to_define {\n                 let param = this.fresh_lifetime_to_generic_param(span, node_id);\n-                lifetime_params.push((span, hir::LifetimeName::Implicit(false)));\n+                lifetime_params.push((span, hir::LifetimeName::Implicit));\n                 generic_params.push(param);\n             }\n             let generic_params = this.arena.alloc_from_iter(generic_params);\n@@ -2017,7 +2017,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     });\n                 let param_name = match lt.name {\n                     hir::LifetimeName::Param(param_name) => param_name,\n-                    hir::LifetimeName::Implicit(_) | hir::LifetimeName::Underscore => {\n+                    hir::LifetimeName::Implicit | hir::LifetimeName::Underscore => {\n                         hir::ParamName::Plain(lt.name.ident())\n                     }\n                     hir::LifetimeName::ImplicitObjectLifetimeDefault => {\n@@ -2397,7 +2397,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n             AnonymousLifetimeMode::ReportError => self.new_error_lifetime(None, span),\n \n-            AnonymousLifetimeMode::PassThrough => self.new_implicit_lifetime(span, false),\n+            AnonymousLifetimeMode::PassThrough => self.new_implicit_lifetime(span),\n         }\n     }\n \n@@ -2416,12 +2416,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &'s mut self,\n         span: Span,\n         count: usize,\n-        param_mode: ParamMode,\n     ) -> impl Iterator<Item = hir::Lifetime> + Captures<'a> + Captures<'s> + Captures<'hir> {\n-        (0..count).map(move |_| self.elided_path_lifetime(span, param_mode))\n+        (0..count).map(move |_| self.elided_path_lifetime(span))\n     }\n \n-    fn elided_path_lifetime(&mut self, span: Span, param_mode: ParamMode) -> hir::Lifetime {\n+    fn elided_path_lifetime(&mut self, span: Span) -> hir::Lifetime {\n         match self.anonymous_lifetime_mode {\n             AnonymousLifetimeMode::CreateParameter => {\n                 // We should have emitted E0726 when processing this path above\n@@ -2437,7 +2436,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             // lifetime. Instead, we simply create an implicit lifetime, which will be checked\n             // later, at which point a suitable error will be emitted.\n             AnonymousLifetimeMode::PassThrough | AnonymousLifetimeMode::ReportError => {\n-                self.new_implicit_lifetime(span, param_mode == ParamMode::Explicit)\n+                self.new_implicit_lifetime(span)\n             }\n         }\n     }\n@@ -2480,11 +2479,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         r\n     }\n \n-    fn new_implicit_lifetime(&mut self, span: Span, missing: bool) -> hir::Lifetime {\n+    fn new_implicit_lifetime(&mut self, span: Span) -> hir::Lifetime {\n         hir::Lifetime {\n             hir_id: self.next_id(),\n             span: self.lower_span(span),\n-            name: hir::LifetimeName::Implicit(missing),\n+            name: hir::LifetimeName::Implicit,\n         }\n     }\n }\n@@ -2587,7 +2586,7 @@ fn lifetimes_from_impl_trait_bounds(\n \n         fn visit_lifetime(&mut self, lifetime: &'v hir::Lifetime) {\n             let name = match lifetime.name {\n-                hir::LifetimeName::Implicit(_) | hir::LifetimeName::Underscore => {\n+                hir::LifetimeName::Implicit | hir::LifetimeName::Underscore => {\n                     if self.collect_elided_lifetimes {\n                         // Use `'_` for both implicit and underscore lifetimes in\n                         // `type Foo<'_> = impl SomeTrait<'_>;`."}, {"sha": "8bf4b8fcc3975347c926a41373d56f359fb65b97", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 4, "deletions": 35, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -290,47 +290,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 generic_args.span.with_lo(generic_args.span.lo() + BytePos(1)).shrink_to_lo()\n             };\n             generic_args.args = self\n-                .elided_path_lifetimes(elided_lifetime_span, expected_lifetimes, param_mode)\n+                .elided_path_lifetimes(elided_lifetime_span, expected_lifetimes)\n                 .map(GenericArg::Lifetime)\n                 .chain(generic_args.args.into_iter())\n                 .collect();\n-            // In create-parameter mode we error here because we don't want to support\n-            // deprecated impl elision in new features like impl elision and `async fn`,\n-            // both of which work using the `CreateParameter` mode:\n-            //\n-            //     impl Foo for std::cell::Ref<u32> // note lack of '_\n-            //     async fn foo(_: std::cell::Ref<u32>) { ... }\n             if let (ParamMode::Explicit, AnonymousLifetimeMode::CreateParameter) =\n                 (param_mode, self.anonymous_lifetime_mode)\n             {\n-                let anon_lt_suggestion = vec![\"'_\"; expected_lifetimes].join(\", \");\n-                let no_non_lt_args = generic_args.args.len() == expected_lifetimes;\n-                let no_bindings = generic_args.bindings.is_empty();\n-                let (incl_angl_brckt, suggestion) = if no_non_lt_args && no_bindings {\n-                    // If there are no generic args, our suggestion can include the angle brackets.\n-                    (true, format!(\"<{}>\", anon_lt_suggestion))\n-                } else {\n-                    // Otherwise we'll insert a `'_, ` right after the opening bracket.\n-                    (false, format!(\"{}, \", anon_lt_suggestion))\n-                };\n-                let insertion_sp = elided_lifetime_span.shrink_to_hi();\n-                let mut err = struct_span_err!(\n-                    self.sess,\n-                    path_span,\n-                    E0726,\n-                    \"implicit elided lifetime not allowed here\"\n-                );\n-                rustc_errors::add_elided_lifetime_in_path_suggestion(\n-                    &self.sess.source_map(),\n-                    &mut err,\n-                    expected_lifetimes,\n-                    path_span,\n-                    incl_angl_brckt,\n-                    insertion_sp,\n-                    suggestion,\n-                );\n-                err.note(\"assuming a `'static` lifetime...\");\n-                err.emit();\n+                // Late resolver should have issued the error.\n+                self.sess\n+                    .delay_span_bug(elided_lifetime_span, \"implicit lifetime not allowed here\");\n             }\n         }\n "}, {"sha": "459d4a783e40f06042bbd4f5660e5e35c53622a7", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -575,7 +575,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                 Some(RegionNameHighlight::MatchedAdtAndSegment(lifetime_span))\n             }\n \n-            hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Implicit(_) => {\n+            hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Implicit => {\n                 // In this case, the user left off the lifetime; so\n                 // they wrote something like:\n                 //"}, {"sha": "d7c5df7d8e26eed42b608e4cd20514555e3b67f5", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 10, "deletions": 28, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -1511,35 +1511,17 @@ pub fn add_elided_lifetime_in_path_suggestion(\n     path_span: Span,\n     incl_angl_brckt: bool,\n     insertion_span: Span,\n-    anon_lts: String,\n ) {\n-    let (replace_span, suggestion) = if incl_angl_brckt {\n-        (insertion_span, anon_lts)\n-    } else {\n-        // When possible, prefer a suggestion that replaces the whole\n-        // `Path<T>` expression with `Path<'_, T>`, rather than inserting `'_, `\n-        // at a point (which makes for an ugly/confusing label)\n-        if let Ok(snippet) = source_map.span_to_snippet(path_span) {\n-            // But our spans can get out of whack due to macros; if the place we think\n-            // we want to insert `'_` isn't even within the path expression's span, we\n-            // should bail out of making any suggestion rather than panicking on a\n-            // subtract-with-overflow or string-slice-out-out-bounds (!)\n-            // FIXME: can we do better?\n-            if insertion_span.lo().0 < path_span.lo().0 {\n-                return;\n-            }\n-            let insertion_index = (insertion_span.lo().0 - path_span.lo().0) as usize;\n-            if insertion_index > snippet.len() {\n-                return;\n-            }\n-            let (before, after) = snippet.split_at(insertion_index);\n-            (path_span, format!(\"{}{}{}\", before, anon_lts, after))\n-        } else {\n-            (insertion_span, anon_lts)\n-        }\n-    };\n-    diag.span_suggestion(\n-        replace_span,\n+    diag.span_label(path_span, format!(\"expected lifetime parameter{}\", pluralize!(n)));\n+    if source_map.span_to_snippet(insertion_span).is_err() {\n+        // Do not try to suggest anything if generated by a proc-macro.\n+        return;\n+    }\n+    let anon_lts = vec![\"'_\"; n].join(\", \");\n+    let suggestion =\n+        if incl_angl_brckt { format!(\"<{}>\", anon_lts) } else { format!(\"{}, \", anon_lts) };\n+    diag.span_suggestion_verbose(\n+        insertion_span.shrink_to_hi(),\n         &format!(\"indicate the anonymous lifetime{}\", pluralize!(n)),\n         suggestion,\n         Applicability::MachineApplicable,"}, {"sha": "b3de86662eb09dc71da34f0f7187bab0bf975458", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -95,7 +95,7 @@ pub enum LifetimeName {\n     /// User wrote nothing (e.g., the lifetime in `&u32`).\n     ///\n     /// The bool indicates whether the user should have written something.\n-    Implicit(bool),\n+    Implicit,\n \n     /// Implicit lifetime in a context like `dyn Foo`. This is\n     /// distinguished from implicit lifetimes elsewhere because the\n@@ -125,7 +125,7 @@ impl LifetimeName {\n     pub fn ident(&self) -> Ident {\n         match *self {\n             LifetimeName::ImplicitObjectLifetimeDefault\n-            | LifetimeName::Implicit(_)\n+            | LifetimeName::Implicit\n             | LifetimeName::Error => Ident::empty(),\n             LifetimeName::Underscore => Ident::with_dummy_span(kw::UnderscoreLifetime),\n             LifetimeName::Static => Ident::with_dummy_span(kw::StaticLifetime),\n@@ -136,7 +136,7 @@ impl LifetimeName {\n     pub fn is_elided(&self) -> bool {\n         match self {\n             LifetimeName::ImplicitObjectLifetimeDefault\n-            | LifetimeName::Implicit(_)\n+            | LifetimeName::Implicit\n             | LifetimeName::Underscore => true,\n \n             // It might seem surprising that `Fresh(_)` counts as"}, {"sha": "8689e2c2afab36fd504eaf3c203bc09226bb8872", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -528,7 +528,7 @@ pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime\n         | LifetimeName::Param(ParamName::Error)\n         | LifetimeName::Static\n         | LifetimeName::Error\n-        | LifetimeName::Implicit(_)\n+        | LifetimeName::Implicit\n         | LifetimeName::ImplicitObjectLifetimeDefault\n         | LifetimeName::Underscore => {}\n     }"}, {"sha": "152c53dac7ff8d0790927205cf418116d336d06a", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -21,7 +21,8 @@ use crate::passes::{EarlyLintPassObject, LateLintPassObject};\n use rustc_ast::util::unicode::TEXT_FLOW_CONTROL_CHARS;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n-use rustc_errors::{struct_span_err, Applicability, MultiSpan, SuggestionStyle};\n+use rustc_errors::{add_elided_lifetime_in_path_suggestion, struct_span_err};\n+use rustc_errors::{Applicability, MultiSpan, SuggestionStyle};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::{CrateNum, DefId};\n@@ -665,6 +666,21 @@ pub trait LintContext: Sized {\n                 ) => {\n                     db.span_note(span_def, \"the macro is defined here\");\n                 }\n+                BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n+                    n,\n+                    path_span,\n+                    incl_angl_brckt,\n+                    insertion_span,\n+                ) => {\n+                    add_elided_lifetime_in_path_suggestion(\n+                        sess.source_map(),\n+                        &mut db,\n+                        n,\n+                        path_span,\n+                        incl_angl_brckt,\n+                        insertion_span,\n+                    );\n+                }\n                 BuiltinLintDiagnostics::UnknownCrateTypes(span, note, sugg) => {\n                     db.span_suggestion(span, &note, sugg, Applicability::MaybeIncorrect);\n                 }"}, {"sha": "b4262f184c8c43bc294cdfab261af6dd83872976", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -284,6 +284,11 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         ast_visit::walk_path(self, p);\n     }\n \n+    fn visit_path_segment(&mut self, path_span: Span, s: &'a ast::PathSegment) {\n+        self.check_id(s.id);\n+        ast_visit::walk_path_segment(self, path_span, s);\n+    }\n+\n     fn visit_attribute(&mut self, attr: &'a ast::Attribute) {\n         run_early_pass!(self, check_attribute, attr);\n     }"}, {"sha": "4debbf26be63b1063c7c9dc855f0153662416756", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -418,6 +418,7 @@ pub enum BuiltinLintDiagnostics {\n     AbsPathWithModule(Span),\n     ProcMacroDeriveResolutionFallback(Span),\n     MacroExpandedMacroExportsAccessedByAbsolutePaths(Span),\n+    ElidedLifetimesInPaths(usize, Span, bool, Span),\n     UnknownCrateTypes(Span, String, String),\n     UnusedImports(String, Vec<(Span, String)>, Option<Span>),\n     RedundantImport(Vec<(Span, bool)>, Ident),"}, {"sha": "063b15e643d9c96f5f27bb1a6ba597e40bfe1f66", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -521,11 +521,10 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         // while the current crate doesn't have a valid `crate_name`.\n                         if crate_name != kw::Empty {\n                             // `crate_name` should not be interpreted as relative.\n-                            module_path.push(Segment {\n-                                ident: Ident { name: kw::PathRoot, span: source.ident.span },\n-                                id: Some(self.r.next_node_id()),\n-                                has_generic_args: false,\n-                            });\n+                            module_path.push(Segment::from_ident_and_id(\n+                                Ident { name: kw::PathRoot, span: source.ident.span },\n+                                self.r.next_node_id(),\n+                            ));\n                             source.ident.name = crate_name;\n                         }\n                         if rename.is_none() {"}, {"sha": "84fe0ec83d26c3c075dc332a7b7982f03d8e655a", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -1402,7 +1402,7 @@ impl<'a> Resolver<'a> {\n         let mut allow_super = true;\n         let mut second_binding = None;\n \n-        for (i, &Segment { ident, id, has_generic_args: _ }) in path.iter().enumerate() {\n+        for (i, &Segment { ident, id, .. }) in path.iter().enumerate() {\n             debug!(\"resolve_path ident {} {:?} {:?}\", i, ident, id);\n             let record_segment_res = |this: &mut Self, res| {\n                 if finalize.is_some() {"}, {"sha": "9bc5d63ca179e0b580d1645dd5db690dcd7940e8", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 131, "deletions": 1, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -21,10 +21,11 @@ use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind, PartialRes, PerNS};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::{PrimTy, TraitCandidate};\n+use rustc_middle::ty::DefIdTree;\n use rustc_middle::{bug, span_bug};\n use rustc_session::lint;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::Span;\n+use rustc_span::{BytePos, Span};\n use smallvec::{smallvec, SmallVec};\n \n use rustc_span::source_map::{respan, Spanned};\n@@ -1167,6 +1168,134 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.resolve_anonymous_lifetime(&lt, true);\n     }\n \n+    #[tracing::instrument(level = \"debug\", skip(self))]\n+    fn resolve_elided_lifetimes_in_path(\n+        &mut self,\n+        path_id: NodeId,\n+        partial_res: PartialRes,\n+        path: &[Segment],\n+        source: PathSource<'_>,\n+        finalize: Finalize,\n+    ) {\n+        let Some(path_span) = finalize.path_span() else {\n+            return;\n+        };\n+        let proj_start = path.len() - partial_res.unresolved_segments();\n+        for (i, segment) in path.iter().enumerate() {\n+            if segment.has_lifetime_args {\n+                continue;\n+            }\n+            let Some(segment_id) = segment.id else {\n+                continue;\n+            };\n+\n+            // Figure out if this is a type/trait segment,\n+            // which may need lifetime elision performed.\n+            let type_def_id = match partial_res.base_res() {\n+                Res::Def(DefKind::AssocTy, def_id) if i + 2 == proj_start => {\n+                    self.r.parent(def_id).unwrap()\n+                }\n+                Res::Def(DefKind::Variant, def_id) if i + 1 == proj_start => {\n+                    self.r.parent(def_id).unwrap()\n+                }\n+                Res::Def(DefKind::Struct, def_id)\n+                | Res::Def(DefKind::Union, def_id)\n+                | Res::Def(DefKind::Enum, def_id)\n+                | Res::Def(DefKind::TyAlias, def_id)\n+                | Res::Def(DefKind::Trait, def_id)\n+                    if i + 1 == proj_start =>\n+                {\n+                    def_id\n+                }\n+                _ => continue,\n+            };\n+\n+            let expected_lifetimes = self.r.item_generics_num_lifetimes(type_def_id);\n+            if expected_lifetimes == 0 {\n+                continue;\n+            }\n+\n+            let missing = match source {\n+                PathSource::Trait(..) | PathSource::TraitItem(..) | PathSource::Type => true,\n+                PathSource::Expr(..)\n+                | PathSource::Pat\n+                | PathSource::Struct\n+                | PathSource::TupleStruct(..) => false,\n+            };\n+            let mut error = false;\n+            for rib in self.lifetime_ribs.iter().rev() {\n+                match rib.kind {\n+                    // In create-parameter mode we error here because we don't want to support\n+                    // deprecated impl elision in new features like impl elision and `async fn`,\n+                    // both of which work using the `CreateParameter` mode:\n+                    //\n+                    //     impl Foo for std::cell::Ref<u32> // note lack of '_\n+                    //     async fn foo(_: std::cell::Ref<u32>) { ... }\n+                    LifetimeRibKind::AnonymousCreateParameter => {\n+                        error = true;\n+                        break;\n+                    }\n+                    // `PassThrough` is the normal case.\n+                    // `new_error_lifetime`, which would usually be used in the case of `ReportError`,\n+                    // is unsuitable here, as these can occur from missing lifetime parameters in a\n+                    // `PathSegment`, for which there is no associated `'_` or `&T` with no explicit\n+                    // lifetime. Instead, we simply create an implicit lifetime, which will be checked\n+                    // later, at which point a suitable error will be emitted.\n+                    LifetimeRibKind::AnonymousPassThrough\n+                    | LifetimeRibKind::AnonymousReportError\n+                    | LifetimeRibKind::Item => break,\n+                    _ => {}\n+                }\n+            }\n+\n+            if !missing {\n+                continue;\n+            }\n+\n+            let elided_lifetime_span = if segment.has_generic_args {\n+                // If there are brackets, but not generic arguments, then use the opening bracket\n+                segment.args_span.with_hi(segment.args_span.lo() + BytePos(1))\n+            } else {\n+                // If there are no brackets, use the identifier span.\n+                // HACK: we use find_ancestor_inside to properly suggest elided spans in paths\n+                // originating from macros, since the segment's span might be from a macro arg.\n+                segment.ident.span.find_ancestor_inside(path_span).unwrap_or(path_span)\n+            };\n+            if error {\n+                let sess = self.r.session;\n+                let mut err = rustc_errors::struct_span_err!(\n+                    sess,\n+                    path_span,\n+                    E0726,\n+                    \"implicit elided lifetime not allowed here\"\n+                );\n+                rustc_errors::add_elided_lifetime_in_path_suggestion(\n+                    sess.source_map(),\n+                    &mut err,\n+                    expected_lifetimes,\n+                    path_span,\n+                    !segment.has_generic_args,\n+                    elided_lifetime_span,\n+                );\n+                err.note(\"assuming a `'static` lifetime...\");\n+                err.emit();\n+            } else {\n+                self.r.lint_buffer.buffer_lint_with_diagnostic(\n+                    lint::builtin::ELIDED_LIFETIMES_IN_PATHS,\n+                    segment_id,\n+                    elided_lifetime_span,\n+                    \"hidden lifetime parameters in types are deprecated\",\n+                    lint::BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n+                        expected_lifetimes,\n+                        path_span,\n+                        !segment.has_generic_args,\n+                        elided_lifetime_span,\n+                    ),\n+                );\n+            }\n+        }\n+    }\n+\n     /// Searches the current set of local scopes for labels. Returns the `NodeId` of the resolved\n     /// label and reports an error if the label is not found or is unreachable.\n     fn resolve_label(&self, mut label: Ident) -> Option<NodeId> {\n@@ -2528,6 +2657,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             self.r.record_partial_res(id, partial_res);\n         }\n \n+        self.resolve_elided_lifetimes_in_path(id, partial_res, path, source, finalize);\n         partial_res\n     }\n "}, {"sha": "0bae141ce26c85759c179ef0617b68ddbb4c2e24", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -1986,38 +1986,6 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         }\n     }\n \n-    crate fn report_elided_lifetime_in_ty(&self, lifetime_refs: &[&hir::Lifetime]) {\n-        let Some(missing_lifetime) = lifetime_refs.iter().find(|lt| {\n-            lt.name == hir::LifetimeName::Implicit(true)\n-        }) else { return };\n-\n-        let mut spans: Vec<_> = lifetime_refs.iter().map(|lt| lt.span).collect();\n-        spans.sort();\n-        let mut spans_dedup = spans.clone();\n-        spans_dedup.dedup();\n-        let spans_with_counts: Vec<_> = spans_dedup\n-            .into_iter()\n-            .map(|sp| (sp, spans.iter().filter(|nsp| *nsp == &sp).count()))\n-            .collect();\n-\n-        self.tcx.struct_span_lint_hir(\n-            rustc_session::lint::builtin::ELIDED_LIFETIMES_IN_PATHS,\n-            missing_lifetime.hir_id,\n-            spans,\n-            |lint| {\n-                let mut db = lint.build(\"hidden lifetime parameters in types are deprecated\");\n-                self.add_missing_lifetime_specifiers_label(\n-                    &mut db,\n-                    spans_with_counts,\n-                    &FxHashSet::from_iter([kw::UnderscoreLifetime]),\n-                    Vec::new(),\n-                    &[],\n-                );\n-                db.emit();\n-            },\n-        );\n-    }\n-\n     // FIXME(const_generics): This patches over an ICE caused by non-'static lifetimes in const\n     // generics. We are disallowing this until we can decide on how we want to handle non-'static\n     // lifetimes in const generics. See issue #74052 for discussion.\n@@ -2452,9 +2420,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         );\n         let is_allowed_lifetime = matches!(\n             lifetime_ref.name,\n-            hir::LifetimeName::Implicit(_)\n-                | hir::LifetimeName::Static\n-                | hir::LifetimeName::Underscore\n+            hir::LifetimeName::Implicit | hir::LifetimeName::Static | hir::LifetimeName::Underscore\n         );\n \n         if !self.tcx.lazy_normalization() && is_anon_const && !is_allowed_lifetime {"}, {"sha": "d5f2e2db1e39b1851754fbbc0fed7d35c36b81fb", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -921,7 +921,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     }\n                 });\n                 match lifetime.name {\n-                    LifetimeName::Implicit(_) => {\n+                    LifetimeName::Implicit => {\n                         // For types like `dyn Foo`, we should\n                         // generate a special form of elided.\n                         span_bug!(ty.span, \"object-lifetime-default expected, not implicit\",);\n@@ -2955,9 +2955,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let error = loop {\n             match *scope {\n                 // Do not assign any resolution, it will be inferred.\n-                Scope::Body { .. } => break Ok(()),\n+                Scope::Body { .. } => return,\n \n-                Scope::Root => break Err(None),\n+                Scope::Root => break None,\n \n                 Scope::Binder { s, ref lifetimes, scope_type, .. } => {\n                     // collect named lifetimes for suggestions\n@@ -2984,15 +2984,15 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n                         self.insert_lifetime(lifetime_ref, lifetime);\n                     }\n-                    break Ok(());\n+                    return;\n                 }\n \n                 Scope::Elision { elide: Elide::Exact(l), .. } => {\n                     let lifetime = l.shifted(late_depth);\n                     for lifetime_ref in lifetime_refs {\n                         self.insert_lifetime(lifetime_ref, lifetime);\n                     }\n-                    break Ok(());\n+                    return;\n                 }\n \n                 Scope::Elision { elide: Elide::Error(ref e), ref s, .. } => {\n@@ -3017,10 +3017,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             _ => break,\n                         }\n                     }\n-                    break Err(Some(&e[..]));\n+                    break Some(&e[..]);\n                 }\n \n-                Scope::Elision { elide: Elide::Forbid, .. } => break Err(None),\n+                Scope::Elision { elide: Elide::Forbid, .. } => break None,\n \n                 Scope::ObjectLifetimeDefault { s, .. }\n                 | Scope::Supertrait { s, .. }\n@@ -3030,14 +3030,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         };\n \n-        let error = match error {\n-            Ok(()) => {\n-                self.report_elided_lifetime_in_ty(lifetime_refs);\n-                return;\n-            }\n-            Err(error) => error,\n-        };\n-\n         // If we specifically need the `scope_for_path` map, then we're in the\n         // diagnostic pass and we don't want to emit more errors.\n         if self.map.scope_for_path.is_some() {\n@@ -3174,7 +3166,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                                 ))\n                                 .emit();\n                         }\n-                        hir::LifetimeName::Param(_) | hir::LifetimeName::Implicit(_) => {\n+                        hir::LifetimeName::Param(_) | hir::LifetimeName::Implicit => {\n                             self.resolve_lifetime_ref(lt);\n                         }\n                         hir::LifetimeName::ImplicitObjectLifetimeDefault => {"}, {"sha": "eed54370e23310bcc61b3071b6915ab2bb5f6f68", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -28,7 +28,7 @@ pub use rustc_hir::def::{Namespace, PerNS};\n use rustc_arena::{DroplessArena, TypedArena};\n use rustc_ast::node_id::NodeMap;\n use rustc_ast::{self as ast, NodeId, CRATE_NODE_ID};\n-use rustc_ast::{Crate, Expr, ExprKind, LitKind, Path};\n+use rustc_ast::{AngleBracketedArg, Crate, Expr, ExprKind, GenericArg, GenericArgs, LitKind, Path};\n use rustc_ast_lowering::ResolverAstLowering;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::intern::Interned;\n@@ -283,6 +283,9 @@ pub struct Segment {\n     /// Signals whether this `PathSegment` has generic arguments. Used to avoid providing\n     /// nonsensical suggestions.\n     has_generic_args: bool,\n+    /// Signals whether this `PathSegment` has lifetime arguments.\n+    has_lifetime_args: bool,\n+    args_span: Span,\n }\n \n impl Segment {\n@@ -291,7 +294,23 @@ impl Segment {\n     }\n \n     fn from_ident(ident: Ident) -> Segment {\n-        Segment { ident, id: None, has_generic_args: false }\n+        Segment {\n+            ident,\n+            id: None,\n+            has_generic_args: false,\n+            has_lifetime_args: false,\n+            args_span: DUMMY_SP,\n+        }\n+    }\n+\n+    fn from_ident_and_id(ident: Ident, id: NodeId) -> Segment {\n+        Segment {\n+            ident,\n+            id: Some(id),\n+            has_generic_args: false,\n+            has_lifetime_args: false,\n+            args_span: DUMMY_SP,\n+        }\n     }\n \n     fn names_to_string(segments: &[Segment]) -> String {\n@@ -301,7 +320,28 @@ impl Segment {\n \n impl<'a> From<&'a ast::PathSegment> for Segment {\n     fn from(seg: &'a ast::PathSegment) -> Segment {\n-        Segment { ident: seg.ident, id: Some(seg.id), has_generic_args: seg.args.is_some() }\n+        let has_generic_args = seg.args.is_some();\n+        let (args_span, has_lifetime_args) = if let Some(args) = seg.args.as_deref() {\n+            match args {\n+                GenericArgs::AngleBracketed(args) => {\n+                    let found_lifetimes = args\n+                        .args\n+                        .iter()\n+                        .any(|arg| matches!(arg, AngleBracketedArg::Arg(GenericArg::Lifetime(_))));\n+                    (args.span, found_lifetimes)\n+                }\n+                GenericArgs::Parenthesized(args) => (args.span, true),\n+            }\n+        } else {\n+            (DUMMY_SP, false)\n+        };\n+        Segment {\n+            ident: seg.ident,\n+            id: Some(seg.id),\n+            has_generic_args,\n+            has_lifetime_args,\n+            args_span,\n+        }\n     }\n }\n "}, {"sha": "5e0c8c299891093d2067028a0bd25e7ad30bab06", "filename": "src/test/ui/async-await/async-fn-path-elision.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.stderr?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -2,9 +2,13 @@ error[E0726]: implicit elided lifetime not allowed here\n   --> $DIR/async-fn-path-elision.rs:5:20\n    |\n LL | async fn error(lt: HasLifetime) {\n-   |                    ^^^^^^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n+   |                    ^^^^^^^^^^^ expected lifetime parameter\n    |\n    = note: assuming a `'static` lifetime...\n+help: indicate the anonymous lifetime\n+   |\n+LL | async fn error(lt: HasLifetime<'_>) {\n+   |                               ++++\n \n error: aborting due to previous error\n "}, {"sha": "0b7d3f1e851e385785915daa7eee142e45e1bea0", "filename": "src/test/ui/impl-header-lifetime-elision/path-elided.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fpath-elided.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fpath-elided.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fpath-elided.stderr?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -2,9 +2,13 @@ error[E0726]: implicit elided lifetime not allowed here\n   --> $DIR/path-elided.rs:7:18\n    |\n LL | impl MyTrait for Foo {\n-   |                  ^^^- help: indicate the anonymous lifetime: `<'_>`\n+   |                  ^^^ expected lifetime parameter\n    |\n    = note: assuming a `'static` lifetime...\n+help: indicate the anonymous lifetime\n+   |\n+LL | impl MyTrait for Foo<'_> {\n+   |                     ++++\n \n error: aborting due to previous error\n "}, {"sha": "412bba6be7167a2af0c5ca8cf1d8c7a9daa8b0fb", "filename": "src/test/ui/impl-header-lifetime-elision/trait-elided.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.stderr?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -2,9 +2,13 @@ error[E0726]: implicit elided lifetime not allowed here\n   --> $DIR/trait-elided.rs:5:6\n    |\n LL | impl MyTrait for u32 {}\n-   |      ^^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n+   |      ^^^^^^^ expected lifetime parameter\n    |\n    = note: assuming a `'static` lifetime...\n+help: indicate the anonymous lifetime\n+   |\n+LL | impl MyTrait<'_> for u32 {}\n+   |             ++++\n \n error: aborting due to previous error\n "}, {"sha": "46b9fd541adfa59f07df1d46b90611b4cd2594c1", "filename": "src/test/ui/issues/issue-10412.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -44,9 +44,13 @@ error[E0726]: implicit elided lifetime not allowed here\n   --> $DIR/issue-10412.rs:7:13\n    |\n LL | impl<'self> Serializable<str> for &'self str {\n-   |             ^^^^^^^^^^^^^^^^^ help: indicate the anonymous lifetime: `Serializable<'_, str>`\n+   |             ^^^^^^^^^^^^^^^^^ expected lifetime parameter\n    |\n    = note: assuming a `'static` lifetime...\n+help: indicate the anonymous lifetime\n+   |\n+LL | impl<'self> Serializable<'_, str> for &'self str {\n+   |                          +++\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/issue-10412.rs:7:13"}, {"sha": "6ccf008c003e4182b2f0adbd14d5084392e5ce40", "filename": "src/test/ui/lifetimes/issue-91763.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/src%2Ftest%2Fui%2Flifetimes%2Fissue-91763.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/src%2Ftest%2Fui%2Flifetimes%2Fissue-91763.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-91763.stderr?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -2,13 +2,17 @@ error: hidden lifetime parameters in types are deprecated\n   --> $DIR/issue-91763.rs:8:20\n    |\n LL | fn f() -> Ptr<Thing>;\n-   |                    ^ expected named lifetime parameter\n+   |                    ^ expected lifetime parameter\n    |\n note: the lint level is defined here\n   --> $DIR/issue-91763.rs:3:9\n    |\n LL | #![deny(elided_lifetimes_in_paths)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: indicate the anonymous lifetime\n+   |\n+LL | fn f() -> Ptr<Thing><'_>;\n+   |                     ++++\n \n error: aborting due to previous error\n "}, {"sha": "ac98b5896ca7bfade498e1ebc03b64a7d1154565", "filename": "src/test/ui/lint/force-warn/allowed-by-default-lint.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-by-default-lint.stderr?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -2,13 +2,13 @@ warning: hidden lifetime parameters in types are deprecated\n   --> $DIR/allowed-by-default-lint.rs:9:12\n    |\n LL | fn foo(x: &Foo) {}\n-   |            ^^^ expected named lifetime parameter\n+   |            ^^^ expected lifetime parameter\n    |\n    = note: requested on the command line with `--force-warn elided-lifetimes-in-paths`\n-help: consider using the `'_` lifetime\n+help: indicate the anonymous lifetime\n    |\n LL | fn foo(x: &Foo<'_>) {}\n-   |            ~~~~~~~\n+   |               ++++\n \n warning: 1 warning emitted\n "}, {"sha": "da1c740c4a3448830b1b634edbb7d61e8537235c", "filename": "src/test/ui/lint/reasons.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/src%2Ftest%2Fui%2Flint%2Freasons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/src%2Ftest%2Fui%2Flint%2Freasons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons.rs?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -19,9 +19,9 @@ pub struct CheaterDetectionMechanism {}\n impl fmt::Debug for CheaterDetectionMechanism {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         //~^ WARN hidden lifetime parameters in types are deprecated\n-        //~| NOTE expected named lifetime parameter\n+        //~| NOTE expected lifetime parameter\n         //~| NOTE explicit anonymous lifetimes aid\n-        //~| HELP consider using the `'_` lifetime\n+        //~| HELP indicate the anonymous lifetime\n         fmt.debug_struct(\"CheaterDetectionMechanism\").finish()\n     }\n }"}, {"sha": "cd8412153f101475ef168d61d5c47a2755249164", "filename": "src/test/ui/lint/reasons.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/src%2Ftest%2Fui%2Flint%2Freasons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/src%2Ftest%2Fui%2Flint%2Freasons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons.stderr?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -2,18 +2,20 @@ warning: hidden lifetime parameters in types are deprecated\n   --> $DIR/reasons.rs:20:34\n    |\n LL |     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-   |                                  ^^^^^^^^^ expected named lifetime parameter\n+   |                             -----^^^^^^^^^\n+   |                             |\n+   |                             expected lifetime parameter\n    |\n    = note: explicit anonymous lifetimes aid reasoning about ownership\n note: the lint level is defined here\n   --> $DIR/reasons.rs:4:9\n    |\n LL | #![warn(elided_lifetimes_in_paths,\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: consider using the `'_` lifetime\n+help: indicate the anonymous lifetime\n    |\n LL |     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-   |                                  ~~~~~~~~~~~~~\n+   |                                           ++++\n \n warning: variable `Social_exchange_psychology` should have a snake case name\n   --> $DIR/reasons.rs:30:9"}, {"sha": "16d198725523e0436817ef0c5144e3a3a3fa1311", "filename": "src/test/ui/wf/wf-in-foreign-fn-decls-issue-80468.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9e13fa5533df7fc004aeab00d45822eacb8461e/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9e13fa5533df7fc004aeab00d45822eacb8461e/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr?ref=a9e13fa5533df7fc004aeab00d45822eacb8461e", "patch": "@@ -2,9 +2,13 @@ error[E0726]: implicit elided lifetime not allowed here\n   --> $DIR/wf-in-foreign-fn-decls-issue-80468.rs:13:16\n    |\n LL | impl Trait for Ref {}\n-   |                ^^^- help: indicate the anonymous lifetime: `<'_>`\n+   |                ^^^ expected lifetime parameter\n    |\n    = note: assuming a `'static` lifetime...\n+help: indicate the anonymous lifetime\n+   |\n+LL | impl Trait for Ref<'_> {}\n+   |                   ++++\n \n error: incompatible lifetime on type\n   --> $DIR/wf-in-foreign-fn-decls-issue-80468.rs:16:21"}]}