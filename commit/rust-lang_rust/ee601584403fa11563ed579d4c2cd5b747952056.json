{"sha": "ee601584403fa11563ed579d4c2cd5b747952056", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNjAxNTg0NDAzZmExMTU2M2VkNTc5ZDRjMmNkNWI3NDc5NTIwNTY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-02T19:51:24Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-02T19:51:24Z"}, "message": "add raw-addr-of variant to mir_raw_fat_ptr", "tree": {"sha": "88709ab6a7a4f87cd634e94034fd61b02a246641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88709ab6a7a4f87cd634e94034fd61b02a246641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee601584403fa11563ed579d4c2cd5b747952056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee601584403fa11563ed579d4c2cd5b747952056", "html_url": "https://github.com/rust-lang/rust/commit/ee601584403fa11563ed579d4c2cd5b747952056", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee601584403fa11563ed579d4c2cd5b747952056/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cef68945722fa593a4a1314f4a2f1ff095aab4f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cef68945722fa593a4a1314f4a2f1ff095aab4f4", "html_url": "https://github.com/rust-lang/rust/commit/cef68945722fa593a4a1314f4a2f1ff095aab4f4"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "aa2b499b027dc32125d9564dd064e33504379e00", "filename": "src/test/ui/mir/mir_raw_fat_ptr.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ee601584403fa11563ed579d4c2cd5b747952056/src%2Ftest%2Fui%2Fmir%2Fmir_raw_fat_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee601584403fa11563ed579d4c2cd5b747952056/src%2Ftest%2Fui%2Fmir%2Fmir_raw_fat_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_raw_fat_ptr.rs?ref=ee601584403fa11563ed579d4c2cd5b747952056", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // check raw fat pointer ops in mir\n // FIXME: please improve this when we get monomorphization support\n+#![feature(raw_ref_op)]\n \n use std::mem;\n \n@@ -104,7 +105,7 @@ impl<T> Foo for T {\n \n struct S<T:?Sized>(u32, T);\n \n-fn main() {\n+fn main_ref() {\n     let array = [0,1,2,3,4];\n     let array2 = [5,6,7,8,9];\n \n@@ -156,3 +157,59 @@ fn main() {\n     assert!(simple_eq(&0u8 as *const _, &0u8 as *const _));\n     assert!(!simple_eq(&0u8 as *const _, &1u8 as *const _));\n }\n+\n+// similar to above, but using &raw\n+fn main_raw() {\n+    let array = [0,1,2,3,4];\n+    let array2 = [5,6,7,8,9];\n+\n+    // fat ptr comparison: addr then extra\n+\n+    // check ordering for arrays\n+    let mut ptrs: Vec<*const [u8]> = vec![\n+        &raw const array[0..0], &raw const array[0..1], &raw const array, &raw const array[1..]\n+    ];\n+\n+    let array_addr = &raw const array as *const u8 as usize;\n+    let array2_addr = &raw const array2 as *const u8 as usize;\n+    if array2_addr < array_addr {\n+        ptrs.insert(0, &raw const array2);\n+    } else {\n+        ptrs.push(&raw const array2);\n+    }\n+    assert_inorder(&ptrs, compare_au8);\n+\n+    let u8_ = (0u8, 1u8);\n+    let u32_ = (4u32, 5u32);\n+\n+    // check ordering for ptrs\n+    let buf: &mut [*const dyn Foo] = &mut [\n+        &raw const u8_, &raw const u8_.0,\n+        &raw const u32_, &raw const u32_.0,\n+    ];\n+    buf.sort_by(|u,v| {\n+        let u : [*const (); 2] = unsafe { mem::transmute(*u) };\n+        let v : [*const (); 2] = unsafe { mem::transmute(*v) };\n+        u.cmp(&v)\n+    });\n+    assert_inorder(buf, compare_foo);\n+\n+    // check ordering for structs containing arrays\n+    let ss: (S<[u8; 2]>,\n+             S<[u8; 3]>,\n+             S<[u8; 2]>) = (\n+        S(7, [8, 9]),\n+        S(10, [11, 12, 13]),\n+        S(4, [5, 6])\n+    );\n+    assert_inorder(&[\n+        &raw const ss.0 as *const S<[u8]>,\n+        &raw const ss.1 as *const S<[u8]>,\n+        &raw const ss.2 as *const S<[u8]>\n+            ], compare_su8);\n+}\n+\n+fn main() {\n+    main_ref();\n+    main_raw();\n+}"}]}