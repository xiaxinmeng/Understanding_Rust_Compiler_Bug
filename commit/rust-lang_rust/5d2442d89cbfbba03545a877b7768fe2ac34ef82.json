{"sha": "5d2442d89cbfbba03545a877b7768fe2ac34ef82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMjQ0MmQ4OWNiZmJiYTAzNTQ1YTg3N2I3NzY4ZmUyYWMzNGVmODI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-09T19:51:34Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-10T03:00:16Z"}, "message": "rt: Add upcall_call_shim_on_rust_stack", "tree": {"sha": "8134506703c9fd682a3e768f73ee349e48799179", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8134506703c9fd682a3e768f73ee349e48799179"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d2442d89cbfbba03545a877b7768fe2ac34ef82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2442d89cbfbba03545a877b7768fe2ac34ef82", "html_url": "https://github.com/rust-lang/rust/commit/5d2442d89cbfbba03545a877b7768fe2ac34ef82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d2442d89cbfbba03545a877b7768fe2ac34ef82/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79b1563abb32a385724bbe5ce6b4cdbee9ae5dc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/79b1563abb32a385724bbe5ce6b4cdbee9ae5dc7", "html_url": "https://github.com/rust-lang/rust/commit/79b1563abb32a385724bbe5ce6b4cdbee9ae5dc7"}], "stats": {"total": 70, "additions": 67, "deletions": 3}, "files": [{"sha": "6d61065d551e0e778c87cd03b7cd7d8f34d3ab96", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5d2442d89cbfbba03545a877b7768fe2ac34ef82/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5d2442d89cbfbba03545a877b7768fe2ac34ef82/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=5d2442d89cbfbba03545a877b7768fe2ac34ef82", "patch": "@@ -90,7 +90,8 @@ rust_task::rust_task(rust_task_thread *thread, rust_task_list *state,\n     cc_counter(0),\n     total_stack_sz(0),\n     c_stack(NULL),\n-    next_c_sp(0)\n+    next_c_sp(0),\n+    next_rust_sp(0)\n {\n     LOGPTR(thread, \"new task\", (uintptr_t)this);\n     DLOG(thread, task, \"sizeof(task) = %d (0x%x)\", sizeof *this, sizeof *this);\n@@ -658,6 +659,7 @@ rust_task::prev_stack() {\n \n void\n rust_task::record_stack_limit() {\n+    I(thread, stk);\n     // The function prolog compares the amount of stack needed to the end of\n     // the stack. As an optimization, when the frame size is less than 256\n     // bytes, it will simply compare %esp to to the stack limit instead of\n@@ -732,18 +734,40 @@ rust_task::config_notify(chan_handle chan) {\n \n extern \"C\" void __morestack(void *args, void *fn_ptr, uintptr_t stack_ptr);\n \n+static uintptr_t\n+sanitize_next_sp(uintptr_t next_sp) {\n+\n+    // Since I'm not precisely sure where the next stack pointer sits in\n+    // relation to where the context switch actually happened, nor in relation\n+    // to the amount of stack needed for calling __morestack I've added some\n+    // extra bytes here.\n+\n+    // FIXME: On the rust stack this potentially puts is quite far into the\n+    // red zone. Might want to just allocate a new rust stack every time we\n+    // switch back to rust.\n+    const uintptr_t padding = 16;\n+\n+    return align_down(next_sp - padding);\n+}\n+\n void\n rust_task::call_on_c_stack(void *args, void *fn_ptr) {\n     I(thread, on_rust_stack());\n \n+    next_rust_sp = get_sp();\n+\n     bool borrowed_a_c_stack = false;\n+    uintptr_t sp;\n     if (c_stack == NULL) {\n         c_stack = thread->borrow_c_stack();\n         next_c_sp = align_down(c_stack->end);\n+        sp = next_c_sp;\n         borrowed_a_c_stack = true;\n+    } else {\n+        sp = sanitize_next_sp(next_c_sp);\n     }\n \n-    __morestack(args, fn_ptr, next_c_sp);\n+    __morestack(args, fn_ptr, sp);\n \n     // Note that we may not actually get here if we threw an exception,\n     // in which case we will return the c stack when the exception is caught.\n@@ -752,6 +776,18 @@ rust_task::call_on_c_stack(void *args, void *fn_ptr) {\n     }\n }\n \n+void\n+rust_task::call_on_rust_stack(void *args, void *fn_ptr) {\n+    I(thread, !on_rust_stack());\n+    I(thread, next_rust_sp);\n+\n+    next_c_sp = get_sp();\n+\n+    uintptr_t sp = sanitize_next_sp(next_rust_sp);\n+\n+    __morestack(args, fn_ptr, sp);\n+}\n+\n void\n rust_task::return_c_stack() {\n     I(thread, on_rust_stack());"}, {"sha": "0a6704b64ccde96fe8fae5339a06e7b39b8d3211", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d2442d89cbfbba03545a877b7768fe2ac34ef82/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/5d2442d89cbfbba03545a877b7768fe2ac34ef82/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=5d2442d89cbfbba03545a877b7768fe2ac34ef82", "patch": "@@ -110,6 +110,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     // The stack used for running C code, borrowed from the scheduler thread\n     stk_seg *c_stack;\n     uintptr_t next_c_sp;\n+    uintptr_t next_rust_sp;\n \n     // Called when the atomic refcount reaches zero\n     void delete_this();\n@@ -194,6 +195,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     void config_notify(chan_handle chan);\n \n     void call_on_c_stack(void *args, void *fn_ptr);\n+    void call_on_rust_stack(void *args, void *fn_ptr);\n };\n \n //"}, {"sha": "8751a4b13e5fc7ff2bc96b40a12d647b8796a5c4", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5d2442d89cbfbba03545a877b7768fe2ac34ef82/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5d2442d89cbfbba03545a877b7768fe2ac34ef82/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=5d2442d89cbfbba03545a877b7768fe2ac34ef82", "patch": "@@ -71,13 +71,38 @@ upcall_call_shim_on_c_stack(void *args, void *fn_ptr) {\n     try {\n         task->call_on_c_stack(args, fn_ptr);\n     } catch (...) {\n-        A(task->thread, false, \"Native code threw an exception\");\n+        LOG_ERR(task, task, \"Native code threw an exception\");\n+        abort();\n     }\n \n     task = rust_task_thread::get_task();\n     task->record_stack_limit();\n }\n \n+/*\n+ * The opposite of above. Starts on a C stack and switches to the Rust\n+ * stack. This is the only upcall that runs from the C stack.\n+ */\n+extern \"C\" CDECL void\n+upcall_call_shim_on_rust_stack(void *args, void *fn_ptr) {\n+    rust_task *task = rust_task_thread::get_task();\n+\n+    // FIXME: Because of the hack in the other function that disables the\n+    // stack limit when entering the C stack, here we restore the stack limit\n+    // again.\n+    task->record_stack_limit();\n+\n+    try {\n+        task->call_on_rust_stack(args, fn_ptr);\n+    } catch (...) {\n+        // We can't count on being able to unwind through arbitrary\n+        // code. Our best option is to just fail hard.\n+        LOG_ERR(task, task,\n+                \"Rust task failed after reentering the Rust stack\");\n+        abort();\n+    }\n+}\n+\n /**********************************************************************/\n \n struct s_fail_args {"}, {"sha": "f1e543ed6d42f2462a3ccc06be2f67204bbc1986", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d2442d89cbfbba03545a877b7768fe2ac34ef82/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/5d2442d89cbfbba03545a877b7768fe2ac34ef82/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=5d2442d89cbfbba03545a877b7768fe2ac34ef82", "patch": "@@ -75,6 +75,7 @@ upcall_shared_free\n upcall_vec_grow\n upcall_vec_push\n upcall_call_shim_on_c_stack\n+upcall_call_shim_on_rust_stack\n upcall_new_stack\n upcall_del_stack\n upcall_reset_stack_limit"}]}