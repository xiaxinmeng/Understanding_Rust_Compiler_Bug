{"sha": "689cc046146faa7a8b0970614c84a3d9ca00ae84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OWNjMDQ2MTQ2ZmFhN2E4YjA5NzA2MTRjODRhM2Q5Y2EwMGFlODQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-13T13:09:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-13T13:09:19Z"}, "message": "Rollup merge of #66248 - RalfJung:unsafe_cell_raw_get, r=SimonSapin\n\nadd raw ptr variant of UnsafeCell::get\n\nThis has come up recently in https://github.com/rust-lang/rust/pull/66051 (Cc @Centril @pitdicker) as well as in discussion with @nikomatsakis and in unrelated discussion with @withoutboats.", "tree": {"sha": "7213648ff4b501d1a2b1a03ca4ef672ae6436b9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7213648ff4b501d1a2b1a03ca4ef672ae6436b9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/689cc046146faa7a8b0970614c84a3d9ca00ae84", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdzAB/CRBK7hj4Ov3rIwAAdHIIAA3NmmFzeHps3EiUreOUFaqC\nBmoe9DBMY7W/umGhXkSqAcj3Q1nx/rCT5vIbD/TE47OUNWYv4r/Z4uPs0/vWC+BR\nX2Ilp6YQKy0EliInE3yojsQ1f0gMxh0NLVUscN9uuuv5mgs5vpp++59MWnMyP6qm\nP9+TaxpM+/Y1oZdlAnoXgMjiKHhvYZ3bGizEKl2toOQLGV8fkPP18RzDT0N5yc/a\nqs2xMFQmBHOfKUtylvIO+upSiGIy175oWORzXlvcVdu5o5TRjrvtuIn027Oytq7w\nf6UD4wFhCqsJMUoX5uM5tpvBZnXJvE38fgwUntNsPxKz98deMaEmAfWmjMrEvzA=\n=GOeJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 7213648ff4b501d1a2b1a03ca4ef672ae6436b9e\nparent fac098291eea5a993542141e681ed9be0a4513d0\nparent 861698a493fc547254e61dc23a43dfb0683df91a\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573650559 +0900\ncommitter GitHub <noreply@github.com> 1573650559 +0900\n\nRollup merge of #66248 - RalfJung:unsafe_cell_raw_get, r=SimonSapin\n\nadd raw ptr variant of UnsafeCell::get\n\nThis has come up recently in https://github.com/rust-lang/rust/pull/66051 (Cc @Centril @pitdicker) as well as in discussion with @nikomatsakis and in unrelated discussion with @withoutboats.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/689cc046146faa7a8b0970614c84a3d9ca00ae84", "html_url": "https://github.com/rust-lang/rust/commit/689cc046146faa7a8b0970614c84a3d9ca00ae84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/689cc046146faa7a8b0970614c84a3d9ca00ae84/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fac098291eea5a993542141e681ed9be0a4513d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fac098291eea5a993542141e681ed9be0a4513d0", "html_url": "https://github.com/rust-lang/rust/commit/fac098291eea5a993542141e681ed9be0a4513d0"}, {"sha": "861698a493fc547254e61dc23a43dfb0683df91a", "url": "https://api.github.com/repos/rust-lang/rust/commits/861698a493fc547254e61dc23a43dfb0683df91a", "html_url": "https://github.com/rust-lang/rust/commit/861698a493fc547254e61dc23a43dfb0683df91a"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "03f32e726187b09ea86af46601df58465cd16c31", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/689cc046146faa7a8b0970614c84a3d9ca00ae84/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689cc046146faa7a8b0970614c84a3d9ca00ae84/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=689cc046146faa7a8b0970614c84a3d9ca00ae84", "patch": "@@ -1545,9 +1545,46 @@ impl<T: ?Sized> UnsafeCell<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn get(&self) -> *mut T {\n         // We can just cast the pointer from `UnsafeCell<T>` to `T` because of\n-        // #[repr(transparent)]\n+        // #[repr(transparent)]. This exploits libstd's special status, there is\n+        // no guarantee for user code that this will work in future versions of the compiler!\n         self as *const UnsafeCell<T> as *const T as *mut T\n     }\n+\n+    /// Gets a mutable pointer to the wrapped value.\n+    /// The difference to [`get`] is that this function accepts a raw pointer,\n+    /// which is useful to avoid the creation of temporary references.\n+    ///\n+    /// The result can be cast to a pointer of any kind.\n+    /// Ensure that the access is unique (no active references, mutable or not)\n+    /// when casting to `&mut T`, and ensure that there are no mutations\n+    /// or mutable aliases going on when casting to `&T`.\n+    ///\n+    /// [`get`]: #method.get\n+    ///\n+    /// # Examples\n+    ///\n+    /// Gradual initialization of an `UnsafeCell` requires `raw_get`, as\n+    /// calling `get` would require creating a reference to uninitialized data:\n+    ///\n+    /// ```\n+    /// #![feature(unsafe_cell_raw_get)]\n+    /// use std::cell::UnsafeCell;\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let m = MaybeUninit::<UnsafeCell<i32>>::uninit();\n+    /// unsafe { UnsafeCell::raw_get(m.as_ptr()).write(5); }\n+    /// let uc = unsafe { m.assume_init() };\n+    ///\n+    /// assert_eq!(uc.into_inner(), 5);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"unsafe_cell_raw_get\", issue = \"66358\")]\n+    pub const fn raw_get(this: *const Self) -> *mut T {\n+        // We can just cast the pointer from `UnsafeCell<T>` to `T` because of\n+        // #[repr(transparent)]. This exploits libstd's special status, there is\n+        // no guarantee for user code that this will work in future versions of the compiler!\n+        this as *const T as *mut T\n+    }\n }\n \n #[stable(feature = \"unsafe_cell_default\", since = \"1.10.0\")]"}]}