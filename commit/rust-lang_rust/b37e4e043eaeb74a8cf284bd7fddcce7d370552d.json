{"sha": "b37e4e043eaeb74a8cf284bd7fddcce7d370552d", "node_id": "C_kwDOAAsO6NoAKGIzN2U0ZTA0M2VhZWI3NGE4Y2YyODRiZDdmZGRjY2U3ZDM3MDU1MmQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-15T22:24:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-15T22:24:38Z"}, "message": "Rollup merge of #97202 - joshtriplett:os-str-capacity-documentation, r=dtolnay\n\nos str capacity documentation\n\nThis is based on https://github.com/rust-lang/rust/pull/95394 , with expansion and consolidation\nto address comments from `@dtolnay` and other `@rust-lang/libs-api` team members.", "tree": {"sha": "c7c8a2f2b3da92fb032e09bf574f1213d501d57a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7c8a2f2b3da92fb032e09bf574f1213d501d57a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b37e4e043eaeb74a8cf284bd7fddcce7d370552d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiqlwnCRBK7hj4Ov3rIwAAGWkIAAhvC8iXm9mLmZtNBRe3d44j\nBvoV7nztbhY4fuaaAqk7Ymg7IoB2wpckZFhJ1WNNbMbXRNk1OBI8P3DIRm2aTsly\nAoqQ3D54G3I95UClg8RszYuq4z/gSs9v7VoCEuELw8nT5marHPF+YnGRjF0tZJFg\nae1wcRY+DoGCJvBaGlOvQpnK1OSSqRXDr+eZ8RPVqT/ZH4PtT1G5AzMgUfLdhQl7\nskMwmJItjy7XC0ETC7usNUi2fAAiyW97CYmHCCkVvCEc+EqUHt872hNGyzbDy6y9\n+Bx4VglLNKZsFLkqq4OTfmRrlAJsDf/f3dIm2Z6tqOuKFx76a4yuaJXn3UPF9SI=\n=YfgV\n-----END PGP SIGNATURE-----\n", "payload": "tree c7c8a2f2b3da92fb032e09bf574f1213d501d57a\nparent ca983054e19afd74d63c3ed37997f3bf30fe85d0\nparent 45582079bc24e85fb0c7b292311d84d1fa173542\nauthor Yuki Okushi <jtitor@2k36.org> 1655331878 +0900\ncommitter GitHub <noreply@github.com> 1655331878 +0900\n\nRollup merge of #97202 - joshtriplett:os-str-capacity-documentation, r=dtolnay\n\nos str capacity documentation\n\nThis is based on https://github.com/rust-lang/rust/pull/95394 , with expansion and consolidation\nto address comments from `@dtolnay` and other `@rust-lang/libs-api` team members.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b37e4e043eaeb74a8cf284bd7fddcce7d370552d", "html_url": "https://github.com/rust-lang/rust/commit/b37e4e043eaeb74a8cf284bd7fddcce7d370552d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b37e4e043eaeb74a8cf284bd7fddcce7d370552d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca983054e19afd74d63c3ed37997f3bf30fe85d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca983054e19afd74d63c3ed37997f3bf30fe85d0", "html_url": "https://github.com/rust-lang/rust/commit/ca983054e19afd74d63c3ed37997f3bf30fe85d0"}, {"sha": "45582079bc24e85fb0c7b292311d84d1fa173542", "url": "https://api.github.com/repos/rust-lang/rust/commits/45582079bc24e85fb0c7b292311d84d1fa173542", "html_url": "https://github.com/rust-lang/rust/commit/45582079bc24e85fb0c7b292311d84d1fa173542"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "1212ff6f74ac3ed226b7782dc495b3d7188b0931", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b37e4e043eaeb74a8cf284bd7fddcce7d370552d/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b37e4e043eaeb74a8cf284bd7fddcce7d370552d/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=b37e4e043eaeb74a8cf284bd7fddcce7d370552d", "patch": "@@ -45,6 +45,22 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n /// values, encoded in a less-strict variant of UTF-8. This is useful to\n /// understand when handling capacity and length values.\n ///\n+/// # Capacity of `OsString`\n+///\n+/// Capacity uses units of UTF-8 bytes for OS strings which were created from valid unicode, and\n+/// uses units of bytes in an unspecified encoding for other contents. On a given target, all\n+/// `OsString` and `OsStr` values use the same units for capacity, so the following will work:\n+/// ```\n+/// use std::ffi::{OsStr, OsString};\n+///\n+/// fn concat_os_strings(a: &OsStr, b: &OsStr) -> OsString {\n+///     let mut ret = OsString::with_capacity(a.len() + b.len()); // This will allocate\n+///     ret.push(a); // This will not allocate further\n+///     ret.push(b); // This will not allocate further\n+///     ret\n+/// }\n+/// ```\n+///\n /// # Creating an `OsString`\n ///\n /// **From a Rust string**: `OsString` implements\n@@ -186,7 +202,7 @@ impl OsString {\n     /// OS strings without reallocating. If `capacity` is 0, the string will not\n     /// allocate.\n     ///\n-    /// See main `OsString` documentation information about encoding.\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n     ///\n     /// # Examples\n     ///\n@@ -229,7 +245,7 @@ impl OsString {\n \n     /// Returns the capacity this `OsString` can hold without reallocating.\n     ///\n-    /// See `OsString` introduction for information about encoding.\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n     ///\n     /// # Examples\n     ///\n@@ -251,6 +267,8 @@ impl OsString {\n     ///\n     /// The collection may reserve more space to avoid frequent reallocations.\n     ///\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -272,6 +290,8 @@ impl OsString {\n     /// greater than or equal to `self.len() + additional`. Does nothing if\n     /// capacity is already sufficient.\n     ///\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n+    ///\n     /// # Errors\n     ///\n     /// If the capacity overflows, or the allocator reports a failure, then an error\n@@ -313,6 +333,8 @@ impl OsString {\n     ///\n     /// [`reserve`]: OsString::reserve\n     ///\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -340,6 +362,8 @@ impl OsString {\n     ///\n     /// [`try_reserve`]: OsString::try_reserve\n     ///\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n+    ///\n     /// # Errors\n     ///\n     /// If the capacity overflows, or the allocator reports a failure, then an error\n@@ -373,6 +397,8 @@ impl OsString {\n \n     /// Shrinks the capacity of the `OsString` to match its length.\n     ///\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -399,6 +425,8 @@ impl OsString {\n     ///\n     /// If the current capacity is less than the lower limit, this is a no-op.\n     ///\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -773,6 +801,8 @@ impl OsStr {\n     /// This number is simply useful for passing to other methods, like\n     /// [`OsString::with_capacity`] to avoid reallocations.\n     ///\n+    /// See the main `OsString` documentation information about encoding and capacity units.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}]}