{"sha": "46379687ac0bf3c553c9c2f30fb8225210208a15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2Mzc5Njg3YWMwYmYzYzU1M2M5YzJmMzBmYjgyMjUyMTAyMDhhMTU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-30T20:04:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-30T20:04:29Z"}, "message": "Rollup merge of #74782 - vorner:weak-into-raw-cnt-doc, r=dtolnay\n\nDon't use \"weak count\" around Weak::from_raw_ptr\n\nAs `Rc/Arc::weak_count` returns 0 when having no strong counts, this\ncould be confusing and it's better to avoid using that completely.\n\nCloses #73840.", "tree": {"sha": "15bc5878dd06f06c13275f5d82c98c8a8b88f230", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15bc5878dd06f06c13275f5d82c98c8a8b88f230"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46379687ac0bf3c553c9c2f30fb8225210208a15", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfIyfOCRBK7hj4Ov3rIwAAdHIIAIbkJs9jixOMjJYCTp+D8E8M\nYRZGw/a3uIMQIgOAkwcQS8rRYCZR+jpQ5u7bdqqNXXxlBUaRuxLG3dgObCdic5z1\n0YdEmmCSpo6QPTEEitYXlMTrzB3/3KfNfeELBgDFbI3TUwrrZdob/143ZNNNqzpQ\ngzlMbd7Yc4O+74cX8G4hhSpFvGKcqp/OXbRuo1HNeKlsz0ZcwiSzuQvk2AjuYcoE\npfymSBaKY1HGqHx5n2GyicZpdXnjaDmz8azRZuTnxJXf/ckH9+NR57RJW6mBojIz\n7XsyaxW5b8yjyhJ5v8tCl8HFQQ/OBUuLF4v9B+qYKNc16+RAPL5vUTWhz6MEWdY=\n=yN76\n-----END PGP SIGNATURE-----\n", "payload": "tree 15bc5878dd06f06c13275f5d82c98c8a8b88f230\nparent 7e86c8eccbd032068cc474611e41a13ac6d0bbd7\nparent ad6d63ef01e37a1a05acdba50985b01d178d7c11\nauthor Manish Goregaokar <manishsmail@gmail.com> 1596139469 -0700\ncommitter GitHub <noreply@github.com> 1596139469 -0700\n\nRollup merge of #74782 - vorner:weak-into-raw-cnt-doc, r=dtolnay\n\nDon't use \"weak count\" around Weak::from_raw_ptr\n\nAs `Rc/Arc::weak_count` returns 0 when having no strong counts, this\ncould be confusing and it's better to avoid using that completely.\n\nCloses #73840.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46379687ac0bf3c553c9c2f30fb8225210208a15", "html_url": "https://github.com/rust-lang/rust/commit/46379687ac0bf3c553c9c2f30fb8225210208a15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46379687ac0bf3c553c9c2f30fb8225210208a15/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e86c8eccbd032068cc474611e41a13ac6d0bbd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e86c8eccbd032068cc474611e41a13ac6d0bbd7", "html_url": "https://github.com/rust-lang/rust/commit/7e86c8eccbd032068cc474611e41a13ac6d0bbd7"}, {"sha": "ad6d63ef01e37a1a05acdba50985b01d178d7c11", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad6d63ef01e37a1a05acdba50985b01d178d7c11", "html_url": "https://github.com/rust-lang/rust/commit/ad6d63ef01e37a1a05acdba50985b01d178d7c11"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "116df63f94b69d4e9df143042085c881589bfc91", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/46379687ac0bf3c553c9c2f30fb8225210208a15/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46379687ac0bf3c553c9c2f30fb8225210208a15/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=46379687ac0bf3c553c9c2f30fb8225210208a15", "patch": "@@ -1692,8 +1692,9 @@ impl<T> Weak<T> {\n \n     /// Consumes the `Weak<T>` and turns it into a raw pointer.\n     ///\n-    /// This converts the weak pointer into a raw pointer, preserving the original weak count. It\n-    /// can be turned back into the `Weak<T>` with [`from_raw`].\n+    /// This converts the weak pointer into a raw pointer, while still preserving the ownership of\n+    /// one weak reference (the weak count is not modified by this operation). It can be turned\n+    /// back into the `Weak<T>` with [`from_raw`].\n     ///\n     /// The same restrictions of accessing the target of the pointer as with\n     /// [`as_ptr`] apply.\n@@ -1728,17 +1729,18 @@ impl<T> Weak<T> {\n     /// This can be used to safely get a strong reference (by calling [`upgrade`]\n     /// later) or to deallocate the weak count by dropping the `Weak<T>`.\n     ///\n-    /// It takes ownership of one weak count (with the exception of pointers created by [`new`],\n-    /// as these don't have any corresponding weak count).\n+    /// It takes ownership of one weak reference (with the exception of pointers created by [`new`],\n+    /// as these don't own anything; the method still works on them).\n     ///\n     /// # Safety\n     ///\n-    /// The pointer must have originated from the [`into_raw`]  and must still own its potential\n-    /// weak reference count.\n+    /// The pointer must have originated from the [`into_raw`] and must still own its potential\n+    /// weak reference.\n     ///\n-    /// It is allowed for the strong count to be 0 at the time of calling this, but the weak count\n-    /// must be non-zero or the pointer must have originated from a dangling `Weak<T>` (one created\n-    /// by [`new`]).\n+    /// It is allowed for the strong count to be 0 at the time of calling this. Nevertheless, this\n+    /// takes ownership of one weak reference currently represented as a raw pointer (the weak\n+    /// count is not modified by this operation) and therefore it must be paired with a previous\n+    /// call to [`into_raw`].\n     ///\n     /// # Examples\n     ///"}, {"sha": "58cab9c5c6388a6d6c335050f88e7c1be77e9175", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/46379687ac0bf3c553c9c2f30fb8225210208a15/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46379687ac0bf3c553c9c2f30fb8225210208a15/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=46379687ac0bf3c553c9c2f30fb8225210208a15", "patch": "@@ -1462,8 +1462,9 @@ impl<T> Weak<T> {\n \n     /// Consumes the `Weak<T>` and turns it into a raw pointer.\n     ///\n-    /// This converts the weak pointer into a raw pointer, preserving the original weak count. It\n-    /// can be turned back into the `Weak<T>` with [`from_raw`].\n+    /// This converts the weak pointer into a raw pointer, while still preserving the ownership of\n+    /// one weak reference (the weak count is not modified by this operation). It can be turned\n+    /// back into the `Weak<T>` with [`from_raw`].\n     ///\n     /// The same restrictions of accessing the target of the pointer as with\n     /// [`as_ptr`] apply.\n@@ -1493,24 +1494,23 @@ impl<T> Weak<T> {\n         result\n     }\n \n-    /// Converts a raw pointer previously created by [`into_raw`] back into\n-    /// `Weak<T>`.\n+    /// Converts a raw pointer previously created by [`into_raw`] back into `Weak<T>`.\n     ///\n     /// This can be used to safely get a strong reference (by calling [`upgrade`]\n     /// later) or to deallocate the weak count by dropping the `Weak<T>`.\n     ///\n-    /// It takes ownership of one weak count (with the exception of pointers created by [`new`],\n-    /// as these don't have any corresponding weak count).\n+    /// It takes ownership of one weak reference (with the exception of pointers created by [`new`],\n+    /// as these don't own anything; the method still works on them).\n     ///\n     /// # Safety\n     ///\n     /// The pointer must have originated from the [`into_raw`] and must still own its potential\n-    /// weak reference count.\n-    ///\n-    /// It is allowed for the strong count to be 0 at the time of calling this, but the weak count\n-    /// must be non-zero or the pointer must have originated from a dangling `Weak<T>` (one created\n-    /// by [`new`]).\n+    /// weak reference.\n     ///\n+    /// It is allowed for the strong count to be 0 at the time of calling this. Nevertheless, this\n+    /// takes ownership of one weak reference currently represented as a raw pointer (the weak\n+    /// count is not modified by this operation) and therefore it must be paired with a previous\n+    /// call to [`into_raw`].\n     /// # Examples\n     ///\n     /// ```"}]}