{"sha": "edf2e3725e8d95b52784990a0c05978db5646bfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZjJlMzcyNWU4ZDk1YjUyNzg0OTkwYTBjMDU5NzhkYjU2NDZiZmI=", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-01-13T01:12:08Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-01-13T22:58:08Z"}, "message": "Use unsigned_abs throughout repository", "tree": {"sha": "249ca139ca1428fb4f13926f2d12b80194cef79c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/249ca139ca1428fb4f13926f2d12b80194cef79c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edf2e3725e8d95b52784990a0c05978db5646bfb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTgxeqBxcDGar1sVhy4DhnkZitapAUCX/97AAAKCRC4DhnkZita\npOY5AQCsz6x+LD2NPwlG6x9XBR6XuqQu3uPpYPh/Ow78rMNrlQD/QuYrDdQpMfci\n/kIpbf9QTI10yNLbItH0h/8gx7e+2wI=\n=IlBH\n-----END PGP SIGNATURE-----", "payload": "tree 249ca139ca1428fb4f13926f2d12b80194cef79c\nparent 85394252e6079e8c094fedb8347358b39a5bb5d4\nauthor Jacob Pratt <jacob@jhpratt.dev> 1610500328 -0500\ncommitter Jacob Pratt <jacob@jhpratt.dev> 1610578688 -0500\n\nUse unsigned_abs throughout repository\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edf2e3725e8d95b52784990a0c05978db5646bfb", "html_url": "https://github.com/rust-lang/rust/commit/edf2e3725e8d95b52784990a0c05978db5646bfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edf2e3725e8d95b52784990a0c05978db5646bfb/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85394252e6079e8c094fedb8347358b39a5bb5d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/85394252e6079e8c094fedb8347358b39a5bb5d4", "html_url": "https://github.com/rust-lang/rust/commit/85394252e6079e8c094fedb8347358b39a5bb5d4"}], "stats": {"total": 21, "additions": 6, "deletions": 15}, "files": [{"sha": "55fe5f971e718938c227a17d9943cb6c12f82463", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/edf2e3725e8d95b52784990a0c05978db5646bfb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf2e3725e8d95b52784990a0c05978db5646bfb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=edf2e3725e8d95b52784990a0c05978db5646bfb", "patch": "@@ -588,12 +588,3 @@ pub fn read_target_uint(endianness: Endian, mut source: &[u8]) -> Result<u128, i\n     debug_assert!(source.len() == 0); // We should have consumed the source buffer.\n     uint\n }\n-\n-/// Computes the unsigned absolute value without wrapping or panicking.\n-#[inline]\n-pub fn uabs(value: i64) -> u64 {\n-    // The only tricky part here is if value == i64::MIN. In that case,\n-    // wrapping_abs() returns i64::MIN == -2^63. Casting this value to a u64\n-    // gives 2^63, the correct value.\n-    value.wrapping_abs() as u64\n-}"}, {"sha": "8774b48fb3e403665dae7b75ce9d3b96d2ff6d55", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edf2e3725e8d95b52784990a0c05978db5646bfb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf2e3725e8d95b52784990a0c05978db5646bfb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=edf2e3725e8d95b52784990a0c05978db5646bfb", "patch": "@@ -1,4 +1,4 @@\n-use super::{uabs, AllocId, InterpResult};\n+use super::{AllocId, InterpResult};\n \n use rustc_macros::HashStable;\n use rustc_target::abi::{HasDataLayout, Size};\n@@ -57,7 +57,7 @@ pub trait PointerArithmetic: HasDataLayout {\n     #[inline]\n     fn overflowing_signed_offset(&self, val: u64, i: i64) -> (u64, bool) {\n         // We need to make sure that i fits in a machine isize.\n-        let n = uabs(i);\n+        let n = i.unsigned_abs();\n         if i >= 0 {\n             let (val, over) = self.overflowing_offset(val, n);\n             (val, over || i > self.machine_isize_max())"}, {"sha": "f4309c9cd9572d11e62f1eabc758cb78d1bd59b6", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edf2e3725e8d95b52784990a0c05978db5646bfb/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf2e3725e8d95b52784990a0c05978db5646bfb/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=edf2e3725e8d95b52784990a0c05978db5646bfb", "patch": "@@ -7,7 +7,7 @@ use std::convert::TryFrom;\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::{\n     self,\n-    interpret::{uabs, ConstValue, GlobalId, InterpResult, Scalar},\n+    interpret::{ConstValue, GlobalId, InterpResult, Scalar},\n     BinOp,\n };\n use rustc_middle::ty;\n@@ -542,7 +542,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // memory between these pointers must be accessible. Note that we do not require the\n         // pointers to be properly aligned (unlike a read/write operation).\n         let min_ptr = if offset_bytes >= 0 { ptr } else { offset_ptr };\n-        let size: u64 = uabs(offset_bytes);\n+        let size = offset_bytes.unsigned_abs();\n         // This call handles checking for integer/NULL pointers.\n         self.memory.check_ptr_access_align(\n             min_ptr,"}, {"sha": "3355df778779157900f71c40617eeff161880a25", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edf2e3725e8d95b52784990a0c05978db5646bfb/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf2e3725e8d95b52784990a0c05978db5646bfb/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=edf2e3725e8d95b52784990a0c05978db5646bfb", "patch": "@@ -531,7 +531,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n                     if val < 0 {\n                         neg = true;\n                     }\n-                    Some(val.wrapping_abs() as u128)\n+                    Some(val.unsigned_abs())\n                 })\n             }\n             _ => {"}, {"sha": "f145b47770a57dc0f48eb82954c2c61924281dc6", "filename": "library/core/src/num/dec2flt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edf2e3725e8d95b52784990a0c05978db5646bfb/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf2e3725e8d95b52784990a0c05978db5646bfb/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs?ref=edf2e3725e8d95b52784990a0c05978db5646bfb", "patch": "@@ -332,7 +332,7 @@ fn bound_intermediate_digits(decimal: &Decimal<'_>, e: i64) -> u64 {\n         // It tries to find a positive number k such that `f << k / 10^e` is an in-range\n         // significand. This will result in about `2^53 * f * 10^e` < `10^17 * f * 10^e`.\n         // One input that triggers this is 0.33...33 (375 x 3).\n-        f_len + (e.abs() as u64) + 17\n+        f_len + e.unsigned_abs() + 17\n     }\n }\n "}]}