{"sha": "3b399afa89d8d346b095af444f73d99d62e4f3ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMzk5YWZhODlkOGQzNDZiMDk1YWY0NDRmNzNkOTlkNjJlNGYzYWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-07-09T20:59:03Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-07-09T20:59:03Z"}, "message": "Merge pull request #2847 from ben0x539/incoming\n\nTiny documentation fixes in rust.md and src/libcore/task.rs", "tree": {"sha": "0bc84e62f954736f7d3622d69432d0cdb156ad41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bc84e62f954736f7d3622d69432d0cdb156ad41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b399afa89d8d346b095af444f73d99d62e4f3ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b399afa89d8d346b095af444f73d99d62e4f3ad", "html_url": "https://github.com/rust-lang/rust/commit/3b399afa89d8d346b095af444f73d99d62e4f3ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b399afa89d8d346b095af444f73d99d62e4f3ad/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "547bf7c350fe721d94ca98e72183bf54a57a70bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/547bf7c350fe721d94ca98e72183bf54a57a70bb", "html_url": "https://github.com/rust-lang/rust/commit/547bf7c350fe721d94ca98e72183bf54a57a70bb"}, {"sha": "4ac7159536fd06c83e58ac5331bae21f800e0583", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac7159536fd06c83e58ac5331bae21f800e0583", "html_url": "https://github.com/rust-lang/rust/commit/4ac7159536fd06c83e58ac5331bae21f800e0583"}], "stats": {"total": 59, "additions": 29, "deletions": 30}, "files": [{"sha": "e41f1447201efe4e671053c83d69d6988d4b5fd0", "filename": "doc/rust.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3b399afa89d8d346b095af444f73d99d62e4f3ad/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/3b399afa89d8d346b095af444f73d99d62e4f3ad/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=3b399afa89d8d346b095af444f73d99d62e4f3ad", "patch": "@@ -2871,12 +2871,12 @@ Consists of 2 statements, 3 expressions and 12 points:\n * the point after evaluating the static initializer `\"hello, world\"`\n * the point after the first statement\n * the point before the second statement\n-* the point before evaluating the function value `print`\n-* the point after evaluating the function value `print`\n-* the point before evaluating the arguments to `print`\n+* the point before evaluating the function value `println`\n+* the point after evaluating the function value `println`\n+* the point before evaluating the arguments to `println`\n * the point before evaluating the symbol `s`\n * the point after evaluating the symbol `s`\n-* the point after evaluating the arguments to `print`\n+* the point after evaluating the arguments to `println`\n * the point after the second statement\n \n \n@@ -2894,9 +2894,9 @@ Consists of 1 statement, 7 expressions and 14 points:\n \n \n * the point before the statement\n-* the point before evaluating the function value `print`\n-* the point after evaluating the function value `print`\n-* the point before evaluating the arguments to `print`\n+* the point before evaluating the function value `println`\n+* the point after evaluating the function value `println`\n+* the point before evaluating the arguments to `println`\n * the point before evaluating the arguments to `+`\n * the point before evaluating the function value `x`\n * the point after evaluating the function value `x`\n@@ -2907,7 +2907,7 @@ Consists of 1 statement, 7 expressions and 14 points:\n * the point before evaluating the arguments to `y`\n * the point after evaluating the arguments to `y`\n * the point after evaluating the arguments to `+`\n-* the point after evaluating the arguments to `print`\n+* the point after evaluating the arguments to `println`\n \n \n The typestate system reasons over points, rather than statements or\n@@ -3186,7 +3186,7 @@ let x: ~int = ~10;\n ~~~~~~~~\n \n Some operations (such as field selection) implicitly dereference boxes. An\n-example of an @dfn{implicit dereference} operation performed on box values:\n+example of an _implicit dereference_ operation performed on box values:\n \n ~~~~~~~~\n let x = @{y: 10};\n@@ -3196,8 +3196,8 @@ assert x.y == 10;\n Other operations act on box values as single-word-sized address values. For\n these operations, to access the value held in the box requires an explicit\n dereference of the box value. Explicitly dereferencing a box is indicated with\n-the unary *star* operator `*`. Examples of such @dfn{explicit\n-dereference} operations are:\n+the unary *star* operator `*`. Examples of such _explicit dereference_\n+operations are:\n \n * copying box values (`x = y`)\n * passing box values to functions (`f(x,y)`)"}, {"sha": "9a50f4758f076d30a2e6fbad73fbc1674bad71d5", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b399afa89d8d346b095af444f73d99d62e4f3ad/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b399afa89d8d346b095af444f73d99d62e4f3ad/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=3b399afa89d8d346b095af444f73d99d62e4f3ad", "patch": "@@ -16,9 +16,9 @@\n  * let po = comm::port();\n  * let ch = comm::chan(po);\n  *\n- * task::spawn {||\n+ * do task::spawn {\n  *     comm::send(ch, \"Hello, World\");\n- * });\n+ * }\n  *\n  * io::println(comm::recv(p));\n  * ~~~"}, {"sha": "9b75fb07a9efa5be4afb00cd37a5f2bfff3f277b", "filename": "src/libcore/task.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3b399afa89d8d346b095af444f73d99d62e4f3ad/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b399afa89d8d346b095af444f73d99d62e4f3ad/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=3b399afa89d8d346b095af444f73d99d62e4f3ad", "patch": "@@ -17,7 +17,7 @@\n  * # Example\n  *\n  * ~~~\n- * spawn {||\n+ * do spawn {\n  *     log(error, \"Hello, World!\");\n  * }\n  * ~~~\n@@ -350,7 +350,6 @@ fn run_with<A:send>(-builder: builder,\n                     +f: fn~(+A)) {\n \n     /*!\n-     *\n      * Runs a task, while transfering ownership of one argument to the\n      * child.\n      *\n@@ -412,15 +411,13 @@ fn spawn(+f: fn~()) {\n \n fn spawn_with<A:send>(+arg: A, +f: fn~(+A)) {\n     /*!\n-     * Runs a new task while providing a channel from the parent to the child\n+     * Runs a task, while transfering ownership of one argument to the\n+     * child.\n      *\n-     * Sets up a communication channel from the current task to the new\n-     * child task, passes the port to child's body, and returns a channel\n-     * linked to the port to the parent.\n+     * This is useful for transfering ownership of noncopyables to\n+     * another task.\n      *\n-     * This encapsulates some boilerplate handshaking logic that would\n-     * otherwise be required to establish communication from the parent\n-     * to the child.\n+     * This function is equivalent to `run_with(builder(), arg, f)`.\n      */\n \n     run_with(builder(), arg, f)\n@@ -443,7 +440,7 @@ fn spawn_listener<A:send>(+f: fn~(comm::port<A>)) -> comm::chan<A> {\n      *\n      *     let po = comm::port();\n      *     let ch = comm::chan(po);\n-     *     let ch = spawn_listener {|po|\n+     *     let ch = do spawn_listener |po| {\n      *         // Now the child has a port called 'po' to read from and\n      *         // an environment-captured channel called 'ch'.\n      *     };\n@@ -537,13 +534,15 @@ fn get_task() -> task {\n  *\n  * # Example\n  *\n- *     task::unkillable {||\n- *         // detach / yield / destroy must all be called together\n- *         rustrt::rust_port_detach(po);\n- *         // This must not result in the current task being killed\n- *         task::yield();\n- *         rustrt::rust_port_destroy(po);\n- *     }\n+ * ~~~\n+ * do task::unkillable {\n+ *     // detach / yield / destroy must all be called together\n+ *     rustrt::rust_port_detach(po);\n+ *     // This must not result in the current task being killed\n+ *     task::yield();\n+ *     rustrt::rust_port_destroy(po);\n+ * }\n+ * ~~~\n  */\n unsafe fn unkillable(f: fn()) {\n     class allow_failure {"}]}