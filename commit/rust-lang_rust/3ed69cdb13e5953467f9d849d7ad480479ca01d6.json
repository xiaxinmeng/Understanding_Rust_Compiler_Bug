{"sha": "3ed69cdb13e5953467f9d849d7ad480479ca01d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZDY5Y2RiMTNlNTk1MzQ2N2Y5ZDg0OWQ3YWQ0ODA0NzljYTAxZDY=", "commit": {"author": {"name": "Daniel Smith", "email": "daniel.smith@datadoghq.com", "date": "2020-10-13T16:39:20Z"}, "committer": {"name": "Daniel Smith", "email": "daniel.smith@datadoghq.com", "date": "2020-10-21T15:04:26Z"}, "message": "Move existing lint into shared file", "tree": {"sha": "1566670a2310f3f31bd3934595b4c21831aa5898", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1566670a2310f3f31bd3934595b4c21831aa5898"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ed69cdb13e5953467f9d849d7ad480479ca01d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed69cdb13e5953467f9d849d7ad480479ca01d6", "html_url": "https://github.com/rust-lang/rust/commit/3ed69cdb13e5953467f9d849d7ad480479ca01d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ed69cdb13e5953467f9d849d7ad480479ca01d6/comments", "author": null, "committer": null, "parents": [{"sha": "b3a427d8733a549b11f9bc88eceb31c857851411", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3a427d8733a549b11f9bc88eceb31c857851411", "html_url": "https://github.com/rust-lang/rust/commit/b3a427d8733a549b11f9bc88eceb31c857851411"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "367534499fd020665de7e1efda36a2d0742d3005", "filename": "clippy_lints/src/await_holding_invalid.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3ed69cdb13e5953467f9d849d7ad480479ca01d6/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed69cdb13e5953467f9d849d7ad480479ca01d6/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs?ref=3ed69cdb13e5953467f9d849d7ad480479ca01d6", "previous_filename": "clippy_lints/src/await_holding_lock.rs"}, {"sha": "47cc0c9032291c65123fd44bbc16f5d40ab3ec99", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ed69cdb13e5953467f9d849d7ad480479ca01d6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed69cdb13e5953467f9d849d7ad480479ca01d6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3ed69cdb13e5953467f9d849d7ad480479ca01d6", "patch": "@@ -160,7 +160,7 @@ mod assign_ops;\n mod async_yields_async;\n mod atomic_ordering;\n mod attrs;\n-mod await_holding_lock;\n+mod await_holding_invalid;\n mod await_holding_refcell_ref;\n mod bit_mask;\n mod blacklisted_name;\n@@ -510,7 +510,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &attrs::MISMATCHED_TARGET_OS,\n         &attrs::UNKNOWN_CLIPPY_LINTS,\n         &attrs::USELESS_ATTRIBUTE,\n-        &await_holding_lock::AWAIT_HOLDING_LOCK,\n+        &await_holding_invalid::AWAIT_HOLDING_LOCK,\n         &await_holding_refcell_ref::AWAIT_HOLDING_REFCELL_REF,\n         &bit_mask::BAD_BIT_MASK,\n         &bit_mask::INEFFECTIVE_BIT_MASK,\n@@ -907,7 +907,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     ]);\n     // end register lints, do not remove this comment, it\u2019s used in `update_lints`\n \n-    store.register_late_pass(|| box await_holding_lock::AwaitHoldingLock);\n+    store.register_late_pass(|| box await_holding_invalid::AwaitHoldingLock);\n     store.register_late_pass(|| box await_holding_refcell_ref::AwaitHoldingRefCellRef);\n     store.register_late_pass(|| box serde_api::SerdeAPI);\n     store.register_late_pass(|| box utils::internal_lints::CompilerLintFunctions::new());\n@@ -1191,7 +1191,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n \n     store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n         LintId::of(&attrs::INLINE_ALWAYS),\n-        LintId::of(&await_holding_lock::AWAIT_HOLDING_LOCK),\n+        LintId::of(&await_holding_invalid::AWAIT_HOLDING_LOCK),\n         LintId::of(&await_holding_refcell_ref::AWAIT_HOLDING_REFCELL_REF),\n         LintId::of(&bit_mask::VERBOSE_BIT_MASK),\n         LintId::of(&checked_conversions::CHECKED_CONVERSIONS),"}, {"sha": "63e9220ccd505513d270d07d2eb6e4a3ea43829c", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed69cdb13e5953467f9d849d7ad480479ca01d6/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed69cdb13e5953467f9d849d7ad480479ca01d6/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=3ed69cdb13e5953467f9d849d7ad480479ca01d6", "patch": "@@ -65,7 +65,7 @@ vec![\n         group: \"pedantic\",\n         desc: \"Inside an async function, holding a MutexGuard while calling await\",\n         deprecation: None,\n-        module: \"await_holding_lock\",\n+        module: \"await_holding_invalid\",\n     },\n     Lint {\n         name: \"await_holding_refcell_ref\","}, {"sha": "0458950edee1c9660d41a4e15a974038f3949eac", "filename": "tests/ui/await_holding_invalid.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3ed69cdb13e5953467f9d849d7ad480479ca01d6/tests%2Fui%2Fawait_holding_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed69cdb13e5953467f9d849d7ad480479ca01d6/tests%2Fui%2Fawait_holding_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fawait_holding_invalid.rs?ref=3ed69cdb13e5953467f9d849d7ad480479ca01d6", "previous_filename": "tests/ui/await_holding_lock.rs"}, {"sha": "315d5731b962d8405e720635dfc21f4dfc15e2a8", "filename": "tests/ui/await_holding_invalid.stderr", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3ed69cdb13e5953467f9d849d7ad480479ca01d6/tests%2Fui%2Fawait_holding_invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ed69cdb13e5953467f9d849d7ad480479ca01d6/tests%2Fui%2Fawait_holding_invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fawait_holding_invalid.stderr?ref=3ed69cdb13e5953467f9d849d7ad480479ca01d6", "patch": "@@ -1,26 +1,26 @@\n error: this MutexGuard is held across an 'await' point. Consider using an async-aware Mutex type or ensuring the MutexGuard is dropped before calling await.\n-  --> $DIR/await_holding_lock.rs:7:9\n+  --> $DIR/await_holding_invalid.rs:7:9\n    |\n LL |     let guard = x.lock().unwrap();\n    |         ^^^^^\n    |\n    = note: `-D clippy::await-holding-lock` implied by `-D warnings`\n note: these are all the await points this lock is held through\n-  --> $DIR/await_holding_lock.rs:7:5\n+  --> $DIR/await_holding_invalid.rs:7:5\n    |\n LL | /     let guard = x.lock().unwrap();\n LL | |     baz().await\n LL | | }\n    | |_^\n \n error: this MutexGuard is held across an 'await' point. Consider using an async-aware Mutex type or ensuring the MutexGuard is dropped before calling await.\n-  --> $DIR/await_holding_lock.rs:28:9\n+  --> $DIR/await_holding_invalid.rs:28:9\n    |\n LL |     let guard = x.lock().unwrap();\n    |         ^^^^^\n    |\n note: these are all the await points this lock is held through\n-  --> $DIR/await_holding_lock.rs:28:5\n+  --> $DIR/await_holding_invalid.rs:28:5\n    |\n LL | /     let guard = x.lock().unwrap();\n LL | |\n@@ -32,27 +32,27 @@ LL | | }\n    | |_^\n \n error: this MutexGuard is held across an 'await' point. Consider using an async-aware Mutex type or ensuring the MutexGuard is dropped before calling await.\n-  --> $DIR/await_holding_lock.rs:41:13\n+  --> $DIR/await_holding_invalid.rs:41:13\n    |\n LL |         let guard = x.lock().unwrap();\n    |             ^^^^^\n    |\n note: these are all the await points this lock is held through\n-  --> $DIR/await_holding_lock.rs:41:9\n+  --> $DIR/await_holding_invalid.rs:41:9\n    |\n LL | /         let guard = x.lock().unwrap();\n LL | |         baz().await\n LL | |     };\n    | |_____^\n \n error: this MutexGuard is held across an 'await' point. Consider using an async-aware Mutex type or ensuring the MutexGuard is dropped before calling await.\n-  --> $DIR/await_holding_lock.rs:53:13\n+  --> $DIR/await_holding_invalid.rs:53:13\n    |\n LL |         let guard = x.lock().unwrap();\n    |             ^^^^^\n    |\n note: these are all the await points this lock is held through\n-  --> $DIR/await_holding_lock.rs:53:9\n+  --> $DIR/await_holding_invalid.rs:53:9\n    |\n LL | /         let guard = x.lock().unwrap();\n LL | |         baz().await", "previous_filename": "tests/ui/await_holding_lock.stderr"}]}