{"sha": "913a2b4b0525c75ecf915076c4fd1e16187f8b51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxM2EyYjRiMDUyNWM3NWVjZjkxNTA3NmM0ZmQxZTE2MTg3ZjhiNTE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-04-01T07:19:29Z"}, "committer": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-04-03T13:18:16Z"}, "message": "check constants even if they are unused in the current crate", "tree": {"sha": "84a18d70e9bf0c37e407e07fef6c34895fa439a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84a18d70e9bf0c37e407e07fef6c34895fa439a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/913a2b4b0525c75ecf915076c4fd1e16187f8b51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/913a2b4b0525c75ecf915076c4fd1e16187f8b51", "html_url": "https://github.com/rust-lang/rust/commit/913a2b4b0525c75ecf915076c4fd1e16187f8b51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/913a2b4b0525c75ecf915076c4fd1e16187f8b51/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a09f386e8d1c31133f0ce1123fbeaedcff40a77d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a09f386e8d1c31133f0ce1123fbeaedcff40a77d", "html_url": "https://github.com/rust-lang/rust/commit/a09f386e8d1c31133f0ce1123fbeaedcff40a77d"}], "stats": {"total": 78, "additions": 60, "deletions": 18}, "files": [{"sha": "5a00b4573decfdf0e16bb96949e5cb48905d5a43", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/913a2b4b0525c75ecf915076c4fd1e16187f8b51/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913a2b4b0525c75ecf915076c4fd1e16187f8b51/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=913a2b4b0525c75ecf915076c4fd1e16187f8b51", "patch": "@@ -343,10 +343,15 @@ pub fn eval_const_expr(tcx: &TyCtxt, e: &Expr) -> ConstVal {\n     match eval_const_expr_partial(tcx, e, ExprTypeChecked, None) {\n         Ok(r) => r,\n         // non-const path still needs to be a fatal error, because enums are funky\n-        Err(ref s) if s.kind == NonConstPath => tcx.sess.span_fatal(s.span, &s.description()),\n         Err(s) => {\n-            tcx.sess.span_err(s.span, &s.description());\n-            Dummy\n+            match s.kind {\n+                NonConstPath |\n+                UnimplementedConstVal(_) => tcx.sess.span_fatal(s.span, &s.description()),\n+                _ => {\n+                    tcx.sess.span_err(s.span, &s.description());\n+                    Dummy\n+                }\n+            }\n         },\n     }\n }\n@@ -607,6 +612,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &TyCtxt<'tcx>,\n           const_val => signal!(e, NotOn(const_val)),\n         }\n       }\n+      hir::ExprUnary(hir::UnDeref, _) => signal!(e, UnimplementedConstVal(\"deref operation\")),\n       hir::ExprBinary(op, ref a, ref b) => {\n         let b_ty = match op.node {\n             hir::BiShl | hir::BiShr => ty_hint.erase_hint(),\n@@ -745,7 +751,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &TyCtxt<'tcx>,\n                   if let Some(const_expr) = lookup_variant_by_id(tcx, enum_def, variant_def) {\n                       eval_const_expr_partial(tcx, const_expr, ty_hint, None)?\n                   } else {\n-                      signal!(e, NonConstPath);\n+                      signal!(e, UnimplementedConstVal(\"enum variants\"));\n                   }\n               }\n               Def::Struct(..) => {\n@@ -768,6 +774,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &TyCtxt<'tcx>,\n           let callee_val = eval_const_expr_partial(tcx, callee, sub_ty_hint, fn_args)?;\n           let did = match callee_val {\n               Function(did) => did,\n+              Struct(_) => signal!(e, UnimplementedConstVal(\"tuple struct constructors\")),\n               callee => signal!(e, CallOn(callee)),\n           };\n           let (decl, result) = if let Some(fn_like) = lookup_const_fn_by_id(tcx, did) {\n@@ -798,7 +805,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &TyCtxt<'tcx>,\n       hir::ExprBlock(ref block) => {\n         match block.expr {\n             Some(ref expr) => eval_const_expr_partial(tcx, &expr, ty_hint, fn_args)?,\n-            None => bug!(),\n+            None => signal!(e, UnimplementedConstVal(\"empty block\")),\n         }\n       }\n       hir::ExprType(ref e, _) => eval_const_expr_partial(tcx, &e, ty_hint, fn_args)?,\n@@ -840,7 +847,8 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &TyCtxt<'tcx>,\n             },\n \n             Str(ref s) if idx as usize >= s.len() => signal!(e, IndexOutOfBounds),\n-            Str(_) => bug!(\"unimplemented\"), // FIXME: return a const char\n+            // FIXME: return a const char\n+            Str(_) => signal!(e, UnimplementedConstVal(\"indexing into str\")),\n             _ => signal!(e, IndexedNonVec),\n         }\n       }\n@@ -894,6 +902,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &TyCtxt<'tcx>,\n             signal!(base, ExpectedConstStruct);\n         }\n       }\n+      hir::ExprAddrOf(..) => signal!(e, UnimplementedConstVal(\"address operator\")),\n       _ => signal!(e, MiscCatchAll)\n     };\n \n@@ -1073,6 +1082,7 @@ fn cast_const_int<'tcx>(tcx: &TyCtxt<'tcx>, val: ConstInt, ty: ty::Ty) -> CastRe\n             Ok(Float(val as f64))\n         },\n         ty::TyFloat(ast::FloatTy::F32) => Ok(Float(val.to_u64().unwrap() as f32 as f64)),\n+        ty::TyRawPtr(_) => Err(ErrKind::UnimplementedConstVal(\"casting an address to a raw ptr\")),\n         _ => Err(CannotCast),\n     }\n }\n@@ -1094,6 +1104,7 @@ fn cast_const<'tcx>(tcx: &TyCtxt<'tcx>, val: ConstVal, ty: ty::Ty) -> CastResult\n         Bool(b) => cast_const_int(tcx, Infer(b as u64), ty),\n         Float(f) => cast_const_float(tcx, f, ty),\n         Char(c) => cast_const_int(tcx, Infer(c as u64), ty),\n+        Function(_) => Err(UnimplementedConstVal(\"casting fn pointers\")),\n         _ => Err(CannotCast),\n     }\n }"}, {"sha": "ba5d8ef45b621554d615e640a93198aa923c52ac", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/913a2b4b0525c75ecf915076c4fd1e16187f8b51/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913a2b4b0525c75ecf915076c4fd1e16187f8b51/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=913a2b4b0525c75ecf915076c4fd1e16187f8b51", "patch": "@@ -28,7 +28,7 @@ use rustc::dep_graph::DepNode;\n use rustc::ty::cast::{CastKind};\n use rustc_const_eval::{ConstEvalErr, lookup_const_fn_by_id, compare_lit_exprs};\n use rustc_const_eval::{eval_const_expr_partial, lookup_const_by_id};\n-use rustc_const_eval::ErrKind::IndexOpFeatureGated;\n+use rustc_const_eval::ErrKind::{IndexOpFeatureGated, UnimplementedConstVal};\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc::middle::def::Def;\n use rustc::middle::def_id::DefId;\n@@ -110,6 +110,16 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n                 entry.insert(ConstQualif::empty());\n             }\n         }\n+        if let Err(err) = eval_const_expr_partial(self.tcx, expr, ExprTypeChecked, None) {\n+            match err.kind {\n+                UnimplementedConstVal(_) => {},\n+                IndexOpFeatureGated => {},\n+                _ => self.tcx.sess.add_lint(CONST_ERR, expr.id, expr.span,\n+                                         format!(\"constant evaluation error: {}. This will \\\n+                                                 become a HARD ERROR in the future\",\n+                                                 err.description())),\n+            }\n+        }\n         self.with_mode(mode, |this| {\n             this.with_euv(None, |euv| euv.consume_expr(expr));\n             this.visit_expr(expr);\n@@ -435,6 +445,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n                             match eval_const_expr_partial(\n                                     self.tcx, ex, ExprTypeChecked, None) {\n                                 Ok(_) => {}\n+                                Err(ConstEvalErr { kind: UnimplementedConstVal(_), ..}) |\n                                 Err(ConstEvalErr { kind: IndexOpFeatureGated, ..}) => {},\n                                 Err(msg) => {\n                                     self.tcx.sess.add_lint(CONST_ERR, ex.id,"}, {"sha": "cdcdb919bdef57e2bafc84849e8dd0532f4606bc", "filename": "src/test/compile-fail/const-err-early.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/913a2b4b0525c75ecf915076c4fd1e16187f8b51/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913a2b4b0525c75ecf915076c4fd1e16187f8b51/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs?ref=913a2b4b0525c75ecf915076c4fd1e16187f8b51", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_indexing)]\n+#![deny(const_err)]\n+\n+pub const A: i8 = -std::i8::MIN; //~ ERROR attempted to negate with overflow\n+pub const B: u8 = 200u8 + 200u8; //~ ERROR attempted to add with overflow\n+pub const C: u8 = 200u8 * 4; //~ ERROR attempted to multiply with overflow\n+pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR attempted to subtract with overflow\n+pub const E: u8 = [5u8][1]; //~ ERROR index out of bounds\n+\n+fn main() {\n+    let _e = [6u8][1];\n+}"}, {"sha": "45e8fc37d878b60dddd0be3089b057ea680a2522", "filename": "src/test/compile-fail/const-err.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/913a2b4b0525c75ecf915076c4fd1e16187f8b51/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913a2b4b0525c75ecf915076c4fd1e16187f8b51/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err.rs?ref=913a2b4b0525c75ecf915076c4fd1e16187f8b51", "patch": "@@ -10,15 +10,11 @@\n \n #![feature(rustc_attrs)]\n #![allow(exceeding_bitshifts)]\n-#![deny(const_err)]\n \n fn black_box<T>(_: T) {\n     unimplemented!()\n }\n \n-const BLA: u8 = 200u8 + 200u8;\n-//~^ ERROR attempted to add with overflow\n-\n #[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n fn main() {\n     let a = -std::i8::MIN;\n@@ -30,7 +26,8 @@ fn main() {\n     //~^ WARN attempted to multiply with overflow\n     let d = 42u8 - (42u8 + 1);\n     //~^ WARN attempted to subtract with overflow\n-    let _e = BLA;\n+    let _e = [5u8][1];\n+    //~^ ERROR const index-expr is out of bounds\n     black_box(a);\n     black_box(b);\n     black_box(c);"}, {"sha": "9fdd24c42fdbd48447d526393e541ac19312c354", "filename": "src/test/compile-fail/const-eval-span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/913a2b4b0525c75ecf915076c4fd1e16187f8b51/src%2Ftest%2Fcompile-fail%2Fconst-eval-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913a2b4b0525c75ecf915076c4fd1e16187f8b51/src%2Ftest%2Fcompile-fail%2Fconst-eval-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-span.rs?ref=913a2b4b0525c75ecf915076c4fd1e16187f8b51", "patch": "@@ -14,7 +14,7 @@\n struct S(i32);\n \n const CONSTANT: S = S(0);\n-//~^ ERROR: constant evaluation error: call on struct [E0080]\n+//~^ ERROR: unimplemented constant expression: tuple struct constructors [E0080]\n \n enum E {\n     V = CONSTANT,"}, {"sha": "4567cd4a74bb2a3ae343d9aea7679b1c8324e0fa", "filename": "src/test/compile-fail/const-pattern-not-const-evaluable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/913a2b4b0525c75ecf915076c4fd1e16187f8b51/src%2Ftest%2Fcompile-fail%2Fconst-pattern-not-const-evaluable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913a2b4b0525c75ecf915076c4fd1e16187f8b51/src%2Ftest%2Fcompile-fail%2Fconst-pattern-not-const-evaluable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-pattern-not-const-evaluable.rs?ref=913a2b4b0525c75ecf915076c4fd1e16187f8b51", "patch": "@@ -17,12 +17,12 @@ enum Cake {\n use Cake::*;\n \n const BOO: (Cake, Cake) = (Marmor, BlackForest);\n-//~^ ERROR: constant evaluation error: non-constant path in constant expression [E0471]\n+//~^ ERROR: constant evaluation error: unimplemented constant expression: enum variants [E0471]\n const FOO: Cake = BOO.1;\n \n const fn foo() -> Cake {\n-    Marmor //~ ERROR: constant evaluation error: non-constant path in constant expression [E0471]\n-    //~^ ERROR: non-constant path in constant expression\n+    Marmor //~ ERROR: constant evaluation error: unimplemented constant expression: enum variants\n+    //~^ ERROR: unimplemented constant expression: enum variants\n }\n \n const WORKS: Cake = Marmor;"}, {"sha": "93e09c6d8d2d25161dc4b1ec1b5f624fb662ea4b", "filename": "src/test/compile-fail/feature-gate-negate-unsigned.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/913a2b4b0525c75ecf915076c4fd1e16187f8b51/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913a2b4b0525c75ecf915076c4fd1e16187f8b51/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned.rs?ref=913a2b4b0525c75ecf915076c4fd1e16187f8b51", "patch": "@@ -17,7 +17,8 @@ impl std::ops::Neg for S {\n }\n \n const _MAX: usize = -1;\n-//~^ ERROR unary negation of unsigned integer\n+//~^ WARN unary negation of unsigned integer\n+//~| ERROR unary negation of unsigned integer\n //~| HELP use a cast or the `!` operator\n \n fn main() {"}, {"sha": "9564a080b8ee7d6ca7f8c8dbb04d125921408ba9", "filename": "src/test/compile-fail/non-constant-enum-for-vec-repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/913a2b4b0525c75ecf915076c4fd1e16187f8b51/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913a2b4b0525c75ecf915076c4fd1e16187f8b51/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs?ref=913a2b4b0525c75ecf915076c4fd1e16187f8b51", "patch": "@@ -15,5 +15,5 @@ enum State { ST_NULL, ST_WHITESPACE }\n \n fn main() {\n     [State::ST_NULL; (State::ST_WHITESPACE as usize)];\n-    //~^ ERROR expected constant integer for repeat count, but non-constant path\n+    //~^ ERROR expected constant integer for repeat count, but unimplemented constant expression\n }"}]}