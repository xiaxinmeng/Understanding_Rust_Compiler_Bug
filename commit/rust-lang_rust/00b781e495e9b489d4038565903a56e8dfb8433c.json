{"sha": "00b781e495e9b489d4038565903a56e8dfb8433c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYjc4MWU0OTVlOWI0ODlkNDAzODU2NTkwM2E1NmU4ZGZiODQzM2M=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-11T01:25:27Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-11T02:20:00Z"}, "message": "Some cleanup in check_expr.", "tree": {"sha": "8f748ea2f129db4efbfcd6cf4112a2c0aed8865b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f748ea2f129db4efbfcd6cf4112a2c0aed8865b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00b781e495e9b489d4038565903a56e8dfb8433c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00b781e495e9b489d4038565903a56e8dfb8433c", "html_url": "https://github.com/rust-lang/rust/commit/00b781e495e9b489d4038565903a56e8dfb8433c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00b781e495e9b489d4038565903a56e8dfb8433c/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2c1fbd218e305310c1774d2d5fa8557a74ab842", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c1fbd218e305310c1774d2d5fa8557a74ab842", "html_url": "https://github.com/rust-lang/rust/commit/d2c1fbd218e305310c1774d2d5fa8557a74ab842"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "5bed01483db4d3fd4b3a799ac427f8d0ab33eab7", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/00b781e495e9b489d4038565903a56e8dfb8433c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b781e495e9b489d4038565903a56e8dfb8433c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=00b781e495e9b489d4038565903a56e8dfb8433c", "patch": "@@ -1582,15 +1582,14 @@ fn check_expr(fcx: &@fn_ctxt, expr: &@ast::expr) -> bool {\n         }\n \n         // Check the arguments.\n-        // TODO: iter2\n         let i = 0u;\n         for a_opt: option::t[@ast::expr]  in args {\n             alt a_opt {\n               some(a) {\n                 bot |= check_expr(fcx, a);\n-                demand::full(fcx, a.span, arg_tys.(i).ty,\n-                             expr_ty(fcx.ccx.tcx, a), ~[],\n-                             AUTODEREF_BLOCK_COERCE);\n+                demand::autoderef(fcx, a.span, arg_tys.(i).ty,\n+                                  expr_ty(fcx.ccx.tcx, a),\n+                                  AUTODEREF_BLOCK_COERCE);\n               }\n               none. { }\n             }\n@@ -1836,16 +1835,16 @@ fn check_expr(fcx: &@fn_ctxt, expr: &@ast::expr) -> bool {\n         if ty::def_has_ty_params(defn) {\n             let path_tpot = instantiate_path(fcx, pth, tpt, expr.span);\n             write::ty_fixup(fcx, id, path_tpot);\n-            ret false;\n-        }\n-        // The definition doesn't take type parameters. If the programmer\n-        // supplied some, that's an error.\n-        if ivec::len[@ast::ty](pth.node.types) > 0u {\n-            tcx.sess.span_fatal(expr.span,\n-                                \"this kind of value does not \\\n-                                 take type parameters\");\n+        } else {\n+            // The definition doesn't take type parameters. If the programmer\n+            // supplied some, that's an error.\n+            if ivec::len[@ast::ty](pth.node.types) > 0u {\n+                tcx.sess.span_fatal(expr.span,\n+                                    \"this kind of value does not \\\n+                                     take type parameters\");\n+            }\n+            write::ty_only_fixup(fcx, id, tpt.ty);\n         }\n-        write::ty_only_fixup(fcx, id, tpt.ty);\n       }\n       ast::expr_mac(_) { tcx.sess.bug(\"unexpanded macro\"); }\n       ast::expr_fail(expr_opt) {\n@@ -2493,7 +2492,6 @@ fn check_expr(fcx: &@fn_ctxt, expr: &@ast::expr) -> bool {\n         for method: @ast::method  in ao.methods {\n             check_method(fcx.ccx, method);\n         }\n-        next_ty_var(fcx);\n \n         // Now remove the info from the stack.\n         ivec::pop[obj_info](fcx.ccx.obj_infos);"}]}