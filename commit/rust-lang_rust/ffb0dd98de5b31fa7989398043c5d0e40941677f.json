{"sha": "ffb0dd98de5b31fa7989398043c5d0e40941677f", "node_id": "C_kwDOAAsO6NoAKGZmYjBkZDk4ZGU1YjMxZmE3OTg5Mzk4MDQzYzVkMGU0MDk0MTY3N2Y", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-13T16:47:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-13T16:47:39Z"}, "message": "Auto merge of #2833 - oli-obk:ui_test_bump, r=RalfJung\n\nUpdate to new ui_test crate", "tree": {"sha": "0977d16ab56ed0027a600f3fd100b5a7aeb967af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0977d16ab56ed0027a600f3fd100b5a7aeb967af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffb0dd98de5b31fa7989398043c5d0e40941677f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffb0dd98de5b31fa7989398043c5d0e40941677f", "html_url": "https://github.com/rust-lang/rust/commit/ffb0dd98de5b31fa7989398043c5d0e40941677f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffb0dd98de5b31fa7989398043c5d0e40941677f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4ea41452f4910261720a6a5511ea4a79679723a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4ea41452f4910261720a6a5511ea4a79679723a", "html_url": "https://github.com/rust-lang/rust/commit/b4ea41452f4910261720a6a5511ea4a79679723a"}, {"sha": "6c8cf4e6afb1b5c5159b09ea43288da0af9a5464", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c8cf4e6afb1b5c5159b09ea43288da0af9a5464", "html_url": "https://github.com/rust-lang/rust/commit/6c8cf4e6afb1b5c5159b09ea43288da0af9a5464"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "1c44a11f5053bd34f626f2c86406168e199bb233", "filename": "src/tools/miri/Cargo.lock", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ffb0dd98de5b31fa7989398043c5d0e40941677f/src%2Ftools%2Fmiri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ffb0dd98de5b31fa7989398043c5d0e40941677f/src%2Ftools%2Fmiri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.lock?ref=ffb0dd98de5b31fa7989398043c5d0e40941677f", "patch": "@@ -26,6 +26,12 @@ dependencies = [\n  \"memchr\",\n ]\n \n+[[package]]\n+name = \"anyhow\"\n+version = \"1.0.70\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7de8ce5e0f9f8d88245311066a578d72b7af3e7088f32783804676302df237e4\"\n+\n [[package]]\n name = \"atty\"\n version = \"0.2.14\"\n@@ -570,6 +576,18 @@ dependencies = [\n  \"semver\",\n ]\n \n+[[package]]\n+name = \"rustfix\"\n+version = \"0.6.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ecd2853d9e26988467753bd9912c3a126f642d05d229a4b53f5752ee36c56481\"\n+dependencies = [\n+ \"anyhow\",\n+ \"log\",\n+ \"serde\",\n+ \"serde_json\",\n+]\n+\n [[package]]\n name = \"ryu\"\n version = \"1.0.12\"\n@@ -744,11 +762,12 @@ dependencies = [\n \n [[package]]\n name = \"ui_test\"\n-version = \"0.5.0\"\n+version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"54ddb6f31025943e2f9d59237f433711c461a43d9415974c3eb3a4902edc1c1f\"\n+checksum = \"3e10f5f88ce8c331a388deda1e6e2bd533c73ca89cc5f539a3df02ed35c8efba\"\n dependencies = [\n  \"bstr\",\n+ \"cargo-platform\",\n  \"cargo_metadata\",\n  \"color-eyre\",\n  \"colored\",\n@@ -757,6 +776,7 @@ dependencies = [\n  \"lazy_static\",\n  \"regex\",\n  \"rustc_version\",\n+ \"rustfix\",\n  \"serde\",\n  \"serde_json\",\n  \"tempfile\","}, {"sha": "b962d0c10962f7be1e6c35eb23537b2657971fd6", "filename": "src/tools/miri/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb0dd98de5b31fa7989398043c5d0e40941677f/src%2Ftools%2Fmiri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ffb0dd98de5b31fa7989398043c5d0e40941677f/src%2Ftools%2Fmiri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.toml?ref=ffb0dd98de5b31fa7989398043c5d0e40941677f", "patch": "@@ -39,7 +39,7 @@ libloading = \"0.7\"\n \n [dev-dependencies]\n colored = \"2\"\n-ui_test = \"0.5\"\n+ui_test = \"0.6.2\"\n rustc_version = \"0.4\"\n # Features chosen to match those required by env_logger, to avoid rebuilds\n regex = { version = \"1.5.5\", default-features = false, features = [\"perf\", \"std\"] }"}, {"sha": "52deba9108c13b57ccf123b8f5b44a3268bbcc19", "filename": "src/tools/miri/tests/compiletest.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ffb0dd98de5b31fa7989398043c5d0e40941677f/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb0dd98de5b31fa7989398043c5d0e40941677f/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs?ref=ffb0dd98de5b31fa7989398043c5d0e40941677f", "patch": "@@ -2,7 +2,7 @@ use colored::*;\n use regex::bytes::Regex;\n use std::path::{Path, PathBuf};\n use std::{env, process::Command};\n-use ui_test::{color_eyre::Result, Config, Mode, OutputConflictHandling};\n+use ui_test::{color_eyre::Result, Config, Match, Mode, OutputConflictHandling};\n \n fn miri_path() -> PathBuf {\n     PathBuf::from(option_env!(\"MIRI\").unwrap_or(env!(\"CARGO_BIN_EXE_miri\")))\n@@ -52,14 +52,13 @@ fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> R\n         mode,\n         program: miri_path(),\n         quiet: false,\n+        edition: Some(\"2018\".into()),\n         ..Config::default()\n     };\n \n     let in_rustc_test_suite = option_env!(\"RUSTC_STAGE\").is_some();\n \n     // Add some flags we always want.\n-    config.args.push(\"--edition\".into());\n-    config.args.push(\"2018\".into());\n     if in_rustc_test_suite {\n         // Less aggressive warnings to make the rustc toolstate management less painful.\n         // (We often get warnings when e.g. a feature gets stabilized or some lint gets added/improved.)\n@@ -141,8 +140,8 @@ fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> R\n \n macro_rules! regexes {\n     ($name:ident: $($regex:expr => $replacement:expr,)*) => {lazy_static::lazy_static! {\n-        static ref $name: Vec<(Regex, &'static [u8])> = vec![\n-            $((Regex::new($regex).unwrap(), $replacement.as_bytes()),)*\n+        static ref $name: Vec<(Match, &'static [u8])> = vec![\n+            $((Regex::new($regex).unwrap().into(), $replacement.as_bytes()),)*\n         ];\n     }};\n }"}, {"sha": "22ffa1b2711070db38f1f961d1a5b7284596cec2", "filename": "src/tools/miri/tests/fail/terminate-terminator.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffb0dd98de5b31fa7989398043c5d0e40941677f/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fterminate-terminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb0dd98de5b31fa7989398043c5d0e40941677f/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fterminate-terminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fterminate-terminator.rs?ref=ffb0dd98de5b31fa7989398043c5d0e40941677f", "patch": "@@ -12,14 +12,13 @@ impl Drop for Foo {\n \n #[inline(always)]\n fn has_cleanup() {\n-    //~^ ERROR: panic in a function that cannot unwind\n-    // FIXME(nbdd0121): The error should be reported at the call site.\n     let _f = Foo;\n     panic!();\n }\n \n extern \"C\" fn panic_abort() {\n     has_cleanup();\n+    //~^ ERROR: panic in a function that cannot unwind\n }\n \n fn main() {"}, {"sha": "8ce4bb7cbb5e987e1e25030428abacd2490c2077", "filename": "src/tools/miri/tests/fail/terminate-terminator.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffb0dd98de5b31fa7989398043c5d0e40941677f/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fterminate-terminator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffb0dd98de5b31fa7989398043c5d0e40941677f/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fterminate-terminator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fterminate-terminator.stderr?ref=ffb0dd98de5b31fa7989398043c5d0e40941677f", "patch": "@@ -6,8 +6,6 @@ error: abnormal termination: panic in a function that cannot unwind\n   --> $DIR/terminate-terminator.rs:LL:CC\n    |\n LL | / fn has_cleanup() {\n-LL | |\n-LL | |     // FIXME(nbdd0121): The error should be reported at the call site.\n LL | |     let _f = Foo;\n LL | |     panic!();\n LL | | }"}, {"sha": "9e604f9abb83a535d1b60909a7a62721d8077ef7", "filename": "src/tools/miri/tests/pass/stacked-borrows/int-to-ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ffb0dd98de5b31fa7989398043c5d0e40941677f/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fint-to-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb0dd98de5b31fa7989398043c5d0e40941677f/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fint-to-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fint-to-ptr.rs?ref=ffb0dd98de5b31fa7989398043c5d0e40941677f", "patch": "@@ -23,17 +23,17 @@ fn example(variant: bool) {\n         let mut c = 42u32;\n \n         let x_unique1 = &mut c;\n-        // [..., Unique(1)]\n+        // stack: [..., Unique(1)]\n \n         let x_raw2 = x_unique1 as *mut u32;\n         let x_raw2_addr = x_raw2.expose_addr();\n-        // [..., Unique(1), SharedRW(2)]\n+        // stack: [..., Unique(1), SharedRW(2)]\n \n         let x_unique3 = &mut *x_raw2;\n-        // [.., Unique(1), SharedRW(2), Unique(3)]\n+        // stack: [.., Unique(1), SharedRW(2), Unique(3)]\n \n         assert_eq!(not_so_innocent(x_unique3), x_raw2_addr);\n-        // [.., Unique(1), SharedRW(2), Unique(3), ..., SharedRW(4)]\n+        // stack: [.., Unique(1), SharedRW(2), Unique(3), ..., SharedRW(4)]\n \n         // Do an int2ptr cast. This can pick tag 2 or 4 (the two previously exposed tags).\n         // 4 is the \"obvious\" choice (topmost tag, what we used to do with untagged pointers)."}]}