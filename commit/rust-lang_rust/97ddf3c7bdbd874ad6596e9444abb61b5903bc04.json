{"sha": "97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZGRmM2M3YmRiZDg3NGFkNjU5NmU5NDQ0YWJiNjFiNTkwM2JjMDQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-19T02:05:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-19T02:35:18Z"}, "message": "Stop resolving static methods at the module level. Closes #4179", "tree": {"sha": "d6ef056a83801ddf331cec3e482f3639a40a89ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6ef056a83801ddf331cec3e482f3639a40a89ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "html_url": "https://github.com/rust-lang/rust/commit/97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e28f23c60daae7042e2c279741fa90f623acac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e28f23c60daae7042e2c279741fa90f623acac0", "html_url": "https://github.com/rust-lang/rust/commit/8e28f23c60daae7042e2c279741fa90f623acac0"}], "stats": {"total": 156, "additions": 74, "deletions": 82}, "files": [{"sha": "b907d8ea2146a466ac3ccefdaaf2cafda2acbad4", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -25,7 +25,7 @@ use reader = std::ebml::reader;\n use std::ebml;\n use std::map::HashMap;\n use std::map;\n-use std::serialize::decode;\n+use std::serialize::traits::Decodable;\n use syntax::ast_map;\n use syntax::attr;\n use syntax::diagnostic::span_handler;\n@@ -284,7 +284,7 @@ fn item_ty_param_bounds(item: ebml::Doc, tcx: ty::ctxt, cdata: cmd)\n \n fn item_ty_region_param(item: ebml::Doc) -> Option<ty::region_variance> {\n     reader::maybe_get_doc(item, tag_region_param).map(|doc| {\n-        decode(&reader::Decoder(*doc))\n+        Decodable::decode(&reader::Decoder(*doc))\n     })\n }\n "}, {"sha": "e2f80aeeb6ac97c1a5826f300359f307a2a6939d", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -28,7 +28,8 @@ use std::ebml::writer::Encoder;\n use std::ebml;\n use std::map::HashMap;\n use std::serialize;\n-use std::serialize::{Encodable, EncoderHelpers, DecoderHelpers, decode};\n+use std::serialize::{Encodable, EncoderHelpers, DecoderHelpers};\n+use std::serialize::traits::Decodable;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util;\n@@ -117,7 +118,7 @@ fn decode_inlined_item(cdata: cstore::crate_metadata,\n         debug!(\"> Decoding inlined fn: %s::?\",\n                ast_map::path_to_str(path, tcx.sess.parse_sess.interner));\n         let ast_dsr = &reader::Decoder(ast_doc);\n-        let from_id_range = decode(ast_dsr);\n+        let from_id_range = Decodable::decode(ast_dsr);\n         let to_id_range = reserve_id_range(dcx.tcx.sess, from_id_range);\n         let xcx = extended_decode_ctxt_(@{dcx: dcx,\n                                           from_id_range: from_id_range,\n@@ -210,7 +211,7 @@ trait def_id_decoder_helpers {\n impl<D: serialize::Decoder> D: def_id_decoder_helpers {\n \n     fn read_def_id(xcx: extended_decode_ctxt) -> ast::def_id {\n-        let did: ast::def_id = decode(&self);\n+        let did: ast::def_id = Decodable::decode(&self);\n         did.tr(xcx)\n     }\n }\n@@ -287,7 +288,7 @@ fn simplify_ast(ii: ast::inlined_item) -> ast::inlined_item {\n fn decode_ast(par_doc: ebml::Doc) -> ast::inlined_item {\n     let chi_doc = par_doc[c::tag_tree as uint];\n     let d = &reader::Decoder(chi_doc);\n-    decode(d)\n+    Decodable::decode(d)\n }\n \n fn renumber_ast(xcx: extended_decode_ctxt, ii: ast::inlined_item)\n@@ -332,7 +333,7 @@ fn encode_def(ebml_w: writer::Encoder, def: ast::def) {\n \n fn decode_def(xcx: extended_decode_ctxt, doc: ebml::Doc) -> ast::def {\n     let dsr = &reader::Decoder(doc);\n-    let def: ast::def = decode(dsr);\n+    let def: ast::def = Decodable::decode(dsr);\n     def.tr(xcx)\n }\n \n@@ -430,7 +431,7 @@ trait ebml_decoder_helper {\n \n impl reader::Decoder: ebml_decoder_helper {\n     fn read_freevar_entry(xcx: extended_decode_ctxt) -> freevar_entry {\n-        let fv: freevar_entry = decode(&self);\n+        let fv: freevar_entry = Decodable::decode(&self);\n         fv.tr(xcx)\n     }\n }\n@@ -473,12 +474,13 @@ impl reader::Decoder: read_method_map_entry_helper {\n                  }),\n              explicit_self:\n                  self.read_field(~\"explicit_self\", 2u, || {\n-                    let self_type: ast::self_ty_ = decode(&self);\n+                    let self_type: ast::self_ty_ = Decodable::decode(&self);\n                     self_type\n                  }),\n              origin:\n                  self.read_field(~\"origin\", 1u, || {\n-                     let method_origin: method_origin = decode(&self);\n+                     let method_origin: method_origin =\n+                         Decodable::decode(&self);\n                      method_origin.tr(xcx)\n                  })}\n         }\n@@ -926,7 +928,7 @@ impl reader::Decoder: ebml_decoder_decoder_helpers {\n                     @self.read_to_vec(|| self.read_bounds(xcx) )\n                 }),\n                 region_param: self.read_field(~\"region_param\", 1u, || {\n-                    decode(&self)\n+                    Decodable::decode(&self)\n                 }),\n                 ty: self.read_field(~\"ty\", 2u, || {\n                     self.read_ty(xcx)\n@@ -990,11 +992,11 @@ fn decode_side_tables(xcx: extended_decode_ctxt,\n                 dcx.maps.vtable_map.insert(id,\n                                            val_dsr.read_vtable_res(xcx));\n             } else if tag == (c::tag_table_adjustments as uint) {\n-                let adj: @ty::AutoAdjustment = @decode(val_dsr);\n+                let adj: @ty::AutoAdjustment = @Decodable::decode(val_dsr);\n                 adj.tr(xcx);\n                 dcx.tcx.adjustments.insert(id, adj);\n             } else if tag == (c::tag_table_value_mode as uint) {\n-                let vm: ty::ValueMode = decode(val_dsr);\n+                let vm: ty::ValueMode = Decodable::decode(val_dsr);\n                 dcx.tcx.value_modes.insert(id, vm);\n             } else {\n                 xcx.dcx.tcx.sess.bug(\n@@ -1020,7 +1022,7 @@ fn encode_item_ast(ebml_w: writer::Encoder, item: @ast::item) {\n fn decode_item_ast(par_doc: ebml::Doc) -> @ast::item {\n     let chi_doc = par_doc[c::tag_tree as uint];\n     let d = &reader::Decoder(chi_doc);\n-    @decode(d)\n+    @Decodable::decode(d)\n }\n \n #[cfg(test)]"}, {"sha": "f8138dc6d325fc583210c70738bbcd4a7322aa88", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -1336,17 +1336,6 @@ impl Resolver {\n                                 Some(local_def(item.id)),\n                                 ty_m.purity);\n \n-                            // For now, add to both the trait module and the\n-                            // enclosing module, for backwards compatibility.\n-                            let (method_name_bindings, _) =\n-                                self.add_child(ident,\n-                                               new_parent,\n-                                               ForbidDuplicateValues,\n-                                               ty_m.span);\n-                            method_name_bindings.define_value(Public,\n-                                                              def,\n-                                                              ty_m.span);\n-\n                             let (method_name_bindings, _) =\n                                 self.add_child(ident,\n                                                module_parent_opt.get(),"}, {"sha": "906735d950a4ebbbb0afbe57f66149f2809b2bc7", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -272,8 +272,9 @@ fn run(repl: Repl, input: ~str) -> Repl {\n                 vtable_map: vtable_map};\n \n     debug!(\"translation\");\n+    let path = ~path::GenericPath::from_str(\"<repl>\");\n     let (llmod, _) = trans::base::trans_crate(sess, crate, ty_cx,\n-                                              ~path::from_str(\"<repl>\"),\n+                                              path,\n                                               exp_map2, maps);\n     let pm = llvm::LLVMCreatePassManager();\n "}, {"sha": "e72eaa08c3e3e44e2b447b029039bd925c8fe0a4", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -657,7 +657,7 @@ mod tests {\n             };\n             let ebml_doc = reader::Doc(@bytes);\n             let deser = reader::Decoder(ebml_doc);\n-            let v1 = serialize::decode(&deser);\n+            let v1 = serialize::traits::Decodable::decode(&deser);\n             debug!(\"v1 == %?\", v1);\n             assert v == v1;\n         }"}, {"sha": "52037969d24c72352358d8d2337d1b79804fc4d1", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -324,7 +324,6 @@ pub mod flatteners {\n \n     use serialize::{Encoder, Decoder,\n                         Encodable, Decodable};\n-    use serialize::decode;\n \n     use core::io::{Writer, Reader, BytesWriter, ReaderUtil};\n     use flatpipes::util::BufReader;\n@@ -433,15 +432,15 @@ pub mod flatteners {\n         let buf = vec::from_slice(buf);\n         let buf_reader = @BufReader::new(move buf);\n         let reader = buf_reader as @Reader;\n-        let deser: D = from_reader(reader);\n-        decode(&deser)\n+        let deser: D = FromReader::from_reader(reader);\n+        Decodable::decode(&deser)\n     }\n \n     pub fn serialize_value<D: Encoder FromWriter,\n                        T: Encodable<D>>(val: &T) -> ~[u8] {\n         let bytes_writer = @BytesWriter();\n         let writer = bytes_writer as @Writer;\n-        let ser = from_writer(writer);\n+        let ser = FromWriter::from_writer(writer);\n         val.encode(&ser);\n         let bytes = bytes_writer.bytes.check_out(|bytes| move bytes);\n         return move bytes;"}, {"sha": "e32dda045794c4ed7805579d65f8b245f8a6d97f", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -298,7 +298,7 @@ pub impl<S: Encoder, T: Encodable<S>> ~T: Encodable<S> {\n \n pub impl<D: Decoder, T: Decodable<D>> ~T: Decodable<D> {\n     static fn decode(&self, d: &D) -> ~T {\n-        d.read_owned(|| ~decode(d))\n+        d.read_owned(|| ~Decodable::decode(d))\n     }\n }\n \n@@ -310,7 +310,7 @@ pub impl<S: Encoder, T: Encodable<S>> @T: Encodable<S> {\n \n pub impl<D: Decoder, T: Decodable<D>> @T: Decodable<D> {\n     static fn decode(&self, d: &D) -> @T {\n-        d.read_managed(|| @decode(d))\n+        d.read_managed(|| @Decodable::decode(d))\n     }\n }\n \n@@ -338,7 +338,7 @@ pub impl<D: Decoder, T: Decodable<D>> ~[T]: Decodable<D> {\n     static fn decode(&self, d: &D) -> ~[T] {\n         do d.read_owned_vec |len| {\n             do vec::from_fn(len) |i| {\n-                d.read_vec_elt(i, || decode(d))\n+                d.read_vec_elt(i, || Decodable::decode(d))\n             }\n         }\n     }\n@@ -358,7 +358,7 @@ pub impl<D: Decoder, T: Decodable<D>> @[T]: Decodable<D> {\n     static fn decode(&self, d: &D) -> @[T] {\n         do d.read_managed_vec |len| {\n             do at_vec::from_fn(len) |i| {\n-                d.read_vec_elt(i, || decode(d))\n+                d.read_vec_elt(i, || Decodable::decode(d))\n             }\n         }\n     }\n@@ -385,7 +385,8 @@ pub impl<D: Decoder, T: Decodable<D>> Option<T>: Decodable<D> {\n             do d.read_enum_variant |i| {\n                 match i {\n                   0 => None,\n-                  1 => Some(d.read_enum_variant_arg(0u, || decode(d))),\n+                  1 => Some(d.read_enum_variant_arg(\n+                      0u, || Decodable::decode(d))),\n                   _ => fail(fmt!(\"Bad variant for option: %u\", i))\n                 }\n             }\n@@ -418,8 +419,8 @@ pub impl<\n     static fn decode(&self, d: &D) -> (T0, T1) {\n         do d.read_tup(2) {\n             (\n-                d.read_tup_elt(0, || decode(d)),\n-                d.read_tup_elt(1, || decode(d))\n+                d.read_tup_elt(0, || Decodable::decode(d)),\n+                d.read_tup_elt(1, || Decodable::decode(d))\n             )\n         }\n     }\n@@ -453,9 +454,9 @@ pub impl<\n     static fn decode(&self, d: &D) -> (T0, T1, T2) {\n         do d.read_tup(3) {\n             (\n-                d.read_tup_elt(0, || decode(d)),\n-                d.read_tup_elt(1, || decode(d)),\n-                d.read_tup_elt(2, || decode(d))\n+                d.read_tup_elt(0, || Decodable::decode(d)),\n+                d.read_tup_elt(1, || Decodable::decode(d)),\n+                d.read_tup_elt(2, || Decodable::decode(d))\n             )\n         }\n     }\n@@ -492,10 +493,10 @@ pub impl<\n     static fn decode(&self, d: &D) -> (T0, T1, T2, T3) {\n         do d.read_tup(4) {\n             (\n-                d.read_tup_elt(0, || decode(d)),\n-                d.read_tup_elt(1, || decode(d)),\n-                d.read_tup_elt(2, || decode(d)),\n-                d.read_tup_elt(3, || decode(d))\n+                d.read_tup_elt(0, || Decodable::decode(d)),\n+                d.read_tup_elt(1, || Decodable::decode(d)),\n+                d.read_tup_elt(2, || Decodable::decode(d)),\n+                d.read_tup_elt(3, || Decodable::decode(d))\n             )\n         }\n     }\n@@ -536,11 +537,11 @@ pub impl<\n       -> (T0, T1, T2, T3, T4) {\n         do d.read_tup(5) {\n             (\n-                d.read_tup_elt(0, || decode(d)),\n-                d.read_tup_elt(1, || decode(d)),\n-                d.read_tup_elt(2, || decode(d)),\n-                d.read_tup_elt(3, || decode(d)),\n-                d.read_tup_elt(4, || decode(d))\n+                d.read_tup_elt(0, || Decodable::decode(d)),\n+                d.read_tup_elt(1, || Decodable::decode(d)),\n+                d.read_tup_elt(2, || Decodable::decode(d)),\n+                d.read_tup_elt(3, || Decodable::decode(d)),\n+                d.read_tup_elt(4, || Decodable::decode(d))\n             )\n         }\n     }"}, {"sha": "9b7bbb1660f6ae87616aca58b0bcd07d96c7ca44", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -15,7 +15,7 @@ use either::{Right,Left,Either};\n \n use json;\n use sha1;\n-use serialize::{Encoder, Encodable, Decoder, Decodable, decode};\n+use serialize::{Encoder, Encodable, Decoder, Decodable};\n \n /**\n *"}, {"sha": "0ae0423e6be69b7a3ebbeaab17525cf403fd9c85", "filename": "src/test/auxiliary/static-methods-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -36,7 +36,7 @@ impl bool: read {\n }\n \n fn read<T: read Copy>(s: ~str) -> T {\n-    match readMaybe(s) {\n+    match read::readMaybe(s) {\n       Some(x) => x,\n       _ => fail ~\"read failed!\"\n     }"}, {"sha": "c5bba615e28573d91bead8b12d95ab7885bcd0df", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -22,7 +22,7 @@ use std::ebml;\n use EBReader = std::ebml::reader;\n use EBWriter = std::ebml::writer;\n use io::Writer;\n-use std::serialize::{Encodable, Decodable, decode};\n+use std::serialize::traits::{Encodable, Decodable};\n use std::prettyprint;\n use std::time;\n \n@@ -47,7 +47,7 @@ fn test_ebml<A:\n         a1.encode(ebml_w)\n     };\n     let d = EBReader::Doc(@move bytes);\n-    let a2: A = decode(&EBReader::Decoder(d));\n+    let a2: A = Decodable::decode(&EBReader::Decoder(d));\n     assert *a1 == a2;\n }\n "}, {"sha": "aa19fa560405ad03b825eb50e900addaa688e0c0", "filename": "src/test/run-pass/static-fn-inline-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Fstatic-fn-inline-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Fstatic-fn-inline-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-fn-inline-xc.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -16,5 +16,5 @@ extern mod mycore(name =\"static_fn_inline_xc_aux\");\n use mycore::num;\n \n fn main() {\n-    let _1:float = num::from_int2(1i);\n+    let _1:float = num::Num2::from_int2(1i);\n }"}, {"sha": "eb465ecff32a670d2b8a1a4b857eb184e91f29ca", "filename": "src/test/run-pass/static-fn-trait-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Fstatic-fn-trait-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Fstatic-fn-trait-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-fn-trait-xc.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -6,5 +6,5 @@ extern mod mycore(name =\"static_fn_trait_xc_aux\");\n use mycore::num;\n \n fn main() {\n-    let _1:float = num::from_int2(1i);\n+    let _1:float = num::Num2::from_int2(1i);\n }"}, {"sha": "605ffe2d15b10c079c819ded5c9e35737f61a8e4", "filename": "src/test/run-pass/static-method-in-trait-with-tps-intracrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Fstatic-method-in-trait-with-tps-intracrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Fstatic-method-in-trait-with-tps-intracrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-in-trait-with-tps-intracrate.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -30,6 +30,6 @@ impl FromThinAir: Deserializer {\n \n fn main() {\n     let d = FromThinAir { dummy: () };\n-    let i: int = deserialize(&d);\n+    let i: int = Deserializable::deserialize(&d);\n     assert i == 22;\n }\n\\ No newline at end of file"}, {"sha": "4e844fc709b923d54c28ad23e43cdbb0b797d022", "filename": "src/test/run-pass/static-method-test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -18,7 +18,7 @@ trait bool_like {\n }\n \n fn andand<T: bool_like Copy>(x1: T, x2: T) -> T {\n-    select(x1, x2, x1)\n+    bool_like::select(x1, x2, x1)\n }\n \n impl bool: bool_like {\n@@ -57,7 +57,7 @@ impl<A> ~[A]: buildable<A> {\n \n #[inline(always)]\n pure fn build<A, B: buildable<A>>(builder: fn(push: pure fn(+v: A))) -> B {\n-    build_sized(4, builder)\n+    buildable::build_sized(4, builder)\n }\n \n /// Apply a function to each element of an iterable and return the results\n@@ -71,7 +71,7 @@ fn map<T, IT: BaseIter<T>, U, BU: buildable<U>>\n }\n \n fn seq_range<BT: buildable<int>>(lo: uint, hi: uint) -> BT {\n-    do build_sized(hi-lo) |push| {\n+    do buildable::build_sized(hi-lo) |push| {\n         for uint::range(lo, hi) |i| {\n             push(i as int);\n         }\n@@ -87,7 +87,7 @@ fn main() {\n     let v: ~[int] = map(&[1,2,3], |x| 1+x);\n     assert v == ~[2, 3, 4];\n \n-    assert select(true, 9, 14) == 9;\n+    assert bool_like::select(true, 9, 14) == 9;\n     assert !andand(true, false);\n     assert andand(7, 12) == 12;\n     assert andand(0, 12) == 0;"}, {"sha": "d19398456b6d52070b9281be1a43a27932e2d7fe", "filename": "src/test/run-pass/static-method-xcrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Fstatic-method-xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Fstatic-method-xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-xcrate.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -14,7 +14,7 @@\n \n extern mod static_methods_crate;\n use static_methods_crate::read;\n-use readMaybeRenamed = static_methods_crate::readMaybe;\n+use readMaybeRenamed = static_methods_crate::read::readMaybe;\n \n fn main() {\n     let result: int = read(~\"5\");"}, {"sha": "05e91912c2447a9eff4a2c5eb2cb6eb297631bf5", "filename": "src/test/run-pass/trait-inheritance-num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -11,7 +11,7 @@\n // except according to those terms.\n \n use cmp::{Eq, Ord};\n-use num::from_int;\n+use num::Num::from_int;\n \n extern mod std;\n use std::cmp::FuzzyEq;"}, {"sha": "cd671f82dd9baaacb463605ae25b4f0db68ef686", "filename": "src/test/run-pass/trait-inheritance-num0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -12,7 +12,7 @@\n \n // Extending Num and using inherited static methods\n \n-use num::from_int;\n+use Num::from_int;\n \n trait Num {\n     static fn from_int(i: int) -> self;"}, {"sha": "3740e484a45a53e9abbced73af26429d1d463871", "filename": "src/test/run-pass/trait-inheritance-num1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -11,7 +11,7 @@\n // Using the real Num from core\n \n use cmp::Ord;\n-use num::from_int;\n+use num::Num::from_int;\n \n pub trait NumExt: Num Ord { }\n "}, {"sha": "7686f388e2c37775bf996c48a96ac3d9d3f41e45", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -13,7 +13,7 @@\n // A more complex example of numeric extensions\n \n use cmp::{Eq, Ord};\n-use num::from_int;\n+use num::Num::from_int;\n \n extern mod std;\n use std::cmp::FuzzyEq;"}, {"sha": "78dfee136a93d245eede01ea99e7cdd8ec255589", "filename": "src/test/run-pass/trait-inheritance-num3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use cmp::{Eq, Ord};\n-use num::from_int;\n+use num::Num::from_int;\n \n pub trait NumExt: Eq Ord Num {}\n "}, {"sha": "c8db6f17a81d78fae66565095f2fe101630a8e91", "filename": "src/test/run-pass/trait-inheritance-num5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use cmp::{Eq, Ord};\n-use num::from_int;\n+use num::Num::from_int;\n \n pub trait NumExt: Eq Num {}\n "}, {"sha": "15dcde281d2d0f8b3218711de1f157dc49b358ec", "filename": "src/test/run-pass/trait-inheritance-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -26,7 +26,7 @@ impl S: MyNum {\n \n impl S: NumExt { }\n \n-fn greater_than_one<T:NumExt>() -> T { from_int(1) }\n+fn greater_than_one<T:NumExt>() -> T { MyNum::from_int(1) }\n \n fn main() {\n     let v: S = greater_than_one();"}, {"sha": "a523c90fe37370571c32b32881a6c033adc1d8bf", "filename": "src/test/run-pass/trait-inheritance-static2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -30,7 +30,7 @@ impl S: MyNum {\n \n impl S: NumExt { }\n \n-fn greater_than_one<T:NumExt>() -> T { from_int(1) }\n+fn greater_than_one<T:NumExt>() -> T { MyNum::from_int(1) }\n \n fn main() {\n     let v: S = greater_than_one();"}, {"sha": "17309d27900f83cac220b12d25501b3ae4253220", "filename": "src/test/run-pass/trait-static-method-overwriting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -37,6 +37,6 @@ mod base {\n }\n \n fn main() {\n-    let f: base::Foo = base::new::<base::Foo, base::Foo>();\n-\tlet b: base::Bar = base::new::<base::Bar, base::Bar>();\n+    let f: base::Foo = base::HasNew::new::<base::Foo, base::Foo>();\n+\tlet b: base::Bar = base::HasNew::new::<base::Bar, base::Bar>();\n }"}, {"sha": "582358a40129b5e35cc51f3d917376a0dfb3f7f7", "filename": "src/test/run-pass/typeclasses-eq-example-static.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ddf3c7bdbd874ad6596e9444abb61b5903bc04/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs?ref=97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "patch": "@@ -37,28 +37,28 @@ enum ColorTree {\n impl ColorTree : Equal {\n     static fn isEq(a: ColorTree, b: ColorTree) -> bool {\n         match (a, b) {\n-          (leaf(x), leaf(y)) => { isEq(x, y) }\n+          (leaf(x), leaf(y)) => { Equal::isEq(x, y) }\n           (branch(l1, r1), branch(l2, r2)) => { \n-            isEq(*l1, *l2) && isEq(*r1, *r2)\n+            Equal::isEq(*l1, *l2) && Equal::isEq(*r1, *r2)\n           }\n           _ => { false }\n         }\n     }\n }\n \n fn main() {\n-    assert isEq(cyan, cyan);\n-    assert isEq(magenta, magenta);\n-    assert !isEq(cyan, yellow);\n-    assert !isEq(magenta, cyan);\n+    assert Equal::isEq(cyan, cyan);\n+    assert Equal::isEq(magenta, magenta);\n+    assert !Equal::isEq(cyan, yellow);\n+    assert !Equal::isEq(magenta, cyan);\n \n-    assert isEq(leaf(cyan), leaf(cyan));\n-    assert !isEq(leaf(cyan), leaf(yellow));\n+    assert Equal::isEq(leaf(cyan), leaf(cyan));\n+    assert !Equal::isEq(leaf(cyan), leaf(yellow));\n \n-    assert isEq(branch(@leaf(magenta), @leaf(cyan)),\n+    assert Equal::isEq(branch(@leaf(magenta), @leaf(cyan)),\n                 branch(@leaf(magenta), @leaf(cyan)));\n \n-    assert !isEq(branch(@leaf(magenta), @leaf(cyan)),\n+    assert !Equal::isEq(branch(@leaf(magenta), @leaf(cyan)),\n                  branch(@leaf(magenta), @leaf(magenta)));\n \n     log(error, \"Assertions all succeeded!\");"}]}