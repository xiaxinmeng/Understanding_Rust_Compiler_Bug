{"sha": "0c3d6b46acce5d5fce9565d5e5b83f0b4e4fefbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjM2Q2YjQ2YWNjZTVkNWZjZTk1NjVkNWU1YjgzZjBiNGU0ZmVmYmM=", "commit": {"author": {"name": "Lawrence Woodman", "email": "lwoodman@vlifesystems.com", "date": "2016-01-04T07:21:48Z"}, "committer": {"name": "Lawrence Woodman", "email": "lwoodman@vlifesystems.com", "date": "2016-01-04T07:21:48Z"}, "message": "Add missing use statements\n\nfs::File was being referenced without either calling via std::fs::File or by using File after having used fs::File.  Also Path was being referenced without first having used std::path::Path.", "tree": {"sha": "397e11c6c7758ba7e30e1a1ac12d1b152cfd2f00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/397e11c6c7758ba7e30e1a1ac12d1b152cfd2f00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c3d6b46acce5d5fce9565d5e5b83f0b4e4fefbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c3d6b46acce5d5fce9565d5e5b83f0b4e4fefbc", "html_url": "https://github.com/rust-lang/rust/commit/0c3d6b46acce5d5fce9565d5e5b83f0b4e4fefbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c3d6b46acce5d5fce9565d5e5b83f0b4e4fefbc/comments", "author": {"login": "lawrencewoodman", "id": 238718, "node_id": "MDQ6VXNlcjIzODcxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/238718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lawrencewoodman", "html_url": "https://github.com/lawrencewoodman", "followers_url": "https://api.github.com/users/lawrencewoodman/followers", "following_url": "https://api.github.com/users/lawrencewoodman/following{/other_user}", "gists_url": "https://api.github.com/users/lawrencewoodman/gists{/gist_id}", "starred_url": "https://api.github.com/users/lawrencewoodman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lawrencewoodman/subscriptions", "organizations_url": "https://api.github.com/users/lawrencewoodman/orgs", "repos_url": "https://api.github.com/users/lawrencewoodman/repos", "events_url": "https://api.github.com/users/lawrencewoodman/events{/privacy}", "received_events_url": "https://api.github.com/users/lawrencewoodman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lawrencewoodman", "id": 238718, "node_id": "MDQ6VXNlcjIzODcxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/238718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lawrencewoodman", "html_url": "https://github.com/lawrencewoodman", "followers_url": "https://api.github.com/users/lawrencewoodman/followers", "following_url": "https://api.github.com/users/lawrencewoodman/following{/other_user}", "gists_url": "https://api.github.com/users/lawrencewoodman/gists{/gist_id}", "starred_url": "https://api.github.com/users/lawrencewoodman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lawrencewoodman/subscriptions", "organizations_url": "https://api.github.com/users/lawrencewoodman/orgs", "repos_url": "https://api.github.com/users/lawrencewoodman/repos", "events_url": "https://api.github.com/users/lawrencewoodman/events{/privacy}", "received_events_url": "https://api.github.com/users/lawrencewoodman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99e59dec5a8781817b4a1858535b1ffe11b8f735", "url": "https://api.github.com/repos/rust-lang/rust/commits/99e59dec5a8781817b4a1858535b1ffe11b8f735", "html_url": "https://github.com/rust-lang/rust/commit/99e59dec5a8781817b4a1858535b1ffe11b8f735"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "be60ea8f81fc3c00a6e5143c20eb0c3b7ef5d0c4", "filename": "src/doc/book/error-handling.md", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0c3d6b46acce5d5fce9565d5e5b83f0b4e4fefbc/src%2Fdoc%2Fbook%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c3d6b46acce5d5fce9565d5e5b83f0b4e4fefbc/src%2Fdoc%2Fbook%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ferror-handling.md?ref=0c3d6b46acce5d5fce9565d5e5b83f0b4e4fefbc", "patch": "@@ -1613,6 +1613,9 @@ CSV data given to us and print out a field in matching rows. Let's do it. (Make\n sure to add `extern crate csv;` to the top of your file.)\n \n ```rust,ignore\n+use std::fs::File;\n+use std::path::Path;\n+\n // This struct represents the data in each row of the CSV file.\n // Type based decoding absolves us of a lot of the nitty gritty error\n // handling, like parsing strings as integers or floats.\n@@ -1656,7 +1659,7 @@ fn main() {\n \tlet data_path = Path::new(&data_file);\n \tlet city = args[2].clone();\n \n-\tlet file = fs::File::open(data_path).unwrap();\n+\tlet file = File::open(data_path).unwrap();\n \tlet mut rdr = csv::Reader::from_reader(file);\n \n \tfor row in rdr.decode::<Row>() {\n@@ -1674,7 +1677,7 @@ fn main() {\n Let's outline the errors. We can start with the obvious: the three places that\n `unwrap` is called:\n \n-1. [`fs::File::open`](../std/fs/struct.File.html#method.open)\n+1. [`File::open`](../std/fs/struct.File.html#method.open)\n    can return an\n    [`io::Error`](../std/io/struct.Error.html).\n 2. [`csv::Reader::decode`](http://burntsushi.net/rustdoc/csv/struct.Reader.html#method.decode)\n@@ -1734,7 +1737,7 @@ fn print_usage(program: &str, opts: Options) {\n \n fn search<P: AsRef<Path>>(file_path: P, city: &str) -> Vec<PopulationCount> {\n     let mut found = vec![];\n-    let file = fs::File::open(file_path).unwrap();\n+    let file = File::open(file_path).unwrap();\n     let mut rdr = csv::Reader::from_reader(file);\n     for row in rdr.decode::<Row>() {\n         let row = row.unwrap();\n@@ -1796,7 +1799,7 @@ fn search<P: AsRef<Path>>\n          (file_path: P, city: &str)\n          -> Result<Vec<PopulationCount>, Box<Error+Send+Sync>> {\n     let mut found = vec![];\n-    let file = try!(fs::File::open(file_path));\n+    let file = try!(File::open(file_path));\n     let mut rdr = csv::Reader::from_reader(file);\n     for row in rdr.decode::<Row>() {\n         let row = try!(row);\n@@ -1930,7 +1933,7 @@ fn search<P: AsRef<Path>>\n     let mut found = vec![];\n     let input: Box<io::Read> = match *file_path {\n         None => Box::new(io::stdin()),\n-        Some(ref file_path) => Box::new(try!(fs::File::open(file_path))),\n+        Some(ref file_path) => Box::new(try!(File::open(file_path))),\n     };\n     let mut rdr = csv::Reader::from_reader(input);\n     // The rest remains unchanged!\n@@ -2017,7 +2020,7 @@ fn search<P: AsRef<Path>>\n     let mut found = vec![];\n     let input: Box<io::Read> = match *file_path {\n         None => Box::new(io::stdin()),\n-        Some(ref file_path) => Box::new(try!(fs::File::open(file_path))),\n+        Some(ref file_path) => Box::new(try!(File::open(file_path))),\n     };\n     let mut rdr = csv::Reader::from_reader(input);\n     for row in rdr.decode::<Row>() {"}]}