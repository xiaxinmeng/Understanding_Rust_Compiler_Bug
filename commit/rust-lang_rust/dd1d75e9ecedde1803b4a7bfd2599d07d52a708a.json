{"sha": "dd1d75e9ecedde1803b4a7bfd2599d07d52a708a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMWQ3NWU5ZWNlZGRlMTgwM2I0YTdiZmQyNTk5ZDA3ZDUyYTcwOGE=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-06-04T23:55:50Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-06-04T23:55:50Z"}, "message": "Skip documentation files without ``` when running markdown tests.\n\nThis should reduce the 'running 0 tests' noise in builds, and is a good\nheuristic for us to use.", "tree": {"sha": "ffb2d197a04fe99a32f6d601f0896175e5c26f7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffb2d197a04fe99a32f6d601f0896175e5c26f7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd1d75e9ecedde1803b4a7bfd2599d07d52a708a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd1d75e9ecedde1803b4a7bfd2599d07d52a708a", "html_url": "https://github.com/rust-lang/rust/commit/dd1d75e9ecedde1803b4a7bfd2599d07d52a708a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd1d75e9ecedde1803b4a7bfd2599d07d52a708a/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a4e13f5c43a6eaf97ab3b62c5f1d2d9ab4f3d6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a4e13f5c43a6eaf97ab3b62c5f1d2d9ab4f3d6e", "html_url": "https://github.com/rust-lang/rust/commit/9a4e13f5c43a6eaf97ab3b62c5f1d2d9ab4f3d6e"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "23cc22c5cb3ae6b609e3fea4db79fbf4bb718af9", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dd1d75e9ecedde1803b4a7bfd2599d07d52a708a/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd1d75e9ecedde1803b4a7bfd2599d07d52a708a/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=dd1d75e9ecedde1803b4a7bfd2599d07d52a708a", "patch": "@@ -18,9 +18,10 @@ extern crate build_helper;\n use std::collections::HashSet;\n use std::env;\n use std::fmt;\n-use std::fs;\n+use std::fs::{self, File};\n use std::path::{PathBuf, Path};\n use std::process::Command;\n+use std::io::Read;\n \n use build_helper::output;\n \n@@ -328,24 +329,15 @@ pub fn docs(build: &Build, compiler: &Compiler) {\n \n     while let Some(p) = stack.pop() {\n         if p.is_dir() {\n-            stack.extend(t!(p.read_dir()).map(|p| t!(p).path()));\n+            stack.extend(t!(p.read_dir()).map(|p| t!(p).path()).filter(|p| {\n+                p.extension().and_then(|s| s.to_str()) == Some(\"md\") &&\n+                // The nostarch directory in the book is for no starch, and so isn't guaranteed to\n+                // build. We don't care if it doesn't build, so skip it.\n+                p.to_str().map_or(true, |p| !p.contains(\"nostarch\"))\n+            }));\n             continue\n         }\n \n-        if p.extension().and_then(|s| s.to_str()) != Some(\"md\") {\n-            continue\n-        }\n-\n-        // The nostarch directory in the book is for no starch, and so isn't guaranteed to build.\n-        // we don't care if it doesn't build, so skip it.\n-        use std::ffi::OsStr;\n-        let path: &OsStr = p.as_ref();\n-        if let Some(path) = path.to_str() {\n-            if path.contains(\"nostarch\") {\n-                continue;\n-            }\n-        }\n-\n         println!(\"doc tests for: {}\", p.display());\n         markdown_test(build, compiler, &p);\n     }\n@@ -376,6 +368,13 @@ pub fn error_index(build: &Build, compiler: &Compiler) {\n }\n \n fn markdown_test(build: &Build, compiler: &Compiler, markdown: &Path) {\n+    let mut file = t!(File::open(markdown));\n+    let mut contents = String::new();\n+    t!(file.read_to_string(&mut contents));\n+    if !contents.contains(\"```\") {\n+        return;\n+    }\n+\n     let mut cmd = Command::new(build.rustdoc(compiler));\n     build.add_rustc_lib_path(compiler, &mut cmd);\n     build.add_rust_test_threads(&mut cmd);"}]}