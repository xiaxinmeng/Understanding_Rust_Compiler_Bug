{"sha": "5f390cfb722cf95b0df81f9563bf97b1663cff9e", "node_id": "C_kwDOAAsO6NoAKDVmMzkwY2ZiNzIyY2Y5NWIwZGY4MWY5NTYzYmY5N2IxNjYzY2ZmOWU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2021-10-23T19:51:22Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2021-10-23T19:51:22Z"}, "message": "Add tests for `const_slice_from_ref` and `const_array_from_ref`", "tree": {"sha": "def8b2963423180644bbdad113cfe525e9e0539b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/def8b2963423180644bbdad113cfe525e9e0539b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f390cfb722cf95b0df81f9563bf97b1663cff9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f390cfb722cf95b0df81f9563bf97b1663cff9e", "html_url": "https://github.com/rust-lang/rust/commit/5f390cfb722cf95b0df81f9563bf97b1663cff9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f390cfb722cf95b0df81f9563bf97b1663cff9e/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27d69611347142cc5f103df0923b46d670e75739", "url": "https://api.github.com/repos/rust-lang/rust/commits/27d69611347142cc5f103df0923b46d670e75739", "html_url": "https://github.com/rust-lang/rust/commit/27d69611347142cc5f103df0923b46d670e75739"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "d10bb4bce3cb9fc8182059cf68d0983c72242986", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f390cfb722cf95b0df81f9563bf97b1663cff9e/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f390cfb722cf95b0df81f9563bf97b1663cff9e/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=5f390cfb722cf95b0df81f9563bf97b1663cff9e", "patch": "@@ -7,6 +7,11 @@ fn array_from_ref() {\n     let value: String = \"Hello World!\".into();\n     let arr: &[String; 1] = array::from_ref(&value);\n     assert_eq!(&[value.clone()], arr);\n+\n+    const VALUE: &&str = &\"Hello World!\";\n+    const ARR: &[&str; 1] = array::from_ref(VALUE);\n+    assert_eq!(&[*VALUE], ARR);\n+    assert!(core::ptr::eq(VALUE, &ARR[0]));\n }\n \n #[test]"}, {"sha": "665ec756db1698b0002bbb7c266b4625b8b4e64d", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f390cfb722cf95b0df81f9563bf97b1663cff9e/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f390cfb722cf95b0df81f9563bf97b1663cff9e/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=5f390cfb722cf95b0df81f9563bf97b1663cff9e", "patch": "@@ -71,6 +71,8 @@\n #![feature(trusted_random_access)]\n #![feature(unsize)]\n #![feature(unzip_option)]\n+#![feature(const_array_from_ref)]\n+#![feature(const_slice_from_ref)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n extern crate test;"}, {"sha": "f1691c4f057101d2b01482283b45032c23e36d24", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f390cfb722cf95b0df81f9563bf97b1663cff9e/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f390cfb722cf95b0df81f9563bf97b1663cff9e/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=5f390cfb722cf95b0df81f9563bf97b1663cff9e", "patch": "@@ -2146,6 +2146,14 @@ fn test_slice_run_destructors() {\n     assert_eq!(x.get(), 1);\n }\n \n+#[test]\n+fn test_const_from_ref() {\n+    const VALUE: &i32 = &1;\n+    const SLICE: &[i32] = core::slice::from_ref(VALUE);\n+\n+    assert!(core::ptr::eq(VALUE, &SLICE[0]))\n+}\n+\n #[test]\n fn test_slice_fill_with_uninit() {\n     // This should not UB. See #87891"}]}