{"sha": "f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MzcyZjg3NmM2NmFlNGRmOTY2MzhiYmZkZjlhYzdiYWZmY2YzYTY=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-10T11:52:00Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-08-04T08:48:30Z"}, "message": "Remove trailing whitespace from error messages", "tree": {"sha": "5187f5f174709d7b0f1bad0e8fc0421e2444329e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5187f5f174709d7b0f1bad0e8fc0421e2444329e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "html_url": "https://github.com/rust-lang/rust/commit/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71ff9b41e9ebd3e336019513917a7a8868d1cc66", "url": "https://api.github.com/repos/rust-lang/rust/commits/71ff9b41e9ebd3e336019513917a7a8868d1cc66", "html_url": "https://github.com/rust-lang/rust/commit/71ff9b41e9ebd3e336019513917a7a8868d1cc66"}], "stats": {"total": 491, "additions": 247, "deletions": 244}, "files": [{"sha": "050f3ae583371d722fc8101f7c7723af44d2e4ab", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -954,7 +954,6 @@ impl EmitterWriter {\n         //   |\n         for pos in 0..=line_len {\n             draw_col_separator(buffer, line_offset + pos + 1, width_offset - 2);\n-            buffer.putc(line_offset + pos + 1, width_offset - 2, '|', Style::LineNumber);\n         }\n \n         // Write the horizontal lines for multiline annotations\n@@ -1344,7 +1343,11 @@ impl EmitterWriter {\n                 let buffer_msg_line_offset = buffer.num_lines();\n \n                 // Add spacing line\n-                draw_col_separator(&mut buffer, buffer_msg_line_offset, max_line_num_len + 1);\n+                draw_col_separator_no_space(\n+                    &mut buffer,\n+                    buffer_msg_line_offset,\n+                    max_line_num_len + 1,\n+                );\n \n                 // Then, the secondary file indicator\n                 buffer.prepend(buffer_msg_line_offset + 1, \"::: \", Style::LineNumber);"}, {"sha": "bf18eee4e07ed3ada762875c5dc9cbc48d64ddb6", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0277]: `<<Self as Case1>::C as Iterator>::Item` cannot be sent between th\n    |\n LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n    |                                    ^^^^ `<<Self as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n-   | \n+   |\n   ::: $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n LL | pub unsafe auto trait Send {\n@@ -20,7 +20,7 @@ error[E0277]: `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n    |\n LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n-   | \n+   |\n   ::: $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL | pub trait Iterator {\n@@ -37,7 +37,7 @@ error[E0277]: `<<Self as Case1>::C as Iterator>::Item` cannot be shared between\n    |\n LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n    |                                                                                             ^^^^ `<<Self as Case1>::C as Iterator>::Item` cannot be shared between threads safely\n-   | \n+   |\n   ::: $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n LL | pub unsafe auto trait Sync {"}, {"sha": "46d472cdf80dbec9e5b14ce831c8ad4631848ac5", "filename": "src/test/ui/associated-type-bounds/bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0277]: `<<Self as Case1>::A as Iterator>::Item` doesn't implement `Debug`\n    |\n LL |     type A: Iterator<Item: Debug>;\n    |                            ^^^^^ `<<Self as Case1>::A as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n    |\n LL | pub trait Debug {\n@@ -20,7 +20,7 @@ error[E0277]: the trait bound `<<Self as Foo>::Out as Baz>::Assoc: Default` is n\n    |\n LL | pub trait Foo { type Out: Baz<Assoc: Default>; }\n    |                                      ^^^^^^^ the trait `Default` is not implemented for `<<Self as Foo>::Out as Baz>::Assoc`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/default.rs:LL:COL\n    |\n LL | pub trait Default: Sized {"}, {"sha": "e837150c05d8bae7f364e12a29cb1b392a2498ed", "filename": "src/test/ui/associated-types/defaults-wf.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n    |\n LL |     type Ty = Vec<[u8]>;\n    |               ^^^^^^^^^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n    |\n LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {"}, {"sha": "0afc380293370a54fb2e80a4a48d3f44a3e6c2ea", "filename": "src/test/ui/associated-types/trait-with-supertraits-needing-sized-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n    |\n LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + Div<Output=Self> {}\n    |                      ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/core/src/ops/arith.rs:LL:COL\n    |\n LL | pub trait Add<Rhs = Self> {"}, {"sha": "d75e927696e106c369966d7d632d2e031b55cbbf", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -37,7 +37,7 @@ LL |     fun((async || {})(), (async || {})());\n    |                   --     ^^^^^^^^^^^^^^^ expected `async` closure body, found a different `async` closure body\n    |                   |\n    |                   the expected `async` closure body\n-   | \n+   |\n   ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n    |\n LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>"}, {"sha": "b586207a25ffde9411ada59feac9632e540c4124", "filename": "src/test/ui/async-await/issue-72442.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0277]: the trait bound `Option<&str>: AsRef<Path>` is not satisfied\n    |\n LL |             let mut f = File::open(path.to_str())?;\n    |                                    ^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `Option<&str>`\n-   | \n+   |\n   ::: $SRC_DIR/std/src/fs.rs:LL:COL\n    |\n LL |     pub fn open<P: AsRef<Path>>(path: P) -> io::Result<File> {"}, {"sha": "39e50a106acab5571cda72024dc6a41ca06939d4", "filename": "src/test/ui/async-await/issues/issue-67893.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL | fn g(_: impl Send) {}\n ...\n LL |     g(issue_67893::run())\n    |     ^ `MutexGuard<'_, ()>` cannot be sent between threads safely\n-   | \n+   |\n   ::: $DIR/auxiliary/issue_67893.rs:7:20\n    |\n LL | pub async fn run() {"}, {"sha": "0714e666d387f4baa323f9ef698355efe75f4360", "filename": "src/test/ui/async-await/pin-needed-to-poll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL | struct Sleep;\n ...\n LL |         self.sleep.poll(cx)\n    |                    ^^^^ method not found in `Sleep`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/future/future.rs:LL:COL\n    |\n LL |     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;"}, {"sha": "e7ecd0079f08d35aaba9b88db696206ff5fd725e", "filename": "src/test/ui/borrowck/move-error-snippets.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL |         let a = $c;\n    |                 |\n    |                 move occurs because `D` has type `A`, which does not implement the `Copy` trait\n    |                 help: consider borrowing here: `&$c`\n-   | \n+   |\n   ::: $DIR/move-error-snippets.rs:21:1\n    |\n LL | sss!();"}, {"sha": "14e28174a295d8b85b0c8af361d6f60a0a5668c2", "filename": "src/test/ui/bound-suggestions.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -75,7 +75,7 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n    |\n LL |     const SIZE: usize = core::mem::size_of::<Self>();\n    |                                              ^^^^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n@@ -91,7 +91,7 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n    |\n LL |     const SIZE: usize = core::mem::size_of::<Self>();\n    |                                              ^^^^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n@@ -107,7 +107,7 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n    |\n LL |     const SIZE: usize = core::mem::size_of::<Self>();\n    |                                              ^^^^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n@@ -123,7 +123,7 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n    |\n LL |     const SIZE: usize = core::mem::size_of::<Self>();\n    |                                              ^^^^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n@@ -139,7 +139,7 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n    |\n LL |     const SIZE: usize = core::mem::size_of::<Self>();\n    |                                              ^^^^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {"}, {"sha": "64946c316cd1e78ac69f81884d6b1db709bdb4fc", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-in-metadata.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0277]: `T` cannot be sent between threads safely\n    |\n LL | impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be sent between threads safely\n-   | \n+   |\n   ::: $DIR/auxiliary/trait_superkinds_in_metadata.rs:7:58\n    |\n LL | pub trait RequiresRequiresShareAndSend : RequiresShare + Send { }"}, {"sha": "b399f729f6506fb0bd0577bbf1a0ed68639a2391", "filename": "src/test/ui/c-variadic/issue-86053-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fissue-86053-1.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -63,7 +63,7 @@ error[E0412]: cannot find type `F` in this scope\n    |\n LL |     self , ... ,   self ,   self , ... ) where F : FnOnce ( & 'a & 'b usize ) {\n    |                                                ^\n-   | \n+   |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n LL | pub trait Fn<Args>: FnMut<Args> {"}, {"sha": "b4e5db74e03486d1522d7a27c8f5f3c0a4c91843", "filename": "src/test/ui/closures/closure-move-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0277]: `std::sync::mpsc::Receiver<()>` cannot be shared between threads s\n    |\n LL |     let t = thread::spawn(|| {\n    |             ^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n-   | \n+   |\n   ::: $SRC_DIR/std/src/thread/mod.rs:LL:COL\n    |\n LL |     F: Send + 'static,\n@@ -18,7 +18,7 @@ error[E0277]: `Sender<()>` cannot be shared between threads safely\n    |\n LL |     thread::spawn(|| tx.send(()).unwrap());\n    |     ^^^^^^^^^^^^^ `Sender<()>` cannot be shared between threads safely\n-   | \n+   |\n   ::: $SRC_DIR/std/src/thread/mod.rs:LL:COL\n    |\n LL |     F: Send + 'static,"}, {"sha": "cc2c9c8681bccf997962bf3a8ddc325fac9b274c", "filename": "src/test/ui/const-generics/const-argument-if-length.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -5,7 +5,7 @@ LL | pub const fn is_zst<T: ?Sized>() -> usize {\n    |                     - this type parameter needs to be `std::marker::Sized`\n LL |     if std::mem::size_of::<T>() == 0 {\n    |                            ^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {"}, {"sha": "ce7ec4d90b6bf628d6e4c0ca59e29bf7ea05373a", "filename": "src/test/ui/const-generics/const_evaluatable_checked/cross_crate_predicate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error: unconstrained generic constant\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n@@ -16,7 +16,7 @@ error: unconstrained generic constant\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n    |\n LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]\n@@ -29,7 +29,7 @@ error: unconstrained generic constant\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n@@ -42,7 +42,7 @@ error: unconstrained generic constant\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n    |\n LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]"}, {"sha": "04503495bc62afef6f2405cde17fc6b12418c0fa", "filename": "src/test/ui/const-ptr/out_of_bounds_read.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,12 +6,12 @@ LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n    |              |\n    |              memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n    |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   | \n+   |\n   ::: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n    |         --------------------------------------------- inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/out_of_bounds_read.rs:13:33\n    |\n LL |     const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n@@ -25,17 +25,17 @@ LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n    |              |\n    |              memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n    |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   | \n+   |\n   ::: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n    |         --------------------------------------------- inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   | \n+   |\n   ::: $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { read(self) }\n    |                  ---------- inside `ptr::const_ptr::<impl *const u32>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/out_of_bounds_read.rs:14:39\n    |\n LL |     const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n@@ -49,17 +49,17 @@ LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n    |              |\n    |              memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n    |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   | \n+   |\n   ::: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n    |         --------------------------------------------- inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   | \n+   |\n   ::: $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    |\n LL |         unsafe { read(self) }\n    |                  ---------- inside `ptr::mut_ptr::<impl *mut u32>::read` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/out_of_bounds_read.rs:15:37\n    |\n LL |     const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };"}, {"sha": "65cb3d74b233e3b20e97fd2d7229002b0ab587dc", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { intrinsics::unreachable() }\n    |              |\n    |              entering unreachable code\n    |              inside `unreachable_unchecked` at $SRC_DIR/core/src/hint.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/const_unsafe_unreachable_ub.rs:7:18\n    |\n LL |         false => std::hint::unreachable_unchecked(),"}, {"sha": "36db6b7865af2cf6333f773503889bb3a0e1a88c", "filename": "src/test/ui/consts/miri_unleashed/drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n    | |\n    | calling non-const function `<Vec<i32> as Drop>::drop`\n    | inside `std::ptr::drop_in_place::<Vec<i32>> - shim(Some(Vec<i32>))` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/drop.rs:18:1\n    |\n LL | };"}, {"sha": "2478ff081d770ed1f86f8b3f6594f18527111f51", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -12,7 +12,7 @@ LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n    |                  |\n    |                  0x2a is not a valid pointer\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/offset_from_ub.rs:24:14\n    |\n LL |     unsafe { (42 as *const u8).offset_from(&5u8) as usize }"}, {"sha": "4c3f373e0801c03eadb6f1610e86bdc046dda6ac", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  |\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/offset_ub.rs:8:46\n    |\n LL | pub const BEFORE_START: *const u8 = unsafe { (&0u8 as *const u8).offset(-1) };\n@@ -20,7 +20,7 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  |\n    |                  pointer arithmetic failed: allocN has size 1, so pointer to 2 bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/offset_ub.rs:9:43\n    |\n LL | pub const AFTER_END: *const u8 = unsafe { (&0u8 as *const u8).offset(2) };\n@@ -34,7 +34,7 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  |\n    |                  pointer arithmetic failed: allocN has size 100, so pointer to 101 bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/offset_ub.rs:10:45\n    |\n LL | pub const AFTER_ARRAY: *const u8 = unsafe { [0u8; 100].as_ptr().offset(101) };\n@@ -48,7 +48,7 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  |\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u16>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/offset_ub.rs:12:43\n    |\n LL | pub const OVERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MAX) };\n@@ -62,7 +62,7 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  |\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u16>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/offset_ub.rs:13:44\n    |\n LL | pub const UNDERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MIN) };\n@@ -76,7 +76,7 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  |\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/offset_ub.rs:14:56\n    |\n LL | pub const OVERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (usize::MAX as *const u8).offset(2) };\n@@ -90,7 +90,7 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  |\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/offset_ub.rs:15:57\n    |\n LL | pub const UNDERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (1 as *const u8).offset(-2) };\n@@ -104,7 +104,7 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  |\n    |                  pointer arithmetic failed: allocN has size 1, so pointer to 2 bytes starting at offset -4 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/offset_ub.rs:16:49\n    |\n LL | pub const NEGATIVE_OFFSET: *const u8 = unsafe { [0u8; 1].as_ptr().wrapping_offset(-2).offset(-2) };\n@@ -118,7 +118,7 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  |\n    |                  pointer arithmetic failed: allocN has size 0, so pointer to 1 byte starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/offset_ub.rs:18:50\n    |\n LL | pub const ZERO_SIZED_ALLOC: *const u8 = unsafe { [0u8; 0].as_ptr().offset(1) };\n@@ -132,7 +132,7 @@ LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n    |                  |\n    |                  0x1 is not a valid pointer\n    |                  inside `ptr::mut_ptr::<impl *mut u8>::offset` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/offset_ub.rs:19:42\n    |\n LL | pub const DANGLING: *const u8 = unsafe { ptr::NonNull::<u8>::dangling().as_ptr().offset(4) };\n@@ -146,7 +146,7 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  |\n    |                  pointer arithmetic failed: 0x0 is not a valid pointer\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/offset_ub.rs:22:50\n    |\n LL | pub const NULL_OFFSET_ZERO: *const u8 = unsafe { ptr::null::<u8>().offset(0) };\n@@ -160,7 +160,7 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  |\n    |                  0x7f..f is not a valid pointer\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/offset_ub.rs:25:47\n    |\n LL | pub const UNDERFLOW_ABS: *const u8 = unsafe { (usize::MAX as *const u8).offset(isize::MIN) };"}, {"sha": "a28ae521d5b9a94a61993bb580356b06281c01b6", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  |\n    |                  pointer arithmetic failed: alloc3 has size $WORD, so pointer to $TWO_WORDS bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const usize>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/ptr_comparisons.rs:61:34\n    |\n LL | const _: *const usize = unsafe { (FOO as *const usize).offset(2) };"}, {"sha": "ff9e87250c75dc81b7b353feaf2c23926c0e98f8", "filename": "src/test/ui/cross/cross-file-errors/main.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fcross%2Fcross-file-errors%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fcross%2Fcross-file-errors%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-file-errors%2Fmain.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0658]: destructuring assignments are unstable\n    |\n LL |         _\n    |         ^\n-   | \n+   |\n   ::: $DIR/main.rs:5:5\n    |\n LL |     underscore!();\n@@ -18,7 +18,7 @@ error: in expressions, `_` can only be used on the left-hand side of an assignme\n    |\n LL |         _\n    |         ^ `_` not allowed here\n-   | \n+   |\n   ::: $DIR/main.rs:5:5\n    |\n LL |     underscore!();"}, {"sha": "6267fad4372a44f5f3abe256589a71be85d088ff", "filename": "src/test/ui/derives/derives-span-Eq-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL | #[derive(Eq,PartialEq)]\n ...\n LL |      x: Error\n    |      ^^^^^^^^ the trait `Eq` is not implemented for `Error`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {"}, {"sha": "5dc407340019128f4dbcf5797611734140ea2199", "filename": "src/test/ui/derives/derives-span-Eq-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL | #[derive(Eq,PartialEq)]\n ...\n LL |      Error\n    |      ^^^^^ the trait `Eq` is not implemented for `Error`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {"}, {"sha": "5fd21e2cd79008ce87d43bb97b683354eb258ba9", "filename": "src/test/ui/derives/derives-span-Eq-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL | #[derive(Eq,PartialEq)]\n LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ the trait `Eq` is not implemented for `Error`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {"}, {"sha": "d96687f8bf2e274fd5027d727d2aab150d145f8c", "filename": "src/test/ui/derives/derives-span-Eq-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL | #[derive(Eq,PartialEq)]\n LL | struct Struct(\n LL |     Error\n    |     ^^^^^ the trait `Eq` is not implemented for `Error`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {"}, {"sha": "557431ab5bc2a220b4e957cb2a366e59d8f8966e", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL | #[derive(Hash)]\n ...\n LL |      x: Error\n    |      ^^^^^^^^ the trait `Hash` is not implemented for `Error`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);"}, {"sha": "531ad59ca3bf9a8d8a63bc2327a75817ca0de7d9", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL | #[derive(Hash)]\n ...\n LL |      Error\n    |      ^^^^^ the trait `Hash` is not implemented for `Error`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);"}, {"sha": "2852a448c43fc2f072c44a42628f68c579c86166", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL | #[derive(Hash)]\n LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ the trait `Hash` is not implemented for `Error`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);"}, {"sha": "93ae1b29702e997152d5c8cc61d4f05e4d79d89f", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL | #[derive(Hash)]\n LL | struct Struct(\n LL |     Error\n    |     ^^^^^ the trait `Hash` is not implemented for `Error`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);"}, {"sha": "bfb673f86f4183b327c530783f09379347c21262", "filename": "src/test/ui/derives/deriving-meta-unknown-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error: cannot find derive macro `Eqr` in this scope\n    |\n LL | #[derive(Eqr)]\n    |          ^^^ help: a derive macro with a similar name exists: `Eq`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n LL | pub macro Eq($item:item) {\n@@ -14,7 +14,7 @@ error: cannot find derive macro `Eqr` in this scope\n    |\n LL | #[derive(Eqr)]\n    |          ^^^ help: a derive macro with a similar name exists: `Eq`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n LL | pub macro Eq($item:item) {"}, {"sha": "04d45758578a395c10f00cc79e4fb94072875a33", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -37,7 +37,7 @@ error: macro expansion ends with an incomplete expression: expected one of `move\n    |\n LL |     ($i: ident) => ($i)\n    |                       ^ expected one of `move`, `|`, or `||`\n-   | \n+   |\n   ::: $DIR/edition-keywords-2018-2015-parsing.rs:24:8\n    |\n LL |     if passes_ident!(async) == 1 {}"}, {"sha": "af11a505ccf36663e244830dcc067aa658ad990e", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -37,7 +37,7 @@ error: macro expansion ends with an incomplete expression: expected one of `move\n    |\n LL |     ($i: ident) => ($i)\n    |                       ^ expected one of `move`, `|`, or `||`\n-   | \n+   |\n   ::: $DIR/edition-keywords-2018-2018-parsing.rs:24:8\n    |\n LL |     if passes_ident!(async) == 1 {}"}, {"sha": "5ee8cbd912b0e2e22dbcf5b9a881babca6cfaaee", "filename": "src/test/ui/empty/empty-struct-braces-expr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL | struct Empty1 {}\n ...\n LL |     let e1 = Empty1;\n    |              ^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/empty-struct.rs:2:1\n    |\n LL | pub struct XEmpty2;\n@@ -29,7 +29,7 @@ LL | struct Empty1 {}\n ...\n LL |     let e1 = Empty1();\n    |              ^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/empty-struct.rs:2:1\n    |\n LL | pub struct XEmpty2;\n@@ -67,7 +67,7 @@ error[E0423]: expected value, found struct `XEmpty1`\n    |\n LL |     let xe1 = XEmpty1;\n    |               ^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/empty-struct.rs:1:1\n    |\n LL | pub struct XEmpty1 {}\n@@ -89,7 +89,7 @@ error[E0423]: expected function, tuple struct or tuple variant, found struct `XE\n    |\n LL |     let xe1 = XEmpty1();\n    |               ^^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/empty-struct.rs:1:1\n    |\n LL | pub struct XEmpty1 {}"}, {"sha": "5c02b62969fe7c652e26fa7671c7ba68a70b0560", "filename": "src/test/ui/empty/empty-struct-braces-pat-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -12,7 +12,7 @@ error[E0532]: expected unit struct, unit variant or constant, found struct varia\n    |\n LL |         XE::XEmpty3 => ()\n    |         ^^^^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/empty-struct.rs:6:5\n    |\n LL |     XEmpty3 {},"}, {"sha": "4bac2dfe76f282d34f32df3493a3eb0626e7deb4", "filename": "src/test/ui/empty/empty-struct-braces-pat-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL | struct Empty1 {}\n ...\n LL |         Empty1() => ()\n    |         ^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/empty-struct.rs:3:1\n    |\n LL | pub struct XEmpty6();\n@@ -26,7 +26,7 @@ error[E0532]: expected tuple struct or tuple variant, found struct `XEmpty1`\n    |\n LL |         XEmpty1() => ()\n    |         ^^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/empty-struct.rs:1:1\n    |\n LL | pub struct XEmpty1 {}\n@@ -52,7 +52,7 @@ LL | struct Empty1 {}\n ...\n LL |         Empty1(..) => ()\n    |         ^^^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/empty-struct.rs:3:1\n    |\n LL | pub struct XEmpty6();\n@@ -72,7 +72,7 @@ error[E0532]: expected tuple struct or tuple variant, found struct `XEmpty1`\n    |\n LL |         XEmpty1(..) => ()\n    |         ^^^^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/empty-struct.rs:1:1\n    |\n LL | pub struct XEmpty1 {}"}, {"sha": "cc2feb86d8e5b469ac85fcd04b05a58ec106bae0", "filename": "src/test/ui/empty/empty-struct-braces-pat-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -12,7 +12,7 @@ error[E0532]: expected tuple struct or tuple variant, found struct variant `XE::\n    |\n LL |         XE::XEmpty3() => ()\n    |         ^^^^^^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/empty-struct.rs:6:5\n    |\n LL |     XEmpty3 {},\n@@ -44,7 +44,7 @@ error[E0532]: expected tuple struct or tuple variant, found struct variant `XE::\n    |\n LL |         XE::XEmpty3(..) => ()\n    |         ^^^^^^^^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/empty-struct.rs:6:5\n    |\n LL |     XEmpty3 {},"}, {"sha": "9b5c8422de55dfd79c4727d4c2f18b32f84b87f7", "filename": "src/test/ui/empty/empty-struct-tuple-pat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -30,7 +30,7 @@ error[E0532]: expected unit struct, unit variant or constant, found tuple varian\n    |\n LL |         XE::XEmpty5 => (),\n    |         ^^^^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/empty-struct.rs:7:5\n    |\n LL |     XEmpty4,"}, {"sha": "839d3a84103fab7e1fab634dce1713146a819ddd", "filename": "src/test/ui/empty/empty-struct-unit-pat.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL | struct Empty2;\n ...\n LL |         Empty2() => ()\n    |         ^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/empty-struct.rs:3:1\n    |\n LL | pub struct XEmpty6();\n@@ -26,7 +26,7 @@ error[E0532]: expected tuple struct or tuple variant, found unit struct `XEmpty2\n    |\n LL |         XEmpty2() => ()\n    |         ^^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/empty-struct.rs:2:1\n    |\n LL | pub struct XEmpty2;\n@@ -51,7 +51,7 @@ LL | struct Empty2;\n ...\n LL |         Empty2(..) => ()\n    |         ^^^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/empty-struct.rs:3:1\n    |\n LL | pub struct XEmpty6();\n@@ -71,7 +71,7 @@ error[E0532]: expected tuple struct or tuple variant, found unit struct `XEmpty2\n    |\n LL |         XEmpty2(..) => ()\n    |         ^^^^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/empty-struct.rs:2:1\n    |\n LL | pub struct XEmpty2;\n@@ -102,7 +102,7 @@ error[E0532]: expected tuple struct or tuple variant, found unit variant `XE::XE\n    |\n LL |         XE::XEmpty4() => (),\n    |         ^^^^^^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/empty-struct.rs:7:5\n    |\n LL |     XEmpty4,\n@@ -133,7 +133,7 @@ error[E0532]: expected tuple struct or tuple variant, found unit variant `XE::XE\n    |\n LL |         XE::XEmpty4(..) => (),\n    |         ^^^^^^^^^^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/empty-struct.rs:7:5\n    |\n LL |     XEmpty4,"}, {"sha": "fd0215e72ee24acb16a54ad9f088bbc8be1c219f", "filename": "src/test/ui/error-codes/E0004-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0004]: non-exhaustive patterns: `None` and `Some(_)` not covered\n    |\n LL |     match x { }\n    |           ^ patterns `None` and `Some(_)` not covered\n-   | \n+   |\n   ::: $SRC_DIR/core/src/option.rs:LL:COL\n    |\n LL |     None,"}, {"sha": "a945a4be708548ee60b2f8def16704154c85d57e", "filename": "src/test/ui/error-codes/E0005.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0005]: refutable pattern in local binding: `None` not covered\n    |\n LL |     let Some(y) = x;\n    |         ^^^^^^^ pattern `None` not covered\n-   | \n+   |\n   ::: $SRC_DIR/core/src/option.rs:LL:COL\n    |\n LL |     None,"}, {"sha": "957e79a9f398183c55f94d9561520b4efdc0e02a", "filename": "src/test/ui/error-codes/E0297.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0005]: refutable pattern in `for` loop binding: `None` not covered\n    |\n LL |     for Some(x) in xs {}\n    |         ^^^^^^^ pattern `None` not covered\n-   | \n+   |\n   ::: $SRC_DIR/core/src/option.rs:LL:COL\n    |\n LL |     None,"}, {"sha": "2f5dab7eb0559793c0f63af8eab3b18b804c28ee", "filename": "src/test/ui/explore-issue-38412.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -84,7 +84,7 @@ error[E0624]: associated function `pub_crate` is private\n    |\n LL |     r.pub_crate();\n    |       ^^^^^^^^^ private associated function\n-   | \n+   |\n   ::: $DIR/auxiliary/pub-and-stability.rs:114:9\n    |\n LL |         pub(crate) fn pub_crate(&self) -> i32 { self.d_priv }\n@@ -95,7 +95,7 @@ error[E0624]: associated function `pub_mod` is private\n    |\n LL |     r.pub_mod();\n    |       ^^^^^^^ private associated function\n-   | \n+   |\n   ::: $DIR/auxiliary/pub-and-stability.rs:116:9\n    |\n LL |         pub(in m) fn pub_mod(&self) -> i32 { self.d_priv }\n@@ -106,7 +106,7 @@ error[E0624]: associated function `private` is private\n    |\n LL |     r.private();\n    |       ^^^^^^^ private associated function\n-   | \n+   |\n   ::: $DIR/auxiliary/pub-and-stability.rs:118:9\n    |\n LL |         fn private(&self) -> i32 { self.d_priv }\n@@ -135,7 +135,7 @@ error[E0624]: associated function `pub_crate` is private\n    |\n LL |     t.pub_crate();\n    |       ^^^^^^^^^ private associated function\n-   | \n+   |\n   ::: $DIR/auxiliary/pub-and-stability.rs:129:9\n    |\n LL |         pub(crate) fn pub_crate(&self) -> i32 { self.0 }\n@@ -146,7 +146,7 @@ error[E0624]: associated function `pub_mod` is private\n    |\n LL |     t.pub_mod();\n    |       ^^^^^^^ private associated function\n-   | \n+   |\n   ::: $DIR/auxiliary/pub-and-stability.rs:130:9\n    |\n LL |         pub(in m) fn pub_mod(&self) -> i32 { self.0 }\n@@ -157,7 +157,7 @@ error[E0624]: associated function `private` is private\n    |\n LL |     t.private();\n    |       ^^^^^^^ private associated function\n-   | \n+   |\n   ::: $DIR/auxiliary/pub-and-stability.rs:131:9\n    |\n LL |         fn private(&self) -> i32 { self.0 }"}, {"sha": "912252fd34a2e6035b52e3774b572af8fd93d59d", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -138,7 +138,7 @@ error[E0277]: the trait bound `<<Self as _Tr3>::A as Iterator>::Item: Copy` is n\n    |\n LL |     type A: Iterator<Item: Copy>;\n    |                            ^^^^ the trait `Copy` is not implemented for `<<Self as _Tr3>::A as Iterator>::Item`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n LL | pub trait Copy: Clone {"}, {"sha": "74629d3e7e64a15336dec63d1ab7388f6f3e9bcd", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n    |\n LL |     let Ok(_x) = foo();\n    |         ^^^^^^ pattern `Err(_)` not covered\n-   | \n+   |\n   ::: $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),"}, {"sha": "05cc6c012177b5b2818ab05057715f877ed9aa6a", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -16,7 +16,7 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n    |\n LL |    Pin::new(&mut gen).resume(());\n    |                       ^^^^^^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/core/src/ops/generator.rs:LL:COL\n    |\n LL | pub enum GeneratorState<Y, R> {"}, {"sha": "57ccadc7b8d04c5c7d779b810b268cec02d84de6", "filename": "src/test/ui/generic-associated-types/cross-crate-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0277]: the trait bound `(): AsRef<()>` is not satisfied\n    |\n LL |     type Bar = ();\n    |     ^^^^^^^^^^^^^^ the trait `AsRef<()>` is not implemented for `()`\n-   | \n+   |\n   ::: $DIR/auxiliary/foo_defn.rs:6:15\n    |\n LL |     type Bar: AsRef<()>;"}, {"sha": "6af91480e3a6e511ae958402b20cac5bb69530f9", "filename": "src/test/ui/impl-trait/impl-generic-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -31,7 +31,7 @@ error[E0643]: method `hash` has incompatible signature for trait\n    |\n LL |     fn hash(&self, hasher: &mut impl Hasher) {}\n    |                                 ^^^^^^^^^^^ expected generic parameter, found `impl Trait`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);"}, {"sha": "5e432e76496041bc2f475aba5dcdfa6c49b2e616", "filename": "src/test/ui/impl-trait/issues/issue-78722.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -8,7 +8,7 @@ LL |         let f: F = async { 1 };\n    |                -   ^^^^^^^^^^^ expected opaque type, found a different opaque type\n    |                |\n    |                expected due to this\n-   | \n+   |\n   ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n    |\n LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>"}, {"sha": "30afc8646de3d1b8de4b7f908efdcda7bdf33a7e", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -66,7 +66,7 @@ error[E0599]: no method named `method` found for type `i32` in the current scope\n    |\n LL |     1i32.method();\n    |          ^^^^^^ method not found in `i32`\n-   | \n+   |\n   ::: $DIR/auxiliary/no_method_suggested_traits.rs:8:12\n    |\n LL |         fn method(&self) {}"}, {"sha": "b15efd6c770eb2ccae0e8f5faec1fda60c067b42", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error: `impl` item signature doesn't match `trait` item signature\n    |\n LL |     fn deref(&self) -> &dyn Trait {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&Struct) -> &dyn Trait`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/ops/deref.rs:LL:COL\n    |\n LL |     fn deref(&self) -> &Self::Target;"}, {"sha": "af6e0053117786043288cb4d9b97d9f6b210c328", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a r\n    |\n LL |     catch_unwind(|| { x.set(23); });\n    |     ^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-   | \n+   |\n   ::: $SRC_DIR/std/src/panic.rs:LL:COL\n    |\n LL | pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {"}, {"sha": "42953bd8d2c2e09a961040a0dd1fff8bdf36af9e", "filename": "src/test/ui/issues/issue-17546.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0573]: expected type, found variant `NoResult`\n    |\n LL |     fn new() -> NoResult<MyEnum, String> {\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n-   | \n+   |\n   ::: $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL | pub enum Result<T, E> {\n@@ -57,7 +57,7 @@ error[E0573]: expected type, found variant `NoResult`\n    |\n LL | fn newer() -> NoResult<foo::MyEnum, String> {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | \n+   |\n   ::: $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL | pub enum Result<T, E> {"}, {"sha": "b9e9bfe1b8cb174bf4190808de2c9b7df964d399", "filename": "src/test/ui/issues/issue-20433.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0277]: the size for values of type `[i32]` cannot be known at compilation\n    |\n LL |     fn iceman(c: Vec<[i32]>) {}\n    |                  ^^^^^^^^^^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n    |\n LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {"}, {"sha": "e9aa8e27089aac5ba9605a0f76f22e7b9d13eab9", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -5,7 +5,7 @@ LL | #[derive(Hash)]\n    |          ---- in this derive macro expansion\n LL | struct Foo(Bar);\n    |            ^^^ the trait `Hash` is not implemented for `Bar`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);"}, {"sha": "1d2816feda948e9fbb6695d1c2f99885b7e48541", "filename": "src/test/ui/issues/issue-21202.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-21202.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-21202.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21202.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0624]: associated function `foo` is private\n    |\n LL |         Foo::foo(&f);\n    |              ^^^ private associated function\n-   | \n+   |\n   ::: $DIR/auxiliary/issue-21202.rs:4:9\n    |\n LL |         fn foo(&self) { }"}, {"sha": "9a38d49cd0c9624b4cef872e80f2ec750a0f0e11", "filename": "src/test/ui/issues/issue-27033.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0530]: match bindings cannot shadow unit variants\n    |\n LL |         None @ _ => {}\n    |         ^^^^ cannot be named the same as a unit variant\n-   | \n+   |\n   ::: $SRC_DIR/std/src/prelude/mod.rs:LL:COL\n    |\n LL |     pub use super::v1::*;"}, {"sha": "8b7871ce3118605598e8887618bdff46550d98f4", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -12,12 +12,12 @@ error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut std:\n    |\n LL |         .collect();\n    |          ^^^^^^^ method cannot be called on `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>` due to unsatisfied trait bounds\n-   | \n+   |\n   ::: $SRC_DIR/core/src/iter/adapters/cloned.rs:LL:COL\n    |\n LL | pub struct Cloned<I> {\n    | -------------------- doesn't satisfy `_: Iterator`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/iter/adapters/take_while.rs:LL:COL\n    |\n LL | pub struct TakeWhile<I, P> {"}, {"sha": "caf7530b85af1fd1501b94b2b28b2d8bdfec3a36", "filename": "src/test/ui/issues/issue-43189.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-43189.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-43189.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43189.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0599]: no method named `a` found for unit type `()` in the current scope\n    |\n LL |     ().a();\n    |        ^ method not found in `()`\n-   | \n+   |\n   ::: $DIR/auxiliary/xcrate-issue-43189-a.rs:5:8\n    |\n LL |     fn a(&self) {}"}, {"sha": "013a440ed0457efbc9c987dfbad6cb0a31c93c52", "filename": "src/test/ui/issues/issue-56175.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-56175.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-56175.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56175.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0599]: no method named `trait_method` found for struct `FooStruct` in the\n    |\n LL |     reexported_trait::FooStruct.trait_method();\n    |                                 ^^^^^^^^^^^^ method not found in `FooStruct`\n-   | \n+   |\n   ::: $DIR/auxiliary/reexported-trait.rs:3:12\n    |\n LL |         fn trait_method(&self) {\n@@ -20,7 +20,7 @@ error[E0599]: no method named `trait_method_b` found for struct `FooStruct` in t\n    |\n LL |     reexported_trait::FooStruct.trait_method_b();\n    |                                 ^^^^^^^^^^^^^^ method not found in `FooStruct`\n-   | \n+   |\n   ::: $DIR/auxiliary/reexported-trait.rs:7:12\n    |\n LL |         fn trait_method_b(&self) {"}, {"sha": "9bddc2c41a310960bf19f53ef7977a7ce150e661", "filename": "src/test/ui/issues/issue-60283.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -18,7 +18,7 @@ error[E0277]: the size for values of type `<() as Trait<'_>>::Item` cannot be kn\n    |\n LL |     foo((), drop)\n    |             ^^^^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub fn drop<T>(_x: T) {}"}, {"sha": "b1ba89f6cbecf5a365cae573490fec5af5cc4fb3", "filename": "src/test/ui/issues/issue-69725.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-69725.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-69725.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69725.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0599]: the method `clone` exists for struct `Struct<A>`, but its trait bo\n    |\n LL |     let _ = Struct::<A>::new().clone();\n    |                                ^^^^^ method cannot be called on `Struct<A>` due to unsatisfied trait bounds\n-   | \n+   |\n   ::: $DIR/auxiliary/issue-69725.rs:2:1\n    |\n LL | pub struct Struct<A>(A);"}, {"sha": "ecff8b42b0ea77ea814af524045732a534cab569", "filename": "src/test/ui/issues/issue-7607-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0412]: cannot find type `Fo` in this scope\n    |\n LL | impl Fo {\n    |      ^^ help: a trait with a similar name exists: `Fn`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n LL | pub trait Fn<Args>: FnMut<Args> {"}, {"sha": "95b2f447102ad1c0f7f6b0790be9d85895f60235", "filename": "src/test/ui/issues/issue-78720.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-78720.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fissues%2Fissue-78720.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-78720.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -9,7 +9,7 @@ error[E0412]: cannot find type `F` in this scope\n    |\n LL |     _func: F,\n    |            ^\n-   | \n+   |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n LL | pub trait Fn<Args>: FnMut<Args> {"}, {"sha": "a7e382479021aeb8767c6b46391f0ecb8476eb30", "filename": "src/test/ui/limits/issue-55878.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0080]: values of the type `[u8; SIZE]` are too big for the current archit\n    |\n LL |     intrinsics::size_of::<T>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ inside `std::mem::size_of::<[u8; SIZE]>` at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/issue-55878.rs:7:26\n    |\n LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());"}, {"sha": "438375951493bfe42ead7e3756cb1af7e506bd29", "filename": "src/test/ui/macro_backtrace/main.-Zmacro-backtrace.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.-Zmacro-backtrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.-Zmacro-backtrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.-Zmacro-backtrace.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -21,7 +21,7 @@ LL | |  }\n ...\n LL |        ping!();\n    |        -------- in this macro invocation (#1)\n-   | \n+   |\n   ::: $DIR/auxiliary/ping.rs:5:1\n    |\n LL |  / macro_rules! ping {\n@@ -43,7 +43,7 @@ LL | |  }\n ...\n LL |        deep!();\n    |        -------- in this macro invocation (#1)\n-   | \n+   |\n   ::: $DIR/auxiliary/ping.rs:5:1\n    |\n LL |  / macro_rules! ping {"}, {"sha": "3e8cfb3f0e97fba429aca99931f3de4959c64d86", "filename": "src/test/ui/macros/macro-name-typo.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-name-typo.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error: cannot find macro `printlx` in this scope\n    |\n LL |     printlx!(\"oh noes!\");\n    |     ^^^^^^^ help: a macro with a similar name exists: `println`\n-   | \n+   |\n   ::: $SRC_DIR/std/src/macros.rs:LL:COL\n    |\n LL | macro_rules! println {"}, {"sha": "1abb501ec8051a6dfbca8bd603b15741f27557d1", "filename": "src/test/ui/macros/macro-path-prelude-fail-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-fail-3.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error: cannot find macro `inline` in this scope\n    |\n LL |     inline!();\n    |     ^^^^^^ help: a macro with a similar name exists: `line`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n    |\n LL |     macro_rules! line {"}, {"sha": "326001fc15a9a0b1a6386109bad67daa8a3cc07c", "filename": "src/test/ui/macros/macro-use-wrong-name.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-wrong-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-wrong-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-wrong-name.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error: cannot find macro `macro_two` in this scope\n    |\n LL |     macro_two!();\n    |     ^^^^^^^^^ help: a macro with a similar name exists: `macro_one`\n-   | \n+   |\n   ::: $DIR/auxiliary/two_macros.rs:2:1\n    |\n LL | macro_rules! macro_one { () => (\"one\") }"}, {"sha": "0eafb2d7587db12bca9e355662b710a17e97a0a0", "filename": "src/test/ui/malformed/malformed-derive-entry.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -21,7 +21,7 @@ error[E0277]: the trait bound `Test1: Clone` is not satisfied\n    |\n LL | #[derive(Copy(Bad))]\n    |          ^^^^ the trait `Clone` is not implemented for `Test1`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n LL | pub trait Copy: Clone {\n@@ -34,7 +34,7 @@ error[E0277]: the trait bound `Test2: Clone` is not satisfied\n    |\n LL | #[derive(Copy=\"bad\")]\n    |          ^^^^ the trait `Clone` is not implemented for `Test2`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n LL | pub trait Copy: Clone {"}, {"sha": "1ebd2b00aee0c64d45477d91495aade22a17b653", "filename": "src/test/ui/mir/issue-80742.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL |     intrinsics::size_of::<T>()\n    |     |\n    |     size_of called on unsized type `dyn Debug`\n    |     inside `std::mem::size_of::<dyn Debug>` at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/issue-80742.rs:23:10\n    |\n LL |     [u8; size_of::<T>() + 1]: ,\n@@ -26,7 +26,7 @@ LL | | }\n ...\n LL |       let dst = Inline::<dyn Debug>::new(0);\n    |                                      ^^^ function or associated item cannot be called on `Inline<dyn Debug>` due to unsatisfied trait bounds\n-   | \n+   |\n   ::: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n    |\n LL |   pub trait Debug {\n@@ -43,7 +43,7 @@ LL |     intrinsics::size_of::<T>()\n    |     |\n    |     size_of called on unsized type `dyn Debug`\n    |     inside `std::mem::size_of::<dyn Debug>` at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   | \n+   |\n   ::: $DIR/issue-80742.rs:15:10\n    |\n LL |     [u8; size_of::<T>() + 1]: ,"}, {"sha": "67e8ee2283689d9c2d09d942005c30238d84618a", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -14,7 +14,7 @@ LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n    |                                       |\n    |                                       doesn't satisfy `<_ as FnOnce<(&&str,)>>::Output = bool`\n    |                                       doesn't satisfy `_: FnMut<(&&str,)>`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/iter/adapters/filter.rs:LL:COL\n    |\n LL | pub struct Filter<I, P> {"}, {"sha": "71e35b445ef817b9383063609897ad7a9d074dfc", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -24,7 +24,7 @@ error[E0423]: expected value, found type alias `xm1::S`\n    |\n LL |     check(xm1::S);\n    |           ^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/namespace-mix.rs:3:5\n    |\n LL |     pub struct TS();\n@@ -73,7 +73,7 @@ error[E0423]: expected value, found struct variant `xm7::V`\n    |\n LL |     check(xm7::V);\n    |           ^^^^^^\n-   | \n+   |\n   ::: $DIR/auxiliary/namespace-mix.rs:6:9\n    |\n LL |         V {},"}, {"sha": "c35692d6eabc9e29e18e84cc309f942fc205502b", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -10,7 +10,7 @@ LL | |         let y = x;\n LL | |         println!(\"{:?}\", y);\n LL | |     });\n    | |_____- within this `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6]`\n-   | \n+   |\n   ::: $SRC_DIR/std/src/thread/mod.rs:LL:COL\n    |\n LL |       F: Send + 'static,"}, {"sha": "9b7bd1559cddf6bd57b8f0c6c4a80a01a28c4f9c", "filename": "src/test/ui/parser/issue-62894.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fparser%2Fissue-62894.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fparser%2Fissue-62894.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62894.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -42,7 +42,7 @@ LL | fn f() { assert_eq!(f(), (), assert_eq!(assert_eq!\n LL | \n LL | fn main() {}\n    | ^^ unexpected token\n-   | \n+   |\n   ::: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n    |\n LL |     ($left:expr, $right:expr $(,)?) => ({"}, {"sha": "4a987cb6c0311c94dfb1e7e7887fd22052b897e0", "filename": "src/test/ui/pattern/usefulness/match-arm-statics-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -12,7 +12,7 @@ error[E0004]: non-exhaustive patterns: `Some(Some(West))` not covered\n    |\n LL |     match Some(Some(North)) {\n    |           ^^^^^^^^^^^^^^^^^ pattern `Some(Some(West))` not covered\n-   | \n+   |\n   ::: $SRC_DIR/core/src/option.rs:LL:COL\n    |\n LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),"}, {"sha": "4efb41978a241c08b722efe30c4c0e2d647664b3", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0004]: non-exhaustive patterns: `Some(Private { misc: true, .. })` not co\n    |\n LL |     match private::DATA {\n    |           ^^^^^^^^^^^^^ pattern `Some(Private { misc: true, .. })` not covered\n-   | \n+   |\n   ::: $SRC_DIR/core/src/option.rs:LL:COL\n    |\n LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),"}, {"sha": "1ca0a33bf37d90e03c7804d2fe53f4c067de86f1", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -27,7 +27,7 @@ error[E0004]: non-exhaustive patterns: `Some(_)` not covered\n    |\n LL |     match Some(10) {\n    |           ^^^^^^^^ pattern `Some(_)` not covered\n-   | \n+   |\n   ::: $SRC_DIR/core/src/option.rs:LL:COL\n    |\n LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),"}, {"sha": "d0c0c6b8bb593526c39a7bb0917999fed933040e", "filename": "src/test/ui/privacy/privacy5.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fprivacy%2Fprivacy5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fprivacy%2Fprivacy5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy5.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -363,7 +363,7 @@ error[E0603]: tuple struct constructor `A` is private\n    |\n LL |     let a = other::A(());\n    |                    ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n LL | pub struct A(());\n@@ -380,7 +380,7 @@ error[E0603]: tuple struct constructor `B` is private\n    |\n LL |     let b = other::B(2);\n    |                    ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n LL | pub struct B(isize);\n@@ -397,7 +397,7 @@ error[E0603]: tuple struct constructor `C` is private\n    |\n LL |     let c = other::C(2, 3);\n    |                    ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n LL | pub struct C(pub isize, isize);\n@@ -414,7 +414,7 @@ error[E0603]: tuple struct constructor `A` is private\n    |\n LL |     let other::A(()) = a;\n    |                ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n LL | pub struct A(());\n@@ -431,7 +431,7 @@ error[E0603]: tuple struct constructor `A` is private\n    |\n LL |     let other::A(_) = a;\n    |                ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n LL | pub struct A(());\n@@ -448,7 +448,7 @@ error[E0603]: tuple struct constructor `A` is private\n    |\n LL |     match a { other::A(()) => {} }\n    |                      ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n LL | pub struct A(());\n@@ -465,7 +465,7 @@ error[E0603]: tuple struct constructor `A` is private\n    |\n LL |     match a { other::A(_) => {} }\n    |                      ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n LL | pub struct A(());\n@@ -482,7 +482,7 @@ error[E0603]: tuple struct constructor `B` is private\n    |\n LL |     let other::B(_) = b;\n    |                ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n LL | pub struct B(isize);\n@@ -499,7 +499,7 @@ error[E0603]: tuple struct constructor `B` is private\n    |\n LL |     let other::B(_b) = b;\n    |                ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n LL | pub struct B(isize);\n@@ -516,7 +516,7 @@ error[E0603]: tuple struct constructor `B` is private\n    |\n LL |     match b { other::B(_) => {} }\n    |                      ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n LL | pub struct B(isize);\n@@ -533,7 +533,7 @@ error[E0603]: tuple struct constructor `B` is private\n    |\n LL |     match b { other::B(_b) => {} }\n    |                      ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n LL | pub struct B(isize);\n@@ -550,7 +550,7 @@ error[E0603]: tuple struct constructor `B` is private\n    |\n LL |     match b { other::B(1) => {}\n    |                      ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n LL | pub struct B(isize);\n@@ -567,7 +567,7 @@ error[E0603]: tuple struct constructor `B` is private\n    |\n LL |         other::B(_) => {} }\n    |                ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n LL | pub struct B(isize);\n@@ -584,7 +584,7 @@ error[E0603]: tuple struct constructor `C` is private\n    |\n LL |     let other::C(_, _) = c;\n    |                ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n LL | pub struct C(pub isize, isize);\n@@ -601,7 +601,7 @@ error[E0603]: tuple struct constructor `C` is private\n    |\n LL |     let other::C(_a, _) = c;\n    |                ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n LL | pub struct C(pub isize, isize);\n@@ -618,7 +618,7 @@ error[E0603]: tuple struct constructor `C` is private\n    |\n LL |     let other::C(_, _b) = c;\n    |                ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n LL | pub struct C(pub isize, isize);\n@@ -635,7 +635,7 @@ error[E0603]: tuple struct constructor `C` is private\n    |\n LL |     let other::C(_a, _b) = c;\n    |                ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n LL | pub struct C(pub isize, isize);\n@@ -652,7 +652,7 @@ error[E0603]: tuple struct constructor `C` is private\n    |\n LL |     match c { other::C(_, _) => {} }\n    |                      ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n LL | pub struct C(pub isize, isize);\n@@ -669,7 +669,7 @@ error[E0603]: tuple struct constructor `C` is private\n    |\n LL |     match c { other::C(_a, _) => {} }\n    |                      ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n LL | pub struct C(pub isize, isize);\n@@ -686,7 +686,7 @@ error[E0603]: tuple struct constructor `C` is private\n    |\n LL |     match c { other::C(_, _b) => {} }\n    |                      ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n LL | pub struct C(pub isize, isize);\n@@ -703,7 +703,7 @@ error[E0603]: tuple struct constructor `C` is private\n    |\n LL |     match c { other::C(_a, _b) => {} }\n    |                      ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n LL | pub struct C(pub isize, isize);\n@@ -720,7 +720,7 @@ error[E0603]: tuple struct constructor `A` is private\n    |\n LL |     let a2 = other::A;\n    |                     ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n LL | pub struct A(());\n@@ -737,7 +737,7 @@ error[E0603]: tuple struct constructor `B` is private\n    |\n LL |     let b2 = other::B;\n    |                     ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n LL | pub struct B(isize);\n@@ -754,7 +754,7 @@ error[E0603]: tuple struct constructor `C` is private\n    |\n LL |     let c2 = other::C;\n    |                     ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n LL | pub struct C(pub isize, isize);"}, {"sha": "93f6a7f2f6167ebb10aee9ad8cd1c290f642dbb9", "filename": "src/test/ui/privacy/private-method-cross-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-cross-crate.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0624]: associated function `nap` is private\n    |\n LL |   nyan.nap();\n    |        ^^^ private associated function\n-   | \n+   |\n   ::: $DIR/auxiliary/cci_class_5.rs:8:9\n    |\n LL |         fn nap(&self) {}"}, {"sha": "0f6003c4247675de580983127f07c3599730b171", "filename": "src/test/ui/privacy/restricted/test.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -87,7 +87,7 @@ error[E0624]: associated function `g` is private\n    |\n LL |     u.g();\n    |       ^ private associated function\n-   | \n+   |\n   ::: $DIR/auxiliary/pub_restricted.rs:14:5\n    |\n LL |     pub(crate) fn g(&self) {}\n@@ -98,7 +98,7 @@ error[E0624]: associated function `h` is private\n    |\n LL |     u.h();\n    |       ^ private associated function\n-   | \n+   |\n   ::: $DIR/auxiliary/pub_restricted.rs:15:5\n    |\n LL |     crate fn h(&self) {}"}, {"sha": "001b345204d3441d251edcdcceb4e71bdf30a20b", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ warning: using an old version of `time-macros-impl`\n    |\n LL |         #[my_macro] struct One($name);\n    |                                ^^^^^\n-   | \n+   |\n   ::: $DIR/group-compat-hack.rs:27:5\n    |\n LL |     impl_macros!(Foo);\n@@ -20,7 +20,7 @@ warning: using an old version of `time-macros-impl`\n    |\n LL |         #[my_macro] struct One($name);\n    |                                ^^^^^\n-   | \n+   |\n   ::: $DIR/group-compat-hack.rs:44:5\n    |\n LL |     impl_macros!(Foo);\n@@ -36,7 +36,7 @@ warning: using an old version of `js-sys`\n    |\n LL |         #[my_macro] struct Two($name);\n    |                                ^^^^^\n-   | \n+   |\n   ::: $DIR/group-compat-hack.rs:46:5\n    |\n LL |     arrays!(Foo);\n@@ -52,7 +52,7 @@ warning: using an old version of `actix-web`\n    |\n LL |         #[my_macro] struct Three($T);\n    |                                  ^^\n-   | \n+   |\n   ::: $DIR/group-compat-hack.rs:55:5\n    |\n LL |     tuple_from_req!(Foo);\n@@ -68,7 +68,7 @@ warning: using an old version of `actix-web`\n    |\n LL |         #[my_macro] struct Three($T);\n    |                                  ^^\n-   | \n+   |\n   ::: $DIR/group-compat-hack.rs:63:5\n    |\n LL |     tuple_from_req!(Foo);\n@@ -87,7 +87,7 @@ warning: using an old version of `time-macros-impl`\n    |\n LL |         #[my_macro] struct One($name);\n    |                                ^^^^^\n-   | \n+   |\n   ::: $DIR/group-compat-hack.rs:27:5\n    |\n LL |     impl_macros!(Foo);\n@@ -105,7 +105,7 @@ warning: using an old version of `time-macros-impl`\n    |\n LL |         #[my_macro] struct One($name);\n    |                                ^^^^^\n-   | \n+   |\n   ::: $DIR/group-compat-hack.rs:44:5\n    |\n LL |     impl_macros!(Foo);\n@@ -122,7 +122,7 @@ warning: using an old version of `js-sys`\n    |\n LL |         #[my_macro] struct Two($name);\n    |                                ^^^^^\n-   | \n+   |\n   ::: $DIR/group-compat-hack.rs:46:5\n    |\n LL |     arrays!(Foo);\n@@ -139,7 +139,7 @@ warning: using an old version of `actix-web`\n    |\n LL |         #[my_macro] struct Three($T);\n    |                                  ^^\n-   | \n+   |\n   ::: $DIR/group-compat-hack.rs:55:5\n    |\n LL |     tuple_from_req!(Foo);\n@@ -156,7 +156,7 @@ warning: using an old version of `actix-web`\n    |\n LL |         #[my_macro] struct Three($T);\n    |                                  ^^\n-   | \n+   |\n   ::: $DIR/group-compat-hack.rs:63:5\n    |\n LL |     tuple_from_req!(Foo);"}, {"sha": "071e103742e665744d736866c72dd7bb0152ad71", "filename": "src/test/ui/proc-macro/parent-source-spans.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -144,7 +144,7 @@ LL |     parent_source_spans!($($tokens)*);\n ...\n LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n-   | \n+   |\n   ::: $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n@@ -160,7 +160,7 @@ LL |     parent_source_spans!($($tokens)*);\n ...\n LL |     two!(\"yay\", \"rust\");\n    |     -------------------- in this macro invocation\n-   | \n+   |\n   ::: $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n@@ -176,7 +176,7 @@ LL |     parent_source_spans!($($tokens)*);\n ...\n LL |     three!(\"hip\", \"hop\");\n    |     --------------------- in this macro invocation\n-   | \n+   |\n   ::: $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),"}, {"sha": "e518c6ab8003232a8e3a70e62ba1b00213d570f8", "filename": "src/test/ui/proc-macro/resolve-error.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error: cannot find macro `bang_proc_macrp` in this scope\n    |\n LL |     bang_proc_macrp!();\n    |     ^^^^^^^^^^^^^^^ help: a macro with a similar name exists: `bang_proc_macro`\n-   | \n+   |\n   ::: $DIR/auxiliary/test-macros.rs:15:1\n    |\n LL | pub fn empty(_: TokenStream) -> TokenStream {\n@@ -50,7 +50,7 @@ error: cannot find derive macro `Dlona` in this scope\n    |\n LL | #[derive(Dlona)]\n    |          ^^^^^ help: a derive macro with a similar name exists: `Clona`\n-   | \n+   |\n   ::: $DIR/auxiliary/derive-clona.rs:11:1\n    |\n LL | pub fn derive_clonea(input: TokenStream) -> TokenStream {\n@@ -61,7 +61,7 @@ error: cannot find derive macro `Dlona` in this scope\n    |\n LL | #[derive(Dlona)]\n    |          ^^^^^ help: a derive macro with a similar name exists: `Clona`\n-   | \n+   |\n   ::: $DIR/auxiliary/derive-clona.rs:11:1\n    |\n LL | pub fn derive_clonea(input: TokenStream) -> TokenStream {\n@@ -72,7 +72,7 @@ error: cannot find derive macro `Dlone` in this scope\n    |\n LL | #[derive(Dlone)]\n    |          ^^^^^ help: a derive macro with a similar name exists: `Clone`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/clone.rs:LL:COL\n    |\n LL | pub macro Clone($item:item) {\n@@ -83,7 +83,7 @@ error: cannot find derive macro `Dlone` in this scope\n    |\n LL | #[derive(Dlone)]\n    |          ^^^^^ help: a derive macro with a similar name exists: `Clone`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/clone.rs:LL:COL\n    |\n LL | pub macro Clone($item:item) {\n@@ -100,7 +100,7 @@ error: cannot find attribute `attr_proc_macra` in this scope\n    |\n LL | #[attr_proc_macra]\n    |   ^^^^^^^^^^^^^^^ help: an attribute macro with a similar name exists: `attr_proc_macro`\n-   | \n+   |\n   ::: $DIR/auxiliary/test-macros.rs:20:1\n    |\n LL | pub fn empty_attr(_: TokenStream, _: TokenStream) -> TokenStream {\n@@ -111,7 +111,7 @@ error: cannot find derive macro `FooWithLongNan` in this scope\n    |\n LL | #[derive(FooWithLongNan)]\n    |          ^^^^^^^^^^^^^^ help: a derive macro with a similar name exists: `FooWithLongName`\n-   | \n+   |\n   ::: $DIR/auxiliary/derive-foo.rs:11:1\n    |\n LL | pub fn derive_foo(input: TokenStream) -> TokenStream {\n@@ -122,7 +122,7 @@ error: cannot find derive macro `FooWithLongNan` in this scope\n    |\n LL | #[derive(FooWithLongNan)]\n    |          ^^^^^^^^^^^^^^ help: a derive macro with a similar name exists: `FooWithLongName`\n-   | \n+   |\n   ::: $DIR/auxiliary/derive-foo.rs:11:1\n    |\n LL | pub fn derive_foo(input: TokenStream) -> TokenStream {"}, {"sha": "11ee20e846d320d85af5fec3ae148ee1d92bc65a", "filename": "src/test/ui/proc-macro/span-from-proc-macro.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fproc-macro%2Fspan-from-proc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fproc-macro%2Fspan-from-proc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-from-proc-macro.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL | pub fn error_from_attribute(_args: TokenStream, _input: TokenStream) -> Tok\n ...\n LL |             field: MissingType\n    |                    ^^^^^^^^^^^ not found in this scope\n-   | \n+   |\n   ::: $DIR/span-from-proc-macro.rs:8:1\n    |\n LL | #[error_from_attribute]\n@@ -20,7 +20,7 @@ LL | pub fn error_from_derive(_input: TokenStream) -> TokenStream {\n ...\n LL |             Variant(OtherMissingType)\n    |                     ^^^^^^^^^^^^^^^^ not found in this scope\n-   | \n+   |\n   ::: $DIR/span-from-proc-macro.rs:11:10\n    |\n LL | #[derive(ErrorFromDerive)]\n@@ -34,7 +34,7 @@ LL | pub fn other_error_from_bang(_input: TokenStream) -> TokenStream {\n LL |     custom_quote::custom_quote! {\n LL |         my_ident\n    |         ^^^^^^^^ not found in this scope\n-   | \n+   |\n   ::: $DIR/span-from-proc-macro.rs:16:5\n    |\n LL |     other_error_from_bang!();\n@@ -50,7 +50,7 @@ LL |             let bang_error: bool = 25;\n ...\n LL | pub fn error_from_bang(_input: TokenStream) -> TokenStream {\n    | ---------------------------------------------------------- in this expansion of `error_from_bang!`\n-   | \n+   |\n   ::: $DIR/span-from-proc-macro.rs:15:5\n    |\n LL |     error_from_bang!();"}, {"sha": "53453ea04ddb46a31e107412d633e3a588c83138", "filename": "src/test/ui/range/range-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-1.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -23,7 +23,7 @@ error[E0277]: the size for values of type `[{integer}]` cannot be known at compi\n    |\n LL |     let range = *arr..;\n    |                 ^^^^^^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/core/src/ops/range.rs:LL:COL\n    |\n LL | pub struct RangeFrom<Idx> {"}, {"sha": "f904a0ecd11cd135d94fafd7afdb0e71086add7f", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n    |\n LL |     let Ok(x) = res;\n    |         ^^^^^ pattern `Err(_)` not covered\n-   | \n+   |\n   ::: $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),"}, {"sha": "8df84067e67417333536b86a8ffbe6ea40addc29", "filename": "src/test/ui/resolve/issue-19452.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -12,7 +12,7 @@ error[E0423]: expected value, found struct variant `issue_19452_aux::Homura::Mad\n    |\n LL |     let homura = issue_19452_aux::Homura::Madoka;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `issue_19452_aux::Homura::Madoka { /* fields */ }`\n-   | \n+   |\n   ::: $DIR/auxiliary/issue-19452-aux.rs:2:5\n    |\n LL |     Madoka { age: u32 }"}, {"sha": "a7f10f7719eacc1620f9a5230a183f4a879bd134", "filename": "src/test/ui/resolve/levenshtein.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -18,7 +18,7 @@ error[E0412]: cannot find type `Opiton` in this scope\n    |\n LL | type B = Opiton<u8>; // Misspelled type name from the prelude.\n    |          ^^^^^^ help: an enum with a similar name exists: `Option`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/option.rs:LL:COL\n    |\n LL | pub enum Option<T> {"}, {"sha": "e5d6f7e9e24f0627091909bfa437fd67acf17a42", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -103,7 +103,7 @@ error[E0603]: tuple struct constructor `S` is private\n    |\n LL |     xcrate::m::S;\n    |                ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy-struct-ctor.rs:2:18\n    |\n LL |     pub struct S(u8);\n@@ -120,7 +120,7 @@ error[E0603]: tuple struct constructor `Z` is private\n    |\n LL |     xcrate::m::n::Z;\n    |                   ^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/privacy-struct-ctor.rs:5:28\n    |\n LL |         pub(in m) struct Z(pub(in m::n) u8);"}, {"sha": "e32d89fe6beebf4a0f044f5d2e7c6f61119bcb89", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -7,7 +7,7 @@ LL | / fn can_parse_zero_as_f32() -> Result<f32, ParseFloatError> {\n LL | |     \"0\".parse()\n LL | | }\n    | |_^ `main` can only return types that implement `Termination`\n-   | \n+   |\n   ::: $SRC_DIR/test/src/lib.rs:LL:COL\n    |\n LL |   pub fn assert_test_result<T: Termination>(result: T) {"}, {"sha": "141363fc32caa5cd35b632c8d571dfb194e97ad8", "filename": "src/test/ui/rfc-2008-non-exhaustive/struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -15,7 +15,7 @@ error[E0603]: tuple struct constructor `TupleStruct` is private\n    |\n LL |     let ts_explicit = structs::TupleStruct(640, 480);\n    |                                ^^^^^^^^^^^ private tuple struct constructor\n-   | \n+   |\n   ::: $DIR/auxiliary/structs.rs:11:24\n    |\n LL | pub struct TupleStruct(pub u16, pub u16);"}, {"sha": "d21a94a0d6498ff76bf84681859c290aacfda54f", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -30,7 +30,7 @@ error[E0004]: non-exhaustive patterns: `Tuple(_)` and `Struct { .. }` not covere\n    |\n LL |     match x {}\n    |           ^ patterns `Tuple(_)` and `Struct { .. }` not covered\n-   | \n+   |\n   ::: $DIR/auxiliary/uninhabited.rs:17:23\n    |\n LL |     #[non_exhaustive] Tuple(!),"}, {"sha": "cc3dc6c29b90461fad6f236e9c09b3261a5ecca4", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -30,7 +30,7 @@ error[E0004]: non-exhaustive patterns: `Tuple(_)` and `Struct { .. }` not covere\n    |\n LL |     match x {}\n    |           ^ patterns `Tuple(_)` and `Struct { .. }` not covered\n-   | \n+   |\n   ::: $DIR/auxiliary/uninhabited.rs:17:23\n    |\n LL |     #[non_exhaustive] Tuple(!),"}, {"sha": "7a63e6f6e686a06687458fd2384c46c25e6cacec", "filename": "src/test/ui/rust-2021/future-prelude-collision-shadow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0599]: no method named `try_into` found for type `u8` in the current scop\n    |\n LL |         let _: u32 = 3u8.try_into().unwrap();\n    |                          ^^^^^^^^ method not found in `u8`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/convert/mod.rs:LL:COL\n    |\n LL |     fn try_into(self) -> Result<T, Self::Error>;"}, {"sha": "1787b0ee19ad6977e6e0e310a10dd28f1455fd2a", "filename": "src/test/ui/span/transitive-dep-span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fspan%2Ftransitive-dep-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fspan%2Ftransitive-dep-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Ftransitive-dep-span.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL | |             () => { parse error }\n    | |                           ^^^^^ expected one of `!` or `::`\n LL | |         }\n    | |_________- in this expansion of `transitive_dep_two::parse_error!`\n-   | \n+   |\n   ::: $DIR/transitive-dep-span.rs:13:1\n    |\n LL |   transitive_dep_two::parse_error!();"}, {"sha": "d6163a5a7cfe3d2900d51421bd8816c56558b5d8", "filename": "src/test/ui/suggestions/attribute-typos.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -15,7 +15,7 @@ error: cannot find attribute `tests` in this scope\n    |\n LL | #[tests]\n    |   ^^^^^ help: an attribute macro with a similar name exists: `test`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n    |\n LL |     pub macro test($item:item) {"}, {"sha": "7bdc8e00f447dc2ec308fd02fa5f922cb51161a2", "filename": "src/test/ui/suggestions/do-not-attempt-to-add-suggestions-with-no-changes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fsuggestions%2Fdo-not-attempt-to-add-suggestions-with-no-changes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fsuggestions%2Fdo-not-attempt-to-add-suggestions-with-no-changes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdo-not-attempt-to-add-suggestions-with-no-changes.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0573]: expected type, found module `result`\n    |\n LL | impl result {\n    |      ^^^^^^ help: an enum with a similar name exists: `Result`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL | pub enum Result<T, E> {"}, {"sha": "c4eeb3aaa5709362b769c2ba70f28f0ef00c0edb", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -77,7 +77,7 @@ LL | /     async {\n LL | |         42\n LL | |     }\n    | |_____^ expected struct `Pin`, found opaque type\n-   | \n+   |\n   ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n    |\n LL |   pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>"}, {"sha": "42ca3a78d8f9f70ef5c222f7a7f18c30461711f9", "filename": "src/test/ui/suggestions/imm-ref-trait-object.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error: the `min` method cannot be invoked on a trait object\n    |\n LL |      t.min().unwrap()\n    |        ^^^\n-   | \n+   |\n   ::: $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL |         Self: Sized,"}, {"sha": "bac8de7987256058de5b5f0312b41cdffd326ee6", "filename": "src/test/ui/suggestions/import-trait-for-method-call.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0599]: no method named `finish` found for struct `DefaultHasher` in the c\n    |\n LL |     h.finish()\n    |       ^^^^^^ method not found in `DefaultHasher`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn finish(&self) -> u64;"}, {"sha": "07fdffd8bedec050bcf48f5486d3b0314a988fff", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -16,7 +16,7 @@ error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satis\n    |\n LL |     let fp = BufWriter::new(fp);\n    |              ^^^^^^^^^^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n-   | \n+   |\n   ::: $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n    |\n LL | pub struct BufWriter<W: Write> {\n@@ -29,7 +29,7 @@ error[E0599]: the method `write_fmt` exists for struct `BufWriter<&dyn std::io::\n    |\n LL |     writeln!(fp, \"hello world\").unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ method cannot be called on `BufWriter<&dyn std::io::Write>` due to unsatisfied trait bounds\n-   | \n+   |\n   ::: $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n    |\n LL | pub struct BufWriter<W: Write> {"}, {"sha": "8384f952b684959af6f910cc523e20e42cbfbe5c", "filename": "src/test/ui/suggestions/suggest-change-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -27,7 +27,7 @@ error[E0599]: the method `read_until` exists for struct `BufReader<&T>`, but its\n    |\n LL |         stream_reader.read_until(b'\\n', &mut buffer).expect(\"Reading into buffer failed\");\n    |                       ^^^^^^^^^^ method cannot be called on `BufReader<&T>` due to unsatisfied trait bounds\n-   | \n+   |\n   ::: $SRC_DIR/std/src/io/buffered/bufreader.rs:LL:COL\n    |\n LL | pub struct BufReader<R> {"}, {"sha": "bfdd121012ae0491ac05b24c5751c849dc80c5e7", "filename": "src/test/ui/traits/associated_type_bound/assoc_type_bound_with_struct.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0404]: expected trait, found struct `String`\n    |\n LL | struct Foo<T> where T: Bar, <T as Bar>::Baz: String {\n    |                                              ^^^^^^ not a trait\n-   | \n+   |\n   ::: $SRC_DIR/alloc/src/string.rs:LL:COL\n    |\n LL | pub trait ToString {\n@@ -23,7 +23,7 @@ error[E0404]: expected trait, found struct `String`\n    |\n LL | struct Qux<'a, T> where T: Bar, <&'a T as Bar>::Baz: String {\n    |                                                      ^^^^^^ not a trait\n-   | \n+   |\n   ::: $SRC_DIR/alloc/src/string.rs:LL:COL\n    |\n LL | pub trait ToString {\n@@ -43,7 +43,7 @@ error[E0404]: expected trait, found struct `String`\n    |\n LL | fn foo<T: Bar>(_: T) where <T as Bar>::Baz: String {\n    |                                             ^^^^^^ not a trait\n-   | \n+   |\n   ::: $SRC_DIR/alloc/src/string.rs:LL:COL\n    |\n LL | pub trait ToString {\n@@ -63,7 +63,7 @@ error[E0404]: expected trait, found struct `String`\n    |\n LL | fn qux<'a, T: Bar>(_: &'a T) where <&'a T as Bar>::Baz: String {\n    |                                                         ^^^^^^ not a trait\n-   | \n+   |\n   ::: $SRC_DIR/alloc/src/string.rs:LL:COL\n    |\n LL | pub trait ToString {"}, {"sha": "58e34cfe15c3d311cd0bb5cb729d1c0900b7e01d", "filename": "src/test/ui/traits/bad-sized.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -14,7 +14,7 @@ error[E0277]: the size for values of type `dyn Trait` cannot be known at compila\n    |\n LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n    |            ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n    |\n LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n@@ -40,7 +40,7 @@ error[E0277]: the size for values of type `dyn Trait` cannot be known at compila\n    |\n LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n    |                                     ^^^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n    |\n LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {"}, {"sha": "91552d4ea07d4e3177c7e475651406b74add05da", "filename": "src/test/ui/traits/bound/on-structs-and-enums-xc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0277]: the trait bound `usize: Trait` is not satisfied\n    |\n LL | fn explode(x: Foo<usize>) {}\n    |               ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`\n-   | \n+   |\n   ::: $DIR/auxiliary/on_structs_and_enums_xc.rs:5:18\n    |\n LL | pub struct Foo<T:Trait> {\n@@ -14,7 +14,7 @@ error[E0277]: the trait bound `f32: Trait` is not satisfied\n    |\n LL | fn kaboom(y: Bar<f32>) {}\n    |              ^^^^^^^^ the trait `Trait` is not implemented for `f32`\n-   | \n+   |\n   ::: $DIR/auxiliary/on_structs_and_enums_xc.rs:9:16\n    |\n LL | pub enum Bar<T:Trait> {"}, {"sha": "7d54a559e8b7ee0064112b55c6d47b76e3aafdbf", "filename": "src/test/ui/traits/bound/on-structs-and-enums-xc1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0277]: the trait bound `f64: Trait` is not satisfied\n    |\n LL |     let bar: Bar<f64> = return;\n    |              ^^^^^^^^ the trait `Trait` is not implemented for `f64`\n-   | \n+   |\n   ::: $DIR/auxiliary/on_structs_and_enums_xc.rs:9:16\n    |\n LL | pub enum Bar<T:Trait> {"}, {"sha": "ce163b501b79b5c2a16bd2e6723f100fb22a3fb2", "filename": "src/test/ui/traits/bound/same-crate-name.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0277]: the trait bound `Foo: main::a::Bar` is not satisfied\n    |\n LL |         a::try_foo(foo);\n    |                    ^^^ the trait `main::a::Bar` is not implemented for `Foo`\n-   | \n+   |\n   ::: $DIR/auxiliary/crate_a1.rs:3:24\n    |\n LL | pub fn try_foo(x: impl Bar) {}\n@@ -21,7 +21,7 @@ error[E0277]: the trait bound `DoesNotImplementTrait: main::a::Bar` is not satis\n    |\n LL |         a::try_foo(implements_no_traits);\n    |                    ^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `DoesNotImplementTrait`\n-   | \n+   |\n   ::: $DIR/auxiliary/crate_a1.rs:3:24\n    |\n LL | pub fn try_foo(x: impl Bar) {}\n@@ -32,7 +32,7 @@ error[E0277]: the trait bound `ImplementsWrongTraitConditionally<isize>: main::a\n    |\n LL |         a::try_foo(other_variant_implements_mismatched_trait);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `ImplementsWrongTraitConditionally<isize>`\n-   | \n+   |\n   ::: $DIR/auxiliary/crate_a1.rs:3:24\n    |\n LL | pub fn try_foo(x: impl Bar) {}\n@@ -50,7 +50,7 @@ error[E0277]: the trait bound `ImplementsTraitForUsize<isize>: main::a::Bar` is\n    |\n LL |         a::try_foo(other_variant_implements_correct_trait);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `ImplementsTraitForUsize<isize>`\n-   | \n+   |\n   ::: $DIR/auxiliary/crate_a1.rs:3:24\n    |\n LL | pub fn try_foo(x: impl Bar) {}"}, {"sha": "7b3d7f868cd61ee1deceee15f9fb06beaf0c7a41", "filename": "src/test/ui/traits/issue-85735.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0283]: type annotations needed\n    |\n LL |     T: FnMut(&'a ()),\n    |        ^^^^^^^^^^^^^ cannot infer type for type parameter `T`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n LL | pub trait FnMut<Args>: FnOnce<Args> {"}, {"sha": "91c4136a752fb4398da7bd4d9ed24d0fcb12d9f5", "filename": "src/test/ui/traits/mutual-recursion-issue-75860.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0275]: overflow evaluating the requirement `Option<_>: Sized`\n    |\n LL |     iso(left, right)\n    |     ^^^\n-   | \n+   |\n   ::: $SRC_DIR/core/src/option.rs:LL:COL\n    |\n LL | pub enum Option<T> {"}, {"sha": "d1778a284dad838549d8e4a0d6a9c1552f51b129", "filename": "src/test/ui/traits/suggest-deferences/issue-39029.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL |     let _errors = TcpListener::bind(&bad);\n    |                                     |\n    |                                     the trait `ToSocketAddrs` is not implemented for `NoToSocketAddrs`\n    |                                     help: consider adding dereference here: `&*bad`\n-   | \n+   |\n   ::: $SRC_DIR/std/src/net/tcp.rs:LL:COL\n    |\n LL |     pub fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<TcpListener> {"}, {"sha": "c34e3261fe185afb36b94bed5a8047b4b3f1cbce", "filename": "src/test/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL | fn check<T: Iterator, U: ?Sized>() {\n LL |     // suggest a where-clause, if needed\n LL |     mem::size_of::<U>();\n    |                    ^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n@@ -25,7 +25,7 @@ LL | fn check<T: Iterator, U: ?Sized>() {\n ...\n LL |     mem::size_of::<Misc<U>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n@@ -90,7 +90,7 @@ error[E0277]: the size for values of type `[T]` cannot be known at compilation t\n    |\n LL |     mem::size_of::<[T]>();\n    |                    ^^^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n@@ -103,7 +103,7 @@ error[E0277]: the size for values of type `[&U]` cannot be known at compilation\n    |\n LL |     mem::size_of::<[&U]>();\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {"}, {"sha": "0d8bbf1ce98c130e7c38bf2ec3ac84b064eebf45", "filename": "src/test/ui/typeck/issue-83693.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftypeck%2Fissue-83693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Ftypeck%2Fissue-83693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-83693.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0412]: cannot find type `F` in this scope\n    |\n LL | impl F {\n    |      ^ help: a trait with a similar name exists: `Fn`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n LL | pub trait Fn<Args>: FnMut<Args> {"}, {"sha": "b92ceb479bd3b3b2c15a05fbb0698b12c02348a1", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0004]: non-exhaustive patterns: `Err(_)` not covered\n    |\n LL |     let _ = match x {\n    |                   ^ pattern `Err(_)` not covered\n-   | \n+   |\n   ::: $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n@@ -57,7 +57,7 @@ error[E0004]: non-exhaustive patterns: `Err(_)` not covered\n    |\n LL |     let _ = match x {\n    |                   ^ pattern `Err(_)` not covered\n-   | \n+   |\n   ::: $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n@@ -71,7 +71,7 @@ error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n    |\n LL |     let Ok(x) = x;\n    |         ^^^^^ pattern `Err(_)` not covered\n-   | \n+   |\n   ::: $SRC_DIR/core/src/result.rs:LL:COL\n    |\n LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),"}, {"sha": "9c4ee28a2adb433635d8bad58fc99c47dcb9412d", "filename": "src/test/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0277]: the trait bound `U1: Copy` is not satisfied\n    |\n LL | #[derive(Clone)]\n    |          ^^^^^ the trait `Copy` is not implemented for `U1`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/clone.rs:LL:COL\n    |\n LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {"}, {"sha": "9c4ee28a2adb433635d8bad58fc99c47dcb9412d", "filename": "src/test/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0277]: the trait bound `U1: Copy` is not satisfied\n    |\n LL | #[derive(Clone)]\n    |          ^^^^^ the trait `Copy` is not implemented for `U1`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/clone.rs:LL:COL\n    |\n LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {"}, {"sha": "1d768315d9f65d293014e5e1b19231113fabbce6", "filename": "src/test/ui/union/union-derive-eq.mirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL | #[derive(Eq)]\n LL | union U2 {\n LL |     a: PartialEqNotEq,\n    |     ^^^^^^^^^^^^^^^^^ the trait `Eq` is not implemented for `PartialEqNotEq`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {"}, {"sha": "1d768315d9f65d293014e5e1b19231113fabbce6", "filename": "src/test/ui/union/union-derive-eq.thirunsafeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL | #[derive(Eq)]\n LL | union U2 {\n LL |     a: PartialEqNotEq,\n    |     ^^^^^^^^^^^^^^^^^ the trait `Eq` is not implemented for `PartialEqNotEq`\n-   | \n+   |\n   ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {"}, {"sha": "5c40787febfb76498c19eff2762d28aa7f36af45", "filename": "src/test/ui/unique-object-noncopyable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -9,7 +9,7 @@ LL |   trait Foo {\n ...\n LL |       let _z = y.clone();\n    |                  ^^^^^ method cannot be called on `Box<dyn Foo>` due to unsatisfied trait bounds\n-   | \n+   |\n   ::: $SRC_DIR/alloc/src/boxed.rs:LL:COL\n    |\n LL | / pub struct Box<"}, {"sha": "8e0804ebf9be93401918c40519db312a6c9eaaf6", "filename": "src/test/ui/unique-pinned-nocopy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -6,7 +6,7 @@ LL |   struct R {\n ...\n LL |       let _j = i.clone();\n    |                  ^^^^^ method cannot be called on `Box<R>` due to unsatisfied trait bounds\n-   | \n+   |\n   ::: $SRC_DIR/alloc/src/boxed.rs:LL:COL\n    |\n LL | / pub struct Box<"}, {"sha": "918e5feb28657bf2084f1d2c9383078bb8f3b8b3", "filename": "src/test/ui/wf/wf-impl-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fwf%2Fwf-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fwf%2Fwf-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-self-type.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n    |\n LL | impl Foo for Option<[u8]> {}\n    |              ^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   | \n+   |\n   ::: $SRC_DIR/core/src/option.rs:LL:COL\n    |\n LL | pub enum Option<T> {"}, {"sha": "0eabc592aa41e190eeefbf4d34fddc6803fbcc4d", "filename": "src/test/ui/xc-private-method.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fxc-private-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fxc-private-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxc-private-method.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0624]: associated function `static_meth_struct` is private\n    |\n LL |     let _ = xc_private_method_lib::Struct::static_meth_struct();\n    |                                            ^^^^^^^^^^^^^^^^^^ private associated function\n-   | \n+   |\n   ::: $DIR/auxiliary/xc-private-method-lib.rs:8:5\n    |\n LL |     fn static_meth_struct() -> Struct {\n@@ -14,7 +14,7 @@ error[E0624]: associated function `static_meth_enum` is private\n    |\n LL |     let _ = xc_private_method_lib::Enum::static_meth_enum();\n    |                                          ^^^^^^^^^^^^^^^^ private associated function\n-   | \n+   |\n   ::: $DIR/auxiliary/xc-private-method-lib.rs:23:5\n    |\n LL |     fn static_meth_enum() -> Enum {"}, {"sha": "b569882f8c1595cf94ac453fb0540e2ee4e06192", "filename": "src/test/ui/xc-private-method2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fxc-private-method2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fxc-private-method2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxc-private-method2.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0624]: associated function `meth_struct` is private\n    |\n LL |     let _ = xc_private_method_lib::Struct{ x: 10 }.meth_struct();\n    |                                                    ^^^^^^^^^^^ private associated function\n-   | \n+   |\n   ::: $DIR/auxiliary/xc-private-method-lib.rs:12:5\n    |\n LL |     fn meth_struct(&self) -> isize {\n@@ -14,7 +14,7 @@ error[E0624]: associated function `meth_enum` is private\n    |\n LL |     let _ = xc_private_method_lib::Enum::Variant1(20).meth_enum();\n    |                                                       ^^^^^^^^^ private associated function\n-   | \n+   |\n   ::: $DIR/auxiliary/xc-private-method-lib.rs:27:5\n    |\n LL |     fn meth_enum(&self) -> isize {"}, {"sha": "cee314568887c5d21859ed4de4f807b35813b4e2", "filename": "src/test/ui/xcrate/xcrate-unit-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-unit-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8372f876c66ae4df96638bbfdf9ac7baffcf3a6/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-unit-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-unit-struct.stderr?ref=f8372f876c66ae4df96638bbfdf9ac7baffcf3a6", "patch": "@@ -3,7 +3,7 @@ error[E0423]: expected value, found struct `xcrate_unit_struct::StructWithFields\n    |\n LL |     let _ = xcrate_unit_struct::StructWithFields;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `xcrate_unit_struct::StructWithFields { foo: val }`\n-   | \n+   |\n   ::: $DIR/auxiliary/xcrate_unit_struct.rs:20:1\n    |\n LL | pub struct StructWithFields {"}]}