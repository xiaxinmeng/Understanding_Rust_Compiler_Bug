{"sha": "ea0ce7bb76bb01741fc3ba2ca32a80c75a380d0f", "node_id": "C_kwDOAAsO6NoAKGVhMGNlN2JiNzZiYjAxNzQxZmMzYmEyY2EzMmE4MGM3NWEzODBkMGY", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2022-02-17T16:57:39Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2022-02-17T17:03:17Z"}, "message": "Move await_holding_* lints to suspicious and improve doc\n\nEven though the FP for that the lints were moved to pedantic isn't fixed\nyet, running the lintcheck tool over the most popular 279 crates didn't\ntrigger this lint once. I would say that this lint is valuable enough,\ndespite the known FP, to be warn-by-default. Especially since a pretty\nnice workaround exists.", "tree": {"sha": "381f20ed7273c44f9a573c40a270216226d7132f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/381f20ed7273c44f9a573c40a270216226d7132f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea0ce7bb76bb01741fc3ba2ca32a80c75a380d0f", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmIOf9UACgkQHKDfKvWd\naKW6vw/9HBUqL+BSw8L+OpjZEtaWdI+dCr5sa29B55CTeLkGMrt1zxZ7BsxNCQGE\nIK/zK3IkjpAe63bpC4Q4gC+zmaKU4DZ5TD42r614aZ4Zwh4u7wQ9KEe3Hecv6n+h\nisle7oJOwHXJ0iOh2RgbIpPWRmZpPUWtPlP/3SnL8Aq0Em30nQpPrNkzPjL/b4FI\nJFi+ESEkmrm+5Ya9gn0IAzRSZqiEp9Rd+b32BA55a2wda1bSh/kojOxnGffBPDAH\nWScpGtPDWcPMD1HolMquoX15pq7wx2AX/ewCGzlijQJ5CcQ98EAa1NrxBGRGfi8y\nEzFZ8NK9h3H4KlDHpi+U7JmNezvZHvoMuItJArsBQ0uW8XlH48p6TpyAhUCcpb9h\nybB75lMf9cF/N1x6xP2tRPvHhKaLRDCtGySdYXY11Pcu05tAx82dmvi6D6foY1pU\nv+y7GGbbr6koANmybB9QjxJAZ56DrqqnQW5TRQoMg+ysNV8I6KFv8f7FILpXiFcX\nARIR5mwGaulG4XJlSfxDFtkBQVaSMv9XieUazhoZwqR4RUEeuRJLBWAO1CUSOcQG\noW5N/2YOXmBFHslKf329oBmk39kOKAhtqrH2gm8hMuZr5PgAy1ufFw3j8FFAZzYa\nPeicfkNQSqsPmAERtSECaWKUwNS0OD0tHNtCIR57XOEJ1272d7E=\n=F5b1\n-----END PGP SIGNATURE-----", "payload": "tree 381f20ed7273c44f9a573c40a270216226d7132f\nparent c5709419b1b31c8d4c5e369c7b9adbf592c599ca\nauthor flip1995 <philipp.krones@embecosm.com> 1645117059 +0100\ncommitter flip1995 <philipp.krones@embecosm.com> 1645117397 +0100\n\nMove await_holding_* lints to suspicious and improve doc\n\nEven though the FP for that the lints were moved to pedantic isn't fixed\nyet, running the lintcheck tool over the most popular 279 crates didn't\ntrigger this lint once. I would say that this lint is valuable enough,\ndespite the known FP, to be warn-by-default. Especially since a pretty\nnice workaround exists.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea0ce7bb76bb01741fc3ba2ca32a80c75a380d0f", "html_url": "https://github.com/rust-lang/rust/commit/ea0ce7bb76bb01741fc3ba2ca32a80c75a380d0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea0ce7bb76bb01741fc3ba2ca32a80c75a380d0f/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5709419b1b31c8d4c5e369c7b9adbf592c599ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5709419b1b31c8d4c5e369c7b9adbf592c599ca", "html_url": "https://github.com/rust-lang/rust/commit/c5709419b1b31c8d4c5e369c7b9adbf592c599ca"}], "stats": {"total": 94, "additions": 64, "deletions": 30}, "files": [{"sha": "f0979840ff8d8ab9d55d0a1426b5905ee10d23ec", "filename": "clippy_lints/src/await_holding_invalid.rs", "status": "modified", "additions": 60, "deletions": 28, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/ea0ce7bb76bb01741fc3ba2ca32a80c75a380d0f/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0ce7bb76bb01741fc3ba2ca32a80c75a380d0f/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs?ref=ea0ce7bb76bb01741fc3ba2ca32a80c75a380d0f", "patch": "@@ -9,8 +9,7 @@ use rustc_span::Span;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for calls to await while holding a\n-    /// non-async-aware MutexGuard.\n+    /// Checks for calls to await while holding a non-async-aware MutexGuard.\n     ///\n     /// ### Why is this bad?\n     /// The Mutex types found in std::sync and parking_lot\n@@ -22,77 +21,110 @@ declare_clippy_lint! {\n     /// either by introducing a scope or an explicit call to Drop::drop.\n     ///\n     /// ### Known problems\n-    /// Will report false positive for explicitly dropped guards ([#6446](https://github.com/rust-lang/rust-clippy/issues/6446)).\n+    /// Will report false positive for explicitly dropped guards\n+    /// ([#6446](https://github.com/rust-lang/rust-clippy/issues/6446)). A workaround for this is\n+    /// to wrap the `.lock()` call in a block instead of explicitly dropping the guard.\n     ///\n     /// ### Example\n-    /// ```rust,ignore\n-    /// use std::sync::Mutex;\n-    ///\n+    /// ```rust\n+    /// # use std::sync::Mutex;\n+    /// # async fn baz() {}\n     /// async fn foo(x: &Mutex<u32>) {\n-    ///   let guard = x.lock().unwrap();\n+    ///   let mut guard = x.lock().unwrap();\n     ///   *guard += 1;\n-    ///   bar.await;\n+    ///   baz().await;\n+    /// }\n+    ///\n+    /// async fn bar(x: &Mutex<u32>) {\n+    ///   let mut guard = x.lock().unwrap();\n+    ///   *guard += 1;\n+    ///   drop(guard); // explicit drop\n+    ///   baz().await;\n     /// }\n     /// ```\n     ///\n     /// Use instead:\n-    /// ```rust,ignore\n-    /// use std::sync::Mutex;\n-    ///\n+    /// ```rust\n+    /// # use std::sync::Mutex;\n+    /// # async fn baz() {}\n     /// async fn foo(x: &Mutex<u32>) {\n     ///   {\n-    ///     let guard = x.lock().unwrap();\n+    ///     let mut guard = x.lock().unwrap();\n     ///     *guard += 1;\n     ///   }\n-    ///   bar.await;\n+    ///   baz().await;\n+    /// }\n+    ///\n+    /// async fn bar(x: &Mutex<u32>) {\n+    ///   {\n+    ///     let mut guard = x.lock().unwrap();\n+    ///     *guard += 1;\n+    ///   } // guard dropped here at end of scope\n+    ///   baz().await;\n     /// }\n     /// ```\n     #[clippy::version = \"1.45.0\"]\n     pub AWAIT_HOLDING_LOCK,\n-    pedantic,\n-    \"Inside an async function, holding a MutexGuard while calling await\"\n+    suspicious,\n+    \"inside an async function, holding a `MutexGuard` while calling `await`\"\n }\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for calls to await while holding a\n-    /// `RefCell` `Ref` or `RefMut`.\n+    /// Checks for calls to await while holding a `RefCell` `Ref` or `RefMut`.\n     ///\n     /// ### Why is this bad?\n     /// `RefCell` refs only check for exclusive mutable access\n     /// at runtime. Holding onto a `RefCell` ref across an `await` suspension point\n     /// risks panics from a mutable ref shared while other refs are outstanding.\n     ///\n     /// ### Known problems\n-    /// Will report false positive for explicitly dropped refs ([#6353](https://github.com/rust-lang/rust-clippy/issues/6353)).\n+    /// Will report false positive for explicitly dropped refs\n+    /// ([#6353](https://github.com/rust-lang/rust-clippy/issues/6353)). A workaround for this is\n+    /// to wrap the `.borrow[_mut]()` call in a block instead of explicitly dropping the ref.\n     ///\n     /// ### Example\n-    /// ```rust,ignore\n-    /// use std::cell::RefCell;\n-    ///\n+    /// ```rust\n+    /// # use std::cell::RefCell;\n+    /// # async fn baz() {}\n     /// async fn foo(x: &RefCell<u32>) {\n     ///   let mut y = x.borrow_mut();\n     ///   *y += 1;\n-    ///   bar.await;\n+    ///   baz().await;\n+    /// }\n+    ///\n+    /// async fn bar(x: &RefCell<u32>) {\n+    ///   let mut y = x.borrow_mut();\n+    ///   *y += 1;\n+    ///   drop(y); // explicit drop\n+    ///   baz().await;\n     /// }\n     /// ```\n     ///\n     /// Use instead:\n-    /// ```rust,ignore\n-    /// use std::cell::RefCell;\n-    ///\n+    /// ```rust\n+    /// # use std::cell::RefCell;\n+    /// # async fn baz() {}\n     /// async fn foo(x: &RefCell<u32>) {\n     ///   {\n     ///      let mut y = x.borrow_mut();\n     ///      *y += 1;\n     ///   }\n-    ///   bar.await;\n+    ///   baz().await;\n+    /// }\n+    ///\n+    /// async fn bar(x: &RefCell<u32>) {\n+    ///   {\n+    ///     let mut y = x.borrow_mut();\n+    ///     *y += 1;\n+    ///   } // y dropped here at end of scope\n+    ///   baz().await;\n     /// }\n     /// ```\n     #[clippy::version = \"1.49.0\"]\n     pub AWAIT_HOLDING_REFCELL_REF,\n-    pedantic,\n-    \"Inside an async function, holding a RefCell ref while calling await\"\n+    suspicious,\n+    \"inside an async function, holding a `RefCell` ref while calling `await`\"\n }\n \n declare_lint_pass!(AwaitHolding => [AWAIT_HOLDING_LOCK, AWAIT_HOLDING_REFCELL_REF]);"}, {"sha": "a94f6b528b47bfba5e5000eb2fe985a1d3dabc4f", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0ce7bb76bb01741fc3ba2ca32a80c75a380d0f/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0ce7bb76bb01741fc3ba2ca32a80c75a380d0f/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=ea0ce7bb76bb01741fc3ba2ca32a80c75a380d0f", "patch": "@@ -14,6 +14,8 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(attrs::DEPRECATED_SEMVER),\n     LintId::of(attrs::MISMATCHED_TARGET_OS),\n     LintId::of(attrs::USELESS_ATTRIBUTE),\n+    LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n+    LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n     LintId::of(bit_mask::BAD_BIT_MASK),\n     LintId::of(bit_mask::INEFFECTIVE_BIT_MASK),\n     LintId::of(blacklisted_name::BLACKLISTED_NAME),"}, {"sha": "00d305131810df7418ae29eb519c660cbd954746", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0ce7bb76bb01741fc3ba2ca32a80c75a380d0f/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0ce7bb76bb01741fc3ba2ca32a80c75a380d0f/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=ea0ce7bb76bb01741fc3ba2ca32a80c75a380d0f", "patch": "@@ -4,8 +4,6 @@\n \n store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(attrs::INLINE_ALWAYS),\n-    LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n-    LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n     LintId::of(bit_mask::VERBOSE_BIT_MASK),\n     LintId::of(borrow_as_ptr::BORROW_AS_PTR),\n     LintId::of(bytecount::NAIVE_BYTECOUNT),"}, {"sha": "da56f80080499e730fdf925b31ad702aa1dfec7c", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea0ce7bb76bb01741fc3ba2ca32a80c75a380d0f/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea0ce7bb76bb01741fc3ba2ca32a80c75a380d0f/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=ea0ce7bb76bb01741fc3ba2ca32a80c75a380d0f", "patch": "@@ -5,6 +5,8 @@\n store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec![\n     LintId::of(assign_ops::MISREFACTORED_ASSIGN_OP),\n     LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n+    LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n+    LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n     LintId::of(eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n     LintId::of(float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n     LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),"}]}