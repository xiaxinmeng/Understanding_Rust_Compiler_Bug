{"sha": "34b11d99815e257f0502d06c5951f3126d049e95", "node_id": "C_kwDOAAsO6NoAKDM0YjExZDk5ODE1ZTI1N2YwNTAyZDA2YzU5NTFmMzEyNmQwNDllOTU", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-12-09T19:07:00Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-12-09T19:23:23Z"}, "message": "fix: normalize projection after discarding free `BoundVar`s in RPIT", "tree": {"sha": "44e2a455fc75b9425b7490d84baa42ffae759f67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44e2a455fc75b9425b7490d84baa42ffae759f67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34b11d99815e257f0502d06c5951f3126d049e95", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmOTiysACgkQ4laYqTBY\nYXHliQ/9GG1KAC0pXAL2Er/I3+Uaemj6zvhKgvB3/1DakmXjG5dCCt1LYdl32OaZ\nT5wuIKbkQd+WILDyj3XdkAbEDQYNuq/OxjiT9G/OydfBA3F9D8moIb3j/vHDhfoV\n9Fglj09oWjilARwEB2Ei2gIShPlXEDTOyw/tp6X09/5Xi+pnfQp2Bj+BR3fItKNx\neV4ACphdpfNAg+K961aBRq7/bS4ilB4Fr/aOYtYXwE9+Bq8mtaWIFuWLwB1ma0X5\nTGP4inRhKcDpZ49YyYtFOvFqdxva1avVDniJCh6y1mlq6U6tapRPxC1A6B7nrfCQ\nCpxnQT/yr1mRiZiO0Aahnjmw//CYn/EVyHQU8VOBrkSFoSB2+95/QKu7oadOBqim\nPt6dRqGq4iAqx10Nqk1Ln3pLBjIbeLi4w4yO1E6h65VbzLrtY7YS4dbvcgdeJdOr\nMglQRhCB7wvLi6xTBd+lmHw8IptMGSg+FIsbpryFanQLlpOv+2yltCQD+75ettza\nPWKicVnc9al/PC1Xl3dLL/hOwOmGgttkyYbkpg+nKs62Xbe5jElrlK9vk58PFodz\nbKeKtS7kK9FyRILU9iI3aevdJpTUzb4iQDfWGcTqDQjtdItCqJCBOKJ1xyhKSDh1\nAEpS7zjPrkZRf2Ee0VNSwEYf6cya+y3UfdnuGaaaWBtNPkTDeDA=\n=pJTV\n-----END PGP SIGNATURE-----", "payload": "tree 44e2a455fc75b9425b7490d84baa42ffae759f67\nparent 6e8a54d0f68702cf7981c8299357838eb0f4d5b2\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1670612820 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1670613803 +0900\n\nfix: normalize projection after discarding free `BoundVar`s in RPIT\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34b11d99815e257f0502d06c5951f3126d049e95", "html_url": "https://github.com/rust-lang/rust/commit/34b11d99815e257f0502d06c5951f3126d049e95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34b11d99815e257f0502d06c5951f3126d049e95/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e8a54d0f68702cf7981c8299357838eb0f4d5b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e8a54d0f68702cf7981c8299357838eb0f4d5b2", "html_url": "https://github.com/rust-lang/rust/commit/6e8a54d0f68702cf7981c8299357838eb0f4d5b2"}], "stats": {"total": 54, "additions": 34, "deletions": 20}, "files": [{"sha": "ad7ec485e9d383c72e5ea73408cbc1a0584fdc1c", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/34b11d99815e257f0502d06c5951f3126d049e95/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34b11d99815e257f0502d06c5951f3126d049e95/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=34b11d99815e257f0502d06c5951f3126d049e95", "patch": "@@ -503,7 +503,7 @@ impl<'a> InferenceContext<'a> {\n             result: InferenceResult::default(),\n             table: unify::InferenceTable::new(db, trait_env.clone()),\n             trait_env,\n-            return_ty: TyKind::Error.intern(Interner), // set in collect_fn_signature\n+            return_ty: TyKind::Error.intern(Interner), // set in collect_* calls\n             resume_yield_tys: None,\n             db,\n             owner,\n@@ -582,14 +582,17 @@ impl<'a> InferenceContext<'a> {\n         } else {\n             &*data.ret_type\n         };\n-        let return_ty = self.make_ty_with_mode(return_ty, ImplTraitLoweringMode::Opaque);\n-        self.return_ty = return_ty;\n \n-        if let Some(rpits) = self.db.return_type_impl_traits(func) {\n+        let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver)\n+            .with_impl_trait_mode(ImplTraitLoweringMode::Opaque);\n+        let return_ty = ctx.lower_ty(return_ty);\n+        let return_ty = self.insert_type_vars(return_ty);\n+\n+        let return_ty = if let Some(rpits) = self.db.return_type_impl_traits(func) {\n             // RPIT opaque types use substitution of their parent function.\n             let fn_placeholders = TyBuilder::placeholder_subst(self.db, func);\n-            self.return_ty = fold_tys(\n-                self.return_ty.clone(),\n+            fold_tys(\n+                return_ty,\n                 |ty, _| {\n                     let opaque_ty_id = match ty.kind(Interner) {\n                         TyKind::OpaqueType(opaque_ty_id, _) => *opaque_ty_id,\n@@ -610,14 +613,18 @@ impl<'a> InferenceContext<'a> {\n                         let (var_predicate, binders) = predicate\n                             .substitute(Interner, &var_subst)\n                             .into_value_and_skipped_binders();\n-                        always!(binders.len(Interner) == 0); // quantified where clauses not yet handled\n+                        always!(binders.is_empty(Interner)); // quantified where clauses not yet handled\n                         self.push_obligation(var_predicate.cast(Interner));\n                     }\n                     var\n                 },\n                 DebruijnIndex::INNERMOST,\n-            );\n-        }\n+            )\n+        } else {\n+            return_ty\n+        };\n+\n+        self.return_ty = self.normalize_associated_types_in(return_ty);\n     }\n \n     fn infer_body(&mut self) {\n@@ -652,23 +659,14 @@ impl<'a> InferenceContext<'a> {\n         self.result.diagnostics.push(diagnostic);\n     }\n \n-    fn make_ty_with_mode(\n-        &mut self,\n-        type_ref: &TypeRef,\n-        impl_trait_mode: ImplTraitLoweringMode,\n-    ) -> Ty {\n+    fn make_ty(&mut self, type_ref: &TypeRef) -> Ty {\n         // FIXME use right resolver for block\n-        let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver)\n-            .with_impl_trait_mode(impl_trait_mode);\n+        let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver);\n         let ty = ctx.lower_ty(type_ref);\n         let ty = self.insert_type_vars(ty);\n         self.normalize_associated_types_in(ty)\n     }\n \n-    fn make_ty(&mut self, type_ref: &TypeRef) -> Ty {\n-        self.make_ty_with_mode(type_ref, ImplTraitLoweringMode::Disallowed)\n-    }\n-\n     fn err_ty(&self) -> Ty {\n         self.result.standard_types.unknown.clone()\n     }"}, {"sha": "a9fd01ee011d9a97c94b22275d36a901b8687ee8", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/34b11d99815e257f0502d06c5951f3126d049e95/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34b11d99815e257f0502d06c5951f3126d049e95/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=34b11d99815e257f0502d06c5951f3126d049e95", "patch": "@@ -1388,6 +1388,22 @@ fn foo<const C: u8, T>() -> (impl FnOnce(&str, T), impl Trait<u8>) {\n     );\n }\n \n+#[test]\n+fn return_pos_impl_trait_in_projection() {\n+    // Note that the unused type param `X` is significant; see #13307.\n+    check_no_mismatches(\n+        r#\"\n+//- minicore: sized\n+trait Future { type Output; }\n+impl Future for () { type Output = i32; }\n+type Foo<F> = (<F as Future>::Output, F);\n+fn foo<X>() -> Foo<impl Future<Output = ()>> {\n+    (0, ())\n+}\n+\"#,\n+    )\n+}\n+\n #[test]\n fn dyn_trait() {\n     check_infer("}]}