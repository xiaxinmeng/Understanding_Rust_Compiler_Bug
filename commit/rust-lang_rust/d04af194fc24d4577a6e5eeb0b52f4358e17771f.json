{"sha": "d04af194fc24d4577a6e5eeb0b52f4358e17771f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNGFmMTk0ZmMyNGQ0NTc3YTZlNWVlYjBiNTJmNDM1OGUxNzc3MWY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-08-12T21:12:53Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-08-17T08:12:32Z"}, "message": "Remove SyntaxContext from {ast, hir}::{GlobalAsm, InlineAsm}\n\nWe now store it in the `Span` of the expression or item.", "tree": {"sha": "40cf54c2b2a619b0b05c7f5dbe683e21f72d04bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40cf54c2b2a619b0b05c7f5dbe683e21f72d04bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d04af194fc24d4577a6e5eeb0b52f4358e17771f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d04af194fc24d4577a6e5eeb0b52f4358e17771f", "html_url": "https://github.com/rust-lang/rust/commit/d04af194fc24d4577a6e5eeb0b52f4358e17771f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d04af194fc24d4577a6e5eeb0b52f4358e17771f/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f70c90c677e98f5267cc7c66fadef76e269097cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f70c90c677e98f5267cc7c66fadef76e269097cb", "html_url": "https://github.com/rust-lang/rust/commit/f70c90c677e98f5267cc7c66fadef76e269097cb"}], "stats": {"total": 43, "additions": 18, "deletions": 25}, "files": [{"sha": "ff0c44a23874bfa96bd824625fc1e162583416de", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=d04af194fc24d4577a6e5eeb0b52f4358e17771f", "patch": "@@ -984,7 +984,6 @@ impl LoweringContext<'_> {\n             volatile: asm.volatile,\n             alignstack: asm.alignstack,\n             dialect: asm.dialect,\n-            ctxt: asm.ctxt,\n         };\n \n         let outputs = asm.outputs"}, {"sha": "4f9a9ed5673c7acc83d363e43d27943ecae58291", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=d04af194fc24d4577a6e5eeb0b52f4358e17771f", "patch": "@@ -750,10 +750,7 @@ impl LoweringContext<'_> {\n     }\n \n     fn lower_global_asm(&mut self, ga: &GlobalAsm) -> P<hir::GlobalAsm> {\n-        P(hir::GlobalAsm {\n-            asm: ga.asm,\n-            ctxt: ga.ctxt,\n-        })\n+        P(hir::GlobalAsm { asm: ga.asm })\n     }\n \n     fn lower_variant(&mut self, v: &Variant) -> hir::Variant {"}, {"sha": "e5ada1fb9aec4b5df22ee3f76bdb654026242c8f", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=d04af194fc24d4577a6e5eeb0b52f4358e17771f", "patch": "@@ -23,7 +23,6 @@ use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, CrateSugar, Ident, Name, NodeId, AsmDialect};\n use syntax::ast::{Attribute, Label, LitKind, StrStyle, FloatTy, IntTy, UintTy};\n use syntax::attr::{InlineAttr, OptimizeAttr};\n-use syntax::ext::hygiene::SyntaxContext;\n use syntax::symbol::{Symbol, kw};\n use syntax::tokenstream::TokenStream;\n use syntax::util::parser::ExprPrecedence;\n@@ -2004,8 +2003,6 @@ pub struct InlineAsm {\n     pub volatile: bool,\n     pub alignstack: bool,\n     pub dialect: AsmDialect,\n-    #[stable_hasher(ignore)] // This is used for error reporting\n-    pub ctxt: SyntaxContext,\n }\n \n /// Represents an argument in a function header.\n@@ -2184,8 +2181,6 @@ pub struct ForeignMod {\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub struct GlobalAsm {\n     pub asm: Symbol,\n-    #[stable_hasher(ignore)] // This is used for error reporting\n-    pub ctxt: SyntaxContext,\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]"}, {"sha": "b68ee2cb44d4bcb9cf02a5bab742f596bff1cdcf", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=d04af194fc24d4577a6e5eeb0b52f4358e17771f", "patch": "@@ -6,9 +6,9 @@ use crate::value::Value;\n \n use rustc::hir;\n use rustc_codegen_ssa::traits::*;\n-\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::mir::operand::OperandValue;\n+use syntax_pos::Span;\n \n use std::ffi::{CStr, CString};\n use libc::{c_uint, c_char};\n@@ -19,7 +19,8 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         &mut self,\n         ia: &hir::InlineAsm,\n         outputs: Vec<PlaceRef<'tcx, &'ll Value>>,\n-        mut inputs: Vec<&'ll Value>\n+        mut inputs: Vec<&'ll Value>,\n+        span: Span,\n     ) -> bool {\n         let mut ext_constraints = vec![];\n         let mut output_types = vec![];\n@@ -102,7 +103,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             let kind = llvm::LLVMGetMDKindIDInContext(self.llcx,\n                 key.as_ptr() as *const c_char, key.len() as c_uint);\n \n-            let val: &'ll Value = self.const_i32(ia.ctxt.outer_expn().as_u32() as i32);\n+            let val: &'ll Value = self.const_i32(span.ctxt().outer_expn().as_u32() as i32);\n \n             llvm::LLVMSetMetadata(r, kind,\n                 llvm::LLVMMDNodeInContext(self.llcx, &val, 1));"}, {"sha": "3617f3afaae4148a37224672b6b9374f35e7ec00", "filename": "src/librustc_codegen_ssa/mir/statement.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs?ref=d04af194fc24d4577a6e5eeb0b52f4358e17771f", "patch": "@@ -89,7 +89,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 });\n \n                 if input_vals.len() == asm.inputs.len() {\n-                    let res = bx.codegen_inline_asm(&asm.asm, outputs, input_vals);\n+                    let res = bx.codegen_inline_asm(\n+                        &asm.asm,\n+                        outputs,\n+                        input_vals,\n+                        statement.source_info.span,\n+                    );\n                     if !res {\n                         span_err!(bx.sess(), statement.source_info.span, E0668,\n                                   \"malformed inline assembly\");"}, {"sha": "c9e1ed86e97e0ff37159fc8c746be8bc3e837950", "filename": "src/librustc_codegen_ssa/traits/asm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs?ref=d04af194fc24d4577a6e5eeb0b52f4358e17771f", "patch": "@@ -1,6 +1,7 @@\n use super::BackendTypes;\n use crate::mir::place::PlaceRef;\n use rustc::hir::{GlobalAsm, InlineAsm};\n+use syntax_pos::Span;\n \n pub trait AsmBuilderMethods<'tcx>: BackendTypes {\n     /// Take an inline assembly expression and splat it out via LLVM\n@@ -9,6 +10,7 @@ pub trait AsmBuilderMethods<'tcx>: BackendTypes {\n         ia: &InlineAsm,\n         outputs: Vec<PlaceRef<'tcx, Self::Value>>,\n         inputs: Vec<Self::Value>,\n+        span: Span,\n     ) -> bool;\n }\n "}, {"sha": "9091607629e0fabae7c1938ff9c8c1b8e2a4f926", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d04af194fc24d4577a6e5eeb0b52f4358e17771f", "patch": "@@ -5,7 +5,7 @@ pub use UnsafeSource::*;\n pub use crate::symbol::{Ident, Symbol as Name};\n pub use crate::util::parser::ExprPrecedence;\n \n-use crate::ext::hygiene::{ExpnId, SyntaxContext};\n+use crate::ext::hygiene::ExpnId;\n use crate::parse::token::{self, DelimToken};\n use crate::print::pprust;\n use crate::ptr::P;\n@@ -1782,7 +1782,6 @@ pub struct InlineAsm {\n     pub volatile: bool,\n     pub alignstack: bool,\n     pub dialect: AsmDialect,\n-    pub ctxt: SyntaxContext,\n }\n \n /// An argument in a function header.\n@@ -2030,7 +2029,6 @@ pub struct ForeignMod {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub struct GlobalAsm {\n     pub asm: Symbol,\n-    pub ctxt: SyntaxContext,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]"}, {"sha": "18d4a6463558d6114041ba2b3802a8f88c6ada90", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=d04af194fc24d4577a6e5eeb0b52f4358e17771f", "patch": "@@ -1182,7 +1182,7 @@ pub fn noop_visit_expr<T: MutVisitor>(Expr { node, id, span, attrs }: &mut Expr,\n         }\n         ExprKind::InlineAsm(asm) => {\n             let InlineAsm { asm: _, asm_str_style: _, outputs, inputs, clobbers: _, volatile: _,\n-                            alignstack: _, dialect: _, ctxt: _ } = asm.deref_mut();\n+                            alignstack: _, dialect: _ } = asm.deref_mut();\n             for out in outputs {\n                 let InlineAsmOutput { constraint: _, expr, is_rw: _, is_indirect: _ } = out;\n                 vis.visit_expr(expr);"}, {"sha": "644a44f1989dbd5d6e75b2628cf80dfd20116f3f", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=d04af194fc24d4577a6e5eeb0b52f4358e17771f", "patch": "@@ -63,7 +63,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n     MacEager::expr(P(ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ExprKind::InlineAsm(P(inline_asm)),\n-        span: sp,\n+        span: sp.with_ctxt(cx.backtrace()),\n         attrs: ThinVec::new(),\n     }))\n }\n@@ -277,6 +277,5 @@ fn parse_inline_asm<'a>(\n         volatile,\n         alignstack,\n         dialect,\n-        ctxt: cx.backtrace(),\n     }))\n }"}, {"sha": "73ebeaec454975c9e17b237c8c6185c63c41fe6d", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04af194fc24d4577a6e5eeb0b52f4358e17771f/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=d04af194fc24d4577a6e5eeb0b52f4358e17771f", "patch": "@@ -30,7 +30,7 @@ pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                 id: ast::DUMMY_NODE_ID,\n                 node: ast::ItemKind::GlobalAsm(P(global_asm)),\n                 vis: respan(sp.shrink_to_lo(), ast::VisibilityKind::Inherited),\n-                span: sp,\n+                span: sp.with_ctxt(cx.backtrace()),\n                 tokens: None,\n             })])\n         }\n@@ -61,8 +61,5 @@ fn parse_global_asm<'a>(\n         None => return Ok(None),\n     };\n \n-    Ok(Some(ast::GlobalAsm {\n-        asm,\n-        ctxt: cx.backtrace(),\n-    }))\n+    Ok(Some(ast::GlobalAsm { asm }))\n }"}]}