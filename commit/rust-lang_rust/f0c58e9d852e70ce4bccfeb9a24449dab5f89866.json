{"sha": "f0c58e9d852e70ce4bccfeb9a24449dab5f89866", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYzU4ZTlkODUyZTcwY2U0YmNjZmViOWEyNDQ0OWRhYjVmODk4NjY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-10-25T17:46:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-25T17:46:01Z"}, "message": "Rollup merge of #65806 - fusion-engineering-forks:slice-ptr-range, r=Centril\n\nAdd [T]::as_ptr_range() and [T]::as_mut_ptr_range().\n\nImplementation of https://github.com/rust-lang/rfcs/pull/2791", "tree": {"sha": "5fbe534897a34450edc946a24b754dc45913bb46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fbe534897a34450edc946a24b754dc45913bb46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0c58e9d852e70ce4bccfeb9a24449dab5f89866", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdszTZCRBK7hj4Ov3rIwAAdHIIAFuQGiurRPgHOLLjnQS8vaKP\n00nVOXuCyeBCOGKTqmm7MOga5bjncRe5eiRic06DXobRC2Nh//vm0CIgM58WAVDf\ns8ZdWWE164/B+kAGYpvXjWp4zlZZeuscfwYQz0bZlbAmjOIThnIEs8SObZU/QY+C\nb5oDiEJLKB6jmKX/mzFRqIAnmRhzGYIf4mCzHgbErM+tWfKwxvnt3lqaiSQ9sAFK\nhZaQoKya2Wvoly4+fis0INcgumynaQcPxny+ayUNk4D76siQfcOpLjRRkMVkgI0S\nTr5rPvIuXhZxu48zokqgioY92bvKHkSMTCSB6czz61kqMkrCj5J3+gEfpircsMo=\n=aPkA\n-----END PGP SIGNATURE-----\n", "payload": "tree 5fbe534897a34450edc946a24b754dc45913bb46\nparent 574b0780abfecae976a5dfd3e0accb0c821e18e0\nparent 381c4425b7d0f428df6576f085ea03b1d42e06af\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1572025561 +0900\ncommitter GitHub <noreply@github.com> 1572025561 +0900\n\nRollup merge of #65806 - fusion-engineering-forks:slice-ptr-range, r=Centril\n\nAdd [T]::as_ptr_range() and [T]::as_mut_ptr_range().\n\nImplementation of https://github.com/rust-lang/rfcs/pull/2791\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c58e9d852e70ce4bccfeb9a24449dab5f89866", "html_url": "https://github.com/rust-lang/rust/commit/f0c58e9d852e70ce4bccfeb9a24449dab5f89866", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0c58e9d852e70ce4bccfeb9a24449dab5f89866/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "574b0780abfecae976a5dfd3e0accb0c821e18e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/574b0780abfecae976a5dfd3e0accb0c821e18e0", "html_url": "https://github.com/rust-lang/rust/commit/574b0780abfecae976a5dfd3e0accb0c821e18e0"}, {"sha": "381c4425b7d0f428df6576f085ea03b1d42e06af", "url": "https://api.github.com/repos/rust-lang/rust/commits/381c4425b7d0f428df6576f085ea03b1d42e06af", "html_url": "https://github.com/rust-lang/rust/commit/381c4425b7d0f428df6576f085ea03b1d42e06af"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "cdada1252d2bfc656e353eccc742cad5e2a2fcf1", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 81, "deletions": 1, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f0c58e9d852e70ce4bccfeb9a24449dab5f89866/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c58e9d852e70ce4bccfeb9a24449dab5f89866/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=f0c58e9d852e70ce4bccfeb9a24449dab5f89866", "patch": "@@ -28,7 +28,7 @@ use crate::fmt;\n use crate::intrinsics::{assume, exact_div, unchecked_sub, is_aligned_and_not_null};\n use crate::isize;\n use crate::iter::*;\n-use crate::ops::{FnMut, self};\n+use crate::ops::{FnMut, Range, self};\n use crate::option::Option;\n use crate::option::Option::{None, Some};\n use crate::result::Result;\n@@ -407,6 +407,86 @@ impl<T> [T] {\n         self as *mut [T] as *mut T\n     }\n \n+    /// Returns the two raw pointers spanning the slice.\n+    ///\n+    /// The returned range is half-open, which means that the end pointer\n+    /// points *one past* the last element of the slice. This way, an empty\n+    /// slice is represented by two equal pointers, and the difference between\n+    /// the two pointers represents the size of the size.\n+    ///\n+    /// See [`as_ptr`] for warnings on using these pointers. The end pointer\n+    /// requires extra caution, as it does not point to a valid element in the\n+    /// slice.\n+    ///\n+    /// This function is useful for interacting with foreign interfaces which\n+    /// use two pointers to refer to a range of elements in memory, as is\n+    /// common in C++.\n+    ///\n+    /// It can also be useful to check if a pointer to an element refers to an\n+    /// element of this slice:\n+    ///\n+    /// ```\n+    /// #![feature(slice_ptr_range)]\n+    ///\n+    /// let a = [1, 2, 3];\n+    /// let x = &a[1] as *const _;\n+    /// let y = &5 as *const _;\n+    ///\n+    /// assert!(a.as_ptr_range().contains(&x));\n+    /// assert!(!a.as_ptr_range().contains(&y));\n+    /// ```\n+    ///\n+    /// [`as_ptr`]: #method.as_ptr\n+    #[unstable(feature = \"slice_ptr_range\", issue = \"65807\")]\n+    #[inline]\n+    pub fn as_ptr_range(&self) -> Range<*const T> {\n+        // The `add` here is safe, because:\n+        //\n+        //   - Both pointers are part of the same object, as pointing directly\n+        //     past the object also counts.\n+        //\n+        //   - The size of the slice is never larger than isize::MAX bytes, as\n+        //     noted here:\n+        //       - https://github.com/rust-lang/unsafe-code-guidelines/issues/102#issuecomment-473340447\n+        //       - https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+        //       - https://doc.rust-lang.org/core/slice/fn.from_raw_parts.html#safety\n+        //     (This doesn't seem normative yet, but the very same assumption is\n+        //     made in many places, including the Index implementation of slices.)\n+        //\n+        //   - There is no wrapping around involved, as slices do not wrap past\n+        //     the end of the address space.\n+        //\n+        // See the documentation of pointer::add.\n+        let start = self.as_ptr();\n+        let end = unsafe { start.add(self.len()) };\n+        start..end\n+    }\n+\n+    /// Returns the two unsafe mutable pointers spanning the slice.\n+    ///\n+    /// The returned range is half-open, which means that the end pointer\n+    /// points *one past* the last element of the slice. This way, an empty\n+    /// slice is represented by two equal pointers, and the difference between\n+    /// the two pointers represents the size of the size.\n+    ///\n+    /// See [`as_mut_ptr`] for warnings on using these pointers. The end\n+    /// pointer requires extra caution, as it does not point to a valid element\n+    /// in the slice.\n+    ///\n+    /// This function is useful for interacting with foreign interfaces which\n+    /// use two pointers to refer to a range of elements in memory, as is\n+    /// common in C++.\n+    ///\n+    /// [`as_mut_ptr`]: #method.as_mut_ptr\n+    #[unstable(feature = \"slice_ptr_range\", issue = \"65807\")]\n+    #[inline]\n+    pub fn as_mut_ptr_range(&mut self) -> Range<*mut T> {\n+        // See as_ptr_range() above for why `add` here is safe.\n+        let start = self.as_mut_ptr();\n+        let end = unsafe { start.add(self.len()) };\n+        start..end\n+    }\n+\n     /// Swaps two elements in the slice.\n     ///\n     /// # Arguments"}]}