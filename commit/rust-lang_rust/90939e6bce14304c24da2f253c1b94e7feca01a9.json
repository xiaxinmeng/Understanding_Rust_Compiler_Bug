{"sha": "90939e6bce14304c24da2f253c1b94e7feca01a9", "node_id": "C_kwDOAAsO6NoAKDkwOTM5ZTZiY2UxNDMwNGMyNGRhMmYyNTNjMWI5NGU3ZmVjYTAxYTk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-26T07:37:54Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-26T07:46:30Z"}, "message": "Revert \"Do not allow typeck children items to constrain outer RPITs\"\n\nThis reverts commit e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee.", "tree": {"sha": "6cda5affc50791858c6cb4ee0639f7078c34140d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cda5affc50791858c6cb4ee0639f7078c34140d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90939e6bce14304c24da2f253c1b94e7feca01a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90939e6bce14304c24da2f253c1b94e7feca01a9", "html_url": "https://github.com/rust-lang/rust/commit/90939e6bce14304c24da2f253c1b94e7feca01a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90939e6bce14304c24da2f253c1b94e7feca01a9/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82ad5c95b6cdfc404ca07cd5cf791b809c390671", "url": "https://api.github.com/repos/rust-lang/rust/commits/82ad5c95b6cdfc404ca07cd5cf791b809c390671", "html_url": "https://github.com/rust-lang/rust/commit/82ad5c95b6cdfc404ca07cd5cf791b809c390671"}], "stats": {"total": 29, "additions": 0, "deletions": 29}, "files": [{"sha": "cf2140097e6da02b45253fef2e86ec5777de83d4", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/90939e6bce14304c24da2f253c1b94e7feca01a9/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90939e6bce14304c24da2f253c1b94e7feca01a9/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=90939e6bce14304c24da2f253c1b94e7feca01a9", "patch": "@@ -21,7 +21,6 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_infer::infer::{\n     InferCtxt, InferOk, LateBoundRegion, LateBoundRegionConversionTime, NllRegionVariableOrigin,\n };\n-use rustc_infer::traits::ObligationCause;\n use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::AssertKind;\n@@ -225,34 +224,6 @@ pub(crate) fn type_check<'mir, 'tcx>(\n                     )\n                     .unwrap();\n                     let mut hidden_type = infcx.resolve_vars_if_possible(decl.hidden_type);\n-                    // Check that RPITs are only constrained in their outermost\n-                    // function, otherwise report a mismatched types error.\n-                    if let hir::Node::Item(hir::Item {\n-                        kind:\n-                            hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n-                                origin:\n-                                    hir::OpaqueTyOrigin::AsyncFn(parent)\n-                                    | hir::OpaqueTyOrigin::FnReturn(parent),\n-                                ..\n-                            }),\n-                        ..\n-                    }) = infcx.tcx.hir().get_by_def_id(opaque_type_key.def_id.expect_local()) &&\n-                        parent.to_def_id() != body.source.def_id()\n-                    {\n-                        infcx\n-                            .report_mismatched_types(\n-                                &ObligationCause::misc(\n-                                    hidden_type.span,\n-                                    infcx.tcx.hir().local_def_id_to_hir_id(\n-                                        body.source.def_id().expect_local(),\n-                                    ),\n-                                ),\n-                                infcx.tcx.mk_opaque(opaque_type_key.def_id, opaque_type_key.substs),\n-                                hidden_type.ty,\n-                                ty::error::TypeError::Mismatch,\n-                            )\n-                            .emit();\n-                    }\n                     trace!(\n                         \"finalized opaque type {:?} to {:#?}\",\n                         opaque_type_key,"}]}