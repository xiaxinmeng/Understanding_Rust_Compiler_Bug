{"sha": "10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZDY1NWJiNDc0YzI0MzdlMzhlMjkyNmZjM2Y0ZDc5MmJkN2Y3ZTk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-26T07:39:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-26T07:39:01Z"}, "message": "Rollup merge of #73297 - ehuss:tool-warnings, r=Mark-Simulacrum\n\nSupport configurable deny-warnings for all in-tree crates.\n\nThis removes the hard-coded `deny(warnings)` on all in-tree tools, and allows it to be configured from the config.  This is just a personal preference, as I find `deny(warnings)` frustrating during development or doing small tests.\n\nThis also fixes some regressions in terms of warning handling.  Warnings used to be dependent on `SourceType`, but in #64316 it was changed to be based on `Mode`. This means tools like rustdoc no longer used the same settings as the rest of the tree. It also made `SourceType` useless since the only thing it was used for was warnings. I think it would be better for everything in the tree to use the same settings.\n\nFixes #64523", "tree": {"sha": "860895555877490544645d5d05dec73177277704", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/860895555877490544645d5d05dec73177277704"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe9aYWCRBK7hj4Ov3rIwAAdHIIAGAHfzHJfMHvp0kSaan06mqz\ncX5S6MsormnlBDVcXp22UKcrZXgXLOqzV6o3w+vo4HvVPQQYfVcsFvbgmgeVRip5\n04ggMem3AzCi64TuEwGFL54gmVWNVxg6zv3AZ2K484IUBu0Y2nJnFPdgaAYvB8vk\nS8mj04Or2W1oUSe2HHZkS+hXVOFsjUzAr4M/5AnM3fq/xljmZoG8F9Tl5X0fUauH\nfVNIdFx5qAWlNV1MhX1FQ6msGvNnD6AHPnhT1lvki0sPG9Eoaz/aNvzwPxBqAe75\nN/BsRqoNugktfIX4hyjF6ehtaQbxFFEbeWPY2EiLuQIHKpRdms+7F1FuGFBgH6s=\n=ZBoO\n-----END PGP SIGNATURE-----\n", "payload": "tree 860895555877490544645d5d05dec73177277704\nparent 2aee60897fc85c575ae5597861a9b40c6cdcab74\nparent 75983e137eeae5e9b210c2e97e6239bf888d9620\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593157141 -0700\ncommitter GitHub <noreply@github.com> 1593157141 -0700\n\nRollup merge of #73297 - ehuss:tool-warnings, r=Mark-Simulacrum\n\nSupport configurable deny-warnings for all in-tree crates.\n\nThis removes the hard-coded `deny(warnings)` on all in-tree tools, and allows it to be configured from the config.  This is just a personal preference, as I find `deny(warnings)` frustrating during development or doing small tests.\n\nThis also fixes some regressions in terms of warning handling.  Warnings used to be dependent on `SourceType`, but in #64316 it was changed to be based on `Mode`. This means tools like rustdoc no longer used the same settings as the rest of the tree. It also made `SourceType` useless since the only thing it was used for was warnings. I think it would be better for everything in the tree to use the same settings.\n\nFixes #64523\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "html_url": "https://github.com/rust-lang/rust/commit/10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aee60897fc85c575ae5597861a9b40c6cdcab74", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aee60897fc85c575ae5597861a9b40c6cdcab74", "html_url": "https://github.com/rust-lang/rust/commit/2aee60897fc85c575ae5597861a9b40c6cdcab74"}, {"sha": "75983e137eeae5e9b210c2e97e6239bf888d9620", "url": "https://api.github.com/repos/rust-lang/rust/commits/75983e137eeae5e9b210c2e97e6239bf888d9620", "html_url": "https://github.com/rust-lang/rust/commit/75983e137eeae5e9b210c2e97e6239bf888d9620"}], "stats": {"total": 182, "additions": 100, "deletions": 82}, "files": [{"sha": "0735ba8869addbb283e5d8d18cc54fef0cfd1ec4", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -23,7 +23,7 @@ use crate::install;\n use crate::native;\n use crate::run;\n use crate::test;\n-use crate::tool;\n+use crate::tool::{self, SourceType};\n use crate::util::{self, add_dylib_path, add_link_lib_path, exe, libdir};\n use crate::{Build, DocTests, GitRepo, Mode};\n \n@@ -759,6 +759,7 @@ impl<'a> Builder<'a> {\n         &self,\n         compiler: Compiler,\n         mode: Mode,\n+        source_type: SourceType,\n         target: Interned<String>,\n         cmd: &str,\n     ) -> Cargo {\n@@ -1125,7 +1126,7 @@ impl<'a> Builder<'a> {\n \n         cargo.env(\"RUSTC_VERBOSE\", self.verbosity.to_string());\n \n-        if !mode.is_tool() {\n+        if source_type == SourceType::InTree {\n             // When extending this list, add the new lints to the RUSTFLAGS of the\n             // build_bootstrap function of src/bootstrap/bootstrap.py as well as\n             // some code doesn't go through this `rustc` wrapper."}, {"sha": "0d38d2eebe79390fefb2eae22ca674574f0f136f", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -44,7 +44,13 @@ impl Step for Std {\n         let target = self.target;\n         let compiler = builder.compiler(0, builder.config.build);\n \n-        let mut cargo = builder.cargo(compiler, Mode::Std, target, cargo_subcommand(builder.kind));\n+        let mut cargo = builder.cargo(\n+            compiler,\n+            Mode::Std,\n+            SourceType::InTree,\n+            target,\n+            cargo_subcommand(builder.kind),\n+        );\n         std_cargo(builder, target, compiler.stage, &mut cargo);\n \n         builder.info(&format!(\"Checking std artifacts ({} -> {})\", &compiler.host, target));\n@@ -92,8 +98,13 @@ impl Step for Rustc {\n \n         builder.ensure(Std { target });\n \n-        let mut cargo =\n-            builder.cargo(compiler, Mode::Rustc, target, cargo_subcommand(builder.kind));\n+        let mut cargo = builder.cargo(\n+            compiler,\n+            Mode::Rustc,\n+            SourceType::InTree,\n+            target,\n+            cargo_subcommand(builder.kind),\n+        );\n         rustc_cargo(builder, &mut cargo, target);\n \n         builder.info(&format!(\"Checking compiler artifacts ({} -> {})\", &compiler.host, target));\n@@ -113,7 +124,7 @@ impl Step for Rustc {\n }\n \n macro_rules! tool_check_step {\n-    ($name:ident, $path:expr) => {\n+    ($name:ident, $path:expr, $source_type:expr) => {\n         #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n         pub struct $name {\n             pub target: Interned<String>,\n@@ -145,7 +156,7 @@ macro_rules! tool_check_step {\n                     target,\n                     cargo_subcommand(builder.kind),\n                     $path,\n-                    SourceType::InTree,\n+                    $source_type,\n                     &[],\n                 );\n \n@@ -184,8 +195,12 @@ macro_rules! tool_check_step {\n     };\n }\n \n-tool_check_step!(Rustdoc, \"src/tools/rustdoc\");\n-tool_check_step!(Clippy, \"src/tools/clippy\");\n+tool_check_step!(Rustdoc, \"src/tools/rustdoc\", SourceType::InTree);\n+// Clippy is a hybrid. It is an external tool, but uses a git subtree instead\n+// of a submodule. Since the SourceType only drives the deny-warnings\n+// behavior, treat it as in-tree so that any new warnings in clippy will be\n+// rejected.\n+tool_check_step!(Clippy, \"src/tools/clippy\", SourceType::InTree);\n \n /// Cargo's output path for the standard library in a given stage, compiled\n /// by a particular compiler for the specified target."}, {"sha": "0208dc8ba5eb646dfed58352d71479f7510bb00b", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -20,14 +20,14 @@ use filetime::FileTime;\n use serde::Deserialize;\n \n use crate::builder::Cargo;\n+use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n+use crate::cache::{Interned, INTERNER};\n use crate::dist;\n use crate::native;\n+use crate::tool::SourceType;\n use crate::util::{exe, is_dylib, symlink_dir};\n use crate::{Compiler, DependencyType, GitRepo, Mode};\n \n-use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n-use crate::cache::{Interned, INTERNER};\n-\n #[derive(Debug, PartialOrd, Ord, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Std {\n     pub target: Interned<String>,\n@@ -87,7 +87,7 @@ impl Step for Std {\n         target_deps.extend(copy_third_party_objects(builder, &compiler, target));\n         target_deps.extend(copy_self_contained_objects(builder, &compiler, target));\n \n-        let mut cargo = builder.cargo(compiler, Mode::Std, target, \"build\");\n+        let mut cargo = builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"build\");\n         std_cargo(builder, target, compiler.stage, &mut cargo);\n \n         builder.info(&format!(\n@@ -513,7 +513,7 @@ impl Step for Rustc {\n             target: builder.config.build,\n         });\n \n-        let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"build\");\n+        let mut cargo = builder.cargo(compiler, Mode::Rustc, SourceType::InTree, target, \"build\");\n         rustc_cargo(builder, &mut cargo, target);\n \n         builder.info(&format!("}, {"sha": "8b76158f9e5645d7e4dba8a31425c70927411dc4", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -435,7 +435,8 @@ impl Step for Std {\n         t!(fs::copy(builder.src.join(\"src/doc/rust.css\"), out.join(\"rust.css\")));\n \n         let run_cargo_rustdoc_for = |package: &str| {\n-            let mut cargo = builder.cargo(compiler, Mode::Std, target, \"rustdoc\");\n+            let mut cargo =\n+                builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"rustdoc\");\n             compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n \n             // Keep a whitelist so we do not build internal stdlib crates, these will be\n@@ -534,7 +535,7 @@ impl Step for Rustc {\n         t!(symlink_dir_force(&builder.config, &out, &out_dir));\n \n         // Build cargo command.\n-        let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"doc\");\n+        let mut cargo = builder.cargo(compiler, Mode::Rustc, SourceType::InTree, target, \"doc\");\n         cargo.env(\n             \"RUSTDOCFLAGS\",\n             \"--document-private-items \\"}, {"sha": "5728b9d24de99a8738fef482ada7c28689d7f23a", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -301,16 +301,21 @@ pub enum Mode {\n     /// Build codegen libraries, placing output in the \"stageN-codegen\" directory\n     Codegen,\n \n-    /// Build some tools, placing output in the \"stageN-tools\" directory. The\n-    /// \"other\" here is for miscellaneous sets of tools that are built using the\n-    /// bootstrap compiler in its entirety (target libraries and all).\n-    /// Typically these tools compile with stable Rust.\n+    /// Build a tool, placing output in the \"stage0-bootstrap-tools\"\n+    /// directory. This is for miscellaneous sets of tools that are built\n+    /// using the bootstrap stage0 compiler in its entirety (target libraries\n+    /// and all). Typically these tools compile with stable Rust.\n     ToolBootstrap,\n \n-    /// Compile a tool which uses all libraries we compile (up to rustc).\n-    /// Doesn't use the stage0 compiler libraries like \"other\", and includes\n-    /// tools like rustdoc, cargo, rls, etc.\n+    /// Build a tool which uses the locally built std, placing output in the\n+    /// \"stageN-tools\" directory. Its usage is quite rare, mainly used by\n+    /// compiletest which needs libtest.\n     ToolStd,\n+\n+    /// Build a tool which uses the locally built rustc and the target std,\n+    /// placing the output in the \"stageN-tools\" directory. This is used for\n+    /// anything that needs a fully functional rustc, such as rustdoc, clippy,\n+    /// cargo, rls, rustfmt, miri, etc.\n     ToolRustc,\n }\n "}, {"sha": "12ab6b1636cc17aa23e9be5e4c0a4c8d032ef5b1", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -367,7 +367,8 @@ impl Step for Miri {\n             extra_features: Vec::new(),\n         });\n         if let (Some(miri), Some(_cargo_miri)) = (miri, cargo_miri) {\n-            let mut cargo = builder.cargo(compiler, Mode::ToolRustc, host, \"install\");\n+            let mut cargo =\n+                builder.cargo(compiler, Mode::ToolRustc, SourceType::Submodule, host, \"install\");\n             cargo.arg(\"xargo\");\n             // Configure `cargo install` path. cargo adds a `bin/`.\n             cargo.env(\"CARGO_INSTALL_ROOT\", &builder.out);\n@@ -1696,7 +1697,8 @@ impl Step for Crate {\n         // we're working with automatically.\n         let compiler = builder.compiler_for(compiler.stage, compiler.host, target);\n \n-        let mut cargo = builder.cargo(compiler, mode, target, test_kind.subcommand());\n+        let mut cargo =\n+            builder.cargo(compiler, mode, SourceType::InTree, target, test_kind.subcommand());\n         match mode {\n             Mode::Std => {\n                 compile::std_cargo(builder, target, compiler.stage, &mut cargo);"}, {"sha": "0055dee6092043e8634dbac630fa0291fd6fb5e2", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -16,7 +16,7 @@ use crate::util::{add_dylib_path, exe, CiEnv};\n use crate::Compiler;\n use crate::Mode;\n \n-#[derive(Debug, Clone, Hash, PartialEq, Eq)]\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub enum SourceType {\n     InTree,\n     Submodule,\n@@ -226,14 +226,10 @@ pub fn prepare_tool_cargo(\n     source_type: SourceType,\n     extra_features: &[String],\n ) -> CargoCommand {\n-    let mut cargo = builder.cargo(compiler, mode, target, command);\n+    let mut cargo = builder.cargo(compiler, mode, source_type, target, command);\n     let dir = builder.src.join(path);\n     cargo.arg(\"--manifest-path\").arg(dir.join(\"Cargo.toml\"));\n \n-    if source_type == SourceType::Submodule {\n-        cargo.env(\"RUSTC_EXTERNAL_TOOL\", \"1\");\n-    }\n-\n     let mut features = extra_features.to_vec();\n     if builder.build.config.cargo_native_static {\n         if path.ends_with(\"cargo\")\n@@ -596,6 +592,7 @@ macro_rules! tool_extended {\n        $path:expr,\n        $tool_name:expr,\n        stable = $stable:expr,\n+       $(in_tree = $in_tree:expr,)*\n        $extra_deps:block;)+) => {\n         $(\n             #[derive(Debug, Clone, Hash, PartialEq, Eq)]\n@@ -647,7 +644,11 @@ macro_rules! tool_extended {\n                     path: $path,\n                     extra_features: $sel.extra_features,\n                     is_optional_tool: true,\n-                    source_type: SourceType::Submodule,\n+                    source_type: if false $(|| $in_tree)* {\n+                        SourceType::InTree\n+                    } else {\n+                        SourceType::Submodule\n+                    },\n                 })\n             }\n         }\n@@ -659,8 +660,8 @@ macro_rules! tool_extended {\n // to make `./x.py build <tool>` work.\n tool_extended!((self, builder),\n     Cargofmt, rustfmt, \"src/tools/rustfmt\", \"cargo-fmt\", stable=true, {};\n-    CargoClippy, clippy, \"src/tools/clippy\", \"cargo-clippy\", stable=true, {};\n-    Clippy, clippy, \"src/tools/clippy\", \"clippy-driver\", stable=true, {};\n+    CargoClippy, clippy, \"src/tools/clippy\", \"cargo-clippy\", stable=true, in_tree=true, {};\n+    Clippy, clippy, \"src/tools/clippy\", \"clippy-driver\", stable=true, in_tree=true, {};\n     Miri, miri, \"src/tools/miri\", \"miri\", stable=false, {};\n     CargoMiri, miri, \"src/tools/miri/cargo-miri\", \"cargo-miri\", stable=false, {};\n     Rls, rls, \"src/tools/rls\", \"rls\", stable=true, {"}, {"sha": "78628b198a3c3f73ab6740774273aecf31825f73", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -278,7 +278,7 @@ fn build_type_alias_type(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type>\n     type_.def_id().and_then(|did| build_ty(cx, did))\n }\n \n-pub fn build_ty(cx: &DocContext, did: DefId) -> Option<clean::Type> {\n+pub fn build_ty(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type> {\n     match cx.tcx.def_kind(did) {\n         DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::Const | DefKind::Static => {\n             Some(cx.tcx.type_of(did).clean(cx))"}, {"sha": "2d99b2fd134198b97b289b2e40fefb20e153b82b", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -328,7 +328,7 @@ pub fn strip_path(path: &Path) -> Path {\n     Path { global: path.global, res: path.res, segments }\n }\n \n-pub fn qpath_to_string(p: &hir::QPath) -> String {\n+pub fn qpath_to_string(p: &hir::QPath<'_>) -> String {\n     let segments = match *p {\n         hir::QPath::Resolved(_, ref path) => &path.segments,\n         hir::QPath::TypeRelative(_, ref segment) => return segment.ident.to_string(),\n@@ -417,7 +417,7 @@ impl ToSource for rustc_span::Span {\n     }\n }\n \n-pub fn name_from_pat(p: &hir::Pat) -> String {\n+pub fn name_from_pat(p: &hir::Pat<'_>) -> String {\n     use rustc_hir::*;\n     debug!(\"trying to get a name from pattern: {:?}\", p);\n "}, {"sha": "943729a74ab2d7e07040ac17df31eb459ff583c5", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -262,7 +262,7 @@ pub struct ProcMacro<'hir> {\n     pub whence: Span,\n }\n \n-pub fn struct_type_from_def(vdata: &hir::VariantData) -> StructType {\n+pub fn struct_type_from_def(vdata: &hir::VariantData<'_>) -> StructType {\n     match *vdata {\n         hir::VariantData::Struct(..) => Plain,\n         hir::VariantData::Tuple(..) => Tuple,"}, {"sha": "e9504aa3af123ee5082fe51fd63771d18197d32b", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -166,7 +166,7 @@ pub fn run(options: Options) -> Result<(), String> {\n }\n \n // Look for `#![doc(test(no_crate_inject))]`, used by crates in the std facade.\n-fn scrape_test_config(krate: &::rustc_hir::Crate) -> TestOptions {\n+fn scrape_test_config(krate: &::rustc_hir::Crate<'_>) -> TestOptions {\n     use rustc_ast_pretty::pprust;\n \n     let mut opts =\n@@ -973,7 +973,7 @@ impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx>\n         intravisit::NestedVisitorMap::All(self.map)\n     }\n \n-    fn visit_item(&mut self, item: &'hir hir::Item) {\n+    fn visit_item(&mut self, item: &'hir hir::Item<'_>) {\n         let name = if let hir::ItemKind::Impl { ref self_ty, .. } = item.kind {\n             rustc_hir_pretty::id_to_string(&self.map, self_ty.hir_id)\n         } else {\n@@ -985,42 +985,42 @@ impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx>\n         });\n     }\n \n-    fn visit_trait_item(&mut self, item: &'hir hir::TraitItem) {\n+    fn visit_trait_item(&mut self, item: &'hir hir::TraitItem<'_>) {\n         self.visit_testable(item.ident.to_string(), &item.attrs, item.hir_id, item.span, |this| {\n             intravisit::walk_trait_item(this, item);\n         });\n     }\n \n-    fn visit_impl_item(&mut self, item: &'hir hir::ImplItem) {\n+    fn visit_impl_item(&mut self, item: &'hir hir::ImplItem<'_>) {\n         self.visit_testable(item.ident.to_string(), &item.attrs, item.hir_id, item.span, |this| {\n             intravisit::walk_impl_item(this, item);\n         });\n     }\n \n-    fn visit_foreign_item(&mut self, item: &'hir hir::ForeignItem) {\n+    fn visit_foreign_item(&mut self, item: &'hir hir::ForeignItem<'_>) {\n         self.visit_testable(item.ident.to_string(), &item.attrs, item.hir_id, item.span, |this| {\n             intravisit::walk_foreign_item(this, item);\n         });\n     }\n \n     fn visit_variant(\n         &mut self,\n-        v: &'hir hir::Variant,\n-        g: &'hir hir::Generics,\n+        v: &'hir hir::Variant<'_>,\n+        g: &'hir hir::Generics<'_>,\n         item_id: hir::HirId,\n     ) {\n         self.visit_testable(v.ident.to_string(), &v.attrs, v.id, v.span, |this| {\n             intravisit::walk_variant(this, v, g, item_id);\n         });\n     }\n \n-    fn visit_struct_field(&mut self, f: &'hir hir::StructField) {\n+    fn visit_struct_field(&mut self, f: &'hir hir::StructField<'_>) {\n         self.visit_testable(f.ident.to_string(), &f.attrs, f.hir_id, f.span, |this| {\n             intravisit::walk_struct_field(this, f);\n         });\n     }\n \n-    fn visit_macro_def(&mut self, macro_def: &'hir hir::MacroDef) {\n+    fn visit_macro_def(&mut self, macro_def: &'hir hir::MacroDef<'_>) {\n         self.visit_testable(\n             macro_def.ident.to_string(),\n             &macro_def.attrs,"}, {"sha": "c18f417e4f8e1173ab61fcb969df0bd53ef83e8f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -62,7 +62,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         self.exact_paths.entry(did).or_insert_with(|| def_id_to_path(tcx, did));\n     }\n \n-    pub fn visit(mut self, krate: &'tcx hir::Crate) -> Module<'tcx> {\n+    pub fn visit(mut self, krate: &'tcx hir::Crate<'_>) -> Module<'tcx> {\n         let mut module = self.visit_mod_contents(\n             krate.item.span,\n             krate.item.attrs,\n@@ -84,10 +84,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     fn visit_variant_data(\n         &mut self,\n-        item: &'tcx hir::Item,\n+        item: &'tcx hir::Item<'_>,\n         name: Symbol,\n-        sd: &'tcx hir::VariantData,\n-        generics: &'tcx hir::Generics,\n+        sd: &'tcx hir::VariantData<'_>,\n+        generics: &'tcx hir::Generics<'_>,\n     ) -> Struct<'tcx> {\n         debug!(\"visiting struct\");\n         let struct_type = struct_type_from_def(&*sd);\n@@ -105,10 +105,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     fn visit_union_data(\n         &mut self,\n-        item: &'tcx hir::Item,\n+        item: &'tcx hir::Item<'_>,\n         name: Symbol,\n-        sd: &'tcx hir::VariantData,\n-        generics: &'tcx hir::Generics,\n+        sd: &'tcx hir::VariantData<'_>,\n+        generics: &'tcx hir::Generics<'_>,\n     ) -> Union<'tcx> {\n         debug!(\"visiting union\");\n         let struct_type = struct_type_from_def(&*sd);\n@@ -126,10 +126,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     fn visit_enum_def(\n         &mut self,\n-        it: &'tcx hir::Item,\n+        it: &'tcx hir::Item<'_>,\n         name: Symbol,\n-        def: &'tcx hir::EnumDef,\n-        generics: &'tcx hir::Generics,\n+        def: &'tcx hir::EnumDef<'_>,\n+        generics: &'tcx hir::Generics<'_>,\n     ) -> Enum<'tcx> {\n         debug!(\"visiting enum\");\n         Enum {\n@@ -156,11 +156,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     fn visit_fn(\n         &mut self,\n         om: &mut Module<'tcx>,\n-        item: &'tcx hir::Item,\n+        item: &'tcx hir::Item<'_>,\n         name: Symbol,\n-        decl: &'tcx hir::FnDecl,\n+        decl: &'tcx hir::FnDecl<'_>,\n         header: hir::FnHeader,\n-        generics: &'tcx hir::Generics,\n+        generics: &'tcx hir::Generics<'_>,\n         body: hir::BodyId,\n     ) {\n         debug!(\"visiting fn\");\n@@ -231,7 +231,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         &mut self,\n         span: Span,\n         attrs: &'tcx [ast::Attribute],\n-        vis: &'tcx hir::Visibility,\n+        vis: &'tcx hir::Visibility<'_>,\n         id: hir::HirId,\n         m: &'tcx hir::Mod<'tcx>,\n         name: Option<Symbol>,\n@@ -375,7 +375,12 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         ret\n     }\n \n-    fn visit_item(&mut self, item: &'tcx hir::Item, renamed: Option<Ident>, om: &mut Module<'tcx>) {\n+    fn visit_item(\n+        &mut self,\n+        item: &'tcx hir::Item<'_>,\n+        renamed: Option<Ident>,\n+        om: &mut Module<'tcx>,\n+    ) {\n         debug!(\"visiting item {:?}\", item);\n         let ident = renamed.unwrap_or(item.ident);\n \n@@ -587,7 +592,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     fn visit_foreign_item(\n         &mut self,\n-        item: &'tcx hir::ForeignItem,\n+        item: &'tcx hir::ForeignItem<'_>,\n         renamed: Option<Ident>,\n         om: &mut Module<'tcx>,\n     ) {\n@@ -607,7 +612,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     }\n \n     // Convert each `exported_macro` into a doc item.\n-    fn visit_local_macro(&self, def: &'tcx hir::MacroDef, renamed: Option<Symbol>) -> Macro<'tcx> {\n+    fn visit_local_macro(\n+        &self,\n+        def: &'tcx hir::MacroDef<'_>,\n+        renamed: Option<Symbol>,\n+    ) -> Macro<'tcx> {\n         debug!(\"visit_local_macro: {}\", def.ident);\n         let tts = def.ast.body.inner_tokens().trees().collect::<Vec<_>>();\n         // Extract the spans of all matchers. They represent the \"interface\" of the macro."}, {"sha": "614e25589601e8664f613640ed93100b2663bf68", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -4,8 +4,6 @@\n //! via `x.py dist hash-and-sign`; the cmdline arguments are set up\n //! by rustbuild (in `src/bootstrap/dist.rs`).\n \n-#![deny(warnings)]\n-\n use serde::Serialize;\n \n use std::collections::BTreeMap;"}, {"sha": "ecaeda68695a703737aa9608861305bcbc2ba783", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -1,5 +1,3 @@\n-#![deny(warnings)]\n-\n use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};"}, {"sha": "2aea4d22700f396782b28218100140ccdfb5ae03", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -1,5 +1,4 @@\n #![crate_name = \"compiletest\"]\n-#![deny(warnings)]\n // The `test` crate is the only unstable feature\n // allowed here, just to share similar code.\n #![feature(test)]"}, {"sha": "097fb1f985a746e42ad6eec1f5acbcf715994e69", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -1,5 +1,4 @@\n #![feature(rustc_private)]\n-#![deny(warnings)]\n \n extern crate env_logger;\n extern crate rustc_ast;"}, {"sha": "d8dad8fc789e931ed24cb1c29eaa656609166fd4", "filename": "src/tools/expand-yaml-anchors/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -165,7 +165,7 @@ struct StrError(String);\n impl Error for StrError {}\n \n impl std::fmt::Display for StrError {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(&self.0, f)\n     }\n }\n@@ -177,7 +177,7 @@ struct WithContext {\n }\n \n impl std::fmt::Display for WithContext {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         write!(f, \"{}\", self.context)\n     }\n }"}, {"sha": "9e4e2c433fbedb9782adea84b1882ca21d225b5f", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -14,8 +14,6 @@\n //! A few whitelisted exceptions are allowed as there's known bugs in rustdoc,\n //! but this should catch the majority of \"broken link\" cases.\n \n-#![deny(warnings)]\n-\n use std::collections::hash_map::Entry;\n use std::collections::{HashMap, HashSet};\n use std::env;"}, {"sha": "6245b76fd6e845108a9eb7f89d41a8ee3206a81b", "filename": "src/tools/remote-test-client/src/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -5,8 +5,6 @@\n //! Here is also where we bake in the support to spawn the QEMU emulator as\n //! well.\n \n-#![deny(warnings)]\n-\n use std::env;\n use std::fs::{self, File};\n use std::io::prelude::*;"}, {"sha": "d92758eb7474cda8ec9f3db0cf69f78cfe233235", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -10,8 +10,6 @@\n //! themselves having support libraries. All data over the TCP sockets is in a\n //! basically custom format suiting our needs.\n \n-#![deny(warnings)]\n-\n #[cfg(not(windows))]\n use std::fs::Permissions;\n #[cfg(not(windows))]"}, {"sha": "2d105c7f33a2b25cb3ee5637883469fb0041b7eb", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -4,8 +4,6 @@\n //! etc. This is run by default on `./x.py test` and as part of the auto\n //! builders. The tidy checks can be executed with `./x.py test tidy`.\n \n-#![deny(warnings)]\n-\n use tidy::*;\n \n use std::env;"}, {"sha": "aa24881ac6bd75ea2b176f9180f65e26a5c9bd39", "filename": "src/tools/unstable-book-gen/src/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d655bb474c2437e38e2926fc3f4d792bd7f7e9/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs?ref=10d655bb474c2437e38e2926fc3f4d792bd7f7e9", "patch": "@@ -1,7 +1,5 @@\n //! Auto-generate stub docs for the unstable book\n \n-#![deny(warnings)]\n-\n use std::collections::BTreeSet;\n use std::env;\n use std::fs::{self, File};"}]}