{"sha": "e3c4ec74d7f0661fdcab30566c2065ecafb66ecb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYzRlYzc0ZDdmMDY2MWZkY2FiMzA1NjZjMjA2NWVjYWZiNjZlY2I=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-09-23T20:30:29Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-09-23T20:30:29Z"}, "message": "Rust upgrade to rustc 1.22.0-nightly (14039a42a 2017-09-22)", "tree": {"sha": "52ef17423ce77b6478db37a2e89db49cfac9f023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52ef17423ce77b6478db37a2e89db49cfac9f023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3c4ec74d7f0661fdcab30566c2065ecafb66ecb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3c4ec74d7f0661fdcab30566c2065ecafb66ecb", "html_url": "https://github.com/rust-lang/rust/commit/e3c4ec74d7f0661fdcab30566c2065ecafb66ecb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3c4ec74d7f0661fdcab30566c2065ecafb66ecb/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3df3bc68177e392ebc8876c62760ec79419ead2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3df3bc68177e392ebc8876c62760ec79419ead2", "html_url": "https://github.com/rust-lang/rust/commit/c3df3bc68177e392ebc8876c62760ec79419ead2"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "5cbb854be923dbc6458aeede43014f1fc27d811a", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e3c4ec74d7f0661fdcab30566c2065ecafb66ecb/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c4ec74d7f0661fdcab30566c2065ecafb66ecb/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=e3c4ec74d7f0661fdcab30566c2065ecafb66ecb", "patch": "@@ -113,7 +113,7 @@ fn check_fn_inner<'a, 'tcx>(\n                     .parameters\n                     .lifetimes;\n                 for bound in bounds {\n-                    if bound.name != \"'static\" && !bound.is_elided() {\n+                    if bound.name.name() != \"'static\" && !bound.is_elided() {\n                         return;\n                     }\n                     bounds_lts.push(bound);\n@@ -225,7 +225,7 @@ fn allowed_lts_from(named_lts: &[LifetimeDef]) -> HashSet<RefLt> {\n     let mut allowed_lts = HashSet::new();\n     for lt in named_lts {\n         if lt.bounds.is_empty() {\n-            allowed_lts.insert(RefLt::Named(lt.lifetime.name));\n+            allowed_lts.insert(RefLt::Named(lt.lifetime.name.name()));\n         }\n     }\n     allowed_lts.insert(RefLt::Unnamed);\n@@ -235,8 +235,8 @@ fn allowed_lts_from(named_lts: &[LifetimeDef]) -> HashSet<RefLt> {\n \n fn lts_from_bounds<'a, T: Iterator<Item = &'a Lifetime>>(mut vec: Vec<RefLt>, bounds_lts: T) -> Vec<RefLt> {\n     for lt in bounds_lts {\n-        if lt.name != \"'static\" {\n-            vec.push(RefLt::Named(lt.name));\n+        if lt.name.name() != \"'static\" {\n+            vec.push(RefLt::Named(lt.name.name()));\n         }\n     }\n \n@@ -266,12 +266,12 @@ impl<'v, 't> RefVisitor<'v, 't> {\n \n     fn record(&mut self, lifetime: &Option<Lifetime>) {\n         if let Some(ref lt) = *lifetime {\n-            if lt.name == \"'static\" {\n+            if lt.name.name() == \"'static\" {\n                 self.lts.push(RefLt::Static);\n             } else if lt.is_elided() {\n                 self.lts.push(RefLt::Unnamed);\n             } else {\n-                self.lts.push(RefLt::Named(lt.name));\n+                self.lts.push(RefLt::Named(lt.name.name()));\n             }\n         } else {\n             self.lts.push(RefLt::Unnamed);\n@@ -396,7 +396,7 @@ struct LifetimeChecker {\n impl<'tcx> Visitor<'tcx> for LifetimeChecker {\n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n-        self.map.remove(&lifetime.name);\n+        self.map.remove(&lifetime.name.name());\n     }\n \n     fn visit_lifetime_def(&mut self, _: &'tcx LifetimeDef) {\n@@ -415,7 +415,7 @@ fn report_extra_lifetimes<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, func: &'tcx\n     let hs = generics\n         .lifetimes\n         .iter()\n-        .map(|lt| (lt.lifetime.name, lt.lifetime.span))\n+        .map(|lt| (lt.lifetime.name.name(), lt.lifetime.span))\n         .collect();\n     let mut checker = LifetimeChecker { map: hs };\n \n@@ -434,7 +434,7 @@ struct BodyLifetimeChecker {\n impl<'tcx> Visitor<'tcx> for BodyLifetimeChecker {\n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n-        if lifetime.name != keywords::Invalid.name() && lifetime.name != \"'static\" {\n+        if lifetime.name.name() != keywords::Invalid.name() && lifetime.name.name() != \"'static\" {\n             self.lifetimes_used_in_body = true;\n         }\n     }"}, {"sha": "90f1e87796d366b86e209e222480c571a5059d9e", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3c4ec74d7f0661fdcab30566c2065ecafb66ecb/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c4ec74d7f0661fdcab30566c2065ecafb66ecb/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=e3c4ec74d7f0661fdcab30566c2065ecafb66ecb", "patch": "@@ -223,7 +223,7 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n                         let ltopt = if lt.is_elided() {\n                             \"\".to_owned()\n                         } else {\n-                            format!(\"{} \", lt.name.as_str())\n+                            format!(\"{} \", lt.name.name().as_str())\n                         };\n                         let mutopt = if *mutbl == Mutability::MutMutable {\n                             \"mut \""}]}