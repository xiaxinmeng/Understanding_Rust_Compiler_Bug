{"sha": "7b59557dcda15a352f9515faac32d9acb85f59bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNTk1NTdkY2RhMTVhMzUyZjk1MTVmYWFjMzJkOWFjYjg1ZjU5YmM=", "commit": {"author": {"name": "Hidehito Yabuuchi", "email": "hdht.ybuc@gmail.com", "date": "2018-03-05T05:31:37Z"}, "committer": {"name": "Hidehito Yabuuchi", "email": "hdht.ybuc@gmail.com", "date": "2018-03-05T05:31:37Z"}, "message": "Don't lint range syntax with var name `start` and `end`", "tree": {"sha": "a34f86a22a956acce71454ed29875dd37ad1a98c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a34f86a22a956acce71454ed29875dd37ad1a98c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b59557dcda15a352f9515faac32d9acb85f59bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b59557dcda15a352f9515faac32d9acb85f59bc", "html_url": "https://github.com/rust-lang/rust/commit/7b59557dcda15a352f9515faac32d9acb85f59bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b59557dcda15a352f9515faac32d9acb85f59bc/comments", "author": {"login": "ordovicia", "id": 8240952, "node_id": "MDQ6VXNlcjgyNDA5NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/8240952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ordovicia", "html_url": "https://github.com/ordovicia", "followers_url": "https://api.github.com/users/ordovicia/followers", "following_url": "https://api.github.com/users/ordovicia/following{/other_user}", "gists_url": "https://api.github.com/users/ordovicia/gists{/gist_id}", "starred_url": "https://api.github.com/users/ordovicia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ordovicia/subscriptions", "organizations_url": "https://api.github.com/users/ordovicia/orgs", "repos_url": "https://api.github.com/users/ordovicia/repos", "events_url": "https://api.github.com/users/ordovicia/events{/privacy}", "received_events_url": "https://api.github.com/users/ordovicia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ordovicia", "id": 8240952, "node_id": "MDQ6VXNlcjgyNDA5NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/8240952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ordovicia", "html_url": "https://github.com/ordovicia", "followers_url": "https://api.github.com/users/ordovicia/followers", "following_url": "https://api.github.com/users/ordovicia/following{/other_user}", "gists_url": "https://api.github.com/users/ordovicia/gists{/gist_id}", "starred_url": "https://api.github.com/users/ordovicia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ordovicia/subscriptions", "organizations_url": "https://api.github.com/users/ordovicia/orgs", "repos_url": "https://api.github.com/users/ordovicia/repos", "events_url": "https://api.github.com/users/ordovicia/events{/privacy}", "received_events_url": "https://api.github.com/users/ordovicia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5f2d62c46ca9d0aa5d2cb85158fc0e64811c090", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f2d62c46ca9d0aa5d2cb85158fc0e64811c090", "html_url": "https://github.com/rust-lang/rust/commit/e5f2d62c46ca9d0aa5d2cb85158fc0e64811c090"}], "stats": {"total": 60, "additions": 54, "deletions": 6}, "files": [{"sha": "587454f64ebe9e330e2c89e9dde983323831be94", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7b59557dcda15a352f9515faac32d9acb85f59bc/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b59557dcda15a352f9515faac32d9acb85f59bc/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=7b59557dcda15a352f9515faac32d9acb85f59bc", "patch": "@@ -1,6 +1,8 @@\n+use syntax::ast::Name;\n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::{span_lint_and_sugg, match_var};\n+use utils::{match_qpath, match_var, span_lint_and_sugg};\n+use utils::paths;\n \n /// **What it does:** Checks for fields in struct literals where shorthands\n /// could be used.\n@@ -36,10 +38,14 @@ impl LintPass for RedundantFieldNames {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantFieldNames {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if let ExprStruct(_, ref fields, _) = expr.node {\n+        if let ExprStruct(ref path, ref fields, _) = expr.node {\n             for field in fields {\n                 let name = field.name.node;\n \n+                if is_range_struct_field(path, &name) {\n+                    continue;\n+                }\n+\n                 if match_var(&field.expr, name) && !field.is_shorthand {\n                     span_lint_and_sugg (\n                         cx,\n@@ -54,3 +60,27 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantFieldNames {\n         }\n     }\n }\n+\n+/// ```rust\n+/// let start = 0;\n+/// let _ = start..;\n+///\n+/// let end = 0;\n+/// let _ = ..end;\n+///\n+/// let _ = start..end;\n+/// ```\n+fn is_range_struct_field(path: &QPath, name: &Name) -> bool {\n+    match name.as_str().as_ref() {\n+        \"start\" => {\n+            match_qpath(path, &paths::RANGE_STD) || match_qpath(path, &paths::RANGE_FROM_STD)\n+                || match_qpath(path, &paths::RANGE_INCLUSIVE_STD)\n+        },\n+        \"end\" => {\n+            match_qpath(path, &paths::RANGE_STD) || match_qpath(path, &paths::RANGE_TO_STD)\n+                || match_qpath(path, &paths::RANGE_INCLUSIVE_STD)\n+                || match_qpath(path, &paths::RANGE_TO_INCLUSIVE_STD)\n+        },\n+        _ => false,\n+    }\n+}"}, {"sha": "4ffd0e4cc62995c2a1e5464d42778ecc201f4a30", "filename": "tests/ui/redundant_field_names.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7b59557dcda15a352f9515faac32d9acb85f59bc/tests%2Fui%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b59557dcda15a352f9515faac32d9acb85f59bc/tests%2Fui%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.rs?ref=7b59557dcda15a352f9515faac32d9acb85f59bc", "patch": "@@ -1,5 +1,6 @@\n #![warn(redundant_field_names)]\n #![allow(unused_variables)]\n+#![feature(inclusive_range,inclusive_range_syntax)]\n \n mod foo {\n     pub const BAR: u8 = 0;\n@@ -27,4 +28,21 @@ fn main() {\n         buzz: fizz, //should be ok\n         foo: foo::BAR, //should be ok\n     };\n+\n+    // Range syntax\n+    let (start, end) = (0, 0);\n+\n+    let _ = start..;\n+    let _ = ..end;\n+    let _ = start..end;\n+\n+    let _ = ..=end;\n+    let _ = start..=end;\n+\n+    // TODO: the followings shoule be linted\n+    let _ = ::std::ops::RangeFrom { start: start };\n+    let _ = ::std::ops::RangeTo { end: end };\n+    let _ = ::std::ops::Range { start: start, end: end };\n+    let _ = ::std::ops::RangeInclusive { start: start, end: end };\n+    let _ = ::std::ops::RangeToInclusive { end: end };\n }"}, {"sha": "443f30a9f5089bf7d1bf6148f17abf8fca0de76b", "filename": "tests/ui/redundant_field_names.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b59557dcda15a352f9515faac32d9acb85f59bc/tests%2Fui%2Fredundant_field_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b59557dcda15a352f9515faac32d9acb85f59bc/tests%2Fui%2Fredundant_field_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.stderr?ref=7b59557dcda15a352f9515faac32d9acb85f59bc", "patch": "@@ -1,15 +1,15 @@\n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:23:9\n+  --> $DIR/redundant_field_names.rs:24:9\n    |\n-23 |         gender: gender,\n+24 |         gender: gender,\n    |         ^^^^^^^^^^^^^^ help: replace it with: `gender`\n    |\n    = note: `-D redundant-field-names` implied by `-D warnings`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:24:9\n+  --> $DIR/redundant_field_names.rs:25:9\n    |\n-24 |         age: age,\n+25 |         age: age,\n    |         ^^^^^^^^ help: replace it with: `age`\n \n error: aborting due to 2 previous errors"}]}