{"sha": "ceb25d125f98b82fe264e5b9d1b992f0766939a8", "node_id": "C_kwDOAAsO6NoAKGNlYjI1ZDEyNWY5OGI4MmZlMjY0ZTViOWQxYjk5MmYwNzY2OTM5YTg", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-26T01:12:06Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-26T03:41:58Z"}, "message": "Use less DRY in `cook_lexer_token`.\n\nThis is a case where a small amount of repetition results in code that\nis faster and easier to read.", "tree": {"sha": "82762dbf0a111aca4332aa62eefe194a03e7c3e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82762dbf0a111aca4332aa62eefe194a03e7c3e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceb25d125f98b82fe264e5b9d1b992f0766939a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceb25d125f98b82fe264e5b9d1b992f0766939a8", "html_url": "https://github.com/rust-lang/rust/commit/ceb25d125f98b82fe264e5b9d1b992f0766939a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceb25d125f98b82fe264e5b9d1b992f0766939a8/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa6bfaf04b258e3e23d3f7063de4f2d37845ddec", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa6bfaf04b258e3e23d3f7063de4f2d37845ddec", "html_url": "https://github.com/rust-lang/rust/commit/aa6bfaf04b258e3e23d3f7063de4f2d37845ddec"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "0f9d585230e2025b0878b5053668310c49f82d4a", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ceb25d125f98b82fe264e5b9d1b992f0766939a8/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb25d125f98b82fe264e5b9d1b992f0766939a8/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=ceb25d125f98b82fe264e5b9d1b992f0766939a8", "patch": "@@ -201,28 +201,28 @@ impl<'a> StringReader<'a> {\n                 self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)\n             }\n             rustc_lexer::TokenKind::Whitespace => return None,\n-            rustc_lexer::TokenKind::Ident\n-            | rustc_lexer::TokenKind::RawIdent\n-            | rustc_lexer::TokenKind::UnknownPrefix => {\n-                let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;\n-                let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;\n-                let mut ident_start = start;\n-                if is_raw_ident {\n-                    ident_start = ident_start + BytePos(2);\n-                }\n-                if is_unknown_prefix {\n-                    self.report_unknown_prefix(start);\n-                }\n-                let sym = nfc_normalize(self.str_from(ident_start));\n+            rustc_lexer::TokenKind::Ident => {\n+                let sym = nfc_normalize(self.str_from(start));\n                 let span = self.mk_sp(start, self.pos);\n                 self.sess.symbol_gallery.insert(sym, span);\n-                if is_raw_ident {\n-                    if !sym.can_be_raw() {\n-                        self.err_span(span, &format!(\"`{}` cannot be a raw identifier\", sym));\n-                    }\n-                    self.sess.raw_identifier_spans.borrow_mut().push(span);\n+                token::Ident(sym, false)\n+            }\n+            rustc_lexer::TokenKind::RawIdent => {\n+                let sym = nfc_normalize(self.str_from(start + BytePos(2)));\n+                let span = self.mk_sp(start, self.pos);\n+                self.sess.symbol_gallery.insert(sym, span);\n+                if !sym.can_be_raw() {\n+                    self.err_span(span, &format!(\"`{}` cannot be a raw identifier\", sym));\n                 }\n-                token::Ident(sym, is_raw_ident)\n+                self.sess.raw_identifier_spans.borrow_mut().push(span);\n+                token::Ident(sym, true)\n+            }\n+            rustc_lexer::TokenKind::UnknownPrefix => {\n+                self.report_unknown_prefix(start);\n+                let sym = nfc_normalize(self.str_from(start));\n+                let span = self.mk_sp(start, self.pos);\n+                self.sess.symbol_gallery.insert(sym, span);\n+                token::Ident(sym, false)\n             }\n             rustc_lexer::TokenKind::InvalidIdent\n                 // Do not recover an identifier with emoji if the codepoint is a confusable"}]}