{"sha": "e7fa081c18880a78c968a402367289a550bd5cb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZmEwODFjMTg4ODBhNzhjOTY4YTQwMjM2NzI4OWE1NTBiZDVjYjE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-24T20:53:09Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-25T21:27:43Z"}, "message": "rustdoc: Reduce ambiguity with clean::Type\n\nThe \"Unresolved\" variant could be completely removed becuase it turns out that\nthe interim state only very briefly lives.", "tree": {"sha": "00ecd334a847624b4807adddcf3ac74f93c7d68b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00ecd334a847624b4807adddcf3ac74f93c7d68b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7fa081c18880a78c968a402367289a550bd5cb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7fa081c18880a78c968a402367289a550bd5cb1", "html_url": "https://github.com/rust-lang/rust/commit/e7fa081c18880a78c968a402367289a550bd5cb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7fa081c18880a78c968a402367289a550bd5cb1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f648690234ddbf4a8f91b7997a13ce72a8b36958", "url": "https://api.github.com/repos/rust-lang/rust/commits/f648690234ddbf4a8f91b7997a13ce72a8b36958", "html_url": "https://github.com/rust-lang/rust/commit/f648690234ddbf4a8f91b7997a13ce72a8b36958"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "ae7cbf76bcc83f85c560bdd4aabd998e374dbe60", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e7fa081c18880a78c968a402367289a550bd5cb1/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fa081c18880a78c968a402367289a550bd5cb1/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=e7fa081c18880a78c968a402367289a550bd5cb1", "patch": "@@ -471,8 +471,7 @@ impl Clean<Item> for doctree::Trait {\n \n impl Clean<Type> for ast::trait_ref {\n     fn clean(&self) -> Type {\n-        let t = Unresolved(self.path.clean(), None, self.ref_id);\n-        resolve_type(&t)\n+        resolve_type(self.path.clean(), None, self.ref_id)\n     }\n }\n \n@@ -517,9 +516,6 @@ impl Clean<TraitMethod> for ast::trait_method {\n /// it does not preserve mutability or boxes.\n #[deriving(Clone, Encodable, Decodable)]\n pub enum Type {\n-    /// Most types start out as \"Unresolved\". It serves as an intermediate stage between cleaning\n-    /// and type resolution.\n-    Unresolved(Path, Option<~[TyParamBound]>, ast::NodeId),\n     /// structs/enums/traits (anything that'd be an ast::ty_path)\n     ResolvedPath { path: Path, typarams: Option<~[TyParamBound]>, id: ast::NodeId },\n     /// Reference to an item in an external crate (fully qualified path)\n@@ -558,25 +554,25 @@ impl Clean<Type> for ast::Ty {\n         debug!(\"cleaning type `%?`\", self);\n         let codemap = local_data::get(super::ctxtkey, |x| *x.unwrap()).sess.codemap;\n         debug!(\"span corresponds to `%s`\", codemap.span_to_str(self.span));\n-        let t = match self.node {\n+        match self.node {\n             ty_nil => Unit,\n-            ty_ptr(ref m) =>  RawPointer(m.mutbl.clean(), ~resolve_type(&m.ty.clean())),\n+            ty_ptr(ref m) => RawPointer(m.mutbl.clean(), ~m.ty.clean()),\n             ty_rptr(ref l, ref m) =>\n                 BorrowedRef {lifetime: l.clean(), mutability: m.mutbl.clean(),\n-                             type_: ~resolve_type(&m.ty.clean())},\n-            ty_box(ref m) => Managed(m.mutbl.clean(), ~resolve_type(&m.ty.clean())),\n-            ty_uniq(ref m) => Unique(~resolve_type(&m.ty.clean())),\n-            ty_vec(ref m) => Vector(~resolve_type(&m.ty.clean())),\n-            ty_fixed_length_vec(ref m, ref e) => FixedVector(~resolve_type(&m.ty.clean()),\n+                             type_: ~m.ty.clean()},\n+            ty_box(ref m) => Managed(m.mutbl.clean(), ~m.ty.clean()),\n+            ty_uniq(ref m) => Unique(~m.ty.clean()),\n+            ty_vec(ref m) => Vector(~m.ty.clean()),\n+            ty_fixed_length_vec(ref m, ref e) => FixedVector(~m.ty.clean(),\n                                                              e.span.to_src()),\n-            ty_tup(ref tys) => Tuple(tys.iter().map(|x| resolve_type(&x.clean())).collect()),\n-            ty_path(ref p, ref tpbs, id) => Unresolved(p.clean(), tpbs.clean(), id),\n+            ty_tup(ref tys) => Tuple(tys.iter().map(|x| x.clean()).collect()),\n+            ty_path(ref p, ref tpbs, id) =>\n+                resolve_type(p.clean(), tpbs.clean(), id),\n             ty_closure(ref c) => Closure(~c.clean()),\n             ty_bare_fn(ref barefn) => BareFunction(~barefn.clean()),\n             ty_bot => Bottom,\n             ref x => fail!(\"Unimplemented type %?\", x),\n-        };\n-        resolve_type(&t)\n+        }\n     }\n }\n \n@@ -1039,14 +1035,10 @@ fn remove_comment_tags(s: &str) -> ~str {\n }\n \n /// Given a Type, resolve it using the def_map\n-fn resolve_type(t: &Type) -> Type {\n+fn resolve_type(path: Path, tpbs: Option<~[TyParamBound]>,\n+                id: ast::NodeId) -> Type {\n     use syntax::ast::*;\n \n-    let (path, tpbs, id) = match t {\n-        &Unresolved(ref path, ref tbps, id) => (path, tbps, id),\n-        _ => return (*t).clone(),\n-    };\n-\n     let dm = local_data::get(super::ctxtkey, |x| *x.unwrap()).tycx.def_map;\n     debug!(\"searching for %? in defmap\", id);\n     let d = match dm.find(&id) {"}, {"sha": "4c83954f43c91a6b2762b9926901b892cdc094db", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7fa081c18880a78c968a402367289a550bd5cb1/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fa081c18880a78c968a402367289a550bd5cb1/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=e7fa081c18880a78c968a402367289a550bd5cb1", "patch": "@@ -11,6 +11,8 @@\n use std::num;\n use std::uint;\n \n+use syntax::ast;\n+\n use clean;\n use clean::Item;\n use plugins;"}]}