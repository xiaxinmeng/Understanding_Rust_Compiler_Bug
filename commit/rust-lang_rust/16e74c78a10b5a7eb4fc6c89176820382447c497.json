{"sha": "16e74c78a10b5a7eb4fc6c89176820382447c497", "node_id": "C_kwDOAAsO6NoAKDE2ZTc0Yzc4YTEwYjVhN2ViNGZjNmM4OTE3NjgyMDM4MjQ0N2M0OTc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-27T13:03:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-27T13:03:55Z"}, "message": "Rollup merge of #103255 - oli-obk:opaque_wrong_eq_relation, r=compiler-errors\n\nClean up hidden type registration\n\nwork on https://github.com/rust-lang/rust/issues/101186\n\nActually passing down the relation and using it instead of `eq` for the hidden type comparison has *no* effect whatsoever and allows for no further improvements at the call sites. I decided the increased complexity was not worth it and thus did not include that change in this PR.\n\nr? `@compiler-errors`", "tree": {"sha": "2cd0c5c1258f4d535d487fdf059d7f4a9fda141a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cd0c5c1258f4d535d487fdf059d7f4a9fda141a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16e74c78a10b5a7eb4fc6c89176820382447c497", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjWoG7CRBK7hj4Ov3rIwAAyfsIAFAjcXfBrGjxnNWNDQX7ONhu\n2SFk5ph8UORtbIeoEL5OXYjnYkrCI87bqFcRT98e8dugEw3TI6bT2AOasjXSHLSC\n7qAQotymjQXNjlrubO2ZHciZS35xdfPhXMvBPotk28wXS8GcbMhYhK00XEDWf8/5\nKHoR5RIqmBLrwTTpMVfmPP1Acc4vmlZCMoklwqv8ktvhVp2K3eIEeqBv0lPXmLY6\nEfekvqU91RIjCbUq1/7hzN+EhtQAyWvslPsW1659CiXhF4sWujSKvYaC+wPwjwaY\nn5JPwzhnnymZYN2PRHSAgsWyInq1AW13OlkiW0teKZH12999tT6i1dCKgX+mGvo=\n=mj7I\n-----END PGP SIGNATURE-----\n", "payload": "tree 2cd0c5c1258f4d535d487fdf059d7f4a9fda141a\nparent 6d43dfb7bb248e3068a97e24b00e85f511fde392\nparent de5517c3ae3c9ec007b49958c56be67247fa2713\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666875835 +0200\ncommitter GitHub <noreply@github.com> 1666875835 +0200\n\nRollup merge of #103255 - oli-obk:opaque_wrong_eq_relation, r=compiler-errors\n\nClean up hidden type registration\n\nwork on https://github.com/rust-lang/rust/issues/101186\n\nActually passing down the relation and using it instead of `eq` for the hidden type comparison has *no* effect whatsoever and allows for no further improvements at the call sites. I decided the increased complexity was not worth it and thus did not include that change in this PR.\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16e74c78a10b5a7eb4fc6c89176820382447c497", "html_url": "https://github.com/rust-lang/rust/commit/16e74c78a10b5a7eb4fc6c89176820382447c497", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16e74c78a10b5a7eb4fc6c89176820382447c497/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d43dfb7bb248e3068a97e24b00e85f511fde392", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d43dfb7bb248e3068a97e24b00e85f511fde392", "html_url": "https://github.com/rust-lang/rust/commit/6d43dfb7bb248e3068a97e24b00e85f511fde392"}, {"sha": "de5517c3ae3c9ec007b49958c56be67247fa2713", "url": "https://api.github.com/repos/rust-lang/rust/commits/de5517c3ae3c9ec007b49958c56be67247fa2713", "html_url": "https://github.com/rust-lang/rust/commit/de5517c3ae3c9ec007b49958c56be67247fa2713"}], "stats": {"total": 116, "additions": 41, "deletions": 75}, "files": [{"sha": "465f353aaa37f426bdc770213eadb5ea807abbba", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16e74c78a10b5a7eb4fc6c89176820382447c497/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e74c78a10b5a7eb4fc6c89176820382447c497/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=16e74c78a10b5a7eb4fc6c89176820382447c497", "patch": "@@ -263,13 +263,11 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n \n         // Require that the hidden type actually fulfills all the bounds of the opaque type, even without\n         // the bounds that the function supplies.\n-        match infcx.register_hidden_type(\n-            OpaqueTypeKey { def_id, substs: id_substs },\n-            ObligationCause::misc(instantiated_ty.span, body_id),\n-            param_env,\n-            definition_ty,\n-            origin,\n-        ) {\n+        let opaque_ty = self.tcx.mk_opaque(def_id.to_def_id(), id_substs);\n+        match infcx\n+            .at(&ObligationCause::misc(instantiated_ty.span, body_id), param_env)\n+            .eq(opaque_ty, definition_ty)\n+        {\n             Ok(infer_ok) => {\n                 for obligation in infer_ok.obligations {\n                     fulfillment_cx.register_predicate_obligation(&infcx, obligation);\n@@ -280,7 +278,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                     .err_ctxt()\n                     .report_mismatched_types(\n                         &ObligationCause::misc(instantiated_ty.span, body_id),\n-                        self.tcx.mk_opaque(def_id.to_def_id(), id_substs),\n+                        opaque_ty,\n                         definition_ty,\n                         err,\n                     )"}, {"sha": "ca249938d04051b7567b77434d4f24f2a1fc33fe", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/16e74c78a10b5a7eb4fc6c89176820382447c497/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e74c78a10b5a7eb4fc6c89176820382447c497/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=16e74c78a10b5a7eb4fc6c89176820382447c497", "patch": "@@ -1,6 +1,6 @@\n use rustc_infer::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRelatingDelegate};\n use rustc_infer::infer::NllRegionVariableOrigin;\n-use rustc_infer::traits::ObligationCause;\n+use rustc_infer::traits::PredicateObligations;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::TypeRelation;\n@@ -155,27 +155,16 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n         true\n     }\n \n-    fn register_opaque_type(\n+    fn register_opaque_type_obligations(\n         &mut self,\n-        a: Ty<'tcx>,\n-        b: Ty<'tcx>,\n-        a_is_expected: bool,\n+        obligations: PredicateObligations<'tcx>,\n     ) -> Result<(), TypeError<'tcx>> {\n-        let param_env = self.param_env();\n-        let span = self.span();\n-        let def_id = self.type_checker.body.source.def_id().expect_local();\n-        let body_id = self.type_checker.tcx().hir().local_def_id_to_hir_id(def_id);\n-        let cause = ObligationCause::misc(span, body_id);\n         self.type_checker\n             .fully_perform_op(\n                 self.locations,\n                 self.category,\n                 InstantiateOpaqueType {\n-                    obligations: self\n-                        .type_checker\n-                        .infcx\n-                        .handle_opaque_type(a, b, a_is_expected, &cause, param_env)?\n-                        .obligations,\n+                    obligations,\n                     // These fields are filled in during execution of the operation\n                     base_universe: None,\n                     region_constraints: None,"}, {"sha": "4d287988e33604a10d1ff6ff5f0d7c109bf71130", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/16e74c78a10b5a7eb4fc6c89176820382447c497/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e74c78a10b5a7eb4fc6c89176820382447c497/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=16e74c78a10b5a7eb4fc6c89176820382447c497", "patch": "@@ -16,8 +16,8 @@ use crate::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRelating\n use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n use crate::infer::{InferCtxt, InferOk, InferResult, NllRegionVariableOrigin};\n use crate::traits::query::{Fallible, NoSolution};\n-use crate::traits::TraitEngine;\n use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n+use crate::traits::{PredicateObligations, TraitEngine};\n use rustc_data_structures::captures::Captures;\n use rustc_index::vec::Idx;\n use rustc_index::vec::IndexVec;\n@@ -509,7 +509,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         for &(a, b) in &query_response.value.opaque_types {\n             let a = substitute_value(self.tcx, &result_subst, a);\n             let b = substitute_value(self.tcx, &result_subst, b);\n-            obligations.extend(self.handle_opaque_type(a, b, true, cause, param_env)?.obligations);\n+            obligations.extend(self.at(cause, param_env).eq(a, b)?.obligations);\n         }\n \n         Ok(InferOk { value: result_subst, obligations })\n@@ -741,17 +741,11 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n         true\n     }\n \n-    fn register_opaque_type(\n+    fn register_opaque_type_obligations(\n         &mut self,\n-        a: Ty<'tcx>,\n-        b: Ty<'tcx>,\n-        a_is_expected: bool,\n+        obligations: PredicateObligations<'tcx>,\n     ) -> Result<(), TypeError<'tcx>> {\n-        self.obligations.extend(\n-            self.infcx\n-                .handle_opaque_type(a, b, a_is_expected, &self.cause, self.param_env)?\n-                .obligations,\n-        );\n+        self.obligations.extend(obligations);\n         Ok(())\n     }\n }"}, {"sha": "600f94f095eace0056fc0af4292245a197946f0f", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/16e74c78a10b5a7eb4fc6c89176820382447c497/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e74c78a10b5a7eb4fc6c89176820382447c497/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=16e74c78a10b5a7eb4fc6c89176820382447c497", "patch": "@@ -25,7 +25,9 @@ use crate::infer::combine::ConstEquateRelation;\n use crate::infer::InferCtxt;\n use crate::infer::{ConstVarValue, ConstVariableValue};\n use crate::infer::{TypeVariableOrigin, TypeVariableOriginKind};\n+use crate::traits::PredicateObligation;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n@@ -91,11 +93,9 @@ pub trait TypeRelatingDelegate<'tcx> {\n     );\n \n     fn const_equate(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>);\n-    fn register_opaque_type(\n+    fn register_opaque_type_obligations(\n         &mut self,\n-        a: Ty<'tcx>,\n-        b: Ty<'tcx>,\n-        a_is_expected: bool,\n+        obligations: Vec<PredicateObligation<'tcx>>,\n     ) -> Result<(), TypeError<'tcx>>;\n \n     /// Creates a new universe index. Used when instantiating placeholders.\n@@ -414,7 +414,12 @@ where\n             (_, &ty::Opaque(..)) => (generalize(a, true)?, b),\n             _ => unreachable!(),\n         };\n-        self.delegate.register_opaque_type(a, b, true)?;\n+        let cause = ObligationCause::dummy_with_span(self.delegate.span());\n+        let obligations = self\n+            .infcx\n+            .handle_opaque_type(a, b, true, &cause, self.delegate.param_env())?\n+            .obligations;\n+        self.delegate.register_opaque_type_obligations(obligations)?;\n         trace!(a = ?a.kind(), b = ?b.kind(), \"opaque type instantiated\");\n         Ok(a)\n     }"}, {"sha": "a982f11f7187fa7703f46bf1eb5f81694479f272", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/16e74c78a10b5a7eb4fc6c89176820382447c497/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e74c78a10b5a7eb4fc6c89176820382447c497/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=16e74c78a10b5a7eb4fc6c89176820382447c497", "patch": "@@ -103,7 +103,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             return Ok(InferOk { value: (), obligations: vec![] });\n         }\n         let (a, b) = if a_is_expected { (a, b) } else { (b, a) };\n-        let process = |a: Ty<'tcx>, b: Ty<'tcx>| match *a.kind() {\n+        let process = |a: Ty<'tcx>, b: Ty<'tcx>, a_is_expected| match *a.kind() {\n             ty::Opaque(def_id, substs) if def_id.is_local() => {\n                 let def_id = def_id.expect_local();\n                 let origin = match self.defining_use_anchor {\n@@ -169,13 +169,14 @@ impl<'tcx> InferCtxt<'tcx> {\n                     param_env,\n                     b,\n                     origin,\n+                    a_is_expected,\n                 ))\n             }\n             _ => None,\n         };\n-        if let Some(res) = process(a, b) {\n+        if let Some(res) = process(a, b, true) {\n             res\n-        } else if let Some(res) = process(b, a) {\n+        } else if let Some(res) = process(b, a, false) {\n             res\n         } else {\n             let (a, b) = self.resolve_vars_if_possible((a, b));\n@@ -514,13 +515,14 @@ impl UseKind {\n \n impl<'tcx> InferCtxt<'tcx> {\n     #[instrument(skip(self), level = \"debug\")]\n-    pub fn register_hidden_type(\n+    fn register_hidden_type(\n         &self,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n         cause: ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         hidden_ty: Ty<'tcx>,\n         origin: hir::OpaqueTyOrigin,\n+        a_is_expected: bool,\n     ) -> InferResult<'tcx, ()> {\n         let tcx = self.tcx;\n         let OpaqueTypeKey { def_id, substs } = opaque_type_key;\n@@ -539,7 +541,8 @@ impl<'tcx> InferCtxt<'tcx> {\n             origin,\n         );\n         if let Some(prev) = prev {\n-            obligations = self.at(&cause, param_env).eq(prev, hidden_ty)?.obligations;\n+            obligations =\n+                self.at(&cause, param_env).eq_exp(a_is_expected, prev, hidden_ty)?.obligations;\n         }\n \n         let item_bounds = tcx.bound_explicit_item_bounds(def_id.to_def_id());"}, {"sha": "97354ba5d1bd1c2cf044988eaedf7cf536750423", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 8, "deletions": 31, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/16e74c78a10b5a7eb4fc6c89176820382447c497/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16e74c78a10b5a7eb4fc6c89176820382447c497/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=16e74c78a10b5a7eb4fc6c89176820382447c497", "patch": "@@ -2,9 +2,7 @@ use super::combine::{CombineFields, RelationDir};\n use super::SubregionOrigin;\n \n use crate::infer::combine::ConstEquateRelation;\n-use crate::infer::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::traits::Obligation;\n-use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::TyVar;\n@@ -130,39 +128,18 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n             (&ty::Opaque(did, ..), _) | (_, &ty::Opaque(did, ..))\n                 if self.fields.define_opaque_types && did.is_local() =>\n             {\n-                let mut generalize = |ty, ty_is_expected| {\n-                    let var = infcx.next_ty_var_id_in_universe(\n-                        TypeVariableOrigin {\n-                            kind: TypeVariableOriginKind::MiscVariable,\n-                            span: self.fields.trace.cause.span,\n-                        },\n-                        ty::UniverseIndex::ROOT,\n-                    );\n-                    self.fields.instantiate(ty, RelationDir::SubtypeOf, var, ty_is_expected)?;\n-                    Ok(infcx.tcx.mk_ty_var(var))\n-                };\n-                let (a, b) = if self.a_is_expected { (a, b) } else { (b, a) };\n-                let (ga, gb) = match (a.kind(), b.kind()) {\n-                    (&ty::Opaque(..), _) => (a, generalize(b, true)?),\n-                    (_, &ty::Opaque(..)) => (generalize(a, false)?, b),\n-                    _ => unreachable!(),\n-                };\n                 self.fields.obligations.extend(\n                     infcx\n-                        .handle_opaque_type(ga, gb, true, &self.fields.trace.cause, self.param_env())\n-                        // Don't leak any generalized type variables out of this\n-                        // subtyping relation in the case of a type error.\n-                        .map_err(|err| {\n-                            let (ga, gb) = self.fields.infcx.resolve_vars_if_possible((ga, gb));\n-                            if let TypeError::Sorts(sorts) = err && sorts.expected == ga && sorts.found == gb {\n-                                TypeError::Sorts(ExpectedFound { expected: a, found: b })\n-                            } else {\n-                                err\n-                            }\n-                        })?\n+                        .handle_opaque_type(\n+                            a,\n+                            b,\n+                            self.a_is_expected,\n+                            &self.fields.trace.cause,\n+                            self.param_env(),\n+                        )?\n                         .obligations,\n                 );\n-                Ok(ga)\n+                Ok(a)\n             }\n             // Optimization of GeneratorWitness relation since we know that all\n             // free regions are replaced with bound regions during construction."}]}