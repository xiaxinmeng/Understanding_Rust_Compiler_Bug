{"sha": "aa5374192704861bd64dc031b363a88ec7edc0ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNTM3NDE5MjcwNDg2MWJkNjRkYzAzMWIzNjNhODhlYzdlZGMwYWQ=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-10T12:08:18Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-10T12:08:18Z"}, "message": "HirIdification: remove all NodeIds from typeck", "tree": {"sha": "b50f587a64ff0cd5f2fb82315bded81be8719471", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b50f587a64ff0cd5f2fb82315bded81be8719471"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa5374192704861bd64dc031b363a88ec7edc0ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa5374192704861bd64dc031b363a88ec7edc0ad", "html_url": "https://github.com/rust-lang/rust/commit/aa5374192704861bd64dc031b363a88ec7edc0ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa5374192704861bd64dc031b363a88ec7edc0ad/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "401329e829cd4c6ced5a2bd9a0891f59672bf241", "url": "https://api.github.com/repos/rust-lang/rust/commits/401329e829cd4c6ced5a2bd9a0891f59672bf241", "html_url": "https://github.com/rust-lang/rust/commit/401329e829cd4c6ced5a2bd9a0891f59672bf241"}], "stats": {"total": 39, "additions": 16, "deletions": 23}, "files": [{"sha": "5e3ebcb3446c6620dc49e070181efb6d58ba6c0b", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa5374192704861bd64dc031b363a88ec7edc0ad/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5374192704861bd64dc031b363a88ec7edc0ad/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=aa5374192704861bd64dc031b363a88ec7edc0ad", "patch": "@@ -196,7 +196,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         )?;\n \n         if let Some(import_id) = pick.import_id {\n-            let import_def_id = self.tcx.hir().local_def_id(import_id);\n+            let import_def_id = self.tcx.hir().local_def_id_from_hir_id(import_id);\n             debug!(\"used_trait_import: {:?}\", import_def_id);\n             Lrc::get_mut(&mut self.tables.borrow_mut().used_trait_imports)\n                 .unwrap().insert(import_def_id);\n@@ -428,7 +428,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                        self_ty, expr_id, ProbeScope::TraitsInScope)?;\n         debug!(\"resolve_ufcs: pick={:?}\", pick);\n         if let Some(import_id) = pick.import_id {\n-            let import_def_id = tcx.hir().local_def_id(import_id);\n+            let import_def_id = tcx.hir().local_def_id_from_hir_id(import_id);\n             debug!(\"resolve_ufcs: used_trait_import: {:?}\", import_def_id);\n             Lrc::get_mut(&mut self.tables.borrow_mut().used_trait_imports)\n                 .unwrap().insert(import_def_id);"}, {"sha": "217be19e72a0cf3944bb107e9a1bfc97c9735dac", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aa5374192704861bd64dc031b363a88ec7edc0ad/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5374192704861bd64dc031b363a88ec7edc0ad/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=aa5374192704861bd64dc031b363a88ec7edc0ad", "patch": "@@ -120,7 +120,7 @@ struct Candidate<'tcx> {\n     xform_ret_ty: Option<Ty<'tcx>>,\n     item: ty::AssociatedItem,\n     kind: CandidateKind<'tcx>,\n-    import_id: Option<ast::NodeId>,\n+    import_id: Option<hir::HirId>,\n }\n \n #[derive(Debug)]\n@@ -145,7 +145,7 @@ enum ProbeResult {\n pub struct Pick<'tcx> {\n     pub item: ty::AssociatedItem,\n     pub kind: PickKind<'tcx>,\n-    pub import_id: Option<ast::NodeId>,\n+    pub import_id: Option<hir::HirId>,\n \n     // Indicates that the source expression should be autoderef'd N times\n     //\n@@ -836,7 +836,8 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             for trait_candidate in applicable_traits.iter() {\n                 let trait_did = trait_candidate.def_id;\n                 if duplicates.insert(trait_did) {\n-                    let import_id = trait_candidate.import_id;\n+                    let import_id = trait_candidate.import_id.map(|node_id|\n+                        self.fcx.tcx.hir().node_to_hir_id(node_id));\n                     let result = self.assemble_extension_candidates_for_trait(import_id, trait_did);\n                     result?;\n                 }\n@@ -887,7 +888,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     }\n \n     fn assemble_extension_candidates_for_trait(&mut self,\n-                                               import_id: Option<ast::NodeId>,\n+                                               import_id: Option<hir::HirId>,\n                                                trait_def_id: DefId)\n                                                -> Result<(), MethodError<'tcx>> {\n         debug!(\"assemble_extension_candidates_for_trait(trait_def_id={:?})\","}, {"sha": "13f17d2f44fb1de26ca79db56c394440d469d343", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aa5374192704861bd64dc031b363a88ec7edc0ad/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5374192704861bd64dc031b363a88ec7edc0ad/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=aa5374192704861bd64dc031b363a88ec7edc0ad", "patch": "@@ -4966,10 +4966,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     // that highlight errors inline.\n                     let mut sp = blk.span;\n                     let mut fn_span = None;\n-                    let blk_node_id = self.tcx.hir().hir_to_node_id(blk.hir_id);\n-                    if let Some((decl, ident)) = self.get_parent_fn_decl(blk_node_id) {\n+                    if let Some((decl, ident)) = self.get_parent_fn_decl(blk.hir_id) {\n                         let ret_sp = decl.output.span();\n-                        if let Some(block_sp) = self.parent_item_span(blk_node_id) {\n+                        if let Some(block_sp) = self.parent_item_span(blk.hir_id) {\n                             // HACK: on some cases (`ui/liveness/liveness-issue-2163.rs`) the\n                             // output would otherwise be incorrect and even misleading. Make sure\n                             // the span we're aiming at correspond to a `fn` body.\n@@ -5009,8 +5008,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         ty\n     }\n \n-    fn parent_item_span(&self, id: ast::NodeId) -> Option<Span> {\n-        let node = self.tcx.hir().get(self.tcx.hir().get_parent(id));\n+    fn parent_item_span(&self, id: hir::HirId) -> Option<Span> {\n+        let node = self.tcx.hir().get_by_hir_id(self.tcx.hir().get_parent_item(id));\n         match node {\n             Node::Item(&hir::Item {\n                 node: hir::ItemKind::Fn(_, _, _, body_id), ..\n@@ -5028,9 +5027,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         None\n     }\n \n-    /// Given a function block's `NodeId`, returns its `FnDecl` if it exists, or `None` otherwise.\n-    fn get_parent_fn_decl(&self, blk_id: ast::NodeId) -> Option<(hir::FnDecl, ast::Ident)> {\n-        let parent = self.tcx.hir().get(self.tcx.hir().get_parent(blk_id));\n+    /// Given a function block's `HirId`, returns its `FnDecl` if it exists, or `None` otherwise.\n+    fn get_parent_fn_decl(&self, blk_id: hir::HirId) -> Option<(hir::FnDecl, ast::Ident)> {\n+        let parent = self.tcx.hir().get_by_hir_id(self.tcx.hir().get_parent_item(blk_id));\n         self.get_node_fn_decl(parent).map(|(fn_decl, ident, _)| (fn_decl, ident))\n     }\n "}, {"sha": "01a77e85caedea9b5b43f191ec0af38ca80c6e2a", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aa5374192704861bd64dc031b363a88ec7edc0ad/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5374192704861bd64dc031b363a88ec7edc0ad/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=aa5374192704861bd64dc031b363a88ec7edc0ad", "patch": "@@ -15,7 +15,6 @@ use rustc::ty::{self, Ty, TyCtxt};\n use rustc::util::nodemap::DefIdSet;\n use rustc_data_structures::sync::Lrc;\n use std::mem;\n-use syntax::ast;\n use syntax_pos::Span;\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -444,8 +443,8 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n \n     fn visit_opaque_types(&mut self, span: Span) {\n         for (&def_id, opaque_defn) in self.fcx.opaque_types.borrow().iter() {\n-            let node_id = self.tcx().hir().as_local_node_id(def_id).unwrap();\n-            let instantiated_ty = self.resolve(&opaque_defn.concrete_ty, &node_id);\n+            let hir_id = self.tcx().hir().as_local_hir_id(def_id).unwrap();\n+            let instantiated_ty = self.resolve(&opaque_defn.concrete_ty, &hir_id);\n \n             let generics = self.tcx().generics_of(def_id);\n \n@@ -731,12 +730,6 @@ impl Locatable for Span {\n     }\n }\n \n-impl Locatable for ast::NodeId {\n-    fn to_span(&self, tcx: &TyCtxt<'_, '_, '_>) -> Span {\n-        tcx.hir().span(*self)\n-    }\n-}\n-\n impl Locatable for DefIndex {\n     fn to_span(&self, tcx: &TyCtxt<'_, '_, '_>) -> Span {\n         let hir_id = tcx.hir().def_index_to_hir_id(*self);"}]}