{"sha": "268e64641fad89ef1911694f2f4a5e12ee72a37f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2OGU2NDY0MWZhZDg5ZWYxOTExNjk0ZjJmNGE1ZTEyZWU3MmEzN2Y=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-29T01:34:33Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-01T18:12:42Z"}, "message": "rustc_codegen_llvm: pretty up a few builder methods with a macro.", "tree": {"sha": "349e4172ee96e25b731d68c1b4bd686e9cdfe46b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/349e4172ee96e25b731d68c1b4bd686e9cdfe46b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/268e64641fad89ef1911694f2f4a5e12ee72a37f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/268e64641fad89ef1911694f2f4a5e12ee72a37f", "html_url": "https://github.com/rust-lang/rust/commit/268e64641fad89ef1911694f2f4a5e12ee72a37f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/268e64641fad89ef1911694f2f4a5e12ee72a37f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd3f21bc7dc3d2d1a44367618940701ab308f7d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3f21bc7dc3d2d1a44367618940701ab308f7d2", "html_url": "https://github.com/rust-lang/rust/commit/cd3f21bc7dc3d2d1a44367618940701ab308f7d2"}], "stats": {"total": 172, "additions": 34, "deletions": 138}, "files": [{"sha": "ab87461754429dc39d6bd241fbe14b3fa3c4f558", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 34, "deletions": 138, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/268e64641fad89ef1911694f2f4a5e12ee72a37f/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/268e64641fad89ef1911694f2f4a5e12ee72a37f/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=268e64641fad89ef1911694f2f4a5e12ee72a37f", "patch": "@@ -100,6 +100,16 @@ impl HasCodegen<'tcx> for Builder<'_, 'll, 'tcx> {\n     type CodegenCx = CodegenCx<'ll, 'tcx>;\n }\n \n+macro_rules! builder_methods_for_value_instructions {\n+    ($($name:ident($($arg:ident),*) => $llvm_capi:ident),+ $(,)?) => {\n+        $(fn $name(&mut self, $($arg: &'ll Value),*) -> &'ll Value {\n+            unsafe {\n+                llvm::$llvm_capi(self.llbuilder, $($arg,)* noname())\n+            }\n+        })*\n+    }\n+}\n+\n impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     fn new_block<'b>(\n         cx: &'a CodegenCx<'ll, 'tcx>,\n@@ -227,17 +237,30 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    /* Arithmetic */\n-    fn add(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildAdd(self.llbuilder, lhs, rhs, noname())\n-        }\n-    }\n-\n-    fn fadd(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildFAdd(self.llbuilder, lhs, rhs, noname())\n-        }\n+    builder_methods_for_value_instructions! {\n+        add(a, b) => LLVMBuildAdd,\n+        fadd(a, b) => LLVMBuildFAdd,\n+        sub(a, b) => LLVMBuildSub,\n+        fsub(a, b) => LLVMBuildFSub,\n+        mul(a, b) => LLVMBuildMul,\n+        fmul(a, b) => LLVMBuildFMul,\n+        udiv(a, b) => LLVMBuildUDiv,\n+        exactudiv(a, b) => LLVMBuildExactUDiv,\n+        sdiv(a, b) => LLVMBuildSDiv,\n+        exactsdiv(a, b) => LLVMBuildExactSDiv,\n+        fdiv(a, b) => LLVMBuildFDiv,\n+        urem(a, b) => LLVMBuildURem,\n+        srem(a, b) => LLVMBuildSRem,\n+        frem(a, b) => LLVMBuildFRem,\n+        shl(a, b) => LLVMBuildShl,\n+        lshr(a, b) => LLVMBuildLShr,\n+        ashr(a, b) => LLVMBuildAShr,\n+        and(a, b) => LLVMBuildAnd,\n+        or(a, b) => LLVMBuildOr,\n+        xor(a, b) => LLVMBuildXor,\n+        neg(x) => LLVMBuildNeg,\n+        fneg(x) => LLVMBuildFNeg,\n+        not(x) => LLVMBuildNot,\n     }\n \n     fn fadd_fast(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n@@ -248,18 +271,6 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn sub(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildSub(self.llbuilder, lhs, rhs, noname())\n-        }\n-    }\n-\n-    fn fsub(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildFSub(self.llbuilder, lhs, rhs, noname())\n-        }\n-    }\n-\n     fn fsub_fast(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n         unsafe {\n             let instr = llvm::LLVMBuildFSub(self.llbuilder, lhs, rhs, noname());\n@@ -268,18 +279,6 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn mul(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildMul(self.llbuilder, lhs, rhs, noname())\n-        }\n-    }\n-\n-    fn fmul(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildFMul(self.llbuilder, lhs, rhs, noname())\n-        }\n-    }\n-\n     fn fmul_fast(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n         unsafe {\n             let instr = llvm::LLVMBuildFMul(self.llbuilder, lhs, rhs, noname());\n@@ -288,37 +287,6 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-\n-    fn udiv(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildUDiv(self.llbuilder, lhs, rhs, noname())\n-        }\n-    }\n-\n-    fn exactudiv(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildExactUDiv(self.llbuilder, lhs, rhs, noname())\n-        }\n-    }\n-\n-    fn sdiv(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildSDiv(self.llbuilder, lhs, rhs, noname())\n-        }\n-    }\n-\n-    fn exactsdiv(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildExactSDiv(self.llbuilder, lhs, rhs, noname())\n-        }\n-    }\n-\n-    fn fdiv(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildFDiv(self.llbuilder, lhs, rhs, noname())\n-        }\n-    }\n-\n     fn fdiv_fast(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n         unsafe {\n             let instr = llvm::LLVMBuildFDiv(self.llbuilder, lhs, rhs, noname());\n@@ -327,24 +295,6 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn urem(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildURem(self.llbuilder, lhs, rhs, noname())\n-        }\n-    }\n-\n-    fn srem(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildSRem(self.llbuilder, lhs, rhs, noname())\n-        }\n-    }\n-\n-    fn frem(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildFRem(self.llbuilder, lhs, rhs, noname())\n-        }\n-    }\n-\n     fn frem_fast(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n         unsafe {\n             let instr = llvm::LLVMBuildFRem(self.llbuilder, lhs, rhs, noname());\n@@ -353,60 +303,6 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn shl(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildShl(self.llbuilder, lhs, rhs, noname())\n-        }\n-    }\n-\n-    fn lshr(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildLShr(self.llbuilder, lhs, rhs, noname())\n-        }\n-    }\n-\n-    fn ashr(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildAShr(self.llbuilder, lhs, rhs, noname())\n-        }\n-    }\n-\n-    fn and(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildAnd(self.llbuilder, lhs, rhs, noname())\n-        }\n-    }\n-\n-    fn or(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildOr(self.llbuilder, lhs, rhs, noname())\n-        }\n-    }\n-\n-    fn xor(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildXor(self.llbuilder, lhs, rhs, noname())\n-        }\n-    }\n-\n-    fn neg(&mut self, v: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildNeg(self.llbuilder, v, noname())\n-        }\n-    }\n-\n-    fn fneg(&mut self, v: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildFNeg(self.llbuilder, v, noname())\n-        }\n-    }\n-\n-    fn not(&mut self, v: &'ll Value) -> &'ll Value {\n-        unsafe {\n-            llvm::LLVMBuildNot(self.llbuilder, v, noname())\n-        }\n-    }\n-\n     fn checked_binop(\n         &mut self,\n         oop: OverflowOp,"}]}