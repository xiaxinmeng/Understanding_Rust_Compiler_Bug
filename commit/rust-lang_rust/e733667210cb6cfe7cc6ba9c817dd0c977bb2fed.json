{"sha": "e733667210cb6cfe7cc6ba9c817dd0c977bb2fed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MzM2NjcyMTBjYjZjZmU3Y2M2YmE5YzgxN2RkMGM5NzdiYjJmZWQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-10T01:46:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-10T01:46:28Z"}, "message": "Rollup merge of #37664 - est31:master, r=nrc\n\nDocument the question mark operator in reference and the book's syntax index\n\nThe question mark operator will be stabilized for the Rust 1.13 release (unfortunately). Even though I don't like the operator, it still should be documented in the syntax index in the book and in the reference.\n\nMaybe there are people who also want to change the book's chapters on error handling, depending on their views of what idiomatic error handling is, now that the operator is stable, but I don't want to and I'd prefer to keep this PR focused on the reference and syntax index only.\n\nPlease also apply this PR to the beta branch of rust.", "tree": {"sha": "0f8973cd9cb203db7f15cfb1f580a367009bd635", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f8973cd9cb203db7f15cfb1f580a367009bd635"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e733667210cb6cfe7cc6ba9c817dd0c977bb2fed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e733667210cb6cfe7cc6ba9c817dd0c977bb2fed", "html_url": "https://github.com/rust-lang/rust/commit/e733667210cb6cfe7cc6ba9c817dd0c977bb2fed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e733667210cb6cfe7cc6ba9c817dd0c977bb2fed/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cc6be1bcbf8d9648d6406e4cdd26b614d242657", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cc6be1bcbf8d9648d6406e4cdd26b614d242657", "html_url": "https://github.com/rust-lang/rust/commit/8cc6be1bcbf8d9648d6406e4cdd26b614d242657"}, {"sha": "1e9aad752beb789df4f2232adf6b9a24efbdac8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e9aad752beb789df4f2232adf6b9a24efbdac8d", "html_url": "https://github.com/rust-lang/rust/commit/1e9aad752beb789df4f2232adf6b9a24efbdac8d"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "28403711cd701f212db25d4e9b59cbdf69b47a3b", "filename": "src/doc/book/syntax-index.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e733667210cb6cfe7cc6ba9c817dd0c977bb2fed/src%2Fdoc%2Fbook%2Fsyntax-index.md", "raw_url": "https://github.com/rust-lang/rust/raw/e733667210cb6cfe7cc6ba9c817dd0c977bb2fed/src%2Fdoc%2Fbook%2Fsyntax-index.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsyntax-index.md?ref=e733667210cb6cfe7cc6ba9c817dd0c977bb2fed", "patch": "@@ -94,6 +94,7 @@\n * `|=` (`var |= expr`): bitwise or & assignment. Overloadable (`BitOrAssign`).\n * `||` (`expr || expr`): logical or.\n * `_`: \"ignored\" pattern binding (see [Patterns (Ignoring bindings)]). Also used to make integer-literals readable (see [Reference (Integer literals)]).\n+* `?` (`expr?`): Error propagation. Returns early when `Err(_)` is encountered, unwraps otherwise. Similar to the [`try!` macro].\n \n ## Other Syntax\n \n@@ -210,6 +211,7 @@\n [Functions]: functions.html\n [Generics]: generics.html\n [Iterators]: iterators.html\n+[`try!` macro]: error-handling.html#the-try-macro\n [Lifetimes]: lifetimes.html\n [Loops (`for`)]: loops.html#for\n [Loops (`loop`)]: loops.html#loop"}, {"sha": "0596e476d5f6c14dfb7271a04e5a84f5ab289440", "filename": "src/doc/reference.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e733667210cb6cfe7cc6ba9c817dd0c977bb2fed/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/e733667210cb6cfe7cc6ba9c817dd0c977bb2fed/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=e733667210cb6cfe7cc6ba9c817dd0c977bb2fed", "patch": "@@ -2863,8 +2863,8 @@ assert_eq!(x, y);\n \n ### Unary operator expressions\n \n-Rust defines the following unary operators. They are all written as prefix operators,\n-before the expression they apply to.\n+Rust defines the following unary operators. With the exception of `?`, they are\n+all written as prefix operators, before the expression they apply to.\n \n * `-`\n   : Negation. Signed integer types and floating-point types support negation. It\n@@ -2893,6 +2893,10 @@ before the expression they apply to.\n     If the `&` or `&mut` operators are applied to an rvalue, a\n     temporary value is created; the lifetime of this temporary value\n     is defined by [syntactic rules](#temporary-lifetimes).\n+* `?`\n+  : Propagating errors if applied to `Err(_)` and unwrapping if\n+    applied to `Ok(_)`. Only works on the `Result<T, E>` type,\n+    and written in postfix notation.\n \n ### Binary operator expressions\n "}]}