{"sha": "585490d816b219dac781f763c2e3e4d2028b68ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NTQ5MGQ4MTZiMjE5ZGFjNzgxZjc2M2MyZTNlNGQyMDI4YjY4YWI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-13T17:41:27Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-13T17:41:27Z"}, "message": "Also adjust rustdoc to the principal changes", "tree": {"sha": "e0680269f3b92746b355fd38a4e1ebbbbb37ac1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0680269f3b92746b355fd38a4e1ebbbbb37ac1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/585490d816b219dac781f763c2e3e4d2028b68ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/585490d816b219dac781f763c2e3e4d2028b68ab", "html_url": "https://github.com/rust-lang/rust/commit/585490d816b219dac781f763c2e3e4d2028b68ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/585490d816b219dac781f763c2e3e4d2028b68ab/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78aaa3e5468f7e23267659b99b20f9ef33cdad44", "url": "https://api.github.com/repos/rust-lang/rust/commits/78aaa3e5468f7e23267659b99b20f9ef33cdad44", "html_url": "https://github.com/rust-lang/rust/commit/78aaa3e5468f7e23267659b99b20f9ef33cdad44"}], "stats": {"total": 73, "additions": 35, "deletions": 38}, "files": [{"sha": "2ba1f103971f074548fae0f23f5c994178435f8f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 35, "deletions": 38, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/585490d816b219dac781f763c2e3e4d2028b68ab/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585490d816b219dac781f763c2e3e4d2028b68ab/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=585490d816b219dac781f763c2e3e4d2028b68ab", "patch": "@@ -2632,47 +2632,44 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 }\n             }\n             ty::Dynamic(ref obj, ref reg) => {\n-                if let Some(principal) = obj.principal() {\n-                    let did = principal.def_id();\n+                let principal = obj.principal();\n+                let did = principal.def_id();\n+                inline::record_extern_fqn(cx, did, TypeKind::Trait);\n+\n+                let mut typarams = vec![];\n+                reg.clean(cx).map(|b| typarams.push(GenericBound::Outlives(b)));\n+                for did in obj.auto_traits() {\n+                    let empty = cx.tcx.intern_substs(&[]);\n+                    let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n+                        Some(did), false, vec![], empty);\n                     inline::record_extern_fqn(cx, did, TypeKind::Trait);\n+                    let bound = GenericBound::TraitBound(PolyTrait {\n+                        trait_: ResolvedPath {\n+                            path,\n+                            typarams: None,\n+                            did,\n+                            is_generic: false,\n+                        },\n+                        generic_params: Vec::new(),\n+                    }, hir::TraitBoundModifier::None);\n+                    typarams.push(bound);\n+                }\n \n-                    let mut typarams = vec![];\n-                    reg.clean(cx).map(|b| typarams.push(GenericBound::Outlives(b)));\n-                    for did in obj.auto_traits() {\n-                        let empty = cx.tcx.intern_substs(&[]);\n-                        let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n-                            Some(did), false, vec![], empty);\n-                        inline::record_extern_fqn(cx, did, TypeKind::Trait);\n-                        let bound = GenericBound::TraitBound(PolyTrait {\n-                            trait_: ResolvedPath {\n-                                path,\n-                                typarams: None,\n-                                did,\n-                                is_generic: false,\n-                            },\n-                            generic_params: Vec::new(),\n-                        }, hir::TraitBoundModifier::None);\n-                        typarams.push(bound);\n-                    }\n-\n-                    let mut bindings = vec![];\n-                    for pb in obj.projection_bounds() {\n-                        bindings.push(TypeBinding {\n-                            name: cx.tcx.associated_item(pb.item_def_id()).ident.name.clean(cx),\n-                            ty: pb.skip_binder().ty.clean(cx)\n-                        });\n-                    }\n+                let mut bindings = vec![];\n+                for pb in obj.projection_bounds() {\n+                    bindings.push(TypeBinding {\n+                        name: cx.tcx.associated_item(pb.item_def_id()).ident.name.clean(cx),\n+                        ty: pb.skip_binder().ty.clean(cx)\n+                    });\n+                }\n \n-                    let path = external_path(cx, &cx.tcx.item_name(did).as_str(), Some(did),\n-                        false, bindings, principal.skip_binder().substs);\n-                    ResolvedPath {\n-                        path,\n-                        typarams: Some(typarams),\n-                        did,\n-                        is_generic: false,\n-                    }\n-                } else {\n-                    Never\n+                let path = external_path(cx, &cx.tcx.item_name(did).as_str(), Some(did),\n+                    false, bindings, principal.skip_binder().substs);\n+                ResolvedPath {\n+                    path,\n+                    typarams: Some(typarams),\n+                    did,\n+                    is_generic: false,\n                 }\n             }\n             ty::Tuple(ref t) => Tuple(t.clean(cx)),"}]}