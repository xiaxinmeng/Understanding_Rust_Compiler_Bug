{"sha": "5f37001055c29982f4c27ee9edd90449c8e07774", "node_id": "C_kwDOAAsO6NoAKDVmMzcwMDEwNTVjMjk5ODJmNGMyN2VlOWVkZDkwNDQ5YzhlMDc3NzQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-22T19:06:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-22T19:06:04Z"}, "message": "Auto merge of #95215 - Dylan-DPC:rollup-l9f9t7l, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #95188 ([`macro-metavar-expr`] Fix generated tokens hygiene)\n - #95196 (rename LocalState::Uninitialized to Unallocated)\n - #95197 (Suggest constraining param for unary ops when missing trait impl)\n - #95200 (Cancel a not emitted error after parsing const generic args)\n - #95207 (update Termination trait docs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d8897f02157dc621ff21fa007dbd082e6aed28f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8897f02157dc621ff21fa007dbd082e6aed28f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f37001055c29982f4c27ee9edd90449c8e07774", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f37001055c29982f4c27ee9edd90449c8e07774", "html_url": "https://github.com/rust-lang/rust/commit/5f37001055c29982f4c27ee9edd90449c8e07774", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f37001055c29982f4c27ee9edd90449c8e07774/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64137f0b15b752d0c734661dc713bcd140858320", "url": "https://api.github.com/repos/rust-lang/rust/commits/64137f0b15b752d0c734661dc713bcd140858320", "html_url": "https://github.com/rust-lang/rust/commit/64137f0b15b752d0c734661dc713bcd140858320"}, {"sha": "2aca599325021f352f9bff06fa42daeb3c4bd4f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aca599325021f352f9bff06fa42daeb3c4bd4f8", "html_url": "https://github.com/rust-lang/rust/commit/2aca599325021f352f9bff06fa42daeb3c4bd4f8"}], "stats": {"total": 133, "additions": 107, "deletions": 26}, "files": [{"sha": "d78c7a9fad98381afa344261c17f5c0c9ceb8eb1", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5f37001055c29982f4c27ee9edd90449c8e07774/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f37001055c29982f4c27ee9edd90449c8e07774/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=5f37001055c29982f4c27ee9edd90449c8e07774", "patch": "@@ -177,11 +177,10 @@ pub struct LocalState<'tcx, Tag: Provenance = AllocId> {\n pub enum LocalValue<Tag: Provenance = AllocId> {\n     /// This local is not currently alive, and cannot be used at all.\n     Dead,\n-    /// This local is alive but not yet initialized. It can be written to\n-    /// but not read from or its address taken. Locals get initialized on\n-    /// first write because for unsized locals, we do not know their size\n-    /// before that.\n-    Uninitialized,\n+    /// This local is alive but not yet allocated. It cannot be read from or have its address taken,\n+    /// and will be allocated on the first write. This is to support unsized locals, where we cannot\n+    /// know their size in advance.\n+    Unallocated,\n     /// A normal, live local.\n     /// Mostly for convenience, we re-use the `Operand` type here.\n     /// This is an optimization over just always having a pointer here;\n@@ -198,7 +197,7 @@ impl<'tcx, Tag: Provenance + 'static> LocalState<'tcx, Tag> {\n     pub fn access(&self) -> InterpResult<'tcx, Operand<Tag>> {\n         match self.value {\n             LocalValue::Dead => throw_ub!(DeadLocal),\n-            LocalValue::Uninitialized => {\n+            LocalValue::Unallocated => {\n                 bug!(\"The type checker should prevent reading from a never-written local\")\n             }\n             LocalValue::Live(val) => Ok(val),\n@@ -216,8 +215,7 @@ impl<'tcx, Tag: Provenance + 'static> LocalState<'tcx, Tag> {\n         match self.value {\n             LocalValue::Dead => throw_ub!(DeadLocal),\n             LocalValue::Live(Operand::Indirect(mplace)) => Ok(Err(mplace)),\n-            ref mut\n-            local @ (LocalValue::Live(Operand::Immediate(_)) | LocalValue::Uninitialized) => {\n+            ref mut local @ (LocalValue::Live(Operand::Immediate(_)) | LocalValue::Unallocated) => {\n                 Ok(Ok(local))\n             }\n         }\n@@ -752,8 +750,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             })?;\n         }\n \n-        // Locals are initially uninitialized.\n-        let dummy = LocalState { value: LocalValue::Uninitialized, layout: Cell::new(None) };\n+        // Locals are initially unallocated.\n+        let dummy = LocalState { value: LocalValue::Unallocated, layout: Cell::new(None) };\n         let mut locals = IndexVec::from_elem(dummy, &body.local_decls);\n \n         // Now mark those locals as dead that we do not want to initialize\n@@ -921,7 +919,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         assert!(local != mir::RETURN_PLACE, \"Cannot make return place live\");\n         trace!(\"{:?} is now live\", local);\n \n-        let local_val = LocalValue::Uninitialized;\n+        let local_val = LocalValue::Unallocated;\n         // StorageLive expects the local to be dead, and marks it live.\n         let old = mem::replace(&mut self.frame_mut().locals[local].value, local_val);\n         if !matches!(old, LocalValue::Dead) {\n@@ -1025,7 +1023,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> std::fmt::Debug\n \n                 match self.ecx.stack()[frame].locals[local].value {\n                     LocalValue::Dead => write!(fmt, \" is dead\")?,\n-                    LocalValue::Uninitialized => write!(fmt, \" is uninitialized\")?,\n+                    LocalValue::Unallocated => write!(fmt, \" is unallocated\")?,\n                     LocalValue::Live(Operand::Indirect(mplace)) => {\n                         write!(\n                             fmt,"}, {"sha": "e8a1e61376fe5e60ee0cb99094559b46a1d27028", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5f37001055c29982f4c27ee9edd90449c8e07774/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f37001055c29982f4c27ee9edd90449c8e07774/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=5f37001055c29982f4c27ee9edd90449c8e07774", "patch": "@@ -257,7 +257,7 @@ pub(super) fn transcribe<'a>(\n \n             // Replace meta-variable expressions with the result of their expansion.\n             mbe::TokenTree::MetaVarExpr(sp, expr) => {\n-                transcribe_metavar_expr(cx, expr, interp, &repeats, &mut result, &sp)?;\n+                transcribe_metavar_expr(cx, expr, interp, &mut marker, &repeats, &mut result, &sp)?;\n             }\n \n             // If we are entering a new delimiter, we push its contents to the `stack` to be\n@@ -513,17 +513,23 @@ fn transcribe_metavar_expr<'a>(\n     cx: &ExtCtxt<'a>,\n     expr: MetaVarExpr,\n     interp: &FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,\n+    marker: &mut Marker,\n     repeats: &[(usize, usize)],\n     result: &mut Vec<TreeAndSpacing>,\n     sp: &DelimSpan,\n ) -> PResult<'a, ()> {\n+    let mut visited_span = || {\n+        let mut span = sp.entire();\n+        marker.visit_span(&mut span);\n+        span\n+    };\n     match expr {\n         MetaVarExpr::Count(original_ident, depth_opt) => {\n             let matched = matched_from_ident(cx, original_ident, interp)?;\n             let count = count_repetitions(cx, depth_opt, matched, &repeats, sp)?;\n             let tt = TokenTree::token(\n                 TokenKind::lit(token::Integer, sym::integer(count), None),\n-                sp.entire(),\n+                visited_span(),\n             );\n             result.push(tt.into());\n         }\n@@ -536,7 +542,7 @@ fn transcribe_metavar_expr<'a>(\n                 result.push(\n                     TokenTree::token(\n                         TokenKind::lit(token::Integer, sym::integer(*index), None),\n-                        sp.entire(),\n+                        visited_span(),\n                     )\n                     .into(),\n                 );\n@@ -548,7 +554,7 @@ fn transcribe_metavar_expr<'a>(\n                 result.push(\n                     TokenTree::token(\n                         TokenKind::lit(token::Integer, sym::integer(*length), None),\n-                        sp.entire(),\n+                        visited_span(),\n                     )\n                     .into(),\n                 );"}, {"sha": "c4d15d4d187207fa8bc09f646072735de4da6f59", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f37001055c29982f4c27ee9edd90449c8e07774/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f37001055c29982f4c27ee9edd90449c8e07774/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=5f37001055c29982f4c27ee9edd90449c8e07774", "patch": "@@ -244,8 +244,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n     ) -> InterpResult<'tcx, InterpOperand<Self::PointerTag>> {\n         let l = &frame.locals[local];\n \n-        if l.value == LocalValue::Uninitialized {\n-            throw_machine_stop_str!(\"tried to access an uninitialized local\")\n+        if l.value == LocalValue::Unallocated {\n+            throw_machine_stop_str!(\"tried to access an unallocated local\")\n         }\n \n         l.access()\n@@ -442,7 +442,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     /// but not reading from them anymore.\n     fn remove_const(ecx: &mut InterpCx<'mir, 'tcx, ConstPropMachine<'mir, 'tcx>>, local: Local) {\n         ecx.frame_mut().locals[local] =\n-            LocalState { value: LocalValue::Uninitialized, layout: Cell::new(None) };\n+            LocalState { value: LocalValue::Unallocated, layout: Cell::new(None) };\n     }\n \n     fn lint_root(&self, source_info: SourceInfo) -> Option<HirId> {\n@@ -1147,7 +1147,7 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n                     let frame = self.ecx.frame_mut();\n                     frame.locals[local].value =\n                         if let StatementKind::StorageLive(_) = statement.kind {\n-                            LocalValue::Uninitialized\n+                            LocalValue::Unallocated\n                         } else {\n                             LocalValue::Dead\n                         };"}, {"sha": "07ce879de8f0ee629999d4e99dffef2fc2badd51", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f37001055c29982f4c27ee9edd90449c8e07774/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f37001055c29982f4c27ee9edd90449c8e07774/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=5f37001055c29982f4c27ee9edd90449c8e07774", "patch": "@@ -630,10 +630,14 @@ impl<'a> Parser<'a> {\n                 Ok(ty) => GenericArg::Type(ty),\n                 Err(err) => {\n                     if is_const_fn {\n-                        if let Ok(expr) = (*snapshot).parse_expr_res(Restrictions::CONST_EXPR, None)\n-                        {\n-                            self.restore_snapshot(snapshot);\n-                            return Ok(Some(self.dummy_const_arg_needs_braces(err, expr.span)));\n+                        match (*snapshot).parse_expr_res(Restrictions::CONST_EXPR, None) {\n+                            Ok(expr) => {\n+                                self.restore_snapshot(snapshot);\n+                                return Ok(Some(self.dummy_const_arg_needs_braces(err, expr.span)));\n+                            }\n+                            Err(err) => {\n+                                err.cancel();\n+                            }\n                         }\n                     }\n                     // Try to recover from possible `const` arg without braces."}, {"sha": "e0dbe027aefe967afcab5617df5f68c4c5a0bc47", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5f37001055c29982f4c27ee9edd90449c8e07774/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f37001055c29982f4c27ee9edd90449c8e07774/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=5f37001055c29982f4c27ee9edd90449c8e07774", "patch": "@@ -672,6 +672,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         ex.span,\n                         format!(\"cannot apply unary operator `{}`\", op.as_str()),\n                     );\n+                    let missing_trait = match op {\n+                        hir::UnOp::Deref => unreachable!(\"check unary op `-` or `!` only\"),\n+                        hir::UnOp::Not => \"std::ops::Not\",\n+                        hir::UnOp::Neg => \"std::ops::Neg\",\n+                    };\n+                    let mut visitor = TypeParamVisitor(vec![]);\n+                    visitor.visit_ty(operand_ty);\n+                    if let [ty] = &visitor.0[..] {\n+                        if let ty::Param(p) = *operand_ty.kind() {\n+                            suggest_constraining_param(\n+                                self.tcx,\n+                                self.body_id,\n+                                &mut err,\n+                                *ty,\n+                                operand_ty,\n+                                missing_trait,\n+                                p,\n+                                true,\n+                            );\n+                        }\n+                    }\n \n                     let sp = self.tcx.sess.source_map().start_point(ex.span);\n                     if let Some(sp) ="}, {"sha": "9824cce6c721e1a2245cd0bff0b106e4225fd954", "filename": "library/std/src/process.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f37001055c29982f4c27ee9edd90449c8e07774/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f37001055c29982f4c27ee9edd90449c8e07774/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=5f37001055c29982f4c27ee9edd90449c8e07774", "patch": "@@ -2030,6 +2030,11 @@ pub fn id() -> u32 {\n ///\n /// The default implementations are returning `libc::EXIT_SUCCESS` to indicate\n /// a successful execution. In case of a failure, `libc::EXIT_FAILURE` is returned.\n+///\n+/// Because different runtimes have different specifications on the return value\n+/// of the `main` function, this trait is likely to be available only on\n+/// standard library's runtime for convenience. Other runtimes are not required\n+/// to provide similar functionality.\n #[cfg_attr(not(test), lang = \"termination\")]\n #[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n #[rustc_on_unimplemented("}, {"sha": "2bf628af8a772a03d2bb80018df765a62d15d5f7", "filename": "src/test/ui/const-generics/ice-const-generic-function-return-ty.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f37001055c29982f4c27ee9edd90449c8e07774/src%2Ftest%2Fui%2Fconst-generics%2Fice-const-generic-function-return-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f37001055c29982f4c27ee9edd90449c8e07774/src%2Ftest%2Fui%2Fconst-generics%2Fice-const-generic-function-return-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fice-const-generic-function-return-ty.rs?ref=5f37001055c29982f4c27ee9edd90449c8e07774", "patch": "@@ -0,0 +1,5 @@\n+// #95163\n+fn return_ty() -> impl Into<<() as Reexported;\n+//~^ ERROR expected one of `(`, `::`, `<`, or `>`, found `;`\n+\n+fn main() {}"}, {"sha": "a72f5800a07c35e148cb9da0047293323d31eeac", "filename": "src/test/ui/const-generics/ice-const-generic-function-return-ty.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f37001055c29982f4c27ee9edd90449c8e07774/src%2Ftest%2Fui%2Fconst-generics%2Fice-const-generic-function-return-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f37001055c29982f4c27ee9edd90449c8e07774/src%2Ftest%2Fui%2Fconst-generics%2Fice-const-generic-function-return-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fice-const-generic-function-return-ty.stderr?ref=5f37001055c29982f4c27ee9edd90449c8e07774", "patch": "@@ -0,0 +1,8 @@\n+error: expected one of `(`, `::`, `<`, or `>`, found `;`\n+  --> $DIR/ice-const-generic-function-return-ty.rs:2:46\n+   |\n+LL | fn return_ty() -> impl Into<<() as Reexported;\n+   |                                              ^ expected one of `(`, `::`, `<`, or `>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "0e3e703a2f5ac61d6160f168fbe42aa418d49402", "filename": "src/test/ui/type/type-check/missing_trait_impl.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f37001055c29982f4c27ee9edd90449c8e07774/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f37001055c29982f4c27ee9edd90449c8e07774/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.rs?ref=5f37001055c29982f4c27ee9edd90449c8e07774", "patch": "@@ -8,3 +8,9 @@ fn foo<T>(x: T, y: T) {\n fn bar<T>(x: T) {\n     x += x; //~ ERROR binary assignment operation `+=` cannot be applied to type `T`\n }\n+\n+fn baz<T>(x: T) {\n+    let y = -x; //~ ERROR cannot apply unary operator `-` to type `T`\n+    let y = !x; //~ ERROR cannot apply unary operator `!` to type `T`\n+    let y = *x; //~ ERROR type `T` cannot be dereferenced\n+}"}, {"sha": "59b8692dd4d1a5851c920bf5205316fe884772e8", "filename": "src/test/ui/type/type-check/missing_trait_impl.stderr", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5f37001055c29982f4c27ee9edd90449c8e07774/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f37001055c29982f4c27ee9edd90449c8e07774/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.stderr?ref=5f37001055c29982f4c27ee9edd90449c8e07774", "patch": "@@ -24,7 +24,35 @@ help: consider restricting type parameter `T`\n LL | fn bar<T: std::ops::AddAssign>(x: T) {\n    |         +++++++++++++++++++++\n \n-error: aborting due to 2 previous errors\n+error[E0600]: cannot apply unary operator `-` to type `T`\n+  --> $DIR/missing_trait_impl.rs:13:13\n+   |\n+LL |     let y = -x;\n+   |             ^^ cannot apply unary operator `-`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn baz<T: std::ops::Neg<Output = T>>(x: T) {\n+   |         +++++++++++++++++++++++++++\n+\n+error[E0600]: cannot apply unary operator `!` to type `T`\n+  --> $DIR/missing_trait_impl.rs:14:13\n+   |\n+LL |     let y = !x;\n+   |             ^^ cannot apply unary operator `!`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn baz<T: std::ops::Not<Output = T>>(x: T) {\n+   |         +++++++++++++++++++++++++++\n+\n+error[E0614]: type `T` cannot be dereferenced\n+  --> $DIR/missing_trait_impl.rs:15:13\n+   |\n+LL |     let y = *x;\n+   |             ^^\n+\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0368, E0369.\n+Some errors have detailed explanations: E0368, E0369, E0600, E0614.\n For more information about an error, try `rustc --explain E0368`."}]}