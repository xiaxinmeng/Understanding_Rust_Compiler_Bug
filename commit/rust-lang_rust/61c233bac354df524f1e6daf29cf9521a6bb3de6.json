{"sha": "61c233bac354df524f1e6daf29cf9521a6bb3de6", "node_id": "C_kwDOAAsO6NoAKDYxYzIzM2JhYzM1NGRmNTI0ZjFlNmRhZjI5Y2Y5NTIxYTZiYjNkZTY", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-01-12T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-01-12T17:51:31Z"}, "message": "Remove ui tests for LLVM-style inline assembly", "tree": {"sha": "88445c4dd13288db1a8d529be8fbbf4c27db4119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88445c4dd13288db1a8d529be8fbbf4c27db4119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61c233bac354df524f1e6daf29cf9521a6bb3de6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61c233bac354df524f1e6daf29cf9521a6bb3de6", "html_url": "https://github.com/rust-lang/rust/commit/61c233bac354df524f1e6daf29cf9521a6bb3de6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61c233bac354df524f1e6daf29cf9521a6bb3de6/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a76577cb8ab9998992e2808e121584d1dab2d61e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a76577cb8ab9998992e2808e121584d1dab2d61e", "html_url": "https://github.com/rust-lang/rust/commit/a76577cb8ab9998992e2808e121584d1dab2d61e"}], "stats": {"total": 1574, "additions": 74, "deletions": 1500}, "files": [{"sha": "32431d9e7c6fe8bcbcb47f7722d0dc863944bee3", "filename": "src/test/ui/asm/naked-functions.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs?ref=61c233bac354df524f1e6daf29cf9521a6bb3de6", "patch": "@@ -3,12 +3,10 @@\n // ignore-spirv\n // ignore-wasm32\n \n-#![feature(llvm_asm)]\n #![feature(naked_functions)]\n #![feature(or_patterns)]\n #![feature(asm_const, asm_sym)]\n #![crate_type = \"lib\"]\n-#![allow(deprecated)] // llvm_asm!\n \n use std::arch::asm;\n \n@@ -114,16 +112,6 @@ pub fn outer(x: u32) -> extern \"C\" fn(usize) -> usize {\n     inner\n }\n \n-#[naked]\n-unsafe extern \"C\" fn llvm() -> ! {\n-    //~^ WARN naked functions must contain a single asm block\n-    //~| WARN this was previously accepted\n-    llvm_asm!(\"\");\n-    //~^ WARN LLVM-style inline assembly is unsupported in naked functions\n-    //~| WARN this was previously accepted\n-    core::hint::unreachable_unchecked();\n-}\n-\n #[naked]\n unsafe extern \"C\" fn invalid_options() {\n     asm!(\"\", options(nomem, preserves_flags, noreturn));"}, {"sha": "c2dfe443d6038baaf5a63d1e6d6603c9232e30ec", "filename": "src/test/ui/asm/naked-functions.stderr", "status": "modified", "additions": 32, "deletions": 59, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr?ref=61c233bac354df524f1e6daf29cf9521a6bb3de6", "patch": "@@ -1,43 +1,43 @@\n error: asm with the `pure` option must have at least one output\n-  --> $DIR/naked-functions.rs:136:14\n+  --> $DIR/naked-functions.rs:124:14\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:23:5\n+  --> $DIR/naked-functions.rs:21:5\n    |\n LL |     mut a: u32,\n    |     ^^^^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:25:5\n+  --> $DIR/naked-functions.rs:23:5\n    |\n LL |     &b: &i32,\n    |     ^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:27:6\n+  --> $DIR/naked-functions.rs:25:6\n    |\n LL |     (None | Some(_)): Option<std::ptr::NonNull<u8>>,\n    |      ^^^^^^^^^^^^^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:29:5\n+  --> $DIR/naked-functions.rs:27:5\n    |\n LL |     P { x, y }: P,\n    |     ^^^^^^^^^^\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:39:5\n+  --> $DIR/naked-functions.rs:37:5\n    |\n LL |     a + 1\n    |     ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:36:1\n+  --> $DIR/naked-functions.rs:34:1\n    |\n LL | / pub unsafe extern \"C\" fn inc(a: u32) -> u32 {\n LL | |\n@@ -53,15 +53,15 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:45:31\n+  --> $DIR/naked-functions.rs:43:31\n    |\n LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    |                               ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n warning: only `const` and `sym` operands are supported in naked functions\n-  --> $DIR/naked-functions.rs:45:23\n+  --> $DIR/naked-functions.rs:43:23\n    |\n LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    |                       ^^^^^^^^^\n@@ -70,7 +70,7 @@ LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:52:1\n+  --> $DIR/naked-functions.rs:50:1\n    |\n LL | / pub unsafe extern \"C\" fn inc_closure(a: u32) -> u32 {\n LL | |\n@@ -84,7 +84,7 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: only `const` and `sym` operands are supported in naked functions\n-  --> $DIR/naked-functions.rs:72:10\n+  --> $DIR/naked-functions.rs:70:10\n    |\n LL |          in(reg) a,\n    |          ^^^^^^^^^\n@@ -102,7 +102,7 @@ LL |          out(reg) e,\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:69:5\n+  --> $DIR/naked-functions.rs:67:5\n    |\n LL | /     asm!(\"/* {0} {1} {2} {3} {4} {5} {6} */\",\n LL | |\n@@ -117,7 +117,7 @@ LL | |     );\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:59:1\n+  --> $DIR/naked-functions.rs:57:1\n    |\n LL | / pub unsafe extern \"C\" fn unsupported_operands() {\n LL | |\n@@ -141,7 +141,7 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:85:1\n+  --> $DIR/naked-functions.rs:83:1\n    |\n LL | / pub extern \"C\" fn missing_assembly() {\n LL | |\n@@ -153,7 +153,7 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:94:5\n+  --> $DIR/naked-functions.rs:92:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n@@ -162,7 +162,7 @@ LL |     asm!(\"\");\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:97:5\n+  --> $DIR/naked-functions.rs:95:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n@@ -171,7 +171,7 @@ LL |     asm!(\"\");\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:100:5\n+  --> $DIR/naked-functions.rs:98:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n@@ -180,7 +180,7 @@ LL |     asm!(\"\");\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:91:1\n+  --> $DIR/naked-functions.rs:89:1\n    |\n LL | / pub extern \"C\" fn too_many_asm_blocks() {\n LL | |\n@@ -202,15 +202,15 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:111:11\n+  --> $DIR/naked-functions.rs:109:11\n    |\n LL |         *&y\n    |           ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:108:5\n+  --> $DIR/naked-functions.rs:106:5\n    |\n LL | /     pub extern \"C\" fn inner(y: usize) -> usize {\n LL | |\n@@ -224,35 +224,8 @@ LL | |     }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: the LLVM-style inline assembly is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:121:5\n-   |\n-LL |     llvm_asm!(\"\");\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n-   = help: use the new asm! syntax specified in RFC 2873\n-   = note: this warning originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:118:1\n-   |\n-LL | / unsafe extern \"C\" fn llvm() -> ! {\n-LL | |\n-LL | |\n-LL | |     llvm_asm!(\"\");\n-...  |\n-LL | |     core::hint::unreachable_unchecked();\n-   | |     ------------------------------------ non-asm is unsupported in naked functions\n-LL | | }\n-   | |_^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n-\n warning: asm options unsupported in naked functions: `nomem`, `preserves_flags`\n-  --> $DIR/naked-functions.rs:129:5\n+  --> $DIR/naked-functions.rs:117:5\n    |\n LL |     asm!(\"\", options(nomem, preserves_flags, noreturn));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -261,7 +234,7 @@ LL |     asm!(\"\", options(nomem, preserves_flags, noreturn));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm options unsupported in naked functions: `nostack`, `pure`, `readonly`\n-  --> $DIR/naked-functions.rs:136:5\n+  --> $DIR/naked-functions.rs:124:5\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -270,7 +243,7 @@ LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:136:5\n+  --> $DIR/naked-functions.rs:124:5\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -279,21 +252,21 @@ LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: Rust ABI is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:145:15\n+  --> $DIR/naked-functions.rs:133:15\n    |\n LL | pub unsafe fn default_abi() {\n    |               ^^^^^^^^^^^\n    |\n    = note: `#[warn(undefined_naked_function_abi)]` on by default\n \n warning: Rust ABI is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:151:15\n+  --> $DIR/naked-functions.rs:139:15\n    |\n LL | pub unsafe fn rust_abi() {\n    |               ^^^^^^^^\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:191:1\n+  --> $DIR/naked-functions.rs:179:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n@@ -302,7 +275,7 @@ LL | #[inline]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:199:1\n+  --> $DIR/naked-functions.rs:187:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n@@ -311,7 +284,7 @@ LL | #[inline(always)]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:207:1\n+  --> $DIR/naked-functions.rs:195:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^\n@@ -320,7 +293,7 @@ LL | #[inline(never)]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:215:1\n+  --> $DIR/naked-functions.rs:203:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n@@ -329,7 +302,7 @@ LL | #[inline]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:218:1\n+  --> $DIR/naked-functions.rs:206:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n@@ -338,13 +311,13 @@ LL | #[inline(always)]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:221:1\n+  --> $DIR/naked-functions.rs:209:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-error: aborting due to 8 previous errors; 25 warnings emitted\n+error: aborting due to 8 previous errors; 23 warnings emitted\n "}, {"sha": "ce93e4b5d4b2dc9526f36e0d9d2875d6c54d5087", "filename": "src/test/ui/ast-json/ast-json-ice.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs?ref=61c233bac354df524f1e6daf29cf9521a6bb3de6", "patch": "@@ -8,9 +8,6 @@\n // check-pass\n // dont-check-compiler-stdout - don't check for any AST change.\n \n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n enum V {\n     A(i32),\n     B { f: [i64; 3 + 4] }\n@@ -27,12 +24,6 @@ macro_rules! call_println {\n }\n \n fn main() {\n-    #[cfg(any(target_arch = \"x86\",\n-        target_arch = \"x86_64\",\n-        target_arch = \"arm\",\n-        target_arch = \"aarch64\"))]\n-    unsafe { llvm_asm!(\"\"::::); }\n-\n     let x: (i32) = 35;\n     let y = x as i64<> + 5;\n "}, {"sha": "0d202c1b452d5ca73fca2d12e160271d25efa91f", "filename": "src/test/ui/borrowck/borrowck-asm.rs", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,83 +0,0 @@\n-// ignore-s390x\n-// ignore-emscripten\n-// ignore-powerpc\n-// ignore-powerpc64\n-// ignore-powerpc64le\n-// ignore-riscv64\n-// ignore-sparc\n-// ignore-sparc64\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-#[cfg(any(target_arch = \"x86\",\n-            target_arch = \"x86_64\",\n-            target_arch = \"arm\",\n-            target_arch = \"aarch64\",\n-            target_arch = \"mips\",\n-            target_arch = \"mips64\"))]\n-mod test_cases {\n-    fn is_move() {\n-        let y: &mut isize;\n-        let x = &mut 0isize;\n-        unsafe {\n-            llvm_asm!(\"nop\" : : \"r\"(x));\n-        }\n-        let z = x;  //~ ERROR use of moved value: `x`\n-    }\n-\n-    fn in_is_read() {\n-        let mut x = 3;\n-        let y = &mut x;\n-        unsafe {\n-            llvm_asm!(\"nop\" : : \"r\"(x)); //~ ERROR cannot use\n-        }\n-        let z = y;\n-    }\n-\n-    fn out_is_assign() {\n-        let x = 3;\n-        unsafe {\n-            llvm_asm!(\"nop\" : \"=r\"(x));  //~ ERROR cannot assign twice\n-        }\n-        let mut a = &mut 3;\n-        let b = &*a;\n-        unsafe {\n-            llvm_asm!(\"nop\" : \"=r\"(a));  // OK, Shallow write to `a`\n-        }\n-        let c = b;\n-        let d = *a;\n-    }\n-\n-    fn rw_is_assign() {\n-        let x = 3;\n-        unsafe {\n-            llvm_asm!(\"nop\" : \"+r\"(x));  //~ ERROR cannot assign twice\n-        }\n-    }\n-\n-    fn indirect_is_not_init() {\n-        let x: i32;\n-        unsafe {\n-            llvm_asm!(\"nop\" : \"=*r\"(x)); //~ ERROR use of possibly-uninitialized variable\n-        }\n-    }\n-\n-    fn rw_is_read() {\n-        let mut x = &mut 3;\n-        let y = &*x;\n-        unsafe {\n-            llvm_asm!(\"nop\" : \"+r\"(x));  //~ ERROR cannot assign to `x` because it is borrowed\n-        }\n-        let z = y;\n-    }\n-\n-    fn two_moves() {\n-        let x = &mut 2;\n-        unsafe {\n-            llvm_asm!(\"nop\" : : \"r\"(x), \"r\"(x) );    //~ ERROR use of moved value\n-        }\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "ff5847d826e9954c23836346c285214f0ee60d2c", "filename": "src/test/ui/borrowck/borrowck-asm.stderr", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,81 +0,0 @@\n-error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-asm.rs:26:17\n-   |\n-LL |         let x = &mut 0isize;\n-   |             - move occurs because `x` has type `&mut isize`, which does not implement the `Copy` trait\n-LL |         unsafe {\n-LL |             llvm_asm!(\"nop\" : : \"r\"(x));\n-   |                                     - value moved here\n-LL |         }\n-LL |         let z = x;\n-   |                 ^ value used here after move\n-\n-error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/borrowck-asm.rs:33:37\n-   |\n-LL |         let y = &mut x;\n-   |                 ------ borrow of `x` occurs here\n-LL |         unsafe {\n-LL |             llvm_asm!(\"nop\" : : \"r\"(x));\n-   |                                     ^ use of borrowed `x`\n-LL |         }\n-LL |         let z = y;\n-   |                 - borrow later used here\n-\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:41:36\n-   |\n-LL |         let x = 3;\n-   |             -\n-   |             |\n-   |             first assignment to `x`\n-   |             help: consider making this binding mutable: `mut x`\n-LL |         unsafe {\n-LL |             llvm_asm!(\"nop\" : \"=r\"(x));\n-   |                                    ^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:55:36\n-   |\n-LL |         let x = 3;\n-   |             -\n-   |             |\n-   |             first assignment to `x`\n-   |             help: consider making this binding mutable: `mut x`\n-LL |         unsafe {\n-LL |             llvm_asm!(\"nop\" : \"+r\"(x));\n-   |                                    ^ cannot assign twice to immutable variable\n-\n-error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/borrowck-asm.rs:62:37\n-   |\n-LL |             llvm_asm!(\"nop\" : \"=*r\"(x));\n-   |                                     ^ use of possibly-uninitialized `x`\n-\n-error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-asm.rs:70:36\n-   |\n-LL |         let y = &*x;\n-   |                 --- borrow of `x` occurs here\n-LL |         unsafe {\n-LL |             llvm_asm!(\"nop\" : \"+r\"(x));\n-   |                                    ^ assignment to borrowed `x` occurs here\n-LL |         }\n-LL |         let z = y;\n-   |                 - borrow later used here\n-\n-error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-asm.rs:78:45\n-   |\n-LL |         let x = &mut 2;\n-   |             - move occurs because `x` has type `&mut i32`, which does not implement the `Copy` trait\n-LL |         unsafe {\n-LL |             llvm_asm!(\"nop\" : : \"r\"(x), \"r\"(x) );\n-   |                                     -       ^ value used here after move\n-   |                                     |\n-   |                                     value moved here\n-\n-error: aborting due to 7 previous errors\n-\n-Some errors have detailed explanations: E0381, E0382, E0384, E0503, E0506.\n-For more information about an error, try `rustc --explain E0381`."}, {"sha": "6971170337d41e6689ad17b01602963891026557", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs?ref=61c233bac354df524f1e6daf29cf9521a6bb3de6", "patch": "@@ -1,24 +1,13 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n // only-x86_64\n-#![feature(llvm_asm)]\n #![allow(const_err)]\n-#![allow(deprecated)] // llvm_asm!\n \n use std::arch::asm;\n \n fn main() {}\n \n // Make sure we catch executing inline assembly.\n-static TEST_BAD1: () = {\n-    unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n-    //~^ ERROR could not evaluate static initializer\n-    //~| NOTE inline assembly is not supported\n-    //~| NOTE in this expansion of llvm_asm!\n-    //~| NOTE in this expansion of llvm_asm!\n-};\n-\n-// Make sure we catch executing inline assembly.\n-static TEST_BAD2: () = {\n+static TEST_BAD: () = {\n     unsafe { asm!(\"nop\"); }\n     //~^ ERROR could not evaluate static initializer\n     //~| NOTE inline assembly is not supported"}, {"sha": "595b859cbcebb1454150011d265a460b68341b90", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.stderr", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr?ref=61c233bac354df524f1e6daf29cf9521a6bb3de6", "patch": "@@ -1,31 +1,17 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/inline_asm.rs:13:14\n-   |\n-LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ inline assembly is not supported\n-   |\n-   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0080]: could not evaluate static initializer\n-  --> $DIR/inline_asm.rs:22:14\n+  --> $DIR/inline_asm.rs:11:14\n    |\n LL |     unsafe { asm!(\"nop\"); }\n    |              ^^^^^^^^^^^ inline assembly is not supported\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/inline_asm.rs:13:14\n-   |\n-LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/inline_asm.rs:22:14\n+  --> $DIR/inline_asm.rs:11:14\n    |\n LL |     unsafe { asm!(\"nop\"); }\n    |              ^^^^^^^^^^^\n-   = note: this warning originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "43af2406f5ee4d7f3ece4557aab21cc8481356f6", "filename": "src/test/ui/error-codes/E0660.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0660.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,10 +0,0 @@\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    let a;\n-    llvm_asm!(\"nop\" \"nop\");\n-    //~^ ERROR E0660\n-    llvm_asm!(\"nop\" \"nop\" : \"=r\"(a));\n-    //~^ ERROR E0660\n-}"}, {"sha": "d9d2f35251b9bfc6760e88490a5852ed0a00afcf", "filename": "src/test/ui/error-codes/E0660.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0660.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0660.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0660.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,15 +0,0 @@\n-error[E0660]: malformed inline assembly\n-  --> $DIR/E0660.rs:6:5\n-   |\n-LL |     llvm_asm!(\"nop\" \"nop\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0660]: malformed inline assembly\n-  --> $DIR/E0660.rs:8:5\n-   |\n-LL |     llvm_asm!(\"nop\" \"nop\" : \"=r\"(a));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0660`."}, {"sha": "854675c36391c770bbb5d65e250e8523985108d3", "filename": "src/test/ui/error-codes/E0661.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,10 +0,0 @@\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    let a; //~ ERROR type annotations needed\n-    llvm_asm!(\"nop\" : \"r\"(a));\n-    //~^ ERROR E0661\n-}"}, {"sha": "73745ef97758d398eca7b0ae02df88bb7731f863", "filename": "src/test/ui/error-codes/E0661.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,16 +0,0 @@\n-error[E0661]: output operand constraint lacks '=' or '+'\n-  --> $DIR/E0661.rs:8:23\n-   |\n-LL |     llvm_asm!(\"nop\" : \"r\"(a));\n-   |                       ^^^\n-\n-error[E0282]: type annotations needed\n-  --> $DIR/E0661.rs:7:9\n-   |\n-LL |     let a;\n-   |         ^ consider giving `a` a type\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0282, E0661.\n-For more information about an error, try `rustc --explain E0282`."}, {"sha": "679a88c3433c3f893e4934c085ecad7eb3d0abc5", "filename": "src/test/ui/error-codes/E0662.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,11 +0,0 @@\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    llvm_asm!(\"xor %eax, %eax\"\n-              :\n-              : \"=test\"(\"a\") //~ ERROR E0662\n-             );\n-}"}, {"sha": "f6695d700fbd4ad88198c235e5da4572868186a5", "filename": "src/test/ui/error-codes/E0662.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,9 +0,0 @@\n-error[E0662]: input operand constraint contains '='\n-  --> $DIR/E0662.rs:9:17\n-   |\n-LL |               : \"=test\"(\"a\")\n-   |                 ^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0662`."}, {"sha": "b82f1adfb426d1afeaf40dd54fe0e2dd2f15f14f", "filename": "src/test/ui/error-codes/E0663.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,11 +0,0 @@\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    llvm_asm!(\"xor %eax, %eax\"\n-              :\n-              : \"+test\"(\"a\") //~ ERROR E0663\n-             );\n-}"}, {"sha": "5f8dede0242f3dd3d3255c9e78d8869de39d6bfa", "filename": "src/test/ui/error-codes/E0663.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,9 +0,0 @@\n-error[E0663]: input operand constraint contains '+'\n-  --> $DIR/E0663.rs:9:17\n-   |\n-LL |               : \"+test\"(\"a\")\n-   |                 ^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0663`."}, {"sha": "d2730f04f4547ca2905b32dd4519e0c94ea8659d", "filename": "src/test/ui/error-codes/E0664.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,12 +0,0 @@\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    llvm_asm!(\"mov $$0x200, %eax\"\n-              :\n-              :\n-              : \"{eax}\" //~ ERROR E0664\n-             );\n-}"}, {"sha": "5e6836f28e3de584e51ba4a64a7c7b6a4b1d2e81", "filename": "src/test/ui/error-codes/E0664.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,9 +0,0 @@\n-error[E0664]: clobber should not be surrounded by braces\n-  --> $DIR/E0664.rs:10:17\n-   |\n-LL |               : \"{eax}\"\n-   |                 ^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0664`."}, {"sha": "556219b98a93ad4450dc65f9ec45c1ff973b8ae3", "filename": "src/test/ui/feature-gates/feature-gate-asm.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,10 +0,0 @@\n-// only-x86_64\n-\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    unsafe {\n-        llvm_asm!(\"\");\n-        //~^ ERROR prefer using the new asm! syntax instead\n-    }\n-}"}, {"sha": "72ba70d0d9149cc6ff0fb67a20806c24a21d324f", "filename": "src/test/ui/feature-gates/feature-gate-asm.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: use of unstable library feature 'llvm_asm': prefer using the new asm! syntax instead\n-  --> $DIR/feature-gate-asm.rs:7:9\n-   |\n-LL |         llvm_asm!(\"\");\n-   |         ^^^^^^^^\n-   |\n-   = note: see issue #70173 <https://github.com/rust-lang/rust/issues/70173> for more information\n-   = help: add `#![feature(llvm_asm)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "712e3a56fd87f1a5eb0dbd85961629fea9086a1b", "filename": "src/test/ui/feature-gates/feature-gate-asm2.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,10 +0,0 @@\n-// only-x86_64\n-\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    unsafe {\n-        println!(\"{:?}\", llvm_asm!(\"\"));\n-        //~^ ERROR prefer using the new asm! syntax instead\n-    }\n-}"}, {"sha": "0297fec16dd7252348c4bd63814d64a2adf11b3f", "filename": "src/test/ui/feature-gates/feature-gate-asm2.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: use of unstable library feature 'llvm_asm': prefer using the new asm! syntax instead\n-  --> $DIR/feature-gate-asm2.rs:7:26\n-   |\n-LL |         println!(\"{:?}\", llvm_asm!(\"\"));\n-   |                          ^^^^^^^^\n-   |\n-   = note: see issue #70173 <https://github.com/rust-lang/rust/issues/70173> for more information\n-   = help: add `#![feature(llvm_asm)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "780a6419c5f305ba60b94c10e04ce4e361a696f7", "filename": "src/test/ui/issues/issue-9129.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Fissues%2Fissue-9129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Fissues%2Fissue-9129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-9129.rs?ref=61c233bac354df524f1e6daf29cf9521a6bb3de6", "patch": "@@ -2,7 +2,6 @@\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n #![allow(non_snake_case)]\n-#![allow(deprecated)] // llvm_asm!\n // ignore-pretty unreported\n \n #![feature(box_syntax)]\n@@ -13,7 +12,6 @@ impl bomb for S { fn boom(&self, _: Ident) { } }\n \n pub struct Ident { name: usize }\n \n-// macro_rules! int3 { () => ( unsafe { llvm_asm!( \"int3\" ); } ) }\n macro_rules! int3 { () => ( { } ) }\n \n fn Ident_new() -> Ident {"}, {"sha": "d178c65dff4970e68f803b59f737e516b61e1e19", "filename": "src/test/ui/llvm-asm/asm-src-loc-codegen-units.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc-codegen-units.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc-codegen-units.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc-codegen-units.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,13 +0,0 @@\n-// build-fail\n-// dont-check-compiler-stderr\n-// compile-flags: -C codegen-units=2\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    unsafe {\n-        llvm_asm!(\"nowayisthisavalidinstruction\"); //~ ERROR instruction\n-    }\n-}"}, {"sha": "4506c12a0e6b9075c3dee3c5fe10949ef181169b", "filename": "src/test/ui/llvm-asm/asm-src-loc.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,12 +0,0 @@\n-// build-fail\n-// dont-check-compiler-stderr\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    unsafe {\n-        llvm_asm!(\"nowayisthisavalidinstruction\"); //~ ERROR instruction\n-    }\n-}"}, {"sha": "6a2ce111cb313e7df2f82d07a12df4723039b85e", "filename": "src/test/ui/llvm-asm/inline-asm-bad-constraint.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,41 +0,0 @@\n-// Test that the compiler will catch invalid inline assembly constraints.\n-\n-// build-fail\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-extern \"C\" {\n-    fn foo(a: usize);\n-}\n-\n-fn main() {\n-    bad_register_constraint();\n-    bad_input();\n-    wrong_size_output();\n-}\n-\n-// Issue #54130\n-fn bad_register_constraint() {\n-    let rax: u64;\n-    unsafe {\n-        llvm_asm!(\"\" :\"={rax\"(rax)) //~ ERROR E0668\n-    };\n-    println!(\"Accumulator is: {}\", rax);\n-}\n-\n-// Issue #54376\n-fn bad_input() {\n-    unsafe {\n-        llvm_asm!(\"callq $0\" : : \"0\"(foo)) //~ ERROR E0668\n-    };\n-}\n-\n-fn wrong_size_output() {\n-    let rax: u64 = 0;\n-    unsafe {\n-        llvm_asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax))); //~ ERROR E0668\n-    }\n-    println!(\"rax: {}\", rax);\n-}"}, {"sha": "a624829f149c8d4c3677cfdb100a1a27032a0d25", "filename": "src/test/ui/llvm-asm/inline-asm-bad-constraint.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,27 +0,0 @@\n-error[E0668]: malformed inline assembly\n-  --> $DIR/inline-asm-bad-constraint.rs:23:9\n-   |\n-LL |         llvm_asm!(\"\" :\"={rax\"(rax))\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0668]: malformed inline assembly\n-  --> $DIR/inline-asm-bad-constraint.rs:31:9\n-   |\n-LL |         llvm_asm!(\"callq $0\" : : \"0\"(foo))\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0668]: malformed inline assembly\n-  --> $DIR/inline-asm-bad-constraint.rs:38:9\n-   |\n-LL |         llvm_asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax)));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0668`."}, {"sha": "1746c487b1e32e7d1a61340ec18e9f0351d92828", "filename": "src/test/ui/llvm-asm/inline-asm-bad-operand.rs", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-operand.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,60 +0,0 @@\n-// Test that the compiler will catch passing invalid values to inline assembly\n-// operands.\n-\n-// build-fail\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-#[repr(C)]\n-struct MyPtr(usize);\n-\n-fn main() {\n-    issue_37433();\n-    issue_37437();\n-    issue_40187();\n-    issue_54067();\n-    multiple_errors();\n-}\n-\n-fn issue_37433() {\n-    unsafe {\n-        llvm_asm!(\"\" :: \"r\"(\"\")); //~ ERROR E0669\n-    }\n-\n-    unsafe {\n-        let target = MyPtr(0);\n-        llvm_asm!(\"ret\" : : \"{rdi}\"(target)); //~ ERROR E0669\n-    }\n-}\n-\n-fn issue_37437() {\n-    let hello: &str = \"hello\";\n-    // this should fail...\n-    unsafe { llvm_asm!(\"\" :: \"i\"(hello)) }; //~ ERROR E0669\n-    // but this should succeed.\n-    unsafe { llvm_asm!(\"\" :: \"r\"(hello.as_ptr())) };\n-}\n-\n-fn issue_40187() {\n-    let arr: [u8; 1] = [0; 1];\n-    unsafe {\n-        llvm_asm!(\"movups $1, %xmm0\"::\"m\"(arr)); //~ ERROR E0669\n-    }\n-}\n-\n-fn issue_54067() {\n-    let addr: Option<u32> = Some(123);\n-    unsafe {\n-        llvm_asm!(\"mov sp, $0\"::\"r\"(addr)); //~ ERROR E0669\n-    }\n-}\n-\n-fn multiple_errors() {\n-    let addr: (u32, u32) = (1, 2);\n-    unsafe {\n-        llvm_asm!(\"mov sp, $0\"::\"r\"(addr), //~ ERROR E0669\n-                                \"r\"(\"hello e0669\")); //~ ERROR E0669\n-    }\n-}"}, {"sha": "8bb8a7ae82ebd13ed7c74bbe800c6f010588d977", "filename": "src/test/ui/llvm-asm/inline-asm-bad-operand.stderr", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-operand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-operand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-operand.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,45 +0,0 @@\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:23:29\n-   |\n-LL |         llvm_asm!(\"\" :: \"r\"(\"\"));\n-   |                             ^^\n-\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:28:37\n-   |\n-LL |         llvm_asm!(\"ret\" : : \"{rdi}\"(target));\n-   |                                     ^^^^^^\n-\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:35:34\n-   |\n-LL |     unsafe { llvm_asm!(\"\" :: \"i\"(hello)) };\n-   |                                  ^^^^^\n-\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:43:43\n-   |\n-LL |         llvm_asm!(\"movups $1, %xmm0\"::\"m\"(arr));\n-   |                                           ^^^\n-\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:50:37\n-   |\n-LL |         llvm_asm!(\"mov sp, $0\"::\"r\"(addr));\n-   |                                     ^^^^\n-\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:57:37\n-   |\n-LL |         llvm_asm!(\"mov sp, $0\"::\"r\"(addr),\n-   |                                     ^^^^\n-\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:58:37\n-   |\n-LL | ...                   \"r\"(\"hello e0669\"));\n-   |                           ^^^^^^^^^^^^^\n-\n-error: aborting due to 7 previous errors\n-\n-For more information about this error, try `rustc --explain E0669`."}, {"sha": "46e5a2a80925faa6e4864ab4098330761d5f0aac", "filename": "src/test/ui/llvm-asm/issue-14936.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-14936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-14936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-14936.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,49 +0,0 @@\n-// build-pass\n-#![allow(unused_macros)]\n-#![allow(dead_code)]\n-#![allow(deprecated)] // llvm_asm!\n-#![feature(llvm_asm)]\n-\n-type History = Vec<&'static str>;\n-\n-fn wrap<A>(x:A, which: &'static str, history: &mut History) -> A {\n-    history.push(which);\n-    x\n-}\n-\n-macro_rules! demo {\n-    ( $output_constraint:tt ) => {\n-        {\n-            let mut x: isize = 0;\n-            let y: isize = 1;\n-\n-            let mut history: History = vec![];\n-            unsafe {\n-                llvm_asm!(\"mov ($1), $0\"\n-                          : $output_constraint (*wrap(&mut x, \"out\", &mut history))\n-                          : \"r\"(&wrap(y, \"in\", &mut history))\n-                          :: \"volatile\");\n-            }\n-            assert_eq!((x,y), (1,1));\n-            let b: &[_] = &[\"out\", \"in\"];\n-            assert_eq!(history, b);\n-        }\n-    }\n-}\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-fn main() {\n-    fn out_write_only_expr_then_in_expr() {\n-        demo!(\"=r\")\n-    }\n-\n-    fn out_read_write_expr_then_in_expr() {\n-        demo!(\"+r\")\n-    }\n-\n-    out_write_only_expr_then_in_expr();\n-    out_read_write_expr_then_in_expr();\n-}\n-\n-#[cfg(all(not(target_arch = \"x86\"), not(target_arch = \"x86_64\")))]\n-pub fn main() {}"}, {"sha": "d640828c16dce793b414115b146bb0f4ca0e6a2f", "filename": "src/test/ui/llvm-asm/issue-23458.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-23458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-23458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-23458.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,12 +0,0 @@\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-// compile-flags: -Ccodegen-units=1\n-// build-fail\n-// only-x86_64\n-\n-fn main() {\n-    unsafe {\n-        llvm_asm!(\"int $3\"); //~ ERROR too few operands for instruction\n-                             //~| ERROR invalid operand in inline asm\n-    }\n-}"}, {"sha": "69e458f7ca0989004992625baec017b483fb175c", "filename": "src/test/ui/llvm-asm/issue-23458.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-23458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-23458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-23458.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,20 +0,0 @@\n-error: invalid operand in inline asm: 'int $3'\n-  --> $DIR/issue-23458.rs:9:9\n-   |\n-LL |         llvm_asm!(\"int $3\");\n-   |         ^\n-\n-error: too few operands for instruction\n-  --> $DIR/issue-23458.rs:9:9\n-   |\n-LL |         llvm_asm!(\"int $3\");\n-   |         ^\n-   |\n-note: instantiated into assembly here\n-  --> <inline asm>:1:2\n-   |\n-LL |     int \n-   |     ^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "8ebf0cfe217f631ffd891c454c9032204de99550", "filename": "src/test/ui/llvm-asm/issue-33264.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-33264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-33264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-33264.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,30 +0,0 @@\n-// build-pass\n-// only-x86_64\n-\n-#![allow(dead_code, non_upper_case_globals)]\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-#[repr(C)]\n-pub struct D32x4(f32,f32,f32,f32);\n-\n-impl D32x4 {\n-    fn add(&self, vec: Self) -> Self {\n-        unsafe {\n-            let ret: Self;\n-            llvm_asm!(\"\n-                      movaps $1, %xmm1\n-                      movaps $2, %xmm2\n-                      addps %xmm1, %xmm2\n-                      movaps $xmm1, $0\n-                      \"\n-                      : \"=r\"(ret)\n-                      : \"1\"(self), \"2\"(vec)\n-                      : \"xmm1\", \"xmm2\"\n-                      );\n-            ret\n-        }\n-    }\n-}\n-\n-fn main() { }"}, {"sha": "acc2f3e9f5fe1b5cb8341067430007f58adf060b", "filename": "src/test/ui/llvm-asm/issue-37366.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37366.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,16 +0,0 @@\n-// check-pass\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-macro_rules! interrupt_handler {\n-    () => {\n-        unsafe fn _interrupt_handler() {\n-            llvm_asm!(\"pop  eax\" :::: \"intel\");\n-        }\n-    }\n-}\n-interrupt_handler!{}\n-\n-fn main() {}"}, {"sha": "1c362e8aba058e621b081270e8ee209fe84dd20f", "filename": "src/test/ui/llvm-asm/issue-37433.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37433.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,12 +0,0 @@\n-// build-fail\n-// ignore-emscripten no llvm_asm! support\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    unsafe {\n-        llvm_asm!(\"\" :: \"r\"(\"\"));\n-        //~^ ERROR: invalid value for constraint in inline assembly\n-    }\n-}"}, {"sha": "44a8eb32b7ccbf6f301eb03137ad20e62c43b97f", "filename": "src/test/ui/llvm-asm/issue-37433.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37433.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,9 +0,0 @@\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/issue-37433.rs:9:29\n-   |\n-LL |         llvm_asm!(\"\" :: \"r\"(\"\"));\n-   |                             ^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0669`."}, {"sha": "706b714766150e24dbfaac110eeb33d5c7f20b0d", "filename": "src/test/ui/llvm-asm/issue-51431.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,12 +0,0 @@\n-// build-fail\n-// ignore-emscripten no llvm_asm! support\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    unsafe {\n-        llvm_asm! {\"mov $0,$1\"::\"0\"(\"bx\"),\"1\"(0x00)}\n-        //~^ ERROR: invalid value for constraint in inline assembly\n-    }\n-}"}, {"sha": "35c8c1b66f6a7e7da0baddd3d15ec5263852b7b0", "filename": "src/test/ui/llvm-asm/issue-51431.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,9 +0,0 @@\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/issue-51431.rs:9:37\n-   |\n-LL |         llvm_asm! {\"mov $0,$1\"::\"0\"(\"bx\"),\"1\"(0x00)}\n-   |                                     ^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0669`."}, {"sha": "d9fe7cada278f23c3a281556e95c821e08df2c6d", "filename": "src/test/ui/llvm-asm/issue-53787-inline-assembler-macro.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-53787-inline-assembler-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-53787-inline-assembler-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-53787-inline-assembler-macro.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,27 +0,0 @@\n-// Regression test for Issue #53787: Fix ICE when creating a label in inline assembler with macros.\n-\n-// build-fail\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-macro_rules! fake_jump {\n-    ($id:expr) => {\n-        unsafe {\n-            llvm_asm!(\n-            \"\n-            jmp $0\n-            lea eax, [ebx]\n-            xor eax, 0xDEADBEEF\n-            retn\n-            $0:\n-            \"::\"0\"($id)::\"volatile\", \"intel\");\n-        }\n-    };\n-}\n-\n-fn main() {\n-    fake_jump!(\"FirstFunc\"); //~ ERROR invalid value for constraint in inline assembly\n-    println!(\"Hello, world!\");\n-}"}, {"sha": "fd755e30d586837e4f252efbcf29ac6e1b925062", "filename": "src/test/ui/llvm-asm/issue-53787-inline-assembler-macro.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-53787-inline-assembler-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-53787-inline-assembler-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-53787-inline-assembler-macro.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,9 +0,0 @@\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/issue-53787-inline-assembler-macro.rs:25:16\n-   |\n-LL |     fake_jump!(\"FirstFunc\");\n-   |                ^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0669`."}, {"sha": "6e931b9003a17595deee5a16707179981a345280", "filename": "src/test/ui/llvm-asm/issue-54067.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-54067.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-54067.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-54067.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,13 +0,0 @@\n-// check-pass\n-// ignore-emscripten no llvm_asm! support\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-pub fn boot(addr: Option<u32>) {\n-    unsafe {\n-        llvm_asm!(\"mov sp, $0\"::\"r\" (addr));\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "38b5f1a1862878a79c192d6100bd06f1dbf98553", "filename": "src/test/ui/llvm-asm/issue-62046.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,12 +0,0 @@\n-// build-fail\n-// ignore-emscripten no asm! support\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    unsafe {\n-        llvm_asm!(\"nop\" : \"+r\"(\"r15\"));\n-        //~^ malformed inline assembly\n-    }\n-}"}, {"sha": "ae271afe2625efc9b0799dd6daa03c9607e47257", "filename": "src/test/ui/llvm-asm/issue-62046.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,11 +0,0 @@\n-error[E0668]: malformed inline assembly\n-  --> $DIR/issue-62046.rs:9:9\n-   |\n-LL |         llvm_asm!(\"nop\" : \"+r\"(\"r15\"));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0668`."}, {"sha": "ea1b80cc9b06b69370de9792841abde0b15cc3ff", "filename": "src/test/ui/llvm-asm/issue-69092.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,13 +0,0 @@\n-// build-fail\n-// ignore-emscripten no asm! support\n-// The error message differs slightly between LLVM versions\n-// min-llvm-version: 13.0\n-// Regression test for #69092\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    unsafe { llvm_asm!(\".ascii \\\"Xen\\0\\\"\"); }\n-    //~^ ERROR: expected string\n-}"}, {"sha": "28c5fbbca3c6045dfc27318fa1aa8af4db456e28", "filename": "src/test/ui/llvm-asm/issue-69092.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,14 +0,0 @@\n-error: expected string\n-  --> $DIR/issue-69092.rs:11:14\n-   |\n-LL |     unsafe { llvm_asm!(\".ascii \\\"Xen\\0\\\"\"); }\n-   |              ^\n-   |\n-note: instantiated into assembly here\n-  --> <inline asm>:1:9\n-   |\n-LL |     .ascii \"Xen\n-   |            ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "c15009f15e68c0b6b40a93d065271462ab5782dd", "filename": "src/test/ui/llvm-asm/llvm-asm-bad-clobber.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,27 +0,0 @@\n-// ignore-android\n-// ignore-arm\n-// ignore-aarch64\n-// ignore-s390x\n-// ignore-emscripten\n-// ignore-powerpc\n-// ignore-powerpc64\n-// ignore-powerpc64le\n-// ignore-riscv64\n-// ignore-sparc\n-// ignore-sparc64\n-// ignore-mips\n-// ignore-mips64\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-#[cfg(any(target_arch = \"x86\",\n-          target_arch = \"x86_64\"))]\n-\n-pub fn main() {\n-    unsafe {\n-        // clobber formatted as register input/output\n-        llvm_asm!(\"xor %eax, %eax\" : : : \"{eax}\");\n-        //~^ ERROR clobber should not be surrounded by braces\n-    }\n-}"}, {"sha": "bb72a142853161e1ac3cb83947c534cff08fdfa6", "filename": "src/test/ui/llvm-asm/llvm-asm-bad-clobber.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,9 +0,0 @@\n-error[E0664]: clobber should not be surrounded by braces\n-  --> $DIR/llvm-asm-bad-clobber.rs:24:42\n-   |\n-LL |         llvm_asm!(\"xor %eax, %eax\" : : : \"{eax}\");\n-   |                                          ^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0664`."}, {"sha": "722eb07a270022f2cc98f51a269bed8a53861752", "filename": "src/test/ui/llvm-asm/llvm-asm-concat-src.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-concat-src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-concat-src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-concat-src.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,10 +0,0 @@\n-// run-pass\n-// pretty-expanded FIXME #23616\n-// ignore-emscripten no asm\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-pub fn main() {\n-    unsafe { llvm_asm!(concat!(\"\", \"\")) };\n-}"}, {"sha": "1bccb0b73a89dad8c8ca8d098d157034b982fa7d", "filename": "src/test/ui/llvm-asm/llvm-asm-in-bad-modifier.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,36 +0,0 @@\n-// ignore-s390x\n-// ignore-emscripten\n-// ignore-powerpc\n-// ignore-powerpc64\n-// ignore-powerpc64le\n-// ignore-riscv64\n-// ignore-sparc\n-// ignore-sparc64\n-// ignore-mips\n-// ignore-mips64\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn foo(x: isize) { println!(\"{}\", x); }\n-\n-#[cfg(any(target_arch = \"x86\",\n-          target_arch = \"x86_64\",\n-          target_arch = \"arm\",\n-          target_arch = \"aarch64\"))]\n-pub fn main() {\n-    let x: isize;\n-    let y: isize;\n-    unsafe {\n-        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5)); //~ ERROR operand constraint contains '='\n-        llvm_asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5)); //~ ERROR operand constraint contains '+'\n-    }\n-    foo(x);\n-    foo(y);\n-}\n-\n-#[cfg(not(any(target_arch = \"x86\",\n-              target_arch = \"x86_64\",\n-              target_arch = \"arm\",\n-              target_arch = \"aarch64\")))]\n-pub fn main() {}"}, {"sha": "f6c618e4c1352e8fa4a7f85a0ccb8a2b23e6ef58", "filename": "src/test/ui/llvm-asm/llvm-asm-in-bad-modifier.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,16 +0,0 @@\n-error[E0662]: input operand constraint contains '='\n-  --> $DIR/llvm-asm-in-bad-modifier.rs:25:44\n-   |\n-LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5));\n-   |                                            ^^^^\n-\n-error[E0663]: input operand constraint contains '+'\n-  --> $DIR/llvm-asm-in-bad-modifier.rs:26:44\n-   |\n-LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5));\n-   |                                            ^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0662, E0663.\n-For more information about an error, try `rustc --explain E0662`."}, {"sha": "f7b0fe5566cb7665f66ffdd7014704391b6c1ea4", "filename": "src/test/ui/llvm-asm/llvm-asm-in-moved.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-moved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-moved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-moved.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,32 +0,0 @@\n-// run-pass\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-#![allow(dead_code)]\n-\n-use std::cell::Cell;\n-\n-#[repr(C)]\n-struct NoisyDrop<'a>(&'a Cell<&'static str>);\n-impl<'a> Drop for NoisyDrop<'a> {\n-    fn drop(&mut self) {\n-        self.0.set(\"destroyed\");\n-    }\n-}\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-fn main() {\n-    let status = Cell::new(\"alive\");\n-    {\n-        let _y: Box<NoisyDrop>;\n-        let x = Box::new(NoisyDrop(&status));\n-        unsafe {\n-            llvm_asm!(\"mov $1, $0\" : \"=r\"(_y) : \"r\"(x));\n-        }\n-        assert_eq!(status.get(), \"alive\");\n-    }\n-    assert_eq!(status.get(), \"destroyed\");\n-}\n-\n-#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-fn main() {}"}, {"sha": "2429b512e86d902531bcc2561c62b143c7c86f4e", "filename": "src/test/ui/llvm-asm/llvm-asm-in-out-operand.rs", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-out-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-out-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-out-operand.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,57 +0,0 @@\n-// run-pass\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-unsafe fn next_power_of_2(n: u32) -> u32 {\n-    let mut tmp = n;\n-    llvm_asm!(\"dec $0\" : \"+rm\"(tmp) :: \"cc\");\n-    let mut shift = 1_u32;\n-    while shift <= 16 {\n-        llvm_asm!(\n-            \"shr %cl, $2\n-            or $2, $0\n-            shl $$1, $1\"\n-            : \"+&rm\"(tmp), \"+{ecx}\"(shift) : \"r\"(tmp) : \"cc\"\n-        );\n-    }\n-    llvm_asm!(\"inc $0\" : \"+rm\"(tmp) :: \"cc\");\n-    return tmp;\n-}\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-pub fn main() {\n-    unsafe {\n-        assert_eq!(64, next_power_of_2(37));\n-        assert_eq!(2147483648, next_power_of_2(2147483647));\n-    }\n-\n-    let mut y: isize = 5;\n-    let x: isize;\n-    unsafe {\n-        // Treat the output as initialization.\n-        llvm_asm!(\n-            \"shl $2, $1\n-            add $3, $1\n-            mov $1, $0\"\n-            : \"=r\"(x), \"+r\"(y) : \"i\"(3_usize), \"ir\"(7_usize) : \"cc\"\n-        );\n-    }\n-    assert_eq!(x, 47);\n-    assert_eq!(y, 47);\n-\n-    let mut x = x + 1;\n-    assert_eq!(x, 48);\n-\n-    unsafe {\n-        // Assignment to mutable.\n-        // Early clobber \"&\":\n-        // Forbids the use of a single register by both operands.\n-        llvm_asm!(\"shr $$2, $1; add $1, $0\" : \"+&r\"(x) : \"r\"(x) : \"cc\");\n-    }\n-    assert_eq!(x, 60);\n-}\n-\n-#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-pub fn main() {}"}, {"sha": "441c62b04b5615694ada94c48e88bc4e51549ef2", "filename": "src/test/ui/llvm-asm/llvm-asm-indirect-memory.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-indirect-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-indirect-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-indirect-memory.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,44 +0,0 @@\n-// run-pass\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-fn read(ptr: &u32) -> u32 {\n-    let out: u32;\n-    unsafe {\n-        llvm_asm!(\"mov $1, $0\" : \"=r\" (out) : \"*m\" (ptr));\n-    }\n-    out\n-}\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-fn write(ptr: &mut u32, val: u32) {\n-    unsafe {\n-        llvm_asm!(\"mov $1, $0\" : \"=*m\" (ptr) : \"r\" (val));\n-    }\n-}\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-fn replace(ptr: &mut u32, val: u32) -> u32 {\n-    let out: u32;\n-    unsafe {\n-        llvm_asm!(\"mov $0, $1; mov $2, $0\" : \"+*m\" (ptr), \"=&r\" (out) : \"r\" (val));\n-    }\n-    out\n-}\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-pub fn main() {\n-    let a = 1;\n-    assert_eq!(read(&a), 1);\n-    let mut b = 2;\n-    write(&mut b, 3);\n-    assert_eq!(b, 3);\n-    let mut c = 4;\n-    assert_eq!(replace(&mut c, 5), 4);\n-    assert_eq!(c, 5);\n-}\n-\n-#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-pub fn main() {}"}, {"sha": "ecd0c2f9734f15b9bcd722bd1ef1737180d03d01", "filename": "src/test/ui/llvm-asm/llvm-asm-literal-escaping.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-literal-escaping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-literal-escaping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-literal-escaping.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,13 +0,0 @@\n-// build-pass\n-// only-x86_64\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    unsafe {\n-        // \"nop\" :: \"r\"(x) : \"eax\" : \"volatile\"\n-        let x = 10;\n-        llvm_asm!(\"\\x6Eop\" :: \"\\x72\"(x) : \"\\x65ax\" : \"\\x76olatile\");\n-    }\n-}"}, {"sha": "04f0972ed4b2873624f5039bebd2ba26dd885fc3", "filename": "src/test/ui/llvm-asm/llvm-asm-misplaced-option.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,37 +0,0 @@\n-// check-pass\n-// ignore-android\n-// ignore-arm\n-// ignore-aarch64\n-// ignore-s390x\n-// ignore-emscripten\n-// ignore-powerpc\n-// ignore-powerpc64\n-// ignore-powerpc64le\n-// ignore-riscv64\n-// ignore-sparc\n-// ignore-sparc64\n-// ignore-mips\n-// ignore-mips64\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-#[cfg(any(target_arch = \"x86\",\n-          target_arch = \"x86_64\"))]\n-fn main() {\n-    // assignment not dead\n-    let mut x: isize = 0;\n-    unsafe {\n-        // extra colon\n-        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize), \"0\"(x) : : \"cc\");\n-        //~^ WARNING unrecognized option\n-    }\n-    assert_eq!(x, 5);\n-\n-    unsafe {\n-        // comma in place of a colon\n-        llvm_asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n-        //~^ WARNING expected a clobber, found an option\n-    }\n-    assert_eq!(x, 13);\n-}"}, {"sha": "d1250d99b8f33b7e9dac78a1f217cdf4b8df62d1", "filename": "src/test/ui/llvm-asm/llvm-asm-misplaced-option.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,14 +0,0 @@\n-warning: unrecognized option\n-  --> $DIR/llvm-asm-misplaced-option.rs:26:69\n-   |\n-LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize), \"0\"(x) : : \"cc\");\n-   |                                                                     ^^^^\n-\n-warning: expected a clobber, found an option\n-  --> $DIR/llvm-asm-misplaced-option.rs:33:85\n-   |\n-LL |         llvm_asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n-   |                                                                                     ^^^^^^^^^^\n-\n-warning: 2 warnings emitted\n-"}, {"sha": "7f51b50f2586f096574014cc9a9beece033d0622", "filename": "src/test/ui/llvm-asm/llvm-asm-out-assign-imm.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,36 +0,0 @@\n-// ignore-s390x\n-// ignore-emscripten\n-// ignore-powerpc\n-// ignore-powerpc64\n-// ignore-powerpc64le\n-// ignore-riscv64\n-// ignore-sparc\n-// ignore-sparc64\n-// ignore-mips\n-// ignore-mips64\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn foo(x: isize) { println!(\"{}\", x); }\n-\n-#[cfg(any(target_arch = \"x86\",\n-          target_arch = \"x86_64\",\n-          target_arch = \"arm\",\n-          target_arch = \"aarch64\"))]\n-pub fn main() {\n-    let x: isize;\n-    x = 1;\n-    foo(x);\n-    unsafe {\n-        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n-        //~^ ERROR cannot assign twice to immutable variable `x`\n-    }\n-    foo(x);\n-}\n-\n-#[cfg(not(any(target_arch = \"x86\",\n-              target_arch = \"x86_64\",\n-              target_arch = \"arm\",\n-              target_arch = \"aarch64\")))]\n-pub fn main() {}"}, {"sha": "390c032460127fa82227f7b084c318eb54a79fe0", "filename": "src/test/ui/llvm-asm/llvm-asm-out-assign-imm.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,14 +0,0 @@\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/llvm-asm-out-assign-imm.rs:26:39\n-   |\n-LL |     let x: isize;\n-   |         - help: consider making this binding mutable: `mut x`\n-LL |     x = 1;\n-   |     ----- first assignment to `x`\n-...\n-LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n-   |                                       ^ cannot assign twice to immutable variable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0384`."}, {"sha": "c5f4a9a198e51757d9afdf7a081ddaf6ee31bac3", "filename": "src/test/ui/llvm-asm/llvm-asm-out-assign.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,26 +0,0 @@\n-// run-pass\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!s\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-pub fn main() {\n-    let x: isize;\n-    unsafe {\n-        // Treat the output as initialization.\n-        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize));\n-    }\n-    assert_eq!(x, 5);\n-\n-    let mut x = x + 1;\n-    assert_eq!(x, 6);\n-\n-    unsafe {\n-        // Assignment to mutable.\n-        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x + 7));\n-    }\n-    assert_eq!(x, 13);\n-}\n-\n-#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-pub fn main() {}"}, {"sha": "c74d156cf3eaea43df7e43d4ce0e407f93aae17d", "filename": "src/test/ui/llvm-asm/llvm-asm-out-no-modifier.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,33 +0,0 @@\n-// ignore-s390x\n-// ignore-emscripten\n-// ignore-powerpc\n-// ignore-powerpc64\n-// ignore-powerpc64le\n-// ignore-riscv64\n-// ignore-sparc\n-// ignore-sparc64\n-// ignore-mips\n-// ignore-mips64\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn foo(x: isize) { println!(\"{}\", x); }\n-\n-#[cfg(any(target_arch = \"x86\",\n-          target_arch = \"x86_64\",\n-          target_arch = \"arm\",\n-          target_arch = \"aarch64\"))]\n-pub fn main() {\n-    let x: isize;\n-    unsafe {\n-        llvm_asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5)); //~ ERROR output operand constraint lacks '='\n-    }\n-    foo(x);\n-}\n-\n-#[cfg(not(any(target_arch = \"x86\",\n-              target_arch = \"x86_64\",\n-              target_arch = \"arm\",\n-              target_arch = \"aarch64\")))]\n-pub fn main() {}"}, {"sha": "f426170ad87385cf384fe3c65966348f6bf59147", "filename": "src/test/ui/llvm-asm/llvm-asm-out-no-modifier.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,9 +0,0 @@\n-error[E0661]: output operand constraint lacks '=' or '+'\n-  --> $DIR/llvm-asm-out-no-modifier.rs:24:34\n-   |\n-LL |         llvm_asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5));\n-   |                                  ^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0661`."}, {"sha": "161add7e56a763deb9c127398b48968359f355c5", "filename": "src/test/ui/llvm-asm/llvm-asm-out-read-uninit.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,34 +0,0 @@\n-// ignore-s390x\n-// ignore-emscripten\n-// ignore-powerpc\n-// ignore-powerpc64\n-// ignore-powerpc64le\n-// ignore-riscv64\n-// ignore-sparc\n-// ignore-sparc64\n-// ignore-mips\n-// ignore-mips64\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn foo(x: isize) { println!(\"{}\", x); }\n-\n-#[cfg(any(target_arch = \"x86\",\n-          target_arch = \"x86_64\",\n-          target_arch = \"arm\",\n-          target_arch = \"aarch64\"))]\n-pub fn main() {\n-    let x: isize;\n-    unsafe {\n-        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n-        //~^ ERROR use of possibly-uninitialized variable: `x`\n-    }\n-    foo(x);\n-}\n-\n-#[cfg(not(any(target_arch = \"x86\",\n-              target_arch = \"x86_64\",\n-              target_arch = \"arm\",\n-              target_arch = \"aarch64\")))]\n-pub fn main() {}"}, {"sha": "7e57dc45aad49a907d5644c668a4b86ae786c235", "filename": "src/test/ui/llvm-asm/llvm-asm-out-read-uninit.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,9 +0,0 @@\n-error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/llvm-asm-out-read-uninit.rs:24:48\n-   |\n-LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n-   |                                                ^ use of possibly-uninitialized `x`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0381`."}, {"sha": "cdd0b943b71e6f271d88684adcaa4b440a97fd9b", "filename": "src/test/ui/llvm-asm/llvm-asm-parse-errors.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.rs?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,16 +0,0 @@\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    llvm_asm!(); //~ ERROR requires a string literal as an argument\n-    llvm_asm!(\"nop\" : struct); //~ ERROR expected string literal\n-    llvm_asm!(\"mov %eax, $$0x2\" : struct); //~ ERROR expected string literal\n-    llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\" struct); //~ ERROR expected `(`\n-    llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\"(struct)); //~ ERROR expected expression\n-    llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : struct); //~ ERROR expected string literal\n-    llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\" struct); //~ ERROR expected `(`\n-    llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(struct)); //~ ERROR expected expression\n-    llvm_asm!(\"mov $$0x200, %eax\" : : : struct); //~ ERROR expected string literal\n-    llvm_asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct); //~ ERROR expected string literal\n-    llvm_asm!(123); //~ ERROR inline assembly must be a string literal\n-}"}, {"sha": "715d05beaaee923497339b093f4d72b5a50cdcd5", "filename": "src/test/ui/llvm-asm/llvm-asm-parse-errors.stderr", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76577cb8ab9998992e2808e121584d1dab2d61e/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.stderr?ref=a76577cb8ab9998992e2808e121584d1dab2d61e", "patch": "@@ -1,68 +0,0 @@\n-error: macro requires a string literal as an argument\n-  --> $DIR/llvm-asm-parse-errors.rs:5:5\n-   |\n-LL |     llvm_asm!();\n-   |     ^^^^^^^^^^^ string literal required\n-\n-error: expected string literal\n-  --> $DIR/llvm-asm-parse-errors.rs:6:23\n-   |\n-LL |     llvm_asm!(\"nop\" : struct);\n-   |                       ^^^^^^ not a string literal\n-\n-error: expected string literal\n-  --> $DIR/llvm-asm-parse-errors.rs:7:35\n-   |\n-LL |     llvm_asm!(\"mov %eax, $$0x2\" : struct);\n-   |                                   ^^^^^^ not a string literal\n-\n-error: expected `(`, found keyword `struct`\n-  --> $DIR/llvm-asm-parse-errors.rs:8:44\n-   |\n-LL |     llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\" struct);\n-   |                                            ^^^^^^ expected `(`\n-\n-error: expected expression, found keyword `struct`\n-  --> $DIR/llvm-asm-parse-errors.rs:9:44\n-   |\n-LL |     llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\"(struct));\n-   |                                            ^^^^^^ expected expression\n-\n-error: expected string literal\n-  --> $DIR/llvm-asm-parse-errors.rs:10:49\n-   |\n-LL |     llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : struct);\n-   |                                                 ^^^^^^ not a string literal\n-\n-error: expected `(`, found keyword `struct`\n-  --> $DIR/llvm-asm-parse-errors.rs:11:56\n-   |\n-LL |     llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\" struct);\n-   |                                                        ^^^^^^ expected `(`\n-\n-error: expected expression, found keyword `struct`\n-  --> $DIR/llvm-asm-parse-errors.rs:12:56\n-   |\n-LL |     llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(struct));\n-   |                                                        ^^^^^^ expected expression\n-\n-error: expected string literal\n-  --> $DIR/llvm-asm-parse-errors.rs:13:41\n-   |\n-LL |     llvm_asm!(\"mov $$0x200, %eax\" : : : struct);\n-   |                                         ^^^^^^ not a string literal\n-\n-error: expected string literal\n-  --> $DIR/llvm-asm-parse-errors.rs:14:50\n-   |\n-LL |     llvm_asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct);\n-   |                                                  ^^^^^^ not a string literal\n-\n-error: inline assembly must be a string literal\n-  --> $DIR/llvm-asm-parse-errors.rs:15:15\n-   |\n-LL |     llvm_asm!(123);\n-   |               ^^^\n-\n-error: aborting due to 11 previous errors\n-"}, {"sha": "98f64aa6f8025a212c2f18e189dca42e68adbc9b", "filename": "src/test/ui/macros/macros-nonfatal-errors.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs?ref=61c233bac354df524f1e6daf29cf9521a6bb3de6", "patch": "@@ -3,11 +3,9 @@\n // test that errors in a (selection) of macros don't kill compilation\n // immediately, so that we get more errors listed at a time.\n \n-#![feature(llvm_asm)]\n #![feature(trace_macros, concat_idents)]\n #![feature(stmt_expr_attributes, arbitrary_enum_discriminant)]\n #![feature(derive_default_enum)]\n-#![allow(deprecated)] // llvm_asm!\n \n use std::arch::asm;\n "}, {"sha": "79e8db9c1d429866e509112373a21be657bcd857", "filename": "src/test/ui/macros/macros-nonfatal-errors.stderr", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr?ref=61c233bac354df524f1e6daf29cf9521a6bb3de6", "patch": "@@ -1,41 +1,41 @@\n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:16:5\n+  --> $DIR/macros-nonfatal-errors.rs:14:5\n    |\n LL |     #[default]\n    |     ^^^^^^^^^^\n \n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:21:36\n+  --> $DIR/macros-nonfatal-errors.rs:19:36\n    |\n LL | struct DefaultInnerAttrTupleStruct(#[default] ());\n    |                                    ^^^^^^^^^^\n \n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:25:1\n+  --> $DIR/macros-nonfatal-errors.rs:23:1\n    |\n LL | #[default]\n    | ^^^^^^^^^^\n \n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:29:1\n+  --> $DIR/macros-nonfatal-errors.rs:27:1\n    |\n LL | #[default]\n    | ^^^^^^^^^^\n \n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:39:11\n+  --> $DIR/macros-nonfatal-errors.rs:37:11\n    |\n LL |     Foo = #[default] 0,\n    |           ^^^^^^^^^^\n \n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:40:14\n+  --> $DIR/macros-nonfatal-errors.rs:38:14\n    |\n LL |     Bar([u8; #[default] 1]),\n    |              ^^^^^^^^^^\n \n error: no default declared\n-  --> $DIR/macros-nonfatal-errors.rs:45:10\n+  --> $DIR/macros-nonfatal-errors.rs:43:10\n    |\n LL | #[derive(Default)]\n    |          ^^^^^^^\n@@ -44,7 +44,7 @@ LL | #[derive(Default)]\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: multiple declared defaults\n-  --> $DIR/macros-nonfatal-errors.rs:51:10\n+  --> $DIR/macros-nonfatal-errors.rs:49:10\n    |\n LL | #[derive(Default)]\n    |          ^^^^^^^\n@@ -62,15 +62,15 @@ LL |     Baz,\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `#[default]` attribute does not accept a value\n-  --> $DIR/macros-nonfatal-errors.rs:63:5\n+  --> $DIR/macros-nonfatal-errors.rs:61:5\n    |\n LL |     #[default = 1]\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: try using `#[default]`\n \n error: multiple `#[default]` attributes\n-  --> $DIR/macros-nonfatal-errors.rs:71:5\n+  --> $DIR/macros-nonfatal-errors.rs:69:5\n    |\n LL |     #[default]\n    |     ---------- `#[default]` used here\n@@ -81,13 +81,13 @@ LL |     Foo,\n    |\n    = note: only one `#[default]` attribute is needed\n help: try removing this\n-  --> $DIR/macros-nonfatal-errors.rs:70:5\n+  --> $DIR/macros-nonfatal-errors.rs:68:5\n    |\n LL |     #[default]\n    |     ^^^^^^^^^^\n \n error: multiple `#[default]` attributes\n-  --> $DIR/macros-nonfatal-errors.rs:81:5\n+  --> $DIR/macros-nonfatal-errors.rs:79:5\n    |\n LL |     #[default]\n    |     ---------- `#[default]` used here\n@@ -99,7 +99,7 @@ LL |     Foo,\n    |\n    = note: only one `#[default]` attribute is needed\n help: try removing these\n-  --> $DIR/macros-nonfatal-errors.rs:78:5\n+  --> $DIR/macros-nonfatal-errors.rs:76:5\n    |\n LL |     #[default]\n    |     ^^^^^^^^^^\n@@ -109,15 +109,15 @@ LL |     #[default]\n    |     ^^^^^^^^^^\n \n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:88:5\n+  --> $DIR/macros-nonfatal-errors.rs:86:5\n    |\n LL |     Foo {},\n    |     ^^^\n    |\n    = help: consider a manual implementation of `Default`\n \n error: default variant must be exhaustive\n-  --> $DIR/macros-nonfatal-errors.rs:96:5\n+  --> $DIR/macros-nonfatal-errors.rs:94:5\n    |\n LL |     #[non_exhaustive]\n    |     ----------------- declared `#[non_exhaustive]` here\n@@ -127,51 +127,45 @@ LL |     Foo,\n    = help: consider a manual implementation of `Default`\n \n error: asm template must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:101:10\n+  --> $DIR/macros-nonfatal-errors.rs:99:10\n    |\n LL |     asm!(invalid);\n    |          ^^^^^^^\n \n-error: inline assembly must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:102:15\n-   |\n-LL |     llvm_asm!(invalid);\n-   |               ^^^^^^^\n-\n error: concat_idents! requires ident args\n-  --> $DIR/macros-nonfatal-errors.rs:104:5\n+  --> $DIR/macros-nonfatal-errors.rs:102:5\n    |\n LL |     concat_idents!(\"not\", \"idents\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:106:17\n+  --> $DIR/macros-nonfatal-errors.rs:104:17\n    |\n LL |     option_env!(invalid);\n    |                 ^^^^^^^\n \n error: expected string literal\n-  --> $DIR/macros-nonfatal-errors.rs:107:10\n+  --> $DIR/macros-nonfatal-errors.rs:105:10\n    |\n LL |     env!(invalid);\n    |          ^^^^^^^\n \n error: expected string literal\n-  --> $DIR/macros-nonfatal-errors.rs:108:10\n+  --> $DIR/macros-nonfatal-errors.rs:106:10\n    |\n LL |     env!(foo, abr, baz);\n    |          ^^^\n \n error: environment variable `RUST_HOPEFULLY_THIS_DOESNT_EXIST` not defined\n-  --> $DIR/macros-nonfatal-errors.rs:109:5\n+  --> $DIR/macros-nonfatal-errors.rs:107:5\n    |\n LL |     env!(\"RUST_HOPEFULLY_THIS_DOESNT_EXIST\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: format argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:111:13\n+  --> $DIR/macros-nonfatal-errors.rs:109:13\n    |\n LL |     format!(invalid);\n    |             ^^^^^^^\n@@ -182,44 +176,50 @@ LL |     format!(\"{}\", invalid);\n    |             +++++\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:113:14\n+  --> $DIR/macros-nonfatal-errors.rs:111:14\n    |\n LL |     include!(invalid);\n    |              ^^^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:115:18\n+  --> $DIR/macros-nonfatal-errors.rs:113:18\n    |\n LL |     include_str!(invalid);\n    |                  ^^^^^^^\n \n error: couldn't read $DIR/i'd be quite surprised if a file with this name existed: $FILE_NOT_FOUND_MSG (os error 2)\n-  --> $DIR/macros-nonfatal-errors.rs:116:5\n+  --> $DIR/macros-nonfatal-errors.rs:114:5\n    |\n LL |     include_str!(\"i'd be quite surprised if a file with this name existed\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:117:20\n+  --> $DIR/macros-nonfatal-errors.rs:115:20\n    |\n LL |     include_bytes!(invalid);\n    |                    ^^^^^^^\n \n error: couldn't read $DIR/i'd be quite surprised if a file with this name existed: $FILE_NOT_FOUND_MSG (os error 2)\n-  --> $DIR/macros-nonfatal-errors.rs:118:5\n+  --> $DIR/macros-nonfatal-errors.rs:116:5\n    |\n LL |     include_bytes!(\"i'd be quite surprised if a file with this name existed\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `include_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trace_macros! accepts only `true` or `false`\n-  --> $DIR/macros-nonfatal-errors.rs:120:5\n+  --> $DIR/macros-nonfatal-errors.rs:118:5\n    |\n LL |     trace_macros!(invalid);\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n+error: cannot find macro `llvm_asm` in this scope\n+  --> $DIR/macros-nonfatal-errors.rs:100:5\n+   |\n+LL |     llvm_asm!(invalid);\n+   |     ^^^^^^^^\n+\n error: aborting due to 27 previous errors\n "}, {"sha": "2d59c9f29b12b732dd91bd06225d200b410d431f", "filename": "src/test/ui/runtime/out-of-stack.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Fruntime%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Fruntime%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fruntime%2Fout-of-stack.rs?ref=61c233bac354df524f1e6daf29cf9521a6bb3de6", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(unused_must_use)]\n #![allow(unconditional_recursion)]\n-#![allow(deprecated)] // llvm_asm!\n // ignore-android: FIXME (#20004)\n // ignore-emscripten no processes\n // ignore-sgx no processes"}, {"sha": "633f1edb26cef567dca1bd1a7194a07b0be1a26e", "filename": "src/test/ui/unsafe/inline_asm.mir.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Funsafe%2Finline_asm.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Funsafe%2Finline_asm.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Finline_asm.mir.stderr?ref=61c233bac354df524f1e6daf29cf9521a6bb3de6", "patch": "@@ -1,20 +1,11 @@\n error[E0133]: use of inline assembly is unsafe and requires unsafe function or block\n-  --> $DIR/inline_asm.rs:11:5\n+  --> $DIR/inline_asm.rs:8:5\n    |\n LL |     asm!(\"nop\");\n    |     ^^^^^^^^^^^ use of inline assembly\n    |\n    = note: inline assembly is entirely unchecked and can cause undefined behavior\n \n-error[E0133]: use of inline assembly is unsafe and requires unsafe function or block\n-  --> $DIR/inline_asm.rs:12:5\n-   |\n-LL |     llvm_asm!(\"nop\");\n-   |     ^^^^^^^^^^^^^^^^ use of inline assembly\n-   |\n-   = note: inline assembly is entirely unchecked and can cause undefined behavior\n-   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0133`."}, {"sha": "12c7efe4f50b6f802d015d6376d0339d311f4938", "filename": "src/test/ui/unsafe/inline_asm.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Funsafe%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Funsafe%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Finline_asm.rs?ref=61c233bac354df524f1e6daf29cf9521a6bb3de6", "patch": "@@ -2,12 +2,8 @@\n // [thir]compile-flags: -Z thir-unsafeck\n // needs-asm-support\n \n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n use std::arch::asm;\n \n fn main() {\n     asm!(\"nop\"); //~ ERROR use of inline assembly is unsafe and requires unsafe function or block\n-    llvm_asm!(\"nop\"); //~ ERROR use of inline assembly is unsafe and requires unsafe function or block\n }"}, {"sha": "633f1edb26cef567dca1bd1a7194a07b0be1a26e", "filename": "src/test/ui/unsafe/inline_asm.thir.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Funsafe%2Finline_asm.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61c233bac354df524f1e6daf29cf9521a6bb3de6/src%2Ftest%2Fui%2Funsafe%2Finline_asm.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Finline_asm.thir.stderr?ref=61c233bac354df524f1e6daf29cf9521a6bb3de6", "patch": "@@ -1,20 +1,11 @@\n error[E0133]: use of inline assembly is unsafe and requires unsafe function or block\n-  --> $DIR/inline_asm.rs:11:5\n+  --> $DIR/inline_asm.rs:8:5\n    |\n LL |     asm!(\"nop\");\n    |     ^^^^^^^^^^^ use of inline assembly\n    |\n    = note: inline assembly is entirely unchecked and can cause undefined behavior\n \n-error[E0133]: use of inline assembly is unsafe and requires unsafe function or block\n-  --> $DIR/inline_asm.rs:12:5\n-   |\n-LL |     llvm_asm!(\"nop\");\n-   |     ^^^^^^^^^^^^^^^^ use of inline assembly\n-   |\n-   = note: inline assembly is entirely unchecked and can cause undefined behavior\n-   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0133`."}]}