{"sha": "d440a569bb34ef31af7eff26105a115120a85e80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NDBhNTY5YmIzNGVmMzFhZjdlZmYyNjEwNWExMTUxMjBhODVlODA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-10T09:26:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-10T09:26:24Z"}, "message": "auto merge of #12084 : alexcrichton/rust/codegen-opts, r=cmr\n\nMove them all behind a new -C switch. This migrates some -Z flags and some\r\ntop-level flags behind this -C codegen option.\r\n\r\nThe -C flag takes values of the form \"-C name=value\" where the \"=value\" is\r\noptional for some flags.\r\n\r\nFlags affected:\r\n\r\n* --llvm-args           => -C llvm-args\r\n* --passes              => -C passes\r\n* --ar                  => -C ar\r\n* --linker              => -C linker\r\n* --link-args           => -C link-args\r\n* --target-cpu          => -C target-cpu\r\n* --target-feature      => -C target-fature\r\n* --android-cross-path  => -C android-cross-path\r\n* --save-temps          => -C save-temps\r\n* --no-rpath            => -C no-rpath\r\n* -Z no-prepopulate     => -C no-prepopulate-passes\r\n* -Z no-vectorize-loops => -C no-vectorize-loops\r\n* -Z no-vectorize-slp   => -C no-vectorize-slp\r\n* -Z soft-float         => -C soft-float\r\n* -Z gen-crate-map      => -C gen-crate-map\r\n* -Z prefer-dynamic     => -C prefer-dynamic\r\n* -Z no-integrated-as   => -C no-integrated-as\r\n\r\nAs a bonus, this also promotes the -Z extra-debug-info flag to a first class -g\r\nor --debuginfo flag.\r\n\r\n* -Z debug-info         => removed\r\n* -Z extra-debug-info   => -g or --debuginfo\r\n\r\nCloses #9770\r\nCloses #12000", "tree": {"sha": "0e08390750da8f04bd326a4c40df2733c10cf383", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e08390750da8f04bd326a4c40df2733c10cf383"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d440a569bb34ef31af7eff26105a115120a85e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d440a569bb34ef31af7eff26105a115120a85e80", "html_url": "https://github.com/rust-lang/rust/commit/d440a569bb34ef31af7eff26105a115120a85e80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d440a569bb34ef31af7eff26105a115120a85e80/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3a87a7f1ff8089742bc8dc45b812dd844109034", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3a87a7f1ff8089742bc8dc45b812dd844109034", "html_url": "https://github.com/rust-lang/rust/commit/f3a87a7f1ff8089742bc8dc45b812dd844109034"}, {"sha": "071ee96277845af99bde5e7e15ccbb0cff9be0a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/071ee96277845af99bde5e7e15ccbb0cff9be0a7", "html_url": "https://github.com/rust-lang/rust/commit/071ee96277845af99bde5e7e15ccbb0cff9be0a7"}], "stats": {"total": 695, "additions": 393, "deletions": 302}, "files": [{"sha": "49e02a63b7dfb675b750111d5f7fad5317659a60", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -141,7 +141,7 @@ endif\n # worry about the distribution of one file (with its native dynamic\n # dependencies)\n RUSTFLAGS_STAGE0 += -Z prefer-dynamic\n-RUSTFLAGS_STAGE1 += -Z prefer-dynamic\n+RUSTFLAGS_STAGE1 += -C prefer-dynamic\n \n # platform-specific auto-configuration\n include $(CFG_SRC_DIR)mk/platform.mk"}, {"sha": "8dc795cfd3e1b3d3fdee31bcd41605d60df5cd48", "filename": "man/rustc.1", "status": "modified", "additions": 76, "deletions": 22, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/man%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/man%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustc.1?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -27,18 +27,15 @@ Display this message\n \\fB\\-L\\fR PATH\n Add a directory to the library search path\n .TP\n-\\fB\\-\\-linker\\fR LINKER\n-Program to use for linking instead of the default\n-.TP\n-\\fB\\-\\-link-args\\fR FLAGS\n-A space-separated list of flags passed to the linker\n-.TP\n \\fB\\-\\-ls\\fR\n List the symbols defined by a library crate\n .TP\n \\fB\\-\\-no\\-trans\\fR\n Run all passes except translation; no output\n .TP\n+\\fB\\-g\\fR, \\fB\\-\\-debuginfo\\fR\n+Emit DWARF debug information into object files generated.\n+.TP\n \\fB\\-O\\fR\n Equivalent to \\fI\\-\\-opt\\-level=2\\fR\n .TP\n@@ -48,11 +45,6 @@ Write output to <filename>. Ignored if more than one --emit is specified.\n \\fB\\-\\-opt\\-level\\fR LEVEL\n Optimize with possible levels 0-3\n .TP\n-\\fB\\-\\-passes\\fR NAMES\n-Comma- or space-separated list of optimization passes. Overrides\n-the default passes for the optimization level. A value of 'list'\n-will list the available passes.\n-.TP\n \\fB\\-\\-out\\-dir\\fR DIR\n Write output to compiler-chosen filename in <dir>. Ignored if -o is specified.\n (default the current directory)\n@@ -66,9 +58,6 @@ Pretty-print the input instead of compiling; valid types are: normal\n expanded, with type annotations), or identified (fully parenthesized,\n AST nodes and blocks with IDs)\n .TP\n-\\fB\\-\\-save\\-temps\\fR\n-Write intermediate files (.bc, .opt.bc, .o) in addition to normal output\n-.TP\n \\fB\\-\\-sysroot\\fR PATH\n Override the system root\n .TP\n@@ -80,12 +69,6 @@ Target triple cpu-manufacturer-kernel[-os] to compile for (see\n http://sources.redhat.com/autobook/autobook/autobook_17.html\n for details)\n .TP\n-\\fB\\-\\-target-feature\\fR TRIPLE\n-Target-specific attributes (see llc -mattr=help for details)\n-.TP\n-\\fB\\-\\-android-cross-path\\fR PATH\n-The path to the Android NDK\n-.TP\n \\fB\\-W\\fR help\n Print 'lint' options and default settings\n .TP\n@@ -104,9 +87,80 @@ Set lint forbidden\n \\fB\\-Z\\fR FLAG\n Set internal debugging options. Use \"-Z help\" to print available options.\n .TP\n+\\fB\\-C\\fR FLAG[=VAL], \\fB\\-\\-codegen\\fR FLAG[=VAL]\n+Set a codegen-related flag to the value specifie.d Use \"-C help\" to print\n+available flags. See CODEGEN OPTIONS below\n+.TP\n \\fB\\-v\\fR, \\fB\\-\\-version\\fR\n Print version info and exit\n \n+.SH CODEGEN OPTIONS\n+\n+.TP\n+\\fBar\\fR=/path/to/ar\n+Path to the archive utility to use when assembling archives.\n+.TP\n+\\fBlinker\\fR=/path/to/cc\n+Path to the linker utility to use when linking libraries, executables, and\n+objects.\n+.TP\n+\\fBlink-args\\fR='-flag1 -flag2'\n+A space-separated list of extra arguments to pass to the linker when the linker\n+is invoked.\n+.TP\n+\\fBtarget-cpu\\fR=help\n+Selects a target processor. If the value is 'help', then a list of available\n+cpus is printed.\n+.TP\n+\\fBtarget-feature\\fR='+feature1 -feature2'\n+A space-separated list of features to enable or disable for the target. A\n+preceding '+' enables a feature while a preceding '-' disables it. Available\n+features can be discovered through target-cpu=help.\n+.TP\n+\\fBpasses\\fR=list\n+A space-separated list of extra LLVM passes to run. A value of 'list' will\n+cause rustc to print all known passes and exit. The passes specified are\n+appended at the end of the normal pass manager.\n+.TP\n+\\fBllvm-args\\fR='-arg1 -arg2'\n+A space-separted list of argument to pass through to LLVM.\n+.TP\n+\\fBsave-temps\\fR\n+If specified, the compiler will save more files (.bc, .o, .no-opt.bc) generated\n+throughout compilation in the output directory.\n+.TP\n+\\fBandroid-cross-path\\fR=path/to/ndk/bin\n+Directory to find the Android NDK cross-compilation tools\n+.TP\n+\\fBno-rpath\\fR\n+If specified, then the rpath value for dynamic libraries will not be set in\n+either dynamic library or executable outputs.\n+.TP\n+\\fBno-prepopulate-passes\\fR\n+Suppresses pre-population of the LLVM pass manager that is run over the module.\n+.TP\n+\\fBno-vectorize-loops\\fR\n+Suppresses running the loop vectorization LLVM pass, regardless of optimization\n+level.\n+.TP\n+\\fBno-vectorize-slp\\fR\n+Suppresses running the LLVM SLP vectorization pass, regardless of optimization\n+level.\n+.TP\n+\\fBsoft-float\\fR\n+Generates software floating point library calls instead of hardware\n+instructions.\n+.TP\n+\\fBgen-crate-map\\fR\n+Forces generate of a toplevel crate map. May be required for logging to work\n+when rust is embedded into another application.\n+.TP\n+\\fBprefer-dynamic\\fR\n+Prefers dynamic linking to static linking.\n+.TP\n+\\fBno-integrated-as\\fR\n+Force usage of an external assembler rather than LLVM's integrated one.\n+\n .SH \"EXAMPLES\"\n To build an executable from a source file with a main function:\n     $ rustc -o hello hello.rs\n@@ -117,8 +171,8 @@ To build a library from a source file:\n To build either with a crate (.rs) file:\n     $ rustc hello.rs\n \n-To build an executable with debug info (experimental):\n-    $ rustc -Z debug-info -o hello hello.rs\n+To build an executable with debug info:\n+    $ rustc -g -o hello hello.rs\n \n .SH \"SEE ALSO\"\n "}, {"sha": "5a69013892c9675402c8871ae4aa2daadd05008c", "filename": "mk/platform.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -300,8 +300,8 @@ CFG_PATH_MUNGE_arm-linux-androideabi := true\n CFG_LDPATH_arm-linux-androideabi :=\n CFG_RUN_arm-linux-androideabi=\n CFG_RUN_TARG_arm-linux-androideabi=\n-RUSTC_FLAGS_arm-linux-androideabi :=--android-cross-path=$(CFG_ANDROID_CROSS_PATH)\n-RUSTC_CROSS_FLAGS_arm-linux-androideabi :=--android-cross-path=$(CFG_ANDROID_CROSS_PATH)\n+RUSTC_FLAGS_arm-linux-androideabi :=-C android-cross-path=$(CFG_ANDROID_CROSS_PATH)\n+RUSTC_CROSS_FLAGS_arm-linux-androideabi :=-C android-cross-path=$(CFG_ANDROID_CROSS_PATH)\n \n # arm-unknown-linux-gnueabihf configuration\n CROSS_PREFIX_arm-unknown-linux-gnueabihf=arm-linux-gnueabihf-"}, {"sha": "f70fdd1ffa64310a30d3aa789d573822633a956e", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -530,7 +530,7 @@ CTEST_RUSTC_FLAGS := $$(subst --cfg ndebug,,$$(CFG_RUSTC_FLAGS))\n \n # There's no need our entire test suite to take up gigabytes of space on disk\n # including copies of libstd/libextra all over the place\n-CTEST_RUSTC_FLAGS := $$(CTEST_RUSTC_FLAGS) -Z prefer-dynamic\n+CTEST_RUSTC_FLAGS := $$(CTEST_RUSTC_FLAGS) -C prefer-dynamic\n \n # The tests can not be optimized while the rest of the compiler is optimized, so\n # filter out the optimization (if any) from rustc and then figure out if we need"}, {"sha": "f906c0fc4e10fb6581ed374572f37a7178b37048", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -332,8 +332,8 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n             let args = split_maybe_args(&config.rustcflags);\n             let mut tool_path:~str = ~\"\";\n             for arg in args.iter() {\n-                if arg.contains(\"--android-cross-path=\") {\n-                    tool_path = arg.replace(\"--android-cross-path=\",\"\");\n+                if arg.contains(\"android-cross-path=\") {\n+                    tool_path = arg.replace(\"android-cross-path=\",\"\");\n                     break;\n                 }\n             }\n@@ -1054,7 +1054,7 @@ fn compile_test_and_save_bitcode(config: &config, props: &TestProps,\n     let aux_dir = aux_output_dir_name(config, testfile);\n     // FIXME (#9639): This needs to handle non-utf8 paths\n     let link_args = ~[~\"-L\", aux_dir.as_str().unwrap().to_owned()];\n-    let llvm_args = ~[~\"--emit=obj\", ~\"--crate-type=lib\", ~\"--save-temps\"];\n+    let llvm_args = ~[~\"--emit=obj\", ~\"--crate-type=lib\", ~\"-C\", ~\"save-temps\"];\n     let args = make_compile_args(config, props,\n                                  link_args + llvm_args,\n                                  |a, b| ThisFile(make_o_name(a, b)), testfile);"}, {"sha": "725f15f4aaad9b0dfb4ca0189580423e24b6ddb7", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -3761,7 +3761,7 @@ dependencies will be used:\n    with the above limitations in dynamic and static libraries, it is required\n    for all upstream dependencies to be in the same format. The next question is\n    whether to prefer a dynamic or a static format. The compiler currently favors\n-   static linking over dynamic linking, but this can be inverted with the `-Z\n+   static linking over dynamic linking, but this can be inverted with the `-C\n    prefer-dynamic` flag to the compiler.\n \n    What this means is that first the compiler will attempt to find all upstream"}, {"sha": "d6abc7b6954d31a7c04e37f280fa1148cad4b5cd", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -111,13 +111,13 @@ pub mod write {\n     fn target_feature<'a>(sess: &'a Session) -> &'a str {\n         match sess.targ_cfg.os {\n             abi::OsAndroid => {\n-                if \"\" == sess.opts.target_feature {\n+                if \"\" == sess.opts.cg.target_feature {\n                     \"+v7\"\n                 } else {\n-                    sess.opts.target_feature.as_slice()\n+                    sess.opts.cg.target_feature.as_slice()\n                 }\n             }\n-            _ => sess.opts.target_feature.as_slice()\n+            _ => sess.opts.cg.target_feature.as_slice()\n         }\n     }\n \n@@ -130,7 +130,7 @@ pub mod write {\n         unsafe {\n             configure_llvm(sess);\n \n-            if sess.opts.save_temps {\n+            if sess.opts.cg.save_temps {\n                 output.with_extension(\"no-opt.bc\").with_c_str(|buf| {\n                     llvm::LLVMWriteBitcodeToFile(llmod, buf);\n                 })\n@@ -142,7 +142,7 @@ pub mod write {\n               session::Default => lib::llvm::CodeGenLevelDefault,\n               session::Aggressive => lib::llvm::CodeGenLevelAggressive,\n             };\n-            let use_softfp = sess.opts.debugging_opts & session::USE_SOFTFP != 0;\n+            let use_softfp = sess.opts.cg.soft_float;\n \n             // FIXME: #11906: Omitting frame pointers breaks retrieving the value of a parameter.\n             // FIXME: #11954: mac64 unwinding may not work with fp elim\n@@ -151,7 +151,7 @@ pub mod write {\n                               sess.targ_cfg.arch == abi::X86_64);\n \n             let tm = sess.targ_cfg.target_strs.target_triple.with_c_str(|T| {\n-                sess.opts.target_cpu.with_c_str(|CPU| {\n+                sess.opts.cg.target_cpu.with_c_str(|CPU| {\n                     target_feature(&sess).with_c_str(|Features| {\n                         llvm::LLVMRustCreateTargetMachine(\n                             T, CPU, Features,\n@@ -180,13 +180,13 @@ pub mod write {\n             };\n             if !sess.no_verify() { assert!(addpass(\"verify\")); }\n \n-            if !sess.no_prepopulate_passes() {\n+            if !sess.opts.cg.no_prepopulate_passes {\n                 llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);\n                 llvm::LLVMRustAddAnalysisPasses(tm, mpm, llmod);\n                 populate_llvm_passes(fpm, mpm, llmod, OptLevel);\n             }\n \n-            for pass in sess.opts.custom_passes.iter() {\n+            for pass in sess.opts.cg.passes.iter() {\n                 pass.with_c_str(|s| {\n                     if !llvm::LLVMRustAddPass(mpm, s) {\n                         sess.warn(format!(\"unknown pass {}, ignoring\", *pass));\n@@ -208,7 +208,7 @@ pub mod write {\n             // emitting an rlib. Whenever an rlib is created, the bytecode is\n             // inserted into the archive in order to allow LTO against it.\n             let crate_types = sess.crate_types.borrow();\n-            if sess.opts.save_temps ||\n+            if sess.opts.cg.save_temps ||\n                (crate_types.get().contains(&session::CrateTypeRlib) &&\n                 sess.opts.output_types.contains(&OutputTypeExe)) {\n                 output.temp_path(OutputTypeBitcode).with_c_str(|buf| {\n@@ -220,7 +220,7 @@ pub mod write {\n                 time(sess.time_passes(), \"all lto passes\", (), |()|\n                      lto::run(sess, llmod, tm, trans.reachable));\n \n-                if sess.opts.save_temps {\n+                if sess.opts.cg.save_temps {\n                     output.with_extension(\"lto.bc\").with_c_str(|buf| {\n                         llvm::LLVMWriteBitcodeToFile(llmod, buf);\n                     })\n@@ -353,10 +353,10 @@ pub mod write {\n \n         // Copy what clang does by turning on loop vectorization at O2 and\n         // slp vectorization at O3\n-        let vectorize_loop = !sess.no_vectorize_loops() &&\n+        let vectorize_loop = !sess.opts.cg.no_vectorize_loops &&\n                              (sess.opts.optimize == session::Default ||\n                               sess.opts.optimize == session::Aggressive);\n-        let vectorize_slp = !sess.no_vectorize_slp() &&\n+        let vectorize_slp = !sess.opts.cg.no_vectorize_slp &&\n                             sess.opts.optimize == session::Aggressive;\n \n         let mut llvm_c_strs = ~[];\n@@ -374,7 +374,7 @@ pub mod write {\n         if sess.time_llvm_passes() { add(\"-time-passes\"); }\n         if sess.print_llvm_passes() { add(\"-debug-pass=Structure\"); }\n \n-        for arg in sess.opts.llvm_args.iter() {\n+        for arg in sess.opts.cg.llvm_args.iter() {\n             add(*arg);\n         }\n \n@@ -745,7 +745,7 @@ pub fn output_lib_filename(lm: &LinkMeta) -> ~str {\n }\n \n pub fn get_cc_prog(sess: Session) -> ~str {\n-    match sess.opts.linker {\n+    match sess.opts.cg.linker {\n         Some(ref linker) => return linker.to_owned(),\n         None => {}\n     }\n@@ -763,7 +763,7 @@ pub fn get_cc_prog(sess: Session) -> ~str {\n }\n \n pub fn get_ar_prog(sess: Session) -> ~str {\n-    match sess.opts.ar {\n+    match sess.opts.cg.ar {\n         Some(ref ar) => return ar.to_owned(),\n         None => {}\n     }\n@@ -773,7 +773,7 @@ pub fn get_ar_prog(sess: Session) -> ~str {\n \n fn get_system_tool(sess: Session, tool: &str) -> ~str {\n     match sess.targ_cfg.os {\n-        abi::OsAndroid => match sess.opts.android_cross_path {\n+        abi::OsAndroid => match sess.opts.cg.android_cross_path {\n             Some(ref path) => {\n                 let tool_str = match tool {\n                     \"cc\" => \"gcc\",\n@@ -783,7 +783,7 @@ fn get_system_tool(sess: Session, tool: &str) -> ~str {\n             }\n             None => {\n                 sess.fatal(format!(\"need Android NDK path for the '{}' tool \\\n-                                    (--android-cross-path)\", tool))\n+                                    (-C android-cross-path)\", tool))\n             }\n         },\n         _ => tool.to_owned(),\n@@ -813,7 +813,7 @@ pub fn link_binary(sess: Session,\n     }\n \n     // Remove the temporary object file and metadata if we aren't saving temps\n-    if !sess.opts.save_temps {\n+    if !sess.opts.cg.save_temps {\n         let obj_filename = outputs.temp_path(OutputTypeObject);\n         if !sess.opts.output_types.contains(&OutputTypeObject) {\n             remove(sess, &obj_filename);\n@@ -969,7 +969,7 @@ fn link_rlib(sess: Session,\n             // into the archive.\n             let bc = obj_filename.with_extension(\"bc\");\n             a.add_file(&bc, false);\n-            if !sess.opts.save_temps &&\n+            if !sess.opts.cg.save_temps &&\n                !sess.opts.output_types.contains(&OutputTypeBitcode) {\n                 remove(sess, &bc);\n             }\n@@ -1142,7 +1142,7 @@ fn link_args(sess: Session,\n             args.push(~\"-dynamiclib\");\n             args.push(~\"-Wl,-dylib\");\n             // FIXME (#9639): This needs to handle non-utf8 paths\n-            if !sess.opts.no_rpath {\n+            if !sess.opts.cg.no_rpath {\n                 args.push(~\"-Wl,-install_name,@rpath/\" +\n                           out_filename.filename_str().unwrap());\n             }\n@@ -1163,13 +1163,13 @@ fn link_args(sess: Session,\n     // FIXME (#2397): At some point we want to rpath our guesses as to\n     // where extern libraries might live, based on the\n     // addl_lib_search_paths\n-    if !sess.opts.no_rpath {\n+    if !sess.opts.cg.no_rpath {\n         args.push_all(rpath::get_rpath_flags(sess, out_filename));\n     }\n \n     // Finally add all the linker arguments provided on the command line along\n     // with any #[link_args] attributes found inside the crate\n-    args.push_all(sess.opts.linker_args);\n+    args.push_all(sess.opts.cg.link_args);\n     let used_link_args = sess.cstore.get_used_link_args();\n     let used_link_args = used_link_args.borrow();\n     for arg in used_link_args.get().iter() {\n@@ -1235,7 +1235,7 @@ fn add_upstream_rust_crates(args: &mut ~[~str], sess: Session,\n     }\n \n     let cstore = sess.cstore;\n-    if !dylib && !sess.prefer_dynamic() {\n+    if !dylib && !sess.opts.cg.prefer_dynamic {\n         // With an executable, things get a little interesting. As a limitation\n         // of the current implementation, we require that everything must be\n         // static or everything must be dynamic. The reasons for this are a"}, {"sha": "b2440dcedbdcb6a52e1794898d0e7b88bc8523f4", "filename": "src/librustc/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flto.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -19,7 +19,7 @@ use std::libc;\n \n pub fn run(sess: session::Session, llmod: ModuleRef,\n            tm: TargetMachineRef, reachable: &[~str]) {\n-    if sess.prefer_dynamic() {\n+    if sess.opts.cg.prefer_dynamic {\n         sess.err(\"cannot prefer dynamic linking when performing LTO\");\n         sess.note(\"only 'staticlib' and 'bin' outputs are supported with LTO\");\n         sess.abort_if_errors();"}, {"sha": "15240897b2aee9d99372dfee1187d8a648bada7e", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 39, "deletions": 70, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -382,7 +382,7 @@ pub fn phase_4_translate_to_llvm(sess: Session,\n pub fn phase_5_run_llvm_passes(sess: Session,\n                                trans: &CrateTranslation,\n                                outputs: &OutputFilenames) {\n-    if sess.no_integrated_as() {\n+    if sess.opts.cg.no_integrated_as {\n         let output_type = link::OutputTypeAssembly;\n \n         time(sess.time_passes(), \"LLVM passes\", (), |_|\n@@ -391,7 +391,7 @@ pub fn phase_5_run_llvm_passes(sess: Session,\n         link::write::run_assembler(sess, outputs);\n \n         // Remove assembly source, unless --save-temps was specified\n-        if !sess.opts.save_temps {\n+        if !sess.opts.cg.save_temps {\n             fs::unlink(&outputs.temp_path(link::OutputTypeAssembly)).unwrap();\n         }\n     } else {\n@@ -747,7 +747,6 @@ pub fn build_session_options(binary: ~str,\n     let parse_only = matches.opt_present(\"parse-only\");\n     let no_trans = matches.opt_present(\"no-trans\");\n     let no_analysis = matches.opt_present(\"no-analysis\");\n-    let no_rpath = matches.opt_present(\"no-rpath\");\n \n     let lint_levels = [lint::allow, lint::warn,\n                        lint::deny, lint::forbid];\n@@ -817,9 +816,6 @@ pub fn build_session_options(binary: ~str,\n \n     let sysroot_opt = matches.opt_str(\"sysroot\").map(|m| @Path::new(m));\n     let target = matches.opt_str(\"target\").unwrap_or(host_triple());\n-    let target_cpu = matches.opt_str(\"target-cpu\").unwrap_or(~\"generic\");\n-    let target_feature = matches.opt_str(\"target-feature\").unwrap_or(~\"\");\n-    let save_temps = matches.opt_present(\"save-temps\");\n     let opt_level = {\n         if (debugging_opts & session::NO_OPT) != 0 {\n             No\n@@ -841,85 +837,77 @@ pub fn build_session_options(binary: ~str,\n         } else { No }\n     };\n     let gc = debugging_opts & session::GC != 0;\n-    let extra_debuginfo = debugging_opts & session::EXTRA_DEBUG_INFO != 0;\n-    let debuginfo = debugging_opts & session::DEBUG_INFO != 0 ||\n-        extra_debuginfo;\n+    let debuginfo = matches.opt_present(\"g\") || matches.opt_present(\"debuginfo\");\n \n     let addl_lib_search_paths = matches.opt_strs(\"L\").map(|s| {\n         Path::new(s.as_slice())\n     }).move_iter().collect();\n-    let ar = matches.opt_str(\"ar\");\n-    let linker = matches.opt_str(\"linker\");\n-    let linker_args = matches.opt_strs(\"link-args\").flat_map( |a| {\n-        a.split(' ').filter_map(|arg| {\n-            if arg.is_empty() {\n-                None\n-            } else {\n-                Some(arg.to_owned())\n-            }\n-        }).collect()\n-    });\n \n     let cfg = parse_cfgspecs(matches.opt_strs(\"cfg\"));\n     let test = matches.opt_present(\"test\");\n-    let android_cross_path = matches.opt_str(\"android-cross-path\");\n     let write_dependency_info = (matches.opt_present(\"dep-info\"),\n                                  matches.opt_str(\"dep-info\").map(|p| Path::new(p)));\n \n-    let custom_passes = match matches.opt_str(\"passes\") {\n-        None => ~[],\n-        Some(s) => {\n-            s.split(|c: char| c == ' ' || c == ',').map(|s| {\n-                s.trim().to_owned()\n-            }).collect()\n-        }\n-    };\n-    let llvm_args = match matches.opt_str(\"llvm-args\") {\n-        None => ~[],\n-        Some(s) => {\n-            s.split(|c: char| c == ' ' || c == ',').map(|s| {\n-                s.trim().to_owned()\n-            }).collect()\n-        }\n-    };\n     let print_metas = (matches.opt_present(\"crate-id\"),\n                        matches.opt_present(\"crate-name\"),\n                        matches.opt_present(\"crate-file-name\"));\n+    let cg = build_codegen_options(matches);\n \n     let sopts = @session::Options {\n         crate_types: crate_types,\n         gc: gc,\n         optimize: opt_level,\n-        custom_passes: custom_passes,\n-        llvm_args: llvm_args,\n         debuginfo: debuginfo,\n-        extra_debuginfo: extra_debuginfo,\n         lint_opts: lint_opts,\n-        save_temps: save_temps,\n         output_types: output_types,\n         addl_lib_search_paths: @RefCell::new(addl_lib_search_paths),\n-        ar: ar,\n-        linker: linker,\n-        linker_args: linker_args,\n         maybe_sysroot: sysroot_opt,\n         target_triple: target,\n-        target_cpu: target_cpu,\n-        target_feature: target_feature,\n         cfg: cfg,\n         binary: binary,\n         test: test,\n         parse_only: parse_only,\n         no_trans: no_trans,\n         no_analysis: no_analysis,\n-        no_rpath: no_rpath,\n         debugging_opts: debugging_opts,\n-        android_cross_path: android_cross_path,\n         write_dependency_info: write_dependency_info,\n         print_metas: print_metas,\n+        cg: cg,\n     };\n     return sopts;\n }\n \n+pub fn build_codegen_options(matches: &getopts::Matches)\n+        -> session::CodegenOptions\n+{\n+    let mut cg = session::basic_codegen_options();\n+    for option in matches.opt_strs(\"C\").move_iter() {\n+        let mut iter = option.splitn('=', 1);\n+        let key = iter.next().unwrap();\n+        let value = iter.next();\n+        let option_to_lookup = key.replace(\"-\", \"_\");\n+        let mut found = false;\n+        for &(candidate, setter, _) in session::CG_OPTIONS.iter() {\n+            if option_to_lookup.as_slice() != candidate { continue }\n+            if !setter(&mut cg, value) {\n+                match value {\n+                    Some(..) => early_error(format!(\"codegen option `{}` takes \\\n+                                                     no value\", key)),\n+                    None => early_error(format!(\"codegen option `{0}` requires \\\n+                                                 a value (-C {0}=<value>)\",\n+                                                key))\n+                }\n+            }\n+            found = true;\n+            break;\n+        }\n+        if !found {\n+            early_error(format!(\"unknown codegen option: `{}`\", key));\n+        }\n+    }\n+    return cg;\n+}\n+\n pub fn build_session(sopts: @session::Options,\n                      local_crate_source_file: Option<Path>)\n                      -> Session {\n@@ -1002,15 +990,12 @@ pub fn optgroups() -> ~[getopts::OptGroup] {\n   optmulti(\"\", \"emit\", \"Comma separated list of types of output for the compiler\n                         to emit\",\n            \"[asm|bc|ir|obj|link]\"),\n-  optopt(\"\", \"linker\", \"Program to use for linking instead of the default.\", \"LINKER\"),\n-  optopt(\"\", \"ar\", \"Program to use for managing archives instead of the default.\", \"AR\"),\n   optflag(\"\", \"crate-id\", \"Output the crate id and exit\"),\n   optflag(\"\", \"crate-name\", \"Output the crate name and exit\"),\n   optflag(\"\", \"crate-file-name\", \"Output the file(s) that would be written if compilation \\\n           continued and exit\"),\n-  optmulti(\"\",  \"link-args\", \"FLAGS is a space-separated list of flags\n-                            passed to the linker\", \"FLAGS\"),\n   optflag(\"\",  \"ls\",  \"List the symbols defined by a library crate\"),\n+  optflag(\"g\",  \"debuginfo\",  \"Emit DWARF debug info to the objects created\"),\n   optflag(\"\", \"no-trans\",\n                         \"Run all passes except translation; no output\"),\n   optflag(\"\", \"no-analysis\",\n@@ -1020,13 +1005,6 @@ pub fn optgroups() -> ~[getopts::OptGroup] {\n   optopt(\"o\", \"\",     \"Write output to <filename>\", \"FILENAME\"),\n   optopt(\"\", \"opt-level\",\n                         \"Optimize with possible levels 0-3\", \"LEVEL\"),\n-  optopt(\"\", \"passes\", \"Comma or space separated list of pass names to use. \\\n-                        Appends to the default list of passes to run for the \\\n-                        specified current optimization level. A value of \\\n-                        \\\"list\\\" will list all of the available passes\", \"NAMES\"),\n-  optopt(\"\", \"llvm-args\", \"A list of arguments to pass to llvm, comma \\\n-                           separated\", \"ARGS\"),\n-  optflag(\"\", \"no-rpath\", \"Disables setting the rpath in libs/exes\"),\n   optopt( \"\",  \"out-dir\",\n                         \"Write output to compiler-chosen filename\n                           in <dir>\", \"DIR\"),\n@@ -1041,24 +1019,13 @@ pub fn optgroups() -> ~[getopts::OptGroup] {\n                           AST nodes and blocks with IDs)\", \"TYPE\"),\n   optflagopt(\"\", \"dep-info\",\n                         \"Output dependency info to <filename> after compiling\", \"FILENAME\"),\n-  optflag(\"\", \"save-temps\",\n-                        \"Write intermediate files (.bc, .opt.bc, .o)\n-                          in addition to normal output\"),\n   optopt(\"\", \"sysroot\",\n                         \"Override the system root\", \"PATH\"),\n   optflag(\"\", \"test\", \"Build a test harness\"),\n   optopt(\"\", \"target\",\n                         \"Target triple cpu-manufacturer-kernel[-os]\n                           to compile for (see chapter 3.4 of http://www.sourceware.org/autobook/\n                           for details)\", \"TRIPLE\"),\n-  optopt(\"\", \"target-cpu\",\n-                        \"Select target processor (llc -mcpu=help\n-                          for details)\", \"CPU\"),\n-  optopt(\"\", \"target-feature\",\n-                        \"Target specific attributes (llc -mattr=help\n-                          for details)\", \"FEATURE\"),\n-  optopt(\"\", \"android-cross-path\",\n-         \"The path to the Android NDK\", \"PATH\"),\n   optmulti(\"W\", \"warn\",\n                         \"Set lint warnings\", \"OPT\"),\n   optmulti(\"A\", \"allow\",\n@@ -1067,6 +1034,8 @@ pub fn optgroups() -> ~[getopts::OptGroup] {\n                         \"Set lint denied\", \"OPT\"),\n   optmulti(\"F\", \"forbid\",\n                         \"Set lint forbidden\", \"OPT\"),\n+  optmulti(\"C\", \"codegen\",\n+                        \"Set a codegen option\", \"OPT[=VALUE]\"),\n   optmulti(\"Z\", \"\",   \"Set internal debugging options\", \"FLAG\"),\n   optflag( \"v\", \"version\",\n                         \"Print version info and exit\"),"}, {"sha": "27b8e681666058c51fafd71acaea3f4f2a081088", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 109, "deletions": 66, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -65,17 +65,8 @@ debugging_opts!(\n         META_STATS,\n         NO_OPT,\n         GC,\n-        DEBUG_INFO,\n-        EXTRA_DEBUG_INFO,\n         PRINT_LINK_ARGS,\n         PRINT_LLVM_PASSES,\n-        NO_VECTORIZE_LOOPS,\n-        NO_VECTORIZE_SLP,\n-        NO_PREPOPULATE_PASSES,\n-        USE_SOFTFP,\n-        GEN_CRATE_MAP,\n-        PREFER_DYNAMIC,\n-        NO_INTEGRATED_AS,\n         LTO\n     ]\n     0\n@@ -104,26 +95,9 @@ pub fn debugging_opts_map() -> ~[(&'static str, &'static str, u64)] {\n      (\"print-link-args\", \"Print the arguments passed to the linker\",\n       PRINT_LINK_ARGS),\n      (\"gc\", \"Garbage collect shared data (experimental)\", GC),\n-     (\"extra-debug-info\", \"Extra debugging info (experimental)\",\n-      EXTRA_DEBUG_INFO),\n-     (\"debug-info\", \"Produce debug info (experimental)\", DEBUG_INFO),\n      (\"print-llvm-passes\",\n       \"Prints the llvm optimization passes being run\",\n       PRINT_LLVM_PASSES),\n-     (\"no-prepopulate-passes\",\n-      \"Don't pre-populate the pass managers with a list of passes, only use \\\n-        the passes from --passes\",\n-      NO_PREPOPULATE_PASSES),\n-     (\"no-vectorize-loops\",\n-      \"Don't run the loop vectorization optimization passes\",\n-      NO_VECTORIZE_LOOPS),\n-     (\"no-vectorize-slp\", \"Don't run LLVM's SLP vectorization passes\",\n-      NO_VECTORIZE_SLP),\n-     (\"soft-float\", \"Generate software floating point library calls\", USE_SOFTFP),\n-     (\"gen-crate-map\", \"Force generation of a toplevel crate map\", GEN_CRATE_MAP),\n-     (\"prefer-dynamic\", \"Prefer dynamic linking to static linking\", PREFER_DYNAMIC),\n-     (\"no-integrated-as\",\n-      \"Use external assembler rather than LLVM's integrated one\", NO_INTEGRATED_AS),\n      (\"lto\", \"Perform LLVM link-time optimizations\", LTO),\n     ]\n }\n@@ -144,24 +118,15 @@ pub struct Options {\n \n     gc: bool,\n     optimize: OptLevel,\n-    custom_passes: ~[~str],\n-    llvm_args: ~[~str],\n     debuginfo: bool,\n-    extra_debuginfo: bool,\n     lint_opts: ~[(lint::Lint, lint::level)],\n-    save_temps: bool,\n     output_types: ~[back::link::OutputType],\n     // This was mutable for rustpkg, which updates search paths based on the\n     // parsed code. It remains mutable in case its replacements wants to use\n     // this.\n     addl_lib_search_paths: @RefCell<HashSet<Path>>,\n-    ar: Option<~str>,\n-    linker: Option<~str>,\n-    linker_args: ~[~str],\n     maybe_sysroot: Option<@Path>,\n     target_triple: ~str,\n-    target_cpu: ~str,\n-    target_feature: ~str,\n     // User-specified cfg meta items. The compiler itself will add additional\n     // items to the crate config, and during parsing the entire crate config\n     // will be added to the crate AST node.  This should not be used for\n@@ -172,13 +137,12 @@ pub struct Options {\n     parse_only: bool,\n     no_trans: bool,\n     no_analysis: bool,\n-    no_rpath: bool,\n     debugging_opts: u64,\n-    android_cross_path: Option<~str>,\n     /// Whether to write dependency files. It's (enabled, optional filename).\n     write_dependency_info: (bool, Option<Path>),\n     /// Crate id-related things to maybe print. It's (crate_id, crate_name, crate_file_name).\n     print_metas: (bool, bool, bool),\n+    cg: CodegenOptions,\n }\n \n // The type of entry function, so\n@@ -329,24 +293,6 @@ impl Session_ {\n     pub fn print_llvm_passes(&self) -> bool {\n         self.debugging_opt(PRINT_LLVM_PASSES)\n     }\n-    pub fn no_prepopulate_passes(&self) -> bool {\n-        self.debugging_opt(NO_PREPOPULATE_PASSES)\n-    }\n-    pub fn no_vectorize_loops(&self) -> bool {\n-        self.debugging_opt(NO_VECTORIZE_LOOPS)\n-    }\n-    pub fn no_vectorize_slp(&self) -> bool {\n-        self.debugging_opt(NO_VECTORIZE_SLP)\n-    }\n-    pub fn gen_crate_map(&self) -> bool {\n-        self.debugging_opt(GEN_CRATE_MAP)\n-    }\n-    pub fn prefer_dynamic(&self) -> bool {\n-        self.debugging_opt(PREFER_DYNAMIC)\n-    }\n-    pub fn no_integrated_as(&self) -> bool {\n-        self.debugging_opt(NO_INTEGRATED_AS)\n-    }\n     pub fn lto(&self) -> bool {\n         self.debugging_opt(LTO)\n     }\n@@ -381,35 +327,132 @@ pub fn basic_options() -> @Options {\n         crate_types: ~[],\n         gc: false,\n         optimize: No,\n-        custom_passes: ~[],\n-        llvm_args: ~[],\n         debuginfo: false,\n-        extra_debuginfo: false,\n         lint_opts: ~[],\n-        save_temps: false,\n         output_types: ~[],\n         addl_lib_search_paths: @RefCell::new(HashSet::new()),\n-        ar: None,\n-        linker: None,\n-        linker_args: ~[],\n         maybe_sysroot: None,\n         target_triple: host_triple(),\n-        target_cpu: ~\"generic\",\n-        target_feature: ~\"\",\n         cfg: ~[],\n         binary: ~\"rustc\",\n         test: false,\n         parse_only: false,\n         no_trans: false,\n         no_analysis: false,\n-        no_rpath: false,\n         debugging_opts: 0,\n-        android_cross_path: None,\n         write_dependency_info: (false, None),\n         print_metas: (false, false, false),\n+        cg: basic_codegen_options(),\n     }\n }\n \n+/// Declare a macro that will define all CodegenOptions fields and parsers all\n+/// at once. The goal of this macro is to define an interface that can be\n+/// programmatically used by the option parser in order to initialize the struct\n+/// without hardcoding field names all over the place.\n+///\n+/// The goal is to invoke this macro once with the correct fields, and then this\n+/// macro generates all necessary code. The main gotcha of this macro is the\n+/// cgsetters module which is a bunch of generated code to parse an option into\n+/// its respective field in the struct. There are a few hand-written parsers for\n+/// parsing specific types of values in this module.\n+macro_rules! cgoptions(\n+    ($($opt:ident : $t:ty = ($init:expr, $parse:ident, $desc:expr)),* ,) =>\n+(\n+    #[deriving(Clone)]\n+    pub struct CodegenOptions { $($opt: $t),* }\n+\n+    pub fn basic_codegen_options() -> CodegenOptions {\n+        CodegenOptions { $($opt: $init),* }\n+    }\n+\n+    pub type CodegenSetter = fn(&mut CodegenOptions, v: Option<&str>) -> bool;\n+    pub static CG_OPTIONS: &'static [(&'static str, CodegenSetter,\n+                                      &'static str)] =\n+        &[ $( (stringify!($opt), cgsetters::$opt, $desc) ),* ];\n+\n+    mod cgsetters {\n+        use super::CodegenOptions;\n+\n+        $(\n+            pub fn $opt(cg: &mut CodegenOptions, v: Option<&str>) -> bool {\n+                $parse(&mut cg.$opt, v)\n+            }\n+        )*\n+\n+        fn parse_bool(slot: &mut bool, v: Option<&str>) -> bool {\n+            match v {\n+                Some(..) => false,\n+                None => { *slot = true; true }\n+            }\n+        }\n+\n+        fn parse_opt_string(slot: &mut Option<~str>, v: Option<&str>) -> bool {\n+            match v {\n+                Some(s) => { *slot = Some(s.to_owned()); true },\n+                None => false,\n+            }\n+        }\n+\n+        fn parse_string(slot: &mut ~str, v: Option<&str>) -> bool {\n+            match v {\n+                Some(s) => { *slot = s.to_owned(); true },\n+                None => false,\n+            }\n+        }\n+\n+        fn parse_list(slot: &mut ~[~str], v: Option<&str>) -> bool {\n+            match v {\n+                Some(s) => {\n+                    for s in s.words() {\n+                        slot.push(s.to_owned());\n+                    }\n+                    true\n+                },\n+                None => false,\n+            }\n+        }\n+\n+    }\n+) )\n+\n+cgoptions!(\n+    ar: Option<~str> = (None, parse_opt_string,\n+        \"tool to assemble archives with\"),\n+    linker: Option<~str> = (None, parse_opt_string,\n+        \"system linker to link outputs with\"),\n+    link_args: ~[~str] = (~[], parse_list,\n+        \"extra arguments to pass to the linker (space separated)\"),\n+    target_cpu: ~str = (~\"generic\", parse_string,\n+        \"select target processor (llc -mcpu=help for details)\"),\n+    target_feature: ~str = (~\"\", parse_string,\n+        \"target specific attributes (llc -mattr=help for details)\"),\n+    passes: ~[~str] = (~[], parse_list,\n+        \"a list of extra LLVM passes to run (space separated)\"),\n+    llvm_args: ~[~str] = (~[], parse_list,\n+        \"a list of arguments to pass to llvm (space separated)\"),\n+    save_temps: bool = (false, parse_bool,\n+        \"save all temporary output files during compilation\"),\n+    android_cross_path: Option<~str> = (None, parse_opt_string,\n+        \"the path to the Android NDK\"),\n+    no_rpath: bool = (false, parse_bool,\n+        \"disables setting the rpath in libs/exes\"),\n+    no_prepopulate_passes: bool = (false, parse_bool,\n+        \"don't pre-populate the pass manager with a list of passes\"),\n+    no_vectorize_loops: bool = (false, parse_bool,\n+        \"don't run the loop vectorization optimization passes\"),\n+    no_vectorize_slp: bool = (false, parse_bool,\n+        \"don't run LLVM's SLP vectorization pass\"),\n+    soft_float: bool = (false, parse_bool,\n+        \"generate software floating point library calls\"),\n+    gen_crate_map: bool = (false, parse_bool,\n+        \"force generation of a toplevel crate map\"),\n+    prefer_dynamic: bool = (false, parse_bool,\n+        \"prefer dynamic linking to static linking\"),\n+    no_integrated_as: bool = (false, parse_bool,\n+        \"use an external assembler rather than LLVM's integrated one\"),\n+)\n+\n // Seems out of place, but it uses session, so I'm putting it here\n pub fn expect<T:Clone>(sess: Session, opt: Option<T>, msg: || -> ~str) -> T {\n     diagnostic::expect(sess.diagnostic(), opt, msg)"}, {"sha": "1b575e96df6eeb50db38f60075c92248a54616ae", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -168,7 +168,7 @@ Available lint options:\n     fn padded(max: uint, s: &str) -> ~str {\n         \" \".repeat(max - s.len()) + s\n     }\n-    println!(\"{}\", \"\\nAvailable lint checks:\\n\"); // FIXME: #9970\n+    println!(\"\\nAvailable lint checks:\\n\");\n     println!(\"    {}  {:7.7s}  {}\",\n              padded(max_key, \"name\"), \"default\", \"meaning\");\n     println!(\"    {}  {:7.7s}  {}\\n\",\n@@ -184,7 +184,7 @@ Available lint options:\n }\n \n pub fn describe_debug_flags() {\n-    println!(\"{}\", \"\\nAvailable debug options:\\n\"); // FIXME: #9970\n+    println!(\"\\nAvailable debug options:\\n\");\n     let r = session::debugging_opts_map();\n     for tuple in r.iter() {\n         match *tuple {\n@@ -195,6 +195,22 @@ pub fn describe_debug_flags() {\n     }\n }\n \n+pub fn describe_codegen_flags() {\n+    println!(\"\\nAvailable codegen options:\\n\");\n+    let mut cg = session::basic_codegen_options();\n+    for &(name, parser, desc) in session::CG_OPTIONS.iter() {\n+        // we invoke the parser function on `None` to see if this option needs\n+        // an argument or not.\n+        let (width, extra) = if parser(&mut cg, None) {\n+            (25, \"\")\n+        } else {\n+            (21, \"=val\")\n+        };\n+        println!(\"    -C {:>width$s}{} -- {}\", name.replace(\"_\", \"-\"),\n+                 extra, desc, width=width);\n+    }\n+}\n+\n pub fn run_compiler(args: &[~str]) {\n     let mut args = args.to_owned();\n     let binary = args.shift().unwrap();\n@@ -227,7 +243,13 @@ pub fn run_compiler(args: &[~str]) {\n         return;\n     }\n \n-    if matches.opt_str(\"passes\") == Some(~\"list\") {\n+    let cg_flags = matches.opt_strs(\"C\");\n+    if cg_flags.iter().any(|x| x == &~\"help\") {\n+        describe_codegen_flags();\n+        return;\n+    }\n+\n+    if cg_flags.contains(&~\"passes=list\") {\n         unsafe { lib::llvm::llvm::LLVMRustPrintPasses(); }\n         return;\n     }"}, {"sha": "8828fd5e01914bdd899435864745b7ef1ec6aa22", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -1371,7 +1371,7 @@ fn insert_lllocals<'a>(bcx: &'a Block<'a>,\n             llmap.get().insert(binding_info.id, datum);\n         }\n \n-        if bcx.sess().opts.extra_debuginfo {\n+        if bcx.sess().opts.debuginfo {\n             debuginfo::create_match_binding_metadata(bcx,\n                                                      ident,\n                                                      binding_info.id,\n@@ -2030,7 +2030,7 @@ pub fn store_arg<'a>(mut bcx: &'a Block<'a>,\n             // like `x: T`\n             let arg_ty = node_id_type(bcx, pat.id);\n             if type_of::arg_is_indirect(bcx.ccx(), arg_ty)\n-                && !bcx.ccx().sess.opts.extra_debuginfo {\n+                && !bcx.ccx().sess.opts.debuginfo {\n                 // Don't copy an indirect argument to an alloca, the caller\n                 // already put it in a temporary alloca and gave it up, unless\n                 // we emit extra-debug-info, which requires local allocas :(."}, {"sha": "227b2f6e1dc55ef0386c9458b9943a63fb78b06f", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -568,7 +568,7 @@ pub fn get_res_dtor(ccx: @CrateContext,\n \n // Structural comparison: a rather involved form of glue.\n pub fn maybe_name_value(cx: &CrateContext, v: ValueRef, s: &str) {\n-    if cx.sess.opts.save_temps {\n+    if cx.sess.opts.cg.save_temps {\n         s.with_c_str(|buf| {\n             unsafe {\n                 llvm::LLVMSetValueName(v, buf)\n@@ -1389,7 +1389,7 @@ fn copy_args_to_allocas<'a>(fcx: &FunctionContext<'a>,\n \n         bcx = _match::store_arg(bcx, args[i].pat, arg_datum, arg_scope_id);\n \n-        if fcx.ccx.sess.opts.extra_debuginfo {\n+        if fcx.ccx.sess.opts.debuginfo {\n             debuginfo::create_argument_metadata(bcx, &args[i]);\n         }\n     }\n@@ -2510,7 +2510,7 @@ pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n     let mut n_subcrates = 1;\n     let cstore = sess.cstore;\n     while cstore.have_crate_data(n_subcrates) { n_subcrates += 1; }\n-    let is_top = !sess.building_library.get() || sess.gen_crate_map();\n+    let is_top = !sess.building_library.get() || sess.opts.cg.gen_crate_map;\n     let sym_name = if is_top {\n         ~\"_rust_crate_map_toplevel\"\n     } else {"}, {"sha": "81c671b495246ade18c43e7d75a6b7e1c2c3b373", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -298,7 +298,7 @@ fn load_environment<'a>(bcx: &'a Block<'a>, cdata_ty: ty::t,\n \n     // Store the pointer to closure data in an alloca for debug info because that's what the\n     // llvm.dbg.declare intrinsic expects\n-    let env_pointer_alloca = if bcx.ccx().sess.opts.extra_debuginfo {\n+    let env_pointer_alloca = if bcx.ccx().sess.opts.debuginfo {\n         let alloc = alloc_ty(bcx, ty::mk_mut_ptr(bcx.tcx(), cdata_ty), \"__debuginfo_env_ptr\");\n         Store(bcx, llcdata, alloc);\n         Some(alloc)"}, {"sha": "2260ddea3c241928ceced4cc9e0bdd8979edbf24", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -151,7 +151,7 @@ impl CrateContext {\n             let tn = TypeNames::new();\n \n             let mut intrinsics = base::declare_intrinsics(llmod);\n-            if sess.opts.extra_debuginfo {\n+            if sess.opts.debuginfo {\n                 base::declare_dbg_intrinsics(llmod, &mut intrinsics);\n             }\n             let int_type = Type::int(targ_cfg.arch);"}, {"sha": "c339e8bc648249f945e4bc1eaac638573659d143", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -56,7 +56,7 @@ pub fn trans_stmt<'a>(cx: &'a Block<'a>,\n             match d.node {\n                 ast::DeclLocal(ref local) => {\n                     bcx = init_local(bcx, *local);\n-                    if cx.sess().opts.extra_debuginfo {\n+                    if cx.sess().opts.debuginfo {\n                         debuginfo::create_local_var_metadata(bcx, *local);\n                     }\n                 }"}, {"sha": "db8f83b41af8e19f0290811f6ab84aa8eedaae7e", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -707,7 +707,7 @@ pub fn create_function_debug_context(cx: &CrateContext,\n                               fn_decl: &ast::FnDecl,\n                               param_substs: Option<@param_substs>,\n                               error_span: Span) -> DIArray {\n-        if !cx.sess.opts.extra_debuginfo {\n+        if !cx.sess.opts.debuginfo {\n             return create_DIArray(DIB(cx), []);\n         }\n \n@@ -784,8 +784,8 @@ pub fn create_function_debug_context(cx: &CrateContext,\n                 name_to_append_suffix_to.push_str(\",\");\n             }\n \n-            // Only create type information if extra_debuginfo is enabled\n-            if cx.sess.opts.extra_debuginfo {\n+            // Only create type information if debuginfo is enabled\n+            if cx.sess.opts.debuginfo {\n                 let actual_self_type_metadata = type_metadata(cx,\n                                                               actual_self_type,\n                                                               codemap::DUMMY_SP);\n@@ -829,8 +829,8 @@ pub fn create_function_debug_context(cx: &CrateContext,\n                 name_to_append_suffix_to.push_str(\",\");\n             }\n \n-            // Again, only create type information if extra_debuginfo is enabled\n-            if cx.sess.opts.extra_debuginfo {\n+            // Again, only create type information if debuginfo is enabled\n+            if cx.sess.opts.debuginfo {\n                 let actual_type_metadata = type_metadata(cx, actual_type, codemap::DUMMY_SP);\n                 let param_metadata_string = token::get_ident(ident.name);\n                 let param_metadata = param_metadata_string.get()"}, {"sha": "17ef8732413e654f5d5c223abd1f95ee447c779e", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -105,8 +105,11 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>) {\n         maybe_sysroot: Some(@os::self_exe_path().unwrap().dir_path()),\n         addl_lib_search_paths: @RefCell::new(libs),\n         crate_types: ~[session::CrateTypeExecutable],\n-        debugging_opts: session::PREFER_DYNAMIC,\n         output_types: ~[link::OutputTypeExe],\n+        cg: session::CodegenOptions {\n+            prefer_dynamic: true,\n+            .. session::basic_codegen_options()\n+        },\n         .. (*session::basic_options()).clone()\n     };\n "}, {"sha": "1d8db84ab13934b5ef7874a4e6dee1365d73936c", "filename": "src/test/compile-fail/issue-10755.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fcompile-fail%2Fissue-10755.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fcompile-fail%2Fissue-10755.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10755.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --linker=llllll\n+// compile-flags: -C linker=llllll\n // error-pattern: the linker `llllll`\n \n fn main() {"}, {"sha": "aac5eebaf4af9ab9847c9eaebfd1d3e9f3461901", "filename": "src/test/compile-fail/issue-11154.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fcompile-fail%2Fissue-11154.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fcompile-fail%2Fissue-11154.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11154.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z lto -Z prefer-dynamic\n+// compile-flags: -Z lto -C prefer-dynamic\n \n // error-pattern: cannot prefer dynamic linking\n "}, {"sha": "1c19baa4d8ed8604e1f6338eddec984d3c8b8aa9", "filename": "src/test/debug-info/basic-types-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fbasic-types-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fbasic-types-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbasic-types-metadata.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "4a6bacad98f8f3cb23f5ee1fea2f0647ffdc951c", "filename": "src/test/debug-info/basic-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fbasic-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fbasic-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbasic-types.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -16,7 +16,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "bf9c70488b083eb07e1b6f3653d946178c2479c7", "filename": "src/test/debug-info/borrowed-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fborrowed-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fborrowed-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-basic.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -13,7 +13,7 @@\n // Gdb doesn't know about UTF-32 character encoding and will print a rust char as only\n // its numerical value.\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "29f0ea61ca77e0979dd3c23b3142eb7a9e4c1153", "filename": "src/test/debug-info/borrowed-c-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fborrowed-c-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fborrowed-c-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-c-style-enum.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "c8e29cfddb036b2b57238616da8d35c40f09f2ac", "filename": "src/test/debug-info/borrowed-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "94a584efe94fa2414267f5b6b11d458f0bbc45c8", "filename": "src/test/debug-info/borrowed-managed-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fborrowed-managed-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fborrowed-managed-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-managed-basic.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -15,7 +15,7 @@\n // Gdb doesn't know about UTF-32 character encoding and will print a rust char as only\n // its numerical value.\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "367d3b9a6daee34437d938d71e376bd6d354210c", "filename": "src/test/debug-info/borrowed-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fborrowed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fborrowed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-struct.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "2fcb67baecd8c27877ef50823bd3d286e7c3d9cf", "filename": "src/test/debug-info/borrowed-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fborrowed-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fborrowed-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-tuple.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -12,7 +12,7 @@\n \n #[feature(managed_boxes)];\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "9863258930af1ec8198bc44cd412cfeee00a2d0f", "filename": "src/test/debug-info/borrowed-unique-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fborrowed-unique-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fborrowed-unique-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-unique-basic.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -13,7 +13,7 @@\n // Gdb doesn't know about UTF-32 character encoding and will print a rust char as only\n // its numerical value.\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "b293b9d254523ad9829b7250b1958a196286b118", "filename": "src/test/debug-info/box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbox.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print pretty off\n // debugger:rbreak zzz\n // debugger:run"}, {"sha": "21f3c0a99f72dfb7a1fbe8f2802b381349edb413", "filename": "src/test/debug-info/boxed-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fboxed-struct.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "b4ca5dbeabe86312a136de23fbaadc3a870fb0fb", "filename": "src/test/debug-info/boxed-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -12,7 +12,7 @@\n \n #[feature(managed_boxes)];\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "3b1e730ff9e2e977fba282698fc6ac1d36165a8a", "filename": "src/test/debug-info/by-value-non-immediate-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fby-value-non-immediate-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fby-value-non-immediate-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fby-value-non-immediate-argument.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "ee9ef7f2f0f2850fa223aebc67613b8bb912d6b1", "filename": "src/test/debug-info/by-value-self-argument-in-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fby-value-self-argument-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fby-value-self-argument-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fby-value-self-argument-in-trait-impl.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -12,7 +12,7 @@\n \n #[feature(managed_boxes)];\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "92168292f93fcc249230590121914fb8f5f6fbe7", "filename": "src/test/debug-info/c-style-enum-in-composite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fc-style-enum-in-composite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fc-style-enum-in-composite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fc-style-enum-in-composite.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "fc8f752936f4c481044209bc8e0342c7fff5339a", "filename": "src/test/debug-info/c-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fc-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fc-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fc-style-enum.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "b3d2357a63cf16d3e60445602cf90d46bb23b213", "filename": "src/test/debug-info/closure-in-generic-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fclosure-in-generic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fclosure-in-generic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fclosure-in-generic-function.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "5acc374896448507678597df996133a2381364dc", "filename": "src/test/debug-info/destructured-fn-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fdestructured-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fdestructured-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fdestructured-fn-argument.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "dd1cfb036f5712e51f06b1486a5d68355b929a84", "filename": "src/test/debug-info/destructured-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "8ac16bdd2dd93274c3a23ff2d0ef60102202f1d5", "filename": "src/test/debug-info/evec-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fevec-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fevec-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fevec-in-struct.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print pretty off\n // debugger:rbreak zzz\n // debugger:run"}, {"sha": "057d2ac21b50651935562ff0e46b9e2192b2ced4", "filename": "src/test/debug-info/function-arg-initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Ffunction-arg-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Ffunction-arg-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ffunction-arg-initialization.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -17,7 +17,7 @@\n // before the arguments have been properly loaded when setting the breakpoint via the function name.\n // Therefore the setup here sets them using line numbers (so be careful when changing this file).\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print pretty off\n // debugger:break function-arg-initialization.rs:139\n // debugger:break function-arg-initialization.rs:154"}, {"sha": "74c59550e0bb27396625f04d24faa544af0e3a82", "filename": "src/test/debug-info/function-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ffunction-arguments.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "690d6248ceaab011c0c6ce4226af7413aaf6511e", "filename": "src/test/debug-info/function-prologue-stepping-no-split-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Ffunction-prologue-stepping-no-split-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Ffunction-prologue-stepping-no-split-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ffunction-prologue-stepping-no-split-stack.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -16,7 +16,7 @@\n // consequence, and as opposed to regular Rust functions, we can set the breakpoints via the\n // function name (and don't have to fall back on using line numbers).\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print pretty off\n // debugger:rbreak immediate_args\n // debugger:rbreak binding"}, {"sha": "0741620fd20fc66af2406f7a4b771ba66bef85a8", "filename": "src/test/debug-info/generic-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fgeneric-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fgeneric-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-function.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "bb21cb381321935891367bb42d2ce32860bff2a1", "filename": "src/test/debug-info/generic-functions-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fgeneric-functions-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fgeneric-functions-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-functions-nested.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "97607af4cb34b947f600d8e4a05ad987a0b4c1e5", "filename": "src/test/debug-info/generic-method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fgeneric-method-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fgeneric-method-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-method-on-generic-struct.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "18f3f3109d5b085f130474f530836d51318393d9", "filename": "src/test/debug-info/generic-static-method-on-struct-and-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fgeneric-static-method-on-struct-and-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fgeneric-static-method-on-struct-and-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-static-method-on-struct-and-enum.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "b73566dad9e88bd401a118479080d86a9142a313", "filename": "src/test/debug-info/generic-struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fgeneric-struct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fgeneric-struct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-struct-style-enum.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -11,7 +11,7 @@\n // xfail-tidy-linelength\n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print union on\n // debugger:rbreak zzz\n // debugger:run"}, {"sha": "cc913ad8c9433f05bcc2ff99a64cb1ab51e6cc37", "filename": "src/test/debug-info/generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fgeneric-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fgeneric-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-struct.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "8a3fe3d1c2cebe2692a1ad31ea3a1b6521220b6f", "filename": "src/test/debug-info/generic-trait-generic-static-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fgeneric-trait-generic-static-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fgeneric-trait-generic-static-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-trait-generic-static-default-method.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "497351ac51f167ed21d9cfd1858bba779e16afa7", "filename": "src/test/debug-info/generic-tuple-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fgeneric-tuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fgeneric-tuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-tuple-style-enum.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -11,7 +11,7 @@\n // xfail-tidy-linelength\n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print union on\n // debugger:rbreak zzz\n // debugger:run"}, {"sha": "4d9fbe083eabc560d062ccb55b43bcf3d77455fb", "filename": "src/test/debug-info/include_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Finclude_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Finclude_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Finclude_string.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "30bbfd72c36cec76506f6ac86e738db584ee7a88", "filename": "src/test/debug-info/issue11600.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fissue11600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fissue11600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fissue11600.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -19,7 +19,7 @@ fn main() {\n // This test case checks whether compile unit names are set correctly, so that the correct default\n // source file can be found.\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:list\n // check:1[...]fn main() {\n // check:2[...]let args : ~[~str] = ::std::os::args();"}, {"sha": "a426a8e3f6ca83337896b72fc2a5907a41657ad7", "filename": "src/test/debug-info/lexical-scope-in-for-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scope-in-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scope-in-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-for-loop.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -11,7 +11,7 @@\n // xfail-win32\n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "7020293a3ef327d570d2c2c909cd673fcffd329b", "filename": "src/test/debug-info/lexical-scope-in-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scope-in-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scope-in-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-if.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -11,7 +11,7 @@\n // xfail-win32\n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "ffdd88cfa5950d882b9e14cdf9767554158832e0", "filename": "src/test/debug-info/lexical-scope-in-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scope-in-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scope-in-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-match.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -11,7 +11,7 @@\n // xfail-win32\n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "d9f16e00f97a371f547c8425a03cb98dd8b59d82", "filename": "src/test/debug-info/lexical-scope-in-parameterless-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scope-in-parameterless-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scope-in-parameterless-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-parameterless-closure.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z debug-info\n+// compile-flags:-g\n // debugger:run\n \n // Nothing to do here really, just make sure it compiles. See issue #8513."}, {"sha": "611b71b5c254d46cf3f0aacd563465ebff43cda2", "filename": "src/test/debug-info/lexical-scope-in-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scope-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scope-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-stack-closure.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "33138f4cc2b1734230b6cb222c30302d5cdfe7a8", "filename": "src/test/debug-info/lexical-scope-in-unconditional-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unconditional-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unconditional-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unconditional-loop.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "7173529bc518f0b134e50b62b47e4d2e0ae144c9", "filename": "src/test/debug-info/lexical-scope-in-unique-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unique-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unique-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unique-closure.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "43e8d61b0bbd8c42022dbbf4978099b6c5f10442", "filename": "src/test/debug-info/lexical-scope-in-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scope-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scope-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-while.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "bd52e2ba65dbf4ebe2355324c87c18e8cfec9d8f", "filename": "src/test/debug-info/lexical-scope-with-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scope-with-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scope-with-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-with-macro.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "4a10f09177ba1966d5fe529e0911167371057e08", "filename": "src/test/debug-info/lexical-scopes-in-block-expression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scopes-in-block-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Flexical-scopes-in-block-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scopes-in-block-expression.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -11,7 +11,7 @@\n // xfail-win32\n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "b5e2ddb895986638a231e8331c4e1c50af6b85c9", "filename": "src/test/debug-info/managed-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "2345857e3920964ec17e296d81fd77ec16cfafc7", "filename": "src/test/debug-info/managed-pointer-within-unique-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -12,7 +12,7 @@\n \n #[feature(managed_boxes)];\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "5f35e712d7cd65d7f14bf19b34eb2615ba37d0f3", "filename": "src/test/debug-info/managed-pointer-within-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -12,7 +12,7 @@\n \n #[feature(managed_boxes)];\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print pretty off\n // debugger:rbreak zzz\n // debugger:run"}, {"sha": "e0ff04ed0bcabf8809784b4e793de18276a81962", "filename": "src/test/debug-info/method-on-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "a9179ed395fba5a365e71a051089bb0f57fd21f8", "filename": "src/test/debug-info/method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmethod-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmethod-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-generic-struct.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "ca7f472f9777cd2789728258750b98de404db304", "filename": "src/test/debug-info/method-on-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmethod-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmethod-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-struct.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "5b7c8b8562323cee29031fab3c6c74d9b651214b", "filename": "src/test/debug-info/method-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmethod-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmethod-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-trait.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "ac2991171c65561b586977df9fb52b96b89b7d4c", "filename": "src/test/debug-info/method-on-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmethod-on-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmethod-on-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-tuple-struct.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "e6b16adc3862bea840fb99109006c65cd2daae16", "filename": "src/test/debug-info/multiple-functions-equal-var-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmultiple-functions-equal-var-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmultiple-functions-equal-var-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmultiple-functions-equal-var-names.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "dc22296baad60cf399c56027fbd21cf75f1334e1", "filename": "src/test/debug-info/multiple-functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmultiple-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fmultiple-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmultiple-functions.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "db154ff599c87cf10607740f9345925a19795f4b", "filename": "src/test/debug-info/name-shadowing-and-scope-nesting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fname-shadowing-and-scope-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fname-shadowing-and-scope-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fname-shadowing-and-scope-nesting.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "3fa596285c6b9a9d3b71a48dd4f414b83ee32199", "filename": "src/test/debug-info/nil-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fnil-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fnil-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fnil-enum.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "a634eba2850927e734180ae924481b8dd2c550f9", "filename": "src/test/debug-info/option-like-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "59b65e1119c92b16135c31ba1a2ffadde146a09b", "filename": "src/test/debug-info/packed-struct-with-destructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fpacked-struct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fpacked-struct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fpacked-struct-with-destructor.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -11,7 +11,7 @@\n // xfail-tidy-linelength\n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print pretty off\n // debugger:rbreak zzz\n // debugger:run"}, {"sha": "0d3883f1102e23a76528d46eec2182c0b1ba4597", "filename": "src/test/debug-info/packed-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fpacked-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fpacked-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fpacked-struct.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -11,7 +11,7 @@\n // xfail-tidy-linelength\n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print pretty off\n // debugger:rbreak zzz\n // debugger:run"}, {"sha": "0e3205838de5d78cf78f644702cf656373637ca2", "filename": "src/test/debug-info/recursive-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Frecursive-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Frecursive-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Frecursive-enum.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:run\n \n // Test whether compiling a recursive enum definition crashes debug info generation. The test case"}, {"sha": "4119549010c55498a272e70c04a02706aee26b66", "filename": "src/test/debug-info/recursive-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Frecursive-struct.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -12,7 +12,7 @@\n \n #[feature(managed_boxes)];\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print pretty off\n // debugger:rbreak zzz\n // debugger:run"}, {"sha": "e2e9766a4b52de86a316560936b8401f0c7f97a7", "filename": "src/test/debug-info/self-in-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fself-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fself-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fself-in-default-method.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "bc2570f1a371a6a6585b973f1fac1d565f66ae76", "filename": "src/test/debug-info/self-in-generic-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fself-in-generic-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fself-in-generic-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fself-in-generic-default-method.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "85e917c091c49ece85c66af3474cb647625dc191", "filename": "src/test/debug-info/shadowed-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fshadowed-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fshadowed-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fshadowed-argument.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "b21e59283ad4db919f7878eba936d2d3ae414493", "filename": "src/test/debug-info/shadowed-variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fshadowed-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fshadowed-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fshadowed-variable.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "9b4fa3c5c2a97d76e14ae9e995747800b60363d7", "filename": "src/test/debug-info/simple-lexical-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fsimple-lexical-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fsimple-lexical-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fsimple-lexical-scope.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "3bc6ce70a71785dd3d6fd559f5bfee6b75738068", "filename": "src/test/debug-info/simple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fsimple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fsimple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fsimple-struct.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print pretty off\n // debugger:rbreak zzz\n // debugger:run"}, {"sha": "e99a4234df0e1ae2e955d487225431ce6bf592fc", "filename": "src/test/debug-info/simple-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fsimple-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fsimple-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fsimple-tuple.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print pretty off\n // debugger:rbreak zzz\n // debugger:run"}, {"sha": "fd94faeb7c217dee7952388dfac31d64523b5c0f", "filename": "src/test/debug-info/static-method-on-struct-and-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fstatic-method-on-struct-and-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fstatic-method-on-struct-and-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstatic-method-on-struct-and-enum.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "01a8233a96e87ecfdfa177de26571b3659f295b9", "filename": "src/test/debug-info/struct-in-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -11,7 +11,7 @@\n // xfail-tidy-linelength\n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print union on\n // debugger:rbreak zzz\n // debugger:run"}, {"sha": "7040448cb35ca817d61123abdaa8a5b1a8fbed16", "filename": "src/test/debug-info/struct-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fstruct-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fstruct-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-in-struct.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print pretty off\n // debugger:rbreak zzz\n // debugger:run"}, {"sha": "a5c1d0e81c6d29876c1ca965b96401d4ca4594db", "filename": "src/test/debug-info/struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -11,7 +11,7 @@\n // xfail-tidy-linelength\n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print union on\n // debugger:rbreak zzz\n // debugger:run"}, {"sha": "bae094cefd781b9841d55eabf7746369a053df64", "filename": "src/test/debug-info/struct-with-destructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fstruct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fstruct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-with-destructor.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "429f2e77deb5d398b52a10d3a257ba04854575d5", "filename": "src/test/debug-info/trait-generic-static-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Ftrait-generic-static-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Ftrait-generic-static-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftrait-generic-static-default-method.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n "}, {"sha": "ef34c50bbf7b2b86576d254d703db4317a23b57b", "filename": "src/test/debug-info/trait-pointers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Ftrait-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Ftrait-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftrait-pointers.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:run\n \n #[allow(unused_variable)];"}, {"sha": "81b0348bed0f4bb74204b23957bb5187218ea9e7", "filename": "src/test/debug-info/tuple-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Ftuple-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Ftuple-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-in-struct.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print pretty off\n // debugger:rbreak zzz\n // debugger:run"}, {"sha": "19c331079b909ceb04a203a2470da5e9eb4964f3", "filename": "src/test/debug-info/tuple-in-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Ftuple-in-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Ftuple-in-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-in-tuple.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print pretty off\n // debugger:rbreak zzz\n // debugger:run"}, {"sha": "1993fe91b733c0a95dbee52b5473b5f65c0c5555", "filename": "src/test/debug-info/tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Ftuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Ftuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-struct.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print pretty off\n // debugger:rbreak zzz\n // debugger:run"}, {"sha": "fb90fe5c138de0776301cb07ead9b4fa893423ab", "filename": "src/test/debug-info/tuple-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -11,7 +11,7 @@\n // xfail-tidy-linelength\n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print union on\n // debugger:rbreak zzz\n // debugger:run"}, {"sha": "f0383b97dd0f7178741093ba70f3c2c3b73718e7", "filename": "src/test/debug-info/unique-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Funique-enum.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "dc586afaa2425571a645dcb1131fb118c27b54aa", "filename": "src/test/debug-info/var-captured-in-nested-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-nested-closure.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -11,7 +11,7 @@\n // xfail-win32: FIXME #10474\n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "e9b8dc46625156b5629d7ce2623a71eda70d011a", "filename": "src/test/debug-info/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "092f7ee443e153a0e25ec4319ad3cef1856f66bd", "filename": "src/test/debug-info/var-captured-in-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-stack-closure.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:rbreak zzz\n // debugger:run\n // debugger:finish"}, {"sha": "00e0e0fa783105c53372f80e4fd4ed2da3f044a0", "filename": "src/test/debug-info/vec-slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fvec-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fvec-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvec-slices.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print pretty off\n // debugger:rbreak zzz\n // debugger:run"}, {"sha": "6806e2f2b3d5bcd80dc9b4b5a2d7fa0b38d4770c", "filename": "src/test/debug-info/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Fdebug-info%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvec.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-android: FIXME(#10381)\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-g\n // debugger:set print pretty off\n // debugger:rbreak zzz\n // debugger:run"}, {"sha": "9a198977aa384e45a6ddf509af6f658f2d8a682e", "filename": "src/test/run-make/bootstrap-from-c-with-green/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2FMakefile?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -1,7 +1,7 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) lib.rs -Z gen-crate-map\n+\t$(RUSTC) lib.rs -C gen-crate-map\n \tln -nsf $(call DYLIB,boot-*) $(call DYLIB,boot)\n \t$(CC) main.c -o $(call RUN,main) -lboot -Wl,-rpath,$(TMPDIR)\n \t$(call RUN,main)"}, {"sha": "9a198977aa384e45a6ddf509af6f658f2d8a682e", "filename": "src/test/run-make/bootstrap-from-c-with-native/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2FMakefile?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -1,7 +1,7 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) lib.rs -Z gen-crate-map\n+\t$(RUSTC) lib.rs -C gen-crate-map\n \tln -nsf $(call DYLIB,boot-*) $(call DYLIB,boot)\n \t$(CC) main.c -o $(call RUN,main) -lboot -Wl,-rpath,$(TMPDIR)\n \t$(call RUN,main)"}, {"sha": "6fa5369015bbbbffa1fb7c50b54061868ae37ba6", "filename": "src/test/run-make/c-link-to-rust-staticlib/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -5,9 +5,9 @@ ifneq ($(shell uname),Darwin)\n endif\n \n all:\n-\t$(RUSTC) foo.rs -Z gen-crate-map\n+\t$(RUSTC) foo.rs -C gen-crate-map\n \tln -s $(call STATICLIB,foo-*) $(call STATICLIB,foo)\n-\t$(CC) bar.c -lfoo -o $(call RUN,bar) $(EXTRAFLAGS) -lstdc++ \n+\t$(CC) bar.c -lfoo -o $(call RUN,bar) $(EXTRAFLAGS) -lstdc++\n \t$(call RUN,bar)\n \trm $(call STATICLIB,foo*)\n \t$(call RUN,bar)"}, {"sha": "af120c9baebba9d1ae5d2b43d9720d1ac3b1b9cc", "filename": "src/test/run-make/lto-smoke-c/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -5,7 +5,7 @@ ifneq ($(shell uname),Darwin)\n endif\n \n all:\n-\t$(RUSTC) foo.rs -Z gen-crate-map -Z lto\n+\t$(RUSTC) foo.rs -C gen-crate-map -Z lto\n \tln -s $(call STATICLIB,foo-*) $(call STATICLIB,foo)\n \t$(CC) bar.c -lfoo -o $(call RUN,bar) $(EXTRAFLAGS) -lstdc++\n \t$(call RUN,bar)"}, {"sha": "76106ada144874ff1423d9a83db0d258fb71b057", "filename": "src/test/run-make/mixing-deps/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Frun-make%2Fmixing-deps%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Frun-make%2Fmixing-deps%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmixing-deps%2FMakefile?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -2,6 +2,6 @@\n \n all:\n \t$(RUSTC) both.rs\n-\t$(RUSTC) dylib.rs -Z prefer-dynamic\n+\t$(RUSTC) dylib.rs -C prefer-dynamic\n \t$(RUSTC) prog.rs\n \t$(call RUN,prog)"}, {"sha": "38759b2f52490a52c97724df3f5eaafde5207a64", "filename": "src/test/run-make/prefer-dylib/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Frun-make%2Fprefer-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Frun-make%2Fprefer-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fprefer-dylib%2FMakefile?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -2,7 +2,7 @@\n \n all:\n \t$(RUSTC) bar.rs --crate-type=dylib --crate-type=rlib\n-\t$(RUSTC) foo.rs -Z prefer-dynamic\n+\t$(RUSTC) foo.rs -C prefer-dynamic\n \t$(call RUN,foo)\n \trm $(TMPDIR)/*bar*\n \t$(call FAILS,foo)"}, {"sha": "ea7fa06f5ef19268c73b802862e413a8ec6b0563", "filename": "src/test/run-make/prune-link-args/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Frun-make%2Fprune-link-args%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Frun-make%2Fprune-link-args%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fprune-link-args%2FMakefile?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -1,6 +1,6 @@\n -include ../tools.mk\n # Notice the space in the end, this emulates the output of pkg-config\n-RUSTC_FLAGS = --link-args \"-lc \"\n+RUSTC_FLAGS = -C link-args=\"-lc \"\n \n all:\n \t$(RUSTC) $(RUSTC_FLAGS) empty.rs"}, {"sha": "f91112416e372868d9997bf79af96db300b78011", "filename": "src/test/run-pass/issue-7712.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Frun-pass%2Fissue-7712.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d440a569bb34ef31af7eff26105a115120a85e80/src%2Ftest%2Frun-pass%2Fissue-7712.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7712.rs?ref=d440a569bb34ef31af7eff26105a115120a85e80", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:-Z debug-info\n+// compile-flags:-g\n \n pub trait TraitWithDefaultMethod {\n     fn method(self) {"}]}