{"sha": "140a837fb647c5554102ec28e8713a913224cdbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MGE4MzdmYjY0N2M1NTU0MTAyZWMyOGU4NzEzYTkxMzIyNGNkYmI=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-02-23T17:32:45Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-06T03:47:05Z"}, "message": "Make misc checking 1 more parallel", "tree": {"sha": "bd791349bc5cc6007d14dca6b8ae9d895dde1591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd791349bc5cc6007d14dca6b8ae9d895dde1591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/140a837fb647c5554102ec28e8713a913224cdbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/140a837fb647c5554102ec28e8713a913224cdbb", "html_url": "https://github.com/rust-lang/rust/commit/140a837fb647c5554102ec28e8713a913224cdbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/140a837fb647c5554102ec28e8713a913224cdbb/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1745957d637d86f111f4aa96e47f68a7433f0e08", "url": "https://api.github.com/repos/rust-lang/rust/commits/1745957d637d86f111f4aa96e47f68a7433f0e08", "html_url": "https://github.com/rust-lang/rust/commit/1745957d637d86f111f4aa96e47f68a7433f0e08"}], "stats": {"total": 54, "additions": 17, "deletions": 37}, "files": [{"sha": "86f7e149964883d0b410dd039dcd1b1058759dc7", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/140a837fb647c5554102ec28e8713a913224cdbb/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/140a837fb647c5554102ec28e8713a913224cdbb/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=140a837fb647c5554102ec28e8713a913224cdbb", "patch": "@@ -344,12 +344,6 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckAttrVisitor<'a, 'tcx> {\n     }\n }\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    for &module in tcx.hir().krate().modules.keys() {\n-        tcx.ensure().check_mod_attrs(tcx.hir().local_def_id(module));\n-    }\n-}\n-\n fn is_c_like_enum(item: &hir::Item) -> bool {\n     if let hir::ItemKind::Enum(ref def, _) = item.node {\n         for variant in &def.variants {"}, {"sha": "1677384059e09e276c351a8734c688a3f3ee83e1", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/140a837fb647c5554102ec28e8713a913224cdbb/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/140a837fb647c5554102ec28e8713a913224cdbb/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=140a837fb647c5554102ec28e8713a913224cdbb", "patch": "@@ -456,12 +456,6 @@ impl<'a, 'tcx> Index<'tcx> {\n     }\n }\n \n-pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    for &module in tcx.hir().krate().modules.keys() {\n-        tcx.ensure().check_mod_unstable_api_usage(tcx.hir().local_def_id(module));\n-    }\n-}\n-\n /// Cross-references the feature names of unstable APIs with enabled\n /// features and possibly prints errors.\n fn check_mod_unstable_api_usage<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {"}, {"sha": "2066747a6ffb6b18a198f071ef4941c53a7e3576", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/140a837fb647c5554102ec28e8713a913224cdbb/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/140a837fb647c5554102ec28e8713a913224cdbb/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=140a837fb647c5554102ec28e8713a913224cdbb", "patch": "@@ -191,27 +191,25 @@ fn analysis<'tcx>(\n \n     let sess = tcx.sess;\n \n-    parallel!({\n-        time(sess, \"looking for entry point\", || {\n-            middle::entry::find_entry_point(tcx)\n-        });\n+    time(sess, \"misc checking 1\", || {\n+        parallel!({\n+            time(sess, \"looking for entry point\", || {\n+                middle::entry::find_entry_point(tcx)\n+            });\n \n-        time(sess, \"looking for plugin registrar\", || {\n-            plugin::build::find_plugin_registrar(tcx)\n-        });\n+            time(sess, \"looking for plugin registrar\", || {\n+                plugin::build::find_plugin_registrar(tcx)\n+            });\n \n-        time(sess, \"looking for derive registrar\", || {\n-            proc_macro_decls::find(tcx)\n-        });\n-    }, {\n-        time(sess, \"loop checking\", || loops::check_crate(tcx));\n-    }, {\n-        time(sess, \"attribute checking\", || {\n-            hir::check_attr::check_crate(tcx)\n-        });\n-    }, {\n-        time(sess, \"stability checking\", || {\n-            stability::check_unstable_api_usage(tcx)\n+            time(sess, \"looking for derive registrar\", || {\n+                proc_macro_decls::find(tcx)\n+            });\n+        }, {\n+            par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {\n+                tcx.ensure().check_mod_loops(tcx.hir().local_def_id(module));\n+                tcx.ensure().check_mod_attrs(tcx.hir().local_def_id(module));\n+                tcx.ensure().check_mod_unstable_api_usage(tcx.hir().local_def_id(module));\n+            });\n         });\n     });\n "}, {"sha": "fa7cb69fcf7d9fc60d1a62a7f6151faf14395801", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/140a837fb647c5554102ec28e8713a913224cdbb/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/140a837fb647c5554102ec28e8713a913224cdbb/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=140a837fb647c5554102ec28e8713a913224cdbb", "patch": "@@ -46,12 +46,6 @@ struct CheckLoopVisitor<'a, 'hir: 'a> {\n     cx: Context,\n }\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    for &module in tcx.hir().krate().modules.keys() {\n-        tcx.ensure().check_mod_loops(tcx.hir().local_def_id(module));\n-    }\n-}\n-\n fn check_mod_loops<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckLoopVisitor {\n         sess: &tcx.sess,"}]}