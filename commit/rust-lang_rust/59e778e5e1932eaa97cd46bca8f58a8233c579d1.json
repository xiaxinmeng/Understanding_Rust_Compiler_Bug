{"sha": "59e778e5e1932eaa97cd46bca8f58a8233c579d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZTc3OGU1ZTE5MzJlYWE5N2NkNDZiY2E4ZjU4YTgyMzNjNTc5ZDE=", "commit": {"author": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2017-09-30T01:57:12Z"}, "committer": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2017-09-30T02:34:49Z"}, "message": "improve documentation for resolve()", "tree": {"sha": "b55eff65aadc4c166cb633279ed12b631da3a976", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b55eff65aadc4c166cb633279ed12b631da3a976"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59e778e5e1932eaa97cd46bca8f58a8233c579d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59e778e5e1932eaa97cd46bca8f58a8233c579d1", "html_url": "https://github.com/rust-lang/rust/commit/59e778e5e1932eaa97cd46bca8f58a8233c579d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59e778e5e1932eaa97cd46bca8f58a8233c579d1/comments", "author": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08e1f0b9d74ac5cdf115b9548d10da1ca01f966d", "url": "https://api.github.com/repos/rust-lang/rust/commits/08e1f0b9d74ac5cdf115b9548d10da1ca01f966d", "html_url": "https://github.com/rust-lang/rust/commit/08e1f0b9d74ac5cdf115b9548d10da1ca01f966d"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "9560d6359a53203b138c331f182f07f90172564a", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/59e778e5e1932eaa97cd46bca8f58a8233c579d1/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e778e5e1932eaa97cd46bca8f58a8233c579d1/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=59e778e5e1932eaa97cd46bca8f58a8233c579d1", "patch": "@@ -116,8 +116,24 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n         self.def.def_id()\n     }\n \n-    /// The point where linking happens. Resolve a (def_id, substs)\n-    /// pair to an instance.\n+    /// Resolve a (def_id, substs) pair to an (optional) instance -- most commonly,\n+    /// this is used to find the precise code that will run for a trait method invocation,\n+    /// if known.\n+    ///\n+    /// Returns `None` if we cannot resolve `Instance` to a specific instance.\n+    /// For example, in a context like this,\n+    ///\n+    /// ```\n+    /// fn foo<T: Debug>(t: T) { ... }\n+    /// ```\n+    ///\n+    /// trying to resolve `Debug::fmt` applied to `T` will yield `None`, because we do not\n+    /// know what code ought to run. (Note that this setting is also affected by the\n+    /// `RevealMode` in the parameter environment.)\n+    ///\n+    /// Presuming that coherence and type-check have succeeded, if this method is invoked\n+    /// in a monomorphic context (i.e., like during trans), then it is guaranteed to return\n+    /// `Some`.\n     pub fn resolve(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                    param_env: ty::ParamEnv<'tcx>,\n                    def_id: DefId,"}]}