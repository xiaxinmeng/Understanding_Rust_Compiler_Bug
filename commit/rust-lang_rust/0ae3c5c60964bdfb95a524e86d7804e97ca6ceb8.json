{"sha": "0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8", "node_id": "C_kwDOAAsO6NoAKDBhZTNjNWM2MDk2NGJkZmI5NWE1MjRlODZkNzgwNGU5N2NhNmNlYjg", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-15T22:53:30Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-11-25T09:28:43Z"}, "message": "handle assoc consts in fulfill `ConstEquate`", "tree": {"sha": "25bf3c72b3da6124047415047165423376488d36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25bf3c72b3da6124047415047165423376488d36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8", "html_url": "https://github.com/rust-lang/rust/commit/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d75cd5c05111256a3c0d82d0df727cb2b52680b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d75cd5c05111256a3c0d82d0df727cb2b52680b7", "html_url": "https://github.com/rust-lang/rust/commit/d75cd5c05111256a3c0d82d0df727cb2b52680b7"}], "stats": {"total": 262, "additions": 88, "deletions": 174}, "files": [{"sha": "1fd0926fec98ec0f0f395f96ff7976910b69d678", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8", "patch": "@@ -457,41 +457,45 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                         tcx.features().generic_const_exprs,\n                         \"`ConstEquate` without a feature gate: {c1:?} {c2:?}\",\n                     );\n-                    debug!(?c1, ?c2, \"equating consts\");\n                     // FIXME: we probably should only try to unify abstract constants\n                     // if the constants depend on generic parameters.\n                     //\n                     // Let's just see where this breaks :shrug:\n-                    match (c1.kind(), c2.kind()) {\n-                        (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) => {\n-                            // FIXME: remove\n-                            use rustc_hir::def::DefKind;\n-                            if tcx.def_kind(a.def.did) == DefKind::AssocConst\n-                                || tcx.def_kind(b.def.did) == DefKind::AssocConst\n+                    {\n+                        let c1 =\n+                            if let Ok(Some(a)) = tcx.expand_abstract_consts(c1) { a } else { c1 };\n+                        let c2 =\n+                            if let Ok(Some(b)) = tcx.expand_abstract_consts(c2) { b } else { c2 };\n+                        debug!(\"equating consts:\\nc1= {:?}\\nc2= {:?}\", c1, c2);\n+\n+                        use rustc_hir::def::DefKind;\n+                        use ty::ConstKind::Unevaluated;\n+                        match (c1.kind(), c2.kind()) {\n+                            (Unevaluated(a), Unevaluated(b))\n+                                if a.def.did == b.def.did\n+                                    && tcx.def_kind(a.def.did) == DefKind::AssocConst =>\n                             {\n-                                // Two different constants using generic parameters ~> error.\n-                                let expected_found = ExpectedFound::new(true, c1, c2);\n-                                return ProcessResult::Error(\n-                                    FulfillmentErrorCode::CodeConstEquateError(\n-                                        expected_found,\n-                                        TypeError::ConstMismatch(expected_found),\n-                                    ),\n-                                );\n-                            }\n-\n-                            if let Ok(Some(a)) = tcx.expand_abstract_consts(c1)\n-                                && let Ok(Some(b)) = tcx.expand_abstract_consts(c2)\n-                                && a.ty() == b.ty() \n-                                && let Ok(new_obligations) = infcx\n+                                if let Ok(new_obligations) = infcx\n                                     .at(&obligation.cause, obligation.param_env)\n-                                    .eq(a, b) \n+                                    .trace(c1, c2)\n+                                    .eq(a.substs, b.substs)\n                                 {\n                                     return ProcessResult::Changed(mk_pending(\n                                         new_obligations.into_obligations(),\n                                     ));\n                                 }\n+                            }\n+                            (_, Unevaluated(_)) | (Unevaluated(_), _) => (),\n+                            (_, _) => {\n+                                if let Ok(new_obligations) =\n+                                    infcx.at(&obligation.cause, obligation.param_env).eq(c1, c2)\n+                                {\n+                                    return ProcessResult::Changed(mk_pending(\n+                                        new_obligations.into_obligations(),\n+                                    ));\n+                                }\n+                            }\n                         }\n-                        _ => {}\n                     }\n \n                     let stalled_on = &mut pending_obligation.stalled_on;"}, {"sha": "e8f89cb1aa2ca0b350115161ac48746b1f337852", "filename": "src/test/ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassoc_const_unification%2Fconst_equate_assoc_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassoc_const_unification%2Fconst_equate_assoc_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassoc_const_unification%2Fconst_equate_assoc_consts.rs?ref=0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8", "patch": "@@ -0,0 +1,27 @@\n+// check-pass\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+trait Trait {\n+    const ASSOC: usize;\n+}\n+impl<T> Trait for T {\n+    const ASSOC: usize = std::mem::size_of::<T>();\n+}\n+\n+struct Foo<T: Trait>([u8; T::ASSOC])\n+where\n+    [(); T::ASSOC]:;\n+\n+fn bar<T: Trait>()\n+where\n+    [(); T::ASSOC]:,\n+{\n+    let _: Foo<T> = Foo::<_>(make());\n+}\n+\n+fn make() -> ! {\n+    todo!()\n+}\n+\n+fn main() {}"}, {"sha": "39d658be67d402935d318106d61777fe4622a66d", "filename": "src/test/ui/const-generics/invariant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.rs?ref=0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8", "patch": "@@ -25,9 +25,10 @@ fn covariant(\n     v: &'static Foo<for<'a> fn(&'a ())>\n ) -> &'static Foo<fn(&'static ())> {\n     v\n+    //~^ ERROR mismatched types\n }\n \n fn main() {\n-    let y = covariant(&Foo([], PhantomData)); //~ ERROR mismatched types\n+    let y = covariant(&Foo([], PhantomData));\n     println!(\"{:?}\", y.0);\n }"}, {"sha": "aabe4c93b3624dcef9d911a8f148697f34f25917", "filename": "src/test/ui/const-generics/invariant.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.stderr?ref=0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8", "patch": "@@ -13,13 +13,13 @@ LL | impl SadBee for fn(&'static ()) {\n    = note: `#[warn(coherence_leak_check)]` on by default\n \n error[E0308]: mismatched types\n-  --> $DIR/invariant.rs:31:28\n+  --> $DIR/invariant.rs:27:5\n    |\n-LL |     let y = covariant(&Foo([], PhantomData));\n-   |                            ^^ expected `<_ as SadBee>::ASSOC`, found `<for<'a> fn(&'a ()) as SadBee>::ASSOC`\n+LL |     v\n+   |     ^ one type is more general than the other\n    |\n-   = note: expected constant `<_ as SadBee>::ASSOC`\n-              found constant `<for<'a> fn(&'a ()) as SadBee>::ASSOC`\n+   = note: expected reference `&Foo<fn(&())>`\n+              found reference `&Foo<for<'a> fn(&'a ())>`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "a16b28253b55b16b72f06d6e955bb2af75e952cb", "filename": "src/test/ui/const-generics/issues/issue-83249.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.rs?ref=0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8", "patch": "@@ -15,9 +15,9 @@ fn foo<T: Foo>(_: [u8; T::N]) -> T {\n \n pub fn bar() {\n     let _: u8 = foo([0; 1]);\n-    //~^ ERROR mismatched types\n-\n+    \n     let _ = foo([0; 1]);\n+    //~^ ERROR type annotations needed\n }\n \n fn main() {}"}, {"sha": "362b8554b2fcb91617bc1a4c371c44753b4928a2", "filename": "src/test/ui/const-generics/issues/issue-83249.stderr", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr?ref=0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8", "patch": "@@ -1,12 +1,14 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-83249.rs:17:21\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-83249.rs:19:9\n    |\n-LL |     let _: u8 = foo([0; 1]);\n-   |                     ^^^^^^ expected `<_ as Foo>::N`, found `<u8 as Foo>::N`\n+LL |     let _ = foo([0; 1]);\n+   |         ^\n    |\n-   = note: expected constant `<_ as Foo>::N`\n-              found constant `<u8 as Foo>::N`\n+help: consider giving this pattern a type\n+   |\n+LL |     let _: _ = foo([0; 1]);\n+   |          +++\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "71c164ab0a5bf68dd863951b0bd51bd98f7dff4c", "filename": "src/test/ui/const-generics/issues/issue-83765.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.rs?ref=0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8", "patch": "@@ -3,6 +3,7 @@\n \n trait TensorDimension {\n     const DIM: usize;\n+    //~^ ERROR cycle detected when resolving instance\n     // FIXME Given the current state of the compiler its expected that we cycle here,\n     // but the cycle is still wrong.\n     const ISSCALAR: bool = Self::DIM == 0;\n@@ -47,25 +48,19 @@ impl<'a, T: Broadcastable, const DIM: usize> TensorDimension for LazyUpdim<'a, T\n \n impl<'a, T: Broadcastable, const DIM: usize> TensorSize for LazyUpdim<'a, T, { T::DIM }, DIM> {\n     fn size(&self) -> [usize; DIM] {\n-      //~^ ERROR method not compatible\n         self.size\n     }\n }\n \n impl<'a, T: Broadcastable, const DIM: usize> Broadcastable for LazyUpdim<'a, T, { T::DIM }, DIM> {\n     type Element = T::Element;\n     fn bget(&self, index: [usize; DIM]) -> Option<Self::Element> {\n-        //~^ ERROR method not compatible\n         assert!(DIM >= T::DIM);\n         if !self.inbounds(index) {\n-            //~^ ERROR mismatched types\n-            //~^^ ERROR unconstrained generic constant\n             return None;\n         }\n         let size = self.size();\n-        //~^ ERROR unconstrained generic constant\n         let newindex: [usize; T::DIM] = Default::default();\n-        //~^ ERROR the trait bound\n         self.reference.bget(newindex)\n     }\n }\n@@ -84,10 +79,7 @@ impl<'a, R, T: Broadcastable, F: Fn(T::Element) -> R, const DIM: usize> TensorSi\n     for BMap<'a, R, T, F, DIM>\n {\n     fn size(&self) -> [usize; DIM] {\n-        //~^ ERROR method not compatible\n         self.reference.size()\n-        //~^ ERROR unconstrained\n-        //~| ERROR mismatched types\n     }\n }\n \n@@ -96,10 +88,7 @@ impl<'a, R, T: Broadcastable, F: Fn(T::Element) -> R, const DIM: usize> Broadcas\n {\n     type Element = R;\n     fn bget(&self, index: [usize; DIM]) -> Option<Self::Element> {\n-        //~^ ERROR method not compatible\n         self.reference.bget(index).map(&self.closure)\n-        //~^ ERROR unconstrained generic constant\n-        //~| ERROR mismatched types\n     }\n }\n "}, {"sha": "d7b2b006c2aeaefdb3944a148e4bf1091084b064", "filename": "src/test/ui/const-generics/issues/issue-83765.stderr", "status": "modified", "additions": 15, "deletions": 124, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr?ref=0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8", "patch": "@@ -1,130 +1,21 @@\n-error[E0308]: method not compatible with trait\n-  --> $DIR/issue-83765.rs:49:5\n+error[E0391]: cycle detected when resolving instance `<LazyUpdim<'_, T, <T as TensorDimension>::DIM, DIM> as TensorDimension>::DIM`\n+  --> $DIR/issue-83765.rs:5:5\n    |\n-LL |     fn size(&self) -> [usize; DIM] {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Self::DIM`, found `DIM`\n+LL |     const DIM: usize;\n+   |     ^^^^^^^^^^^^^^^^\n    |\n-   = note: expected constant `Self::DIM`\n-              found constant `DIM`\n-\n-error[E0308]: method not compatible with trait\n-  --> $DIR/issue-83765.rs:57:5\n-   |\n-LL |     fn bget(&self, index: [usize; DIM]) -> Option<Self::Element> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Self::DIM`, found `DIM`\n-   |\n-   = note: expected constant `Self::DIM`\n-              found constant `DIM`\n-\n-error[E0308]: method not compatible with trait\n-  --> $DIR/issue-83765.rs:86:5\n-   |\n-LL |     fn size(&self) -> [usize; DIM] {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Self::DIM`, found `DIM`\n-   |\n-   = note: expected constant `Self::DIM`\n-              found constant `DIM`\n-\n-error[E0308]: method not compatible with trait\n-  --> $DIR/issue-83765.rs:98:5\n-   |\n-LL |     fn bget(&self, index: [usize; DIM]) -> Option<Self::Element> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Self::DIM`, found `DIM`\n-   |\n-   = note: expected constant `Self::DIM`\n-              found constant `DIM`\n-\n-error: unconstrained generic constant\n-  --> $DIR/issue-83765.rs:60:18\n-   |\n-LL |         if !self.inbounds(index) {\n-   |                  ^^^^^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); Self::DIM]:`\n-note: required by a bound in `TensorSize::inbounds`\n-  --> $DIR/issue-83765.rs:16:39\n-   |\n-LL |     fn inbounds(&self, index: [usize; Self::DIM]) -> bool {\n-   |                                       ^^^^^^^^^ required by this bound in `TensorSize::inbounds`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-83765.rs:60:27\n-   |\n-LL |         if !self.inbounds(index) {\n-   |                           ^^^^^ expected `Self::DIM`, found `DIM`\n-   |\n-   = note: expected constant `Self::DIM`\n-              found constant `DIM`\n-\n-error: unconstrained generic constant\n-  --> $DIR/issue-83765.rs:65:25\n-   |\n-LL |         let size = self.size();\n-   |                         ^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); Self::DIM]:`\n-note: required by a bound in `TensorSize::size`\n-  --> $DIR/issue-83765.rs:15:31\n-   |\n-LL |     fn size(&self) -> [usize; Self::DIM];\n-   |                               ^^^^^^^^^ required by this bound in `TensorSize::size`\n-\n-error[E0277]: the trait bound `[usize; _]: Default` is not satisfied\n-  --> $DIR/issue-83765.rs:67:41\n-   |\n-LL |         let newindex: [usize; T::DIM] = Default::default();\n-   |                                         ^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `[usize; _]`\n-   |\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n-   |\n-LL | impl<'a, T: Broadcastable, const DIM: usize> Broadcastable for LazyUpdim<'a, T, { T::DIM }, DIM> where [usize; _]: Default {\n-   |                                                                                                  +++++++++++++++++++++++++\n-\n-error: unconstrained generic constant\n-  --> $DIR/issue-83765.rs:88:24\n-   |\n-LL |         self.reference.size()\n-   |                        ^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); Self::DIM]:`\n-note: required by a bound in `TensorSize::size`\n-  --> $DIR/issue-83765.rs:15:31\n-   |\n-LL |     fn size(&self) -> [usize; Self::DIM];\n-   |                               ^^^^^^^^^ required by this bound in `TensorSize::size`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-83765.rs:88:9\n-   |\n-LL |         self.reference.size()\n-   |         ^^^^^^^^^^^^^^^^^^^^^ expected `DIM`, found `Self::DIM`\n-   |\n-   = note: expected constant `DIM`\n-              found constant `Self::DIM`\n-\n-error: unconstrained generic constant\n-  --> $DIR/issue-83765.rs:100:24\n-   |\n-LL |         self.reference.bget(index).map(&self.closure)\n-   |                        ^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); Self::DIM]:`\n-note: required by a bound in `Broadcastable::bget`\n-  --> $DIR/issue-83765.rs:23:35\n-   |\n-LL |     fn bget(&self, index: [usize; Self::DIM]) -> Option<Self::Element>;\n-   |                                   ^^^^^^^^^ required by this bound in `Broadcastable::bget`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-83765.rs:100:29\n+note: ...which requires computing candidate for `<LazyUpdim<'_, T, <T as TensorDimension>::DIM, DIM> as TensorDimension>`...\n+  --> $DIR/issue-83765.rs:4:1\n    |\n-LL |         self.reference.bget(index).map(&self.closure)\n-   |                             ^^^^^ expected `Self::DIM`, found `DIM`\n+LL | trait TensorDimension {\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which again requires resolving instance `<LazyUpdim<'_, T, <T as TensorDimension>::DIM, DIM> as TensorDimension>::DIM`, completing the cycle\n+note: cycle used when computing candidate for `<LazyUpdim<'_, T, { T::DIM }, DIM> as TensorDimension>`\n+  --> $DIR/issue-83765.rs:4:1\n    |\n-   = note: expected constant `Self::DIM`\n-              found constant `DIM`\n+LL | trait TensorDimension {\n+   | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 12 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0277, E0308.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0391`."}]}