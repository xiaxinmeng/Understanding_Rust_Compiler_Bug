{"sha": "81f51fcd654f961af97133c6995fe802e9913f05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZjUxZmNkNjU0Zjk2MWFmOTcxMzNjNjk5NWZlODAyZTk5MTNmMDU=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2021-03-16T13:54:17Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2021-03-16T13:54:17Z"}, "message": "minor style fixes per feedback on #8036", "tree": {"sha": "2e135e40193932da0743c3229343325c75088974", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e135e40193932da0743c3229343325c75088974"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81f51fcd654f961af97133c6995fe802e9913f05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81f51fcd654f961af97133c6995fe802e9913f05", "html_url": "https://github.com/rust-lang/rust/commit/81f51fcd654f961af97133c6995fe802e9913f05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81f51fcd654f961af97133c6995fe802e9913f05/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c49b5b7468a9954af86fd1724276261f396aba5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c49b5b7468a9954af86fd1724276261f396aba5d", "html_url": "https://github.com/rust-lang/rust/commit/c49b5b7468a9954af86fd1724276261f396aba5d"}], "stats": {"total": 48, "additions": 21, "deletions": 27}, "files": [{"sha": "4e4923e0d8b2ec115ec46e7c5a7faf1f6ccb8d0b", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/81f51fcd654f961af97133c6995fe802e9913f05/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f51fcd654f961af97133c6995fe802e9913f05/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=81f51fcd654f961af97133c6995fe802e9913f05", "patch": "@@ -307,12 +307,13 @@ impl<'a> Render<'a> {\n }\n \n fn compute_exact_type_match(ctx: &CompletionContext, completion_ty: &hir::Type) -> bool {\n-    if let Some(expected_type) = ctx.expected_type.as_ref() {\n-        // We don't ever consider unit type to be an exact type match, since\n-        // nearly always this is not meaningful to the user.\n-        completion_ty == expected_type && !expected_type.is_unit()\n-    } else {\n-        false\n+    match ctx.expected_type.as_ref() {\n+        Some(expected_type) => {\n+            // We don't ever consider unit type to be an exact type match, since\n+            // nearly always this is not meaningful to the user.\n+            completion_ty == expected_type && !expected_type.is_unit()\n+        }\n+        None => false,\n     }\n }\n \n@@ -323,27 +324,20 @@ fn compute_exact_name_match(ctx: &CompletionContext, completion_name: impl Into<\n }\n \n fn compute_ref_match(ctx: &CompletionContext, completion_ty: &hir::Type) -> Option<Mutability> {\n-    let mut ref_match = None;\n-    if let Some(expected_type) = &ctx.expected_type {\n-        if completion_ty != expected_type {\n-            if let Some(expected_type_without_ref) = expected_type.remove_ref() {\n-                if completion_ty == &expected_type_without_ref\n-                    || completion_ty\n-                        .autoderef(ctx.db)\n-                        .any(|deref_ty| deref_ty == expected_type_without_ref)\n-                {\n-                    cov_mark::hit!(suggest_ref);\n-                    let mutability = if expected_type.is_mutable_reference() {\n-                        Mutability::Mut\n-                    } else {\n-                        Mutability::Shared\n-                    };\n-                    ref_match = Some(mutability);\n-                }\n-            }\n-        }\n-    };\n-    ref_match\n+    let expected_type = ctx.expected_type.as_ref()?;\n+    if completion_ty != expected_type {\n+        let expected_type_without_ref = expected_type.remove_ref()?;\n+        if completion_ty.autoderef(ctx.db).any(|deref_ty| deref_ty == expected_type_without_ref) {\n+            cov_mark::hit!(suggest_ref);\n+            let mutability = if expected_type.is_mutable_reference() {\n+                Mutability::Mut\n+            } else {\n+                Mutability::Shared\n+            };\n+            return Some(mutability);\n+        };\n+    }\n+    None\n }\n \n #[cfg(test)]"}]}