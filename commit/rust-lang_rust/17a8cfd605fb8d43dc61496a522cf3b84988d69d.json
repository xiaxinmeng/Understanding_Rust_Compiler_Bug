{"sha": "17a8cfd605fb8d43dc61496a522cf3b84988d69d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YThjZmQ2MDVmYjhkNDNkYzYxNDk2YTUyMmNmM2I4NDk4OGQ2OWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-09T15:54:40Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-13T09:56:38Z"}, "message": "no need for hook_panic_fn to return a bool", "tree": {"sha": "9934c53a9b6999102a12323c2dc036f7ad627c61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9934c53a9b6999102a12323c2dc036f7ad627c61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17a8cfd605fb8d43dc61496a522cf3b84988d69d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17a8cfd605fb8d43dc61496a522cf3b84988d69d", "html_url": "https://github.com/rust-lang/rust/commit/17a8cfd605fb8d43dc61496a522cf3b84988d69d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17a8cfd605fb8d43dc61496a522cf3b84988d69d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3ff02bdd85255ad75bae40aad53e520e37a8e4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ff02bdd85255ad75bae40aad53e520e37a8e4a", "html_url": "https://github.com/rust-lang/rust/commit/f3ff02bdd85255ad75bae40aad53e520e37a8e4a"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "7fd96ec2d1a5f0a6e0c4dea1b959140a1b7a97b1", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/17a8cfd605fb8d43dc61496a522cf3b84988d69d/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a8cfd605fb8d43dc61496a522cf3b84988d69d/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=17a8cfd605fb8d43dc61496a522cf3b84988d69d", "patch": "@@ -60,13 +60,13 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n \n     /// \"Intercept\" a function call to a panic-related function\n     /// because we have something special to do for it.\n-    /// Returns `true` if an intercept happened.\n-    pub fn hook_panic_fn(\n+    /// If this returns successfully (`Ok`), the function should just be evaluated normally.\n+    fn hook_panic_fn(\n         &mut self,\n         span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx>],\n-    ) -> InterpResult<'tcx, bool> {\n+    ) -> InterpResult<'tcx> {\n         let def_id = instance.def_id();\n         if Some(def_id) == self.tcx.lang_items().panic_fn()\n             || Some(def_id) == self.tcx.lang_items().begin_panic_fn()\n@@ -80,7 +80,7 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n             let (file, line, col) = self.location_triple_for_span(span);\n             Err(ConstEvalErrKind::Panic { msg, file, line, col }.into())\n         } else {\n-            Ok(false)\n+            Ok(())\n         }\n     }\n }\n@@ -225,13 +225,11 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 }\n             } else {\n                 // Some functions we support even if they are non-const -- but avoid testing\n-                // that for const fn!  We certainly do *not* want to actually call the fn\n+                // that for const fn!\n+                ecx.hook_panic_fn(span, instance, args)?;\n+                // We certainly do *not* want to actually call the fn\n                 // though, so be sure we return here.\n-                return if ecx.hook_panic_fn(span, instance, args)? {\n-                    Ok(None)\n-                } else {\n-                    throw_unsup_format!(\"calling non-const function `{}`\", instance)\n-                };\n+                throw_unsup_format!(\"calling non-const function `{}`\", instance)\n             }\n         }\n         // This is a const fn. Call it."}]}