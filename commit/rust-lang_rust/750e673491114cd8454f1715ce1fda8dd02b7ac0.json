{"sha": "750e673491114cd8454f1715ce1fda8dd02b7ac0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MGU2NzM0OTExMTRjZDg0NTRmMTcxNWNlMWZkYThkZDAyYjdhYzA=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-01-21T22:36:17Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-02-22T00:27:45Z"}, "message": "Report late-bound region lint as error in `check_generic_arg_count`", "tree": {"sha": "b670bcac552b48e970872c911419097ab3b39547", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b670bcac552b48e970872c911419097ab3b39547"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/750e673491114cd8454f1715ce1fda8dd02b7ac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/750e673491114cd8454f1715ce1fda8dd02b7ac0", "html_url": "https://github.com/rust-lang/rust/commit/750e673491114cd8454f1715ce1fda8dd02b7ac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/750e673491114cd8454f1715ce1fda8dd02b7ac0/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9939de24ac3580acfb92670f9bd568f90052340b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9939de24ac3580acfb92670f9bd568f90052340b", "html_url": "https://github.com/rust-lang/rust/commit/9939de24ac3580acfb92670f9bd568f90052340b"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "1e5e00445cccaf36d73779abee93f20420dc4540", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/750e673491114cd8454f1715ce1fda8dd02b7ac0/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750e673491114cd8454f1715ce1fda8dd02b7ac0/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=750e673491114cd8454f1715ce1fda8dd02b7ac0", "patch": "@@ -313,9 +313,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n \n         // Prohibit explicit lifetime arguments if late-bound lifetime parameters are present.\n-        let mut reported_late_bound_region_err = None;\n+        let mut reported_late_bound_region_err = false;\n         if !infer_lifetimes {\n             if let Some(span_late) = def.has_late_bound_regions {\n+                reported_late_bound_region_err = true;\n                 let msg = \"cannot specify lifetime arguments explicitly \\\n                            if late bound lifetime parameters are present\";\n                 let note = \"the late bound lifetime parameter is introduced here\";\n@@ -326,7 +327,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     let mut err = tcx.sess.struct_span_err(span, msg);\n                     err.span_note(span_late, note);\n                     err.emit();\n-                    reported_late_bound_region_err = Some(true);\n                 } else {\n                     let mut multispan = MultiSpan::from_span(span);\n                     multispan.push_span_label(span_late, note.to_string());\n@@ -336,7 +336,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         multispan,\n                         |lint| lint.build(msg).emit(),\n                     );\n-                    reported_late_bound_region_err = Some(false);\n                 }\n             }\n         }\n@@ -405,10 +404,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 true\n             };\n \n-        let mut arg_count_mismatch = reported_late_bound_region_err.unwrap_or(false);\n+        let mut arg_count_mismatch = reported_late_bound_region_err;\n         let mut unexpected_spans = vec![];\n \n-        if reported_late_bound_region_err.is_none()\n+        if !reported_late_bound_region_err\n             && (!infer_lifetimes || arg_counts.lifetimes > param_counts.lifetimes)\n         {\n             arg_count_mismatch |= check_kind_count("}]}