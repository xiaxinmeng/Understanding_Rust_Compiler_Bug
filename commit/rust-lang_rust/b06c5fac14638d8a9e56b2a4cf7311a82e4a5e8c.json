{"sha": "b06c5fac14638d8a9e56b2a4cf7311a82e4a5e8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNmM1ZmFjMTQ2MzhkOGE5ZTU2YjJhNGNmNzMxMWE4MmU0YTVlOGM=", "commit": {"author": {"name": "Geobert Quach", "email": "geobert@protonmail.com", "date": "2019-09-30T18:50:44Z"}, "committer": {"name": "Geobert Quach", "email": "geobert@protonmail.com", "date": "2019-09-30T18:50:44Z"}, "message": "feat(assists): Be smart about hashes\n\nAdd max_hashes_streak + 1 hashes to the raw string", "tree": {"sha": "cfd452a2a131351c3069955894af4dee573edd5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfd452a2a131351c3069955894af4dee573edd5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b06c5fac14638d8a9e56b2a4cf7311a82e4a5e8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b06c5fac14638d8a9e56b2a4cf7311a82e4a5e8c", "html_url": "https://github.com/rust-lang/rust/commit/b06c5fac14638d8a9e56b2a4cf7311a82e4a5e8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b06c5fac14638d8a9e56b2a4cf7311a82e4a5e8c/comments", "author": {"login": "Geobert", "id": 72570, "node_id": "MDQ6VXNlcjcyNTcw", "avatar_url": "https://avatars.githubusercontent.com/u/72570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geobert", "html_url": "https://github.com/Geobert", "followers_url": "https://api.github.com/users/Geobert/followers", "following_url": "https://api.github.com/users/Geobert/following{/other_user}", "gists_url": "https://api.github.com/users/Geobert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geobert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geobert/subscriptions", "organizations_url": "https://api.github.com/users/Geobert/orgs", "repos_url": "https://api.github.com/users/Geobert/repos", "events_url": "https://api.github.com/users/Geobert/events{/privacy}", "received_events_url": "https://api.github.com/users/Geobert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Geobert", "id": 72570, "node_id": "MDQ6VXNlcjcyNTcw", "avatar_url": "https://avatars.githubusercontent.com/u/72570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geobert", "html_url": "https://github.com/Geobert", "followers_url": "https://api.github.com/users/Geobert/followers", "following_url": "https://api.github.com/users/Geobert/following{/other_user}", "gists_url": "https://api.github.com/users/Geobert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geobert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geobert/subscriptions", "organizations_url": "https://api.github.com/users/Geobert/orgs", "repos_url": "https://api.github.com/users/Geobert/repos", "events_url": "https://api.github.com/users/Geobert/events{/privacy}", "received_events_url": "https://api.github.com/users/Geobert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e293c34e85d2343cd8f16842634133a2dee4e8ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/e293c34e85d2343cd8f16842634133a2dee4e8ad", "html_url": "https://github.com/rust-lang/rust/commit/e293c34e85d2343cd8f16842634133a2dee4e8ad"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "dd8db0b7dca0b43f803eeb325e304cd718063c42", "filename": "crates/ra_assists/src/assists/raw_string.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b06c5fac14638d8a9e56b2a4cf7311a82e4a5e8c/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06c5fac14638d8a9e56b2a4cf7311a82e4a5e8c/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs?ref=b06c5fac14638d8a9e56b2a4cf7311a82e4a5e8c", "patch": "@@ -28,7 +28,25 @@ pub(crate) fn make_raw_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n         if error.is_err() {\n             eprintln!(\"Error unescaping string\");\n         } else {\n-            edit.replace(literal.syntax().text_range(), format!(\"r#\\\"{}\\\"#\", unescaped));\n+            let mut max_hash_streak = 0;\n+            unescaped.chars().fold(0, |acc, c| {\n+                if c == '#' {\n+                    acc + 1\n+                } else {\n+                    if acc > max_hash_streak {\n+                        max_hash_streak = acc;\n+                    }\n+                    0\n+                }\n+            });\n+            let mut hashes = String::with_capacity(max_hash_streak + 1);\n+            for _ in 0..hashes.capacity() {\n+                hashes.push('#');\n+            }\n+            edit.replace(\n+                literal.syntax().text_range(),\n+                format!(\"r{}\\\"{}\\\"{}\", hashes, unescaped, hashes),\n+            );\n         }\n     });\n     ctx.build()\n@@ -136,6 +154,23 @@ string\"#;\n         )\n     }\n \n+    #[test]\n+    fn make_raw_string_hashes_inside_works() {\n+        check_assist(\n+            make_raw_string,\n+            r###\"\n+            fn f() {\n+                let s = <|>\"#random##\\nstring\";\n+            }\n+            \"###,\n+            r####\"\n+            fn f() {\n+                let s = <|>r###\"#random##\n+string\"###;\n+            }\n+            \"####,\n+        )\n+    }\n     #[test]\n     fn make_raw_string_nothing_to_unescape_works() {\n         check_assist("}]}