{"sha": "a51ad889dd712e8b665656ebf08a2f85034f7415", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MWFkODg5ZGQ3MTJlOGI2NjU2NTZlYmYwOGEyZjg1MDM0Zjc0MTU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-18T20:02:02Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-26T08:22:45Z"}, "message": "Decouple from DepKind.", "tree": {"sha": "393f2da6a782c3ca10fd20337df101d23772b68d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/393f2da6a782c3ca10fd20337df101d23772b68d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a51ad889dd712e8b665656ebf08a2f85034f7415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a51ad889dd712e8b665656ebf08a2f85034f7415", "html_url": "https://github.com/rust-lang/rust/commit/a51ad889dd712e8b665656ebf08a2f85034f7415", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a51ad889dd712e8b665656ebf08a2f85034f7415/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a52436619d94e42aa1e0ca57f412e5ce06ef561", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a52436619d94e42aa1e0ca57f412e5ce06ef561", "html_url": "https://github.com/rust-lang/rust/commit/2a52436619d94e42aa1e0ca57f412e5ce06ef561"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "dfb962227ffe3abe80ddb7ba100b944337e98313", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a51ad889dd712e8b665656ebf08a2f85034f7415/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a51ad889dd712e8b665656ebf08a2f85034f7415/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=a51ad889dd712e8b665656ebf08a2f85034f7415", "patch": "@@ -27,6 +27,8 @@ pub type PreviousDepGraph = rustc_query_system::dep_graph::PreviousDepGraph<DepK\n pub type SerializedDepGraph = rustc_query_system::dep_graph::SerializedDepGraph<DepKind>;\n \n impl rustc_query_system::dep_graph::DepKind for DepKind {\n+    const NULL: Self = DepKind::Null;\n+\n     fn is_eval_always(&self) -> bool {\n         DepKind::is_eval_always(self)\n     }\n@@ -82,6 +84,10 @@ impl rustc_query_system::dep_graph::DepKind for DepKind {\n             op(icx.task_deps)\n         })\n     }\n+\n+    fn can_reconstruct_query_key(&self) -> bool {\n+        DepKind::can_reconstruct_query_key(self)\n+    }\n }\n \n impl<'tcx> DepContext for TyCtxt<'tcx> {"}, {"sha": "c3b0103cc0c21788772b5a9f54a3d4d598171f08", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a51ad889dd712e8b665656ebf08a2f85034f7415/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a51ad889dd712e8b665656ebf08a2f85034f7415/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=a51ad889dd712e8b665656ebf08a2f85034f7415", "patch": "@@ -1,6 +1,5 @@\n //! Query configuration and description traits.\n \n-use crate::dep_graph::DepKind;\n use crate::dep_graph::SerializedDepNodeIndex;\n use crate::ty::query::caches::QueryCache;\n use crate::ty::query::plumbing::CycleError;\n@@ -23,7 +22,7 @@ pub trait QueryConfig<CTX> {\n     type Value: Clone;\n }\n \n-pub trait QueryContext: DepContext<DepKind = DepKind> {\n+pub trait QueryContext: DepContext {\n     type Query;\n \n     /// Access the session."}, {"sha": "ede1ccdbc04b9bdde985ea7c440d7b0db7a984fc", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a51ad889dd712e8b665656ebf08a2f85034f7415/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a51ad889dd712e8b665656ebf08a2f85034f7415/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=a51ad889dd712e8b665656ebf08a2f85034f7415", "patch": "@@ -2,7 +2,7 @@\n //! generate the actual methods on tcx which find and execute the provider,\n //! manage the caches, and so forth.\n \n-use crate::dep_graph::{DepKind, DepNode, DepNodeIndex, SerializedDepNodeIndex};\n+use crate::dep_graph::{DepNodeIndex, SerializedDepNodeIndex};\n use crate::ty::query::caches::QueryCache;\n use crate::ty::query::config::{QueryContext, QueryDescription};\n use crate::ty::query::job::{QueryInfo, QueryJob, QueryJobId, QueryJobInfo, QueryShardJobId};\n@@ -17,6 +17,7 @@ use rustc_data_structures::sharded::Sharded;\n use rustc_data_structures::sync::{Lock, LockGuard};\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, FatalError, Handler, Level};\n+use rustc_query_system::dep_graph::{DepKind, DepNode};\n use rustc_session::Session;\n use rustc_span::def_id::DefId;\n use rustc_span::source_map::DUMMY_SP;\n@@ -102,7 +103,7 @@ impl<CTX: QueryContext, C: QueryCache<CTX>> QueryState<CTX, C> {\n \n     pub(super) fn try_collect_active_jobs(\n         &self,\n-        kind: DepKind,\n+        kind: CTX::DepKind,\n         make_query: fn(C::Key) -> CTX::Query,\n         jobs: &mut FxHashMap<QueryJobId<CTX::DepKind>, QueryJobInfo<CTX>>,\n     ) -> Option<()>\n@@ -375,7 +376,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[inline(always)]\n     fn start_query<F, R>(\n         self,\n-        token: QueryJobId<DepKind>,\n+        token: QueryJobId<crate::dep_graph::DepKind>,\n         diagnostics: Option<&Lock<ThinVec<Diagnostic>>>,\n         compute: F,\n     ) -> R\n@@ -570,7 +571,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // Fast path for when incr. comp. is off. `to_dep_node` is\n         // expensive for some `DepKind`s.\n         if !self.dep_graph.is_fully_enabled() {\n-            let null_dep_node = DepNode::new_no_params(crate::dep_graph::DepKind::Null);\n+            let null_dep_node = DepNode::new_no_params(DepKind::NULL);\n             return self.force_query_with_job::<Q>(key, job, null_dep_node).0;\n         }\n \n@@ -634,7 +635,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         key: Q::Key,\n         prev_dep_node_index: SerializedDepNodeIndex,\n         dep_node_index: DepNodeIndex,\n-        dep_node: &DepNode,\n+        dep_node: &DepNode<crate::dep_graph::DepKind>,\n     ) -> Q::Value {\n         // Note this function can be called concurrently from the same query\n         // We must ensure that this is handled correctly.\n@@ -689,7 +690,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     fn incremental_verify_ich<Q: QueryDescription<TyCtxt<'tcx>>>(\n         self,\n         result: &Q::Value,\n-        dep_node: &DepNode,\n+        dep_node: &DepNode<crate::dep_graph::DepKind>,\n         dep_node_index: DepNodeIndex,\n     ) {\n         use rustc_data_structures::fingerprint::Fingerprint;\n@@ -716,8 +717,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     fn force_query_with_job<Q: QueryDescription<TyCtxt<'tcx>> + 'tcx>(\n         self,\n         key: Q::Key,\n-        job: JobOwner<'tcx, TyCtxt<'tcx>, Q::Cache>,\n-        dep_node: DepNode,\n+        job: JobOwner<'tcx, Self, Q::Cache>,\n+        dep_node: DepNode<crate::dep_graph::DepKind>,\n     ) -> (Q::Value, DepNodeIndex) {\n         // If the following assertion triggers, it can have two reasons:\n         // 1. Something is wrong with DepNode creation, either here or\n@@ -754,7 +755,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n \n         if unlikely!(!diagnostics.is_empty()) {\n-            if dep_node.kind != crate::dep_graph::DepKind::Null {\n+            if dep_node.kind != DepKind::NULL {\n                 self.queries.on_disk_cache.store_diagnostics(dep_node_index, diagnostics);\n             }\n         }\n@@ -803,7 +804,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         key: Q::Key,\n         span: Span,\n-        dep_node: DepNode,\n+        dep_node: DepNode<crate::dep_graph::DepKind>,\n     ) {\n         // We may be concurrently trying both execute and force a query.\n         // Ensure that only one of them runs the query."}, {"sha": "888151782c7ddb6d97db9c068920d93d97936868", "filename": "src/librustc_query_system/dep_graph/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a51ad889dd712e8b665656ebf08a2f85034f7415/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a51ad889dd712e8b665656ebf08a2f85034f7415/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs?ref=a51ad889dd712e8b665656ebf08a2f85034f7415", "patch": "@@ -54,6 +54,8 @@ pub trait DepContext: Copy {\n \n /// Describe the different families of dependency nodes.\n pub trait DepKind: Copy + fmt::Debug + Eq + Ord + Hash {\n+    const NULL: Self;\n+\n     /// Return whether this kind always require evaluation.\n     fn is_eval_always(&self) -> bool;\n \n@@ -72,4 +74,6 @@ pub trait DepKind: Copy + fmt::Debug + Eq + Ord + Hash {\n     fn read_deps<OP>(op: OP) -> ()\n     where\n         OP: for<'a> FnOnce(Option<&'a Lock<TaskDeps<Self>>>) -> ();\n+\n+    fn can_reconstruct_query_key(&self) -> bool;\n }"}]}