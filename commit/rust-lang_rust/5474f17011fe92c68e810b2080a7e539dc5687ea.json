{"sha": "5474f17011fe92c68e810b2080a7e539dc5687ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NzRmMTcwMTFmZTkyYzY4ZTgxMGIyMDgwYTdlNTM5ZGM1Njg3ZWE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-27T08:55:10Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T18:23:08Z"}, "message": "Remove hir::ImplItem::attrs.", "tree": {"sha": "ce4e9956d389110f5cd2d2f21b0774db5182e2f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce4e9956d389110f5cd2d2f21b0774db5182e2f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5474f17011fe92c68e810b2080a7e539dc5687ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5474f17011fe92c68e810b2080a7e539dc5687ea", "html_url": "https://github.com/rust-lang/rust/commit/5474f17011fe92c68e810b2080a7e539dc5687ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5474f17011fe92c68e810b2080a7e539dc5687ea/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c49359add2dd78b28b907cd2d7a06473ff91626e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c49359add2dd78b28b907cd2d7a06473ff91626e", "html_url": "https://github.com/rust-lang/rust/commit/c49359add2dd78b28b907cd2d7a06473ff91626e"}], "stats": {"total": 59, "additions": 23, "deletions": 36}, "files": [{"sha": "48efc9b64eb6702378bbdcc76b3088731be10572", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5474f17011fe92c68e810b2080a7e539dc5687ea/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5474f17011fe92c68e810b2080a7e539dc5687ea/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=5474f17011fe92c68e810b2080a7e539dc5687ea", "patch": "@@ -931,10 +931,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let has_value = true;\n         let (defaultness, _) = self.lower_defaultness(i.kind.defaultness(), has_value);\n         let hir_id = self.lower_node_id(i.id);\n+        self.lower_attrs(hir_id, &i.attrs);\n         hir::ImplItem {\n             def_id: hir_id.expect_owner(),\n             ident: i.ident,\n-            attrs: self.lower_attrs(hir_id, &i.attrs),\n             generics,\n             vis: self.lower_visibility(&i.vis, None),\n             defaultness,"}, {"sha": "6102c9d2acb7b99c16ea3573967091d918a6725e", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5474f17011fe92c68e810b2080a7e539dc5687ea/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5474f17011fe92c68e810b2080a7e539dc5687ea/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=5474f17011fe92c68e810b2080a7e539dc5687ea", "patch": "@@ -2090,7 +2090,6 @@ pub struct ImplItem<'hir> {\n     pub def_id: LocalDefId,\n     pub vis: Visibility<'hir>,\n     pub defaultness: Defaultness,\n-    pub attrs: &'hir [Attribute],\n     pub generics: Generics<'hir>,\n     pub kind: ImplItemKind<'hir>,\n     pub span: Span,\n@@ -3080,6 +3079,6 @@ mod size_asserts {\n \n     rustc_data_structures::static_assert_size!(super::Item<'static>, 200);\n     rustc_data_structures::static_assert_size!(super::TraitItem<'static>, 128);\n-    rustc_data_structures::static_assert_size!(super::ImplItem<'static>, 168);\n+    rustc_data_structures::static_assert_size!(super::ImplItem<'static>, 152);\n     rustc_data_structures::static_assert_size!(super::ForeignItem<'static>, 136);\n }"}, {"sha": "61280c9643605cb70fe3c2e8c782e6ae749c76eb", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5474f17011fe92c68e810b2080a7e539dc5687ea/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5474f17011fe92c68e810b2080a7e539dc5687ea/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=5474f17011fe92c68e810b2080a7e539dc5687ea", "patch": "@@ -988,16 +988,8 @@ pub fn walk_trait_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, trait_item_ref:\n \n pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplItem<'v>) {\n     // N.B., deliberately force a compilation error if/when new fields are added.\n-    let ImplItem {\n-        def_id: _,\n-        ident,\n-        ref vis,\n-        ref defaultness,\n-        attrs: _,\n-        ref generics,\n-        ref kind,\n-        span: _,\n-    } = *impl_item;\n+    let ImplItem { def_id: _, ident, ref vis, ref defaultness, ref generics, ref kind, span: _ } =\n+        *impl_item;\n \n     visitor.visit_ident(ident);\n     visitor.visit_vis(vis);"}, {"sha": "5b88a69835d272fdb04a6da762fa843cab883759", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5474f17011fe92c68e810b2080a7e539dc5687ea/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5474f17011fe92c68e810b2080a7e539dc5687ea/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=5474f17011fe92c68e810b2080a7e539dc5687ea", "patch": "@@ -152,22 +152,13 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for TraitItem<'_> {\n \n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ImplItem<'_> {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n-        let ImplItem {\n-            def_id: _,\n-            ident,\n-            ref vis,\n-            defaultness,\n-            ref attrs,\n-            ref generics,\n-            ref kind,\n-            span,\n-        } = *self;\n+        let ImplItem { def_id: _, ident, ref vis, defaultness, ref generics, ref kind, span } =\n+            *self;\n \n         hcx.hash_hir_item_like(|hcx| {\n             ident.name.hash_stable(hcx, hasher);\n             vis.hash_stable(hcx, hasher);\n             defaultness.hash_stable(hcx, hasher);\n-            attrs.hash_stable(hcx, hasher);\n             generics.hash_stable(hcx, hasher);\n             kind.hash_stable(hcx, hasher);\n             span.hash_stable(hcx, hasher);"}, {"sha": "49c8107e07be06c708314df24b005817de107f50", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5474f17011fe92c68e810b2080a7e539dc5687ea/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5474f17011fe92c68e810b2080a7e539dc5687ea/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=5474f17011fe92c68e810b2080a7e539dc5687ea", "patch": "@@ -988,7 +988,7 @@ impl<'a> State<'a> {\n         self.ann.pre(self, AnnNode::SubItem(ii.hir_id()));\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(ii.span.lo());\n-        self.print_outer_attributes(&ii.attrs);\n+        self.print_outer_attributes(self.attrs(ii.hir_id()));\n         self.print_defaultness(ii.defaultness);\n \n         match ii.kind {"}, {"sha": "2dd022b5ed7f3c182d81611252aaee136ae49974", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5474f17011fe92c68e810b2080a7e539dc5687ea/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5474f17011fe92c68e810b2080a7e539dc5687ea/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=5474f17011fe92c68e810b2080a7e539dc5687ea", "patch": "@@ -1067,14 +1067,15 @@ impl<'tcx> DumpVisitor<'tcx> {\n         match impl_item.kind {\n             hir::ImplItemKind::Const(ref ty, body) => {\n                 let body = self.tcx.hir().body(body);\n+                let attrs = self.tcx.hir().attrs(impl_item.hir_id());\n                 self.process_assoc_const(\n                     impl_item.hir_id(),\n                     impl_item.ident,\n                     &ty,\n                     Some(&body.value),\n                     impl_id,\n                     &impl_item.vis,\n-                    &impl_item.attrs,\n+                    attrs,\n                 );\n             }\n             hir::ImplItemKind::Fn(ref sig, body) => {"}, {"sha": "a6a1dba7bfa07b25c1aa40e8707e61ca6ff6947c", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5474f17011fe92c68e810b2080a7e539dc5687ea/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5474f17011fe92c68e810b2080a7e539dc5687ea/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=5474f17011fe92c68e810b2080a7e539dc5687ea", "patch": "@@ -426,9 +426,9 @@ impl<'tcx> SaveContext<'tcx> {\n                             let trait_id = self.tcx.trait_id_of_impl(impl_id);\n                             let mut docs = String::new();\n                             let mut attrs = vec![];\n-                            if let Some(Node::ImplItem(item)) = hir.find(hir_id) {\n-                                docs = self.docs_for_attrs(&item.attrs);\n-                                attrs = item.attrs.to_vec();\n+                            if let Some(Node::ImplItem(_)) = hir.find(hir_id) {\n+                                attrs = self.tcx.hir().attrs(hir_id).to_vec();\n+                                docs = self.docs_for_attrs(&attrs);\n                             }\n \n                             let mut decl_id = None;"}, {"sha": "362b11792a8def92b8b495d756cb5e7730cde229", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5474f17011fe92c68e810b2080a7e539dc5687ea/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5474f17011fe92c68e810b2080a7e539dc5687ea/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=5474f17011fe92c68e810b2080a7e539dc5687ea", "patch": "@@ -353,7 +353,7 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if is_relevant_impl(cx, item) {\n-            check_attrs(cx, item.span, item.ident.name, &item.attrs)\n+            check_attrs(cx, item.span, item.ident.name, cx.tcx.hir().attrs(item.hir_id()))\n         }\n     }\n "}, {"sha": "058f64780d69da0e2197ac383a7519bb31bb43a7", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5474f17011fe92c68e810b2080a7e539dc5687ea/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5474f17011fe92c68e810b2080a7e539dc5687ea/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=5474f17011fe92c68e810b2080a7e539dc5687ea", "patch": "@@ -260,7 +260,8 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n-        let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n+        let headers = check_attrs(cx, &self.valid_idents, attrs);\n         if self.in_trait_impl || in_external_macro(cx.tcx.sess, item.span) {\n             return;\n         }"}, {"sha": "b48b0b9f3e2f262c529d59247cd23e9f117927f5", "filename": "src/tools/clippy/clippy_lints/src/functions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5474f17011fe92c68e810b2080a7e539dc5687ea/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5474f17011fe92c68e810b2080a7e539dc5687ea/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs?ref=5474f17011fe92c68e810b2080a7e539dc5687ea", "patch": "@@ -312,11 +312,12 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n             if is_public && trait_ref_of_method(cx, item.hir_id()).is_none() {\n                 check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n             }\n-            let attr = must_use_attr(&item.attrs);\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            let attr = must_use_attr(attrs);\n             if let Some(attr) = attr {\n                 check_needless_must_use(cx, &sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n             } else if is_public\n-                && !is_proc_macro(cx.sess(), &item.attrs)\n+                && !is_proc_macro(cx.sess(), attrs)\n                 && trait_ref_of_method(cx, item.hir_id()).is_none()\n             {\n                 check_must_use_candidate("}, {"sha": "84852dd602bbb3c8ef17b852183fd6a68f1dbe3e", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5474f17011fe92c68e810b2080a7e539dc5687ea/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5474f17011fe92c68e810b2080a7e539dc5687ea/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=5474f17011fe92c68e810b2080a7e539dc5687ea", "patch": "@@ -183,7 +183,8 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n         }\n \n         let (article, desc) = cx.tcx.article_and_description(impl_item.def_id.to_def_id());\n-        self.check_missing_docs_attrs(cx, &impl_item.attrs, impl_item.span, article, desc);\n+        let attrs = cx.tcx.hir().attrs(impl_item.hir_id());\n+        self.check_missing_docs_attrs(cx, attrs, impl_item.span, article, desc);\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext<'tcx>, sf: &'tcx hir::StructField<'_>) {"}, {"sha": "c915e329087f53df0266f9e667f3305958b14dae", "filename": "src/tools/clippy/clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5474f17011fe92c68e810b2080a7e539dc5687ea/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5474f17011fe92c68e810b2080a7e539dc5687ea/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs?ref=5474f17011fe92c68e810b2080a7e539dc5687ea", "patch": "@@ -161,6 +161,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n             }\n         }\n \n-        check_missing_inline_attrs(cx, &impl_item.attrs, impl_item.span, desc);\n+        let attrs = cx.tcx.hir().attrs(impl_item.hir_id());\n+        check_missing_inline_attrs(cx, attrs, impl_item.span, desc);\n     }\n }"}, {"sha": "e95840e9db1cc6936b514ad2ad0804cda21b18f2", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5474f17011fe92c68e810b2080a7e539dc5687ea/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5474f17011fe92c68e810b2080a7e539dc5687ea/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=5474f17011fe92c68e810b2080a7e539dc5687ea", "patch": "@@ -40,7 +40,7 @@ impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n-        if !has_attr(cx.sess(), &item.attrs) {\n+        if !has_attr(cx.sess(), cx.tcx.hir().attrs(item.hir_id())) {\n             return;\n         }\n         println!(\"impl item `{}`\", item.ident.name);"}]}