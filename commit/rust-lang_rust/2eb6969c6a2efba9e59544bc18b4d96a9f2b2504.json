{"sha": "2eb6969c6a2efba9e59544bc18b4d96a9f2b2504", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYjY5NjljNmEyZWZiYTllNTk1NDRiYzE4YjRkOTZhOWYyYjI1MDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-29T07:34:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-29T07:34:13Z"}, "message": "Auto merge of #51290 - Pslydhh:master, r=alexcrichton\n\npark/park_timeout: prohibit spurious wakeups in next park\n\n<pre><code>\n// The implementation currently uses the trivial strategy of a Mutex+Condvar\n// with wakeup flag, which does not actually allow spurious wakeups.\n</pre></code>\n\nBecause does not actually allow spurious wakeups.\nso we have let thread.inner.cvar.wait(m) in the loop to prohibit spurious wakeups.\nbut if notified after we locked, this notification doesn't be consumed, it return, the next park will consume this notification...this is also 'spurious wakeup' case, 'one unpark() wakeups two  park()'.\n\nWe should improve this situation\uff1a\n`thread.inner.state.store(EMPTY, SeqCst);`", "tree": {"sha": "939c603efdcec98b3c4178d30c0dc3dc92a26b31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/939c603efdcec98b3c4178d30c0dc3dc92a26b31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eb6969c6a2efba9e59544bc18b4d96a9f2b2504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eb6969c6a2efba9e59544bc18b4d96a9f2b2504", "html_url": "https://github.com/rust-lang/rust/commit/2eb6969c6a2efba9e59544bc18b4d96a9f2b2504", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eb6969c6a2efba9e59544bc18b4d96a9f2b2504/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b50455c61847c4a417b5fb002a5258dbaf4a868", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b50455c61847c4a417b5fb002a5258dbaf4a868", "html_url": "https://github.com/rust-lang/rust/commit/3b50455c61847c4a417b5fb002a5258dbaf4a868"}, {"sha": "b352d2d167f1de4ed8a6da3405dc90fe9d646204", "url": "https://api.github.com/repos/rust-lang/rust/commits/b352d2d167f1de4ed8a6da3405dc90fe9d646204", "html_url": "https://github.com/rust-lang/rust/commit/b352d2d167f1de4ed8a6da3405dc90fe9d646204"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "90f054186d16118a7a1ae3a841240c21daa65f73", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2eb6969c6a2efba9e59544bc18b4d96a9f2b2504/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb6969c6a2efba9e59544bc18b4d96a9f2b2504/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=2eb6969c6a2efba9e59544bc18b4d96a9f2b2504", "patch": "@@ -796,7 +796,10 @@ pub fn park() {\n     let mut m = thread.inner.lock.lock().unwrap();\n     match thread.inner.state.compare_exchange(EMPTY, PARKED, SeqCst, SeqCst) {\n         Ok(_) => {}\n-        Err(NOTIFIED) => return, // notified after we locked\n+        Err(NOTIFIED) => {\n+            thread.inner.state.store(EMPTY, SeqCst);\n+            return;\n+        } // should consume this notification, so prohibit spurious wakeups in next park.\n         Err(_) => panic!(\"inconsistent park state\"),\n     }\n     loop {\n@@ -882,7 +885,10 @@ pub fn park_timeout(dur: Duration) {\n     let m = thread.inner.lock.lock().unwrap();\n     match thread.inner.state.compare_exchange(EMPTY, PARKED, SeqCst, SeqCst) {\n         Ok(_) => {}\n-        Err(NOTIFIED) => return, // notified after we locked\n+        Err(NOTIFIED) => {\n+            thread.inner.state.store(EMPTY, SeqCst);\n+            return;\n+        } // should consume this notification, so prohibit spurious wakeups in next park.\n         Err(_) => panic!(\"inconsistent park_timeout state\"),\n     }\n "}]}