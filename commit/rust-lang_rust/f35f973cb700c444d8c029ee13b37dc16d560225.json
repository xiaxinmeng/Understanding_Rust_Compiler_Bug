{"sha": "f35f973cb700c444d8c029ee13b37dc16d560225", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNWY5NzNjYjcwMGM0NDRkOGMwMjllZTEzYjM3ZGMxNmQ1NjAyMjU=", "commit": {"author": {"name": "Florian Zeitz", "email": "florob@babelmonkeys.de", "date": "2015-02-27T14:36:53Z"}, "committer": {"name": "Florian Zeitz", "email": "florob@babelmonkeys.de", "date": "2015-03-02T16:11:51Z"}, "message": "Use `const`s instead of `static`s where appropriate\n\nThis changes the type of some public constants/statics in libunicode.\nNotably some `&'static &'static [(char, char)]` have changed\nto `&'static [(char, char)]`. The regexp crate seems to be the\nsole user of these, yet this is technically a [breaking-change]", "tree": {"sha": "7d87e40045e89a5d75001ef4b241840870b6aed7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d87e40045e89a5d75001ef4b241840870b6aed7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f35f973cb700c444d8c029ee13b37dc16d560225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f35f973cb700c444d8c029ee13b37dc16d560225", "html_url": "https://github.com/rust-lang/rust/commit/f35f973cb700c444d8c029ee13b37dc16d560225", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f35f973cb700c444d8c029ee13b37dc16d560225/comments", "author": {"login": "Florob", "id": 133684, "node_id": "MDQ6VXNlcjEzMzY4NA==", "avatar_url": "https://avatars.githubusercontent.com/u/133684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Florob", "html_url": "https://github.com/Florob", "followers_url": "https://api.github.com/users/Florob/followers", "following_url": "https://api.github.com/users/Florob/following{/other_user}", "gists_url": "https://api.github.com/users/Florob/gists{/gist_id}", "starred_url": "https://api.github.com/users/Florob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Florob/subscriptions", "organizations_url": "https://api.github.com/users/Florob/orgs", "repos_url": "https://api.github.com/users/Florob/repos", "events_url": "https://api.github.com/users/Florob/events{/privacy}", "received_events_url": "https://api.github.com/users/Florob/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Florob", "id": 133684, "node_id": "MDQ6VXNlcjEzMzY4NA==", "avatar_url": "https://avatars.githubusercontent.com/u/133684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Florob", "html_url": "https://github.com/Florob", "followers_url": "https://api.github.com/users/Florob/followers", "following_url": "https://api.github.com/users/Florob/following{/other_user}", "gists_url": "https://api.github.com/users/Florob/gists{/gist_id}", "starred_url": "https://api.github.com/users/Florob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Florob/subscriptions", "organizations_url": "https://api.github.com/users/Florob/orgs", "repos_url": "https://api.github.com/users/Florob/repos", "events_url": "https://api.github.com/users/Florob/events{/privacy}", "received_events_url": "https://api.github.com/users/Florob/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cc8b6ec664f30b43f75551e95299d943c8a4e6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cc8b6ec664f30b43f75551e95299d943c8a4e6a", "html_url": "https://github.com/rust-lang/rust/commit/1cc8b6ec664f30b43f75551e95299d943c8a4e6a"}], "stats": {"total": 843, "additions": 419, "deletions": 424}, "files": [{"sha": "7ac8a9b041c8327f33c8b6a38f2d8d9f518ca56f", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -127,7 +127,7 @@ fn run_rfail_test(config: &Config, props: &TestProps, testfile: &Path) {\n     };\n \n     // The value our Makefile configures valgrind to return on failure\n-    static VALGRIND_ERR: int = 100;\n+    const VALGRIND_ERR: int = 100;\n     if proc_res.status.matches_exit_status(VALGRIND_ERR) {\n         fatal_proc_rec(\"run-fail test isn't valgrind-clean!\", &proc_res);\n     }\n@@ -139,7 +139,7 @@ fn run_rfail_test(config: &Config, props: &TestProps, testfile: &Path) {\n \n fn check_correct_failure_status(proc_res: &ProcRes) {\n     // The value the rust runtime returns on failure\n-    static RUST_ERR: int = 101;\n+    const RUST_ERR: int = 101;\n     if !proc_res.status.matches_exit_status(RUST_ERR) {\n         fatal_proc_rec(\n             &format!(\"failure produced the wrong error: {:?}\","}, {"sha": "c0d7c59ef6a1bbf2c1fdc42a002c31cda8a52562", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -14,7 +14,7 @@ use common::Config;\n use std::env;\n \n /// Conversion table from triple OS name to Rust SYSNAME\n-static OS_TABLE: &'static [(&'static str, &'static str)] = &[\n+const OS_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"mingw32\", \"windows\"),\n     (\"win32\", \"windows\"),\n     (\"windows\", \"windows\"),"}, {"sha": "5472ba3c7eda118fc60e72af2238aae2dace405b", "filename": "src/etc/unicode.py", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -290,11 +290,11 @@ def emit_bsearch_range_table(f):\n fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n     use core::cmp::Ordering::{Equal, Less, Greater};\n     use core::slice::SliceExt;\n-    r.binary_search(|&(lo,hi)| {\n+    r.binary_search_by(|&(lo,hi)| {\n         if lo <= c && c <= hi { Equal }\n         else if hi < c { Less }\n         else { Greater }\n-    }).found().is_some()\n+    }).is_ok()\n }\\n\n \"\"\")\n \n@@ -303,7 +303,7 @@ def emit_table(f, name, t_data, t_type = \"&'static [(char, char)]\", is_pub=True,\n     pub_string = \"\"\n     if is_pub:\n         pub_string = \"pub \"\n-    f.write(\"    %sstatic %s: %s = &[\\n\" % (pub_string, name, t_type))\n+    f.write(\"    %sconst %s: %s = &[\\n\" % (pub_string, name, t_type))\n     data = \"\"\n     first = True\n     for dat in t_data:\n@@ -329,14 +329,14 @@ def emit_property_module(f, mod, tbl, emit_fn):\n def emit_regex_module(f, cats, w_data):\n     f.write(\"pub mod regex {\\n\")\n     regex_class = \"&'static [(char, char)]\"\n-    class_table = \"&'static [(&'static str, &'static %s)]\" % regex_class\n+    class_table = \"&'static [(&'static str, %s)]\" % regex_class\n \n     emit_table(f, \"UNICODE_CLASSES\", cats, class_table,\n-        pfun=lambda x: \"(\\\"%s\\\",&super::%s::%s_table)\" % (x[0], x[1], x[0]))\n+        pfun=lambda x: \"(\\\"%s\\\",super::%s::%s_table)\" % (x[0], x[1], x[0]))\n \n-    f.write(\"    pub static PERLD: &'static %s = &super::general_category::Nd_table;\\n\\n\"\n+    f.write(\"    pub const PERLD: %s = super::general_category::Nd_table;\\n\\n\"\n             % regex_class)\n-    f.write(\"    pub static PERLS: &'static %s = &super::property::White_Space_table;\\n\\n\"\n+    f.write(\"    pub const PERLS: %s = super::property::White_Space_table;\\n\\n\"\n             % regex_class)\n \n     emit_table(f, \"PERLW\", w_data, regex_class)\n@@ -350,7 +350,7 @@ def emit_conversions_module(f, lowerupper, upperlower):\n     use core::slice::SliceExt;\n     use core::option::Option;\n     use core::option::Option::{Some, None};\n-    use core::slice;\n+    use core::result::Result::{Ok, Err};\n \n     pub fn to_lower(c: char) -> char {\n         match bsearch_case_table(c, LuLl_table) {\n@@ -367,13 +367,13 @@ def emit_conversions_module(f, lowerupper, upperlower):\n     }\n \n     fn bsearch_case_table(c: char, table: &'static [(char, char)]) -> Option<usize> {\n-        match table.binary_search(|&(key, _)| {\n+        match table.binary_search_by(|&(key, _)| {\n             if c == key { Equal }\n             else if key < c { Less }\n             else { Greater }\n         }) {\n-            slice::BinarySearchResult::Found(i) => Some(i),\n-            slice::BinarySearchResult::NotFound(_) => None,\n+            Ok(i) => Some(i),\n+            Err(_) => None,\n         }\n     }\n \n@@ -386,10 +386,9 @@ def emit_conversions_module(f, lowerupper, upperlower):\n \n def emit_grapheme_module(f, grapheme_table, grapheme_cats):\n     f.write(\"\"\"pub mod grapheme {\n-    use core::kinds::Copy;\n     use core::slice::SliceExt;\n     pub use self::GraphemeCat::*;\n-    use core::slice;\n+    use core::result::Result::{Ok, Err};\n \n     #[allow(non_camel_case_types)]\n     #[derive(Clone, Copy)]\n@@ -401,16 +400,16 @@ def emit_grapheme_module(f, grapheme_table, grapheme_cats):\n \n     fn bsearch_range_value_table(c: char, r: &'static [(char, char, GraphemeCat)]) -> GraphemeCat {\n         use core::cmp::Ordering::{Equal, Less, Greater};\n-        match r.binary_search(|&(lo, hi, _)| {\n+        match r.binary_search_by(|&(lo, hi, _)| {\n             if lo <= c && c <= hi { Equal }\n             else if hi < c { Less }\n             else { Greater }\n         }) {\n-            slice::BinarySearchResult::Found(idx) => {\n+            Ok(idx) => {\n                 let (_, _, cat) = r[idx];\n                 cat\n             }\n-            slice::BinarySearchResult::NotFound(_) => GC_Any\n+            Err(_) => GC_Any\n         }\n     }\n \n@@ -430,20 +429,20 @@ def emit_charwidth_module(f, width_table):\n     f.write(\"    use core::option::Option;\\n\")\n     f.write(\"    use core::option::Option::{Some, None};\\n\")\n     f.write(\"    use core::slice::SliceExt;\\n\")\n-    f.write(\"    use core::slice;\\n\")\n+    f.write(\"    use core::result::Result::{Ok, Err};\\n\")\n     f.write(\"\"\"\n     fn bsearch_range_value_table(c: char, is_cjk: bool, r: &'static [(char, char, u8, u8)]) -> u8 {\n         use core::cmp::Ordering::{Equal, Less, Greater};\n-        match r.binary_search(|&(lo, hi, _, _)| {\n+        match r.binary_search_by(|&(lo, hi, _, _)| {\n             if lo <= c && c <= hi { Equal }\n             else if hi < c { Less }\n             else { Greater }\n         }) {\n-            slice::BinarySearchResult::Found(idx) => {\n+            Ok(idx) => {\n                 let (_, _, r_ncjk, r_cjk) = r[idx];\n                 if is_cjk { r_cjk } else { r_ncjk }\n             }\n-            slice::BinarySearchResult::NotFound(_) => 1\n+            Err(_) => 1\n         }\n     }\n \"\"\")\n@@ -530,17 +529,17 @@ def comp_pfun(char):\n     fn bsearch_range_value_table(c: char, r: &'static [(char, char, u8)]) -> u8 {\n         use core::cmp::Ordering::{Equal, Less, Greater};\n         use core::slice::SliceExt;\n-        use core::slice;\n-        match r.binary_search(|&(lo, hi, _)| {\n+        use core::result::Result::{Ok, Err};\n+        match r.binary_search_by(|&(lo, hi, _)| {\n             if lo <= c && c <= hi { Equal }\n             else if hi < c { Less }\n             else { Greater }\n         }) {\n-            slice::BinarySearchResult::Found(idx) => {\n+            Ok(idx) => {\n                 let (_, _, result) = r[idx];\n                 result\n             }\n-            slice::BinarySearchResult::NotFound(_) => 0\n+            Err(_) => 0\n         }\n     }\\n\n \"\"\")\n@@ -609,7 +608,7 @@ def optimize_width_table(wtable):\n             unicode_version = re.search(pattern, readme.read()).groups()\n         rf.write(\"\"\"\n /// The version of [Unicode](http://www.unicode.org/)\n-/// that the `UnicodeChar` and `UnicodeStrPrelude` traits are based on.\n+/// that the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.\n pub const UNICODE_VERSION: (u64, u64, u64) = (%s, %s, %s);\n \"\"\" % unicode_version)\n         (canon_decomp, compat_decomp, gencats, combines,"}, {"sha": "e9b6ec22d6daec19ff1c3e0ce0653dea0905be64", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -2544,7 +2544,7 @@ mod bit_vec_bench {\n \n     use super::BitVec;\n \n-    static BENCH_BITS : usize = 1 << 14;\n+    const BENCH_BITS : usize = 1 << 14;\n \n     fn rng() -> rand::IsaacRng {\n         let seed: &[_] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n@@ -3039,7 +3039,7 @@ mod bit_set_bench {\n \n     use super::{BitVec, BitSet};\n \n-    static BENCH_BITS : usize = 1 << 14;\n+    const BENCH_BITS : usize = 1 << 14;\n \n     fn rng() -> rand::IsaacRng {\n         let seed: &[_] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 0];"}, {"sha": "f4c8abbcff131d512f10e464305a2ffc215ed7d8", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -1343,8 +1343,8 @@ fn insertion_sort<T, F>(v: &mut [T], mut compare: F) where F: FnMut(&T, &T) -> O\n \n fn merge_sort<T, F>(v: &mut [T], mut compare: F) where F: FnMut(&T, &T) -> Ordering {\n     // warning: this wildly uses unsafe.\n-    static BASE_INSERTION: usize = 32;\n-    static LARGE_INSERTION: usize = 16;\n+    const BASE_INSERTION: usize = 32;\n+    const LARGE_INSERTION: usize = 16;\n \n     // FIXME #12092: smaller insertion runs seems to make sorting\n     // vectors of large elements a little faster on some platforms,"}, {"sha": "33189bd68bdc64782e0798808ac9b3cb945888ec", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -153,8 +153,8 @@ impl String {\n             }\n         }\n \n-        static TAG_CONT_U8: u8 = 128u8;\n-        static REPLACEMENT: &'static [u8] = b\"\\xEF\\xBF\\xBD\"; // U+FFFD in UTF-8\n+        const TAG_CONT_U8: u8 = 128u8;\n+        const REPLACEMENT: &'static [u8] = b\"\\xEF\\xBF\\xBD\"; // U+FFFD in UTF-8\n         let total = v.len();\n         fn unsafe_get(xs: &[u8], i: usize) -> u8 {\n             unsafe { *xs.get_unchecked(i) }"}, {"sha": "59ec066b83ed4f6263787f74e8f4a19ba76624d5", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -39,8 +39,8 @@ use alloc::heap;\n #[unstable(feature = \"collections\")]\n pub use VecDeque as RingBuf;\n \n-static INITIAL_CAPACITY: usize = 7; // 2^3 - 1\n-static MINIMUM_CAPACITY: usize = 1; // 2 - 1\n+const INITIAL_CAPACITY: usize = 7; // 2^3 - 1\n+const MINIMUM_CAPACITY: usize = 1; // 2 - 1\n \n /// `VecDeque` is a growable ring buffer, which can be used as a\n /// double-ended queue efficiently."}, {"sha": "9b7c409ab5502359d1c4a3774d158083608c6403", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -53,7 +53,7 @@ pub enum SignFormat {\n     SignNeg\n }\n \n-static DIGIT_E_RADIX: u32 = ('e' as u32) - ('a' as u32) + 11;\n+const DIGIT_E_RADIX: u32 = ('e' as u32) - ('a' as u32) + 11;\n \n /// Converts a number to its string representation as a byte vector.\n /// This is meant to be a common base implementation for all numeric string"}, {"sha": "fa41167cae8a6dda7742850facc156fa30f3e26d", "filename": "src/libcoretest/num/int_macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fint_macros.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -70,12 +70,12 @@ mod tests {\n         assert!(-(0b11 as $T) - (1 as $T) == (0b11 as $T).not());\n     }\n \n-    static A: $T = 0b0101100;\n-    static B: $T = 0b0100001;\n-    static C: $T = 0b1111001;\n+    const A: $T = 0b0101100;\n+    const B: $T = 0b0100001;\n+    const C: $T = 0b1111001;\n \n-    static _0: $T = 0;\n-    static _1: $T = !0;\n+    const _0: $T = 0;\n+    const _1: $T = !0;\n \n     #[test]\n     fn test_count_ones() {"}, {"sha": "39e41a4fad3b7d5092c834aa43c69a443b1018b7", "filename": "src/libcoretest/num/uint_macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fuint_macros.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -38,12 +38,12 @@ mod tests {\n         assert!(MAX - (0b1011 as $T) == (0b1011 as $T).not());\n     }\n \n-    static A: $T = 0b0101100;\n-    static B: $T = 0b0100001;\n-    static C: $T = 0b1111001;\n+    const A: $T = 0b0101100;\n+    const B: $T = 0b0100001;\n+    const C: $T = 0b1111001;\n \n-    static _0: $T = 0;\n-    static _1: $T = !0;\n+    const _0: $T = 0;\n+    const _1: $T = !0;\n \n     #[test]\n     fn test_count_ones() {"}, {"sha": "585318300438b7158132c31982a86ff24e5c3c65", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -73,9 +73,9 @@ extern {\n                                     -> *mut c_void;\n }\n \n-static LZ_NORM : c_int = 0x80;  // LZ with 128 probes, \"normal\"\n-static TINFL_FLAG_PARSE_ZLIB_HEADER : c_int = 0x1; // parse zlib header and adler32 checksum\n-static TDEFL_WRITE_ZLIB_HEADER : c_int = 0x01000; // write zlib header and adler32 checksum\n+const LZ_NORM: c_int = 0x80;  // LZ with 128 probes, \"normal\"\n+const TINFL_FLAG_PARSE_ZLIB_HEADER: c_int = 0x1; // parse zlib header and adler32 checksum\n+const TDEFL_WRITE_ZLIB_HEADER: c_int = 0x01000; // write zlib header and adler32 checksum\n \n fn deflate_bytes_internal(bytes: &[u8], flags: c_int) -> Option<Bytes> {\n     unsafe {"}, {"sha": "12794ed69be38c7edd263b879969342f02a673bb", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -223,7 +223,7 @@ fn ziggurat<R: Rng, P, Z>(\n             mut pdf: P,\n             mut zero_case: Z)\n             -> f64 where P: FnMut(f64) -> f64, Z: FnMut(&mut R, f64) -> f64 {\n-    static SCALE: f64 = (1u64 << 53) as f64;\n+    const SCALE: f64 = (1u64 << 53) as f64;\n     loop {\n         // reimplement the f64 generation as an optimisation suggested\n         // by the Doornik paper: we have a lot of precision-space"}, {"sha": "51d54f27f0912ddf48ed660388d6aabde1812d38", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -127,7 +127,7 @@ impl IsaacRng {\n         let mut a = self.a;\n         let mut b = self.b + self.c;\n \n-        static MIDPOINT: uint = (RAND_SIZE / 2) as uint;\n+        const MIDPOINT: uint = (RAND_SIZE / 2) as uint;\n \n         macro_rules! ind {\n             ($x:expr) => ( self.mem[(($x >> 2) as uint & ((RAND_SIZE - 1) as uint))] )"}, {"sha": "3458d519af5cda5b440566c1abf386510094886b", "filename": "src/librand/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -52,7 +52,7 @@ use distributions::{Range, IndependentSample};\n use distributions::range::SampleRange;\n \n #[cfg(test)]\n-static RAND_BENCH_N: u64 = 100;\n+const RAND_BENCH_N: u64 = 100;\n \n pub mod distributions;\n pub mod isaac;\n@@ -342,7 +342,7 @@ impl<'a, R: Rng> Iterator for AsciiGenerator<'a, R> {\n     type Item = char;\n \n     fn next(&mut self) -> Option<char> {\n-        static GEN_ASCII_STR_CHARSET: &'static [u8] =\n+        const GEN_ASCII_STR_CHARSET: &'static [u8] =\n             b\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\n               abcdefghijklmnopqrstuvwxyz\\\n               0123456789\";"}, {"sha": "c8a757079c348577c00b4d8ad20624ddf00b7251", "filename": "src/librand/rand_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrand%2Frand_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrand%2Frand_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Frand_impls.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -141,7 +141,7 @@ impl Rand for char {\n     #[inline]\n     fn rand<R: Rng>(rng: &mut R) -> char {\n         // a char is 21 bits\n-        static CHAR_MASK: u32 = 0x001f_ffff;\n+        const CHAR_MASK: u32 = 0x001f_ffff;\n         loop {\n             // Rejection sampling. About 0.2% of numbers with at most\n             // 21-bits are invalid codepoints (surrogates), so this"}, {"sha": "0072c555d1412cc1bed6e81ccb3422d037d65853", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -18,7 +18,7 @@ use core::default::Default;\n \n /// How many bytes of entropy the underling RNG is allowed to generate\n /// before it is reseeded.\n-static DEFAULT_GENERATION_THRESHOLD: uint = 32 * 1024;\n+const DEFAULT_GENERATION_THRESHOLD: uint = 32 * 1024;\n \n /// A wrapper around any RNG which reseeds the underlying RNG after it\n /// has generated a certain number of random bytes.\n@@ -212,7 +212,7 @@ mod test {\n         assert_eq!(string1, string2);\n     }\n \n-    static FILL_BYTES_V_LEN: uint = 13579;\n+    const FILL_BYTES_V_LEN: uint = 13579;\n     #[test]\n     fn test_rng_fill_bytes() {\n         let mut v = repeat(0u8).take(FILL_BYTES_V_LEN).collect::<Vec<_>>();"}, {"sha": "4ef3c5bc20634f3ccb7f8a162a30cc900eb8a1f5", "filename": "src/librbml/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrbml%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrbml%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Fio.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -13,7 +13,7 @@ use std::old_io;\n use std::slice;\n use std::iter::repeat;\n \n-static BUF_CAPACITY: uint = 128;\n+const BUF_CAPACITY: uint = 128;\n \n fn combine(seek: SeekStyle, cur: uint, end: uint, offset: i64) -> IoResult<u64> {\n     // compute offset as signed and clamp to prevent overflow"}, {"sha": "fed22236fc8bcdd52950755b232a283801e2ce4b", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -856,9 +856,9 @@ pub mod writer {\n     // Set to true to generate more debugging in EBML code.\n     // Totally lame approach.\n     #[cfg(not(ndebug))]\n-    static DEBUG: bool = true;\n+    const DEBUG: bool = true;\n     #[cfg(ndebug)]\n-    static DEBUG: bool = false;\n+    const DEBUG: bool = false;\n \n     impl<'a, W: Writer + Seek> Encoder<'a, W> {\n         // used internally to emit things like the vector length and so on"}, {"sha": "d1091b1d3f76ac34963bd6a2902bb6e9db839389", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -202,9 +202,9 @@ pub fn get_or_default_sysroot() -> Path {\n }\n \n #[cfg(windows)]\n-static PATH_ENTRY_SEPARATOR: &'static str = \";\";\n+const PATH_ENTRY_SEPARATOR: char = ';';\n #[cfg(not(windows))]\n-static PATH_ENTRY_SEPARATOR: &'static str = \":\";\n+const PATH_ENTRY_SEPARATOR: char = ':';\n \n /// Returns RUST_PATH as a string, without default paths added\n pub fn get_rust_path() -> Option<String> {"}, {"sha": "fa4f4350f363d581ecafd04641d14af8dae90151", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -540,9 +540,9 @@ struct Specials {\n     clean_exit_var: Variable\n }\n \n-static ACC_READ: u32 = 1;\n-static ACC_WRITE: u32 = 2;\n-static ACC_USE: u32 = 4;\n+const ACC_READ: u32 = 1;\n+const ACC_WRITE: u32 = 2;\n+const ACC_USE: u32 = 4;\n \n struct Liveness<'a, 'tcx: 'a> {\n     ir: &'a mut IrMaps<'a, 'tcx>,"}, {"sha": "51a724f916ddd28ed035c864f1f795ec02d76a02", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -5757,22 +5757,22 @@ pub fn closure_upvars<'tcx>(typer: &mc::Typer<'tcx>,\n \n pub fn is_binopable<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>, op: ast::BinOp) -> bool {\n     #![allow(non_upper_case_globals)]\n-    static tycat_other: int = 0;\n-    static tycat_bool: int = 1;\n-    static tycat_char: int = 2;\n-    static tycat_int: int = 3;\n-    static tycat_float: int = 4;\n-    static tycat_raw_ptr: int = 6;\n-\n-    static opcat_add: int = 0;\n-    static opcat_sub: int = 1;\n-    static opcat_mult: int = 2;\n-    static opcat_shift: int = 3;\n-    static opcat_rel: int = 4;\n-    static opcat_eq: int = 5;\n-    static opcat_bit: int = 6;\n-    static opcat_logic: int = 7;\n-    static opcat_mod: int = 8;\n+    const tycat_other: int = 0;\n+    const tycat_bool: int = 1;\n+    const tycat_char: int = 2;\n+    const tycat_int: int = 3;\n+    const tycat_float: int = 4;\n+    const tycat_raw_ptr: int = 6;\n+\n+    const opcat_add: int = 0;\n+    const opcat_sub: int = 1;\n+    const opcat_mult: int = 2;\n+    const opcat_shift: int = 3;\n+    const opcat_rel: int = 4;\n+    const opcat_eq: int = 5;\n+    const opcat_bit: int = 6;\n+    const opcat_logic: int = 7;\n+    const opcat_mod: int = 8;\n \n     fn opcat(op: ast::BinOp) -> int {\n         match op.node {\n@@ -5811,8 +5811,8 @@ pub fn is_binopable<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>, op: ast::BinOp) -> bool\n         }\n     }\n \n-    static t: bool = true;\n-    static f: bool = false;\n+    const t: bool = true;\n+    const f: bool = false;\n \n     let tbl = [\n     //           +, -, *, shift, rel, ==, bit, logic, mod"}, {"sha": "97b1a8aaaba0304d7a0f5ced6e103d84646d4801", "filename": "src/librustc_back/archive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_back%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_back%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farchive.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -18,7 +18,7 @@ use std::os;\n use std::str;\n use syntax::diagnostic::Handler as ErrorHandler;\n \n-pub static METADATA_FILENAME: &'static str = \"rust.metadata.bin\";\n+pub const METADATA_FILENAME: &'static str = \"rust.metadata.bin\";\n \n pub struct ArchiveConfig<'a> {\n     pub handler: &'a ErrorHandler,\n@@ -242,7 +242,7 @@ impl<'a> ArchiveBuilder<'a> {\n         // Don't allow the total size of `args` to grow beyond 32,000 bytes.\n         // Windows will raise an error if the argument string is longer than\n         // 32,768, and we leave a bit of extra space for the program name.\n-        static ARG_LENGTH_LIMIT: uint = 32000;\n+        const ARG_LENGTH_LIMIT: uint = 32_000;\n \n         for member_name in &self.members {\n             let len = member_name.as_vec().len();"}, {"sha": "56d71820176b419b4d5a02ec145555a0c2c139f0", "filename": "src/librustc_back/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_back%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_back%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ffs.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -15,7 +15,7 @@ use std::os;\n /// Returns an absolute path in the filesystem that `path` points to. The\n /// returned path does not contain any symlinks in its hierarchy.\n pub fn realpath(original: &Path) -> old_io::IoResult<Path> {\n-    static MAX_LINKS_FOLLOWED: uint = 256;\n+    const MAX_LINKS_FOLLOWED: uint = 256;\n     let original = try!(os::getcwd()).join(original);\n \n     // Right now lstat on windows doesn't work quite well"}, {"sha": "f6df2acce597b4c52d699fbe966f822ea2a9bdbd", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -312,7 +312,7 @@ impl<'tcx> LoanPath<'tcx> {\n // FIXME (pnkfelix): See discussion here\n // https://github.com/pnkfelix/rust/commit/\n //     b2b39e8700e37ad32b486b9a8409b50a8a53aa51#commitcomment-7892003\n-static DOWNCAST_PRINTED_OPERATOR : &'static str = \" as \";\n+const DOWNCAST_PRINTED_OPERATOR: &'static str = \" as \";\n \n // A local, \"cleaned\" version of `mc::InteriorKind` that drops\n // information that is not relevant to loan-path analysis. (In"}, {"sha": "8846f70fbd335febf9b005813b07dfc2b885bb03", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -91,8 +91,7 @@ impl Clone for MovePathIndex {\n }\n \n #[allow(non_upper_case_globals)]\n-static InvalidMovePathIndex: MovePathIndex =\n-    MovePathIndex(usize::MAX);\n+const InvalidMovePathIndex: MovePathIndex = MovePathIndex(usize::MAX);\n \n /// Index into `MoveData.moves`, used like a pointer\n #[derive(Copy, PartialEq)]\n@@ -105,8 +104,7 @@ impl MoveIndex {\n }\n \n #[allow(non_upper_case_globals)]\n-static InvalidMoveIndex: MoveIndex =\n-    MoveIndex(usize::MAX);\n+const InvalidMoveIndex: MoveIndex = MoveIndex(usize::MAX);\n \n pub struct MovePath<'tcx> {\n     /// Loan path corresponding to this move path"}, {"sha": "15fae351ddbf21d8b3fe2bf19038a34b1da71969", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -93,7 +93,7 @@ pub mod driver;\n pub mod pretty;\n \n \n-static BUG_REPORT_URL: &'static str =\n+const BUG_REPORT_URL: &'static str =\n     \"https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\";\n \n \n@@ -770,7 +770,7 @@ fn parse_crate_attrs(sess: &Session, input: &Input) ->\n /// The diagnostic emitter yielded to the procedure should be used for reporting\n /// errors of the compiler.\n pub fn monitor<F:FnOnce()+Send+'static>(f: F) {\n-    static STACK_SIZE: uint = 8 * 1024 * 1024; // 8MB\n+    const STACK_SIZE: uint = 8 * 1024 * 1024; // 8MB\n \n     let (tx, rx) = channel();\n     let w = old_io::ChanWriter::new(tx);"}, {"sha": "23f07c8e25c1145126c61554503a2e269110d82f", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -44,7 +44,7 @@ struct RH<'a> {\n     sub: &'a [RH<'a>]\n }\n \n-static EMPTY_SOURCE_STR: &'static str = \"#![feature(no_std)] #![no_std]\";\n+const EMPTY_SOURCE_STR: &'static str = \"#![feature(no_std)] #![no_std]\";\n \n struct ExpectErrorEmitter {\n     messages: Vec<String>"}, {"sha": "22311a7158378cede0e4cf155c88b2df362dfe20", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -571,7 +571,7 @@ struct RawPtrDeriveVisitor<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx, 'v> Visitor<'v> for RawPtrDeriveVisitor<'a, 'tcx> {\n     fn visit_ty(&mut self, ty: &ast::Ty) {\n-        static MSG: &'static str = \"use of `#[derive]` with a raw pointer\";\n+        const MSG: &'static str = \"use of `#[derive]` with a raw pointer\";\n         if let ast::TyPtr(..) = ty.node {\n             self.cx.span_lint(RAW_POINTER_DERIVE, ty.span, MSG);\n         }"}, {"sha": "7b377ac3611b68131c002c8e235e77f530369571", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -317,7 +317,7 @@ pub fn mangle_exported_name<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, path: PathEl\n     // e.g. `fn foo() { { fn a() {} } { fn a() {} } }`, so we\n     // generate unique characters from the node id. For now\n     // hopefully 3 characters is enough to avoid collisions.\n-    static EXTRA_CHARS: &'static str =\n+    const EXTRA_CHARS: &'static str =\n         \"abcdefghijklmnopqrstuvwxyz\\\n          ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\n          0123456789\";"}, {"sha": "692d41dd0b7723334d2e2d7c741f9cbaa2ee6d9f", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -487,12 +487,12 @@ fn range_to_inttype(cx: &CrateContext, hint: Hint, bounds: &IntBounds) -> IntTyp\n     debug!(\"range_to_inttype: {:?} {:?}\", hint, bounds);\n     // Lists of sizes to try.  u64 is always allowed as a fallback.\n     #[allow(non_upper_case_globals)]\n-    static choose_shortest: &'static[IntType] = &[\n+    const choose_shortest: &'static [IntType] = &[\n         attr::UnsignedInt(ast::TyU8), attr::SignedInt(ast::TyI8),\n         attr::UnsignedInt(ast::TyU16), attr::SignedInt(ast::TyI16),\n         attr::UnsignedInt(ast::TyU32), attr::SignedInt(ast::TyI32)];\n     #[allow(non_upper_case_globals)]\n-    static at_least_32: &'static[IntType] = &[\n+    const at_least_32: &'static [IntType] = &[\n         attr::UnsignedInt(ast::TyU32), attr::SignedInt(ast::TyI32)];\n \n     let attempts;"}, {"sha": "c07de3a87ec271accd0e8f69a763c2f46ee0cb4b", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -45,7 +45,7 @@ use syntax::ast_util::PostExpansionMethod;\n use syntax::codemap::DUMMY_SP;\n \n // drop_glue pointer, size, align.\n-static VTABLE_OFFSET: uint = 3;\n+const VTABLE_OFFSET: uint = 3;\n \n /// The main \"translation\" pass for methods.  Generates code\n /// for non-monomorphized methods only.  Other methods will"}, {"sha": "79e348cb03e49296912d38208064c976db4d1c19", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -167,7 +167,7 @@ mod imp {\n     use std::os;\n     use std::ptr;\n \n-    static LOCKFILE_EXCLUSIVE_LOCK: libc::DWORD = 0x00000002;\n+    const LOCKFILE_EXCLUSIVE_LOCK: libc::DWORD = 0x00000002;\n \n     #[allow(non_snake_case)]\n     extern \"system\" {"}, {"sha": "fc304884ec9d8e6e440bbfc72742206ce4186dac", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -94,7 +94,7 @@ type Pass = (&'static str,                                      // name\n              fn(clean::Crate) -> plugins::PluginResult,         // fn\n              &'static str);                                     // description\n \n-static PASSES: &'static [Pass] = &[\n+const PASSES: &'static [Pass] = &[\n     (\"strip-hidden\", passes::strip_hidden,\n      \"strips all doc(hidden) items from the output\"),\n     (\"unindent-comments\", passes::unindent_comments,\n@@ -105,7 +105,7 @@ static PASSES: &'static [Pass] = &[\n      \"strips all private items from a crate which cannot be seen externally\"),\n ];\n \n-static DEFAULT_PASSES: &'static [&'static str] = &[\n+const DEFAULT_PASSES: &'static [&'static str] = &[\n     \"strip-hidden\",\n     \"strip-private\",\n     \"collapse-docs\","}, {"sha": "970ae06763c70dc208f3906efe3e6782e6b0501d", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -24,7 +24,7 @@ pub trait ToHex {\n     fn to_hex(&self) -> String;\n }\n \n-static CHARS: &'static[u8] = b\"0123456789abcdef\";\n+const CHARS: &'static [u8] = b\"0123456789abcdef\";\n \n impl ToHex for [u8] {\n     /// Turn a vector of `u8` bytes into a hexadecimal string."}, {"sha": "6ce3a939c6a4976ac9dacb5df04af3ac483125b1", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -425,7 +425,7 @@ mod tests {\n \n     #[test]\n     fn multiple_connect_interleaved_lazy_schedule_ip4() {\n-        static MAX: usize = 10;\n+        const MAX: usize = 10;\n         each_ip(&mut |addr| {\n             let acceptor = t!(TcpListener::bind(&addr));\n "}, {"sha": "90813fe723051d1b60b1afc07b8d5460d244fc20", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -422,8 +422,8 @@ pub fn float_to_str_common<T: Float>(\n \n // Some constants for from_str_bytes_common's input validation,\n // they define minimum radix values for which the character is a valid digit.\n-static DIGIT_P_RADIX: u32 = ('p' as u32) - ('a' as u32) + 11;\n-static DIGIT_E_RADIX: u32 = ('e' as u32) - ('a' as u32) + 11;\n+const DIGIT_P_RADIX: u32 = ('p' as u32) - ('a' as u32) + 11;\n+const DIGIT_E_RADIX: u32 = ('e' as u32) - ('a' as u32) + 11;\n \n #[cfg(test)]\n mod tests {"}, {"sha": "7fe20c37c6cd9b70dfa51e807e1ca741019fccb7", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -321,7 +321,7 @@ impl reseeding::Reseeder<StdRng> for ThreadRngReseeder {\n         }\n     }\n }\n-static THREAD_RNG_RESEED_THRESHOLD: usize = 32_768;\n+const THREAD_RNG_RESEED_THRESHOLD: usize = 32_768;\n type ThreadRngInner = reseeding::ReseedingRng<StdRng, ThreadRngReseeder>;\n \n /// The thread-local RNG.\n@@ -638,19 +638,18 @@ mod test {\n     }\n }\n \n-#[cfg(test)]\n-static RAND_BENCH_N: u64 = 100;\n-\n #[cfg(test)]\n mod bench {\n     extern crate test;\n     use prelude::v1::*;\n \n     use self::test::Bencher;\n-    use super::{XorShiftRng, StdRng, IsaacRng, Isaac64Rng, Rng, RAND_BENCH_N};\n+    use super::{XorShiftRng, StdRng, IsaacRng, Isaac64Rng, Rng};\n     use super::{OsRng, weak_rng};\n     use mem::size_of;\n \n+    const RAND_BENCH_N: u64 = 100;\n+\n     #[bench]\n     fn rand_xorshift(b: &mut Bencher) {\n         let mut rng: XorShiftRng = OsRng::new().unwrap().gen();"}, {"sha": "c2ead2675787b9ec08169ae371c28c0fd84a0f3d", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -281,9 +281,9 @@ mod imp {\n         hcryptprov: HCRYPTPROV\n     }\n \n-    static PROV_RSA_FULL: DWORD = 1;\n-    static CRYPT_SILENT: DWORD = 64;\n-    static CRYPT_VERIFYCONTEXT: DWORD = 0xF0000000;\n+    const PROV_RSA_FULL: DWORD = 1;\n+    const CRYPT_SILENT: DWORD = 64;\n+    const CRYPT_VERIFYCONTEXT: DWORD = 0xF0000000;\n \n     #[allow(non_snake_case)]\n     extern \"system\" {"}, {"sha": "ee8bef50d89991c9dc9cfc1d4e6ad80cb2f10042", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -1157,8 +1157,8 @@ mod test {\n \n     #[test]\n     fn stress_shared() {\n-        static AMT: u32 = 10000;\n-        static NTHREADS: u32 = 8;\n+        const AMT: u32 = 10000;\n+        const NTHREADS: u32 = 8;\n         let (tx, rx) = channel::<i32>();\n \n         let t = thread::spawn(move|| {\n@@ -1663,8 +1663,8 @@ mod sync_tests {\n \n     #[test]\n     fn stress_shared() {\n-        static AMT: u32 = 1000;\n-        static NTHREADS: u32 = 8;\n+        const AMT: u32 = 1000;\n+        const NTHREADS: u32 = 8;\n         let (tx, rx) = sync_channel::<i32>(0);\n         let (dtx, drx) = sync_channel::<()>(0);\n "}, {"sha": "2c14c9fe3f199020cd1edb9682123c4d1a759c6b", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -473,7 +473,7 @@ mod test {\n \n     #[test]\n     fn stress() {\n-        static AMT: i32 = 10000;\n+        const AMT: i32 = 10000;\n         let (tx1, rx1) = channel::<i32>();\n         let (tx2, rx2) = channel::<i32>();\n         let (tx3, rx3) = channel::<()>();"}, {"sha": "6f0febd61e80376b8d5d826c9609037436950923", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -390,8 +390,8 @@ mod test {\n     fn lots_and_lots() {\n         static M: StaticMutex = MUTEX_INIT;\n         static mut CNT: u32 = 0;\n-        static J: u32 = 1000;\n-        static K: u32 = 3;\n+        const J: u32 = 1000;\n+        const K: u32 = 3;\n \n         fn inc() {\n             for _ in 0..J {"}, {"sha": "e9ff6c0bf9df0fa2123c09316de7a965fddc0063", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -436,8 +436,8 @@ mod tests {\n     #[test]\n     fn frob() {\n         static R: StaticRwLock = RW_LOCK_INIT;\n-        static N: usize = 10;\n-        static M: usize = 1000;\n+        const N: usize = 10;\n+        const M: usize = 1000;\n \n         let (tx, rx) = channel::<()>();\n         for _ in 0..N {"}, {"sha": "6cae127441ccb20b812f333d632b1f0017f0b53b", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -43,7 +43,7 @@ use sys_common::AsInner;\n use unicode::str::{Utf16Item, utf16_items};\n use vec::Vec;\n \n-static UTF8_REPLACEMENT_CHARACTER: &'static [u8] = b\"\\xEF\\xBF\\xBD\";\n+const UTF8_REPLACEMENT_CHARACTER: &'static [u8] = b\"\\xEF\\xBF\\xBD\";\n \n /// A Unicode code point: from U+0000 to U+10FFFF.\n ///"}, {"sha": "89cf8a08a68f9448dffb18582f02d8672a68bda8", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -59,8 +59,8 @@ pub fn error_string(errnum: i32) -> String {\n                           -> DWORD;\n     }\n \n-    static FORMAT_MESSAGE_FROM_SYSTEM: DWORD = 0x00001000;\n-    static FORMAT_MESSAGE_IGNORE_INSERTS: DWORD = 0x00000200;\n+    const FORMAT_MESSAGE_FROM_SYSTEM: DWORD = 0x00001000;\n+    const FORMAT_MESSAGE_IGNORE_INSERTS: DWORD = 0x00000200;\n \n     // This value is calculated from the macro\n     // MAKELANGID(LANG_SYSTEM_DEFAULT, SUBLANG_SYS_DEFAULT)"}, {"sha": "b0e79f2498db89f18722cdca4160d8b9fa097165", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -853,7 +853,7 @@ mod test {\n         // climbing the task tree to dereference each ancestor. (See #1789)\n         // (well, it would if the constant were 8000+ - I lowered it to be more\n         // valgrind-friendly. try this at home, instead..!)\n-        static GENERATIONS: usize = 16;\n+        const GENERATIONS: usize = 16;\n         fn child_no(x: usize) -> Thunk<'static> {\n             return Thunk::new(move|| {\n                 if x < GENERATIONS {"}, {"sha": "896e638deb46540ccb910309fd3f8d345aaf94a1", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -77,11 +77,11 @@ pub enum AbiArchitecture {\n }\n \n #[allow(non_upper_case_globals)]\n-static AbiDatas: &'static [AbiData] = &[\n+const AbiDatas: &'static [AbiData] = &[\n     // Platform-specific ABIs\n     AbiData {abi: Cdecl, name: \"cdecl\" },\n     AbiData {abi: Stdcall, name: \"stdcall\" },\n-    AbiData {abi: Fastcall, name:\"fastcall\" },\n+    AbiData {abi: Fastcall, name: \"fastcall\" },\n     AbiData {abi: Aapcs, name: \"aapcs\" },\n     AbiData {abi: Win64, name: \"win64\" },\n "}, {"sha": "a6f4974502c211e582b161e6b7e3f8bc2c74c28d", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -25,7 +25,7 @@ use term::WriterWrapper;\n use term;\n \n /// maximum number of lines we will print for each error; arbitrary.\n-static MAX_LINES: usize = 6;\n+const MAX_LINES: usize = 6;\n \n #[derive(Clone, Copy)]\n pub enum RenderSpan {"}, {"sha": "e58a3de41c05c2d9270fe42f5c6345cb55ba3dc9", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -45,7 +45,7 @@ impl State {\n     }\n }\n \n-static OPTIONS: &'static [&'static str] = &[\"volatile\", \"alignstack\", \"intel\"];\n+const OPTIONS: &'static [&'static str] = &[\"volatile\", \"alignstack\", \"intel\"];\n \n pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                        -> Box<base::MacResult+'cx> {"}, {"sha": "cf0591365ae3be04c75c92a38732bd7ead703fb4", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -45,7 +45,7 @@ use std::ascii::AsciiExt;\n // stable (active).\n // NB: The featureck.py script parses this information directly out of the source\n // so take care when modifying it.\n-static KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n+const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     (\"globs\", \"1.0.0\", Accepted),\n     (\"macro_rules\", \"1.0.0\", Accepted),\n     (\"struct_variant\", \"1.0.0\", Accepted),\n@@ -159,7 +159,7 @@ enum Status {\n }\n \n // Attributes that have a special meaning to rustc or rustdoc\n-pub static KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n+pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n     // Normal attributes\n \n     (\"warn\", Normal),"}, {"sha": "3ad1d96a45da77f3edb63e837d8afc2abc83ff43", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -124,8 +124,8 @@ pub fn strip_doc_comment_decoration(comment: &str) -> String {\n     }\n \n     // one-line comments lose their prefix\n-    static ONLINERS: &'static [&'static str] = &[\"///!\", \"///\", \"//!\", \"//\"];\n-    for prefix in ONLINERS {\n+    const ONELINERS: &'static [&'static str] = &[\"///!\", \"///\", \"//!\", \"//\"];\n+    for prefix in ONELINERS {\n         if comment.starts_with(*prefix) {\n             return (&comment[prefix.len()..]).to_string();\n         }"}, {"sha": "61a3a5ca82a326e34bd32721a1c36019115fb374", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -425,10 +425,10 @@ macro_rules! declare_special_idents_and_keywords {(\n         $( ($rk_name:expr, $rk_variant:ident, $rk_str:expr); )*\n     }\n ) => {\n-    static STRICT_KEYWORD_START: ast::Name = first!($( ast::Name($sk_name), )*);\n-    static STRICT_KEYWORD_FINAL: ast::Name = last!($( ast::Name($sk_name), )*);\n-    static RESERVED_KEYWORD_START: ast::Name = first!($( ast::Name($rk_name), )*);\n-    static RESERVED_KEYWORD_FINAL: ast::Name = last!($( ast::Name($rk_name), )*);\n+    const STRICT_KEYWORD_START: ast::Name = first!($( ast::Name($sk_name), )*);\n+    const STRICT_KEYWORD_FINAL: ast::Name = last!($( ast::Name($sk_name), )*);\n+    const RESERVED_KEYWORD_START: ast::Name = first!($( ast::Name($rk_name), )*);\n+    const RESERVED_KEYWORD_FINAL: ast::Name = last!($( ast::Name($rk_name), )*);\n \n     pub mod special_idents {\n         use ast;"}, {"sha": "4cef7ed469faf794fa99504b878b34f43525f570", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -159,7 +159,7 @@ pub struct PrintStackElem {\n     pbreak: PrintStackBreak\n }\n \n-static SIZE_INFINITY: isize = 0xffff;\n+const SIZE_INFINITY: isize = 0xffff;\n \n pub fn mk_printer(out: Box<old_io::Writer+'static>, linewidth: usize) -> Printer {\n     // Yes 3, it makes the ring buffers big enough to never"}, {"sha": "99a6b6aa1806f56b0883678f6529e47a49c5863a", "filename": "src/libunicode/tables.rs", "status": "modified", "additions": 283, "deletions": 284, "changes": 567, "blob_url": "https://github.com/rust-lang/rust/blob/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibunicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35f973cb700c444d8c029ee13b37dc16d560225/src%2Flibunicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Ftables.rs?ref=f35f973cb700c444d8c029ee13b37dc16d560225", "patch": "@@ -27,7 +27,7 @@ fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n }\n \n pub mod general_category {\n-    pub static C_table: &'static [(char, char)] = &[\n+    pub const C_table: &'static [(char, char)] = &[\n         ('\\u{0}', '\\u{1f}'), ('\\u{7f}', '\\u{9f}'), ('\\u{ad}', '\\u{ad}'), ('\\u{378}', '\\u{379}'),\n         ('\\u{380}', '\\u{383}'), ('\\u{38b}', '\\u{38b}'), ('\\u{38d}', '\\u{38d}'), ('\\u{3a2}',\n         '\\u{3a2}'), ('\\u{530}', '\\u{530}'), ('\\u{557}', '\\u{558}'), ('\\u{560}', '\\u{560}'),\n@@ -216,15 +216,15 @@ pub mod general_category {\n         ('\\u{e01f0}', '\\u{10ffff}')\n     ];\n \n-    pub static Cc_table: &'static [(char, char)] = &[\n+    pub const Cc_table: &'static [(char, char)] = &[\n         ('\\u{0}', '\\u{1f}'), ('\\u{7f}', '\\u{9f}')\n     ];\n \n     pub fn Cc(c: char) -> bool {\n         super::bsearch_range_table(c, Cc_table)\n     }\n \n-    pub static Cf_table: &'static [(char, char)] = &[\n+    pub const Cf_table: &'static [(char, char)] = &[\n         ('\\u{ad}', '\\u{ad}'), ('\\u{600}', '\\u{605}'), ('\\u{61c}', '\\u{61c}'), ('\\u{6dd}',\n         '\\u{6dd}'), ('\\u{70f}', '\\u{70f}'), ('\\u{180e}', '\\u{180e}'), ('\\u{200b}', '\\u{200f}'),\n         ('\\u{202a}', '\\u{202e}'), ('\\u{2060}', '\\u{2064}'), ('\\u{2066}', '\\u{206f}'), ('\\u{feff}',\n@@ -233,7 +233,7 @@ pub mod general_category {\n         '\\u{e007f}')\n     ];\n \n-    pub static Cn_table: &'static [(char, char)] = &[\n+    pub const Cn_table: &'static [(char, char)] = &[\n         ('\\u{378}', '\\u{379}'), ('\\u{380}', '\\u{383}'), ('\\u{38b}', '\\u{38b}'), ('\\u{38d}',\n         '\\u{38d}'), ('\\u{3a2}', '\\u{3a2}'), ('\\u{530}', '\\u{530}'), ('\\u{557}', '\\u{558}'),\n         ('\\u{560}', '\\u{560}'), ('\\u{588}', '\\u{588}'), ('\\u{58b}', '\\u{58c}'), ('\\u{590}',\n@@ -422,12 +422,12 @@ pub mod general_category {\n         ('\\u{10fffe}', '\\u{10ffff}')\n     ];\n \n-    pub static Co_table: &'static [(char, char)] = &[\n+    pub const Co_table: &'static [(char, char)] = &[\n         ('\\u{e000}', '\\u{e000}'), ('\\u{f8ff}', '\\u{f8ff}'), ('\\u{f0000}', '\\u{f0000}'),\n         ('\\u{ffffd}', '\\u{ffffd}'), ('\\u{100000}', '\\u{100000}'), ('\\u{10fffd}', '\\u{10fffd}')\n     ];\n \n-    pub static L_table: &'static [(char, char)] = &[\n+    pub const L_table: &'static [(char, char)] = &[\n         ('\\u{41}', '\\u{5a}'), ('\\u{61}', '\\u{7a}'), ('\\u{aa}', '\\u{aa}'), ('\\u{b5}', '\\u{b5}'),\n         ('\\u{ba}', '\\u{ba}'), ('\\u{c0}', '\\u{d6}'), ('\\u{d8}', '\\u{f6}'), ('\\u{f8}', '\\u{2c1}'),\n         ('\\u{2c6}', '\\u{2d1}'), ('\\u{2e0}', '\\u{2e4}'), ('\\u{2ec}', '\\u{2ec}'), ('\\u{2ee}',\n@@ -593,7 +593,7 @@ pub mod general_category {\n         ('\\u{2b81d}', '\\u{2b81d}'), ('\\u{2f800}', '\\u{2fa1d}')\n     ];\n \n-    pub static LC_table: &'static [(char, char)] = &[\n+    pub const LC_table: &'static [(char, char)] = &[\n         ('\\u{41}', '\\u{5a}'), ('\\u{61}', '\\u{7a}'), ('\\u{b5}', '\\u{b5}'), ('\\u{c0}', '\\u{d6}'),\n         ('\\u{d8}', '\\u{f6}'), ('\\u{f8}', '\\u{1ba}'), ('\\u{1bc}', '\\u{1bf}'), ('\\u{1c4}', '\\u{293}'),\n         ('\\u{295}', '\\u{2af}'), ('\\u{370}', '\\u{373}'), ('\\u{376}', '\\u{377}'), ('\\u{37b}',\n@@ -631,7 +631,7 @@ pub mod general_category {\n         ('\\u{1d7aa}', '\\u{1d7c2}'), ('\\u{1d7c4}', '\\u{1d7cb}')\n     ];\n \n-    pub static Ll_table: &'static [(char, char)] = &[\n+    pub const Ll_table: &'static [(char, char)] = &[\n         ('\\u{61}', '\\u{7a}'), ('\\u{b5}', '\\u{b5}'), ('\\u{df}', '\\u{f6}'), ('\\u{f8}', '\\u{ff}'),\n         ('\\u{101}', '\\u{101}'), ('\\u{103}', '\\u{103}'), ('\\u{105}', '\\u{105}'), ('\\u{107}',\n         '\\u{107}'), ('\\u{109}', '\\u{109}'), ('\\u{10b}', '\\u{10b}'), ('\\u{10d}', '\\u{10d}'),\n@@ -814,7 +814,7 @@ pub mod general_category {\n         '\\u{1d7c2}'), ('\\u{1d7c4}', '\\u{1d7c9}'), ('\\u{1d7cb}', '\\u{1d7cb}')\n     ];\n \n-    pub static Lm_table: &'static [(char, char)] = &[\n+    pub const Lm_table: &'static [(char, char)] = &[\n         ('\\u{2b0}', '\\u{2c1}'), ('\\u{2c6}', '\\u{2d1}'), ('\\u{2e0}', '\\u{2e4}'), ('\\u{2ec}',\n         '\\u{2ec}'), ('\\u{2ee}', '\\u{2ee}'), ('\\u{374}', '\\u{374}'), ('\\u{37a}', '\\u{37a}'),\n         ('\\u{559}', '\\u{559}'), ('\\u{640}', '\\u{640}'), ('\\u{6e5}', '\\u{6e6}'), ('\\u{7f4}',\n@@ -834,7 +834,7 @@ pub mod general_category {\n         '\\u{16f9f}')\n     ];\n \n-    pub static Lo_table: &'static [(char, char)] = &[\n+    pub const Lo_table: &'static [(char, char)] = &[\n         ('\\u{aa}', '\\u{aa}'), ('\\u{ba}', '\\u{ba}'), ('\\u{1bb}', '\\u{1bb}'), ('\\u{1c0}', '\\u{1c3}'),\n         ('\\u{294}', '\\u{294}'), ('\\u{5d0}', '\\u{5ea}'), ('\\u{5f0}', '\\u{5f2}'), ('\\u{620}',\n         '\\u{63f}'), ('\\u{641}', '\\u{64a}'), ('\\u{66e}', '\\u{66f}'), ('\\u{671}', '\\u{6d3}'),\n@@ -964,13 +964,13 @@ pub mod general_category {\n         ('\\u{2b740}', '\\u{2b740}'), ('\\u{2b81d}', '\\u{2b81d}'), ('\\u{2f800}', '\\u{2fa1d}')\n     ];\n \n-    pub static Lt_table: &'static [(char, char)] = &[\n+    pub const Lt_table: &'static [(char, char)] = &[\n         ('\\u{1c5}', '\\u{1c5}'), ('\\u{1c8}', '\\u{1c8}'), ('\\u{1cb}', '\\u{1cb}'), ('\\u{1f2}',\n         '\\u{1f2}'), ('\\u{1f88}', '\\u{1f8f}'), ('\\u{1f98}', '\\u{1f9f}'), ('\\u{1fa8}', '\\u{1faf}'),\n         ('\\u{1fbc}', '\\u{1fbc}'), ('\\u{1fcc}', '\\u{1fcc}'), ('\\u{1ffc}', '\\u{1ffc}')\n     ];\n \n-    pub static Lu_table: &'static [(char, char)] = &[\n+    pub const Lu_table: &'static [(char, char)] = &[\n         ('\\u{41}', '\\u{5a}'), ('\\u{c0}', '\\u{d6}'), ('\\u{d8}', '\\u{de}'), ('\\u{100}', '\\u{100}'),\n         ('\\u{102}', '\\u{102}'), ('\\u{104}', '\\u{104}'), ('\\u{106}', '\\u{106}'), ('\\u{108}',\n         '\\u{108}'), ('\\u{10a}', '\\u{10a}'), ('\\u{10c}', '\\u{10c}'), ('\\u{10e}', '\\u{10e}'),\n@@ -1153,7 +1153,7 @@ pub mod general_category {\n         '\\u{1d7ca}')\n     ];\n \n-    pub static M_table: &'static [(char, char)] = &[\n+    pub const M_table: &'static [(char, char)] = &[\n         ('\\u{300}', '\\u{36f}'), ('\\u{483}', '\\u{489}'), ('\\u{591}', '\\u{5bd}'), ('\\u{5bf}',\n         '\\u{5bf}'), ('\\u{5c1}', '\\u{5c2}'), ('\\u{5c4}', '\\u{5c5}'), ('\\u{5c7}', '\\u{5c7}'),\n         ('\\u{610}', '\\u{61a}'), ('\\u{64b}', '\\u{65f}'), ('\\u{670}', '\\u{670}'), ('\\u{6d6}',\n@@ -1224,7 +1224,7 @@ pub mod general_category {\n         ('\\u{1e8d0}', '\\u{1e8d6}'), ('\\u{e0100}', '\\u{e01ef}')\n     ];\n \n-    pub static Mc_table: &'static [(char, char)] = &[\n+    pub const Mc_table: &'static [(char, char)] = &[\n         ('\\u{903}', '\\u{903}'), ('\\u{93b}', '\\u{93b}'), ('\\u{93e}', '\\u{940}'), ('\\u{949}',\n         '\\u{94c}'), ('\\u{94e}', '\\u{94f}'), ('\\u{982}', '\\u{983}'), ('\\u{9be}', '\\u{9c0}'),\n         ('\\u{9c7}', '\\u{9c8}'), ('\\u{9cb}', '\\u{9cc}'), ('\\u{9d7}', '\\u{9d7}'), ('\\u{a03}',\n@@ -1271,12 +1271,12 @@ pub mod general_category {\n         ('\\u{1d165}', '\\u{1d166}'), ('\\u{1d16d}', '\\u{1d172}')\n     ];\n \n-    pub static Me_table: &'static [(char, char)] = &[\n+    pub const Me_table: &'static [(char, char)] = &[\n         ('\\u{488}', '\\u{489}'), ('\\u{1abe}', '\\u{1abe}'), ('\\u{20dd}', '\\u{20e0}'), ('\\u{20e2}',\n         '\\u{20e4}'), ('\\u{a670}', '\\u{a672}')\n     ];\n \n-    pub static Mn_table: &'static [(char, char)] = &[\n+    pub const Mn_table: &'static [(char, char)] = &[\n         ('\\u{300}', '\\u{36f}'), ('\\u{483}', '\\u{487}'), ('\\u{591}', '\\u{5bd}'), ('\\u{5bf}',\n         '\\u{5bf}'), ('\\u{5c1}', '\\u{5c2}'), ('\\u{5c4}', '\\u{5c5}'), ('\\u{5c7}', '\\u{5c7}'),\n         ('\\u{610}', '\\u{61a}'), ('\\u{64b}', '\\u{65f}'), ('\\u{670}', '\\u{670}'), ('\\u{6d6}',\n@@ -1355,7 +1355,7 @@ pub mod general_category {\n         '\\u{1e8d6}'), ('\\u{e0100}', '\\u{e01ef}')\n     ];\n \n-    pub static N_table: &'static [(char, char)] = &[\n+    pub const N_table: &'static [(char, char)] = &[\n         ('\\u{30}', '\\u{39}'), ('\\u{660}', '\\u{669}'), ('\\u{6f0}', '\\u{6f9}'), ('\\u{7c0}',\n         '\\u{7c9}'), ('\\u{966}', '\\u{96f}'), ('\\u{9e6}', '\\u{9ef}'), ('\\u{a66}', '\\u{a6f}'),\n         ('\\u{ae6}', '\\u{aef}'), ('\\u{b66}', '\\u{b6f}'), ('\\u{be6}', '\\u{bef}'), ('\\u{c66}',\n@@ -1381,7 +1381,7 @@ pub mod general_category {\n         super::bsearch_range_table(c, N_table)\n     }\n \n-    pub static Nd_table: &'static [(char, char)] = &[\n+    pub const Nd_table: &'static [(char, char)] = &[\n         ('\\u{30}', '\\u{39}'), ('\\u{660}', '\\u{669}'), ('\\u{6f0}', '\\u{6f9}'), ('\\u{7c0}',\n         '\\u{7c9}'), ('\\u{966}', '\\u{96f}'), ('\\u{9e6}', '\\u{9ef}'), ('\\u{a66}', '\\u{a6f}'),\n         ('\\u{ae6}', '\\u{aef}'), ('\\u{b66}', '\\u{b6f}'), ('\\u{be6}', '\\u{bef}'), ('\\u{c66}',\n@@ -1399,14 +1399,14 @@ pub mod general_category {\n         ('\\u{16a60}', '\\u{16a69}'), ('\\u{16b50}', '\\u{16b59}'), ('\\u{1d7ce}', '\\u{1d7ff}')\n     ];\n \n-    pub static Nl_table: &'static [(char, char)] = &[\n+    pub const Nl_table: &'static [(char, char)] = &[\n         ('\\u{16ee}', '\\u{16f0}'), ('\\u{2160}', '\\u{2182}'), ('\\u{2185}', '\\u{2188}'), ('\\u{3007}',\n         '\\u{3007}'), ('\\u{3021}', '\\u{3029}'), ('\\u{3038}', '\\u{303a}'), ('\\u{a6e6}', '\\u{a6ef}'),\n         ('\\u{10140}', '\\u{10174}'), ('\\u{10341}', '\\u{10341}'), ('\\u{1034a}', '\\u{1034a}'),\n         ('\\u{103d1}', '\\u{103d5}'), ('\\u{12400}', '\\u{1246e}')\n     ];\n \n-    pub static No_table: &'static [(char, char)] = &[\n+    pub const No_table: &'static [(char, char)] = &[\n         ('\\u{b2}', '\\u{b3}'), ('\\u{b9}', '\\u{b9}'), ('\\u{bc}', '\\u{be}'), ('\\u{9f4}', '\\u{9f9}'),\n         ('\\u{b72}', '\\u{b77}'), ('\\u{bf0}', '\\u{bf2}'), ('\\u{c78}', '\\u{c7e}'), ('\\u{d70}',\n         '\\u{d75}'), ('\\u{f2a}', '\\u{f33}'), ('\\u{1369}', '\\u{137c}'), ('\\u{17f0}', '\\u{17f9}'),\n@@ -1425,7 +1425,7 @@ pub mod general_category {\n         '\\u{1d371}'), ('\\u{1e8c7}', '\\u{1e8cf}'), ('\\u{1f100}', '\\u{1f10c}')\n     ];\n \n-    pub static P_table: &'static [(char, char)] = &[\n+    pub const P_table: &'static [(char, char)] = &[\n         ('\\u{21}', '\\u{23}'), ('\\u{25}', '\\u{2a}'), ('\\u{2c}', '\\u{2f}'), ('\\u{3a}', '\\u{3b}'),\n         ('\\u{3f}', '\\u{40}'), ('\\u{5b}', '\\u{5d}'), ('\\u{5f}', '\\u{5f}'), ('\\u{7b}', '\\u{7b}'),\n         ('\\u{7d}', '\\u{7d}'), ('\\u{a1}', '\\u{a1}'), ('\\u{a7}', '\\u{a7}'), ('\\u{ab}', '\\u{ab}'),\n@@ -1474,20 +1474,20 @@ pub mod general_category {\n         '\\u{1bc9f}')\n     ];\n \n-    pub static Pc_table: &'static [(char, char)] = &[\n+    pub const Pc_table: &'static [(char, char)] = &[\n         ('\\u{5f}', '\\u{5f}'), ('\\u{203f}', '\\u{2040}'), ('\\u{2054}', '\\u{2054}'), ('\\u{fe33}',\n         '\\u{fe34}'), ('\\u{fe4d}', '\\u{fe4f}'), ('\\u{ff3f}', '\\u{ff3f}')\n     ];\n \n-    pub static Pd_table: &'static [(char, char)] = &[\n+    pub const Pd_table: &'static [(char, char)] = &[\n         ('\\u{2d}', '\\u{2d}'), ('\\u{58a}', '\\u{58a}'), ('\\u{5be}', '\\u{5be}'), ('\\u{1400}',\n         '\\u{1400}'), ('\\u{1806}', '\\u{1806}'), ('\\u{2010}', '\\u{2015}'), ('\\u{2e17}', '\\u{2e17}'),\n         ('\\u{2e1a}', '\\u{2e1a}'), ('\\u{2e3a}', '\\u{2e3b}'), ('\\u{2e40}', '\\u{2e40}'), ('\\u{301c}',\n         '\\u{301c}'), ('\\u{3030}', '\\u{3030}'), ('\\u{30a0}', '\\u{30a0}'), ('\\u{fe31}', '\\u{fe32}'),\n         ('\\u{fe58}', '\\u{fe58}'), ('\\u{fe63}', '\\u{fe63}'), ('\\u{ff0d}', '\\u{ff0d}')\n     ];\n \n-    pub static Pe_table: &'static [(char, char)] = &[\n+    pub const Pe_table: &'static [(char, char)] = &[\n         ('\\u{29}', '\\u{29}'), ('\\u{5d}', '\\u{5d}'), ('\\u{7d}', '\\u{7d}'), ('\\u{f3b}', '\\u{f3b}'),\n         ('\\u{f3d}', '\\u{f3d}'), ('\\u{169c}', '\\u{169c}'), ('\\u{2046}', '\\u{2046}'), ('\\u{207e}',\n         '\\u{207e}'), ('\\u{208e}', '\\u{208e}'), ('\\u{2309}', '\\u{2309}'), ('\\u{230b}', '\\u{230b}'),\n@@ -1511,20 +1511,20 @@ pub mod general_category {\n         '\\u{ff60}'), ('\\u{ff63}', '\\u{ff63}')\n     ];\n \n-    pub static Pf_table: &'static [(char, char)] = &[\n+    pub const Pf_table: &'static [(char, char)] = &[\n         ('\\u{bb}', '\\u{bb}'), ('\\u{2019}', '\\u{2019}'), ('\\u{201d}', '\\u{201d}'), ('\\u{203a}',\n         '\\u{203a}'), ('\\u{2e03}', '\\u{2e03}'), ('\\u{2e05}', '\\u{2e05}'), ('\\u{2e0a}', '\\u{2e0a}'),\n         ('\\u{2e0d}', '\\u{2e0d}'), ('\\u{2e1d}', '\\u{2e1d}'), ('\\u{2e21}', '\\u{2e21}')\n     ];\n \n-    pub static Pi_table: &'static [(char, char)] = &[\n+    pub const Pi_table: &'static [(char, char)] = &[\n         ('\\u{ab}', '\\u{ab}'), ('\\u{2018}', '\\u{2018}'), ('\\u{201b}', '\\u{201c}'), ('\\u{201f}',\n         '\\u{201f}'), ('\\u{2039}', '\\u{2039}'), ('\\u{2e02}', '\\u{2e02}'), ('\\u{2e04}', '\\u{2e04}'),\n         ('\\u{2e09}', '\\u{2e09}'), ('\\u{2e0c}', '\\u{2e0c}'), ('\\u{2e1c}', '\\u{2e1c}'), ('\\u{2e20}',\n         '\\u{2e20}')\n     ];\n \n-    pub static Po_table: &'static [(char, char)] = &[\n+    pub const Po_table: &'static [(char, char)] = &[\n         ('\\u{21}', '\\u{23}'), ('\\u{25}', '\\u{27}'), ('\\u{2a}', '\\u{2a}'), ('\\u{2c}', '\\u{2c}'),\n         ('\\u{2e}', '\\u{2f}'), ('\\u{3a}', '\\u{3b}'), ('\\u{3f}', '\\u{40}'), ('\\u{5c}', '\\u{5c}'),\n         ('\\u{a1}', '\\u{a1}'), ('\\u{a7}', '\\u{a7}'), ('\\u{b6}', '\\u{b7}'), ('\\u{bf}', '\\u{bf}'),\n@@ -1572,7 +1572,7 @@ pub mod general_category {\n         '\\u{1bc9f}')\n     ];\n \n-    pub static Ps_table: &'static [(char, char)] = &[\n+    pub const Ps_table: &'static [(char, char)] = &[\n         ('\\u{28}', '\\u{28}'), ('\\u{5b}', '\\u{5b}'), ('\\u{7b}', '\\u{7b}'), ('\\u{f3a}', '\\u{f3a}'),\n         ('\\u{f3c}', '\\u{f3c}'), ('\\u{169b}', '\\u{169b}'), ('\\u{201a}', '\\u{201a}'), ('\\u{201e}',\n         '\\u{201e}'), ('\\u{2045}', '\\u{2045}'), ('\\u{207d}', '\\u{207d}'), ('\\u{208d}', '\\u{208d}'),\n@@ -1597,7 +1597,7 @@ pub mod general_category {\n         ('\\u{ff62}', '\\u{ff62}')\n     ];\n \n-    pub static S_table: &'static [(char, char)] = &[\n+    pub const S_table: &'static [(char, char)] = &[\n         ('\\u{24}', '\\u{24}'), ('\\u{2b}', '\\u{2b}'), ('\\u{3c}', '\\u{3e}'), ('\\u{5e}', '\\u{5e}'),\n         ('\\u{60}', '\\u{60}'), ('\\u{7c}', '\\u{7c}'), ('\\u{7e}', '\\u{7e}'), ('\\u{a2}', '\\u{a6}'),\n         ('\\u{a8}', '\\u{a9}'), ('\\u{ac}', '\\u{ac}'), ('\\u{ae}', '\\u{b1}'), ('\\u{b4}', '\\u{b4}'),\n@@ -1663,15 +1663,15 @@ pub mod general_category {\n         '\\u{1f887}'), ('\\u{1f890}', '\\u{1f8ad}')\n     ];\n \n-    pub static Sc_table: &'static [(char, char)] = &[\n+    pub const Sc_table: &'static [(char, char)] = &[\n         ('\\u{24}', '\\u{24}'), ('\\u{a2}', '\\u{a5}'), ('\\u{58f}', '\\u{58f}'), ('\\u{60b}', '\\u{60b}'),\n         ('\\u{9f2}', '\\u{9f3}'), ('\\u{9fb}', '\\u{9fb}'), ('\\u{af1}', '\\u{af1}'), ('\\u{bf9}',\n         '\\u{bf9}'), ('\\u{e3f}', '\\u{e3f}'), ('\\u{17db}', '\\u{17db}'), ('\\u{20a0}', '\\u{20bd}'),\n         ('\\u{a838}', '\\u{a838}'), ('\\u{fdfc}', '\\u{fdfc}'), ('\\u{fe69}', '\\u{fe69}'), ('\\u{ff04}',\n         '\\u{ff04}'), ('\\u{ffe0}', '\\u{ffe1}'), ('\\u{ffe5}', '\\u{ffe6}')\n     ];\n \n-    pub static Sk_table: &'static [(char, char)] = &[\n+    pub const Sk_table: &'static [(char, char)] = &[\n         ('\\u{5e}', '\\u{5e}'), ('\\u{60}', '\\u{60}'), ('\\u{a8}', '\\u{a8}'), ('\\u{af}', '\\u{af}'),\n         ('\\u{b4}', '\\u{b4}'), ('\\u{b8}', '\\u{b8}'), ('\\u{2c2}', '\\u{2c5}'), ('\\u{2d2}', '\\u{2df}'),\n         ('\\u{2e5}', '\\u{2eb}'), ('\\u{2ed}', '\\u{2ed}'), ('\\u{2ef}', '\\u{2ff}'), ('\\u{375}',\n@@ -1682,7 +1682,7 @@ pub mod general_category {\n         '\\u{ff3e}'), ('\\u{ff40}', '\\u{ff40}'), ('\\u{ffe3}', '\\u{ffe3}')\n     ];\n \n-    pub static Sm_table: &'static [(char, char)] = &[\n+    pub const Sm_table: &'static [(char, char)] = &[\n         ('\\u{2b}', '\\u{2b}'), ('\\u{3c}', '\\u{3e}'), ('\\u{7c}', '\\u{7c}'), ('\\u{7e}', '\\u{7e}'),\n         ('\\u{ac}', '\\u{ac}'), ('\\u{b1}', '\\u{b1}'), ('\\u{d7}', '\\u{d7}'), ('\\u{f7}', '\\u{f7}'),\n         ('\\u{3f6}', '\\u{3f6}'), ('\\u{606}', '\\u{608}'), ('\\u{2044}', '\\u{2044}'), ('\\u{2052}',\n@@ -1704,7 +1704,7 @@ pub mod general_category {\n         '\\u{1d7c3}'), ('\\u{1eef0}', '\\u{1eef1}')\n     ];\n \n-    pub static So_table: &'static [(char, char)] = &[\n+    pub const So_table: &'static [(char, char)] = &[\n         ('\\u{a6}', '\\u{a6}'), ('\\u{a9}', '\\u{a9}'), ('\\u{ae}', '\\u{ae}'), ('\\u{b0}', '\\u{b0}'),\n         ('\\u{482}', '\\u{482}'), ('\\u{58d}', '\\u{58e}'), ('\\u{60e}', '\\u{60f}'), ('\\u{6de}',\n         '\\u{6de}'), ('\\u{6e9}', '\\u{6e9}'), ('\\u{6fd}', '\\u{6fe}'), ('\\u{7f6}', '\\u{7f6}'),\n@@ -1757,29 +1757,29 @@ pub mod general_category {\n         '\\u{1f887}'), ('\\u{1f890}', '\\u{1f8ad}')\n     ];\n \n-    pub static Z_table: &'static [(char, char)] = &[\n+    pub const Z_table: &'static [(char, char)] = &[\n         ('\\u{20}', '\\u{20}'), ('\\u{a0}', '\\u{a0}'), ('\\u{1680}', '\\u{1680}'), ('\\u{2000}',\n         '\\u{200a}'), ('\\u{2028}', '\\u{2029}'), ('\\u{202f}', '\\u{202f}'), ('\\u{205f}', '\\u{205f}'),\n         ('\\u{3000}', '\\u{3000}')\n     ];\n \n-    pub static Zl_table: &'static [(char, char)] = &[\n+    pub const Zl_table: &'static [(char, char)] = &[\n         ('\\u{2028}', '\\u{2028}')\n     ];\n \n-    pub static Zp_table: &'static [(char, char)] = &[\n+    pub const Zp_table: &'static [(char, char)] = &[\n         ('\\u{2029}', '\\u{2029}')\n     ];\n \n-    pub static Zs_table: &'static [(char, char)] = &[\n+    pub const Zs_table: &'static [(char, char)] = &[\n         ('\\u{20}', '\\u{20}'), ('\\u{a0}', '\\u{a0}'), ('\\u{1680}', '\\u{1680}'), ('\\u{2000}',\n         '\\u{200a}'), ('\\u{202f}', '\\u{202f}'), ('\\u{205f}', '\\u{205f}'), ('\\u{3000}', '\\u{3000}')\n     ];\n \n }\n \n pub mod derived_property {\n-    pub static Alphabetic_table: &'static [(char, char)] = &[\n+    pub const Alphabetic_table: &'static [(char, char)] = &[\n         ('\\u{41}', '\\u{5a}'), ('\\u{61}', '\\u{7a}'), ('\\u{aa}', '\\u{aa}'), ('\\u{b5}', '\\u{b5}'),\n         ('\\u{ba}', '\\u{ba}'), ('\\u{c0}', '\\u{d6}'), ('\\u{d8}', '\\u{f6}'), ('\\u{f8}', '\\u{1ba}'),\n         ('\\u{1bb}', '\\u{1bb}'), ('\\u{1bc}', '\\u{1bf}'), ('\\u{1c0}', '\\u{1c3}'), ('\\u{1c4}',\n@@ -2057,7 +2057,7 @@ pub mod derived_property {\n         super::bsearch_range_table(c, Alphabetic_table)\n     }\n \n-    pub static Default_Ignorable_Code_Point_table: &'static [(char, char)] = &[\n+    pub const Default_Ignorable_Code_Point_table: &'static [(char, char)] = &[\n         ('\\u{ad}', '\\u{ad}'), ('\\u{34f}', '\\u{34f}'), ('\\u{61c}', '\\u{61c}'), ('\\u{115f}',\n         '\\u{1160}'), ('\\u{17b4}', '\\u{17b5}'), ('\\u{180b}', '\\u{180d}'), ('\\u{180e}', '\\u{180e}'),\n         ('\\u{200b}', '\\u{200f}'), ('\\u{202a}', '\\u{202e}'), ('\\u{2060}', '\\u{2064}'), ('\\u{2065}',\n@@ -2068,7 +2068,7 @@ pub mod derived_property {\n         '\\u{e00ff}'), ('\\u{e0100}', '\\u{e01ef}'), ('\\u{e01f0}', '\\u{e0fff}')\n     ];\n \n-    pub static Lowercase_table: &'static [(char, char)] = &[\n+    pub const Lowercase_table: &'static [(char, char)] = &[\n         ('\\u{61}', '\\u{7a}'), ('\\u{aa}', '\\u{aa}'), ('\\u{b5}', '\\u{b5}'), ('\\u{ba}', '\\u{ba}'),\n         ('\\u{df}', '\\u{f6}'), ('\\u{f8}', '\\u{ff}'), ('\\u{101}', '\\u{101}'), ('\\u{103}', '\\u{103}'),\n         ('\\u{105}', '\\u{105}'), ('\\u{107}', '\\u{107}'), ('\\u{109}', '\\u{109}'), ('\\u{10b}',\n@@ -2261,7 +2261,7 @@ pub mod derived_property {\n         super::bsearch_range_table(c, Lowercase_table)\n     }\n \n-    pub static Uppercase_table: &'static [(char, char)] = &[\n+    pub const Uppercase_table: &'static [(char, char)] = &[\n         ('\\u{41}', '\\u{5a}'), ('\\u{c0}', '\\u{d6}'), ('\\u{d8}', '\\u{de}'), ('\\u{100}', '\\u{100}'),\n         ('\\u{102}', '\\u{102}'), ('\\u{104}', '\\u{104}'), ('\\u{106}', '\\u{106}'), ('\\u{108}',\n         '\\u{108}'), ('\\u{10a}', '\\u{10a}'), ('\\u{10c}', '\\u{10c}'), ('\\u{10e}', '\\u{10e}'),\n@@ -2449,7 +2449,7 @@ pub mod derived_property {\n         super::bsearch_range_table(c, Uppercase_table)\n     }\n \n-    pub static XID_Continue_table: &'static [(char, char)] = &[\n+    pub const XID_Continue_table: &'static [(char, char)] = &[\n         ('\\u{30}', '\\u{39}'), ('\\u{41}', '\\u{5a}'), ('\\u{5f}', '\\u{5f}'), ('\\u{61}', '\\u{7a}'),\n         ('\\u{aa}', '\\u{aa}'), ('\\u{b5}', '\\u{b5}'), ('\\u{b7}', '\\u{b7}'), ('\\u{ba}', '\\u{ba}'),\n         ('\\u{c0}', '\\u{d6}'), ('\\u{d8}', '\\u{f6}'), ('\\u{f8}', '\\u{1ba}'), ('\\u{1bb}', '\\u{1bb}'),\n@@ -2775,7 +2775,7 @@ pub mod derived_property {\n         super::bsearch_range_table(c, XID_Continue_table)\n     }\n \n-    pub static XID_Start_table: &'static [(char, char)] = &[\n+    pub const XID_Start_table: &'static [(char, char)] = &[\n         ('\\u{41}', '\\u{5a}'), ('\\u{61}', '\\u{7a}'), ('\\u{aa}', '\\u{aa}'), ('\\u{b5}', '\\u{b5}'),\n         ('\\u{ba}', '\\u{ba}'), ('\\u{c0}', '\\u{d6}'), ('\\u{d8}', '\\u{f6}'), ('\\u{f8}', '\\u{1ba}'),\n         ('\\u{1bb}', '\\u{1bb}'), ('\\u{1bc}', '\\u{1bf}'), ('\\u{1c0}', '\\u{1c3}'), ('\\u{1c4}',\n@@ -2967,7 +2967,7 @@ pub mod derived_property {\n }\n \n pub mod script {\n-    pub static Arabic_table: &'static [(char, char)] = &[\n+    pub const Arabic_table: &'static [(char, char)] = &[\n         ('\\u{600}', '\\u{604}'), ('\\u{606}', '\\u{608}'), ('\\u{609}', '\\u{60a}'), ('\\u{60b}',\n         '\\u{60b}'), ('\\u{60d}', '\\u{60d}'), ('\\u{60e}', '\\u{60f}'), ('\\u{610}', '\\u{61a}'),\n         ('\\u{61e}', '\\u{61e}'), ('\\u{620}', '\\u{63f}'), ('\\u{641}', '\\u{64a}'), ('\\u{656}',\n@@ -2994,40 +2994,40 @@ pub mod script {\n         ('\\u{1eef0}', '\\u{1eef1}')\n     ];\n \n-    pub static Armenian_table: &'static [(char, char)] = &[\n+    pub const Armenian_table: &'static [(char, char)] = &[\n         ('\\u{531}', '\\u{556}'), ('\\u{559}', '\\u{559}'), ('\\u{55a}', '\\u{55f}'), ('\\u{561}',\n         '\\u{587}'), ('\\u{58a}', '\\u{58a}'), ('\\u{58d}', '\\u{58e}'), ('\\u{58f}', '\\u{58f}'),\n         ('\\u{fb13}', '\\u{fb17}')\n     ];\n \n-    pub static Avestan_table: &'static [(char, char)] = &[\n+    pub const Avestan_table: &'static [(char, char)] = &[\n         ('\\u{10b00}', '\\u{10b35}'), ('\\u{10b39}', '\\u{10b3f}')\n     ];\n \n-    pub static Balinese_table: &'static [(char, char)] = &[\n+    pub const Balinese_table: &'static [(char, char)] = &[\n         ('\\u{1b00}', '\\u{1b03}'), ('\\u{1b04}', '\\u{1b04}'), ('\\u{1b05}', '\\u{1b33}'), ('\\u{1b34}',\n         '\\u{1b34}'), ('\\u{1b35}', '\\u{1b35}'), ('\\u{1b36}', '\\u{1b3a}'), ('\\u{1b3b}', '\\u{1b3b}'),\n         ('\\u{1b3c}', '\\u{1b3c}'), ('\\u{1b3d}', '\\u{1b41}'), ('\\u{1b42}', '\\u{1b42}'), ('\\u{1b43}',\n         '\\u{1b44}'), ('\\u{1b45}', '\\u{1b4b}'), ('\\u{1b50}', '\\u{1b59}'), ('\\u{1b5a}', '\\u{1b60}'),\n         ('\\u{1b61}', '\\u{1b6a}'), ('\\u{1b6b}', '\\u{1b73}'), ('\\u{1b74}', '\\u{1b7c}')\n     ];\n \n-    pub static Bamum_table: &'static [(char, char)] = &[\n+    pub const Bamum_table: &'static [(char, char)] = &[\n         ('\\u{a6a0}', '\\u{a6e5}'), ('\\u{a6e6}', '\\u{a6ef}'), ('\\u{a6f0}', '\\u{a6f1}'), ('\\u{a6f2}',\n         '\\u{a6f7}'), ('\\u{16800}', '\\u{16a38}')\n     ];\n \n-    pub static Bassa_Vah_table: &'static [(char, char)] = &[\n+    pub const Bassa_Vah_table: &'static [(char, char)] = &[\n         ('\\u{16ad0}', '\\u{16aed}'), ('\\u{16af0}', '\\u{16af4}'), ('\\u{16af5}', '\\u{16af5}')\n     ];\n \n-    pub static Batak_table: &'static [(char, char)] = &[\n+    pub const Batak_table: &'static [(char, char)] = &[\n         ('\\u{1bc0}', '\\u{1be5}'), ('\\u{1be6}', '\\u{1be6}'), ('\\u{1be7}', '\\u{1be7}'), ('\\u{1be8}',\n         '\\u{1be9}'), ('\\u{1bea}', '\\u{1bec}'), ('\\u{1bed}', '\\u{1bed}'), ('\\u{1bee}', '\\u{1bee}'),\n         ('\\u{1bef}', '\\u{1bf1}'), ('\\u{1bf2}', '\\u{1bf3}'), ('\\u{1bfc}', '\\u{1bff}')\n     ];\n \n-    pub static Bengali_table: &'static [(char, char)] = &[\n+    pub const Bengali_table: &'static [(char, char)] = &[\n         ('\\u{980}', '\\u{980}'), ('\\u{981}', '\\u{981}'), ('\\u{982}', '\\u{983}'), ('\\u{985}',\n         '\\u{98c}'), ('\\u{98f}', '\\u{990}'), ('\\u{993}', '\\u{9a8}'), ('\\u{9aa}', '\\u{9b0}'),\n         ('\\u{9b2}', '\\u{9b2}'), ('\\u{9b6}', '\\u{9b9}'), ('\\u{9bc}', '\\u{9bc}'), ('\\u{9bd}',\n@@ -3038,60 +3038,60 @@ pub mod script {\n         '\\u{9f9}'), ('\\u{9fa}', '\\u{9fa}'), ('\\u{9fb}', '\\u{9fb}')\n     ];\n \n-    pub static Bopomofo_table: &'static [(char, char)] = &[\n+    pub const Bopomofo_table: &'static [(char, char)] = &[\n         ('\\u{2ea}', '\\u{2eb}'), ('\\u{3105}', '\\u{312d}'), ('\\u{31a0}', '\\u{31ba}')\n     ];\n \n-    pub static Brahmi_table: &'static [(char, char)] = &[\n+    pub const Brahmi_table: &'static [(char, char)] = &[\n         ('\\u{11000}', '\\u{11000}'), ('\\u{11001}', '\\u{11001}'), ('\\u{11002}', '\\u{11002}'),\n         ('\\u{11003}', '\\u{11037}'), ('\\u{11038}', '\\u{11046}'), ('\\u{11047}', '\\u{1104d}'),\n         ('\\u{11052}', '\\u{11065}'), ('\\u{11066}', '\\u{1106f}'), ('\\u{1107f}', '\\u{1107f}')\n     ];\n \n-    pub static Braille_table: &'static [(char, char)] = &[\n+    pub const Braille_table: &'static [(char, char)] = &[\n         ('\\u{2800}', '\\u{28ff}')\n     ];\n \n-    pub static Buginese_table: &'static [(char, char)] = &[\n+    pub const Buginese_table: &'static [(char, char)] = &[\n         ('\\u{1a00}', '\\u{1a16}'), ('\\u{1a17}', '\\u{1a18}'), ('\\u{1a19}', '\\u{1a1a}'), ('\\u{1a1b}',\n         '\\u{1a1b}'), ('\\u{1a1e}', '\\u{1a1f}')\n     ];\n \n-    pub static Buhid_table: &'static [(char, char)] = &[\n+    pub const Buhid_table: &'static [(char, char)] = &[\n         ('\\u{1740}', '\\u{1751}'), ('\\u{1752}', '\\u{1753}')\n     ];\n \n-    pub static Canadian_Aboriginal_table: &'static [(char, char)] = &[\n+    pub const Canadian_Aboriginal_table: &'static [(char, char)] = &[\n         ('\\u{1400}', '\\u{1400}'), ('\\u{1401}', '\\u{166c}'), ('\\u{166d}', '\\u{166e}'), ('\\u{166f}',\n         '\\u{167f}'), ('\\u{18b0}', '\\u{18f5}')\n     ];\n \n-    pub static Carian_table: &'static [(char, char)] = &[\n+    pub const Carian_table: &'static [(char, char)] = &[\n         ('\\u{102a0}', '\\u{102d0}')\n     ];\n \n-    pub static Caucasian_Albanian_table: &'static [(char, char)] = &[\n+    pub const Caucasian_Albanian_table: &'static [(char, char)] = &[\n         ('\\u{10530}', '\\u{10563}'), ('\\u{1056f}', '\\u{1056f}')\n     ];\n \n-    pub static Chakma_table: &'static [(char, char)] = &[\n+    pub const Chakma_table: &'static [(char, char)] = &[\n         ('\\u{11100}', '\\u{11102}'), ('\\u{11103}', '\\u{11126}'), ('\\u{11127}', '\\u{1112b}'),\n         ('\\u{1112c}', '\\u{1112c}'), ('\\u{1112d}', '\\u{11134}'), ('\\u{11136}', '\\u{1113f}'),\n         ('\\u{11140}', '\\u{11143}')\n     ];\n \n-    pub static Cham_table: &'static [(char, char)] = &[\n+    pub const Cham_table: &'static [(char, char)] = &[\n         ('\\u{aa00}', '\\u{aa28}'), ('\\u{aa29}', '\\u{aa2e}'), ('\\u{aa2f}', '\\u{aa30}'), ('\\u{aa31}',\n         '\\u{aa32}'), ('\\u{aa33}', '\\u{aa34}'), ('\\u{aa35}', '\\u{aa36}'), ('\\u{aa40}', '\\u{aa42}'),\n         ('\\u{aa43}', '\\u{aa43}'), ('\\u{aa44}', '\\u{aa4b}'), ('\\u{aa4c}', '\\u{aa4c}'), ('\\u{aa4d}',\n         '\\u{aa4d}'), ('\\u{aa50}', '\\u{aa59}'), ('\\u{aa5c}', '\\u{aa5f}')\n     ];\n \n-    pub static Cherokee_table: &'static [(char, char)] = &[\n+    pub const Cherokee_table: &'static [(char, char)] = &[\n         ('\\u{13a0}', '\\u{13f4}')\n     ];\n \n-    pub static Common_table: &'static [(char, char)] = &[\n+    pub const Common_table: &'static [(char, char)] = &[\n         ('\\u{0}', '\\u{1f}'), ('\\u{20}', '\\u{20}'), ('\\u{21}', '\\u{23}'), ('\\u{24}', '\\u{24}'),\n         ('\\u{25}', '\\u{27}'), ('\\u{28}', '\\u{28}'), ('\\u{29}', '\\u{29}'), ('\\u{2a}', '\\u{2a}'),\n         ('\\u{2b}', '\\u{2b}'), ('\\u{2c}', '\\u{2c}'), ('\\u{2d}', '\\u{2d}'), ('\\u{2e}', '\\u{2f}'),\n@@ -3261,22 +3261,22 @@ pub mod script {\n         ('\\u{1f890}', '\\u{1f8ad}'), ('\\u{e0001}', '\\u{e0001}'), ('\\u{e0020}', '\\u{e007f}')\n     ];\n \n-    pub static Coptic_table: &'static [(char, char)] = &[\n+    pub const Coptic_table: &'static [(char, char)] = &[\n         ('\\u{3e2}', '\\u{3ef}'), ('\\u{2c80}', '\\u{2ce4}'), ('\\u{2ce5}', '\\u{2cea}'), ('\\u{2ceb}',\n         '\\u{2cee}'), ('\\u{2cef}', '\\u{2cf1}'), ('\\u{2cf2}', '\\u{2cf3}'), ('\\u{2cf9}', '\\u{2cfc}'),\n         ('\\u{2cfd}', '\\u{2cfd}'), ('\\u{2cfe}', '\\u{2cff}')\n     ];\n \n-    pub static Cuneiform_table: &'static [(char, char)] = &[\n+    pub const Cuneiform_table: &'static [(char, char)] = &[\n         ('\\u{12000}', '\\u{12398}'), ('\\u{12400}', '\\u{1246e}'), ('\\u{12470}', '\\u{12474}')\n     ];\n \n-    pub static Cypriot_table: &'static [(char, char)] = &[\n+    pub const Cypriot_table: &'static [(char, char)] = &[\n         ('\\u{10800}', '\\u{10805}'), ('\\u{10808}', '\\u{10808}'), ('\\u{1080a}', '\\u{10835}'),\n         ('\\u{10837}', '\\u{10838}'), ('\\u{1083c}', '\\u{1083c}'), ('\\u{1083f}', '\\u{1083f}')\n     ];\n \n-    pub static Cyrillic_table: &'static [(char, char)] = &[\n+    pub const Cyrillic_table: &'static [(char, char)] = &[\n         ('\\u{400}', '\\u{481}'), ('\\u{482}', '\\u{482}'), ('\\u{483}', '\\u{484}'), ('\\u{487}',\n         '\\u{487}'), ('\\u{488}', '\\u{489}'), ('\\u{48a}', '\\u{52f}'), ('\\u{1d2b}', '\\u{1d2b}'),\n         ('\\u{1d78}', '\\u{1d78}'), ('\\u{2de0}', '\\u{2dff}'), ('\\u{a640}', '\\u{a66d}'), ('\\u{a66e}',\n@@ -3285,11 +3285,11 @@ pub mod script {\n         '\\u{a69b}'), ('\\u{a69c}', '\\u{a69d}'), ('\\u{a69f}', '\\u{a69f}')\n     ];\n \n-    pub static Deseret_table: &'static [(char, char)] = &[\n+    pub const Deseret_table: &'static [(char, char)] = &[\n         ('\\u{10400}', '\\u{1044f}')\n     ];\n \n-    pub static Devanagari_table: &'static [(char, char)] = &[\n+    pub const Devanagari_table: &'static [(char, char)] = &[\n         ('\\u{900}', '\\u{902}'), ('\\u{903}', '\\u{903}'), ('\\u{904}', '\\u{939}'), ('\\u{93a}',\n         '\\u{93a}'), ('\\u{93b}', '\\u{93b}'), ('\\u{93c}', '\\u{93c}'), ('\\u{93d}', '\\u{93d}'),\n         ('\\u{93e}', '\\u{940}'), ('\\u{941}', '\\u{948}'), ('\\u{949}', '\\u{94c}'), ('\\u{94d}',\n@@ -3299,21 +3299,21 @@ pub mod script {\n         ('\\u{a8f2}', '\\u{a8f7}'), ('\\u{a8f8}', '\\u{a8fa}'), ('\\u{a8fb}', '\\u{a8fb}')\n     ];\n \n-    pub static Duployan_table: &'static [(char, char)] = &[\n+    pub const Duployan_table: &'static [(char, char)] = &[\n         ('\\u{1bc00}', '\\u{1bc6a}'), ('\\u{1bc70}', '\\u{1bc7c}'), ('\\u{1bc80}', '\\u{1bc88}'),\n         ('\\u{1bc90}', '\\u{1bc99}'), ('\\u{1bc9c}', '\\u{1bc9c}'), ('\\u{1bc9d}', '\\u{1bc9e}'),\n         ('\\u{1bc9f}', '\\u{1bc9f}')\n     ];\n \n-    pub static Egyptian_Hieroglyphs_table: &'static [(char, char)] = &[\n+    pub const Egyptian_Hieroglyphs_table: &'static [(char, char)] = &[\n         ('\\u{13000}', '\\u{1342e}')\n     ];\n \n-    pub static Elbasan_table: &'static [(char, char)] = &[\n+    pub const Elbasan_table: &'static [(char, char)] = &[\n         ('\\u{10500}', '\\u{10527}')\n     ];\n \n-    pub static Ethiopic_table: &'static [(char, char)] = &[\n+    pub const Ethiopic_table: &'static [(char, char)] = &[\n         ('\\u{1200}', '\\u{1248}'), ('\\u{124a}', '\\u{124d}'), ('\\u{1250}', '\\u{1256}'), ('\\u{1258}',\n         '\\u{1258}'), ('\\u{125a}', '\\u{125d}'), ('\\u{1260}', '\\u{1288}'), ('\\u{128a}', '\\u{128d}'),\n         ('\\u{1290}', '\\u{12b0}'), ('\\u{12b2}', '\\u{12b5}'), ('\\u{12b8}', '\\u{12be}'), ('\\u{12c0}',\n@@ -3326,22 +3326,22 @@ pub mod script {\n         '\\u{ab0e}'), ('\\u{ab11}', '\\u{ab16}'), ('\\u{ab20}', '\\u{ab26}'), ('\\u{ab28}', '\\u{ab2e}')\n     ];\n \n-    pub static Georgian_table: &'static [(char, char)] = &[\n+    pub const Georgian_table: &'static [(char, char)] = &[\n         ('\\u{10a0}', '\\u{10c5}'), ('\\u{10c7}', '\\u{10c7}'), ('\\u{10cd}', '\\u{10cd}'), ('\\u{10d0}',\n         '\\u{10fa}'), ('\\u{10fc}', '\\u{10fc}'), ('\\u{10fd}', '\\u{10ff}'), ('\\u{2d00}', '\\u{2d25}'),\n         ('\\u{2d27}', '\\u{2d27}'), ('\\u{2d2d}', '\\u{2d2d}')\n     ];\n \n-    pub static Glagolitic_table: &'static [(char, char)] = &[\n+    pub const Glagolitic_table: &'static [(char, char)] = &[\n         ('\\u{2c00}', '\\u{2c2e}'), ('\\u{2c30}', '\\u{2c5e}')\n     ];\n \n-    pub static Gothic_table: &'static [(char, char)] = &[\n+    pub const Gothic_table: &'static [(char, char)] = &[\n         ('\\u{10330}', '\\u{10340}'), ('\\u{10341}', '\\u{10341}'), ('\\u{10342}', '\\u{10349}'),\n         ('\\u{1034a}', '\\u{1034a}')\n     ];\n \n-    pub static Grantha_table: &'static [(char, char)] = &[\n+    pub const Grantha_table: &'static [(char, char)] = &[\n         ('\\u{11301}', '\\u{11301}'), ('\\u{11302}', '\\u{11303}'), ('\\u{11305}', '\\u{1130c}'),\n         ('\\u{1130f}', '\\u{11310}'), ('\\u{11313}', '\\u{11328}'), ('\\u{1132a}', '\\u{11330}'),\n         ('\\u{11332}', '\\u{11333}'), ('\\u{11335}', '\\u{11339}'), ('\\u{1133c}', '\\u{1133c}'),\n@@ -3351,7 +3351,7 @@ pub mod script {\n         ('\\u{11366}', '\\u{1136c}'), ('\\u{11370}', '\\u{11374}')\n     ];\n \n-    pub static Greek_table: &'static [(char, char)] = &[\n+    pub const Greek_table: &'static [(char, char)] = &[\n         ('\\u{370}', '\\u{373}'), ('\\u{375}', '\\u{375}'), ('\\u{376}', '\\u{377}'), ('\\u{37a}',\n         '\\u{37a}'), ('\\u{37b}', '\\u{37d}'), ('\\u{37f}', '\\u{37f}'), ('\\u{384}', '\\u{384}'),\n         ('\\u{386}', '\\u{386}'), ('\\u{388}', '\\u{38a}'), ('\\u{38c}', '\\u{38c}'), ('\\u{38e}',\n@@ -3371,7 +3371,7 @@ pub mod script {\n         '\\u{1d245}')\n     ];\n \n-    pub static Gujarati_table: &'static [(char, char)] = &[\n+    pub const Gujarati_table: &'static [(char, char)] = &[\n         ('\\u{a81}', '\\u{a82}'), ('\\u{a83}', '\\u{a83}'), ('\\u{a85}', '\\u{a8d}'), ('\\u{a8f}',\n         '\\u{a91}'), ('\\u{a93}', '\\u{aa8}'), ('\\u{aaa}', '\\u{ab0}'), ('\\u{ab2}', '\\u{ab3}'),\n         ('\\u{ab5}', '\\u{ab9}'), ('\\u{abc}', '\\u{abc}'), ('\\u{abd}', '\\u{abd}'), ('\\u{abe}',\n@@ -3381,7 +3381,7 @@ pub mod script {\n         ('\\u{af1}', '\\u{af1}')\n     ];\n \n-    pub static Gurmukhi_table: &'static [(char, char)] = &[\n+    pub const Gurmukhi_table: &'static [(char, char)] = &[\n         ('\\u{a01}', '\\u{a02}'), ('\\u{a03}', '\\u{a03}'), ('\\u{a05}', '\\u{a0a}'), ('\\u{a0f}',\n         '\\u{a10}'), ('\\u{a13}', '\\u{a28}'), ('\\u{a2a}', '\\u{a30}'), ('\\u{a32}', '\\u{a33}'),\n         ('\\u{a35}', '\\u{a36}'), ('\\u{a38}', '\\u{a39}'), ('\\u{a3c}', '\\u{a3c}'), ('\\u{a3e}',\n@@ -3390,26 +3390,26 @@ pub mod script {\n         '\\u{a6f}'), ('\\u{a70}', '\\u{a71}'), ('\\u{a72}', '\\u{a74}'), ('\\u{a75}', '\\u{a75}')\n     ];\n \n-    pub static Han_table: &'static [(char, char)] = &[\n+    pub const Han_table: &'static [(char, char)] = &[\n         ('\\u{2e80}', '\\u{2e99}'), ('\\u{2e9b}', '\\u{2ef3}'), ('\\u{2f00}', '\\u{2fd5}'), ('\\u{3005}',\n         '\\u{3005}'), ('\\u{3007}', '\\u{3007}'), ('\\u{3021}', '\\u{3029}'), ('\\u{3038}', '\\u{303a}'),\n         ('\\u{303b}', '\\u{303b}'), ('\\u{3400}', '\\u{4db5}'), ('\\u{4e00}', '\\u{9fcc}'), ('\\u{f900}',\n         '\\u{fa6d}'), ('\\u{fa70}', '\\u{fad9}'), ('\\u{20000}', '\\u{2a6d6}'), ('\\u{2a700}',\n         '\\u{2b734}'), ('\\u{2b740}', '\\u{2b81d}'), ('\\u{2f800}', '\\u{2fa1d}')\n     ];\n \n-    pub static Hangul_table: &'static [(char, char)] = &[\n+    pub const Hangul_table: &'static [(char, char)] = &[\n         ('\\u{1100}', '\\u{11ff}'), ('\\u{302e}', '\\u{302f}'), ('\\u{3131}', '\\u{318e}'), ('\\u{3200}',\n         '\\u{321e}'), ('\\u{3260}', '\\u{327e}'), ('\\u{a960}', '\\u{a97c}'), ('\\u{ac00}', '\\u{d7a3}'),\n         ('\\u{d7b0}', '\\u{d7c6}'), ('\\u{d7cb}', '\\u{d7fb}'), ('\\u{ffa0}', '\\u{ffbe}'), ('\\u{ffc2}',\n         '\\u{ffc7}'), ('\\u{ffca}', '\\u{ffcf}'), ('\\u{ffd2}', '\\u{ffd7}'), ('\\u{ffda}', '\\u{ffdc}')\n     ];\n \n-    pub static Hanunoo_table: &'static [(char, char)] = &[\n+    pub const Hanunoo_table: &'static [(char, char)] = &[\n         ('\\u{1720}', '\\u{1731}'), ('\\u{1732}', '\\u{1734}')\n     ];\n \n-    pub static Hebrew_table: &'static [(char, char)] = &[\n+    pub const Hebrew_table: &'static [(char, char)] = &[\n         ('\\u{591}', '\\u{5bd}'), ('\\u{5be}', '\\u{5be}'), ('\\u{5bf}', '\\u{5bf}'), ('\\u{5c0}',\n         '\\u{5c0}'), ('\\u{5c1}', '\\u{5c2}'), ('\\u{5c3}', '\\u{5c3}'), ('\\u{5c4}', '\\u{5c5}'),\n         ('\\u{5c6}', '\\u{5c6}'), ('\\u{5c7}', '\\u{5c7}'), ('\\u{5d0}', '\\u{5ea}'), ('\\u{5f0}',\n@@ -3419,16 +3419,16 @@ pub mod script {\n         ('\\u{fb46}', '\\u{fb4f}')\n     ];\n \n-    pub static Hiragana_table: &'static [(char, char)] = &[\n+    pub const Hiragana_table: &'static [(char, char)] = &[\n         ('\\u{3041}', '\\u{3096}'), ('\\u{309d}', '\\u{309e}'), ('\\u{309f}', '\\u{309f}'), ('\\u{1b001}',\n         '\\u{1b001}'), ('\\u{1f200}', '\\u{1f200}')\n     ];\n \n-    pub static Imperial_Aramaic_table: &'static [(char, char)] = &[\n+    pub const Imperial_Aramaic_table: &'static [(char, char)] = &[\n         ('\\u{10840}', '\\u{10855}'), ('\\u{10857}', '\\u{10857}'), ('\\u{10858}', '\\u{1085f}')\n     ];\n \n-    pub static Inherited_table: &'static [(char, char)] = &[\n+    pub const Inherited_table: &'static [(char, char)] = &[\n         ('\\u{300}', '\\u{36f}'), ('\\u{485}', '\\u{486}'), ('\\u{64b}', '\\u{655}'), ('\\u{670}',\n         '\\u{670}'), ('\\u{951}', '\\u{952}'), ('\\u{1ab0}', '\\u{1abd}'), ('\\u{1abe}', '\\u{1abe}'),\n         ('\\u{1cd0}', '\\u{1cd2}'), ('\\u{1cd4}', '\\u{1ce0}'), ('\\u{1ce2}', '\\u{1ce8}'), ('\\u{1ced}',\n@@ -3441,29 +3441,29 @@ pub mod script {\n         '\\u{1d1ad}'), ('\\u{e0100}', '\\u{e01ef}')\n     ];\n \n-    pub static Inscriptional_Pahlavi_table: &'static [(char, char)] = &[\n+    pub const Inscriptional_Pahlavi_table: &'static [(char, char)] = &[\n         ('\\u{10b60}', '\\u{10b72}'), ('\\u{10b78}', '\\u{10b7f}')\n     ];\n \n-    pub static Inscriptional_Parthian_table: &'static [(char, char)] = &[\n+    pub const Inscriptional_Parthian_table: &'static [(char, char)] = &[\n         ('\\u{10b40}', '\\u{10b55}'), ('\\u{10b58}', '\\u{10b5f}')\n     ];\n \n-    pub static Javanese_table: &'static [(char, char)] = &[\n+    pub const Javanese_table: &'static [(char, char)] = &[\n         ('\\u{a980}', '\\u{a982}'), ('\\u{a983}', '\\u{a983}'), ('\\u{a984}', '\\u{a9b2}'), ('\\u{a9b3}',\n         '\\u{a9b3}'), ('\\u{a9b4}', '\\u{a9b5}'), ('\\u{a9b6}', '\\u{a9b9}'), ('\\u{a9ba}', '\\u{a9bb}'),\n         ('\\u{a9bc}', '\\u{a9bc}'), ('\\u{a9bd}', '\\u{a9c0}'), ('\\u{a9c1}', '\\u{a9cd}'), ('\\u{a9d0}',\n         '\\u{a9d9}'), ('\\u{a9de}', '\\u{a9df}')\n     ];\n \n-    pub static Kaithi_table: &'static [(char, char)] = &[\n+    pub const Kaithi_table: &'static [(char, char)] = &[\n         ('\\u{11080}', '\\u{11081}'), ('\\u{11082}', '\\u{11082}'), ('\\u{11083}', '\\u{110af}'),\n         ('\\u{110b0}', '\\u{110b2}'), ('\\u{110b3}', '\\u{110b6}'), ('\\u{110b7}', '\\u{110b8}'),\n         ('\\u{110b9}', '\\u{110ba}'), ('\\u{110bb}', '\\u{110bc}'), ('\\u{110bd}', '\\u{110bd}'),\n         ('\\u{110be}', '\\u{110c1}')\n     ];\n \n-    pub static Kannada_table: &'static [(char, char)] = &[\n+    pub const Kannada_table: &'static [(char, char)] = &[\n         ('\\u{c81}', '\\u{c81}'), ('\\u{c82}', '\\u{c83}'), ('\\u{c85}', '\\u{c8c}'), ('\\u{c8e}',\n         '\\u{c90}'), ('\\u{c92}', '\\u{ca8}'), ('\\u{caa}', '\\u{cb3}'), ('\\u{cb5}', '\\u{cb9}'),\n         ('\\u{cbc}', '\\u{cbc}'), ('\\u{cbd}', '\\u{cbd}'), ('\\u{cbe}', '\\u{cbe}'), ('\\u{cbf}',\n@@ -3473,44 +3473,44 @@ pub mod script {\n         ('\\u{cf1}', '\\u{cf2}')\n     ];\n \n-    pub static Katakana_table: &'static [(char, char)] = &[\n+    pub const Katakana_table: &'static [(char, char)] = &[\n         ('\\u{30a1}', '\\u{30fa}'), ('\\u{30fd}', '\\u{30fe}'), ('\\u{30ff}', '\\u{30ff}'), ('\\u{31f0}',\n         '\\u{31ff}'), ('\\u{32d0}', '\\u{32fe}'), ('\\u{3300}', '\\u{3357}'), ('\\u{ff66}', '\\u{ff6f}'),\n         ('\\u{ff71}', '\\u{ff9d}'), ('\\u{1b000}', '\\u{1b000}')\n     ];\n \n-    pub static Kayah_Li_table: &'static [(char, char)] = &[\n+    pub const Kayah_Li_table: &'static [(char, char)] = &[\n         ('\\u{a900}', '\\u{a909}'), ('\\u{a90a}', '\\u{a925}'), ('\\u{a926}', '\\u{a92d}'), ('\\u{a92f}',\n         '\\u{a92f}')\n     ];\n \n-    pub static Kharoshthi_table: &'static [(char, char)] = &[\n+    pub const Kharoshthi_table: &'static [(char, char)] = &[\n         ('\\u{10a00}', '\\u{10a00}'), ('\\u{10a01}', '\\u{10a03}'), ('\\u{10a05}', '\\u{10a06}'),\n         ('\\u{10a0c}', '\\u{10a0f}'), ('\\u{10a10}', '\\u{10a13}'), ('\\u{10a15}', '\\u{10a17}'),\n         ('\\u{10a19}', '\\u{10a33}'), ('\\u{10a38}', '\\u{10a3a}'), ('\\u{10a3f}', '\\u{10a3f}'),\n         ('\\u{10a40}', '\\u{10a47}'), ('\\u{10a50}', '\\u{10a58}')\n     ];\n \n-    pub static Khmer_table: &'static [(char, char)] = &[\n+    pub const Khmer_table: &'static [(char, char)] = &[\n         ('\\u{1780}', '\\u{17b3}'), ('\\u{17b4}', '\\u{17b5}'), ('\\u{17b6}', '\\u{17b6}'), ('\\u{17b7}',\n         '\\u{17bd}'), ('\\u{17be}', '\\u{17c5}'), ('\\u{17c6}', '\\u{17c6}'), ('\\u{17c7}', '\\u{17c8}'),\n         ('\\u{17c9}', '\\u{17d3}'), ('\\u{17d4}', '\\u{17d6}'), ('\\u{17d7}', '\\u{17d7}'), ('\\u{17d8}',\n         '\\u{17da}'), ('\\u{17db}', '\\u{17db}'), ('\\u{17dc}', '\\u{17dc}'), ('\\u{17dd}', '\\u{17dd}'),\n         ('\\u{17e0}', '\\u{17e9}'), ('\\u{17f0}', '\\u{17f9}'), ('\\u{19e0}', '\\u{19ff}')\n     ];\n \n-    pub static Khojki_table: &'static [(char, char)] = &[\n+    pub const Khojki_table: &'static [(char, char)] = &[\n         ('\\u{11200}', '\\u{11211}'), ('\\u{11213}', '\\u{1122b}'), ('\\u{1122c}', '\\u{1122e}'),\n         ('\\u{1122f}', '\\u{11231}'), ('\\u{11232}', '\\u{11233}'), ('\\u{11234}', '\\u{11234}'),\n         ('\\u{11235}', '\\u{11235}'), ('\\u{11236}', '\\u{11237}'), ('\\u{11238}', '\\u{1123d}')\n     ];\n \n-    pub static Khudawadi_table: &'static [(char, char)] = &[\n+    pub const Khudawadi_table: &'static [(char, char)] = &[\n         ('\\u{112b0}', '\\u{112de}'), ('\\u{112df}', '\\u{112df}'), ('\\u{112e0}', '\\u{112e2}'),\n         ('\\u{112e3}', '\\u{112ea}'), ('\\u{112f0}', '\\u{112f9}')\n     ];\n \n-    pub static Lao_table: &'static [(char, char)] = &[\n+    pub const Lao_table: &'static [(char, char)] = &[\n         ('\\u{e81}', '\\u{e82}'), ('\\u{e84}', '\\u{e84}'), ('\\u{e87}', '\\u{e88}'), ('\\u{e8a}',\n         '\\u{e8a}'), ('\\u{e8d}', '\\u{e8d}'), ('\\u{e94}', '\\u{e97}'), ('\\u{e99}', '\\u{e9f}'),\n         ('\\u{ea1}', '\\u{ea3}'), ('\\u{ea5}', '\\u{ea5}'), ('\\u{ea7}', '\\u{ea7}'), ('\\u{eaa}',\n@@ -3520,7 +3520,7 @@ pub mod script {\n         ('\\u{edc}', '\\u{edf}')\n     ];\n \n-    pub static Latin_table: &'static [(char, char)] = &[\n+    pub const Latin_table: &'static [(char, char)] = &[\n         ('\\u{41}', '\\u{5a}'), ('\\u{61}', '\\u{7a}'), ('\\u{aa}', '\\u{aa}'), ('\\u{ba}', '\\u{ba}'),\n         ('\\u{c0}', '\\u{d6}'), ('\\u{d8}', '\\u{f6}'), ('\\u{f8}', '\\u{1ba}'), ('\\u{1bb}', '\\u{1bb}'),\n         ('\\u{1bc}', '\\u{1bf}'), ('\\u{1c0}', '\\u{1c3}'), ('\\u{1c4}', '\\u{293}'), ('\\u{294}',\n@@ -3537,47 +3537,47 @@ pub mod script {\n         '\\u{ab64}'), ('\\u{fb00}', '\\u{fb06}'), ('\\u{ff21}', '\\u{ff3a}'), ('\\u{ff41}', '\\u{ff5a}')\n     ];\n \n-    pub static Lepcha_table: &'static [(char, char)] = &[\n+    pub const Lepcha_table: &'static [(char, char)] = &[\n         ('\\u{1c00}', '\\u{1c23}'), ('\\u{1c24}', '\\u{1c2b}'), ('\\u{1c2c}', '\\u{1c33}'), ('\\u{1c34}',\n         '\\u{1c35}'), ('\\u{1c36}', '\\u{1c37}'), ('\\u{1c3b}', '\\u{1c3f}'), ('\\u{1c40}', '\\u{1c49}'),\n         ('\\u{1c4d}', '\\u{1c4f}')\n     ];\n \n-    pub static Limbu_table: &'static [(char, char)] = &[\n+    pub const Limbu_table: &'static [(char, char)] = &[\n         ('\\u{1900}', '\\u{191e}'), ('\\u{1920}', '\\u{1922}'), ('\\u{1923}', '\\u{1926}'), ('\\u{1927}',\n         '\\u{1928}'), ('\\u{1929}', '\\u{192b}'), ('\\u{1930}', '\\u{1931}'), ('\\u{1932}', '\\u{1932}'),\n         ('\\u{1933}', '\\u{1938}'), ('\\u{1939}', '\\u{193b}'), ('\\u{1940}', '\\u{1940}'), ('\\u{1944}',\n         '\\u{1945}'), ('\\u{1946}', '\\u{194f}')\n     ];\n \n-    pub static Linear_A_table: &'static [(char, char)] = &[\n+    pub const Linear_A_table: &'static [(char, char)] = &[\n         ('\\u{10600}', '\\u{10736}'), ('\\u{10740}', '\\u{10755}'), ('\\u{10760}', '\\u{10767}')\n     ];\n \n-    pub static Linear_B_table: &'static [(char, char)] = &[\n+    pub const Linear_B_table: &'static [(char, char)] = &[\n         ('\\u{10000}', '\\u{1000b}'), ('\\u{1000d}', '\\u{10026}'), ('\\u{10028}', '\\u{1003a}'),\n         ('\\u{1003c}', '\\u{1003d}'), ('\\u{1003f}', '\\u{1004d}'), ('\\u{10050}', '\\u{1005d}'),\n         ('\\u{10080}', '\\u{100fa}')\n     ];\n \n-    pub static Lisu_table: &'static [(char, char)] = &[\n+    pub const Lisu_table: &'static [(char, char)] = &[\n         ('\\u{a4d0}', '\\u{a4f7}'), ('\\u{a4f8}', '\\u{a4fd}'), ('\\u{a4fe}', '\\u{a4ff}')\n     ];\n \n-    pub static Lycian_table: &'static [(char, char)] = &[\n+    pub const Lycian_table: &'static [(char, char)] = &[\n         ('\\u{10280}', '\\u{1029c}')\n     ];\n \n-    pub static Lydian_table: &'static [(char, char)] = &[\n+    pub const Lydian_table: &'static [(char, char)] = &[\n         ('\\u{10920}', '\\u{10939}'), ('\\u{1093f}', '\\u{1093f}')\n     ];\n \n-    pub static Mahajani_table: &'static [(char, char)] = &[\n+    pub const Mahajani_table: &'static [(char, char)] = &[\n         ('\\u{11150}', '\\u{11172}'), ('\\u{11173}', '\\u{11173}'), ('\\u{11174}', '\\u{11175}'),\n         ('\\u{11176}', '\\u{11176}')\n     ];\n \n-    pub static Malayalam_table: &'static [(char, char)] = &[\n+    pub const Malayalam_table: &'static [(char, char)] = &[\n         ('\\u{d01}', '\\u{d01}'), ('\\u{d02}', '\\u{d03}'), ('\\u{d05}', '\\u{d0c}'), ('\\u{d0e}',\n         '\\u{d10}'), ('\\u{d12}', '\\u{d3a}'), ('\\u{d3d}', '\\u{d3d}'), ('\\u{d3e}', '\\u{d40}'),\n         ('\\u{d41}', '\\u{d44}'), ('\\u{d46}', '\\u{d48}'), ('\\u{d4a}', '\\u{d4c}'), ('\\u{d4d}',\n@@ -3586,16 +3586,16 @@ pub mod script {\n         '\\u{d79}'), ('\\u{d7a}', '\\u{d7f}')\n     ];\n \n-    pub static Mandaic_table: &'static [(char, char)] = &[\n+    pub const Mandaic_table: &'static [(char, char)] = &[\n         ('\\u{840}', '\\u{858}'), ('\\u{859}', '\\u{85b}'), ('\\u{85e}', '\\u{85e}')\n     ];\n \n-    pub static Manichaean_table: &'static [(char, char)] = &[\n+    pub const Manichaean_table: &'static [(char, char)] = &[\n         ('\\u{10ac0}', '\\u{10ac7}'), ('\\u{10ac8}', '\\u{10ac8}'), ('\\u{10ac9}', '\\u{10ae4}'),\n         ('\\u{10ae5}', '\\u{10ae6}'), ('\\u{10aeb}', '\\u{10aef}'), ('\\u{10af0}', '\\u{10af6}')\n     ];\n \n-    pub static Meetei_Mayek_table: &'static [(char, char)] = &[\n+    pub const Meetei_Mayek_table: &'static [(char, char)] = &[\n         ('\\u{aae0}', '\\u{aaea}'), ('\\u{aaeb}', '\\u{aaeb}'), ('\\u{aaec}', '\\u{aaed}'), ('\\u{aaee}',\n         '\\u{aaef}'), ('\\u{aaf0}', '\\u{aaf1}'), ('\\u{aaf2}', '\\u{aaf2}'), ('\\u{aaf3}', '\\u{aaf4}'),\n         ('\\u{aaf5}', '\\u{aaf5}'), ('\\u{aaf6}', '\\u{aaf6}'), ('\\u{abc0}', '\\u{abe2}'), ('\\u{abe3}',\n@@ -3604,42 +3604,42 @@ pub mod script {\n         '\\u{abed}'), ('\\u{abf0}', '\\u{abf9}')\n     ];\n \n-    pub static Mende_Kikakui_table: &'static [(char, char)] = &[\n+    pub const Mende_Kikakui_table: &'static [(char, char)] = &[\n         ('\\u{1e800}', '\\u{1e8c4}'), ('\\u{1e8c7}', '\\u{1e8cf}'), ('\\u{1e8d0}', '\\u{1e8d6}')\n     ];\n \n-    pub static Meroitic_Cursive_table: &'static [(char, char)] = &[\n+    pub const Meroitic_Cursive_table: &'static [(char, char)] = &[\n         ('\\u{109a0}', '\\u{109b7}'), ('\\u{109be}', '\\u{109bf}')\n     ];\n \n-    pub static Meroitic_Hieroglyphs_table: &'static [(char, char)] = &[\n+    pub const Meroitic_Hieroglyphs_table: &'static [(char, char)] = &[\n         ('\\u{10980}', '\\u{1099f}')\n     ];\n \n-    pub static Miao_table: &'static [(char, char)] = &[\n+    pub const Miao_table: &'static [(char, char)] = &[\n         ('\\u{16f00}', '\\u{16f44}'), ('\\u{16f50}', '\\u{16f50}'), ('\\u{16f51}', '\\u{16f7e}'),\n         ('\\u{16f8f}', '\\u{16f92}'), ('\\u{16f93}', '\\u{16f9f}')\n     ];\n \n-    pub static Modi_table: &'static [(char, char)] = &[\n+    pub const Modi_table: &'static [(char, char)] = &[\n         ('\\u{11600}', '\\u{1162f}'), ('\\u{11630}', '\\u{11632}'), ('\\u{11633}', '\\u{1163a}'),\n         ('\\u{1163b}', '\\u{1163c}'), ('\\u{1163d}', '\\u{1163d}'), ('\\u{1163e}', '\\u{1163e}'),\n         ('\\u{1163f}', '\\u{11640}'), ('\\u{11641}', '\\u{11643}'), ('\\u{11644}', '\\u{11644}'),\n         ('\\u{11650}', '\\u{11659}')\n     ];\n \n-    pub static Mongolian_table: &'static [(char, char)] = &[\n+    pub const Mongolian_table: &'static [(char, char)] = &[\n         ('\\u{1800}', '\\u{1801}'), ('\\u{1804}', '\\u{1804}'), ('\\u{1806}', '\\u{1806}'), ('\\u{1807}',\n         '\\u{180a}'), ('\\u{180b}', '\\u{180d}'), ('\\u{180e}', '\\u{180e}'), ('\\u{1810}', '\\u{1819}'),\n         ('\\u{1820}', '\\u{1842}'), ('\\u{1843}', '\\u{1843}'), ('\\u{1844}', '\\u{1877}'), ('\\u{1880}',\n         '\\u{18a8}'), ('\\u{18a9}', '\\u{18a9}'), ('\\u{18aa}', '\\u{18aa}')\n     ];\n \n-    pub static Mro_table: &'static [(char, char)] = &[\n+    pub const Mro_table: &'static [(char, char)] = &[\n         ('\\u{16a40}', '\\u{16a5e}'), ('\\u{16a60}', '\\u{16a69}'), ('\\u{16a6e}', '\\u{16a6f}')\n     ];\n \n-    pub static Myanmar_table: &'static [(char, char)] = &[\n+    pub const Myanmar_table: &'static [(char, char)] = &[\n         ('\\u{1000}', '\\u{102a}'), ('\\u{102b}', '\\u{102c}'), ('\\u{102d}', '\\u{1030}'), ('\\u{1031}',\n         '\\u{1031}'), ('\\u{1032}', '\\u{1037}'), ('\\u{1038}', '\\u{1038}'), ('\\u{1039}', '\\u{103a}'),\n         ('\\u{103b}', '\\u{103c}'), ('\\u{103d}', '\\u{103e}'), ('\\u{103f}', '\\u{103f}'), ('\\u{1040}',\n@@ -3657,56 +3657,56 @@ pub mod script {\n         ('\\u{aa7e}', '\\u{aa7f}')\n     ];\n \n-    pub static Nabataean_table: &'static [(char, char)] = &[\n+    pub const Nabataean_table: &'static [(char, char)] = &[\n         ('\\u{10880}', '\\u{1089e}'), ('\\u{108a7}', '\\u{108af}')\n     ];\n \n-    pub static New_Tai_Lue_table: &'static [(char, char)] = &[\n+    pub const New_Tai_Lue_table: &'static [(char, char)] = &[\n         ('\\u{1980}', '\\u{19ab}'), ('\\u{19b0}', '\\u{19c0}'), ('\\u{19c1}', '\\u{19c7}'), ('\\u{19c8}',\n         '\\u{19c9}'), ('\\u{19d0}', '\\u{19d9}'), ('\\u{19da}', '\\u{19da}'), ('\\u{19de}', '\\u{19df}')\n     ];\n \n-    pub static Nko_table: &'static [(char, char)] = &[\n+    pub const Nko_table: &'static [(char, char)] = &[\n         ('\\u{7c0}', '\\u{7c9}'), ('\\u{7ca}', '\\u{7ea}'), ('\\u{7eb}', '\\u{7f3}'), ('\\u{7f4}',\n         '\\u{7f5}'), ('\\u{7f6}', '\\u{7f6}'), ('\\u{7f7}', '\\u{7f9}'), ('\\u{7fa}', '\\u{7fa}')\n     ];\n \n-    pub static Ogham_table: &'static [(char, char)] = &[\n+    pub const Ogham_table: &'static [(char, char)] = &[\n         ('\\u{1680}', '\\u{1680}'), ('\\u{1681}', '\\u{169a}'), ('\\u{169b}', '\\u{169b}'), ('\\u{169c}',\n         '\\u{169c}')\n     ];\n \n-    pub static Ol_Chiki_table: &'static [(char, char)] = &[\n+    pub const Ol_Chiki_table: &'static [(char, char)] = &[\n         ('\\u{1c50}', '\\u{1c59}'), ('\\u{1c5a}', '\\u{1c77}'), ('\\u{1c78}', '\\u{1c7d}'), ('\\u{1c7e}',\n         '\\u{1c7f}')\n     ];\n \n-    pub static Old_Italic_table: &'static [(char, char)] = &[\n+    pub const Old_Italic_table: &'static [(char, char)] = &[\n         ('\\u{10300}', '\\u{1031f}'), ('\\u{10320}', '\\u{10323}')\n     ];\n \n-    pub static Old_North_Arabian_table: &'static [(char, char)] = &[\n+    pub const Old_North_Arabian_table: &'static [(char, char)] = &[\n         ('\\u{10a80}', '\\u{10a9c}'), ('\\u{10a9d}', '\\u{10a9f}')\n     ];\n \n-    pub static Old_Permic_table: &'static [(char, char)] = &[\n+    pub const Old_Permic_table: &'static [(char, char)] = &[\n         ('\\u{10350}', '\\u{10375}'), ('\\u{10376}', '\\u{1037a}')\n     ];\n \n-    pub static Old_Persian_table: &'static [(char, char)] = &[\n+    pub const Old_Persian_table: &'static [(char, char)] = &[\n         ('\\u{103a0}', '\\u{103c3}'), ('\\u{103c8}', '\\u{103cf}'), ('\\u{103d0}', '\\u{103d0}'),\n         ('\\u{103d1}', '\\u{103d5}')\n     ];\n \n-    pub static Old_South_Arabian_table: &'static [(char, char)] = &[\n+    pub const Old_South_Arabian_table: &'static [(char, char)] = &[\n         ('\\u{10a60}', '\\u{10a7c}'), ('\\u{10a7d}', '\\u{10a7e}'), ('\\u{10a7f}', '\\u{10a7f}')\n     ];\n \n-    pub static Old_Turkic_table: &'static [(char, char)] = &[\n+    pub const Old_Turkic_table: &'static [(char, char)] = &[\n         ('\\u{10c00}', '\\u{10c48}')\n     ];\n \n-    pub static Oriya_table: &'static [(char, char)] = &[\n+    pub const Oriya_table: &'static [(char, char)] = &[\n         ('\\u{b01}', '\\u{b01}'), ('\\u{b02}', '\\u{b03}'), ('\\u{b05}', '\\u{b0c}'), ('\\u{b0f}',\n         '\\u{b10}'), ('\\u{b13}', '\\u{b28}'), ('\\u{b2a}', '\\u{b30}'), ('\\u{b32}', '\\u{b33}'),\n         ('\\u{b35}', '\\u{b39}'), ('\\u{b3c}', '\\u{b3c}'), ('\\u{b3d}', '\\u{b3d}'), ('\\u{b3e}',\n@@ -3717,118 +3717,118 @@ pub mod script {\n         '\\u{b71}'), ('\\u{b72}', '\\u{b77}')\n     ];\n \n-    pub static Osmanya_table: &'static [(char, char)] = &[\n+    pub const Osmanya_table: &'static [(char, char)] = &[\n         ('\\u{10480}', '\\u{1049d}'), ('\\u{104a0}', '\\u{104a9}')\n     ];\n \n-    pub static Pahawh_Hmong_table: &'static [(char, char)] = &[\n+    pub const Pahawh_Hmong_table: &'static [(char, char)] = &[\n         ('\\u{16b00}', '\\u{16b2f}'), ('\\u{16b30}', '\\u{16b36}'), ('\\u{16b37}', '\\u{16b3b}'),\n         ('\\u{16b3c}', '\\u{16b3f}'), ('\\u{16b40}', '\\u{16b43}'), ('\\u{16b44}', '\\u{16b44}'),\n         ('\\u{16b45}', '\\u{16b45}'), ('\\u{16b50}', '\\u{16b59}'), ('\\u{16b5b}', '\\u{16b61}'),\n         ('\\u{16b63}', '\\u{16b77}'), ('\\u{16b7d}', '\\u{16b8f}')\n     ];\n \n-    pub static Palmyrene_table: &'static [(char, char)] = &[\n+    pub const Palmyrene_table: &'static [(char, char)] = &[\n         ('\\u{10860}', '\\u{10876}'), ('\\u{10877}', '\\u{10878}'), ('\\u{10879}', '\\u{1087f}')\n     ];\n \n-    pub static Pau_Cin_Hau_table: &'static [(char, char)] = &[\n+    pub const Pau_Cin_Hau_table: &'static [(char, char)] = &[\n         ('\\u{11ac0}', '\\u{11af8}')\n     ];\n \n-    pub static Phags_Pa_table: &'static [(char, char)] = &[\n+    pub const Phags_Pa_table: &'static [(char, char)] = &[\n         ('\\u{a840}', '\\u{a873}'), ('\\u{a874}', '\\u{a877}')\n     ];\n \n-    pub static Phoenician_table: &'static [(char, char)] = &[\n+    pub const Phoenician_table: &'static [(char, char)] = &[\n         ('\\u{10900}', '\\u{10915}'), ('\\u{10916}', '\\u{1091b}'), ('\\u{1091f}', '\\u{1091f}')\n     ];\n \n-    pub static Psalter_Pahlavi_table: &'static [(char, char)] = &[\n+    pub const Psalter_Pahlavi_table: &'static [(char, char)] = &[\n         ('\\u{10b80}', '\\u{10b91}'), ('\\u{10b99}', '\\u{10b9c}'), ('\\u{10ba9}', '\\u{10baf}')\n     ];\n \n-    pub static Rejang_table: &'static [(char, char)] = &[\n+    pub const Rejang_table: &'static [(char, char)] = &[\n         ('\\u{a930}', '\\u{a946}'), ('\\u{a947}', '\\u{a951}'), ('\\u{a952}', '\\u{a953}'), ('\\u{a95f}',\n         '\\u{a95f}')\n     ];\n \n-    pub static Runic_table: &'static [(char, char)] = &[\n+    pub const Runic_table: &'static [(char, char)] = &[\n         ('\\u{16a0}', '\\u{16ea}'), ('\\u{16ee}', '\\u{16f0}'), ('\\u{16f1}', '\\u{16f8}')\n     ];\n \n-    pub static Samaritan_table: &'static [(char, char)] = &[\n+    pub const Samaritan_table: &'static [(char, char)] = &[\n         ('\\u{800}', '\\u{815}'), ('\\u{816}', '\\u{819}'), ('\\u{81a}', '\\u{81a}'), ('\\u{81b}',\n         '\\u{823}'), ('\\u{824}', '\\u{824}'), ('\\u{825}', '\\u{827}'), ('\\u{828}', '\\u{828}'),\n         ('\\u{829}', '\\u{82d}'), ('\\u{830}', '\\u{83e}')\n     ];\n \n-    pub static Saurashtra_table: &'static [(char, char)] = &[\n+    pub const Saurashtra_table: &'static [(char, char)] = &[\n         ('\\u{a880}', '\\u{a881}'), ('\\u{a882}', '\\u{a8b3}'), ('\\u{a8b4}', '\\u{a8c3}'), ('\\u{a8c4}',\n         '\\u{a8c4}'), ('\\u{a8ce}', '\\u{a8cf}'), ('\\u{a8d0}', '\\u{a8d9}')\n     ];\n \n-    pub static Sharada_table: &'static [(char, char)] = &[\n+    pub const Sharada_table: &'static [(char, char)] = &[\n         ('\\u{11180}', '\\u{11181}'), ('\\u{11182}', '\\u{11182}'), ('\\u{11183}', '\\u{111b2}'),\n         ('\\u{111b3}', '\\u{111b5}'), ('\\u{111b6}', '\\u{111be}'), ('\\u{111bf}', '\\u{111c0}'),\n         ('\\u{111c1}', '\\u{111c4}'), ('\\u{111c5}', '\\u{111c8}'), ('\\u{111cd}', '\\u{111cd}'),\n         ('\\u{111d0}', '\\u{111d9}'), ('\\u{111da}', '\\u{111da}')\n     ];\n \n-    pub static Shavian_table: &'static [(char, char)] = &[\n+    pub const Shavian_table: &'static [(char, char)] = &[\n         ('\\u{10450}', '\\u{1047f}')\n     ];\n \n-    pub static Siddham_table: &'static [(char, char)] = &[\n+    pub const Siddham_table: &'static [(char, char)] = &[\n         ('\\u{11580}', '\\u{115ae}'), ('\\u{115af}', '\\u{115b1}'), ('\\u{115b2}', '\\u{115b5}'),\n         ('\\u{115b8}', '\\u{115bb}'), ('\\u{115bc}', '\\u{115bd}'), ('\\u{115be}', '\\u{115be}'),\n         ('\\u{115bf}', '\\u{115c0}'), ('\\u{115c1}', '\\u{115c9}')\n     ];\n \n-    pub static Sinhala_table: &'static [(char, char)] = &[\n+    pub const Sinhala_table: &'static [(char, char)] = &[\n         ('\\u{d82}', '\\u{d83}'), ('\\u{d85}', '\\u{d96}'), ('\\u{d9a}', '\\u{db1}'), ('\\u{db3}',\n         '\\u{dbb}'), ('\\u{dbd}', '\\u{dbd}'), ('\\u{dc0}', '\\u{dc6}'), ('\\u{dca}', '\\u{dca}'),\n         ('\\u{dcf}', '\\u{dd1}'), ('\\u{dd2}', '\\u{dd4}'), ('\\u{dd6}', '\\u{dd6}'), ('\\u{dd8}',\n         '\\u{ddf}'), ('\\u{de6}', '\\u{def}'), ('\\u{df2}', '\\u{df3}'), ('\\u{df4}', '\\u{df4}'),\n         ('\\u{111e1}', '\\u{111f4}')\n     ];\n \n-    pub static Sora_Sompeng_table: &'static [(char, char)] = &[\n+    pub const Sora_Sompeng_table: &'static [(char, char)] = &[\n         ('\\u{110d0}', '\\u{110e8}'), ('\\u{110f0}', '\\u{110f9}')\n     ];\n \n-    pub static Sundanese_table: &'static [(char, char)] = &[\n+    pub const Sundanese_table: &'static [(char, char)] = &[\n         ('\\u{1b80}', '\\u{1b81}'), ('\\u{1b82}', '\\u{1b82}'), ('\\u{1b83}', '\\u{1ba0}'), ('\\u{1ba1}',\n         '\\u{1ba1}'), ('\\u{1ba2}', '\\u{1ba5}'), ('\\u{1ba6}', '\\u{1ba7}'), ('\\u{1ba8}', '\\u{1ba9}'),\n         ('\\u{1baa}', '\\u{1baa}'), ('\\u{1bab}', '\\u{1bad}'), ('\\u{1bae}', '\\u{1baf}'), ('\\u{1bb0}',\n         '\\u{1bb9}'), ('\\u{1bba}', '\\u{1bbf}'), ('\\u{1cc0}', '\\u{1cc7}')\n     ];\n \n-    pub static Syloti_Nagri_table: &'static [(char, char)] = &[\n+    pub const Syloti_Nagri_table: &'static [(char, char)] = &[\n         ('\\u{a800}', '\\u{a801}'), ('\\u{a802}', '\\u{a802}'), ('\\u{a803}', '\\u{a805}'), ('\\u{a806}',\n         '\\u{a806}'), ('\\u{a807}', '\\u{a80a}'), ('\\u{a80b}', '\\u{a80b}'), ('\\u{a80c}', '\\u{a822}'),\n         ('\\u{a823}', '\\u{a824}'), ('\\u{a825}', '\\u{a826}'), ('\\u{a827}', '\\u{a827}'), ('\\u{a828}',\n         '\\u{a82b}')\n     ];\n \n-    pub static Syriac_table: &'static [(char, char)] = &[\n+    pub const Syriac_table: &'static [(char, char)] = &[\n         ('\\u{700}', '\\u{70d}'), ('\\u{70f}', '\\u{70f}'), ('\\u{710}', '\\u{710}'), ('\\u{711}',\n         '\\u{711}'), ('\\u{712}', '\\u{72f}'), ('\\u{730}', '\\u{74a}'), ('\\u{74d}', '\\u{74f}')\n     ];\n \n-    pub static Tagalog_table: &'static [(char, char)] = &[\n+    pub const Tagalog_table: &'static [(char, char)] = &[\n         ('\\u{1700}', '\\u{170c}'), ('\\u{170e}', '\\u{1711}'), ('\\u{1712}', '\\u{1714}')\n     ];\n \n-    pub static Tagbanwa_table: &'static [(char, char)] = &[\n+    pub const Tagbanwa_table: &'static [(char, char)] = &[\n         ('\\u{1760}', '\\u{176c}'), ('\\u{176e}', '\\u{1770}'), ('\\u{1772}', '\\u{1773}')\n     ];\n \n-    pub static Tai_Le_table: &'static [(char, char)] = &[\n+    pub const Tai_Le_table: &'static [(char, char)] = &[\n         ('\\u{1950}', '\\u{196d}'), ('\\u{1970}', '\\u{1974}')\n     ];\n \n-    pub static Tai_Tham_table: &'static [(char, char)] = &[\n+    pub const Tai_Tham_table: &'static [(char, char)] = &[\n         ('\\u{1a20}', '\\u{1a54}'), ('\\u{1a55}', '\\u{1a55}'), ('\\u{1a56}', '\\u{1a56}'), ('\\u{1a57}',\n         '\\u{1a57}'), ('\\u{1a58}', '\\u{1a5e}'), ('\\u{1a60}', '\\u{1a60}'), ('\\u{1a61}', '\\u{1a61}'),\n         ('\\u{1a62}', '\\u{1a62}'), ('\\u{1a63}', '\\u{1a64}'), ('\\u{1a65}', '\\u{1a6c}'), ('\\u{1a6d}',\n@@ -3837,20 +3837,20 @@ pub mod script {\n         '\\u{1aad}')\n     ];\n \n-    pub static Tai_Viet_table: &'static [(char, char)] = &[\n+    pub const Tai_Viet_table: &'static [(char, char)] = &[\n         ('\\u{aa80}', '\\u{aaaf}'), ('\\u{aab0}', '\\u{aab0}'), ('\\u{aab1}', '\\u{aab1}'), ('\\u{aab2}',\n         '\\u{aab4}'), ('\\u{aab5}', '\\u{aab6}'), ('\\u{aab7}', '\\u{aab8}'), ('\\u{aab9}', '\\u{aabd}'),\n         ('\\u{aabe}', '\\u{aabf}'), ('\\u{aac0}', '\\u{aac0}'), ('\\u{aac1}', '\\u{aac1}'), ('\\u{aac2}',\n         '\\u{aac2}'), ('\\u{aadb}', '\\u{aadc}'), ('\\u{aadd}', '\\u{aadd}'), ('\\u{aade}', '\\u{aadf}')\n     ];\n \n-    pub static Takri_table: &'static [(char, char)] = &[\n+    pub const Takri_table: &'static [(char, char)] = &[\n         ('\\u{11680}', '\\u{116aa}'), ('\\u{116ab}', '\\u{116ab}'), ('\\u{116ac}', '\\u{116ac}'),\n         ('\\u{116ad}', '\\u{116ad}'), ('\\u{116ae}', '\\u{116af}'), ('\\u{116b0}', '\\u{116b5}'),\n         ('\\u{116b6}', '\\u{116b6}'), ('\\u{116b7}', '\\u{116b7}'), ('\\u{116c0}', '\\u{116c9}')\n     ];\n \n-    pub static Tamil_table: &'static [(char, char)] = &[\n+    pub const Tamil_table: &'static [(char, char)] = &[\n         ('\\u{b82}', '\\u{b82}'), ('\\u{b83}', '\\u{b83}'), ('\\u{b85}', '\\u{b8a}'), ('\\u{b8e}',\n         '\\u{b90}'), ('\\u{b92}', '\\u{b95}'), ('\\u{b99}', '\\u{b9a}'), ('\\u{b9c}', '\\u{b9c}'),\n         ('\\u{b9e}', '\\u{b9f}'), ('\\u{ba3}', '\\u{ba4}'), ('\\u{ba8}', '\\u{baa}'), ('\\u{bae}',\n@@ -3860,7 +3860,7 @@ pub mod script {\n         ('\\u{bf3}', '\\u{bf8}'), ('\\u{bf9}', '\\u{bf9}'), ('\\u{bfa}', '\\u{bfa}')\n     ];\n \n-    pub static Telugu_table: &'static [(char, char)] = &[\n+    pub const Telugu_table: &'static [(char, char)] = &[\n         ('\\u{c00}', '\\u{c00}'), ('\\u{c01}', '\\u{c03}'), ('\\u{c05}', '\\u{c0c}'), ('\\u{c0e}',\n         '\\u{c10}'), ('\\u{c12}', '\\u{c28}'), ('\\u{c2a}', '\\u{c39}'), ('\\u{c3d}', '\\u{c3d}'),\n         ('\\u{c3e}', '\\u{c40}'), ('\\u{c41}', '\\u{c44}'), ('\\u{c46}', '\\u{c48}'), ('\\u{c4a}',\n@@ -3869,17 +3869,17 @@ pub mod script {\n         '\\u{c7f}')\n     ];\n \n-    pub static Thaana_table: &'static [(char, char)] = &[\n+    pub const Thaana_table: &'static [(char, char)] = &[\n         ('\\u{780}', '\\u{7a5}'), ('\\u{7a6}', '\\u{7b0}'), ('\\u{7b1}', '\\u{7b1}')\n     ];\n \n-    pub static Thai_table: &'static [(char, char)] = &[\n+    pub const Thai_table: &'static [(char, char)] = &[\n         ('\\u{e01}', '\\u{e30}'), ('\\u{e31}', '\\u{e31}'), ('\\u{e32}', '\\u{e33}'), ('\\u{e34}',\n         '\\u{e3a}'), ('\\u{e40}', '\\u{e45}'), ('\\u{e46}', '\\u{e46}'), ('\\u{e47}', '\\u{e4e}'),\n         ('\\u{e4f}', '\\u{e4f}'), ('\\u{e50}', '\\u{e59}'), ('\\u{e5a}', '\\u{e5b}')\n     ];\n \n-    pub static Tibetan_table: &'static [(char, char)] = &[\n+    pub const Tibetan_table: &'static [(char, char)] = &[\n         ('\\u{f00}', '\\u{f00}'), ('\\u{f01}', '\\u{f03}'), ('\\u{f04}', '\\u{f12}'), ('\\u{f13}',\n         '\\u{f13}'), ('\\u{f14}', '\\u{f14}'), ('\\u{f15}', '\\u{f17}'), ('\\u{f18}', '\\u{f19}'),\n         ('\\u{f1a}', '\\u{f1f}'), ('\\u{f20}', '\\u{f29}'), ('\\u{f2a}', '\\u{f33}'), ('\\u{f34}',\n@@ -3893,46 +3893,46 @@ pub mod script {\n         ('\\u{fd0}', '\\u{fd4}'), ('\\u{fd9}', '\\u{fda}')\n     ];\n \n-    pub static Tifinagh_table: &'static [(char, char)] = &[\n+    pub const Tifinagh_table: &'static [(char, char)] = &[\n         ('\\u{2d30}', '\\u{2d67}'), ('\\u{2d6f}', '\\u{2d6f}'), ('\\u{2d70}', '\\u{2d70}'), ('\\u{2d7f}',\n         '\\u{2d7f}')\n     ];\n \n-    pub static Tirhuta_table: &'static [(char, char)] = &[\n+    pub const Tirhuta_table: &'static [(char, char)] = &[\n         ('\\u{11480}', '\\u{114af}'), ('\\u{114b0}', '\\u{114b2}'), ('\\u{114b3}', '\\u{114b8}'),\n         ('\\u{114b9}', '\\u{114b9}'), ('\\u{114ba}', '\\u{114ba}'), ('\\u{114bb}', '\\u{114be}'),\n         ('\\u{114bf}', '\\u{114c0}'), ('\\u{114c1}', '\\u{114c1}'), ('\\u{114c2}', '\\u{114c3}'),\n         ('\\u{114c4}', '\\u{114c5}'), ('\\u{114c6}', '\\u{114c6}'), ('\\u{114c7}', '\\u{114c7}'),\n         ('\\u{114d0}', '\\u{114d9}')\n     ];\n \n-    pub static Ugaritic_table: &'static [(char, char)] = &[\n+    pub const Ugaritic_table: &'static [(char, char)] = &[\n         ('\\u{10380}', '\\u{1039d}'), ('\\u{1039f}', '\\u{1039f}')\n     ];\n \n-    pub static Vai_table: &'static [(char, char)] = &[\n+    pub const Vai_table: &'static [(char, char)] = &[\n         ('\\u{a500}', '\\u{a60b}'), ('\\u{a60c}', '\\u{a60c}'), ('\\u{a60d}', '\\u{a60f}'), ('\\u{a610}',\n         '\\u{a61f}'), ('\\u{a620}', '\\u{a629}'), ('\\u{a62a}', '\\u{a62b}')\n     ];\n \n-    pub static Warang_Citi_table: &'static [(char, char)] = &[\n+    pub const Warang_Citi_table: &'static [(char, char)] = &[\n         ('\\u{118a0}', '\\u{118df}'), ('\\u{118e0}', '\\u{118e9}'), ('\\u{118ea}', '\\u{118f2}'),\n         ('\\u{118ff}', '\\u{118ff}')\n     ];\n \n-    pub static Yi_table: &'static [(char, char)] = &[\n+    pub const Yi_table: &'static [(char, char)] = &[\n         ('\\u{a000}', '\\u{a014}'), ('\\u{a015}', '\\u{a015}'), ('\\u{a016}', '\\u{a48c}'), ('\\u{a490}',\n         '\\u{a4c6}')\n     ];\n \n }\n \n pub mod property {\n-    pub static Join_Control_table: &'static [(char, char)] = &[\n+    pub const Join_Control_table: &'static [(char, char)] = &[\n         ('\\u{200c}', '\\u{200d}')\n     ];\n \n-    pub static Noncharacter_Code_Point_table: &'static [(char, char)] = &[\n+    pub const Noncharacter_Code_Point_table: &'static [(char, char)] = &[\n         ('\\u{fdd0}', '\\u{fdef}'), ('\\u{fffe}', '\\u{ffff}'), ('\\u{1fffe}', '\\u{1ffff}'),\n         ('\\u{2fffe}', '\\u{2ffff}'), ('\\u{3fffe}', '\\u{3ffff}'), ('\\u{4fffe}', '\\u{4ffff}'),\n         ('\\u{5fffe}', '\\u{5ffff}'), ('\\u{6fffe}', '\\u{6ffff}'), ('\\u{7fffe}', '\\u{7ffff}'),\n@@ -3941,7 +3941,7 @@ pub mod property {\n         ('\\u{efffe}', '\\u{effff}'), ('\\u{ffffe}', '\\u{fffff}')\n     ];\n \n-    pub static White_Space_table: &'static [(char, char)] = &[\n+    pub const White_Space_table: &'static [(char, char)] = &[\n         ('\\u{9}', '\\u{d}'), ('\\u{20}', '\\u{20}'), ('\\u{85}', '\\u{85}'), ('\\u{a0}', '\\u{a0}'),\n         ('\\u{1680}', '\\u{1680}'), ('\\u{2000}', '\\u{200a}'), ('\\u{2028}', '\\u{2028}'), ('\\u{2029}',\n         '\\u{2029}'), ('\\u{202f}', '\\u{202f}'), ('\\u{205f}', '\\u{205f}'), ('\\u{3000}', '\\u{3000}')\n@@ -3954,111 +3954,110 @@ pub mod property {\n }\n \n pub mod regex {\n-    pub static UNICODE_CLASSES: &'static [(&'static str, &'static &'static [(char, char)])] = &[\n-        (\"Alphabetic\", &super::derived_property::Alphabetic_table), (\"Arabic\",\n-        &super::script::Arabic_table), (\"Armenian\", &super::script::Armenian_table), (\"Avestan\",\n-        &super::script::Avestan_table), (\"Balinese\", &super::script::Balinese_table), (\"Bamum\",\n-        &super::script::Bamum_table), (\"Bassa_Vah\", &super::script::Bassa_Vah_table), (\"Batak\",\n-        &super::script::Batak_table), (\"Bengali\", &super::script::Bengali_table), (\"Bopomofo\",\n-        &super::script::Bopomofo_table), (\"Brahmi\", &super::script::Brahmi_table), (\"Braille\",\n-        &super::script::Braille_table), (\"Buginese\", &super::script::Buginese_table), (\"Buhid\",\n-        &super::script::Buhid_table), (\"C\", &super::general_category::C_table),\n-        (\"Canadian_Aboriginal\", &super::script::Canadian_Aboriginal_table), (\"Carian\",\n-        &super::script::Carian_table), (\"Caucasian_Albanian\",\n-        &super::script::Caucasian_Albanian_table), (\"Cc\", &super::general_category::Cc_table),\n-        (\"Cf\", &super::general_category::Cf_table), (\"Chakma\", &super::script::Chakma_table),\n-        (\"Cham\", &super::script::Cham_table), (\"Cherokee\", &super::script::Cherokee_table), (\"Cn\",\n-        &super::general_category::Cn_table), (\"Co\", &super::general_category::Co_table), (\"Common\",\n-        &super::script::Common_table), (\"Coptic\", &super::script::Coptic_table), (\"Cuneiform\",\n-        &super::script::Cuneiform_table), (\"Cypriot\", &super::script::Cypriot_table), (\"Cyrillic\",\n-        &super::script::Cyrillic_table), (\"Default_Ignorable_Code_Point\",\n-        &super::derived_property::Default_Ignorable_Code_Point_table), (\"Deseret\",\n-        &super::script::Deseret_table), (\"Devanagari\", &super::script::Devanagari_table),\n-        (\"Duployan\", &super::script::Duployan_table), (\"Egyptian_Hieroglyphs\",\n-        &super::script::Egyptian_Hieroglyphs_table), (\"Elbasan\", &super::script::Elbasan_table),\n-        (\"Ethiopic\", &super::script::Ethiopic_table), (\"Georgian\", &super::script::Georgian_table),\n-        (\"Glagolitic\", &super::script::Glagolitic_table), (\"Gothic\", &super::script::Gothic_table),\n-        (\"Grantha\", &super::script::Grantha_table), (\"Greek\", &super::script::Greek_table),\n-        (\"Gujarati\", &super::script::Gujarati_table), (\"Gurmukhi\", &super::script::Gurmukhi_table),\n-        (\"Han\", &super::script::Han_table), (\"Hangul\", &super::script::Hangul_table), (\"Hanunoo\",\n-        &super::script::Hanunoo_table), (\"Hebrew\", &super::script::Hebrew_table), (\"Hiragana\",\n-        &super::script::Hiragana_table), (\"Imperial_Aramaic\",\n-        &super::script::Imperial_Aramaic_table), (\"Inherited\", &super::script::Inherited_table),\n-        (\"Inscriptional_Pahlavi\", &super::script::Inscriptional_Pahlavi_table),\n-        (\"Inscriptional_Parthian\", &super::script::Inscriptional_Parthian_table), (\"Javanese\",\n-        &super::script::Javanese_table), (\"Join_Control\", &super::property::Join_Control_table),\n-        (\"Kaithi\", &super::script::Kaithi_table), (\"Kannada\", &super::script::Kannada_table),\n-        (\"Katakana\", &super::script::Katakana_table), (\"Kayah_Li\", &super::script::Kayah_Li_table),\n-        (\"Kharoshthi\", &super::script::Kharoshthi_table), (\"Khmer\", &super::script::Khmer_table),\n-        (\"Khojki\", &super::script::Khojki_table), (\"Khudawadi\", &super::script::Khudawadi_table),\n-        (\"L\", &super::general_category::L_table), (\"LC\", &super::general_category::LC_table),\n-        (\"Lao\", &super::script::Lao_table), (\"Latin\", &super::script::Latin_table), (\"Lepcha\",\n-        &super::script::Lepcha_table), (\"Limbu\", &super::script::Limbu_table), (\"Linear_A\",\n-        &super::script::Linear_A_table), (\"Linear_B\", &super::script::Linear_B_table), (\"Lisu\",\n-        &super::script::Lisu_table), (\"Ll\", &super::general_category::Ll_table), (\"Lm\",\n-        &super::general_category::Lm_table), (\"Lo\", &super::general_category::Lo_table),\n-        (\"Lowercase\", &super::derived_property::Lowercase_table), (\"Lt\",\n-        &super::general_category::Lt_table), (\"Lu\", &super::general_category::Lu_table), (\"Lycian\",\n-        &super::script::Lycian_table), (\"Lydian\", &super::script::Lydian_table), (\"M\",\n-        &super::general_category::M_table), (\"Mahajani\", &super::script::Mahajani_table),\n-        (\"Malayalam\", &super::script::Malayalam_table), (\"Mandaic\", &super::script::Mandaic_table),\n-        (\"Manichaean\", &super::script::Manichaean_table), (\"Mc\",\n-        &super::general_category::Mc_table), (\"Me\", &super::general_category::Me_table),\n-        (\"Meetei_Mayek\", &super::script::Meetei_Mayek_table), (\"Mende_Kikakui\",\n-        &super::script::Mende_Kikakui_table), (\"Meroitic_Cursive\",\n-        &super::script::Meroitic_Cursive_table), (\"Meroitic_Hieroglyphs\",\n-        &super::script::Meroitic_Hieroglyphs_table), (\"Miao\", &super::script::Miao_table), (\"Mn\",\n-        &super::general_category::Mn_table), (\"Modi\", &super::script::Modi_table), (\"Mongolian\",\n-        &super::script::Mongolian_table), (\"Mro\", &super::script::Mro_table), (\"Myanmar\",\n-        &super::script::Myanmar_table), (\"N\", &super::general_category::N_table), (\"Nabataean\",\n-        &super::script::Nabataean_table), (\"Nd\", &super::general_category::Nd_table),\n-        (\"New_Tai_Lue\", &super::script::New_Tai_Lue_table), (\"Nko\", &super::script::Nko_table),\n-        (\"Nl\", &super::general_category::Nl_table), (\"No\", &super::general_category::No_table),\n-        (\"Noncharacter_Code_Point\", &super::property::Noncharacter_Code_Point_table), (\"Ogham\",\n-        &super::script::Ogham_table), (\"Ol_Chiki\", &super::script::Ol_Chiki_table), (\"Old_Italic\",\n-        &super::script::Old_Italic_table), (\"Old_North_Arabian\",\n-        &super::script::Old_North_Arabian_table), (\"Old_Permic\", &super::script::Old_Permic_table),\n-        (\"Old_Persian\", &super::script::Old_Persian_table), (\"Old_South_Arabian\",\n-        &super::script::Old_South_Arabian_table), (\"Old_Turkic\", &super::script::Old_Turkic_table),\n-        (\"Oriya\", &super::script::Oriya_table), (\"Osmanya\", &super::script::Osmanya_table), (\"P\",\n-        &super::general_category::P_table), (\"Pahawh_Hmong\", &super::script::Pahawh_Hmong_table),\n-        (\"Palmyrene\", &super::script::Palmyrene_table), (\"Pau_Cin_Hau\",\n-        &super::script::Pau_Cin_Hau_table), (\"Pc\", &super::general_category::Pc_table), (\"Pd\",\n-        &super::general_category::Pd_table), (\"Pe\", &super::general_category::Pe_table), (\"Pf\",\n-        &super::general_category::Pf_table), (\"Phags_Pa\", &super::script::Phags_Pa_table),\n-        (\"Phoenician\", &super::script::Phoenician_table), (\"Pi\",\n-        &super::general_category::Pi_table), (\"Po\", &super::general_category::Po_table), (\"Ps\",\n-        &super::general_category::Ps_table), (\"Psalter_Pahlavi\",\n-        &super::script::Psalter_Pahlavi_table), (\"Rejang\", &super::script::Rejang_table), (\"Runic\",\n-        &super::script::Runic_table), (\"S\", &super::general_category::S_table), (\"Samaritan\",\n-        &super::script::Samaritan_table), (\"Saurashtra\", &super::script::Saurashtra_table), (\"Sc\",\n-        &super::general_category::Sc_table), (\"Sharada\", &super::script::Sharada_table), (\"Shavian\",\n-        &super::script::Shavian_table), (\"Siddham\", &super::script::Siddham_table), (\"Sinhala\",\n-        &super::script::Sinhala_table), (\"Sk\", &super::general_category::Sk_table), (\"Sm\",\n-        &super::general_category::Sm_table), (\"So\", &super::general_category::So_table),\n-        (\"Sora_Sompeng\", &super::script::Sora_Sompeng_table), (\"Sundanese\",\n-        &super::script::Sundanese_table), (\"Syloti_Nagri\", &super::script::Syloti_Nagri_table),\n-        (\"Syriac\", &super::script::Syriac_table), (\"Tagalog\", &super::script::Tagalog_table),\n-        (\"Tagbanwa\", &super::script::Tagbanwa_table), (\"Tai_Le\", &super::script::Tai_Le_table),\n-        (\"Tai_Tham\", &super::script::Tai_Tham_table), (\"Tai_Viet\", &super::script::Tai_Viet_table),\n-        (\"Takri\", &super::script::Takri_table), (\"Tamil\", &super::script::Tamil_table), (\"Telugu\",\n-        &super::script::Telugu_table), (\"Thaana\", &super::script::Thaana_table), (\"Thai\",\n-        &super::script::Thai_table), (\"Tibetan\", &super::script::Tibetan_table), (\"Tifinagh\",\n-        &super::script::Tifinagh_table), (\"Tirhuta\", &super::script::Tirhuta_table), (\"Ugaritic\",\n-        &super::script::Ugaritic_table), (\"Uppercase\", &super::derived_property::Uppercase_table),\n-        (\"Vai\", &super::script::Vai_table), (\"Warang_Citi\", &super::script::Warang_Citi_table),\n-        (\"White_Space\", &super::property::White_Space_table), (\"XID_Continue\",\n-        &super::derived_property::XID_Continue_table), (\"XID_Start\",\n-        &super::derived_property::XID_Start_table), (\"Yi\", &super::script::Yi_table), (\"Z\",\n-        &super::general_category::Z_table), (\"Zl\", &super::general_category::Zl_table), (\"Zp\",\n-        &super::general_category::Zp_table), (\"Zs\", &super::general_category::Zs_table)\n-    ];\n-\n-    pub static PERLD: &'static &'static [(char, char)] = &super::general_category::Nd_table;\n-\n-    pub static PERLS: &'static &'static [(char, char)] = &super::property::White_Space_table;\n-\n-    pub static PERLW: &'static [(char, char)] = &[\n+    pub const UNICODE_CLASSES: &'static [(&'static str, &'static [(char, char)])] = &[\n+        (\"Alphabetic\", super::derived_property::Alphabetic_table), (\"Arabic\",\n+        super::script::Arabic_table), (\"Armenian\", super::script::Armenian_table), (\"Avestan\",\n+        super::script::Avestan_table), (\"Balinese\", super::script::Balinese_table), (\"Bamum\",\n+        super::script::Bamum_table), (\"Bassa_Vah\", super::script::Bassa_Vah_table), (\"Batak\",\n+        super::script::Batak_table), (\"Bengali\", super::script::Bengali_table), (\"Bopomofo\",\n+        super::script::Bopomofo_table), (\"Brahmi\", super::script::Brahmi_table), (\"Braille\",\n+        super::script::Braille_table), (\"Buginese\", super::script::Buginese_table), (\"Buhid\",\n+        super::script::Buhid_table), (\"C\", super::general_category::C_table),\n+        (\"Canadian_Aboriginal\", super::script::Canadian_Aboriginal_table), (\"Carian\",\n+        super::script::Carian_table), (\"Caucasian_Albanian\",\n+        super::script::Caucasian_Albanian_table), (\"Cc\", super::general_category::Cc_table), (\"Cf\",\n+        super::general_category::Cf_table), (\"Chakma\", super::script::Chakma_table), (\"Cham\",\n+        super::script::Cham_table), (\"Cherokee\", super::script::Cherokee_table), (\"Cn\",\n+        super::general_category::Cn_table), (\"Co\", super::general_category::Co_table), (\"Common\",\n+        super::script::Common_table), (\"Coptic\", super::script::Coptic_table), (\"Cuneiform\",\n+        super::script::Cuneiform_table), (\"Cypriot\", super::script::Cypriot_table), (\"Cyrillic\",\n+        super::script::Cyrillic_table), (\"Default_Ignorable_Code_Point\",\n+        super::derived_property::Default_Ignorable_Code_Point_table), (\"Deseret\",\n+        super::script::Deseret_table), (\"Devanagari\", super::script::Devanagari_table), (\"Duployan\",\n+        super::script::Duployan_table), (\"Egyptian_Hieroglyphs\",\n+        super::script::Egyptian_Hieroglyphs_table), (\"Elbasan\", super::script::Elbasan_table),\n+        (\"Ethiopic\", super::script::Ethiopic_table), (\"Georgian\", super::script::Georgian_table),\n+        (\"Glagolitic\", super::script::Glagolitic_table), (\"Gothic\", super::script::Gothic_table),\n+        (\"Grantha\", super::script::Grantha_table), (\"Greek\", super::script::Greek_table),\n+        (\"Gujarati\", super::script::Gujarati_table), (\"Gurmukhi\", super::script::Gurmukhi_table),\n+        (\"Han\", super::script::Han_table), (\"Hangul\", super::script::Hangul_table), (\"Hanunoo\",\n+        super::script::Hanunoo_table), (\"Hebrew\", super::script::Hebrew_table), (\"Hiragana\",\n+        super::script::Hiragana_table), (\"Imperial_Aramaic\", super::script::Imperial_Aramaic_table),\n+        (\"Inherited\", super::script::Inherited_table), (\"Inscriptional_Pahlavi\",\n+        super::script::Inscriptional_Pahlavi_table), (\"Inscriptional_Parthian\",\n+        super::script::Inscriptional_Parthian_table), (\"Javanese\", super::script::Javanese_table),\n+        (\"Join_Control\", super::property::Join_Control_table), (\"Kaithi\",\n+        super::script::Kaithi_table), (\"Kannada\", super::script::Kannada_table), (\"Katakana\",\n+        super::script::Katakana_table), (\"Kayah_Li\", super::script::Kayah_Li_table), (\"Kharoshthi\",\n+        super::script::Kharoshthi_table), (\"Khmer\", super::script::Khmer_table), (\"Khojki\",\n+        super::script::Khojki_table), (\"Khudawadi\", super::script::Khudawadi_table), (\"L\",\n+        super::general_category::L_table), (\"LC\", super::general_category::LC_table), (\"Lao\",\n+        super::script::Lao_table), (\"Latin\", super::script::Latin_table), (\"Lepcha\",\n+        super::script::Lepcha_table), (\"Limbu\", super::script::Limbu_table), (\"Linear_A\",\n+        super::script::Linear_A_table), (\"Linear_B\", super::script::Linear_B_table), (\"Lisu\",\n+        super::script::Lisu_table), (\"Ll\", super::general_category::Ll_table), (\"Lm\",\n+        super::general_category::Lm_table), (\"Lo\", super::general_category::Lo_table), (\"Lowercase\",\n+        super::derived_property::Lowercase_table), (\"Lt\", super::general_category::Lt_table), (\"Lu\",\n+        super::general_category::Lu_table), (\"Lycian\", super::script::Lycian_table), (\"Lydian\",\n+        super::script::Lydian_table), (\"M\", super::general_category::M_table), (\"Mahajani\",\n+        super::script::Mahajani_table), (\"Malayalam\", super::script::Malayalam_table), (\"Mandaic\",\n+        super::script::Mandaic_table), (\"Manichaean\", super::script::Manichaean_table), (\"Mc\",\n+        super::general_category::Mc_table), (\"Me\", super::general_category::Me_table),\n+        (\"Meetei_Mayek\", super::script::Meetei_Mayek_table), (\"Mende_Kikakui\",\n+        super::script::Mende_Kikakui_table), (\"Meroitic_Cursive\",\n+        super::script::Meroitic_Cursive_table), (\"Meroitic_Hieroglyphs\",\n+        super::script::Meroitic_Hieroglyphs_table), (\"Miao\", super::script::Miao_table), (\"Mn\",\n+        super::general_category::Mn_table), (\"Modi\", super::script::Modi_table), (\"Mongolian\",\n+        super::script::Mongolian_table), (\"Mro\", super::script::Mro_table), (\"Myanmar\",\n+        super::script::Myanmar_table), (\"N\", super::general_category::N_table), (\"Nabataean\",\n+        super::script::Nabataean_table), (\"Nd\", super::general_category::Nd_table), (\"New_Tai_Lue\",\n+        super::script::New_Tai_Lue_table), (\"Nko\", super::script::Nko_table), (\"Nl\",\n+        super::general_category::Nl_table), (\"No\", super::general_category::No_table),\n+        (\"Noncharacter_Code_Point\", super::property::Noncharacter_Code_Point_table), (\"Ogham\",\n+        super::script::Ogham_table), (\"Ol_Chiki\", super::script::Ol_Chiki_table), (\"Old_Italic\",\n+        super::script::Old_Italic_table), (\"Old_North_Arabian\",\n+        super::script::Old_North_Arabian_table), (\"Old_Permic\", super::script::Old_Permic_table),\n+        (\"Old_Persian\", super::script::Old_Persian_table), (\"Old_South_Arabian\",\n+        super::script::Old_South_Arabian_table), (\"Old_Turkic\", super::script::Old_Turkic_table),\n+        (\"Oriya\", super::script::Oriya_table), (\"Osmanya\", super::script::Osmanya_table), (\"P\",\n+        super::general_category::P_table), (\"Pahawh_Hmong\", super::script::Pahawh_Hmong_table),\n+        (\"Palmyrene\", super::script::Palmyrene_table), (\"Pau_Cin_Hau\",\n+        super::script::Pau_Cin_Hau_table), (\"Pc\", super::general_category::Pc_table), (\"Pd\",\n+        super::general_category::Pd_table), (\"Pe\", super::general_category::Pe_table), (\"Pf\",\n+        super::general_category::Pf_table), (\"Phags_Pa\", super::script::Phags_Pa_table),\n+        (\"Phoenician\", super::script::Phoenician_table), (\"Pi\", super::general_category::Pi_table),\n+        (\"Po\", super::general_category::Po_table), (\"Ps\", super::general_category::Ps_table),\n+        (\"Psalter_Pahlavi\", super::script::Psalter_Pahlavi_table), (\"Rejang\",\n+        super::script::Rejang_table), (\"Runic\", super::script::Runic_table), (\"S\",\n+        super::general_category::S_table), (\"Samaritan\", super::script::Samaritan_table),\n+        (\"Saurashtra\", super::script::Saurashtra_table), (\"Sc\", super::general_category::Sc_table),\n+        (\"Sharada\", super::script::Sharada_table), (\"Shavian\", super::script::Shavian_table),\n+        (\"Siddham\", super::script::Siddham_table), (\"Sinhala\", super::script::Sinhala_table), (\"Sk\",\n+        super::general_category::Sk_table), (\"Sm\", super::general_category::Sm_table), (\"So\",\n+        super::general_category::So_table), (\"Sora_Sompeng\", super::script::Sora_Sompeng_table),\n+        (\"Sundanese\", super::script::Sundanese_table), (\"Syloti_Nagri\",\n+        super::script::Syloti_Nagri_table), (\"Syriac\", super::script::Syriac_table), (\"Tagalog\",\n+        super::script::Tagalog_table), (\"Tagbanwa\", super::script::Tagbanwa_table), (\"Tai_Le\",\n+        super::script::Tai_Le_table), (\"Tai_Tham\", super::script::Tai_Tham_table), (\"Tai_Viet\",\n+        super::script::Tai_Viet_table), (\"Takri\", super::script::Takri_table), (\"Tamil\",\n+        super::script::Tamil_table), (\"Telugu\", super::script::Telugu_table), (\"Thaana\",\n+        super::script::Thaana_table), (\"Thai\", super::script::Thai_table), (\"Tibetan\",\n+        super::script::Tibetan_table), (\"Tifinagh\", super::script::Tifinagh_table), (\"Tirhuta\",\n+        super::script::Tirhuta_table), (\"Ugaritic\", super::script::Ugaritic_table), (\"Uppercase\",\n+        super::derived_property::Uppercase_table), (\"Vai\", super::script::Vai_table),\n+        (\"Warang_Citi\", super::script::Warang_Citi_table), (\"White_Space\",\n+        super::property::White_Space_table), (\"XID_Continue\",\n+        super::derived_property::XID_Continue_table), (\"XID_Start\",\n+        super::derived_property::XID_Start_table), (\"Yi\", super::script::Yi_table), (\"Z\",\n+        super::general_category::Z_table), (\"Zl\", super::general_category::Zl_table), (\"Zp\",\n+        super::general_category::Zp_table), (\"Zs\", super::general_category::Zs_table)\n+    ];\n+\n+    pub const PERLD: &'static [(char, char)] = super::general_category::Nd_table;\n+\n+    pub const PERLS: &'static [(char, char)] = super::property::White_Space_table;\n+\n+    pub const PERLW: &'static [(char, char)] = &[\n         ('\\u{30}', '\\u{39}'), ('\\u{41}', '\\u{5a}'), ('\\u{5f}', '\\u{5f}'), ('\\u{61}', '\\u{7a}'),\n         ('\\u{aa}', '\\u{aa}'), ('\\u{b5}', '\\u{b5}'), ('\\u{ba}', '\\u{ba}'), ('\\u{c0}', '\\u{d6}'),\n         ('\\u{d8}', '\\u{f6}'), ('\\u{f8}', '\\u{2c1}'), ('\\u{2c6}', '\\u{2d1}'), ('\\u{2e0}', '\\u{2e4}'),\n@@ -4254,7 +4253,7 @@ pub mod regex {\n \n pub mod normalization {\n     // Canonical decompositions\n-    pub static canonical_table: &'static [(char, &'static [char])] = &[\n+    pub const canonical_table: &'static [(char, &'static [char])] = &[\n         ('\\u{c0}', &['\\u{41}', '\\u{300}']), ('\\u{c1}', &['\\u{41}', '\\u{301}']), ('\\u{c2}',\n         &['\\u{41}', '\\u{302}']), ('\\u{c3}', &['\\u{41}', '\\u{303}']), ('\\u{c4}', &['\\u{41}',\n         '\\u{308}']), ('\\u{c5}', &['\\u{41}', '\\u{30a}']), ('\\u{c7}', &['\\u{43}', '\\u{327}']),\n@@ -5056,7 +5055,7 @@ pub mod normalization {\n     ];\n \n     // Compatibility decompositions\n-    pub static compatibility_table: &'static [(char, &'static [char])] = &[\n+    pub const compatibility_table: &'static [(char, &'static [char])] = &[\n         ('\\u{a0}', &['\\u{20}']), ('\\u{a8}', &['\\u{20}', '\\u{308}']), ('\\u{aa}', &['\\u{61}']),\n         ('\\u{af}', &['\\u{20}', '\\u{304}']), ('\\u{b2}', &['\\u{32}']), ('\\u{b3}', &['\\u{33}']),\n         ('\\u{b4}', &['\\u{20}', '\\u{301}']), ('\\u{b5}', &['\\u{3bc}']), ('\\u{b8}', &['\\u{20}',\n@@ -6480,7 +6479,7 @@ pub mod normalization {\n     ];\n \n     // Canonical compositions\n-    pub static composition_table: &'static [(char, &'static [(char, char)])] = &[\n+    pub const composition_table: &'static [(char, &'static [(char, char)])] = &[\n         ('\\u{3c}', &[('\\u{338}', '\\u{226e}')]), ('\\u{3d}', &[('\\u{338}', '\\u{2260}')]), ('\\u{3e}',\n         &[('\\u{338}', '\\u{226f}')]), ('\\u{41}', &[('\\u{300}', '\\u{c0}'), ('\\u{301}', '\\u{c1}'),\n         ('\\u{302}', '\\u{c2}'), ('\\u{303}', '\\u{c3}'), ('\\u{304}', '\\u{100}'), ('\\u{306}',\n@@ -6840,7 +6839,7 @@ pub mod normalization {\n         }\n     }\n \n-    static combining_class_table: &'static [(char, char, u8)] = &[\n+    const combining_class_table: &'static [(char, char, u8)] = &[\n         ('\\u{300}', '\\u{314}', 230), ('\\u{315}', '\\u{315}', 232), ('\\u{316}', '\\u{319}', 220),\n         ('\\u{31a}', '\\u{31a}', 232), ('\\u{31b}', '\\u{31b}', 216), ('\\u{31c}', '\\u{320}', 220),\n         ('\\u{321}', '\\u{322}', 202), ('\\u{323}', '\\u{326}', 220), ('\\u{327}', '\\u{328}', 202),\n@@ -6988,7 +6987,7 @@ pub mod conversions {\n         }\n     }\n \n-    static LuLl_table: &'static [(char, char)] = &[\n+    const LuLl_table: &'static [(char, char)] = &[\n         ('\\u{41}', '\\u{61}'), ('\\u{42}', '\\u{62}'), ('\\u{43}', '\\u{63}'), ('\\u{44}', '\\u{64}'),\n         ('\\u{45}', '\\u{65}'), ('\\u{46}', '\\u{66}'), ('\\u{47}', '\\u{67}'), ('\\u{48}', '\\u{68}'),\n         ('\\u{49}', '\\u{69}'), ('\\u{4a}', '\\u{6a}'), ('\\u{4b}', '\\u{6b}'), ('\\u{4c}', '\\u{6c}'),\n@@ -7284,7 +7283,7 @@ pub mod conversions {\n         ('\\u{118be}', '\\u{118de}'), ('\\u{118bf}', '\\u{118df}')\n     ];\n \n-    static LlLu_table: &'static [(char, char)] = &[\n+    const LlLu_table: &'static [(char, char)] = &[\n         ('\\u{61}', '\\u{41}'), ('\\u{62}', '\\u{42}'), ('\\u{63}', '\\u{43}'), ('\\u{64}', '\\u{44}'),\n         ('\\u{65}', '\\u{45}'), ('\\u{66}', '\\u{46}'), ('\\u{67}', '\\u{47}'), ('\\u{68}', '\\u{48}'),\n         ('\\u{69}', '\\u{49}'), ('\\u{6a}', '\\u{4a}'), ('\\u{6b}', '\\u{4b}'), ('\\u{6c}', '\\u{4c}'),\n@@ -7625,7 +7624,7 @@ pub mod charwidth {\n \n     // character width table. Based on Markus Kuhn's free wcwidth() implementation,\n     //     http://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c\n-    static charwidth_table: &'static [(char, char, u8, u8)] = &[\n+    const charwidth_table: &'static [(char, char, u8, u8)] = &[\n         ('\\u{a1}', '\\u{a1}', 1, 2), ('\\u{a4}', '\\u{a4}', 1, 2), ('\\u{a7}', '\\u{a8}', 1, 2),\n         ('\\u{aa}', '\\u{aa}', 1, 2), ('\\u{ae}', '\\u{ae}', 1, 2), ('\\u{b0}', '\\u{b4}', 1, 2),\n         ('\\u{b6}', '\\u{ba}', 1, 2), ('\\u{bc}', '\\u{bf}', 1, 2), ('\\u{c6}', '\\u{c6}', 1, 2),\n@@ -7839,7 +7838,7 @@ pub mod grapheme {\n         bsearch_range_value_table(c, grapheme_cat_table)\n     }\n \n-    static grapheme_cat_table: &'static [(char, char, GraphemeCat)] = &[\n+    const grapheme_cat_table: &'static [(char, char, GraphemeCat)] = &[\n         ('\\u{0}', '\\u{1f}', GC_Control), ('\\u{7f}', '\\u{9f}', GC_Control), ('\\u{ad}', '\\u{ad}',\n         GC_Control), ('\\u{300}', '\\u{36f}', GC_Extend), ('\\u{483}', '\\u{487}', GC_Extend),\n         ('\\u{488}', '\\u{489}', GC_Extend), ('\\u{591}', '\\u{5bd}', GC_Extend), ('\\u{5bf}', '\\u{5bf}',"}]}