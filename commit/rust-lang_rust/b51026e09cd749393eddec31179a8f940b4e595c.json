{"sha": "b51026e09cd749393eddec31179a8f940b4e595c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MTAyNmUwOWNkNzQ5MzkzZWRkZWMzMTE3OWE4Zjk0MGI0ZTU5NWM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-13T04:03:12Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-15T16:51:14Z"}, "message": "syntax: parse fully qualified UFCS expressions.", "tree": {"sha": "77ce76c0374d1a0da418ae1ad9020d9a24086eb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77ce76c0374d1a0da418ae1ad9020d9a24086eb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b51026e09cd749393eddec31179a8f940b4e595c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b51026e09cd749393eddec31179a8f940b4e595c", "html_url": "https://github.com/rust-lang/rust/commit/b51026e09cd749393eddec31179a8f940b4e595c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b51026e09cd749393eddec31179a8f940b4e595c/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "html_url": "https://github.com/rust-lang/rust/commit/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "543b746849955d4f83558acaa07c848043f1f6ec", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b51026e09cd749393eddec31179a8f940b4e595c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51026e09cd749393eddec31179a8f940b4e595c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b51026e09cd749393eddec31179a8f940b4e595c", "patch": "@@ -25,7 +25,7 @@ use ast::{ExprAssign, ExprAssignOp, ExprBinary, ExprBlock, ExprBox};\n use ast::{ExprBreak, ExprCall, ExprCast};\n use ast::{ExprField, ExprTupField, ExprClosure, ExprIf, ExprIfLet, ExprIndex};\n use ast::{ExprLit, ExprLoop, ExprMac, ExprRange};\n-use ast::{ExprMethodCall, ExprParen, ExprPath};\n+use ast::{ExprMethodCall, ExprParen, ExprPath, ExprQPath};\n use ast::{ExprRepeat, ExprRet, ExprStruct, ExprTup, ExprUnary};\n use ast::{ExprVec, ExprWhile, ExprWhileLet, ExprForLoop, Field, FnDecl};\n use ast::{FnUnboxedClosureKind, FnMutUnboxedClosureKind};\n@@ -1573,7 +1573,10 @@ impl<'a> Parser<'a> {\n             TyQPath(P(QPath {\n                 self_type: self_type,\n                 trait_ref: P(trait_ref),\n-                item_name: item_name,\n+                item_path: ast::PathSegment {\n+                    identifier: item_name,\n+                    parameters: ast::PathParameters::none()\n+                }\n             }))\n         } else if self.check(&token::ModSep) ||\n                   self.token.is_ident() ||\n@@ -1894,11 +1897,7 @@ impl<'a> Parser<'a> {\n             if !self.eat(&token::ModSep) {\n                 segments.push(ast::PathSegment {\n                     identifier: identifier,\n-                    parameters: ast::AngleBracketedParameters(ast::AngleBracketedParameterData {\n-                        lifetimes: Vec::new(),\n-                        types: OwnedSlice::empty(),\n-                        bindings: OwnedSlice::empty(),\n-                    })\n+                    parameters: ast::PathParameters::none()\n                 });\n                 return segments;\n             }\n@@ -2253,6 +2252,37 @@ impl<'a> Parser<'a> {\n                 hi = self.last_span.hi;\n             }\n             _ => {\n+                if self.eat_lt() {\n+                    // QUALIFIED PATH `<TYPE as TRAIT_REF>::item::<'a, T>`\n+                    let self_type = self.parse_ty_sum();\n+                    self.expect_keyword(keywords::As);\n+                    let trait_ref = self.parse_trait_ref();\n+                    self.expect(&token::Gt);\n+                    self.expect(&token::ModSep);\n+                    let item_name = self.parse_ident();\n+                    let parameters = if self.eat(&token::ModSep) {\n+                        self.expect_lt();\n+                        // Consumed `item::<`, go look for types\n+                        let (lifetimes, types, bindings) =\n+                            self.parse_generic_values_after_lt();\n+                        ast::AngleBracketedParameters(ast::AngleBracketedParameterData {\n+                            lifetimes: lifetimes,\n+                            types: OwnedSlice::from_vec(types),\n+                            bindings: OwnedSlice::from_vec(bindings),\n+                        })\n+                    } else {\n+                        ast::PathParameters::none()\n+                    };\n+                    let hi = self.span.hi;\n+                    return self.mk_expr(lo, hi, ExprQPath(P(QPath {\n+                        self_type: self_type,\n+                        trait_ref: P(trait_ref),\n+                        item_path: ast::PathSegment {\n+                            identifier: item_name,\n+                            parameters: parameters\n+                        }\n+                    })));\n+                }\n                 if self.eat_keyword(keywords::Move) {\n                     return self.parse_lambda_expr(CaptureByValue);\n                 }"}]}