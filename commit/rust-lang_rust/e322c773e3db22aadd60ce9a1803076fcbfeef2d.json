{"sha": "e322c773e3db22aadd60ce9a1803076fcbfeef2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMjJjNzczZTNkYjIyYWFkZDYwY2U5YTE4MDMwNzZmY2JmZWVmMmQ=", "commit": {"author": {"name": "Andrea Nall", "email": "anall@andreanall.com", "date": "2021-03-09T05:03:45Z"}, "committer": {"name": "Andrea Nall", "email": "anall@andreanall.com", "date": "2021-03-09T05:03:45Z"}, "message": "use TyS::walk", "tree": {"sha": "d5219c4af1f7e17a58a2ee234b8a81f5592452db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5219c4af1f7e17a58a2ee234b8a81f5592452db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e322c773e3db22aadd60ce9a1803076fcbfeef2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e322c773e3db22aadd60ce9a1803076fcbfeef2d", "html_url": "https://github.com/rust-lang/rust/commit/e322c773e3db22aadd60ce9a1803076fcbfeef2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e322c773e3db22aadd60ce9a1803076fcbfeef2d/comments", "author": {"login": "anall", "id": 12371, "node_id": "MDQ6VXNlcjEyMzcx", "avatar_url": "https://avatars.githubusercontent.com/u/12371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anall", "html_url": "https://github.com/anall", "followers_url": "https://api.github.com/users/anall/followers", "following_url": "https://api.github.com/users/anall/following{/other_user}", "gists_url": "https://api.github.com/users/anall/gists{/gist_id}", "starred_url": "https://api.github.com/users/anall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anall/subscriptions", "organizations_url": "https://api.github.com/users/anall/orgs", "repos_url": "https://api.github.com/users/anall/repos", "events_url": "https://api.github.com/users/anall/events{/privacy}", "received_events_url": "https://api.github.com/users/anall/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anall", "id": 12371, "node_id": "MDQ6VXNlcjEyMzcx", "avatar_url": "https://avatars.githubusercontent.com/u/12371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anall", "html_url": "https://github.com/anall", "followers_url": "https://api.github.com/users/anall/followers", "following_url": "https://api.github.com/users/anall/following{/other_user}", "gists_url": "https://api.github.com/users/anall/gists{/gist_id}", "starred_url": "https://api.github.com/users/anall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anall/subscriptions", "organizations_url": "https://api.github.com/users/anall/orgs", "repos_url": "https://api.github.com/users/anall/repos", "events_url": "https://api.github.com/users/anall/events{/privacy}", "received_events_url": "https://api.github.com/users/anall/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b27cbda32b67b4fdd9113ed894b810fc8f3e180d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b27cbda32b67b4fdd9113ed894b810fc8f3e180d", "html_url": "https://github.com/rust-lang/rust/commit/b27cbda32b67b4fdd9113ed894b810fc8f3e180d"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "ac29a09ae0eef426105a36bb2130bf02cc060244", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e322c773e3db22aadd60ce9a1803076fcbfeef2d/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e322c773e3db22aadd60ce9a1803076fcbfeef2d/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=e322c773e3db22aadd60ce9a1803076fcbfeef2d", "patch": "@@ -1504,26 +1504,23 @@ fn is_normalizable_helper<'tcx>(\n     cache.insert(ty, false); // prevent recursive loops\n     let result = cx.tcx.infer_ctxt().enter(|infcx| {\n         let cause = rustc_middle::traits::ObligationCause::dummy();\n-        if infcx.at(&cause, param_env).normalize(ty).is_err() {\n-            false\n-        } else {\n+        if infcx.at(&cause, param_env).normalize(ty).is_ok() {\n             match ty.kind() {\n                 ty::Adt(def, substs) => !def.variants.iter().any(|variant| {\n                     variant\n                         .fields\n                         .iter()\n                         .any(|field| !is_normalizable_helper(cx, param_env, field.ty(cx.tcx, substs), cache))\n                 }),\n-                ty::Ref(_, pointee, _) | ty::RawPtr(ty::TypeAndMut { ty: pointee, .. }) => {\n-                    is_normalizable_helper(cx, param_env, pointee, cache)\n-                },\n-                ty::Array(inner_ty, _) | ty::Slice(inner_ty) => is_normalizable_helper(cx, param_env, inner_ty, cache),\n-                ty::Tuple(tys) => !tys.iter().any(|inner| match inner.unpack() {\n-                    GenericArgKind::Type(inner_ty) => !is_normalizable_helper(cx, param_env, inner_ty, cache),\n-                    _ => false,\n+                _ => !ty.walk().any(|generic_arg| !match generic_arg.unpack() {\n+                    GenericArgKind::Type(inner_ty) if inner_ty != ty => {\n+                        is_normalizable_helper(cx, param_env, inner_ty, cache)\n+                    },\n+                    _ => true, // if inner_ty == ty, we've already checked it\n                 }),\n-                _ => true,\n             }\n+        } else {\n+            false\n         }\n     });\n     cache.insert(ty, result);"}, {"sha": "d789f60c5d5a0dd5a21aad82437bb58d6d29fd77", "filename": "tests/ui/crashes/ice-6840.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e322c773e3db22aadd60ce9a1803076fcbfeef2d/tests%2Fui%2Fcrashes%2Fice-6840.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e322c773e3db22aadd60ce9a1803076fcbfeef2d/tests%2Fui%2Fcrashes%2Fice-6840.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6840.rs?ref=e322c773e3db22aadd60ce9a1803076fcbfeef2d", "patch": "@@ -13,11 +13,19 @@ pub struct RuleEdges<R: Rule> {\n \n type RuleDependencyEdges<R> = HashMap<u32, RuleEdges<R>>;\n \n-// and additional potential variants\n+// reproducer from the GitHub issue ends here\n+//   but check some additional variants\n type RuleDependencyEdgesArray<R> = HashMap<u32, [RuleEdges<R>; 8]>;\n type RuleDependencyEdgesSlice<R> = HashMap<u32, &'static [RuleEdges<R>]>;\n type RuleDependencyEdgesRef<R> = HashMap<u32, &'static RuleEdges<R>>;\n type RuleDependencyEdgesRaw<R> = HashMap<u32, *const RuleEdges<R>>;\n type RuleDependencyEdgesTuple<R> = HashMap<u32, (RuleEdges<R>, RuleEdges<R>)>;\n \n+// and an additional checks to make sure fix doesn't have stack-overflow issue\n+//   on self-containing types\n+pub struct SelfContaining {\n+    inner: Box<SelfContaining>,\n+}\n+type SelfContainingEdges = HashMap<u32, SelfContaining>;\n+\n fn main() {}"}]}