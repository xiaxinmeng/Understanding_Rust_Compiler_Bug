{"sha": "1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZGJhYTI5Zjk3YThmNTM4MGIxYzg4MzVmNzhhZTJhMzRkNGRjMGU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-31T18:00:09Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-31T18:00:09Z"}, "message": "Wrap inner tail expressions in MissingOkOrSomeInTailExpr", "tree": {"sha": "8eae3fc6d4cb40e4f8511252d2d1aad5d21ebe58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eae3fc6d4cb40e4f8511252d2d1aad5d21ebe58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e", "html_url": "https://github.com/rust-lang/rust/commit/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb513c22f7fd18cb8ac21de44e8293fee9cd2b6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb513c22f7fd18cb8ac21de44e8293fee9cd2b6d", "html_url": "https://github.com/rust-lang/rust/commit/eb513c22f7fd18cb8ac21de44e8293fee9cd2b6d"}], "stats": {"total": 80, "additions": 69, "deletions": 11}, "files": [{"sha": "3016c92a0c3f5f32e8ae7e7d19d379edce13a9c0", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e", "patch": "@@ -9,6 +9,8 @@ use hir_def::path::ModPath;\n use hir_expand::{name::Name, HirFileId, InFile};\n use syntax::{ast, AstPtr, SyntaxNodePtr, TextRange};\n \n+use crate::Type;\n+\n macro_rules! diagnostics {\n     ($($diag:ident,)*) => {\n         pub enum AnyDiagnostic {$(\n@@ -142,6 +144,7 @@ pub struct MissingOkOrSomeInTailExpr {\n     pub expr: InFile<AstPtr<ast::Expr>>,\n     // `Some` or `Ok` depending on whether the return type is Result or Option\n     pub required: String,\n+    pub expected: Type,\n }\n \n #[derive(Debug)]"}, {"sha": "4428d0644f274616b767f50358ea8a7c0837bd03", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e", "patch": "@@ -1216,7 +1216,14 @@ impl Function {\n                 }\n                 BodyValidationDiagnostic::MissingOkOrSomeInTailExpr { expr, required } => {\n                     match source_map.expr_syntax(expr) {\n-                        Ok(expr) => acc.push(MissingOkOrSomeInTailExpr { expr, required }.into()),\n+                        Ok(expr) => acc.push(\n+                            MissingOkOrSomeInTailExpr {\n+                                expr,\n+                                required,\n+                                expected: self.ret_type(db),\n+                            }\n+                            .into(),\n+                        ),\n                         Err(SyntheticSyntax) => (),\n                     }\n                 }"}, {"sha": "cdcb3ed5e7ebf103033b2dcff9598547f60a40ea", "filename": "crates/hir_ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e", "patch": "@@ -7,6 +7,7 @@\n \n mod deconstruct_pat;\n mod pat_util;\n+\n pub(crate) mod usefulness;\n \n use hir_def::{body::Body, EnumVariantId, LocalFieldId, VariantId};"}, {"sha": "fd154ede449da28eca5965630917e62cd94f798c", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e", "patch": "@@ -533,6 +533,9 @@ fn foo() ->$0 u32 {\n             5\n          // ^\n         }\n+    } else if false {\n+        0\n+     // ^\n     } else {\n         match 5 {\n             6 => 100,"}, {"sha": "06f16f9338d5278eb7a76c22576db5724e33732d", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e", "patch": "@@ -624,11 +624,7 @@ impl<'a> CompletionContext<'a> {\n     fn classify_name(&mut self, name: ast::Name) {\n         if let Some(bind_pat) = name.syntax().parent().and_then(ast::IdentPat::cast) {\n             self.is_pat_or_const = Some(PatternRefutability::Refutable);\n-            // if any of these is here our bind pat can't be a const pat anymore\n-            let complex_ident_pat = bind_pat.at_token().is_some()\n-                || bind_pat.ref_token().is_some()\n-                || bind_pat.mut_token().is_some();\n-            if complex_ident_pat {\n+            if !bind_pat.is_simple_ident() {\n                 self.is_pat_or_const = None;\n             } else {\n                 let irrefutable_pat = bind_pat.syntax().ancestors().find_map(|node| {"}, {"sha": "8ff569a741b8d8b9202181fd06103ff117d1bc86", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e", "patch": "@@ -271,7 +271,20 @@ pub fn for_each_tail_expr(expr: &ast::Expr, cb: &mut dyn FnMut(&ast::Expr)) {\n             ast::Effect::Async(_) | ast::Effect::Try(_) | ast::Effect::Const(_) => cb(expr),\n         },\n         ast::Expr::IfExpr(if_) => {\n-            if_.blocks().for_each(|block| for_each_tail_expr(&ast::Expr::BlockExpr(block), cb))\n+            let mut if_ = if_.clone();\n+            loop {\n+                if let Some(block) = if_.then_branch() {\n+                    for_each_tail_expr(&ast::Expr::BlockExpr(block), cb);\n+                }\n+                match if_.else_branch() {\n+                    Some(ast::ElseBranch::IfExpr(it)) => if_ = it,\n+                    Some(ast::ElseBranch::Block(block)) => {\n+                        for_each_tail_expr(&ast::Expr::BlockExpr(block), cb);\n+                        break;\n+                    }\n+                    None => break,\n+                }\n+            }\n         }\n         ast::Expr::LoopExpr(l) => {\n             for_each_break_expr(l.label(), l.loop_body(), &mut |b| cb(&ast::Expr::BreakExpr(b)))"}, {"sha": "469ab21d3c8b87397b1b07f4012cbb8af5ab4e2a", "filename": "crates/ide_diagnostics/src/handlers/missing_ok_or_some_in_tail_expr.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_ok_or_some_in_tail_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_ok_or_some_in_tail_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_ok_or_some_in_tail_expr.rs?ref=1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e", "patch": "@@ -1,5 +1,5 @@\n use hir::db::AstDatabase;\n-use ide_db::{assists::Assist, source_change::SourceChange};\n+use ide_db::{assists::Assist, helpers::for_each_tail_expr, source_change::SourceChange};\n use syntax::AstNode;\n use text_edit::TextEdit;\n \n@@ -33,10 +33,15 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingOkOrSomeInTailExpr) -> Op\n     let root = ctx.sema.db.parse_or_expand(d.expr.file_id)?;\n     let tail_expr = d.expr.value.to_node(&root);\n     let tail_expr_range = tail_expr.syntax().text_range();\n-    let replacement = format!(\"{}({})\", d.required, tail_expr.syntax());\n-    let edit = TextEdit::replace(tail_expr_range, replacement);\n+    let mut builder = TextEdit::builder();\n+    for_each_tail_expr(&tail_expr, &mut |expr| {\n+        if ctx.sema.type_of_expr(expr).as_ref() != Some(&d.expected) {\n+            builder.insert(expr.syntax().text_range().start(), format!(\"{}(\", d.required));\n+            builder.insert(expr.syntax().text_range().end(), \")\".to_string());\n+        }\n+    });\n     let source_change =\n-        SourceChange::from_text_edit(d.expr.file_id.original_file(ctx.sema.db), edit);\n+        SourceChange::from_text_edit(d.expr.file_id.original_file(ctx.sema.db), builder.finish());\n     let name = if d.required == \"Ok\" { \"Wrap with Ok\" } else { \"Wrap with Some\" };\n     Some(vec![fix(\"wrap_tail_expr\", name, source_change, tail_expr_range)])\n }\n@@ -68,6 +73,35 @@ fn div(x: i32, y: i32) -> Option<i32> {\n         );\n     }\n \n+    #[test]\n+    fn test_wrap_return_type_option_tails() {\n+        check_fix(\n+            r#\"\n+//- minicore: option, result\n+fn div(x: i32, y: i32) -> Option<i32> {\n+    if y == 0 {\n+        0\n+    } else if true {\n+        100\n+    } else {\n+        None\n+    }$0\n+}\n+\"#,\n+            r#\"\n+fn div(x: i32, y: i32) -> Option<i32> {\n+    if y == 0 {\n+        Some(0)\n+    } else if true {\n+        Some(100)\n+    } else {\n+        None\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_wrap_return_type() {\n         check_fix("}, {"sha": "aad5b08e9f95d1b81bd63d65f7d5fe7905334c75", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=1edbaa29f97a8f5380b1c8835f78ae2a34d4dc0e", "patch": "@@ -164,6 +164,7 @@ impl ast::IfExpr {\n     pub fn then_branch(&self) -> Option<ast::BlockExpr> {\n         self.blocks().next()\n     }\n+\n     pub fn else_branch(&self) -> Option<ElseBranch> {\n         let res = match self.blocks().nth(1) {\n             Some(block) => ElseBranch::Block(block),"}]}