{"sha": "74d9c4b312ee1a3149df2cf0bb8662ddcd5752ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZDljNGIzMTJlZTFhMzE0OWRmMmNmMGJiODY2MmRkY2Q1NzUyYmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T06:23:09Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:41:28Z"}, "message": "parse_stmt_mac: add a comment", "tree": {"sha": "4af549ccd93862e2b41d67ac71f5eed61fc1e63b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4af549ccd93862e2b41d67ac71f5eed61fc1e63b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74d9c4b312ee1a3149df2cf0bb8662ddcd5752ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74d9c4b312ee1a3149df2cf0bb8662ddcd5752ba", "html_url": "https://github.com/rust-lang/rust/commit/74d9c4b312ee1a3149df2cf0bb8662ddcd5752ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74d9c4b312ee1a3149df2cf0bb8662ddcd5752ba/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ddea30178bb2b95f9366943702a9f2711f7c547", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ddea30178bb2b95f9366943702a9f2711f7c547", "html_url": "https://github.com/rust-lang/rust/commit/2ddea30178bb2b95f9366943702a9f2711f7c547"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "3d2773cdc307936c4ac0c415e342c888eccab94b", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74d9c4b312ee1a3149df2cf0bb8662ddcd5752ba/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d9c4b312ee1a3149df2cf0bb8662ddcd5752ba/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=74d9c4b312ee1a3149df2cf0bb8662ddcd5752ba", "patch": "@@ -180,6 +180,7 @@ impl<'a> Parser<'a> {\n             self.warn_missing_semicolon();\n             StmtKind::Mac(P((mac, style, attrs)))\n         } else {\n+            // Since none of the above applied, this is an expression statement macro.\n             let e = self.mk_expr(lo.to(hi), ExprKind::Mac(mac), ThinVec::new());\n             let e = self.maybe_recover_from_bad_qpath(e, true)?;\n             let e = self.parse_dot_or_call_expr_with(e, lo, attrs)?;"}]}