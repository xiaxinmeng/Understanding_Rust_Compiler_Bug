{"sha": "9a757d6ee4229bd7e022a2f3f26946cf05fddbcf", "node_id": "C_kwDOAAsO6NoAKDlhNzU3ZDZlZTQyMjliZDdlMDIyYTJmM2YyNjk0NmNmMDVmZGRiY2Y", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-01-17T11:26:28Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-01-18T07:11:15Z"}, "message": "add `eq` to `InferCtxtExt`", "tree": {"sha": "f36a2b6b59fb2b1af5f07a1352c1a70d4ad9631e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f36a2b6b59fb2b1af5f07a1352c1a70d4ad9631e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a757d6ee4229bd7e022a2f3f26946cf05fddbcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a757d6ee4229bd7e022a2f3f26946cf05fddbcf", "html_url": "https://github.com/rust-lang/rust/commit/9a757d6ee4229bd7e022a2f3f26946cf05fddbcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a757d6ee4229bd7e022a2f3f26946cf05fddbcf/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "660c28391c79bd12e116724a8877a2148630dee5", "url": "https://api.github.com/repos/rust-lang/rust/commits/660c28391c79bd12e116724a8877a2148630dee5", "html_url": "https://github.com/rust-lang/rust/commit/660c28391c79bd12e116724a8877a2148630dee5"}], "stats": {"total": 87, "additions": 49, "deletions": 38}, "files": [{"sha": "f92d64631340a732839b5a487f959eeb78d6c8f3", "filename": "compiler/rustc_trait_selection/src/solve/infcx_ext.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9a757d6ee4229bd7e022a2f3f26946cf05fddbcf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Finfcx_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a757d6ee4229bd7e022a2f3f26946cf05fddbcf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Finfcx_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Finfcx_ext.rs?ref=9a757d6ee4229bd7e022a2f3f26946cf05fddbcf", "patch": "@@ -1,11 +1,28 @@\n+use rustc_infer::infer::at::ToTrace;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_infer::infer::InferCtxt;\n-use rustc_middle::ty::Ty;\n+use rustc_infer::infer::{InferCtxt, InferOk};\n+use rustc_infer::traits::query::NoSolution;\n+use rustc_infer::traits::ObligationCause;\n+use rustc_middle::ty::{self, Ty};\n use rustc_span::DUMMY_SP;\n \n+use super::Goal;\n+\n /// Methods used inside of the canonical queries of the solver.\n+///\n+/// Most notably these do not care about diagnostics information.\n+/// If you find this while looking for methods to use outside of the\n+/// solver, you may look at the implementation of these method for\n+/// help.\n pub(super) trait InferCtxtExt<'tcx> {\n     fn next_ty_infer(&self) -> Ty<'tcx>;\n+\n+    fn eq<T: ToTrace<'tcx>>(\n+        &self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        lhs: T,\n+        rhs: T,\n+    ) -> Result<Vec<Goal<'tcx, ty::Predicate<'tcx>>>, NoSolution>;\n }\n \n impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n@@ -15,4 +32,23 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n             span: DUMMY_SP,\n         })\n     }\n+\n+    #[instrument(level = \"debug\", skip(self, param_env), ret)]\n+    fn eq<T: ToTrace<'tcx>>(\n+        &self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        lhs: T,\n+        rhs: T,\n+    ) -> Result<Vec<Goal<'tcx, ty::Predicate<'tcx>>>, NoSolution> {\n+        self.at(&ObligationCause::dummy(), param_env)\n+            .define_opaque_types(false)\n+            .eq(lhs, rhs)\n+            .map(|InferOk { value: (), obligations }| {\n+                obligations.into_iter().map(|o| o.into()).collect()\n+            })\n+            .map_err(|e| {\n+                debug!(?e, \"failed to equate\");\n+                NoSolution\n+            })\n+    }\n }"}, {"sha": "cf07926f85a2755183d90b01e091f5d81d96c20a", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9a757d6ee4229bd7e022a2f3f26946cf05fddbcf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a757d6ee4229bd7e022a2f3f26946cf05fddbcf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=9a757d6ee4229bd7e022a2f3f26946cf05fddbcf", "patch": "@@ -1,14 +1,15 @@\n use crate::traits::{specialization_graph, translate_substs};\n \n use super::assembly::{self, Candidate, CandidateSource};\n+use super::infcx_ext::InferCtxtExt;\n use super::{Certainty, EvalCtxt, Goal, QueryResult};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n-use rustc_infer::infer::{InferCtxt, InferOk};\n+use rustc_infer::infer::InferCtxt;\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::specialization_graph::LeafDef;\n-use rustc_infer::traits::{ObligationCause, Reveal};\n+use rustc_infer::traits::Reveal;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::ProjectionPredicate;\n use rustc_middle::ty::TypeVisitable;\n@@ -112,23 +113,15 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n             let impl_substs = ecx.infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n             let impl_trait_ref = impl_trait_ref.subst(tcx, impl_substs);\n \n-            let Ok(InferOk { obligations, .. }) = ecx.infcx\n-                .at(&ObligationCause::dummy(), goal.param_env)\n-                .define_opaque_types(false)\n-                .eq(goal_trait_ref, impl_trait_ref)\n-                .map_err(|e| debug!(\"failed to equate trait refs: {e:?}\"))\n-            else {\n-                return Err(NoSolution)\n-            };\n+            let mut nested_goals = ecx.infcx.eq(goal.param_env, goal_trait_ref, impl_trait_ref)?;\n             let where_clause_bounds = tcx\n                 .predicates_of(impl_def_id)\n                 .instantiate(tcx, impl_substs)\n                 .predicates\n                 .into_iter()\n                 .map(|pred| goal.with(tcx, pred));\n \n-            let nested_goals =\n-                obligations.into_iter().map(|o| o.into()).chain(where_clause_bounds).collect();\n+            nested_goals.extend(where_clause_bounds);\n             let trait_ref_certainty = ecx.evaluate_all(nested_goals)?;\n \n             let Some(assoc_def) = fetch_eligible_assoc_item_def(\n@@ -185,16 +178,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 ty.map_bound(|ty| ty.into())\n             };\n \n-            let Ok(InferOk { obligations, .. }) = ecx.infcx\n-                .at(&ObligationCause::dummy(), goal.param_env)\n-                .define_opaque_types(false)\n-                .eq(goal.predicate.term,  term.subst(tcx, substs))\n-                .map_err(|e| debug!(\"failed to equate trait refs: {e:?}\"))\n-            else {\n-                return Err(NoSolution);\n-            };\n-\n-            let nested_goals = obligations.into_iter().map(|o| o.into()).collect();\n+            let nested_goals =\n+                ecx.infcx.eq(goal.param_env, goal.predicate.term, term.subst(tcx, substs))?;\n             let rhs_certainty = ecx.evaluate_all(nested_goals)?;\n \n             Ok(trait_ref_certainty.unify_and(rhs_certainty))"}, {"sha": "bbe175d5cc8536ce72792b2a14592d2bc4ec6827", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9a757d6ee4229bd7e022a2f3f26946cf05fddbcf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a757d6ee4229bd7e022a2f3f26946cf05fddbcf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=9a757d6ee4229bd7e022a2f3f26946cf05fddbcf", "patch": "@@ -3,11 +3,10 @@\n use std::iter;\n \n use super::assembly::{self, Candidate, CandidateSource};\n+use super::infcx_ext::InferCtxtExt;\n use super::{Certainty, EvalCtxt, Goal, QueryResult};\n use rustc_hir::def_id::DefId;\n-use rustc_infer::infer::InferOk;\n use rustc_infer::traits::query::NoSolution;\n-use rustc_infer::traits::ObligationCause;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::TraitPredicate;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -45,24 +44,15 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n             let impl_substs = ecx.infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n             let impl_trait_ref = impl_trait_ref.subst(tcx, impl_substs);\n \n-            let Ok(InferOk { obligations, .. }) = ecx.infcx\n-                .at(&ObligationCause::dummy(), goal.param_env)\n-                .define_opaque_types(false)\n-                .eq(goal.predicate.trait_ref, impl_trait_ref)\n-                .map_err(|e| debug!(\"failed to equate trait refs: {e:?}\"))\n-            else {\n-                return Err(NoSolution);\n-            };\n+            let mut nested_goals =\n+                ecx.infcx.eq(goal.param_env, goal.predicate.trait_ref, impl_trait_ref)?;\n             let where_clause_bounds = tcx\n                 .predicates_of(impl_def_id)\n                 .instantiate(tcx, impl_substs)\n                 .predicates\n                 .into_iter()\n                 .map(|pred| goal.with(tcx, pred));\n-\n-            let nested_goals =\n-                obligations.into_iter().map(|o| o.into()).chain(where_clause_bounds).collect();\n-\n+            nested_goals.extend(where_clause_bounds);\n             ecx.evaluate_all(nested_goals)\n         })\n     }"}]}