{"sha": "5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNGVjYjRhMGNhZTZiN2E2M2FiYjFhYmIxMTJhMTUwMDhmY2NlOWM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-10-04T09:54:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-04T09:54:01Z"}, "message": "Rollup merge of #36798 - gavinb:fix/36164, r=GuillaumeGomez\n\nImprove error message and snippet for \"did you mean `x`\"\n\n- Fixes #36164\n- Part of #35233\n\nBased on the standalone example https://is.gd/8STXMd posted by @nikomatsakis and using the third formatting option mentioned in #36164 and agreed by @jonathandturner.\n\nNote however this does not address the question of [how to handle an empty or unknown suggestion](https://github.com/rust-lang/rust/issues/36164#issuecomment-244460024). @nikomatsakis any suggestions on how best to address that part?", "tree": {"sha": "fb9132604367c9dead5fd8e66d85c1bf732a42b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb9132604367c9dead5fd8e66d85c1bf732a42b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "html_url": "https://github.com/rust-lang/rust/commit/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c31d76e97c6116ba2480aa23a48f3e7bd25a7cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c31d76e97c6116ba2480aa23a48f3e7bd25a7cb", "html_url": "https://github.com/rust-lang/rust/commit/9c31d76e97c6116ba2480aa23a48f3e7bd25a7cb"}, {"sha": "99aae9b834604788b58da8eac9156cc3715426e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/99aae9b834604788b58da8eac9156cc3715426e1", "html_url": "https://github.com/rust-lang/rust/commit/99aae9b834604788b58da8eac9156cc3715426e1"}], "stats": {"total": 125, "additions": 89, "deletions": 36}, "files": [{"sha": "00114099c44bf2b4f69ba936657f9dfb7f8ca4c1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -2959,18 +2959,20 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 .emit();\n             self.tcx().types.err\n         } else {\n-            let mut err = self.type_error_struct(expr.span, |actual| {\n-                format!(\"attempted access of field `{}` on type `{}`, \\\n-                         but no field with that name was found\",\n+            let mut err = self.type_error_struct(field.span, |actual| {\n+                format!(\"no field `{}` on type `{}`\",\n                         field.node, actual)\n             }, expr_t);\n             match expr_t.sty {\n                 ty::TyAdt(def, _) if !def.is_enum() => {\n                     if let Some(suggested_field_name) =\n                         Self::suggest_field_name(def.struct_variant(), field, vec![]) {\n-                        err.span_help(field.span,\n-                                      &format!(\"did you mean `{}`?\", suggested_field_name));\n-                    };\n+                            err.span_label(field.span,\n+                                           &format!(\"did you mean `{}`?\", suggested_field_name));\n+                        } else {\n+                            err.span_label(field.span,\n+                                           &format!(\"unknown field\"));\n+                        };\n                 }\n                 ty::TyRawPtr(..) => {\n                     err.note(&format!(\"`{0}` is a native pointer; perhaps you need to deref with \\"}, {"sha": "fe8e793ed781a2a765b5e6a1e90a321f13ed9d56", "filename": "src/test/compile-fail/attempted-access-non-fatal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattempted-access-non-fatal.rs?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -11,6 +11,6 @@\n // Check that bogus field access is non-fatal\n fn main() {\n     let x = 0;\n-    let _ = x.foo; //~ ERROR attempted access of field\n-    let _ = x.bar; //~ ERROR attempted access of field\n+    let _ = x.foo; //~ no field `foo` on type `{integer}`\n+    let _ = x.bar; //~ no field `bar` on type `{integer}`\n }"}, {"sha": "ee622a17ab12c1199c189363373408b5ba2b68b7", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -112,7 +112,7 @@ fn main()\n     //~| NOTE required for the cast to the object type `Foo`\n \n     // check no error cascade\n-    let _ = main.f as *const u32; //~ ERROR attempted access of field\n+    let _ = main.f as *const u32; //~ no field `f` on type `fn() {main}`\n \n     let cf: *const Foo = &0;\n     let _ = cf as *const [u16];"}, {"sha": "553ad0a33410b221f86303347fb39320bdffc873", "filename": "src/test/compile-fail/derived-errors/issue-30580.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fderived-errors%2Fissue-30580.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fderived-errors%2Fissue-30580.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderived-errors%2Fissue-30580.rs?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -19,7 +19,7 @@ impl<'a, 'tcx> Pass<'a, 'tcx>\n     pub fn tcx(&self) -> &'a &'tcx () { self.1 }\n     fn lol(&mut self, b: &Foo)\n     {\n-        b.c; //~ ERROR no field with that name was found\n+        b.c; //~ ERROR no field `c` on type `&Foo`\n         self.tcx();\n     }\n }"}, {"sha": "069883424222ed04322e850e2f8012e3f964574e", "filename": "src/test/compile-fail/issue-11004.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fissue-11004.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fissue-11004.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11004.rs?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -14,9 +14,9 @@ struct A { x: i32, y: f64 }\n \n #[cfg(not(works))]\n unsafe fn access(n:*mut A) -> (i32, f64) {\n-    let x : i32 = n.x; //~ ERROR attempted access of field `x`\n+    let x : i32 = n.x; //~ no field `x` on type `*mut A`\n                        //~| NOTE `n` is a native pointer; perhaps you need to deref with `(*n).x`\n-    let y : f64 = n.y; //~ ERROR attempted access of field `y`\n+    let y : f64 = n.y; //~ no field `y` on type `*mut A`\n                        //~| NOTE `n` is a native pointer; perhaps you need to deref with `(*n).y`\n     (x, y)\n }"}, {"sha": "58e8e10ee37ac85210a68c89e6ba9b87d5b1b265", "filename": "src/test/compile-fail/issue-14721.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fissue-14721.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fissue-14721.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14721.rs?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -10,6 +10,5 @@\n \n fn main() {\n     let foo = \"str\";\n-    println!(\"{}\", foo.desc); //~ ERROR attempted access of field `desc` on type `&str`,\n-                              //        but no field with that name was found\n+    println!(\"{}\", foo.desc); //~ no field `desc` on type `&str`\n }"}, {"sha": "864f8f6b54e7c30f6fb8cf943816c68b682bb609", "filename": "src/test/compile-fail/issue-19244-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19244-2.rs?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -13,5 +13,5 @@ const STRUCT: MyStruct = MyStruct { field: 42 };\n \n fn main() {\n     let a: [isize; STRUCT.nonexistent_field];\n-    //~^ ERROR attempted access of field `nonexistent_field`\n+    //~^ no field `nonexistent_field` on type `MyStruct`\n }"}, {"sha": "626604a87a72c1d6cd801efb8b8f92d80bc04823", "filename": "src/test/compile-fail/issue-23253.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fissue-23253.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fissue-23253.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23253.rs?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -12,5 +12,5 @@ enum Foo { Bar }\n \n fn main() {\n     Foo::Bar.a;\n-    //~^ ERROR: attempted access of field `a` on type `Foo`, but no field with that name was found\n+    //~^ no field `a` on type `Foo`\n }"}, {"sha": "03cae6e64ef5e81a81b5819065602fb4f30ae246", "filename": "src/test/compile-fail/issue-24363.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fissue-24363.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fissue-24363.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24363.rs?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    1.create_a_type_error[ //~ ERROR attempted access of field\n+    1.create_a_type_error[ //~ no field `create_a_type_error` on type `{integer}`\n         ()+() //~ ERROR binary operation `+` cannot be applied\n               //   ^ ensure that we typeck the inner expression ^\n     ];"}, {"sha": "72df6fb59990f41c7a22d3bfe79b646b5cb1b09d", "filename": "src/test/compile-fail/issue-24365.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fissue-24365.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fissue-24365.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24365.rs?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -17,13 +17,13 @@ pub enum Foo {\n }\n \n fn test(a: Foo) {\n-    println!(\"{}\", a.b); //~ ERROR attempted access of field\n+    println!(\"{}\", a.b); //~ no field `b` on type `Foo`\n }\n \n fn main() {\n     let x = Attribute::Code {\n         attr_name_idx: 42,\n     };\n-    let z = (&x).attr_name_idx; //~ ERROR attempted access of field\n-    let y = x.attr_name_idx; //~ ERROR attempted access of field\n+    let z = (&x).attr_name_idx; //~ no field `attr_name_idx` on type `&Attribute`\n+    let y = x.attr_name_idx; //~ no field `attr_name_idx` on type `Attribute`\n }"}, {"sha": "716b0bbe77294deed07ef1166d3f0cb5aa80bf3c", "filename": "src/test/compile-fail/issue-31011.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fissue-31011.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fissue-31011.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31011.rs?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -11,7 +11,7 @@\n macro_rules! log {\n     ( $ctx:expr, $( $args:expr),* ) => {\n         if $ctx.trace {\n-        //~^ ERROR attempted access of field `trace` on type `&T`, but no field with that name\n+        //~^ no field `trace` on type `&T`\n             println!( $( $args, )* );\n         }\n     }"}, {"sha": "f049f69e4bba256c680b574cd3762298f86d76f9", "filename": "src/test/compile-fail/no-type-for-node-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fno-type-for-node-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fno-type-for-node-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-type-for-node-ice.rs?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -11,5 +11,5 @@\n // Related issues: #20401, #20506, #20614, #20752, #20829, #20846, #20885, #20886\n \n fn main() {\n-    \"\".homura[\"\"]; //~ ERROR no field with that name was found\n+    \"\".homura[\"\"]; //~ no field `homura` on type `&'static str`\n }"}, {"sha": "0e30c1e86e4f214fb1f6a98ba216dfac846e6412", "filename": "src/test/compile-fail/struct-fields-typo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fstruct-fields-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fstruct-fields-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-fields-typo.rs?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -18,7 +18,7 @@ fn main() {\n         foo: 0,\n         bar: 0.5,\n     };\n-    let x = foo.baa;//~ ERROR attempted access of field `baa` on type `BuildData`\n-    //~^ HELP did you mean `bar`?\n+    let x = foo.baa;//~ no field `baa` on type `BuildData`\n+    //~^ did you mean `bar`?\n     println!(\"{}\", x);\n }"}, {"sha": "f525ec373753d90f3bfbd21dcfc11ab11c77d38e", "filename": "src/test/compile-fail/struct-pat-derived-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fstruct-pat-derived-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Fstruct-pat-derived-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-pat-derived-error.rs?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -15,7 +15,7 @@ struct a {\n \n impl a {\n     fn foo(&self) {\n-        let a { x, y } = self.d; //~ ERROR attempted access of field `d`\n+        let a { x, y } = self.d; //~ ERROR no field `d` on type `&a`\n         //~^ ERROR struct `a` does not have a field named `x`\n         //~^^ ERROR struct `a` does not have a field named `y`\n         //~^^^ ERROR pattern does not mention field `b`"}, {"sha": "3c355989b82f09127301e7f264b7ac10778f9430", "filename": "src/test/compile-fail/union/union-suggest-field.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Funion%2Funion-suggest-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Funion%2Funion-suggest-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-suggest-field.rs?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -22,8 +22,8 @@ fn main() {\n     let u = U { principle: 0 };\n     //~^ ERROR union `U` has no field named `principle`\n     //~| NOTE field does not exist - did you mean `principal`?\n-    let w = u.principial; //~ ERROR attempted access of field `principial` on type `U`\n-                          //~^ HELP did you mean `principal`?\n+    let w = u.principial; //~ ERROR no field `principial` on type `U`\n+                          //~^ did you mean `principal`?\n \n     let y = u.calculate; //~ ERROR attempted to take value of method `calculate` on type `U`\n                          //~^ HELP maybe a `()` to call it is missing?"}, {"sha": "15b304c69baf58413355c20056396f3acf9693ad", "filename": "src/test/compile-fail/unsafe-fn-autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Funsafe-fn-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fcompile-fail%2Funsafe-fn-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-fn-autoderef.rs?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -26,7 +26,7 @@ fn f(p: *const Rec) -> isize {\n     // are prohibited by various checks, such as that the enum is\n     // instantiable and so forth).\n \n-    return p.f; //~ ERROR attempted access of field `f` on type `*const Rec`\n+    return p.f; //~ ERROR no field `f` on type `*const Rec`\n }\n \n fn main() {"}, {"sha": "cb43d1274058484a7e25b20a3da3c788cb59ef6e", "filename": "src/test/incremental/struct_change_field_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -39,13 +39,13 @@ pub fn use_X() -> u32 {\n     let x: X = X { x: 22 };\n     //[cfail2]~^ ERROR struct `X` has no field named `x`\n     x.x as u32\n-    //[cfail2]~^ ERROR attempted access of field `x`\n+    //[cfail2]~^ ERROR no field `x` on type `X`\n }\n \n #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"cfail2\")]\n pub fn use_EmbedX(embed: EmbedX) -> u32 {\n     embed.x.x as u32\n-    //[cfail2]~^ ERROR attempted access of field `x`\n+    //[cfail2]~^ ERROR no field `x` on type `X`\n }\n \n #[rustc_clean(label=\"TypeckItemBody\", cfg=\"cfail2\")]"}, {"sha": "cd0d0951abf8a7dad94a6d87c430363b0664945f", "filename": "src/test/ui/did_you_mean/issue-36798.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.rs?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    bar: u8\n+}\n+\n+fn main() {\n+    let f = Foo { bar: 22 };\n+    f.baz;\n+}"}, {"sha": "c124747c801d87dcb595a4436541dd0dec905e7e", "filename": "src/test/ui/did_you_mean/issue-36798.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798.stderr?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -0,0 +1,8 @@\n+error: no field `baz` on type `Foo`\n+  --> $DIR/issue-36798.rs:17:7\n+   |\n+17 |     f.baz;\n+   |       ^^^ did you mean `bar`?\n+\n+error: aborting due to previous error\n+"}, {"sha": "2970a325a6af823eef177c6aaef02401cad40ecc", "filename": "src/test/ui/did_you_mean/issue-36798_unknown_field.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.rs?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    bar: u8\n+}\n+\n+fn main() {\n+    let f = Foo { bar: 22 };\n+    f.zz;\n+}"}, {"sha": "4e02f8bd0cfb2d1a81087215074cd7ebfdbc7ff5", "filename": "src/test/ui/did_you_mean/issue-36798_unknown_field.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -0,0 +1,8 @@\n+error: no field `zz` on type `Foo`\n+  --> $DIR/issue-36798_unknown_field.rs:17:7\n+   |\n+17 |     f.zz;\n+   |       ^^ unknown field\n+\n+error: aborting due to previous error\n+"}, {"sha": "48f9bac906ecf56a0108f03059234f9f346e47a8", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr?ref=5a4ecb4a0cae6b7a63abb1abb112a15008fcce9c", "patch": "@@ -7,11 +7,11 @@ error: no method named `fake` found for type `{integer}` in the current scope\n 50 |     fake_method_stmt!();\n    |     -------------------- in this macro invocation\n \n-error: attempted access of field `fake` on type `{integer}`, but no field with that name was found\n-  --> $DIR/macro-backtrace-invalid-internals.rs:21:11\n+error: no field `fake` on type `{integer}`\n+  --> $DIR/macro-backtrace-invalid-internals.rs:21:13\n    |\n 21 |           1.fake\n-   |           ^^^^^^\n+   |             ^^^^\n ...\n 51 |     fake_field_stmt!();\n    |     ------------------- in this macro invocation\n@@ -34,11 +34,11 @@ error: no method named `fake` found for type `{integer}` in the current scope\n 54 |     let _ = fake_method_expr!();\n    |             ------------------- in this macro invocation\n \n-error: attempted access of field `fake` on type `{integer}`, but no field with that name was found\n-  --> $DIR/macro-backtrace-invalid-internals.rs:39:11\n+error: no field `fake` on type `{integer}`\n+  --> $DIR/macro-backtrace-invalid-internals.rs:39:13\n    |\n 39 |           1.fake\n-   |           ^^^^^^\n+   |             ^^^^\n ...\n 55 |     let _ = fake_field_expr!();\n    |             ------------------ in this macro invocation"}]}