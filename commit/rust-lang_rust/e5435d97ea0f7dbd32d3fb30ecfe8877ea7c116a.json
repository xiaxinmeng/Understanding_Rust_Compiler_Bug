{"sha": "e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NDM1ZDk3ZWEwZjdkYmQzMmQzZmIzMGVjZmU4ODc3ZWE3YzExNmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-05T22:14:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-05T22:14:40Z"}, "message": "Rollup merge of #58894 - GuillaumeGomez:invalid-lifetime-bounds, r=estebank\n\nFix invalid bounds string generation in rustdoc\n\nFixes #58737.\n\nVery weird and I'm not sure this is the best fix around. However, trying to fix it beforehand seems overly complicated compared to the gain (in `clean`, it wouldn't change anything since we **have to** return something so that wouldn't work, and in `hir`, I'm afraid I'd break something else for very little gain).\n\nAlso, I wasn't able to make a small code to reproduce the issue. The only way to test is to document `crossbeam` directly and check the `Scope` struct...\n\nr? @QuietMisdreavus", "tree": {"sha": "680f321c74af3147c7e851579271ae97e0e6a927", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/680f321c74af3147c7e851579271ae97e0e6a927"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcp9NQCRBK7hj4Ov3rIwAAdHIIAKHrqKU6Vj1jhf+vAvgd+Ayz\nl4PlilJwSaFjr1y71U73Iq3BWIyq8hq3gxrvMo+1HCZgqd1ztPgyDHw+glKelh4j\np4+X1Uw389FW1FDf8KCnXZ7jQafiRAwOBA/NVuVimDyMOzNGnnNlvNS9taGeso92\nFLPFlDwcW2zEqXQSx/rKaj3iaMWULV/+xNFl/HP/1dhtg668f81O158i7i5l5frU\nJb0IhEItj1aZNAq0Tdy0Yyd6s4piSQx5p9lZshtkCvL6hLUSJ/bKA32dUbiHo33F\neYi6jCBpebf+EfniWwYpNHmiljziBphX2EJT3J2ai7Sc2UOK6P9kmJhnp4uXn84=\n=jSKp\n-----END PGP SIGNATURE-----\n", "payload": "tree 680f321c74af3147c7e851579271ae97e0e6a927\nparent acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200\nparent c966c458975cc6987f83440206bdedd3cab298b6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1554502480 +0200\ncommitter GitHub <noreply@github.com> 1554502480 +0200\n\nRollup merge of #58894 - GuillaumeGomez:invalid-lifetime-bounds, r=estebank\n\nFix invalid bounds string generation in rustdoc\n\nFixes #58737.\n\nVery weird and I'm not sure this is the best fix around. However, trying to fix it beforehand seems overly complicated compared to the gain (in `clean`, it wouldn't change anything since we **have to** return something so that wouldn't work, and in `hir`, I'm afraid I'd break something else for very little gain).\n\nAlso, I wasn't able to make a small code to reproduce the issue. The only way to test is to document `crossbeam` directly and check the `Scope` struct...\n\nr? @QuietMisdreavus\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a", "html_url": "https://github.com/rust-lang/rust/commit/e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200", "url": "https://api.github.com/repos/rust-lang/rust/commits/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200", "html_url": "https://github.com/rust-lang/rust/commit/acd8dd6a50d505057a7d7ad8d0d7a4c2bd274200"}, {"sha": "c966c458975cc6987f83440206bdedd3cab298b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c966c458975cc6987f83440206bdedd3cab298b6", "html_url": "https://github.com/rust-lang/rust/commit/c966c458975cc6987f83440206bdedd3cab298b6"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "0cd7fe9159493a98f4aca418ff0c5b490da37f59", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a", "patch": "@@ -1918,7 +1918,10 @@ fn explicit_predicates_of<'a, 'tcx>(\n         }\n     }\n \n-    let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n+    let hir_id = match tcx.hir().as_local_hir_id(def_id) {\n+        Some(hir_id) => hir_id,\n+        None => return tcx.predicates_of(def_id),\n+    };\n     let node = tcx.hir().get_by_hir_id(hir_id);\n \n     let mut is_trait = None;"}, {"sha": "555cb1bd64f6e16abfc39572409e538d175783a6", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a", "patch": "@@ -568,7 +568,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 (replaced.clone(), replaced.clean(self.cx))\n             });\n \n-        let full_generics = (&type_generics, &tcx.predicates_of(did));\n+        let full_generics = (&type_generics, &tcx.explicit_predicates_of(did));\n         let Generics {\n             params: mut generic_params,\n             .."}, {"sha": "570c61f1ffc99840532419e3f7013bc9ed851226", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                                      .collect();\n \n                         let ty = self.cx.get_real_ty(def_id, def_ctor, &real_name, generics);\n-                        let predicates = infcx.tcx.predicates_of(impl_def_id);\n+                        let predicates = infcx.tcx.explicit_predicates_of(impl_def_id);\n \n                         impls.push(Item {\n                             source: infcx.tcx.def_span(impl_def_id).clean(self.cx),"}, {"sha": "8da71cf708aa085fac99d61aa8644c11711fbc52", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a", "patch": "@@ -228,7 +228,7 @@ fn build_external_function(cx: &DocContext<'_>, did: DefId) -> clean::Function {\n }\n \n fn build_enum(cx: &DocContext<'_>, did: DefId) -> clean::Enum {\n-    let predicates = cx.tcx.predicates_of(did);\n+    let predicates = cx.tcx.explicit_predicates_of(did);\n \n     clean::Enum {\n         generics: (cx.tcx.generics_of(did), &predicates).clean(cx),\n@@ -238,7 +238,7 @@ fn build_enum(cx: &DocContext<'_>, did: DefId) -> clean::Enum {\n }\n \n fn build_struct(cx: &DocContext<'_>, did: DefId) -> clean::Struct {\n-    let predicates = cx.tcx.predicates_of(did);\n+    let predicates = cx.tcx.explicit_predicates_of(did);\n     let variant = cx.tcx.adt_def(did).non_enum_variant();\n \n     clean::Struct {\n@@ -254,7 +254,7 @@ fn build_struct(cx: &DocContext<'_>, did: DefId) -> clean::Struct {\n }\n \n fn build_union(cx: &DocContext<'_>, did: DefId) -> clean::Union {\n-    let predicates = cx.tcx.predicates_of(did);\n+    let predicates = cx.tcx.explicit_predicates_of(did);\n     let variant = cx.tcx.adt_def(did).non_enum_variant();\n \n     clean::Union {\n@@ -266,7 +266,7 @@ fn build_union(cx: &DocContext<'_>, did: DefId) -> clean::Union {\n }\n \n fn build_type_alias(cx: &DocContext<'_>, did: DefId) -> clean::Typedef {\n-    let predicates = cx.tcx.predicates_of(did);\n+    let predicates = cx.tcx.explicit_predicates_of(did);\n \n     clean::Typedef {\n         type_: cx.tcx.type_of(did).clean(cx),\n@@ -325,7 +325,7 @@ pub fn build_impl(cx: &DocContext<'_>, did: DefId, ret: &mut Vec<clean::Item>) {\n         }\n     }\n \n-    let predicates = tcx.predicates_of(did);\n+    let predicates = tcx.explicit_predicates_of(did);\n     let (trait_items, generics) = if let Some(hir_id) = tcx.hir().as_local_hir_id(did) {\n         match tcx.hir().expect_item_by_hir_id(hir_id).node {\n             hir::ItemKind::Impl(.., ref gen, _, _, ref item_ids) => {"}, {"sha": "e994c661fdceb9f229691ac72210131bc7e46ba8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a", "patch": "@@ -2288,7 +2288,7 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n             }\n             ty::AssociatedKind::Method => {\n                 let generics = (cx.tcx.generics_of(self.def_id),\n-                                &cx.tcx.predicates_of(self.def_id)).clean(cx);\n+                                &cx.tcx.explicit_predicates_of(self.def_id)).clean(cx);\n                 let sig = cx.tcx.fn_sig(self.def_id);\n                 let mut decl = (self.def_id, sig).clean(cx);\n \n@@ -2361,7 +2361,7 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                     // are actually located on the trait/impl itself, so we need to load\n                     // all of the generics from there and then look for bounds that are\n                     // applied to this associated type in question.\n-                    let predicates = cx.tcx.predicates_of(did);\n+                    let predicates = cx.tcx.explicit_predicates_of(did);\n                     let generics = (cx.tcx.generics_of(did), &predicates).clean(cx);\n                     let mut bounds = generics.where_predicates.iter().filter_map(|pred| {\n                         let (name, self_type, trait_, bounds) = match *pred {\n@@ -3069,7 +3069,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::Opaque(def_id, substs) => {\n                 // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n                 // by looking up the projections associated with the def_id.\n-                let predicates_of = cx.tcx.predicates_of(def_id);\n+                let predicates_of = cx.tcx.explicit_predicates_of(def_id);\n                 let substs = cx.tcx.lift(&substs).expect(\"Opaque lift failed\");\n                 let bounds = predicates_of.instantiate(cx.tcx, substs);\n                 let mut regions = vec![];"}, {"sha": "f530d8a654f011dd440e2122ad49c317ad685282", "filename": "src/test/rustdoc/useless_lifetime_bound.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a/src%2Ftest%2Frustdoc%2Fuseless_lifetime_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a/src%2Ftest%2Frustdoc%2Fuseless_lifetime_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fuseless_lifetime_bound.rs?ref=e5435d97ea0f7dbd32d3fb30ecfe8877ea7c116a", "patch": "@@ -0,0 +1,13 @@\n+use std::marker::PhantomData;\n+\n+// @has useless_lifetime_bound/struct.Scope.html\n+// @!has - '//*[@class=\"rust struct\"]' \"'env: 'env\"\n+pub struct Scope<'env> {\n+    _marker: PhantomData<&'env mut &'env ()>,\n+}\n+\n+// @has useless_lifetime_bound/struct.Scope.html\n+// @!has - '//*[@class=\"rust struct\"]' \"T: 'a + 'a\"\n+pub struct SomeStruct<'a, T: 'a> {\n+    _marker: PhantomData<&'a T>,\n+}"}]}