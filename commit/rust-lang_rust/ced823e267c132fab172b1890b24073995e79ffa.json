{"sha": "ced823e267c132fab172b1890b24073995e79ffa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZDgyM2UyNjdjMTMyZmFiMTcyYjE4OTBiMjQwNzM5OTVlNzlmZmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-07T10:52:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-07T10:52:26Z"}, "message": "Auto merge of #41785 - Mark-Simulacrum:issue-41783, r=GuillaumeGomez\n\nAllow # to appear in rustdoc code output.\n\n\"##\" at the start of a trimmed rustdoc line is now cut to \"#\" and then\nshown. If the user wanted to show \"##\", they can type \"###\".\n\nI'm somewhat concerned about the potential implications for users, since this does make a potentially backwards-incompatible change. Previously, `##` had no special handling, and now we do change it. However, I'm not really sure what we can do here to improve this, and I can't think of any cases where `##` would likely be correct in a code block, though of course I could be wrong.\n\nFixes #41783.", "tree": {"sha": "117de1fef83db2e8e211d08125fb33d28d3eb14d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/117de1fef83db2e8e211d08125fb33d28d3eb14d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ced823e267c132fab172b1890b24073995e79ffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ced823e267c132fab172b1890b24073995e79ffa", "html_url": "https://github.com/rust-lang/rust/commit/ced823e267c132fab172b1890b24073995e79ffa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ced823e267c132fab172b1890b24073995e79ffa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "892be3f30791aeec6ca408446b4505696eb21212", "url": "https://api.github.com/repos/rust-lang/rust/commits/892be3f30791aeec6ca408446b4505696eb21212", "html_url": "https://github.com/rust-lang/rust/commit/892be3f30791aeec6ca408446b4505696eb21212"}, {"sha": "ffe12b1274732e791e117d8cc79b3db0f4161956", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffe12b1274732e791e117d8cc79b3db0f4161956", "html_url": "https://github.com/rust-lang/rust/commit/ffe12b1274732e791e117d8cc79b3db0f4161956"}], "stats": {"total": 100, "additions": 73, "deletions": 27}, "files": [{"sha": "ec4a23b0417bcf70b3315a81dbe9f86dc0b8fc43", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 48, "deletions": 27, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/ced823e267c132fab172b1890b24073995e79ffa/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced823e267c132fab172b1890b24073995e79ffa/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=ced823e267c132fab172b1890b24073995e79ffa", "patch": "@@ -66,18 +66,47 @@ pub struct MarkdownHtml<'a>(pub &'a str, pub RenderType);\n /// A unit struct like `Markdown`, that renders only the first paragraph.\n pub struct MarkdownSummaryLine<'a>(pub &'a str);\n \n-/// Returns Some(code) if `s` is a line that should be stripped from\n-/// documentation but used in example code. `code` is the portion of\n-/// `s` that should be used in tests. (None for lines that should be\n-/// left as-is.)\n-fn stripped_filtered_line<'a>(s: &'a str) -> Option<&'a str> {\n+/// Controls whether a line will be hidden or shown in HTML output.\n+///\n+/// All lines are used in documentation tests.\n+enum Line<'a> {\n+    Hidden(&'a str),\n+    Shown(&'a str),\n+}\n+\n+impl<'a> Line<'a> {\n+    fn for_html(self) -> Option<&'a str> {\n+        match self {\n+            Line::Shown(l) => Some(l),\n+            Line::Hidden(_) => None,\n+        }\n+    }\n+\n+    fn for_code(self) -> &'a str {\n+        match self {\n+            Line::Shown(l) |\n+            Line::Hidden(l) => l,\n+        }\n+    }\n+}\n+\n+// FIXME: There is a minor inconsistency here. For lines that start with ##, we\n+// have no easy way of removing a potential single space after the hashes, which\n+// is done in the single # case. This inconsistency seems okay, if non-ideal. In\n+// order to fix it we'd have to iterate to find the first non-# character, and\n+// then reallocate to remove it; which would make us return a String.\n+fn map_line(s: &str) -> Line {\n     let trimmed = s.trim();\n-    if trimmed == \"#\" {\n-        Some(\"\")\n+    if trimmed.starts_with(\"##\") {\n+        Line::Shown(&trimmed[1..])\n     } else if trimmed.starts_with(\"# \") {\n-        Some(&trimmed[2..])\n+        // # text\n+        Line::Hidden(&trimmed[2..])\n+    } else if trimmed == \"#\" {\n+        // We cannot handle '#text' because it could be #[attr].\n+        Line::Hidden(\"\")\n     } else {\n-        None\n+        Line::Shown(s)\n     }\n }\n \n@@ -148,9 +177,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n                 _ => {}\n             }\n         }\n-        let lines = origtext.lines().filter(|l| {\n-            stripped_filtered_line(*l).is_none()\n-        });\n+        let lines = origtext.lines().filter_map(|l| map_line(l).for_html());\n         let text = lines.collect::<Vec<&str>>().join(\"\\n\");\n         PLAYGROUND.with(|play| {\n             // insert newline to clearly separate it from the\n@@ -160,9 +187,9 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n                 if url.is_empty() {\n                     return None;\n                 }\n-                let test = origtext.lines().map(|l| {\n-                    stripped_filtered_line(l).unwrap_or(l)\n-                }).collect::<Vec<&str>>().join(\"\\n\");\n+                let test = origtext.lines()\n+                    .map(|l| map_line(l).for_code())\n+                    .collect::<Vec<&str>>().join(\"\\n\");\n                 let krate = krate.as_ref().map(|s| &**s);\n                 let test = test::maketest(&test, krate, false,\n                                         &Default::default());\n@@ -543,9 +570,7 @@ pub fn render(w: &mut fmt::Formatter,\n                 }\n             };\n \n-            let lines = origtext.lines().filter(|l| {\n-                stripped_filtered_line(*l).is_none()\n-            });\n+            let lines = origtext.lines().filter_map(|l| map_line(l).for_html());\n             let text = lines.collect::<Vec<&str>>().join(\"\\n\");\n             if rendered { return }\n             PLAYGROUND.with(|play| {\n@@ -556,9 +581,9 @@ pub fn render(w: &mut fmt::Formatter,\n                     if url.is_empty() {\n                         return None;\n                     }\n-                    let test = origtext.lines().map(|l| {\n-                        stripped_filtered_line(l).unwrap_or(l)\n-                    }).collect::<Vec<&str>>().join(\"\\n\");\n+                    let test = origtext.lines()\n+                        .map(|l| map_line(l).for_code())\n+                        .collect::<Vec<&str>>().join(\"\\n\");\n                     let krate = krate.as_ref().map(|s| &**s);\n                     let test = test::maketest(&test, krate, false,\n                                               &Default::default());\n@@ -734,9 +759,7 @@ pub fn old_find_testable_code(doc: &str, tests: &mut ::test::Collector, position\n             let opaque = (*data).opaque as *mut hoedown_html_renderer_state;\n             let tests = &mut *((*opaque).opaque as *mut ::test::Collector);\n             let text = str::from_utf8(text).unwrap();\n-            let lines = text.lines().map(|l| {\n-                stripped_filtered_line(l).unwrap_or(l)\n-            });\n+            let lines = text.lines().map(|l| map_line(l).for_code());\n             let text = lines.collect::<Vec<&str>>().join(\"\\n\");\n             let filename = tests.get_filename();\n \n@@ -827,9 +850,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, position: Sp\n                     }\n                 }\n                 let offset = offset.unwrap_or(0);\n-                let lines = test_s.lines().map(|l| {\n-                    stripped_filtered_line(l).unwrap_or(l)\n-                });\n+                let lines = test_s.lines().map(|l| map_line(l).for_code());\n                 let text = lines.collect::<Vec<&str>>().join(\"\\n\");\n                 nb_lines += doc[prev_offset..offset].lines().count();\n                 let line = tests.get_line() + (nb_lines - 1);"}, {"sha": "3933b8bcbb8fdf6762cacf3b3be0ff0f84b4cb5e", "filename": "src/test/rustdoc/issue-41783.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ced823e267c132fab172b1890b24073995e79ffa/src%2Ftest%2Frustdoc%2Fissue-41783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced823e267c132fab172b1890b24073995e79ffa/src%2Ftest%2Frustdoc%2Fissue-41783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-41783.rs?ref=ced823e267c132fab172b1890b24073995e79ffa", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// @has issue_41783/struct.Foo.html\n+// @!has - 'space'\n+// @!has - 'comment'\n+// @has - '# <span class=\"ident\">single'\n+// @has - '#<span class=\"attribute\"># <span class=\"ident\">double</span>'\n+// @has - '#<span class=\"attribute\">#<span class=\"attribute\"># <span class=\"ident\">triple</span>'\n+\n+/// ```no_run\n+/// # # space\n+/// # comment\n+/// ## single\n+/// ### double\n+/// #### triple\n+/// ```\n+pub struct Foo;"}]}