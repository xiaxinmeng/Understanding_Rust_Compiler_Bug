{"sha": "c351107cdc378dec4f855c29a3566fbd1d2ac358", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNTExMDdjZGMzNzhkZWM0Zjg1NWMyOWEzNTY2ZmJkMWQyYWMzNTg=", "commit": {"author": {"name": "rodrimati1992", "email": "rodrimatt1985@gmail.com", "date": "2021-01-31T04:21:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-31T04:21:06Z"}, "message": "Document how `MaybeUninit<Struct>` can be initialized.", "tree": {"sha": "16329ca4987edcafb5f3c58a690310243fb63c06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16329ca4987edcafb5f3c58a690310243fb63c06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c351107cdc378dec4f855c29a3566fbd1d2ac358", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgFjAyCRBK7hj4Ov3rIwAAdHIIAFK6G+C9qdddDLmzuR0nU4Nj\ncUKDpPgOUUgscs2FJDLV924YKtyb4PtXxYCGukmdFxy0rFsqxMserj7a0fW0Gaav\n29PkBt/0Ch2lNwQF/28AF2gOmm4ui6kejlwlezw9ErUY3SNt92HQb5hBZ1ZnEIF5\nVY+N+4drBfsi4umQa77jCwprdOxMuJWCOUo3RSpS6TDpdV6frpmkiLuG1BhHPYFs\nAHXCNjuglPrSc9oYDoEl1NSWScRpiumiL25s7VVmXrEiTSUUVajGDXr5SSe9Hyei\newoAEyJpKQLWRYyeflSbJp2gbjbBXdUBc0AbobCyVW1LP7XQrWnBcUgngyj9uU8=\n=B7Hb\n-----END PGP SIGNATURE-----\n", "payload": "tree 16329ca4987edcafb5f3c58a690310243fb63c06\nparent b3897e3d1302391ed02efbac1dce8073646b8173\nauthor rodrimati1992 <rodrimatt1985@gmail.com> 1612066866 -0300\ncommitter GitHub <noreply@github.com> 1612066866 -0300\n\nDocument how `MaybeUninit<Struct>` can be initialized."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c351107cdc378dec4f855c29a3566fbd1d2ac358", "html_url": "https://github.com/rust-lang/rust/commit/c351107cdc378dec4f855c29a3566fbd1d2ac358", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c351107cdc378dec4f855c29a3566fbd1d2ac358/comments", "author": {"login": "rodrimati1992", "id": 18036327, "node_id": "MDQ6VXNlcjE4MDM2MzI3", "avatar_url": "https://avatars.githubusercontent.com/u/18036327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodrimati1992", "html_url": "https://github.com/rodrimati1992", "followers_url": "https://api.github.com/users/rodrimati1992/followers", "following_url": "https://api.github.com/users/rodrimati1992/following{/other_user}", "gists_url": "https://api.github.com/users/rodrimati1992/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodrimati1992/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodrimati1992/subscriptions", "organizations_url": "https://api.github.com/users/rodrimati1992/orgs", "repos_url": "https://api.github.com/users/rodrimati1992/repos", "events_url": "https://api.github.com/users/rodrimati1992/events{/privacy}", "received_events_url": "https://api.github.com/users/rodrimati1992/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3897e3d1302391ed02efbac1dce8073646b8173", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3897e3d1302391ed02efbac1dce8073646b8173", "html_url": "https://github.com/rust-lang/rust/commit/b3897e3d1302391ed02efbac1dce8073646b8173"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "c85b5655bdb0cccc3164b1ea66d09d41100c045b", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c351107cdc378dec4f855c29a3566fbd1d2ac358/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c351107cdc378dec4f855c29a3566fbd1d2ac358/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=c351107cdc378dec4f855c29a3566fbd1d2ac358", "patch": "@@ -172,10 +172,41 @@ use crate::ptr;\n ///\n /// ## Initializing a struct field-by-field\n ///\n-/// There is currently no supported way to create a raw pointer or reference\n-/// to a field of a struct inside `MaybeUninit<Struct>`. That means it is not possible\n-/// to create a struct by calling `MaybeUninit::uninit::<Struct>()` and then writing\n-/// to its fields.\n+/// You can use `MaybeUninit<T>`, and the [`std::ptr::addr_of_mut`] macro, to initialize structs field by field:\n+/// \n+/// ```rust\n+/// use std::mem::MaybeUninit;\n+/// use std::ptr::addr_of_mut;\n+/// \n+/// #[derive(Debug, PartialEq)]\n+/// pub struct Foo {\n+///     name: String,\n+///     list: Vec<u8>,\n+/// }\n+/// \n+/// let foo = {\n+///     let mut uninit: MaybeUninit<Foo> = MaybeUninit::uninit();\n+///     let ptr = uninit.as_mut_ptr();\n+/// \n+///     // Initializing the `name` field\n+///     unsafe { addr_of_mut!((*ptr).name).write(\"Bob\".to_string()); }\n+/// \n+///     // Initializing the `list` field\n+///     // If there was a panic here, then the `String` in the `name` field would be leaked.\n+///     unsafe { addr_of_mut!((*ptr).list).write(vec![0, 1, 2]); }\n+/// \n+///     // All the fields are initialized, so we call `assume_init` to get an initialized Foo.\n+///     unsafe { uninit.assume_init() }\n+/// };\n+/// \n+/// assert_eq!(\n+///     foo,\n+///     Foo {\n+///         name: \"Bob\".to_string(),\n+///         list: vec![0, 1, 2]\n+///     }\n+/// );\n+/// ```\n ///\n /// [ub]: ../../reference/behavior-considered-undefined.html\n ///"}]}