{"sha": "3a5c7f52cc089214c936f409b3f97d6bda377d84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNWM3ZjUyY2MwODkyMTRjOTM2ZjQwOWIzZjk3ZDZiZGEzNzdkODQ=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-08-17T17:20:37Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-08-17T18:04:53Z"}, "message": "Change node_id to def_id in self_info.", "tree": {"sha": "fb51146f78574ad90af315618526559aacb3fc85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb51146f78574ad90af315618526559aacb3fc85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a5c7f52cc089214c936f409b3f97d6bda377d84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5c7f52cc089214c936f409b3f97d6bda377d84", "html_url": "https://github.com/rust-lang/rust/commit/3a5c7f52cc089214c936f409b3f97d6bda377d84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a5c7f52cc089214c936f409b3f97d6bda377d84/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab4b014cfaf6dff5b450f4a1772e9993550fe38", "html_url": "https://github.com/rust-lang/rust/commit/3ab4b014cfaf6dff5b450f4a1772e9993550fe38"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "3c7b6de7702d285c4f3ca92eca0856b093e10ffe", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3a5c7f52cc089214c936f409b3f97d6bda377d84/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5c7f52cc089214c936f409b3f97d6bda377d84/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=3a5c7f52cc089214c936f409b3f97d6bda377d84", "patch": "@@ -79,7 +79,7 @@ import std::map::str_hash;\n \n type self_info = {\n     self_ty: ty::t,\n-    node_id: ast::node_id,\n+    def_id: ast::def_id,\n     explicit_self: ast::self_ty_\n };\n \n@@ -401,7 +401,8 @@ fn check_struct(ccx: @crate_ctxt, struct_def: @ast::struct_def,\n     let self_ty = ty::node_id_to_type(tcx, id);\n \n     do option::iter(struct_def.ctor) |ctor| {\n-        let class_t = {self_ty: self_ty, node_id: id,\n+        let class_t = {self_ty: self_ty,\n+                       def_id: local_def(id),\n                        explicit_self: ast::sty_by_ref};\n         // typecheck the ctor\n         check_bare_fn(ccx, ctor.node.dec,\n@@ -412,7 +413,8 @@ fn check_struct(ccx: @crate_ctxt, struct_def: @ast::struct_def,\n     }\n \n     do option::iter(struct_def.dtor) |dtor| {\n-        let class_t = {self_ty: self_ty, node_id: id,\n+        let class_t = {self_ty: self_ty,\n+                       def_id: local_def(id),\n                        explicit_self: ast::sty_by_ref};\n         // typecheck the dtor\n         check_bare_fn(ccx, ast_util::dtor_dec(),\n@@ -424,7 +426,8 @@ fn check_struct(ccx: @crate_ctxt, struct_def: @ast::struct_def,\n \n     // typecheck the methods\n     for struct_def.methods.each |m| {\n-        check_method(ccx, m, {self_ty: self_ty, node_id: id,\n+        check_method(ccx, m, {self_ty: self_ty,\n+                              def_id: local_def(id),\n                               explicit_self: m.self_ty.node});\n     }\n     // Check that there's at least one field\n@@ -450,7 +453,8 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n                *it.ident, it.id, rp};\n         let self_ty = ccx.to_ty(rscope::type_rscope(rp), ty);\n         for ms.each |m| {\n-            let self_info = {self_ty: self_ty, node_id: it.id,\n+            let self_info = {self_ty: self_ty,\n+                             def_id: local_def(it.id),\n                              explicit_self: m.self_ty.node };\n             check_method(ccx, m, self_info)\n         }\n@@ -464,7 +468,7 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n               }\n               provided(m) => {\n                 let self_info = {self_ty: ty::mk_self(ccx.tcx),\n-                                 node_id: it.id,\n+                                 def_id: local_def(it.id),\n                                  explicit_self: m.self_ty.node};\n                 check_method(ccx, m, self_info);\n               }"}, {"sha": "8cbc9e65d8ec29189c681b928234373b17e27d74", "filename": "src/rustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a5c7f52cc089214c936f409b3f97d6bda377d84/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5c7f52cc089214c936f409b3f97d6bda377d84/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=3a5c7f52cc089214c936f409b3f97d6bda377d84", "patch": "@@ -58,7 +58,7 @@ fn replace_bound_regions_in_fn_ty(\n            ty_to_str(tcx, t_fn)};\n \n \n-    // Glue updated self_ty back together with its original node_id.\n+    // Glue updated self_ty back together with its original def_id.\n     let new_self_info = match self_info {\n         some(s) => match check t_self {\n           some(t) => some({self_ty: t with s})"}]}