{"sha": "a5561ce2b94c33add47d288e1826183c511ec9fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NTYxY2UyYjk0YzMzYWRkNDdkMjg4ZTE4MjYxODNjNTExZWM5ZmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-01-22T20:53:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-01-27T07:47:39Z"}, "message": "rustc: Don't export builtins/panic/alloc syms\n\nThis hides symbols from various unstable and implementation-detail\ncrates of the standard library. Although typically transitive exported\n`pub extern` functions are exported from cdylibs, these crates aren't\nnecessary as they're all implementation details.\n\nCloses #34493", "tree": {"sha": "14e4e5f4daabb28b66b7c4a58d7f08e930d2a3b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14e4e5f4daabb28b66b7c4a58d7f08e930d2a3b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5561ce2b94c33add47d288e1826183c511ec9fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5561ce2b94c33add47d288e1826183c511ec9fa", "html_url": "https://github.com/rust-lang/rust/commit/a5561ce2b94c33add47d288e1826183c511ec9fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5561ce2b94c33add47d288e1826183c511ec9fa/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "025fb7de09dfcf5fbc19c5d1b6bed168ac987e6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/025fb7de09dfcf5fbc19c5d1b6bed168ac987e6c", "html_url": "https://github.com/rust-lang/rust/commit/025fb7de09dfcf5fbc19c5d1b6bed168ac987e6c"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "1143df0c6302d85e022ea634ed0e1812b55af838", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a5561ce2b94c33add47d288e1826183c511ec9fa/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5561ce2b94c33add47d288e1826183c511ec9fa/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=a5561ce2b94c33add47d288e1826183c511ec9fa", "patch": "@@ -181,4 +181,15 @@ fn main() {\n     } else if !target.contains(\"windows\") && !target.contains(\"musl\") {\n         println!(\"cargo:rustc-link-lib=pthread\");\n     }\n+\n+    // The pthread_atfork symbols is used by jemalloc on android but the really\n+    // old android we're building on doesn't have them defined, so just make\n+    // sure the symbols are available.\n+    if target.contains(\"androideabi\") {\n+        println!(\"cargo:rerun-if-changed=pthread_atfork_dummy.c\");\n+        gcc::Config::new()\n+            .flag(\"-fvisibility=hidden\")\n+            .file(\"pthread_atfork_dummy.c\")\n+            .compile(\"libpthread_atfork_dummy.a\");\n+    }\n }"}, {"sha": "fc8a5455d1d07406a8e4557fd260534f441c3859", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5561ce2b94c33add47d288e1826183c511ec9fa/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5561ce2b94c33add47d288e1826183c511ec9fa/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=a5561ce2b94c33add47d288e1826183c511ec9fa", "patch": "@@ -143,7 +143,7 @@ mod imp {\n     // we're building on doesn't have them defined, so just make sure the symbols\n     // are available.\n     #[no_mangle]\n-    #[cfg(target_os = \"android\")]\n+    #[cfg(all(target_os = \"android\", not(cargobuild)))]\n     pub extern \"C\" fn pthread_atfork(_prefork: *mut u8,\n                                      _postfork_parent: *mut u8,\n                                      _postfork_child: *mut u8)"}, {"sha": "f798afe741f6938619a5c88400c298249ad8cb15", "filename": "src/liballoc_jemalloc/pthread_atfork_dummy.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5561ce2b94c33add47d288e1826183c511ec9fa/src%2Fliballoc_jemalloc%2Fpthread_atfork_dummy.c", "raw_url": "https://github.com/rust-lang/rust/raw/a5561ce2b94c33add47d288e1826183c511ec9fa/src%2Fliballoc_jemalloc%2Fpthread_atfork_dummy.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fpthread_atfork_dummy.c?ref=a5561ce2b94c33add47d288e1826183c511ec9fa", "patch": "@@ -0,0 +1,6 @@\n+// See comments in build.rs for why this exists\n+int pthread_atfork(void* prefork,\n+                   void* postfork_parent,\n+                   void* postfork_child) {\n+  return 0;\n+}"}, {"sha": "bea3ca8df70e0babf243b0c40c210ddbe75bc4ae", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a5561ce2b94c33add47d288e1826183c511ec9fa/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5561ce2b94c33add47d288e1826183c511ec9fa/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=a5561ce2b94c33add47d288e1826183c511ec9fa", "patch": "@@ -81,19 +81,50 @@ impl ExportedSymbols {\n         for cnum in scx.sess().cstore.crates() {\n             debug_assert!(cnum != LOCAL_CRATE);\n \n+            // If this crate is a plugin and/or a custom derive crate, then\n+            // we're not even going to link those in so we skip those crates.\n             if scx.sess().cstore.plugin_registrar_fn(cnum).is_some() ||\n                scx.sess().cstore.derive_registrar_fn(cnum).is_some() {\n                 continue;\n             }\n \n+            // Check to see if this crate is a \"special runtime crate\". These\n+            // crates, implementation details of the standard library, typically\n+            // have a bunch of `pub extern` and `#[no_mangle]` functions as the\n+            // ABI between them. We don't want their symbols to have a `C`\n+            // export level, however, as they're just implementation details.\n+            // Down below we'll hardwire all of the symbols to the `Rust` export\n+            // level instead.\n+            let special_runtime_crate =\n+                scx.sess().cstore.is_allocator(cnum) ||\n+                scx.sess().cstore.is_panic_runtime(cnum) ||\n+                scx.sess().cstore.is_compiler_builtins(cnum);\n+\n             let crate_exports = scx\n                 .sess()\n                 .cstore\n                 .exported_symbols(cnum)\n                 .iter()\n                 .map(|&def_id| {\n                     let name = Instance::mono(scx, def_id).symbol_name(scx);\n-                    let export_level = export_level(scx, def_id);\n+                    let export_level = if special_runtime_crate {\n+                        // We can probably do better here by just ensuring that\n+                        // it has hidden visibility rather than public\n+                        // visibility, as this is primarily here to ensure it's\n+                        // not stripped during LTO.\n+                        //\n+                        // In general though we won't link right if these\n+                        // symbols are stripped, and LTO currently strips them.\n+                        if name == \"rust_eh_personality\" ||\n+                           name == \"rust_eh_register_frames\" ||\n+                           name == \"rust_eh_unregister_frames\" {\n+                            SymbolExportLevel::C\n+                        } else {\n+                            SymbolExportLevel::Rust\n+                        }\n+                    } else {\n+                        export_level(scx, def_id)\n+                    };\n                     debug!(\"EXPORTED SYMBOL (re-export): {} ({:?})\", name, export_level);\n                     (name, export_level)\n                 })"}]}