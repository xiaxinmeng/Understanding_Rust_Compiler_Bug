{"sha": "a6f310ed0e22a422e7001efbe7e4bf2a0c9a0eff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZjMxMGVkMGUyMmE0MjJlNzAwMWVmYmU3ZTRiZjJhMGM5YTBlZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-06T15:31:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-06T15:31:01Z"}, "message": "Auto merge of #5139 - lzutao:linecount, r=llogiq\n\ndev: Use bytecount for faster line count\n\nchangelog: none", "tree": {"sha": "8fdfab8eccf00d8bb32d5efe848344dda326c4ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fdfab8eccf00d8bb32d5efe848344dda326c4ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6f310ed0e22a422e7001efbe7e4bf2a0c9a0eff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6f310ed0e22a422e7001efbe7e4bf2a0c9a0eff", "html_url": "https://github.com/rust-lang/rust/commit/a6f310ed0e22a422e7001efbe7e4bf2a0c9a0eff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6f310ed0e22a422e7001efbe7e4bf2a0c9a0eff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75e983a5187bbce1ca54613620f432459a16e5d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/75e983a5187bbce1ca54613620f432459a16e5d9", "html_url": "https://github.com/rust-lang/rust/commit/75e983a5187bbce1ca54613620f432459a16e5d9"}, {"sha": "8794e41728756e2a284ebcb9c666c6efcda62f8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8794e41728756e2a284ebcb9c666c6efcda62f8b", "html_url": "https://github.com/rust-lang/rust/commit/8794e41728756e2a284ebcb9c666c6efcda62f8b"}], "stats": {"total": 58, "additions": 27, "deletions": 31}, "files": [{"sha": "c8aa1e79f34c98f7ff0ab1c7d9139cd09c98a742", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6f310ed0e22a422e7001efbe7e4bf2a0c9a0eff/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a6f310ed0e22a422e7001efbe7e4bf2a0c9a0eff/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=a6f310ed0e22a422e7001efbe7e4bf2a0c9a0eff", "patch": "@@ -5,6 +5,7 @@ authors = [\"Philipp Hansch <dev@phansch.net>\"]\n edition = \"2018\"\n \n [dependencies]\n+bytecount = \"0.6\"\n clap = \"2.33\"\n itertools = \"0.8\"\n regex = \"1\""}, {"sha": "041ee6911377780697c5d5d065459df0595583c4", "filename": "clippy_dev/src/stderr_length_check.rs", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a6f310ed0e22a422e7001efbe7e4bf2a0c9a0eff/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f310ed0e22a422e7001efbe7e4bf2a0c9a0eff/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fstderr_length_check.rs?ref=a6f310ed0e22a422e7001efbe7e4bf2a0c9a0eff", "patch": "@@ -1,54 +1,49 @@\n use std::ffi::OsStr;\n-use walkdir::WalkDir;\n+use std::fs;\n+use std::path::{Path, PathBuf};\n \n-use std::fs::File;\n-use std::io::prelude::*;\n+use walkdir::WalkDir;\n \n // The maximum length allowed for stderr files.\n //\n // We limit this because small files are easier to deal with than bigger files.\n-const LIMIT: usize = 200;\n+const LENGTH_LIMIT: usize = 200;\n \n pub fn check() {\n-    let stderr_files = stderr_files();\n-    let exceeding_files = exceeding_stderr_files(stderr_files).collect::<Vec<String>>();\n+    let exceeding_files: Vec<_> = exceeding_stderr_files();\n \n     if !exceeding_files.is_empty() {\n-        eprintln!(\"Error: stderr files exceeding limit of {} lines:\", LIMIT);\n+        eprintln!(\"Error: stderr files exceeding limit of {} lines:\", LENGTH_LIMIT);\n         for path in exceeding_files {\n-            println!(\"{}\", path);\n+            println!(\"{}\", path.display());\n         }\n         std::process::exit(1);\n     }\n }\n \n-fn exceeding_stderr_files(files: impl Iterator<Item = walkdir::DirEntry>) -> impl Iterator<Item = String> {\n-    files.filter_map(|file| {\n-        let path = file.path().to_str().expect(\"Could not convert path to str\").to_string();\n-        let linecount = count_linenumbers(&path);\n-        if linecount > LIMIT {\n-            Some(path)\n-        } else {\n-            None\n-        }\n-    })\n-}\n-\n-fn stderr_files() -> impl Iterator<Item = walkdir::DirEntry> {\n+fn exceeding_stderr_files() -> Vec<PathBuf> {\n     // We use `WalkDir` instead of `fs::read_dir` here in order to recurse into subdirectories.\n     WalkDir::new(\"../tests/ui\")\n         .into_iter()\n-        .filter_map(std::result::Result::ok)\n-        .filter(|f| f.path().extension() == Some(OsStr::new(\"stderr\")))\n+        .filter_map(Result::ok)\n+        .filter_map(|e| {\n+            let p = e.into_path();\n+            if p.extension() == Some(OsStr::new(\"stderr\")) && count_linenumbers(&p) > LENGTH_LIMIT {\n+                Some(p)\n+            } else {\n+                None\n+            }\n+        })\n+        .collect()\n }\n \n #[must_use]\n-fn count_linenumbers(filepath: &str) -> usize {\n-    if let Ok(mut file) = File::open(filepath) {\n-        let mut content = String::new();\n-        file.read_to_string(&mut content).expect(\"Failed to read file?\");\n-        content.lines().count()\n-    } else {\n-        0\n+fn count_linenumbers(filepath: &Path) -> usize {\n+    match fs::read(filepath) {\n+        Ok(content) => bytecount::count(&content, b'\\n'),\n+        Err(e) => {\n+            eprintln!(\"Failed to read file: {}\", e);\n+            0\n+        },\n     }\n }"}, {"sha": "e502db59e66be79afa9c3b2eb0a1650eb5845269", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6f310ed0e22a422e7001efbe7e4bf2a0c9a0eff/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f310ed0e22a422e7001efbe7e4bf2a0c9a0eff/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=a6f310ed0e22a422e7001efbe7e4bf2a0c9a0eff", "patch": "@@ -36,7 +36,7 @@ pub struct MissingDoc {\n     doc_hidden_stack: Vec<bool>,\n }\n \n-impl ::std::default::Default for MissingDoc {\n+impl Default for MissingDoc {\n     #[must_use]\n     fn default() -> Self {\n         Self::new()"}]}