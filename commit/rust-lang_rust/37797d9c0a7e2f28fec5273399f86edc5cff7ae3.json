{"sha": "37797d9c0a7e2f28fec5273399f86edc5cff7ae3", "node_id": "C_kwDOAAsO6NoAKDM3Nzk3ZDljMGE3ZTJmMjhmZWM1MjczMzk5Zjg2ZWRjNWNmZjdhZTM", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-09-23T00:28:07Z"}, "committer": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-10-11T20:18:59Z"}, "message": "simd_shuffle -> simd_swizzle", "tree": {"sha": "95ab943139dbd33446d58b606d257327f2cdebb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95ab943139dbd33446d58b606d257327f2cdebb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37797d9c0a7e2f28fec5273399f86edc5cff7ae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37797d9c0a7e2f28fec5273399f86edc5cff7ae3", "html_url": "https://github.com/rust-lang/rust/commit/37797d9c0a7e2f28fec5273399f86edc5cff7ae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37797d9c0a7e2f28fec5273399f86edc5cff7ae3/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98e4fcae5aa0080d97901835e8391ec394acfef6", "url": "https://api.github.com/repos/rust-lang/rust/commits/98e4fcae5aa0080d97901835e8391ec394acfef6", "html_url": "https://github.com/rust-lang/rust/commit/98e4fcae5aa0080d97901835e8391ec394acfef6"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "468319325e2265a7030b77abfbf1ba87ce7210f8", "filename": "crates/core_simd/examples/matrix_inversion.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37797d9c0a7e2f28fec5273399f86edc5cff7ae3/crates%2Fcore_simd%2Fexamples%2Fmatrix_inversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37797d9c0a7e2f28fec5273399f86edc5cff7ae3/crates%2Fcore_simd%2Fexamples%2Fmatrix_inversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fexamples%2Fmatrix_inversion.rs?ref=37797d9c0a7e2f28fec5273399f86edc5cff7ae3", "patch": "@@ -169,16 +169,16 @@ pub fn simd_inv4x4(m: Matrix4x4) -> Option<Matrix4x4> {\n     const SHUFFLE13: [Which; 4] = [First(1), First(3), Second(1), Second(3)];\n     const SHUFFLE23: [Which; 4] = [First(2), First(3), Second(2), Second(3)];\n \n-    let tmp = simd_shuffle!(m_0, m_1, SHUFFLE01);\n-    let row1 = simd_shuffle!(m_2, m_3, SHUFFLE01);\n+    let tmp = simd_swizzle!(m_0, m_1, SHUFFLE01);\n+    let row1 = simd_swizzle!(m_2, m_3, SHUFFLE01);\n \n-    let row0 = simd_shuffle!(tmp, row1, SHUFFLE02);\n-    let row1 = simd_shuffle!(row1, tmp, SHUFFLE13);\n+    let row0 = simd_swizzle!(tmp, row1, SHUFFLE02);\n+    let row1 = simd_swizzle!(row1, tmp, SHUFFLE13);\n \n-    let tmp = simd_shuffle!(m_0, m_1, SHUFFLE23);\n-    let row3 = simd_shuffle!(m_2, m_3, SHUFFLE23);\n-    let row2 = simd_shuffle!(tmp, row3, SHUFFLE02);\n-    let row3 = simd_shuffle!(row3, tmp, SHUFFLE13);\n+    let tmp = simd_swizzle!(m_0, m_1, SHUFFLE23);\n+    let row3 = simd_swizzle!(m_2, m_3, SHUFFLE23);\n+    let row2 = simd_swizzle!(tmp, row3, SHUFFLE02);\n+    let row3 = simd_swizzle!(row3, tmp, SHUFFLE13);\n \n     let tmp = (row2 * row3).reverse().rotate_right::<2>();\n     let minor0 = row1 * tmp;"}, {"sha": "1d8cdad8900a3e955e9dc3f94be3dfc053504ed2", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37797d9c0a7e2f28fec5273399f86edc5cff7ae3/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37797d9c0a7e2f28fec5273399f86edc5cff7ae3/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=37797d9c0a7e2f28fec5273399f86edc5cff7ae3", "patch": "@@ -18,5 +18,5 @@\n \n #[path = \"mod.rs\"]\n mod core_simd;\n-use self::core_simd::simd;\n+pub use self::core_simd::simd;\n pub use simd::*;"}, {"sha": "d4702784dc5f221b767aafc19c08af26db1c5e0c", "filename": "crates/core_simd/src/swizzle.rs", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/37797d9c0a7e2f28fec5273399f86edc5cff7ae3/crates%2Fcore_simd%2Fsrc%2Fswizzle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37797d9c0a7e2f28fec5273399f86edc5cff7ae3/crates%2Fcore_simd%2Fsrc%2Fswizzle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fswizzle.rs?ref=37797d9c0a7e2f28fec5273399f86edc5cff7ae3", "patch": "@@ -5,55 +5,67 @@ use crate::{LaneCount, Simd, SimdElement, SupportedLaneCount};\n ///\n /// A new vector is constructed by specifying the the lanes of the source vector or vectors to use.\n ///\n-/// When shuffling one vector, the indices of the result vector are indicated by a `const` array\n+/// When swizzling one vector, the indices of the result vector are indicated by a `const` array\n /// of `usize`, like [`Swizzle`].\n-/// When shuffling two vectors, the indices are indicated by a `const` array of [`Which`], like\n+/// When swizzling two vectors, the indices are indicated by a `const` array of [`Which`], like\n /// [`Swizzle2`].\n ///\n /// # Examples\n /// ## One source vector\n /// ```\n /// # #![feature(portable_simd)]\n-/// # use core_simd::{Simd, simd_shuffle};\n+/// # use core_simd::{Simd, simd_swizzle};\n /// let v = Simd::<f32, 4>::from_array([0., 1., 2., 3.]);\n-/// let v = simd_shuffle!(v, [3, 0, 1, 2]);\n-/// assert_eq!(v.to_array(), [3., 0., 1., 2.]);\n+///\n+/// // Keeping the same size\n+/// let r = simd_swizzle!(v, [3, 0, 1, 2]);\n+/// assert_eq!(r.to_array(), [3., 0., 1., 2.]);\n+///\n+/// // Changing the number of lanes\n+/// let r = simd_swizzle!(v, [3, 1]);\n+/// assert_eq!(r.to_array(), [3., 1.]);\n /// ```\n ///\n /// ## Two source vectors\n /// ```\n /// # #![feature(portable_simd)]\n-/// # use core_simd::{Simd, simd_shuffle, Which};\n+/// # use core_simd::{Simd, simd_swizzle, Which};\n /// use Which::*;\n /// let a = Simd::<f32, 4>::from_array([0., 1., 2., 3.]);\n /// let b = Simd::<f32, 4>::from_array([4., 5., 6., 7.]);\n-/// let v = simd_shuffle!(a, b, [First(0), First(1), Second(2), Second(3)]);\n-/// assert_eq!(v.to_array(), [0., 1., 6., 7.]);\n+///\n+/// // Keeping the same size\n+/// let r = simd_swizzle!(a, b, [First(0), First(1), Second(2), Second(3)]);\n+/// assert_eq!(r.to_array(), [0., 1., 6., 7.]);\n+///\n+/// // Changing the number of lanes\n+/// let r = simd_swizzle!(a, b, [First(0), Second(0)]);\n+/// assert_eq!(r.to_array(), [0., 4.]);\n /// ```\n #[macro_export]\n-macro_rules! simd_shuffle {\n+macro_rules! simd_swizzle {\n     {\n         $vector:expr, $index:expr $(,)?\n     } => {\n         {\n             use $crate::simd::Swizzle;\n-            struct Shuffle;\n-            impl Swizzle<{$index.len()}, {$index.len()}> for Shuffle {\n+            struct SwizzleImpl;\n+            impl<const LANES: usize> Swizzle<LANES, {$index.len()}> for SwizzleImpl {\n                 const INDEX: [usize; {$index.len()}] = $index;\n             }\n-            Shuffle::swizzle($vector)\n+            SwizzleImpl::swizzle($vector)\n         }\n     };\n     {\n         $first:expr, $second:expr, $index:expr $(,)?\n     } => {\n         {\n             use $crate::simd::{Which, Swizzle2};\n-            struct Shuffle;\n-            impl Swizzle2<{$index.len()}, {$index.len()}> for Shuffle {\n+            struct SwizzleImpl;\n+            impl<const LANES: usize> Swizzle2<LANES, {$index.len()}> for SwizzleImpl {\n                 const INDEX: [Which; {$index.len()}] = $index;\n             }\n-            Shuffle::swizzle2($first, $second)\n+            SwizzleImpl::swizzle2($first, $second)\n         }\n     }\n }"}]}