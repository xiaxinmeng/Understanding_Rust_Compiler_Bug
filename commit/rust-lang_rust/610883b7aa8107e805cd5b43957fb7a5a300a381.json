{"sha": "610883b7aa8107e805cd5b43957fb7a5a300a381", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMDg4M2I3YWE4MTA3ZTgwNWNkNWI0Mzk1N2ZiN2E1YTMwMGEzODE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-12T08:23:06Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-12T08:23:06Z"}, "message": "don't suggest closures over constants\n\nfixes #917", "tree": {"sha": "3b9b6415fa62b340f76113ecee1f57eeb5a0bd4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b9b6415fa62b340f76113ecee1f57eeb5a0bd4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/610883b7aa8107e805cd5b43957fb7a5a300a381", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXND1qAAoJEFbW7qD8Z6xGBF8P/iG3p/mQZncZvKwguE/auBD/\nY6akoiPezx8kzwor3v4KnmoXnHkRoZQ7gBRDbNNiRbNloB2cDHlBTPYVkZzv6p8E\n23dw/aPlKcY/EkVU/UEUQTIBp2NTGsRrxPQxhmBL0B7B74GE5/FuZ9zWC9x0zRTu\nw2uI+aNJy5iHnZ59cj4PxXRU0XsRy/fg6XILLJxosVsl2tkosg/EOpPLfXkFCa5x\nYqlKUjm1Jp6qt/xI3hLw7Krjh6iLw2MKHw0d2ECMj2c7R641VxPqrv+FTk2om0/8\niSc8/XBipghCMcF2txKchScQ4nVedD8h2N1PO6/wMoTwjJTargcoVojfgSPhKOuW\nYE7c+ZN8851LGGz86MxVJkwojjYL5fyrgSYATE/0kiKfuSL6eOUTGd0AS40gOxHN\nasmLjBj/Q5KhmUUj5mx1SJq86J3joI4L71W+WScoQEyIx962depwPuwP0scfz16d\n48omQPk6Dewa5IQj5isKuj8sHMoS8e+HEXmk1fFV/EZyEPybVCLSa7S33D3Pft0C\nURwRRTClO2lgIHgwX6G0IywSzD8sLTC3NsnjgiF3uch/sL81ENc9VzOJtsMClfGU\npj+lKIZ0jvZKiPrLZz0yh9bdN+74bef7axm+5Mt04oQCu5rR1V9cImIUEBbJin7b\n4eGLPt0brHkNdpMT9vgI\n=v1Nc\n-----END PGP SIGNATURE-----", "payload": "tree 3b9b6415fa62b340f76113ecee1f57eeb5a0bd4c\nparent 8fa68f1e089bc18d3924a19a21853bc4848f8959\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1463041386 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1463041386 +0200\n\ndon't suggest closures over constants\n\nfixes #917"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/610883b7aa8107e805cd5b43957fb7a5a300a381", "html_url": "https://github.com/rust-lang/rust/commit/610883b7aa8107e805cd5b43957fb7a5a300a381", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/610883b7aa8107e805cd5b43957fb7a5a300a381/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fa68f1e089bc18d3924a19a21853bc4848f8959", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa68f1e089bc18d3924a19a21853bc4848f8959", "html_url": "https://github.com/rust-lang/rust/commit/8fa68f1e089bc18d3924a19a21853bc4848f8959"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "b47ae924bf012440a34fcf0e0fca0a5b2a2fa5ae", "filename": "src/methods.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/610883b7aa8107e805cd5b43957fb7a5a300a381/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610883b7aa8107e805cd5b43957fb7a5a300a381/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=610883b7aa8107e805cd5b43957fb7a5a300a381", "patch": "@@ -1,6 +1,7 @@\n use rustc::hir::*;\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n+use rustc::middle::const_qualif::ConstQualif;\n use rustc::ty::subst::{Subst, TypeSpace};\n use rustc::ty;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n@@ -502,6 +503,13 @@ fn lint_or_fun_call(cx: &LateContext, expr: &Expr, name: &str, args: &[P<Expr>])\n     /// Check for `*or(foo())`.\n     fn check_general_case(cx: &LateContext, name: &str, fun: &Expr, self_expr: &Expr, arg: &Expr, or_has_args: bool,\n                           span: Span) {\n+        // don't lint for constant values\n+        // FIXME: can we `expect` here instead of match?\n+        if let Some(qualif) = cx.tcx.const_qualif_map.borrow().get(&arg.id) {\n+            if !qualif.contains(ConstQualif::NOT_CONST) {\n+                return;\n+            }\n+        }\n         // (path, fn_has_argument, methods)\n         let know_types: &[(&[_], _, &[_], _)] = &[(&paths::BTREEMAP_ENTRY, false, &[\"or_insert\"], \"with\"),\n                                                   (&paths::HASHMAP_ENTRY, false, &[\"or_insert\"], \"with\"),"}, {"sha": "0a943840e17a100102c8ac8b8ce2284867c14331", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/610883b7aa8107e805cd5b43957fb7a5a300a381/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610883b7aa8107e805cd5b43957fb7a5a300a381/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=610883b7aa8107e805cd5b43957fb7a5a300a381", "patch": "@@ -1,4 +1,5 @@\n #![feature(plugin)]\n+#![feature(const_fn)]\n #![plugin(clippy)]\n \n #![deny(clippy, clippy_pedantic)]\n@@ -227,8 +228,20 @@ fn or_fun_call() {\n         fn new() -> Foo { Foo }\n     }\n \n+    enum Enum {\n+        A(i32),\n+    }\n+\n+    const fn make_const(i: i32) -> i32 { i }\n+\n     fn make<T>() -> T { unimplemented!(); }\n \n+    let with_enum = Some(Enum::A(1));\n+    with_enum.unwrap_or(Enum::A(5));\n+\n+    let with_const_fn = Some(1);\n+    with_const_fn.unwrap_or(make_const(5));\n+\n     let with_constructor = Some(vec![1]);\n     with_constructor.unwrap_or(make());\n     //~^ERROR use of `unwrap_or`"}]}