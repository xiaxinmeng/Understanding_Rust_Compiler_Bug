{"sha": "b5f680e7484dd96b1417c0219c5616ef2cd82d9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZjY4MGU3NDg0ZGQ5NmIxNDE3YzAyMTljNTYxNmVmMmNkODJkOWQ=", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-09-02T10:22:23Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-09-02T14:29:49Z"}, "message": "do not resolve instances for trait fn ids", "tree": {"sha": "a300922cec44e59338032e9c356d590548e01be5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a300922cec44e59338032e9c356d590548e01be5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5f680e7484dd96b1417c0219c5616ef2cd82d9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f680e7484dd96b1417c0219c5616ef2cd82d9d", "html_url": "https://github.com/rust-lang/rust/commit/b5f680e7484dd96b1417c0219c5616ef2cd82d9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5f680e7484dd96b1417c0219c5616ef2cd82d9d/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbb0fe9d803f7fa8688b33306266a6b054c2c3f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbb0fe9d803f7fa8688b33306266a6b054c2c3f4", "html_url": "https://github.com/rust-lang/rust/commit/dbb0fe9d803f7fa8688b33306266a6b054c2c3f4"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "0c381276823598493e8aa12acd9fa6f30542271f", "filename": "compiler/rustc_mir/src/transform/check_consts/check.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b5f680e7484dd96b1417c0219c5616ef2cd82d9d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f680e7484dd96b1417c0219c5616ef2cd82d9d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=b5f680e7484dd96b1417c0219c5616ef2cd82d9d", "patch": "@@ -9,7 +9,7 @@ use rustc_infer::traits::{ImplSource, Obligation, ObligationCause};\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::cast::CastTy;\n-use rustc_middle::ty::subst::GenericArgKind;\n+use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{self, adjustment::PointerCast, Instance, InstanceDef, Ty, TyCtxt};\n use rustc_middle::ty::{Binder, TraitPredicate, TraitRef};\n use rustc_span::{sym, Span, Symbol};\n@@ -793,7 +793,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n \n                 let fn_ty = func.ty(body, tcx);\n \n-                let (mut callee, substs) = match *fn_ty.kind() {\n+                let (mut callee, mut substs) = match *fn_ty.kind() {\n                     ty::FnDef(def_id, substs) => (def_id, substs),\n \n                     ty::FnPtr(_) => {\n@@ -846,29 +846,31 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                                 .iter()\n                                 .find(|did| tcx.item_name(**did) == callee_name)\n                             {\n+                                // using internal substs is ok here, since this is only\n+                                // used for the `resolve` call below\n+                                substs = InternalSubsts::identity_for_item(tcx, did);\n                                 callee = did;\n                             }\n                         }\n-                        _ => {\n-                            if !tcx.is_const_fn_raw(callee) {\n-                                // At this point, it is only legal when the caller is marked with\n-                                // #[default_method_body_is_const], and the callee is in the same\n-                                // trait.\n-                                let callee_trait = tcx.trait_of_item(callee);\n-                                if callee_trait.is_some() {\n-                                    if tcx.has_attr(caller, sym::default_method_body_is_const) {\n-                                        if tcx.trait_of_item(caller) == callee_trait {\n-                                            nonconst_call_permission = true;\n-                                        }\n+                        _ if !tcx.is_const_fn_raw(callee) => {\n+                            // At this point, it is only legal when the caller is marked with\n+                            // #[default_method_body_is_const], and the callee is in the same\n+                            // trait.\n+                            let callee_trait = tcx.trait_of_item(callee);\n+                            if callee_trait.is_some() {\n+                                if tcx.has_attr(caller, sym::default_method_body_is_const) {\n+                                    if tcx.trait_of_item(caller) == callee_trait {\n+                                        nonconst_call_permission = true;\n                                     }\n                                 }\n+                            }\n \n-                                if !nonconst_call_permission {\n-                                    self.check_op(ops::FnCallNonConst);\n-                                    return;\n-                                }\n+                            if !nonconst_call_permission {\n+                                self.check_op(ops::FnCallNonConst);\n+                                return;\n                             }\n                         }\n+                        _ => {}\n                     }\n \n                     // Resolve a trait method call to its concrete implementation, which may be in a"}]}