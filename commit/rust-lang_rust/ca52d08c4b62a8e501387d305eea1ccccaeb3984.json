{"sha": "ca52d08c4b62a8e501387d305eea1ccccaeb3984", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNTJkMDhjNGI2MmE4ZTUwMTM4N2QzMDVlZWExY2NjY2FlYjM5ODQ=", "commit": {"author": {"name": "Matthijs Hofstra", "email": "thiezz@gmail.com", "date": "2013-03-28T16:21:50Z"}, "committer": {"name": "Matthijs Hofstra", "email": "thiezz@gmail.com", "date": "2013-04-02T18:47:29Z"}, "message": "Removed mut-fields from Mut, removed borrow_const from Mut", "tree": {"sha": "579bae27ae57000dcdc64f3761bf9adfdf95ce8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/579bae27ae57000dcdc64f3761bf9adfdf95ce8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca52d08c4b62a8e501387d305eea1ccccaeb3984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca52d08c4b62a8e501387d305eea1ccccaeb3984", "html_url": "https://github.com/rust-lang/rust/commit/ca52d08c4b62a8e501387d305eea1ccccaeb3984", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca52d08c4b62a8e501387d305eea1ccccaeb3984/comments", "author": {"login": "Thiez", "id": 204550, "node_id": "MDQ6VXNlcjIwNDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/204550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thiez", "html_url": "https://github.com/Thiez", "followers_url": "https://api.github.com/users/Thiez/followers", "following_url": "https://api.github.com/users/Thiez/following{/other_user}", "gists_url": "https://api.github.com/users/Thiez/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thiez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thiez/subscriptions", "organizations_url": "https://api.github.com/users/Thiez/orgs", "repos_url": "https://api.github.com/users/Thiez/repos", "events_url": "https://api.github.com/users/Thiez/events{/privacy}", "received_events_url": "https://api.github.com/users/Thiez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Thiez", "id": 204550, "node_id": "MDQ6VXNlcjIwNDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/204550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thiez", "html_url": "https://github.com/Thiez", "followers_url": "https://api.github.com/users/Thiez/followers", "following_url": "https://api.github.com/users/Thiez/following{/other_user}", "gists_url": "https://api.github.com/users/Thiez/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thiez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thiez/subscriptions", "organizations_url": "https://api.github.com/users/Thiez/orgs", "repos_url": "https://api.github.com/users/Thiez/repos", "events_url": "https://api.github.com/users/Thiez/events{/privacy}", "received_events_url": "https://api.github.com/users/Thiez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00dbbd01c2aee72982b3e0f9511ae1d4428c3ba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/00dbbd01c2aee72982b3e0f9511ae1d4428c3ba9", "html_url": "https://github.com/rust-lang/rust/commit/00dbbd01c2aee72982b3e0f9511ae1d4428c3ba9"}], "stats": {"total": 77, "additions": 7, "deletions": 70}, "files": [{"sha": "39d184b951a335aea7ba053cb0eeeef35712ccd9", "filename": "src/libcore/mutable.rs", "status": "modified", "additions": 7, "deletions": 70, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/ca52d08c4b62a8e501387d305eea1ccccaeb3984/src%2Flibcore%2Fmutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca52d08c4b62a8e501387d305eea1ccccaeb3984/src%2Flibcore%2Fmutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmutable.rs?ref=ca52d08c4b62a8e501387d305eea1ccccaeb3984", "patch": "@@ -20,13 +20,13 @@ mutation when the data structure should be immutable.\n */\n \n use util::with;\n-use cast::transmute_immut;\n+use cast::{transmute_mut,transmute_immut};\n \n enum Mode { ReadOnly, Mutable, Immutable }\n \n struct Data<T> {\n-    priv mut value: T,\n-    priv mut mode: Mode\n+    priv value: T,\n+    priv mode: Mode\n }\n \n pub type Mut<T> = Data<T>;\n@@ -50,23 +50,19 @@ pub impl<T> Data<T> {\n             ReadOnly | Mutable => {}\n         }\n \n-        do with(&mut self.mode, Mutable) {\n-            op(&mut self.value)\n+        do with( unsafe { transmute_mut(&self.mode) }, Mutable) {\n+            op(  unsafe { transmute_mut(&self.value) })\n         }\n     }\n \n-    fn borrow_const<R>(&self, op: &fn(t: &const T) -> R) -> R {\n-        op(&const self.value)\n-    }\n-\n     fn borrow_imm<R>(&self, op: &fn(t: &T) -> R) -> R {\n         match self.mode {\n           Mutable => fail!(~\"currently mutable\"),\n           ReadOnly | Immutable => {}\n         }\n \n-        do with(&mut self.mode, Immutable) {\n-            op(unsafe{transmute_immut(&mut self.value)})\n+        do with( unsafe { transmute_mut(&self.mode) }, Immutable) {\n+            op( &self.value )\n         }\n     }\n \n@@ -97,62 +93,3 @@ pub fn test_imm_in_mut() {\n         }\n     }\n }\n-\n-#[test]\n-pub fn test_const_in_mut() {\n-    let m = @Mut(1);\n-    do m.borrow_mut |p| {\n-        do m.borrow_const |q| {\n-            assert!(*p == *q);\n-            *p += 1;\n-            assert!(*p == *q);\n-        }\n-    }\n-}\n-\n-#[test]\n-pub fn test_mut_in_const() {\n-    let m = @Mut(1);\n-    do m.borrow_const |p| {\n-        do m.borrow_mut |q| {\n-            assert!(*p == *q);\n-            *q += 1;\n-            assert!(*p == *q);\n-        }\n-    }\n-}\n-\n-#[test]\n-pub fn test_imm_in_const() {\n-    let m = @Mut(1);\n-    do m.borrow_const |p| {\n-        do m.borrow_imm |q| {\n-            assert!(*p == *q);\n-        }\n-    }\n-}\n-\n-#[test]\n-pub fn test_const_in_imm() {\n-    let m = @Mut(1);\n-    do m.borrow_imm |p| {\n-        do m.borrow_const |q| {\n-            assert!(*p == *q);\n-        }\n-    }\n-}\n-\n-\n-#[test]\n-#[ignore(cfg(windows))]\n-#[should_fail]\n-pub fn test_mut_in_imm_in_const() {\n-    let m = @Mut(1);\n-    do m.borrow_const |_p| {\n-        do m.borrow_imm |_q| {\n-            do m.borrow_mut |_r| {\n-            }\n-        }\n-    }\n-}\n-"}]}