{"sha": "775fe37ca9354371eb69c1dc7ee65d941dcafe15", "node_id": "C_kwDOAAsO6NoAKDc3NWZlMzdjYTkzNTQzNzFlYjY5YzFkYzdlZTY1ZDk0MWRjYWZlMTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-17T05:08:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-17T05:08:17Z"}, "message": "Rollup merge of #92953 - azdavis:azdavis-copy-example, r=dtolnay\n\nCopy an example to PartialOrd as well\n\nIn https://github.com/rust-lang/rust/pull/88202 I added an example for deriving PartialOrd on enums, but only later did I realize that I actually put the example on Ord.\n\nThis copies the example to PartialOrd as well, which is where I intended for it to be.\n\nWe could also delete the example on Ord, but I see there's already some highly similar examples shared between Ord and PartialOrd, so I figured we could leave it.\n\nI also changed some type annotations in an example from `x : T` to the more common style (in Rust) of `x: T`.", "tree": {"sha": "67f247772e66a185bbe5b9198a87acb509fb87f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67f247772e66a185bbe5b9198a87acb509fb87f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/775fe37ca9354371eb69c1dc7ee65d941dcafe15", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh5PnCCRBK7hj4Ov3rIwAA6vkIAIo53r09zH3q6qBofw7xkR7V\npbdcmFpP1+UVVkxGMmDzPQLVL7mk0pAtDcAsirOQux9oeaZnTLkdYdM3SzHZw24/\nupxHgw0MIQ5yK0y0a6mVyhu36Kec/8sAql89fz9tvM+WvGX/pb9f/XufZGQ1OS9P\nmN1/hOKC9/Sq6omgTyk+ency3KiPy5qEscsgpxtsW1G33kcB3mCsiIqm6F0T1xDK\nOIU2LQoQpFd8OSg1QU6WfB13u1NJiLzSzS8svZ0P5DgmOmzNhQ94JL0S16N64+Dj\n3VO89te2rygY9YI8M9epn1SkhC23SqosZvRHQz2R5Y+9x0ooEW3Pn6LvWPoykYU=\n=hYY1\n-----END PGP SIGNATURE-----\n", "payload": "tree 67f247772e66a185bbe5b9198a87acb509fb87f3\nparent 0aae1ec9ff61cf5050cef0930be339f4ac9abd8b\nparent bfe0a4e06e7714c2e0e3b42e1b4ec3b6e5ca121d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642396097 +0100\ncommitter GitHub <noreply@github.com> 1642396097 +0100\n\nRollup merge of #92953 - azdavis:azdavis-copy-example, r=dtolnay\n\nCopy an example to PartialOrd as well\n\nIn https://github.com/rust-lang/rust/pull/88202 I added an example for deriving PartialOrd on enums, but only later did I realize that I actually put the example on Ord.\n\nThis copies the example to PartialOrd as well, which is where I intended for it to be.\n\nWe could also delete the example on Ord, but I see there's already some highly similar examples shared between Ord and PartialOrd, so I figured we could leave it.\n\nI also changed some type annotations in an example from `x : T` to the more common style (in Rust) of `x: T`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/775fe37ca9354371eb69c1dc7ee65d941dcafe15", "html_url": "https://github.com/rust-lang/rust/commit/775fe37ca9354371eb69c1dc7ee65d941dcafe15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/775fe37ca9354371eb69c1dc7ee65d941dcafe15/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aae1ec9ff61cf5050cef0930be339f4ac9abd8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aae1ec9ff61cf5050cef0930be339f4ac9abd8b", "html_url": "https://github.com/rust-lang/rust/commit/0aae1ec9ff61cf5050cef0930be339f4ac9abd8b"}, {"sha": "bfe0a4e06e7714c2e0e3b42e1b4ec3b6e5ca121d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe0a4e06e7714c2e0e3b42e1b4ec3b6e5ca121d", "html_url": "https://github.com/rust-lang/rust/commit/bfe0a4e06e7714c2e0e3b42e1b4ec3b6e5ca121d"}], "stats": {"total": 76, "additions": 61, "deletions": 15}, "files": [{"sha": "f89cf812e970a0aa38a1da1d9af7a191ad560d17", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 61, "deletions": 15, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/775fe37ca9354371eb69c1dc7ee65d941dcafe15/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775fe37ca9354371eb69c1dc7ee65d941dcafe15/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=775fe37ca9354371eb69c1dc7ee65d941dcafe15", "patch": "@@ -661,20 +661,37 @@ impl<T: Clone> Clone for Reverse<T> {\n ///\n /// ## Derivable\n ///\n-/// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n-/// [lexicographic](https://en.wikipedia.org/wiki/Lexicographic_order) ordering based on the top-to-bottom declaration order of the struct's members.\n-/// When `derive`d on enums, variants are ordered by their top-to-bottom discriminant order.\n-/// This means variants at the top are less than variants at the bottom.\n-/// Here's an example:\n+/// This trait can be used with `#[derive]`.\n+///\n+/// When `derive`d on structs, it will produce a\n+/// [lexicographic](https://en.wikipedia.org/wiki/Lexicographic_order) ordering\n+/// based on the top-to-bottom declaration order of the struct's members.\n+///\n+/// When `derive`d on enums, variants are ordered by their discriminants.\n+/// By default, the discriminant is smallest for variants at the top, and\n+/// largest for variants at the bottom. Here's an example:\n ///\n /// ```\n-/// #[derive(PartialEq, PartialOrd)]\n-/// enum Size {\n-///     Small,\n-///     Large,\n+/// #[derive(PartialEq, Eq, PartialOrd, Ord)]\n+/// enum E {\n+///     Top,\n+///     Bottom,\n /// }\n ///\n-/// assert!(Size::Small < Size::Large);\n+/// assert!(E::Top < E::Bottom);\n+/// ```\n+///\n+/// However, manually setting the discriminants can override this default\n+/// behavior:\n+///\n+/// ```\n+/// #[derive(PartialEq, Eq, PartialOrd, Ord)]\n+/// enum E {\n+///     Top = 2,\n+///     Bottom = 1,\n+/// }\n+///\n+/// assert!(E::Bottom < E::Top);\n /// ```\n ///\n /// ## Lexicographical comparison\n@@ -895,9 +912,38 @@ impl PartialOrd for Ordering {\n ///\n /// ## Derivable\n ///\n-/// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n-/// lexicographic ordering based on the top-to-bottom declaration order of the struct's members.\n-/// When `derive`d on enums, variants are ordered by their top-to-bottom discriminant order.\n+/// This trait can be used with `#[derive]`.\n+///\n+/// When `derive`d on structs, it will produce a\n+/// [lexicographic](https://en.wikipedia.org/wiki/Lexicographic_order) ordering\n+/// based on the top-to-bottom declaration order of the struct's members.\n+///\n+/// When `derive`d on enums, variants are ordered by their discriminants.\n+/// By default, the discriminant is smallest for variants at the top, and\n+/// largest for variants at the bottom. Here's an example:\n+///\n+/// ```\n+/// #[derive(PartialEq, PartialOrd)]\n+/// enum E {\n+///     Top,\n+///     Bottom,\n+/// }\n+///\n+/// assert!(E::Top < E::Bottom);\n+/// ```\n+///\n+/// However, manually setting the discriminants can override this default\n+/// behavior:\n+///\n+/// ```\n+/// #[derive(PartialEq, PartialOrd)]\n+/// enum E {\n+///     Top = 2,\n+///     Bottom = 1,\n+/// }\n+///\n+/// assert!(E::Bottom < E::Top);\n+/// ```\n ///\n /// ## How can I implement `PartialOrd`?\n ///\n@@ -970,8 +1016,8 @@ impl PartialOrd for Ordering {\n /// # Examples\n ///\n /// ```\n-/// let x : u32 = 0;\n-/// let y : u32 = 1;\n+/// let x: u32 = 0;\n+/// let y: u32 = 1;\n ///\n /// assert_eq!(x < y, true);\n /// assert_eq!(x.lt(&y), true);"}]}