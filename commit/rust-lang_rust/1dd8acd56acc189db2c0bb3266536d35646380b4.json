{"sha": "1dd8acd56acc189db2c0bb3266536d35646380b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZDhhY2Q1NmFjYzE4OWRiMmMwYmIzMjY2NTM2ZDM1NjQ2MzgwYjQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-26T21:42:44Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-26T21:43:44Z"}, "message": "core: Mark a bunch of numeric functions as pure", "tree": {"sha": "0db1a397edd40c8fe75ffcfb7673c8203be61812", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0db1a397edd40c8fe75ffcfb7673c8203be61812"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dd8acd56acc189db2c0bb3266536d35646380b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd8acd56acc189db2c0bb3266536d35646380b4", "html_url": "https://github.com/rust-lang/rust/commit/1dd8acd56acc189db2c0bb3266536d35646380b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dd8acd56acc189db2c0bb3266536d35646380b4/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d19b915bc40d36cdf9866bfd3cf160ddabc7cc9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d19b915bc40d36cdf9866bfd3cf160ddabc7cc9d", "html_url": "https://github.com/rust-lang/rust/commit/d19b915bc40d36cdf9866bfd3cf160ddabc7cc9d"}], "stats": {"total": 164, "additions": 82, "deletions": 82}, "files": [{"sha": "d10b9603af0dd7d6fed1aafc0c380e95a2f645a2", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1dd8acd56acc189db2c0bb3266536d35646380b4/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd8acd56acc189db2c0bb3266536d35646380b4/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=1dd8acd56acc189db2c0bb3266536d35646380b4", "patch": "@@ -1,10 +1,10 @@\n /// Interfaces used for comparison.\n \n-iface ord {\n-    fn lt(&&other: self) -> bool;\n+trait ord {\n+    pure fn lt(&&other: self) -> bool;\n }\n \n-iface eq {\n-    fn eq(&&other: self) -> bool;\n+trait eq {\n+    pure fn eq(&&other: self) -> bool;\n }\n "}, {"sha": "3e7bc0097f7422b5423242476dfcdd5282930a78", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1dd8acd56acc189db2c0bb3266536d35646380b4/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd8acd56acc189db2c0bb3266536d35646380b4/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=1dd8acd56acc189db2c0bb3266536d35646380b4", "patch": "@@ -168,15 +168,15 @@ pure fn log2(n: f32) -> f32 {\n }\n \n impl num of num::num for f32 {\n-    fn add(&&other: f32)    -> f32 { ret self + other; }\n-    fn sub(&&other: f32)    -> f32 { ret self - other; }\n-    fn mul(&&other: f32)    -> f32 { ret self * other; }\n-    fn div(&&other: f32)    -> f32 { ret self / other; }\n-    fn modulo(&&other: f32) -> f32 { ret self % other; }\n-    fn neg()                -> f32 { ret -self;        }\n-\n-    fn to_int()         -> int { ret self as int; }\n-    fn from_int(n: int) -> f32 { ret n as f32;    }\n+    pure fn add(&&other: f32)    -> f32 { ret self + other; }\n+    pure fn sub(&&other: f32)    -> f32 { ret self - other; }\n+    pure fn mul(&&other: f32)    -> f32 { ret self * other; }\n+    pure fn div(&&other: f32)    -> f32 { ret self / other; }\n+    pure fn modulo(&&other: f32) -> f32 { ret self % other; }\n+    pure fn neg()                -> f32 { ret -self;        }\n+\n+    pure fn to_int()         -> int { ret self as int; }\n+    pure fn from_int(n: int) -> f32 { ret n as f32;    }\n }\n \n //"}, {"sha": "9e84c432bad269fed9652513537affa56a5ffedf", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1dd8acd56acc189db2c0bb3266536d35646380b4/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd8acd56acc189db2c0bb3266536d35646380b4/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=1dd8acd56acc189db2c0bb3266536d35646380b4", "patch": "@@ -195,15 +195,15 @@ pure fn log2(n: f64) -> f64 {\n }\n \n impl num of num::num for f64 {\n-    fn add(&&other: f64)    -> f64 { ret self + other; }\n-    fn sub(&&other: f64)    -> f64 { ret self - other; }\n-    fn mul(&&other: f64)    -> f64 { ret self * other; }\n-    fn div(&&other: f64)    -> f64 { ret self / other; }\n-    fn modulo(&&other: f64) -> f64 { ret self % other; }\n-    fn neg()                -> f64 { ret -self;        }\n-\n-    fn to_int()         -> int { ret self as int; }\n-    fn from_int(n: int) -> f64 { ret n as f64;    }\n+    pure fn add(&&other: f64)    -> f64 { ret self + other; }\n+    pure fn sub(&&other: f64)    -> f64 { ret self - other; }\n+    pure fn mul(&&other: f64)    -> f64 { ret self * other; }\n+    pure fn div(&&other: f64)    -> f64 { ret self / other; }\n+    pure fn modulo(&&other: f64) -> f64 { ret self % other; }\n+    pure fn neg()                -> f64 { ret -self;        }\n+\n+    pure fn to_int()         -> int { ret self as int; }\n+    pure fn from_int(n: int) -> f64 { ret n as f64;    }\n }\n \n //"}, {"sha": "8b8cc4664dc8c67a219971f9833326ae1a02c724", "filename": "src/libcore/float.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1dd8acd56acc189db2c0bb3266536d35646380b4/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd8acd56acc189db2c0bb3266536d35646380b4/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=1dd8acd56acc189db2c0bb3266536d35646380b4", "patch": "@@ -403,32 +403,32 @@ fn pow_with_uint(base: uint, pow: uint) -> float {\n     ret total;\n }\n \n-fn is_positive(x: float) -> bool { f64::is_positive(x as f64) }\n-fn is_negative(x: float) -> bool { f64::is_negative(x as f64) }\n-fn is_nonpositive(x: float) -> bool { f64::is_nonpositive(x as f64) }\n-fn is_nonnegative(x: float) -> bool { f64::is_nonnegative(x as f64) }\n-fn is_zero(x: float) -> bool { f64::is_zero(x as f64) }\n-fn is_infinite(x: float) -> bool { f64::is_infinite(x as f64) }\n-fn is_finite(x: float) -> bool { f64::is_finite(x as f64) }\n-fn is_NaN(x: float) -> bool { f64::is_NaN(x as f64) }\n-\n-fn abs(x: float) -> float { f64::abs(x as f64) as float }\n-fn sqrt(x: float) -> float { f64::sqrt(x as f64) as float }\n-fn atan(x: float) -> float { f64::atan(x as f64) as float }\n-fn sin(x: float) -> float { f64::sin(x as f64) as float }\n-fn cos(x: float) -> float { f64::cos(x as f64) as float }\n-fn tan(x: float) -> float { f64::tan(x as f64) as float }\n+pure fn is_positive(x: float) -> bool { f64::is_positive(x as f64) }\n+pure fn is_negative(x: float) -> bool { f64::is_negative(x as f64) }\n+pure fn is_nonpositive(x: float) -> bool { f64::is_nonpositive(x as f64) }\n+pure fn is_nonnegative(x: float) -> bool { f64::is_nonnegative(x as f64) }\n+pure fn is_zero(x: float) -> bool { f64::is_zero(x as f64) }\n+pure fn is_infinite(x: float) -> bool { f64::is_infinite(x as f64) }\n+pure fn is_finite(x: float) -> bool { f64::is_finite(x as f64) }\n+pure fn is_NaN(x: float) -> bool { f64::is_NaN(x as f64) }\n+\n+pure fn abs(x: float) -> float { f64::abs(x as f64) as float }\n+pure fn sqrt(x: float) -> float { f64::sqrt(x as f64) as float }\n+pure fn atan(x: float) -> float { f64::atan(x as f64) as float }\n+pure fn sin(x: float) -> float { f64::sin(x as f64) as float }\n+pure fn cos(x: float) -> float { f64::cos(x as f64) as float }\n+pure fn tan(x: float) -> float { f64::tan(x as f64) as float }\n \n impl num of num::num for float {\n-    fn add(&&other: float)    -> float { ret self + other; }\n-    fn sub(&&other: float)    -> float { ret self - other; }\n-    fn mul(&&other: float)    -> float { ret self * other; }\n-    fn div(&&other: float)    -> float { ret self / other; }\n-    fn modulo(&&other: float) -> float { ret self % other; }\n-    fn neg()                  -> float { ret -self;        }\n-\n-    fn to_int()         -> int   { ret self as int; }\n-    fn from_int(n: int) -> float { ret n as float;  }\n+    pure fn add(&&other: float)    -> float { ret self + other; }\n+    pure fn sub(&&other: float)    -> float { ret self - other; }\n+    pure fn mul(&&other: float)    -> float { ret self * other; }\n+    pure fn div(&&other: float)    -> float { ret self / other; }\n+    pure fn modulo(&&other: float) -> float { ret self % other; }\n+    pure fn neg()                  -> float { ret -self;        }\n+\n+    pure fn to_int()         -> int   { ret self as int; }\n+    pure fn from_int(n: int) -> float { ret n as float;  }\n }\n \n #[test]"}, {"sha": "2b950e4a7977f2749caa2bfa5d939c06da7fe7dc", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1dd8acd56acc189db2c0bb3266536d35646380b4/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd8acd56acc189db2c0bb3266536d35646380b4/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=1dd8acd56acc189db2c0bb3266536d35646380b4", "patch": "@@ -112,27 +112,27 @@ fn to_str_bytes<U>(n: T, radix: uint, f: fn(v: &[u8]) -> U) -> U {\n fn str(i: T) -> ~str { ret to_str(i, 10u); }\n \n impl ord of ord for T {\n-    fn lt(&&other: T) -> bool {\n+    pure fn lt(&&other: T) -> bool {\n         ret self < other;\n     }\n }\n \n impl eq of eq for T {\n-    fn eq(&&other: T) -> bool {\n+    pure fn eq(&&other: T) -> bool {\n         ret self == other;\n     }\n }\n \n impl num of num::num for T {\n-    fn add(&&other: T)    -> T { ret self + other; }\n-    fn sub(&&other: T)    -> T { ret self - other; }\n-    fn mul(&&other: T)    -> T { ret self * other; }\n-    fn div(&&other: T)    -> T { ret self / other; }\n-    fn modulo(&&other: T) -> T { ret self % other; }\n-    fn neg()              -> T { ret -self;        }\n-\n-    fn to_int()         -> int { ret self as int; }\n-    fn from_int(n: int) -> T   { ret n as T;      }\n+    pure fn add(&&other: T)    -> T { ret self + other; }\n+    pure fn sub(&&other: T)    -> T { ret self - other; }\n+    pure fn mul(&&other: T)    -> T { ret self * other; }\n+    pure fn div(&&other: T)    -> T { ret self / other; }\n+    pure fn modulo(&&other: T) -> T { ret self % other; }\n+    pure fn neg()              -> T { ret -self;        }\n+\n+    pure fn to_int()         -> int { ret self as int; }\n+    pure fn from_int(n: int) -> T   { ret n as T;      }\n }\n \n impl times of iter::times for T {"}, {"sha": "03868527655928f2d7437e892363bf7b1950a7c1", "filename": "src/libcore/num.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1dd8acd56acc189db2c0bb3266536d35646380b4/src%2Flibcore%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd8acd56acc189db2c0bb3266536d35646380b4/src%2Flibcore%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum.rs?ref=1dd8acd56acc189db2c0bb3266536d35646380b4", "patch": "@@ -1,17 +1,17 @@\n /// An interface for numbers.\n \n-iface num {\n+trait num {\n     // FIXME: Cross-crate overloading doesn't work yet. (#2615)\n     // FIXME: Interface inheritance. (#2616)\n-    fn add(&&other: self) -> self;\n-    fn sub(&&other: self) -> self;\n-    fn mul(&&other: self) -> self;\n-    fn div(&&other: self) -> self;\n-    fn modulo(&&other: self) -> self;\n-    fn neg() -> self;\n+    pure fn add(&&other: self) -> self;\n+    pure fn sub(&&other: self) -> self;\n+    pure fn mul(&&other: self) -> self;\n+    pure fn div(&&other: self) -> self;\n+    pure fn modulo(&&other: self) -> self;\n+    pure fn neg() -> self;\n \n-    fn to_int() -> int;\n-    fn from_int(n: int) -> self;    // FIXME (#2376) Static functions.\n+    pure fn to_int() -> int;\n+    pure fn from_int(n: int) -> self;    // FIXME (#2376) Static functions.\n     // n.b. #2376 is for classes, not ifaces, but it could be generalized...\n }\n "}, {"sha": "9561ed4e65f8c83912bee80c6ff8da19ec53ae56", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1dd8acd56acc189db2c0bb3266536d35646380b4/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd8acd56acc189db2c0bb3266536d35646380b4/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=1dd8acd56acc189db2c0bb3266536d35646380b4", "patch": "@@ -53,27 +53,27 @@ pure fn compl(i: T) -> T {\n }\n \n impl ord of ord for T {\n-    fn lt(&&other: T) -> bool {\n+    pure fn lt(&&other: T) -> bool {\n         ret self < other;\n     }\n }\n \n impl eq of eq for T {\n-    fn eq(&&other: T) -> bool {\n+    pure fn eq(&&other: T) -> bool {\n         ret self == other;\n     }\n }\n \n impl num of num::num for T {\n-    fn add(&&other: T)    -> T { ret self + other; }\n-    fn sub(&&other: T)    -> T { ret self - other; }\n-    fn mul(&&other: T)    -> T { ret self * other; }\n-    fn div(&&other: T)    -> T { ret self / other; }\n-    fn modulo(&&other: T) -> T { ret self % other; }\n-    fn neg()              -> T { ret -self;        }\n-\n-    fn to_int()         -> int { ret self as int; }\n-    fn from_int(n: int) -> T   { ret n as T;      }\n+    pure fn add(&&other: T)    -> T { ret self + other; }\n+    pure fn sub(&&other: T)    -> T { ret self - other; }\n+    pure fn mul(&&other: T)    -> T { ret self * other; }\n+    pure fn div(&&other: T)    -> T { ret self / other; }\n+    pure fn modulo(&&other: T) -> T { ret self % other; }\n+    pure fn neg()              -> T { ret -self;        }\n+\n+    pure fn to_int()         -> int { ret self as int; }\n+    pure fn from_int(n: int) -> T   { ret n as T;      }\n }\n \n /**"}, {"sha": "f74cbba23ce2a577d240d4111ff297b9c4bcf3b8", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1dd8acd56acc189db2c0bb3266536d35646380b4/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd8acd56acc189db2c0bb3266536d35646380b4/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=1dd8acd56acc189db2c0bb3266536d35646380b4", "patch": "@@ -2,24 +2,24 @@\n \n const fuzzy_epsilon: float = 1.0e-6;\n \n-iface fuzzy_eq {\n-    fn fuzzy_eq(&&other: self) -> bool;\n+trait fuzzy_eq {\n+    pure fn fuzzy_eq(&&other: self) -> bool;\n }\n \n impl fuzzy_eq of fuzzy_eq for float {\n-    fn fuzzy_eq(&&other: float) -> bool {\n+    pure fn fuzzy_eq(&&other: float) -> bool {\n         ret float::abs(self - other) < fuzzy_epsilon;\n     }\n }\n \n impl fuzzy_eq of fuzzy_eq for f32 {\n-    fn fuzzy_eq(&&other: f32) -> bool {\n+    pure fn fuzzy_eq(&&other: f32) -> bool {\n         ret f32::abs(self - other) < (fuzzy_epsilon as f32);\n     }\n }\n \n impl fuzzy_eq of fuzzy_eq for f64 {\n-    fn fuzzy_eq(&&other: f64) -> bool {\n+    pure fn fuzzy_eq(&&other: f64) -> bool {\n         ret f64::abs(self - other) < (fuzzy_epsilon as f64);\n     }\n }"}]}