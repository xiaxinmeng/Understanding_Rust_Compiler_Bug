{"sha": "5f841eb82476b6de4ebb4eb199e9b070a0a0493c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmODQxZWI4MjQ3NmI2ZGU0ZWJiNGViMTk5ZTliMDcwYTBhMDQ5M2M=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-04T12:30:52Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-04T12:30:52Z"}, "message": "Rollup merge of #27460 - JanLikar:master, r=steveklabnik\n\n  - Fix #26968 by noting the difference between \"..\" and \"_\" more explicitly\r\n\r\n  - Change one of the examples to show the match-all behaviour of \"..\"\r\n\r\n  - Merge \"Ignoring variants\" and \"Ignoring bindings\" sections into the latter\r\n\r\nr? @steveklabnik", "tree": {"sha": "a35e88a5be1c719cd812cb8fa48e27ae9f40b952", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a35e88a5be1c719cd812cb8fa48e27ae9f40b952"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f841eb82476b6de4ebb4eb199e9b070a0a0493c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f841eb82476b6de4ebb4eb199e9b070a0a0493c", "html_url": "https://github.com/rust-lang/rust/commit/5f841eb82476b6de4ebb4eb199e9b070a0a0493c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f841eb82476b6de4ebb4eb199e9b070a0a0493c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7eecc93f34cbeee52dca319b59474824b15c17e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7eecc93f34cbeee52dca319b59474824b15c17e", "html_url": "https://github.com/rust-lang/rust/commit/f7eecc93f34cbeee52dca319b59474824b15c17e"}, {"sha": "91972ba5a614d0d6440ef5440049e3c8e576119d", "url": "https://api.github.com/repos/rust-lang/rust/commits/91972ba5a614d0d6440ef5440049e3c8e576119d", "html_url": "https://github.com/rust-lang/rust/commit/91972ba5a614d0d6440ef5440049e3c8e576119d"}], "stats": {"total": 79, "additions": 38, "deletions": 41}, "files": [{"sha": "1abd4ca6c2174fd1571c1c2a8c7402909a6c836d", "filename": "src/doc/trpl/patterns.md", "status": "modified", "additions": 38, "deletions": 41, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/5f841eb82476b6de4ebb4eb199e9b070a0a0493c/src%2Fdoc%2Ftrpl%2Fpatterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f841eb82476b6de4ebb4eb199e9b070a0a0493c/src%2Fdoc%2Ftrpl%2Fpatterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fpatterns.md?ref=5f841eb82476b6de4ebb4eb199e9b070a0a0493c", "patch": "@@ -112,26 +112,55 @@ match x {\n }\n ```\n \n-# Ignoring variants\n+# Ignoring bindings\n \n-If you\u2019re matching on an enum which has variants, you can use `..` to\n-ignore the value and type in the variant:\n+You can use `_` in a pattern to disregard the type and value.\n+For example, here\u2019s a `match` against a `Result<T, E>`:\n \n ```rust\n-enum OptionalInt {\n-    Value(i32),\n+# let some_value: Result<i32, &'static str> = Err(\"There was an error\");\n+match some_value {\n+    Ok(value) => println!(\"got a value: {}\", value),\n+    Err(_) => println!(\"an error occurred\"),\n+}\n+```\n+\n+In the first arm, we bind the value inside the `Ok` variant to `value`. But\n+in the `Err` arm, we use `_` to disregard the specific error, and just print\n+a general error message.\n+\n+`_` is valid in any pattern that creates a binding. This can be useful to\n+ignore parts of a larger structure:\n+\n+```rust\n+fn coordinate() -> (i32, i32, i32) {\n+    // generate and return some sort of triple tuple\n+# (1, 2, 3)\n+}\n+\n+let (x, _, z) = coordinate();\n+```\n+\n+Here, we bind the first and last element of the tuple to `x` and `z`, but\n+ignore the middle element.\n+\n+Similarly, you can use `..` in a pattern to disregard multiple values.\n+\n+```rust\n+enum OptionalTuple {\n+    Value(i32, i32, i32),\n     Missing,\n }\n \n-let x = OptionalInt::Value(5);\n+let x = OptionalTuple::Value(5, -2, 3);\n \n match x {\n-    OptionalInt::Value(..) => println!(\"Got an int!\"),\n-    OptionalInt::Missing => println!(\"No such luck.\"),\n+    OptionalTuple::Value(..) => println!(\"Got a tuple!\"),\n+    OptionalTuple::Missing => println!(\"No such luck.\"),\n }\n ```\n \n-This prints `Got an int!`.\n+This prints `Got a tuple!`.\n \n # Guards\n \n@@ -282,38 +311,6 @@ This \u2018destructuring\u2019 behavior works on any compound data type, like\n [tuples]: primitive-types.html#tuples\n [enums]: enums.html\n \n-# Ignoring bindings\n-\n-You can use `_` in a pattern to disregard the value. For example, here\u2019s a\n-`match` against a `Result<T, E>`:\n-\n-```rust\n-# let some_value: Result<i32, &'static str> = Err(\"There was an error\");\n-match some_value {\n-    Ok(value) => println!(\"got a value: {}\", value),\n-    Err(_) => println!(\"an error occurred\"),\n-}\n-```\n-\n-In the first arm, we bind the value inside the `Ok` variant to `value`. But\n-in the `Err` arm, we use `_` to disregard the specific error, and just print\n-a general error message.\n-\n-`_` is valid in any pattern that creates a binding. This can be useful to\n-ignore parts of a larger structure:\n-\n-```rust\n-fn coordinate() -> (i32, i32, i32) {\n-    // generate and return some sort of triple tuple\n-# (1, 2, 3)\n-}\n-\n-let (x, _, z) = coordinate();\n-```\n-\n-Here, we bind the first and last element of the tuple to `x` and `z`, but\n-ignore the middle element.\n-\n # Mix and Match\n \n Whew! That\u2019s a lot of different ways to match things, and they can all be"}]}