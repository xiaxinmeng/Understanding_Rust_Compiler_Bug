{"sha": "531679684cc4caca916210adf4efb542e33d97f1", "node_id": "C_kwDOAAsO6NoAKDUzMTY3OTY4NGNjNGNhY2E5MTYyMTBhZGY0ZWZiNTQyZTMzZDk3ZjE", "commit": {"author": {"name": "Ryan Lopopolo", "email": "rjl@hyperbo.la", "date": "2022-10-19T22:29:30Z"}, "committer": {"name": "Ryan Lopopolo", "email": "rjl@hyperbo.la", "date": "2022-10-20T02:17:32Z"}, "message": "Update stability annotations on fnptr impls for C-unwind ABI", "tree": {"sha": "d83eef247aa7a12c0bbaab4690a9ce70659ec110", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d83eef247aa7a12c0bbaab4690a9ce70659ec110"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/531679684cc4caca916210adf4efb542e33d97f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEtUt7P6UGaZlFry5uRgR9c5tq4LEFAmNQr7wACgkQRgR9c5tq\n4LEiEhAAuINErTglggAePTnolEz+M34aPv8BGfSBTOPZAsSbqfAPYUnESQKecPDy\nHhndj/nujI4HNr4af3p+qg4MJFhG+SL01l+CGqr+RcQN5oPhkCRwsVPQT+4li+Ke\nHZavew8A7LCZ3jXgeeeQ2o/m/eSR3BkgviGbMcNxcgeRsb1Gg3co4VdpLwu7/feq\nnelxVxIMIkAvXzOVEp86VzP7Jz4pUaLQn4VUc9ZqipDxjCJ7TvO6fT9rLVKCy1ht\nom/R81d1rawF2YqyeZb3pAxXFomRUQBQIN0NYqQ717SQM8K0CHcW7XZHuv5xRgb/\n15Cborlgi0IgREywEY4QorlHBQRRkLJekJAjd2QDxPsNJAyN2mdV6vIgjdK/7Lhe\nQ5eCee1FhzgmKyuOsT+pUinylFH3ia2YSFNCjCiewA4c/Kc9Bt1Sik1HU2QpTuZf\nsj7zLb/LKYVNrCJQgoFxxhOz1IIhI6P9DysP5BOzNfo/E0JN8FHIj5LhHKRTR2kB\ndnHZyRzHc7YTL9NgTq4EhThPjCzuyHjaQkd596/+lm54UZfgJe8Wag+WADzOA7jb\nx4WEo+VU+Ovqbh1jZKNnu8/F81gHKNMVLnvhA+vbP7yeqiHuIWAvyqmFl1+pDwMJ\nKrQFdrnx5xoZVZ30MDdNskKXF3JDHl2AtofnxOgrHPiky/VEEHg=\n=iVK4\n-----END PGP SIGNATURE-----", "payload": "tree d83eef247aa7a12c0bbaab4690a9ce70659ec110\nparent d0a33f25d52104609356e188c8d02d55d13bcc77\nauthor Ryan Lopopolo <rjl@hyperbo.la> 1666218570 -0700\ncommitter Ryan Lopopolo <rjl@hyperbo.la> 1666232252 -0700\n\nUpdate stability annotations on fnptr impls for C-unwind ABI\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/531679684cc4caca916210adf4efb542e33d97f1", "html_url": "https://github.com/rust-lang/rust/commit/531679684cc4caca916210adf4efb542e33d97f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/531679684cc4caca916210adf4efb542e33d97f1/comments", "author": {"login": "lopopolo", "id": 860434, "node_id": "MDQ6VXNlcjg2MDQzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/860434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lopopolo", "html_url": "https://github.com/lopopolo", "followers_url": "https://api.github.com/users/lopopolo/followers", "following_url": "https://api.github.com/users/lopopolo/following{/other_user}", "gists_url": "https://api.github.com/users/lopopolo/gists{/gist_id}", "starred_url": "https://api.github.com/users/lopopolo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lopopolo/subscriptions", "organizations_url": "https://api.github.com/users/lopopolo/orgs", "repos_url": "https://api.github.com/users/lopopolo/repos", "events_url": "https://api.github.com/users/lopopolo/events{/privacy}", "received_events_url": "https://api.github.com/users/lopopolo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lopopolo", "id": 860434, "node_id": "MDQ6VXNlcjg2MDQzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/860434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lopopolo", "html_url": "https://github.com/lopopolo", "followers_url": "https://api.github.com/users/lopopolo/followers", "following_url": "https://api.github.com/users/lopopolo/following{/other_user}", "gists_url": "https://api.github.com/users/lopopolo/gists{/gist_id}", "starred_url": "https://api.github.com/users/lopopolo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lopopolo/subscriptions", "organizations_url": "https://api.github.com/users/lopopolo/orgs", "repos_url": "https://api.github.com/users/lopopolo/repos", "events_url": "https://api.github.com/users/lopopolo/events{/privacy}", "received_events_url": "https://api.github.com/users/lopopolo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0a33f25d52104609356e188c8d02d55d13bcc77", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a33f25d52104609356e188c8d02d55d13bcc77", "html_url": "https://github.com/rust-lang/rust/commit/d0a33f25d52104609356e188c8d02d55d13bcc77"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "757b6ef3d3e4d21681038b11bb1077d97658d759", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/531679684cc4caca916210adf4efb542e33d97f1/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531679684cc4caca916210adf4efb542e33d97f1/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=531679684cc4caca916210adf4efb542e33d97f1", "patch": "@@ -1862,9 +1862,15 @@ macro_rules! maybe_fnptr_doc {\n // Impls for function pointers\n macro_rules! fnptr_impls_safety_abi {\n     ($FnTy: ty, $($Arg: ident),*) => {\n+        fnptr_impls_safety_abi! { #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")] $FnTy, $($Arg),* }\n+    };\n+    (@c_unwind $FnTy: ty, $($Arg: ident),*) => {\n+        fnptr_impls_safety_abi! { #[unstable(feature = \"c_unwind\", issue = \"74990\")] $FnTy, $($Arg),* }\n+    };\n+    (#[$meta:meta] $FnTy: ty, $($Arg: ident),*) => {\n         maybe_fnptr_doc! {\n             $($Arg)* @\n-            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            #[$meta]\n             impl<Ret, $($Arg),*> PartialEq for $FnTy {\n                 #[inline]\n                 fn eq(&self, other: &Self) -> bool {\n@@ -1875,13 +1881,13 @@ macro_rules! fnptr_impls_safety_abi {\n \n         maybe_fnptr_doc! {\n             $($Arg)* @\n-            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            #[$meta]\n             impl<Ret, $($Arg),*> Eq for $FnTy {}\n         }\n \n         maybe_fnptr_doc! {\n             $($Arg)* @\n-            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            #[$meta]\n             impl<Ret, $($Arg),*> PartialOrd for $FnTy {\n                 #[inline]\n                 fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n@@ -1892,7 +1898,7 @@ macro_rules! fnptr_impls_safety_abi {\n \n         maybe_fnptr_doc! {\n             $($Arg)* @\n-            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            #[$meta]\n             impl<Ret, $($Arg),*> Ord for $FnTy {\n                 #[inline]\n                 fn cmp(&self, other: &Self) -> Ordering {\n@@ -1903,7 +1909,7 @@ macro_rules! fnptr_impls_safety_abi {\n \n         maybe_fnptr_doc! {\n             $($Arg)* @\n-            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            #[$meta]\n             impl<Ret, $($Arg),*> hash::Hash for $FnTy {\n                 fn hash<HH: hash::Hasher>(&self, state: &mut HH) {\n                     state.write_usize(*self as usize)\n@@ -1913,7 +1919,7 @@ macro_rules! fnptr_impls_safety_abi {\n \n         maybe_fnptr_doc! {\n             $($Arg)* @\n-            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            #[$meta]\n             impl<Ret, $($Arg),*> fmt::Pointer for $FnTy {\n                 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                     fmt::pointer_fmt_inner(*self as usize, f)\n@@ -1923,7 +1929,7 @@ macro_rules! fnptr_impls_safety_abi {\n \n         maybe_fnptr_doc! {\n             $($Arg)* @\n-            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            #[$meta]\n             impl<Ret, $($Arg),*> fmt::Debug for $FnTy {\n                 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                     fmt::pointer_fmt_inner(*self as usize, f)\n@@ -1938,22 +1944,22 @@ macro_rules! fnptr_impls_args {\n         fnptr_impls_safety_abi! { extern \"Rust\" fn($($Arg),+) -> Ret, $($Arg),+ }\n         fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),+) -> Ret, $($Arg),+ }\n         fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n-        fnptr_impls_safety_abi! { extern \"C-unwind\" fn($($Arg),+) -> Ret, $($Arg),+ }\n-        fnptr_impls_safety_abi! { extern \"C-unwind\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { @c_unwind extern \"C-unwind\" fn($($Arg),+) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { @c_unwind extern \"C-unwind\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n         fnptr_impls_safety_abi! { unsafe extern \"Rust\" fn($($Arg),+) -> Ret, $($Arg),+ }\n         fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),+) -> Ret, $($Arg),+ }\n         fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n-        fnptr_impls_safety_abi! { unsafe extern \"C-unwind\" fn($($Arg),+) -> Ret, $($Arg),+ }\n-        fnptr_impls_safety_abi! { unsafe extern \"C-unwind\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { @c_unwind unsafe extern \"C-unwind\" fn($($Arg),+) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { @c_unwind unsafe extern \"C-unwind\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n     };\n     () => {\n         // No variadic functions with 0 parameters\n         fnptr_impls_safety_abi! { extern \"Rust\" fn() -> Ret, }\n         fnptr_impls_safety_abi! { extern \"C\" fn() -> Ret, }\n-        fnptr_impls_safety_abi! { extern \"C-unwind\" fn() -> Ret, }\n+        fnptr_impls_safety_abi! { @c_unwind extern \"C-unwind\" fn() -> Ret, }\n         fnptr_impls_safety_abi! { unsafe extern \"Rust\" fn() -> Ret, }\n         fnptr_impls_safety_abi! { unsafe extern \"C\" fn() -> Ret, }\n-        fnptr_impls_safety_abi! { unsafe extern \"C-unwind\" fn() -> Ret, }\n+        fnptr_impls_safety_abi! { @c_unwind unsafe extern \"C-unwind\" fn() -> Ret, }\n     };\n }\n "}]}