{"sha": "1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMGMwMTVmOWI1ZTRkYTM2OTVlZDIzZjI2OWRjNTFhOGQwOWI4YTk=", "commit": {"author": {"name": "Mikhail Babenko", "email": "misha-babenko@yandex.ru", "date": "2019-11-24T21:29:40Z"}, "committer": {"name": "Mikhail Babenko", "email": "misha-babenko@yandex.ru", "date": "2019-11-25T15:10:14Z"}, "message": "added enclosing_scope attr to Try trait and fixed ui tests accordingly", "tree": {"sha": "8198a7b2eb7204efee10a573ae2c516e229ddbc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8198a7b2eb7204efee10a573ae2c516e229ddbc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9", "html_url": "https://github.com/rust-lang/rust/commit/1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9/comments", "author": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45aadf7ae627752dd7c0e8709fa8ff592c2d075e", "url": "https://api.github.com/repos/rust-lang/rust/commits/45aadf7ae627752dd7c0e8709fa8ff592c2d075e", "html_url": "https://github.com/rust-lang/rust/commit/45aadf7ae627752dd7c0e8709fa8ff592c2d075e"}], "stats": {"total": 115, "additions": 92, "deletions": 23}, "files": [{"sha": "a748ee87ef99aa7ff915a872092522b2a7c35d33", "filename": "src/libcore/ops/try.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9/src%2Flibcore%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9/src%2Flibcore%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ftry.rs?ref=1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9", "patch": "@@ -5,19 +5,20 @@\n /// extracting those success or failure values from an existing instance and\n /// creating a new instance from a success or failure value.\n #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-#[rustc_on_unimplemented(\n+#[cfg_attr(not(bootstrap), rustc_on_unimplemented(\n on(all(\n any(from_method=\"from_error\", from_method=\"from_ok\"),\n from_desugaring=\"QuestionMark\"),\n message=\"the `?` operator can only be used in {ItemContext} \\\n                that returns `Result` or `Option` \\\n                (or another type that implements `{Try}`)\",\n-label=\"cannot use the `?` operator in {ItemContext} that returns `{Self}`\"),\n+label=\"cannot use the `?` operator in {ItemContext} that returns `{Self}`\",\n+enclosing_scope=\"this function should return `Result` or `Option` to accept `?`\"),\n on(all(from_method=\"into_result\", from_desugaring=\"QuestionMark\"),\n message=\"the `?` operator can only be applied to values \\\n                that implement `{Try}`\",\n label=\"the `?` operator cannot be applied to type `{Self}`\")\n-)]\n+))]\n #[doc(alias = \"?\")]\n pub trait Try {\n     /// The type of this value when viewed as successful."}, {"sha": "46f8f41076bf59679b368ed13f7fb3aabc136b6f", "filename": "src/test/ui/async-await/try-on-option-in-async.stderr", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr?ref=1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9", "patch": "@@ -1,26 +1,44 @@\n error[E0277]: the `?` operator can only be used in an async block that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/try-on-option-in-async.rs:8:9\n    |\n-LL |         x?;\n-   |         ^^ cannot use the `?` operator in an async block that returns `{integer}`\n+LL |       async {\n+   |  ___________-\n+LL | |         let x: Option<u32> = None;\n+LL | |         x?;\n+   | |         ^^ cannot use the `?` operator in an async block that returns `{integer}`\n+LL | |         22\n+LL | |     }.await\n+   | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `{integer}`\n    = note: required by `std::ops::Try::from_error`\n \n error[E0277]: the `?` operator can only be used in an async closure that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/try-on-option-in-async.rs:16:9\n    |\n-LL |         x?;\n-   |         ^^ cannot use the `?` operator in an async closure that returns `u32`\n+LL |       let async_closure = async || {\n+   |  __________________________________-\n+LL | |         let x: Option<u32> = None;\n+LL | |         x?;\n+   | |         ^^ cannot use the `?` operator in an async closure that returns `u32`\n+LL | |         22_u32\n+LL | |     };\n+   | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `u32`\n    = note: required by `std::ops::Try::from_error`\n \n error[E0277]: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/try-on-option-in-async.rs:25:5\n    |\n-LL |     x?;\n-   |     ^^ cannot use the `?` operator in an async function that returns `u32`\n+LL |   async fn an_async_function() -> u32 {\n+   |  _____________________________________-\n+LL | |     let x: Option<u32> = None;\n+LL | |     x?;\n+   | |     ^^ cannot use the `?` operator in an async function that returns `u32`\n+LL | |     22\n+LL | | }\n+   | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `u32`\n    = note: required by `std::ops::Try::from_error`"}, {"sha": "1143bddfe45a35c60734c265b32b46484d28ec1b", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9", "patch": "@@ -575,8 +575,17 @@ LL |     if (let 0 = 0)? {}\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/disallowed-positions.rs:46:8\n    |\n-LL |     if (let 0 = 0)? {}\n-   |        ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+LL | / fn nested_within_if_expr() {\n+LL | |     if &let 0 = 0 {}\n+LL | |\n+LL | |\n+...  |\n+LL | |     if (let 0 = 0)? {}\n+   | |        ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+...  |\n+LL | |     if let true = let true = true {}\n+LL | | }\n+   | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `()`\n    = note: required by `std::ops::Try::from_error`\n@@ -754,8 +763,17 @@ LL |     while (let 0 = 0)? {}\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/disallowed-positions.rs:110:11\n    |\n-LL |     while (let 0 = 0)? {}\n-   |           ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+LL | / fn nested_within_while_expr() {\n+LL | |     while &let 0 = 0 {}\n+LL | |\n+LL | |\n+...  |\n+LL | |     while (let 0 = 0)? {}\n+   | |           ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+...  |\n+LL | |     while let true = let true = true {}\n+LL | | }\n+   | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `()`\n    = note: required by `std::ops::Try::from_error`\n@@ -924,8 +942,17 @@ LL |     (let 0 = 0)?;\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/disallowed-positions.rs:183:5\n    |\n-LL |     (let 0 = 0)?;\n-   |     ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+LL | / fn outside_if_and_while_expr() {\n+LL | |     &let 0 = 0;\n+LL | |\n+LL | |     !let 0 = 0;\n+...  |\n+LL | |     (let 0 = 0)?;\n+   | |     ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+...  |\n+LL | |\n+LL | | }\n+   | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `()`\n    = note: required by `std::ops::Try::from_error`"}, {"sha": "ce3aca39fb8fb453184f075721c6604faeece6ed", "filename": "src/test/ui/try-on-option-diagnostics.stderr", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.stderr?ref=1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9", "patch": "@@ -1,17 +1,28 @@\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/try-on-option-diagnostics.rs:7:5\n    |\n-LL |     x?;\n-   |     ^^ cannot use the `?` operator in a function that returns `u32`\n+LL | / fn a_function() -> u32 {\n+LL | |     let x: Option<u32> = None;\n+LL | |     x?;\n+   | |     ^^ cannot use the `?` operator in a function that returns `u32`\n+LL | |     22\n+LL | | }\n+   | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `u32`\n    = note: required by `std::ops::Try::from_error`\n \n error[E0277]: the `?` operator can only be used in a closure that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/try-on-option-diagnostics.rs:14:9\n    |\n-LL |         x?;\n-   |         ^^ cannot use the `?` operator in a closure that returns `{integer}`\n+LL |       let a_closure = || {\n+   |  _____________________-\n+LL | |         let x: Option<u32> = None;\n+LL | |         x?;\n+   | |         ^^ cannot use the `?` operator in a closure that returns `{integer}`\n+LL | |         22\n+LL | |     };\n+   | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `{integer}`\n    = note: required by `std::ops::Try::from_error`"}, {"sha": "07615b52a48a5c77a0a9e6530ae0caae5817e1f2", "filename": "src/test/ui/try-on-option.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9/src%2Ftest%2Fui%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9/src%2Ftest%2Fui%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option.stderr?ref=1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9", "patch": "@@ -10,8 +10,13 @@ LL |     x?;\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/try-on-option.rs:13:5\n    |\n-LL |     x?;\n-   |     ^^ cannot use the `?` operator in a function that returns `u32`\n+LL | / fn bar() -> u32 {\n+LL | |     let x: Option<u32> = None;\n+LL | |     x?;\n+   | |     ^^ cannot use the `?` operator in a function that returns `u32`\n+LL | |     22\n+LL | | }\n+   | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `u32`\n    = note: required by `std::ops::Try::from_error`"}, {"sha": "d8ba264583e45b56b8381f606787207cc53c3f30", "filename": "src/test/ui/try-operator-on-main.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr?ref=1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9", "patch": "@@ -1,8 +1,15 @@\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/try-operator-on-main.rs:9:5\n    |\n-LL |     std::fs::File::open(\"foo\")?;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+LL | / fn main() {\n+LL | |     // error for a `Try` type on a non-`Try` fn\n+LL | |     std::fs::File::open(\"foo\")?;\n+   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+LL | |\n+...  |\n+LL | |     try_trait_generic::<()>();\n+LL | | }\n+   | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `()`\n    = note: required by `std::ops::Try::from_error`"}]}