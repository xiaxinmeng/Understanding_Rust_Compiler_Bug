{"sha": "fa400ace11f9db1e299fef3992d3301ccd985bf0", "node_id": "C_kwDOAAsO6NoAKGZhNDAwYWNlMTFmOWRiMWUyOTlmZWYzOTkyZDMzMDFjY2Q5ODViZjA", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-08T00:12:11Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-02-09T19:39:12Z"}, "message": "rustdoc: Create enum for sections holding items", "tree": {"sha": "7948c0d998a56fd73dfc85eb28d23fdfa05ac4b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7948c0d998a56fd73dfc85eb28d23fdfa05ac4b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa400ace11f9db1e299fef3992d3301ccd985bf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa400ace11f9db1e299fef3992d3301ccd985bf0", "html_url": "https://github.com/rust-lang/rust/commit/fa400ace11f9db1e299fef3992d3301ccd985bf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa400ace11f9db1e299fef3992d3301ccd985bf0/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "427eba2f0bacdeaebc992a78eb2889564de7d7cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/427eba2f0bacdeaebc992a78eb2889564de7d7cf", "html_url": "https://github.com/rust-lang/rust/commit/427eba2f0bacdeaebc992a78eb2889564de7d7cf"}], "stats": {"total": 165, "additions": 128, "deletions": 37}, "files": [{"sha": "3fd94fb9dc522007f3c7b49b4b3cfd80e1a16d6f", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 121, "deletions": 30, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/fa400ace11f9db1e299fef3992d3301ccd985bf0/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa400ace11f9db1e299fef3992d3301ccd985bf0/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=fa400ace11f9db1e299fef3992d3301ccd985bf0", "patch": "@@ -2409,33 +2409,124 @@ fn sidebar_enum(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, e: &clean:\n     }\n }\n \n-fn item_ty_to_strs(ty: ItemType) -> (&'static str, &'static str) {\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+enum ItemSection {\n+    Reexports,\n+    Modules,\n+    Structs,\n+    Unions,\n+    Enums,\n+    Functions,\n+    TypeDefinitions,\n+    Statics,\n+    Constants,\n+    Traits,\n+    Implementations,\n+    TypeMethods,\n+    Methods,\n+    StructFields,\n+    Variants,\n+    Macros,\n+    PrimitiveTypes,\n+    AssociatedTypes,\n+    AssociatedConstants,\n+    ForeignTypes,\n+    Keywords,\n+    OpaqueTypes,\n+    AttributeMacros,\n+    DeriveMacros,\n+    TraitAliases,\n+}\n+\n+impl ItemSection {\n+    fn id(self) -> &'static str {\n+        match self {\n+            Self::Reexports => \"reexports\",\n+            Self::Modules => \"modules\",\n+            Self::Structs => \"structs\",\n+            Self::Unions => \"unions\",\n+            Self::Enums => \"enums\",\n+            Self::Functions => \"functions\",\n+            Self::TypeDefinitions => \"types\",\n+            Self::Statics => \"statics\",\n+            Self::Constants => \"constants\",\n+            Self::Traits => \"traits\",\n+            Self::Implementations => \"impls\",\n+            Self::TypeMethods => \"tymethods\",\n+            Self::Methods => \"methods\",\n+            Self::StructFields => \"fields\",\n+            Self::Variants => \"variants\",\n+            Self::Macros => \"macros\",\n+            Self::PrimitiveTypes => \"primitives\",\n+            Self::AssociatedTypes => \"associated-types\",\n+            Self::AssociatedConstants => \"associated-consts\",\n+            Self::ForeignTypes => \"foreign-types\",\n+            Self::Keywords => \"keywords\",\n+            Self::OpaqueTypes => \"opaque-types\",\n+            Self::AttributeMacros => \"attributes\",\n+            Self::DeriveMacros => \"derives\",\n+            Self::TraitAliases => \"trait-aliases\",\n+        }\n+    }\n+\n+    fn name(self) -> &'static str {\n+        match self {\n+            Self::Reexports => \"Re-exports\",\n+            Self::Modules => \"Modules\",\n+            Self::Structs => \"Structs\",\n+            Self::Unions => \"Unions\",\n+            Self::Enums => \"Enums\",\n+            Self::Functions => \"Functions\",\n+            Self::TypeDefinitions => \"Type Definitions\",\n+            Self::Statics => \"Statics\",\n+            Self::Constants => \"Constants\",\n+            Self::Traits => \"Traits\",\n+            Self::Implementations => \"Implementations\",\n+            Self::TypeMethods => \"Type Methods\",\n+            Self::Methods => \"Methods\",\n+            Self::StructFields => \"Struct Fields\",\n+            Self::Variants => \"Variants\",\n+            Self::Macros => \"Macros\",\n+            Self::PrimitiveTypes => \"Primitive Types\",\n+            Self::AssociatedTypes => \"Associated Types\",\n+            Self::AssociatedConstants => \"Associated Constants\",\n+            Self::ForeignTypes => \"Foreign Types\",\n+            Self::Keywords => \"Keywords\",\n+            Self::OpaqueTypes => \"Opaque Types\",\n+            Self::AttributeMacros => \"Attribute Macros\",\n+            Self::DeriveMacros => \"Derive Macros\",\n+            Self::TraitAliases => \"Trait aliases\",\n+        }\n+    }\n+}\n+\n+fn item_ty_to_section(ty: ItemType) -> ItemSection {\n     match ty {\n-        ItemType::ExternCrate | ItemType::Import => (\"reexports\", \"Re-exports\"),\n-        ItemType::Module => (\"modules\", \"Modules\"),\n-        ItemType::Struct => (\"structs\", \"Structs\"),\n-        ItemType::Union => (\"unions\", \"Unions\"),\n-        ItemType::Enum => (\"enums\", \"Enums\"),\n-        ItemType::Function => (\"functions\", \"Functions\"),\n-        ItemType::Typedef => (\"types\", \"Type Definitions\"),\n-        ItemType::Static => (\"statics\", \"Statics\"),\n-        ItemType::Constant => (\"constants\", \"Constants\"),\n-        ItemType::Trait => (\"traits\", \"Traits\"),\n-        ItemType::Impl => (\"impls\", \"Implementations\"),\n-        ItemType::TyMethod => (\"tymethods\", \"Type Methods\"),\n-        ItemType::Method => (\"methods\", \"Methods\"),\n-        ItemType::StructField => (\"fields\", \"Struct Fields\"),\n-        ItemType::Variant => (\"variants\", \"Variants\"),\n-        ItemType::Macro => (\"macros\", \"Macros\"),\n-        ItemType::Primitive => (\"primitives\", \"Primitive Types\"),\n-        ItemType::AssocType => (\"associated-types\", \"Associated Types\"),\n-        ItemType::AssocConst => (\"associated-consts\", \"Associated Constants\"),\n-        ItemType::ForeignType => (\"foreign-types\", \"Foreign Types\"),\n-        ItemType::Keyword => (\"keywords\", \"Keywords\"),\n-        ItemType::OpaqueTy => (\"opaque-types\", \"Opaque Types\"),\n-        ItemType::ProcAttribute => (\"attributes\", \"Attribute Macros\"),\n-        ItemType::ProcDerive => (\"derives\", \"Derive Macros\"),\n-        ItemType::TraitAlias => (\"trait-aliases\", \"Trait aliases\"),\n+        ItemType::ExternCrate | ItemType::Import => ItemSection::Reexports,\n+        ItemType::Module => ItemSection::Modules,\n+        ItemType::Struct => ItemSection::Structs,\n+        ItemType::Union => ItemSection::Unions,\n+        ItemType::Enum => ItemSection::Enums,\n+        ItemType::Function => ItemSection::Functions,\n+        ItemType::Typedef => ItemSection::TypeDefinitions,\n+        ItemType::Static => ItemSection::Statics,\n+        ItemType::Constant => ItemSection::Constants,\n+        ItemType::Trait => ItemSection::Traits,\n+        ItemType::Impl => ItemSection::Implementations,\n+        ItemType::TyMethod => ItemSection::TypeMethods,\n+        ItemType::Method => ItemSection::Methods,\n+        ItemType::StructField => ItemSection::StructFields,\n+        ItemType::Variant => ItemSection::Variants,\n+        ItemType::Macro => ItemSection::Macros,\n+        ItemType::Primitive => ItemSection::PrimitiveTypes,\n+        ItemType::AssocType => ItemSection::AssociatedTypes,\n+        ItemType::AssocConst => ItemSection::AssociatedConstants,\n+        ItemType::ForeignType => ItemSection::ForeignTypes,\n+        ItemType::Keyword => ItemSection::Keywords,\n+        ItemType::OpaqueTy => ItemSection::OpaqueTypes,\n+        ItemType::ProcAttribute => ItemSection::AttributeMacros,\n+        ItemType::ProcDerive => ItemSection::DeriveMacros,\n+        ItemType::TraitAlias => ItemSection::TraitAliases,\n         ItemType::Generic => unreachable!(),\n     }\n }\n@@ -2449,8 +2540,8 @@ fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n             && (it.type_() == ItemType::ExternCrate\n                 || (it.type_() == ItemType::Import && !it.is_stripped()))\n     }) {\n-        let (id, name) = item_ty_to_strs(ItemType::Import);\n-        sidebar.push_str(&format!(\"<li><a href=\\\"#{}\\\">{}</a></li>\", id, name));\n+        let sec = item_ty_to_section(ItemType::Import);\n+        sidebar.push_str(&format!(\"<li><a href=\\\"#{}\\\">{}</a></li>\", sec.id(), sec.name()));\n     }\n \n     // ordering taken from item_module, reorder, where it prioritized elements in a certain order\n@@ -2478,8 +2569,8 @@ fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n         ItemType::Keyword,\n     ] {\n         if items.iter().any(|it| !it.is_stripped() && it.type_() == myty && it.name.is_some()) {\n-            let (id, name) = item_ty_to_strs(myty);\n-            sidebar.push_str(&format!(\"<li><a href=\\\"#{}\\\">{}</a></li>\", id, name));\n+            let sec = item_ty_to_section(myty);\n+            sidebar.push_str(&format!(\"<li><a href=\\\"#{}\\\">{}</a></li>\", sec.id(), sec.name()));\n         }\n     }\n "}, {"sha": "d73bc658f9fd3eb2b3e9dcf81118fb7343547298", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fa400ace11f9db1e299fef3992d3301ccd985bf0/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa400ace11f9db1e299fef3992d3301ccd985bf0/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=fa400ace11f9db1e299fef3992d3301ccd985bf0", "patch": "@@ -16,10 +16,10 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::abi::{Layout, Primitive, TagEncoding, Variants};\n \n use super::{\n-    collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_strs, notable_traits_decl,\n-    render_assoc_item, render_assoc_items, render_attributes_in_code, render_attributes_in_pre,\n-    render_impl, render_stability_since_raw, write_srclink, AssocItemLink, Context,\n-    ImplRenderingParameters,\n+    collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_section,\n+    notable_traits_decl, render_assoc_item, render_assoc_items, render_attributes_in_code,\n+    render_attributes_in_pre, render_impl, render_stability_since_raw, write_srclink,\n+    AssocItemLink, Context, ImplRenderingParameters,\n };\n use crate::clean;\n use crate::formats::item_type::ItemType;\n@@ -288,15 +288,15 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                 w.write_str(ITEM_TABLE_CLOSE);\n             }\n             curty = myty;\n-            let (short, name) = item_ty_to_strs(myty.unwrap());\n+            let sec = item_ty_to_section(myty.unwrap());\n             write!(\n                 w,\n                 \"<h2 id=\\\"{id}\\\" class=\\\"small-section-header\\\">\\\n                     <a href=\\\"#{id}\\\">{name}</a>\\\n                  </h2>\\n{}\",\n                 ITEM_TABLE_OPEN,\n-                id = cx.derive_id(short.to_owned()),\n-                name = name\n+                id = cx.derive_id(sec.id().to_owned()),\n+                name = sec.name(),\n             );\n         }\n "}]}