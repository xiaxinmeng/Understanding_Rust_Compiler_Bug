{"sha": "20e94de3925af29bd73a0f0f0b0706da72271115", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZTk0ZGUzOTI1YWYyOWJkNzNhMGYwZjBiMDcwNmRhNzIyNzExMTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-14T23:05:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-15T00:13:12Z"}, "message": "Add a flag to run ignored tests. Issue #428", "tree": {"sha": "fa40d1bcea157b4ddc596db6ffd2e4777c6a03a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa40d1bcea157b4ddc596db6ffd2e4777c6a03a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20e94de3925af29bd73a0f0f0b0706da72271115", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20e94de3925af29bd73a0f0f0b0706da72271115", "html_url": "https://github.com/rust-lang/rust/commit/20e94de3925af29bd73a0f0f0b0706da72271115", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20e94de3925af29bd73a0f0f0b0706da72271115/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81acf69f9708a236ef78faa180575ae7b618fba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/81acf69f9708a236ef78faa180575ae7b618fba9", "html_url": "https://github.com/rust-lang/rust/commit/81acf69f9708a236ef78faa180575ae7b618fba9"}], "stats": {"total": 141, "additions": 119, "deletions": 22}, "files": [{"sha": "7ce3355b2050759954548834ceb1d08eace15ab3", "filename": "src/lib/getopts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20e94de3925af29bd73a0f0f0b0706da72271115/src%2Flib%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20e94de3925af29bd73a0f0f0b0706da72271115/src%2Flib%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fgetopts.rs?ref=20e94de3925af29bd73a0f0f0b0706da72271115", "patch": "@@ -17,6 +17,7 @@ export optflag;\n export optflagopt;\n export optmulti;\n export getopts;\n+export getopts_ivec;\n export result;\n export success;\n export failure;"}, {"sha": "cfca12480a1d4cead2564d1b6db031c46a2c1952", "filename": "src/lib/test.rs", "status": "modified", "additions": 78, "deletions": 22, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/20e94de3925af29bd73a0f0f0b0706da72271115/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20e94de3925af29bd73a0f0f0b0706da72271115/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=20e94de3925af29bd73a0f0f0b0706da72271115", "patch": "@@ -8,10 +8,13 @@ export test_fn;\n export test_desc;\n export test_main;\n export test_result;\n+export test_opts;\n export tr_ok;\n export tr_failed;\n export tr_ignored;\n export run_test;\n+export filter_tests;\n+export parse_opts;\n \n // The name of a test. By convention this follows the rules for rust\n // paths, i.e it should be a series of identifiers seperated by double\n@@ -34,19 +37,52 @@ type test_desc = rec(test_name name,\n // The default console test runner. It accepts the command line\n // arguments and a vector of test_descs (generated at compile time).\n fn test_main(&vec[str] args, &test_desc[] tests) {\n-    if (!run_tests(parse_opts(args), tests)) {\n+    auto ivec_args = {\n+        auto iargs = ~[];\n+        for (str arg in args) {\n+            iargs += ~[arg]\n+        }\n+        iargs\n+    };\n+    check ivec::is_not_empty(ivec_args);\n+    auto opts = alt (parse_opts(ivec_args)) {\n+        either::left(?o) { o }\n+        either::right(?m) { fail m }\n+    };\n+    if (!run_tests(opts, tests)) {\n         fail \"Some tests failed\";\n     }\n }\n \n-type test_opts = rec(option::t[str] filter);\n+type test_opts = rec(option::t[str] filter,\n+                     bool run_ignored);\n+\n+type opt_res = either::t[test_opts, str];\n+\n+// Parses command line arguments into test options\n+fn parse_opts(&str[] args) : ivec::is_not_empty(args) -> opt_res {\n+\n+    // FIXME (#649): Shouldn't have to check here\n+    check ivec::is_not_empty(args);\n+    auto args_ = ivec::tail(args);\n+    auto opts = ~[getopts::optflag(\"ignored\")];\n+    auto match = alt (getopts::getopts_ivec(args_, opts)) {\n+        getopts::success(?m) { m }\n+        getopts::failure(?f) { ret either::right(getopts::fail_str(f)) }\n+    };\n+\n+    auto filter = if (vec::len(match.free) > 0u) {\n+        option::some(match.free.(0))\n+    } else {\n+        option::none\n+    };\n+\n+    auto run_ignored = getopts::opt_present(match, \"ignored\");\n+\n+    auto test_opts = rec(filter = filter,\n+                         run_ignored = run_ignored);\n \n-fn parse_opts(&vec[str] args) -> test_opts {\n-    rec(filter = if (vec::len(args) > 1u) {\n-            option::some(args.(1))\n-        } else {\n-            option::none\n-        })\n+    ret either::left(test_opts);\n }\n \n tag test_result {\n@@ -135,23 +171,43 @@ fn run_tests(&test_opts opts, &test_desc[] tests) -> bool {\n }\n \n fn filter_tests(&test_opts opts, &test_desc[] tests) -> test_desc[] {\n-    if (option::is_none(opts.filter)) {\n-        ret tests;\n-    }\n+    auto filtered = tests;\n \n-    auto filter_str = alt opts.filter { option::some(?f) { f }\n-                                        option::none { \"\" } };\n+    filtered = if (option::is_none(opts.filter)) {\n+        filtered\n+    } else {\n+        auto filter_str = alt opts.filter { option::some(?f) { f }\n+                                            option::none { \"\" } };\n+\n+        auto filter = bind fn(&test_desc test,\n+                              str filter_str) -> option::t[test_desc] {\n+            if (str::find(test.name, filter_str) >= 0) {\n+                ret option::some(test);\n+            } else {\n+                ret option::none;\n+            }\n+        } (_, filter_str);\n \n-    auto filter = bind fn(&test_desc test,\n-                          str filter_str) -> option::t[test_desc] {\n-        if (str::find(test.name, filter_str) >= 0) {\n-            ret option::some(test);\n-        } else {\n-            ret option::none;\n-        }\n-    } (_, filter_str);\n+        ivec::filter_map(filter, filtered)\n+    };\n+\n+    filtered = if (!opts.run_ignored) {\n+        filtered\n+    } else {\n+        auto filter = fn(&test_desc test) -> option::t[test_desc] {\n+            if (test.ignore) {\n+                ret option::some(rec(name = test.name,\n+                                     fn = test.fn,\n+                                     ignore = false));\n+            } else {\n+                ret option::none;\n+            }\n+        };\n+\n+        ivec::filter_map(filter, filtered)\n+    };\n \n-    ret ivec::filter_map(filter, tests);\n+    ret filtered;\n }\n \n fn run_test(&test_desc test) -> test_result {"}, {"sha": "0079a94522bb35c741eeec738358a0279c0fdd78", "filename": "src/test/stdtest/test.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/20e94de3925af29bd73a0f0f0b0706da72271115/src%2Ftest%2Fstdtest%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20e94de3925af29bd73a0f0f0b0706da72271115/src%2Ftest%2Fstdtest%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftest.rs?ref=20e94de3925af29bd73a0f0f0b0706da72271115", "patch": "@@ -1,4 +1,8 @@\n import std::test;\n+import std::str;\n+import std::option;\n+import std::either;\n+import std::ivec;\n \n #[test]\n fn do_not_run_ignored_tests() {\n@@ -26,6 +30,42 @@ fn ignored_tests_result_in_ignored() {\n     assert res == test::tr_ignored;\n }\n \n+#[test]\n+fn first_free_arg_should_be_a_filter() {\n+    auto args = ~[\"progname\", \"filter\"];\n+    check ivec::is_not_empty(args);\n+    auto opts = alt test::parse_opts(args) { either::left(?o) { o } };\n+    assert str::eq(\"filter\", option::get(opts.filter));\n+}\n+\n+#[test]\n+fn parse_ignored_flag() {\n+    auto args = ~[\"progname\", \"filter\", \"--ignored\"];\n+    check ivec::is_not_empty(args);\n+    auto opts = alt test::parse_opts(args) { either::left(?o) { o } };\n+    assert opts.run_ignored;\n+}\n+\n+#[test]\n+fn filter_for_ignored_option() {\n+    // When we run ignored tests the test filter should filter out all the\n+    // unignored tests and flip the ignore flag on the rest to false\n+\n+    auto opts = rec(filter = option::none,\n+                    run_ignored = true);\n+    auto tests = ~[rec(name = \"1\",\n+                       fn = fn() {},\n+                       ignore = true),\n+                   rec(name = \"2\",\n+                       fn = fn() {},\n+                       ignore = false)];\n+    auto filtered = test::filter_tests(opts, tests);\n+\n+    assert ivec::len(filtered) == 1u;\n+    assert filtered.(0).name == \"1\";\n+    assert filtered.(0).ignore == false;\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}]}