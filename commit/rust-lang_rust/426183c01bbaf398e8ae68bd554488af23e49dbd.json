{"sha": "426183c01bbaf398e8ae68bd554488af23e49dbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNjE4M2MwMWJiYWYzOThlOGFlNjhiZDU1NDQ4OGFmMjNlNDlkYmQ=", "commit": {"author": {"name": "Christopher Vittal", "email": "christopher.vittal@gmail.com", "date": "2017-10-10T03:14:13Z"}, "committer": {"name": "Christopher Vittal", "email": "christopher.vittal@gmail.com", "date": "2017-10-10T03:22:34Z"}, "message": "Update README and tests for new infrastructure", "tree": {"sha": "75b7d93a3ee5e1bc4e0cf0ac1ff944aa61360141", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75b7d93a3ee5e1bc4e0cf0ac1ff944aa61360141"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/426183c01bbaf398e8ae68bd554488af23e49dbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/426183c01bbaf398e8ae68bd554488af23e49dbd", "html_url": "https://github.com/rust-lang/rust/commit/426183c01bbaf398e8ae68bd554488af23e49dbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/426183c01bbaf398e8ae68bd554488af23e49dbd/comments", "author": {"login": "chrisvittal", "id": 15916123, "node_id": "MDQ6VXNlcjE1OTE2MTIz", "avatar_url": "https://avatars.githubusercontent.com/u/15916123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisvittal", "html_url": "https://github.com/chrisvittal", "followers_url": "https://api.github.com/users/chrisvittal/followers", "following_url": "https://api.github.com/users/chrisvittal/following{/other_user}", "gists_url": "https://api.github.com/users/chrisvittal/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisvittal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisvittal/subscriptions", "organizations_url": "https://api.github.com/users/chrisvittal/orgs", "repos_url": "https://api.github.com/users/chrisvittal/repos", "events_url": "https://api.github.com/users/chrisvittal/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisvittal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chrisvittal", "id": 15916123, "node_id": "MDQ6VXNlcjE1OTE2MTIz", "avatar_url": "https://avatars.githubusercontent.com/u/15916123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisvittal", "html_url": "https://github.com/chrisvittal", "followers_url": "https://api.github.com/users/chrisvittal/followers", "following_url": "https://api.github.com/users/chrisvittal/following{/other_user}", "gists_url": "https://api.github.com/users/chrisvittal/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisvittal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisvittal/subscriptions", "organizations_url": "https://api.github.com/users/chrisvittal/orgs", "repos_url": "https://api.github.com/users/chrisvittal/repos", "events_url": "https://api.github.com/users/chrisvittal/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisvittal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5e8a0ea7c337225ba96248387b343f044205b7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5e8a0ea7c337225ba96248387b343f044205b7e", "html_url": "https://github.com/rust-lang/rust/commit/a5e8a0ea7c337225ba96248387b343f044205b7e"}], "stats": {"total": 377, "additions": 304, "deletions": 73}, "files": [{"sha": "b00b35aa29ff45191cc696c3970ee381559ed464", "filename": "src/test/mir-opt/README.md", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2FREADME.md?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -7,13 +7,13 @@ The test format is:\n // END RUST SOURCE\n // START $file_name_of_some_mir_dump_0\n //  $expected_line_0\n-// ...\n+// (lines or elision)\n // $expected_line_N\n // END $file_name_of_some_mir_dump_0\n-// ...\n+// (lines or elision)\n // START $file_name_of_some_mir_dump_N\n //  $expected_line_0\n-// ...\n+// (lines or elision)\n // $expected_line_N\n // END $file_name_of_some_mir_dump_N\n ```\n@@ -22,10 +22,15 @@ All the test information is in comments so the test is runnable.\n \n For each $file_name, compiletest expects [$expected_line_0, ...,\n $expected_line_N] to appear in the dumped MIR in order.  Currently it allows\n-other non-matched lines before, after and in-between. Note that this includes\n-lines that end basic blocks or begin new ones; it is good practice\n-in your tests to include the terminator for each of your basic blocks as an\n-internal sanity check guarding against a test like:\n+other non-matched lines before and after, but not between $expected_lines,\n+should you want to skip lines, you must include an elision comment, of the form\n+(as a regex) `//\\s*...\\s*`. The lines will be skipped lazily, that is, if there\n+are two identical lines in the output that match the line after the elision\n+comment, the first one wil be matched.\n+\n+Examples:\n+\n+The following blocks will not match the one after it.\n \n ```\n bb0: {\n@@ -35,8 +40,6 @@ bb0: {\n }\n ```\n \n-that will inadvertantly pattern-matching against:\n-\n ```\n bb0: {\n     StorageLive(_1);\n@@ -49,6 +52,18 @@ bb1: {\n }\n ```\n \n+But this will match the one above,\n+\n+```\n+bb0: {\n+    StorageLive(_1);\n+    _1 = const true;\n+    ...\n+    StorageDead(_1);\n+    ...\n+}\n+```\n+\n Lines match ignoring whitespace, and the prefix \"//\" is removed.\n \n It also currently strips trailing comments -- partly because the full file path"}, {"sha": "5c3b418e950016db67d98ebaac93be5b82db5b92", "filename": "src/test/mir-opt/box_expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -30,7 +30,10 @@ impl Drop for S {\n // END RUST SOURCE\n // START rustc.node4.ElaborateDrops.before.mir\n //     let mut _0: ();\n-//     let _1: std::boxed::Box<S>;\n+//     scope 1 {\n+//         let _1: std::boxed::Box<S>;\n+//     }\n+//     ...\n //     let mut _2: std::boxed::Box<S>;\n //     let mut _3: ();\n //     let mut _4: std::boxed::Box<S>;"}, {"sha": "0b0d2f45f1c553259ec64a17a2a2d6588e894dc2", "filename": "src/test/mir-opt/copy_propagation.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fcopy_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fcopy_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -18,17 +18,23 @@ fn main() { }\n // END RUST SOURCE\n // START rustc.node4.CopyPropagation.before.mir\n //  bb0: {\n+//      ...\n //      _2 = _1;\n+//      ...\n //      _4 = _2;\n //      _3 = _4;\n+//      ...\n //      _5 = _3;\n //      _0 = _5;\n+//      ...\n //      return;\n //  }\n // END rustc.node4.CopyPropagation.before.mir\n // START rustc.node4.CopyPropagation.after.mir\n //  bb0: {\n+//      ...\n //      _0 = _1;\n+//      ...\n //      return;\n //  }\n // END rustc.node4.CopyPropagation.after.mir"}, {"sha": "ce2b13ecda7b77d634d98de46be63c894d8c4988", "filename": "src/test/mir-opt/deaggregator_test.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -23,19 +23,25 @@ fn main() {}\n // END RUST SOURCE\n // START rustc.node13.Deaggregator.before.mir\n // bb0: {\n+//     ...\n //     _2 = _1;\n+//     ...\n //     _3 = _2;\n //     _0 = Baz { x: _3, y: const 0f32, z: const false };\n+//     ...\n //     return;\n // }\n // END rustc.node13.Deaggregator.before.mir\n // START rustc.node13.Deaggregator.after.mir\n // bb0: {\n+//     ...\n //     _2 = _1;\n+//     ...\n //     _3 = _2;\n //     (_0.0: usize) = _3;\n //     (_0.1: f32) = const 0f32;\n //     (_0.2: bool) = const false;\n+//     ...\n //     return;\n // }\n // END rustc.node13.Deaggregator.after.mir"}, {"sha": "d77dcb627817fb75431f0d4500e5d79f2e42051b", "filename": "src/test/mir-opt/deaggregator_test_enum.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -28,18 +28,26 @@ fn main() {\n // END RUST SOURCE\n // START rustc.node10.Deaggregator.before.mir\n // bb0: {\n+//     StorageLive(_2);\n //     _2 = _1;\n+//     StorageLive(_3);\n //     _3 = _2;\n //     _0 = Baz::Foo { x: _3 };\n+//     StorageDead(_3);\n+//     StorageDead(_2);\n //     return;\n // }\n // END rustc.node10.Deaggregator.before.mir\n // START rustc.node10.Deaggregator.after.mir\n // bb0: {\n+//     StorageLive(_2);\n //     _2 = _1;\n+//     StorageLive(_3);\n //     _3 = _2;\n //     ((_0 as Foo).0: usize) = _3;\n //     discriminant(_0) = 1;\n+//     StorageDead(_3);\n+//     StorageDead(_2);\n //     return;\n // }\n // END rustc.node10.Deaggregator.after.mir"}, {"sha": "e65830bddc4d3040dc09b382752896a67d7b2e53", "filename": "src/test/mir-opt/deaggregator_test_enum_2.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -28,29 +28,35 @@ fn main() {}\n // END RUST SOURCE\n // START rustc.node12.Deaggregator.before.mir\n //  bb1: {\n+//      StorageLive(_6);\n //      _6 = _4;\n //      _0 = Foo::A(_6,);\n+//      StorageDead(_6);\n //      goto -> bb3;\n //  }\n-//\n //  bb2: {\n+//      StorageLive(_7);\n //      _7 = _4;\n //      _0 = Foo::B(_7,);\n+//      StorageDead(_7);\n //      goto -> bb3;\n //  }\n // END rustc.node12.Deaggregator.before.mir\n // START rustc.node12.Deaggregator.after.mir\n //  bb1: {\n+//      StorageLive(_6);\n //      _6 = _4;\n //      ((_0 as A).0: i32) = _6;\n //      discriminant(_0) = 0;\n+//      StorageDead(_6);\n //      goto -> bb3;\n //  }\n-//\n //  bb2: {\n+//      StorageLive(_7);\n //      _7 = _4;\n //      ((_0 as B).0: i32) = _7;\n //      discriminant(_0) = 1;\n+//      StorageDead(_7);\n //      goto -> bb3;\n //  }\n // END rustc.node12.Deaggregator.after.mir"}, {"sha": "ed68d3bf5f750daf3ef35ec046a4865eb9d22ccf", "filename": "src/test/mir-opt/deaggregator_test_multiple.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -24,25 +24,35 @@ fn main() { }\n // END RUST SOURCE\n // START rustc.node10.Deaggregator.before.mir\n // bb0: {\n+//     ...\n //     _2 = _1;\n+//     ...\n //     _4 = _2;\n //     _3 = Foo::A(_4,);\n+//     ...\n //     _6 = _2;\n //     _5 = Foo::A(_6,);\n+//     ...\n //     _0 = [_3, _5];\n+//     ...\n //     return;\n // }\n // END rustc.node10.Deaggregator.before.mir\n // START rustc.node10.Deaggregator.after.mir\n // bb0: {\n+//     ...\n //     _2 = _1;\n+//     ...\n //     _4 = _2;\n //     ((_3 as A).0: i32) = _4;\n //     discriminant(_3) = 0;\n+//     ...\n //     _6 = _2;\n //     ((_5 as A).0: i32) = _6;\n //     discriminant(_5) = 0;\n+//     ...\n //     _0 = [_3, _5];\n+//     ...\n //     return;\n // }\n // END rustc.node10.Deaggregator.after.mir"}, {"sha": "a0edcc82fe18ac888bb25df4c1e4c68f4709020a", "filename": "src/test/mir-opt/end_region_1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_1.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -21,9 +21,11 @@ fn main() {\n // END RUST SOURCE\n // START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n //     let mut _0: ();\n+//     ...\n //     let _1: i32;\n+//     ...\n //     let _2: &'10_1rs i32;\n-//\n+//     ...\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = const 3i32;"}, {"sha": "69042fecc7d721597d78c947832c9c680a97183e", "filename": "src/test/mir-opt/end_region_2.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_2.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -26,11 +26,16 @@ fn main() {\n // END RUST SOURCE\n // START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n //     let mut _0: ();\n+//     ...\n //     let _2: bool;\n+//     ...\n //     let _3: &'23_1rs bool;\n+//     ...\n //     let _7: &'23_3rs bool;\n+//     ...\n //     let mut _4: ();\n //     let mut _5: bool;\n+//     ...\n //     bb0: {\n //         goto -> bb1;\n //     }\n@@ -52,6 +57,7 @@ fn main() {\n //         return;\n //     }\n //     bb3: {\n+//         _4 = ();\n //         StorageDead(_5);\n //         StorageLive(_7);\n //         _7 = &'23_3rs _2;"}, {"sha": "da423163e842da82ab482b93c734b4d32b295730", "filename": "src/test/mir-opt/end_region_3.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_3.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -27,13 +27,17 @@ fn main() {\n // END RUST SOURCE\n // START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n //     let mut _0: ();\n+//     ...\n //     let mut _1: bool;\n+//     ...\n //     let _3: &'26_1rs bool;\n+//     ...\n //     let _7: &'26_3rs bool;\n+//     ...\n //     let mut _2: ();\n //     let mut _4: ();\n //     let mut _5: bool;\n-//\n+//     let mut _6: !;\n //     bb0: {\n //         StorageLive(_1);\n //         goto -> bb1;"}, {"sha": "2087485b913d4c272ac8843994be5fa4db5d6e4f", "filename": "src/test/mir-opt/end_region_4.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_4.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -31,10 +31,15 @@ fn foo(i: i32) {\n // END RUST SOURCE\n // START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n //     let mut _0: ();\n+//     ...\n //     let _1: D;\n+//     ...\n //     let _2: i32;\n+//     ...\n //     let _3: &'26_2rs i32;\n+//     ...\n //     let _6: &'26_4rs i32;\n+//     ...\n //     let mut _4: ();\n //     let mut _5: i32;\n //     bb0: {"}, {"sha": "4663b71bd7cb0166720c737fdd94f6bfe5c9e704", "filename": "src/test/mir-opt/end_region_5.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_5.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -28,8 +28,11 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // END RUST SOURCE\n // START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n // fn main() -> () {\n+//     ...\n //     let mut _0: ();\n+//     ...\n //     let _1: D;\n+//     ...\n //     let mut _2: ();\n //     let mut _3: [closure@NodeId(18) d:&'14s D];\n //     let mut _4: &'14s D;"}, {"sha": "7d2868ee4ba57f0813854fb5566fe488d2b094a5", "filename": "src/test/mir-opt/end_region_6.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_6.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -29,7 +29,9 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n // fn main() -> () {\n //     let mut _0: ();\n+//     ...\n //     let _1: D;\n+//     ...\n //     let mut _2: ();\n //     let mut _3: [closure@NodeId(22) d:&'19s D];\n //     let mut _4: &'19s D;\n@@ -65,9 +67,10 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // START rustc.node22.SimplifyCfg-qualify-consts.after.mir\n // fn main::{{closure}}(_1: [closure@NodeId(22) d:&'19s D]) -> i32 {\n //     let mut _0: i32;\n+//     ...\n //     let _2: &'15_0rs D;\n+//     ...\n //     let mut _3: i32;\n-//\n //     bb0: {\n //         StorageLive(_2);\n //         _2 = &'15_0rs (*(_1.0: &'19s D));"}, {"sha": "0156c1be7edf95b3f282ec83789494ac26d3304f", "filename": "src/test/mir-opt/end_region_7.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_7.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -29,11 +29,12 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n // fn main() -> () {\n //     let mut _0: ();\n+//     ...\n //     let _1: D;\n+//     ...\n //     let mut _2: ();\n //     let mut _3: [closure@NodeId(22) d:D];\n //     let mut _4: D;\n-//\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = D::{{constructor}}(const 0i32,);\n@@ -74,9 +75,10 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // START rustc.node22.SimplifyCfg-qualify-consts.after.mir\n // fn main::{{closure}}(_1: [closure@NodeId(22) d:D]) -> i32 {\n //     let mut _0: i32;\n+//     ...\n //     let _2: &'15_0rs D;\n+//     ...\n //     let mut _3: i32;\n-//\n //     bb0: {\n //         StorageLive(_2);\n //         _2 = &'15_0rs (_1.0: D);"}, {"sha": "6e8cf4204ee9becdc2a5b75033f2c3c019168e4d", "filename": "src/test/mir-opt/end_region_8.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_8.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -30,8 +30,11 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n // fn main() -> () {\n //    let mut _0: ();\n+//    ...\n //    let _1: D;\n+//    ...\n //    let _2: &'21_1rs D;\n+//    ...\n //    let mut _3: ();\n //    let mut _4: [closure@NodeId(22) r:&'21_1rs D];\n //    let mut _5: &'21_1rs D;"}, {"sha": "fd23d81345229644dda85be4bbcd9207e4d7a7ad", "filename": "src/test/mir-opt/end_region_9.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_9.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -40,15 +40,18 @@ fn main() {\n // START rustc.node4.SimplifyCfg-qualify-consts.after.mir\n // fn main() -> () {\n //     let mut _0: ();\n+//     ...\n //     let mut _1: bool;\n+//     ...\n //     let _2: i32;\n+//     ...\n //     let mut _4: &'33_0rs i32;\n+//     ...\n //     let mut _3: ();\n //     let mut _5: !;\n //     let mut _6: ();\n //     let mut _7: bool;\n //     let mut _8: !;\n-//\n //     bb0: {\n //        StorageLive(_1);\n //        _1 = const false;\n@@ -63,7 +66,6 @@ fn main() {\n //        _7 = _1;\n //        switchInt(_7) -> [0u8: bb3, otherwise: bb2];\n //    }\n-//\n //    bb2: {\n //        _0 = ();\n //        StorageDead(_7);\n@@ -73,7 +75,6 @@ fn main() {\n //        StorageDead(_1);\n //        return;\n //    }\n-//\n //    bb3: {\n //        _4 = &'33_0rs _2;\n //        _6 = ();"}, {"sha": "f70f651927544488aca0069eb13b8340768fb757", "filename": "src/test/mir-opt/end_region_cyclic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -45,6 +45,7 @@ fn query() -> bool { true }\n //     scope 1 {\n //         let _2: S<'35_0rs>;\n //     }\n+//     ...\n //     let mut _1: ();\n //     let mut _3: std::cell::Cell<std::option::Option<&'35_0rs S<'35_0rs>>>;\n //     let mut _4: std::option::Option<&'35_0rs S<'35_0rs>>;"}, {"sha": "384201b7c128d449a48fa527e6aebe446ee1a681", "filename": "src/test/mir-opt/issue-41110.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -35,22 +35,26 @@ impl S {\n // END RUST SOURCE\n // START rustc.node4.ElaborateDrops.after.mir\n //    let mut _0: ();\n-//    let _1: ();\n+//    scope 1 {\n+//        let _1: ();\n+//    }\n+//    ...\n //    let mut _2: S;\n //    let mut _3: S;\n //    let mut _4: S;\n //    let mut _5: bool;\n-//\n //    bb0: {\n // END rustc.node4.ElaborateDrops.after.mir\n // START rustc.node13.ElaborateDrops.after.mir\n //    let mut _0: ();\n+//    ...\n //    let _1: S;\n+//    ...\n //    let mut _2: S;\n+//    ...\n //    let mut _3: ();\n //    let mut _4: S;\n //    let mut _5: S;\n //    let mut _6: bool;\n-//\n //    bb0: {\n // END rustc.node13.ElaborateDrops.after.mir"}, {"sha": "370ab599eca708790b0b802fe2a82783eea72ba1", "filename": "src/test/mir-opt/storage_live_dead_in_statics.rs", "status": "modified", "additions": 150, "deletions": 50, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -45,56 +45,156 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.node4.mir_map.0.mir\n+//    let mut _0: &'static Foo;\n+//    let mut _1: &'static Foo;\n+//    let mut _2: Foo;\n+//    let mut _3: &'static [(u32, u32)];\n+//    let mut _4: &'static [(u32, u32); 42];\n+//    let mut _5: &'static [(u32, u32); 42];\n+//    let mut _6: [(u32, u32); 42];\n+//    let mut _7: (u32, u32);\n+//    let mut _8: (u32, u32);\n+//    let mut _9: (u32, u32);\n+//    let mut _10: (u32, u32);\n+//    let mut _11: (u32, u32);\n+//    let mut _12: (u32, u32);\n+//    let mut _13: (u32, u32);\n+//    let mut _14: (u32, u32);\n+//    let mut _15: (u32, u32);\n+//    let mut _16: (u32, u32);\n+//    let mut _17: (u32, u32);\n+//    let mut _18: (u32, u32);\n+//    let mut _19: (u32, u32);\n+//    let mut _20: (u32, u32);\n+//    let mut _21: (u32, u32);\n+//    let mut _22: (u32, u32);\n+//    let mut _23: (u32, u32);\n+//    let mut _24: (u32, u32);\n+//    let mut _25: (u32, u32);\n+//    let mut _26: (u32, u32);\n+//    let mut _27: (u32, u32);\n+//    let mut _28: (u32, u32);\n+//    let mut _29: (u32, u32);\n+//    let mut _30: (u32, u32);\n+//    let mut _31: (u32, u32);\n+//    let mut _32: (u32, u32);\n+//    let mut _33: (u32, u32);\n+//    let mut _34: (u32, u32);\n+//    let mut _35: (u32, u32);\n+//    let mut _36: (u32, u32);\n+//    let mut _37: (u32, u32);\n+//    let mut _38: (u32, u32);\n+//    let mut _39: (u32, u32);\n+//    let mut _40: (u32, u32);\n+//    let mut _41: (u32, u32);\n+//    let mut _42: (u32, u32);\n+//    let mut _43: (u32, u32);\n+//    let mut _44: (u32, u32);\n+//    let mut _45: (u32, u32);\n+//    let mut _46: (u32, u32);\n+//    let mut _47: (u32, u32);\n+//    let mut _48: (u32, u32);\n //    bb0: {\n-//        _7 = (const 0u32, const 1u32);   // scope 0 at src/test/mir-opt/basic_assignment.rs:29:9: 29:15\n-//        _8 = (const 0u32, const 2u32);   // scope 0 at src/test/mir-opt/basic_assignment.rs:29:17: 29:23\n-//        _9 = (const 0u32, const 3u32);   // scope 0 at src/test/mir-opt/basic_assignment.rs:29:25: 29:31\n-//        _10 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:30:9: 30:15\n-//        _11 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:30:17: 30:23\n-//        _12 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:30:25: 30:31\n-//        _13 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:31:9: 31:15\n-//        _14 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:31:17: 31:23\n-//        _15 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:31:25: 31:31\n-//        _16 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:32:9: 32:15\n-//        _17 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:32:17: 32:23\n-//        _18 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:32:25: 32:31\n-//        _19 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:33:9: 33:15\n-//        _20 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:33:17: 33:23\n-//        _21 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:33:25: 33:31\n-//        _22 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:34:9: 34:15\n-//        _23 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:34:17: 34:23\n-//        _24 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:34:25: 34:31\n-//        _25 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:35:9: 35:15\n-//        _26 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:35:17: 35:23\n-//        _27 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:35:25: 35:31\n-//        _28 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:36:9: 36:15\n-//        _29 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:36:17: 36:23\n-//        _30 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:36:25: 36:31\n-//        _31 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:37:9: 37:15\n-//        _32 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:37:17: 37:23\n-//        _33 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:37:25: 37:31\n-//        _34 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:38:9: 38:15\n-//        _35 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:38:17: 38:23\n-//        _36 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:38:25: 38:31\n-//        _37 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:39:9: 39:15\n-//        _38 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:39:17: 39:23\n-//        _39 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:39:25: 39:31\n-//        _40 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:40:9: 40:15\n-//        _41 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:40:17: 40:23\n-//        _42 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:40:25: 40:31\n-//        _43 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:41:9: 41:15\n-//        _44 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:41:17: 41:23\n-//        _45 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:41:25: 41:31\n-//        _46 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:42:9: 42:15\n-//        _47 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:42:17: 42:23\n-//        _48 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:42:25: 42:31\n-//        _6 = [_7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48]; // scope 0 at src/test/mir-opt/basic_assignment.rs:28:12: 43:6\n-//        _5 = &_6;                        // scope 0 at src/test/mir-opt/basic_assignment.rs:28:11: 43:6\n-//        _4 = &(*_5);                     // scope 0 at src/test/mir-opt/basic_assignment.rs:28:11: 43:6\n-//        _3 = _4 as &'static [(u32, u32)] (Unsize); // scope 0 at src/test/mir-opt/basic_assignment.rs:28:11: 43:6\n-//        _2 = Foo { tup: const \"hi\", data: _3 }; // scope 0 at src/test/mir-opt/basic_assignment.rs:26:29: 44:2\n-//        _1 = &_2;                        // scope 0 at src/test/mir-opt/basic_assignment.rs:26:28: 44:2\n-//        _0 = &(*_1);                     // scope 0 at src/test/mir-opt/basic_assignment.rs:26:28: 44:2\n-//        return;                          // scope 0 at src/test/mir-opt/basic_assignment.rs:26:1: 44:3\n+//        StorageLive(_1);\n+//        StorageLive(_2);\n+//        StorageLive(_3);\n+//        StorageLive(_4);\n+//        StorageLive(_5);\n+//        StorageLive(_6);\n+//        StorageLive(_7);\n+//        _7 = (const 0u32, const 1u32);\n+//        StorageLive(_8);\n+//        _8 = (const 0u32, const 2u32);\n+//        StorageLive(_9);\n+//        _9 = (const 0u32, const 3u32);\n+//        StorageLive(_10);\n+//        _10 = (const 0u32, const 1u32);\n+//        StorageLive(_11);\n+//        _11 = (const 0u32, const 2u32);\n+//        StorageLive(_12);\n+//        _12 = (const 0u32, const 3u32);\n+//        StorageLive(_13);\n+//        _13 = (const 0u32, const 1u32);\n+//        StorageLive(_14);\n+//        _14 = (const 0u32, const 2u32);\n+//        StorageLive(_15);\n+//        _15 = (const 0u32, const 3u32);\n+//        StorageLive(_16);\n+//        _16 = (const 0u32, const 1u32);\n+//        StorageLive(_17);\n+//        _17 = (const 0u32, const 2u32);\n+//        StorageLive(_18);\n+//        _18 = (const 0u32, const 3u32);\n+//        StorageLive(_19);\n+//        _19 = (const 0u32, const 1u32);\n+//        StorageLive(_20);\n+//        _20 = (const 0u32, const 2u32);\n+//        StorageLive(_21);\n+//        _21 = (const 0u32, const 3u32);\n+//        StorageLive(_22);\n+//        _22 = (const 0u32, const 1u32);\n+//        StorageLive(_23);\n+//        _23 = (const 0u32, const 2u32);\n+//        StorageLive(_24);\n+//        _24 = (const 0u32, const 3u32);\n+//        StorageLive(_25);\n+//        _25 = (const 0u32, const 1u32);\n+//        StorageLive(_26);\n+//        _26 = (const 0u32, const 2u32);\n+//        StorageLive(_27);\n+//        _27 = (const 0u32, const 3u32);\n+//        StorageLive(_28);\n+//        _28 = (const 0u32, const 1u32);\n+//        StorageLive(_29);\n+//        _29 = (const 0u32, const 2u32);\n+//        StorageLive(_30);\n+//        _30 = (const 0u32, const 3u32);\n+//        StorageLive(_31);\n+//        _31 = (const 0u32, const 1u32);\n+//        StorageLive(_32);\n+//        _32 = (const 0u32, const 2u32);\n+//        StorageLive(_33);\n+//        _33 = (const 0u32, const 3u32);\n+//        StorageLive(_34);\n+//        _34 = (const 0u32, const 1u32);\n+//        StorageLive(_35);\n+//        _35 = (const 0u32, const 2u32);\n+//        StorageLive(_36);\n+//        _36 = (const 0u32, const 3u32);\n+//        StorageLive(_37);\n+//        _37 = (const 0u32, const 1u32);\n+//        StorageLive(_38);\n+//        _38 = (const 0u32, const 2u32);\n+//        StorageLive(_39);\n+//        _39 = (const 0u32, const 3u32);\n+//        StorageLive(_40);\n+//        _40 = (const 0u32, const 1u32);\n+//        StorageLive(_41);\n+//        _41 = (const 0u32, const 2u32);\n+//        StorageLive(_42);\n+//        _42 = (const 0u32, const 3u32);\n+//        StorageLive(_43);\n+//        _43 = (const 0u32, const 1u32);\n+//        StorageLive(_44);\n+//        _44 = (const 0u32, const 2u32);\n+//        StorageLive(_45);\n+//        _45 = (const 0u32, const 3u32);\n+//        StorageLive(_46);\n+//        _46 = (const 0u32, const 1u32);\n+//        StorageLive(_47);\n+//        _47 = (const 0u32, const 2u32);\n+//        StorageLive(_48);\n+//        _48 = (const 0u32, const 3u32);\n+//        _6 = [_7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48];\n+//        _5 = &_6;\n+//        _4 = &(*_5);\n+//        _3 = _4 as &'static [(u32, u32)] (Unsize);\n+//        _2 = Foo { tup: const \"hi\", data: _3 };\n+//        _1 = &_2;\n+//        _0 = &(*_1);\n+//        StorageDead(_1);\n+//        StorageDead(_5);\n+//        return;\n //    }\n+//}\n // END rustc.node4.mir_map.0.mir"}, {"sha": "7dbcf82af349382222e7d533e64888c012760e06", "filename": "src/test/mir-opt/storage_ranges.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -38,5 +38,6 @@ fn main() {\n //         _0 = ();\n //         StorageDead(_6);\n //         StorageDead(_1);\n+//         return;\n //      }\n // END rustc.node4.TypeckMir.before.mir"}, {"sha": "0c570deae242b9c1b0e8192949a0b128b19f2f35", "filename": "src/test/mir-opt/validate_1.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -31,12 +31,15 @@ fn main() {\n // START rustc.node12.EraseRegions.after.mir\n //     bb0: {\n //         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:5) => validate_1[8cd8]::{{impl}}[0]::foo[0] }, BrAnon(0)) Test, _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:5) => validate_1[8cd8]::{{impl}}[0]::foo[0] }, BrAnon(1)) mut i32]);\n+//         ...\n //         return;\n //     }\n // END rustc.node12.EraseRegions.after.mir\n // START rustc.node23.EraseRegions.after.mir\n // fn main() -> () {\n+//     ...\n //     bb0: {\n+//         ...\n //         Validate(Suspend(ReScope(Node(ItemLocalId(10)))), [_1: i32]);\n //         _6 = &ReErased mut _1;\n //         Validate(Acquire, [(*_6): i32/ReScope(Node(ItemLocalId(10)))]);\n@@ -50,12 +53,14 @@ fn main() {\n //     bb1: {\n //         Validate(Acquire, [_2: ()]);\n //         EndRegion(ReScope(Node(ItemLocalId(10))));\n+//         ...\n //         return;\n //     }\n // }\n // END rustc.node23.EraseRegions.after.mir\n // START rustc.node50.EraseRegions.after.mir\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(50)], _2: &ReErased mut i32) -> i32 {\n+//     ...\n //     bb0: {\n //         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:11) => validate_1[8cd8]::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(50)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:11) => validate_1[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);"}, {"sha": "aacf5a5ed0f5afd0ee71579e2d47332f523d211e", "filename": "src/test/mir-opt/validate_2.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fvalidate_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fvalidate_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_2.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -18,10 +18,18 @@ fn main() {\n // END RUST SOURCE\n // START rustc.node4.EraseRegions.after.mir\n // fn main() -> () {\n+//     ...\n //     bb1: {\n+//         Validate(Acquire, [_2: std::boxed::Box<[i32; 3]>]);\n //         Validate(Release, [_2: std::boxed::Box<[i32; 3]>]);\n //         _1 = _2 as std::boxed::Box<[i32]> (Unsize);\n //         Validate(Acquire, [_1: std::boxed::Box<[i32]>]);\n+//         StorageDead(_2);\n+//         StorageDead(_3);\n+//         _0 = ();\n+//         Validate(Release, [_1: std::boxed::Box<[i32]>]);\n+//         drop(_1) -> bb2;\n //     }\n+//     ...\n // }\n // END rustc.node4.EraseRegions.after.mir"}, {"sha": "d7d3e023c9ed6a51496c62d9d395d5e2cfc3ef29", "filename": "src/test/mir-opt/validate_3.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -30,8 +30,17 @@ fn main() {\n // END RUST SOURCE\n // START rustc.node16.EraseRegions.after.mir\n // fn main() -> () {\n+//     ...\n //     let mut _5: &ReErased i32;\n //     bb0: {\n+//         StorageLive(_1);\n+//         _1 = Test { x: const 0i32 };\n+//         StorageLive(_2);\n+//         Validate(Suspend(ReScope(Remainder(BlockRemainder { block: ItemLocalId(19), first_statement_index: 3 }))), [_1: Test]);\n+//         _2 = &ReErased _1;\n+//         Validate(Acquire, [(*_2): Test/ReScope(Remainder(BlockRemainder { block: ItemLocalId(19), first_statement_index: 3 })) (imm)]);\n+//         StorageLive(_4);\n+//         StorageLive(_5);\n //         Validate(Suspend(ReScope(Node(ItemLocalId(17)))), [((*_2).0: i32): i32/ReScope(Remainder(BlockRemainder { block: ItemLocalId(19), first_statement_index: 3 })) (imm)]);\n //         _5 = &ReErased ((*_2).0: i32);\n //         Validate(Acquire, [(*_5): i32/ReScope(Node(ItemLocalId(17))) (imm)]);\n@@ -42,8 +51,14 @@ fn main() {\n //         _3 = const foo(_4) -> bb1;\n //     }\n //     bb1: {\n+//         Validate(Acquire, [_3: ()]);\n //         EndRegion(ReScope(Node(ItemLocalId(17))));\n+//         StorageDead(_4);\n+//         StorageDead(_5);\n+//         _0 = ();\n //         EndRegion(ReScope(Remainder(BlockRemainder { block: ItemLocalId(19), first_statement_index: 3 })));\n+//         StorageDead(_2);\n+//         StorageDead(_1);\n //         return;\n //     }\n // }"}, {"sha": "da9a4c7e455763e5f282cb282c4c6172f8b4e3af", "filename": "src/test/mir-opt/validate_4.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -38,15 +38,18 @@ fn main() {\n // END RUST SOURCE\n // START rustc.node4.EraseRegions.after.mir\n // fn write_42(_1: *mut i32) -> bool {\n+//     ...\n //     bb0: {\n //         Validate(Acquire, [_1: *mut i32]);\n //         Validate(Release, [_1: *mut i32]);\n+//         ...\n //         return;\n //     }\n // }\n // END rustc.node4.EraseRegions.after.mir\n // START rustc.node22.EraseRegions.after.mir\n // fn write_42::{{closure}}(_1: &ReErased [closure@NodeId(22)], _2: *mut i32) -> () {\n+//     ...\n //     bb0: {\n //         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_4[8cd8]::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n //         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_4[8cd8]::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n@@ -60,24 +63,30 @@ fn main() {\n // END rustc.node22.EraseRegions.after.mir\n // START rustc.node31.EraseRegions.after.mir\n // fn test(_1: &ReErased mut i32) -> () {\n+//     ...\n //     bb0: {\n //         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:4) => validate_4[8cd8]::test[0] }, BrAnon(0)) mut i32]);\n //         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:4) => validate_4[8cd8]::test[0] }, BrAnon(0)) mut i32]);\n+//         ...\n //         _3 = const write_42(_4) -> bb1;\n //     }\n //     bb1: {\n //         Validate(Acquire, [_3: bool]);\n //         Validate(Release, [_3: bool]);\n+//         ...\n //     }\n // }\n // END rustc.node31.EraseRegions.after.mir\n // START rustc.node60.EraseRegions.after.mir\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(60)], _2: &ReErased mut i32) -> bool {\n+//     ...\n //     bb0: {\n //         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n+//         ...\n //         _0 = const write_42(_4) -> bb1;\n //     }\n+//     ...\n // }\n // END rustc.node60.EraseRegions.after.mir"}, {"sha": "0ece83afa13cff379ec553bb3d6c5cf980e6fc4d", "filename": "src/test/mir-opt/validate_5.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426183c01bbaf398e8ae68bd554488af23e49dbd/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs?ref=426183c01bbaf398e8ae68bd554488af23e49dbd", "patch": "@@ -35,15 +35,19 @@ fn main() {\n // END RUST SOURCE\n // START rustc.node17.EraseRegions.after.mir\n // fn test(_1: &ReErased mut i32) -> () {\n+//     ...\n //     bb0: {\n //         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:4) => validate_5[8cd8]::test[0] }, BrAnon(0)) mut i32]);\n+//         ...\n //         Validate(Release, [_3: bool, _4: *mut i32]);\n //         _3 = const write_42(_4) -> bb1;\n //     }\n+//     ...\n // }\n // END rustc.node17.EraseRegions.after.mir\n // START rustc.node46.EraseRegions.after.mir\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(46)], _2: &ReErased mut i32) -> bool {\n+//     ...\n //     bb0: {\n //         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_5[8cd8]::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(46)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_5[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n@@ -59,5 +63,6 @@ fn main() {\n //         Validate(Release, [_0: bool, _4: *mut i32]);\n //         _0 = const write_42(_4) -> bb1;\n //     }\n+//     ...\n // }\n // END rustc.node46.EraseRegions.after.mir"}]}