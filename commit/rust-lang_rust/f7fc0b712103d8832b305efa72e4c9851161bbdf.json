{"sha": "f7fc0b712103d8832b305efa72e4c9851161bbdf", "node_id": "C_kwDOAAsO6NoAKGY3ZmMwYjcxMjEwM2Q4ODMyYjMwNWVmYTcyZTRjOTg1MTE2MWJiZGY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-25T17:02:16Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-30T19:19:07Z"}, "message": "nits", "tree": {"sha": "97458ad4e7432eeb4695a907f677f76067521a5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97458ad4e7432eeb4695a907f677f76067521a5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7fc0b712103d8832b305efa72e4c9851161bbdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7fc0b712103d8832b305efa72e4c9851161bbdf", "html_url": "https://github.com/rust-lang/rust/commit/f7fc0b712103d8832b305efa72e4c9851161bbdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7fc0b712103d8832b305efa72e4c9851161bbdf/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c24844048ff023aeaf47080634507677ffbe7001", "url": "https://api.github.com/repos/rust-lang/rust/commits/c24844048ff023aeaf47080634507677ffbe7001", "html_url": "https://github.com/rust-lang/rust/commit/c24844048ff023aeaf47080634507677ffbe7001"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "5690b6536bbc0b9e8ce7a96414999fed495a5a40", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7fc0b712103d8832b305efa72e4c9851161bbdf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fc0b712103d8832b305efa72e4c9851161bbdf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=f7fc0b712103d8832b305efa72e4c9851161bbdf", "patch": "@@ -184,7 +184,7 @@ pub(super) trait GoalKind<'tcx>: TypeFoldable<'tcx> + Copy + Eq {\n \n     // `dyn Trait1` can be unsized to `dyn Trait2` if they are the same trait, or\n     // if `Trait2` is a (transitive) supertrait of `Trait2`.\n-    fn consider_builtin_dyn_unsize_candidates(\n+    fn consider_builtin_dyn_upcast_candidates(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> Vec<CanonicalResponse<'tcx>>;\n@@ -334,7 +334,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         // There may be multiple unsize candidates for a trait with several supertraits:\n         // `trait Foo: Bar<A> + Bar<B>` and `dyn Foo: Unsize<dyn Bar<_>>`\n         if lang_items.unsize_trait() == Some(trait_def_id) {\n-            for result in G::consider_builtin_dyn_unsize_candidates(self, goal) {\n+            for result in G::consider_builtin_dyn_upcast_candidates(self, goal) {\n                 candidates.push(Candidate { source: CandidateSource::BuiltinImpl, result });\n             }\n         }"}, {"sha": "879f18843c9171def566dea30e95cf45e33d6d4c", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fc0b712103d8832b305efa72e4c9851161bbdf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fc0b712103d8832b305efa72e4c9851161bbdf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=f7fc0b712103d8832b305efa72e4c9851161bbdf", "patch": "@@ -562,7 +562,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n         bug!(\"`Unsize` does not have an associated type: {:?}\", goal);\n     }\n \n-    fn consider_builtin_dyn_unsize_candidates(\n+    fn consider_builtin_dyn_upcast_candidates(\n         _ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> Vec<super::CanonicalResponse<'tcx>> {"}, {"sha": "29ee9da38e08be5b391709294baac16b1630236b", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f7fc0b712103d8832b305efa72e4c9851161bbdf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fc0b712103d8832b305efa72e4c9851161bbdf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=f7fc0b712103d8832b305efa72e4c9851161bbdf", "patch": "@@ -262,11 +262,9 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                 // `T` -> `dyn Trait` unsizing\n                 (_, &ty::Dynamic(data, region, ty::Dyn)) => {\n                     // Can only unsize to an object-safe type\n-                    // FIXME: Can auto traits be *not* object safe?\n                     if data\n-                        .auto_traits()\n-                        .chain(data.principal_def_id())\n-                        .any(|def_id| !tcx.is_object_safe(def_id))\n+                        .principal_def_id()\n+                        .map_or(false, |def_id| !tcx.check_is_object_safe(def_id))\n                     {\n                         return Err(NoSolution);\n                     }\n@@ -365,7 +363,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         })\n     }\n \n-    fn consider_builtin_dyn_unsize_candidates(\n+    fn consider_builtin_dyn_upcast_candidates(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> Vec<CanonicalResponse<'tcx>> {\n@@ -387,9 +385,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n             return vec![];\n         }\n \n-        let mut responses = vec![];\n         let mut unsize_dyn_to_principal = |principal: Option<ty::PolyExistentialTraitRef<'tcx>>| {\n-            let _ = ecx.infcx.probe(|_| -> Result<(), NoSolution> {\n+            ecx.infcx.probe(|_| -> Result<_, NoSolution> {\n                 // Require that all of the trait predicates from A match B, except for\n                 // the auto traits. We do this by constructing a new A type with B's\n                 // auto traits, and equating these types.\n@@ -414,16 +411,17 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                     goal.with(tcx, ty::Binder::dummy(ty::OutlivesPredicate(a_region, b_region))),\n                 );\n \n-                responses.push(ecx.evaluate_all_and_make_canonical_response(nested_obligations)?);\n-\n-                Ok(())\n-            });\n+                ecx.evaluate_all_and_make_canonical_response(nested_obligations)\n+            })\n         };\n \n+        let mut responses = vec![];\n         // If the principal def ids match (or are both none), then we're not doing\n         // trait upcasting. We're just removing auto traits (or shortening the lifetime).\n         if a_data.principal_def_id() == b_data.principal_def_id() {\n-            unsize_dyn_to_principal(a_data.principal());\n+            if let Ok(response) = unsize_dyn_to_principal(a_data.principal()) {\n+                responses.push(response);\n+            }\n         } else if let Some(a_principal) = a_data.principal()\n             && let Some(b_principal) = b_data.principal()\n         {\n@@ -433,7 +431,9 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                 }\n                 let erased_trait_ref = super_trait_ref\n                     .map_bound(|trait_ref| ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref));\n-                unsize_dyn_to_principal(Some(erased_trait_ref));\n+                if let Ok(response) = unsize_dyn_to_principal(Some(erased_trait_ref)) {\n+                    responses.push(response);\n+                }\n             }\n         }\n "}, {"sha": "41e837e8b754e64608bb58321c5f28b287f56ac2", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7fc0b712103d8832b305efa72e4c9851161bbdf/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fc0b712103d8832b305efa72e4c9851161bbdf/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=f7fc0b712103d8832b305efa72e4c9851161bbdf", "patch": "@@ -426,10 +426,6 @@ fn unsizing_params_for_adt<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> BitSet<u32\n         },\n     };\n \n-    // FIXME(eddyb) cache this (including computing `unsizing_params`)\n-    // by putting it in a query; it would only need the `DefId` as it\n-    // looks at declared field types, not anything substituted.\n-\n     // The last field of the structure has to exist and contain type/const parameters.\n     let Some((tail_field, prefix_fields)) =\n         def.non_enum_variant().fields.split_last() else"}]}