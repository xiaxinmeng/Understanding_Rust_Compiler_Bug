{"sha": "10270f4b442207b23b28f776b8dda297bd03570a", "node_id": "C_kwDOAAsO6NoAKDEwMjcwZjRiNDQyMjA3YjIzYjI4Zjc3NmI4ZGRhMjk3YmQwMzU3MGE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-05-11T13:52:00Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-21T01:27:14Z"}, "message": "Add pointer masking convenience functions\n\nThis commit adds the following functions all of which have a signature\n`pointer, usize -> pointer`:\n- `<*mut T>::mask`\n- `<*const T>::mask`\n- `intrinsics::ptr_mask`\n\nThese functions are equivalent to `.map_addr(|a| a & mask)` but they\nutilize `llvm.ptrmask` llvm intrinsic.\n\n*masks your pointers*", "tree": {"sha": "64993fc370f2192d32582e631d5cf924fa77bb98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64993fc370f2192d32582e631d5cf924fa77bb98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10270f4b442207b23b28f776b8dda297bd03570a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10270f4b442207b23b28f776b8dda297bd03570a", "html_url": "https://github.com/rust-lang/rust/commit/10270f4b442207b23b28f776b8dda297bd03570a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10270f4b442207b23b28f776b8dda297bd03570a/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48853a361a5ff0e8215301c62f259a26eed7aa72", "url": "https://api.github.com/repos/rust-lang/rust/commits/48853a361a5ff0e8215301c62f259a26eed7aa72", "html_url": "https://github.com/rust-lang/rust/commit/48853a361a5ff0e8215301c62f259a26eed7aa72"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "65e964c786b52e54200af5990c576a01c774f757", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/10270f4b442207b23b28f776b8dda297bd03570a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10270f4b442207b23b28f776b8dda297bd03570a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=10270f4b442207b23b28f776b8dda297bd03570a", "patch": "@@ -540,6 +540,13 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             ret.write_cvalue(fx, CValue::by_val(res, base.layout()));\n         }\n \n+        sym::ptr_mask => {\n+            intrinsic_args!(fx, args => (ptr, mask); intrinsic);\n+            let ptr_val = ptr.load_scalar(fx);\n+\n+            fx.bcx.ins().band(ptr_val, mask);\n+        }\n+\n         sym::transmute => {\n             intrinsic_args!(fx, args => (from); intrinsic);\n "}, {"sha": "bbb6bacc452a969da134bffce2e2cbb40f7197a0", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10270f4b442207b23b28f776b8dda297bd03570a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10270f4b442207b23b28f776b8dda297bd03570a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=10270f4b442207b23b28f776b8dda297bd03570a", "patch": "@@ -644,6 +644,7 @@ impl<'ll> CodegenCx<'ll, '_> {\n \n         let i8p = self.type_i8p();\n         let void = self.type_void();\n+        let voidp = self.type_ptr_to(void);\n         let i1 = self.type_i1();\n         let t_i8 = self.type_i8();\n         let t_i16 = self.type_i16();\n@@ -886,6 +887,9 @@ impl<'ll> CodegenCx<'ll, '_> {\n             ifn!(\"llvm.dbg.declare\", fn(t_metadata, t_metadata) -> void);\n             ifn!(\"llvm.dbg.value\", fn(t_metadata, t_i64, t_metadata) -> void);\n         }\n+\n+        ifn!(\"llvm.ptrmask\", fn(voidp, t_isize) -> voidp);\n+\n         None\n     }\n "}, {"sha": "1a0e44fdc5bd21d280f49ad31756a58c1d4aaecd", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10270f4b442207b23b28f776b8dda297bd03570a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10270f4b442207b23b28f776b8dda297bd03570a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=10270f4b442207b23b28f776b8dda297bd03570a", "patch": "@@ -71,6 +71,7 @@ fn get_simple_intrinsic<'ll>(\n         sym::nearbyintf64 => \"llvm.nearbyint.f64\",\n         sym::roundf32 => \"llvm.round.f32\",\n         sym::roundf64 => \"llvm.round.f64\",\n+        sym::ptr_mask => \"llvm.ptrmask\",\n         _ => return None,\n     };\n     Some(cx.get_intrinsic(llvm_name))"}, {"sha": "19e136a4476f9aa9152c3f3bebc8a4096bf5517e", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10270f4b442207b23b28f776b8dda297bd03570a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10270f4b442207b23b28f776b8dda297bd03570a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=10270f4b442207b23b28f776b8dda297bd03570a", "patch": "@@ -1112,6 +1112,7 @@ symbols! {\n         ptr,\n         ptr_guaranteed_eq,\n         ptr_guaranteed_ne,\n+        ptr_mask,\n         ptr_null,\n         ptr_null_mut,\n         ptr_offset_from,"}, {"sha": "73dd7122e269a8008e07220447c277ec3c3e7996", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10270f4b442207b23b28f776b8dda297bd03570a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10270f4b442207b23b28f776b8dda297bd03570a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=10270f4b442207b23b28f776b8dda297bd03570a", "patch": "@@ -105,7 +105,8 @@ pub fn intrinsic_operation_unsafety(intrinsic: Symbol) -> hir::Unsafety {\n         | sym::type_name\n         | sym::forget\n         | sym::black_box\n-        | sym::variant_count => hir::Unsafety::Normal,\n+        | sym::variant_count\n+        | sym::ptr_mask => hir::Unsafety::Normal,\n         _ => hir::Unsafety::Unsafe,\n     }\n }\n@@ -203,6 +204,15 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 ],\n                 tcx.mk_ptr(ty::TypeAndMut { ty: param(0), mutbl: hir::Mutability::Not }),\n             ),\n+            sym::ptr_mask => (\n+                1,\n+                vec![\n+                    tcx.mk_ptr(ty::TypeAndMut { ty: param(0), mutbl: hir::Mutability::Not }),\n+                    tcx.types.usize,\n+                ],\n+                tcx.mk_ptr(ty::TypeAndMut { ty: param(0), mutbl: hir::Mutability::Not }),\n+            ),\n+\n             sym::copy | sym::copy_nonoverlapping => (\n                 1,\n                 vec!["}, {"sha": "c95dae745f430e5eced1e1b9f30f285581bf0d9a", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10270f4b442207b23b28f776b8dda297bd03570a/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10270f4b442207b23b28f776b8dda297bd03570a/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=10270f4b442207b23b28f776b8dda297bd03570a", "patch": "@@ -1308,6 +1308,17 @@ extern \"rust-intrinsic\" {\n     #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     pub fn arith_offset<T>(dst: *const T, offset: isize) -> *const T;\n \n+    /// Masks out bits of the pointer according to a mask.\n+    ///\n+    /// Note that, unlike most intrinsics, this is safe to call;\n+    /// it does not require an `unsafe` block.\n+    /// Therefore, implementations must not require the user to uphold\n+    /// any safety invariants.\n+    ///\n+    /// Consider using [`pointer::mask`] instead.\n+    #[cfg(not(bootstrap))]\n+    pub fn ptr_mask<T>(ptr: *const T, mask: usize) -> *const T;\n+\n     /// Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\n     /// a size of `count` * `size_of::<T>()` and an alignment of\n     /// `min_align_of::<T>()`"}, {"sha": "624d283155ac10bcf18395baae148312b790877d", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/10270f4b442207b23b28f776b8dda297bd03570a/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10270f4b442207b23b28f776b8dda297bd03570a/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=10270f4b442207b23b28f776b8dda297bd03570a", "patch": "@@ -559,6 +559,21 @@ impl<T: ?Sized> *const T {\n         from_raw_parts::<T>(self.cast::<u8>().wrapping_offset(count).cast::<()>(), metadata(self))\n     }\n \n+    /// Masks out bits of the pointer according to a mask.\n+    ///\n+    /// This is convenience for `ptr.map_addr(|a| a & mask)`.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n+    #[cfg(not(bootstrap))]\n+    #[unstable(feature = \"ptr_mask\", issue = \"none\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n+    #[inline(always)]\n+    pub fn mask(self, mask: usize) -> *const T {\n+        let this = intrinsics::ptr_mask(self.cast::<()>(), mask);\n+        from_raw_parts::<T>(this, metadata(self))\n+    }\n+\n     /// Calculates the distance between two pointers. The returned value is in\n     /// units of T: the distance in bytes divided by `mem::size_of::<T>()`.\n     ///"}, {"sha": "ea87bb88a1bc5c2b22c1e1067f53dc36a05f6d88", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/10270f4b442207b23b28f776b8dda297bd03570a/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10270f4b442207b23b28f776b8dda297bd03570a/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=10270f4b442207b23b28f776b8dda297bd03570a", "patch": "@@ -575,6 +575,21 @@ impl<T: ?Sized> *mut T {\n         )\n     }\n \n+    /// Masks out bits of the pointer according to a mask.\n+    ///\n+    /// This is convenience for `ptr.map_addr(|a| a & mask)`.\n+    ///\n+    /// For non-`Sized` pointees this operation changes only the data pointer,\n+    /// leaving the metadata untouched.\n+    #[cfg(not(bootstrap))]\n+    #[unstable(feature = \"ptr_mask\", issue = \"none\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n+    #[inline(always)]\n+    pub fn mask(self, mask: usize) -> *mut T {\n+        let this = intrinsics::ptr_mask(self.cast::<()>(), mask) as *mut ();\n+        from_raw_parts_mut::<T>(this, metadata(self))\n+    }\n+\n     /// Returns `None` if the pointer is null, or else returns a unique reference to\n     /// the value wrapped in `Some`. If the value may be uninitialized, [`as_uninit_mut`]\n     /// must be used instead."}]}