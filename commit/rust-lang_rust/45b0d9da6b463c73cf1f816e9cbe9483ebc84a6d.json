{"sha": "45b0d9da6b463c73cf1f816e9cbe9483ebc84a6d", "node_id": "C_kwDOAAsO6NoAKDQ1YjBkOWRhNmI0NjNjNzNjZjFmODE2ZTljYmU5NDgzZWJjODRhNmQ", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-02-16T21:12:53Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-02-19T14:57:38Z"}, "message": "Make associated_items_for_impl_trait_in_trait handle impl traits on impls", "tree": {"sha": "8a1a7a764b80c9b69273f021be236b024bcc09fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a1a7a764b80c9b69273f021be236b024bcc09fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45b0d9da6b463c73cf1f816e9cbe9483ebc84a6d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmPyOOUACgkQgTGiTgx5\n768CnhAArdNeE78wqObxv8WbBSkFHS9xPDSu2q6YIc7VCLpw4UXPSEwuOz1OUlf0\nRl6GbT7FXgI2I+MZmbidWLYIckOxoZCRA2dHlSV8OaClyduwmXMv69a+eHxTp7tQ\nfDT4OErSilxoBOhZDT7PW/zXlMh1N7hpWyv+0MSgCMeo4BtDU+Nqw0sTj6XS2woU\nv7l9ahJb9AkZxHQOPovtFEj14XIH3NuFcYV8mNQb74u+qFatLe9ZkmDHRNm69QfW\nnKpt40bi+lElosbavMhDyIALk0+EuG9/6CIoU1aJrinSeLj5wbP48Z41pe2tZ3KZ\nwhYAOcVN0UkAgXE2Qv13ETECB3gn11Rej6/wVC/WTj0yPiMDebudQsH4vH39iwiV\nPRYKs42uAlDkdXCkd/3OBc53FA3LxTau/usFmZsxPnkOwSIpIbHZ0lFDwGUjkA7G\nT88rd0d9MBnt084mXNbx2SFnSxPMla37FgCb7i3NhvockbmKDS/hwsvelc4havnU\nq06ACmymKDQTxfWKiogGGS1YzJwi3gw+6nSBdU4KgZ+ldKveSlFdbO3cl2hjV6DC\ndOfpIqD9ZMEpw86fl7eXPoeeejUTCM3t2L1d8t1ByRIXigTbpcvTwb+kMNUW7nt8\nqLMjtPaPDnqFFY9jovTQd/JcwPlt1eQQwtDOL6NXbxUVW8ilm4U=\n=9vku\n-----END PGP SIGNATURE-----", "payload": "tree 8a1a7a764b80c9b69273f021be236b024bcc09fe\nparent b7dd609d9c3a6a336091e502caee8a10948cc2c3\nauthor Santiago Pastorino <spastorino@gmail.com> 1676581973 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1676818658 -0300\n\nMake associated_items_for_impl_trait_in_trait handle impl traits on impls\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45b0d9da6b463c73cf1f816e9cbe9483ebc84a6d", "html_url": "https://github.com/rust-lang/rust/commit/45b0d9da6b463c73cf1f816e9cbe9483ebc84a6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45b0d9da6b463c73cf1f816e9cbe9483ebc84a6d/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7dd609d9c3a6a336091e502caee8a10948cc2c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7dd609d9c3a6a336091e502caee8a10948cc2c3", "html_url": "https://github.com/rust-lang/rust/commit/b7dd609d9c3a6a336091e502caee8a10948cc2c3"}], "stats": {"total": 78, "additions": 60, "deletions": 18}, "files": [{"sha": "0c3322d48f0c5f1b68a0c3536a3a466d8f1b73b0", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 60, "deletions": 18, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/45b0d9da6b463c73cf1f816e9cbe9483ebc84a6d/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b0d9da6b463c73cf1f816e9cbe9483ebc84a6d/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=45b0d9da6b463c73cf1f816e9cbe9483ebc84a6d", "patch": "@@ -119,29 +119,58 @@ fn associated_item_from_impl_item_ref(impl_item_ref: &hir::ImplItemRef) -> ty::A\n }\n \n fn associated_items_for_impl_trait_in_trait(tcx: TyCtxt<'_>, fn_def_id: DefId) -> &'_ [DefId] {\n-    struct RPITVisitor {\n-        rpits: Vec<LocalDefId>,\n-    }\n+    let parent_def_id = tcx.parent(fn_def_id);\n \n-    impl<'v> Visitor<'v> for RPITVisitor {\n-        fn visit_ty(&mut self, ty: &'v hir::Ty<'v>) {\n-            if let hir::TyKind::OpaqueDef(item_id, _, _) = ty.kind {\n-                self.rpits.push(item_id.owner_id.def_id)\n+    match tcx.def_kind(parent_def_id) {\n+        DefKind::Trait => {\n+            struct RPITVisitor {\n+                rpits: Vec<LocalDefId>,\n             }\n-            intravisit::walk_ty(self, ty)\n-        }\n-    }\n \n-    let mut visitor = RPITVisitor { rpits: Vec::new() };\n+            impl<'v> Visitor<'v> for RPITVisitor {\n+                fn visit_ty(&mut self, ty: &'v hir::Ty<'v>) {\n+                    if let hir::TyKind::OpaqueDef(item_id, _, _) = ty.kind {\n+                        self.rpits.push(item_id.owner_id.def_id)\n+                    }\n+                    intravisit::walk_ty(self, ty)\n+                }\n+            }\n \n-    if let Some(output) = tcx.hir().get_fn_output(fn_def_id.expect_local()) {\n-        visitor.visit_fn_ret_ty(output);\n+            let mut visitor = RPITVisitor { rpits: Vec::new() };\n \n-        tcx.arena.alloc_from_iter(visitor.rpits.iter().map(|opaque_ty_def_id| {\n-            tcx.associated_item_for_impl_trait_in_trait(opaque_ty_def_id).to_def_id()\n-        }))\n-    } else {\n-        &[]\n+            if let Some(output) = tcx.hir().get_fn_output(fn_def_id.expect_local()) {\n+                visitor.visit_fn_ret_ty(output);\n+\n+                tcx.arena.alloc_from_iter(visitor.rpits.iter().map(|opaque_ty_def_id| {\n+                    tcx.associated_item_for_impl_trait_in_trait(opaque_ty_def_id).to_def_id()\n+                }))\n+            } else {\n+                &[]\n+            }\n+        }\n+\n+        DefKind::Impl { .. } => {\n+            let Some(trait_fn_def_id) = tcx.associated_item(fn_def_id).trait_item_def_id else { return &[] };\n+\n+            tcx.arena.alloc_from_iter(\n+                tcx.associated_items_for_impl_trait_in_trait(trait_fn_def_id).iter().map(\n+                    move |trait_assoc_def_id| {\n+                        impl_associated_item_for_impl_trait_in_trait(\n+                            tcx,\n+                            trait_assoc_def_id.expect_local(),\n+                            fn_def_id.expect_local(),\n+                        )\n+                        .to_def_id()\n+                    },\n+                ),\n+            )\n+        }\n+\n+        def_kind => bug!(\n+            \"associated_items_for_impl_trait_in_trait: {:?} should be Trait or Impl but is {:?}\",\n+            parent_def_id,\n+            def_kind\n+        ),\n     }\n }\n \n@@ -158,3 +187,16 @@ fn associated_item_for_impl_trait_in_trait(\n         tcx.at(span).create_def(trait_def_id.expect_local(), DefPathData::ImplTraitAssocTy);\n     trait_assoc_ty.def_id()\n }\n+\n+fn impl_associated_item_for_impl_trait_in_trait(\n+    tcx: TyCtxt<'_>,\n+    trait_assoc_def_id: LocalDefId,\n+    impl_fn_def_id: LocalDefId,\n+) -> LocalDefId {\n+    let impl_def_id = tcx.local_parent(impl_fn_def_id);\n+\n+    let span = tcx.def_span(trait_assoc_def_id);\n+    let impl_assoc_ty = tcx.at(span).create_def(impl_def_id, DefPathData::ImplTraitAssocTy);\n+\n+    impl_assoc_ty.def_id()\n+}"}]}