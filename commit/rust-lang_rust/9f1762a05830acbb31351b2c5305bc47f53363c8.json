{"sha": "9f1762a05830acbb31351b2c5305bc47f53363c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMTc2MmEwNTgzMGFjYmIzMTM1MWIyYzUzMDViYzQ3ZjUzMzYzYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-18T04:49:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-18T04:49:56Z"}, "message": "Auto merge of #39854 - nagisa:mir-asm-stmt, r=nikomatsakis\n\n[MIR] Make InlineAsm a Statement\n\nPreviously InlineAsm was an Rvalue, but its semantics doesn't really match the semantics of an\nRvalue - rather it behaves more like a Statement.\n\nr? @nikomatsakis you wanted this to happen", "tree": {"sha": "2a1901bcf5599fb1b6cb3346a49376f1fe5e3b80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a1901bcf5599fb1b6cb3346a49376f1fe5e3b80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f1762a05830acbb31351b2c5305bc47f53363c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1762a05830acbb31351b2c5305bc47f53363c8", "html_url": "https://github.com/rust-lang/rust/commit/9f1762a05830acbb31351b2c5305bc47f53363c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f1762a05830acbb31351b2c5305bc47f53363c8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23a0c2657ab917e80436816906183a9e2f4aa551", "url": "https://api.github.com/repos/rust-lang/rust/commits/23a0c2657ab917e80436816906183a9e2f4aa551", "html_url": "https://github.com/rust-lang/rust/commit/23a0c2657ab917e80436816906183a9e2f4aa551"}, {"sha": "4a3c66ad2f4211137fcb98a31d1e1033d5765e22", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a3c66ad2f4211137fcb98a31d1e1033d5765e22", "html_url": "https://github.com/rust-lang/rust/commit/4a3c66ad2f4211137fcb98a31d1e1033d5765e22"}], "stats": {"total": 135, "additions": 67, "deletions": 68}, "files": [{"sha": "3403cf0477450005d7156bd027b4dd746608e029", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=9f1762a05830acbb31351b2c5305bc47f53363c8", "patch": "@@ -777,6 +777,12 @@ pub enum StatementKind<'tcx> {\n     /// End the current live range for the storage of the local.\n     StorageDead(Lvalue<'tcx>),\n \n+    InlineAsm {\n+        asm: InlineAsm,\n+        outputs: Vec<Lvalue<'tcx>>,\n+        inputs: Vec<Operand<'tcx>>\n+    },\n+\n     /// No-op. Useful for deleting instructions without affecting statement indices.\n     Nop,\n }\n@@ -790,7 +796,10 @@ impl<'tcx> Debug for Statement<'tcx> {\n             StorageDead(ref lv) => write!(fmt, \"StorageDead({:?})\", lv),\n             SetDiscriminant{lvalue: ref lv, variant_index: index} => {\n                 write!(fmt, \"discriminant({:?}) = {:?}\", lv, index)\n-            }\n+            },\n+            InlineAsm { ref asm, ref outputs, ref inputs } => {\n+                write!(fmt, \"asm!({:?} : {:?} : {:?})\", asm, outputs, inputs)\n+            },\n             Nop => write!(fmt, \"nop\"),\n         }\n     }\n@@ -1004,12 +1013,6 @@ pub enum Rvalue<'tcx> {\n     /// that `Foo` has a destructor. These rvalues can be optimized\n     /// away after type-checking and before lowering.\n     Aggregate(AggregateKind<'tcx>, Vec<Operand<'tcx>>),\n-\n-    InlineAsm {\n-        asm: InlineAsm,\n-        outputs: Vec<Lvalue<'tcx>>,\n-        inputs: Vec<Operand<'tcx>>\n-    }\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n@@ -1111,10 +1114,6 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n             UnaryOp(ref op, ref a) => write!(fmt, \"{:?}({:?})\", op, a),\n             Discriminant(ref lval) => write!(fmt, \"discriminant({:?})\", lval),\n             Box(ref t) => write!(fmt, \"Box({:?})\", t),\n-            InlineAsm { ref asm, ref outputs, ref inputs } => {\n-                write!(fmt, \"asm!({:?} : {:?} : {:?})\", asm, outputs, inputs)\n-            }\n-\n             Ref(_, borrow_kind, ref lv) => {\n                 let kind_str = match borrow_kind {\n                     BorrowKind::Shared => \"\","}, {"sha": "5c8d031caf60dafc365bcba535d7fb41a204b4fe", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=9f1762a05830acbb31351b2c5305bc47f53363c8", "patch": "@@ -207,7 +207,6 @@ impl<'tcx> Rvalue<'tcx> {\n                     }\n                 }\n             }\n-            Rvalue::InlineAsm { .. } => None\n         }\n     }\n }"}, {"sha": "7cdbd5cae061fc0f8b7100ae1ec9a2cbffab6fee", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=9f1762a05830acbb31351b2c5305bc47f53363c8", "patch": "@@ -333,6 +333,16 @@ macro_rules! make_mir_visitor {\n                     StatementKind::StorageDead(ref $($mutability)* lvalue) => {\n                         self.visit_lvalue(lvalue, LvalueContext::StorageDead, location);\n                     }\n+                    StatementKind::InlineAsm { ref $($mutability)* outputs,\n+                                               ref $($mutability)* inputs,\n+                                               asm: _ } => {\n+                        for output in & $($mutability)* outputs[..] {\n+                            self.visit_lvalue(output, LvalueContext::Store, location);\n+                        }\n+                        for input in & $($mutability)* inputs[..] {\n+                            self.visit_operand(input, location);\n+                        }\n+                    }\n                     StatementKind::Nop => {}\n                 }\n             }\n@@ -526,17 +536,6 @@ macro_rules! make_mir_visitor {\n                             self.visit_operand(operand, location);\n                         }\n                     }\n-\n-                    Rvalue::InlineAsm { ref $($mutability)* outputs,\n-                                        ref $($mutability)* inputs,\n-                                        asm: _ } => {\n-                        for output in & $($mutability)* outputs[..] {\n-                            self.visit_lvalue(output, LvalueContext::Store, location);\n-                        }\n-                        for input in & $($mutability)* inputs[..] {\n-                            self.visit_operand(input, location);\n-                        }\n-                    }\n                 }\n             }\n "}, {"sha": "7888a56d39dfbd5a5b3757160009e73acf2d7e61", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs?ref=9f1762a05830acbb31351b2c5305bc47f53363c8", "patch": "@@ -473,6 +473,7 @@ impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> {\n             }\n             mir::StatementKind::StorageLive(_) |\n             mir::StatementKind::StorageDead(_) |\n+            mir::StatementKind::InlineAsm { .. } |\n             mir::StatementKind::Nop => {}\n         }\n     }"}, {"sha": "940dd5433a0d9ee3846f762c9a8da678293be009", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/sanity_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs?ref=9f1762a05830acbb31351b2c5305bc47f53363c8", "patch": "@@ -104,6 +104,7 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n             mir::StatementKind::StorageLive(_) |\n             mir::StatementKind::StorageDead(_) |\n+            mir::StatementKind::InlineAsm { .. } |\n             mir::StatementKind::Nop => continue,\n             mir::StatementKind::SetDiscriminant{ .. } =>\n                 span_bug!(stmt.source_info.span,"}, {"sha": "35ace6628cfed4d7f244443a4feda936e20555c3", "filename": "src/librustc_borrowck/borrowck/mir/gather_moves.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs?ref=9f1762a05830acbb31351b2c5305bc47f53363c8", "patch": "@@ -412,6 +412,7 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n                 span_bug!(stmt.source_info.span,\n                           \"SetDiscriminant should not exist during borrowck\");\n             }\n+            StatementKind::InlineAsm { .. } |\n             StatementKind::Nop => {}\n         }\n     }\n@@ -436,8 +437,7 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n             }\n             Rvalue::Ref(..) |\n             Rvalue::Discriminant(..) |\n-            Rvalue::Len(..) |\n-            Rvalue::InlineAsm { .. } => {}\n+            Rvalue::Len(..) => {}\n             Rvalue::Box(..) => {\n                 // This returns an rvalue with uninitialized contents. We can't\n                 // move out of it here because it is an rvalue - assignments always"}, {"sha": "d9283e7037f50f2dc851af5ec9cb53737709f837", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=9f1762a05830acbb31351b2c5305bc47f53363c8", "patch": "@@ -378,6 +378,7 @@ fn drop_flag_effects_for_location<'a, 'tcx, F>(\n             }\n             mir::StatementKind::StorageLive(_) |\n             mir::StatementKind::StorageDead(_) |\n+            mir::StatementKind::InlineAsm { .. } |\n             mir::StatementKind::Nop => {}\n         },\n         None => {"}, {"sha": "7adcc0e730b15710425c9ead59b7586b2048fc87", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=9f1762a05830acbb31351b2c5305bc47f53363c8", "patch": "@@ -49,21 +49,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Scope { extent, value } => {\n                 this.in_scope(extent, block, |this| this.as_rvalue(block, value))\n             }\n-            ExprKind::InlineAsm { asm, outputs, inputs } => {\n-                let outputs = outputs.into_iter().map(|output| {\n-                    unpack!(block = this.as_lvalue(block, output))\n-                }).collect();\n-\n-                let inputs = inputs.into_iter().map(|input| {\n-                    unpack!(block = this.as_operand(block, input))\n-                }).collect();\n-\n-                block.and(Rvalue::InlineAsm {\n-                    asm: asm.clone(),\n-                    outputs: outputs,\n-                    inputs: inputs\n-                })\n-            }\n             ExprKind::Repeat { value, count } => {\n                 let value_operand = unpack!(block = this.as_operand(block, value));\n                 block.and(Rvalue::Repeat(value_operand, count))\n@@ -238,6 +223,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Break { .. } |\n             ExprKind::Continue { .. } |\n             ExprKind::Return { .. } |\n+            ExprKind::InlineAsm { .. } |\n             ExprKind::StaticRef { .. } => {\n                 // these do not have corresponding `Rvalue` variants,\n                 // so make an operand and then return that"}, {"sha": "e66f2b4e2bfc0a018df4f4e1927beac6ca80f58f", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=9f1762a05830acbb31351b2c5305bc47f53363c8", "patch": "@@ -232,6 +232,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::AssignOp { .. } |\n             ExprKind::Continue { .. } |\n             ExprKind::Break { .. } |\n+            ExprKind::InlineAsm { .. } |\n             ExprKind::Return {.. } => {\n                 this.stmt_expr(block, expr)\n             }\n@@ -257,7 +258,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Index { .. } |\n             ExprKind::Deref { .. } |\n             ExprKind::Literal { .. } |\n-            ExprKind::InlineAsm { .. } |\n             ExprKind::Field { .. } => {\n                 debug_assert!(match Category::of(&expr.kind).unwrap() {\n                     Category::Rvalue(RvalueFunc::Into) => false,"}, {"sha": "c577aab40dbeb4a9729e23600f8db7e955325ceb", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=9f1762a05830acbb31351b2c5305bc47f53363c8", "patch": "@@ -117,6 +117,23 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 this.exit_scope(expr_span, extent, block, return_block);\n                 this.cfg.start_new_block().unit()\n             }\n+            ExprKind::InlineAsm { asm, outputs, inputs } => {\n+                let outputs = outputs.into_iter().map(|output| {\n+                    unpack!(block = this.as_lvalue(block, output))\n+                }).collect();\n+                let inputs = inputs.into_iter().map(|input| {\n+                    unpack!(block = this.as_operand(block, input))\n+                }).collect();\n+                this.cfg.push(block, Statement {\n+                    source_info: source_info,\n+                    kind: StatementKind::InlineAsm {\n+                        asm: asm.clone(),\n+                        outputs: outputs,\n+                        inputs: inputs\n+                    },\n+                });\n+                block.unit()\n+            }\n             _ => {\n                 let expr_ty = expr.ty;\n                 let temp = this.temp(expr.ty.clone());"}, {"sha": "4459142cfb2746dcc0ead02355fe2079bf99b9c7", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=9f1762a05830acbb31351b2c5305bc47f53363c8", "patch": "@@ -774,10 +774,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     }\n                 }\n             }\n-\n-            Rvalue::InlineAsm {..} => {\n-                self.not_const();\n-            }\n         }\n     }\n \n@@ -933,6 +929,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 StatementKind::SetDiscriminant { .. } |\n                 StatementKind::StorageLive(_) |\n                 StatementKind::StorageDead(_) |\n+                StatementKind::InlineAsm {..} |\n                 StatementKind::Nop => {}\n             }\n         });"}, {"sha": "8d108815e0f3c8e44439b29efc80794b95bc2d58", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=9f1762a05830acbb31351b2c5305bc47f53363c8", "patch": "@@ -361,9 +361,9 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         span_mirbug!(self, stmt, \"bad assignment ({:?} = {:?}): {:?}\",\n                                      lv_ty, rv_ty, terr);\n                     }\n-                // FIXME: rvalue with undeterminable type - e.g. inline\n-                // asm.\n                 }\n+                // FIXME: rvalue with undeterminable type - e.g. AggregateKind::Array branch that\n+                // returns `None`.\n             }\n             StatementKind::SetDiscriminant{ ref lvalue, variant_index } => {\n                 let lvalue_type = lvalue.ty(mir, tcx).to_ty(tcx);\n@@ -392,6 +392,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     }\n                 }\n             }\n+            StatementKind::InlineAsm { .. } |\n             StatementKind::Nop => {}\n         }\n     }"}, {"sha": "33b7089c38214543759808153fc3f52520bef57e", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=9f1762a05830acbb31351b2c5305bc47f53363c8", "patch": "@@ -128,6 +128,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n             StatementKind::SetDiscriminant { .. } => \"StatementKind::SetDiscriminant\",\n             StatementKind::StorageLive(..) => \"StatementKind::StorageLive\",\n             StatementKind::StorageDead(..) => \"StatementKind::StorageDead\",\n+            StatementKind::InlineAsm { .. } => \"StatementKind::InlineAsm\",\n             StatementKind::Nop => \"StatementKind::Nop\",\n         }, &statement.kind);\n         self.super_statement(block, statement, location);\n@@ -198,7 +199,6 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n \n                 \"Rvalue::Aggregate\"\n             }\n-            Rvalue::InlineAsm { .. } => \"Rvalue::InlineAsm\",\n         };\n         self.record(rvalue_kind, rvalue);\n         self.super_rvalue(rvalue, location);"}, {"sha": "7e17ae5f1d389ceeb15bd713976391c2b87b9c21", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=9f1762a05830acbb31351b2c5305bc47f53363c8", "patch": "@@ -287,8 +287,9 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                     mir::StatementKind::StorageLive(_) |\n                     mir::StatementKind::StorageDead(_) |\n                     mir::StatementKind::Nop => {}\n+                    mir::StatementKind::InlineAsm { .. } |\n                     mir::StatementKind::SetDiscriminant{ .. } => {\n-                        span_bug!(span, \"SetDiscriminant should not appear in constants?\");\n+                        span_bug!(span, \"{:?} should not appear in constants?\", statement.kind);\n                     }\n                 }\n             }"}, {"sha": "7d4f542addbb1aa4494b5e3342deead7c262e6fe", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=9f1762a05830acbb31351b2c5305bc47f53363c8", "patch": "@@ -16,7 +16,6 @@ use rustc::mir::tcx::LvalueTy;\n use rustc::mir;\n use middle::lang_items::ExchangeMallocFnLangItem;\n \n-use asm;\n use base;\n use builder::Builder;\n use callee::Callee;\n@@ -156,20 +155,6 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 bcx\n             }\n \n-            mir::Rvalue::InlineAsm { ref asm, ref outputs, ref inputs } => {\n-                let outputs = outputs.iter().map(|output| {\n-                    let lvalue = self.trans_lvalue(&bcx, output);\n-                    (lvalue.llval, lvalue.ty.to_ty(bcx.tcx()))\n-                }).collect();\n-\n-                let input_vals = inputs.iter().map(|input| {\n-                    self.trans_operand(&bcx, input).immediate()\n-                }).collect();\n-\n-                asm::trans_inline_asm(&bcx, asm, outputs, input_vals);\n-                bcx\n-            }\n-\n             _ => {\n                 assert!(rvalue_creates_operand(rvalue));\n                 let (bcx, temp) = self.trans_rvalue_operand(bcx, rvalue);\n@@ -468,8 +453,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 (bcx, operand)\n             }\n             mir::Rvalue::Repeat(..) |\n-            mir::Rvalue::Aggregate(..) |\n-            mir::Rvalue::InlineAsm { .. } => {\n+            mir::Rvalue::Aggregate(..) => {\n                 bug!(\"cannot generate operand from rvalue {:?}\", rvalue);\n \n             }\n@@ -669,8 +653,7 @@ pub fn rvalue_creates_operand(rvalue: &mir::Rvalue) -> bool {\n         mir::Rvalue::Use(..) =>\n             true,\n         mir::Rvalue::Repeat(..) |\n-        mir::Rvalue::Aggregate(..) |\n-        mir::Rvalue::InlineAsm { .. } =>\n+        mir::Rvalue::Aggregate(..) =>\n             false,\n     }\n "}, {"sha": "29a0648c8f8f8d48a6c95b1d4aa9570bd123ea24", "filename": "src/librustc_trans/mir/statement.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1762a05830acbb31351b2c5305bc47f53363c8/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fstatement.rs?ref=9f1762a05830acbb31351b2c5305bc47f53363c8", "patch": "@@ -11,6 +11,7 @@\n use rustc::mir;\n \n use base;\n+use asm;\n use common;\n use builder::Builder;\n \n@@ -73,6 +74,19 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             mir::StatementKind::StorageDead(ref lvalue) => {\n                 self.trans_storage_liveness(bcx, lvalue, base::Lifetime::End)\n             }\n+            mir::StatementKind::InlineAsm { ref asm, ref outputs, ref inputs } => {\n+                let outputs = outputs.iter().map(|output| {\n+                    let lvalue = self.trans_lvalue(&bcx, output);\n+                    (lvalue.llval, lvalue.ty.to_ty(bcx.tcx()))\n+                }).collect();\n+\n+                let input_vals = inputs.iter().map(|input| {\n+                    self.trans_operand(&bcx, input).immediate()\n+                }).collect();\n+\n+                asm::trans_inline_asm(&bcx, asm, outputs, input_vals);\n+                bcx\n+            }\n             mir::StatementKind::Nop => bcx,\n         }\n     }"}]}