{"sha": "8ebc1c9fd88640b1833e0743b649a957f3337720", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYmMxYzlmZDg4NjQwYjE4MzNlMDc0M2I2NDlhOTU3ZjMzMzc3MjA=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-05T23:35:16Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-05T23:56:40Z"}, "message": "librustc: Fix debuginfo for captured variables in non-FnOnce unboxed closures.", "tree": {"sha": "136bdabeb7e145931a9bac6bb7c24d35958e32b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/136bdabeb7e145931a9bac6bb7c24d35958e32b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ebc1c9fd88640b1833e0743b649a957f3337720", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebc1c9fd88640b1833e0743b649a957f3337720", "html_url": "https://github.com/rust-lang/rust/commit/8ebc1c9fd88640b1833e0743b649a957f3337720", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ebc1c9fd88640b1833e0743b649a957f3337720/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f4c11be3b9706d1ba0e1b74b89de1478410a56f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f4c11be3b9706d1ba0e1b74b89de1478410a56f", "html_url": "https://github.com/rust-lang/rust/commit/6f4c11be3b9706d1ba0e1b74b89de1478410a56f"}], "stats": {"total": 59, "additions": 48, "deletions": 11}, "files": [{"sha": "106c272a779b6382f37ec260e09470ed84b1ffae", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc1c9fd88640b1833e0743b649a957f3337720/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc1c9fd88640b1833e0743b649a957f3337720/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=8ebc1c9fd88640b1833e0743b649a957f3337720", "patch": "@@ -286,7 +286,6 @@ fn load_environment<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             debuginfo::create_captured_var_metadata(\n                 bcx,\n                 def_id.node,\n-                cdata_ty,\n                 env_pointer_alloca,\n                 i,\n                 captured_by_ref,\n@@ -326,7 +325,7 @@ fn load_unboxed_closure_environment<'blk, 'tcx>(\n     // Store the pointer to closure data in an alloca for debug info because that's what the\n     // llvm.dbg.declare intrinsic expects\n     let env_pointer_alloca = if bcx.sess().opts.debuginfo == FullDebugInfo {\n-        let alloc = alloc_ty(bcx, ty::mk_mut_ptr(bcx.tcx(), self_type), \"__debuginfo_env_ptr\");\n+        let alloc = alloca(bcx, val_ty(llenv), \"__debuginfo_env_ptr\");\n         Store(bcx, llenv, alloc);\n         Some(alloc)\n     } else {\n@@ -355,7 +354,6 @@ fn load_unboxed_closure_environment<'blk, 'tcx>(\n             debuginfo::create_captured_var_metadata(\n                 bcx,\n                 def_id.node,\n-                self_type,\n                 env_pointer_alloca,\n                 i,\n                 captured_by_ref,"}, {"sha": "09cfbde43e50747d73a324e377c1347661fe16ef", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc1c9fd88640b1833e0743b649a957f3337720/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc1c9fd88640b1833e0743b649a957f3337720/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=8ebc1c9fd88640b1833e0743b649a957f3337720", "patch": "@@ -882,7 +882,6 @@ pub fn create_local_var_metadata(bcx: Block, local: &ast::Local) {\n /// Adds the created metadata nodes directly to the crate's IR.\n pub fn create_captured_var_metadata<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                                 node_id: ast::NodeId,\n-                                                env_data_type: Ty<'tcx>,\n                                                 env_pointer: ValueRef,\n                                                 env_index: uint,\n                                                 captured_by_ref: bool,\n@@ -928,7 +927,10 @@ pub fn create_captured_var_metadata<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let variable_type = node_id_type(bcx, node_id);\n     let scope_metadata = bcx.fcx.debug_context.get_ref(cx, span).fn_metadata;\n \n-    let llvm_env_data_type = type_of::type_of(cx, env_data_type);\n+    // env_pointer is the alloca containing the pointer to the environment,\n+    // so it's type is **EnvironmentType. In order to find out the type of\n+    // the environment we have to \"dereference\" two times.\n+    let llvm_env_data_type = val_ty(env_pointer).element_type().element_type();\n     let byte_offset_of_var_in_env = machine::llelement_offset(cx,\n                                                               llvm_env_data_type,\n                                                               env_index);"}, {"sha": "761d0f0be8f583309d5a682b6ddfdbb264693438", "filename": "src/test/debuginfo/var-captured-in-stack-closure.rs", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc1c9fd88640b1833e0743b649a957f3337720/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc1c9fd88640b1833e0743b649a957f3337720/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs?ref=8ebc1c9fd88640b1833e0743b649a957f3337720", "patch": "@@ -28,6 +28,19 @@\n // gdb-command:print *owned\n // gdb-check:$5 = 6\n \n+// gdb-command:continue\n+\n+// gdb-command:print variable\n+// gdb-check:$6 = 2\n+// gdb-command:print constant\n+// gdb-check:$7 = 2\n+// gdb-command:print a_struct\n+// gdb-check:$8 = {a = -3, b = 4.5, c = 5}\n+// gdb-command:print *struct_ref\n+// gdb-check:$9 = {a = -3, b = 4.5, c = 5}\n+// gdb-command:print *owned\n+// gdb-check:$10 = 6\n+\n \n // === LLDB TESTS ==================================================================================\n \n@@ -44,6 +57,20 @@\n // lldb-command:print *owned\n // lldb-check:[...]$4 = 6\n \n+// lldb-command:continue\n+\n+// lldb-command:print variable\n+// lldb-check:[...]$5 = 2\n+// lldb-command:print constant\n+// lldb-check:[...]$6 = 2\n+// lldb-command:print a_struct\n+// lldb-check:[...]$7 = Struct { a: -3, b: 4.5, c: 5 }\n+// lldb-command:print *struct_ref\n+// lldb-check:[...]$8 = Struct { a: -3, b: 4.5, c: 5 }\n+// lldb-command:print *owned\n+// lldb-check:[...]$9 = 6\n+\n+#![feature(unboxed_closures)]\n #![allow(unused_variables)]\n \n struct Struct {\n@@ -65,12 +92,22 @@ fn main() {\n     let struct_ref = &a_struct;\n     let owned = box 6;\n \n-    let closure = || {\n-        zzz(); // #break\n-        variable = constant + a_struct.a + struct_ref.a + *owned;\n-    };\n-\n-    closure();\n+    {\n+        let closure = || {\n+            zzz(); // #break\n+            variable = constant + a_struct.a + struct_ref.a + *owned;\n+        };\n+\n+        closure();\n+    }\n+\n+    {\n+        let mut unboxed_closure = |&mut:| {\n+            zzz(); // #break\n+            variable = constant + a_struct.a + struct_ref.a + *owned;\n+        };\n+        unboxed_closure();\n+    }\n }\n \n fn zzz() {()}"}]}