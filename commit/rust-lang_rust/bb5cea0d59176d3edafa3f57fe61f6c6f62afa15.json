{"sha": "bb5cea0d59176d3edafa3f57fe61f6c6f62afa15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNWNlYTBkNTkxNzZkM2VkYWZhM2Y1N2ZlNjFmNmM2ZjYyYWZhMTU=", "commit": {"author": {"name": "Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-12T11:39:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-12T11:39:37Z"}, "message": "Merge pull request #516 from RalfJung/rc\n\nRc should be fixed", "tree": {"sha": "75feaf4b73556a405cef5a1589f453608d4dde82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75feaf4b73556a405cef5a1589f453608d4dde82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb5cea0d59176d3edafa3f57fe61f6c6f62afa15", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb6WZ5CRBK7hj4Ov3rIwAAdHIIAHe6h+ES9kbY+laoIwPBSYXP\nHhP4T7d1/ZHpVb41NFFhs7lUNaZx6FaT43aYLvohTEYx6/rIbC4j1DKccuvJB8jg\n9yKcaO1RuypiNYdtU0zdRT5yBrb1bcT5MH9bFDAbkgpbAn3QIw/QvOLBUYCI+QkA\nPZHuOwKssrljTpUlep94OTINzGDKDm3Yi9jKyzqX/FmCd+5ErNZX0pjFcdLl40B+\nb59lrYI9sVTlKgpp/viF0be7d+vkgsyIjermiTRe7Ms+fwGjA4ZI+PyEpMfdGrah\nWjwhfAP37/pMkycXf5diYJCXr2TY5uH5SeuIMl8FHcZBmLGpU2sK5wpL4FPHh0Y=\n=IDSa\n-----END PGP SIGNATURE-----\n", "payload": "tree 75feaf4b73556a405cef5a1589f453608d4dde82\nparent 61debe831e8b270315d9740239761cecab0be35b\nparent e7aa5c68ffc221ee07d37ee1d29b96282729b7fe\nauthor Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer <github35764891676564198441@oli-obk.de> 1542022777 +0100\ncommitter GitHub <noreply@github.com> 1542022777 +0100\n\nMerge pull request #516 from RalfJung/rc\n\nRc should be fixed"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb5cea0d59176d3edafa3f57fe61f6c6f62afa15", "html_url": "https://github.com/rust-lang/rust/commit/bb5cea0d59176d3edafa3f57fe61f6c6f62afa15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb5cea0d59176d3edafa3f57fe61f6c6f62afa15/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61debe831e8b270315d9740239761cecab0be35b", "url": "https://api.github.com/repos/rust-lang/rust/commits/61debe831e8b270315d9740239761cecab0be35b", "html_url": "https://github.com/rust-lang/rust/commit/61debe831e8b270315d9740239761cecab0be35b"}, {"sha": "e7aa5c68ffc221ee07d37ee1d29b96282729b7fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7aa5c68ffc221ee07d37ee1d29b96282729b7fe", "html_url": "https://github.com/rust-lang/rust/commit/e7aa5c68ffc221ee07d37ee1d29b96282729b7fe"}], "stats": {"total": 42, "additions": 12, "deletions": 30}, "files": [{"sha": "fb6d167ec6422de36a9a0c0086e6aa491e116e50", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb5cea0d59176d3edafa3f57fe61f6c6f62afa15/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/bb5cea0d59176d3edafa3f57fe61f6c6f62afa15/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=bb5cea0d59176d3edafa3f57fe61f6c6f62afa15", "patch": "@@ -1 +1 @@\n-nightly-2018-11-08\n+nightly-2018-11-12"}, {"sha": "ab34841df89e2a216577de64bda20e983bc02139", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bb5cea0d59176d3edafa3f57fe61f6c6f62afa15/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5cea0d59176d3edafa3f57fe61f6c6f62afa15/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=bb5cea0d59176d3edafa3f57fe61f6c6f62afa15", "patch": "@@ -446,24 +446,6 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n         Cow::Owned(alloc)\n     }\n \n-    #[inline(always)]\n-    fn memory_read(\n-        alloc: &Allocation<Borrow, Self::AllocExtra>,\n-        ptr: Pointer<Borrow>,\n-        size: Size,\n-    ) -> EvalResult<'tcx> {\n-        alloc.extra.memory_read(ptr, size)\n-    }\n-\n-    #[inline(always)]\n-    fn memory_written(\n-        alloc: &mut Allocation<Borrow, Self::AllocExtra>,\n-        ptr: Pointer<Borrow>,\n-        size: Size,\n-    ) -> EvalResult<'tcx> {\n-        alloc.extra.memory_written(ptr, size)\n-    }\n-\n     #[inline(always)]\n     fn memory_deallocated(\n         alloc: &mut Allocation<Borrow, Self::AllocExtra>,"}, {"sha": "475033d74c66c5053eb974beddc2c9471bc36ab6", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bb5cea0d59176d3edafa3f57fe61f6c6f62afa15/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5cea0d59176d3edafa3f57fe61f6c6f62afa15/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=bb5cea0d59176d3edafa3f57fe61f6c6f62afa15", "patch": "@@ -5,7 +5,7 @@ use rustc::hir;\n \n use crate::{\n     EvalResult, MiriEvalContext, HelpersEvalContextExt,\n-    MemoryKind, MiriMemoryKind, RangeMap, AllocId,\n+    MemoryKind, MiriMemoryKind, RangeMap, AllocId, Allocation, AllocationExtra,\n     Pointer, PlaceTy, MPlaceTy,\n };\n \n@@ -343,27 +343,30 @@ impl<'tcx> Stacks {\n }\n \n /// Hooks and glue\n-impl<'tcx> Stacks {\n+impl AllocationExtra<Borrow> for Stacks {\n     #[inline(always)]\n-    pub fn memory_read(\n-        &self,\n+    fn memory_read<'tcx>(\n+        alloc: &Allocation<Borrow, Stacks>,\n         ptr: Pointer<Borrow>,\n         size: Size,\n     ) -> EvalResult<'tcx> {\n         // Reads behave exactly like the first half of a reborrow-to-shr\n-        self.use_and_maybe_re_borrow(ptr, size, UsageKind::Read, None)\n+        alloc.extra.use_and_maybe_re_borrow(ptr, size, UsageKind::Read, None)\n     }\n \n     #[inline(always)]\n-    pub fn memory_written(\n-        &mut self,\n+    fn memory_written<'tcx>(\n+        alloc: &mut Allocation<Borrow, Stacks>,\n         ptr: Pointer<Borrow>,\n         size: Size,\n     ) -> EvalResult<'tcx> {\n         // Writes behave exactly like the first half of a reborrow-to-mut\n-        self.use_and_maybe_re_borrow(ptr, size, UsageKind::Write, None)\n+        alloc.extra.use_and_maybe_re_borrow(ptr, size, UsageKind::Write, None)\n     }\n+}\n \n+impl<'tcx> Stacks {\n+    #[inline(always)]\n     pub fn memory_deallocated(\n         &mut self,\n         ptr: Pointer<Borrow>,"}, {"sha": "0bf707503112049b7ce706f3949a7ea096188a51", "filename": "tests/run-pass/rc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb5cea0d59176d3edafa3f57fe61f6c6f62afa15/tests%2Frun-pass%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5cea0d59176d3edafa3f57fe61f6c6f62afa15/tests%2Frun-pass%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frc.rs?ref=bb5cea0d59176d3edafa3f57fe61f6c6f62afa15", "patch": "@@ -1,6 +1,3 @@\n-// FIXME: Disabled due to https://github.com/rust-lang/rust/issues/55747\n-// ignore-test\n-\n use std::cell::RefCell;\n use std::rc::Rc;\n "}]}