{"sha": "033e6ac57a5fb650e6f5240e7d1b8cc7841ff53b", "node_id": "C_kwDOAAsO6NoAKDAzM2U2YWM1N2E1ZmI2NTBlNmY1MjQwZTdkMWI4Y2M3ODQxZmY1M2I", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-05-29T10:44:31Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-05-29T11:10:54Z"}, "message": "Verify name references more rigidly\n\nPreviously we didn't verify that record expressions/patterns that were\nfound did actually point to the struct we're operating on. Moreover,\nwhen that record expressions/patterns had missing child nodes, we would\ncontinue traversing their ancestor nodes.", "tree": {"sha": "84bcf484f5fd54aaa270d2f55d5891761f5c2570", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84bcf484f5fd54aaa270d2f55d5891761f5c2570"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/033e6ac57a5fb650e6f5240e7d1b8cc7841ff53b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmR0iD4ACgkQ4laYqTBY\nYXGpcA/+MkroBvIe79TtCjoDyH3d9vNXoyVLKURhGjRUmmw8+SWEu6O5zX6/SHeD\nf5UA8m8m3bJ0Soh1rceq6ZpxY61RnngLvUHGhIe4Fsvpvgxmi+7ln8P3C5PB/ROB\nXsaC8+JIR9KgM3qoc2R/s++b+Z+D9bEZpfsZfnLKOwqoViO4HDeyocDp5iFbICh5\nz3g4MfTt+qeBK9+qDVRPJZZ1iCPGjdB++axs6Q6FMci7TT2NBaoVcmuzQmYBAB3C\nkIhH+4dyVJaeq+WNI001ngXAdyVwk/+4b3AXaR2MUCIjUHW7HF473nP8grIHAnkw\nZF5SYwLS6CnXvjLLo/Upr2ri5tBIw+t7INZc5w1NYcvZsz1gz4QQys5ScVmCjy+7\n7Cs+mlQDQgriXUsLXVR2Bs8lWTrZNSH2f73fPf7IGM8Nfy7mTWzvI9Ay8dTh7mqE\ni+ll4msp5h6Wl9ppF8k2hI8dv5OLfP4K9P9l02Fo58WH/EKEwpPLRXV6d9YEabjN\neoXmj3FA2YDayYr+qQ42gugXpi05oblx+f5dZ2DgYsDMeKO9dm4MWOO/SacFSvtO\ncDepJ79F2QXYYE7IQEcJLED4dwaKFlnhB7e7dPQ7ew70OUW+nxzDjq4A9bTk7YlE\nUA5a19Ah534YlVP8keX3YoFTODliUycp9on68EemfDkuVqTZL5g=\n=2sA1\n-----END PGP SIGNATURE-----", "payload": "tree 84bcf484f5fd54aaa270d2f55d5891761f5c2570\nparent ab9347542c4f584952a5f554a18e1f92188b2fdb\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1685357071 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1685358654 +0900\n\nVerify name references more rigidly\n\nPreviously we didn't verify that record expressions/patterns that were\nfound did actually point to the struct we're operating on. Moreover,\nwhen that record expressions/patterns had missing child nodes, we would\ncontinue traversing their ancestor nodes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/033e6ac57a5fb650e6f5240e7d1b8cc7841ff53b", "html_url": "https://github.com/rust-lang/rust/commit/033e6ac57a5fb650e6f5240e7d1b8cc7841ff53b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/033e6ac57a5fb650e6f5240e7d1b8cc7841ff53b/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab9347542c4f584952a5f554a18e1f92188b2fdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab9347542c4f584952a5f554a18e1f92188b2fdb", "html_url": "https://github.com/rust-lang/rust/commit/ab9347542c4f584952a5f554a18e1f92188b2fdb"}], "stats": {"total": 172, "additions": 124, "deletions": 48}, "files": [{"sha": "00a4e0530d2b9e5c2ecc3051c7b3987cc4ffd586", "filename": "crates/ide-assists/src/handlers/convert_named_struct_to_tuple_struct.rs", "status": "modified", "additions": 124, "deletions": 48, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/033e6ac57a5fb650e6f5240e7d1b8cc7841ff53b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_named_struct_to_tuple_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033e6ac57a5fb650e6f5240e7d1b8cc7841ff53b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_named_struct_to_tuple_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_named_struct_to_tuple_struct.rs?ref=033e6ac57a5fb650e6f5240e7d1b8cc7841ff53b", "patch": "@@ -1,9 +1,9 @@\n use either::Either;\n-use ide_db::defs::Definition;\n+use ide_db::{defs::Definition, search::FileReference};\n use itertools::Itertools;\n use syntax::{\n     ast::{self, AstNode, HasGenericParams, HasVisibility},\n-    match_ast, SyntaxKind, SyntaxNode,\n+    match_ast, SyntaxKind,\n };\n \n use crate::{assist_context::SourceChangeBuilder, AssistContext, AssistId, AssistKind, Assists};\n@@ -141,57 +141,70 @@ fn edit_struct_references(\n     };\n     let usages = strukt_def.usages(&ctx.sema).include_self_refs().all();\n \n-    let edit_node = |edit: &mut SourceChangeBuilder, node: SyntaxNode| -> Option<()> {\n-        match_ast! {\n-            match node {\n-                ast::RecordPat(record_struct_pat) => {\n-                    let Some(fr) = ctx.sema.original_range_opt(record_struct_pat.syntax()) else {\n-                        // We've found the node to replace, so we should return `Some` even if the\n-                        // replacement failed to stop the ancestor node traversal.\n-                        return Some(());\n-                    };\n-                    edit.replace(\n-                        fr.range,\n-                        ast::make::tuple_struct_pat(\n-                            record_struct_pat.path()?,\n-                            record_struct_pat\n-                                .record_pat_field_list()?\n-                                .fields()\n-                                .filter_map(|pat| pat.pat())\n-                        )\n-                        .to_string()\n-                    );\n-                },\n-                ast::RecordExpr(record_expr) => {\n-                    let Some(fr) = ctx.sema.original_range_opt(record_expr.syntax()) else {\n-                        // See the comment above.\n-                        return Some(());\n-                    };\n-                    let path = record_expr.path()?;\n-                    let args = record_expr\n-                        .record_expr_field_list()?\n-                        .fields()\n-                        .filter_map(|f| f.expr())\n-                        .join(\", \");\n-\n-                    edit.replace(fr.range, format!(\"{path}({args})\"));\n-                },\n-                _ => return None,\n-            }\n-        }\n-        Some(())\n-    };\n-\n     for (file_id, refs) in usages {\n         edit.edit_file(file_id);\n         for r in refs {\n-            for node in r.name.syntax().ancestors() {\n-                if edit_node(edit, node).is_some() {\n-                    break;\n-                }\n-            }\n+            process_struct_name_reference(ctx, r, edit);\n+        }\n+    }\n+}\n+\n+fn process_struct_name_reference(\n+    ctx: &AssistContext<'_>,\n+    r: FileReference,\n+    edit: &mut SourceChangeBuilder,\n+) -> Option<()> {\n+    // First check if it's the last semgnet of a path that directly belongs to a record\n+    // expression/pattern.\n+    let name_ref = r.name.as_name_ref()?;\n+    let path_segment = name_ref.syntax().parent().and_then(ast::PathSegment::cast)?;\n+    // A `PathSegment` always belongs to a `Path`, so there's at least one `Path` at this point.\n+    let full_path =\n+        path_segment.syntax().parent()?.ancestors().map_while(ast::Path::cast).last().unwrap();\n+\n+    if full_path.segment().unwrap().name_ref()? != *name_ref {\n+        // `name_ref` isn't the last segment of the path, so `full_path` doesn't point to the\n+        // struct we want to edit.\n+        return None;\n+    }\n+\n+    let parent = full_path.syntax().parent()?;\n+    match_ast! {\n+        match parent {\n+            ast::RecordPat(record_struct_pat) => {\n+                // When we failed to get the original range for the whole struct expression node,\n+                // we can't provide any reasonable edit. Leave it untouched.\n+                let file_range = ctx.sema.original_range_opt(record_struct_pat.syntax())?;\n+                edit.replace(\n+                    file_range.range,\n+                    ast::make::tuple_struct_pat(\n+                        record_struct_pat.path()?,\n+                        record_struct_pat\n+                            .record_pat_field_list()?\n+                            .fields()\n+                            .filter_map(|pat| pat.pat())\n+                    )\n+                    .to_string()\n+                );\n+            },\n+            ast::RecordExpr(record_expr) => {\n+                // When we failed to get the original range for the whole struct pattern node,\n+                // we can't provide any reasonable edit. Leave it untouched.\n+                let file_range = ctx.sema.original_range_opt(record_expr.syntax())?;\n+                let path = record_expr.path()?;\n+                let args = record_expr\n+                    .record_expr_field_list()?\n+                    .fields()\n+                    .filter_map(|f| f.expr())\n+                    .join(\", \");\n+\n+                edit.replace(file_range.range, format!(\"{path}({args})\"));\n+            },\n+            _ => {}\n         }\n     }\n+\n+    Some(())\n }\n \n fn edit_field_references(\n@@ -898,6 +911,69 @@ fn test() {\n         let Struct(inner) = s;\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn struct_name_ref_may_not_be_part_of_struct_expr_or_struct_pat() {\n+        check_assist(\n+            convert_named_struct_to_tuple_struct,\n+            r#\"\n+struct $0Struct {\n+    inner: i32,\n+}\n+struct Outer<T> {\n+    value: T,\n+}\n+fn foo<T>() -> T { loop {} }\n+\n+fn test() {\n+    Outer {\n+        value: foo::<Struct>();\n+    }\n+}\n+\n+trait HasAssoc {\n+    type Assoc;\n+    fn test();\n+}\n+impl HasAssoc for Struct {\n+    type Assoc = Outer<i32>;\n+    fn test() {\n+        let a = Self::Assoc {\n+            value: 42,\n+        };\n+        let Self::Assoc { value } = a;\n+    }\n+}\n+\"#,\n+            r#\"\n+struct Struct(i32);\n+struct Outer<T> {\n+    value: T,\n+}\n+fn foo<T>() -> T { loop {} }\n+\n+fn test() {\n+    Outer {\n+        value: foo::<Struct>();\n+    }\n+}\n+\n+trait HasAssoc {\n+    type Assoc;\n+    fn test();\n+}\n+impl HasAssoc for Struct {\n+    type Assoc = Outer<i32>;\n+    fn test() {\n+        let a = Self::Assoc {\n+            value: 42,\n+        };\n+        let Self::Assoc { value } = a;\n+    }\n+}\n \"#,\n         );\n     }"}]}