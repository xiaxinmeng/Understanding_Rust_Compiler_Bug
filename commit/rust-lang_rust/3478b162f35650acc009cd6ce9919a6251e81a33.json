{"sha": "3478b162f35650acc009cd6ce9919a6251e81a33", "node_id": "C_kwDOAAsO6NoAKDM0NzhiMTYyZjM1NjUwYWNjMDA5Y2Q2Y2U5OTE5YTYyNTFlODFhMzM", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2023-02-05T01:09:56Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2023-02-05T02:47:48Z"}, "message": "rustc_const_eval: remove huge error imports", "tree": {"sha": "e4269ceb0b2e6fd40d208e55423a78da57425e17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4269ceb0b2e6fd40d208e55423a78da57425e17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3478b162f35650acc009cd6ce9919a6251e81a33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3478b162f35650acc009cd6ce9919a6251e81a33", "html_url": "https://github.com/rust-lang/rust/commit/3478b162f35650acc009cd6ce9919a6251e81a33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3478b162f35650acc009cd6ce9919a6251e81a33/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4442f13b030162319cfe53335d4abc369f75214b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4442f13b030162319cfe53335d4abc369f75214b", "html_url": "https://github.com/rust-lang/rust/commit/4442f13b030162319cfe53335d4abc369f75214b"}], "stats": {"total": 72, "additions": 35, "deletions": 37}, "files": [{"sha": "782a62accad9e984479cc4c1bd98d351dd6cb75b", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 35, "deletions": 37, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3478b162f35650acc009cd6ce9919a6251e81a33/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3478b162f35650acc009cd6ce9919a6251e81a33/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=3478b162f35650acc009cd6ce9919a6251e81a33", "patch": "@@ -22,13 +22,7 @@ use rustc_span::{BytePos, Pos, Span, Symbol};\n use rustc_trait_selection::traits::SelectionContext;\n \n use super::ConstCx;\n-use crate::errors::{\n-    InteriorMutabilityBorrow, InteriorMutableDataRefer, MutDerefErr, NonConstFmtMacroCall,\n-    NonConstFnCall, NonConstOpErr, PanicNonStrErr, RawPtrToIntErr, StaticAccessErr,\n-    TransientMutBorrowErr, TransientMutBorrowErrRaw, UnallowedFnPointerCall,\n-    UnallowedHeapAllocations, UnallowedInlineAsm, UnallowedMutableRefs, UnallowedMutableRefsRaw,\n-    UnallowedOpInConstContext, UnstableConstFn,\n-};\n+use crate::errors;\n use crate::util::{call_kind, CallDesugaringKind, CallKind};\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n@@ -99,7 +93,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallIndirect {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        ccx.tcx.sess.create_err(UnallowedFnPointerCall { span, kind: ccx.const_kind() })\n+        ccx.tcx.sess.create_err(errors::UnallowedFnPointerCall { span, kind: ccx.const_kind() })\n     }\n }\n \n@@ -303,10 +297,11 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                 diag_trait(&mut err, self_ty, tcx.require_lang_item(LangItem::Deref, Some(span)));\n                 err\n             }\n-            _ if tcx.opt_parent(callee) == tcx.get_diagnostic_item(sym::ArgumentV1Methods) => {\n-                ccx.tcx.sess.create_err(NonConstFmtMacroCall { span, kind: ccx.const_kind() })\n-            }\n-            _ => ccx.tcx.sess.create_err(NonConstFnCall {\n+            _ if tcx.opt_parent(callee) == tcx.get_diagnostic_item(sym::ArgumentV1Methods) => ccx\n+                .tcx\n+                .sess\n+                .create_err(errors::NonConstFmtMacroCall { span, kind: ccx.const_kind() }),\n+            _ => ccx.tcx.sess.create_err(errors::NonConstFnCall {\n                 span,\n                 def_path_str: ccx.tcx.def_path_str_with_substs(callee, substs),\n                 kind: ccx.const_kind(),\n@@ -351,7 +346,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallUnstable {\n         let mut err = ccx\n             .tcx\n             .sess\n-            .create_err(UnstableConstFn { span, def_path: ccx.tcx.def_path_str(def_id) });\n+            .create_err(errors::UnstableConstFn { span, def_path: ccx.tcx.def_path_str(def_id) });\n \n         if ccx.is_const_stable_const_fn() {\n             err.help(\"const-stable functions can only call other const-stable functions\");\n@@ -387,11 +382,11 @@ impl<'tcx> NonConstOp<'tcx> for Generator {\n         let msg = format!(\"{}s are not allowed in {}s\", self.0.descr(), ccx.const_kind());\n         if let hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Block) = self.0 {\n             ccx.tcx.sess.create_feature_err(\n-                UnallowedOpInConstContext { span, msg },\n+                errors::UnallowedOpInConstContext { span, msg },\n                 sym::const_async_blocks,\n             )\n         } else {\n-            ccx.tcx.sess.create_err(UnallowedOpInConstContext { span, msg })\n+            ccx.tcx.sess.create_err(errors::UnallowedOpInConstContext { span, msg })\n         }\n     }\n }\n@@ -404,7 +399,7 @@ impl<'tcx> NonConstOp<'tcx> for HeapAllocation {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        ccx.tcx.sess.create_err(UnallowedHeapAllocations {\n+        ccx.tcx.sess.create_err(errors::UnallowedHeapAllocations {\n             span,\n             kind: ccx.const_kind(),\n             teach: ccx.tcx.sess.teach(&error_code!(E0010)).then_some(()),\n@@ -420,7 +415,7 @@ impl<'tcx> NonConstOp<'tcx> for InlineAsm {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        ccx.tcx.sess.create_err(UnallowedInlineAsm { span, kind: ccx.const_kind() })\n+        ccx.tcx.sess.create_err(errors::UnallowedInlineAsm { span, kind: ccx.const_kind() })\n     }\n }\n \n@@ -471,7 +466,9 @@ impl<'tcx> NonConstOp<'tcx> for TransientCellBorrow {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        ccx.tcx.sess.create_feature_err(InteriorMutabilityBorrow { span }, sym::const_refs_to_cell)\n+        ccx.tcx\n+            .sess\n+            .create_feature_err(errors::InteriorMutabilityBorrow { span }, sym::const_refs_to_cell)\n     }\n }\n \n@@ -488,14 +485,14 @@ impl<'tcx> NonConstOp<'tcx> for CellBorrow {\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         // FIXME: Maybe a more elegant solution to this if else case\n         if let hir::ConstContext::Static(_) = ccx.const_kind() {\n-            ccx.tcx.sess.create_err(InteriorMutableDataRefer {\n+            ccx.tcx.sess.create_err(errors::InteriorMutableDataRefer {\n                 span,\n                 opt_help: Some(()),\n                 kind: ccx.const_kind(),\n                 teach: ccx.tcx.sess.teach(&error_code!(E0492)).then_some(()),\n             })\n         } else {\n-            ccx.tcx.sess.create_err(InteriorMutableDataRefer {\n+            ccx.tcx.sess.create_err(errors::InteriorMutableDataRefer {\n                 span,\n                 opt_help: None,\n                 kind: ccx.const_kind(),\n@@ -528,12 +525,12 @@ impl<'tcx> NonConstOp<'tcx> for MutBorrow {\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         match self.0 {\n-            hir::BorrowKind::Raw => ccx.tcx.sess.create_err(UnallowedMutableRefsRaw {\n+            hir::BorrowKind::Raw => ccx.tcx.sess.create_err(errors::UnallowedMutableRefsRaw {\n                 span,\n                 kind: ccx.const_kind(),\n                 teach: ccx.tcx.sess.teach(&error_code!(E0764)).then_some(()),\n             }),\n-            hir::BorrowKind::Ref => ccx.tcx.sess.create_err(UnallowedMutableRefs {\n+            hir::BorrowKind::Ref => ccx.tcx.sess.create_err(errors::UnallowedMutableRefs {\n                 span,\n                 kind: ccx.const_kind(),\n                 teach: ccx.tcx.sess.teach(&error_code!(E0764)).then_some(()),\n@@ -557,14 +554,14 @@ impl<'tcx> NonConstOp<'tcx> for TransientMutBorrow {\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let kind = ccx.const_kind();\n         match self.0 {\n-            hir::BorrowKind::Raw => ccx\n-                .tcx\n-                .sess\n-                .create_feature_err(TransientMutBorrowErrRaw { span, kind }, sym::const_mut_refs),\n-            hir::BorrowKind::Ref => ccx\n-                .tcx\n-                .sess\n-                .create_feature_err(TransientMutBorrowErr { span, kind }, sym::const_mut_refs),\n+            hir::BorrowKind::Raw => ccx.tcx.sess.create_feature_err(\n+                errors::TransientMutBorrowErrRaw { span, kind },\n+                sym::const_mut_refs,\n+            ),\n+            hir::BorrowKind::Ref => ccx.tcx.sess.create_feature_err(\n+                errors::TransientMutBorrowErr { span, kind },\n+                sym::const_mut_refs,\n+            ),\n         }\n     }\n }\n@@ -586,9 +583,10 @@ impl<'tcx> NonConstOp<'tcx> for MutDeref {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        ccx.tcx\n-            .sess\n-            .create_feature_err(MutDerefErr { span, kind: ccx.const_kind() }, sym::const_mut_refs)\n+        ccx.tcx.sess.create_feature_err(\n+            errors::MutDerefErr { span, kind: ccx.const_kind() },\n+            sym::const_mut_refs,\n+        )\n     }\n }\n \n@@ -601,7 +599,7 @@ impl<'tcx> NonConstOp<'tcx> for PanicNonStr {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        ccx.tcx.sess.create_err(PanicNonStrErr { span })\n+        ccx.tcx.sess.create_err(errors::PanicNonStrErr { span })\n     }\n }\n \n@@ -652,7 +650,7 @@ impl<'tcx> NonConstOp<'tcx> for RawPtrToIntCast {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        ccx.tcx.sess.create_err(RawPtrToIntErr { span })\n+        ccx.tcx.sess.create_err(errors::RawPtrToIntErr { span })\n     }\n }\n \n@@ -673,7 +671,7 @@ impl<'tcx> NonConstOp<'tcx> for StaticAccess {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        ccx.tcx.sess.create_err(StaticAccessErr {\n+        ccx.tcx.sess.create_err(errors::StaticAccessErr {\n             span,\n             kind: ccx.const_kind(),\n             teach: ccx.tcx.sess.teach(&error_code!(E0013)).then_some(()),\n@@ -690,7 +688,7 @@ impl<'tcx> NonConstOp<'tcx> for ThreadLocalAccess {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        ccx.tcx.sess.create_err(NonConstOpErr { span })\n+        ccx.tcx.sess.create_err(errors::NonConstOpErr { span })\n     }\n }\n "}]}