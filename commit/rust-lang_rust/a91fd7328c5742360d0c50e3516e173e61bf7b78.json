{"sha": "a91fd7328c5742360d0c50e3516e173e61bf7b78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MWZkNzMyOGM1NzQyMzYwZDBjNTBlMzUxNmUxNzNlNjFiZjdiNzg=", "commit": {"author": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-08-29T18:03:18Z"}, "committer": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-10-10T13:19:12Z"}, "message": "Add doc comments", "tree": {"sha": "320181f14a2fd5780445d7ee0a4cc376dced1c72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/320181f14a2fd5780445d7ee0a4cc376dced1c72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a91fd7328c5742360d0c50e3516e173e61bf7b78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a91fd7328c5742360d0c50e3516e173e61bf7b78", "html_url": "https://github.com/rust-lang/rust/commit/a91fd7328c5742360d0c50e3516e173e61bf7b78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a91fd7328c5742360d0c50e3516e173e61bf7b78/comments", "author": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46764d48bb556c0e3c66fe99cf63d536e22c9a0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/46764d48bb556c0e3c66fe99cf63d536e22c9a0d", "html_url": "https://github.com/rust-lang/rust/commit/46764d48bb556c0e3c66fe99cf63d536e22c9a0d"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "bfca7ae4a9b8c2f5c9bbe48d71971810a0089267", "filename": "library/std/src/sys/unix/ext/net/ancillary.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a91fd7328c5742360d0c50e3516e173e61bf7b78/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a91fd7328c5742360d0c50e3516e173e61bf7b78/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs?ref=a91fd7328c5742360d0c50e3516e173e61bf7b78", "patch": "@@ -158,6 +158,7 @@ impl<'a, T> Iterator for AncillaryDataIter<'a, T> {\n     }\n }\n \n+/// Unix credential.\n #[cfg(any(\n     doc,\n     target_os = \"android\",\n@@ -191,42 +192,54 @@ pub struct UCred(libc::ucred);\n     target_env = \"uclibc\",\n ))]\n impl UCred {\n+    /// Create a Unix credential struct.\n+    ///\n+    /// PID, UID and GID is set to 0.\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n     pub fn new() -> UCred {\n         UCred(libc::ucred { pid: 0, uid: 0, gid: 0 })\n     }\n \n+    /// Set the PID.\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n     pub fn set_pid(&mut self, pid: i32) {\n         self.0.pid = pid;\n     }\n \n+    /// Get the current PID.\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n     pub fn get_pid(&self) -> i32 {\n         self.0.pid\n     }\n \n+    /// Set the UID.\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n     pub fn set_uid(&mut self, uid: u32) {\n         self.0.uid = uid;\n     }\n \n+    /// Get the current UID.\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n     pub fn get_uid(&self) -> u32 {\n         self.0.uid\n     }\n \n+    /// Set the GID.\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n     pub fn set_gid(&mut self, gid: u32) {\n         self.0.gid = gid;\n     }\n \n+    /// Get the current GID.\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n     pub fn get_gid(&self) -> u32 {\n         self.0.gid\n     }\n }\n \n+/// This control message contains file descriptors.\n+///\n+/// The level is equal to `SOL_SOCKET` and the type is equal to `SCM_RIGHTS`.\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n pub struct ScmRights<'a>(AncillaryDataIter<'a, RawFd>);\n \n@@ -239,6 +252,9 @@ impl<'a> Iterator for ScmRights<'a> {\n     }\n }\n \n+/// This control message contains unix credentials.\n+///\n+/// The level is equal to `SOL_SOCKET` and the type is equal to `SCM_CREDENTIALS` or `SCM_CREDS`.\n #[cfg(any(\n     doc,\n     target_os = \"android\",\n@@ -279,13 +295,15 @@ impl<'a> Iterator for ScmCredentials<'a> {\n     }\n }\n \n+/// The error type which is returned from parsing the type a control message.\n #[non_exhaustive]\n #[derive(Debug)]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n pub enum AncillaryError {\n     Unknown { cmsg_level: i32, cmsg_type: i32 },\n }\n \n+/// This enum represent one control message of variable type.\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n pub enum AncillaryData<'a> {\n     ScmRights(ScmRights<'a>),\n@@ -372,6 +390,7 @@ impl<'a> AncillaryData<'a> {\n     }\n }\n \n+/// This struct is used to iterate through the control messages.\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n pub struct Messages<'a> {\n     buffer: &'a [u8],\n@@ -474,6 +493,7 @@ impl<'a> SocketAncillary<'a> {\n         self.length\n     }\n \n+    /// Returns the iterator of the control messages.\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n     pub fn messages(&self) -> Messages<'_> {\n         Messages { buffer: &self.buffer[..self.length], current: None }\n@@ -552,7 +572,7 @@ impl<'a> SocketAncillary<'a> {\n     /// The function returns `true` if there was enough space in the buffer.\n     /// If there was not enough space then no credentials was appended.\n     /// Technically, that means this operation adds a control message with the level `SOL_SOCKET`\n-    /// and type `SCM_CREDENTIALS`.\n+    /// and type `SCM_CREDENTIALS` or `SCM_CREDS`.\n     ///\n     #[cfg(any(\n         doc,"}]}