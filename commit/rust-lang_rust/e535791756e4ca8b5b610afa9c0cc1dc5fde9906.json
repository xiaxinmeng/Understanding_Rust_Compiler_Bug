{"sha": "e535791756e4ca8b5b610afa9c0cc1dc5fde9906", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MzU3OTE3NTZlNGNhOGI1YjYxMGFmYTljMGNjMWRjNWZkZTk5MDY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-22T11:06:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-22T11:06:07Z"}, "message": "Merge #9983\n\n9983: internal: remove unreasonable crate dependency r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "dc16cd778e65f916fed990fb62cfcb2bc4dc182a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc16cd778e65f916fed990fb62cfcb2bc4dc182a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e535791756e4ca8b5b610afa9c0cc1dc5fde9906", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhIi+fCRBK7hj4Ov3rIwAAX90IAE2n/IFcmVhCAVwqrkhJnmyH\nMbUN7lv5bgE74oFx74qqfJ603GCxebBgOtbVFZBSex+hmODPl6v2D5ydi8usbm2X\nj0Ev3XYLUPGB2Fy+n/Dl72GC3Ovf33NKdY8ruEg793dnIackpTEZ9pzz21utsG6e\ni4PAwFvFgBWfqTuqnl60M+D8DyOqPl93a5QwplOlukkoeaAYXzq2S3+FmS0Avpi/\n0zU56wZmuJixmLeWO9lAVFKEqsnf/VcwKzX02n8sxvm9d5Pemlg5sG4qgD47UqbX\nxiwAkBlClzjASPnImuHZUReWF26D5EHXJr6oWODsOyFOx1xgM5MTaVWhMne6BnM=\n=1UH4\n-----END PGP SIGNATURE-----\n", "payload": "tree dc16cd778e65f916fed990fb62cfcb2bc4dc182a\nparent 2943d9aa51bf9c6576087cd7499e7bc27ac78b3b\nparent e86388689fc817070bf45f61b5facf715ba37731\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1629630367 +0000\ncommitter GitHub <noreply@github.com> 1629630367 +0000\n\nMerge #9983\n\n9983: internal: remove unreasonable crate dependency r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e535791756e4ca8b5b610afa9c0cc1dc5fde9906", "html_url": "https://github.com/rust-lang/rust/commit/e535791756e4ca8b5b610afa9c0cc1dc5fde9906", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e535791756e4ca8b5b610afa9c0cc1dc5fde9906/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2943d9aa51bf9c6576087cd7499e7bc27ac78b3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2943d9aa51bf9c6576087cd7499e7bc27ac78b3b", "html_url": "https://github.com/rust-lang/rust/commit/2943d9aa51bf9c6576087cd7499e7bc27ac78b3b"}, {"sha": "e86388689fc817070bf45f61b5facf715ba37731", "url": "https://api.github.com/repos/rust-lang/rust/commits/e86388689fc817070bf45f61b5facf715ba37731", "html_url": "https://github.com/rust-lang/rust/commit/e86388689fc817070bf45f61b5facf715ba37731"}], "stats": {"total": 109, "additions": 71, "deletions": 38}, "files": [{"sha": "428846b24686a498f54ee338d5efdfd265ecb652", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e535791756e4ca8b5b610afa9c0cc1dc5fde9906/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e535791756e4ca8b5b610afa9c0cc1dc5fde9906/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e535791756e4ca8b5b610afa9c0cc1dc5fde9906", "patch": "@@ -1120,7 +1120,6 @@ dependencies = [\n name = \"proc_macro_api\"\n version = \"0.0.0\"\n dependencies = [\n- \"base_db\",\n  \"crossbeam-channel\",\n  \"jod-thread\",\n  \"log\","}, {"sha": "a0fd10441f21b767b21dd57c800bf21fe5392612", "filename": "crates/proc_macro_api/Cargo.toml", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e535791756e4ca8b5b610afa9c0cc1dc5fde9906/crates%2Fproc_macro_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e535791756e4ca8b5b610afa9c0cc1dc5fde9906/crates%2Fproc_macro_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2FCargo.toml?ref=e535791756e4ca8b5b610afa9c0cc1dc5fde9906", "patch": "@@ -15,17 +15,16 @@ log = \"0.4.8\"\n crossbeam-channel = \"0.5.0\"\n jod-thread = \"0.1.1\"\n memmap2 = \"0.3.0\"\n-object = { version = \"0.26\", default-features = false, features = [\n-    \"std\",\n-    \"read_core\",\n-    \"elf\",\n-    \"macho\",\n-    \"pe\",\n-] }\n snap = \"1.0\"\n \n paths = { path = \"../paths\", version = \"0.0.0\" }\n tt = { path = \"../tt\", version = \"0.0.0\" }\n-base_db = { path = \"../base_db\", version = \"0.0.0\" }\n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n profile = { path = \"../profile\", version = \"0.0.0\" }\n+# Intentionally *not* depend on anything salsa-related\n+# base_db = { path = \"../base_db\", version = \"0.0.0\" }\n+\n+[dependencies.object]\n+version = \"0.26\"\n+default-features = false\n+features = [ \"std\", \"read_core\", \"elf\", \"macho\", \"pe\" ]"}, {"sha": "bbd26caf76d573123c07ca2d9b1d7895a641724f", "filename": "crates/proc_macro_api/src/lib.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e535791756e4ca8b5b610afa9c0cc1dc5fde9906/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e535791756e4ca8b5b610afa9c0cc1dc5fde9906/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Flib.rs?ref=e535791756e4ca8b5b610afa9c0cc1dc5fde9906", "patch": "@@ -10,7 +10,6 @@ mod process;\n mod rpc;\n mod version;\n \n-use base_db::{Env, ProcMacro};\n use paths::{AbsPath, AbsPathBuf};\n use std::{\n     ffi::OsStr,\n@@ -26,34 +25,44 @@ pub use rpc::{ExpansionResult, ExpansionTask, ListMacrosResult, ListMacrosTask,\n pub use version::{read_dylib_info, RustCInfo};\n \n #[derive(Debug, Clone)]\n-struct ProcMacroProcessExpander {\n+pub struct ProcMacroProcessExpander {\n     process: Arc<Mutex<ProcMacroProcessSrv>>,\n     dylib_path: AbsPathBuf,\n     name: SmolStr,\n+    kind: ProcMacroKind,\n }\n \n impl Eq for ProcMacroProcessExpander {}\n impl PartialEq for ProcMacroProcessExpander {\n     fn eq(&self, other: &Self) -> bool {\n         self.name == other.name\n+            && self.kind == other.kind\n             && self.dylib_path == other.dylib_path\n             && Arc::ptr_eq(&self.process, &other.process)\n     }\n }\n \n-impl base_db::ProcMacroExpander for ProcMacroProcessExpander {\n-    fn expand(\n+impl ProcMacroProcessExpander {\n+    pub fn name(&self) -> &str {\n+        &self.name\n+    }\n+\n+    pub fn kind(&self) -> ProcMacroKind {\n+        self.kind\n+    }\n+\n+    pub fn expand(\n         &self,\n         subtree: &Subtree,\n         attr: Option<&Subtree>,\n-        env: &Env,\n+        env: Vec<(String, String)>,\n     ) -> Result<Subtree, tt::ExpansionError> {\n         let task = ExpansionTask {\n             macro_body: subtree.clone(),\n             macro_name: self.name.to_string(),\n             attributes: attr.cloned(),\n             lib: self.dylib_path.to_path_buf(),\n-            env: env.iter().map(|(k, v)| (k.to_string(), v.to_string())).collect(),\n+            env,\n         };\n \n         let result: ExpansionResult = self\n@@ -86,7 +95,7 @@ impl ProcMacroClient {\n         Ok(ProcMacroClient { process: Arc::new(Mutex::new(process)) })\n     }\n \n-    pub fn by_dylib_path(&self, dylib_path: &AbsPath) -> Vec<ProcMacro> {\n+    pub fn by_dylib_path(&self, dylib_path: &AbsPath) -> Vec<ProcMacroProcessExpander> {\n         let _p = profile::span(\"ProcMacroClient::by_dylib_path\");\n         match version::read_dylib_info(dylib_path) {\n             Ok(info) => {\n@@ -118,20 +127,11 @@ impl ProcMacroClient {\n \n         macros\n             .into_iter()\n-            .map(|(name, kind)| {\n-                let name = SmolStr::new(&name);\n-                let kind = match kind {\n-                    ProcMacroKind::CustomDerive => base_db::ProcMacroKind::CustomDerive,\n-                    ProcMacroKind::FuncLike => base_db::ProcMacroKind::FuncLike,\n-                    ProcMacroKind::Attr => base_db::ProcMacroKind::Attr,\n-                };\n-                let expander = Arc::new(ProcMacroProcessExpander {\n-                    process: self.process.clone(),\n-                    name: name.clone(),\n-                    dylib_path: dylib_path.to_path_buf(),\n-                });\n-\n-                ProcMacro { name, kind, expander }\n+            .map(|(name, kind)| ProcMacroProcessExpander {\n+                process: self.process.clone(),\n+                name: name.into(),\n+                kind,\n+                dylib_path: dylib_path.to_path_buf(),\n             })\n             .collect()\n     }"}, {"sha": "d194879f047313781a4c0a4843d6600e8661b1ea", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e535791756e4ca8b5b610afa9c0cc1dc5fde9906/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e535791756e4ca8b5b610afa9c0cc1dc5fde9906/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=e535791756e4ca8b5b610afa9c0cc1dc5fde9906", "patch": "@@ -52,6 +52,7 @@ vfs = { path = \"../vfs\", version = \"0.0.0\" }\n vfs-notify = { path = \"../vfs-notify\", version = \"0.0.0\" }\n cfg = { path = \"../cfg\", version = \"0.0.0\" }\n toolchain = { path = \"../toolchain\", version = \"0.0.0\" }\n+tt = { path = \"../tt\", version = \"0.0.0\" }\n proc_macro_api = { path = \"../proc_macro_api\", version = \"0.0.0\" }\n \n # This should only be used in CLI"}, {"sha": "65607bbc6fbae7e98e6f5ec25b8583185a264d05", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e535791756e4ca8b5b610afa9c0cc1dc5fde9906/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e535791756e4ca8b5b610afa9c0cc1dc5fde9906/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=e535791756e4ca8b5b610afa9c0cc1dc5fde9906", "patch": "@@ -11,7 +11,7 @@ use proc_macro_api::ProcMacroClient;\n use project_model::{CargoConfig, ProjectManifest, ProjectWorkspace, WorkspaceBuildScripts};\n use vfs::{loader::Handle, AbsPath, AbsPathBuf};\n \n-use crate::reload::{ProjectFolders, SourceRootConfig};\n+use crate::reload::{load_proc_macro, ProjectFolders, SourceRootConfig};\n \n // Note: Since this type is used by external tools that use rust-analyzer as a library\n // what otherwise would be `pub(crate)` has to be `pub` here instead.\n@@ -69,9 +69,7 @@ pub fn load_workspace(\n     });\n \n     let crate_graph = ws.to_crate_graph(\n-        &mut |path: &AbsPath| {\n-            proc_macro_client.as_ref().map(|it| it.by_dylib_path(path)).unwrap_or_default()\n-        },\n+        &mut |path: &AbsPath| load_proc_macro(proc_macro_client.as_ref(), path),\n         &mut |path: &AbsPath| {\n             let contents = loader.load_sync(path);\n             let path = vfs::VfsPath::from(path.to_path_buf());"}, {"sha": "5c23caa6853ee761d350417877e6db7eef23b1ba", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e535791756e4ca8b5b610afa9c0cc1dc5fde9906/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e535791756e4ca8b5b610afa9c0cc1dc5fde9906/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=e535791756e4ca8b5b610afa9c0cc1dc5fde9906", "patch": "@@ -4,7 +4,9 @@ use std::{mem, sync::Arc};\n use flycheck::{FlycheckConfig, FlycheckHandle};\n use hir::db::DefDatabase;\n use ide::Change;\n-use ide_db::base_db::{CrateGraph, SourceRoot, VfsPath};\n+use ide_db::base_db::{\n+    CrateGraph, Env, ProcMacro, ProcMacroExpander, ProcMacroKind, SourceRoot, VfsPath,\n+};\n use proc_macro_api::ProcMacroClient;\n use project_model::{ProjectWorkspace, WorkspaceBuildScripts};\n use vfs::{file_set::FileSetConfig, AbsPath, AbsPathBuf, ChangeKind};\n@@ -398,9 +400,8 @@ impl GlobalState {\n         // Create crate graph from all the workspaces\n         let crate_graph = {\n             let proc_macro_client = self.proc_macro_client.as_ref();\n-            let mut load_proc_macro = move |path: &AbsPath| {\n-                proc_macro_client.map(|it| it.by_dylib_path(path)).unwrap_or_default()\n-            };\n+            let mut load_proc_macro =\n+                move |path: &AbsPath| load_proc_macro(proc_macro_client, path);\n \n             let vfs = &mut self.vfs.write().0;\n             let loader = &mut self.loader;\n@@ -587,3 +588,38 @@ impl SourceRootConfig {\n             .collect()\n     }\n }\n+\n+pub(crate) fn load_proc_macro(client: Option<&ProcMacroClient>, path: &AbsPath) -> Vec<ProcMacro> {\n+    return client\n+        .map(|it| it.by_dylib_path(path))\n+        .unwrap_or_default()\n+        .into_iter()\n+        .map(expander_to_proc_macro)\n+        .collect();\n+\n+    fn expander_to_proc_macro(expander: proc_macro_api::ProcMacroProcessExpander) -> ProcMacro {\n+        let name = expander.name().into();\n+        let kind = match expander.kind() {\n+            proc_macro_api::ProcMacroKind::CustomDerive => ProcMacroKind::CustomDerive,\n+            proc_macro_api::ProcMacroKind::FuncLike => ProcMacroKind::FuncLike,\n+            proc_macro_api::ProcMacroKind::Attr => ProcMacroKind::Attr,\n+        };\n+        let expander = Arc::new(Expander(expander));\n+        ProcMacro { name, kind, expander }\n+    }\n+\n+    #[derive(Debug)]\n+    struct Expander(proc_macro_api::ProcMacroProcessExpander);\n+\n+    impl ProcMacroExpander for Expander {\n+        fn expand(\n+            &self,\n+            subtree: &tt::Subtree,\n+            attrs: Option<&tt::Subtree>,\n+            env: &Env,\n+        ) -> Result<tt::Subtree, tt::ExpansionError> {\n+            let env = env.iter().map(|(k, v)| (k.to_string(), v.to_string())).collect();\n+            self.0.expand(subtree, attrs, env)\n+        }\n+    }\n+}"}]}