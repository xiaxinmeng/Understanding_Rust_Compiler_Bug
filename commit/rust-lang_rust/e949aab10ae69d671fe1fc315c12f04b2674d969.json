{"sha": "e949aab10ae69d671fe1fc315c12f04b2674d969", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NDlhYWIxMGFlNjlkNjcxZmUxZmMzMTVjMTJmMDRiMjY3NGQ5Njk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-25T13:07:48Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-25T13:07:48Z"}, "message": "Remove some rustboot-isms\n\nCloses #464", "tree": {"sha": "35f98cb34dd61f8de721fc750203c5f66341b00f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35f98cb34dd61f8de721fc750203c5f66341b00f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e949aab10ae69d671fe1fc315c12f04b2674d969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e949aab10ae69d671fe1fc315c12f04b2674d969", "html_url": "https://github.com/rust-lang/rust/commit/e949aab10ae69d671fe1fc315c12f04b2674d969", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e949aab10ae69d671fe1fc315c12f04b2674d969/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48013db5c5453a2835711894ff949aab15a067bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/48013db5c5453a2835711894ff949aab15a067bc", "html_url": "https://github.com/rust-lang/rust/commit/48013db5c5453a2835711894ff949aab15a067bc"}], "stats": {"total": 54, "additions": 18, "deletions": 36}, "files": [{"sha": "0aa9fcbeb72893bba61d9162592114c53d0270ec", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e949aab10ae69d671fe1fc315c12f04b2674d969/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e949aab10ae69d671fe1fc315c12f04b2674d969/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=e949aab10ae69d671fe1fc315c12f04b2674d969", "patch": "@@ -585,19 +585,15 @@ fn encode_metadata(&@crate_ctxt cx, &@crate crate) -> str {\n \n     ebmlivec::start_tag(ebml_w, tag_paths);\n     auto paths_index = encode_item_paths(ebml_w, crate);\n-    auto str_writer = write_str;\n-    auto path_hasher = hash_path;\n-    auto paths_buckets = create_index[str](paths_index, path_hasher);\n-    encode_index[str](ebml_w, paths_buckets, str_writer);\n+    auto paths_buckets = create_index(paths_index, hash_path);\n+    encode_index(ebml_w, paths_buckets, write_str);\n     ebmlivec::end_tag(ebml_w);\n     // Encode and index the items.\n \n     ebmlivec::start_tag(ebml_w, tag_items);\n     auto items_index = encode_info_for_items(ecx, ebml_w);\n-    auto int_writer = write_int;\n-    auto item_hasher = hash_node_id;\n-    auto items_buckets = create_index[int](items_index, item_hasher);\n-    encode_index[int](ebml_w, items_buckets, int_writer);\n+    auto items_buckets = create_index(items_index, hash_node_id);\n+    encode_index(ebml_w, items_buckets, write_int);\n     ebmlivec::end_tag(ebml_w);\n     // Pad this, since something (LLVM, presumably) is cutting off the\n     // remaining % 4 bytes_ivec."}, {"sha": "668218a8eea2a254969d34675186e12048a82478", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e949aab10ae69d671fe1fc315c12f04b2674d969/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e949aab10ae69d671fe1fc315c12f04b2674d969/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e949aab10ae69d671fe1fc315c12f04b2674d969", "patch": "@@ -2261,10 +2261,9 @@ fn lazily_emit_tydesc_glue(&@block_ctxt cx, int field,\n                                                  T_glue_fn(*lcx.ccx),\n                                                  \"copy\");\n                         ti.copy_glue = some[ValueRef](glue_fn);\n-                        auto tg = make_copy_glue;\n                         make_generic_glue(lcx, cx.sp, ti.ty, glue_fn,\n-                                          mgghf_single(tg), ti.ty_params,\n-                                          \"take\");\n+                                          mgghf_single(make_copy_glue),\n+                                         ti.ty_params, \"take\");\n                         log #fmt(\"--- lazily_emit_tydesc_glue TAKE %s\",\n                                  ty_to_str(cx.fcx.lcx.ccx.tcx, ti.ty));\n                     }\n@@ -2300,10 +2299,9 @@ fn lazily_emit_tydesc_glue(&@block_ctxt cx, int field,\n                                                  T_glue_fn(*lcx.ccx),\n                                                  \"free\");\n                         ti.free_glue = some[ValueRef](glue_fn);\n-                        auto dg = make_free_glue;\n                         make_generic_glue(lcx, cx.sp, ti.ty, glue_fn,\n-                                          mgghf_single(dg), ti.ty_params,\n-                                          \"free\");\n+                                          mgghf_single(make_free_glue),\n+                                         ti.ty_params, \"free\");\n                         log #fmt(\"--- lazily_emit_tydesc_glue FREE %s\",\n                                  ty_to_str(cx.fcx.lcx.ccx.tcx, ti.ty));\n                     }"}, {"sha": "563263ef672ec249c323093852a7f285d662aff4", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e949aab10ae69d671fe1fc315c12f04b2674d969/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e949aab10ae69d671fe1fc315c12f04b2674d969/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=e949aab10ae69d671fe1fc315c12f04b2674d969", "patch": "@@ -392,9 +392,7 @@ fn mk_rcache() -> creader_cache {\n        bool {\n         ret a._0 == b._0 && a._1 == b._1 && a._2 == b._2;\n     }\n-    auto h = hash_cache_entry;\n-    auto e = eq_cache_entries;\n-    ret map::mk_hashmap[tup(int, uint, uint), t](h, e);\n+    ret map::mk_hashmap(hash_cache_entry, eq_cache_entries);\n }\n \n \n@@ -2618,8 +2616,7 @@ mod unify {\n                             alt (unify_mut(expected_elem.mut,\n                                            actual_elem.mut)) {\n                                 case (none) {\n-                                    auto err = terr_tuple_mutability;\n-                                    ret ures_err(err);\n+                                    ret ures_err(terr_tuple_mutability);\n                                 }\n                                 case (some(?m)) { mut = m; }\n                             }"}, {"sha": "fc1f40c301785779d8e5c02008d3aaa5fc3f8614", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e949aab10ae69d671fe1fc315c12f04b2674d969/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e949aab10ae69d671fe1fc315c12f04b2674d969/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=e949aab10ae69d671fe1fc315c12f04b2674d969", "patch": "@@ -312,8 +312,8 @@ fn parse_ty_obj(&parser p, &mutable uint hi) -> ast::ty_ {\n         }\n         fail;\n     }\n-    auto f = parse_method_sig;\n-    auto meths = parse_seq(token::LBRACE, token::RBRACE, none, f, p);\n+    auto meths = parse_seq(token::LBRACE, token::RBRACE, none,\n+                           parse_method_sig, p);\n     hi = meths.span.hi;\n     ret ast::ty_obj(meths.node);\n }\n@@ -1505,9 +1505,8 @@ fn parse_pat(&parser p) -> @ast::pat {\n                 let (@ast::pat)[] args;\n                 alt (p.peek()) {\n                     case (token::LPAREN) {\n-                        auto f = parse_pat;\n                         auto a = parse_seq(token::LPAREN, token::RPAREN,\n-                                           some(token::COMMA), f, p);\n+                                           some(token::COMMA), parse_pat, p);\n                         args = a.node;\n                         hi = a.span.hi;\n                     }"}, {"sha": "c2c23896343b58c0f91ea2a37da207dc8ff42c45", "filename": "src/lib/io.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e949aab10ae69d671fe1fc315c12f04b2674d969/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e949aab10ae69d671fe1fc315c12f04b2674d969/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=e949aab10ae69d671fe1fc315c12f04b2674d969", "patch": "@@ -156,9 +156,8 @@ obj new_reader(buf_reader rdr) {\n     }\n \n     // FIXME deal with eof?\n-    fn read_be_uint(uint size) -> uint {\n+    fn read_be_uint(uint sz) -> uint {\n         auto val = 0u;\n-        auto sz = size; // FIXME: trans::ml bug workaround\n \n         while (sz > 0u) {\n             sz -= 1u;"}, {"sha": "a1eecb0542eec3e0d8baf34ede910e9e4ccc8479", "filename": "src/lib/ioivec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e949aab10ae69d671fe1fc315c12f04b2674d969/src%2Flib%2Fioivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e949aab10ae69d671fe1fc315c12f04b2674d969/src%2Flib%2Fioivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fioivec.rs?ref=e949aab10ae69d671fe1fc315c12f04b2674d969", "patch": "@@ -157,9 +157,8 @@ obj new_reader(buf_reader rdr) {\n     }\n \n     // FIXME deal with eof?\n-    fn read_be_uint(uint size) -> uint {\n+    fn read_be_uint(uint sz) -> uint {\n         auto val = 0u;\n-        auto sz = size; // FIXME: trans::ml bug workaround\n \n         while (sz > 0u) {\n             sz -= 1u;"}, {"sha": "1e00c26fb6d17d0644b564c558a9d23e85a59af5", "filename": "src/lib/map.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e949aab10ae69d671fe1fc315c12f04b2674d969/src%2Flib%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e949aab10ae69d671fe1fc315c12f04b2674d969/src%2Flib%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmap.rs?ref=e949aab10ae69d671fe1fc315c12f04b2674d969", "patch": "@@ -209,25 +209,19 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n // Hash map constructors for basic types\n \n fn new_str_hash[V]() -> hashmap[str, V] {\n-    let hashfn[str] hasher = str::hash;\n-    let eqfn[str] eqer = str::eq;\n-    ret mk_hashmap[str, V](hasher, eqer);\n+    ret mk_hashmap(str::hash, str::eq);\n }\n \n fn new_int_hash[V]() -> hashmap[int, V] {\n     fn hash_int(&int x) -> uint { ret x as uint; }\n     fn eq_int(&int a, &int b) -> bool { ret a == b; }\n-    auto hasher = hash_int;\n-    auto eqer = eq_int;\n-    ret mk_hashmap[int, V](hasher, eqer);\n+    ret mk_hashmap[int, V](hash_int, eq_int);\n }\n \n fn new_uint_hash[V]() -> hashmap[uint, V] {\n     fn hash_uint(&uint x) -> uint { ret x; }\n     fn eq_uint(&uint a, &uint b) -> bool { ret a == b; }\n-    auto hasher = hash_uint;\n-    auto eqer = eq_uint;\n-    ret mk_hashmap[uint, V](hasher, eqer);\n+    ret mk_hashmap[uint, V](hash_uint, eq_uint);\n }\n \n // Local Variables:"}]}