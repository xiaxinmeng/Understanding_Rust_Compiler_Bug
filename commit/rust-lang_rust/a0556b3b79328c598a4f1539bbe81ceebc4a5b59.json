{"sha": "a0556b3b79328c598a4f1539bbe81ceebc4a5b59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNTU2YjNiNzkzMjhjNTk4YTRmMTUzOWJiZTgxY2VlYmM0YTViNTk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-14T02:42:21Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-27T13:16:25Z"}, "message": "rustc_metadata: use a macro to deduplicate LazyPerDefTables and PerDefTableBuilders.", "tree": {"sha": "1389cd6bdcd8ed7b5273c1628576ad0b3f78e790", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1389cd6bdcd8ed7b5273c1628576ad0b3f78e790"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0556b3b79328c598a4f1539bbe81ceebc4a5b59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0556b3b79328c598a4f1539bbe81ceebc4a5b59", "html_url": "https://github.com/rust-lang/rust/commit/a0556b3b79328c598a4f1539bbe81ceebc4a5b59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0556b3b79328c598a4f1539bbe81ceebc4a5b59/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7444c122e8833e1791a4fa9e39b8853b803abc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7444c122e8833e1791a4fa9e39b8853b803abc0", "html_url": "https://github.com/rust-lang/rust/commit/d7444c122e8833e1791a4fa9e39b8853b803abc0"}], "stats": {"total": 116, "additions": 47, "deletions": 69}, "files": [{"sha": "8074bde61237d546853fb24f021b4dccee115d5e", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 48, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a0556b3b79328c598a4f1539bbe81ceebc4a5b59/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0556b3b79328c598a4f1539bbe81ceebc4a5b59/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=a0556b3b79328c598a4f1539bbe81ceebc4a5b59", "patch": "@@ -1,5 +1,5 @@\n use crate::rmeta::*;\n-use crate::rmeta::table::{FixedSizeEncoding, TableBuilder};\n+use crate::rmeta::table::FixedSizeEncoding;\n \n use rustc::middle::cstore::{LinkagePreference, NativeLibrary,\n                             EncodedMetadata, ForeignModule};\n@@ -8,7 +8,7 @@ use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId, LocalDefId,\n use rustc::hir::{GenericParamKind, AnonConst};\n use rustc::hir::map::definitions::DefPathTable;\n use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::Idx;\n use rustc::middle::dependency_format::Linkage;\n use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel,\n                                       metadata_symbol_name};\n@@ -60,30 +60,6 @@ struct EncodeContext<'tcx> {\n     source_file_cache: Lrc<SourceFile>,\n }\n \n-#[derive(Default)]\n-struct PerDefTableBuilders<'tcx> {\n-    kind: TableBuilder<DefIndex, Lazy<EntryKind<'tcx>>>,\n-    visibility: TableBuilder<DefIndex, Lazy<ty::Visibility>>,\n-    span: TableBuilder<DefIndex, Lazy<Span>>,\n-    attributes: TableBuilder<DefIndex, Lazy<[ast::Attribute]>>,\n-    children: TableBuilder<DefIndex, Lazy<[DefIndex]>>,\n-    stability: TableBuilder<DefIndex, Lazy<attr::Stability>>,\n-    deprecation: TableBuilder<DefIndex, Lazy<attr::Deprecation>>,\n-\n-    ty: TableBuilder<DefIndex, Lazy<Ty<'tcx>>>,\n-    fn_sig: TableBuilder<DefIndex, Lazy<ty::PolyFnSig<'tcx>>>,\n-    impl_trait_ref: TableBuilder<DefIndex, Lazy<ty::TraitRef<'tcx>>>,\n-    inherent_impls: TableBuilder<DefIndex, Lazy<[DefIndex]>>,\n-    variances: TableBuilder<DefIndex, Lazy<[ty::Variance]>>,\n-    generics: TableBuilder<DefIndex, Lazy<ty::Generics>>,\n-    explicit_predicates: TableBuilder<DefIndex, Lazy<ty::GenericPredicates<'tcx>>>,\n-    inferred_outlives: TableBuilder<DefIndex, Lazy<&'tcx [(ty::Predicate<'tcx>, Span)]>>,\n-    super_predicates: TableBuilder<DefIndex, Lazy<ty::GenericPredicates<'tcx>>>,\n-\n-    mir: TableBuilder<DefIndex, Lazy<mir::Body<'tcx>>>,\n-    promoted_mir: TableBuilder<DefIndex, Lazy<IndexVec<mir::Promoted, mir::Body<'tcx>>>>,\n-}\n-\n macro_rules! encoder_methods {\n     ($($name:ident($ty:ty);)*) => {\n         $(fn $name(&mut self, value: $ty) -> Result<(), Self::Error> {\n@@ -509,28 +485,7 @@ impl<'tcx> EncodeContext<'tcx> {\n \n \n         i = self.position();\n-        let per_def = LazyPerDefTables {\n-            kind: self.per_def.kind.encode(&mut self.opaque),\n-            visibility: self.per_def.visibility.encode(&mut self.opaque),\n-            span: self.per_def.span.encode(&mut self.opaque),\n-            attributes: self.per_def.attributes.encode(&mut self.opaque),\n-            children: self.per_def.children.encode(&mut self.opaque),\n-            stability: self.per_def.stability.encode(&mut self.opaque),\n-            deprecation: self.per_def.deprecation.encode(&mut self.opaque),\n-\n-            ty: self.per_def.ty.encode(&mut self.opaque),\n-            fn_sig: self.per_def.fn_sig.encode(&mut self.opaque),\n-            impl_trait_ref: self.per_def.impl_trait_ref.encode(&mut self.opaque),\n-            inherent_impls: self.per_def.inherent_impls.encode(&mut self.opaque),\n-            variances: self.per_def.variances.encode(&mut self.opaque),\n-            generics: self.per_def.generics.encode(&mut self.opaque),\n-            explicit_predicates: self.per_def.explicit_predicates.encode(&mut self.opaque),\n-            inferred_outlives: self.per_def.inferred_outlives.encode(&mut self.opaque),\n-            super_predicates: self.per_def.super_predicates.encode(&mut self.opaque),\n-\n-            mir: self.per_def.mir.encode(&mut self.opaque),\n-            promoted_mir: self.per_def.promoted_mir.encode(&mut self.opaque),\n-        };\n+        let per_def = self.per_def.encode(&mut self.opaque);\n         let per_def_bytes = self.position() - i;\n \n         // Encode the proc macro data"}, {"sha": "1bca2836a3a07c22cd7eb7be5ff5caf5f6a25cc2", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 44, "deletions": 21, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/a0556b3b79328c598a4f1539bbe81ceebc4a5b59/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0556b3b79328c598a4f1539bbe81ceebc4a5b59/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=a0556b3b79328c598a4f1539bbe81ceebc4a5b59", "patch": "@@ -1,5 +1,5 @@\n use decoder::Metadata;\n-use table::Table;\n+use table::{Table, TableBuilder};\n \n use rustc::hir;\n use rustc::hir::def::{self, CtorKind};\n@@ -15,6 +15,7 @@ use rustc_target::spec::{PanicStrategy, TargetTriple};\n use rustc_index::vec::IndexVec;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n+use rustc_serialize::opaque::Encoder;\n use syntax::{ast, attr};\n use syntax::edition::Edition;\n use syntax::symbol::Symbol;\n@@ -230,31 +231,53 @@ crate struct TraitImpls {\n     impls: Lazy<[DefIndex]>,\n }\n \n-#[derive(RustcEncodable, RustcDecodable)]\n-crate struct LazyPerDefTables<'tcx> {\n-    kind: Lazy!(Table<DefIndex, Lazy!(EntryKind<'tcx>)>),\n-    visibility: Lazy!(Table<DefIndex, Lazy<ty::Visibility>>),\n-    span: Lazy!(Table<DefIndex, Lazy<Span>>),\n-    attributes: Lazy!(Table<DefIndex, Lazy<[ast::Attribute]>>),\n-    children: Lazy!(Table<DefIndex, Lazy<[DefIndex]>>),\n-    stability: Lazy!(Table<DefIndex, Lazy<attr::Stability>>),\n-    deprecation: Lazy!(Table<DefIndex, Lazy<attr::Deprecation>>),\n-    ty: Lazy!(Table<DefIndex, Lazy!(Ty<'tcx>)>),\n-    fn_sig: Lazy!(Table<DefIndex, Lazy!(ty::PolyFnSig<'tcx>)>),\n-    impl_trait_ref: Lazy!(Table<DefIndex, Lazy!(ty::TraitRef<'tcx>)>),\n-    inherent_impls: Lazy!(Table<DefIndex, Lazy<[DefIndex]>>),\n-    variances: Lazy!(Table<DefIndex, Lazy<[ty::Variance]>>),\n-    generics: Lazy!(Table<DefIndex, Lazy<ty::Generics>>),\n-    explicit_predicates: Lazy!(Table<DefIndex, Lazy!(ty::GenericPredicates<'tcx>)>),\n+/// Define `LazyPerDefTables` and `PerDefTableBuilders` at the same time.\n+macro_rules! define_per_def_tables {\n+    ($($name:ident: Table<DefIndex, $T:ty>),+ $(,)?) => {\n+        #[derive(RustcEncodable, RustcDecodable)]\n+        crate struct LazyPerDefTables<'tcx> {\n+            $($name: Lazy!(Table<DefIndex, $T>)),+\n+        }\n+\n+        #[derive(Default)]\n+        struct PerDefTableBuilders<'tcx> {\n+            $($name: TableBuilder<DefIndex, $T>),+\n+        }\n+\n+        impl PerDefTableBuilders<'tcx> {\n+            fn encode(&self, buf: &mut Encoder) -> LazyPerDefTables<'tcx> {\n+                LazyPerDefTables {\n+                    $($name: self.$name.encode(buf)),+\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+define_per_def_tables! {\n+    kind: Table<DefIndex, Lazy!(EntryKind<'tcx>)>,\n+    visibility: Table<DefIndex, Lazy<ty::Visibility>>,\n+    span: Table<DefIndex, Lazy<Span>>,\n+    attributes: Table<DefIndex, Lazy<[ast::Attribute]>>,\n+    children: Table<DefIndex, Lazy<[DefIndex]>>,\n+    stability: Table<DefIndex, Lazy<attr::Stability>>,\n+    deprecation: Table<DefIndex, Lazy<attr::Deprecation>>,\n+    ty: Table<DefIndex, Lazy!(Ty<'tcx>)>,\n+    fn_sig: Table<DefIndex, Lazy!(ty::PolyFnSig<'tcx>)>,\n+    impl_trait_ref: Table<DefIndex, Lazy!(ty::TraitRef<'tcx>)>,\n+    inherent_impls: Table<DefIndex, Lazy<[DefIndex]>>,\n+    variances: Table<DefIndex, Lazy<[ty::Variance]>>,\n+    generics: Table<DefIndex, Lazy<ty::Generics>>,\n+    explicit_predicates: Table<DefIndex, Lazy!(ty::GenericPredicates<'tcx>)>,\n     // FIXME(eddyb) this would ideally be `Lazy<[...]>` but `ty::Predicate`\n     // doesn't handle shorthands in its own (de)serialization impls,\n     // as it's an `enum` for which we want to derive (de)serialization,\n     // so the `ty::codec` APIs handle the whole `&'tcx [...]` at once.\n     // Also, as an optimization, a missing entry indicates an empty `&[]`.\n-    inferred_outlives: Lazy!(Table<DefIndex, Lazy!(&'tcx [(ty::Predicate<'tcx>, Span)])>),\n-    super_predicates: Lazy!(Table<DefIndex, Lazy!(ty::GenericPredicates<'tcx>)>),\n-    mir: Lazy!(Table<DefIndex, Lazy!(mir::Body<'tcx>)>),\n-    promoted_mir: Lazy!(Table<DefIndex, Lazy!(IndexVec<mir::Promoted, mir::Body<'tcx>>)>),\n+    inferred_outlives: Table<DefIndex, Lazy!(&'tcx [(ty::Predicate<'tcx>, Span)])>,\n+    super_predicates: Table<DefIndex, Lazy!(ty::GenericPredicates<'tcx>)>,\n+    mir: Table<DefIndex, Lazy!(mir::Body<'tcx>)>,\n+    promoted_mir: Table<DefIndex, Lazy!(IndexVec<mir::Promoted, mir::Body<'tcx>>)>,\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]"}]}