{"sha": "d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZTUxYThmYjI4NjQ0NGE4YzI3NmEwNWExYzNiYTZiYThjYTY1NzY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-12-10T19:47:55Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-12-14T20:23:07Z"}, "message": "Move compile-fail tests with NOTE/HELP annotations to UI", "tree": {"sha": "242ff95d0af269023f4cd5dd1df92fec60ca346d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/242ff95d0af269023f4cd5dd1df92fec60ca346d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "html_url": "https://github.com/rust-lang/rust/commit/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a2ad576c5d4b92bacc3355b14cc7a9bc704c782", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a2ad576c5d4b92bacc3355b14cc7a9bc704c782", "html_url": "https://github.com/rust-lang/rust/commit/3a2ad576c5d4b92bacc3355b14cc7a9bc704c782"}], "stats": {"total": 5828, "additions": 5821, "deletions": 7}, "files": [{"sha": "6b10739bd8e59ef6e6e6398d66148bf2c447d32d", "filename": "src/test/ui/arbitrary-self-types-not-object-safe.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/arbitrary-self-types-not-object-safe.rs"}, {"sha": "a1090fe031eb9d33ce533aeeba66fbccc34b27cc", "filename": "src/test/ui/arbitrary-self-types-not-object-safe.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,19 @@\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:40:33\n+   |\n+40 |     let x = Box::new(5usize) as Box<Foo>;\n+   |                                 ^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |\n+   = note: method `foo` has a non-standard `self` type. Only `&self`, `&mut self`, and `Box<Self>` are currently supported for trait objects\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:40:13\n+   |\n+40 |     let x = Box::new(5usize) as Box<Foo>;\n+   |             ^^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |\n+   = note: method `foo` has a non-standard `self` type. Only `&self`, `&mut self`, and `Box<Self>` are currently supported for trait objects\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<Foo>>` for `std::boxed::Box<usize>`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "f2629fa52ffddc6ff1ff1b8a48159e1e5363f140", "filename": "src/test/ui/asm-out-assign-imm.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-out-assign-imm.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/asm-out-assign-imm.rs"}, {"sha": "642eb36e4cb360c6e7cde07da1215df12b810405", "filename": "src/test/ui/asm-out-assign-imm.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fasm-out-assign-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fasm-out-assign-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-out-assign-imm.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,11 @@\n+error[E0384]: cannot assign twice to immutable variable `x`\n+  --> $DIR/asm-out-assign-imm.rs:29:9\n+   |\n+26 |     x = 1; //~ NOTE first assignment\n+   |     ----- first assignment to `x`\n+...\n+29 |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n+\n+error: aborting due to previous error\n+"}, {"sha": "51681a4bb880b54e176f9095d6d92b98759d8aae", "filename": "src/test/ui/associated-const-impl-wrong-lifetime.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/associated-const-impl-wrong-lifetime.rs"}, {"sha": "7768d734bdb9a81599d81e4bdee6f48a120de042", "filename": "src/test/ui/associated-const-impl-wrong-lifetime.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-lifetime.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,23 @@\n+error[E0308]: mismatched types\n+  --> $DIR/associated-const-impl-wrong-lifetime.rs:19:5\n+   |\n+19 |     const NAME: &'a str = \"unit\";\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `&'static str`\n+              found type `&'a str`\n+note: the lifetime 'a as defined on the impl at 17:1...\n+  --> $DIR/associated-const-impl-wrong-lifetime.rs:17:1\n+   |\n+17 | / impl<'a> Foo for &'a () {\n+18 | | //~^ NOTE the lifetime 'a as defined\n+19 | |     const NAME: &'a str = \"unit\";\n+20 | |     //~^ ERROR mismatched types [E0308]\n+...  |\n+23 | |     //~| NOTE ...does not necessarily outlive the static lifetime\n+24 | | }\n+   | |_^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error: aborting due to previous error\n+"}, {"sha": "e38851ccd6ff6f023790eb22a17e8bb0b974bf70", "filename": "src/test/ui/associated-const-impl-wrong-type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/associated-const-impl-wrong-type.rs"}, {"sha": "6ac734bb775d8779b0b1463daaafcbbbc558513b", "filename": "src/test/ui/associated-const-impl-wrong-type.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const-impl-wrong-type.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,11 @@\n+error[E0326]: implemented const `BAR` has an incompatible type for trait\n+  --> $DIR/associated-const-impl-wrong-type.rs:19:16\n+   |\n+13 |     const BAR: u32; //~ NOTE type in trait\n+   |                --- type in trait\n+...\n+19 |     const BAR: i32 = -1;\n+   |                ^^^ expected u32, found i32\n+\n+error: aborting due to previous error\n+"}, {"sha": "b33bbfd84258fe88828ebf57e503b00ad57ad0bf", "filename": "src/test/ui/associated-type-projection-from-multiple-supertraits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/associated-type-projection-from-multiple-supertraits.rs"}, {"sha": "bc2b8193c85891647944ecd90ab7c2ad5369677d", "filename": "src/test/ui/associated-type-projection-from-multiple-supertraits.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-projection-from-multiple-supertraits.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,44 @@\n+error[E0221]: ambiguous associated type `Color` in bounds of `C`\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:35:32\n+   |\n+15 |     type Color;\n+   |     ----------- ambiguous `Color` from `Vehicle`\n+...\n+24 |     type Color;\n+   |     ----------- ambiguous `Color` from `Box`\n+...\n+35 | fn dent<C:BoxCar>(c: C, color: C::Color) {\n+   |                                ^^^^^^^^ ambiguous associated type `Color`\n+\n+error[E0221]: ambiguous associated type `Color` in bounds of `BoxCar`\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:40:33\n+   |\n+15 |     type Color;\n+   |     ----------- ambiguous `Color` from `Vehicle`\n+...\n+24 |     type Color;\n+   |     ----------- ambiguous `Color` from `Box`\n+...\n+40 | fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n+   |                                 ^^^^^^^^^^^ ambiguous associated type `Color`\n+\n+error[E0191]: the value of the associated type `Color` (from the trait `Vehicle`) must be specified\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:40:26\n+   |\n+40 | fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n+   |                          ^^^^^^^^^^^^^^^^^^^ missing associated type `Color` value\n+\n+error[E0221]: ambiguous associated type `Color` in bounds of `C`\n+  --> $DIR/associated-type-projection-from-multiple-supertraits.rs:47:29\n+   |\n+15 |     type Color;\n+   |     ----------- ambiguous `Color` from `Vehicle`\n+...\n+24 |     type Color;\n+   |     ----------- ambiguous `Color` from `Box`\n+...\n+47 | fn paint<C:BoxCar>(c: C, d: C::Color) {\n+   |                             ^^^^^^^^ ambiguous associated type `Color`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "74a388e726991aedfe631ce756659c2cda6ec1ce", "filename": "src/test/ui/associated-types-ICE-when-projecting-out-of-err.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/associated-types-ICE-when-projecting-out-of-err.rs"}, {"sha": "1a49cc7a283bb938a12d4384e1be25d269ea871a", "filename": "src/test/ui/associated-types-ICE-when-projecting-out-of-err.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0277]: the trait bound `(): Add<A>` is not satisfied\n+  --> $DIR/associated-types-ICE-when-projecting-out-of-err.rs:33:11\n+   |\n+33 |     r = r + a;\n+   |           ^ the trait `Add<A>` is not implemented for `()`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ff886e63dc59ef1aebab668fe16ce51d5edcd29c", "filename": "src/test/ui/associated-types-in-ambiguous-context.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/associated-types-in-ambiguous-context.rs"}, {"sha": "a568d104acdd28379bc90a24f873808947f572da", "filename": "src/test/ui/associated-types-in-ambiguous-context.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-in-ambiguous-context.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,26 @@\n+error[E0223]: ambiguous associated type\n+  --> $DIR/associated-types-in-ambiguous-context.rs:16:36\n+   |\n+16 | fn get<T:Get,U:Get>(x: T, y: U) -> Get::Value {}\n+   |                                    ^^^^^^^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<Type as Get>::Value`\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/associated-types-in-ambiguous-context.rs:29:10\n+   |\n+29 | type X = std::ops::Deref::Target;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<Type as std::ops::Deref>::Target`\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/associated-types-in-ambiguous-context.rs:23:23\n+   |\n+23 |     fn grab(&self) -> Grab::Value;\n+   |                       ^^^^^^^^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<Type as Grab>::Value`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "736aa465aa7327a2db646b2f502c98c2db1d8983", "filename": "src/test/ui/augmented-assignments.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Faugmented-assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Faugmented-assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/augmented-assignments.rs"}, {"sha": "dcc14ea8fdf66b70e0c3ec7958a1adc678d5cba6", "filename": "src/test/ui/augmented-assignments.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,22 @@\n+error[E0596]: cannot borrow immutable local variable `y` as mutable\n+  --> $DIR/augmented-assignments.rs:31:5\n+   |\n+29 |     let y = Int(2);\n+   |         - consider changing this to `mut y`\n+30 |     //~^ consider changing this to `mut y`\n+31 |     y   //~ error: cannot borrow immutable local variable `y` as mutable\n+   |     ^ cannot borrow mutably\n+\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/augmented-assignments.rs:23:5\n+   |\n+23 |     x   //~ error: use of moved value: `x`\n+   |     ^ value used here after move\n+...\n+27 |     x;  //~ value moved here\n+   |     - value moved here\n+   |\n+   = note: move occurs because `x` has type `Int`, which does not implement the `Copy` trait\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "18162c5f756b8ed3644b742c22726d7eebf95973", "filename": "src/test/ui/auxiliary/changing-crates-a1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fchanging-crates-a1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fchanging-crates-a1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fchanging-crates-a1.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/auxiliary/changing-crates-a1.rs"}, {"sha": "28eae023d684b6186682116279b3965266e74323", "filename": "src/test/ui/auxiliary/changing-crates-a2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fchanging-crates-a2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fchanging-crates-a2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fchanging-crates-a2.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/auxiliary/changing-crates-a2.rs"}, {"sha": "7b1190fc085802ce00142236eec74bbbb979b127", "filename": "src/test/ui/auxiliary/changing-crates-b.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fchanging-crates-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fchanging-crates-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fchanging-crates-b.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/auxiliary/changing-crates-b.rs"}, {"sha": "daa123849e4e797d539db3433a7908c97f18887f", "filename": "src/test/ui/auxiliary/coherence_lib.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fcoherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fcoherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fcoherence_lib.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"lib\"]\n+\n+pub trait Remote {\n+    fn foo(&self) { }\n+}\n+\n+pub trait Remote1<T> {\n+    fn foo(&self, t: T) { }\n+}\n+\n+pub trait Remote2<T, U> {\n+    fn foo(&self, t: T, u: U) { }\n+}\n+\n+pub struct Pair<T,U>(T,U);"}, {"sha": "4a302865634224b5f541664e70f1fe5921c17f2e", "filename": "src/test/ui/auxiliary/empty-struct.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fempty-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fempty-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fempty-struct.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct XEmpty1 {}\n+pub struct XEmpty2;\n+pub struct XEmpty6();\n+\n+pub enum XE {\n+    XEmpty3 {},\n+    XEmpty4,\n+    XEmpty5(),\n+}"}, {"sha": "e64e63a2139e9d6f037400d31b49414785ed18af", "filename": "src/test/ui/auxiliary/issue-36708.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fissue-36708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fissue-36708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fissue-36708.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/auxiliary/issue-36708.rs"}, {"sha": "0553b4a49b7aed9fc08ea927a9ea56fd6e041426", "filename": "src/test/ui/auxiliary/lint_output_format.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Flint_output_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Flint_output_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Flint_output_format.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name=\"lint_output_format\"]\n+#![crate_type = \"lib\"]\n+#![feature(staged_api)]\n+#![unstable(feature = \"test_feature\", issue = \"0\")]\n+\n+#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+pub fn foo() -> usize {\n+    20\n+}\n+\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n+pub fn bar() -> usize {\n+    40\n+}\n+\n+#[unstable(feature = \"test_feature\", issue = \"0\")]\n+pub fn baz() -> usize {\n+    30\n+}"}, {"sha": "5fea97da03ee38f5cdf2107610c6d979d8f31338", "filename": "src/test/ui/auxiliary/struct_field_privacy.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fstruct_field_privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fstruct_field_privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fstruct_field_privacy.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct A {\n+    a: isize,\n+    pub b: isize,\n+}\n+\n+pub struct B {\n+    pub a: isize,\n+    b: isize,\n+}"}, {"sha": "31a97f695f06cdbfcf20cd27edf87cb961020bb0", "filename": "src/test/ui/auxiliary/svh-a-base.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-base.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/auxiliary/svh-a-base.rs"}, {"sha": "5339fc8295c6f57f56cfd7820e41cdb3d88be0fc", "filename": "src/test/ui/auxiliary/svh-a-change-lit.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-lit.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/auxiliary/svh-a-change-lit.rs"}, {"sha": "2a5d9446f879ac65f8d8a4dff31c9616e89c7993", "filename": "src/test/ui/auxiliary/svh-a-change-significant-cfg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/auxiliary/svh-a-change-significant-cfg.rs"}, {"sha": "61f2f2803ab1891dc586ab781cea0158d513b8ed", "filename": "src/test/ui/auxiliary/svh-a-change-trait-bound.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-trait-bound.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/auxiliary/svh-a-change-trait-bound.rs"}, {"sha": "270ce95be2bb62d70a0366920373362fb5a8e2ae", "filename": "src/test/ui/auxiliary/svh-a-change-type-arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-arg.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/auxiliary/svh-a-change-type-arg.rs"}, {"sha": "de4cc85a7dc4746bc238bbf344b797eb212de426", "filename": "src/test/ui/auxiliary/svh-a-change-type-ret.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-ret.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/auxiliary/svh-a-change-type-ret.rs"}, {"sha": "62f7986f1c3bd729b67c8f50677d01395f20914e", "filename": "src/test/ui/auxiliary/svh-a-change-type-static.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-a-change-type-static.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/auxiliary/svh-a-change-type-static.rs"}, {"sha": "b8946fdc99553bbfbfa4fdc908e25a16cbd67dd2", "filename": "src/test/ui/auxiliary/svh-b.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-b.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/auxiliary/svh-b.rs"}, {"sha": "6bd3ddab06c72426877cec82686ff2a69112ef3b", "filename": "src/test/ui/auxiliary/svh-uta-base.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-uta-base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-uta-base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-uta-base.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/auxiliary/svh-uta-base.rs"}, {"sha": "e863416817735b1a0de7a2a089aca9aea064ccd0", "filename": "src/test/ui/auxiliary/svh-uta-change-use-trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-uta-change-use-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-uta-change-use-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-uta-change-use-trait.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/auxiliary/svh-uta-change-use-trait.rs"}, {"sha": "eb3da985242be45b8b7ac34a7505b6da878a4c57", "filename": "src/test/ui/auxiliary/svh-utb.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-utb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-utb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fsvh-utb.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/auxiliary/svh-utb.rs"}, {"sha": "060960f0dbc88cd40b16ede1144175c463a0bfdb", "filename": "src/test/ui/auxiliary/two_macros.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Ftwo_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fauxiliary%2Ftwo_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Ftwo_macros.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[macro_export]\n+macro_rules! macro_one { () => (\"one\") }\n+\n+#[macro_export]\n+macro_rules! macro_two { () => (\"two\") }"}, {"sha": "23ca026f541dd0ceeef51add2857946239caba8d", "filename": "src/test/ui/binary-op-on-double-ref.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/binary-op-on-double-ref.rs"}, {"sha": "4a2490bac91ab8b253066bd142037e9d984b1f64", "filename": "src/test/ui/binary-op-on-double-ref.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,11 @@\n+error[E0369]: binary operation `%` cannot be applied to type `&&{integer}`\n+  --> $DIR/binary-op-on-double-ref.rs:14:9\n+   |\n+14 |         x % 2 == 0\n+   |         ^^^^^\n+   |\n+   = note: this is a reference to a type that `%` can be applied to; you need to dereference this variable once for this operation to work\n+   = note: an implementation of `std::ops::Rem` might be missing for `&&{integer}`\n+\n+error: aborting due to previous error\n+"}, {"sha": "af3abe5e0569a98063adcf88653e5be1153d560c", "filename": "src/test/ui/blind-item-item-shadow.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fblind-item-item-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fblind-item-item-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind-item-item-shadow.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/blind-item-item-shadow.rs"}, {"sha": "5eab628245084782e20f6dd3565f1b620faced79", "filename": "src/test/ui/blind-item-item-shadow.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,17 @@\n+error[E0255]: the name `foo` is defined multiple times\n+  --> $DIR/blind-item-item-shadow.rs:13:5\n+   |\n+11 | mod foo { pub mod foo {  } } //~ NOTE previous definition of the module `foo` here\n+   | ---------------------------- previous definition of the module `foo` here\n+12 | \n+13 | use foo::foo;\n+   |     ^^^^^^^^ `foo` reimported here\n+   |\n+   = note: `foo` must be defined only once in the type namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+13 | use foo::foo as Otherfoo;\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a629f76d8b3e917b0b4af361e6472d8319970dc6", "filename": "src/test/ui/bogus-tag.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fbogus-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fbogus-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbogus-tag.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/bogus-tag.rs"}, {"sha": "66e7d628551120fc22df75ef74d07cbd12e9018e", "filename": "src/test/ui/bogus-tag.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fbogus-tag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fbogus-tag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbogus-tag.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,11 @@\n+error[E0599]: no variant named `hsl` found for type `color` in the current scope\n+  --> $DIR/bogus-tag.rs:19:7\n+   |\n+12 | enum color { rgb(isize, isize, isize), rgba(isize, isize, isize, isize), }\n+   | ---------- variant `hsl` not found here\n+...\n+19 |       color::hsl(h, s, l) => { println!(\"hsl\"); }\n+   |       ^^^^^^^^^^^^^^^^^^^ variant not found in `color`\n+\n+error: aborting due to previous error\n+"}, {"sha": "d09cb73d6702a5536863185b88da86dced16ac73", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/borrowck/borrowck-box-insensitivity.rs"}, {"sha": "120a3f9c3abd11e18755da22577a4b3a6c234ce6", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.stderr", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,170 @@\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-box-insensitivity.rs:37:9\n+   |\n+35 |     let _x = a.x;\n+   |         -- value moved here\n+36 |     //~^ value moved here\n+37 |     let _y = a.y; //~ ERROR use of moved\n+   |         ^^ value used here after move\n+   |\n+   = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-box-insensitivity.rs:46:9\n+   |\n+44 |     let _x = a.x;\n+   |         -- value moved here\n+45 |     //~^ value moved here\n+46 |     let _y = a.y; //~ ERROR use of moved\n+   |         ^^ value used here after move\n+   |\n+   = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-box-insensitivity.rs:55:15\n+   |\n+53 |     let _x = a.x;\n+   |         -- value moved here\n+54 |     //~^ value moved here\n+55 |     let _y = &a.y; //~ ERROR use of moved\n+   |               ^^^ value used here after move\n+   |\n+   = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+\n+error[E0505]: cannot move out of `a.y` because it is borrowed\n+  --> $DIR/borrowck-box-insensitivity.rs:64:9\n+   |\n+62 |     let _x = &a.x;\n+   |               --- borrow of `a.x` occurs here\n+63 |     //~^ NOTE borrow of `a.x` occurs here\n+64 |     let _y = a.y;\n+   |         ^^ move out of `a.y` occurs here\n+\n+error[E0503]: cannot use `a.y` because it was mutably borrowed\n+  --> $DIR/borrowck-box-insensitivity.rs:73:9\n+   |\n+71 |     let _x = &mut a.x;\n+   |                   --- borrow of `a.x` occurs here\n+72 |     //~^ NOTE borrow of `a.x` occurs here\n+73 |     let _y = a.y; //~ ERROR cannot use\n+   |         ^^ use of borrowed `a.x`\n+\n+error[E0505]: cannot move out of `a.y` because it is borrowed\n+  --> $DIR/borrowck-box-insensitivity.rs:81:9\n+   |\n+79 |     let _x = &mut a.x;\n+   |                   --- borrow of `a.x` occurs here\n+80 |     //~^ NOTE borrow of `a.x` occurs here\n+81 |     let _y = a.y;\n+   |         ^^ move out of `a.y` occurs here\n+\n+error[E0502]: cannot borrow `a` (via `a.y`) as immutable because `a` is also borrowed as mutable (via `a.x`)\n+  --> $DIR/borrowck-box-insensitivity.rs:90:15\n+   |\n+88 |     let _x = &mut a.x;\n+   |                   --- mutable borrow occurs here (via `a.x`)\n+89 |     //~^ NOTE mutable borrow occurs here (via `a.x`)\n+90 |     let _y = &a.y; //~ ERROR cannot borrow\n+   |               ^^^ immutable borrow occurs here (via `a.y`)\n+91 |     //~^ immutable borrow occurs here (via `a.y`)\n+92 | }\n+   | - mutable borrow ends here\n+\n+error[E0502]: cannot borrow `a` (via `a.y`) as mutable because `a` is also borrowed as immutable (via `a.x`)\n+   --> $DIR/borrowck-box-insensitivity.rs:99:19\n+    |\n+97  |     let _x = &a.x;\n+    |               --- immutable borrow occurs here (via `a.x`)\n+98  |     //~^ NOTE immutable borrow occurs here (via `a.x`)\n+99  |     let _y = &mut a.y; //~ ERROR cannot borrow\n+    |                   ^^^ mutable borrow occurs here (via `a.y`)\n+100 |     //~^ mutable borrow occurs here (via `a.y`)\n+101 | }\n+    | - immutable borrow ends here\n+\n+error[E0382]: use of collaterally moved value: `a.y`\n+   --> $DIR/borrowck-box-insensitivity.rs:108:9\n+    |\n+106 |     let _x = a.x.x;\n+    |         -- value moved here\n+107 |     //~^ value moved here\n+108 |     let _y = a.y; //~ ERROR use of collaterally moved\n+    |         ^^ value used here after move\n+    |\n+    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of collaterally moved value: `a.y`\n+   --> $DIR/borrowck-box-insensitivity.rs:117:9\n+    |\n+115 |     let _x = a.x.x;\n+    |         -- value moved here\n+116 |     //~^ value moved here\n+117 |     let _y = a.y; //~ ERROR use of collaterally moved\n+    |         ^^ value used here after move\n+    |\n+    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of collaterally moved value: `a.y`\n+   --> $DIR/borrowck-box-insensitivity.rs:126:15\n+    |\n+124 |     let _x = a.x.x;\n+    |         -- value moved here\n+125 |     //~^ value moved here\n+126 |     let _y = &a.y; //~ ERROR use of collaterally moved\n+    |               ^^^ value used here after move\n+    |\n+    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+\n+error[E0505]: cannot move out of `a.y` because it is borrowed\n+   --> $DIR/borrowck-box-insensitivity.rs:135:9\n+    |\n+133 |     let _x = &a.x.x;\n+    |               ----- borrow of `a.x.x` occurs here\n+134 |     //~^ borrow of `a.x.x` occurs here\n+135 |     let _y = a.y;\n+    |         ^^ move out of `a.y` occurs here\n+\n+error[E0503]: cannot use `a.y` because it was mutably borrowed\n+   --> $DIR/borrowck-box-insensitivity.rs:144:9\n+    |\n+142 |     let _x = &mut a.x.x;\n+    |                   ----- borrow of `a.x.x` occurs here\n+143 |     //~^ NOTE borrow of `a.x.x` occurs here\n+144 |     let _y = a.y; //~ ERROR cannot use\n+    |         ^^ use of borrowed `a.x.x`\n+\n+error[E0505]: cannot move out of `a.y` because it is borrowed\n+   --> $DIR/borrowck-box-insensitivity.rs:152:9\n+    |\n+150 |     let _x = &mut a.x.x;\n+    |                   ----- borrow of `a.x.x` occurs here\n+151 |     //~^ NOTE borrow of `a.x.x` occurs here\n+152 |     let _y = a.y;\n+    |         ^^ move out of `a.y` occurs here\n+\n+error[E0502]: cannot borrow `a.y` as immutable because `a.x.x` is also borrowed as mutable\n+   --> $DIR/borrowck-box-insensitivity.rs:161:15\n+    |\n+159 |     let _x = &mut a.x.x;\n+    |                   ----- mutable borrow occurs here\n+160 |     //~^ mutable borrow occurs here\n+161 |     let _y = &a.y; //~ ERROR cannot borrow\n+    |               ^^^ immutable borrow occurs here\n+162 |     //~^ immutable borrow occurs here\n+163 | }\n+    | - mutable borrow ends here\n+\n+error[E0502]: cannot borrow `a.y` as mutable because `a.x.x` is also borrowed as immutable\n+   --> $DIR/borrowck-box-insensitivity.rs:170:19\n+    |\n+168 |     let _x = &a.x.x;\n+    |               ----- immutable borrow occurs here\n+169 |     //~^ immutable borrow occurs here\n+170 |     let _y = &mut a.y; //~ ERROR cannot borrow\n+    |                   ^^^ mutable borrow occurs here\n+171 |     //~^ mutable borrow occurs here\n+172 | }\n+    | - immutable borrow ends here\n+\n+error: aborting due to 16 previous errors\n+"}, {"sha": "ec330247f238b07c77a7f6a6b955dcaced8651b0", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/borrowck/borrowck-escaping-closure-error-1.rs"}, {"sha": "cc0bd15c489ea146791276969c46159d04943088", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-1.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,14 @@\n+error[E0373]: closure may outlive the current function, but it borrows `books`, which is owned by the current function\n+  --> $DIR/borrowck-escaping-closure-error-1.rs:23:11\n+   |\n+23 |     spawn(|| books.push(4));\n+   |           ^^ ----- `books` is borrowed here\n+   |           |\n+   |           may outlive borrowed value `books`\n+help: to force the closure to take ownership of `books` (and any other referenced variables), use the `move` keyword\n+   |\n+23 |     spawn(move || books.push(4));\n+   |           ^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "81685c32f2f29b6285b5fdadd05532746cc4c5b0", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/borrowck/borrowck-escaping-closure-error-2.rs"}, {"sha": "f8963c175c8ab10cf50c18e10ab84a6bd57c8a01", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,14 @@\n+error[E0373]: closure may outlive the current function, but it borrows `books`, which is owned by the current function\n+  --> $DIR/borrowck-escaping-closure-error-2.rs:21:14\n+   |\n+21 |     Box::new(|| books.push(4))\n+   |              ^^ ----- `books` is borrowed here\n+   |              |\n+   |              may outlive borrowed value `books`\n+help: to force the closure to take ownership of `books` (and any other referenced variables), use the `move` keyword\n+   |\n+21 |     Box::new(move || books.push(4))\n+   |              ^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "5d9c9d0bd461516d42c3de0cded3bc2eeeeb9dc2", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/borrowck/borrowck-move-error-with-note.rs"}, {"sha": "2742899e78a0e69d8c971e575c48d9f75486676f", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,36 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-move-error-with-note.rs:21:11\n+   |\n+21 |     match *f {             //~ ERROR cannot move out of\n+   |           ^^ cannot move out of borrowed content\n+22 |                            //~| cannot move out\n+23 |         Foo::Foo1(num1,         //~ NOTE to prevent move\n+   |                   ---- hint: to prevent move, use `ref num1` or `ref mut num1`\n+24 |                   num2) => (),  //~ NOTE and here\n+   |                   ---- ...and here (use `ref num2` or `ref mut num2`)\n+25 |         Foo::Foo2(num) => (),   //~ NOTE and here\n+   |                   --- ...and here (use `ref num` or `ref mut num`)\n+\n+error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n+  --> $DIR/borrowck-move-error-with-note.rs:40:9\n+   |\n+40 | /         S {         //~ ERROR cannot move out of type `S`, which implements the `Drop` trait\n+41 | |         //~| cannot move out of here\n+42 | |             f: _s,  //~ NOTE to prevent move\n+   | |                -- hint: to prevent move, use `ref _s` or `ref mut _s`\n+43 | |             g: _t   //~ NOTE and here\n+   | |                -- ...and here (use `ref _t` or `ref mut _t`)\n+44 | |         } => {}\n+   | |_________^ cannot move out of here\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-move-error-with-note.rs:57:11\n+   |\n+57 |     match a.a {           //~ ERROR cannot move out of\n+   |           ^ cannot move out of borrowed content\n+58 |                           //~| cannot move out\n+59 |         n => {            //~ NOTE to prevent move\n+   |         - hint: to prevent move, use `ref n` or `ref mut n`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "311208f07b88de8904d215c7a09f6cbee92d07ae", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/borrowck/borrowck-move-out-of-vec-tail.rs"}, {"sha": "f99bbb20ccdf15a66507d345900a3c2bdfb733e9", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,17 @@\n+error[E0508]: cannot move out of type `[Foo]`, a non-copy slice\n+  --> $DIR/borrowck-move-out-of-vec-tail.rs:30:18\n+   |\n+30 |                   &[Foo { string: a },\n+   |                    ^              - hint: to prevent move, use `ref a` or `ref mut a`\n+   |  __________________|\n+   | |\n+31 | |                 //~^ ERROR cannot move out of type `[Foo]`\n+32 | |                 //~| cannot move out\n+33 | |                 //~| to prevent move\n+34 | |                   Foo { string: b }] => {\n+   | |_________________________________-__^ cannot move out of here\n+   |                                   |\n+   |                                   ...and here (use `ref b` or `ref mut b`)\n+\n+error: aborting due to previous error\n+"}, {"sha": "3ca8cc431e0983ce8f5a9365420ae7b3f7d45f02", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/borrowck/borrowck-report-with-custom-diagnostic.rs"}, {"sha": "107cd38adfeb822767ba27de3f1bfaf5bad3ed79", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,38 @@\n+error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-report-with-custom-diagnostic.rs:17:14\n+   |\n+15 |     let y = &mut x;\n+   |                  - mutable borrow occurs here\n+16 |     //~^ mutable borrow occurs here\n+17 |     let z = &x; //~ ERROR cannot borrow\n+   |              ^ immutable borrow occurs here\n+18 |     //~^ immutable borrow occurs here\n+19 | }\n+   | - mutable borrow ends here\n+\n+error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-report-with-custom-diagnostic.rs:29:26\n+   |\n+27 |             let y = &x;\n+   |                      - immutable borrow occurs here\n+28 |             //~^ immutable borrow occurs here\n+29 |             let z = &mut x; //~ ERROR cannot borrow\n+   |                          ^ mutable borrow occurs here\n+30 |             //~^ mutable borrow occurs here\n+31 |         }\n+   |         - immutable borrow ends here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-report-with-custom-diagnostic.rs:43:22\n+   |\n+41 |         let y = &mut x;\n+   |                      - first mutable borrow occurs here\n+42 |         //~^ first mutable borrow occurs here\n+43 |         let z = &mut x; //~ ERROR cannot borrow\n+   |                      ^ second mutable borrow occurs here\n+44 |         //~^ second mutable borrow occurs here\n+45 |     };\n+   |     - first borrow ends here\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "98bb6b14b945c37fa9c6d8614fc0d6033b0af985", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/borrowck/borrowck-vec-pattern-nesting.rs"}, {"sha": "6b099d28fb101414621fa2eb0ae05fd7559a4118", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,82 @@\n+error[E0506]: cannot assign to `vec[..]` because it is borrowed\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:21:13\n+   |\n+19 |         [box ref _a, _, _] => {\n+   |              ------ borrow of `vec[..]` occurs here\n+20 |         //~^ borrow of `vec[..]` occurs here\n+21 |             vec[0] = box 4; //~ ERROR cannot assign\n+   |             ^^^^^^^^^^^^^^ assignment to borrowed `vec[..]` occurs here\n+\n+error[E0506]: cannot assign to `vec[..]` because it is borrowed\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:33:13\n+   |\n+31 |         &mut [ref _b..] => {\n+   |               ------ borrow of `vec[..]` occurs here\n+32 |         //~^ borrow of `vec[..]` occurs here\n+33 |             vec[0] = box 4; //~ ERROR cannot assign\n+   |             ^^^^^^^^^^^^^^ assignment to borrowed `vec[..]` occurs here\n+\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:43:14\n+   |\n+43 |           &mut [_a, //~ ERROR cannot move out\n+   |                ^-- hint: to prevent move, use `ref _a` or `ref mut _a`\n+   |  ______________|\n+   | |\n+44 | |             //~| cannot move out\n+45 | |             //~| to prevent move\n+46 | |             ..\n+47 | |         ] => {\n+   | |_________^ cannot move out of here\n+\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:56:13\n+   |\n+56 |     let a = vec[0]; //~ ERROR cannot move out\n+   |             ^^^^^^\n+   |             |\n+   |             cannot move out of here\n+   |             help: consider using a reference instead: `&vec[0]`\n+\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:64:14\n+   |\n+64 |           &mut [ //~ ERROR cannot move out\n+   |  ______________^\n+65 | |         //~^ cannot move out\n+66 | |          _b] => {} //~ NOTE to prevent move\n+   | |__________--^ cannot move out of here\n+   |            |\n+   |            hint: to prevent move, use `ref _b` or `ref mut _b`\n+\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:69:13\n+   |\n+69 |     let a = vec[0]; //~ ERROR cannot move out\n+   |             ^^^^^^\n+   |             |\n+   |             cannot move out of here\n+   |             help: consider using a reference instead: `&vec[0]`\n+\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:77:14\n+   |\n+77 |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n+   |              ^--^^--^^--^\n+   |              ||   |   |\n+   |              ||   |   ...and here (use `ref _c` or `ref mut _c`)\n+   |              ||   ...and here (use `ref _b` or `ref mut _b`)\n+   |              |hint: to prevent move, use `ref _a` or `ref mut _a`\n+   |              cannot move out of here\n+\n+error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:84:13\n+   |\n+84 |     let a = vec[0]; //~ ERROR cannot move out\n+   |             ^^^^^^\n+   |             |\n+   |             cannot move out of here\n+   |             help: consider using a reference instead: `&vec[0]`\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "af42d5c275c75a49055a0339bd40323ff20ee50e", "filename": "src/test/ui/cast-as-bool.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcast-as-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcast-as-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-as-bool.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/cast-as-bool.rs"}, {"sha": "346ebf07fc3f5d773e895dd5c11e87c893834804", "filename": "src/test/ui/cast-as-bool.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcast-as-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcast-as-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-as-bool.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,10 @@\n+error[E0054]: cannot cast as `bool`\n+  --> $DIR/cast-as-bool.rs:12:13\n+   |\n+12 |     let u = 5 as bool;\n+   |             ^^^^^^^^^ unsupported cast\n+   |\n+   = help: compare with zero instead\n+\n+error: aborting due to previous error\n+"}, {"sha": "1598a9aa1fc4146a78fe16961e364dd53e085600", "filename": "src/test/ui/cast-rfc0401-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcast-rfc0401-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcast-rfc0401-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-rfc0401-2.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/cast-rfc0401-2.rs"}, {"sha": "1febe6a618fdeac46672b2c12ead33a20eaa7f72", "filename": "src/test/ui/cast-rfc0401-2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcast-rfc0401-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcast-rfc0401-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-rfc0401-2.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,10 @@\n+error[E0054]: cannot cast as `bool`\n+  --> $DIR/cast-rfc0401-2.rs:16:13\n+   |\n+16 |     let _ = 3 as bool;\n+   |             ^^^^^^^^^ unsupported cast\n+   |\n+   = help: compare with zero instead\n+\n+error: aborting due to previous error\n+"}, {"sha": "89310706b52ed2a93e6f4fd8617fa2769eaf4ac2", "filename": "src/test/ui/changing-crates.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fchanging-crates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fchanging-crates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchanging-crates.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/changing-crates.rs"}, {"sha": "e6c054183cbf4fa46fc2be1395d834f95231dbd7", "filename": "src/test/ui/changing-crates.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fchanging-crates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fchanging-crates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchanging-crates.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,13 @@\n+error[E0460]: found possibly newer version of crate `a` which `b` depends on\n+  --> $DIR/changing-crates.rs:19:1\n+   |\n+19 | extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n+   | ^^^^^^^^^^^^^^^\n+   |\n+   = note: perhaps that crate needs to be recompiled?\n+   = note: the following crate versions were found:\n+           crate `a`: /?/C:/msys64/home/we/rust/build/x86_64-pc-windows-gnu/test/ui/changing-crates.stage1-x86_64-pc-windows-gnu.aux/a.dll\n+           crate `b`: /?/C:/msys64/home/we/rust/build/x86_64-pc-windows-gnu/test/ui/changing-crates.stage1-x86_64-pc-windows-gnu.aux/b.dll\n+\n+error: aborting due to previous error\n+"}, {"sha": "56d2455ca2126033e1bf305a7acc2731fce693af", "filename": "src/test/ui/coherence-error-suppression.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-error-suppression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-error-suppression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-error-suppression.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/coherence-error-suppression.rs"}, {"sha": "57b746f19e856798ca488ae124d8474e7472597f", "filename": "src/test/ui/coherence-error-suppression.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-error-suppression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-error-suppression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-error-suppression.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0412]: cannot find type `DoesNotExist` in this scope\n+  --> $DIR/coherence-error-suppression.rs:19:14\n+   |\n+19 | impl Foo for DoesNotExist {} //~ ERROR cannot find type `DoesNotExist` in this scope\n+   |              ^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+"}, {"sha": "fe121a3bc48ffbaac5a6f07e5b7eedbed60f4bb3", "filename": "src/test/ui/coherence-impls-copy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-impls-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-impls-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-impls-copy.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/coherence-impls-copy.rs"}, {"sha": "977e9ce260f754507843009c2928abf0d4f3e325", "filename": "src/test/ui/coherence-impls-copy.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,59 @@\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/coherence-impls-copy.rs:29:15\n+   |\n+29 | impl Copy for &'static mut MyType {}\n+   |               ^^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/coherence-impls-copy.rs:34:15\n+   |\n+34 | impl Copy for (MyType, MyType) {}\n+   |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/coherence-impls-copy.rs:42:15\n+   |\n+42 | impl Copy for &'static NotSync {}\n+   |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/coherence-impls-copy.rs:46:15\n+   |\n+46 | impl Copy for [MyType] {}\n+   |               ^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/coherence-impls-copy.rs:54:15\n+   |\n+54 | impl Copy for &'static [NotSync] {}\n+   |               ^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-copy.rs:34:1\n+   |\n+34 | impl Copy for (MyType, MyType) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-copy.rs:46:1\n+   |\n+46 | impl Copy for [MyType] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-copy.rs:54:1\n+   |\n+54 | impl Copy for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "66068b535556cafd9a86e130d6e40e18dc21fbdd", "filename": "src/test/ui/coherence-overlap-downstream-inherent.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/coherence-overlap-downstream-inherent.rs"}, {"sha": "23287e2f578bd0b37ad9e93008a21ec3b907988e", "filename": "src/test/ui/coherence-overlap-downstream-inherent.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,22 @@\n+error[E0592]: duplicate definitions with name `dummy`\n+  --> $DIR/coherence-overlap-downstream-inherent.rs:17:26\n+   |\n+17 | impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n+   |                          ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n+...\n+20 | impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n+   |                          ------------------- other definition for `dummy`\n+\n+error[E0592]: duplicate definitions with name `f`\n+  --> $DIR/coherence-overlap-downstream-inherent.rs:25:38\n+   |\n+25 | impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n+   |                                      ^^^^^^^^^^^^^^ duplicate definitions for `f`\n+...\n+29 | impl<X> A<i32, X> { fn f(&self) {} }\n+   |                     -------------- other definition for `f`\n+   |\n+   = note: downstream crates may implement trait `Bar<_>` for type `i32`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1df02737dec58282f628cbe95d9921f6a1f7c703", "filename": "src/test/ui/coherence-overlap-downstream.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/coherence-overlap-downstream.rs"}, {"sha": "2b129644e84d5fd32928fa669cb0bc4415152097", "filename": "src/test/ui/coherence-overlap-downstream.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,22 @@\n+error[E0119]: conflicting implementations of trait `Sweet`:\n+  --> $DIR/coherence-overlap-downstream.rs:19:1\n+   |\n+17 | impl<T:Sugar> Sweet for T { }\n+   | ----------------------------- first implementation here\n+18 | //~^ NOTE first implementation here\n+19 | impl<T:Fruit> Sweet for T { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error[E0119]: conflicting implementations of trait `Foo<_>` for type `i32`:\n+  --> $DIR/coherence-overlap-downstream.rs:27:1\n+   |\n+25 | impl<X, T> Foo<X> for T where T: Bar<X> {}\n+   | ------------------------------------------ first implementation here\n+26 | //~^ NOTE first implementation here\n+27 | impl<X> Foo<X> for i32 {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n+   |\n+   = note: downstream crates may implement trait `Bar<_>` for type `i32`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "355af60710a9bab90adcd28673d626d366632102", "filename": "src/test/ui/coherence-overlap-issue-23516-inherent.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/coherence-overlap-issue-23516-inherent.rs"}, {"sha": "265de9304898adcae4b93fb4090970d4891fb534", "filename": "src/test/ui/coherence-overlap-issue-23516-inherent.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,13 @@\n+error[E0592]: duplicate definitions with name `dummy`\n+  --> $DIR/coherence-overlap-issue-23516-inherent.rs:19:25\n+   |\n+19 | impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n+   |                         ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n+...\n+23 | impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n+   |                              ------------------- other definition for `dummy`\n+   |\n+   = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ffef5bf10871a09b33c4db27a16e492159a0c794", "filename": "src/test/ui/coherence-overlap-issue-23516.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/coherence-overlap-issue-23516.rs"}, {"sha": "ac3293b5f3fcfeaaeb128d77279edec98f5674c7", "filename": "src/test/ui/coherence-overlap-issue-23516.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,13 @@\n+error[E0119]: conflicting implementations of trait `Sweet` for type `std::boxed::Box<_>`:\n+  --> $DIR/coherence-overlap-issue-23516.rs:19:1\n+   |\n+17 | impl<T:Sugar> Sweet for T { }\n+   | ----------------------------- first implementation here\n+18 | //~^ NOTE first implementation here\n+19 | impl<U:Sugar> Sweet for Box<U> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::boxed::Box<_>`\n+   |\n+   = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "1d0c63110cecd41a3d9f515ec73a4817a07ba610", "filename": "src/test/ui/coherence-overlap-upstream-inherent.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/coherence-overlap-upstream-inherent.rs"}, {"sha": "547e1d7646178a1334d24c23ae416f8dc673d815", "filename": "src/test/ui/coherence-overlap-upstream-inherent.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,13 @@\n+error[E0592]: duplicate definitions with name `dummy`\n+  --> $DIR/coherence-overlap-upstream-inherent.rs:21:32\n+   |\n+21 | impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n+   |                                ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n+...\n+25 | impl A<i16> { fn dummy(&self) { } }\n+   |               ------------------- other definition for `dummy`\n+   |\n+   = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n+\n+error: aborting due to previous error\n+"}, {"sha": "e978143a067c547f3aa6a0a0a09d88fc770198f6", "filename": "src/test/ui/coherence-overlap-upstream.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/coherence-overlap-upstream.rs"}, {"sha": "ab0daf322c34375790ddfdf8fef35befa27b5fa5", "filename": "src/test/ui/coherence-overlap-upstream.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,13 @@\n+error[E0119]: conflicting implementations of trait `Foo` for type `i16`:\n+  --> $DIR/coherence-overlap-upstream.rs:23:1\n+   |\n+21 | impl<T> Foo for T where T: Remote {}\n+   | ------------------------------------ first implementation here\n+22 | //~^ NOTE first implementation here\n+23 | impl Foo for i16 {}\n+   | ^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i16`\n+   |\n+   = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n+\n+error: aborting due to previous error\n+"}, {"sha": "c626801d48c03e8dd066282e5e868e6c1ea33228", "filename": "src/test/ui/const-deref-ptr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-deref-ptr.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/const-deref-ptr.rs"}, {"sha": "60f9a3a37ba99ccc05ca6b5ab487dda54fe181ba", "filename": "src/test/ui/const-deref-ptr.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-deref-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-deref-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-deref-ptr.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0396]: raw pointers cannot be dereferenced in statics\n+  --> $DIR/const-deref-ptr.rs:14:29\n+   |\n+14 |     static C: u64 = unsafe {*(0xdeadbeef as *const u64)}; //~ ERROR E0396\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer in constant\n+\n+error: aborting due to previous error\n+"}, {"sha": "0fd41a17b2c9c0554a141b0695196be76ff9537f", "filename": "src/test/ui/const-eval-overflow-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-eval-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-eval-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-2.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/const-eval-overflow-2.rs"}, {"sha": "51cd0bac868d955e54a972ea708726d394ea224c", "filename": "src/test/ui/const-eval-overflow-2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-eval-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-eval-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-2.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,14 @@\n+error[E0080]: constant evaluation error\n+  --> $DIR/const-eval-overflow-2.rs:21:25\n+   |\n+21 | const NEG_NEG_128: i8 = -NEG_128;\n+   |                         ^^^^^^^^ attempt to negate with overflow\n+   |\n+note: for pattern here\n+  --> $DIR/const-eval-overflow-2.rs:27:9\n+   |\n+27 |         NEG_NEG_128 => println!(\"A\"), //~ NOTE for pattern here\n+   |         ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "2b1c1017b5b00971c4d5bcc0a4cc912185379204", "filename": "src/test/ui/const-eval-overflow-4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-eval-overflow-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-eval-overflow-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-4.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/const-eval-overflow-4.rs"}, {"sha": "d35b9c6c571b4c0cea51414cd26193157e40c849", "filename": "src/test/ui/const-eval-overflow-4.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0080]: constant evaluation error\n+  --> $DIR/const-eval-overflow-4.rs:23:13\n+   |\n+23 |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n+   |             ^^^^^^^^^^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: aborting due to previous error\n+"}, {"sha": "16f89606b01e6da87a20f6781b2c5bfa6991c2d7", "filename": "src/test/ui/const-eval-span.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-eval-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-eval-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-span.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/const-eval-span.rs"}, {"sha": "e64af57a186499a4a07300e7dd01226a04a5013a", "filename": "src/test/ui/const-eval-span.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-eval-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-eval-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-span.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/const-eval-span.rs:19:9\n+   |\n+19 |     V = CONSTANT,\n+   |         ^^^^^^^^ expected isize, found struct `S`\n+   |\n+   = note: expected type `isize`\n+              found type `S`\n+\n+error: aborting due to previous error\n+"}, {"sha": "baf836b4dad1b9915e08fa273cbbc45504b69642", "filename": "src/test/ui/const-fn-error.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/const-fn-error.rs"}, {"sha": "2bf88cf2d037747146ca8e851bda18d49e74a06e", "filename": "src/test/ui/const-fn-error.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,14 @@\n+error[E0080]: constant evaluation error\n+  --> $DIR/const-fn-error.rs:20:5\n+   |\n+20 |     sum //~ ERROR E0080\n+   |     ^^^ non-constant path in constant expression\n+   |\n+note: for constant expression here\n+  --> $DIR/const-fn-error.rs:26:13\n+   |\n+26 |     let a : [i32; f(X)]; //~ NOTE for constant expression here\n+   |             ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "7ea72e23779ec5f40871851c233fc0a401aff4c8", "filename": "src/test/ui/const-fn-mismatch.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-fn-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-fn-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-mismatch.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/const-fn-mismatch.rs"}, {"sha": "4f6a98fb8eb0511dee071c740d1f0a017ce617ca", "filename": "src/test/ui/const-fn-mismatch.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-fn-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-fn-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-mismatch.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0379]: trait fns cannot be declared const\n+  --> $DIR/const-fn-mismatch.rs:23:5\n+   |\n+23 |     const fn f() -> u32 { 22 }\n+   |     ^^^^^ trait fns cannot be const\n+\n+error: aborting due to previous error\n+"}, {"sha": "257d4d5ee99210fbe514ba571378836f23fa51a4", "filename": "src/test/ui/const-fn-not-in-trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/const-fn-not-in-trait.rs"}, {"sha": "118e186cf8a47cecc5420d634d66b59eb6744f00", "filename": "src/test/ui/const-fn-not-in-trait.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-not-in-trait.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,14 @@\n+error[E0379]: trait fns cannot be declared const\n+  --> $DIR/const-fn-not-in-trait.rs:17:5\n+   |\n+17 |     const fn f() -> u32;\n+   |     ^^^^^ trait fns cannot be const\n+\n+error[E0379]: trait fns cannot be declared const\n+  --> $DIR/const-fn-not-in-trait.rs:20:5\n+   |\n+20 |     const fn g() -> u32 { 0 }\n+   |     ^^^^^ trait fns cannot be const\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "eaad9e7e92bab3bbc813aa224a4fdca43358947e", "filename": "src/test/ui/const-len-underflow-separate-spans.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/const-len-underflow-separate-spans.rs"}, {"sha": "1c45d37f489438d64a698408e1dfd5f927a1aa29", "filename": "src/test/ui/const-len-underflow-separate-spans.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,14 @@\n+error[E0080]: constant evaluation error\n+  --> $DIR/const-len-underflow-separate-spans.rs:17:20\n+   |\n+17 | const LEN: usize = ONE - TWO;\n+   |                    ^^^^^^^^^ attempt to subtract with overflow\n+   |\n+note: for constant expression here\n+  --> $DIR/const-len-underflow-separate-spans.rs:22:12\n+   |\n+22 |     let a: [i8; LEN] = unimplemented!();\n+   |            ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "71cac3edbc188beb9542952db26707d3d81c05d0", "filename": "src/test/ui/const-pattern-not-const-evaluable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/const-pattern-not-const-evaluable.rs"}, {"sha": "5a64a756a0a2f390fe8abd2c9796180fcd2a7505", "filename": "src/test/ui/const-pattern-not-const-evaluable.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,14 @@\n+error[E0080]: constant evaluation error\n+  --> $DIR/const-pattern-not-const-evaluable.rs:22:31\n+   |\n+22 | const BOO: Pair<Cake, Cake> = Pair(Marmor, BlackForest);\n+   |                               ^^^^ unimplemented constant expression: tuple struct constructors\n+   |\n+note: for pattern here\n+  --> $DIR/const-pattern-not-const-evaluable.rs:37:9\n+   |\n+37 |         FOO => println!(\"hi\"), //~ NOTE: for pattern here\n+   |         ^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "4b212814ded2985249dcb8b004a70b1c2f462aa9", "filename": "src/test/ui/const-unsized.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-unsized.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/const-unsized.rs"}, {"sha": "ab496b7bce3c824dae79554b790e4b28dd579249", "filename": "src/test/ui/const-unsized.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fconst-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-unsized.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,38 @@\n+error[E0277]: the trait bound `std::fmt::Debug + std::marker::Sync + 'static: std::marker::Sized` is not satisfied\n+  --> $DIR/const-unsized.rs:13:29\n+   |\n+13 | const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^ `std::fmt::Debug + std::marker::Sync + 'static` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + std::marker::Sync + 'static`\n+   = note: constant expressions must have a statically known size\n+\n+error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+  --> $DIR/const-unsized.rs:18:24\n+   |\n+18 | const CONST_FOO: str = *\"foo\";\n+   |                        ^^^^^^ `str` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = note: constant expressions must have a statically known size\n+\n+error[E0277]: the trait bound `std::fmt::Debug + std::marker::Sync + 'static: std::marker::Sized` is not satisfied\n+  --> $DIR/const-unsized.rs:23:31\n+   |\n+23 | static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^ `std::fmt::Debug + std::marker::Sync + 'static` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + std::marker::Sync + 'static`\n+   = note: constant expressions must have a statically known size\n+\n+error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+  --> $DIR/const-unsized.rs:28:26\n+   |\n+28 | static STATIC_BAR: str = *\"bar\";\n+   |                          ^^^^^^ `str` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = note: constant expressions must have a statically known size\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "905d546e99a066984ee7c0f0c471bd78ada191d1", "filename": "src/test/ui/cycle-trait-supertrait-indirect.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/cycle-trait-supertrait-indirect.rs"}, {"sha": "1f4e1016bb1d651d91df324653a42a6c65623405", "filename": "src/test/ui/cycle-trait-supertrait-indirect.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,20 @@\n+error[E0391]: unsupported cyclic reference between types/traits detected\n+  --> $DIR/cycle-trait-supertrait-indirect.rs:22:1\n+   |\n+22 | trait C: B { }\n+   | ^^^^^^^^^^ cyclic reference\n+   |\n+note: the cycle begins when computing the supertraits of `B`...\n+  --> $DIR/cycle-trait-supertrait-indirect.rs:14:1\n+   |\n+14 | trait A: B {\n+   | ^^^^^^^^^^\n+note: ...which then requires computing the supertraits of `C`...\n+  --> $DIR/cycle-trait-supertrait-indirect.rs:18:1\n+   |\n+18 | trait B: C {\n+   | ^^^^^^^^^^\n+   = note: ...which then again requires computing the supertraits of `B`, completing the cycle.\n+\n+error: aborting due to previous error\n+"}, {"sha": "6a9d8db9654ac9d70e6ff0064f836daf732fcc78", "filename": "src/test/ui/derived-errors/issue-31997-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/derived-errors/issue-31997-1.rs"}, {"sha": "732cf9bacbcd1a4eaf19fc5c2eb2c19781035a01", "filename": "src/test/ui/derived-errors/issue-31997-1.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0433]: failed to resolve. Use of undeclared type or module `HashMap`\n+  --> $DIR/issue-31997-1.rs:30:19\n+   |\n+30 |     let mut map = HashMap::new();\n+   |                   ^^^^^^^ Use of undeclared type or module `HashMap`\n+\n+error: aborting due to previous error\n+"}, {"sha": "213683b5808838f2fdd50d497fa0bbd13fbd4a9d", "filename": "src/test/ui/discrim-overflow-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fdiscrim-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fdiscrim-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim-overflow-2.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/discrim-overflow-2.rs"}, {"sha": "be1b5f0ef20462de87de20dfeb71ef2e7570ba97", "filename": "src/test/ui/discrim-overflow-2.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fdiscrim-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fdiscrim-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim-overflow-2.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,66 @@\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow-2.rs:27:9\n+   |\n+27 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 127i8\n+   |\n+   = note: explicitly set `OhNo = -128i8` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow-2.rs:38:9\n+   |\n+38 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 255u8\n+   |\n+   = note: explicitly set `OhNo = 0u8` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow-2.rs:49:9\n+   |\n+49 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 32767i16\n+   |\n+   = note: explicitly set `OhNo = -32768i16` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow-2.rs:60:9\n+   |\n+60 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 65535u16\n+   |\n+   = note: explicitly set `OhNo = 0u16` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow-2.rs:71:9\n+   |\n+71 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 2147483647i32\n+   |\n+   = note: explicitly set `OhNo = -2147483648i32` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow-2.rs:82:9\n+   |\n+82 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 4294967295u32\n+   |\n+   = note: explicitly set `OhNo = 0u32` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow-2.rs:93:9\n+   |\n+93 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 9223372036854775807i64\n+   |\n+   = note: explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+   --> $DIR/discrim-overflow-2.rs:104:9\n+    |\n+104 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+    |         ^^^^ overflowed on value after 18446744073709551615u64\n+    |\n+    = note: explicitly set `OhNo = 0u64` if that is desired outcome\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "a3039b8d9573adafb1093d06efc0fb058e4f308c", "filename": "src/test/ui/discrim-overflow.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fdiscrim-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fdiscrim-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim-overflow.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/discrim-overflow.rs"}, {"sha": "3af82876f6f08f809f77c1ee6990698b2458f261", "filename": "src/test/ui/discrim-overflow.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fdiscrim-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fdiscrim-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim-overflow.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,66 @@\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow.rs:25:9\n+   |\n+25 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 127i8\n+   |\n+   = note: explicitly set `OhNo = -128i8` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow.rs:38:9\n+   |\n+38 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 255u8\n+   |\n+   = note: explicitly set `OhNo = 0u8` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow.rs:51:9\n+   |\n+51 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 32767i16\n+   |\n+   = note: explicitly set `OhNo = -32768i16` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow.rs:64:9\n+   |\n+64 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 65535u16\n+   |\n+   = note: explicitly set `OhNo = 0u16` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow.rs:77:9\n+   |\n+77 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 2147483647i32\n+   |\n+   = note: explicitly set `OhNo = -2147483648i32` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+  --> $DIR/discrim-overflow.rs:90:9\n+   |\n+90 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+   |         ^^^^ overflowed on value after 4294967295u32\n+   |\n+   = note: explicitly set `OhNo = 0u32` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+   --> $DIR/discrim-overflow.rs:103:9\n+    |\n+103 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+    |         ^^^^ overflowed on value after 9223372036854775807i64\n+    |\n+    = note: explicitly set `OhNo = -9223372036854775808i64` if that is desired outcome\n+\n+error[E0370]: enum discriminant overflowed\n+   --> $DIR/discrim-overflow.rs:116:9\n+    |\n+116 |         OhNo, //~ ERROR enum discriminant overflowed [E0370]\n+    |         ^^^^ overflowed on value after 18446744073709551615u64\n+    |\n+    = note: explicitly set `OhNo = 0u64` if that is desired outcome\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "21b8ded6d9333224651b2642d5602b78b9dc21d9", "filename": "src/test/ui/double-import.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fdouble-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fdouble-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdouble-import.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/double-import.rs"}, {"sha": "0219a17618b7ab49bcc876e0e6321611d3e3286f", "filename": "src/test/ui/double-import.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fdouble-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fdouble-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdouble-import.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,16 @@\n+error[E0252]: the name `foo` is defined multiple times\n+  --> $DIR/double-import.rs:23:5\n+   |\n+22 | use sub1::foo; //~ NOTE previous import of the value `foo` here\n+   |     --------- previous import of the value `foo` here\n+23 | use sub2::foo; //~ ERROR the name `foo` is defined multiple times\n+   |     ^^^^^^^^^ `foo` reimported here\n+   |\n+   = note: `foo` must be defined only once in the value namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+23 | use sub2::foo as Otherfoo; //~ ERROR the name `foo` is defined multiple times\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "53d7e54ee5b7b26a8759989eda330b27b1fb5e5c", "filename": "src/test/ui/duplicate-check-macro-exports.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/duplicate-check-macro-exports.rs"}, {"sha": "c512291f2d9b3b6263a5a637fd5fe06649c2b410", "filename": "src/test/ui/duplicate-check-macro-exports.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate-check-macro-exports.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,14 @@\n+error: a macro named `panic` has already been exported\n+  --> $DIR/duplicate-check-macro-exports.rs:16:1\n+   |\n+16 | macro_rules! panic { () => {} } //~ ERROR a macro named `panic` has already been exported\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `panic` already exported\n+   |\n+note: previous macro export here\n+  --> $DIR/duplicate-check-macro-exports.rs:13:9\n+   |\n+13 | pub use std::panic; //~ NOTE previous macro export here\n+   |         ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "9655007604de6e79d8c81644af01708e618335f1", "filename": "src/test/ui/empty-struct-unit-expr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fempty-struct-unit-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fempty-struct-unit-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty-struct-unit-expr.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/empty-struct-unit-expr.rs"}, {"sha": "0c722dd645d3e8feb2e163f6c758df23eb702a9f", "filename": "src/test/ui/empty-struct-unit-expr.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fempty-struct-unit-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fempty-struct-unit-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty-struct-unit-expr.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,41 @@\n+error[E0618]: expected function, found `Empty2`\n+  --> $DIR/empty-struct-unit-expr.rs:25:14\n+   |\n+25 |     let e2 = Empty2(); //~ ERROR expected function, found `Empty2`\n+   |              ^^^^^^^^\n+   |\n+note: defined here\n+  --> $DIR/empty-struct-unit-expr.rs:18:1\n+   |\n+18 | struct Empty2;\n+   | ^^^^^^^^^^^^^^\n+\n+error[E0618]: expected function, found `E::Empty4`\n+  --> $DIR/empty-struct-unit-expr.rs:26:14\n+   |\n+26 |     let e4 = E::Empty4();\n+   |              ^^^^^^^^^^^\n+   |\n+   = help: did you mean to write `E::Empty4`?\n+note: defined here\n+  --> $DIR/empty-struct-unit-expr.rs:21:5\n+   |\n+21 |     Empty4\n+   |     ^^^^^^\n+\n+error[E0618]: expected function, found `empty_struct::XEmpty2`\n+  --> $DIR/empty-struct-unit-expr.rs:29:15\n+   |\n+29 |     let xe2 = XEmpty2(); //~ ERROR expected function, found `empty_struct::XEmpty2`\n+   |               ^^^^^^^^^\n+\n+error[E0618]: expected function, found `XE::XEmpty4`\n+  --> $DIR/empty-struct-unit-expr.rs:30:15\n+   |\n+30 |     let xe4 = XE::XEmpty4();\n+   |               ^^^^^^^^^^^^^\n+   |\n+   = help: did you mean to write `XE::XEmpty4`?\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "59b4d715c2dd3f58c5c552ea633695d2342ff538", "filename": "src/test/ui/enum-and-module-in-same-scope.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/enum-and-module-in-same-scope.rs"}, {"sha": "6f3a2c89d19e65cfad74024ae1d1c89cfaa04ff3", "filename": "src/test/ui/enum-and-module-in-same-scope.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-and-module-in-same-scope.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,20 @@\n+error[E0428]: the name `Foo` is defined multiple times\n+  --> $DIR/enum-and-module-in-same-scope.rs:15:1\n+   |\n+11 | / enum Foo { //~ NOTE previous definition of the type `Foo` here\n+12 | |     X\n+13 | | }\n+   | |_- previous definition of the type `Foo` here\n+14 | \n+15 | / mod Foo { //~ ERROR the name `Foo` is defined multiple times\n+16 | |           //~| NOTE `Foo` redefined here\n+17 | |           //~| NOTE `Foo` must be defined only once in the type namespace of this module\n+18 | |     pub static X: isize = 42;\n+19 | |     fn f() { f() } // Check that this does not result in a resolution error\n+20 | | }\n+   | |_^ `Foo` redefined here\n+   |\n+   = note: `Foo` must be defined only once in the type namespace of this module\n+\n+error: aborting due to previous error\n+"}, {"sha": "bc2dc1cc5d4c83923f349f8062462af9bc79f020", "filename": "src/test/ui/fat-ptr-cast.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffat-ptr-cast.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/fat-ptr-cast.rs"}, {"sha": "1cad2eeaee250f52a297e6b1759c26725ccd5c36", "filename": "src/test/ui/fat-ptr-cast.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,62 @@\n+error[E0606]: casting `&[i32]` as `usize` is invalid\n+  --> $DIR/fat-ptr-cast.rs:20:5\n+   |\n+20 |     a as usize; //~ ERROR casting\n+   |     ^^^^^^^^^^\n+   |\n+   = help: cast through a raw pointer first\n+\n+error[E0606]: casting `&[i32]` as `isize` is invalid\n+  --> $DIR/fat-ptr-cast.rs:22:5\n+   |\n+22 |     a as isize; //~ ERROR casting\n+   |     ^^^^^^^^^^\n+\n+error[E0606]: casting `&[i32]` as `i16` is invalid\n+  --> $DIR/fat-ptr-cast.rs:23:5\n+   |\n+23 |     a as i16; //~ ERROR casting `&[i32]` as `i16` is invalid\n+   |     ^^^^^^^^\n+\n+error[E0606]: casting `&[i32]` as `u32` is invalid\n+  --> $DIR/fat-ptr-cast.rs:24:5\n+   |\n+24 |     a as u32; //~ ERROR casting `&[i32]` as `u32` is invalid\n+   |     ^^^^^^^^\n+\n+error[E0605]: non-primitive cast: `std::boxed::Box<[i32]>` as `usize`\n+  --> $DIR/fat-ptr-cast.rs:25:5\n+   |\n+25 |     b as usize; //~ ERROR non-primitive cast\n+   |     ^^^^^^^^^^\n+   |\n+   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+\n+error[E0606]: casting `*const [i32]` as `usize` is invalid\n+  --> $DIR/fat-ptr-cast.rs:26:5\n+   |\n+26 |     p as usize;\n+   |     ^^^^^^^^^^\n+   |\n+   = help: cast through a thin pointer first\n+\n+error[E0607]: cannot cast thin pointer `*const i32` to fat pointer `*const [i32]`\n+  --> $DIR/fat-ptr-cast.rs:31:5\n+   |\n+31 |     q as *const [i32]; //~ ERROR cannot cast\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error[E0606]: casting `usize` as `*mut Trait + 'static` is invalid\n+  --> $DIR/fat-ptr-cast.rs:34:37\n+   |\n+34 |     let t: *mut (Trait + 'static) = 0 as *mut _; //~ ERROR casting\n+   |                                     ^^^^^^^^^^^\n+\n+error[E0606]: casting `usize` as `*const str` is invalid\n+  --> $DIR/fat-ptr-cast.rs:35:32\n+   |\n+35 |     let mut fail: *const str = 0 as *const str; //~ ERROR casting\n+   |                                ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "9b19e09eeae7607c2d35e7cb785965f3aa90e616", "filename": "src/test/ui/generic-type-less-params-with-defaults.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fgeneric-type-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fgeneric-type-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-type-less-params-with-defaults.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/generic-type-less-params-with-defaults.rs"}, {"sha": "0351923eff65108cfaf42a7a588f177c19e9bc8b", "filename": "src/test/ui/generic-type-less-params-with-defaults.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fgeneric-type-less-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fgeneric-type-less-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-type-less-params-with-defaults.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0243]: wrong number of type arguments: expected at least 1, found 0\n+  --> $DIR/generic-type-less-params-with-defaults.rs:19:12\n+   |\n+19 |     let _: Vec;\n+   |            ^^^ expected at least 1 type argument\n+\n+error: aborting due to previous error\n+"}, {"sha": "b5764ef89ab54c8ce04e4a4888d43acb99dd47ca", "filename": "src/test/ui/generic-type-more-params-with-defaults.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fgeneric-type-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fgeneric-type-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-type-more-params-with-defaults.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/generic-type-more-params-with-defaults.rs"}, {"sha": "11ce6b1656ded103a8937415a2d595b358073648", "filename": "src/test/ui/generic-type-more-params-with-defaults.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fgeneric-type-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fgeneric-type-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-type-more-params-with-defaults.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0244]: wrong number of type arguments: expected at most 2, found 3\n+  --> $DIR/generic-type-more-params-with-defaults.rs:19:12\n+   |\n+19 |     let _: Vec<isize, Heap, bool>;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ expected at most 2 type arguments\n+\n+error: aborting due to previous error\n+"}, {"sha": "40013a7ee43bb142495a317c1f5640b401209aa4", "filename": "src/test/ui/if-let-arm-types.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fif-let-arm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fif-let-arm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-let-arm-types.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/if-let-arm-types.rs"}, {"sha": "cc232027ceeb9bc450953aff5164b99c72993299", "filename": "src/test/ui/if-let-arm-types.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fif-let-arm-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fif-let-arm-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-let-arm-types.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,25 @@\n+error[E0308]: `if let` arms have incompatible types\n+  --> $DIR/if-let-arm-types.rs:12:5\n+   |\n+12 | /     if let Some(b) = None { //~ ERROR: `if let` arms have incompatible types\n+13 | |         //~^ expected (), found integral variable\n+14 | |         //~| expected type `()`\n+15 | |         //~| found type `{integer}`\n+...  |\n+18 | |         1\n+19 | |     };\n+   | |_____^ expected (), found integral variable\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+note: `if let` arm with an incompatible type\n+  --> $DIR/if-let-arm-types.rs:17:12\n+   |\n+17 |       } else {                //~ NOTE: `if let` arm with an incompatible type\n+   |  ____________^\n+18 | |         1\n+19 | |     };\n+   | |_____^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f6e9ab2d614bce630b7f8dae5a1d8f56e2f8576e", "filename": "src/test/ui/impl-duplicate-methods.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimpl-duplicate-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimpl-duplicate-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-duplicate-methods.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/impl-duplicate-methods.rs"}, {"sha": "66b2d6059674cc93dd5ab0ce3dc0133838275a60", "filename": "src/test/ui/impl-duplicate-methods.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimpl-duplicate-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimpl-duplicate-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-duplicate-methods.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,10 @@\n+error[E0201]: duplicate definitions with name `orange`:\n+  --> $DIR/impl-duplicate-methods.rs:15:5\n+   |\n+14 |     fn orange(&self) {} //~ NOTE previous definition of `orange` here\n+   |     ------------------- previous definition of `orange` here\n+15 |     fn orange(&self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^ duplicate definition\n+\n+error: aborting due to previous error\n+"}, {"sha": "d48433ee928f1eb2b7c84d6133045766b3e14f3e", "filename": "src/test/ui/impl-unused-rps-in-assoc-type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimpl-unused-rps-in-assoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimpl-unused-rps-in-assoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-unused-rps-in-assoc-type.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/impl-unused-rps-in-assoc-type.rs"}, {"sha": "ec261ed63b1e826f6421edd6c1341d30408d2793", "filename": "src/test/ui/impl-unused-rps-in-assoc-type.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimpl-unused-rps-in-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimpl-unused-rps-in-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-unused-rps-in-assoc-type.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/impl-unused-rps-in-assoc-type.rs:21:6\n+   |\n+21 | impl<'a> Fun for Holder { //~ ERROR E0207\n+   |      ^^ unconstrained lifetime parameter\n+\n+error: aborting due to previous error\n+"}, {"sha": "2ac8e3ef983da48c0e165dc406c121c1ed00f897", "filename": "src/test/ui/imports/auxiliary/two_macros.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Fauxiliary%2Ftwo_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Fauxiliary%2Ftwo_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fauxiliary%2Ftwo_macros.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/imports/auxiliary/two_macros.rs"}, {"sha": "4b2a64155e5d8fde9796c4d60a5ad6d3fef3907e", "filename": "src/test/ui/imports/duplicate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fduplicate.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/imports/duplicate.rs"}, {"sha": "a990a816fe94b8d7857a92b3d363f93bd237e2cd", "filename": "src/test/ui/imports/duplicate.stderr", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,88 @@\n+error[E0252]: the name `foo` is defined multiple times\n+  --> $DIR/duplicate.rs:25:9\n+   |\n+24 |     use a::foo; //~ NOTE previous import of the value `foo` here\n+   |         ------ previous import of the value `foo` here\n+25 |     use a::foo; //~ ERROR the name `foo` is defined multiple times\n+   |         ^^^^^^ `foo` reimported here\n+   |\n+   = note: `foo` must be defined only once in the value namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+25 |     use a::foo as Otherfoo; //~ ERROR the name `foo` is defined multiple times\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error: `foo` is ambiguous\n+  --> $DIR/duplicate.rs:62:9\n+   |\n+62 |     use self::foo::bar; //~ ERROR `foo` is ambiguous\n+   |         ^^^^^^^^^^^^^^\n+   |\n+note: `foo` could refer to the name imported here\n+  --> $DIR/duplicate.rs:57:9\n+   |\n+57 |     use self::m1::*; //~ NOTE\n+   |         ^^^^^^^^^^^\n+note: `foo` could also refer to the name imported here\n+  --> $DIR/duplicate.rs:59:9\n+   |\n+59 |     use self::m2::*; //~ NOTE\n+   |         ^^^^^^^^^^^\n+   = note: consider adding an explicit import of `foo` to disambiguate\n+\n+error: `foo` is ambiguous\n+  --> $DIR/duplicate.rs:47:5\n+   |\n+47 |     f::foo(); //~ ERROR `foo` is ambiguous\n+   |     ^^^^^^\n+   |\n+note: `foo` could refer to the name imported here\n+  --> $DIR/duplicate.rs:36:13\n+   |\n+36 |     pub use a::*; //~ NOTE `foo` could refer to the name imported here\n+   |             ^^^^\n+note: `foo` could also refer to the name imported here\n+  --> $DIR/duplicate.rs:37:13\n+   |\n+37 |     pub use b::*; //~ NOTE `foo` could also refer to the name imported here\n+   |             ^^^^\n+   = note: consider adding an explicit import of `foo` to disambiguate\n+\n+error: `foo` is ambiguous\n+  --> $DIR/duplicate.rs:49:5\n+   |\n+49 |     g::foo(); //~ ERROR `foo` is ambiguous\n+   |     ^^^^^^\n+   |\n+note: `foo` could refer to the name imported here\n+  --> $DIR/duplicate.rs:41:13\n+   |\n+41 |     pub use a::*; //~ NOTE `foo` could refer to the name imported here\n+   |             ^^^^\n+note: `foo` could also refer to the name imported here\n+  --> $DIR/duplicate.rs:42:13\n+   |\n+42 |     pub use f::*; //~ NOTE `foo` could also refer to the name imported here\n+   |             ^^^^\n+   = note: consider adding an explicit import of `foo` to disambiguate\n+\n+error: `foo` is ambiguous\n+  --> $DIR/duplicate.rs:66:9\n+   |\n+66 |         foo::bar(); //~ ERROR `foo` is ambiguous\n+   |         ^^^^^^^^\n+   |\n+note: `foo` could refer to the name imported here\n+  --> $DIR/duplicate.rs:57:9\n+   |\n+57 |     use self::m1::*; //~ NOTE\n+   |         ^^^^^^^^^^^\n+note: `foo` could also refer to the name imported here\n+  --> $DIR/duplicate.rs:59:9\n+   |\n+59 |     use self::m2::*; //~ NOTE\n+   |         ^^^^^^^^^^^\n+   = note: consider adding an explicit import of `foo` to disambiguate\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "7c19917acc476b398b6ffa4545a774dd5fa507e3", "filename": "src/test/ui/imports/macro-paths.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/imports/macro-paths.rs"}, {"sha": "cd8ab3de4f9c5c211632f7274e26b962a66cd618", "filename": "src/test/ui/imports/macro-paths.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,42 @@\n+error: `bar` is ambiguous\n+  --> $DIR/macro-paths.rs:25:5\n+   |\n+25 |     bar::m! { //~ ERROR ambiguous\n+   |     ^^^^^^\n+   |\n+note: `bar` could refer to the name defined here\n+  --> $DIR/macro-paths.rs:27:9\n+   |\n+27 |         mod bar { pub use two_macros::m; } //~ NOTE could refer to the name defined here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: `bar` could also refer to the name imported here\n+  --> $DIR/macro-paths.rs:24:9\n+   |\n+24 |     use foo::*; //~ NOTE could also refer to the name imported here\n+   |         ^^^^^^\n+   = note: macro-expanded items do not shadow when used in a macro invocation path\n+\n+error: `baz` is ambiguous\n+  --> $DIR/macro-paths.rs:36:5\n+   |\n+36 |     baz::m! { //~ ERROR ambiguous\n+   |     ^^^^^^\n+   |\n+note: `baz` could refer to the name defined here\n+  --> $DIR/macro-paths.rs:38:9\n+   |\n+38 |         mod baz { pub use two_macros::m; } //~ NOTE could refer to the name defined here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: `baz` could also refer to the name defined here\n+  --> $DIR/macro-paths.rs:31:1\n+   |\n+31 | / pub mod baz { //~ NOTE could also refer to the name defined here\n+32 | |     pub use two_macros::m;\n+33 | | }\n+   | |_^\n+   = note: macro-expanded items do not shadow when used in a macro invocation path\n+\n+error[E0601]: main function not found\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "06b0964a3b14528f1eaf71845d344b6a516f7fa0", "filename": "src/test/ui/imports/macros.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacros.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/imports/macros.rs"}, {"sha": "857335f783a717fb8d677b7f5b8aa2f6b3f4a099", "filename": "src/test/ui/imports/macros.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,57 @@\n+error: `m` is ambiguous\n+  --> $DIR/macros.rs:52:5\n+   |\n+52 |     m!(); //~ ERROR ambiguous\n+   |     ^\n+   |\n+note: `m` could refer to the macro defined here\n+  --> $DIR/macros.rs:50:5\n+   |\n+50 |     macro_rules! m { () => {} } //~ NOTE could refer to the macro defined here\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: `m` could also refer to the macro imported here\n+  --> $DIR/macros.rs:51:9\n+   |\n+51 |     use two_macros::m; //~ NOTE could also refer to the macro imported here\n+   |         ^^^^^^^^^^^^^\n+\n+error: `m` is ambiguous\n+  --> $DIR/macros.rs:28:5\n+   |\n+28 |     m! { //~ ERROR ambiguous\n+   |     ^\n+   |\n+note: `m` could refer to the name imported here\n+  --> $DIR/macros.rs:30:13\n+   |\n+30 |         use foo::m; //~ NOTE could refer to the name imported here\n+   |             ^^^^^^\n+note: `m` could also refer to the name imported here\n+  --> $DIR/macros.rs:27:9\n+   |\n+27 |     use two_macros::*; //~ NOTE could also refer\n+   |         ^^^^^^^^^^^^^\n+   = note: macro-expanded macro imports do not shadow\n+\n+error: `m` is ambiguous\n+  --> $DIR/macros.rs:42:9\n+   |\n+42 |         m! { //~ ERROR ambiguous\n+   |         ^\n+   |\n+note: `m` could refer to the name imported here\n+  --> $DIR/macros.rs:44:17\n+   |\n+44 |             use two_macros::n as m; //~ NOTE could refer to the name imported here\n+   |                 ^^^^^^^^^^^^^^^^^^\n+note: `m` could also refer to the name imported here\n+  --> $DIR/macros.rs:35:9\n+   |\n+35 |     use two_macros::m; //~ NOTE could also refer\n+   |         ^^^^^^^^^^^^^\n+   = note: macro-expanded macro imports do not shadow\n+\n+error[E0601]: main function not found\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "95bdf5e9b156557e5c10327e9d0c1fe658c154e5", "filename": "src/test/ui/imports/rfc-1560-warning-cycle.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/imports/rfc-1560-warning-cycle.rs"}, {"sha": "c5e6f23fdae2a9725c84db89846d9e748b195ade", "filename": "src/test/ui/imports/rfc-1560-warning-cycle.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Frfc-1560-warning-cycle.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,16 @@\n+error: `Foo` is ambiguous\n+  --> $DIR/rfc-1560-warning-cycle.rs:21:17\n+   |\n+19 |         use *; //~ NOTE `Foo` could refer to the name imported here\n+   |             - `Foo` could refer to the name imported here\n+20 |         use bar::*; //~ NOTE `Foo` could also refer to the name imported here\n+   |             ------ `Foo` could also refer to the name imported here\n+21 |         fn f(_: Foo) {}\n+   |                 ^^^\n+   |\n+   = note: #[deny(legacy_imports)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #38260 <https://github.com/rust-lang/rust/issues/38260>\n+\n+error: aborting due to previous error\n+"}, {"sha": "a7f1cf3c9d3ef92b37dedb4103f5650b5ccc09b6", "filename": "src/test/ui/imports/shadow_builtin_macros.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/imports/shadow_builtin_macros.rs"}, {"sha": "53a0cdd82b2d587b6943ebfe26b8fecc6ea99024", "filename": "src/test/ui/imports/shadow_builtin_macros.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,59 @@\n+error: `panic` is already in scope\n+  --> $DIR/shadow_builtin_macros.rs:46:9\n+   |\n+46 |         macro_rules! panic { () => {} } //~ ERROR `panic` is already in scope\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+49 |     m!(); //~ NOTE in this expansion\n+   |     ----- in this macro invocation\n+   |\n+   = note: macro-expanded `macro_rules!`s may not shadow existing macros (see RFC 1560)\n+\n+error: `panic` is ambiguous\n+  --> $DIR/shadow_builtin_macros.rs:27:14\n+   |\n+27 |     fn f() { panic!(); } //~ ERROR ambiguous\n+   |              ^^^^^\n+   |\n+note: `panic` could refer to the name imported here\n+  --> $DIR/shadow_builtin_macros.rs:26:9\n+   |\n+26 |     use foo::*; //~ NOTE `panic` could refer to the name imported here\n+   |         ^^^^^^\n+   = note: `panic` is also a builtin macro\n+   = note: consider adding an explicit import of `panic` to disambiguate\n+\n+error: `panic` is ambiguous\n+  --> $DIR/shadow_builtin_macros.rs:34:14\n+   |\n+34 |     fn f() { panic!(); } //~ ERROR ambiguous\n+   |              ^^^^^\n+   |\n+note: `panic` could refer to the name imported here\n+  --> $DIR/shadow_builtin_macros.rs:33:26\n+   |\n+33 |     ::two_macros::m!(use foo::panic;); //~ NOTE `panic` could refer to the name imported here\n+   |                          ^^^^^^^^^^\n+   = note: `panic` is also a builtin macro\n+   = note: macro-expanded macro imports do not shadow\n+\n+error: `n` is ambiguous\n+  --> $DIR/shadow_builtin_macros.rs:67:5\n+   |\n+67 |     n!(); //~ ERROR ambiguous\n+   |     ^\n+   |\n+note: `n` could refer to the name imported here\n+  --> $DIR/shadow_builtin_macros.rs:66:9\n+   |\n+66 |     use bar::*; //~ NOTE `n` could refer to the name imported here\n+   |         ^^^^^^\n+note: `n` could also refer to the name imported here\n+  --> $DIR/shadow_builtin_macros.rs:54:13\n+   |\n+54 | #[macro_use(n)] //~ NOTE `n` could also refer to the name imported here\n+   |             ^\n+   = note: consider adding an explicit import of `n` to disambiguate\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "e4465e9f6b6115c5451fce0b855472abc7fe67ab", "filename": "src/test/ui/impossible_range.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimpossible_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimpossible_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/impossible_range.rs"}, {"sha": "8ea5942314d4b6536ebce4724e31a009647d67e6", "filename": "src/test/ui/impossible_range.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimpossible_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fimpossible_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,18 @@\n+error[E0586]: inclusive range with no end\n+  --> $DIR/impossible_range.rs:21:8\n+   |\n+21 |     ..=; //~ERROR inclusive range with no end\n+   |        ^\n+   |\n+   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+\n+error[E0586]: inclusive range with no end\n+  --> $DIR/impossible_range.rs:23:9\n+   |\n+23 |     0..=; //~ERROR inclusive range with no end\n+   |         ^\n+   |\n+   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "2d37fc79250357f9d1b0deab53e123c48103c5c3", "filename": "src/test/ui/index-help.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Findex-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Findex-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findex-help.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/index-help.rs"}, {"sha": "e1652b6c262c7820f3724c1ff94feddc3bacabd7", "filename": "src/test/ui/index-help.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Findex-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Findex-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findex-help.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,10 @@\n+error[E0277]: the trait bound `std::vec::Vec<{integer}>: std::ops::Index<i32>` is not satisfied\n+  --> $DIR/index-help.rs:13:5\n+   |\n+13 |     x[0i32]; //~ ERROR E0277\n+   |     ^^^^^^^ vector indices are of type `usize` or ranges of `usize`\n+   |\n+   = help: the trait `std::ops::Index<i32>` is not implemented for `std::vec::Vec<{integer}>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ab839e7630de907904093b4f3ac54e70285a7f0b", "filename": "src/test/ui/invalid-path-in-const.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Finvalid-path-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Finvalid-path-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-path-in-const.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/invalid-path-in-const.rs"}, {"sha": "be1de60bca559c82e1313aecd664eace303b4ec4", "filename": "src/test/ui/invalid-path-in-const.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Finvalid-path-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Finvalid-path-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-path-in-const.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0599]: no associated item named `DOESNOTEXIST` found for type `u32` in the current scope\n+  --> $DIR/invalid-path-in-const.rs:12:18\n+   |\n+12 |     fn f(a: [u8; u32::DOESNOTEXIST]) {}\n+   |                  ^^^^^^^^^^^^^^^^^ associated item not found in `u32`\n+\n+error: aborting due to previous error\n+"}, {"sha": "0851020b1f1d8ab64f33d26b1460d4e4e7dfc441", "filename": "src/test/ui/issue-10969.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-10969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-10969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-10969.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-10969.rs"}, {"sha": "f537c51026e14339e2131a194cf235247a8f46a4", "filename": "src/test/ui/issue-10969.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-10969.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-10969.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-10969.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,26 @@\n+error[E0618]: expected function, found `i32`\n+  --> $DIR/issue-10969.rs:12:5\n+   |\n+12 |     i(); //~ERROR expected function, found `i32`\n+   |     ^^^\n+   |\n+note: defined here\n+  --> $DIR/issue-10969.rs:11:9\n+   |\n+11 | fn func(i: i32) { //~NOTE defined here\n+   |         ^\n+\n+error[E0618]: expected function, found `i32`\n+  --> $DIR/issue-10969.rs:16:5\n+   |\n+16 |     i(); //~ERROR expected function, found `i32`\n+   |     ^^^\n+   |\n+note: defined here\n+  --> $DIR/issue-10969.rs:15:9\n+   |\n+15 |     let i = 0i32; //~NOTE defined here\n+   |         ^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "069883424222ed04322e850e2f8012e3f964574e", "filename": "src/test/ui/issue-11004.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-11004.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-11004.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-11004.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-11004.rs"}, {"sha": "3dfa14bc415ce634efa1e2d283d98d9e194d3bb9", "filename": "src/test/ui/issue-11004.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-11004.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-11004.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-11004.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,18 @@\n+error[E0609]: no field `x` on type `*mut A`\n+  --> $DIR/issue-11004.rs:17:21\n+   |\n+17 |     let x : i32 = n.x; //~ no field `x` on type `*mut A`\n+   |                     ^\n+   |\n+   = note: `n` is a native pointer; perhaps you need to deref with `(*n).x`\n+\n+error[E0609]: no field `y` on type `*mut A`\n+  --> $DIR/issue-11004.rs:19:21\n+   |\n+19 |     let y : f64 = n.y; //~ no field `y` on type `*mut A`\n+   |                     ^\n+   |\n+   = note: `n` is a native pointer; perhaps you need to deref with `(*n).y`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "8242fa1c2e9794eb8c92f61b1f81710ad910e3c4", "filename": "src/test/ui/issue-11319.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-11319.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-11319.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-11319.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-11319.rs"}, {"sha": "bcb7dd8b8f5b176b078aa12c5340abab3697db32", "filename": "src/test/ui/issue-11319.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-11319.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-11319.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-11319.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: match arms have incompatible types\n+  --> $DIR/issue-11319.rs:12:5\n+   |\n+12 | /     match Some(10) {\n+13 | |     //~^ ERROR match arms have incompatible types\n+14 | |     //~| expected type `bool`\n+15 | |     //~| found type `()`\n+...  |\n+20 | |         _       => true\n+21 | |     }\n+   | |_____^ expected bool, found ()\n+   |\n+   = note: expected type `bool`\n+              found type `()`\n+note: match arm with an incompatible type\n+  --> $DIR/issue-11319.rs:19:20\n+   |\n+19 |         None    => (), //~ NOTE match arm with an incompatible type\n+   |                    ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a79021d3cd5d23cc55e7689208001124c90c541a", "filename": "src/test/ui/issue-12187-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-12187-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-12187-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-12187-1.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-12187-1.rs"}, {"sha": "e36c278df6e41192aaa69067803340614b3827dc", "filename": "src/test/ui/issue-12187-1.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-12187-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-12187-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-12187-1.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-12187-1.rs:16:10\n+   |\n+16 |     let &v = new();\n+   |         -^\n+   |         ||\n+   |         |cannot infer type for `_`\n+   |         consider giving the pattern a type\n+\n+error: aborting due to previous error\n+"}, {"sha": "38b3c5d4e9a644edad04260d6f9c07f7b5b01b2a", "filename": "src/test/ui/issue-12187-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-12187-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-12187-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-12187-2.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-12187-2.rs"}, {"sha": "b72c23987ec3c044376ce3e17c7b455056c6be5d", "filename": "src/test/ui/issue-12187-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-12187-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-12187-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-12187-2.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-12187-2.rs:16:10\n+   |\n+16 |     let &v = new();\n+   |         -^\n+   |         ||\n+   |         |cannot infer type for `_`\n+   |         consider giving the pattern a type\n+\n+error: aborting due to previous error\n+"}, {"sha": "0c3073a770141f866a0eef4e883900413993cceb", "filename": "src/test/ui/issue-12511.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-12511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-12511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-12511.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-12511.rs"}, {"sha": "3f039d9496df09768fcc58c59c5d72f7830fd99b", "filename": "src/test/ui/issue-12511.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-12511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-12511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-12511.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,20 @@\n+error[E0391]: unsupported cyclic reference between types/traits detected\n+  --> $DIR/issue-12511.rs:16:1\n+   |\n+16 | trait t2 : t1 {\n+   | ^^^^^^^^^^^^^ cyclic reference\n+   |\n+note: the cycle begins when computing the supertraits of `t1`...\n+  --> $DIR/issue-12511.rs:11:1\n+   |\n+11 | trait t1 : t2 {\n+   | ^^^^^^^^^^^^^\n+note: ...which then requires computing the supertraits of `t2`...\n+  --> $DIR/issue-12511.rs:11:1\n+   |\n+11 | trait t1 : t2 {\n+   | ^^^^^^^^^^^^^\n+   = note: ...which then again requires computing the supertraits of `t1`, completing the cycle.\n+\n+error: aborting due to previous error\n+"}, {"sha": "27b23f083217dd7b695e63bdbeefe12f04185d8c", "filename": "src/test/ui/issue-13058.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-13058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-13058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-13058.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-13058.rs"}, {"sha": "fb8fb058daa269ac46b1582c66cf6a44ff2c25cb", "filename": "src/test/ui/issue-13058.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-13058.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-13058.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-13058.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,23 @@\n+error[E0621]: explicit lifetime required in the type of `cont`\n+  --> $DIR/issue-13058.rs:24:26\n+   |\n+22 | fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool\n+   |                                                               ---- consider changing the type of `cont` to `&'r T`\n+23 | {\n+24 |     let cont_iter = cont.iter();\n+   |                          ^^^^ lifetime `'r` required\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-13058.rs:36:11\n+   |\n+36 |     check((3, 5));\n+   |           ^^^^^^\n+   |           |\n+   |           expected reference, found tuple\n+   |           help: consider borrowing here: `&(3, 5)`\n+   |\n+   = note: expected type `&_`\n+              found type `({integer}, {integer})`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "85dd88e614fd70a3283950798284665fd5135ce7", "filename": "src/test/ui/issue-14092.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-14092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-14092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-14092.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-14092.rs"}, {"sha": "e0b5bdb93d80e80a1ab0af5b9dfb8d99f095df3b", "filename": "src/test/ui/issue-14092.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-14092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-14092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-14092.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0243]: wrong number of type arguments: expected 1, found 0\n+  --> $DIR/issue-14092.rs:11:11\n+   |\n+11 | fn fn1(0: Box) {}\n+   |           ^^^ expected 1 type argument\n+\n+error: aborting due to previous error\n+"}, {"sha": "5f816d34c8445fe29541b0c5f5351a296c030810", "filename": "src/test/ui/issue-15260.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-15260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-15260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-15260.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-15260.rs"}, {"sha": "f33662a7ee9118e23010d9aa391544687acba1e0", "filename": "src/test/ui/issue-15260.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-15260.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-15260.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-15260.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,36 @@\n+error[E0025]: field `a` bound multiple times in the pattern\n+  --> $DIR/issue-15260.rs:18:9\n+   |\n+17 |         a: _, //~ NOTE first use of `a`\n+   |         ---- first use of `a`\n+18 |         a: _\n+   |         ^^^^ multiple uses of `a` in pattern\n+\n+error[E0025]: field `a` bound multiple times in the pattern\n+  --> $DIR/issue-15260.rs:25:9\n+   |\n+24 |         a, //~ NOTE first use of `a`\n+   |         - first use of `a`\n+25 |         a: _\n+   |         ^^^^ multiple uses of `a` in pattern\n+\n+error[E0025]: field `a` bound multiple times in the pattern\n+  --> $DIR/issue-15260.rs:34:9\n+   |\n+31 |         a,\n+   |         - first use of `a`\n+...\n+34 |         a: _,\n+   |         ^^^^ multiple uses of `a` in pattern\n+\n+error[E0025]: field `a` bound multiple times in the pattern\n+  --> $DIR/issue-15260.rs:37:9\n+   |\n+31 |         a,\n+   |         - first use of `a`\n+...\n+37 |         a: x\n+   |         ^^^^ multiple uses of `a` in pattern\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "658a0c1546b9f337b27704fa31d060075e91bdfc", "filename": "src/test/ui/issue-15524.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-15524.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-15524.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-15524.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-15524.rs"}, {"sha": "9a26b4d4af4eec6ed32ebb8ba562615cdf4f785d", "filename": "src/test/ui/issue-15524.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-15524.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-15524.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-15524.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,29 @@\n+error[E0081]: discriminant value `1isize` already exists\n+  --> $DIR/issue-15524.rs:18:9\n+   |\n+14 |     A = 1,\n+   |         - first use of `1isize`\n+...\n+18 |     B = 1,\n+   |         ^ enum already has `1isize`\n+\n+error[E0081]: discriminant value `1isize` already exists\n+  --> $DIR/issue-15524.rs:22:5\n+   |\n+14 |     A = 1,\n+   |         - first use of `1isize`\n+...\n+22 |     D,\n+   |     ^ enum already has `1isize`\n+\n+error[E0081]: discriminant value `1isize` already exists\n+  --> $DIR/issue-15524.rs:26:9\n+   |\n+14 |     A = 1,\n+   |         - first use of `1isize`\n+...\n+26 |     E = N,\n+   |         ^ enum already has `1isize`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "063afe285fad3cb75d367c7be1eee5c4f243ac8b", "filename": "src/test/ui/issue-17263.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-17263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-17263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17263.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-17263.rs"}, {"sha": "934311ee4129261addeaab1511c9190a70600211", "filename": "src/test/ui/issue-17263.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-17263.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-17263.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17263.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,24 @@\n+error[E0499]: cannot borrow `x` (via `x.b`) as mutable more than once at a time\n+  --> $DIR/issue-17263.rs:17:34\n+   |\n+17 |     let (a, b) = (&mut x.a, &mut x.b);\n+   |                        ---       ^^^ second mutable borrow occurs here (via `x.b`)\n+   |                        |\n+   |                        first mutable borrow occurs here (via `x.a`)\n+...\n+27 | }\n+   | - first borrow ends here\n+\n+error[E0502]: cannot borrow `foo` (via `foo.b`) as immutable because `foo` is also borrowed as mutable (via `foo.a`)\n+  --> $DIR/issue-17263.rs:23:32\n+   |\n+23 |     let (c, d) = (&mut foo.a, &foo.b);\n+   |                        -----   ^^^^^ immutable borrow occurs here (via `foo.b`)\n+   |                        |\n+   |                        mutable borrow occurs here (via `foo.a`)\n+...\n+27 | }\n+   | - mutable borrow ends here\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "bddc9c13815e741ef8d9b2b00928acc90236e1d9", "filename": "src/test/ui/issue-17441.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-17441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-17441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17441.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-17441.rs"}, {"sha": "4b0feb844291d4a8b1641dbd0ade1ace8b6fbd24", "filename": "src/test/ui/issue-17441.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-17441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-17441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17441.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,46 @@\n+error[E0620]: cast to unsized type: `&[usize; 2]` as `[usize]`\n+  --> $DIR/issue-17441.rs:12:16\n+   |\n+12 |     let _foo = &[1_usize, 2] as [usize];\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using an implicit coercion to `&[usize]` instead\n+  --> $DIR/issue-17441.rs:12:16\n+   |\n+12 |     let _foo = &[1_usize, 2] as [usize];\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0620]: cast to unsized type: `std::boxed::Box<usize>` as `std::fmt::Debug`\n+  --> $DIR/issue-17441.rs:16:16\n+   |\n+16 |     let _bar = Box::new(1_usize) as std::fmt::Debug;\n+   |                ^^^^^^^^^^^^^^^^^^^^^---------------\n+   |                                     |\n+   |                                     help: try casting to a `Box` instead: `Box<std::fmt::Debug>`\n+\n+error[E0620]: cast to unsized type: `usize` as `std::fmt::Debug`\n+  --> $DIR/issue-17441.rs:20:16\n+   |\n+20 |     let _baz = 1_usize as std::fmt::Debug;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using a box or reference as appropriate\n+  --> $DIR/issue-17441.rs:20:16\n+   |\n+20 |     let _baz = 1_usize as std::fmt::Debug;\n+   |                ^^^^^^^\n+\n+error[E0620]: cast to unsized type: `[usize; 2]` as `[usize]`\n+  --> $DIR/issue-17441.rs:24:17\n+   |\n+24 |     let _quux = [1_usize, 2] as [usize];\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using a box or reference as appropriate\n+  --> $DIR/issue-17441.rs:24:17\n+   |\n+24 |     let _quux = [1_usize, 2] as [usize];\n+   |                 ^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "4211057610bc7ebf60e5ae3f805b330209eda5c2", "filename": "src/test/ui/issue-17954.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-17954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-17954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17954.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-17954.rs"}, {"sha": "cfd8da1d67b410aa2ffe1ae37dd05532eed4b7a7", "filename": "src/test/ui/issue-17954.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-17954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-17954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17954.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,13 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/issue-17954.rs:17:14\n+   |\n+17 |     let a = &FOO;\n+   |              ^^^ does not live long enough\n+...\n+25 | } //~ temporary value only lives until here\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to previous error\n+"}, {"sha": "feab04531b7e11bca3b4738a7de5a19c6e1d8b71", "filename": "src/test/ui/issue-18183.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-18183.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-18183.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-18183.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-18183.rs"}, {"sha": "310508022611014e2a037186ca2071c947c13f67", "filename": "src/test/ui/issue-18183.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-18183.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-18183.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-18183.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0128]: type parameters with a default cannot use forward declared identifiers\n+  --> $DIR/issue-18183.rs:11:20\n+   |\n+11 | pub struct Foo<Bar=Bar>(Bar); //~ ERROR E0128\n+   |                    ^^^ defaulted type parameters cannot be forward declared\n+\n+error: aborting due to previous error\n+"}, {"sha": "148eea31ec6e3eb7cec41a597e93f6f45cecd7ee", "filename": "src/test/ui/issue-18819.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-18819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-18819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-18819.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-18819.rs"}, {"sha": "a3f1b23c2704205b2a0d42cbd6d0300c25ea477d", "filename": "src/test/ui/issue-18819.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-18819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-18819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-18819.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,14 @@\n+error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n+  --> $DIR/issue-18819.rs:27:13\n+   |\n+21 | / fn print_x(_: &Foo<Item=bool>, extra: &str) {\n+22 | |     //~^ NOTE defined here\n+23 | |     println!(\"{}\", extra);\n+24 | | }\n+   | |_- defined here\n+...\n+27 |       print_x(X);\n+   |               ^ expected 2 parameters\n+\n+error: aborting due to previous error\n+"}, {"sha": "7de16e5ecfeb2e87627698f31f523d5feb20fbf1", "filename": "src/test/ui/issue-19498.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-19498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-19498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19498.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-19498.rs"}, {"sha": "fca9d1581b337edc8927898f67d7041cc2ada1bb", "filename": "src/test/ui/issue-19498.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-19498.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-19498.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19498.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,46 @@\n+error[E0255]: the name `A` is defined multiple times\n+  --> $DIR/issue-19498.rs:13:1\n+   |\n+11 | use self::A; //~ NOTE previous import of the module `A` here\n+   |     ------- previous import of the module `A` here\n+12 | use self::B; //~ NOTE previous import of the module `B` here\n+13 | mod A {} //~ ERROR the name `A` is defined multiple times\n+   | ^^^^^^^^ `A` redefined here\n+   |\n+   = note: `A` must be defined only once in the type namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+11 | use self::A as OtherA; //~ NOTE previous import of the module `A` here\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error[E0255]: the name `B` is defined multiple times\n+  --> $DIR/issue-19498.rs:16:1\n+   |\n+12 | use self::B; //~ NOTE previous import of the module `B` here\n+   |     ------- previous import of the module `B` here\n+...\n+16 | pub mod B {} //~ ERROR the name `B` is defined multiple times\n+   | ^^^^^^^^^^^^ `B` redefined here\n+   |\n+   = note: `B` must be defined only once in the type namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+12 | use self::B as OtherB; //~ NOTE previous import of the module `B` here\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error[E0255]: the name `D` is defined multiple times\n+  --> $DIR/issue-19498.rs:21:5\n+   |\n+20 |     use C::D; //~ NOTE previous import of the module `D` here\n+   |         ---- previous import of the module `D` here\n+21 |     mod D {} //~ ERROR the name `D` is defined multiple times\n+   |     ^^^^^^^^ `D` redefined here\n+   |\n+   = note: `D` must be defined only once in the type namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+20 |     use C::D as OtherD; //~ NOTE previous import of the module `D` here\n+   |         ^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "9de3040bb616c0c4707312271581b123da881ac7", "filename": "src/test/ui/issue-1962.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-1962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-1962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-1962.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-1962.rs"}, {"sha": "4e34898bebe699bd2faebd09522f5d5530754764", "filename": "src/test/ui/issue-1962.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-1962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-1962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-1962.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,17 @@\n+error: denote infinite loops with `loop { ... }`\n+  --> $DIR/issue-1962.rs:14:3\n+   |\n+14 |     while true  { //~ ERROR denote infinite loops with `loop\n+   |     ^---------\n+   |     |\n+   |  ___help: use `loop`\n+   | |\n+15 | |     i += 1;\n+16 | |     if i == 5 { break; }\n+17 | |   }\n+   | |___^\n+   |\n+   = note: requested on the command line with `-D while-true`\n+\n+error: aborting due to previous error\n+"}, {"sha": "beeb7da6d389953165804e91c70631787ab6faf8", "filename": "src/test/ui/issue-19707.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-19707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-19707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19707.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-19707.rs"}, {"sha": "73f6823fa80cbd325bac6f2c39f60ba28c2e4ace", "filename": "src/test/ui/issue-19707.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-19707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-19707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19707.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,18 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-19707.rs:13:28\n+   |\n+13 | type foo = fn(&u8, &u8) -> &u8; //~ ERROR missing lifetime specifier\n+   |                            ^ expected lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-19707.rs:16:27\n+   |\n+16 | fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {} //~ ERROR missing lifetime specifier\n+   |                           ^ expected lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "938ccb343d4270099b2524eeecef1cd4ea5d3570", "filename": "src/test/ui/issue-19922.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-19922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-19922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19922.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-19922.rs"}, {"sha": "f96392441967f8de12dcaff5ebb558ce003f3f86", "filename": "src/test/ui/issue-19922.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-19922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-19922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19922.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,10 @@\n+error[E0559]: variant `Homura::Akemi` has no field named `kaname`\n+  --> $DIR/issue-19922.rs:16:34\n+   |\n+16 |     let homura = Homura::Akemi { kaname: () };\n+   |                                  ^^^^^^^ `Homura::Akemi` does not have this field\n+   |\n+   = note: available fields are: `madoka`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3e44053875552cbf8fbc194c2939969c89a65365", "filename": "src/test/ui/issue-20692.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-20692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-20692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-20692.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-20692.rs"}, {"sha": "08ce96ece6a3e1a884fcdeff27ce48fbacff6f8d", "filename": "src/test/ui/issue-20692.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-20692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-20692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-20692.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,19 @@\n+error[E0038]: the trait `Array` cannot be made into an object\n+  --> $DIR/issue-20692.rs:20:5\n+   |\n+20 |     &Array;\n+   |     ^^^^^^ the trait `Array` cannot be made into an object\n+   |\n+   = note: the trait cannot require that `Self : Sized`\n+\n+error[E0038]: the trait `Array` cannot be made into an object\n+  --> $DIR/issue-20692.rs:14:13\n+   |\n+14 |     let _ = x\n+   |             ^ the trait `Array` cannot be made into an object\n+   |\n+   = note: the trait cannot require that `Self : Sized`\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&Array>` for `&T`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "b7dbc7c7210cb3e386daa2ed3afeb78fa4ee73ea", "filename": "src/test/ui/issue-21546.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-21546.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-21546.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-21546.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-21546.rs"}, {"sha": "aea93ec1c8bd16941a54c83c080832d701261283", "filename": "src/test/ui/issue-21546.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-21546.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-21546.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-21546.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,68 @@\n+error[E0428]: the name `Foo` is defined multiple times\n+  --> $DIR/issue-21546.rs:18:1\n+   |\n+14 | mod Foo { }\n+   | ----------- previous definition of the module `Foo` here\n+...\n+18 | struct Foo;\n+   | ^^^^^^^^^^^ `Foo` redefined here\n+   |\n+   = note: `Foo` must be defined only once in the type namespace of this module\n+\n+error[E0428]: the name `Bar` is defined multiple times\n+  --> $DIR/issue-21546.rs:28:1\n+   |\n+24 | mod Bar { }\n+   | ----------- previous definition of the module `Bar` here\n+...\n+28 | struct Bar(i32);\n+   | ^^^^^^^^^^^^^^^^ `Bar` redefined here\n+   |\n+   = note: `Bar` must be defined only once in the type namespace of this module\n+\n+error[E0428]: the name `Baz` is defined multiple times\n+  --> $DIR/issue-21546.rs:39:1\n+   |\n+35 | struct Baz(i32);\n+   | ---------------- previous definition of the type `Baz` here\n+...\n+39 | mod Baz { }\n+   | ^^^^^^^^^^^ `Baz` redefined here\n+   |\n+   = note: `Baz` must be defined only once in the type namespace of this module\n+\n+error[E0428]: the name `Qux` is defined multiple times\n+  --> $DIR/issue-21546.rs:50:1\n+   |\n+46 | struct Qux { x: bool }\n+   | ---------------------- previous definition of the type `Qux` here\n+...\n+50 | mod Qux { }\n+   | ^^^^^^^^^^^ `Qux` redefined here\n+   |\n+   = note: `Qux` must be defined only once in the type namespace of this module\n+\n+error[E0428]: the name `Quux` is defined multiple times\n+  --> $DIR/issue-21546.rs:61:1\n+   |\n+57 | struct Quux;\n+   | ------------ previous definition of the type `Quux` here\n+...\n+61 | mod Quux { }\n+   | ^^^^^^^^^^^^ `Quux` redefined here\n+   |\n+   = note: `Quux` must be defined only once in the type namespace of this module\n+\n+error[E0428]: the name `Corge` is defined multiple times\n+  --> $DIR/issue-21546.rs:72:1\n+   |\n+68 | enum Corge { A, B }\n+   | ------------------- previous definition of the type `Corge` here\n+...\n+72 | mod Corge { }\n+   | ^^^^^^^^^^^^^ `Corge` redefined here\n+   |\n+   = note: `Corge` must be defined only once in the type namespace of this module\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "1d0473ec4b6510ea58ec5922041b8b654cadaac0", "filename": "src/test/ui/issue-21600.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-21600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-21600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-21600.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-21600.rs"}, {"sha": "4cbc4448f78b9a327ab571dbca30a1f0cac13561", "filename": "src/test/ui/issue-21600.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-21600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-21600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-21600.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,32 @@\n+error[E0387]: cannot borrow data mutably in a captured outer variable in an `Fn` closure\n+  --> $DIR/issue-21600.rs:24:17\n+   |\n+24 |         call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer\n+   |                 ^^\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/issue-21600.rs:22:13\n+   |\n+22 |       call_it(|| {    //~ HELP consider changing this to accept closures that implement `FnMut`\n+   |  _____________^\n+23 | |         call_it(|| x.gen());\n+24 | |         call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer\n+25 | |         //~^ ERROR cannot borrow data mutably in a captured outer\n+26 | |         //~| HELP consider changing this closure to take self by mutable reference\n+27 | |     });\n+   | |_____^\n+\n+error[E0387]: cannot borrow data mutably in a captured outer variable in an `Fn` closure\n+  --> $DIR/issue-21600.rs:24:20\n+   |\n+24 |         call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer\n+   |                    ^\n+   |\n+help: consider changing this closure to take self by mutable reference\n+  --> $DIR/issue-21600.rs:24:17\n+   |\n+24 |         call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer\n+   |                 ^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "935f3480db24abfd6cd3d845e1e757fcbc06f679", "filename": "src/test/ui/issue-21950.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-21950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-21950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-21950.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-21950.rs"}, {"sha": "123d61a261db152ea8e5beec77551dffa11e3315", "filename": "src/test/ui/issue-21950.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-21950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-21950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-21950.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,16 @@\n+error[E0393]: the type parameter `RHS` must be explicitly specified\n+  --> $DIR/issue-21950.rs:17:14\n+   |\n+17 |             &Add;\n+   |              ^^^ missing reference to `RHS`\n+   |\n+   = note: because of the default `Self` reference, type parameters must be specified on object types\n+\n+error[E0191]: the value of the associated type `Output` (from the trait `std::ops::Add`) must be specified\n+  --> $DIR/issue-21950.rs:17:14\n+   |\n+17 |             &Add;\n+   |              ^^^ missing associated type `Output` value\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "51f342e3f0a435dc79a650a955ed204babe18cfa", "filename": "src/test/ui/issue-22370.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-22370.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-22370.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22370.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-22370.rs"}, {"sha": "9498000ca56eb9bc9b95446027486c32103f4f06", "filename": "src/test/ui/issue-22370.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-22370.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-22370.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22370.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,10 @@\n+error[E0393]: the type parameter `T` must be explicitly specified\n+  --> $DIR/issue-22370.rs:15:10\n+   |\n+15 | fn f(a: &A) {}\n+   |          ^ missing reference to `T`\n+   |\n+   = note: because of the default `Self` reference, type parameters must be specified on object types\n+\n+error: aborting due to previous error\n+"}, {"sha": "914a3bd79d4602db7cf9c9aa93cd657103b9edb8", "filename": "src/test/ui/issue-22560.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-22560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-22560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22560.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-22560.rs"}, {"sha": "8eac545e40c208fd058db12465da869920e5ab8d", "filename": "src/test/ui/issue-22560.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22560.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,37 @@\n+error[E0393]: the type parameter `RHS` must be explicitly specified\n+  --> $DIR/issue-22560.rs:15:13\n+   |\n+15 | type Test = Add +\n+   |             ^^^ missing reference to `RHS`\n+   |\n+   = note: because of the default `Self` reference, type parameters must be specified on object types\n+\n+error[E0393]: the type parameter `RHS` must be explicitly specified\n+  --> $DIR/issue-22560.rs:21:13\n+   |\n+21 |             Sub;\n+   |             ^^^ missing reference to `RHS`\n+   |\n+   = note: because of the default `Self` reference, type parameters must be specified on object types\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/issue-22560.rs:21:13\n+   |\n+21 |             Sub;\n+   |             ^^^ non-auto additional trait\n+\n+error[E0191]: the value of the associated type `Output` (from the trait `std::ops::Add`) must be specified\n+  --> $DIR/issue-22560.rs:15:13\n+   |\n+15 |   type Test = Add +\n+   |  _____________^\n+16 | |             //~^ ERROR E0393\n+17 | |             //~| NOTE missing reference to `RHS`\n+18 | |             //~| NOTE because of the default `Self` reference, type parameters must be specified on object types\n+19 | |             //~| ERROR E0191\n+20 | |             //~| NOTE missing associated type `Output` value\n+21 | |             Sub;\n+   | |_______________^ missing associated type `Output` value\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "d258a4a8b3325b18149d8dd641a3c6d49534a46b", "filename": "src/test/ui/issue-22886.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-22886.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-22886.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22886.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-22886.rs"}, {"sha": "23d05edc919b33da774e307b03e056462e92e063", "filename": "src/test/ui/issue-22886.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-22886.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-22886.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22886.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-22886.rs:23:6\n+   |\n+23 | impl<'a> Iterator for Newtype { //~ ERROR E0207\n+   |      ^^ unconstrained lifetime parameter\n+\n+error: aborting due to previous error\n+"}, {"sha": "583f2ace4ba054b65a0678ff4b107cf5374499f8", "filename": "src/test/ui/issue-22933-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-22933-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-22933-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22933-2.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-22933-2.rs"}, {"sha": "29e4c02d435e37edf5fc94b7f0bf22a1e843df33", "filename": "src/test/ui/issue-22933-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-22933-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-22933-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22933-2.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,11 @@\n+error[E0599]: no variant named `PIE` found for type `Delicious` in the current scope\n+  --> $DIR/issue-22933-2.rs:14:44\n+   |\n+11 | enum Delicious { //~ NOTE variant `PIE` not found here\n+   | -------------- variant `PIE` not found here\n+...\n+14 |     ApplePie = Delicious::Apple as isize | Delicious::PIE as isize,\n+   |                                            ^^^^^^^^^^^^^^ variant not found in `Delicious`\n+\n+error: aborting due to previous error\n+"}, {"sha": "4dfad4ee3c385d25b164a94393d4100806a18122", "filename": "src/test/ui/issue-23041.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23041.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-23041.rs"}, {"sha": "048ae5834e3c4476c6c41cbfa41333003d7ad06d", "filename": "src/test/ui/issue-23041.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23041.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23041.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23041.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-23041.rs:16:22\n+   |\n+16 |     b.downcast_ref::<fn(_)->_>(); //~ ERROR E0282\n+   |                      ^^^^^^^^ cannot infer type for `_`\n+\n+error: aborting due to previous error\n+"}, {"sha": "c0983eb0e5257dc4a7f84e3ea5d648d1d7143339", "filename": "src/test/ui/issue-23173.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23173.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-23173.rs"}, {"sha": "2e1b9b45f93d6885643599c36e2b45a50b6de812", "filename": "src/test/ui/issue-23173.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23173.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,38 @@\n+error[E0599]: no variant named `Homura` found for type `Token` in the current scope\n+  --> $DIR/issue-23173.rs:23:16\n+   |\n+11 | enum Token { LeftParen, RightParen, Plus, Minus, /* etc */ }\n+   | ---------- variant `Homura` not found here\n+...\n+23 |     use_token(&Token::Homura);\n+   |                ^^^^^^^^^^^^^ variant not found in `Token`\n+\n+error[E0599]: no function or associated item named `method` found for type `Struct` in the current scope\n+  --> $DIR/issue-23173.rs:26:5\n+   |\n+13 | struct Struct {\n+   | ------------- function or associated item `method` not found for this\n+...\n+26 |     Struct::method();\n+   |     ^^^^^^^^^^^^^^ function or associated item not found in `Struct`\n+\n+error[E0599]: no function or associated item named `method` found for type `Struct` in the current scope\n+  --> $DIR/issue-23173.rs:29:5\n+   |\n+13 | struct Struct {\n+   | ------------- function or associated item `method` not found for this\n+...\n+29 |     Struct::method;\n+   |     ^^^^^^^^^^^^^^ function or associated item not found in `Struct`\n+\n+error[E0599]: no associated item named `Assoc` found for type `Struct` in the current scope\n+  --> $DIR/issue-23173.rs:32:5\n+   |\n+13 | struct Struct {\n+   | ------------- associated item `Assoc` not found for this\n+...\n+32 |     Struct::Assoc;\n+   |     ^^^^^^^^^^^^^ associated item not found in `Struct`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "cce0b99c04d79822727675b4197ba48d5445e45f", "filename": "src/test/ui/issue-23217.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23217.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23217.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23217.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-23217.rs"}, {"sha": "7c46a131f722d14a5aeb0c656f24fd84d7febe31", "filename": "src/test/ui/issue-23217.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23217.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23217.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23217.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,10 @@\n+error[E0599]: no variant named `A` found for type `SomeEnum` in the current scope\n+  --> $DIR/issue-23217.rs:12:9\n+   |\n+11 | pub enum SomeEnum { //~ NOTE variant `A` not found here\n+   | ----------------- variant `A` not found here\n+12 |     B = SomeEnum::A,\n+   |         ^^^^^^^^^^^ variant not found in `SomeEnum`\n+\n+error: aborting due to previous error\n+"}, {"sha": "35f32d16a9a2a7470ba98647c4e073749e9093d3", "filename": "src/test/ui/issue-23302.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-23302.rs"}, {"sha": "32caa7611ef55cda979ee6d1a1a7477572fd106b", "filename": "src/test/ui/issue-23302.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,26 @@\n+error[E0265]: recursive constant\n+  --> $DIR/issue-23302.rs:14:9\n+   |\n+14 |     A = X::A as isize, //~ ERROR E0265\n+   |         ^^^^^^^^^^^^^ recursion not allowed in constant\n+\n+error[E0265]: recursive constant\n+  --> $DIR/issue-23302.rs:21:9\n+   |\n+21 |     A = Y::B as isize, //~ ERROR E0265\n+   |         ^^^^^^^^^^^^^ recursion not allowed in constant\n+\n+error[E0265]: recursive constant\n+  --> $DIR/issue-23302.rs:26:1\n+   |\n+26 | const A: i32 = B; //~ ERROR E0265\n+   | ^^^^^^^^^^^^^^^^^ recursion not allowed in constant\n+\n+error[E0265]: recursive constant\n+  --> $DIR/issue-23302.rs:29:1\n+   |\n+29 | const B: i32 = A; //~ ERROR E0265\n+   | ^^^^^^^^^^^^^^^^^ recursion not allowed in constant\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "e1acc8eb475ac1cfe883573d5cba87425e2a4611", "filename": "src/test/ui/issue-23543.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23543.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23543.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23543.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-23543.rs"}, {"sha": "e5181960753bd2f0e21f0b9ada038a2acd686b6b", "filename": "src/test/ui/issue-23543.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23543.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23543.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23543.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/issue-23543.rs:17:17\n+   |\n+17 |         where T<Bogus = Foo>: A;\n+   |                 ^^^^^^^^^^^ associated type not allowed here\n+\n+error: aborting due to previous error\n+"}, {"sha": "3cd6f9ebc7185b8992c53c8cc37c0d29257eb549", "filename": "src/test/ui/issue-23544.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23544.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23544.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23544.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-23544.rs"}, {"sha": "496a7aff7b73118ba799b4eac9f43b91b19847ad", "filename": "src/test/ui/issue-23544.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23544.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/issue-23544.rs:15:17\n+   |\n+15 |         where T<Bogus = Self::AlsoBogus>: A;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ associated type not allowed here\n+\n+error: aborting due to previous error\n+"}, {"sha": "5cf80dd172a3de7538ef5a863396dd466c5e0903", "filename": "src/test/ui/issue-23716.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23716.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23716.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23716.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-23716.rs"}, {"sha": "cedff3318249a5ee3e8e3b1e99ee91c5f0b0a930", "filename": "src/test/ui/issue-23716.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23716.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-23716.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23716.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,20 @@\n+error[E0530]: function parameters cannot shadow statics\n+  --> $DIR/issue-23716.rs:14:8\n+   |\n+11 | static foo: i32 = 0;\n+   | -------------------- a static `foo` is defined here\n+...\n+14 | fn bar(foo: i32) {}\n+   |        ^^^ cannot be named the same as a static\n+\n+error[E0530]: function parameters cannot shadow statics\n+  --> $DIR/issue-23716.rs:25:13\n+   |\n+22 | use self::submod::answer;\n+   |     -------------------- a static `answer` is imported here\n+...\n+25 | fn question(answer: i32) {}\n+   |             ^^^^^^ cannot be named the same as a static\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "ac7e0f2e9a8678b1ee2f0ee9d60a963249f44f8b", "filename": "src/test/ui/issue-24036.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-24036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-24036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24036.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-24036.rs"}, {"sha": "8486c14417c5b5385cf5af3ef731a64e6e63f7ab", "filename": "src/test/ui/issue-24036.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-24036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-24036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24036.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,63 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-24036.rs:13:9\n+   |\n+13 |     x = |c| c + 1;\n+   |         ^^^^^^^^^ expected closure, found a different closure\n+   |\n+   = note: expected type `[closure@$DIR/issue-24036.rs:12:17: 12:26]`\n+              found type `[closure@$DIR/issue-24036.rs:13:9: 13:18]`\n+note: no two closures, even if identical, have the same type\n+  --> $DIR/issue-24036.rs:13:9\n+   |\n+13 |     x = |c| c + 1;\n+   |         ^^^^^^^^^\n+help: consider boxing your closure and/or using it as a trait object\n+  --> $DIR/issue-24036.rs:13:9\n+   |\n+13 |     x = |c| c + 1;\n+   |         ^^^^^^^^^\n+\n+error[E0308]: match arms have incompatible types\n+  --> $DIR/issue-24036.rs:23:13\n+   |\n+23 |       let x = match 1usize {\n+   |  _____________^\n+24 | |         1 => |c| c + 1,\n+25 | |         2 => |c| c - 1,\n+26 | |         //~^ NOTE match arm with an incompatible type\n+27 | |         _ => |c| c - 1\n+28 | |     };\n+   | |_____^ expected closure, found a different closure\n+   |\n+   = note: expected type `[closure@$DIR/issue-24036.rs:24:14: 24:23]`\n+              found type `[closure@$DIR/issue-24036.rs:25:14: 25:23]`\n+note: no two closures, even if identical, have the same type\n+  --> $DIR/issue-24036.rs:23:13\n+   |\n+23 |       let x = match 1usize {\n+   |  _____________^\n+24 | |         1 => |c| c + 1,\n+25 | |         2 => |c| c - 1,\n+26 | |         //~^ NOTE match arm with an incompatible type\n+27 | |         _ => |c| c - 1\n+28 | |     };\n+   | |_____^\n+help: consider boxing your closure and/or using it as a trait object\n+  --> $DIR/issue-24036.rs:23:13\n+   |\n+23 |       let x = match 1usize {\n+   |  _____________^\n+24 | |         1 => |c| c + 1,\n+25 | |         2 => |c| c - 1,\n+26 | |         //~^ NOTE match arm with an incompatible type\n+27 | |         _ => |c| c - 1\n+28 | |     };\n+   | |_____^\n+note: match arm with an incompatible type\n+  --> $DIR/issue-24036.rs:25:14\n+   |\n+25 |         2 => |c| c - 1,\n+   |              ^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "dc8fc01bbfcfa0291512c4b3ff56a332729e70a8", "filename": "src/test/ui/issue-24081.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-24081.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-24081.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24081.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-24081.rs"}, {"sha": "599f23b84623f82f6e9b500ea546c1d2f5ef936c", "filename": "src/test/ui/issue-24081.stderr", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-24081.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-24081.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24081.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,77 @@\n+error[E0255]: the name `Add` is defined multiple times\n+  --> $DIR/issue-24081.rs:17:1\n+   |\n+11 | use std::ops::Add; //~ NOTE previous import of the trait `Add` here\n+   |     ------------- previous import of the trait `Add` here\n+...\n+17 | type Add = bool; //~ ERROR the name `Add` is defined multiple times\n+   | ^^^^^^^^^^^^^^^^ `Add` redefined here\n+   |\n+   = note: `Add` must be defined only once in the type namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+11 | use std::ops::Add as OtherAdd; //~ NOTE previous import of the trait `Add` here\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0255]: the name `Sub` is defined multiple times\n+  --> $DIR/issue-24081.rs:20:1\n+   |\n+12 | use std::ops::Sub; //~ NOTE previous import of the trait `Sub` here\n+   |     ------------- previous import of the trait `Sub` here\n+...\n+20 | struct Sub { x: f32 } //~ ERROR the name `Sub` is defined multiple times\n+   | ^^^^^^^^^^^^^^^^^^^^^ `Sub` redefined here\n+   |\n+   = note: `Sub` must be defined only once in the type namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+12 | use std::ops::Sub as OtherSub; //~ NOTE previous import of the trait `Sub` here\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0255]: the name `Mul` is defined multiple times\n+  --> $DIR/issue-24081.rs:23:1\n+   |\n+13 | use std::ops::Mul; //~ NOTE previous import of the trait `Mul` here\n+   |     ------------- previous import of the trait `Mul` here\n+...\n+23 | enum Mul { A, B } //~ ERROR the name `Mul` is defined multiple times\n+   | ^^^^^^^^^^^^^^^^^ `Mul` redefined here\n+   |\n+   = note: `Mul` must be defined only once in the type namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+13 | use std::ops::Mul as OtherMul; //~ NOTE previous import of the trait `Mul` here\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0255]: the name `Div` is defined multiple times\n+  --> $DIR/issue-24081.rs:26:1\n+   |\n+14 | use std::ops::Div; //~ NOTE previous import of the trait `Div` here\n+   |     ------------- previous import of the trait `Div` here\n+...\n+26 | mod Div { } //~ ERROR the name `Div` is defined multiple times\n+   | ^^^^^^^^^^^ `Div` redefined here\n+   |\n+   = note: `Div` must be defined only once in the type namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+14 | use std::ops::Div as OtherDiv; //~ NOTE previous import of the trait `Div` here\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0255]: the name `Rem` is defined multiple times\n+  --> $DIR/issue-24081.rs:29:1\n+   |\n+15 | use std::ops::Rem; //~ NOTE previous import of the trait `Rem` here\n+   |     ------------- previous import of the trait `Rem` here\n+...\n+29 | trait Rem {  } //~ ERROR the name `Rem` is defined multiple times\n+   | ^^^^^^^^^^^^^^ `Rem` redefined here\n+   |\n+   = note: `Rem` must be defined only once in the type namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+15 | use std::ops::Rem as OtherRem; //~ NOTE previous import of the trait `Rem` here\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "8d4ea66f08197f456ed3875161968e588e5c0668", "filename": "src/test/ui/issue-24424.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-24424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-24424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24424.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-24424.rs"}, {"sha": "acdf348791b204f84dbcc3e15f34903415dd62ce", "filename": "src/test/ui/issue-24424.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24424.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,10 @@\n+error[E0283]: type annotations required: cannot resolve `T0: Trait0<'l0>`\n+  --> $DIR/issue-24424.rs:14:1\n+   |\n+14 | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: required by `Trait0`\n+\n+error: aborting due to previous error\n+"}, {"sha": "4aacb6840e9d51f22a578ba7c8cc950c08aed1e5", "filename": "src/test/ui/issue-25385.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-25385.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-25385.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-25385.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-25385.rs"}, {"sha": "2e000115ae87dfc94109fe82c9d07a7d3cda25f1", "filename": "src/test/ui/issue-25385.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-25385.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-25385.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-25385.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,17 @@\n+error[E0599]: no method named `foo` found for type `i32` in the current scope\n+  --> $DIR/issue-25385.rs:13:23\n+   |\n+13 |     ($e:expr) => { $e.foo() }\n+   |                       ^^^\n+...\n+19 |     foo!(a);\n+   |     -------- in this macro invocation\n+\n+error[E0599]: no method named `foo` found for type `i32` in the current scope\n+  --> $DIR/issue-25385.rs:22:15\n+   |\n+22 |     foo!(1i32.foo());\n+   |               ^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "ceefd583a5ca6f1b22de8dd9c8403e625297ec08", "filename": "src/test/ui/issue-25793.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-25793.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-25793.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-25793.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-25793.rs"}, {"sha": "2a8368c47a945968a70dd3567eeece1196b764be", "filename": "src/test/ui/issue-25793.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-25793.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-25793.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-25793.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,13 @@\n+error[E0503]: cannot use `self.width` because it was mutably borrowed\n+  --> $DIR/issue-25793.rs:13:9\n+   |\n+13 |         $this.width.unwrap()\n+   |         ^^^^^^^^^^^ use of borrowed `*self`\n+...\n+29 |         self.get_size(width!(self))\n+   |         ----          ------------ in this macro invocation\n+   |         |\n+   |         borrow of `*self` occurs here\n+\n+error: aborting due to previous error\n+"}, {"sha": "468282fa7cca9cfaa0997e52537f7eba34a3d8ae", "filename": "src/test/ui/issue-25826.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-25826.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-25826.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-25826.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-25826.rs"}, {"sha": "3b6599ccbd6da7a5527d263fc897b49e99874b7e", "filename": "src/test/ui/issue-25826.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-25826.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-25826.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-25826.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0395]: raw pointers cannot be compared in constants\n+  --> $DIR/issue-25826.rs:13:21\n+   |\n+13 |     const A: bool = id::<u8> as *const () < id::<u16> as *const ();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ comparing raw pointers in static\n+\n+error: aborting due to previous error\n+"}, {"sha": "ded685152d49b63c83a0371c41e6cabcc301e369", "filename": "src/test/ui/issue-26056.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26056.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26056.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26056.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-26056.rs"}, {"sha": "b95438314c398eb554c8f712f8b6eea693d18934", "filename": "src/test/ui/issue-26056.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26056.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26056.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26056.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,10 @@\n+error[E0038]: the trait `Map` cannot be made into an object\n+  --> $DIR/issue-26056.rs:30:13\n+   |\n+30 |         as &Map<Key=u32,MapValue=u32>;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Map` cannot be made into an object\n+   |\n+   = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n+\n+error: aborting due to previous error\n+"}, {"sha": "39a53648ccf8a126ee6200b3f89fe2ab1fb06dae", "filename": "src/test/ui/issue-26093.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26093.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26093.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26093.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-26093.rs"}, {"sha": "1af248d1631a0ec96afabe771a9a8f86d67bf70d", "filename": "src/test/ui/issue-26093.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26093.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26093.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26093.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,11 @@\n+error[E0070]: invalid left-hand side expression\n+  --> $DIR/issue-26093.rs:13:9\n+   |\n+13 |         $thing = 42;\n+   |         ^^^^^^^^^^^ left-hand of expression not valid\n+...\n+20 |     not_an_lvalue!(99);\n+   |     ------------------- in this macro invocation\n+\n+error: aborting due to previous error\n+"}, {"sha": "0d59a897ef1af419f71d69f0cc83739cddf5b6e0", "filename": "src/test/ui/issue-26472.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26472.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26472.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26472.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-26472.rs"}, {"sha": "5b61aa98c3f97e11a8ad992628513729a097b202", "filename": "src/test/ui/issue-26472.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26472.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,10 @@\n+error[E0616]: field `len` of struct `sub::S` is private\n+  --> $DIR/issue-26472.rs:21:13\n+   |\n+21 |     let v = s.len;\n+   |             ^^^^^\n+   |\n+   = note: a method `len` also exists, perhaps you wish to call it\n+\n+error: aborting due to previous error\n+"}, {"sha": "9b8c7b250763ef100c3cda9fa2e1f2d55b05bc1f", "filename": "src/test/ui/issue-26638.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26638.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-26638.rs"}, {"sha": "733c46adbf97864c57d31b40eb82839a55e83610", "filename": "src/test/ui/issue-26638.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26638.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,28 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-26638.rs:11:58\n+   |\n+11 | fn parse_type(iter: Box<Iterator<Item=&str>+'static>) -> &str { iter.next() }\n+   |                                                          ^ expected lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say which one of `iter`'s 2 lifetimes it is borrowed from\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-26638.rs:15:40\n+   |\n+15 | fn parse_type_2(iter: fn(&u8)->&u8) -> &str { iter() }\n+   |                                        ^ expected lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+   = help: consider giving it an explicit bounded or 'static lifetime\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-26638.rs:20:22\n+   |\n+20 | fn parse_type_3() -> &str { unimplemented!() }\n+   |                      ^ expected lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+   = help: consider giving it a 'static lifetime\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "9b1950601961f9a0df23a83c4b4f6f25602d10ce", "filename": "src/test/ui/issue-26886.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26886.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26886.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26886.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-26886.rs"}, {"sha": "1cdf5174a9697b1a70d2124ebbf3a02c3dfc4f80", "filename": "src/test/ui/issue-26886.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26886.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-26886.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26886.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,32 @@\n+error[E0252]: the name `Arc` is defined multiple times\n+  --> $DIR/issue-26886.rs:13:5\n+   |\n+11 | use std::sync::{self, Arc}; //~ NOTE previous import of the type `Arc` here\n+   |                       --- previous import of the type `Arc` here\n+12 |                             //~^ NOTE previous import of the module `sync` here\n+13 | use std::sync::Arc; //~ ERROR the name `Arc` is defined multiple times\n+   |     ^^^^^^^^^^^^^^ `Arc` reimported here\n+   |\n+   = note: `Arc` must be defined only once in the type namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+13 | use std::sync::Arc as OtherArc; //~ ERROR the name `Arc` is defined multiple times\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0252]: the name `sync` is defined multiple times\n+  --> $DIR/issue-26886.rs:16:5\n+   |\n+11 | use std::sync::{self, Arc}; //~ NOTE previous import of the type `Arc` here\n+   |                 ---- previous import of the module `sync` here\n+...\n+16 | use std::sync; //~ ERROR the name `sync` is defined multiple times\n+   |     ^^^^^^^^^ `sync` reimported here\n+   |\n+   = note: `sync` must be defined only once in the type namespace of this module\n+help: You can use `as` to change the binding name of the import\n+   |\n+16 | use std::sync as Othersync; //~ ERROR the name `sync` is defined multiple times\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "b4cfa6072927d7f753b9b53c1ad2fc4d82690d32", "filename": "src/test/ui/issue-27842.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-27842.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-27842.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27842.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -14,7 +14,6 @@ fn main() {\n     let _ = tup[0];\n     //~^ ERROR cannot index into a value of type\n     //~| HELP to access tuple elements, use\n-    //~| SUGGESTION tup.0\n \n     // the case where we show just a general hint\n     let i = 0_usize;", "previous_filename": "src/test/compile-fail/issue-27842.rs"}, {"sha": "30bc3a85a1161bfcd8070c143272203985a5bb88", "filename": "src/test/ui/issue-27842.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-27842.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-27842.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27842.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,16 @@\n+error[E0608]: cannot index into a value of type `({integer}, {integer}, {integer})`\n+  --> $DIR/issue-27842.rs:14:13\n+   |\n+14 |     let _ = tup[0];\n+   |             ^^^^^^ help: to access tuple elements, use: `tup.0`\n+\n+error[E0608]: cannot index into a value of type `({integer}, {integer}, {integer})`\n+  --> $DIR/issue-27842.rs:20:13\n+   |\n+20 |     let _ = tup[i];\n+   |             ^^^^^^\n+   |\n+   = help: to access tuple elements, use tuple indexing syntax (e.g. `tuple.0`)\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "0fa4184606e452b348205688ad9f851853711bde", "filename": "src/test/ui/issue-27942.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-27942.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-27942.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27942.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-27942.rs"}, {"sha": "528377adcb705e2158e91d5b72e26c0b7a4bb72e", "filename": "src/test/ui/issue-27942.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-27942.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-27942.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27942.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,52 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-27942.rs:17:5\n+   |\n+17 |     fn select(&self) -> BufferViewHandle<R>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `Resources<'_>`\n+              found type `Resources<'a>`\n+note: the anonymous lifetime #1 defined on the method body at 17:5...\n+  --> $DIR/issue-27942.rs:17:5\n+   |\n+17 |     fn select(&self) -> BufferViewHandle<R>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...does not necessarily outlive the lifetime 'a as defined on the trait at 13:1\n+  --> $DIR/issue-27942.rs:13:1\n+   |\n+13 | / pub trait Buffer<'a, R: Resources<'a>> {\n+14 | |     //~^ NOTE the lifetime 'a as defined on the trait at 13:1...\n+15 | |     //~| NOTE ...does not necessarily outlive the lifetime 'a as defined on the trait\n+16 | |\n+...  |\n+25 | |     //~| NOTE the anonymous lifetime #1 defined on the method body at 17:5...\n+26 | | }\n+   | |_^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-27942.rs:17:5\n+   |\n+17 |     fn select(&self) -> BufferViewHandle<R>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `Resources<'_>`\n+              found type `Resources<'a>`\n+note: the lifetime 'a as defined on the trait at 13:1...\n+  --> $DIR/issue-27942.rs:13:1\n+   |\n+13 | / pub trait Buffer<'a, R: Resources<'a>> {\n+14 | |     //~^ NOTE the lifetime 'a as defined on the trait at 13:1...\n+15 | |     //~| NOTE ...does not necessarily outlive the lifetime 'a as defined on the trait\n+16 | |\n+...  |\n+25 | |     //~| NOTE the anonymous lifetime #1 defined on the method body at 17:5...\n+26 | | }\n+   | |_^\n+note: ...does not necessarily outlive the anonymous lifetime #1 defined on the method body at 17:5\n+  --> $DIR/issue-27942.rs:17:5\n+   |\n+17 |     fn select(&self) -> BufferViewHandle<R>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "38bd7adefd91f758c024dbfa41f12ab9c48034a5", "filename": "src/test/ui/issue-2848.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-2848.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-2848.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-2848.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-2848.rs"}, {"sha": "6d4ed9c01111fa2409970188570fd5fece6616f4", "filename": "src/test/ui/issue-2848.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-2848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-2848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-2848.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,10 @@\n+error[E0408]: variable `beta` is not bound in all patterns\n+  --> $DIR/issue-2848.rs:22:7\n+   |\n+22 |       alpha | beta => {} //~  ERROR variable `beta` is not bound in all patterns\n+   |       ^^^^^   ---- variable not in all patterns\n+   |       |\n+   |       pattern doesn't bind `beta`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f03daafc63754b533828feddb9f3d8641c0d0c3b", "filename": "src/test/ui/issue-28568.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-28568.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-28568.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28568.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-28568.rs"}, {"sha": "19e15502487814c6860408916a4b6a5f2701432f", "filename": "src/test/ui/issue-28568.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-28568.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-28568.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28568.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,18 @@\n+error[E0119]: conflicting implementations of trait `std::ops::Drop` for type `MyStruct`:\n+  --> $DIR/issue-28568.rs:18:1\n+   |\n+13 | / impl Drop for MyStruct {\n+14 | | //~^ NOTE first implementation here\n+15 | |     fn drop(&mut self) { }\n+16 | | }\n+   | |_- first implementation here\n+17 | \n+18 | / impl Drop for MyStruct {\n+19 | | //~^ ERROR conflicting implementations of trait\n+20 | | //~| NOTE conflicting implementation for `MyStruct`\n+21 | |     fn drop(&mut self) { }\n+22 | | }\n+   | |_^ conflicting implementation for `MyStruct`\n+\n+error: aborting due to previous error\n+"}, {"sha": "4a36bc88fa7d9d7aae7f5ca4daa8f703e0ccd88a", "filename": "src/test/ui/issue-28776.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-28776.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-28776.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28776.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-28776.rs"}, {"sha": "cf24a8312af9b553fb62bf42679a3651d69a797f", "filename": "src/test/ui/issue-28776.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-28776.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-28776.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28776.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0133]: call to unsafe function requires unsafe function or block\n+  --> $DIR/issue-28776.rs:14:5\n+   |\n+14 |     (&ptr::write)(1 as *mut _, 42);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+\n+error: aborting due to previous error\n+"}, {"sha": "c7cf63bf2c46693c11aca1c6af234757424072a3", "filename": "src/test/ui/issue-28837.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-28837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-28837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28837.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-28837.rs"}, {"sha": "71f9d57a0657bcbdcfbc01f0c9a0a5ecd8071d22", "filename": "src/test/ui/issue-28837.stderr", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-28837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-28837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28837.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,122 @@\n+error[E0369]: binary operation `+` cannot be applied to type `A`\n+  --> $DIR/issue-28837.rs:16:5\n+   |\n+16 |     a + a; //~ ERROR binary operation `+` cannot be applied to type `A`\n+   |     ^^^^^\n+   |\n+   = note: an implementation of `std::ops::Add` might be missing for `A`\n+\n+error[E0369]: binary operation `-` cannot be applied to type `A`\n+  --> $DIR/issue-28837.rs:19:5\n+   |\n+19 |     a - a; //~ ERROR binary operation `-` cannot be applied to type `A`\n+   |     ^^^^^\n+   |\n+   = note: an implementation of `std::ops::Sub` might be missing for `A`\n+\n+error[E0369]: binary operation `*` cannot be applied to type `A`\n+  --> $DIR/issue-28837.rs:22:5\n+   |\n+22 |     a * a; //~ ERROR binary operation `*` cannot be applied to type `A`\n+   |     ^^^^^\n+   |\n+   = note: an implementation of `std::ops::Mul` might be missing for `A`\n+\n+error[E0369]: binary operation `/` cannot be applied to type `A`\n+  --> $DIR/issue-28837.rs:25:5\n+   |\n+25 |     a / a; //~ ERROR binary operation `/` cannot be applied to type `A`\n+   |     ^^^^^\n+   |\n+   = note: an implementation of `std::ops::Div` might be missing for `A`\n+\n+error[E0369]: binary operation `%` cannot be applied to type `A`\n+  --> $DIR/issue-28837.rs:28:5\n+   |\n+28 |     a % a; //~ ERROR binary operation `%` cannot be applied to type `A`\n+   |     ^^^^^\n+   |\n+   = note: an implementation of `std::ops::Rem` might be missing for `A`\n+\n+error[E0369]: binary operation `&` cannot be applied to type `A`\n+  --> $DIR/issue-28837.rs:31:5\n+   |\n+31 |     a & a; //~ ERROR binary operation `&` cannot be applied to type `A`\n+   |     ^^^^^\n+   |\n+   = note: an implementation of `std::ops::BitAnd` might be missing for `A`\n+\n+error[E0369]: binary operation `|` cannot be applied to type `A`\n+  --> $DIR/issue-28837.rs:34:5\n+   |\n+34 |     a | a; //~ ERROR binary operation `|` cannot be applied to type `A`\n+   |     ^^^^^\n+   |\n+   = note: an implementation of `std::ops::BitOr` might be missing for `A`\n+\n+error[E0369]: binary operation `<<` cannot be applied to type `A`\n+  --> $DIR/issue-28837.rs:37:5\n+   |\n+37 |     a << a; //~ ERROR binary operation `<<` cannot be applied to type `A`\n+   |     ^^^^^^\n+   |\n+   = note: an implementation of `std::ops::Shl` might be missing for `A`\n+\n+error[E0369]: binary operation `>>` cannot be applied to type `A`\n+  --> $DIR/issue-28837.rs:40:5\n+   |\n+40 |     a >> a; //~ ERROR binary operation `>>` cannot be applied to type `A`\n+   |     ^^^^^^\n+   |\n+   = note: an implementation of `std::ops::Shr` might be missing for `A`\n+\n+error[E0369]: binary operation `==` cannot be applied to type `A`\n+  --> $DIR/issue-28837.rs:43:5\n+   |\n+43 |     a == a; //~ ERROR binary operation `==` cannot be applied to type `A`\n+   |     ^^^^^^\n+   |\n+   = note: an implementation of `std::cmp::PartialEq` might be missing for `A`\n+\n+error[E0369]: binary operation `!=` cannot be applied to type `A`\n+  --> $DIR/issue-28837.rs:46:5\n+   |\n+46 |     a != a; //~ ERROR binary operation `!=` cannot be applied to type `A`\n+   |     ^^^^^^\n+   |\n+   = note: an implementation of `std::cmp::PartialEq` might be missing for `A`\n+\n+error[E0369]: binary operation `<` cannot be applied to type `A`\n+  --> $DIR/issue-28837.rs:49:5\n+   |\n+49 |     a < a; //~ ERROR binary operation `<` cannot be applied to type `A`\n+   |     ^^^^^\n+   |\n+   = note: an implementation of `std::cmp::PartialOrd` might be missing for `A`\n+\n+error[E0369]: binary operation `<=` cannot be applied to type `A`\n+  --> $DIR/issue-28837.rs:52:5\n+   |\n+52 |     a <= a; //~ ERROR binary operation `<=` cannot be applied to type `A`\n+   |     ^^^^^^\n+   |\n+   = note: an implementation of `std::cmp::PartialOrd` might be missing for `A`\n+\n+error[E0369]: binary operation `>` cannot be applied to type `A`\n+  --> $DIR/issue-28837.rs:55:5\n+   |\n+55 |     a > a; //~ ERROR binary operation `>` cannot be applied to type `A`\n+   |     ^^^^^\n+   |\n+   = note: an implementation of `std::cmp::PartialOrd` might be missing for `A`\n+\n+error[E0369]: binary operation `>=` cannot be applied to type `A`\n+  --> $DIR/issue-28837.rs:58:5\n+   |\n+58 |     a >= a; //~ ERROR binary operation `>=` cannot be applied to type `A`\n+   |     ^^^^^^\n+   |\n+   = note: an implementation of `std::cmp::PartialOrd` might be missing for `A`\n+\n+error: aborting due to 15 previous errors\n+"}, {"sha": "10be4d6210d7adbdd747db9d55343f71025fd048", "filename": "src/test/ui/issue-28971.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-28971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-28971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28971.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-28971.rs"}, {"sha": "6a2cf0443735bd36b3bdb065b62ac5e30cd991ac", "filename": "src/test/ui/issue-28971.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-28971.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-28971.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28971.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,11 @@\n+error[E0599]: no variant named `Baz` found for type `Foo` in the current scope\n+  --> $DIR/issue-28971.rs:19:13\n+   |\n+13 | enum Foo { //~ NOTE variant `Baz` not found here\n+   | -------- variant `Baz` not found here\n+...\n+19 |             Foo::Baz(..) => (),\n+   |             ^^^^^^^^^^^^ variant not found in `Foo`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a72dac0d5dd68bbefee3e89b1be95a7b134fd61e", "filename": "src/test/ui/issue-29124.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-29124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-29124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-29124.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-29124.rs"}, {"sha": "7c350b18752bcfc8dfed7ef29197453454949ebb", "filename": "src/test/ui/issue-29124.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-29124.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-29124.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-29124.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,18 @@\n+error[E0599]: no method named `x` found for type `fn() -> ret {obj::func}` in the current scope\n+  --> $DIR/issue-29124.rs:25:15\n+   |\n+25 |     obj::func.x();\n+   |               ^\n+   |\n+   = note: obj::func is a function, perhaps you wish to call it\n+\n+error[E0599]: no method named `x` found for type `fn() -> ret {func}` in the current scope\n+  --> $DIR/issue-29124.rs:28:10\n+   |\n+28 |     func.x();\n+   |          ^\n+   |\n+   = note: func is a function, perhaps you wish to call it\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "fa0b75da999c29127d17e8f42b975f8dda479376", "filename": "src/test/ui/issue-30007.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-30007.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-30007.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30007.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-30007.rs"}, {"sha": "cf4bc10a3d75688cc36cd3396f05f81f349f4f5b", "filename": "src/test/ui/issue-30007.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-30007.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-30007.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30007.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,14 @@\n+error: macro expansion ignores token `;` and any following\n+  --> $DIR/issue-30007.rs:12:20\n+   |\n+12 |     () => ( String ; );     //~ ERROR macro expansion ignores token `;`\n+   |                    ^\n+   |\n+note: caused by the macro expansion here; the usage of `t!` is likely invalid in type context\n+  --> $DIR/issue-30007.rs:16:16\n+   |\n+16 |     let i: Vec<t!()>;       //~ NOTE caused by the macro expansion here\n+   |                ^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "7ca6d9301a689349dd12362f1cd55184b1385003", "filename": "src/test/ui/issue-3008-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-3008-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-3008-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-3008-1.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-3008-1.rs"}, {"sha": "7d1e139e5ce646141fa4fb63c9cd7e6a4de16ba6", "filename": "src/test/ui/issue-3008-1.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-3008-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-3008-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-3008-1.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,13 @@\n+error[E0072]: recursive type `Bar` has infinite size\n+  --> $DIR/issue-3008-1.rs:15:1\n+   |\n+15 | enum Bar {\n+   | ^^^^^^^^ recursive type has infinite size\n+...\n+19 |     BarSome(Bar)  //~ NOTE recursive without indirection\n+   |             ---- recursive without indirection\n+   |\n+   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Bar` representable\n+\n+error: aborting due to previous error\n+"}, {"sha": "061d1facda0ca7cf13232e389b8e89b775a5824d", "filename": "src/test/ui/issue-3008-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-3008-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-3008-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-3008-2.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-3008-2.rs"}, {"sha": "2d5e2966df9c6ff70e301c34dfaf7b0d65df66e6", "filename": "src/test/ui/issue-3008-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-3008-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-3008-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-3008-2.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,12 @@\n+error[E0072]: recursive type `bar` has infinite size\n+  --> $DIR/issue-3008-2.rs:12:1\n+   |\n+12 | struct bar { x: bar }\n+   | ^^^^^^^^^^   ------ recursive without indirection\n+   | |\n+   | recursive type has infinite size\n+   |\n+   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `bar` representable\n+\n+error: aborting due to previous error\n+"}, {"sha": "e3f55ae51e8b65f28e98459167ecb378107a9a6c", "filename": "src/test/ui/issue-30255.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-30255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-30255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30255.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-30255.rs"}, {"sha": "54b14bc6419ce91c81a2b4338f2152deea74ee2f", "filename": "src/test/ui/issue-30255.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-30255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-30255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30255.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,26 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-30255.rs:18:24\n+   |\n+18 | fn f(a: &S, b: i32) -> &i32 {\n+   |                        ^ expected lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say which one of `a`'s 2 lifetimes it is borrowed from\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-30255.rs:24:34\n+   |\n+24 | fn g(a: &S, b: bool, c: &i32) -> &i32 {\n+   |                                  ^ expected lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from one of `a`'s 2 lifetimes or `c`\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-30255.rs:30:44\n+   |\n+30 | fn h(a: &bool, b: bool, c: &S, d: &i32) -> &i32 {\n+   |                                            ^ expected lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `a`, one of `c`'s 2 lifetimes, or `d`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "01150ff13740f1446a06b8922507e0578c0af552", "filename": "src/test/ui/issue-30302.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-30302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-30302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30302.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-30302.rs"}, {"sha": "b880a4e0ea2216e24892fa73d9e3932b1fa22e4c", "filename": "src/test/ui/issue-30302.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-30302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-30302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30302.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,27 @@\n+warning[E0170]: pattern binding `Nil` is named the same as one of the variants of the type `Stack`\n+  --> $DIR/issue-30302.rs:23:9\n+   |\n+23 |         Nil => true,\n+   |         ^^^\n+   |\n+   = help: if you meant to match on a variant, consider making the path in the pattern qualified: `Stack::Nil`\n+\n+error: unreachable pattern\n+  --> $DIR/issue-30302.rs:26:9\n+   |\n+26 |         _ => false\n+   |         ^ this is an unreachable pattern\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-30302.rs:14:9\n+   |\n+14 | #![deny(unreachable_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+note: this pattern matches any value\n+  --> $DIR/issue-30302.rs:23:9\n+   |\n+23 |         Nil => true,\n+   |         ^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "4c63f7761a6dce3e488c0c2e7027b74ad7fc9316", "filename": "src/test/ui/issue-3044.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-3044.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-3044.rs"}, {"sha": "3fede94c115f2549e7fe00dc9127c7568171127a", "filename": "src/test/ui/issue-3044.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-3044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-3044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-3044.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,10 @@\n+error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n+  --> $DIR/issue-3044.rs:14:28\n+   |\n+14 |       needlesArr.iter().fold(|x, y| {\n+   |  ____________________________^\n+15 | |     });\n+   | |_____^ expected 2 parameters\n+\n+error: aborting due to previous error\n+"}, {"sha": "d1af39a6c1872497cf27b4236535e6e76dcf6024", "filename": "src/test/ui/issue-30730.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-30730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-30730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30730.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-30730.rs"}, {"sha": "1a91ee2e84174948f92d08584bffb39a07bb11b0", "filename": "src/test/ui/issue-30730.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-30730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-30730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30730.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,15 @@\n+error: unused import: `std::thread`\n+  --> $DIR/issue-30730.rs:13:5\n+   |\n+13 | use std::thread;\n+   |     ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-30730.rs:12:9\n+   |\n+12 | #![deny(warnings)] //~ NOTE: lint level defined here\n+   |         ^^^^^^^^\n+   = note: #[deny(unused_imports)] implied by #[deny(warnings)]\n+\n+error: aborting due to previous error\n+"}, {"sha": "8701ca0178fc98e7a1c499c46b15a977121eaeb4", "filename": "src/test/ui/issue-31221.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-31221.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-31221.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-31221.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-31221.rs"}, {"sha": "13a2e5aeef7b58a5f4e69469c8e2b923535cb885", "filename": "src/test/ui/issue-31221.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-31221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-31221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-31221.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,43 @@\n+error: unreachable pattern\n+  --> $DIR/issue-31221.rs:30:9\n+   |\n+30 |         Var2 => (),\n+   |         ^^^^ this is an unreachable pattern\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-31221.rs:14:9\n+   |\n+14 | #![deny(unreachable_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+note: this pattern matches any value\n+  --> $DIR/issue-31221.rs:28:9\n+   |\n+28 |         Var3 => (),\n+   |         ^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/issue-31221.rs:38:9\n+   |\n+38 |         &Var2 => (),\n+   |         ^^^^^ this is an unreachable pattern\n+   |\n+note: this pattern matches any value\n+  --> $DIR/issue-31221.rs:36:9\n+   |\n+36 |         &Var3 => (),\n+   |         ^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/issue-31221.rs:47:9\n+   |\n+47 |         anything => ()\n+   |         ^^^^^^^^ this is an unreachable pattern\n+   |\n+note: this pattern matches any value\n+  --> $DIR/issue-31221.rs:45:9\n+   |\n+45 |         (c, d) => (),\n+   |         ^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "70a7cd8b9702128acfaaf0e373c5c9fcbc0cb95e", "filename": "src/test/ui/issue-32326.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-32326.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-32326.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-32326.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-32326.rs"}, {"sha": "79110a0547507ab8290092f373a0592284dbaf65", "filename": "src/test/ui/issue-32326.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-32326.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-32326.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-32326.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,15 @@\n+error[E0072]: recursive type `Expr` has infinite size\n+  --> $DIR/issue-32326.rs:15:1\n+   |\n+15 | enum Expr { //~ ERROR E0072\n+   | ^^^^^^^^^ recursive type has infinite size\n+16 |             //~| NOTE recursive type has infinite size\n+17 |     Plus(Expr, Expr),\n+   |          ----- ----- recursive without indirection\n+   |          |\n+   |          recursive without indirection\n+   |\n+   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Expr` representable\n+\n+error: aborting due to previous error\n+"}, {"sha": "20e5b1d72d3d71a9f8ce4c9e716b1f1362db9f8c", "filename": "src/test/ui/issue-32950.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-32950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-32950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-32950.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-32950.rs"}, {"sha": "0933c81d6556098968bf3934270f42f4e57343af", "filename": "src/test/ui/issue-32950.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-32950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-32950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-32950.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,9 @@\n+error: `derive` cannot be used on items with type macros\n+  --> $DIR/issue-32950.rs:15:5\n+   |\n+15 | /     concat_idents!(Foo, Bar) //~ ERROR `derive` cannot be used on items with type macros\n+16 | | );\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "630694d91561d8fdb274fd5e937fac8ba9c871fe", "filename": "src/test/ui/issue-34047.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-34047.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-34047.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-34047.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-34047.rs"}, {"sha": "d2e1826b634183899b08fadc1df7cd76b68d232c", "filename": "src/test/ui/issue-34047.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-34047.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-34047.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-34047.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,11 @@\n+error[E0530]: match bindings cannot shadow constants\n+  --> $DIR/issue-34047.rs:15:13\n+   |\n+11 | const C: u8 = 0; //~ NOTE a constant `C` is defined here\n+   | ---------------- a constant `C` is defined here\n+...\n+15 |         mut C => {} //~ ERROR match bindings cannot shadow constants\n+   |             ^ cannot be named the same as a constant\n+\n+error: aborting due to previous error\n+"}, {"sha": "5e3b777cc0b62cd845cb9af92176b3c64a590d8c", "filename": "src/test/ui/issue-34209.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-34209.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-34209.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-34209.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-34209.rs"}, {"sha": "a832aab4c26538fca0cf61cb8d16afb921a66413", "filename": "src/test/ui/issue-34209.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-34209.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-34209.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-34209.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,10 @@\n+error[E0223]: ambiguous associated type\n+  --> $DIR/issue-34209.rs:17:9\n+   |\n+17 |         S::B{ } => { },\n+   |         ^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<S as Trait>::B`\n+\n+error: aborting due to previous error\n+"}, {"sha": "5c4f161a5004ed9c20c190da2fe38468d8a98eac", "filename": "src/test/ui/issue-35139.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-35139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-35139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35139.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-35139.rs"}, {"sha": "19356cad317971ffccb14b7393b2e49cc248238c", "filename": "src/test/ui/issue-35139.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-35139.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-35139.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35139.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-35139.rs:19:6\n+   |\n+19 | impl<'a> MethodType for MTFn { //~ ERROR E0207\n+   |      ^^ unconstrained lifetime parameter\n+\n+error: aborting due to previous error\n+"}, {"sha": "1942fd38d11fa9f0902a290a6cb88c05e2d8e29a", "filename": "src/test/ui/issue-35869.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-35869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-35869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35869.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-35869.rs"}, {"sha": "cd79f8912ba23ef696c9e21cbded6aa8040adcdb", "filename": "src/test/ui/issue-35869.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-35869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-35869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35869.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,50 @@\n+error[E0053]: method `foo` has an incompatible type for trait\n+  --> $DIR/issue-35869.rs:23:15\n+   |\n+14 |     fn foo(_: fn(u8) -> ()); //~ NOTE type in trait\n+   |               ------------ type in trait\n+...\n+23 |     fn foo(_: fn(u16) -> ()) {}\n+   |               ^^^^^^^^^^^^^ expected u8, found u16\n+   |\n+   = note: expected type `fn(fn(u8))`\n+              found type `fn(fn(u16))`\n+\n+error[E0053]: method `bar` has an incompatible type for trait\n+  --> $DIR/issue-35869.rs:27:15\n+   |\n+15 |     fn bar(_: Option<u8>); //~ NOTE type in trait\n+   |               ---------- type in trait\n+...\n+27 |     fn bar(_: Option<u16>) {}\n+   |               ^^^^^^^^^^^ expected u8, found u16\n+   |\n+   = note: expected type `fn(std::option::Option<u8>)`\n+              found type `fn(std::option::Option<u16>)`\n+\n+error[E0053]: method `baz` has an incompatible type for trait\n+  --> $DIR/issue-35869.rs:31:15\n+   |\n+16 |     fn baz(_: (u8, u16)); //~ NOTE type in trait\n+   |               --------- type in trait\n+...\n+31 |     fn baz(_: (u16, u16)) {}\n+   |               ^^^^^^^^^^ expected u8, found u16\n+   |\n+   = note: expected type `fn((u8, u16))`\n+              found type `fn((u16, u16))`\n+\n+error[E0053]: method `qux` has an incompatible type for trait\n+  --> $DIR/issue-35869.rs:35:17\n+   |\n+17 |     fn qux() -> u8; //~ NOTE type in trait\n+   |                 -- type in trait\n+...\n+35 |     fn qux() -> u16 { 5u16 }\n+   |                 ^^^ expected u8, found u16\n+   |\n+   = note: expected type `fn() -> u8`\n+              found type `fn() -> u16`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "9dad6ede776c240fe21ef8f52ad20bd044ccae6a", "filename": "src/test/ui/issue-36163.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-36163.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-36163.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-36163.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-36163.rs"}, {"sha": "79267bdbeed8a4f2c1f82e2862e002e5c1b92337", "filename": "src/test/ui/issue-36163.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-36163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-36163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-36163.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,20 @@\n+error[E0265]: recursive constant\n+  --> $DIR/issue-36163.rs:11:1\n+   |\n+11 | const A: i32 = Foo::B; //~ ERROR E0265\n+   | ^^^^^^^^^^^^^^^^^^^^^^ recursion not allowed in constant\n+\n+error[E0265]: recursive constant\n+  --> $DIR/issue-36163.rs:15:9\n+   |\n+15 |     B = A, //~ ERROR E0265\n+   |         ^ recursion not allowed in constant\n+\n+error[E0265]: recursive constant\n+  --> $DIR/issue-36163.rs:20:9\n+   |\n+20 |     C = Bar::C, //~ ERROR E0265\n+   |         ^^^^^^ recursion not allowed in constant\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "6146258fa8d448298e43d213ef40cfbe46a85fc7", "filename": "src/test/ui/issue-36708.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-36708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-36708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-36708.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-36708.rs"}, {"sha": "016841de1690210af01578f9bd20aadb29efb82b", "filename": "src/test/ui/issue-36708.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-36708.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-36708.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-36708.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0049]: method `foo` has 1 type parameter but its trait declaration has 0 type parameters\n+  --> $DIR/issue-36708.rs:18:11\n+   |\n+18 |     fn foo<T>() {}\n+   |           ^^^ found 1 type parameter, expected 0\n+\n+error: aborting due to previous error\n+"}, {"sha": "10f73dc086288aed40084f0bb3e441dc20a33f60", "filename": "src/test/ui/issue-3779.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-3779.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-3779.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-3779.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-3779.rs"}, {"sha": "18f2726b63ba33eea1a49cd54b333406eef73b48", "filename": "src/test/ui/issue-3779.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-3779.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-3779.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-3779.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,13 @@\n+error[E0072]: recursive type `S` has infinite size\n+  --> $DIR/issue-3779.rs:11:1\n+   |\n+11 | struct S {\n+   | ^^^^^^^^ recursive type has infinite size\n+...\n+14 |     element: Option<S>\n+   |     ------------------ recursive without indirection\n+   |\n+   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `S` representable\n+\n+error: aborting due to previous error\n+"}, {"sha": "6313293bf2b6aae8e42fdcb9ba8cadb45c71e2a7", "filename": "src/test/ui/issue-37884.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-37884.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-37884.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-37884.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-37884.rs"}, {"sha": "b101adfdd7cba0681ddf54a1c993f0d24cbd8f2a", "filename": "src/test/ui/issue-37884.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-37884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-37884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-37884.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,39 @@\n+error[E0308]: method not compatible with trait\n+  --> $DIR/issue-37884.rs:17:5\n+   |\n+17 | /     fn next(&'a mut self) -> Option<Self::Item>\n+18 | |     //~^ ERROR method not compatible with trait\n+19 | |     //~| lifetime mismatch\n+20 | |     //~| NOTE expected type `fn(&mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n+...  |\n+23 | |         Some(&mut self.0)\n+24 | |     }\n+   | |_____^ lifetime mismatch\n+   |\n+   = note: expected type `fn(&mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n+              found type `fn(&'a mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n+note: the anonymous lifetime #1 defined on the method body at 17:5...\n+  --> $DIR/issue-37884.rs:17:5\n+   |\n+17 | /     fn next(&'a mut self) -> Option<Self::Item>\n+18 | |     //~^ ERROR method not compatible with trait\n+19 | |     //~| lifetime mismatch\n+20 | |     //~| NOTE expected type `fn(&mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n+...  |\n+23 | |         Some(&mut self.0)\n+24 | |     }\n+   | |_____^\n+note: ...does not necessarily outlive the lifetime 'a as defined on the impl at 13:1\n+  --> $DIR/issue-37884.rs:13:1\n+   |\n+13 | / impl<'a, T: 'a> Iterator for RepeatMut<'a, T> {\n+14 | |     //~^ NOTE ...does not necessarily outlive the lifetime 'a as defined on the impl\n+15 | |\n+16 | |     type Item = &'a mut T;\n+...  |\n+24 | |     }\n+25 | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c5aae894c3ecbc44c60b6de14a7dae510442b6c6", "filename": "src/test/ui/issue-4335.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-4335.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-4335.rs"}, {"sha": "5840838b823d335dd6c71e1aec61711fcb93042f", "filename": "src/test/ui/issue-4335.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-4335.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-4335.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-4335.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,20 @@\n+error[E0373]: closure may outlive the current function, but it borrows `v`, which is owned by the current function\n+  --> $DIR/issue-4335.rs:16:17\n+   |\n+16 |     id(Box::new(|| *v))\n+   |                 ^^  - `v` is borrowed here\n+   |                 |\n+   |                 may outlive borrowed value `v`\n+help: to force the closure to take ownership of `v` (and any other referenced variables), use the `move` keyword\n+   |\n+16 |     id(Box::new(move || *v))\n+   |                 ^^^^^^^\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/issue-4335.rs:16:20\n+   |\n+16 |     id(Box::new(|| *v))\n+   |                    ^^ cannot move out of borrowed content\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e9f8367378a7737218d18274855d70b82165b4f3", "filename": "src/test/ui/issue-4935.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-4935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-4935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-4935.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-4935.rs"}, {"sha": "8859ab8550b8d024a1ec1a1e8a2bfbfd9eadffd1", "filename": "src/test/ui/issue-4935.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-4935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-4935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-4935.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,11 @@\n+error[E0061]: this function takes 1 parameter but 2 parameters were supplied\n+  --> $DIR/issue-4935.rs:15:17\n+   |\n+13 | fn foo(a: usize) {}\n+   | ------------------- defined here\n+14 | //~^ defined here\n+15 | fn main() { foo(5, 6) }\n+   |                 ^^^^ expected 1 parameter\n+\n+error: aborting due to previous error\n+"}, {"sha": "a77b27150d7978e917a44d64b0e45d30dbc0664b", "filename": "src/test/ui/issue-5239-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-5239-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-5239-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-5239-1.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-5239-1.rs"}, {"sha": "b97b58981de62838b1fc9c708eb1bb0e1c47726f", "filename": "src/test/ui/issue-5239-1.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-5239-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-5239-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-5239-1.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,10 @@\n+error[E0368]: binary assignment operation `+=` cannot be applied to type `&isize`\n+  --> $DIR/issue-5239-1.rs:14:30\n+   |\n+14 |     let x = |ref x: isize| { x += 1; };\n+   |                              -^^^^^\n+   |                              |\n+   |                              cannot use `+=` on type `&isize`\n+\n+error: aborting due to previous error\n+"}, {"sha": "1503da2baa73d24af5146d0f41337c97c30eaef7", "filename": "src/test/ui/issue-6458-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-6458-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-6458-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-6458-3.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-6458-3.rs"}, {"sha": "761a9b38f6f06cc3746ec87aa55070b6f02f0ca9", "filename": "src/test/ui/issue-6458-3.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-6458-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-6458-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-6458-3.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-6458-3.rs:14:5\n+   |\n+14 |     mem::transmute(0);\n+   |     ^^^^^^^^^^^^^^ cannot infer type for `U`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a078cdea4ac4d70be1c1ee2eb0fc6c1ff04690c7", "filename": "src/test/ui/issue-6458-4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-6458-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-6458-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-6458-4.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-6458-4.rs"}, {"sha": "acb9b218df402ab9efc737d44f392a3b77b42093", "filename": "src/test/ui/issue-6458-4.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-6458-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-6458-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-6458-4.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-6458-4.rs:11:40\n+   |\n+11 |   fn foo(b: bool) -> Result<bool,String> { //~ ERROR mismatched types\n+   |  ________________________________________^\n+12 | |     Err(\"bar\".to_string()); //~ HELP consider removing this semicolon\n+   | |                           - help: consider removing this semicolon\n+13 | | }\n+   | |_^ expected enum `std::result::Result`, found ()\n+   |\n+   = note: expected type `std::result::Result<bool, std::string::String>`\n+              found type `()`\n+\n+error: aborting due to previous error\n+"}, {"sha": "db4d4e76c11c9ae26a91b738678d6cb99786788d", "filename": "src/test/ui/issue-6458.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-6458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-6458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-6458.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-6458.rs"}, {"sha": "b5d4ac831393f0723330ef4d98866db52be81243", "filename": "src/test/ui/issue-6458.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-6458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-6458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-6458.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,8 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-6458.rs:19:4\n+   |\n+19 |    foo(TypeWithState(marker::PhantomData));\n+   |    ^^^ cannot infer type for `State`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a5f001b785cc9481b9ceef9a31e6b0bf767b7600", "filename": "src/test/ui/issue-7813.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-7813.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-7813.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-7813.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/issue-7813.rs"}, {"sha": "11f8e4d00fd1dda65ef2011dcb6cb10f9336be5e", "filename": "src/test/ui/issue-7813.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-7813.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Fissue-7813.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-7813.stderr?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "patch": "@@ -0,0 +1,10 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-7813.rs:12:13\n+   |\n+12 |     let v = &[]; //~ ERROR type annotations needed\n+   |         -   ^^^ cannot infer type for `_`\n+   |         |\n+   |         consider giving `v` a type\n+\n+error: aborting due to previous error\n+"}, {"sha": "2d9de57a2659f52b8b59c6cdfe51637b7b178826", "filename": "src/test/ui/lifetime-elision-return-type-requires-explicit-lifetime.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Flifetime-elision-return-type-requires-explicit-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576/src%2Ftest%2Fui%2Flifetime-elision-return-type-requires-explicit-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-elision-return-type-requires-explicit-lifetime.rs?ref=d4e51a8fb286444a8c276a05a1c3ba6ba8ca6576", "previous_filename": "src/test/compile-fail/lifetime-elision-return-type-requires-explicit-lifetime.rs"}]}