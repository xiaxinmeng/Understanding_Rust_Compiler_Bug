{"sha": "2c6339571bfc97c5eb0516e20ab0d3b9543f87e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNjMzOTU3MWJmYzk3YzVlYjA1MTZlMjBhYjBkM2I5NTQzZjg3ZTU=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2021-03-14T18:16:52Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-04-03T04:21:06Z"}, "message": "chore: apply pattern parsing changes", "tree": {"sha": "e8c99c75f897283e2f8afcfdda832a7b1968b7f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8c99c75f897283e2f8afcfdda832a7b1968b7f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c6339571bfc97c5eb0516e20ab0d3b9543f87e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c6339571bfc97c5eb0516e20ab0d3b9543f87e5", "html_url": "https://github.com/rust-lang/rust/commit/2c6339571bfc97c5eb0516e20ab0d3b9543f87e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c6339571bfc97c5eb0516e20ab0d3b9543f87e5/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbd83b80836a500ec3b6c5033d5742d504d04542", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd83b80836a500ec3b6c5033d5742d504d04542", "html_url": "https://github.com/rust-lang/rust/commit/cbd83b80836a500ec3b6c5033d5742d504d04542"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "190f4b599b0f7053654b3ac355183907a9bd33a8", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c6339571bfc97c5eb0516e20ab0d3b9543f87e5/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6339571bfc97c5eb0516e20ab0d3b9543f87e5/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=2c6339571bfc97c5eb0516e20ab0d3b9543f87e5", "patch": "@@ -132,7 +132,7 @@ fn parse_macro_arg<'a, 'b: 'a>(parser: &'a mut Parser<'b>) -> Option<MacroArg> {\n     );\n     parse_macro_arg!(\n         Pat,\n-        |parser: &mut rustc_parse::parser::Parser<'b>| parser.parse_pat(None),\n+        |parser: &mut rustc_parse::parser::Parser<'b>| parser.parse_pat_no_top_alt(None),\n         |x: ptr::P<ast::Pat>| Some(x)\n     );\n     // `parse_item` returns `Option<ptr::P<ast::Item>>`."}, {"sha": "f33fedce92da55ff86a3ec270e2d39e3c2b0137a", "filename": "src/matches.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2c6339571bfc97c5eb0516e20ab0d3b9543f87e5/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c6339571bfc97c5eb0516e20ab0d3b9543f87e5/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=2c6339571bfc97c5eb0516e20ab0d3b9543f87e5", "patch": "@@ -19,7 +19,7 @@ use crate::source_map::SpanUtils;\n use crate::spanned::Spanned;\n use crate::utils::{\n     contains_skip, extra_offset, first_line_width, inner_attributes, last_line_extendable, mk_sp,\n-    semicolon_for_expr, trimmed_last_line_width, unicode_str_width,\n+    mk_sp_lo_plus_one, semicolon_for_expr, trimmed_last_line_width, unicode_str_width,\n };\n \n /// A simple wrapper type against `ast::Arm`. Used inside `write_list()`.\n@@ -163,17 +163,14 @@ fn arm_comma(config: &Config, body: &ast::Expr, is_last: bool) -> &'static str {\n fn collect_beginning_verts(\n     context: &RewriteContext<'_>,\n     arms: &[ast::Arm],\n-    span: Span,\n ) -> Vec<Option<BytePos>> {\n-    let mut beginning_verts = Vec::with_capacity(arms.len());\n-    let mut lo = context.snippet_provider.span_after(span, \"{\");\n-    for arm in arms {\n-        let hi = arm.pat.span.lo();\n-        let missing_span = mk_sp(lo, hi);\n-        beginning_verts.push(context.snippet_provider.opt_span_before(missing_span, \"|\"));\n-        lo = arm.span().hi();\n-    }\n-    beginning_verts\n+    arms.iter()\n+        .map(|a| {\n+            context\n+                .snippet_provider\n+                .opt_span_before(mk_sp_lo_plus_one(a.pat.span.lo()), \"|\")\n+        })\n+        .collect()\n }\n \n fn rewrite_match_arms(\n@@ -191,7 +188,7 @@ fn rewrite_match_arms(\n     let is_last_iter = repeat(false)\n         .take(arm_len.saturating_sub(1))\n         .chain(repeat(true));\n-    let beginning_verts = collect_beginning_verts(context, arms, span);\n+    let beginning_verts = collect_beginning_verts(context, arms);\n     let items = itemize_list(\n         context.snippet_provider,\n         arms.iter()"}]}