{"sha": "d7ee55bfd0240095d0614ec5d33774171a177d86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZWU1NWJmZDAyNDAwOTVkMDYxNGVjNWQzMzc3NDE3MWExNzdkODY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-08-05T01:34:05Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-08-05T09:21:58Z"}, "message": "(Almost) Always unify a function tail expr with the function result type\n\ntypeck::check_fn had an exception for the case where the tail expr\nwas compatible with type nil -- in that case, it doesn't unify the\ntail expr's type with the enclosing function's result type. This\nseems wrong to me. There are several test cases in Issue #719\nthat illustrate why. If the tail expr has type T, for some type\nvariable T that isn't resolved when this check happens, then T\nnever gets unified with anything, which is incorrect -- T should\nbe unified with the result type of the enclosing function. (The\nbug was occurring because an unconstrained type variable is\ncompatible with type nil.)\n\nInstead, I removed the check for type nil and added a check that\nthe function isn't an iterator -- if it's an iterator, I don't\ncheck the tail expr's type against the function result type,\nas that wouldn't make sense.\n\nHowever, this broke two test cases, and after discussion with\nbrson, I understood that the purpose of the check was to allow\nsemicolons to be omitted in some cases. The whole thing seems\nrather ad hoc. But I came up with a hacky compromise solution:\ninstead of checking whether the tailexpr type is *compatible*\nwith nil, we now just check whether it *is* nil. This also\nnecessitates calling resolve_type_vars_if_possible before\nthe check happens, which worries me. But, this fixes the bug\nfrom Issue #719 without requiring changes to any test cases.\n\nCloses #719 but I didn't try every variation -- so reopen the bug\nif one of the variations still doesn't work.", "tree": {"sha": "391bee16f9d34e3185e7c49487ccc488518025a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/391bee16f9d34e3185e7c49487ccc488518025a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7ee55bfd0240095d0614ec5d33774171a177d86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7ee55bfd0240095d0614ec5d33774171a177d86", "html_url": "https://github.com/rust-lang/rust/commit/d7ee55bfd0240095d0614ec5d33774171a177d86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7ee55bfd0240095d0614ec5d33774171a177d86/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5d55ef9181b1a0987045183093742a2d360c07e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d55ef9181b1a0987045183093742a2d360c07e", "html_url": "https://github.com/rust-lang/rust/commit/c5d55ef9181b1a0987045183093742a2d360c07e"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "99e10eafa3cf2d741728f3e80a49c424498ae520", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d7ee55bfd0240095d0614ec5d33774171a177d86/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ee55bfd0240095d0614ec5d33774171a177d86/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=d7ee55bfd0240095d0614ec5d33774171a177d86", "patch": "@@ -1080,6 +1080,7 @@ fn variant_arg_types(ccx: &@crate_ctxt, sp: &span, vid: &ast::def_id,\n mod writeback {\n \n     export resolve_type_vars_in_block;\n+    export resolve_type_vars_in_expr;\n \n     fn resolve_type_vars_in_type(fcx: &@fn_ctxt, sp: &span, typ: ty::t) ->\n        option::t[ty::t] {\n@@ -1168,6 +1169,20 @@ mod writeback {\n         // Ignore items\n     }\n \n+    fn resolve_type_vars_in_expr(fcx: &@fn_ctxt, e: &@ast::expr) -> bool {\n+        let wbcx = {fcx: fcx, mutable success: true};\n+        let visit = visit::mk_vt\n+            (@{visit_item: visit_item,\n+               visit_stmt: visit_stmt,\n+               visit_expr: visit_expr,\n+               visit_block: visit_block,\n+               visit_pat: visit_pat,\n+               visit_local: visit_local\n+               with *visit::default_visitor()});\n+        visit::visit_expr(e, wbcx, visit);\n+        ret wbcx.success;\n+    }\n+\n     fn resolve_type_vars_in_block(fcx: &@fn_ctxt, blk: &ast::blk) -> bool {\n         let wbcx = {fcx: fcx, mutable success: true};\n         let visit = visit::mk_vt\n@@ -2651,13 +2666,23 @@ fn check_fn(ccx: &@crate_ctxt, f: &ast::_fn, id: &ast::node_id,\n       _ { }\n     }\n \n-    if option::is_some(body.node.expr) {\n+// For non-iterator fns, we unify the tail expr's type with the\n+// function result type, if there is a tail expr.\n+// We don't do this check for an iterator, as the tail expr doesn't\n+// have to have the result type of the iterator.\n+    if option::is_some(body.node.expr) && f.proto != ast::proto_iter {\n         let tail_expr = option::get(body.node.expr);\n-        let tail_expr_ty = expr_ty(ccx.tcx, tail_expr);\n-        // Have to exclude ty_nil to allow functions to end in\n-        // while expressions, etc.\n-        let nil = ty::mk_nil(fcx.ccx.tcx);\n-        if !are_compatible(fcx, nil, tail_expr_ty) {\n+        // The use of resolve_type_vars_if_possible makes me very\n+        // afraid :-(\n+        let tail_expr_ty = resolve_type_vars_if_possible(\n+          fcx, expr_ty(ccx.tcx, tail_expr));\n+        // Hacky compromise: use eq and not are_compatible\n+        // This allows things like while loops and ifs with no\n+        // else to appear in tail position without a trailing\n+        // semicolon when the return type is non-nil, while\n+        // making sure to unify the tailexpr-type with the result\n+        // type when the tailexpr-type is just a type variable.\n+        if !ty::eq_ty(tail_expr_ty, ty::mk_nil(ccx.tcx)) {\n             demand::simple(fcx, tail_expr.span, fcx.ret_ty, tail_expr_ty);\n         }\n     }"}, {"sha": "f9f8e6725ca6fc5d715cec981f6cacc0249b44b7", "filename": "src/test/run-pass/unify-return-ty.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d7ee55bfd0240095d0614ec5d33774171a177d86/src%2Ftest%2Frun-pass%2Funify-return-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ee55bfd0240095d0614ec5d33774171a177d86/src%2Ftest%2Frun-pass%2Funify-return-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funify-return-ty.rs?ref=d7ee55bfd0240095d0614ec5d33774171a177d86", "patch": "@@ -0,0 +1,11 @@\n+// Tests that the tail expr in null() has its type\n+// unified with the type *T, and so the type variable\n+// in that type gets resolved.\n+use std;\n+import std::unsafe;\n+\n+fn null[T]() -> *T { unsafe::reinterpret_cast(0) }\n+\n+fn main() {\n+    null[int]();\n+}\n\\ No newline at end of file"}]}