{"sha": "af8063fe373cf06a345b0d4eee14ef1ef6873bc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmODA2M2ZlMzczY2YwNmEzNDViMGQ0ZWVlMTRlZjFlZjY4NzNiYzc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-09-29T20:05:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-09-29T20:13:23Z"}, "message": "Extend **Status** command to also show dep info for the file\n\nThis should help with troubleshooting wrong project configuration", "tree": {"sha": "8d8e459960c98fa9c491f25ef755543363dec76e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d8e459960c98fa9c491f25ef755543363dec76e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af8063fe373cf06a345b0d4eee14ef1ef6873bc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af8063fe373cf06a345b0d4eee14ef1ef6873bc7", "html_url": "https://github.com/rust-lang/rust/commit/af8063fe373cf06a345b0d4eee14ef1ef6873bc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af8063fe373cf06a345b0d4eee14ef1ef6873bc7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7df0ad2fb48166937fdd061e1ae559c72a81990", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7df0ad2fb48166937fdd061e1ae559c72a81990", "html_url": "https://github.com/rust-lang/rust/commit/e7df0ad2fb48166937fdd061e1ae559c72a81990"}], "stats": {"total": 117, "additions": 85, "deletions": 32}, "files": [{"sha": "6d5fd1a557eb1f95d951f9e9674eec2fdfe35119", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af8063fe373cf06a345b0d4eee14ef1ef6873bc7/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8063fe373cf06a345b0d4eee14ef1ef6873bc7/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=af8063fe373cf06a345b0d4eee14ef1ef6873bc7", "patch": "@@ -216,8 +216,8 @@ impl Analysis {\n     }\n \n     /// Debug info about the current state of the analysis.\n-    pub fn status(&self) -> Cancelable<String> {\n-        self.with_db(|db| status::status(&*db))\n+    pub fn status(&self, file_id: Option<FileId>) -> Cancelable<String> {\n+        self.with_db(|db| status::status(&*db, file_id))\n     }\n \n     pub fn prime_caches(&self, files: Vec<FileId>) -> Cancelable<()> {"}, {"sha": "0af84daa0a7daf5011ebe5ce6c97a5dc82a0dfbf", "filename": "crates/ide/src/status.rs", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/af8063fe373cf06a345b0d4eee14ef1ef6873bc7/crates%2Fide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8063fe373cf06a345b0d4eee14ef1ef6873bc7/crates%2Fide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatus.rs?ref=af8063fe373cf06a345b0d4eee14ef1ef6873bc7", "patch": "@@ -2,19 +2,19 @@ use std::{fmt, iter::FromIterator, sync::Arc};\n \n use base_db::{\n     salsa::debug::{DebugQueryTable, TableEntry},\n-    FileTextQuery, SourceRootId,\n+    CrateId, FileId, FileTextQuery, SourceDatabase, SourceRootId,\n };\n use hir::MacroFile;\n use ide_db::{\n     symbol_index::{LibrarySymbolsQuery, SymbolIndex},\n     RootDatabase,\n };\n+use itertools::Itertools;\n use profile::{memory_usage, Bytes};\n use rustc_hash::FxHashMap;\n+use stdx::format_to;\n use syntax::{ast, Parse, SyntaxNode};\n \n-use crate::FileId;\n-\n fn syntax_tree_stats(db: &RootDatabase) -> SyntaxTreeStats {\n     base_db::ParseQuery.in_db(db).entries::<SyntaxTreeStats>()\n }\n@@ -31,19 +31,36 @@ fn macro_syntax_tree_stats(db: &RootDatabase) -> SyntaxTreeStats {\n //\n // | VS Code | **Rust Analyzer: Status**\n // |===\n-pub(crate) fn status(db: &RootDatabase) -> String {\n-    let files_stats = FileTextQuery.in_db(db).entries::<FilesStats>();\n-    let syntax_tree_stats = syntax_tree_stats(db);\n-    let macro_syntax_tree_stats = macro_syntax_tree_stats(db);\n-    let symbols_stats = LibrarySymbolsQuery.in_db(db).entries::<LibrarySymbolsStats>();\n-    format!(\n-        \"{}\\n{}\\n{}\\n{} (macros)\\n{} total\\n\",\n-        files_stats,\n-        symbols_stats,\n-        syntax_tree_stats,\n-        macro_syntax_tree_stats,\n-        memory_usage(),\n-    )\n+pub(crate) fn status(db: &RootDatabase, file_id: Option<FileId>) -> String {\n+    let mut buf = String::new();\n+    format_to!(buf, \"{}\\n\", FileTextQuery.in_db(db).entries::<FilesStats>());\n+    format_to!(buf, \"{}\\n\", LibrarySymbolsQuery.in_db(db).entries::<LibrarySymbolsStats>());\n+    format_to!(buf, \"{}\\n\", syntax_tree_stats(db));\n+    format_to!(buf, \"{} (macros)\\n\", macro_syntax_tree_stats(db));\n+    format_to!(buf, \"{} total\\n\", memory_usage());\n+\n+    if let Some(file_id) = file_id {\n+        format_to!(buf, \"\\nfile info:\\n\");\n+        let krate = crate::parent_module::crate_for(db, file_id).pop();\n+        match krate {\n+            Some(krate) => {\n+                let crate_graph = db.crate_graph();\n+                let display_crate = |krate: CrateId| match &crate_graph[krate].display_name {\n+                    Some(it) => format!(\"{}({:?})\", it, krate),\n+                    None => format!(\"{:?}\", krate),\n+                };\n+                format_to!(buf, \"crate: {}\\n\", display_crate(krate));\n+                let deps = crate_graph[krate]\n+                    .dependencies\n+                    .iter()\n+                    .map(|dep| format!(\"{}={:?}\", dep.name, dep.crate_id))\n+                    .format(\", \");\n+                format_to!(buf, \"deps: {}\\n\", deps);\n+            }\n+            None => format_to!(buf, \"does not belong to any crate\"),\n+        }\n+    }\n+    buf\n }\n \n #[derive(Default)]"}, {"sha": "afcec63ad165c5d099aeb02e042f38e4d480bec6", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/af8063fe373cf06a345b0d4eee14ef1ef6873bc7/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8063fe373cf06a345b0d4eee14ef1ef6873bc7/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=af8063fe373cf06a345b0d4eee14ef1ef6873bc7", "patch": "@@ -38,10 +38,22 @@ use crate::{\n     to_proto, LspError, Result,\n };\n \n-pub(crate) fn handle_analyzer_status(snap: GlobalStateSnapshot, _: ()) -> Result<String> {\n+pub(crate) fn handle_analyzer_status(\n+    snap: GlobalStateSnapshot,\n+    params: lsp_ext::AnalyzerStatusParams,\n+) -> Result<String> {\n     let _p = profile::span(\"handle_analyzer_status\");\n \n     let mut buf = String::new();\n+\n+    let mut file_id = None;\n+    if let Some(tdi) = params.text_document {\n+        match from_proto::file_id(&snap, &tdi.uri) {\n+            Ok(it) => file_id = Some(it),\n+            Err(_) => format_to!(buf, \"file {} not found in vfs\", tdi.uri),\n+        }\n+    }\n+\n     if snap.workspaces.is_empty() {\n         buf.push_str(\"no workspaces\\n\")\n     } else {\n@@ -52,7 +64,10 @@ pub(crate) fn handle_analyzer_status(snap: GlobalStateSnapshot, _: ()) -> Result\n     }\n     buf.push_str(\"\\nanalysis:\\n\");\n     buf.push_str(\n-        &snap.analysis.status().unwrap_or_else(|_| \"Analysis retrieval was cancelled\".to_owned()),\n+        &snap\n+            .analysis\n+            .status(file_id)\n+            .unwrap_or_else(|_| \"Analysis retrieval was cancelled\".to_owned()),\n     );\n     format_to!(buf, \"\\n\\nrequests:\\n\");\n     let requests = snap.latest_requests.read();"}, {"sha": "43ff191dab5182ddf5734e1bd5ea1409765ba731", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af8063fe373cf06a345b0d4eee14ef1ef6873bc7/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8063fe373cf06a345b0d4eee14ef1ef6873bc7/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=af8063fe373cf06a345b0d4eee14ef1ef6873bc7", "patch": "@@ -11,11 +11,17 @@ use serde::{Deserialize, Serialize};\n pub enum AnalyzerStatus {}\n \n impl Request for AnalyzerStatus {\n-    type Params = ();\n+    type Params = AnalyzerStatusParams;\n     type Result = String;\n     const METHOD: &'static str = \"rust-analyzer/analyzerStatus\";\n }\n \n+#[derive(Deserialize, Serialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct AnalyzerStatusParams {\n+    pub text_document: Option<TextDocumentIdentifier>,\n+}\n+\n pub enum MemoryUsage {}\n \n impl Request for MemoryUsage {"}, {"sha": "f1160bb1cc949d4cbdba247a74cc5326475214dc", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/af8063fe373cf06a345b0d4eee14ef1ef6873bc7/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/af8063fe373cf06a345b0d4eee14ef1ef6873bc7/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=af8063fe373cf06a345b0d4eee14ef1ef6873bc7", "patch": "@@ -390,7 +390,14 @@ rust-analyzer supports only one `kind`, `\"cargo\"`. The `args` for `\"cargo\"` look\n \n **Method:** `rust-analyzer/analyzerStatus`\n \n-**Request:** `null`\n+**Request:**\n+\n+```typescript\n+interface AnalyzerStatusParams {\n+    /// If specified, show dependencies of the current file.\n+    textDocument?: TextDocumentIdentifier;\n+}\n+```\n \n **Response:** `string`\n "}, {"sha": "c1a7788520c42126b6a5196b684ca7364271f62f", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af8063fe373cf06a345b0d4eee14ef1ef6873bc7/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/af8063fe373cf06a345b0d4eee14ef1ef6873bc7/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=af8063fe373cf06a345b0d4eee14ef1ef6873bc7", "patch": "@@ -113,8 +113,8 @@ Note that installing via `xtask install` does not work for VS Code Remote, inste\n \n Here are some useful self-diagnostic commands:\n \n-* **Rust Analyzer: Show RA Version** shows the version of `rust-analyzer` binary\n-* **Rust Analyzer: Status** prints some statistics about the server, like the few latest LSP requests\n+* **Rust Analyzer: Show RA Version** shows the version of `rust-analyzer` binary.\n+* **Rust Analyzer: Status** prints some statistics about the server, and dependency information for the current file.\n * To enable server-side logging, run with `env RA_LOG=info` and see `Output > Rust Analyzer Language Server` in VS Code's panel.\n * To log all LSP requests, add `\"rust-analyzer.trace.server\": \"verbose\"` to the settings and look for `Rust Analyzer Language Server Trace` in the panel.\n * To enable client-side logging, add `\"rust-analyzer.trace.extension\": true` to the settings and open `Output > Rust Analyzer Client` in the panel."}, {"sha": "1a90f1b7d9a055647d38b20c996d45b9e5b95eba", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/af8063fe373cf06a345b0d4eee14ef1ef6873bc7/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/af8063fe373cf06a345b0d4eee14ef1ef6873bc7/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=af8063fe373cf06a345b0d4eee14ef1ef6873bc7", "patch": "@@ -21,7 +21,12 @@ export function analyzerStatus(ctx: Ctx): Cmd {\n         provideTextDocumentContent(_uri: vscode.Uri): vscode.ProviderResult<string> {\n             if (!vscode.window.activeTextEditor) return '';\n \n-            return ctx.client.sendRequest(ra.analyzerStatus);\n+            const params: ra.AnalyzerStatusParams = {};\n+            const doc = ctx.activeRustEditor?.document;\n+            if (doc != null) {\n+                params.textDocument = ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(doc);\n+            }\n+            return ctx.client.sendRequest(ra.analyzerStatus, params);\n         }\n \n         get onDidChange(): vscode.Event<vscode.Uri> {\n@@ -94,7 +99,7 @@ export function matchingBrace(ctx: Ctx): Cmd {\n         if (!editor || !client) return;\n \n         const response = await client.sendRequest(ra.matchingBrace, {\n-            textDocument: { uri: editor.document.uri.toString() },\n+            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n             positions: editor.selections.map(s =>\n                 client.code2ProtocolConverter.asPosition(s.active),\n             ),\n@@ -118,7 +123,7 @@ export function joinLines(ctx: Ctx): Cmd {\n \n         const items: lc.TextEdit[] = await client.sendRequest(ra.joinLines, {\n             ranges: editor.selections.map((it) => client.code2ProtocolConverter.asRange(it)),\n-            textDocument: { uri: editor.document.uri.toString() },\n+            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n         });\n         editor.edit((builder) => {\n             client.protocol2CodeConverter.asTextEdits(items).forEach((edit: any) => {\n@@ -136,7 +141,7 @@ export function onEnter(ctx: Ctx): Cmd {\n         if (!editor || !client) return false;\n \n         const lcEdits = await client.sendRequest(ra.onEnter, {\n-            textDocument: { uri: editor.document.uri.toString() },\n+            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n             position: client.code2ProtocolConverter.asPosition(\n                 editor.selection.active,\n             ),\n@@ -165,7 +170,7 @@ export function parentModule(ctx: Ctx): Cmd {\n         if (!editor || !client) return;\n \n         const response = await client.sendRequest(ra.parentModule, {\n-            textDocument: { uri: editor.document.uri.toString() },\n+            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n             position: client.code2ProtocolConverter.asPosition(\n                 editor.selection.active,\n             ),\n@@ -191,7 +196,7 @@ export function ssr(ctx: Ctx): Cmd {\n \n         const position = editor.selection.active;\n         const selections = editor.selections;\n-        const textDocument = { uri: editor.document.uri.toString() };\n+        const textDocument = ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document);\n \n         const options: vscode.InputBoxOptions = {\n             value: \"() ==>> ()\",\n@@ -339,7 +344,7 @@ export function expandMacro(ctx: Ctx): Cmd {\n             const position = editor.selection.active;\n \n             const expanded = await client.sendRequest(ra.expandMacro, {\n-                textDocument: { uri: editor.document.uri.toString() },\n+                textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n                 position,\n             });\n "}, {"sha": "eb422d3e7595414cffd883448b6672b7b2a01d59", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af8063fe373cf06a345b0d4eee14ef1ef6873bc7/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/af8063fe373cf06a345b0d4eee14ef1ef6873bc7/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=af8063fe373cf06a345b0d4eee14ef1ef6873bc7", "patch": "@@ -4,7 +4,10 @@\n \n import * as lc from \"vscode-languageclient\";\n \n-export const analyzerStatus = new lc.RequestType0<string, void>(\"rust-analyzer/analyzerStatus\");\n+export interface AnalyzerStatusParams {\n+    textDocument?: lc.TextDocumentIdentifier;\n+}\n+export const analyzerStatus = new lc.RequestType<AnalyzerStatusParams, string, void>(\"rust-analyzer/analyzerStatus\");\n export const memoryUsage = new lc.RequestType0<string, void>(\"rust-analyzer/memoryUsage\");\n \n export type Status = \"loading\" | \"ready\" | \"invalid\" | \"needsReload\";"}]}