{"sha": "1adc26d5e750b9cfd06981533056c59b68a78a1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhZGMyNmQ1ZTc1MGI5Y2ZkMDY5ODE1MzMwNTZjNTliNjhhNzhhMWI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-13T08:46:56Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-13T08:46:56Z"}, "message": "Annotate FIXMEs in syntax::ast and syntax::ast_util\n\nThe main non-comment change was to change simple_path to path,\nas per a FIXME in ast.", "tree": {"sha": "d190e25bf103a78e2797e0bea2d1cef930e4ce34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d190e25bf103a78e2797e0bea2d1cef930e4ce34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1adc26d5e750b9cfd06981533056c59b68a78a1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1adc26d5e750b9cfd06981533056c59b68a78a1b", "html_url": "https://github.com/rust-lang/rust/commit/1adc26d5e750b9cfd06981533056c59b68a78a1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1adc26d5e750b9cfd06981533056c59b68a78a1b/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16eb06c246f76bdfdda9aab978e57fb6171d6f7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/16eb06c246f76bdfdda9aab978e57fb6171d6f7b", "html_url": "https://github.com/rust-lang/rust/commit/16eb06c246f76bdfdda9aab978e57fb6171d6f7b"}], "stats": {"total": 106, "additions": 53, "deletions": 53}, "files": [{"sha": "40b4241684df6fb7723e763bf615720d0e6742ad", "filename": "src/librustsyntax/ast.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1adc26d5e750b9cfd06981533056c59b68a78a1b/src%2Flibrustsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1adc26d5e750b9cfd06981533056c59b68a78a1b/src%2Flibrustsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fast.rs?ref=1adc26d5e750b9cfd06981533056c59b68a78a1b", "patch": "@@ -18,8 +18,8 @@ import std::serialization::{serializer,\n                             serialize_bool,\n                             deserialize_bool};\n \n+/* Note #1972 -- spans are serialized but not deserialized */\n fn serialize_span<S>(_s: S, _v: span) {\n-    // FIXME-- serialize some span info\n }\n \n fn deserialize_span<D>(_d: D) -> span {\n@@ -171,7 +171,10 @@ enum proto {\n \n #[auto_serialize]\n enum vstore {\n-    vstore_fixed(option<uint>),   // [1,2,3,4]/_ or 4   FIXME: uint -> @expr\n+    /* FIXME: Change uint to @expr (actually only constant exprs,\n+       as per #2112)\n+     */\n+    vstore_fixed(option<uint>),   // [1,2,3,4]/_ or 4\n     vstore_uniq,                  // [1,2,3,4]/~\n     vstore_box,                   // [1,2,3,4]/@\n     vstore_slice(region)          // [1,2,3,4]/&(foo)?\n@@ -250,7 +253,9 @@ enum init_op { init_assign, init_move, }\n type initializer = {op: init_op, expr: @expr};\n \n #[auto_serialize]\n-type local_ =  // FIXME: should really be a refinement on pat\n+type local_ =  /* FIXME: should really be a refinement on pat\n+                  (pending discussion of #1697, #2178...)\n+                */\n     {is_mutbl: bool, ty: @ty, pat: @pat,\n      init: option<initializer>, id: node_id};\n \n@@ -289,7 +294,7 @@ enum expr_ {\n     expr_vstore(@expr, vstore),\n     expr_vec([@expr], mutability),\n     expr_rec([field], option<@expr>),\n-    expr_call(@expr, [@expr], bool),\n+    expr_call(@expr, [@expr], bool), // True iff last argument is a block\n     expr_tup([@expr]),\n     expr_bind(@expr, [option<@expr>]),\n     expr_binary(binop, @expr, @expr),\n@@ -315,6 +320,7 @@ enum expr_ {\n     /*\n      * FIXME: many of these @exprs should be constrained with\n      * is_lval once we have constrained types working.\n+     * (See #34)\n      */\n     expr_copy(@expr),\n     expr_move(@expr, @expr),\n@@ -341,9 +347,6 @@ enum expr_ {\n \n     /* preds that typestate is aware of */\n     expr_check(expr_check_mode, @expr),\n-\n-    /* FIXME Would be nice if expr_check desugared\n-       to expr_if_check. */\n     expr_if_check(@expr, blk, option<@expr>),\n     expr_mac(mac),\n }\n@@ -587,11 +590,6 @@ type variant_ = {name: ident, attrs: [attribute], args: [variant_arg],\n #[auto_serialize]\n type variant = spanned<variant_>;\n \n-// FIXME: May want to just use path here, which would allow things like\n-// 'import ::foo'\n-#[auto_serialize]\n-type simple_path = [ident];\n-\n #[auto_serialize]\n type path_list_ident_ = {name: ident, id: node_id};\n \n@@ -609,13 +607,13 @@ enum view_path_ {\n     // or just\n     //\n     // foo::bar::baz  (with 'baz =' implicitly on the left)\n-    view_path_simple(ident, @simple_path, node_id),\n+    view_path_simple(ident, @path, node_id),\n \n     // foo::bar::*\n-    view_path_glob(@simple_path, node_id),\n+    view_path_glob(@path, node_id),\n \n     // foo::bar::{a,b,c}\n-    view_path_list(@simple_path, [path_list_ident], node_id)\n+    view_path_list(@path, [path_list_ident], node_id)\n }\n \n #[auto_serialize]\n@@ -676,9 +674,6 @@ type class_member = spanned<class_member_>;\n enum class_member_ {\n     instance_var(ident, @ty, class_mutability, node_id, privacy),\n     class_method(@method)\n-    // without constrained types, have to duplicate some stuff. or factor out\n-    // item to separate out things with type params?\n-    // (FIXME) where do we enforce that type params is empty?\n }\n \n #[auto_serialize]"}, {"sha": "69c24d1e549ca95785859a81628be03e9d2b7228", "filename": "src/librustsyntax/ast_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1adc26d5e750b9cfd06981533056c59b68a78a1b/src%2Flibrustsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1adc26d5e750b9cfd06981533056c59b68a78a1b/src%2Flibrustsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fast_util.rs?ref=1adc26d5e750b9cfd06981533056c59b68a78a1b", "patch": "@@ -175,8 +175,8 @@ fn is_exported(i: ident, m: _mod) -> bool {\n                   }\n \n                   ast::view_path_list(path, ids, _) {\n-                    if vec::len(*path) == 1u {\n-                        if i == path[0] { ret true; }\n+                    if vec::len(path.node.idents) == 1u {\n+                        if i == path.node.idents[0] { ret true; }\n                         for ids.each {|id|\n                             if id.node.name == i { ret true; }\n                         }\n@@ -185,7 +185,7 @@ fn is_exported(i: ident, m: _mod) -> bool {\n                     }\n                   }\n \n-                  // FIXME: glob-exports aren't supported yet.\n+                  // FIXME: glob-exports aren't supported yet. (#2006)\n                   _ {}\n                 }\n             }"}, {"sha": "dc722ce36c11ad06497a2c433d1588fff4067fb3", "filename": "src/librustsyntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1adc26d5e750b9cfd06981533056c59b68a78a1b/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1adc26d5e750b9cfd06981533056c59b68a78a1b/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fparser.rs?ref=1adc26d5e750b9cfd06981533056c59b68a78a1b", "patch": "@@ -2624,7 +2624,10 @@ fn parse_view_path(p: parser) -> @ast::view_path {\n         let mut hi = p.span.hi;\n         ret @spanned(lo, hi,\n                      ast::view_path_simple(first_ident,\n-                                           @path, p.get_id()));\n+                        @spanned(lo, hi,\n+                                 {global: false, idents: path,\n+                                         types: []}),\n+                        p.get_id()));\n       }\n \n       token::MOD_SEP {\n@@ -2647,17 +2650,23 @@ fn parse_view_path(p: parser) -> @ast::view_path {\n                               parse_path_list_ident, p).node;\n                 let mut hi = p.span.hi;\n                 ret @spanned(lo, hi,\n-                             ast::view_path_list(@path, idents,\n-                                                 p.get_id()));\n+                             ast::view_path_list(@spanned(lo, hi,\n+                                {global: false,\n+                                 idents: path,\n+                                        types: []}), idents,\n+                             p.get_id()));\n               }\n \n               // foo::bar::*\n               token::BINOP(token::STAR) {\n                 p.bump();\n                 let mut hi = p.span.hi;\n                 ret @spanned(lo, hi,\n-                             ast::view_path_glob(@path,\n-                                                 p.get_id()));\n+                             ast::view_path_glob(@spanned(lo, hi,\n+                               {global: false,\n+                                idents: path,\n+                                types: []}),\n+                               p.get_id()));\n               }\n \n               _ { break; }\n@@ -2669,7 +2678,10 @@ fn parse_view_path(p: parser) -> @ast::view_path {\n     let mut hi = p.span.hi;\n     let last = path[vec::len(path) - 1u];\n     ret @spanned(lo, hi,\n-                 ast::view_path_simple(last, @path,\n+                 ast::view_path_simple(last, @spanned(lo, hi,\n+                                                      {global: false,\n+                                                              idents: path,\n+                                                              types: []}),\n                                        p.get_id()));\n }\n "}, {"sha": "f0aeeb20f5e9d3febbacd889e442935279c3785a", "filename": "src/librustsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1adc26d5e750b9cfd06981533056c59b68a78a1b/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1adc26d5e750b9cfd06981533056c59b68a78a1b/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fprint%2Fpprust.rs?ref=1adc26d5e750b9cfd06981533056c59b68a78a1b", "patch": "@@ -1426,31 +1426,23 @@ fn print_meta_item(s: ps, &&item: @ast::meta_item) {\n     end(s);\n }\n \n-fn print_simple_path(s: ps, path: ast::simple_path) {\n-    let mut first = true;\n-    for path.each {|id|\n-        if first { first = false; } else { word(s.s, \"::\"); }\n-        word(s.s, id);\n-    }\n-}\n-\n fn print_view_path(s: ps, &&vp: @ast::view_path) {\n     alt vp.node {\n       ast::view_path_simple(ident, path, _) {\n-        if path[vec::len(*path)-1u] != ident {\n+        if path.node.idents[vec::len(path.node.idents)-1u] != ident {\n             word_space(s, ident);\n             word_space(s, \"=\");\n         }\n-        print_simple_path(s, *path);\n+        print_path(s, path, false);\n       }\n \n       ast::view_path_glob(path, _) {\n-        print_simple_path(s, *path);\n+        print_path(s, path, false);\n         word(s.s, \"::*\");\n       }\n \n       ast::view_path_list(path, idents, _) {\n-        print_simple_path(s, *path);\n+        print_path(s, path, false);\n         word(s.s, \"::{\");\n         commasep(s, inconsistent, idents) {|s, w|\n             word(s.s, w.node.name)"}, {"sha": "79c78e2fcc45aae3d29b850f5aea23e5d8d00c0a", "filename": "src/rustc/front/core_inject.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1adc26d5e750b9cfd06981533056c59b68a78a1b/src%2Frustc%2Ffront%2Fcore_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1adc26d5e750b9cfd06981533056c59b68a78a1b/src%2Frustc%2Ffront%2Fcore_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fcore_inject.rs?ref=1adc26d5e750b9cfd06981533056c59b68a78a1b", "patch": "@@ -1,6 +1,7 @@\n import driver::session::session;\n import syntax::codemap;\n import syntax::ast;\n+import syntax::ast_util::*;\n import syntax::attr;\n \n export maybe_inject_libcore_ref;\n@@ -23,15 +24,15 @@ fn inject_libcore_ref(sess: session,\n \n     fn spanned<T: copy>(x: T) -> @ast::spanned<T> {\n         ret @{node: x,\n-              span: {lo: 0u, hi: 0u,\n-                     expn_info: option::none}};\n+            span: dummy_sp()};\n     }\n \n     let n1 = sess.next_node_id();\n     let n2 = sess.next_node_id();\n \n     let vi1 = spanned(ast::view_item_use(\"core\", [], n1));\n-    let vp = spanned(ast::view_path_glob(@[\"core\"], n2));\n+    let vp = spanned(ast::view_path_glob(ident_to_path(dummy_sp(), \"core\"),\n+                                         n2));\n     let vi2 = spanned(ast::view_item_import([vp]));\n \n     let vis = [vi1, vi2] + crate.node.module.view_items;"}, {"sha": "89059eb86ddbfd0bd5caeed5e7514954555c5eb9", "filename": "src/rustc/middle/ast_map.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1adc26d5e750b9cfd06981533056c59b68a78a1b/src%2Frustc%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1adc26d5e750b9cfd06981533056c59b68a78a1b/src%2Frustc%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fast_map.rs?ref=1adc26d5e750b9cfd06981533056c59b68a78a1b", "patch": "@@ -3,6 +3,7 @@ import std::map::hashmap;\n import syntax::ast::*;\n import syntax::print::pprust;\n import syntax::ast_util;\n+import middle::pat_util::*;\n import syntax::ast_util::inlined_item_methods;\n import syntax::{visit, codemap};\n import driver::session::session;\n@@ -233,9 +234,7 @@ fn map_view_item(vi: @view_item, cx: ctx, _v: vt) {\n             let (id, name) = alt vp.node {\n               view_path_simple(nm, _, id) { (id, nm) }\n               view_path_glob(pth, id) | view_path_list(pth, _, id) {\n-                  // should be a constraint on the type\n-                assert (vec::is_not_empty(*pth));\n-                (id, vec::last(*pth))\n+                (id, path_to_ident(pth))\n               }\n             };\n             cx.map.insert(id, node_export(vp, extend(cx, name)));"}, {"sha": "137ac3c600b4e535518bd36ec57b469e3c5a1b83", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1adc26d5e750b9cfd06981533056c59b68a78a1b/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1adc26d5e750b9cfd06981533056c59b68a78a1b/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=1adc26d5e750b9cfd06981533056c59b68a78a1b", "patch": "@@ -236,15 +236,16 @@ fn map_crate(e: @env, c: @ast::crate) {\n         iter_effective_import_paths(*i) { |vp|\n             alt vp.node {\n               ast::view_path_simple(name, path, id) {\n-                e.imports.insert(id, todo(name, path, vp.span, sc));\n+                e.imports.insert(id, todo(name, @path.node.idents, vp.span,\n+                                          sc));\n               }\n               ast::view_path_glob(path, id) {\n-                e.imports.insert(id, is_glob(path, sc, vp.span));\n+                e.imports.insert(id, is_glob(@path.node.idents, sc, vp.span));\n               }\n               ast::view_path_list(mod_path, idents, _) {\n                 for idents.each {|ident|\n                     let t = todo(ident.node.name,\n-                                 @(*mod_path + [ident.node.name]),\n+                                 @(mod_path.node.idents + [ident.node.name]),\n                                  ident.span, sc);\n                     e.imports.insert(ident.node.id, t);\n                 }\n@@ -297,7 +298,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n         iter_effective_import_paths(*vi) { |vp|\n             alt vp.node {\n               ast::view_path_glob(path, _) {\n-                alt follow_import(*e, sc, *path, vp.span) {\n+                alt follow_import(*e, sc, path.node.idents, vp.span) {\n                   some(imp) {\n                     let glob = {def: imp, path: vp};\n                     alt list::head(sc) {\n@@ -2083,8 +2084,8 @@ fn check_exports(e: @env) {\n                         check_export(e, ident, _mod, id, vi);\n                       }\n                       ast::view_path_list(path, ids, node_id) {\n-                        let id = if vec::len(*path) == 1u {\n-                            path[0]\n+                        let id = if vec::len(path.node.idents) == 1u {\n+                            path.node.idents[0]\n                         } else {\n                             e.sess.span_fatal(vp.span, \"bad export name-list\")\n                         };\n@@ -2151,12 +2152,12 @@ fn find_impls_in_view_item(e: env, vi: @ast::view_item,\n         alt vp.node {\n           ast::view_path_simple(name, pt, id) {\n             let mut found = [];\n-            if vec::len(*pt) == 1u {\n+            if vec::len(pt.node.idents) == 1u {\n                 option::iter(sc) {|sc|\n                     list::iter(sc) {|level|\n                         if vec::len(found) == 0u {\n                             for vec::each(*level) {|imp|\n-                                if imp.ident == pt[0] {\n+                                if imp.ident == pt.node.idents[0] {\n                                     found += [@{ident: name with *imp}];\n                                 }\n                             }"}]}