{"sha": "06d47a414bdf6be59fe8393fdd1ccb0247dce6f2", "node_id": "C_kwDOAAsO6NoAKDA2ZDQ3YTQxNGJkZjZiZTU5ZmU4MzkzZmRkMWNjYjAyNDdkY2U2ZjI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-01T02:41:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-01T02:41:50Z"}, "message": "Rollup merge of #94094 - chrisnc:tcp-nodelay-windows-bool, r=dtolnay\n\nuse BOOL for TCP_NODELAY setsockopt value on Windows\n\nThis issue was found by the Wine project and mitigated there [^1].\n\nWindows' setsockopt expects a BOOL (a typedef for int) for TCP_NODELAY\n[^2]. Windows itself is forgiving and will accept any positive optlen and\ninterpret the first byte of *optval as the value, so this bug does not\naffect Windows itself, but does affect systems implementing Windows'\ninterface more strictly, such as Wine. Wine was previously passing this\nthrough to the host's setsockopt, where, e.g., Linux requires that\noptlen be correct for the chosen option, and TCP_NODELAY expects an int.\n\n[^1]: https://source.winehq.org/git/wine.git/commit/d6ea38f32dfd3edbe107a255c37e9f7f3da06ae7\n[^2]: https://docs.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-setsockopt", "tree": {"sha": "a210e0af1072c1d2a643249d0edc9a4549a6d2e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a210e0af1072c1d2a643249d0edc9a4549a6d2e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06d47a414bdf6be59fe8393fdd1ccb0247dce6f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiHYfuCRBK7hj4Ov3rIwAAtNUIAHIHICBryWQhGty+prqKCp0z\nj2NZsxXdg7Lsaao/TOYNI8nO5C6wuK8tbQ2l34awbCHMxS55+XKKjgS9LFx0vOAw\nUM52ML3o2ND2+qF3ljPNW6nu9Joz7vkQUEWxvMSPh3WWOdKRH6aqYgoUi6Klc89p\nWit2i+JPWdsPlphyK1KHUFLefBTu8Y+jg8LqyehA4oost9sLA+xnUsjCDVCuwoOf\ndrYBuH+VETkcb1M9Ksftzt+xz9nmHG/5ZFvXW7bIFHDYRBDx5sxllxtd1Oltk2fX\nCItweQXj/au2XVgOQ9eIsz8/MKwun5frHzz5JdUQ2eYJb0XlbyPzsgrdQakpMww=\n=3+Au\n-----END PGP SIGNATURE-----\n", "payload": "tree a210e0af1072c1d2a643249d0edc9a4549a6d2e5\nparent daed86445de99e6dfcf128948bf34fff96c733ef\nparent b02698c7e6843d6feacc394cb7f83f3fc347c3e2\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646102510 +0100\ncommitter GitHub <noreply@github.com> 1646102510 +0100\n\nRollup merge of #94094 - chrisnc:tcp-nodelay-windows-bool, r=dtolnay\n\nuse BOOL for TCP_NODELAY setsockopt value on Windows\n\nThis issue was found by the Wine project and mitigated there [^1].\n\nWindows' setsockopt expects a BOOL (a typedef for int) for TCP_NODELAY\n[^2]. Windows itself is forgiving and will accept any positive optlen and\ninterpret the first byte of *optval as the value, so this bug does not\naffect Windows itself, but does affect systems implementing Windows'\ninterface more strictly, such as Wine. Wine was previously passing this\nthrough to the host's setsockopt, where, e.g., Linux requires that\noptlen be correct for the chosen option, and TCP_NODELAY expects an int.\n\n[^1]: https://source.winehq.org/git/wine.git/commit/d6ea38f32dfd3edbe107a255c37e9f7f3da06ae7\n[^2]: https://docs.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-setsockopt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06d47a414bdf6be59fe8393fdd1ccb0247dce6f2", "html_url": "https://github.com/rust-lang/rust/commit/06d47a414bdf6be59fe8393fdd1ccb0247dce6f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06d47a414bdf6be59fe8393fdd1ccb0247dce6f2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daed86445de99e6dfcf128948bf34fff96c733ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/daed86445de99e6dfcf128948bf34fff96c733ef", "html_url": "https://github.com/rust-lang/rust/commit/daed86445de99e6dfcf128948bf34fff96c733ef"}, {"sha": "b02698c7e6843d6feacc394cb7f83f3fc347c3e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b02698c7e6843d6feacc394cb7f83f3fc347c3e2", "html_url": "https://github.com/rust-lang/rust/commit/b02698c7e6843d6feacc394cb7f83f3fc347c3e2"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "5de12313784883f774036c52a7011bf64edf3e31", "filename": "library/std/src/sys/windows/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06d47a414bdf6be59fe8393fdd1ccb0247dce6f2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d47a414bdf6be59fe8393fdd1ccb0247dce6f2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs?ref=06d47a414bdf6be59fe8393fdd1ccb0247dce6f2", "patch": "@@ -407,11 +407,11 @@ impl Socket {\n     }\n \n     pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {\n-        net::setsockopt(self, c::IPPROTO_TCP, c::TCP_NODELAY, nodelay as c::BYTE)\n+        net::setsockopt(self, c::IPPROTO_TCP, c::TCP_NODELAY, nodelay as c::BOOL)\n     }\n \n     pub fn nodelay(&self) -> io::Result<bool> {\n-        let raw: c::BYTE = net::getsockopt(self, c::IPPROTO_TCP, c::TCP_NODELAY)?;\n+        let raw: c::BOOL = net::getsockopt(self, c::IPPROTO_TCP, c::TCP_NODELAY)?;\n         Ok(raw != 0)\n     }\n "}, {"sha": "3b7cdd55a081c3149114346fe835416b832ed5e6", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/06d47a414bdf6be59fe8393fdd1ccb0247dce6f2/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d47a414bdf6be59fe8393fdd1ccb0247dce6f2/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=06d47a414bdf6be59fe8393fdd1ccb0247dce6f2", "patch": "@@ -58,21 +58,36 @@ cfg_if::cfg_if! {\n // sockaddr and misc bindings\n ////////////////////////////////////////////////////////////////////////////////\n \n-pub fn setsockopt<T>(sock: &Socket, opt: c_int, val: c_int, payload: T) -> io::Result<()> {\n+pub fn setsockopt<T>(\n+    sock: &Socket,\n+    level: c_int,\n+    option_name: c_int,\n+    option_value: T,\n+) -> io::Result<()> {\n     unsafe {\n-        let payload = &payload as *const T as *const c_void;\n-        cvt(c::setsockopt(sock.as_raw(), opt, val, payload, mem::size_of::<T>() as c::socklen_t))?;\n+        cvt(c::setsockopt(\n+            sock.as_raw(),\n+            level,\n+            option_name,\n+            &option_value as *const T as *const _,\n+            mem::size_of::<T>() as c::socklen_t,\n+        ))?;\n         Ok(())\n     }\n }\n \n-pub fn getsockopt<T: Copy>(sock: &Socket, opt: c_int, val: c_int) -> io::Result<T> {\n+pub fn getsockopt<T: Copy>(sock: &Socket, level: c_int, option_name: c_int) -> io::Result<T> {\n     unsafe {\n-        let mut slot: T = mem::zeroed();\n-        let mut len = mem::size_of::<T>() as c::socklen_t;\n-        cvt(c::getsockopt(sock.as_raw(), opt, val, &mut slot as *mut _ as *mut _, &mut len))?;\n-        assert_eq!(len as usize, mem::size_of::<T>());\n-        Ok(slot)\n+        let mut option_value: T = mem::zeroed();\n+        let mut option_len = mem::size_of::<T>() as c::socklen_t;\n+        cvt(c::getsockopt(\n+            sock.as_raw(),\n+            level,\n+            option_name,\n+            &mut option_value as *mut T as *mut _,\n+            &mut option_len,\n+        ))?;\n+        Ok(option_value)\n     }\n }\n "}]}