{"sha": "7ff376b3b27d2e5c5c01b336924bcc3e507e5c4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZjM3NmIzYjI3ZDJlNWM1YzAxYjMzNjkyNGJjYzNlNTA3ZTVjNGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-13T22:39:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-13T22:39:44Z"}, "message": "Rollup merge of #59812 - michaelwoerister:profile-gen-msvc-imp, r=alexcrichton\n\nExclude profiler-generated symbols from MSVC __imp_-symbol workaround.\n\nLLVM's profiling instrumentation adds a few symbols that are used by the profiler runtime. Since these show up as globals in the LLVM IR, the compiler generates `dllimport`-related `__imp_` stubs for them. This can lead to linker errors because the instrumentation symbols have weak linkage or are in a comdat section, but the `__imp_` stubs aren't.\n\nInstead of trying to replicate the linkage/comdat setup for the stubs, this PR just excludes the profiler-related symbols from stub-generation since they aren't supposed to be referenced via `__declspec(dllimport)` anywhere anyway.\n\nr? @alexcrichton\n\nEDIT: I considered making this more general, i.e. inferring from the symbol name if it is a Rust symbol or not. But then I figured out that that would yield false negatives for `#[no_mangle]` et al, so I went with a blacklist approach.", "tree": {"sha": "78ad46500c21bb3cad0f686c2ae348b115f39b93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78ad46500c21bb3cad0f686c2ae348b115f39b93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ff376b3b27d2e5c5c01b336924bcc3e507e5c4d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcsmUxCRBK7hj4Ov3rIwAAdHIIAIfT5edldt1uI/rrIwrt/jmD\nq+sqFKbubNt/NJclz2Yz9U3M4q81co4QxfpewiDnsd9XJy3tO9mXqdzdj40OzHKR\nejsYlD32++khyuodBQI1WOzUD/IQ9zg3k3CbgyObtuIrLovCOiZ6n3Z+p6nddP6n\nJ3cpVaMA/hFwFqJDNh0nTWSZjOPqIsx0NWcMeRsDHCGb7dgaL5VKfo3oNu4dRNwh\n4Ywr4i6OCApe/+YhZnFo91FyZ5HPExXmK1VxDhYfDkLMo1hCxhjZnWyarANEp2Yn\nCuI85LNgNQiMzFtFVMKS+uCm+L9Mk0yw5pGEvcxOdiw89RmZjQkUXcxGQNSaH1c=\n=YWnc\n-----END PGP SIGNATURE-----\n", "payload": "tree 78ad46500c21bb3cad0f686c2ae348b115f39b93\nparent c4a3332d38c6c92394b5f7818f0a963fbcf86052\nparent 724ca0584e2be0714edf2f30b86230666d7a9d19\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1555195184 +0200\ncommitter GitHub <noreply@github.com> 1555195184 +0200\n\nRollup merge of #59812 - michaelwoerister:profile-gen-msvc-imp, r=alexcrichton\n\nExclude profiler-generated symbols from MSVC __imp_-symbol workaround.\n\nLLVM's profiling instrumentation adds a few symbols that are used by the profiler runtime. Since these show up as globals in the LLVM IR, the compiler generates `dllimport`-related `__imp_` stubs for them. This can lead to linker errors because the instrumentation symbols have weak linkage or are in a comdat section, but the `__imp_` stubs aren't.\n\nInstead of trying to replicate the linkage/comdat setup for the stubs, this PR just excludes the profiler-related symbols from stub-generation since they aren't supposed to be referenced via `__declspec(dllimport)` anywhere anyway.\n\nr? @alexcrichton\n\nEDIT: I considered making this more general, i.e. inferring from the symbol name if it is a Rust symbol or not. But then I figured out that that would yield false negatives for `#[no_mangle]` et al, so I went with a blacklist approach.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ff376b3b27d2e5c5c01b336924bcc3e507e5c4d", "html_url": "https://github.com/rust-lang/rust/commit/7ff376b3b27d2e5c5c01b336924bcc3e507e5c4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ff376b3b27d2e5c5c01b336924bcc3e507e5c4d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4a3332d38c6c92394b5f7818f0a963fbcf86052", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4a3332d38c6c92394b5f7818f0a963fbcf86052", "html_url": "https://github.com/rust-lang/rust/commit/c4a3332d38c6c92394b5f7818f0a963fbcf86052"}, {"sha": "724ca0584e2be0714edf2f30b86230666d7a9d19", "url": "https://api.github.com/repos/rust-lang/rust/commits/724ca0584e2be0714edf2f30b86230666d7a9d19", "html_url": "https://github.com/rust-lang/rust/commit/724ca0584e2be0714edf2f30b86230666d7a9d19"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "3ae169a597ae16e5a5dc2ec4f469ceb7e7b8bc65", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7ff376b3b27d2e5c5c01b336924bcc3e507e5c4d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff376b3b27d2e5c5c01b336924bcc3e507e5c4d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=7ff376b3b27d2e5c5c01b336924bcc3e507e5c4d", "patch": "@@ -793,21 +793,31 @@ fn create_msvc_imps(\n     } else {\n         \"\\x01__imp_\"\n     };\n+\n     unsafe {\n         let i8p_ty = Type::i8p_llcx(llcx);\n         let globals = base::iter_globals(llmod)\n             .filter(|&val| {\n                 llvm::LLVMRustGetLinkage(val) == llvm::Linkage::ExternalLinkage &&\n                     llvm::LLVMIsDeclaration(val) == 0\n             })\n-            .map(move |val| {\n+            .filter_map(|val| {\n+                // Exclude some symbols that we know are not Rust symbols.\n                 let name = CStr::from_ptr(llvm::LLVMGetValueName(val));\n+                if ignored(name.to_bytes()) {\n+                    None\n+                } else {\n+                    Some((val, name))\n+                }\n+            })\n+            .map(move |(val, name)| {\n                 let mut imp_name = prefix.as_bytes().to_vec();\n                 imp_name.extend(name.to_bytes());\n                 let imp_name = CString::new(imp_name).unwrap();\n                 (imp_name, val)\n             })\n             .collect::<Vec<_>>();\n+\n         for (imp_name, val) in globals {\n             let imp = llvm::LLVMAddGlobal(llmod,\n                                           i8p_ty,\n@@ -816,4 +826,10 @@ fn create_msvc_imps(\n             llvm::LLVMRustSetLinkage(imp, llvm::Linkage::ExternalLinkage);\n         }\n     }\n+\n+    // Use this function to exclude certain symbols from `__imp` generation.\n+    fn ignored(symbol_name: &[u8]) -> bool {\n+        // These are symbols generated by LLVM's profiling instrumentation\n+        symbol_name.starts_with(b\"__llvm_profile_\")\n+    }\n }"}, {"sha": "dc52e91317a5ae1b7c678171560c1321e67c81a1", "filename": "src/test/run-make-fulldeps/pgo-gen-no-imp-symbols/Makefile", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ff376b3b27d2e5c5c01b336924bcc3e507e5c4d/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7ff376b3b27d2e5c5c01b336924bcc3e507e5c4d/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile?ref=7ff376b3b27d2e5c5c01b336924bcc3e507e5c4d", "patch": "@@ -0,0 +1,11 @@\n+-include ../tools.mk\n+\n+all:\n+ifeq ($(PROFILER_SUPPORT),1)\n+\t$(RUSTC) -O -Ccodegen-units=1 -Z pgo-gen=\"$(TMPDIR)/test.profraw\" --emit=llvm-ir test.rs\n+\t# We expect symbols starting with \"__llvm_profile_\".\n+\t$(CGREP) \"__llvm_profile_\" < $(TMPDIR)/test.ll\n+\t# We do NOT expect the \"__imp_\" version of these symbols.\n+\t$(CGREP) -v \"__imp___llvm_profile_\" < $(TMPDIR)/test.ll # 64 bit\n+\t$(CGREP) -v \"__imp____llvm_profile_\" < $(TMPDIR)/test.ll # 32 bit\n+endif"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "src/test/run-make-fulldeps/pgo-gen-no-imp-symbols/test.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ff376b3b27d2e5c5c01b336924bcc3e507e5c4d/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff376b3b27d2e5c5c01b336924bcc3e507e5c4d/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2Ftest.rs?ref=7ff376b3b27d2e5c5c01b336924bcc3e507e5c4d", "patch": "@@ -0,0 +1 @@\n+fn main() {}"}]}