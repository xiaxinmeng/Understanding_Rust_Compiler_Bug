{"sha": "f03d0b38d6a33a64307d83f8ddd3df8ef57ca537", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwM2QwYjM4ZDZhMzNhNjQzMDdkODNmOGRkZDNkZjhlZjU3Y2E1Mzc=", "commit": {"author": {"name": "mental32", "email": "m3nta1@yahoo.com", "date": "2020-08-27T18:19:29Z"}, "committer": {"name": "mental32", "email": "m3nta1@yahoo.com", "date": "2020-08-27T18:19:29Z"}, "message": "`impl Rc::new_cyclic`", "tree": {"sha": "d2ff9d973e76e3511d547efe24e662555d6c8ba5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2ff9d973e76e3511d547efe24e662555d6c8ba5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f03d0b38d6a33a64307d83f8ddd3df8ef57ca537", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f03d0b38d6a33a64307d83f8ddd3df8ef57ca537", "html_url": "https://github.com/rust-lang/rust/commit/f03d0b38d6a33a64307d83f8ddd3df8ef57ca537", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f03d0b38d6a33a64307d83f8ddd3df8ef57ca537/comments", "author": {"login": "mental32", "id": 27660514, "node_id": "MDQ6VXNlcjI3NjYwNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/27660514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mental32", "html_url": "https://github.com/mental32", "followers_url": "https://api.github.com/users/mental32/followers", "following_url": "https://api.github.com/users/mental32/following{/other_user}", "gists_url": "https://api.github.com/users/mental32/gists{/gist_id}", "starred_url": "https://api.github.com/users/mental32/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mental32/subscriptions", "organizations_url": "https://api.github.com/users/mental32/orgs", "repos_url": "https://api.github.com/users/mental32/repos", "events_url": "https://api.github.com/users/mental32/events{/privacy}", "received_events_url": "https://api.github.com/users/mental32/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mental32", "id": 27660514, "node_id": "MDQ6VXNlcjI3NjYwNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/27660514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mental32", "html_url": "https://github.com/mental32", "followers_url": "https://api.github.com/users/mental32/followers", "following_url": "https://api.github.com/users/mental32/following{/other_user}", "gists_url": "https://api.github.com/users/mental32/gists{/gist_id}", "starred_url": "https://api.github.com/users/mental32/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mental32/subscriptions", "organizations_url": "https://api.github.com/users/mental32/orgs", "repos_url": "https://api.github.com/users/mental32/repos", "events_url": "https://api.github.com/users/mental32/events{/privacy}", "received_events_url": "https://api.github.com/users/mental32/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf4342114e357f2934d59e12e31e94532ddb2adf", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf4342114e357f2934d59e12e31e94532ddb2adf", "html_url": "https://github.com/rust-lang/rust/commit/bf4342114e357f2934d59e12e31e94532ddb2adf"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "76266d77bb0d268d763f30c3ec31e22621f2f1a4", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f03d0b38d6a33a64307d83f8ddd3df8ef57ca537/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03d0b38d6a33a64307d83f8ddd3df8ef57ca537/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=f03d0b38d6a33a64307d83f8ddd3df8ef57ca537", "patch": "@@ -325,6 +325,40 @@ impl<T> Rc<T> {\n         )\n     }\n \n+    /// Constructs a new `Rc<T>` using a weak reference to itself. Attempting\n+    /// to upgrade the weak reference before this function retuns will result\n+    /// in a `None` value. However, the weak reference may be cloned freely and\n+    /// stored for use at a later time.\n+    #[inline]\n+    #[unstable(feature = \"arc_new_cyclic\", issue = \"75861\")]\n+    pub fn new_cyclic(data_fn: impl FnOnce(&Weak<T>) -> T) -> Rc<T> {\n+        let uninit_ptr: NonNull<_> = Box::leak(box RcBox {\n+            strong: Cell::new(0),\n+            weak: Cell::new(1),\n+            value: mem::MaybeUninit::<T>::uninit(),\n+        })\n+        .into();\n+\n+        let init_ptr: NonNull<RcBox<T>> = uninit_ptr.cast();\n+\n+        let weak = Weak { ptr: init_ptr };\n+\n+        let data = data_fn(&weak);\n+\n+        unsafe {\n+            let inner = init_ptr.as_ptr();\n+            ptr::write(&raw mut (*inner).value, data);\n+\n+            let prev_value = (*inner).strong.get();\n+            debug_assert_eq!(prev_value, 0, \"No prior strong references should exist\");\n+            (*inner).strong.set(1);\n+        }\n+\n+        let strong = Rc::from_inner(init_ptr);\n+        mem::forget(weak);\n+        strong\n+    }\n+\n     /// Constructs a new `Rc` with uninitialized contents.\n     ///\n     /// # Examples"}, {"sha": "fed48a59f809e2b13ee4db1ea13d9da03758953a", "filename": "library/alloc/src/rc/tests.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/f03d0b38d6a33a64307d83f8ddd3df8ef57ca537/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03d0b38d6a33a64307d83f8ddd3df8ef57ca537/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc%2Ftests.rs?ref=f03d0b38d6a33a64307d83f8ddd3df8ef57ca537", "patch": "@@ -434,3 +434,69 @@ fn test_array_from_slice() {\n     let a: Result<Rc<[u32; 2]>, _> = r.clone().try_into();\n     assert!(a.is_err());\n }\n+\n+#[test]\n+fn test_rc_cyclic_with_zero_refs() {\n+    struct ZeroRefs {\n+        inner: Weak<ZeroRefs>,\n+    }\n+\n+    let zero_refs = Rc::new_cyclic(|inner| {\n+        assert_eq!(inner.strong_count(), 0);\n+        assert!(inner.upgrade().is_none());\n+        ZeroRefs { inner: Weak::new() }\n+    });\n+\n+    assert_eq!(Rc::strong_count(&zero_refs), 1);\n+    assert_eq!(Rc::weak_count(&zero_refs), 0);\n+    assert_eq!(zero_refs.inner.strong_count(), 0);\n+    assert_eq!(zero_refs.inner.weak_count(), 0);\n+}\n+\n+#[test]\n+fn test_rc_cyclic_with_one_ref() {\n+    struct OneRef {\n+        inner: Weak<OneRef>,\n+    }\n+\n+    let one_ref = Rc::new_cyclic(|inner| {\n+        assert_eq!(inner.strong_count(), 0);\n+        assert!(inner.upgrade().is_none());\n+        OneRef { inner: inner.clone() }\n+    });\n+\n+    assert_eq!(Rc::strong_count(&one_ref), 1);\n+    assert_eq!(Rc::weak_count(&one_ref), 1);\n+\n+    let one_ref2 = Weak::upgrade(&one_ref.inner).unwrap();\n+    assert!(Rc::ptr_eq(&one_ref, &one_ref2));\n+\n+    assert_eq!(one_ref.inner.strong_count(), 2);\n+    assert_eq!(one_ref.inner.weak_count(), 1);\n+}\n+\n+#[test]\n+fn test_rc_cyclic_with_two_ref() {\n+    struct TwoRefs {\n+        inner: Weak<TwoRefs>,\n+        inner1: Weak<TwoRefs>,\n+    }\n+\n+    let two_refs = Rc::new_cyclic(|inner| {\n+        assert_eq!(inner.strong_count(), 0);\n+        assert!(inner.upgrade().is_none());\n+        TwoRefs { inner: inner.clone(), inner1: inner.clone() }\n+    });\n+\n+    assert_eq!(Rc::strong_count(&two_refs), 1);\n+    assert_eq!(Rc::weak_count(&two_refs), 2);\n+\n+    let two_ref3 = Weak::upgrade(&two_refs.inner).unwrap();\n+    assert!(Rc::ptr_eq(&two_refs, &two_ref3));\n+\n+    let two_ref2 = Weak::upgrade(&two_refs.inner1).unwrap();\n+    assert!(Rc::ptr_eq(&two_refs, &two_ref2));\n+\n+    assert_eq!(Rc::strong_count(&two_refs), 3);\n+    assert_eq!(Rc::weak_count(&two_refs), 2);\n+}"}]}