{"sha": "2e0d6d49bf6c95185229ac19f8b1c43f1bca31fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMGQ2ZDQ5YmY2Yzk1MTg1MjI5YWMxOWY4YjFjNDNmMWJjYTMxZmQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-11T11:59:08Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-11T11:59:08Z"}, "message": "Deduplicate function name generation", "tree": {"sha": "2770025b8b0d55b6663d33e0918976de5244fdec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2770025b8b0d55b6663d33e0918976de5244fdec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e0d6d49bf6c95185229ac19f8b1c43f1bca31fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e0d6d49bf6c95185229ac19f8b1c43f1bca31fd", "html_url": "https://github.com/rust-lang/rust/commit/2e0d6d49bf6c95185229ac19f8b1c43f1bca31fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e0d6d49bf6c95185229ac19f8b1c43f1bca31fd/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "419cbcbe2fa365a3251fd4361fa04eaae09dba89", "url": "https://api.github.com/repos/rust-lang/rust/commits/419cbcbe2fa365a3251fd4361fa04eaae09dba89", "html_url": "https://github.com/rust-lang/rust/commit/419cbcbe2fa365a3251fd4361fa04eaae09dba89"}], "stats": {"total": 74, "additions": 39, "deletions": 35}, "files": [{"sha": "4e6ccf7adfc52b79186b5d82eb6119bbbeb9553a", "filename": "src/abi.rs", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2e0d6d49bf6c95185229ac19f8b1c43f1bca31fd/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0d6d49bf6c95185229ac19f8b1c43f1bca31fd/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=2e0d6d49bf6c95185229ac19f8b1c43f1bca31fd", "patch": "@@ -30,7 +30,7 @@ fn get_pass_mode<'a, 'tcx: 'a>(\n ) -> PassMode {\n     if ty.sty == tcx.mk_nil().sty {\n         if is_return {\n-        //if false {\n+            //if false {\n             PassMode::NoPass\n         } else {\n             PassMode::ByRef\n@@ -153,16 +153,37 @@ fn ty_fn_sig<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> ty::FnSig<'\n     tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &sig)\n }\n \n+fn get_function_name_and_sig<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    inst: Instance<'tcx>,\n+) -> (String, Signature) {\n+    assert!(!inst.substs.needs_infer() && !inst.substs.has_param_types());\n+    let fn_ty = inst.ty(tcx);\n+    let sig = cton_sig_from_fn_ty(tcx, fn_ty);\n+    let def_path_based_names =\n+        ::rustc_mir::monomorphize::item::DefPathBasedNames::new(tcx, false, false);\n+    let mut name = String::new();\n+    def_path_based_names.push_instance_as_string(inst, &mut name);\n+    (name, sig)\n+}\n+\n+impl<'a, 'tcx: 'a> CodegenCx<'a, 'tcx, CurrentBackend> {\n+    pub fn predefine_function(&mut self, inst: Instance<'tcx>) -> (FuncId, Function) {\n+        let (name, sig) = crate::abi::get_function_name_and_sig(self.tcx, inst);\n+        let func_id = self\n+            .module\n+            .declare_function(&name, Linkage::Export, &sig)\n+            .unwrap();\n+        let func =\n+            Function::with_name_signature(ExternalName::user(0, func_id.index() as u32), sig);\n+        (func_id, func)\n+    }\n+}\n+\n impl<'a, 'tcx: 'a> FunctionCx<'a, 'tcx> {\n     /// Instance must be monomorphized\n     pub fn get_function_ref(&mut self, inst: Instance<'tcx>) -> FuncRef {\n-        assert!(!inst.substs.needs_infer() && !inst.substs.has_param_types());\n-        let fn_ty = inst.ty(self.tcx);\n-        let sig = cton_sig_from_fn_ty(self.tcx, fn_ty);\n-        let def_path_based_names =\n-            ::rustc_mir::monomorphize::item::DefPathBasedNames::new(self.tcx, false, false);\n-        let mut name = String::new();\n-        def_path_based_names.push_instance_as_string(inst, &mut name);\n+        let (name, sig) = get_function_name_and_sig(self.tcx, inst);\n         let func_id = self\n             .module\n             .declare_function(&name, Linkage::Import, &sig)\n@@ -455,10 +476,10 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n         .chain(\n             args.into_iter()\n                 .map(|arg| match get_pass_mode(fx.tcx, sig.abi, arg.layout().ty, false) {\n-                    PassMode::NoPass => unimplemented!(\"pass mode nopass\"),\n-                    PassMode::ByVal(_) => arg.load_value(fx),\n-                    PassMode::ByRef => arg.force_stack(fx),\n-                }),\n+                PassMode::NoPass => unimplemented!(\"pass mode nopass\"),\n+                PassMode::ByVal(_) => arg.load_value(fx),\n+                PassMode::ByRef => arg.force_stack(fx),\n+            }),\n         ).collect::<Vec<_>>();\n \n     let inst = match func {"}, {"sha": "a5d93959552f8766f898c10130b4784dc434cb2f", "filename": "src/base.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2e0d6d49bf6c95185229ac19f8b1c43f1bca31fd/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0d6d49bf6c95185229ac19f8b1c43f1bca31fd/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=2e0d6d49bf6c95185229ac19f8b1c43f1bca31fd", "patch": "@@ -27,42 +27,25 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n                     ty::ParamEnv::reveal_all(),\n                     &fn_ty,\n                 );\n-                let sig = cton_sig_from_fn_ty(tcx, fn_ty);\n-\n-                let func_id = {\n-                    // WARNING: keep in sync with FunctionCx::get_function_ref\n-                    let def_path_based_names =\n-                        ::rustc_mir::monomorphize::item::DefPathBasedNames::new(\n-                            cx.tcx, false, false,\n-                        );\n-                    let mut name = String::new();\n-                    def_path_based_names.push_instance_as_string(inst, &mut name);\n-                    cx.module\n-                        .declare_function(&name, Linkage::Export, &sig)\n-                        .unwrap()\n-                };\n \n-                let mut f = Function::with_name_signature(\n-                    ExternalName::user(0, func_id.index() as u32),\n-                    sig,\n-                );\n+                let (func_id, mut func) = cx.predefine_function(inst);\n \n-                let comments = trans_fn(cx, &mut f, inst);\n+                let comments = trans_fn(cx, &mut func, inst);\n \n                 let mut writer = crate::pretty_clif::CommentWriter(comments);\n                 let mut cton = String::new();\n-                ::cranelift::codegen::write::decorate_function(&mut writer, &mut cton, &f, None)\n+                ::cranelift::codegen::write::decorate_function(&mut writer, &mut cton, &func, None)\n                     .unwrap();\n                 tcx.sess.warn(&cton);\n \n                 let flags = settings::Flags::new(settings::builder());\n-                match ::cranelift::codegen::verify_function(&f, &flags) {\n+                match ::cranelift::codegen::verify_function(&func, &flags) {\n                     Ok(_) => {}\n                     Err(err) => {\n                         tcx.sess.err(&format!(\"{:?}\", err));\n                         let pretty_error =\n                             ::cranelift::codegen::print_errors::pretty_verifier_error(\n-                                &f,\n+                                &func,\n                                 None,\n                                 Some(Box::new(writer)),\n                                 &err,\n@@ -72,7 +55,7 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n                     }\n                 }\n \n-                context.func = f;\n+                context.func = func;\n                 // TODO: cranelift doesn't yet support some of the things needed\n                 if false {\n                     cx.module.define_function(func_id, context).unwrap();"}]}