{"sha": "63980cd0fb4b0993e71b482e0a14b72b0ca82fa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzOTgwY2QwZmI0YjA5OTNlNzFiNDgyZTBhMTRiNzJiMGNhODJmYTE=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-06T10:59:29Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-06T11:05:40Z"}, "message": "Add a Hir wrapper type", "tree": {"sha": "28bf9bde22add5c4354a9530cbf9d12169633466", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28bf9bde22add5c4354a9530cbf9d12169633466"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1", "html_url": "https://github.com/rust-lang/rust/commit/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "333c32a5a4a51cae562c47e0669bc5aeaf741c45", "url": "https://api.github.com/repos/rust-lang/rust/commits/333c32a5a4a51cae562c47e0669bc5aeaf741c45", "html_url": "https://github.com/rust-lang/rust/commit/333c32a5a4a51cae562c47e0669bc5aeaf741c45"}], "stats": {"total": 66, "additions": 47, "deletions": 19}, "files": [{"sha": "4a4d9cb81456d266de2d1235ffbb85b51c30545c", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=63980cd0fb4b0993e71b482e0a14b72b0ca82fa1", "patch": "@@ -7,6 +7,38 @@ pub mod exports;\n pub mod map;\n \n use crate::ty::query::Providers;\n+use crate::ty::TyCtxt;\n+use rustc_hir::print;\n+use std::ops::Deref;\n+\n+/// A wrapper type which allows you to access HIR.\n+#[derive(Clone)]\n+pub struct Hir<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    map: &'tcx map::Map<'tcx>,\n+}\n+\n+impl<'tcx> Deref for Hir<'tcx> {\n+    type Target = &'tcx map::Map<'tcx>;\n+\n+    #[inline(always)]\n+    fn deref(&self) -> &Self::Target {\n+        &self.map\n+    }\n+}\n+\n+impl<'hir> print::PpAnn for Hir<'hir> {\n+    fn nested(&self, state: &mut print::State<'_>, nested: print::Nested) {\n+        self.map.nested(state, nested)\n+    }\n+}\n+\n+impl<'tcx> TyCtxt<'tcx> {\n+    #[inline(always)]\n+    pub fn hir(self) -> Hir<'tcx> {\n+        Hir { tcx: self, map: &self.hir_map }\n+    }\n+}\n \n pub fn provide(providers: &mut Providers<'_>) {\n     map::provide(providers);"}, {"sha": "5a0cb45d0bbe842bddc64d03d998218b934f3345", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=63980cd0fb4b0993e71b482e0a14b72b0ca82fa1", "patch": "@@ -966,7 +966,7 @@ pub struct GlobalCtxt<'tcx> {\n     /// Export map produced by name resolution.\n     export_map: FxHashMap<DefId, Vec<Export<hir::HirId>>>,\n \n-    hir_map: hir_map::Map<'tcx>,\n+    pub(crate) hir_map: hir_map::Map<'tcx>,\n \n     /// A map from `DefPathHash` -> `DefId`. Includes `DefId`s from the local crate\n     /// as well as all upstream crates. Only populated in incremental mode.\n@@ -1019,11 +1019,6 @@ pub struct GlobalCtxt<'tcx> {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n-    #[inline(always)]\n-    pub fn hir(self) -> &'tcx hir_map::Map<'tcx> {\n-        &self.hir_map\n-    }\n-\n     pub fn alloc_steal_mir(self, mir: BodyAndCache<'tcx>) -> &'tcx Steal<BodyAndCache<'tcx>> {\n         self.arena.alloc(Steal::new(mir))\n     }"}, {"sha": "4606ef81a360e3012b652c8bdca5ba52475355f3", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=63980cd0fb4b0993e71b482e0a14b72b0ca82fa1", "patch": "@@ -143,7 +143,7 @@ impl<'hir> HirPrinterSupport<'hir> for NoAnn<'hir> {\n     }\n \n     fn hir_map<'a>(&'a self) -> Option<&'a hir_map::Map<'hir>> {\n-        self.tcx.map(|tcx| tcx.hir())\n+        self.tcx.map(|tcx| *tcx.hir())\n     }\n \n     fn pp_ann<'a>(&'a self) -> &'a dyn pprust_hir::PpAnn {\n@@ -155,7 +155,7 @@ impl<'hir> pprust::PpAnn for NoAnn<'hir> {}\n impl<'hir> pprust_hir::PpAnn for NoAnn<'hir> {\n     fn nested(&self, state: &mut pprust_hir::State<'_>, nested: pprust_hir::Nested) {\n         if let Some(tcx) = self.tcx {\n-            pprust_hir::PpAnn::nested(tcx.hir(), state, nested)\n+            pprust_hir::PpAnn::nested(*tcx.hir(), state, nested)\n         }\n     }\n }\n@@ -217,7 +217,7 @@ impl<'hir> HirPrinterSupport<'hir> for IdentifiedAnnotation<'hir> {\n     }\n \n     fn hir_map<'a>(&'a self) -> Option<&'a hir_map::Map<'hir>> {\n-        self.tcx.map(|tcx| tcx.hir())\n+        self.tcx.map(|tcx| *tcx.hir())\n     }\n \n     fn pp_ann<'a>(&'a self) -> &'a dyn pprust_hir::PpAnn {\n@@ -228,7 +228,7 @@ impl<'hir> HirPrinterSupport<'hir> for IdentifiedAnnotation<'hir> {\n impl<'hir> pprust_hir::PpAnn for IdentifiedAnnotation<'hir> {\n     fn nested(&self, state: &mut pprust_hir::State<'_>, nested: pprust_hir::Nested) {\n         if let Some(ref tcx) = self.tcx {\n-            pprust_hir::PpAnn::nested(tcx.hir(), state, nested)\n+            pprust_hir::PpAnn::nested(*tcx.hir(), state, nested)\n         }\n     }\n     fn pre(&self, s: &mut pprust_hir::State<'_>, node: pprust_hir::AnnNode<'_>) {\n@@ -334,7 +334,7 @@ impl<'a, 'tcx> pprust_hir::PpAnn for TypedAnnotation<'a, 'tcx> {\n         if let pprust_hir::Nested::Body(id) = nested {\n             self.tables.set(self.tcx.body_tables(id));\n         }\n-        pprust_hir::PpAnn::nested(self.tcx.hir(), state, nested);\n+        pprust_hir::PpAnn::nested(*self.tcx.hir(), state, nested);\n         self.tables.set(old_tables);\n     }\n     fn pre(&self, s: &mut pprust_hir::State<'_>, node: pprust_hir::AnnNode<'_>) {"}, {"sha": "4133047af78fed193724f18fffb5a40667a33b96", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=63980cd0fb4b0993e71b482e0a14b72b0ca82fa1", "patch": "@@ -796,7 +796,7 @@ impl EncodeContext<'tcx> {\n         record!(self.per_def.kind[def_id] <- match trait_item.kind {\n             ty::AssocKind::Const => {\n                 let rendered =\n-                    hir::print::to_string(self.tcx.hir(), |s| s.print_trait_item(ast_item));\n+                    hir::print::to_string(&self.tcx.hir(), |s| s.print_trait_item(ast_item));\n                 let rendered_const = self.lazy(RenderedConst(rendered));\n \n                 EntryKind::AssocConst(\n@@ -1009,7 +1009,7 @@ impl EncodeContext<'tcx> {\n \n     fn encode_rendered_const_for_body(&mut self, body_id: hir::BodyId) -> Lazy<RenderedConst> {\n         let body = self.tcx.hir().body(body_id);\n-        let rendered = hir::print::to_string(self.tcx.hir(), |s| s.print_expr(&body.value));\n+        let rendered = hir::print::to_string(&self.tcx.hir(), |s| s.print_expr(&body.value));\n         let rendered_const = &RenderedConst(rendered);\n         self.lazy(rendered_const)\n     }"}, {"sha": "b178110f4f954104881f2a5fcd0b22e884aa618a", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=63980cd0fb4b0993e71b482e0a14b72b0ca82fa1", "patch": "@@ -8,6 +8,7 @@\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n use rustc::hir::map::Map;\n+use rustc::hir::Hir;\n use rustc::session::config::nightly_options;\n use rustc::session::parse::feature_err;\n use rustc::ty::query::Providers;\n@@ -74,7 +75,7 @@ enum ConstKind {\n }\n \n impl ConstKind {\n-    fn for_body(body: &hir::Body<'_>, hir_map: &Map<'_>) -> Option<Self> {\n+    fn for_body(body: &hir::Body<'_>, hir_map: Hir<'_>) -> Option<Self> {\n         let is_const_fn = |id| hir_map.fn_sig_by_hir_id(id).unwrap().header.is_const();\n \n         let owner = hir_map.body_owner(body.id());"}, {"sha": "ebd93e9ab85b813db0ca9c3249ef68f9ab261a79", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=63980cd0fb4b0993e71b482e0a14b72b0ca82fa1", "patch": "@@ -1,4 +1,4 @@\n-use rustc::hir::map as hir_map;\n+use rustc::hir::Hir;\n use rustc::session::config::EntryFnType;\n use rustc::session::{config, Session};\n use rustc::ty::query::Providers;\n@@ -15,7 +15,7 @@ use syntax::entry::EntryPointType;\n struct EntryContext<'a, 'tcx> {\n     session: &'a Session,\n \n-    map: &'a hir_map::Map<'tcx>,\n+    map: Hir<'tcx>,\n \n     /// The top-level function called `main`.\n     main_fn: Option<(HirId, Span)>,"}, {"sha": "62bc6724d0cfee2df75e99e4dabc8adc55aafa8c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=63980cd0fb4b0993e71b482e0a14b72b0ca82fa1", "patch": "@@ -2588,7 +2588,7 @@ fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, span: Span, qpath: &\n         E0533,\n         \"expected unit struct, unit variant or constant, found {} `{}`\",\n         res.descr(),\n-        hir::print::to_string(tcx.hir(), |s| s.print_qpath(qpath, false))\n+        hir::print::to_string(&tcx.hir(), |s| s.print_qpath(qpath, false))\n     )\n     .emit();\n }"}, {"sha": "47baae68608963eea32a097bf3522cee8a0a5968", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=63980cd0fb4b0993e71b482e0a14b72b0ca82fa1", "patch": "@@ -693,7 +693,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let msg = format!(\n                 \"expected tuple struct or tuple variant, found {} `{}`\",\n                 res.descr(),\n-                hir::print::to_string(tcx.hir(), |s| s.print_qpath(qpath, false)),\n+                hir::print::to_string(&tcx.hir(), |s| s.print_qpath(qpath, false)),\n             );\n             let mut err = struct_span_err!(tcx.sess, pat.span, E0164, \"{}\", msg);\n             match (res, &pat.kind) {"}, {"sha": "ca173fdeb66d45ee6e1bd4ccd1c0124e9e0f6fbc", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63980cd0fb4b0993e71b482e0a14b72b0ca82fa1/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=63980cd0fb4b0993e71b482e0a14b72b0ca82fa1", "patch": "@@ -107,7 +107,7 @@ pub fn run(options: Options) -> i32 {\n                 let mut hir_collector = HirCollector {\n                     sess: compiler.session(),\n                     collector: &mut collector,\n-                    map: tcx.hir(),\n+                    map: *tcx.hir(),\n                     codes: ErrorCodes::from(\n                         compiler.session().opts.unstable_features.is_nightly_build(),\n                     ),"}]}