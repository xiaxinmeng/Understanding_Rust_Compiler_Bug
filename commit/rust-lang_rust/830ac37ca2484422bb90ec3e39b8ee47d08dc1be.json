{"sha": "830ac37ca2484422bb90ec3e39b8ee47d08dc1be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMGFjMzdjYTI0ODQ0MjJiYjkwZWMzZTM5YjhlZTQ3ZDA4ZGMxYmU=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-14T02:07:43Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-14T02:07:43Z"}, "message": "std::logging: Use a more specific enum than Either", "tree": {"sha": "8811fd8ce35d9274d7d2988063692cf4a2dcded9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8811fd8ce35d9274d7d2988063692cf4a2dcded9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/830ac37ca2484422bb90ec3e39b8ee47d08dc1be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/830ac37ca2484422bb90ec3e39b8ee47d08dc1be", "html_url": "https://github.com/rust-lang/rust/commit/830ac37ca2484422bb90ec3e39b8ee47d08dc1be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/830ac37ca2484422bb90ec3e39b8ee47d08dc1be/comments", "author": null, "committer": null, "parents": [{"sha": "b4eff79f389b2c48a21345929c0542385da212df", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4eff79f389b2c48a21345929c0542385da212df", "html_url": "https://github.com/rust-lang/rust/commit/b4eff79f389b2c48a21345929c0542385da212df"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "db5edc2009e516353b910b2d9d0962ceae4e5ccb", "filename": "src/libstd/logging.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/830ac37ca2484422bb90ec3e39b8ee47d08dc1be/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830ac37ca2484422bb90ec3e39b8ee47d08dc1be/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=830ac37ca2484422bb90ec3e39b8ee47d08dc1be", "patch": "@@ -12,9 +12,8 @@\n \n use option::*;\n use os;\n-use either::*;\n use rt;\n-use rt::logging::{Logger, StdErrLogger};\n+use rt::logging::{Logger, StdErrLogger, OwnedString};\n \n /// Turns on logging to stdout globally\n pub fn console_on() {\n@@ -57,12 +56,12 @@ fn newsched_log_str(msg: ~str) {\n         match optional_task {\n             Some(local) => {\n                 // Use the available logger\n-                (*local).logger.log(Left(msg));\n+                (*local).logger.log(OwnedString(msg));\n             }\n             None => {\n                 // There is no logger anywhere, just write to stderr\n                 let mut logger = StdErrLogger;\n-                logger.log(Left(msg));\n+                logger.log(OwnedString(msg));\n             }\n         }\n     }"}, {"sha": "d0bbf5c0506dc0dd5aad85802f85c6521e2c5e2d", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/830ac37ca2484422bb90ec3e39b8ee47d08dc1be/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830ac37ca2484422bb90ec3e39b8ee47d08dc1be/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=830ac37ca2484422bb90ec3e39b8ee47d08dc1be", "patch": "@@ -7,7 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-use either::*;\n use libc::{uintptr_t, exit, STDERR_FILENO};\n use option::{Some, None, Option};\n use rt::util::dumb_println;\n@@ -168,29 +167,32 @@ fn update_log_settings(crate_map: *u8, settings: ~str) {\n     }\n }\n \n+/// Represent a string with `Send` bound.\n+pub enum SendableString {\n+    OwnedString(~str),\n+    StaticString(&'static str)\n+}\n+\n pub trait Logger {\n-    fn log(&mut self, msg: Either<~str, &'static str>);\n+    fn log(&mut self, msg: SendableString);\n }\n \n pub struct StdErrLogger;\n \n impl Logger for StdErrLogger {\n-    fn log(&mut self, msg: Either<~str, &'static str>) {\n+    fn log(&mut self, msg: SendableString) {\n         use io::{Writer, WriterUtil};\n \n         if !should_log_console() {\n             return;\n         }\n \n         let s: &str = match msg {\n-            Left(ref s) => {\n-                let s: &str = *s;\n-                s\n-            }\n-            Right(ref s) => {\n-                let s: &str = *s;\n-                s\n-            }\n+            OwnedString(ref s) => {\n+                let slc: &str = *s;\n+                slc\n+            },\n+            StaticString(s) => s,\n         };\n \n         // Truncate the string"}, {"sha": "f7f7fef6fa09320a7033599c912d5454360f8c80", "filename": "src/libstd/sys.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/830ac37ca2484422bb90ec3e39b8ee47d08dc1be/src%2Flibstd%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830ac37ca2484422bb90ec3e39b8ee47d08dc1be/src%2Flibstd%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys.rs?ref=830ac37ca2484422bb90ec3e39b8ee47d08dc1be", "patch": "@@ -136,12 +136,11 @@ impl FailWithCause for &'static str {\n \n // FIXME #4427: Temporary until rt::rt_fail_ goes away\n pub fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n-    use either::Left;\n     use option::{Some, None};\n     use rt::in_green_task_context;\n     use rt::task::Task;\n     use rt::local::Local;\n-    use rt::logging::Logger;\n+    use rt::logging::{Logger, OwnedString};\n     use str::Str;\n \n     unsafe {\n@@ -164,7 +163,7 @@ pub fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n                          msg, file, line as int)\n                 };\n \n-                task.logger.log(Left(msg));\n+                task.logger.log(OwnedString(msg));\n             }\n         } else {\n             rterrln!(\"failed in non-task context at '%s', %s:%i\","}]}