{"sha": "39753c89737265a15497b496e621bd9f5bed2f3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NzUzYzg5NzM3MjY1YTE1NDk3YjQ5NmU2MjFiZDlmNWJlZDJmM2U=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-12T12:01:25Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-12T12:01:25Z"}, "message": "rustc/driver: improve macro calls", "tree": {"sha": "5f512704eaa7b6ce272b901ff6d6b3f4c087b4a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f512704eaa7b6ce272b901ff6d6b3f4c087b4a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39753c89737265a15497b496e621bd9f5bed2f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39753c89737265a15497b496e621bd9f5bed2f3e", "html_url": "https://github.com/rust-lang/rust/commit/39753c89737265a15497b496e621bd9f5bed2f3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39753c89737265a15497b496e621bd9f5bed2f3e/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bfe08fc718cd8ecfaa5696261b5eea07a2a5d96", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bfe08fc718cd8ecfaa5696261b5eea07a2a5d96", "html_url": "https://github.com/rust-lang/rust/commit/5bfe08fc718cd8ecfaa5696261b5eea07a2a5d96"}], "stats": {"total": 55, "additions": 25, "deletions": 30}, "files": [{"sha": "ca1291670d03785b9fca2bfd1b70349104841198", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39753c89737265a15497b496e621bd9f5bed2f3e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39753c89737265a15497b496e621bd9f5bed2f3e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=39753c89737265a15497b496e621bd9f5bed2f3e", "patch": "@@ -1472,7 +1472,7 @@ fn write_out_deps(sess: &Session, outputs: &OutputFilenames, out_filenames: &[Pa\n             .collect();\n         let mut file = fs::File::create(&deps_filename)?;\n         for path in out_filenames {\n-            write!(file, \"{}: {}\\n\\n\", path.display(), files.join(\" \"))?;\n+            writeln!(file, \"{}: {}\\n\", path.display(), files.join(\" \"))?;\n         }\n \n         // Emit a fake target for each input file to the compilation. This"}, {"sha": "981c4148f885ea445e4ff845fb0702199adf3939", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39753c89737265a15497b496e621bd9f5bed2f3e/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39753c89737265a15497b496e621bd9f5bed2f3e/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=39753c89737265a15497b496e621bd9f5bed2f3e", "patch": "@@ -579,7 +579,7 @@ pub fn set_sigpipe_handler() {\n     unsafe {\n         // Set the SIGPIPE signal handler, so that an EPIPE\n         // will cause rustc to terminate, as expected.\n-        assert!(libc::signal(libc::SIGPIPE, libc::SIG_DFL) != libc::SIG_ERR);\n+        assert_ne!(libc::signal(libc::SIGPIPE, libc::SIG_DFL), libc::SIG_ERR);\n     }\n }\n "}, {"sha": "1a53d61a3c14628ed5f8c21fba85afa0ccd3d366", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39753c89737265a15497b496e621bd9f5bed2f3e/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39753c89737265a15497b496e621bd9f5bed2f3e/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=39753c89737265a15497b496e621bd9f5bed2f3e", "patch": "@@ -855,7 +855,7 @@ fn print_flowgraph<'a, 'tcx, W: Write>(variants: Vec<borrowck_dot::Variant>,\n                     break n.body();\n                 }\n                 let parent = tcx.hir.get_parent_node(node_id);\n-                assert!(node_id != parent);\n+                assert_ne!(node_id, parent);\n                 node_id = parent;\n             }\n         }"}, {"sha": "cb2fc57643cadc65fc1dd10abdabf11c39e4ad11", "filename": "src/librustc_driver/profile/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/39753c89737265a15497b496e621bd9f5bed2f3e/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39753c89737265a15497b496e621bd9f5bed2f3e/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Fmod.rs?ref=39753c89737265a15497b496e621bd9f5bed2f3e", "patch": "@@ -109,17 +109,14 @@ fn profile_queries_thread(r:Receiver<ProfileQueriesMsg>) {\n                     let counts_path = format!(\"{}.counts.txt\", params.path);\n                     let mut counts_file = File::create(&counts_path).unwrap();\n \n-                    write!(html_file, \"<html>\\n\").unwrap();\n-                    write!(html_file,\n-                           \"<head>\\n<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{}\\\">\\n\",\n-                           \"profile_queries.css\").unwrap();\n-                    write!(html_file, \"<style>\\n\").unwrap();\n+                    writeln!(html_file,\n+                        \"<html>\\n<head>\\n<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{}\\\">\",\n+                        \"profile_queries.css\").unwrap();\n+                    writeln!(html_file, \"<style>\").unwrap();\n                     trace::write_style(&mut html_file);\n-                    write!(html_file, \"</style>\\n\").unwrap();\n-                    write!(html_file, \"</head>\\n\").unwrap();\n-                    write!(html_file, \"<body>\\n\").unwrap();\n+                    writeln!(html_file, \"</style>\\n</head>\\n<body>\").unwrap();\n                     trace::write_traces(&mut html_file, &mut counts_file, &frame.traces);\n-                    write!(html_file, \"</body>\\n</html>\\n\").unwrap();\n+                    writeln!(html_file, \"</body>\\n</html>\").unwrap();\n \n                     let ack_path = format!(\"{}.ack\", params.path);\n                     let ack_file = File::create(&ack_path).unwrap();"}, {"sha": "6cb728c4d5860be61aad155ebc38f21b8f51a091", "filename": "src/librustc_driver/profile/trace.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/39753c89737265a15497b496e621bd9f5bed2f3e/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39753c89737265a15497b496e621bd9f5bed2f3e/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs?ref=39753c89737265a15497b496e621bd9f5bed2f3e", "patch": "@@ -130,22 +130,20 @@ fn write_traces_rec(file: &mut File, traces: &[Rec], total: Duration, depth: usi\n         let fraction = duration_div(t.dur_total, total);\n         let percent = fraction * 100.0;\n         let (frc_text, frc_css_classes) = html_of_fraction(fraction);\n-        write!(file, \"<div class=\\\"trace depth-{} extent-{}{} {} {} {}\\\">\\n\",\n-               depth,\n-               t.extent.len(),\n-               /* Heuristic for 'important' CSS class: */\n-               if t.extent.len() > 5 || percent >= 1.0 {\n-                   \" important\" }\n-               else { \"\" },\n-               eff_css_classes,\n-               dur_css_classes,\n-               frc_css_classes,\n+        writeln!(file, \"<div class=\\\"trace depth-{} extent-{}{} {} {} {}\\\">\",\n+                 depth,\n+                 t.extent.len(),\n+                 /* Heuristic for 'important' CSS class: */\n+                 if t.extent.len() > 5 || percent >= 1.0 { \" important\" } else { \"\" },\n+                 eff_css_classes,\n+                 dur_css_classes,\n+                 frc_css_classes,\n         ).unwrap();\n-        write!(file, \"<div class=\\\"eff\\\">{}</div>\\n\", eff_text).unwrap();\n-        write!(file, \"<div class=\\\"dur\\\">{}</div>\\n\", dur_text).unwrap();\n-        write!(file, \"<div class=\\\"frc\\\">{}</div>\\n\", frc_text).unwrap();\n+        writeln!(file, \"<div class=\\\"eff\\\">{}</div>\", eff_text).unwrap();\n+        writeln!(file, \"<div class=\\\"dur\\\">{}</div>\", dur_text).unwrap();\n+        writeln!(file, \"<div class=\\\"frc\\\">{}</div>\", frc_text).unwrap();\n         write_traces_rec(file, &t.extent, total, depth + 1);\n-        write!(file, \"</div>\\n\").unwrap();\n+        writeln!(file, \"</div>\").unwrap();\n     }\n }\n \n@@ -209,10 +207,10 @@ pub fn write_counts(count_file: &mut File, counts: &mut FxHashMap<String,QueryMe\n     ).collect::<Vec<_>>();\n     data.sort_by_key(|k| Reverse(k.3));\n     for (cons, count, dur_total, dur_self) in data {\n-        write!(count_file, \"{}, {}, {}, {}\\n\",\n-               cons, count,\n-               duration_to_secs_str(dur_total),\n-               duration_to_secs_str(dur_self)\n+        writeln!(count_file, \"{}, {}, {}, {}\",\n+                 cons, count,\n+                 duration_to_secs_str(dur_total),\n+                 duration_to_secs_str(dur_self)\n         ).unwrap();\n     }\n }"}]}