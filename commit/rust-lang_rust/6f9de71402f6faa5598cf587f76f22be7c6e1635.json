{"sha": "6f9de71402f6faa5598cf587f76f22be7c6e1635", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmOWRlNzE0MDJmNmZhYTU1OThjZjU4N2Y3NmYyMmJlN2M2ZTE2MzU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-14T00:49:06Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-14T00:49:06Z"}, "message": "fix: Use original definition ranges for ide_db::search instead of the expanded ranges", "tree": {"sha": "b5cecbaf16f2faaa7bd06fc7a88b0e980bc5ceb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5cecbaf16f2faaa7bd06fc7a88b0e980bc5ceb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f9de71402f6faa5598cf587f76f22be7c6e1635", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f9de71402f6faa5598cf587f76f22be7c6e1635", "html_url": "https://github.com/rust-lang/rust/commit/6f9de71402f6faa5598cf587f76f22be7c6e1635", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f9de71402f6faa5598cf587f76f22be7c6e1635/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e08b3bf70bee5b091442d296e36769a67af7d6f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e08b3bf70bee5b091442d296e36769a67af7d6f1", "html_url": "https://github.com/rust-lang/rust/commit/e08b3bf70bee5b091442d296e36769a67af7d6f1"}], "stats": {"total": 66, "additions": 34, "deletions": 32}, "files": [{"sha": "7cce99c3b0b2d82ff59d03ef7dcb9537c089d01b", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f9de71402f6faa5598cf587f76f22be7c6e1635/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9de71402f6faa5598cf587f76f22be7c6e1635/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=6f9de71402f6faa5598cf587f76f22be7c6e1635", "patch": "@@ -413,6 +413,22 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn test_hl_local_in_attr() {\n+        check(\n+            r#\"\n+//- proc_macros: identity\n+#[proc_macros::identity]\n+fn foo() {\n+    let mut bar = 3;\n+         // ^^^ write\n+    bar$0;\n+ // ^^^ read\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_multi_macro_usage() {\n         check("}, {"sha": "a84e6b3ba40d2123668dca8a6c8b538d063c1421", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 18, "deletions": 32, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6f9de71402f6faa5598cf587f76f22be7c6e1635/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9de71402f6faa5598cf587f76f22be7c6e1635/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=6f9de71402f6faa5598cf587f76f22be7c6e1635", "patch": "@@ -232,50 +232,36 @@ impl Definition {\n         let file_id = file_id.original_file(db);\n \n         if let Definition::Local(var) = self {\n-            let range = match var.parent(db) {\n-                DefWithBody::Function(f) => f.source(db).map(|src| src.value.syntax().text_range()),\n-                DefWithBody::Const(c) => c.source(db).map(|src| src.value.syntax().text_range()),\n-                DefWithBody::Static(s) => s.source(db).map(|src| src.value.syntax().text_range()),\n+            let def = match var.parent(db) {\n+                DefWithBody::Function(f) => f.source(db).map(|src| src.syntax().cloned()),\n+                DefWithBody::Const(c) => c.source(db).map(|src| src.syntax().cloned()),\n+                DefWithBody::Static(s) => s.source(db).map(|src| src.syntax().cloned()),\n             };\n-            return match range {\n-                Some(range) => SearchScope::file_range(FileRange { file_id, range }),\n+            return match def {\n+                Some(def) => SearchScope::file_range(def.as_ref().original_file_range(db)),\n                 None => SearchScope::single_file(file_id),\n             };\n         }\n \n         if let Definition::SelfType(impl_) = self {\n-            return match impl_.source(db).map(|src| src.value.syntax().text_range()) {\n-                Some(range) => SearchScope::file_range(FileRange { file_id, range }),\n+            return match impl_.source(db).map(|src| src.syntax().cloned()) {\n+                Some(def) => SearchScope::file_range(def.as_ref().original_file_range(db)),\n                 None => SearchScope::single_file(file_id),\n             };\n         }\n \n         if let Definition::GenericParam(hir::GenericParam::LifetimeParam(param)) = self {\n-            let range = match param.parent(db) {\n-                hir::GenericDef::Function(it) => {\n-                    it.source(db).map(|src| src.value.syntax().text_range())\n-                }\n-                hir::GenericDef::Adt(it) => {\n-                    it.source(db).map(|src| src.value.syntax().text_range())\n-                }\n-                hir::GenericDef::Trait(it) => {\n-                    it.source(db).map(|src| src.value.syntax().text_range())\n-                }\n-                hir::GenericDef::TypeAlias(it) => {\n-                    it.source(db).map(|src| src.value.syntax().text_range())\n-                }\n-                hir::GenericDef::Impl(it) => {\n-                    it.source(db).map(|src| src.value.syntax().text_range())\n-                }\n-                hir::GenericDef::Variant(it) => {\n-                    it.source(db).map(|src| src.value.syntax().text_range())\n-                }\n-                hir::GenericDef::Const(it) => {\n-                    it.source(db).map(|src| src.value.syntax().text_range())\n-                }\n+            let def = match param.parent(db) {\n+                hir::GenericDef::Function(it) => it.source(db).map(|src| src.syntax().cloned()),\n+                hir::GenericDef::Adt(it) => it.source(db).map(|src| src.syntax().cloned()),\n+                hir::GenericDef::Trait(it) => it.source(db).map(|src| src.syntax().cloned()),\n+                hir::GenericDef::TypeAlias(it) => it.source(db).map(|src| src.syntax().cloned()),\n+                hir::GenericDef::Impl(it) => it.source(db).map(|src| src.syntax().cloned()),\n+                hir::GenericDef::Variant(it) => it.source(db).map(|src| src.syntax().cloned()),\n+                hir::GenericDef::Const(it) => it.source(db).map(|src| src.syntax().cloned()),\n             };\n-            return match range {\n-                Some(range) => SearchScope::file_range(FileRange { file_id, range }),\n+            return match def {\n+                Some(def) => SearchScope::file_range(def.as_ref().original_file_range(db)),\n                 None => SearchScope::single_file(file_id),\n             };\n         }"}]}