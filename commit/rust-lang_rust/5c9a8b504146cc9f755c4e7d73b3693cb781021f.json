{"sha": "5c9a8b504146cc9f755c4e7d73b3693cb781021f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjOWE4YjUwNDE0NmNjOWY3NTVjNGU3ZDczYjM2OTNjYjc4MTAyMWY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-01-19T00:32:58Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-01-19T00:43:54Z"}, "message": "Add instance_def_size_estimate query", "tree": {"sha": "7c47a6d2ffcbe9e5fff2c341d3292f4866ef8d55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c47a6d2ffcbe9e5fff2c341d3292f4866ef8d55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c9a8b504146cc9f755c4e7d73b3693cb781021f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c9a8b504146cc9f755c4e7d73b3693cb781021f", "html_url": "https://github.com/rust-lang/rust/commit/5c9a8b504146cc9f755c4e7d73b3693cb781021f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c9a8b504146cc9f755c4e7d73b3693cb781021f/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8e9da44a9e361b43548cb60a46cf3c2138968c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e9da44a9e361b43548cb60a46cf3c2138968c7", "html_url": "https://github.com/rust-lang/rust/commit/c8e9da44a9e361b43548cb60a46cf3c2138968c7"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "1de9091b5df7d34f059aa9418186f7bf1d4ea24f", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c9a8b504146cc9f755c4e7d73b3693cb781021f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9a8b504146cc9f755c4e7d73b3693cb781021f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=5c9a8b504146cc9f755c4e7d73b3693cb781021f", "patch": "@@ -638,6 +638,7 @@ define_dep_nodes!( <'tcx>\n     [input] TargetFeaturesWhitelist,\n     [] TargetFeaturesEnabled(DefId),\n \n+    [] InstanceDefSizeEstimate { instance_def: InstanceDef<'tcx> },\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "2af2219d26785054bb68393908e14b02b5de621b", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c9a8b504146cc9f755c4e7d73b3693cb781021f/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9a8b504146cc9f755c4e7d73b3693cb781021f/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=5c9a8b504146cc9f755c4e7d73b3693cb781021f", "patch": "@@ -31,8 +31,7 @@ impl<'tcx> MonoItem<'tcx> {\n             MonoItem::Fn(instance) => {\n                 // Estimate the size of a function based on how many statements\n                 // it contains.\n-                let mir = tcx.instance_mir(instance.def);\n-                mir.basic_blocks().iter().map(|bb| bb.statements.len()).sum()\n+                tcx.instance_def_size_estimate(instance.def)\n             },\n             // Conservatively estimate the size of a static declaration\n             // or assembly to be 1."}, {"sha": "b0adfe20879667759c8333085d6ed2d80866adf8", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c9a8b504146cc9f755c4e7d73b3693cb781021f/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9a8b504146cc9f755c4e7d73b3693cb781021f/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=5c9a8b504146cc9f755c4e7d73b3693cb781021f", "patch": "@@ -637,6 +637,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::target_features_whitelist<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::instance_def_size_estimate<'tcx> {\n+    fn describe(tcx: TyCtxt, def: ty::InstanceDef<'tcx>) -> String {\n+        format!(\"estimating size for `{}`\", tcx.item_path_str(def.def_id()))\n+    }\n+}\n+\n macro_rules! impl_disk_cacheable_query(\n     ($query_name:ident, |$key:tt| $cond:expr) => {\n         impl<'tcx> QueryDescription<'tcx> for queries::$query_name<'tcx> {"}, {"sha": "6c79f6a62fa0b3779861edcddbe7bf95b300c89d", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c9a8b504146cc9f755c4e7d73b3693cb781021f/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9a8b504146cc9f755c4e7d73b3693cb781021f/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=5c9a8b504146cc9f755c4e7d73b3693cb781021f", "patch": "@@ -365,6 +365,9 @@ define_maps! { <'tcx>\n         target_features_whitelist_node(CrateNum) -> Rc<FxHashSet<String>>,\n     [] fn target_features_enabled: TargetFeaturesEnabled(DefId) -> Rc<Vec<String>>,\n \n+    // Get an estimate of the size of an InstanceDef based on its MIR for CGU partitioning.\n+    [] fn instance_def_size_estimate: instance_def_size_estimate_dep_node(ty::InstanceDef<'tcx>)\n+        -> usize,\n }\n \n //////////////////////////////////////////////////////////////////////\n@@ -514,3 +517,10 @@ fn substitute_normalize_and_test_predicates_node<'tcx>(key: (DefId, &'tcx Substs\n fn target_features_whitelist_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::TargetFeaturesWhitelist\n }\n+\n+fn instance_def_size_estimate_dep_node<'tcx>(instance_def: ty::InstanceDef<'tcx>)\n+                                              -> DepConstructor<'tcx> {\n+    DepConstructor::InstanceDefSizeEstimate {\n+        instance_def\n+    }\n+}"}, {"sha": "f35693c702b32665557c80ec16d30adbfda82795", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c9a8b504146cc9f755c4e7d73b3693cb781021f/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9a8b504146cc9f755c4e7d73b3693cb781021f/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=5c9a8b504146cc9f755c4e7d73b3693cb781021f", "patch": "@@ -761,6 +761,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::EraseRegionsTy |\n         DepKind::NormalizeTy |\n         DepKind::SubstituteNormalizeAndTestPredicates |\n+        DepKind::InstanceDefSizeEstimate |\n \n         // This one should never occur in this context\n         DepKind::Null => {"}, {"sha": "1d64e7bae913c21b5528ae0d0b2469bc4a483047", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c9a8b504146cc9f755c4e7d73b3693cb781021f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9a8b504146cc9f755c4e7d73b3693cb781021f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5c9a8b504146cc9f755c4e7d73b3693cb781021f", "patch": "@@ -2669,6 +2669,19 @@ fn crate_hash<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tcx.hir.crate_hash\n }\n \n+fn instance_def_size_estimate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                        instance_def: InstanceDef<'tcx>)\n+                                        -> usize {\n+    match instance_def {\n+        InstanceDef::Item(def_id) => {\n+            let mir = tcx.optimized_mir(def_id);\n+            mir.basic_blocks().iter().map(|bb| bb.statements.len()).sum()\n+        },\n+        // Estimate the size of compiler-generated shims to be 1.\n+        _ => 1\n+    }\n+}\n+\n pub fn provide(providers: &mut ty::maps::Providers) {\n     context::provide(providers);\n     erase_regions::provide(providers);\n@@ -2686,6 +2699,7 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n         original_crate_name,\n         crate_hash,\n         trait_impls_of: trait_def::trait_impls_of_provider,\n+        instance_def_size_estimate,\n         ..*providers\n     };\n }"}]}