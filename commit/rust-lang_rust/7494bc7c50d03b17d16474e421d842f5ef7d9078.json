{"sha": "7494bc7c50d03b17d16474e421d842f5ef7d9078", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0OTRiYzdjNTBkMDNiMTdkMTY0NzRlNDIxZDg0MmY1ZWY3ZDkwNzg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-09-15T12:46:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-15T12:46:20Z"}, "message": "Rollup merge of #36425 - michaelwoerister:stable-projection-bounds, r=eddyb\n\nFix indeterminism in ty::TraitObject representation.\n\nMake sure that projection bounds in `ty::TraitObject` are sorted in a way that is stable across compilation sessions and crate boundaries.\n\nThis PR\n+  moves `DefPathHashes` up into `librustc` so it can be used there to create a stable sort key for `DefId`s,\n+ changes `PolyExistentialProjection::sort_key()` to take advantage of the above,\n+ and removes the unused `PolyProjectionPredicate::sort_key()` and `ProjectionTy::sort_key()` methods.\n\nFixes #36155", "tree": {"sha": "14bdbfd8c6cc190bd3374e98e9b2748f9982de53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14bdbfd8c6cc190bd3374e98e9b2748f9982de53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7494bc7c50d03b17d16474e421d842f5ef7d9078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7494bc7c50d03b17d16474e421d842f5ef7d9078", "html_url": "https://github.com/rust-lang/rust/commit/7494bc7c50d03b17d16474e421d842f5ef7d9078", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7494bc7c50d03b17d16474e421d842f5ef7d9078/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebef6ad0e4cda2e05dc92f6d241562eb8a7a04a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebef6ad0e4cda2e05dc92f6d241562eb8a7a04a9", "html_url": "https://github.com/rust-lang/rust/commit/ebef6ad0e4cda2e05dc92f6d241562eb8a7a04a9"}, {"sha": "7ec9b81326121ae07feb0a19f76b3f16b98d0c43", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec9b81326121ae07feb0a19f76b3f16b98d0c43", "html_url": "https://github.com/rust-lang/rust/commit/7ec9b81326121ae07feb0a19f76b3f16b98d0c43"}], "stats": {"total": 113, "additions": 53, "deletions": 60}, "files": [{"sha": "6d7a2d6cba1c761640e53bde00f84c17b0cec0ca", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=7494bc7c50d03b17d16474e421d842f5ef7d9078", "patch": "@@ -1303,7 +1303,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn mk_trait(self, mut obj: TraitObject<'tcx>) -> Ty<'tcx> {\n-        obj.projection_bounds.sort_by(|a, b| a.sort_key().cmp(&b.sort_key()));\n+        obj.projection_bounds.sort_by_key(|b| b.sort_key(self));\n         self.mk_ty(TyTrait(box obj))\n     }\n "}, {"sha": "14eb2fb7914c36f30dd03f60ac26415dce349f74", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=7494bc7c50d03b17d16474e421d842f5ef7d9078", "patch": "@@ -1018,10 +1018,6 @@ impl<'tcx> PolyProjectionPredicate<'tcx> {\n     pub fn item_name(&self) -> Name {\n         self.0.projection_ty.item_name // safe to skip the binder to access a name\n     }\n-\n-    pub fn sort_key(&self) -> (DefId, Name) {\n-        self.0.projection_ty.sort_key()\n-    }\n }\n \n pub trait ToPolyTraitRef<'tcx> {"}, {"sha": "5fdc7abc0af5b0631f1b804bd6bfcfae28aaa586", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=7494bc7c50d03b17d16474e421d842f5ef7d9078", "patch": "@@ -23,7 +23,7 @@ use std::mem;\n use std::ops;\n use syntax::abi;\n use syntax::ast::{self, Name};\n-use syntax::parse::token::keywords;\n+use syntax::parse::token::{keywords, InternedString};\n \n use serialize::{Decodable, Decoder, Encodable, Encoder};\n \n@@ -440,12 +440,6 @@ pub struct ProjectionTy<'tcx> {\n     pub item_name: Name,\n }\n \n-impl<'tcx> ProjectionTy<'tcx> {\n-    pub fn sort_key(&self) -> (DefId, Name) {\n-        (self.trait_ref.def_id, self.item_name)\n-    }\n-}\n-\n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct BareFnTy<'tcx> {\n     pub unsafety: hir::Unsafety,\n@@ -738,8 +732,17 @@ impl<'a, 'tcx, 'gcx> PolyExistentialProjection<'tcx> {\n         self.0.item_name // safe to skip the binder to access a name\n     }\n \n-    pub fn sort_key(&self) -> (DefId, Name) {\n-        (self.0.trait_ref.def_id, self.0.item_name)\n+    pub fn sort_key(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> (u64, InternedString) {\n+        // We want something here that is stable across crate boundaries.\n+        // The DefId isn't but the `deterministic_hash` of the corresponding\n+        // DefPath is.\n+        let trait_def = tcx.lookup_trait_def(self.0.trait_ref.def_id);\n+        let def_path_hash = trait_def.def_path_hash;\n+\n+        // An `ast::Name` is also not stable (it's just an index into an\n+        // interning table), so map to the corresponding `InternedString`.\n+        let item_name = self.0.item_name.as_str();\n+        (def_path_hash, item_name)\n     }\n \n     pub fn with_self_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,"}, {"sha": "268b2fcaa4adbb8687b833a9a06ee6f4cdddab90", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=7494bc7c50d03b17d16474e421d842f5ef7d9078", "patch": "@@ -70,15 +70,20 @@ pub struct TraitDef<'tcx> {\n     pub specialization_graph: RefCell<traits::specialization_graph::Graph>,\n \n     /// Various flags\n-    pub flags: Cell<TraitFlags>\n+    pub flags: Cell<TraitFlags>,\n+\n+    /// The ICH of this trait's DefPath, cached here so it doesn't have to be\n+    /// recomputed all the time.\n+    pub def_path_hash: u64,\n }\n \n impl<'a, 'gcx, 'tcx> TraitDef<'tcx> {\n     pub fn new(unsafety: hir::Unsafety,\n                paren_sugar: bool,\n                generics: &'tcx ty::Generics<'tcx>,\n                trait_ref: ty::TraitRef<'tcx>,\n-               associated_type_names: Vec<Name>)\n+               associated_type_names: Vec<Name>,\n+               def_path_hash: u64)\n                -> TraitDef<'tcx> {\n         TraitDef {\n             paren_sugar: paren_sugar,\n@@ -90,6 +95,7 @@ impl<'a, 'gcx, 'tcx> TraitDef<'tcx> {\n             blanket_impls: RefCell::new(vec![]),\n             flags: Cell::new(ty::TraitFlags::NO_TRAIT_FLAGS),\n             specialization_graph: RefCell::new(traits::specialization_graph::Graph::new()),\n+            def_path_hash: def_path_hash,\n         }\n     }\n "}, {"sha": "d34fdaa7d71cd3f92c41267be69eee3a06cc0871", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 5, "deletions": 34, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=7494bc7c50d03b17d16474e421d842f5ef7d9078", "patch": "@@ -411,15 +411,11 @@ impl<'a, 'gcx, 'tcx> TypeIdHasher<'a, 'gcx, 'tcx> {\n     }\n \n     fn def_id(&mut self, did: DefId) {\n-        // Hash the crate identification information.\n-        let name = self.tcx.crate_name(did.krate);\n-        let disambiguator = self.tcx.crate_disambiguator(did.krate);\n-        self.hash((name, disambiguator));\n-\n-        // Hash the item path within that crate.\n-        // FIXME(#35379) This should use a deterministic\n-        // DefPath hashing mechanism, not the DefIndex.\n-        self.hash(did.index);\n+        // Hash the DefPath corresponding to the DefId, which is independent\n+        // of compiler internal state.\n+        let tcx = self.tcx;\n+        let def_path = tcx.def_path(did);\n+        def_path.deterministic_hash_to(tcx, &mut self.state);\n     }\n }\n \n@@ -445,33 +441,8 @@ impl<'a, 'gcx, 'tcx> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx> {\n                 self.hash(f.sig.variadic());\n             }\n             TyTrait(ref data) => {\n-                // Trait objects have a list of projection bounds\n-                // that are not guaranteed to be sorted in an order\n-                // that gets preserved across crates, so we need\n-                // to sort them again by the name, in string form.\n-\n-                // Hash the whole principal trait ref.\n                 self.def_id(data.principal.def_id());\n-                data.principal.visit_with(self);\n-\n-                // Hash region and builtin bounds.\n-                data.region_bound.visit_with(self);\n                 self.hash(data.builtin_bounds);\n-\n-                // Only projection bounds are left, sort and hash them.\n-                let mut projection_bounds: Vec<_> = data.projection_bounds\n-                                                        .iter()\n-                                                        .map(|b| (b.item_name().as_str(), b))\n-                                                        .collect();\n-                projection_bounds.sort_by_key(|&(ref name, _)| name.clone());\n-                for (name, bound) in projection_bounds {\n-                    self.def_id(bound.0.trait_ref.def_id);\n-                    self.hash(name);\n-                    bound.visit_with(self);\n-                }\n-\n-                // Bypass super_visit_with, we've visited everything.\n-                return false;\n             }\n             TyTuple(tys) => {\n                 self.hash(tys.len());"}, {"sha": "624bffb7e036962c7324ed93a819b6f603d7c725", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=7494bc7c50d03b17d16474e421d842f5ef7d9078", "patch": "@@ -385,12 +385,14 @@ pub fn get_trait_def<'a, 'tcx>(cdata: Cmd,\n     let unsafety = parse_unsafety(item_doc);\n     let associated_type_names = parse_associated_type_names(item_doc);\n     let paren_sugar = parse_paren_sugar(item_doc);\n+    let def_path = def_path(cdata, item_id).unwrap();\n \n     ty::TraitDef::new(unsafety,\n                       paren_sugar,\n                       generics,\n                       item_trait_ref(item_doc, tcx, cdata),\n-                      associated_type_names)\n+                      associated_type_names,\n+                      def_path.deterministic_hash(tcx))\n }\n \n pub fn get_adt_def<'a, 'tcx>(cdata: Cmd,"}, {"sha": "dbefd3eacc24aabeac7df1a3d5fee51fa7f891ce", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=7494bc7c50d03b17d16474e421d842f5ef7d9078", "patch": "@@ -104,14 +104,7 @@ pub fn enc_ty<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx\n \n             enc_region(w, cx, obj.region_bound);\n \n-            // Encode projection_bounds in a stable order\n-            let mut projection_bounds: Vec<_> = obj.projection_bounds\n-                                                .iter()\n-                                                .map(|b| (b.item_name().as_str(), b))\n-                                                .collect();\n-            projection_bounds.sort_by_key(|&(ref name, _)| name.clone());\n-\n-            for tp in projection_bounds.iter().map(|&(_, tp)| tp) {\n+            for tp in &obj.projection_bounds {\n                 write!(w, \"P\");\n                 enc_existential_projection(w, cx, &tp.0);\n             }"}, {"sha": "04aca8c0947caa7e603a9bbfd8efe499c965d4df", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=7494bc7c50d03b17d16474e421d842f5ef7d9078", "patch": "@@ -1290,12 +1290,15 @@ fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         }\n     }).collect();\n \n+    let def_path_hash = tcx.def_path(def_id).deterministic_hash(tcx);\n+\n     let trait_ref = ty::TraitRef::new(def_id, substs);\n     let trait_def = ty::TraitDef::new(unsafety,\n                                       paren_sugar,\n                                       ty_generics,\n                                       trait_ref,\n-                                      associated_type_names);\n+                                      associated_type_names,\n+                                      def_path_hash);\n \n     tcx.intern_trait_def(trait_def)\n }"}, {"sha": "10e315f269f971af023e23a5148a1f72b90b96a0", "filename": "src/test/run-pass/auxiliary/typeid-intrinsic-aux1.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux1.rs?ref=7494bc7c50d03b17d16474e421d842f5ef7d9078", "patch": "@@ -22,6 +22,8 @@ pub type F = Option<isize>;\n pub type G = usize;\n pub type H = &'static str;\n pub type I = Box<Fn()>;\n+pub type I32Iterator = Iterator<Item=i32>;\n+pub type U32Iterator = Iterator<Item=u32>;\n \n pub fn id_A() -> TypeId { TypeId::of::<A>() }\n pub fn id_B() -> TypeId { TypeId::of::<B>() }\n@@ -34,3 +36,6 @@ pub fn id_H() -> TypeId { TypeId::of::<H>() }\n pub fn id_I() -> TypeId { TypeId::of::<I>() }\n \n pub fn foo<T: Any>() -> TypeId { TypeId::of::<T>() }\n+\n+pub fn id_i32_iterator() -> TypeId { TypeId::of::<I32Iterator>() }\n+pub fn id_u32_iterator() -> TypeId { TypeId::of::<U32Iterator>() }"}, {"sha": "10e315f269f971af023e23a5148a1f72b90b96a0", "filename": "src/test/run-pass/auxiliary/typeid-intrinsic-aux2.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftypeid-intrinsic-aux2.rs?ref=7494bc7c50d03b17d16474e421d842f5ef7d9078", "patch": "@@ -22,6 +22,8 @@ pub type F = Option<isize>;\n pub type G = usize;\n pub type H = &'static str;\n pub type I = Box<Fn()>;\n+pub type I32Iterator = Iterator<Item=i32>;\n+pub type U32Iterator = Iterator<Item=u32>;\n \n pub fn id_A() -> TypeId { TypeId::of::<A>() }\n pub fn id_B() -> TypeId { TypeId::of::<B>() }\n@@ -34,3 +36,6 @@ pub fn id_H() -> TypeId { TypeId::of::<H>() }\n pub fn id_I() -> TypeId { TypeId::of::<I>() }\n \n pub fn foo<T: Any>() -> TypeId { TypeId::of::<T>() }\n+\n+pub fn id_i32_iterator() -> TypeId { TypeId::of::<I32Iterator>() }\n+pub fn id_u32_iterator() -> TypeId { TypeId::of::<U32Iterator>() }"}, {"sha": "36650368d57be58b003be1cfc777fe3eff1f5152", "filename": "src/test/run-pass/typeid-intrinsic.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7494bc7c50d03b17d16474e421d842f5ef7d9078/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs?ref=7494bc7c50d03b17d16474e421d842f5ef7d9078", "patch": "@@ -78,4 +78,13 @@ pub fn main() {\n     b.hash(&mut s2);\n \n     assert_eq!(s1.finish(), s2.finish());\n+\n+    // Check projections\n+\n+    assert_eq!(TypeId::of::<other1::I32Iterator>(), other1::id_i32_iterator());\n+    assert_eq!(TypeId::of::<other1::U32Iterator>(), other1::id_u32_iterator());\n+    assert_eq!(other1::id_i32_iterator(), other2::id_i32_iterator());\n+    assert_eq!(other1::id_u32_iterator(), other2::id_u32_iterator());\n+    assert!(other1::id_i32_iterator() != other1::id_u32_iterator());\n+    assert!(TypeId::of::<other1::I32Iterator>() != TypeId::of::<other1::U32Iterator>());\n }"}]}