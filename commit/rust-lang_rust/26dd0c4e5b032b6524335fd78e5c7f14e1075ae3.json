{"sha": "26dd0c4e5b032b6524335fd78e5c7f14e1075ae3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZGQwYzRlNWIwMzJiNjUyNDMzNWZkNzhlNWM3ZjE0ZTEwNzVhZTM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-02T21:19:32Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-02T21:19:32Z"}, "message": "wrap_return_type_in_result works on the HIR", "tree": {"sha": "210b358573a4a3b30d1a8b47550b0dcdb0d7c819", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/210b358573a4a3b30d1a8b47550b0dcdb0d7c819"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26dd0c4e5b032b6524335fd78e5c7f14e1075ae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26dd0c4e5b032b6524335fd78e5c7f14e1075ae3", "html_url": "https://github.com/rust-lang/rust/commit/26dd0c4e5b032b6524335fd78e5c7f14e1075ae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26dd0c4e5b032b6524335fd78e5c7f14e1075ae3/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3770fce086d765518158b5344fcfe3ea45d1e954", "url": "https://api.github.com/repos/rust-lang/rust/commits/3770fce086d765518158b5344fcfe3ea45d1e954", "html_url": "https://github.com/rust-lang/rust/commit/3770fce086d765518158b5344fcfe3ea45d1e954"}], "stats": {"total": 189, "additions": 90, "deletions": 99}, "files": [{"sha": "ae582dc7ecb047dedf9c3ad4c9292fa53270d8a0", "filename": "crates/ide_assists/src/handlers/wrap_return_type_in_result.rs", "status": "modified", "additions": 85, "deletions": 99, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/26dd0c4e5b032b6524335fd78e5c7f14e1075ae3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26dd0c4e5b032b6524335fd78e5c7f14e1075ae3/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs?ref=26dd0c4e5b032b6524335fd78e5c7f14e1075ae3", "patch": "@@ -1,6 +1,6 @@\n use std::iter;\n \n-use ide_db::helpers::for_each_tail_expr;\n+use ide_db::helpers::{for_each_tail_expr, FamousDefs};\n use syntax::{\n     ast::{self, make, Expr},\n     match_ast, AstNode,\n@@ -33,23 +33,24 @@ pub(crate) fn wrap_return_type_in_result(acc: &mut Assists, ctx: &AssistContext)\n             _ => return None,\n         }\n     };\n-    let body = ast::Expr::BlockExpr(body);\n \n     let type_ref = &ret_type.ty()?;\n-    let ret_type_str = type_ref.syntax().text().to_string();\n-    let first_part_ret_type = ret_type_str.splitn(2, '<').next();\n-    if let Some(ret_type_first_part) = first_part_ret_type {\n-        if ret_type_first_part.ends_with(\"Result\") {\n-            cov_mark::hit!(wrap_return_type_in_result_simple_return_type_already_result);\n-            return None;\n-        }\n+    let ty = ctx.sema.resolve_type(type_ref).and_then(|ty| ty.as_adt());\n+    let result_enum =\n+        FamousDefs(&ctx.sema, ctx.sema.scope(type_ref.syntax()).krate()).core_result_Result()?;\n+\n+    if matches!(ty, Some(hir::Adt::Enum(ret_type)) if ret_type == result_enum) {\n+        cov_mark::hit!(wrap_return_type_in_result_simple_return_type_already_result);\n+        return None;\n     }\n \n     acc.add(\n         AssistId(\"wrap_return_type_in_result\", AssistKind::RefactorRewrite),\n         \"Wrap return type in Result\",\n         type_ref.syntax().text_range(),\n         |builder| {\n+            let body = ast::Expr::BlockExpr(body);\n+\n             let mut exprs_to_wrap = Vec::new();\n             let tail_cb = &mut |e: &_| tail_cb_impl(&mut exprs_to_wrap, e);\n             body.walk(&mut |expr| {\n@@ -88,6 +89,11 @@ fn tail_cb_impl(acc: &mut Vec<ast::Expr>, e: &ast::Expr) {\n                 for_each_tail_expr(&break_expr_arg, &mut |e| tail_cb_impl(acc, e))\n             }\n         }\n+        Expr::ReturnExpr(ret_expr) => {\n+            if let Some(ret_expr_arg) = &ret_expr.expr() {\n+                for_each_tail_expr(ret_expr_arg, &mut |e| tail_cb_impl(acc, e));\n+            }\n+        }\n         e => acc.push(e.clone()),\n     }\n }\n@@ -98,10 +104,17 @@ mod tests {\n \n     use super::*;\n \n-    #[test]\n-    fn wrap_return_type_in_result_simple() {\n+    fn check(ra_fixture_before: &str, ra_fixture_after: &str) {\n         check_assist(\n             wrap_return_type_in_result,\n+            &format!(\"//- minicore: result\\n{}\", ra_fixture_before.trim_start()),\n+            ra_fixture_after,\n+        );\n+    }\n+\n+    #[test]\n+    fn wrap_return_type_in_result_simple() {\n+        check(\n             r#\"\n fn foo() -> i3$02 {\n     let test = \"test\";\n@@ -119,8 +132,7 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_break_split_tail() {\n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo() -> i3$02 {\n     loop {\n@@ -148,8 +160,7 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_closure() {\n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo() {\n     || -> i32$0 {\n@@ -207,7 +218,8 @@ fn foo() {\n         check_assist_not_applicable(\n             wrap_return_type_in_result,\n             r#\"\n-fn foo() -> std::result::Result<i32$0, String> {\n+//- minicore: result\n+fn foo() -> core::result::Result<i32$0, String> {\n     let test = \"test\";\n     return 42i32;\n }\n@@ -221,6 +233,7 @@ fn foo() -> std::result::Result<i32$0, String> {\n         check_assist_not_applicable(\n             wrap_return_type_in_result,\n             r#\"\n+//- minicore: result\n fn foo() -> Result<i32$0, String> {\n     let test = \"test\";\n     return 42i32;\n@@ -246,8 +259,7 @@ fn foo() {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_cursor() {\n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo() -> $0i32 {\n     let test = \"test\";\n@@ -265,8 +277,7 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail() {\n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo() ->$0 i32 {\n     let test = \"test\";\n@@ -284,8 +295,7 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_closure() {\n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo() {\n     || ->$0 i32 {\n@@ -307,17 +317,12 @@ fn foo() {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_only() {\n-        check_assist(\n-            wrap_return_type_in_result,\n-            r#\"fn foo() -> i32$0 { 42i32 }\"#,\n-            r#\"fn foo() -> Result<i32, ${0:_}> { Ok(42i32) }\"#,\n-        );\n+        check(r#\"fn foo() -> i32$0 { 42i32 }\"#, r#\"fn foo() -> Result<i32, ${0:_}> { Ok(42i32) }\"#);\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_block_like() {\n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo() -> i32$0 {\n     if true {\n@@ -341,8 +346,7 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_without_block_closure() {\n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo() {\n     || -> i32$0 {\n@@ -370,8 +374,7 @@ fn foo() {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_nested_if() {\n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo() -> i32$0 {\n     if true {\n@@ -403,8 +406,7 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_await() {\n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n async fn foo() -> i$032 {\n     if true {\n@@ -436,17 +438,15 @@ async fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_array() {\n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"fn foo() -> [i32;$0 3] { [1, 2, 3] }\"#,\n             r#\"fn foo() -> Result<[i32; 3], ${0:_}> { Ok([1, 2, 3]) }\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_cast() {\n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo() -$0> i32 {\n     if true {\n@@ -478,8 +478,7 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_block_like_match() {\n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo() -> i32$0 {\n     let my_var = 5;\n@@ -503,8 +502,7 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_loop_with_tail() {\n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo() -> i32$0 {\n     let my_var = 5;\n@@ -530,8 +528,7 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_loop_in_let_stmt() {\n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo() -> i32$0 {\n     let my_var = let x = loop {\n@@ -553,8 +550,7 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_block_like_match_return_expr() {\n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo() -> i32$0 {\n     let my_var = 5;\n@@ -577,8 +573,7 @@ fn foo() -> Result<i32, ${0:_}> {\n \"#,\n         );\n \n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo() -> i32$0 {\n     let my_var = 5;\n@@ -606,8 +601,7 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_block_like_match_deeper() {\n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo() -> i32$0 {\n     let my_var = 5;\n@@ -655,8 +649,7 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_block_like_early_return() {\n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo() -> i$032 {\n     let test = \"test\";\n@@ -680,8 +673,7 @@ fn foo() -> Result<i32, ${0:_}> {\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_closure() {\n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo(the_field: u32) ->$0 u32 {\n     let true_closure = || { return true; };\n@@ -712,55 +704,53 @@ fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n \"#,\n         );\n \n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n-            fn foo(the_field: u32) -> u32$0 {\n-                let true_closure = || {\n-                    return true;\n-                };\n-                if the_field < 5 {\n-                    let mut i = 0;\n+fn foo(the_field: u32) -> u32$0 {\n+    let true_closure = || {\n+        return true;\n+    };\n+    if the_field < 5 {\n+        let mut i = 0;\n \n \n-                    if true_closure() {\n-                        return 99;\n-                    } else {\n-                        return 0;\n-                    }\n-                }\n-                let t = None;\n+        if true_closure() {\n+            return 99;\n+        } else {\n+            return 0;\n+        }\n+    }\n+    let t = None;\n \n-                t.unwrap_or_else(|| the_field)\n-            }\n-            \"#,\n+    t.unwrap_or_else(|| the_field)\n+}\n+\"#,\n             r#\"\n-            fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n-                let true_closure = || {\n-                    return true;\n-                };\n-                if the_field < 5 {\n-                    let mut i = 0;\n+fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n+    let true_closure = || {\n+        return true;\n+    };\n+    if the_field < 5 {\n+        let mut i = 0;\n \n \n-                    if true_closure() {\n-                        return Ok(99);\n-                    } else {\n-                        return Ok(0);\n-                    }\n-                }\n-                let t = None;\n+        if true_closure() {\n+            return Ok(99);\n+        } else {\n+            return Ok(0);\n+        }\n+    }\n+    let t = None;\n \n-                Ok(t.unwrap_or_else(|| the_field))\n-            }\n-            \"#,\n+    Ok(t.unwrap_or_else(|| the_field))\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_weird_forms() {\n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo() -> i32$0 {\n     let test = \"test\";\n@@ -793,8 +783,7 @@ fn foo() -> Result<i32, ${0:_}> {\n \"#,\n         );\n \n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo(the_field: u32) -> u32$0 {\n     if the_field < 5 {\n@@ -833,8 +822,7 @@ fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n \"#,\n         );\n \n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo(the_field: u32) -> u3$02 {\n     if the_field < 5 {\n@@ -861,8 +849,7 @@ fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n \"#,\n         );\n \n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo(the_field: u32) -> u32$0 {\n     if the_field < 5 {\n@@ -891,8 +878,7 @@ fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n \"#,\n         );\n \n-        check_assist(\n-            wrap_return_type_in_result,\n+        check(\n             r#\"\n fn foo(the_field: u32) -> $0u32 {\n     if the_field < 5 {"}, {"sha": "e8cdcbf3fa5d756ff1db432fbb2840d8e7356df5", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26dd0c4e5b032b6524335fd78e5c7f14e1075ae3/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26dd0c4e5b032b6524335fd78e5c7f14e1075ae3/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=26dd0c4e5b032b6524335fd78e5c7f14e1075ae3", "patch": "@@ -122,6 +122,10 @@ impl FamousDefs<'_, '_> {\n         self.find_enum(\"core:option:Option\")\n     }\n \n+    pub fn core_result_Result(&self) -> Option<Enum> {\n+        self.find_enum(\"core:result:Result\")\n+    }\n+\n     pub fn core_default_Default(&self) -> Option<Trait> {\n         self.find_trait(\"core:default:Default\")\n     }\n@@ -206,6 +210,7 @@ impl SnippetCap {\n }\n \n /// Calls `cb` on each expression inside `expr` that is at \"tail position\".\n+/// Does not walk into `break` or `return` expressions.\n pub fn for_each_tail_expr(expr: &ast::Expr, cb: &mut dyn FnMut(&ast::Expr)) {\n     match expr {\n         ast::Expr::BlockExpr(b) => {"}]}