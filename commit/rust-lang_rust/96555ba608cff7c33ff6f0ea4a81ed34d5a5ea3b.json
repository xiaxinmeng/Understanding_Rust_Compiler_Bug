{"sha": "96555ba608cff7c33ff6f0ea4a81ed34d5a5ea3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NTU1YmE2MDhjZmY3YzMzZmY2ZjBlYTRhODFlZDM0ZDVhNWVhM2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-28T08:33:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-28T08:33:00Z"}, "message": "Auto merge of #77261 - oli-obk:const_generic_array_serializer, r=matthewjasper\n\nDeduplicate and generalize some (de/)serializer impls\n\nI noticed this while implementing #77227 and getting a \"not implemented for [T; 16]\" error. There's likely more things we can deduplicate in this file, but I didn't need any additional changes.", "tree": {"sha": "a2f0f2f8b193b692c8b71f1dc5f65465d2fd91ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2f0f2f8b193b692c8b71f1dc5f65465d2fd91ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96555ba608cff7c33ff6f0ea4a81ed34d5a5ea3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96555ba608cff7c33ff6f0ea4a81ed34d5a5ea3b", "html_url": "https://github.com/rust-lang/rust/commit/96555ba608cff7c33ff6f0ea4a81ed34d5a5ea3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96555ba608cff7c33ff6f0ea4a81ed34d5a5ea3b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e3eb5249340898e4380ffe37e7ed8c6b2afdbf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e3eb5249340898e4380ffe37e7ed8c6b2afdbf9", "html_url": "https://github.com/rust-lang/rust/commit/4e3eb5249340898e4380ffe37e7ed8c6b2afdbf9"}, {"sha": "455f284496976c5a77e7f1cbdf1f382dc0a6d245", "url": "https://api.github.com/repos/rust-lang/rust/commits/455f284496976c5a77e7f1cbdf1f382dc0a6d245", "html_url": "https://github.com/rust-lang/rust/commit/455f284496976c5a77e7f1cbdf1f382dc0a6d245"}], "stats": {"total": 35, "additions": 12, "deletions": 23}, "files": [{"sha": "fab29f29e8730fd8db67d00b5f36140e08f3a253", "filename": "compiler/rustc_serialize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96555ba608cff7c33ff6f0ea4a81ed34d5a5ea3b/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96555ba608cff7c33ff6f0ea4a81ed34d5a5ea3b/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Flib.rs?ref=96555ba608cff7c33ff6f0ea4a81ed34d5a5ea3b", "patch": "@@ -13,6 +13,7 @@ Core encoding and decoding interfaces.\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n+#![feature(min_const_generics)]\n #![cfg_attr(test, feature(test))]\n #![allow(rustc::internal)]\n "}, {"sha": "aa305f3c7fc3f7c69b5f485ecc7c04cd2c3b1943", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/96555ba608cff7c33ff6f0ea4a81ed34d5a5ea3b/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96555ba608cff7c33ff6f0ea4a81ed34d5a5ea3b/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=96555ba608cff7c33ff6f0ea4a81ed34d5a5ea3b", "patch": "@@ -539,12 +539,8 @@ impl<S: Encoder, T: Encodable<S>> Encodable<S> for [T] {\n \n impl<S: Encoder, T: Encodable<S>> Encodable<S> for Vec<T> {\n     fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_seq(self.len(), |s| {\n-            for (i, e) in self.iter().enumerate() {\n-                s.emit_seq_elt(i, |s| e.encode(s))?\n-            }\n-            Ok(())\n-        })\n+        let slice: &[T] = self;\n+        slice.encode(s)\n     }\n }\n \n@@ -560,22 +556,18 @@ impl<D: Decoder, T: Decodable<D>> Decodable<D> for Vec<T> {\n     }\n }\n \n-impl<S: Encoder> Encodable<S> for [u8; 20] {\n+impl<S: Encoder, T: Encodable<S>, const N: usize> Encodable<S> for [T; N] {\n     fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_seq(self.len(), |s| {\n-            for (i, e) in self.iter().enumerate() {\n-                s.emit_seq_elt(i, |s| e.encode(s))?\n-            }\n-            Ok(())\n-        })\n+        let slice: &[T] = self;\n+        slice.encode(s)\n     }\n }\n \n-impl<D: Decoder> Decodable<D> for [u8; 20] {\n-    fn decode(d: &mut D) -> Result<[u8; 20], D::Error> {\n+impl<D: Decoder, const N: usize> Decodable<D> for [u8; N] {\n+    fn decode(d: &mut D) -> Result<[u8; N], D::Error> {\n         d.read_seq(|d, len| {\n-            assert!(len == 20);\n-            let mut v = [0u8; 20];\n+            assert!(len == N);\n+            let mut v = [0u8; N];\n             for i in 0..len {\n                 v[i] = d.read_seq_elt(i, |d| Decodable::decode(d))?;\n             }\n@@ -589,12 +581,8 @@ where\n     [T]: ToOwned<Owned = Vec<T>>,\n {\n     fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_seq(self.len(), |s| {\n-            for (i, e) in self.iter().enumerate() {\n-                s.emit_seq_elt(i, |s| e.encode(s))?\n-            }\n-            Ok(())\n-        })\n+        let slice: &[T] = self;\n+        slice.encode(s)\n     }\n }\n "}]}