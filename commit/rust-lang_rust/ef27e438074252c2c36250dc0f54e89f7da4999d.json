{"sha": "ef27e438074252c2c36250dc0f54e89f7da4999d", "node_id": "C_kwDOAAsO6NoAKGVmMjdlNDM4MDc0MjUyYzJjMzYyNTBkYzBmNTRlODlmN2RhNDk5OWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-23T05:18:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-23T05:18:05Z"}, "message": "Rollup merge of #108063 - compiler-errors:associated-type-bounds-in-bad-position, r=cjgillot\n\nBan associated type bounds in bad positions\n\nWe should not try to lower associated type bounds into TAITs in positions where `impl Trait` is not allowed (except for in `where` clauses, like `where T: Trait<Assoc: Bound>`).\n\nThis is achieved by using the same `rustc_ast_lowering` machinery as impl-trait does to characterize positions as universal/existential/disallowed.\n\nFixes #106077\n\nSplit out the first commit into #108066, since it's not really related.", "tree": {"sha": "206707e52a1570a22d80b54ad2e967bd522521b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/206707e52a1570a22d80b54ad2e967bd522521b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef27e438074252c2c36250dc0f54e89f7da4999d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj9vcNCRBK7hj4Ov3rIwAAoagIABG5Hf8Ptp80C27cTRYcsv2+\ncN0VfB92nIKNWZa4QgU5UwYXB0xNK6deaTJSWE+pyef3Vg7hF01Jq/y2Yz01IAxz\nV8w/n/ujEYUjAQTuLDq/aZMSwzTWqJ/EPMFeoFf+dWw56OnqGz7k2CZANGe6MECP\nLTEnJ9bnz6iJArYM+2FSFvCnl4N+wNrx24qK3TEOanA5HHTw8iMWBo1K6qK0BlPw\nan/ycNzLKY/vGUm5b8xEJ7fsXK64LHY1uinFnJs6c7mAJNT+wCvZHlmIuM3iBEqv\n7NJOTiWJPEUkxzsLDti6jbXwgm3AqG21Tr7w2juol1W77qZyoy/4UzhLrYi5YQ4=\n=Vm6C\n-----END PGP SIGNATURE-----\n", "payload": "tree 206707e52a1570a22d80b54ad2e967bd522521b6\nparent 0978711950b77582e4f8f334f6e9848d48ab7790\nparent b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677129485 +0100\ncommitter GitHub <noreply@github.com> 1677129485 +0100\n\nRollup merge of #108063 - compiler-errors:associated-type-bounds-in-bad-position, r=cjgillot\n\nBan associated type bounds in bad positions\n\nWe should not try to lower associated type bounds into TAITs in positions where `impl Trait` is not allowed (except for in `where` clauses, like `where T: Trait<Assoc: Bound>`).\n\nThis is achieved by using the same `rustc_ast_lowering` machinery as impl-trait does to characterize positions as universal/existential/disallowed.\n\nFixes #106077\n\nSplit out the first commit into #108066, since it's not really related.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef27e438074252c2c36250dc0f54e89f7da4999d", "html_url": "https://github.com/rust-lang/rust/commit/ef27e438074252c2c36250dc0f54e89f7da4999d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef27e438074252c2c36250dc0f54e89f7da4999d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0978711950b77582e4f8f334f6e9848d48ab7790", "url": "https://api.github.com/repos/rust-lang/rust/commits/0978711950b77582e4f8f334f6e9848d48ab7790", "html_url": "https://github.com/rust-lang/rust/commit/0978711950b77582e4f8f334f6e9848d48ab7790"}, {"sha": "b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f", "html_url": "https://github.com/rust-lang/rust/commit/b14eb0c497eaac65cd67c02270c6f7bd8ecc5b3f"}], "stats": {"total": 497, "additions": 221, "deletions": 276}, "files": [{"sha": "a2837deafdec4f38a16b61392228b709684edacd", "filename": "compiler/rustc_ast_lowering/locales/en-US.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/compiler%2Frustc_ast_lowering%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/compiler%2Frustc_ast_lowering%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Flocales%2Fen-US.ftl?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -19,6 +19,9 @@ ast_lowering_remove_parentheses = remove these parentheses\n ast_lowering_misplaced_impl_trait =\n     `impl Trait` only allowed in function and inherent method return types, not in {$position}\n \n+ast_lowering_misplaced_assoc_ty_binding =\n+    associated type bounds are only allowed in where clauses and function signatures, not in {$position}\n+\n ast_lowering_rustc_box_attribute_error =\n     #[rustc_box] requires precisely one argument and no other attributes are allowed\n "}, {"sha": "def74c2adeee944c36975b02f6b699202044f170", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -79,6 +79,14 @@ pub struct MisplacedImplTrait<'a> {\n     pub position: DiagnosticArgFromDisplay<'a>,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(ast_lowering_misplaced_assoc_ty_binding)]\n+pub struct MisplacedAssocTyBinding<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub position: DiagnosticArgFromDisplay<'a>,\n+}\n+\n #[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering_rustc_box_attribute_error)]\n pub struct RustcBoxAttributeError {"}, {"sha": "c5b144e68dc7e2cf4ee64c7f4a1728695dcecccd", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 73, "deletions": 62, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -288,31 +288,31 @@ enum ImplTraitPosition {\n impl std::fmt::Display for ImplTraitPosition {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         let name = match self {\n-            ImplTraitPosition::Path => \"path\",\n-            ImplTraitPosition::Variable => \"variable binding\",\n-            ImplTraitPosition::Trait => \"trait\",\n-            ImplTraitPosition::AsyncBlock => \"async block\",\n-            ImplTraitPosition::Bound => \"bound\",\n-            ImplTraitPosition::Generic => \"generic\",\n-            ImplTraitPosition::ExternFnParam => \"`extern fn` param\",\n-            ImplTraitPosition::ClosureParam => \"closure param\",\n-            ImplTraitPosition::PointerParam => \"`fn` pointer param\",\n-            ImplTraitPosition::FnTraitParam => \"`Fn` trait param\",\n-            ImplTraitPosition::TraitParam => \"trait method param\",\n-            ImplTraitPosition::ImplParam => \"`impl` method param\",\n-            ImplTraitPosition::ExternFnReturn => \"`extern fn` return\",\n-            ImplTraitPosition::ClosureReturn => \"closure return\",\n-            ImplTraitPosition::PointerReturn => \"`fn` pointer return\",\n-            ImplTraitPosition::FnTraitReturn => \"`Fn` trait return\",\n-            ImplTraitPosition::TraitReturn => \"trait method return\",\n-            ImplTraitPosition::ImplReturn => \"`impl` method return\",\n-            ImplTraitPosition::GenericDefault => \"generic parameter default\",\n-            ImplTraitPosition::ConstTy => \"const type\",\n-            ImplTraitPosition::StaticTy => \"static type\",\n-            ImplTraitPosition::AssocTy => \"associated type\",\n-            ImplTraitPosition::FieldTy => \"field type\",\n-            ImplTraitPosition::Cast => \"cast type\",\n-            ImplTraitPosition::ImplSelf => \"impl header\",\n+            ImplTraitPosition::Path => \"paths\",\n+            ImplTraitPosition::Variable => \"variable bindings\",\n+            ImplTraitPosition::Trait => \"traits\",\n+            ImplTraitPosition::AsyncBlock => \"async blocks\",\n+            ImplTraitPosition::Bound => \"bounds\",\n+            ImplTraitPosition::Generic => \"generics\",\n+            ImplTraitPosition::ExternFnParam => \"`extern fn` params\",\n+            ImplTraitPosition::ClosureParam => \"closure params\",\n+            ImplTraitPosition::PointerParam => \"`fn` pointer params\",\n+            ImplTraitPosition::FnTraitParam => \"`Fn` trait params\",\n+            ImplTraitPosition::TraitParam => \"trait method params\",\n+            ImplTraitPosition::ImplParam => \"`impl` method params\",\n+            ImplTraitPosition::ExternFnReturn => \"`extern fn` return types\",\n+            ImplTraitPosition::ClosureReturn => \"closure return types\",\n+            ImplTraitPosition::PointerReturn => \"`fn` pointer return types\",\n+            ImplTraitPosition::FnTraitReturn => \"`Fn` trait return types\",\n+            ImplTraitPosition::TraitReturn => \"trait method return types\",\n+            ImplTraitPosition::ImplReturn => \"`impl` method return types\",\n+            ImplTraitPosition::GenericDefault => \"generic parameter defaults\",\n+            ImplTraitPosition::ConstTy => \"const types\",\n+            ImplTraitPosition::StaticTy => \"static types\",\n+            ImplTraitPosition::AssocTy => \"associated types\",\n+            ImplTraitPosition::FieldTy => \"field types\",\n+            ImplTraitPosition::Cast => \"cast types\",\n+            ImplTraitPosition::ImplSelf => \"impl headers\",\n         };\n \n         write!(f, \"{name}\")\n@@ -1002,8 +1002,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         } else {\n             self.arena.alloc(hir::GenericArgs::none())\n         };\n-        let itctx_tait = &ImplTraitContext::TypeAliasesOpaqueTy;\n-\n         let kind = match &constraint.kind {\n             AssocConstraintKind::Equality { term } => {\n                 let term = match term {\n@@ -1013,8 +1011,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 hir::TypeBindingKind::Equality { term }\n             }\n             AssocConstraintKind::Bound { bounds } => {\n+                enum DesugarKind<'a> {\n+                    ImplTrait,\n+                    Error(&'a ImplTraitPosition),\n+                    Bound,\n+                }\n+\n                 // Piggy-back on the `impl Trait` context to figure out the correct behavior.\n-                let (desugar_to_impl_trait, itctx) = match itctx {\n+                let desugar_kind = match itctx {\n                     // We are in the return position:\n                     //\n                     //     fn foo() -> impl Iterator<Item: Debug>\n@@ -1023,7 +1027,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     //\n                     //     fn foo() -> impl Iterator<Item = impl Debug>\n                     ImplTraitContext::ReturnPositionOpaqueTy { .. }\n-                    | ImplTraitContext::TypeAliasesOpaqueTy { .. } => (true, itctx),\n+                    | ImplTraitContext::TypeAliasesOpaqueTy { .. } => DesugarKind::ImplTrait,\n \n                     // We are in the argument position, but within a dyn type:\n                     //\n@@ -1032,15 +1036,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // so desugar to\n                     //\n                     //     fn foo(x: dyn Iterator<Item = impl Debug>)\n-                    ImplTraitContext::Universal if self.is_in_dyn_type => (true, itctx),\n+                    ImplTraitContext::Universal if self.is_in_dyn_type => DesugarKind::ImplTrait,\n \n-                    // In `type Foo = dyn Iterator<Item: Debug>` we desugar to\n-                    // `type Foo = dyn Iterator<Item = impl Debug>` but we have to override the\n-                    // \"impl trait context\" to permit `impl Debug` in this position (it desugars\n-                    // then to an opaque type).\n-                    //\n-                    // FIXME: this is only needed until `impl Trait` is allowed in type aliases.\n-                    ImplTraitContext::Disallowed(_) if self.is_in_dyn_type => (true, itctx_tait),\n+                    ImplTraitContext::Disallowed(position) if self.is_in_dyn_type => {\n+                        DesugarKind::Error(position)\n+                    }\n \n                     // We are in the parameter position, but not within a dyn type:\n                     //\n@@ -1049,35 +1049,46 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // so we leave it as is and this gets expanded in astconv to a bound like\n                     // `<T as Iterator>::Item: Debug` where `T` is the type parameter for the\n                     // `impl Iterator`.\n-                    _ => (false, itctx),\n+                    _ => DesugarKind::Bound,\n                 };\n \n-                if desugar_to_impl_trait {\n-                    // Desugar `AssocTy: Bounds` into `AssocTy = impl Bounds`. We do this by\n-                    // constructing the HIR for `impl bounds...` and then lowering that.\n-\n-                    let impl_trait_node_id = self.next_node_id();\n-\n-                    self.with_dyn_type_scope(false, |this| {\n-                        let node_id = this.next_node_id();\n-                        let ty = this.lower_ty(\n-                            &Ty {\n-                                id: node_id,\n-                                kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n-                                span: this.lower_span(constraint.span),\n-                                tokens: None,\n-                            },\n-                            itctx,\n-                        );\n+                match desugar_kind {\n+                    DesugarKind::ImplTrait => {\n+                        // Desugar `AssocTy: Bounds` into `AssocTy = impl Bounds`. We do this by\n+                        // constructing the HIR for `impl bounds...` and then lowering that.\n \n-                        hir::TypeBindingKind::Equality { term: ty.into() }\n-                    })\n-                } else {\n-                    // Desugar `AssocTy: Bounds` into a type binding where the\n-                    // later desugars into a trait predicate.\n-                    let bounds = self.lower_param_bounds(bounds, itctx);\n+                        let impl_trait_node_id = self.next_node_id();\n \n-                    hir::TypeBindingKind::Constraint { bounds }\n+                        self.with_dyn_type_scope(false, |this| {\n+                            let node_id = this.next_node_id();\n+                            let ty = this.lower_ty(\n+                                &Ty {\n+                                    id: node_id,\n+                                    kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n+                                    span: this.lower_span(constraint.span),\n+                                    tokens: None,\n+                                },\n+                                itctx,\n+                            );\n+\n+                            hir::TypeBindingKind::Equality { term: ty.into() }\n+                        })\n+                    }\n+                    DesugarKind::Bound => {\n+                        // Desugar `AssocTy: Bounds` into a type binding where the\n+                        // later desugars into a trait predicate.\n+                        let bounds = self.lower_param_bounds(bounds, itctx);\n+\n+                        hir::TypeBindingKind::Constraint { bounds }\n+                    }\n+                    DesugarKind::Error(position) => {\n+                        self.tcx.sess.emit_err(errors::MisplacedAssocTyBinding {\n+                            span: constraint.span,\n+                            position: DiagnosticArgFromDisplay(position),\n+                        });\n+                        let err_ty = &*self.arena.alloc(self.ty(constraint.span, hir::TyKind::Err));\n+                        hir::TypeBindingKind::Equality { term: err_ty.into() }\n+                    }\n                 }\n             }\n         };"}, {"sha": "128e7255c61e4dfd1fedf43b149918b5e236b18c", "filename": "compiler/rustc_ast_passes/locales/en-US.ftl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/compiler%2Frustc_ast_passes%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/compiler%2Frustc_ast_passes%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Flocales%2Fen-US.ftl?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -11,9 +11,6 @@ ast_passes_forbidden_let_stable =\n ast_passes_deprecated_where_clause_location =\n     where clause not allowed here\n \n-ast_passes_forbidden_assoc_constraint =\n-    associated type bounds are not allowed within structs, enums, or unions\n-\n ast_passes_keyword_lifetime =\n     lifetimes cannot use keyword names\n "}, {"sha": "ee861e873550bb56b34b5be13c4f5f954778d594", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -71,10 +71,6 @@ struct AstValidator<'a> {\n     /// or `Foo::Bar<impl Trait>`\n     is_impl_trait_banned: bool,\n \n-    /// Used to ban associated type bounds (i.e., `Type<AssocType: Bounds>`) in\n-    /// certain positions.\n-    is_assoc_ty_bound_banned: bool,\n-\n     /// See [ForbiddenLetReason]\n     forbidden_let_reason: Option<ForbiddenLetReason>,\n \n@@ -180,30 +176,12 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn with_banned_assoc_ty_bound(&mut self, f: impl FnOnce(&mut Self)) {\n-        let old = mem::replace(&mut self.is_assoc_ty_bound_banned, true);\n-        f(self);\n-        self.is_assoc_ty_bound_banned = old;\n-    }\n-\n     fn with_impl_trait(&mut self, outer: Option<Span>, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.outer_impl_trait, outer);\n         f(self);\n         self.outer_impl_trait = old;\n     }\n \n-    fn visit_assoc_constraint_from_generic_args(&mut self, constraint: &'a AssocConstraint) {\n-        match constraint.kind {\n-            AssocConstraintKind::Equality { .. } => {}\n-            AssocConstraintKind::Bound { .. } => {\n-                if self.is_assoc_ty_bound_banned {\n-                    self.session.emit_err(ForbiddenAssocConstraint { span: constraint.span });\n-                }\n-            }\n-        }\n-        self.visit_assoc_constraint(constraint);\n-    }\n-\n     // Mirrors `visit::walk_ty`, but tracks relevant state.\n     fn walk_ty(&mut self, t: &'a Ty) {\n         match &t.kind {\n@@ -1248,7 +1226,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         // are allowed to contain nested `impl Trait`.\n                         AngleBracketedArg::Constraint(constraint) => {\n                             self.with_impl_trait(None, |this| {\n-                                this.visit_assoc_constraint_from_generic_args(constraint);\n+                                this.visit_assoc_constraint(constraint);\n                             });\n                         }\n                     }\n@@ -1373,14 +1351,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_param_bound(self, bound)\n     }\n \n-    fn visit_variant_data(&mut self, s: &'a VariantData) {\n-        self.with_banned_assoc_ty_bound(|this| visit::walk_struct_def(this, s))\n-    }\n-\n-    fn visit_enum_def(&mut self, enum_definition: &'a EnumDef) {\n-        self.with_banned_assoc_ty_bound(|this| visit::walk_enum_def(this, enum_definition))\n-    }\n-\n     fn visit_fn(&mut self, fk: FnKind<'a>, span: Span, id: NodeId) {\n         // Only associated `fn`s can have `self` parameters.\n         let self_semantic = match fk.ctxt() {\n@@ -1709,7 +1679,6 @@ pub fn check_crate(session: &Session, krate: &Crate, lints: &mut LintBuffer) ->\n         outer_impl_trait: None,\n         disallow_tilde_const: None,\n         is_impl_trait_banned: false,\n-        is_assoc_ty_bound_banned: false,\n         forbidden_let_reason: Some(ForbiddenLetReason::GenericForbidden),\n         lint_buffer: lints,\n     };"}, {"sha": "f304f5a1956b81c8f81ad02370b62517821efa82", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -23,13 +23,6 @@ pub struct ForbiddenLetStable {\n     pub span: Span,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(ast_passes_forbidden_assoc_constraint)]\n-pub struct ForbiddenAssocConstraint {\n-    #[primary_span]\n-    pub span: Span,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(ast_passes_keyword_lifetime)]\n pub struct KeywordLifetime {"}, {"sha": "bbafc55dac3a044099f967dffee6c3c9d9725c61", "filename": "tests/ui/associated-consts/issue-105330.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fassociated-consts%2Fissue-105330.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fassociated-consts%2Fissue-105330.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-consts%2Fissue-105330.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -33,7 +33,7 @@ LL | fn main<A: TraitWAssocConst<A=32>>() {\n    = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n    = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl header\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl headers\n   --> $DIR/issue-105330.rs:6:27\n    |\n LL | impl TraitWAssocConst for impl Demo {"}, {"sha": "8cab1f66c2709348b1ec2ef4c3c56b8bfee22278", "filename": "tests/ui/associated-type-bounds/bad-universal-in-dyn-in-where-clause.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.rs?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -0,0 +1,14 @@\n+#![feature(associated_type_bounds)]\n+\n+trait B {\n+    type AssocType;\n+}\n+\n+fn f()\n+where\n+    dyn for<'j> B<AssocType: 'j>:,\n+    //~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n+{\n+}\n+\n+fn main() {}"}, {"sha": "6fa266d23d49b04883d632220518c01c1e294b4d", "filename": "tests/ui/associated-type-bounds/bad-universal-in-dyn-in-where-clause.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -0,0 +1,8 @@\n+error: associated type bounds are only allowed in where clauses and function signatures, not in bounds\n+  --> $DIR/bad-universal-in-dyn-in-where-clause.rs:9:19\n+   |\n+LL |     dyn for<'j> B<AssocType: 'j>:,\n+   |                   ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "1d5d181efcc01009851a6ab5f7b19757f6690b7a", "filename": "tests/ui/associated-type-bounds/bad-universal-in-impl-sig.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.rs?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -0,0 +1,13 @@\n+#![feature(associated_type_bounds)]\n+\n+trait Trait {\n+    type Item;\n+}\n+\n+trait Trait2 {}\n+\n+// It's not possible to insert a universal `impl Trait` here!\n+impl dyn Trait<Item: Trait2> {}\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n+\n+fn main() {}"}, {"sha": "8b66627d57fe2fe7c5882281731554cc33c3b0de", "filename": "tests/ui/associated-type-bounds/bad-universal-in-impl-sig.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -0,0 +1,8 @@\n+error: associated type bounds are only allowed in where clauses and function signatures, not in impl headers\n+  --> $DIR/bad-universal-in-impl-sig.rs:10:16\n+   |\n+LL | impl dyn Trait<Item: Trait2> {}\n+   |                ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "057966941dc099ee8feea40befc2ab4e7be1d1ab", "filename": "tests/ui/associated-type-bounds/inside-adt.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.rs?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -3,28 +3,24 @@\n use std::mem::ManuallyDrop;\n \n struct S1 { f: dyn Iterator<Item: Copy> }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n struct S3 { f: dyn Iterator<Item: 'static> }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n \n enum E1 { V(dyn Iterator<Item: Copy>) }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)`\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n enum E3 { V(dyn Iterator<Item: 'static>) }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n \n union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)`\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n union U2 { f: ManuallyDrop<Box<dyn Iterator<Item: Copy>>> }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n \n fn main() {}"}, {"sha": "f848bd798ee0abbb15b1bbfa50e51c637fd407d2", "filename": "tests/ui/associated-type-bounds/inside-adt.stderr", "status": "modified", "additions": 15, "deletions": 90, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -1,131 +1,56 @@\n-error: associated type bounds are not allowed within structs, enums, or unions\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n   --> $DIR/inside-adt.rs:5:29\n    |\n LL | struct S1 { f: dyn Iterator<Item: Copy> }\n    |                             ^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n   --> $DIR/inside-adt.rs:7:33\n    |\n LL | struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n    |                                 ^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n   --> $DIR/inside-adt.rs:9:29\n    |\n LL | struct S3 { f: dyn Iterator<Item: 'static> }\n    |                             ^^^^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n   --> $DIR/inside-adt.rs:12:26\n    |\n LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n    |                          ^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:15:30\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n+  --> $DIR/inside-adt.rs:14:30\n    |\n LL | enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n    |                              ^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:17:26\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n+  --> $DIR/inside-adt.rs:16:26\n    |\n LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n    |                          ^^^^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:21:41\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n+  --> $DIR/inside-adt.rs:19:41\n    |\n LL | union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n    |                                         ^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:24:45\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n+  --> $DIR/inside-adt.rs:21:45\n    |\n LL | union U2 { f: ManuallyDrop<Box<dyn Iterator<Item: Copy>>> }\n    |                                             ^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:26:41\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field types\n+  --> $DIR/inside-adt.rs:23:41\n    |\n LL | union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n    |                                         ^^^^^^^^^^^^^\n \n-error[E0277]: the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)` cannot be known at compilation time\n-  --> $DIR/inside-adt.rs:12:13\n-   |\n-LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Copy> + 'static)`\n-   = note: no field of an enum variant may have a dynamically sized type\n-   = help: change the field's type to have a statically known size\n-help: borrowed types always have a statically known size\n-   |\n-LL | enum E1 { V(&dyn Iterator<Item: Copy>) }\n-   |             +\n-help: the `Box` type always has a statically known size and allocates its contents in the heap\n-   |\n-LL | enum E1 { V(Box<dyn Iterator<Item: Copy>>) }\n-   |             ++++                        +\n-\n-error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)` cannot be known at compilation time\n-  --> $DIR/inside-adt.rs:17:13\n-   |\n-LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n-   = note: no field of an enum variant may have a dynamically sized type\n-   = help: change the field's type to have a statically known size\n-help: borrowed types always have a statically known size\n-   |\n-LL | enum E3 { V(&dyn Iterator<Item: 'static>) }\n-   |             +\n-help: the `Box` type always has a statically known size and allocates its contents in the heap\n-   |\n-LL | enum E3 { V(Box<dyn Iterator<Item: 'static>>) }\n-   |             ++++                           +\n-\n-error[E0277]: the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)` cannot be known at compilation time\n-  --> $DIR/inside-adt.rs:21:15\n-   |\n-LL | union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: within `ManuallyDrop<(dyn Iterator<Item = impl Copy> + 'static)>`, the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Copy> + 'static)`\n-   = note: required because it appears within the type `ManuallyDrop<dyn Iterator<Item = impl Copy>>`\n-   = note: no field of a union may have a dynamically sized type\n-   = help: change the field's type to have a statically known size\n-help: borrowed types always have a statically known size\n-   |\n-LL | union U1 { f: &ManuallyDrop<dyn Iterator<Item: Copy>> }\n-   |               +\n-help: the `Box` type always has a statically known size and allocates its contents in the heap\n-   |\n-LL | union U1 { f: Box<ManuallyDrop<dyn Iterator<Item: Copy>>> }\n-   |               ++++                                      +\n-\n-error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)` cannot be known at compilation time\n-  --> $DIR/inside-adt.rs:26:15\n-   |\n-LL | union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: within `ManuallyDrop<(dyn Iterator<Item = impl Sized + 'static> + 'static)>`, the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n-   = note: required because it appears within the type `ManuallyDrop<dyn Iterator<Item = impl Sized>>`\n-   = note: no field of a union may have a dynamically sized type\n-   = help: change the field's type to have a statically known size\n-help: borrowed types always have a statically known size\n-   |\n-LL | union U3 { f: &ManuallyDrop<dyn Iterator<Item: 'static>> }\n-   |               +\n-help: the `Box` type always has a statically known size and allocates its contents in the heap\n-   |\n-LL | union U3 { f: Box<ManuallyDrop<dyn Iterator<Item: 'static>>> }\n-   |               ++++                                         +\n-\n-error: aborting due to 13 previous errors\n+error: aborting due to 9 previous errors\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "78017429f73d5884359bd4f4d6eb03812f6bc961", "filename": "tests/ui/async-await/in-trait/fn-not-async-err2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -11,7 +11,7 @@ trait MyTrait {\n \n impl MyTrait for i32 {\n     fn foo(&self) -> impl Future<Output = i32> {\n-        //~^ ERROR `impl Trait` only allowed in function and inherent method return types, not in `impl` method return [E0562]\n+        //~^ ERROR `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\n         async { *self }\n     }\n }"}, {"sha": "37d9669c0124b572f7469ddbbdcc3cb8bc38019e", "filename": "tests/ui/async-await/in-trait/fn-not-async-err2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\n   --> $DIR/fn-not-async-err2.rs:13:22\n    |\n LL |     fn foo(&self) -> impl Future<Output = i32> {"}, {"sha": "4233a8af9b6a6a0d18babda2b33c7018c94c0a3f", "filename": "tests/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -115,19 +115,19 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n    = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const types\n   --> $DIR/feature-gate-associated_type_bounds.rs:55:14\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |              ^^^^^^^^^^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const types\n   --> $DIR/feature-gate-associated_type_bounds.rs:61:15\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |               ^^^^^^^^^^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/feature-gate-associated_type_bounds.rs:68:12\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;"}, {"sha": "c8c3e13d7fc5a61326cab98fcf01ea6b182a2f12", "filename": "tests/ui/feature-gates/feature-gate-impl_trait_in_fn_trait_return.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n   --> $DIR/feature-gate-impl_trait_in_fn_trait_return.rs:1:24\n    |\n LL | fn f() -> impl Fn() -> impl Sized { || () }\n@@ -7,7 +7,7 @@ LL | fn f() -> impl Fn() -> impl Sized { || () }\n    = note: see issue #99697 <https://github.com/rust-lang/rust/issues/99697> for more information\n    = help: add `#![feature(impl_trait_in_fn_trait_return)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n   --> $DIR/feature-gate-impl_trait_in_fn_trait_return.rs:3:32\n    |\n LL | fn g() -> &'static dyn Fn() -> impl Sized { &|| () }"}, {"sha": "0082b6fafee8fc8f407ce2fa6ac472e658c47a27", "filename": "tests/ui/feature-gates/feature-gate-return_position_impl_trait_in_trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\n   --> $DIR/feature-gate-return_position_impl_trait_in_trait.rs:8:17\n    |\n LL |     fn bar() -> impl Sized;\n@@ -7,7 +7,7 @@ LL |     fn bar() -> impl Sized;\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\n   --> $DIR/feature-gate-return_position_impl_trait_in_trait.rs:9:21\n    |\n LL |     fn baz() -> Box<impl std::fmt::Display>;\n@@ -16,7 +16,7 @@ LL |     fn baz() -> Box<impl std::fmt::Display>;\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\n   --> $DIR/feature-gate-return_position_impl_trait_in_trait.rs:15:23\n    |\n LL |     async fn bar() -> impl Sized;"}, {"sha": "7ef063af952226faa3759357268b2a8aa88c3963", "filename": "tests/ui/impl-trait/issues/issue-54600.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-54600.rs:4:19\n    |\n LL |     let x: Option<impl Debug> = Some(44_u32);"}, {"sha": "1d1316f0e110b6b77a3f2b21da3422697264aa93", "filename": "tests/ui/impl-trait/issues/issue-54840.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-54840.rs:5:13\n    |\n LL |     let j: &impl Add = &i;"}, {"sha": "26ec2a4f9cfe5fdca8a1cecbb7478aff348c7fa5", "filename": "tests/ui/impl-trait/issues/issue-58504.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-58504.rs:10:16\n    |\n LL |     let gens: [impl Generator<Return=!, Yield=()>;2] = [ mk_gen(), mk_gen() ];"}, {"sha": "2b4d0abdffca8f4c5640db91600b812d958d5f5a", "filename": "tests/ui/impl-trait/issues/issue-58956.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -1,10 +1,10 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const types\n   --> $DIR/issue-58956.rs:7:11\n    |\n LL | const _A: impl Lam = {\n    |           ^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-58956.rs:9:17\n    |\n LL |     let x: Wrap<impl Lam> = Wrap(B);"}, {"sha": "d066256bfb09d99b98b6eb2d51d188fe4129e96d", "filename": "tests/ui/impl-trait/issues/issue-70971.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-70971.rs:2:14\n    |\n LL |     let x : (impl Copy,) = (true,);"}, {"sha": "580250a62fecda621a339a9161a7a96e4517b2f7", "filename": "tests/ui/impl-trait/issues/issue-79099.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -9,7 +9,7 @@ LL |         let f: impl core::future::Future<Output = u8> = async { 1 };\n    = help: pass `--edition 2021` to `rustc`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-79099.rs:3:16\n    |\n LL |         let f: impl core::future::Future<Output = u8> = async { 1 };"}, {"sha": "656bd04706124df0b6aca87eb33fb5d8bf71db98", "filename": "tests/ui/impl-trait/issues/issue-83929-impl-trait-in-generic-default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -1,10 +1,10 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/issue-83929-impl-trait-in-generic-default.rs:1:16\n    |\n LL | struct Foo<T = impl Copy>(T);\n    |                ^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/issue-83929-impl-trait-in-generic-default.rs:4:20\n    |\n LL | type Result<T, E = impl std::error::Error> = std::result::Result<T, E>;"}, {"sha": "36010fdef36c316807054c02cfedbea583038590", "filename": "tests/ui/impl-trait/issues/issue-84919.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-84919.rs:5:13\n    |\n LL |     let _x: impl Trait = ();"}, {"sha": "b6f8a54f35ae89efea4eca0f8e2ceaa1ceb01f8d", "filename": "tests/ui/impl-trait/issues/issue-86642.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in const types\n   --> $DIR/issue-86642.rs:1:11\n    |\n LL | static x: impl Fn(&str) -> Result<&str, ()> = move |source| {"}, {"sha": "ec59b719c10e1c199d5cf3d762bf65d1d0b1c17a", "filename": "tests/ui/impl-trait/issues/issue-87295.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-87295.rs:16:31\n    |\n LL |     let _do_not_waste: Struct<impl Trait<Output = i32>> = Struct::new(());"}, {"sha": "ffe84b8e86fc4c3f08b3bef5107afbc793af0ecf", "filename": "tests/ui/impl-trait/nested_impl_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -34,7 +34,7 @@ LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  |         nested `impl Trait` here\n    |                                  outer `impl Trait`\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n   --> $DIR/nested_impl_trait.rs:10:32\n    |\n LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}"}, {"sha": "1cae3f77cc563ccabe1e50db1702772882692088", "filename": "tests/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -43,109 +43,109 @@ LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer params\n   --> $DIR/where-allowed.rs:16:40\n    |\n LL | fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n   --> $DIR/where-allowed.rs:20:42\n    |\n LL | fn in_fn_return_in_parameters(_: fn() -> impl Debug) { panic!() }\n    |                                          ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer params\n   --> $DIR/where-allowed.rs:24:38\n    |\n LL | fn in_fn_parameter_in_return() -> fn(impl Debug) { panic!() }\n    |                                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n   --> $DIR/where-allowed.rs:28:40\n    |\n LL | fn in_fn_return_in_return() -> fn() -> impl Debug { panic!() }\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n   --> $DIR/where-allowed.rs:32:49\n    |\n LL | fn in_dyn_Fn_parameter_in_parameters(_: &dyn Fn(impl Debug)) { panic!() }\n    |                                                 ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n   --> $DIR/where-allowed.rs:36:51\n    |\n LL | fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n   --> $DIR/where-allowed.rs:40:55\n    |\n LL | fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n    |                                                       ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n   --> $DIR/where-allowed.rs:47:51\n    |\n LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n   --> $DIR/where-allowed.rs:52:53\n    |\n LL | fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n    |                                                     ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n   --> $DIR/where-allowed.rs:56:57\n    |\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n   --> $DIR/where-allowed.rs:64:38\n    |\n LL | fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n    |                                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n   --> $DIR/where-allowed.rs:68:40\n    |\n LL | fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n   --> $DIR/where-allowed.rs:81:32\n    |\n LL | struct InBraceStructField { x: impl Debug }\n    |                                ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n   --> $DIR/where-allowed.rs:85:41\n    |\n LL | struct InAdtInBraceStructField { x: Vec<impl Debug> }\n    |                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n   --> $DIR/where-allowed.rs:89:27\n    |\n LL | struct InTupleStructField(impl Debug);\n    |                           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n   --> $DIR/where-allowed.rs:94:25\n    |\n LL |     InBraceVariant { x: impl Debug },\n    |                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field type\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n   --> $DIR/where-allowed.rs:96:20\n    |\n LL |     InTupleVariant(impl Debug),\n    |                    ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\n   --> $DIR/where-allowed.rs:107:23\n    |\n LL |     fn in_return() -> impl Debug;\n@@ -154,7 +154,7 @@ LL |     fn in_return() -> impl Debug;\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\n   --> $DIR/where-allowed.rs:124:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n@@ -163,121 +163,121 @@ LL |     fn in_trait_impl_return() -> impl Debug { () }\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` params\n   --> $DIR/where-allowed.rs:137:33\n    |\n LL |     fn in_foreign_parameters(_: impl Debug);\n    |                                 ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` return types\n   --> $DIR/where-allowed.rs:140:31\n    |\n LL |     fn in_foreign_return() -> impl Debug;\n    |                               ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n   --> $DIR/where-allowed.rs:156:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in traits\n   --> $DIR/where-allowed.rs:161:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl header\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl headers\n   --> $DIR/where-allowed.rs:166:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl header\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl headers\n   --> $DIR/where-allowed.rs:171:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl header\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl headers\n   --> $DIR/where-allowed.rs:177:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bound\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bounds\n   --> $DIR/where-allowed.rs:183:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bound\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bounds\n   --> $DIR/where-allowed.rs:190:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bound\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bounds\n   --> $DIR/where-allowed.rs:197:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait param\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n   --> $DIR/where-allowed.rs:204:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n   --> $DIR/where-allowed.rs:211:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/where-allowed.rs:217:40\n    |\n LL | struct InStructGenericParamDefault<T = impl Debug>(T);\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/where-allowed.rs:221:36\n    |\n LL | enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n    |                                    ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/where-allowed.rs:225:38\n    |\n LL | trait InTraitGenericParamDefault<T = impl Debug> {}\n    |                                      ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/where-allowed.rs:229:41\n    |\n LL | type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n    |                                         ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/where-allowed.rs:233:11\n    |\n LL | impl <T = impl Debug> T {}\n    |           ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter default\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n   --> $DIR/where-allowed.rs:240:40\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    |                                        ^^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/where-allowed.rs:246:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in closure return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in closure return types\n   --> $DIR/where-allowed.rs:248:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };"}, {"sha": "dadea34b68836b6949f8eaa504502055e2a97cd6", "filename": "tests/ui/issues/issue-47715.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fissues%2Fissue-47715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Fissues%2Fissue-47715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-47715.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -1,22 +1,22 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generics\n   --> $DIR/issue-47715.rs:9:37\n    |\n LL | struct Container<T: Iterable<Item = impl Foo>> {\n    |                                     ^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generics\n   --> $DIR/issue-47715.rs:14:30\n    |\n LL | enum Enum<T: Iterable<Item = impl Foo>> {\n    |                              ^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generics\n   --> $DIR/issue-47715.rs:19:32\n    |\n LL | union Union<T: Iterable<Item = impl Foo> + Copy> {\n    |                                ^^^^^^^^\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generics\n   --> $DIR/issue-47715.rs:24:30\n    |\n LL | type Type<T: Iterable<Item = impl Foo>> = T;"}, {"sha": "ff375b2ff863fb7a1504f8e97932f6b85b54056d", "filename": "tests/ui/type-alias-impl-trait/type-alias-impl-trait-fn-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -1,4 +1,4 @@\n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n   --> $DIR/type-alias-impl-trait-fn-type.rs:6:20\n    |\n LL | type Foo = fn() -> impl Send;"}, {"sha": "09187d7863a6bcf1d64dccde872850c4e24de615", "filename": "tests/ui/typeck/issue-104513-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Ftypeck%2Fissue-104513-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef27e438074252c2c36250dc0f54e89f7da4999d/tests%2Fui%2Ftypeck%2Fissue-104513-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-104513-ice.stderr?ref=ef27e438074252c2c36250dc0f54e89f7da4999d", "patch": "@@ -4,7 +4,7 @@ error[E0405]: cannot find trait `Oops` in this scope\n LL |     let _: S<impl Oops> = S;\n    |                   ^^^^ not found in this scope\n \n-error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n   --> $DIR/issue-104513-ice.rs:3:14\n    |\n LL |     let _: S<impl Oops> = S;"}]}