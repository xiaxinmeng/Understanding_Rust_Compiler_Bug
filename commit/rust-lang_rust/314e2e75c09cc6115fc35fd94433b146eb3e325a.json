{"sha": "314e2e75c09cc6115fc35fd94433b146eb3e325a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNGUyZTc1YzA5Y2M2MTE1ZmMzNWZkOTQ0MzNiMTQ2ZWIzZTMyNWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-02T13:14:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-02T13:14:22Z"}, "message": "Merge #9752\n\n9752: feature: Declare proc-macro dependent crates in `rust-project.json` r=matklad a=tobywf\n\nThis adds the `is_proc_macro` flag in `rust-project.json`. By default, this is `false` and not required, so existing projects won't break/have the same behavior as before this change. If the flag is true, a dependency to the `proc_macro` sysroot crate is added (if it exists), so that rust-analyzer can resolve those imports.\r\n\r\nThis fixes #9726 .\r\n\r\nI've also added some tests in the second commit. The first is a smoke test for a basic, minimal `rust-project.json` file. The second is a more targeted test for the flag. Both tests depend on the fake sysroot (a bunch of directories in the correct layout with empty `lib.rs` files), and also on `env!(\"CARGO_MANIFEST_DIR\")` being an absolute path. I'm not sure if the later assumption is valid on all platforms. I wanted to at least try and add tests, but I'm happy to rework them or remove them if you don't think that's the way to go.\r\n\r\n(You can license/relicense my contribution in any way you wish without contacting me.)\n\nCo-authored-by: Toby Fleming <sourcecode@tobywf.com>", "tree": {"sha": "68a6c4959fa1b5a6f5c7e4f62f260f9639369349", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68a6c4959fa1b5a6f5c7e4f62f260f9639369349"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/314e2e75c09cc6115fc35fd94433b146eb3e325a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhB++uCRBK7hj4Ov3rIwAAVXoIAGlq58zpyBDr7p99c8t+76LQ\n696v+4y5LY45pgUSXecB2GYdDiPUtKhGX5730wNC2scToqPEmxjC0JlbKuBVNp8Q\nDt9H1phc0XDT8gdAVPgAGVJHpth2JOSRTQSo+mWhYh5s4YOq0VoLNcNU3ryqfAXP\nk4qimsdCB5wRiCX3KzHxqU+L2mZ2JMSbkxqpot4lzQaUfW/1T41t0nP7+ALIpeTC\naNm/X1O/IIGF1X4ODCxj4gCClCsduhLHeefXX4W7Up86TbIcXibRTZBt9MRiJA3d\nR7kqH+pWbjI5ygUIz99/94z/P1c4KNfTd0y0Hu3A+yEyxfiPnNEGSuuC4QnlXFw=\n=rr0r\n-----END PGP SIGNATURE-----\n", "payload": "tree 68a6c4959fa1b5a6f5c7e4f62f260f9639369349\nparent 0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b\nparent d0b98060d44a3cf2900f5d4504389825a9e2856e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1627910062 +0000\ncommitter GitHub <noreply@github.com> 1627910062 +0000\n\nMerge #9752\n\n9752: feature: Declare proc-macro dependent crates in `rust-project.json` r=matklad a=tobywf\n\nThis adds the `is_proc_macro` flag in `rust-project.json`. By default, this is `false` and not required, so existing projects won't break/have the same behavior as before this change. If the flag is true, a dependency to the `proc_macro` sysroot crate is added (if it exists), so that rust-analyzer can resolve those imports.\r\n\r\nThis fixes #9726 .\r\n\r\nI've also added some tests in the second commit. The first is a smoke test for a basic, minimal `rust-project.json` file. The second is a more targeted test for the flag. Both tests depend on the fake sysroot (a bunch of directories in the correct layout with empty `lib.rs` files), and also on `env!(\"CARGO_MANIFEST_DIR\")` being an absolute path. I'm not sure if the later assumption is valid on all platforms. I wanted to at least try and add tests, but I'm happy to rework them or remove them if you don't think that's the way to go.\r\n\r\n(You can license/relicense my contribution in any way you wish without contacting me.)\n\nCo-authored-by: Toby Fleming <sourcecode@tobywf.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/314e2e75c09cc6115fc35fd94433b146eb3e325a", "html_url": "https://github.com/rust-lang/rust/commit/314e2e75c09cc6115fc35fd94433b146eb3e325a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/314e2e75c09cc6115fc35fd94433b146eb3e325a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b", "html_url": "https://github.com/rust-lang/rust/commit/0d56ff2a02b5d490058f9ea2e6da8d9f44859c0b"}, {"sha": "d0b98060d44a3cf2900f5d4504389825a9e2856e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0b98060d44a3cf2900f5d4504389825a9e2856e", "html_url": "https://github.com/rust-lang/rust/commit/d0b98060d44a3cf2900f5d4504389825a9e2856e"}], "stats": {"total": 596, "additions": 569, "deletions": 27}, "files": [{"sha": "5db1aa1b4f32a5133261cf8adee293a7e4bdc1a5", "filename": "crates/project_model/src/project_json.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fproject_json.rs?ref=314e2e75c09cc6115fc35fd94433b146eb3e325a", "patch": "@@ -37,6 +37,7 @@ pub struct Crate {\n     pub(crate) is_workspace_member: bool,\n     pub(crate) include: Vec<AbsPathBuf>,\n     pub(crate) exclude: Vec<AbsPathBuf>,\n+    pub(crate) is_proc_macro: bool,\n }\n \n impl ProjectJson {\n@@ -96,6 +97,7 @@ impl ProjectJson {\n                         is_workspace_member,\n                         include,\n                         exclude,\n+                        is_proc_macro: crate_data.is_proc_macro,\n                     }\n                 })\n                 .collect::<Vec<_>>(),\n@@ -135,6 +137,8 @@ struct CrateData {\n     proc_macro_dylib_path: Option<PathBuf>,\n     is_workspace_member: Option<bool>,\n     source: Option<CrateSource>,\n+    #[serde(default)]\n+    is_proc_macro: bool,\n }\n \n #[derive(Deserialize, Debug, Clone)]"}, {"sha": "b50db6f3b859d676bcc73f9c4c28df1136feabda", "filename": "crates/project_model/src/tests.rs", "status": "modified", "additions": 526, "deletions": 25, "changes": 551, "blob_url": "https://github.com/rust-lang/rust/blob/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Ftests.rs?ref=314e2e75c09cc6115fc35fd94433b146eb3e325a", "patch": "@@ -1,12 +1,20 @@\n-use std::path::PathBuf;\n+use std::{\n+    ops::Deref,\n+    path::{Path, PathBuf},\n+};\n \n-use base_db::FileId;\n+use base_db::{CrateGraph, FileId};\n use expect_test::{expect, Expect};\n+use paths::AbsPath;\n+use serde::de::DeserializeOwned;\n \n-use crate::{CargoWorkspace, CfgOverrides, ProjectWorkspace, Sysroot, WorkspaceBuildScripts};\n+use crate::{\n+    CargoWorkspace, CfgOverrides, ProjectJson, ProjectJsonData, ProjectWorkspace, Sysroot,\n+    WorkspaceBuildScripts,\n+};\n \n-fn check(file: &str, expect: Expect) {\n-    let meta = get_test_metadata(file);\n+fn load_cargo(file: &str) -> CrateGraph {\n+    let meta = get_test_json_file(file);\n     let cargo_workspace = CargoWorkspace::new(meta);\n     let project_workspace = ProjectWorkspace::Cargo {\n         cargo: cargo_workspace,\n@@ -16,23 +24,21 @@ fn check(file: &str, expect: Expect) {\n         rustc_cfg: Vec::new(),\n         cfg_overrides: CfgOverrides::default(),\n     };\n+    to_crate_graph(project_workspace)\n+}\n \n-    let crate_graph = project_workspace.to_crate_graph(None, {\n-        let mut counter = 0;\n-        &mut move |_path| {\n-            counter += 1;\n-            Some(FileId(counter))\n-        }\n-    });\n-\n-    let mut crate_graph = format!(\"{:#?}\", crate_graph);\n-    replace_root(&mut crate_graph, false);\n-\n-    expect.assert_eq(&crate_graph);\n+fn load_rust_project(file: &str) -> CrateGraph {\n+    let data = get_test_json_file(file);\n+    let project = rooted_project_json(data);\n+    let sysroot = Some(get_fake_sysroot());\n+    let project_workspace = ProjectWorkspace::Json { project, sysroot, rustc_cfg: Vec::new() };\n+    to_crate_graph(project_workspace)\n }\n \n-fn get_test_metadata(file: &str) -> cargo_metadata::Metadata {\n-    let mut json = get_test_data(file).parse::<serde_json::Value>().unwrap();\n+fn get_test_json_file<T: DeserializeOwned>(file: &str) -> T {\n+    let file = get_test_path(file);\n+    let data = std::fs::read_to_string(file).unwrap();\n+    let mut json = data.parse::<serde_json::Value>().unwrap();\n     fixup_paths(&mut json);\n     return serde_json::from_value(json).unwrap();\n \n@@ -58,16 +64,46 @@ fn replace_root(s: &mut String, direction: bool) {\n     }\n }\n \n-fn get_test_data(file: &str) -> String {\n+fn get_test_path(file: &str) -> PathBuf {\n     let base = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n-    let file = base.join(\"test_data\").join(file);\n-    std::fs::read_to_string(file).unwrap()\n+    base.join(\"test_data\").join(file)\n+}\n+\n+fn get_fake_sysroot() -> Sysroot {\n+    let sysroot_path = get_test_path(\"fake-sysroot\");\n+    let sysroot_src_dir = AbsPath::assert(&sysroot_path);\n+    Sysroot::load(&sysroot_src_dir).unwrap()\n+}\n+\n+fn rooted_project_json(data: ProjectJsonData) -> ProjectJson {\n+    let mut root = \"$ROOT$\".to_string();\n+    replace_root(&mut root, true);\n+    let path = Path::new(&root);\n+    let base = AbsPath::assert(path);\n+    ProjectJson::new(base, data)\n+}\n+\n+fn to_crate_graph(project_workspace: ProjectWorkspace) -> CrateGraph {\n+    project_workspace.to_crate_graph(None, {\n+        let mut counter = 0;\n+        &mut move |_path| {\n+            counter += 1;\n+            Some(FileId(counter))\n+        }\n+    })\n+}\n+\n+fn check_crate_graph(crate_graph: CrateGraph, expect: Expect) {\n+    let mut crate_graph = format!(\"{:#?}\", crate_graph);\n+    replace_root(&mut crate_graph, false);\n+    expect.assert_eq(&crate_graph);\n }\n \n #[test]\n-fn hello_world_project_model() {\n-    check(\n-        \"hello-world-metadata.json\",\n+fn cargo_hello_world_project_model() {\n+    let crate_graph = load_cargo(\"hello-world-metadata.json\");\n+    check_crate_graph(\n+        crate_graph,\n         expect![[r#\"\n             CrateGraph {\n                 arena: {\n@@ -514,3 +550,468 @@ fn hello_world_project_model() {\n             }\"#]],\n     )\n }\n+\n+#[test]\n+fn rust_project_hello_world_project_model() {\n+    let crate_graph = load_rust_project(\"hello-world-project.json\");\n+    check_crate_graph(\n+        crate_graph,\n+        expect![[r#\"\n+            CrateGraph {\n+                arena: {\n+                    CrateId(\n+                        0,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            1,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"alloc\",\n+                                ),\n+                                canonical_name: \"alloc\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    1,\n+                                ),\n+                                name: CrateName(\n+                                    \"core\",\n+                                ),\n+                            },\n+                        ],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        10,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            11,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"unwind\",\n+                                ),\n+                                canonical_name: \"unwind\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        7,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            8,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"std_detect\",\n+                                ),\n+                                canonical_name: \"std_detect\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        4,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            5,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"proc_macro\",\n+                                ),\n+                                canonical_name: \"proc_macro\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    6,\n+                                ),\n+                                name: CrateName(\n+                                    \"std\",\n+                                ),\n+                            },\n+                        ],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        1,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            2,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"core\",\n+                                ),\n+                                canonical_name: \"core\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        11,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            12,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"hello_world\",\n+                                ),\n+                                canonical_name: \"hello_world\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    1,\n+                                ),\n+                                name: CrateName(\n+                                    \"core\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    0,\n+                                ),\n+                                name: CrateName(\n+                                    \"alloc\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    6,\n+                                ),\n+                                name: CrateName(\n+                                    \"std\",\n+                                ),\n+                            },\n+                        ],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        8,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            9,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"term\",\n+                                ),\n+                                canonical_name: \"term\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        5,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            6,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"profiler_builtins\",\n+                                ),\n+                                canonical_name: \"profiler_builtins\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        2,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            3,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"panic_abort\",\n+                                ),\n+                                canonical_name: \"panic_abort\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        9,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            10,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"test\",\n+                                ),\n+                                canonical_name: \"test\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        6,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            7,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"std\",\n+                                ),\n+                                canonical_name: \"std\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    0,\n+                                ),\n+                                name: CrateName(\n+                                    \"alloc\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    1,\n+                                ),\n+                                name: CrateName(\n+                                    \"core\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    2,\n+                                ),\n+                                name: CrateName(\n+                                    \"panic_abort\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    3,\n+                                ),\n+                                name: CrateName(\n+                                    \"panic_unwind\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    5,\n+                                ),\n+                                name: CrateName(\n+                                    \"profiler_builtins\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    7,\n+                                ),\n+                                name: CrateName(\n+                                    \"std_detect\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    8,\n+                                ),\n+                                name: CrateName(\n+                                    \"term\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    9,\n+                                ),\n+                                name: CrateName(\n+                                    \"test\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    10,\n+                                ),\n+                                name: CrateName(\n+                                    \"unwind\",\n+                                ),\n+                            },\n+                        ],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        3,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            4,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"panic_unwind\",\n+                                ),\n+                                canonical_name: \"panic_unwind\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [],\n+                        proc_macro: [],\n+                    },\n+                },\n+            }\"#]],\n+    );\n+}\n+\n+#[test]\n+fn rust_project_is_proc_macro_has_proc_macro_dep() {\n+    let crate_graph = load_rust_project(\"is-proc-macro-project.json\");\n+    // Since the project only defines one crate (outside the sysroot crates),\n+    // it should be the one with the biggest Id.\n+    let crate_id = crate_graph.iter().max().unwrap();\n+    let crate_data = &crate_graph[crate_id];\n+    // Assert that the project crate with `is_proc_macro` has a dependency\n+    // on the proc_macro sysroot crate.\n+    crate_data.dependencies.iter().find(|&dep| dep.name.deref() == \"proc_macro\").unwrap();\n+}"}, {"sha": "bfc0f144aac2060d9a940cd0aab2759d878331eb", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=314e2e75c09cc6115fc35fd94433b146eb3e325a", "patch": "@@ -446,10 +446,20 @@ fn project_json_to_crate_graph(\n \n     for (from, krate) in project.crates() {\n         if let Some(&from) = crates.get(&from) {\n-            if let Some((public_deps, _proc_macro)) = &sysroot_deps {\n+            if let Some((public_deps, libproc_macro)) = &sysroot_deps {\n                 for (name, to) in public_deps.iter() {\n                     add_dep(&mut crate_graph, from, name.clone(), *to)\n                 }\n+                if krate.is_proc_macro {\n+                    if let Some(proc_macro) = libproc_macro {\n+                        add_dep(\n+                            &mut crate_graph,\n+                            from,\n+                            CrateName::new(\"proc_macro\").unwrap(),\n+                            *proc_macro,\n+                        );\n+                    }\n+                }\n             }\n \n             for dep in &krate.deps {"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/alloc/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Falloc%2Fsrc%2Flib.rs?ref=314e2e75c09cc6115fc35fd94433b146eb3e325a"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/core/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fcore%2Fsrc%2Flib.rs?ref=314e2e75c09cc6115fc35fd94433b146eb3e325a"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/panic_abort/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fpanic_abort%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fpanic_abort%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fpanic_abort%2Fsrc%2Flib.rs?ref=314e2e75c09cc6115fc35fd94433b146eb3e325a"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/panic_unwind/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=314e2e75c09cc6115fc35fd94433b146eb3e325a"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/proc_macro/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fproc_macro%2Fsrc%2Flib.rs?ref=314e2e75c09cc6115fc35fd94433b146eb3e325a"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/profiler_builtins/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fprofiler_builtins%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fprofiler_builtins%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fprofiler_builtins%2Fsrc%2Flib.rs?ref=314e2e75c09cc6115fc35fd94433b146eb3e325a"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/std/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fstd%2Fsrc%2Flib.rs?ref=314e2e75c09cc6115fc35fd94433b146eb3e325a"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/stdarch/crates/std_detect/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fstdarch%2Fcrates%2Fstd_detect%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fstdarch%2Fcrates%2Fstd_detect%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fstdarch%2Fcrates%2Fstd_detect%2Fsrc%2Flib.rs?ref=314e2e75c09cc6115fc35fd94433b146eb3e325a"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/term/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fterm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fterm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fterm%2Fsrc%2Flib.rs?ref=314e2e75c09cc6115fc35fd94433b146eb3e325a"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/test/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Ftest%2Fsrc%2Flib.rs?ref=314e2e75c09cc6115fc35fd94433b146eb3e325a"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/unwind/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Funwind%2Fsrc%2Flib.rs?ref=314e2e75c09cc6115fc35fd94433b146eb3e325a"}, {"sha": "b27ab1f42b57705b18701a8a8ed81c6c848d2f69", "filename": "crates/project_model/test_data/hello-world-project.json", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Fhello-world-project.json", "raw_url": "https://github.com/rust-lang/rust/raw/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Fhello-world-project.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Fhello-world-project.json?ref=314e2e75c09cc6115fc35fd94433b146eb3e325a", "patch": "@@ -0,0 +1,12 @@\n+{\n+    \"sysroot_src\": null,\n+    \"crates\": [\n+        {\n+            \"display_name\": \"hello_world\",\n+            \"root_module\": \"$ROOT$src/lib.rs\",\n+            \"edition\": \"2018\",\n+            \"deps\": [],\n+            \"is_workspace_member\": true\n+        }\n+    ]\n+}"}, {"sha": "5d500a4729f5713527da74cbc43671e609f9fa3c", "filename": "crates/project_model/test_data/is-proc-macro-project.json", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Fis-proc-macro-project.json", "raw_url": "https://github.com/rust-lang/rust/raw/314e2e75c09cc6115fc35fd94433b146eb3e325a/crates%2Fproject_model%2Ftest_data%2Fis-proc-macro-project.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Fis-proc-macro-project.json?ref=314e2e75c09cc6115fc35fd94433b146eb3e325a", "patch": "@@ -0,0 +1,13 @@\n+{\n+    \"sysroot_src\": null,\n+    \"crates\": [\n+        {\n+            \"display_name\": \"is_proc_macro\",\n+            \"root_module\": \"$ROOT$src/lib.rs\",\n+            \"edition\": \"2018\",\n+            \"deps\": [],\n+            \"is_workspace_member\": true,\n+            \"is_proc_macro\": true\n+        }\n+    ]\n+}"}, {"sha": "6f00da3178a0766e314f1147ea1dccec7ea6ea76", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/314e2e75c09cc6115fc35fd94433b146eb3e325a/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/314e2e75c09cc6115fc35fd94433b146eb3e325a/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=314e2e75c09cc6115fc35fd94433b146eb3e325a", "patch": "@@ -578,6 +578,8 @@ interface Crate {\n     /// the `env!` macro\n     env: : { [key: string]: string; },\n \n+    /// Whether the crate is a proc-macro crate.\n+    is_proc_macro: bool;\n     /// For proc-macro crates, path to compiled\n     /// proc-macro (.so file).\n     proc_macro_dylib_path?: string;\n@@ -597,7 +599,7 @@ Specifically, the `roots` setup will be different eventually.\n \n There are three ways to feed `rust-project.json` to rust-analyzer:\n \n-* Place `rust-project.json` file at the root of the project, and rust-anlayzer will discover it.\n+* Place `rust-project.json` file at the root of the project, and rust-analyzer will discover it.\n * Specify `\"rust-analyzer.linkedProjects\": [ \"path/to/rust-project.json\" ]` in the settings (and make sure that your LSP client sends settings as a part of initialize request).\n * Specify `\"rust-analyzer.linkedProjects\": [ { \"roots\": [...], \"crates\": [...] }]` inline.\n "}]}