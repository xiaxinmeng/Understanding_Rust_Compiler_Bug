{"sha": "964ff83cbccee1544d95d8197ea239ba5da1d23d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NGZmODNjYmNjZWUxNTQ0ZDk1ZDgxOTdlYTIzOWJhNWRhMWQyM2Q=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-02T04:54:03Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T14:34:05Z"}, "message": "rustc_trans: fix fallout", "tree": {"sha": "277368fc3d1c84dd2adcbd9547a4dbd9012fd7cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/277368fc3d1c84dd2adcbd9547a4dbd9012fd7cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/964ff83cbccee1544d95d8197ea239ba5da1d23d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/964ff83cbccee1544d95d8197ea239ba5da1d23d", "html_url": "https://github.com/rust-lang/rust/commit/964ff83cbccee1544d95d8197ea239ba5da1d23d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/964ff83cbccee1544d95d8197ea239ba5da1d23d/comments", "author": null, "committer": null, "parents": [{"sha": "274146d650e9c5ef476cb31bbc47e555ed4d359b", "url": "https://api.github.com/repos/rust-lang/rust/commits/274146d650e9c5ef476cb31bbc47e555ed4d359b", "html_url": "https://github.com/rust-lang/rust/commit/274146d650e9c5ef476cb31bbc47e555ed4d359b"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "c3c97616ea83848e284df523b0ca9b15c108a052", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/964ff83cbccee1544d95d8197ea239ba5da1d23d/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/964ff83cbccee1544d95d8197ea239ba5da1d23d/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=964ff83cbccee1544d95d8197ea239ba5da1d23d", "patch": "@@ -266,7 +266,7 @@ pub fn sanitize(s: &str) -> String {\n     return result;\n }\n \n-pub fn mangle<PI: Iterator<PathElem>>(mut path: PI,\n+pub fn mangle<PI: Iterator<Item=PathElem>>(mut path: PI,\n                                       hash: Option<&str>) -> String {\n     // Follow C++ namespace-mangling style, see\n     // http://en.wikipedia.org/wiki/Name_mangling for more info."}, {"sha": "9dbff66aba2864518a24e484751ef50e796a68f9", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/964ff83cbccee1544d95d8197ea239ba5da1d23d/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/964ff83cbccee1544d95d8197ea239ba5da1d23d/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=964ff83cbccee1544d95d8197ea239ba5da1d23d", "patch": "@@ -28,6 +28,7 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(unboxed_closures)]\n #![feature(old_orphan_check)]\n+#![feature(associated_types)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "d1cb22dce38f7fc0615fcc31f8372883122fd8a5", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/964ff83cbccee1544d95d8197ea239ba5da1d23d/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/964ff83cbccee1544d95d8197ea239ba5da1d23d/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=964ff83cbccee1544d95d8197ea239ba5da1d23d", "patch": "@@ -3070,7 +3070,9 @@ fn internalize_symbols(cx: &SharedCrateContext, reachable: &HashSet<String>) {\n         step: unsafe extern \"C\" fn(ValueRef) -> ValueRef,\n     }\n \n-    impl Iterator<ValueRef> for ValueIter {\n+    impl Iterator for ValueIter {\n+        type Item = ValueRef;\n+\n         fn next(&mut self) -> Option<ValueRef> {\n             let old = self.cur;\n             if !old.is_null() {"}, {"sha": "67aecde66189198b6fe4bc0eab0d4f88d0f1bef2", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/964ff83cbccee1544d95d8197ea239ba5da1d23d/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/964ff83cbccee1544d95d8197ea239ba5da1d23d/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=964ff83cbccee1544d95d8197ea239ba5da1d23d", "patch": "@@ -168,7 +168,9 @@ pub struct CrateContextIterator<'a, 'tcx: 'a> {\n     index: uint,\n }\n \n-impl<'a, 'tcx> Iterator<CrateContext<'a, 'tcx>> for CrateContextIterator<'a,'tcx> {\n+impl<'a, 'tcx> Iterator for CrateContextIterator<'a,'tcx> {\n+    type Item = CrateContext<'a, 'tcx>;\n+\n     fn next(&mut self) -> Option<CrateContext<'a, 'tcx>> {\n         if self.index >= self.shared.local_ccxs.len() {\n             return None;\n@@ -193,7 +195,9 @@ pub struct CrateContextMaybeIterator<'a, 'tcx: 'a> {\n     origin: uint,\n }\n \n-impl<'a, 'tcx> Iterator<(CrateContext<'a, 'tcx>, bool)> for CrateContextMaybeIterator<'a, 'tcx> {\n+impl<'a, 'tcx> Iterator for CrateContextMaybeIterator<'a, 'tcx> {\n+    type Item = (CrateContext<'a, 'tcx>, bool);\n+\n     fn next(&mut self) -> Option<(CrateContext<'a, 'tcx>, bool)> {\n         if self.index >= self.shared.local_ccxs.len() {\n             return None;"}, {"sha": "f0588b3082ab6fe3a774edcfc2c8b22db3c9ce03", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/964ff83cbccee1544d95d8197ea239ba5da1d23d/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/964ff83cbccee1544d95d8197ea239ba5da1d23d/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=964ff83cbccee1544d95d8197ea239ba5da1d23d", "patch": "@@ -727,7 +727,7 @@ pub fn get_vtable<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n }\n \n /// Helper function to declare and initialize the vtable.\n-pub fn make_vtable<I: Iterator<ValueRef>>(ccx: &CrateContext,\n+pub fn make_vtable<I: Iterator<Item=ValueRef>>(ccx: &CrateContext,\n                                           drop_glue: ValueRef,\n                                           size: ValueRef,\n                                           align: ValueRef,"}, {"sha": "028e2154303e23db409a03e10eb84ff9ee9859a6", "filename": "src/librustc_trans/trans/value.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/964ff83cbccee1544d95d8197ea239ba5da1d23d/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/964ff83cbccee1544d95d8197ea239ba5da1d23d/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs?ref=964ff83cbccee1544d95d8197ea239ba5da1d23d", "patch": "@@ -155,7 +155,9 @@ pub struct Users {\n     next: Option<Use>\n }\n \n-impl Iterator<Value> for Users {\n+impl Iterator for Users {\n+    type Item = Value;\n+\n     fn next(&mut self) -> Option<Value> {\n         let current = self.next;\n "}]}