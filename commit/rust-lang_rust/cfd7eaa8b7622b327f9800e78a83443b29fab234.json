{"sha": "cfd7eaa8b7622b327f9800e78a83443b29fab234", "node_id": "C_kwDOAAsO6NoAKGNmZDdlYWE4Yjc2MjJiMzI3Zjk4MDBlNzhhODM0NDNiMjlmYWIyMzQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-03T17:47:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-03T17:47:26Z"}, "message": "Auto merge of #2871 - RalfJung:rustup, r=RalfJung\n\nRustup", "tree": {"sha": "adb70c43e932580a9fd864be9fb8d6fdd010bdcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adb70c43e932580a9fd864be9fb8d6fdd010bdcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfd7eaa8b7622b327f9800e78a83443b29fab234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfd7eaa8b7622b327f9800e78a83443b29fab234", "html_url": "https://github.com/rust-lang/rust/commit/cfd7eaa8b7622b327f9800e78a83443b29fab234", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfd7eaa8b7622b327f9800e78a83443b29fab234/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "url": "https://api.github.com/repos/rust-lang/rust/commits/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "html_url": "https://github.com/rust-lang/rust/commit/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583"}, {"sha": "3951a027cd1d74555426daf0c065b745ba60dd0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3951a027cd1d74555426daf0c065b745ba60dd0b", "html_url": "https://github.com/rust-lang/rust/commit/3951a027cd1d74555426daf0c065b745ba60dd0b"}], "stats": {"total": 17222, "additions": 4079, "deletions": 13143}, "files": [{"sha": "dcdaa06caa2064ede2874038a4587b745fe63745", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -260,13 +260,13 @@ jobs:\n             os: ubuntu-20.04-8core-32gb\n             env: {}\n           - name: i686-gnu\n-            os: ubuntu-20.04-16core-64gb\n+            os: ubuntu-20.04-8core-32gb\n             env: {}\n           - name: i686-gnu-nopt\n-            os: ubuntu-20.04-16core-64gb\n+            os: ubuntu-20.04-8core-32gb\n             env: {}\n           - name: mingw-check\n-            os: ubuntu-20.04-8core-32gb\n+            os: ubuntu-20.04-4core-16gb\n             env: {}\n           - name: test-various\n             os: ubuntu-20.04-8core-32gb\n@@ -275,16 +275,16 @@ jobs:\n             os: ubuntu-20.04-8core-32gb\n             env: {}\n           - name: x86_64-gnu\n-            os: ubuntu-20.04-8core-32gb\n+            os: ubuntu-20.04-4core-16gb\n             env: {}\n           - name: x86_64-gnu-stable\n             env:\n               IMAGE: x86_64-gnu\n               RUST_CI_OVERRIDE_RELEASE_CHANNEL: stable\n               CI_ONLY_WHEN_CHANNEL: nightly\n-            os: ubuntu-20.04-8core-32gb\n+            os: ubuntu-20.04-4core-16gb\n           - name: x86_64-gnu-aux\n-            os: ubuntu-20.04-8core-32gb\n+            os: ubuntu-20.04-4core-16gb\n             env: {}\n           - name: x86_64-gnu-debug\n             os: ubuntu-20.04-8core-32gb\n@@ -309,7 +309,7 @@ jobs:\n               RUST_BACKTRACE: 1\n             os: ubuntu-20.04-8core-32gb\n           - name: x86_64-gnu-nopt\n-            os: ubuntu-20.04-8core-32gb\n+            os: ubuntu-20.04-4core-16gb\n             env: {}\n           - name: x86_64-gnu-tools\n             env:"}, {"sha": "c7a91ef71166d4e0b5f247c14466bde6229b0550", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -4090,6 +4090,7 @@ dependencies = [\n name = \"rustc_smir\"\n version = \"0.0.0\"\n dependencies = [\n+ \"rustc_hir\",\n  \"rustc_middle\",\n  \"rustc_span\",\n  \"tracing\","}, {"sha": "dce7106d1280462460ac30686e01eeae4f8f0735", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1589,7 +1589,6 @@ pub enum ClosureBinder {\n pub struct MacCall {\n     pub path: Path,\n     pub args: P<DelimArgs>,\n-    pub prior_type_ascription: Option<(Span, bool)>,\n }\n \n impl MacCall {"}, {"sha": "66b94d12a32c6c11933eaf9e209a298694f187a2", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -631,7 +631,7 @@ pub fn noop_visit_attribute<T: MutVisitor>(attr: &mut Attribute, vis: &mut T) {\n }\n \n pub fn noop_visit_mac<T: MutVisitor>(mac: &mut MacCall, vis: &mut T) {\n-    let MacCall { path, args, prior_type_ascription: _ } = mac;\n+    let MacCall { path, args } = mac;\n     vis.visit_path(path);\n     visit_delim_args(args, vis);\n }"}, {"sha": "35afd5423721d980a2c57f438cefcd745f512040", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -53,8 +53,6 @@ pub enum AssocOp {\n     DotDot,\n     /// `..=` range\n     DotDotEq,\n-    /// `:`\n-    Colon,\n }\n \n #[derive(PartialEq, Debug)]\n@@ -96,7 +94,6 @@ impl AssocOp {\n             token::DotDotEq => Some(DotDotEq),\n             // DotDotDot is no longer supported, but we need some way to display the error\n             token::DotDotDot => Some(DotDotEq),\n-            token::Colon => Some(Colon),\n             // `<-` should probably be `< -`\n             token::LArrow => Some(Less),\n             _ if t.is_keyword(kw::As) => Some(As),\n@@ -133,7 +130,7 @@ impl AssocOp {\n     pub fn precedence(&self) -> usize {\n         use AssocOp::*;\n         match *self {\n-            As | Colon => 14,\n+            As => 14,\n             Multiply | Divide | Modulus => 13,\n             Add | Subtract => 12,\n             ShiftLeft | ShiftRight => 11,\n@@ -156,7 +153,7 @@ impl AssocOp {\n             Assign | AssignOp(_) => Fixity::Right,\n             As | Multiply | Divide | Modulus | Add | Subtract | ShiftLeft | ShiftRight | BitAnd\n             | BitXor | BitOr | Less | Greater | LessEqual | GreaterEqual | Equal | NotEqual\n-            | LAnd | LOr | Colon => Fixity::Left,\n+            | LAnd | LOr => Fixity::Left,\n             DotDot | DotDotEq => Fixity::None,\n         }\n     }\n@@ -166,8 +163,9 @@ impl AssocOp {\n         match *self {\n             Less | Greater | LessEqual | GreaterEqual | Equal | NotEqual => true,\n             Assign | AssignOp(_) | As | Multiply | Divide | Modulus | Add | Subtract\n-            | ShiftLeft | ShiftRight | BitAnd | BitXor | BitOr | LAnd | LOr | DotDot | DotDotEq\n-            | Colon => false,\n+            | ShiftLeft | ShiftRight | BitAnd | BitXor | BitOr | LAnd | LOr | DotDot | DotDotEq => {\n+                false\n+            }\n         }\n     }\n \n@@ -177,7 +175,7 @@ impl AssocOp {\n             Assign | AssignOp(_) => true,\n             Less | Greater | LessEqual | GreaterEqual | Equal | NotEqual | As | Multiply\n             | Divide | Modulus | Add | Subtract | ShiftLeft | ShiftRight | BitAnd | BitXor\n-            | BitOr | LAnd | LOr | DotDot | DotDotEq | Colon => false,\n+            | BitOr | LAnd | LOr | DotDot | DotDotEq => false,\n         }\n     }\n \n@@ -202,7 +200,7 @@ impl AssocOp {\n             BitOr => Some(BinOpKind::BitOr),\n             LAnd => Some(BinOpKind::And),\n             LOr => Some(BinOpKind::Or),\n-            Assign | AssignOp(_) | As | DotDot | DotDotEq | Colon => None,\n+            Assign | AssignOp(_) | As | DotDot | DotDotEq => None,\n         }\n     }\n \n@@ -223,10 +221,9 @@ impl AssocOp {\n             Greater | // `{ 42 } > 3`\n             GreaterEqual | // `{ 42 } >= 3`\n             AssignOp(_) | // `{ 42 } +=`\n-            As | // `{ 42 } as usize`\n             // Equal | // `{ 42 } == { 42 }`    Accepting these here would regress incorrect\n-            // NotEqual | // `{ 42 } != { 42 }` struct literals parser recovery.\n-            Colon, // `{ 42 }: usize`\n+            // NotEqual | // `{ 42 } != { 42 }  struct literals parser recovery.\n+            As // `{ 42 } as usize`\n         )\n     }\n }\n@@ -254,7 +251,6 @@ pub enum ExprPrecedence {\n     Binary(BinOpKind),\n \n     Cast,\n-    Type,\n \n     Assign,\n     AssignOp,\n@@ -313,7 +309,6 @@ impl ExprPrecedence {\n             // Binop-like expr kinds, handled by `AssocOp`.\n             ExprPrecedence::Binary(op) => AssocOp::from_ast_binop(op).precedence() as i8,\n             ExprPrecedence::Cast => AssocOp::As.precedence() as i8,\n-            ExprPrecedence::Type => AssocOp::Colon.precedence() as i8,\n \n             ExprPrecedence::Assign |\n             ExprPrecedence::AssignOp => AssocOp::Assign.precedence() as i8,"}, {"sha": "441282c05b42466848cc991a142f43e5378b3fe5", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -136,7 +136,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         self.diagnostic().span_bug(\n             p.span,\n-            &format!(\n+            format!(\n                 \"lower_qpath: no final extension segment in {}..{}\",\n                 proj_start,\n                 p.segments.len()"}, {"sha": "ee3ded311c557cc2a067776eb4c3412d71772521", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -83,7 +83,7 @@ impl<'a> PostExpansionVisitor<'a> {\n                     &self,\n                     const_extern_fn,\n                     span,\n-                    &format!(\"`{}` as a `const fn` ABI is unstable\", abi)\n+                    format!(\"`{}` as a `const fn` ABI is unstable\", abi)\n                 ),\n             }\n         }\n@@ -104,7 +104,7 @@ impl<'a> PostExpansionVisitor<'a> {\n                 if self.sess.opts.pretty.map_or(true, |ppm| ppm.needs_hir()) {\n                     self.sess.parse_sess.span_diagnostic.delay_span_bug(\n                         span,\n-                        &format!(\n+                        format!(\n                             \"unrecognized ABI not caught in lowering: {}\",\n                             symbol_unescaped.as_str()\n                         ),"}, {"sha": "b74c59bca30c5022c90d8ca148c0d75f66b4a259", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -341,10 +341,16 @@ impl<'a> State<'a> {\n                 self.print_type(ty);\n             }\n             ast::ExprKind::Type(expr, ty) => {\n-                let prec = AssocOp::Colon.precedence() as i8;\n-                self.print_expr_maybe_paren(expr, prec);\n-                self.word_space(\":\");\n+                self.word(\"type_ascribe!(\");\n+                self.ibox(0);\n+                self.print_expr(expr);\n+\n+                self.word(\",\");\n+                self.space_if_not_bol();\n                 self.print_type(ty);\n+\n+                self.end();\n+                self.word(\")\");\n             }\n             ast::ExprKind::Let(pat, scrutinee, _) => {\n                 self.print_let(pat, scrutinee);"}, {"sha": "d2d3792345f1cccd18ee18bc7ec7ec76a70de1d9", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -623,7 +623,7 @@ fn gate_cfg(gated_cfg: &GatedCfg, cfg_span: Span, sess: &ParseSess, features: &F\n     let (cfg, feature, has_feature) = gated_cfg;\n     if !has_feature(features) && !cfg_span.allows_unstable(*feature) {\n         let explain = format!(\"`cfg({cfg})` is experimental and subject to change\");\n-        feature_err(sess, *feature, cfg_span, &explain).emit();\n+        feature_err(sess, *feature, cfg_span, explain).emit();\n     }\n }\n "}, {"sha": "04b8174079acc5360d3157d82a1a0b699bbd2b40", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -158,7 +158,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             } else if reinits > 1 {\n                 err.span_note(\n                     MultiSpan::from_spans(reinit_spans),\n-                    &if reinits <= 3 {\n+                    if reinits <= 3 {\n                         format!(\"these {reinits} reinitializations might get skipped\")\n                     } else {\n                         format!(\n@@ -253,7 +253,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     // We have a `&mut` ref, we need to reborrow on each iteration (#62112).\n                     err.span_suggestion_verbose(\n                         span.shrink_to_lo(),\n-                        &format!(\n+                        format!(\n                             \"consider creating a fresh reborrow of {} here\",\n                             self.describe_place(moved_place)\n                                 .map(|n| format!(\"`{n}`\"))\n@@ -304,7 +304,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 ..\n             } = use_spans\n             {\n-                err.note(&format!(\n+                err.note(format!(\n                     \"{} occurs due to deref coercion to `{deref_target_ty}`\",\n                     desired_action.as_noun(),\n                 ));\n@@ -586,7 +586,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 //     _ => {} // We don't want to point to this.\n                 // };\n                 // ```\n-                err.span_label(sp, &label);\n+                err.span_label(sp, label);\n                 shown = true;\n             }\n         }\n@@ -1139,7 +1139,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         }\n \n         if union_type_name != \"\" {\n-            err.note(&format!(\n+            err.note(format!(\n                 \"{} is a field of the union `{}`, so it overlaps the field {}\",\n                 msg_place, union_type_name, msg_borrow,\n             ));\n@@ -1238,14 +1238,14 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         }\n         err.span_help(\n             inner_call_span,\n-            &format!(\n+            format!(\n                 \"try adding a local storing this{}...\",\n                 if use_span.is_some() { \"\" } else { \" argument\" }\n             ),\n         );\n         err.span_help(\n             outer_call_span,\n-            &format!(\n+            format!(\n                 \"...and then using that local {}\",\n                 if use_span.is_some() { \"here\" } else { \"as the argument to this call\" }\n             ),\n@@ -2281,7 +2281,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         );\n         err.span_suggestion_verbose(\n             sugg_span,\n-            &format!(\n+            format!(\n                 \"to force the {} to take ownership of {} (and any \\\n                  other referenced variables), use the `move` keyword\",\n                 kind, captured_var\n@@ -2293,7 +2293,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         match category {\n             ConstraintCategory::Return(_) | ConstraintCategory::OpaqueType => {\n                 let msg = format!(\"{} is returned here\", kind);\n-                err.span_note(constraint_span, &msg);\n+                err.span_note(constraint_span, msg);\n             }\n             ConstraintCategory::CallArgument(_) => {\n                 fr_name.highlight_region_name(&mut err);\n@@ -2304,7 +2304,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     );\n                 } else {\n                     let msg = format!(\"{scope} requires argument type to outlive `{fr_name}`\");\n-                    err.span_note(constraint_span, &msg);\n+                    err.span_note(constraint_span, msg);\n                 }\n             }\n             _ => bug!(\n@@ -2626,7 +2626,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     });\n                 if let Some(Ok(instance)) = deref_target {\n                     let deref_target_ty = instance.ty(tcx, self.param_env);\n-                    err.note(&format!(\n+                    err.note(format!(\n                         \"borrow occurs due to deref coercion to `{}`\",\n                         deref_target_ty\n                     ));\n@@ -3180,7 +3180,7 @@ impl<'tcx> AnnotatedBorrowFnSignature<'tcx> {\n \n                 diag.span_label(*return_span, format!(\"also has lifetime `{}`\", region_name,));\n \n-                diag.help(&format!(\n+                diag.help(format!(\n                     \"use data from the highlighted arguments which match the `{}` lifetime of \\\n                      the return type\",\n                     region_name,"}, {"sha": "d0cb1126f38bbf2b92ff4ec1aa4214da1acfdb94", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -90,7 +90,7 @@ impl<'tcx> BorrowExplanation<'tcx> {\n                     {\n                         err.span_label(\n                             pat.span,\n-                            &format!(\"binding `{ident}` declared here\"),\n+                            format!(\"binding `{ident}` declared here\"),\n                         );\n                     }\n                 }\n@@ -323,7 +323,7 @@ impl<'tcx> BorrowExplanation<'tcx> {\n \n             err.span_suggestion_verbose(\n                 span.shrink_to_hi(),\n-                &msg,\n+                msg,\n                 format!(\" + {suggestable_name}\"),\n                 Applicability::Unspecified,\n             );"}, {"sha": "a2334cc7249c94f650c4972fbfcb6a6cc9422d94", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1073,7 +1073,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             if !is_loop_move {\n                                 err.span_suggestion_verbose(\n                                     move_span.shrink_to_lo(),\n-                                    &format!(\n+                                    format!(\n                                         \"consider creating a fresh reborrow of {} here\",\n                                         self.describe_place(moved_place.as_ref())\n                                             .map(|n| format!(\"`{n}`\"))"}, {"sha": "8b77477a31a337bc0c6310531055ae5d0bbe8cd8", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -533,7 +533,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         suggestions.sort_unstable_by_key(|&(span, _, _)| span);\n         suggestions.dedup_by_key(|&mut (span, _, _)| span);\n         for (span, msg, suggestion) in suggestions {\n-            err.span_suggestion_verbose(span, &msg, suggestion, Applicability::MachineApplicable);\n+            err.span_suggestion_verbose(span, msg, suggestion, Applicability::MachineApplicable);\n         }\n     }\n "}, {"sha": "7558247948fe484dfdbe6bc544056c864bb9826f", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -573,7 +573,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                 if !is_trait_sig {\n                                     err.span_suggestion_verbose(\n                                         err_help_span,\n-                                        &format!(\n+                                        format!(\n                                             \"consider changing this to be a mutable {pointer_desc}\"\n                                         ),\n                                         suggested_code,\n@@ -582,7 +582,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                 } else if let Some(x) = local_trait {\n                                     err.span_suggestion_verbose(\n                                         x,\n-                                        &format!(\n+                                        format!(\n                                             \"consider changing that to be a mutable {pointer_desc}\"\n                                         ),\n                                         suggested_code,\n@@ -636,14 +636,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                     };\n                                     err.span_suggestion_verbose(\n                                         span,\n-                                        &format!(\"consider {changing} this binding's type\"),\n+                                        format!(\"consider {changing} this binding's type\"),\n                                         sugg,\n                                         Applicability::HasPlaceholders,\n                                     );\n                                 } else {\n                                     err.span_label(\n                                         err_label_span,\n-                                        &format!(\n+                                        format!(\n                                             \"consider changing this binding's type to be: `{message}`\"\n                                         ),\n                                     );\n@@ -679,13 +679,13 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 match opt_source {\n                     Some(BorrowedContentSource::OverloadedDeref(ty)) => {\n-                        err.help(&format!(\n+                        err.help(format!(\n                             \"trait `DerefMut` is required to modify through a dereference, \\\n                              but it is not implemented for `{ty}`\",\n                         ));\n                     }\n                     Some(BorrowedContentSource::OverloadedIndex(ty)) => {\n-                        err.help(&format!(\n+                        err.help(format!(\n                             \"trait `IndexMut` is required to modify indexed content, \\\n                              but it is not implemented for `{ty}`\",\n                         ));\n@@ -736,7 +736,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         // val[index] = rv;\n                         // ---------- place\n                         self.err.multipart_suggestions(\n-                            &format!(\n+                            format!(\n                                 \"to modify a `{}`, use `.get_mut()`, `.insert()` or the entry API\",\n                                 self.ty,\n                             ),\n@@ -788,7 +788,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     {\n                         // val[index].path(args..);\n                         self.err.multipart_suggestion(\n-                            &format!(\"to modify a `{}` use `.get_mut()`\", self.ty),\n+                            format!(\"to modify a `{}` use `.get_mut()`\", self.ty),\n                             vec![\n                                 (\n                                     val.span.shrink_to_hi().with_hi(index.span.lo()),\n@@ -822,7 +822,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             let mut v = V { assign_span, err, ty, suggested: false };\n             v.visit_body(body);\n             if !v.suggested {\n-                err.help(&format!(\n+                err.help(format!(\n                     \"to modify a `{ty}`, use `.get_mut()`, `.insert()` or the entry API\",\n                 ));\n             }"}, {"sha": "ffba60581861d51c74601670975de77e93c48492", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -171,7 +171,7 @@ impl OutlivesSuggestionBuilder {\n         if let (Some(fr_name), Some(outlived_fr_name)) = (fr_name, outlived_fr_name)\n             && !matches!(outlived_fr_name.source, RegionNameSource::Static)\n         {\n-            diag.help(&format!(\n+            diag.help(format!(\n                 \"consider adding the following bound: `{fr_name}: {outlived_fr_name}`\",\n             ));\n         }\n@@ -207,7 +207,7 @@ impl OutlivesSuggestionBuilder {\n         // If there is exactly one suggestable constraints, then just suggest it. Otherwise, emit a\n         // list of diagnostics.\n         let mut diag = if suggested.len() == 1 {\n-            mbcx.infcx.tcx.sess.diagnostic().struct_help(&match suggested.last().unwrap() {\n+            mbcx.infcx.tcx.sess.diagnostic().struct_help(match suggested.last().unwrap() {\n                 SuggestedConstraint::Outlives(a, bs) => {\n                     let bs: SmallVec<[String; 2]> = bs.iter().map(|r| r.to_string()).collect();\n                     format!(\"add bound `{a}: {}`\", bs.join(\" + \"))\n@@ -232,15 +232,15 @@ impl OutlivesSuggestionBuilder {\n                 match constraint {\n                     SuggestedConstraint::Outlives(a, bs) => {\n                         let bs: SmallVec<[String; 2]> = bs.iter().map(|r| r.to_string()).collect();\n-                        diag.help(&format!(\"add bound `{a}: {}`\", bs.join(\" + \")));\n+                        diag.help(format!(\"add bound `{a}: {}`\", bs.join(\" + \")));\n                     }\n                     SuggestedConstraint::Equal(a, b) => {\n-                        diag.help(&format!(\n+                        diag.help(format!(\n                             \"`{a}` and `{b}` must be the same: replace one with the other\",\n                         ));\n                     }\n                     SuggestedConstraint::Static(a) => {\n-                        diag.help(&format!(\"replace `{a}` with `'static`\"));\n+                        diag.help(format!(\"replace `{a}` with `'static`\"));\n                     }\n                 }\n             }"}, {"sha": "37cf3f303126e9cca4ec5ae8944898226eecc234", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -533,8 +533,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     }\n                     _ => panic!(\"Unexpected type {ty:?}\"),\n                 };\n-                diag.note(&format!(\"requirement occurs because of {desc}\",));\n-                diag.note(&note);\n+                diag.note(format!(\"requirement occurs because of {desc}\",));\n+                diag.note(note);\n                 diag.help(\"see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\");\n             }\n         }\n@@ -863,7 +863,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             }\n             spans_suggs.push((alias_span.shrink_to_hi(), \"<'a>\".to_string()));\n             diag.multipart_suggestion_verbose(\n-                &format!(\n+                format!(\n                     \"to declare that the trait object {captures}, you can add a lifetime parameter `'a` in the type alias\"\n                 ),\n                 spans_suggs,"}, {"sha": "f38e1605fa5caeff69bde95b388e9ece6bd0af1e", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -622,7 +622,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                     // programs, so we need to use delay_span_bug here. See #82126.\n                     self.infcx.tcx.sess.delay_span_bug(\n                         hir_arg.span(),\n-                        &format!(\"unmatched subst and hir arg: found {kind:?} vs {hir_arg:?}\"),\n+                        format!(\"unmatched subst and hir arg: found {kind:?} vs {hir_arg:?}\"),\n                     );\n                 }\n             }"}, {"sha": "863c92acdf4dc7aa48b9fe6378b5581c9d7d7c63", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -138,7 +138,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             TerminatorKind::Assert { cond, expected: _, msg, target: _, unwind: _ } => {\n                 self.consume_operand(location, cond);\n                 use rustc_middle::mir::AssertKind;\n-                if let AssertKind::BoundsCheck { len, index } = msg {\n+                if let AssertKind::BoundsCheck { len, index } = &**msg {\n                     self.consume_operand(location, len);\n                     self.consume_operand(location, index);\n                 }"}, {"sha": "c4c54620e04e9f7b99f20395cea6a7f989197f97", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -738,7 +738,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n             TerminatorKind::Assert { cond, expected: _, msg, target: _, unwind: _ } => {\n                 self.consume_operand(loc, (cond, span), flow_state);\n                 use rustc_middle::mir::AssertKind;\n-                if let AssertKind::BoundsCheck { len, index } = msg {\n+                if let AssertKind::BoundsCheck { len, index } = &**msg {\n                     self.consume_operand(loc, (len, span), flow_state);\n                     self.consume_operand(loc, (index, span), flow_state);\n                 }\n@@ -2022,7 +2022,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     // been emitted (#52262).\n                     self.infcx.tcx.sess.delay_span_bug(\n                         span,\n-                        &format!(\n+                        format!(\n                             \"Accessing `{:?}` with the kind `{:?}` shouldn't be possible\",\n                             place, kind,\n                         ),\n@@ -2383,7 +2383,7 @@ mod error {\n             }\n             for (_, (mut diag, count)) in std::mem::take(&mut self.errors.buffered_mut_errors) {\n                 if count > 10 {\n-                    diag.note(&format!(\"...and {} other attempted mutable borrows\", count - 10));\n+                    diag.note(format!(\"...and {} other attempted mutable borrows\", count - 10));\n                 }\n                 diag.buffer(&mut self.errors.buffered);\n             }"}, {"sha": "a4394ddc01c5a6718ba0b160cee507d663d90f4a", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -399,7 +399,7 @@ pub(super) fn dump_annotation<'tcx>(\n \n         regioncx.annotate(tcx, &mut err);\n \n-        err.note(&format!(\n+        err.note(format!(\n             \"number of external vids: {}\",\n             closure_region_requirements.num_external_vids\n         ));\n@@ -421,7 +421,7 @@ pub(super) fn dump_annotation<'tcx>(\n     };\n \n     if !opaque_type_values.is_empty() {\n-        err.note(&format!(\"Inferred opaque type values:\\n{:#?}\", opaque_type_values));\n+        err.note(format!(\"Inferred opaque type values:\\n{:#?}\", opaque_type_values));\n     }\n \n     errors.buffer_non_error_diag(err);"}, {"sha": "4970ece5e7deb74e888df756ecc922a8ee1f1da0", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -399,7 +399,7 @@ fn check_opaque_type_parameter_valid(\n             return Err(tcx\n                 .sess\n                 .struct_span_err(span, \"non-defining opaque type use in defining scope\")\n-                .span_note(spans, &format!(\"{} used multiple times\", descr))\n+                .span_note(spans, format!(\"{} used multiple times\", descr))\n                 .emit());\n         }\n     }"}, {"sha": "bd01c0b504cb5d3fe9839f902201fdc5709b18d9", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -249,7 +249,7 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n                         .infcx\n                         .tcx\n                         .sess\n-                        .delay_span_bug(span, &format!(\"failed to normalize {:?}\", ty));\n+                        .delay_span_bug(span, format!(\"failed to normalize {:?}\", ty));\n                     TypeOpOutput {\n                         output: self.infcx.tcx.ty_error(guar),\n                         constraints: None,"}, {"sha": "a06d4bcc6c7aeb2c45b1a424300f7915972093ef", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         if body.yield_ty().is_some() != universal_regions.yield_ty.is_some() {\n             self.tcx().sess.delay_span_bug(\n                 body.span,\n-                &format!(\n+                format!(\n                     \"Expected body to have yield_ty ({:?}) iff we have a UR yield_ty ({:?})\",\n                     body.yield_ty(),\n                     universal_regions.yield_ty,"}, {"sha": "438920e293db87201af3e0bcbb583fd0aaaff99e", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -236,7 +236,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n             if hidden_type.has_non_region_infer() {\n                 let reported = infcx.tcx.sess.delay_span_bug(\n                     decl.hidden_type.span,\n-                    &format!(\"could not resolve {:#?}\", hidden_type.ty.kind()),\n+                    format!(\"could not resolve {:#?}\", hidden_type.ty.kind()),\n                 );\n                 hidden_type.ty = infcx.tcx.ty_error(reported);\n             }\n@@ -1404,7 +1404,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     span_mirbug!(self, term, \"bad Assert ({:?}, not bool\", cond_ty);\n                 }\n \n-                if let AssertKind::BoundsCheck { len, index } = msg {\n+                if let AssertKind::BoundsCheck { len, index } = &**msg {\n                     if len.ty(body, tcx) != tcx.types.usize {\n                         span_mirbug!(self, len, \"bounds-check length non-usize {:?}\", len)\n                     }"}, {"sha": "56f078f2da816fc9f266d8220ba41be06b343e11", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -335,7 +335,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n     pub(crate) fn annotate(&self, tcx: TyCtxt<'tcx>, err: &mut Diagnostic) {\n         match self.defining_ty {\n             DefiningTy::Closure(def_id, substs) => {\n-                err.note(&format!(\n+                err.note(format!(\n                     \"defining type: {} with closure substs {:#?}\",\n                     tcx.def_path_str_with_substs(def_id, substs),\n                     &substs[tcx.generics_of(def_id).parent_count..],\n@@ -347,11 +347,11 @@ impl<'tcx> UniversalRegions<'tcx> {\n                 // and other things that are not stable across tests!\n                 // So we just include the region-vid. Annoying.\n                 for_each_late_bound_region_in_recursive_scope(tcx, def_id.expect_local(), |r| {\n-                    err.note(&format!(\"late-bound region is {:?}\", self.to_region_vid(r)));\n+                    err.note(format!(\"late-bound region is {:?}\", self.to_region_vid(r)));\n                 });\n             }\n             DefiningTy::Generator(def_id, substs, _) => {\n-                err.note(&format!(\n+                err.note(format!(\n                     \"defining type: {} with generator substs {:#?}\",\n                     tcx.def_path_str_with_substs(def_id, substs),\n                     &substs[tcx.generics_of(def_id).parent_count..],\n@@ -361,23 +361,23 @@ impl<'tcx> UniversalRegions<'tcx> {\n                 // `r` but doing so is not stable across architectures\n                 // and so forth.\n                 for_each_late_bound_region_in_recursive_scope(tcx, def_id.expect_local(), |r| {\n-                    err.note(&format!(\"late-bound region is {:?}\", self.to_region_vid(r)));\n+                    err.note(format!(\"late-bound region is {:?}\", self.to_region_vid(r)));\n                 });\n             }\n             DefiningTy::FnDef(def_id, substs) => {\n-                err.note(&format!(\n+                err.note(format!(\n                     \"defining type: {}\",\n                     tcx.def_path_str_with_substs(def_id, substs),\n                 ));\n             }\n             DefiningTy::Const(def_id, substs) => {\n-                err.note(&format!(\n+                err.note(format!(\n                     \"defining constant type: {}\",\n                     tcx.def_path_str_with_substs(def_id, substs),\n                 ));\n             }\n             DefiningTy::InlineConst(def_id, substs) => {\n-                err.note(&format!(\n+                err.note(format!(\n                     \"defining inline constant type: {}\",\n                     tcx.def_path_str_with_substs(def_id, substs),\n                 ));"}, {"sha": "ac817d9a152ade1e81de6113b35af6c2c4c1f296", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -68,9 +68,7 @@ pub fn parse_asm_args<'a>(\n         if !p.eat(&token::Comma) {\n             if allow_templates {\n                 // After a template string, we always expect *only* a comma...\n-                let mut err = diag.create_err(errors::AsmExpectedComma { span: p.token.span });\n-                p.maybe_annotate_with_ascription(&mut err, false);\n-                return Err(err);\n+                return Err(diag.create_err(errors::AsmExpectedComma { span: p.token.span }));\n             } else {\n                 // ...after that delegate to `expect` to also include the other expected tokens.\n                 return Err(p.expect(&token::Comma).err().unwrap());\n@@ -555,7 +553,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n             let mut e = ecx.struct_span_err(err_sp, msg);\n             e.span_label(err_sp, err.label + \" in asm template string\");\n             if let Some(note) = err.note {\n-                e.note(&note);\n+                e.note(note);\n             }\n             if let Some((label, span)) = err.secondary_label {\n                 let err_sp = template_span.from_inner(InnerSpan::new(span.start, span.end));\n@@ -602,7 +600,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n                                     1 => format!(\"there is 1 {}argument\", positional),\n                                     x => format!(\"there are {} {}arguments\", x, positional),\n                                 };\n-                                err.note(&msg);\n+                                err.note(msg);\n \n                                 if named_pos.contains_key(&idx) {\n                                     err.span_label(args.operands[idx].1, \"named argument\");\n@@ -705,7 +703,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n             let (sp, msg) = unused_operands.into_iter().next().unwrap();\n             let mut err = ecx.struct_span_err(sp, msg);\n             err.span_label(sp, msg);\n-            err.help(&format!(\n+            err.help(format!(\n                 \"if this argument is intentionally unused, \\\n                  consider using it in an asm comment: `\\\"/*{} */\\\"`\",\n                 help_str\n@@ -720,7 +718,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n             for (sp, msg) in unused_operands {\n                 err.span_label(sp, msg);\n             }\n-            err.help(&format!(\n+            err.help(format!(\n                 \"if these arguments are intentionally unused, \\\n                  consider using them in an asm comment: `\\\"/*{} */\\\"`\",\n                 help_str"}, {"sha": "ab4ea9c8c20525ff7c3a989a63bcc4520c7c689f", "filename": "compiler/rustc_builtin_macros/src/assert.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -61,7 +61,6 @@ pub fn expand_assert<'cx>(\n                     delim: MacDelimiter::Parenthesis,\n                     tokens,\n                 }),\n-                prior_type_ascription: None,\n             })),\n         );\n         expr_if_not(cx, call_site_span, cond_expr, then, None)"}, {"sha": "ea830a0ce60dfba2edce4bdf7737188d4e214ec3", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -182,7 +182,6 @@ impl<'cx, 'a> Context<'cx, 'a> {\n                     delim: MacDelimiter::Parenthesis,\n                     tokens: initial.into_iter().chain(captures).collect::<TokenStream>(),\n                 }),\n-                prior_type_ascription: None,\n             })),\n         )\n     }"}, {"sha": "ef0db23ff2f2d8cb15e4e3954bed4d27c27bd0e5", "filename": "compiler/rustc_builtin_macros/src/edition_panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_builtin_macros%2Fsrc%2Fedition_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_builtin_macros%2Fsrc%2Fedition_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fedition_panic.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -63,7 +63,6 @@ fn expand<'cx>(\n                     delim: MacDelimiter::Parenthesis,\n                     tokens: tts,\n                 }),\n-                prior_type_ascription: None,\n             })),\n         ),\n     )"}, {"sha": "adc12ec84f514e11f97e810f2210da153102c51b", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -616,14 +616,14 @@ fn report_missing_placeholders(\n                         } else {\n                             diag.span_note(\n                                 sp,\n-                                &format!(\"format specifiers use curly braces, and {}\", trn),\n+                                format!(\"format specifiers use curly braces, and {}\", trn),\n                             );\n                         }\n                     } else {\n                         if success {\n-                            diag.help(&format!(\"`{}` should be written as `{}`\", sub, trn));\n+                            diag.help(format!(\"`{}` should be written as `{}`\", sub, trn));\n                         } else {\n-                            diag.note(&format!(\"`{}` should use curly braces, and {}\", sub, trn));\n+                            diag.note(format!(\"`{}` should use curly braces, and {}\", sub, trn));\n                         }\n                     }\n                 }\n@@ -777,7 +777,7 @@ fn report_invalid_references(\n                 has_precision_star = true;\n                 e.span_label(\n                     *span,\n-                    &format!(\n+                    format!(\n                         \"this precision flag adds an extra required argument at position {}, which is why there {} expected\",\n                         index,\n                         if num_placeholders == 1 {"}, {"sha": "52b5601bb11b8c8aee6178637d07a809ec336c2c", "filename": "compiler/rustc_builtin_macros/src/proc_macro_harness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -194,7 +194,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n                     };\n \n                     self.handler\n-                        .struct_span_err(attr.span, &msg)\n+                        .struct_span_err(attr.span, msg)\n                         .span_label(prev_attr.span, \"previous attribute here\")\n                         .emit();\n \n@@ -219,7 +219,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n                 pprust::path_to_string(&attr.get_normal_item().path),\n             );\n \n-            self.handler.span_err(attr.span, &msg);\n+            self.handler.span_err(attr.span, msg);\n             return;\n         }\n \n@@ -233,7 +233,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n                 pprust::path_to_string(&attr.get_normal_item().path),\n             );\n \n-            self.handler.span_err(attr.span, &msg);\n+            self.handler.span_err(attr.span, msg);\n             return;\n         }\n "}, {"sha": "b8a24f1102daf31537facae5a6d16f5f329a6e5d", "filename": "compiler/rustc_builtin_macros/src/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -150,7 +150,7 @@ pub fn expand_include<'cx>(\n                         if self.p.token != token::Eof {\n                             let token = pprust::token_to_string(&self.p.token);\n                             let msg = format!(\"expected item, found `{}`\", token);\n-                            self.p.struct_span_err(self.p.token.span, &msg).emit();\n+                            self.p.struct_span_err(self.p.token.span, msg).emit();\n                         }\n \n                         break;"}, {"sha": "73a3e3353f3a83ff3a337d78457cdd40b38914ec", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -88,10 +88,10 @@ pub(crate) fn import_function<'tcx>(\n     let sig = get_function_sig(tcx, module.target_config().default_call_conv, inst);\n     match module.declare_function(name, Linkage::Import, &sig) {\n         Ok(func_id) => func_id,\n-        Err(ModuleError::IncompatibleDeclaration(_)) => tcx.sess.fatal(&format!(\n+        Err(ModuleError::IncompatibleDeclaration(_)) => tcx.sess.fatal(format!(\n             \"attempt to declare `{name}` as function, but it was already declared as static\"\n         )),\n-        Err(ModuleError::IncompatibleSignature(_, prev_sig, new_sig)) => tcx.sess.fatal(&format!(\n+        Err(ModuleError::IncompatibleSignature(_, prev_sig, new_sig)) => tcx.sess.fatal(format!(\n             \"attempt to declare `{name}` with signature {new_sig:?}, \\\n              but it was already declared with signature {prev_sig:?}\"\n         )),\n@@ -548,7 +548,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n             if !matches!(fn_sig.abi(), Abi::C { .. }) {\n                 fx.tcx.sess.span_fatal(\n                     source_info.span,\n-                    &format!(\"Variadic call for non-C abi {:?}\", fn_sig.abi()),\n+                    format!(\"Variadic call for non-C abi {:?}\", fn_sig.abi()),\n                 );\n             }\n             let sig_ref = fx.bcx.func.dfg.call_signature(call_inst).unwrap();\n@@ -560,7 +560,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n                         // FIXME set %al to upperbound on float args once floats are supported\n                         fx.tcx.sess.span_fatal(\n                             source_info.span,\n-                            &format!(\"Non int ty {:?} for variadic call\", ty),\n+                            format!(\"Non int ty {:?} for variadic call\", ty),\n                         );\n                     }\n                     AbiParam::new(ty)"}, {"sha": "e9dbea1be671d8696a19f0475cbc600277546192", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -220,13 +220,13 @@ pub(crate) fn verify_func(\n         match cranelift_codegen::verify_function(&func, &flags) {\n             Ok(_) => {}\n             Err(err) => {\n-                tcx.sess.err(&format!(\"{:?}\", err));\n+                tcx.sess.err(format!(\"{:?}\", err));\n                 let pretty_error = cranelift_codegen::print_errors::pretty_verifier_error(\n                     &func,\n                     Some(Box::new(writer)),\n                     err,\n                 );\n-                tcx.sess.fatal(&format!(\"cranelift verify error:\\n{}\", pretty_error));\n+                tcx.sess.fatal(format!(\"cranelift verify error:\\n{}\", pretty_error));\n             }\n         }\n     });\n@@ -335,7 +335,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                 fx.bcx.switch_to_block(failure);\n                 fx.bcx.ins().nop();\n \n-                match msg {\n+                match &**msg {\n                     AssertKind::BoundsCheck { ref len, ref index } => {\n                         let len = codegen_operand(fx, len).load_scalar(fx);\n                         let index = codegen_operand(fx, index).load_scalar(fx);"}, {"sha": "264b95e7abd7338d1572f35c1bd824673721353a", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -481,7 +481,7 @@ impl<'tcx> LayoutOfHelpers<'tcx> for RevealAllLayoutCx<'tcx> {\n     #[inline]\n     fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n         if let layout::LayoutError::SizeOverflow(_) = err {\n-            self.0.sess.span_fatal(span, &err.to_string())\n+            self.0.sess.span_fatal(span, err.to_string())\n         } else {\n             span_bug!(span, \"failed to get layout for `{}`: {}\", ty, err)\n         }\n@@ -499,7 +499,7 @@ impl<'tcx> FnAbiOfHelpers<'tcx> for RevealAllLayoutCx<'tcx> {\n         fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> ! {\n         if let FnAbiError::Layout(LayoutError::SizeOverflow(_)) = err {\n-            self.0.sess.span_fatal(span, &err.to_string())\n+            self.0.sess.span_fatal(span, err.to_string())\n         } else {\n             match fn_abi_request {\n                 FnAbiRequest::OfFnPtr { sig, extra_args } => {"}, {"sha": "d2b928db7d4df774ee35df3f8d07832abd520e9f", "filename": "compiler/rustc_codegen_cranelift/src/concurrency_limiter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconcurrency_limiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconcurrency_limiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconcurrency_limiter.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -65,7 +65,7 @@ impl ConcurrencyLimiter {\n                     // Make sure to drop the mutex guard first to prevent poisoning the mutex.\n                     drop(state);\n                     if let Some(err) = err {\n-                        handler.fatal(&err).raise();\n+                        handler.fatal(err).raise();\n                     } else {\n                         // The error was already emitted, but compilation continued. Raise a silent\n                         // fatal error."}, {"sha": "77af561a58724c1fda56b2a1b1e1767412a453d1", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -308,7 +308,7 @@ fn data_id_for_static(\n             attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL),\n         ) {\n             Ok(data_id) => data_id,\n-            Err(ModuleError::IncompatibleDeclaration(_)) => tcx.sess.fatal(&format!(\n+            Err(ModuleError::IncompatibleDeclaration(_)) => tcx.sess.fatal(format!(\n                 \"attempt to declare `{symbol_name}` as static, but it was already declared as function\"\n             )),\n             Err(err) => Err::<_, _>(err).unwrap(),\n@@ -356,7 +356,7 @@ fn data_id_for_static(\n         attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL),\n     ) {\n         Ok(data_id) => data_id,\n-        Err(ModuleError::IncompatibleDeclaration(_)) => tcx.sess.fatal(&format!(\n+        Err(ModuleError::IncompatibleDeclaration(_)) => tcx.sess.fatal(format!(\n             \"attempt to declare `{symbol_name}` as static, but it was already declared as function\"\n         )),\n         Err(err) => Err::<_, _>(err).unwrap(),\n@@ -404,7 +404,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                 if let Some(names) = section_name.split_once(',') {\n                     names\n                 } else {\n-                    tcx.sess.fatal(&format!(\n+                    tcx.sess.fatal(format!(\n                         \"#[link_section = \\\"{}\\\"] is not valid for macos target: must be segment and section separated by comma\",\n                         section_name\n                     ));\n@@ -449,7 +449,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                 GlobalAlloc::Static(def_id) => {\n                     if tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL)\n                     {\n-                        tcx.sess.fatal(&format!(\n+                        tcx.sess.fatal(format!(\n                             \"Allocation {:?} contains reference to TLS value {:?}\",\n                             alloc_id, def_id\n                         ));"}, {"sha": "aad9a9647f8c9b5c9f30b75a77638d0e678c9700", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -69,7 +69,7 @@ impl OngoingCodegen {\n \n             let module_codegen_result = match module_codegen_result {\n                 Ok(module_codegen_result) => module_codegen_result,\n-                Err(err) => sess.fatal(&err),\n+                Err(err) => sess.fatal(err),\n             };\n             let ModuleCodegenResult { module_regular, module_global_asm, existing_work_product } =\n                 module_codegen_result;\n@@ -468,7 +468,7 @@ pub(crate) fn run_aot(\n             let obj = create_compressed_metadata_file(tcx.sess, &metadata, &symbol_name);\n \n             if let Err(err) = std::fs::write(&tmp_file, obj) {\n-                tcx.sess.fatal(&format!(\"error writing metadata object file: {}\", err));\n+                tcx.sess.fatal(format!(\"error writing metadata object file: {}\", err));\n             }\n \n             (metadata_cgu_name, tmp_file)"}, {"sha": "f67fdb592700f82b04a91c46ac5d43f533ffd26b", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -42,7 +42,7 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         _ => {\n             fx.tcx\n                 .sess\n-                .warn(&format!(\"unsupported llvm intrinsic {}; replacing with trap\", intrinsic));\n+                .warn(format!(\"unsupported llvm intrinsic {}; replacing with trap\", intrinsic));\n             crate::trap::trap_unimplemented(fx, intrinsic);\n             return;\n         }"}, {"sha": "33b2f4702a7a36042dabe64880cb8870ff93d90f", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/llvm_aarch64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_aarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_aarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_aarch64.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -207,7 +207,7 @@ pub(crate) fn codegen_aarch64_llvm_intrinsic_call<'tcx>(\n         }\n         */\n         _ => {\n-            fx.tcx.sess.warn(&format!(\n+            fx.tcx.sess.warn(format!(\n                 \"unsupported AArch64 llvm intrinsic {}; replacing with trap\",\n                 intrinsic\n             ));"}, {"sha": "56d8f13cec5e5068fb00141e616c5fb9fc6ad340", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/llvm_x86.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -138,10 +138,9 @@ pub(crate) fn codegen_x86_llvm_intrinsic_call<'tcx>(\n             llvm_add_sub(fx, BinOp::Sub, ret, b_in, a, b);\n         }\n         _ => {\n-            fx.tcx.sess.warn(&format!(\n-                \"unsupported x86 llvm intrinsic {}; replacing with trap\",\n-                intrinsic\n-            ));\n+            fx.tcx\n+                .sess\n+                .warn(format!(\"unsupported x86 llvm intrinsic {}; replacing with trap\", intrinsic));\n             crate::trap::trap_unimplemented(fx, intrinsic);\n             return;\n         }"}, {"sha": "0a513b08b74f5df014fc9ae20913f70bc8d68b3a", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -42,7 +42,7 @@ fn report_atomic_type_validation_error<'tcx>(\n ) {\n     fx.tcx.sess.span_err(\n         span,\n-        &format!(\n+        format!(\n             \"`{}` intrinsic: expected basic integer or raw pointer type, found `{:?}`\",\n             intrinsic, ty\n         ),\n@@ -1202,7 +1202,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         _ => {\n             fx.tcx\n                 .sess\n-                .span_fatal(source_info.span, &format!(\"unsupported intrinsic {}\", intrinsic));\n+                .span_fatal(source_info.span, format!(\"unsupported intrinsic {}\", intrinsic));\n         }\n     }\n "}, {"sha": "5a038bfca5d2d7cb42d65012ec676c1c634ccdea", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/simd.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -13,7 +13,7 @@ fn report_simd_type_validation_error(\n     span: Span,\n     ty: Ty<'_>,\n ) {\n-    fx.tcx.sess.span_err(span, &format!(\"invalid monomorphization of `{}` intrinsic: expected SIMD input type, found non-SIMD `{}`\", intrinsic, ty));\n+    fx.tcx.sess.span_err(span, format!(\"invalid monomorphization of `{}` intrinsic: expected SIMD input type, found non-SIMD `{}`\", intrinsic, ty));\n     // Prevent verifier error\n     fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n }\n@@ -150,7 +150,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     _ => {\n                         fx.tcx.sess.span_err(\n                             span,\n-                            &format!(\n+                            format!(\n                                 \"simd_shuffle index must be an array of `u32`, got `{}`\",\n                                 idx_ty,\n                             ),\n@@ -248,7 +248,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             if idx >= lane_count.into() {\n                 fx.tcx.sess.span_fatal(\n                     fx.mir.span,\n-                    &format!(\"[simd_insert] idx {} >= lane_count {}\", idx, lane_count),\n+                    format!(\"[simd_insert] idx {} >= lane_count {}\", idx, lane_count),\n                 );\n             }\n \n@@ -296,7 +296,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             if idx >= lane_count.into() {\n                 fx.tcx.sess.span_fatal(\n                     fx.mir.span,\n-                    &format!(\"[simd_extract] idx {} >= lane_count {}\", idx, lane_count),\n+                    format!(\"[simd_extract] idx {} >= lane_count {}\", idx, lane_count),\n                 );\n             }\n \n@@ -699,7 +699,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 _ => {\n                     fx.tcx.sess.span_fatal(\n                         span,\n-                        &format!(\n+                        format!(\n                             \"invalid monomorphization of `simd_bitmask` intrinsic: \\\n                             vector argument `{}`'s element type `{}`, expected integer element \\\n                             type\",\n@@ -739,7 +739,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 _ => {\n                     fx.tcx.sess.span_fatal(\n                         span,\n-                        &format!(\n+                        format!(\n                             \"invalid monomorphization of `simd_bitmask` intrinsic: \\\n                             cannot return `{}`, expected `u{}` or `[u8; {}]`\",\n                             ret.layout().ty,\n@@ -875,7 +875,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         }\n \n         _ => {\n-            fx.tcx.sess.span_err(span, &format!(\"Unknown SIMD intrinsic {}\", intrinsic));\n+            fx.tcx.sess.span_err(span, format!(\"Unknown SIMD intrinsic {}\", intrinsic));\n             // Prevent verifier error\n             fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n         }"}, {"sha": "9966cc2ef3c12b2e0f0cebb9785a1e5935b44beb", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -185,7 +185,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         let mut config = self.config.borrow_mut();\n         if config.is_none() {\n             let new_config = BackendConfig::from_opts(&sess.opts.cg.llvm_args)\n-                .unwrap_or_else(|err| sess.fatal(&err));\n+                .unwrap_or_else(|err| sess.fatal(err));\n             *config = Some(new_config);\n         }\n     }\n@@ -245,7 +245,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n fn target_triple(sess: &Session) -> target_lexicon::Triple {\n     match sess.target.llvm_target.parse() {\n         Ok(triple) => triple,\n-        Err(err) => sess.fatal(&format!(\"target not recognized: {}\", err)),\n+        Err(err) => sess.fatal(format!(\"target not recognized: {}\", err)),\n     }\n }\n \n@@ -307,7 +307,7 @@ fn build_isa(sess: &Session, backend_config: &BackendConfig) -> Arc<dyn isa::Tar\n         Some(value) => {\n             let mut builder =\n                 cranelift_codegen::isa::lookup(target_triple.clone()).unwrap_or_else(|err| {\n-                    sess.fatal(&format!(\"can't compile for {}: {}\", target_triple, err));\n+                    sess.fatal(format!(\"can't compile for {}: {}\", target_triple, err));\n                 });\n             if let Err(_) = builder.enable(value) {\n                 sess.fatal(\"the specified target cpu isn't currently supported by Cranelift.\");\n@@ -317,7 +317,7 @@ fn build_isa(sess: &Session, backend_config: &BackendConfig) -> Arc<dyn isa::Tar\n         None => {\n             let mut builder =\n                 cranelift_codegen::isa::lookup(target_triple.clone()).unwrap_or_else(|err| {\n-                    sess.fatal(&format!(\"can't compile for {}: {}\", target_triple, err));\n+                    sess.fatal(format!(\"can't compile for {}: {}\", target_triple, err));\n                 });\n             if target_triple.architecture == target_lexicon::Architecture::X86_64 {\n                 // Don't use \"haswell\" as the default, as it implies `has_lzcnt`.\n@@ -330,7 +330,7 @@ fn build_isa(sess: &Session, backend_config: &BackendConfig) -> Arc<dyn isa::Tar\n \n     match isa_builder.finish(flags) {\n         Ok(target_isa) => target_isa,\n-        Err(err) => sess.fatal(&format!(\"failed to build TargetIsa: {}\", err)),\n+        Err(err) => sess.fatal(format!(\"failed to build TargetIsa: {}\", err)),\n     }\n }\n "}, {"sha": "20ba73f38523a24502d50c464ad35ab1193dbe32", "filename": "compiler/rustc_codegen_cranelift/src/main_shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -75,7 +75,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n             Ok(func_id) => func_id,\n             Err(err) => {\n                 tcx.sess\n-                    .fatal(&format!(\"entry symbol `{entry_name}` declared multiple times: {err}\"));\n+                    .fatal(format!(\"entry symbol `{entry_name}` declared multiple times: {err}\"));\n             }\n         };\n \n@@ -171,7 +171,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n         }\n \n         if let Err(err) = m.define_function(cmain_func_id, &mut ctx) {\n-            tcx.sess.fatal(&format!(\"entry symbol `{entry_name}` defined multiple times: {err}\"));\n+            tcx.sess.fatal(format!(\"entry symbol `{entry_name}` defined multiple times: {err}\"));\n         }\n \n         unwind_context.add_function(cmain_func_id, &ctx, m.isa());"}, {"sha": "b1fda6ff2133797c234cfcdb556c4db32c30d26e", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -344,7 +344,7 @@ impl<'tcx> CPlace<'tcx> {\n         if layout.size.bytes() >= u64::from(u32::MAX - 16) {\n             fx.tcx\n                 .sess\n-                .fatal(&format!(\"values of type {} are too big to store on the stack\", layout.ty));\n+                .fatal(format!(\"values of type {} are too big to store on the stack\", layout.ty));\n         }\n \n         let stack_slot = fx.bcx.create_sized_stack_slot(StackSlotData {"}, {"sha": "8a7809a14682ce480fa754f138fd20cc735179b0", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -40,7 +40,6 @@ use regex::Regex;\n use tempfile::Builder as TempFileBuilder;\n \n use itertools::Itertools;\n-use std::borrow::Borrow;\n use std::cell::OnceCell;\n use std::collections::BTreeSet;\n use std::ffi::OsString;\n@@ -54,7 +53,7 @@ use std::{env, fmt, fs, io, mem, str};\n pub fn ensure_removed(diag_handler: &Handler, path: &Path) {\n     if let Err(e) = fs::remove_file(path) {\n         if e.kind() != io::ErrorKind::NotFound {\n-            diag_handler.err(&format!(\"failed to remove {}: {}\", path.display(), e));\n+            diag_handler.err(format!(\"failed to remove {}: {}\", path.display(), e));\n         }\n     }\n }\n@@ -576,17 +575,17 @@ fn link_dwarf_object<'a>(\n \n     impl<Relocations> ThorinSession<Relocations> {\n         fn alloc_mmap(&self, data: Mmap) -> &Mmap {\n-            (*self.arena_mmap.alloc(data)).borrow()\n+            &*self.arena_mmap.alloc(data)\n         }\n     }\n \n     impl<Relocations> thorin::Session<Relocations> for ThorinSession<Relocations> {\n         fn alloc_data(&self, data: Vec<u8>) -> &[u8] {\n-            (*self.arena_data.alloc(data)).borrow()\n+            &*self.arena_data.alloc(data)\n         }\n \n         fn alloc_relocation(&self, data: Relocations) -> &Relocations {\n-            (*self.arena_relocations.alloc(data)).borrow()\n+            &*self.arena_relocations.alloc(data)\n         }\n \n         fn read_input(&self, path: &Path) -> std::io::Result<&[u8]> {\n@@ -1406,7 +1405,7 @@ fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLib]) {\n         sess.emit_note(errors::StaticLibraryNativeArtifacts);\n         // Prefix for greppability\n         // Note: This must not be translated as tools are allowed to depend on this exact string.\n-        sess.note_without_error(&format!(\"native-static-libs: {}\", &lib_args.join(\" \")));\n+        sess.note_without_error(format!(\"native-static-libs: {}\", &lib_args.join(\" \")));\n     }\n }\n "}, {"sha": "1e57f4248d20f32b2c0be417c2fa69535bed1aca", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1631,7 +1631,7 @@ impl<'a> Linker for AixLinker<'a> {\n             }\n         };\n         if let Err(e) = res {\n-            self.sess.fatal(&format!(\"failed to write export file: {}\", e));\n+            self.sess.fatal(format!(\"failed to write export file: {}\", e));\n         }\n         self.cmd.arg(format!(\"-bE:{}\", path.to_str().unwrap()));\n     }"}, {"sha": "c42d59bd51c0a119f373a20246de4f1a039dccf0", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1833,7 +1833,7 @@ impl SharedEmitterMain {\n                     sess.abort_if_errors();\n                 }\n                 Ok(SharedEmitterMessage::Fatal(msg)) => {\n-                    sess.fatal(&msg);\n+                    sess.fatal(msg);\n                 }\n                 Err(_) => {\n                     break;"}, {"sha": "5cc87d1e56cca3d475a1a50436f7f2113870caae", "filename": "compiler/rustc_codegen_ssa/src/codegen_attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -301,7 +301,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: LocalDefId) -> CodegenFnAttrs {\n                 if let Some(val) = attr.value_str() {\n                     if val.as_str().bytes().any(|b| b == 0) {\n                         let msg = format!(\"illegal null byte in link_section value: `{}`\", &val);\n-                        tcx.sess.span_err(attr.span, &msg);\n+                        tcx.sess.span_err(attr.span, msg);\n                     } else {\n                         codegen_fn_attrs.link_section = Some(val);\n                     }\n@@ -631,7 +631,7 @@ fn check_link_ordinal(tcx: TyCtxt<'_>, attr: &ast::Attribute) -> Option<u16> {\n         } else {\n             let msg = format!(\"ordinal value in `link_ordinal` is too large: `{}`\", &ordinal);\n             tcx.sess\n-                .struct_span_err(attr.span, &msg)\n+                .struct_span_err(attr.span, msg)\n                 .note(\"the value may not exceed `u16::MAX`\")\n                 .emit();\n             None"}, {"sha": "6297f91341d44c35be63f4508132254cf98cd079", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -94,7 +94,7 @@ fn push_debuginfo_type_name<'tcx>(\n                         // Computing the layout can still fail here, e.g. if the target architecture\n                         // cannot represent the type. See https://github.com/rust-lang/rust/issues/94961.\n                         // FIXME: migrate once `rustc_middle::mir::interpret::InterpError` is translatable.\n-                        tcx.sess.fatal(&format!(\"{}\", e));\n+                        tcx.sess.fatal(format!(\"{}\", e));\n                     }\n                 }\n             } else {"}, {"sha": "1cfc4b933a8cb0d2390b8a7390f988774297a934", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -370,7 +370,7 @@ pub fn from_target_feature(\n             let Some(feature_gate) = supported_target_features.get(feature) else {\n                 let msg =\n                     format!(\"the feature named `{}` is not valid for this target\", feature);\n-                let mut err = tcx.sess.struct_span_err(item.span(), &msg);\n+                let mut err = tcx.sess.struct_span_err(item.span(), msg);\n                 err.span_label(\n                     item.span(),\n                     format!(\"`{}` is not valid for this target\", feature),\n@@ -408,7 +408,7 @@ pub fn from_target_feature(\n                     &tcx.sess.parse_sess,\n                     feature_gate.unwrap(),\n                     item.span(),\n-                    &format!(\"the target feature `{}` is currently unstable\", feature),\n+                    format!(\"the target feature `{}` is currently unstable\", feature),\n                 )\n                 .emit();\n             }"}, {"sha": "cdef3fb23398b94fc8a86e0e803a2efac955ff3f", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -104,13 +104,13 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         // Add spans for the stacktrace. Don't print a single-line backtrace though.\n         if self.stacktrace.len() > 1 {\n             // Helper closure to print duplicated lines.\n-            let mut flush_last_line = |last_frame, times| {\n+            let mut flush_last_line = |last_frame: Option<(String, _)>, times| {\n                 if let Some((line, span)) = last_frame {\n-                    err.span_note(span, &line);\n+                    err.span_note(span, line.clone());\n                     // Don't print [... additional calls ...] if the number of lines is small\n                     if times < 3 {\n                         for _ in 0..times {\n-                            err.span_note(span, &line);\n+                            err.span_note(span, line.clone());\n                         }\n                     } else {\n                         err.span_note("}, {"sha": "046d2052968a3ad161bb31a7c38e20ce91ceebb1", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -368,7 +368,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n                         if matches!(err.error, InterpError::UndefinedBehavior(_)) {\n                             diag.note(NOTE_ON_UNDEFINED_BEHAVIOR_ERROR);\n                         }\n-                        diag.note(&format!(\n+                        diag.note(format!(\n                             \"the raw bytes of the constant ({}\",\n                             display_allocation(\n                                 *ecx.tcx,"}, {"sha": "05be45fef139119bc2d468df4df85614b554229d", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -83,7 +83,7 @@ pub(crate) fn eval_to_valtree<'tcx>(\n                         Some(span) => {\n                             tcx.sess.create_err(MaxNumNodesInConstErr { span, global_const_id })\n                         }\n-                        None => tcx.sess.struct_err(&msg),\n+                        None => tcx.sess.struct_err(msg),\n                     };\n                     diag.emit();\n "}, {"sha": "c2b82ba9b0792c84c9e2de0d83376381870ad577", "filename": "compiler/rustc_const_eval/src/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -387,7 +387,7 @@ pub fn intern_const_alloc_recursive<\n             Err(error) => {\n                 ecx.tcx.sess.delay_span_bug(\n                     ecx.tcx.span,\n-                    &format!(\n+                    format!(\n                         \"error during interning should later cause validation failure: {}\",\n                         error\n                     ),"}, {"sha": "1e60a1e72ea07088f40bc687a50b99f206625ace", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -293,7 +293,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     // FIXME: This should be a span_bug (#80742)\n                     self.tcx.sess.delay_span_bug(\n                         self.frame().current_span(),\n-                        &format!(\"{null_op:?} MIR operator called for unsized type {ty}\"),\n+                        format!(\"{null_op:?} MIR operator called for unsized type {ty}\"),\n                     );\n                     throw_inval!(SizeOfUnsizedType(ty));\n                 }"}, {"sha": "01b77289937fb9f00cae279b0750f58f1e31f738", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -38,16 +38,14 @@ macro_rules! throw_validation_failure {\n             msg.push_str(\", but expected \");\n             write!(&mut msg, $($expected_fmt)*).unwrap();\n         )?\n-        let path = rustc_middle::ty::print::with_no_trimmed_paths!({\n-            let where_ = &$where;\n-            if !where_.is_empty() {\n-                let mut path = String::new();\n-                write_path(&mut path, where_);\n-                Some(path)\n-            } else {\n-                None\n-            }\n-        });\n+        let where_ = &$where;\n+        let path = if !where_.is_empty() {\n+            let mut path = String::new();\n+            write_path(&mut path, where_);\n+            Some(path)\n+        } else {\n+            None\n+        };\n         throw_ub!(ValidationFailure { path, msg })\n     }};\n }"}, {"sha": "21f3c2c891713887de46d95ba39e3ef3efe12cfb", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -77,7 +77,7 @@ impl<'tcx> NonConstOp<'tcx> for FloatingPointOp {\n             &ccx.tcx.sess.parse_sess,\n             sym::const_fn_floating_point_arithmetic,\n             span,\n-            &format!(\"floating point arithmetic is not allowed in {}s\", ccx.const_kind()),\n+            format!(\"floating point arithmetic is not allowed in {}s\", ccx.const_kind()),\n         )\n     }\n }\n@@ -211,13 +211,13 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                         err.span_note(span, \"function defined here, but it is not `const`\");\n                     }\n                     FnPtr(..) => {\n-                        err.note(&format!(\n+                        err.note(format!(\n                             \"function pointers need an RFC before allowed to be called in {}s\",\n                             ccx.const_kind()\n                         ));\n                     }\n                     Closure(..) => {\n-                        err.note(&format!(\n+                        err.note(format!(\n                             \"closures need an RFC before allowed to be called in {}s\",\n                             ccx.const_kind()\n                         ));\n@@ -289,7 +289,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                     ccx.const_kind()\n                 );\n \n-                err.note(&format!(\"attempting to deref into `{}`\", deref_target_ty));\n+                err.note(format!(\"attempting to deref into `{}`\", deref_target_ty));\n \n                 // Check first whether the source is accessible (issue #87060)\n                 if tcx.sess.source_map().is_span_accessible(deref_target) {\n@@ -310,14 +310,14 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n             }),\n         };\n \n-        err.note(&format!(\n+        err.note(format!(\n             \"calls in {}s are limited to constant functions, \\\n              tuple structs and tuple variants\",\n             ccx.const_kind(),\n         ));\n \n         if let Some(feature) = feature && ccx.tcx.sess.is_nightly_build() {\n-            err.help(&format!(\n+            err.help(format!(\n                 \"add `#![feature({})]` to the crate attributes to enable\",\n                 feature,\n             ));\n@@ -354,7 +354,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallUnstable {\n             err.help(\"const-stable functions can only call other const-stable functions\");\n         } else if ccx.tcx.sess.is_nightly_build() {\n             if let Some(feature) = feature {\n-                err.help(&format!(\n+                err.help(format!(\n                     \"add `#![feature({})]` to the crate attributes to enable\",\n                     feature\n                 ));\n@@ -637,7 +637,7 @@ impl<'tcx> NonConstOp<'tcx> for RawMutPtrDeref {\n             &ccx.tcx.sess.parse_sess,\n             sym::const_mut_refs,\n             span,\n-            &format!(\"dereferencing raw mutable pointers in {}s is unstable\", ccx.const_kind(),),\n+            format!(\"dereferencing raw mutable pointers in {}s is unstable\", ccx.const_kind(),),\n         )\n     }\n }\n@@ -724,7 +724,7 @@ pub mod ty {\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_mut_refs,\n                 span,\n-                &format!(\"mutable references are not allowed in {}s\", ccx.const_kind()),\n+                format!(\"mutable references are not allowed in {}s\", ccx.const_kind()),\n             )\n         }\n     }"}, {"sha": "f46c2d00fe4e0ad8ab427088c4d739e741046b71", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         // occurred.\n         self.tcx.sess.diagnostic().delay_span_bug(\n             span,\n-            &format!(\n+            format!(\n                 \"broken MIR in {:?} ({}) at {:?}:\\n{}\",\n                 self.body.source.instance,\n                 self.when,\n@@ -1094,7 +1094,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n         if self.body.source_scopes.get(scope).is_none() {\n             self.tcx.sess.diagnostic().delay_span_bug(\n                 self.body.span,\n-                &format!(\n+                format!(\n                     \"broken MIR in {:?} ({}):\\ninvalid source scope {:?}\",\n                     self.body.source.instance, self.when, scope,\n                 ),"}, {"sha": "6c3f677ab8e69f5e70ecabc79d8ba3abb8de722a", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -287,11 +287,19 @@ pub enum SubdiagnosticMessage {\n     FluentAttr(FluentId),\n }\n \n-/// `From` impl that enables existing diagnostic calls to functions which now take\n-/// `impl Into<SubdiagnosticMessage>` to continue to work as before.\n-impl<S: Into<String>> From<S> for SubdiagnosticMessage {\n-    fn from(s: S) -> Self {\n-        SubdiagnosticMessage::Str(s.into())\n+impl From<String> for SubdiagnosticMessage {\n+    fn from(s: String) -> Self {\n+        SubdiagnosticMessage::Str(s)\n+    }\n+}\n+impl<'a> From<&'a str> for SubdiagnosticMessage {\n+    fn from(s: &'a str) -> Self {\n+        SubdiagnosticMessage::Str(s.to_string())\n+    }\n+}\n+impl From<Cow<'static, str>> for SubdiagnosticMessage {\n+    fn from(s: Cow<'static, str>) -> Self {\n+        SubdiagnosticMessage::Str(s.to_string())\n     }\n }\n \n@@ -352,11 +360,19 @@ impl DiagnosticMessage {\n     }\n }\n \n-/// `From` impl that enables existing diagnostic calls to functions which now take\n-/// `impl Into<DiagnosticMessage>` to continue to work as before.\n-impl<S: Into<String>> From<S> for DiagnosticMessage {\n-    fn from(s: S) -> Self {\n-        DiagnosticMessage::Str(s.into())\n+impl From<String> for DiagnosticMessage {\n+    fn from(s: String) -> Self {\n+        DiagnosticMessage::Str(s)\n+    }\n+}\n+impl<'a> From<&'a str> for DiagnosticMessage {\n+    fn from(s: &'a str) -> Self {\n+        DiagnosticMessage::Str(s.to_string())\n+    }\n+}\n+impl From<Cow<'static, str>> for DiagnosticMessage {\n+    fn from(s: Cow<'static, str>) -> Self {\n+        DiagnosticMessage::Str(s.to_string())\n     }\n }\n "}, {"sha": "1f1398342b12207c60f87f6662f1c5b10e0ff5d1", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -791,7 +791,7 @@ macro_rules! struct_span_err {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n         $session.struct_span_err_with_code(\n             $span,\n-            &format!($($message)*),\n+            format!($($message)*),\n             $crate::error_code!($code),\n         )\n     })"}, {"sha": "68e57de5e0889e34ddedd0ad8b3a67b67a7d0c02", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -601,7 +601,7 @@ impl Emitter for SilentEmitter {\n         if d.level == Level::Fatal {\n             let mut d = d.clone();\n             if let Some(ref note) = self.fatal_note {\n-                d.note(note);\n+                d.note(note.clone());\n             }\n             self.fatal_handler.emit_diagnostic(&mut d);\n         }"}, {"sha": "f9c062d3a2176d7abfcb0c5af1a5b0202cbd01d8", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1462,10 +1462,10 @@ impl HandlerInner {\n                 DiagnosticMessage::Str(warnings),\n             )),\n             (_, 0) => {\n-                let _ = self.fatal(&errors);\n+                let _ = self.fatal(errors);\n             }\n             (_, _) => {\n-                let _ = self.fatal(&format!(\"{}; {}\", &errors, &warnings));\n+                let _ = self.fatal(format!(\"{}; {}\", &errors, &warnings));\n             }\n         }\n \n@@ -1486,18 +1486,18 @@ impl HandlerInner {\n                 error_codes.sort();\n                 if error_codes.len() > 1 {\n                     let limit = if error_codes.len() > 9 { 9 } else { error_codes.len() };\n-                    self.failure(&format!(\n+                    self.failure(format!(\n                         \"Some errors have detailed explanations: {}{}\",\n                         error_codes[..limit].join(\", \"),\n                         if error_codes.len() > 9 { \"...\" } else { \".\" }\n                     ));\n-                    self.failure(&format!(\n+                    self.failure(format!(\n                         \"For more information about an error, try \\\n                          `rustc --explain {}`.\",\n                         &error_codes[0]\n                     ));\n                 } else {\n-                    self.failure(&format!(\n+                    self.failure(format!(\n                         \"For more information about this error, try \\\n                          `rustc --explain {}`.\",\n                         &error_codes[0]\n@@ -1663,7 +1663,7 @@ impl HandlerInner {\n             if bug.level != Level::DelayedBug {\n                 // NOTE(eddyb) not panicking here because we're already producing\n                 // an ICE, and the more information the merrier.\n-                bug.note(&format!(\n+                bug.note(format!(\n                     \"`flushed_delayed` got diagnostic with level {:?}, \\\n                      instead of the expected `DelayedBug`\",\n                     bug.level,\n@@ -1732,7 +1732,7 @@ impl DelayedDiagnostic {\n     }\n \n     fn decorate(mut self) -> Diagnostic {\n-        self.inner.note(&format!(\"delayed at {}\", self.note));\n+        self.inner.note(format!(\"delayed at {}\", self.note));\n         self.inner\n     }\n }\n@@ -1831,7 +1831,7 @@ pub fn add_elided_lifetime_in_path_suggestion(\n         if incl_angl_brckt { format!(\"<{}>\", anon_lts) } else { format!(\"{}, \", anon_lts) };\n     diag.span_suggestion_verbose(\n         insertion_span.shrink_to_hi(),\n-        &format!(\"indicate the anonymous lifetime{}\", pluralize!(n)),\n+        format!(\"indicate the anonymous lifetime{}\", pluralize!(n)),\n         suggestion,\n         Applicability::MachineApplicable,\n     );"}, {"sha": "c1cca89df8ca5a3600affe5cf70f069b30118f9b", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -992,7 +992,6 @@ pub struct ExpansionData {\n     pub depth: usize,\n     pub module: Rc<ModuleData>,\n     pub dir_ownership: DirOwnership,\n-    pub prior_type_ascription: Option<(Span, bool)>,\n     /// Some parent node that is close to this macro call\n     pub lint_node_id: NodeId,\n     pub is_trailing_mac: bool,\n@@ -1043,7 +1042,6 @@ impl<'a> ExtCtxt<'a> {\n                 depth: 0,\n                 module: Default::default(),\n                 dir_ownership: DirOwnership::Owned { relative: None },\n-                prior_type_ascription: None,\n                 lint_node_id: ast::CRATE_NODE_ID,\n                 is_trailing_mac: false,\n             },\n@@ -1148,7 +1146,7 @@ impl<'a> ExtCtxt<'a> {\n         for (span, notes) in self.expansions.iter() {\n             let mut db = self.sess.parse_sess.create_note(errors::TraceMacro { span: *span });\n             for note in notes {\n-                db.note(note);\n+                db.note(note.clone());\n             }\n             db.emit();\n         }"}, {"sha": "7c78970345ad5e1db4af4fed3c0b23815b2d7bb0", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -657,16 +657,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     self.parse_ast_fragment(tok_result, fragment_kind, &mac.path, span)\n                 }\n                 SyntaxExtensionKind::LegacyBang(expander) => {\n-                    let prev = self.cx.current_expansion.prior_type_ascription;\n-                    self.cx.current_expansion.prior_type_ascription = mac.prior_type_ascription;\n                     let tok_result = expander.expand(self.cx, span, mac.args.tokens.clone());\n                     let result = if let Some(result) = fragment_kind.make_from(tok_result) {\n                         result\n                     } else {\n                         self.error_wrong_fragment_kind(fragment_kind, &mac, span);\n                         fragment_kind.dummy(span)\n                     };\n-                    self.cx.current_expansion.prior_type_ascription = prev;\n                     result\n                 }\n                 _ => unreachable!(),\n@@ -800,7 +797,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             &self.cx.sess.parse_sess,\n             sym::proc_macro_hygiene,\n             span,\n-            &format!(\"custom attributes cannot be applied to {}\", kind),\n+            format!(\"custom attributes cannot be applied to {}\", kind),\n         )\n         .emit();\n     }"}, {"sha": "e4c65a2049bf6fc0dba5b8cbd5e336843951e4df", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -250,8 +250,7 @@ fn expand_macro<'cx>(\n                 trace_macros_note(&mut cx.expansions, sp, msg);\n             }\n \n-            let mut p = Parser::new(sess, tts, false, None);\n-            p.last_type_ascription = cx.current_expansion.prior_type_ascription;\n+            let p = Parser::new(sess, tts, false, None);\n \n             if is_local {\n                 cx.resolver.record_macro_rule_usage(node_id, i);\n@@ -475,7 +474,7 @@ pub fn compile_declarative_macro(\n \n                 let s = parse_failure_msg(&token);\n                 let sp = token.span.substitute_dummy(def.span);\n-                let mut err = sess.parse_sess.span_diagnostic.struct_span_err(sp, &s);\n+                let mut err = sess.parse_sess.span_diagnostic.struct_span_err(sp, s);\n                 err.span_label(sp, msg);\n                 annotate_doc_comment(&mut err, sess.source_map(), sp);\n                 err.emit();\n@@ -484,7 +483,7 @@ pub fn compile_declarative_macro(\n             Error(sp, msg) => {\n                 sess.parse_sess\n                     .span_diagnostic\n-                    .struct_span_err(sp.substitute_dummy(def.span), &msg)\n+                    .struct_span_err(sp.substitute_dummy(def.span), msg)\n                     .emit();\n                 return dummy_syn_ext();\n             }\n@@ -556,7 +555,7 @@ pub fn compile_declarative_macro(\n     let (transparency, transparency_error) = attr::find_transparency(&def.attrs, macro_rules);\n     match transparency_error {\n         Some(TransparencyError::UnknownTransparency(value, span)) => {\n-            diag.span_err(span, &format!(\"unknown macro transparency: `{}`\", value));\n+            diag.span_err(span, format!(\"unknown macro transparency: `{}`\", value));\n         }\n         Some(TransparencyError::MultipleTransparencyAttrs(old_span, new_span)) => {\n             diag.span_err(vec![old_span, new_span], \"multiple macro transparency attributes\");\n@@ -1165,7 +1164,7 @@ fn check_matcher_core<'tt>(\n                             let sp = next_token.span();\n                             let mut err = sess.span_diagnostic.struct_span_err(\n                                 sp,\n-                                &format!(\n+                                format!(\n                                     \"`${name}:{frag}` {may_be} followed by `{next}`, which \\\n                                      is not allowed for `{frag}` fragments\",\n                                     name = name,\n@@ -1197,13 +1196,13 @@ fn check_matcher_core<'tt>(\n                             match possible {\n                                 &[] => {}\n                                 &[t] => {\n-                                    err.note(&format!(\n+                                    err.note(format!(\n                                         \"only {} is allowed after `{}` fragments\",\n                                         t, kind,\n                                     ));\n                                 }\n                                 ts => {\n-                                    err.note(&format!(\n+                                    err.note(format!(\n                                         \"{}{} or {}\",\n                                         msg,\n                                         ts[..ts.len() - 1].to_vec().join(\", \"),"}, {"sha": "6e919615019fb4edf306a27f8a8cd3b13ae05d41", "filename": "compiler/rustc_expand/src/mbe/metavar_expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -78,7 +78,7 @@ fn check_trailing_token<'sess>(\n     if let Some(tt) = iter.next() {\n         let mut diag = sess\n             .span_diagnostic\n-            .struct_span_err(tt.span(), &format!(\"unexpected token: {}\", pprust::tt_to_string(tt)));\n+            .struct_span_err(tt.span(), format!(\"unexpected token: {}\", pprust::tt_to_string(tt)));\n         diag.span_note(tt.span(), \"meta-variable expression must not have trailing tokens\");\n         Err(diag)\n     } else {\n@@ -137,11 +137,11 @@ fn parse_ident<'sess>(\n         let token_str = pprust::token_to_string(token);\n         let mut err = sess.span_diagnostic.struct_span_err(\n             span,\n-            &format!(\"expected identifier, found `{}`\", &token_str)\n+            format!(\"expected identifier, found `{}`\", &token_str)\n         );\n         err.span_suggestion(\n             token.span,\n-            &format!(\"try removing `{}`\", &token_str),\n+            format!(\"try removing `{}`\", &token_str),\n             \"\",\n             Applicability::MaybeIncorrect,\n         );"}, {"sha": "b2bdf9c7e6db68e027586f87a1eb29a003f3666e", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -85,7 +85,7 @@ pub(super) fn parse(\n                                                     frag.name\n                                                 );\n                                                 sess.span_diagnostic\n-                                                    .struct_span_err(span, &msg)\n+                                                    .struct_span_err(span, msg)\n                                                     .help(VALID_FRAGMENT_NAMES_MSG)\n                                                     .emit();\n                                                 token::NonterminalKind::Ident\n@@ -195,7 +195,7 @@ fn parse_tree(\n                             _ => {\n                                 let tok = pprust::token_kind_to_string(&token::OpenDelim(delim));\n                                 let msg = format!(\"expected `(` or `{{`, found `{}`\", tok);\n-                                sess.span_diagnostic.span_err(delim_span.entire(), &msg);\n+                                sess.span_diagnostic.span_err(delim_span.entire(), msg);\n                             }\n                         }\n                     }\n@@ -246,7 +246,7 @@ fn parse_tree(\n                         \"expected identifier, found `{}`\",\n                         pprust::token_to_string(&token),\n                     );\n-                    sess.span_diagnostic.span_err(token.span, &msg);\n+                    sess.span_diagnostic.span_err(token.span, msg);\n                     TokenTree::MetaVar(token.span, Ident::empty())\n                 }\n \n@@ -358,7 +358,7 @@ fn parse_sep_and_kleene_op(\n // For example, `macro_rules! foo { ( ${length()} ) => {} }`\n fn span_dollar_dollar_or_metavar_in_the_lhs_err(sess: &ParseSess, token: &Token) {\n     sess.span_diagnostic\n-        .span_err(token.span, &format!(\"unexpected token: {}\", pprust::token_to_string(token)));\n+        .span_err(token.span, format!(\"unexpected token: {}\", pprust::token_to_string(token)));\n     sess.span_diagnostic.span_note_without_error(\n         token.span,\n         \"`$$` and meta-variable expressions are not allowed inside macro parameter definitions\","}, {"sha": "e9af688ee2b61004e24d89ebaf26cf0cc6a85053", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -21,7 +21,6 @@ pub fn placeholder(\n                 delim: ast::MacDelimiter::Parenthesis,\n                 tokens: ast::tokenstream::TokenStream::new(Vec::new()),\n             }),\n-            prior_type_ascription: None,\n         })\n     }\n "}, {"sha": "41b24407fa07c6603d17eab37bc28f53e74ae811", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -95,7 +95,7 @@ impl base::AttrProcMacro for AttrProcMacro {\n             |e| {\n                 let mut err = ecx.struct_span_err(span, \"custom attribute panicked\");\n                 if let Some(s) = e.as_str() {\n-                    err.help(&format!(\"message: {}\", s));\n+                    err.help(format!(\"message: {}\", s));\n                 }\n                 err.emit()\n             },\n@@ -148,7 +148,7 @@ impl MultiItemModifier for DeriveProcMacro {\n                 Err(e) => {\n                     let mut err = ecx.struct_span_err(span, \"proc-macro derive panicked\");\n                     if let Some(s) = e.as_str() {\n-                        err.help(&format!(\"message: {}\", s));\n+                        err.help(format!(\"message: {}\", s));\n                     }\n                     err.emit();\n                     return ExpandResult::Ready(vec![]);"}, {"sha": "70d608a5ea428223d70fe6a2770f54c6389a6cdc", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -130,6 +130,8 @@ declare_features! (\n     (accepted, copy_closures, \"1.26.0\", Some(44490), None),\n     /// Allows `crate` in paths.\n     (accepted, crate_in_paths, \"1.30.0\", Some(45477), None),\n+    /// Allows using `#[debugger_visualizer]` attribute.\n+    (accepted, debugger_visualizer, \"CURRENT_RUSTC_VERSION\", Some(95939), None),\n     /// Allows rustc to inject a default alloc_error_handler\n     (accepted, default_alloc_error_handler, \"1.68.0\", Some(66741), None),\n     /// Allows using assigning a default type to type parameters in algebraic data type definitions."}, {"sha": "6201e5b619b871f4b1ca3067ef3eaef8932fa054", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -363,8 +363,6 @@ declare_features! (\n     (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n     /// Allows custom test frameworks with `#![test_runner]` and `#[test_case]`.\n     (active, custom_test_frameworks, \"1.30.0\", Some(50297), None),\n-    /// Allows using `#[debugger_visualizer]`.\n-    (active, debugger_visualizer, \"1.62.0\", Some(95939), None),\n     /// Allows declarative macros 2.0 (`macro`).\n     (active, decl_macro, \"1.17.0\", Some(39412), None),\n     /// Allows default type parameters to influence type inference."}, {"sha": "574419440de666ff04dabc88791bc34a11a91c11", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -403,16 +403,16 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         doc, Normal, template!(List: \"hidden|inline|...\", NameValueStr: \"string\"), DuplicatesOk\n     ),\n \n+    // Debugging\n+    ungated!(\n+        debugger_visualizer, Normal,\n+        template!(List: r#\"natvis_file = \"...\", gdb_script_file = \"...\"\"#), DuplicatesOk\n+    ),\n+\n     // ==========================================================================\n     // Unstable attributes:\n     // ==========================================================================\n \n-    // RFC #3191: #[debugger_visualizer] support\n-    gated!(\n-        debugger_visualizer, Normal, template!(List: r#\"natvis_file = \"...\", gdb_script_file = \"...\"\"#),\n-        DuplicatesOk, experimental!(debugger_visualizer)\n-    ),\n-\n     // Linking:\n     gated!(\n         naked, Normal, template!(Word), WarnFollowing, @only_local: true,"}, {"sha": "e1c030d3e198aff55f85cac0344993abcd81abca", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -293,6 +293,8 @@ language_item_table! {\n \n     PointerLike,             sym::pointer_like,        pointer_like,               Target::Trait,          GenericRequirement::Exact(0);\n \n+    ConstParamTy,            sym::const_param_ty,      const_param_ty_trait,       Target::Trait,          GenericRequirement::Exact(0);\n+\n     Poll,                    sym::Poll,                poll,                       Target::Enum,           GenericRequirement::None;\n     PollReady,               sym::Ready,               poll_ready_variant,         Target::Variant,        GenericRequirement::None;\n     PollPending,             sym::Pending,             poll_pending_variant,       Target::Variant,        GenericRequirement::None;"}, {"sha": "e4f225bdad73efbb5df218f518f75377aa4237c3", "filename": "compiler/rustc_hir_analysis/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fmessages.ftl?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -35,6 +35,10 @@ hir_analysis_field_already_declared =\n \n hir_analysis_expected_used_symbol = expected `used`, `used(compiler)` or `used(linker)`\n \n+hir_analysis_const_param_ty_impl_on_non_adt =\n+    the trait `ConstParamTy` may not be implemented for this type\n+    .label = type is not a structure or enumeration\n+\n hir_analysis_ambiguous_lifetime_bound =\n     ambiguous lifetime bound, explicit lifetime bound required\n "}, {"sha": "7b922f5d52599a1cd9a63a554c3fab2735662370", "filename": "compiler/rustc_hir_analysis/src/astconv/errors.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -243,13 +243,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let note = format!(\"{title} is defined in an impl for the type `{impl_ty}`\");\n \n             if let Some(span) = note_span {\n-                err.span_note(span, &note);\n+                err.span_note(span, note);\n             } else {\n-                err.note(&note);\n+                err.note(note);\n             }\n         }\n         if candidates.len() > limit {\n-            err.note(&format!(\"and {} others\", candidates.len() - limit));\n+            err.note(format!(\"and {} others\", candidates.len() - limit));\n         }\n     }\n \n@@ -303,7 +303,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 \"associated type `{name}` not found for `{self_ty}` in the current scope\"\n             );\n             err.span_label(name.span, format!(\"associated item not found in `{self_ty}`\"));\n-            err.note(&format!(\n+            err.note(format!(\n                 \"the associated type was found for\\n{type_candidates}{additional_types}\",\n             ));\n             add_def_label(&mut err);\n@@ -390,10 +390,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let mut err = tcx.sess.struct_span_err(\n             name.span,\n-            &format!(\"the associated type `{name}` exists for `{self_ty}`, but its trait bounds were not satisfied\")\n+            format!(\"the associated type `{name}` exists for `{self_ty}`, but its trait bounds were not satisfied\")\n         );\n         if !bounds.is_empty() {\n-            err.note(&format!(\n+            err.note(format!(\n                 \"the following trait bounds were not satisfied:\\n{}\",\n                 bounds.join(\"\\n\")\n             ));\n@@ -409,7 +409,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             if !tcx.sess.source_map().is_span_accessible(span) {\n                 continue;\n             }\n-            err.span_label(span, &msg);\n+            err.span_label(span, msg);\n         }\n         add_def_label(&mut err);\n         err.emit()\n@@ -589,7 +589,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n         if !suggestions.is_empty() {\n             err.multipart_suggestion(\n-                &format!(\"specify the associated type{}\", pluralize!(types_count)),\n+                format!(\"specify the associated type{}\", pluralize!(types_count)),\n                 suggestions,\n                 Applicability::HasPlaceholders,\n             );"}, {"sha": "ed011b9086a19b63ed97eb0459cf60f79a2b77a1", "filename": "compiler/rustc_hir_analysis/src/astconv/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -112,7 +112,7 @@ fn generic_arg_mismatch_err(\n             if let rustc_hir::ExprKind::Path(rustc_hir::QPath::Resolved(_, path)) = body.value.kind\n             {\n                 if let Res::Def(DefKind::Fn { .. }, id) = path.res {\n-                    err.help(&format!(\"`{}` is a function item, not a type\", tcx.item_name(id)));\n+                    err.help(format!(\"`{}` is a function item, not a type\", tcx.item_name(id)));\n                     err.help(\"function item types cannot be named directly\");\n                 }\n             }\n@@ -130,7 +130,7 @@ fn generic_arg_mismatch_err(\n         } else {\n             (arg.descr(), param.kind.descr())\n         };\n-        err.note(&format!(\"{} arguments must be provided before {} arguments\", first, last));\n+        err.note(format!(\"{} arguments must be provided before {} arguments\", first, last));\n         if let Some(help) = help {\n             err.help(help);\n         }"}, {"sha": "def192f6e10427f8fecb1630c3b7c575bba1294e", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 86, "deletions": 44, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -56,6 +56,9 @@ use std::slice;\n #[derive(Debug)]\n pub struct PathSeg(pub DefId, pub usize);\n \n+#[derive(Copy, Clone, Debug)]\n+pub struct OnlySelfBounds(pub bool);\n+\n pub trait AstConv<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx>;\n \n@@ -670,6 +673,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         args: &GenericArgs<'_>,\n         infer_args: bool,\n         self_ty: Ty<'tcx>,\n+        only_self_bounds: OnlySelfBounds,\n     ) -> GenericArgCountResult {\n         let (substs, arg_count) = self.create_substs_for_ast_path(\n             trait_ref_span,\n@@ -706,6 +710,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 &mut dup_bindings,\n                 binding_span.unwrap_or(binding.span),\n                 constness,\n+                only_self_bounds,\n             );\n             // Okay to ignore `Err` because of `ErrorGuaranteed` (see above).\n         }\n@@ -741,6 +746,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         self_ty: Ty<'tcx>,\n         bounds: &mut Bounds<'tcx>,\n         speculative: bool,\n+        only_self_bounds: OnlySelfBounds,\n     ) -> GenericArgCountResult {\n         let hir_id = trait_ref.hir_ref_id;\n         let binding_span = None;\n@@ -766,6 +772,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             args,\n             infer_args,\n             self_ty,\n+            only_self_bounds,\n         )\n     }\n \n@@ -777,6 +784,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         args: &GenericArgs<'_>,\n         self_ty: Ty<'tcx>,\n         bounds: &mut Bounds<'tcx>,\n+        only_self_bounds: OnlySelfBounds,\n     ) {\n         let binding_span = Some(span);\n         let constness = ty::BoundConstness::NotConst;\n@@ -799,6 +807,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             args,\n             infer_args,\n             self_ty,\n+            only_self_bounds,\n         );\n     }\n \n@@ -947,6 +956,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         ast_bounds: I,\n         bounds: &mut Bounds<'tcx>,\n         bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n+        only_self_bounds: OnlySelfBounds,\n     ) {\n         for ast_bound in ast_bounds {\n             match ast_bound {\n@@ -964,11 +974,18 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         param_ty,\n                         bounds,\n                         false,\n+                        only_self_bounds,\n                     );\n                 }\n                 &hir::GenericBound::LangItemTrait(lang_item, span, hir_id, args) => {\n                     self.instantiate_lang_item_trait_ref(\n-                        lang_item, span, hir_id, args, param_ty, bounds,\n+                        lang_item,\n+                        span,\n+                        hir_id,\n+                        args,\n+                        param_ty,\n+                        bounds,\n+                        only_self_bounds,\n                     );\n                 }\n                 hir::GenericBound::Outlives(lifetime) => {\n@@ -1006,8 +1023,19 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         &self,\n         param_ty: Ty<'tcx>,\n         ast_bounds: &[hir::GenericBound<'_>],\n+        only_self_bounds: OnlySelfBounds,\n     ) -> Bounds<'tcx> {\n-        self.compute_bounds_inner(param_ty, ast_bounds)\n+        let mut bounds = Bounds::default();\n+        self.add_bounds(\n+            param_ty,\n+            ast_bounds.iter(),\n+            &mut bounds,\n+            ty::List::empty(),\n+            only_self_bounds,\n+        );\n+        debug!(?bounds);\n+\n+        bounds\n     }\n \n     /// Convert the bounds in `ast_bounds` that refer to traits which define an associated type\n@@ -1029,17 +1057,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n         }\n \n-        self.compute_bounds_inner(param_ty, &result)\n-    }\n-\n-    fn compute_bounds_inner(\n-        &self,\n-        param_ty: Ty<'tcx>,\n-        ast_bounds: &[hir::GenericBound<'_>],\n-    ) -> Bounds<'tcx> {\n         let mut bounds = Bounds::default();\n-\n-        self.add_bounds(param_ty, ast_bounds.iter(), &mut bounds, ty::List::empty());\n+        self.add_bounds(\n+            param_ty,\n+            result.iter(),\n+            &mut bounds,\n+            ty::List::empty(),\n+            OnlySelfBounds(true),\n+        );\n         debug!(?bounds);\n \n         bounds\n@@ -1062,6 +1087,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         dup_bindings: &mut FxHashMap<DefId, Span>,\n         path_span: Span,\n         constness: ty::BoundConstness,\n+        only_self_bounds: OnlySelfBounds,\n     ) -> Result<(), ErrorGuaranteed> {\n         // Given something like `U: SomeTrait<T = X>`, we want to produce a\n         // predicate like `<U as SomeTrait>::T = X`. This is somewhat\n@@ -1142,9 +1168,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             tcx.sess\n                 .struct_span_err(\n                     binding.span,\n-                    &format!(\"{} `{}` is private\", assoc_item.kind, binding.item_name),\n+                    format!(\"{} `{}` is private\", assoc_item.kind, binding.item_name),\n                 )\n-                .span_label(binding.span, &format!(\"private {}\", assoc_item.kind))\n+                .span_label(binding.span, format!(\"private {}\", assoc_item.kind))\n                 .emit();\n         }\n         tcx.check_stability(assoc_item.def_id, Some(hir_ref_id), binding.span, None);\n@@ -1316,11 +1342,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         let expected = tcx.def_descr(assoc_item_def_id);\n                         let mut err = tcx.sess.struct_span_err(\n                             binding.span,\n-                            &format!(\"expected {expected} bound, found {got}\"),\n+                            format!(\"expected {expected} bound, found {got}\"),\n                         );\n                         err.span_note(\n                             tcx.def_span(assoc_item_def_id),\n-                            &format!(\"{expected} defined here\"),\n+                            format!(\"{expected} defined here\"),\n                         );\n \n                         if let hir::def::DefKind::AssocConst = def_kind\n@@ -1361,8 +1387,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 //\n                 // Calling `skip_binder` is okay, because `add_bounds` expects the `param_ty`\n                 // parameter to have a skipped binder.\n-                let param_ty = tcx.mk_alias(ty::Projection, projection_ty.skip_binder());\n-                self.add_bounds(param_ty, ast_bounds.iter(), bounds, projection_ty.bound_vars());\n+                //\n+                // NOTE: If `only_self_bounds` is true, do NOT expand this associated\n+                // type bound into a trait predicate, since we only want to add predicates\n+                // for the `Self` type.\n+                if !only_self_bounds.0 {\n+                    let param_ty = tcx.mk_alias(ty::Projection, projection_ty.skip_binder());\n+                    self.add_bounds(\n+                        param_ty,\n+                        ast_bounds.iter(),\n+                        bounds,\n+                        projection_ty.bound_vars(),\n+                        only_self_bounds,\n+                    );\n+                }\n             }\n         }\n         Ok(())\n@@ -1403,6 +1441,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 dummy_self,\n                 &mut bounds,\n                 false,\n+                // FIXME: This should be `true`, but we don't really handle\n+                // associated type bounds or type aliases in objects in a way\n+                // that makes this meaningful, I think.\n+                OnlySelfBounds(false),\n             ) {\n                 potential_assoc_types.extend(cur_potential_assoc_types);\n             }\n@@ -1466,7 +1508,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 \"additional use\",\n             );\n             first_trait.label_with_exp_info(&mut err, \"first non-auto trait\", \"first use\");\n-            err.help(&format!(\n+            err.help(format!(\n                 \"consider creating a new trait with all of these as supertraits and using that \\\n                  trait here instead: `trait NewTrait: {} {{}}`\",\n                 regular_traits\n@@ -1776,7 +1818,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 ([], []) => {\n                     err.span_suggestion_verbose(\n                         span,\n-                        &format!(\n+                        format!(\n                             \"if there were a type named `Type` that implements a trait named \\\n                              `Trait` with associated type `{name}`, you could use the \\\n                              fully-qualified path\",\n@@ -1788,7 +1830,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 ([], [trait_str]) => {\n                     err.span_suggestion_verbose(\n                         span,\n-                        &format!(\n+                        format!(\n                             \"if there were a type named `Example` that implemented `{trait_str}`, \\\n                              you could use the fully-qualified path\",\n                         ),\n@@ -1799,7 +1841,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 ([], traits) => {\n                     err.span_suggestions(\n                         span,\n-                        &format!(\n+                        format!(\n                             \"if there were a type named `Example` that implemented one of the \\\n                              traits with associated type `{name}`, you could use the \\\n                              fully-qualified path\",\n@@ -1814,7 +1856,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 ([type_str], []) => {\n                     err.span_suggestion_verbose(\n                         span,\n-                        &format!(\n+                        format!(\n                             \"if there were a trait named `Example` with associated type `{name}` \\\n                              implemented for `{type_str}`, you could use the fully-qualified path\",\n                         ),\n@@ -1825,7 +1867,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 (types, []) => {\n                     err.span_suggestions(\n                         span,\n-                        &format!(\n+                        format!(\n                             \"if there were a trait named `Example` with associated type `{name}` \\\n                              implemented for one of the types, you could use the fully-qualified \\\n                              path\",\n@@ -1991,15 +2033,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         );\n                     }\n                 } else {\n-                    err.note(&format!(\n+                    err.note(format!(\n                         \"associated type `{}` could derive from `{}`\",\n                         ty_param_name,\n                         bound.print_only_trait_path(),\n                     ));\n                 }\n             }\n             if !where_bounds.is_empty() {\n-                err.help(&format!(\n+                err.help(format!(\n                     \"consider introducing a new type parameter `T` and adding `where` constraints:\\\n                      \\n    where\\n        T: {},\\n{}\",\n                     ty_param_name,\n@@ -2067,14 +2109,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 // work for the `enum`, instead of just looking if it takes *any*.\n                                 err.span_suggestion_verbose(\n                                     args_span,\n-                                    &format!(\"{type_name} doesn't have generic parameters\"),\n+                                    format!(\"{type_name} doesn't have generic parameters\"),\n                                     \"\",\n                                     Applicability::MachineApplicable,\n                                 );\n                                 return;\n                             }\n                             let Ok(snippet) = tcx.sess.source_map().span_to_snippet(args_span) else {\n-                                err.note(&msg);\n+                                err.note(msg);\n                                 return;\n                             };\n                             let (qself_sugg_span, is_self) = if let hir::TyKind::Path(\n@@ -2108,12 +2150,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                         kw::SelfUpper == segment.ident.name,\n                                     ),\n                                     _ => {\n-                                        err.note(&msg);\n+                                        err.note(msg);\n                                         return;\n                                     }\n                                 }\n                             } else {\n-                                err.note(&msg);\n+                                err.note(msg);\n                                 return;\n                             };\n                             let suggestion = vec![\n@@ -2128,7 +2170,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 (args_span, String::new()),\n                             ];\n                             err.multipart_suggestion_verbose(\n-                                &msg,\n+                                msg,\n                                 suggestion,\n                                 Applicability::MaybeIncorrect,\n                             );\n@@ -2180,7 +2222,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let reported = if variant_resolution.is_some() {\n                     // Variant in type position\n                     let msg = format!(\"expected type, found variant `{}`\", assoc_ident);\n-                    tcx.sess.span_err(span, &msg)\n+                    tcx.sess.span_err(span, msg)\n                 } else if qself_ty.is_enum() {\n                     let mut err = struct_span_err!(\n                         tcx.sess,\n@@ -2251,7 +2293,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // Assume that if it's not matched, there must be a const defined with the same name\n             // but it was used in a type position.\n             let msg = format!(\"found associated const `{assoc_ident}` when type was expected\");\n-            let guar = tcx.sess.struct_span_err(span, &msg).emit();\n+            let guar = tcx.sess.struct_span_err(span, msg).emit();\n             return Err(guar);\n         };\n \n@@ -2271,7 +2313,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             also,\n                             tcx.def_kind_descr(kind, def_id)\n                         );\n-                        lint.span_note(tcx.def_span(def_id), &note_msg);\n+                        lint.span_note(tcx.def_span(def_id), note_msg);\n                     };\n \n                     could_refer_to(DefKind::Variant, variant_def_id, \"\");\n@@ -2468,9 +2510,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let msg = format!(\"{kind} `{name}` is private\");\n             let def_span = tcx.def_span(item);\n             tcx.sess\n-                .struct_span_err_with_code(span, &msg, rustc_errors::error_code!(E0624))\n-                .span_label(span, &format!(\"private {kind}\"))\n-                .span_label(def_span, &format!(\"{kind} defined here\"))\n+                .struct_span_err_with_code(span, msg, rustc_errors::error_code!(E0624))\n+                .span_label(span, format!(\"private {kind}\"))\n+                .span_label(def_span, format!(\"{kind} defined here\"))\n                 .emit();\n         }\n         tcx.check_stability(item, Some(block), span, None);\n@@ -2918,7 +2960,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 self.prohibit_generics(path.segments.iter(), |err| {\n                     if let Some(span) = tcx.def_ident_span(def_id) {\n                         let name = tcx.item_name(def_id);\n-                        err.span_note(span, &format!(\"type parameter `{name}` defined here\"));\n+                        err.span_note(span, format!(\"type parameter `{name}` defined here\"));\n                     }\n                 });\n \n@@ -2979,19 +3021,19 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         let mut span: MultiSpan = vec![t_sp].into();\n                         span.push_span_label(\n                             i_sp,\n-                            &format!(\"`Self` is on type `{type_name}` in this `impl`\"),\n+                            format!(\"`Self` is on type `{type_name}` in this `impl`\"),\n                         );\n                         let mut postfix = \"\";\n                         if generics == 0 {\n                             postfix = \", which doesn't have generic parameters\";\n                         }\n                         span.push_span_label(\n                             t_sp,\n-                            &format!(\"`Self` corresponds to this type{postfix}\"),\n+                            format!(\"`Self` corresponds to this type{postfix}\"),\n                         );\n-                        err.span_note(span, &msg);\n+                        err.span_note(span, msg);\n                     } else {\n-                        err.note(&msg);\n+                        err.note(msg);\n                     }\n                     for segment in path.segments {\n                         if let Some(args) = segment.args && segment.ident.name == kw::SelfUpper {\n@@ -3082,7 +3124,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         if let Some(args) = segment.args {\n                             err.span_suggestion_verbose(\n                                 segment.ident.span.shrink_to_hi().to(args.span_ext),\n-                                &format!(\"primitive type `{name}` doesn't have generic parameters\"),\n+                                format!(\"primitive type `{name}` doesn't have generic parameters\"),\n                                 \"\",\n                                 Applicability::MaybeIncorrect,\n                             );\n@@ -3373,7 +3415,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n             if !infer_replacements.is_empty() {\n                 diag.multipart_suggestion(\n-                    &format!(\n+                    format!(\n                     \"try replacing `_` with the type{} in the corresponding trait method signature\",\n                     rustc_errors::pluralize!(infer_replacements.len()),\n                 ),"}, {"sha": "61b66ae2593be5226f9d24f6914d4d11f96467fa", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -175,7 +175,7 @@ fn check_static_inhabited(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         }\n         // Generic statics are rejected, but we still reach this case.\n         Err(e) => {\n-            tcx.sess.delay_span_bug(span, &e.to_string());\n+            tcx.sess.delay_span_bug(span, e.to_string());\n             return;\n         }\n     };\n@@ -334,7 +334,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n                 &tcx.sess.parse_sess,\n                 sym::impl_trait_projections,\n                 span,\n-                &format!(\n+                format!(\n                     \"`{}` return type cannot contain a projection or `Self` that references \\\n                     lifetimes from a parent scope\",\n                     if is_async { \"async fn\" } else { \"impl Trait\" },\n@@ -428,7 +428,7 @@ fn check_opaque_meets_bounds<'tcx>(\n             let ty_err = ty_err.to_string(tcx);\n             tcx.sess.delay_span_bug(\n                 span,\n-                &format!(\"could not unify `{hidden_ty}` with revealed type:\\n{ty_err}\"),\n+                format!(\"could not unify `{hidden_ty}` with revealed type:\\n{ty_err}\"),\n             );\n         }\n     }\n@@ -618,11 +618,11 @@ fn check_item_type(tcx: TyCtxt<'_>, id: hir::ItemId) {\n                                 E0044,\n                                 \"foreign items may not have {kinds} parameters\",\n                             )\n-                            .span_label(item.span, &format!(\"can't have {kinds} parameters\"))\n+                            .span_label(item.span, format!(\"can't have {kinds} parameters\"))\n                             .help(\n                                 // FIXME: once we start storing spans for type arguments, turn this\n                                 // into a suggestion.\n-                                &format!(\n+                                format!(\n                                     \"replace the {} parameters with concrete {}{}\",\n                                     kinds,\n                                     kinds_pl,\n@@ -985,10 +985,7 @@ pub(super) fn check_packed(tcx: TyCtxt<'_>, sp: Span, def: ty::AdtDef<'_>) {\n \n                 err.span_note(\n                     tcx.def_span(def_spans[0].0),\n-                    &format!(\n-                        \"`{}` has a `#[repr(align)]` attribute\",\n-                        tcx.item_name(def_spans[0].0)\n-                    ),\n+                    format!(\"`{}` has a `#[repr(align)]` attribute\", tcx.item_name(def_spans[0].0)),\n                 );\n \n                 if def_spans.len() > 2 {\n@@ -997,7 +994,7 @@ pub(super) fn check_packed(tcx: TyCtxt<'_>, sp: Span, def: ty::AdtDef<'_>) {\n                         let ident = tcx.item_name(*adt_def);\n                         err.span_note(\n                             *span,\n-                            &if first {\n+                            if first {\n                                 format!(\n                                     \"`{}` contains a field of type `{}`\",\n                                     tcx.type_of(def.did()).subst_identity(),\n@@ -1466,10 +1463,10 @@ fn opaque_type_cycle_error(\n                     let ty_span = tcx.def_span(def_id);\n                     if !seen.contains(&ty_span) {\n                         let descr = if ty.is_impl_trait() { \"opaque \" } else { \"\" };\n-                        err.span_label(ty_span, &format!(\"returning this {descr}type `{ty}`\"));\n+                        err.span_label(ty_span, format!(\"returning this {descr}type `{ty}`\"));\n                         seen.insert(ty_span);\n                     }\n-                    err.span_label(sp, &format!(\"returning here with type `{ty}`\"));\n+                    err.span_label(sp, format!(\"returning here with type `{ty}`\"));\n                 }\n \n                 for closure_def_id in visitor.closures {"}, {"sha": "7384eb25f2ef7df51fda29c38d9aab87fb5f7b0d", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1273,7 +1273,7 @@ fn compare_number_of_generics<'tcx>(\n \n             let mut err = tcx.sess.struct_span_err_with_code(\n                 spans,\n-                &format!(\n+                format!(\n                     \"{} `{}` has {} {kind} parameter{} but its trait \\\n                      declaration has {} {kind} parameter{}\",\n                     item_kind,"}, {"sha": "64dff8e68b852fe75c393d844514d2fe111bc1d6", "filename": "compiler/rustc_hir_analysis/src/check/dropck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -52,7 +52,7 @@ pub fn check_drop_impl(tcx: TyCtxt<'_>, drop_impl_did: DefId) -> Result<(), Erro\n             let span = tcx.def_span(drop_impl_did);\n             let reported = tcx.sess.delay_span_bug(\n                 span,\n-                &format!(\"should have been rejected by coherence check: {dtor_self_type}\"),\n+                format!(\"should have been rejected by coherence check: {dtor_self_type}\"),\n             );\n             Err(reported)\n         }\n@@ -76,15 +76,15 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n         struct_span_err!(tcx.sess, drop_impl_span, E0366, \"`Drop` impls cannot be specialized\");\n     match arg {\n         ty::util::NotUniqueParam::DuplicateParam(arg) => {\n-            err.note(&format!(\"`{arg}` is mentioned multiple times\"))\n+            err.note(format!(\"`{arg}` is mentioned multiple times\"))\n         }\n         ty::util::NotUniqueParam::NotParam(arg) => {\n-            err.note(&format!(\"`{arg}` is not a generic parameter\"))\n+            err.note(format!(\"`{arg}` is not a generic parameter\"))\n         }\n     };\n     err.span_note(\n         item_span,\n-        &format!(\n+        format!(\n             \"use the same sequence of generic lifetime, type and const parameters \\\n                      as the {self_descr} definition\",\n         ),"}, {"sha": "e8785235c8318035b87b997b6c90ed776eab68bf", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -547,14 +547,14 @@ pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>)\n                 Err(_) => {\n                     let msg =\n                         format!(\"unrecognized platform-specific intrinsic function: `{name}`\");\n-                    tcx.sess.struct_span_err(it.span, &msg).emit();\n+                    tcx.sess.struct_span_err(it.span, msg).emit();\n                     return;\n                 }\n             }\n         }\n         _ => {\n             let msg = format!(\"unrecognized platform-specific intrinsic function: `{name}`\");\n-            tcx.sess.struct_span_err(it.span, &msg).emit();\n+            tcx.sess.struct_span_err(it.span, msg).emit();\n             return;\n         }\n     };"}, {"sha": "0bb1467ef3170362f8a2829cd7a00d058a903c0b", "filename": "compiler/rustc_hir_analysis/src/check/intrinsicck.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -130,7 +130,7 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n             _ => None,\n         };\n         let Some(asm_ty) = asm_ty else {\n-            let msg = &format!(\"cannot use value of type `{ty}` for inline assembly\");\n+            let msg = format!(\"cannot use value of type `{ty}` for inline assembly\");\n             let mut err = self.tcx.sess.struct_span_err(expr.span, msg);\n             err.note(\n                 \"only integers, floats, SIMD vectors, pointers and function pointers \\\n@@ -145,7 +145,7 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n         if !ty.is_copy_modulo_regions(self.tcx, self.param_env) {\n             let msg = \"arguments for inline assembly must be copyable\";\n             let mut err = self.tcx.sess.struct_span_err(expr.span, msg);\n-            err.note(&format!(\"`{ty}` does not implement the Copy trait\"));\n+            err.note(format!(\"`{ty}` does not implement the Copy trait\"));\n             err.emit();\n         }\n \n@@ -164,8 +164,8 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n                 let mut err = self.tcx.sess.struct_span_err(vec![in_expr.span, expr.span], msg);\n \n                 let in_expr_ty = (self.get_operand_ty)(in_expr);\n-                err.span_label(in_expr.span, &format!(\"type `{in_expr_ty}`\"));\n-                err.span_label(expr.span, &format!(\"type `{ty}`\"));\n+                err.span_label(in_expr.span, format!(\"type `{in_expr_ty}`\"));\n+                err.span_label(expr.span, format!(\"type `{ty}`\"));\n                 err.note(\n                     \"asm inout arguments must have the same type, \\\n                     unless they are both pointers or integers of the same size\",\n@@ -184,17 +184,17 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n         let reg_class = reg.reg_class();\n         let supported_tys = reg_class.supported_types(asm_arch);\n         let Some((_, feature)) = supported_tys.iter().find(|&&(t, _)| t == asm_ty) else {\n-            let msg = &format!(\"type `{ty}` cannot be used with this register class\");\n+            let msg = format!(\"type `{ty}` cannot be used with this register class\");\n             let mut err = self.tcx.sess.struct_span_err(expr.span, msg);\n             let supported_tys: Vec<_> =\n                 supported_tys.iter().map(|(t, _)| t.to_string()).collect();\n-            err.note(&format!(\n+            err.note(format!(\n                 \"register class `{}` supports these types: {}\",\n                 reg_class.name(),\n                 supported_tys.join(\", \"),\n             ));\n             if let Some(suggest) = reg_class.suggest_class(asm_arch, asm_ty) {\n-                err.help(&format!(\n+                err.help(format!(\n                     \"consider using the `{}` register class instead\",\n                     suggest.name()\n                 ));\n@@ -215,9 +215,9 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n         // register class is usable at all.\n         if let Some(feature) = feature {\n             if !target_features.contains(feature) {\n-                let msg = &format!(\"`{}` target feature is not enabled\", feature);\n+                let msg = format!(\"`{}` target feature is not enabled\", feature);\n                 let mut err = self.tcx.sess.struct_span_err(expr.span, msg);\n-                err.note(&format!(\n+                err.note(format!(\n                     \"this is required to use type `{}` with register class `{}`\",\n                     ty,\n                     reg_class.name(),\n@@ -252,10 +252,10 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n                     \"formatting may not be suitable for sub-register argument\",\n                     |lint| {\n                         lint.span_label(expr.span, \"for this argument\");\n-                        lint.help(&format!(\n+                        lint.help(format!(\n                             \"use `{{{idx}:{suggested_modifier}}}` to have the register formatted as `{suggested_result}`\",\n                         ));\n-                        lint.help(&format!(\n+                        lint.help(format!(\n                             \"or use `{{{idx}:{default_modifier}}}` to keep the default formatting of `{default_result}`\",\n                         ));\n                         lint\n@@ -301,7 +301,7 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n                         op.is_clobber(),\n                     ) {\n                         let msg = format!(\"cannot use register `{}`: {}\", reg.name(), msg);\n-                        self.tcx.sess.struct_span_err(*op_sp, &msg).emit();\n+                        self.tcx.sess.struct_span_err(*op_sp, msg).emit();\n                         continue;\n                     }\n                 }\n@@ -340,7 +340,7 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n                                 reg_class.name(),\n                                 feature\n                             );\n-                            self.tcx.sess.struct_span_err(*op_sp, &msg).emit();\n+                            self.tcx.sess.struct_span_err(*op_sp, msg).emit();\n                             // register isn't enabled, don't do more checks\n                             continue;\n                         }\n@@ -354,7 +354,7 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n                                     .intersperse(\", \")\n                                     .collect::<String>(),\n                             );\n-                            self.tcx.sess.struct_span_err(*op_sp, &msg).emit();\n+                            self.tcx.sess.struct_span_err(*op_sp, msg).emit();\n                             // register isn't enabled, don't do more checks\n                             continue;\n                         }\n@@ -436,7 +436,7 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n                                 self.tcx.sess.struct_span_err(*op_sp, \"invalid `sym` operand\");\n                             err.span_label(\n                                 self.tcx.def_span(anon_const.def_id),\n-                                &format!(\"is {} `{}`\", ty.kind().article(), ty),\n+                                format!(\"is {} `{}`\", ty.kind().article(), ty),\n                             );\n                             err.help(\"`sym` operands must refer to either a function or a static\");\n                             err.emit();"}, {"sha": "33c47da531e5e2a6f31f4246172ba693ea936feb", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -445,7 +445,7 @@ fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRe\n             let plural = pluralize!(unsatisfied_bounds.len());\n             let mut err = tcx.sess.struct_span_err(\n                 gat_item_hir.span,\n-                &format!(\"missing required bound{} on `{}`\", plural, gat_item_hir.ident),\n+                format!(\"missing required bound{} on `{}`\", plural, gat_item_hir.ident),\n             );\n \n             let suggestion = format!(\n@@ -455,14 +455,14 @@ fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRe\n             );\n             err.span_suggestion(\n                 gat_item_hir.generics.tail_span_for_predicate_suggestion(),\n-                &format!(\"add the required where clause{plural}\"),\n+                format!(\"add the required where clause{plural}\"),\n                 suggestion,\n                 Applicability::MachineApplicable,\n             );\n \n             let bound =\n                 if unsatisfied_bounds.len() > 1 { \"these bounds are\" } else { \"this bound is\" };\n-            err.note(&format!(\n+            err.note(format!(\n                 \"{} currently required to ensure that impls have maximum flexibility\",\n                 bound\n             ));\n@@ -916,14 +916,14 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n                     if is_ptr {\n                         tcx.sess.span_err(\n                             hir_ty.span,\n-                            &format!(\n+                            format!(\n                                 \"using {unsupported_type} as const generic parameters is forbidden\",\n                             ),\n                         );\n                     } else {\n                         let mut err = tcx.sess.struct_span_err(\n                             hir_ty.span,\n-                            &format!(\n+                            format!(\n                                 \"{unsupported_type} is forbidden as the type of a const generic parameter\",\n                             ),\n                         );\n@@ -1029,7 +1029,7 @@ fn check_type_defn<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item<'tcx>, all_sized: b\n                     let ty = tcx.erase_regions(ty);\n                     if ty.has_infer() {\n                         tcx.sess\n-                            .delay_span_bug(item.span, &format!(\"inference variables in {:?}\", ty));\n+                            .delay_span_bug(item.span, format!(\"inference variables in {:?}\", ty));\n                         // Just treat unresolved type expression as if it needs drop.\n                         true\n                     } else {\n@@ -1651,7 +1651,7 @@ fn check_method_receiver<'tcx>(\n                     &tcx.sess.parse_sess,\n                     sym::arbitrary_self_types,\n                     span,\n-                    &format!(\n+                    format!(\n                         \"`{receiver_ty}` cannot be used as the type of `self` without \\\n                          the `arbitrary_self_types` feature\",\n                     ),\n@@ -1874,10 +1874,10 @@ fn report_bivariance(\n     } else {\n         format!(\"consider removing `{param_name}` or referring to it in a field\")\n     };\n-    err.help(&msg);\n+    err.help(msg);\n \n     if matches!(param.kind, hir::GenericParamKind::Type { .. }) && !has_explicit_bounds {\n-        err.help(&format!(\n+        err.help(format!(\n             \"if you intended `{0}` to be a const parameter, use `const {0}: usize` instead\",\n             param_name\n         ));"}, {"sha": "3982b3531050a93550f2d1ed3312cd7999fd1e1f", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 152, "deletions": 111, "changes": 263, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1,9 +1,11 @@\n //! Check properties that are required by built-in traits and set\n //! up data structures required by type-checking/codegen.\n \n-use crate::errors::{CopyImplOnNonAdt, CopyImplOnTypeWithDtor, DropImplOnWrongItem};\n+use crate::errors::{\n+    ConstParamTyImplOnNonAdt, CopyImplOnNonAdt, CopyImplOnTypeWithDtor, DropImplOnWrongItem,\n+};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{struct_span_err, MultiSpan};\n+use rustc_errors::{struct_span_err, ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n@@ -14,9 +16,11 @@ use rustc_infer::infer::{DefineOpaqueTypes, TyCtxtInferExt};\n use rustc_infer::traits::Obligation;\n use rustc_middle::ty::adjustment::CoerceUnsizedInfo;\n use rustc_middle::ty::{self, suggest_constraining_type_params, Ty, TyCtxt, TypeVisitableExt};\n+use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt;\n use rustc_trait_selection::traits::misc::{\n-    type_allowed_to_implement_copy, CopyImplementationError, InfringingFieldsReason,\n+    type_allowed_to_implement_const_param_ty, type_allowed_to_implement_copy,\n+    ConstParamTyImplementationError, CopyImplementationError, InfringingFieldsReason,\n };\n use rustc_trait_selection::traits::ObligationCtxt;\n use rustc_trait_selection::traits::{self, ObligationCause};\n@@ -27,6 +31,7 @@ pub fn check_trait(tcx: TyCtxt<'_>, trait_def_id: DefId) {\n     Checker { tcx, trait_def_id }\n         .check(lang_items.drop_trait(), visit_implementation_of_drop)\n         .check(lang_items.copy_trait(), visit_implementation_of_copy)\n+        .check(lang_items.const_param_ty_trait(), visit_implementation_of_const_param_ty)\n         .check(lang_items.coerce_unsized_trait(), visit_implementation_of_coerce_unsized)\n         .check(lang_items.dispatch_from_dyn_trait(), visit_implementation_of_dispatch_from_dyn);\n }\n@@ -83,110 +88,7 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     match type_allowed_to_implement_copy(tcx, param_env, self_type, cause) {\n         Ok(()) => {}\n         Err(CopyImplementationError::InfringingFields(fields)) => {\n-            let mut err = struct_span_err!(\n-                tcx.sess,\n-                span,\n-                E0204,\n-                \"the trait `Copy` cannot be implemented for this type\"\n-            );\n-\n-            // We'll try to suggest constraining type parameters to fulfill the requirements of\n-            // their `Copy` implementation.\n-            let mut errors: BTreeMap<_, Vec<_>> = Default::default();\n-            let mut bounds = vec![];\n-\n-            let mut seen_tys = FxHashSet::default();\n-\n-            for (field, ty, reason) in fields {\n-                // Only report an error once per type.\n-                if !seen_tys.insert(ty) {\n-                    continue;\n-                }\n-\n-                let field_span = tcx.def_span(field.did);\n-                err.span_label(field_span, \"this field does not implement `Copy`\");\n-\n-                match reason {\n-                    InfringingFieldsReason::Fulfill(fulfillment_errors) => {\n-                        for error in fulfillment_errors {\n-                            let error_predicate = error.obligation.predicate;\n-                            // Only note if it's not the root obligation, otherwise it's trivial and\n-                            // should be self-explanatory (i.e. a field literally doesn't implement Copy).\n-\n-                            // FIXME: This error could be more descriptive, especially if the error_predicate\n-                            // contains a foreign type or if it's a deeply nested type...\n-                            if error_predicate != error.root_obligation.predicate {\n-                                errors\n-                                    .entry((ty.to_string(), error_predicate.to_string()))\n-                                    .or_default()\n-                                    .push(error.obligation.cause.span);\n-                            }\n-                            if let ty::PredicateKind::Clause(ty::Clause::Trait(\n-                                ty::TraitPredicate {\n-                                    trait_ref,\n-                                    polarity: ty::ImplPolarity::Positive,\n-                                    ..\n-                                },\n-                            )) = error_predicate.kind().skip_binder()\n-                            {\n-                                let ty = trait_ref.self_ty();\n-                                if let ty::Param(_) = ty.kind() {\n-                                    bounds.push((\n-                                        format!(\"{ty}\"),\n-                                        trait_ref.print_only_trait_path().to_string(),\n-                                        Some(trait_ref.def_id),\n-                                    ));\n-                                }\n-                            }\n-                        }\n-                    }\n-                    InfringingFieldsReason::Regions(region_errors) => {\n-                        for error in region_errors {\n-                            let ty = ty.to_string();\n-                            match error {\n-                                RegionResolutionError::ConcreteFailure(origin, a, b) => {\n-                                    let predicate = format!(\"{b}: {a}\");\n-                                    errors\n-                                        .entry((ty.clone(), predicate.clone()))\n-                                        .or_default()\n-                                        .push(origin.span());\n-                                    if let ty::RegionKind::ReEarlyBound(ebr) = *b && ebr.has_name() {\n-                                        bounds.push((b.to_string(), a.to_string(), None));\n-                                    }\n-                                }\n-                                RegionResolutionError::GenericBoundFailure(origin, a, b) => {\n-                                    let predicate = format!(\"{a}: {b}\");\n-                                    errors\n-                                        .entry((ty.clone(), predicate.clone()))\n-                                        .or_default()\n-                                        .push(origin.span());\n-                                    if let infer::region_constraints::GenericKind::Param(_) = a {\n-                                        bounds.push((a.to_string(), b.to_string(), None));\n-                                    }\n-                                }\n-                                _ => continue,\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-            for ((ty, error_predicate), spans) in errors {\n-                let span: MultiSpan = spans.into();\n-                err.span_note(\n-                    span,\n-                    &format!(\"the `Copy` impl for `{}` requires that `{}`\", ty, error_predicate),\n-                );\n-            }\n-            suggest_constraining_type_params(\n-                tcx,\n-                tcx.hir().get_generics(impl_did).expect(\"impls always have generics\"),\n-                &mut err,\n-                bounds.iter().map(|(param, constraint, def_id)| {\n-                    (param.as_str(), constraint.as_str(), *def_id)\n-                }),\n-                None,\n-            );\n-            err.emit();\n+            infringing_fields_error(tcx, fields, LangItem::Copy, impl_did, span);\n         }\n         Err(CopyImplementationError::NotAnAdt) => {\n             tcx.sess.emit_err(CopyImplOnNonAdt { span });\n@@ -197,6 +99,29 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     }\n }\n \n+fn visit_implementation_of_const_param_ty(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n+    let self_type = tcx.type_of(impl_did).subst_identity();\n+    assert!(!self_type.has_escaping_bound_vars());\n+\n+    let param_env = tcx.param_env(impl_did);\n+\n+    let span = match tcx.hir().expect_item(impl_did).expect_impl() {\n+        hir::Impl { polarity: hir::ImplPolarity::Negative(_), .. } => return,\n+        impl_ => impl_.self_ty.span,\n+    };\n+\n+    let cause = traits::ObligationCause::misc(span, impl_did);\n+    match type_allowed_to_implement_const_param_ty(tcx, param_env, self_type, cause) {\n+        Ok(()) => {}\n+        Err(ConstParamTyImplementationError::InfrigingFields(fields)) => {\n+            infringing_fields_error(tcx, fields, LangItem::ConstParamTy, impl_did, span);\n+        }\n+        Err(ConstParamTyImplementationError::NotAnAdtOrBuiltinAllowed) => {\n+            tcx.sess.emit_err(ConstParamTyImplOnNonAdt { span });\n+        }\n+    }\n+}\n+\n fn visit_implementation_of_coerce_unsized(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     debug!(\"visit_implementation_of_coerce_unsized: impl_did={:?}\", impl_did);\n \n@@ -288,7 +213,7 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n                                  for structs containing the field being coerced, \\\n                                  ZST fields with 1 byte alignment, and nothing else\",\n                             )\n-                            .note(&format!(\n+                            .note(format!(\n                                 \"extra field `{}` of type `{}` is not allowed\",\n                                 field.name, ty_a,\n                             ))\n@@ -316,7 +241,7 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n                             for a coercion between structures with a single field \\\n                             being coerced\",\n                     )\n-                    .note(&format!(\n+                    .note(format!(\n                         \"currently, {} fields need coercions: {}\",\n                         coerced_fields.len(),\n                         coerced_fields\n@@ -373,7 +298,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: LocalDefId) -> Coe\n     let coerce_unsized_trait = tcx.require_lang_item(LangItem::CoerceUnsized, Some(span));\n \n     let unsize_trait = tcx.lang_items().require(LangItem::Unsize).unwrap_or_else(|err| {\n-        tcx.sess.fatal(&format!(\"`CoerceUnsized` implementation {}\", err.to_string()));\n+        tcx.sess.fatal(format!(\"`CoerceUnsized` implementation {}\", err.to_string()));\n     });\n \n     let source = tcx.type_of(impl_did).subst_identity();\n@@ -544,7 +469,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: LocalDefId) -> Coe\n                     \"`CoerceUnsized` may only be implemented for \\\n                           a coercion between structures with one field being coerced\",\n                 )\n-                .note(&format!(\n+                .note(format!(\n                     \"currently, {} fields need coercions: {}\",\n                     diff_fields.len(),\n                     diff_fields\n@@ -593,3 +518,119 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: LocalDefId) -> Coe\n \n     CoerceUnsizedInfo { custom_kind: kind }\n }\n+\n+fn infringing_fields_error(\n+    tcx: TyCtxt<'_>,\n+    fields: Vec<(&ty::FieldDef, Ty<'_>, InfringingFieldsReason<'_>)>,\n+    lang_item: LangItem,\n+    impl_did: LocalDefId,\n+    impl_span: Span,\n+) -> ErrorGuaranteed {\n+    let trait_did = tcx.require_lang_item(lang_item, Some(impl_span));\n+\n+    let trait_name = tcx.def_path_str(trait_did);\n+\n+    let mut err = struct_span_err!(\n+        tcx.sess,\n+        impl_span,\n+        E0204,\n+        \"the trait `{trait_name}` cannot be implemented for this type\"\n+    );\n+\n+    // We'll try to suggest constraining type parameters to fulfill the requirements of\n+    // their `Copy` implementation.\n+    let mut errors: BTreeMap<_, Vec<_>> = Default::default();\n+    let mut bounds = vec![];\n+\n+    let mut seen_tys = FxHashSet::default();\n+\n+    for (field, ty, reason) in fields {\n+        // Only report an error once per type.\n+        if !seen_tys.insert(ty) {\n+            continue;\n+        }\n+\n+        let field_span = tcx.def_span(field.did);\n+        err.span_label(field_span, format!(\"this field does not implement `{trait_name}`\"));\n+\n+        match reason {\n+            InfringingFieldsReason::Fulfill(fulfillment_errors) => {\n+                for error in fulfillment_errors {\n+                    let error_predicate = error.obligation.predicate;\n+                    // Only note if it's not the root obligation, otherwise it's trivial and\n+                    // should be self-explanatory (i.e. a field literally doesn't implement Copy).\n+\n+                    // FIXME: This error could be more descriptive, especially if the error_predicate\n+                    // contains a foreign type or if it's a deeply nested type...\n+                    if error_predicate != error.root_obligation.predicate {\n+                        errors\n+                            .entry((ty.to_string(), error_predicate.to_string()))\n+                            .or_default()\n+                            .push(error.obligation.cause.span);\n+                    }\n+                    if let ty::PredicateKind::Clause(ty::Clause::Trait(ty::TraitPredicate {\n+                        trait_ref,\n+                        polarity: ty::ImplPolarity::Positive,\n+                        ..\n+                    })) = error_predicate.kind().skip_binder()\n+                    {\n+                        let ty = trait_ref.self_ty();\n+                        if let ty::Param(_) = ty.kind() {\n+                            bounds.push((\n+                                format!(\"{ty}\"),\n+                                trait_ref.print_only_trait_path().to_string(),\n+                                Some(trait_ref.def_id),\n+                            ));\n+                        }\n+                    }\n+                }\n+            }\n+            InfringingFieldsReason::Regions(region_errors) => {\n+                for error in region_errors {\n+                    let ty = ty.to_string();\n+                    match error {\n+                        RegionResolutionError::ConcreteFailure(origin, a, b) => {\n+                            let predicate = format!(\"{b}: {a}\");\n+                            errors\n+                                .entry((ty.clone(), predicate.clone()))\n+                                .or_default()\n+                                .push(origin.span());\n+                            if let ty::RegionKind::ReEarlyBound(ebr) = *b && ebr.has_name() {\n+                                        bounds.push((b.to_string(), a.to_string(), None));\n+                                    }\n+                        }\n+                        RegionResolutionError::GenericBoundFailure(origin, a, b) => {\n+                            let predicate = format!(\"{a}: {b}\");\n+                            errors\n+                                .entry((ty.clone(), predicate.clone()))\n+                                .or_default()\n+                                .push(origin.span());\n+                            if let infer::region_constraints::GenericKind::Param(_) = a {\n+                                bounds.push((a.to_string(), b.to_string(), None));\n+                            }\n+                        }\n+                        _ => continue,\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    for ((ty, error_predicate), spans) in errors {\n+        let span: MultiSpan = spans.into();\n+        err.span_note(\n+            span,\n+            format!(\"the `{trait_name}` impl for `{ty}` requires that `{error_predicate}`\"),\n+        );\n+    }\n+    suggest_constraining_type_params(\n+        tcx,\n+        tcx.hir().get_generics(impl_did).expect(\"impls always have generics\"),\n+        &mut err,\n+        bounds\n+            .iter()\n+            .map(|(param, constraint, def_id)| (param.as_str(), constraint.as_str(), *def_id)),\n+        None,\n+    );\n+\n+    err.emit()\n+}"}, {"sha": "3355902069248c69a611c1fe47f29eb82974c557", "filename": "compiler/rustc_hir_analysis/src/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -146,7 +146,7 @@ impl<'tcx> InherentCollect<'tcx> {\n                 );\n                 err.help(\"consider using an extension trait instead\");\n                 if let ty::Ref(_, subty, _) = ty.kind() {\n-                    err.note(&format!(\n+                    err.note(format!(\n                         \"you could also try moving the reference to \\\n                             uses of `{}` (such as `self`) within the implementation\",\n                         subty"}, {"sha": "5ce8a83aad7f7250a83e3a224fb75d1dee8ccf94", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -372,10 +372,10 @@ fn emit_orphan_check_error<'tcx>(\n \n                 if is_target_ty {\n                     // Point at `D<A>` in `impl<A, B> for C<B> in D<A>`\n-                    err.span_label(self_ty_span, &msg);\n+                    err.span_label(self_ty_span, msg);\n                 } else {\n                     // Point at `C<B>` in `impl<A, B> for C<B> in D<A>`\n-                    err.span_label(trait_span, &msg);\n+                    err.span_label(trait_span, msg);\n                 }\n             }\n             err.note(\"define and implement a trait or new type instead\");\n@@ -531,15 +531,15 @@ fn lint_auto_trait_impl<'tcx>(\n             let self_descr = tcx.def_descr(self_type_did);\n             match arg {\n                 ty::util::NotUniqueParam::DuplicateParam(arg) => {\n-                    lint.note(&format!(\"`{}` is mentioned multiple times\", arg));\n+                    lint.note(format!(\"`{}` is mentioned multiple times\", arg));\n                 }\n                 ty::util::NotUniqueParam::NotParam(arg) => {\n-                    lint.note(&format!(\"`{}` is not a generic parameter\", arg));\n+                    lint.note(format!(\"`{}` is not a generic parameter\", arg));\n                 }\n             }\n             lint.span_note(\n                 item_span,\n-                &format!(\n+                format!(\n                     \"try using the same sequence of generic parameters as the {} definition\",\n                     self_descr,\n                 ),"}, {"sha": "948b903e509adf90925d74432a03697291492862", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1,5 +1,5 @@\n use super::ItemCtxt;\n-use crate::astconv::AstConv;\n+use crate::astconv::{AstConv, OnlySelfBounds};\n use rustc_hir as hir;\n use rustc_infer::traits::util;\n use rustc_middle::ty::subst::InternalSubsts;\n@@ -26,7 +26,7 @@ fn associated_type_bounds<'tcx>(\n     );\n \n     let icx = ItemCtxt::new(tcx, assoc_item_def_id);\n-    let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds);\n+    let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds, OnlySelfBounds(false));\n     // Associated types are implicitly sized unless a `?Sized` bound is found\n     icx.astconv().add_implicitly_sized(&mut bounds, item_ty, ast_bounds, None, span);\n \n@@ -67,7 +67,7 @@ fn opaque_type_bounds<'tcx>(\n ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n     ty::print::with_no_queries!({\n         let icx = ItemCtxt::new(tcx, opaque_def_id);\n-        let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds);\n+        let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds, OnlySelfBounds(false));\n         // Opaque types are implicitly sized unless a `?Sized` bound is found\n         icx.astconv().add_implicitly_sized(&mut bounds, item_ty, ast_bounds, None, span);\n         debug!(?bounds);"}, {"sha": "83470342a7660bfd9e2c5cbcb2578df43b1de0ba", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 50, "deletions": 55, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1,4 +1,4 @@\n-use crate::astconv::AstConv;\n+use crate::astconv::{AstConv, OnlySelfBounds};\n use crate::bounds::Bounds;\n use crate::collect::ItemCtxt;\n use crate::constrained_generic_params as cgp;\n@@ -14,9 +14,6 @@ use rustc_middle::ty::{GenericPredicates, ToPredicate};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::{Span, DUMMY_SP};\n \n-#[derive(Debug)]\n-struct OnlySelfBounds(bool);\n-\n /// Returns a list of all type predicates (explicit and implicit) for the definition with\n /// ID `def_id`. This includes all predicates returned by `predicates_defined_on`, plus\n /// `Self: Trait` predicates for traits.\n@@ -99,8 +96,9 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Gen\n             | ItemKind::Struct(_, generics)\n             | ItemKind::Union(_, generics) => generics,\n \n-            ItemKind::Trait(_, _, generics, ..) | ItemKind::TraitAlias(generics, _) => {\n-                is_trait = Some(ty::TraitRef::identity(tcx, def_id.to_def_id()));\n+            ItemKind::Trait(_, _, generics, self_bounds, ..)\n+            | ItemKind::TraitAlias(generics, self_bounds) => {\n+                is_trait = Some(self_bounds);\n                 generics\n             }\n             ItemKind::OpaqueTy(OpaqueTy { generics, .. }) => generics,\n@@ -122,10 +120,14 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Gen\n \n     // Below we'll consider the bounds on the type parameters (including `Self`)\n     // and the explicit where-clauses, but to get the full set of predicates\n-    // on a trait we need to add in the supertrait bounds and bounds found on\n-    // associated types.\n-    if let Some(_trait_ref) = is_trait {\n-        predicates.extend(tcx.implied_predicates_of(def_id).predicates.iter().cloned());\n+    // on a trait we must also consider the bounds that follow the trait's name,\n+    // like `trait Foo: A + B + C`.\n+    if let Some(self_bounds) = is_trait {\n+        predicates.extend(\n+            icx.astconv()\n+                .compute_bounds(tcx.types.self_param, self_bounds, OnlySelfBounds(false))\n+                .predicates(),\n+        );\n     }\n \n     // In default impls, we can assume that the self type implements\n@@ -225,7 +227,13 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Gen\n                 }\n \n                 let mut bounds = Bounds::default();\n-                icx.astconv().add_bounds(ty, bound_pred.bounds.iter(), &mut bounds, bound_vars);\n+                icx.astconv().add_bounds(\n+                    ty,\n+                    bound_pred.bounds.iter(),\n+                    &mut bounds,\n+                    bound_vars,\n+                    OnlySelfBounds(false),\n+                );\n                 predicates.extend(bounds.predicates());\n             }\n \n@@ -608,7 +616,7 @@ pub(super) fn implied_predicates_with_filter(\n     let (superbounds, where_bounds_that_match) = match filter {\n         PredicateFilter::All => (\n             // Convert the bounds that follow the colon (or equal in trait aliases)\n-            icx.astconv().compute_bounds(self_param_ty, bounds),\n+            icx.astconv().compute_bounds(self_param_ty, bounds, OnlySelfBounds(false)),\n             // Also include all where clause bounds\n             icx.type_parameter_bounds_in_generics(\n                 generics,\n@@ -620,7 +628,7 @@ pub(super) fn implied_predicates_with_filter(\n         ),\n         PredicateFilter::SelfOnly => (\n             // Convert the bounds that follow the colon (or equal in trait aliases)\n-            icx.astconv().compute_bounds(self_param_ty, bounds),\n+            icx.astconv().compute_bounds(self_param_ty, bounds, OnlySelfBounds(true)),\n             // Include where clause bounds for `Self`\n             icx.type_parameter_bounds_in_generics(\n                 generics,\n@@ -774,32 +782,35 @@ impl<'tcx> ItemCtxt<'tcx> {\n         only_self_bounds: OnlySelfBounds,\n         assoc_name: Option<Ident>,\n     ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n-        ast_generics\n-            .predicates\n-            .iter()\n-            .filter_map(|wp| match wp {\n-                hir::WherePredicate::BoundPredicate(bp) => Some(bp),\n-                _ => None,\n-            })\n-            .flat_map(|bp| {\n-                let bt = if bp.is_param_bound(param_def_id.to_def_id()) {\n-                    Some(ty)\n-                } else if !only_self_bounds.0 {\n-                    Some(self.to_ty(bp.bounded_ty))\n-                } else {\n-                    None\n-                };\n-                let bvars = self.tcx.late_bound_vars(bp.hir_id);\n-\n-                bp.bounds.iter().filter_map(move |b| bt.map(|bt| (bt, b, bvars))).filter(\n-                    |(_, b, _)| match assoc_name {\n-                        Some(assoc_name) => self.bound_defines_assoc_item(b, assoc_name),\n-                        None => true,\n-                    },\n-                )\n-            })\n-            .flat_map(|(bt, b, bvars)| predicates_from_bound(self, bt, b, bvars))\n-            .collect()\n+        let mut bounds = Bounds::default();\n+\n+        for predicate in ast_generics.predicates {\n+            let hir::WherePredicate::BoundPredicate(predicate) = predicate else {\n+                continue;\n+            };\n+\n+            let bound_ty = if predicate.is_param_bound(param_def_id.to_def_id()) {\n+                ty\n+            } else if !only_self_bounds.0 {\n+                self.to_ty(predicate.bounded_ty)\n+            } else {\n+                continue;\n+            };\n+\n+            let bound_vars = self.tcx.late_bound_vars(predicate.hir_id);\n+            self.astconv().add_bounds(\n+                bound_ty,\n+                predicate.bounds.iter().filter(|bound| {\n+                    assoc_name\n+                        .map_or(true, |assoc_name| self.bound_defines_assoc_item(bound, assoc_name))\n+                }),\n+                &mut bounds,\n+                bound_vars,\n+                only_self_bounds,\n+            );\n+        }\n+\n+        bounds.predicates().collect()\n     }\n \n     #[instrument(level = \"trace\", skip(self))]\n@@ -817,19 +828,3 @@ impl<'tcx> ItemCtxt<'tcx> {\n         }\n     }\n }\n-\n-/// Converts a specific `GenericBound` from the AST into a set of\n-/// predicates that apply to the self type. A vector is returned\n-/// because this can be anywhere from zero predicates (`T: ?Sized` adds no\n-/// predicates) to one (`T: Foo`) to many (`T: Bar<X = i32>` adds `T: Bar`\n-/// and `<T as Bar>::X == i32`).\n-fn predicates_from_bound<'tcx>(\n-    astconv: &dyn AstConv<'tcx>,\n-    param_ty: Ty<'tcx>,\n-    bound: &'tcx hir::GenericBound<'tcx>,\n-    bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n-) -> Vec<(ty::Predicate<'tcx>, Span)> {\n-    let mut bounds = Bounds::default();\n-    astconv.add_bounds(param_ty, [bound].into_iter(), &mut bounds, bound_vars);\n-    bounds.predicates().collect()\n-}"}, {"sha": "2e5d058c6ed4db6f9dc2e7fb3d04cc294d0568fa", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -987,7 +987,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BoundVarContext<'a, 'tcx> {\n                                         lifetime.ident\n                                     ),\n                                     |lint| {\n-                                        let help = &format!(\n+                                        let help = format!(\n                                             \"you can use the `'static` lifetime directly, in place of `{}`\",\n                                             lifetime.ident,\n                                         );\n@@ -1365,7 +1365,7 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n \n         self.tcx.sess.delay_span_bug(\n             lifetime_ref.ident.span,\n-            &format!(\"Could not resolve {:?} in scope {:#?}\", lifetime_ref, self.scope,),\n+            format!(\"Could not resolve {:?} in scope {:#?}\", lifetime_ref, self.scope,),\n         );\n     }\n "}, {"sha": "c20fbfd1e40800e498ca7c88185fe6c3d5fc6389", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -828,14 +828,14 @@ fn infer_placeholder_type<'a>(\n                 if let Some(ty) = ty.make_suggestable(tcx, false) {\n                     err.span_suggestion(\n                         span,\n-                        &format!(\"provide a type for the {item}\", item = kind),\n+                        format!(\"provide a type for the {item}\", item = kind),\n                         format!(\"{colon} {ty}\"),\n                         Applicability::MachineApplicable,\n                     );\n                 } else {\n                     with_forced_trimmed_paths!(err.span_note(\n                         tcx.hir().body(body_id).value.span,\n-                        &format!(\"however, the inferred type `{ty}` cannot be named\"),\n+                        format!(\"however, the inferred type `{ty}` cannot be named\"),\n                     ));\n                 }\n             }\n@@ -856,7 +856,7 @@ fn infer_placeholder_type<'a>(\n                 } else {\n                     with_forced_trimmed_paths!(diag.span_note(\n                         tcx.hir().body(body_id).value.span,\n-                        &format!(\"however, the inferred type `{ty}` cannot be named\"),\n+                        format!(\"however, the inferred type `{ty}` cannot be named\"),\n                     ));\n                 }\n             }"}, {"sha": "25ad1bed763506c827aa9d3597339740b2825049", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -107,6 +107,14 @@ pub struct CopyImplOnNonAdt {\n     pub span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_const_param_ty_impl_on_non_adt)]\n+pub struct ConstParamTyImplOnNonAdt {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(hir_analysis_trait_object_declared_with_no_traits, code = \"E0224\")]\n pub struct TraitObjectDeclaredWithNoTraits {"}, {"sha": "f070b4f9bae736fb191ff713eaa60e188d590aad", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -76,7 +76,7 @@ fn enforce_impl_params_are_constrained(tcx: TyCtxt<'_>, impl_def_id: LocalDefId)\n         // (#36836)\n         tcx.sess.delay_span_bug(\n             tcx.def_span(impl_def_id),\n-            &format!(\n+            format!(\n                 \"potentially unconstrained type parameters weren't evaluated: {:?}\",\n                 impl_self_ty,\n             ),"}, {"sha": "5cca2dacb5c7f730321b8b00daa53868d3b8f128", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -272,7 +272,7 @@ fn check_duplicate_params<'tcx>(\n     if let (_, [duplicate, ..]) = base_params.partition_dedup() {\n         let param = impl1_substs[duplicate.0 as usize];\n         tcx.sess\n-            .struct_span_err(span, &format!(\"specializing impl repeats parameter `{}`\", param))\n+            .struct_span_err(span, format!(\"specializing impl repeats parameter `{}`\", param))\n             .emit();\n     }\n }\n@@ -464,7 +464,7 @@ fn check_specialization_on<'tcx>(tcx: TyCtxt<'tcx>, predicate: ty::Predicate<'tc\n                 tcx.sess\n                     .struct_span_err(\n                         span,\n-                        &format!(\n+                        format!(\n                             \"cannot specialize on trait `{}`\",\n                             tcx.def_path_str(trait_ref.def_id),\n                         ),\n@@ -479,7 +479,7 @@ fn check_specialization_on<'tcx>(tcx: TyCtxt<'tcx>, predicate: ty::Predicate<'tc\n             tcx.sess\n                 .struct_span_err(\n                     span,\n-                    &format!(\"cannot specialize on associated type `{projection_ty} == {term}`\",),\n+                    format!(\"cannot specialize on associated type `{projection_ty} == {term}`\",),\n                 )\n                 .emit();\n         }\n@@ -495,7 +495,7 @@ fn check_specialization_on<'tcx>(tcx: TyCtxt<'tcx>, predicate: ty::Predicate<'tc\n         }\n         _ => {\n             tcx.sess\n-                .struct_span_err(span, &format!(\"cannot specialize on predicate `{}`\", predicate))\n+                .struct_span_err(span, format!(\"cannot specialize on predicate `{}`\", predicate))\n                 .emit();\n         }\n     }"}, {"sha": "961457b75794aef72d41536dfd949bc768e11eb9", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -116,7 +116,7 @@ use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode,\n \n use std::ops::Not;\n \n-use astconv::AstConv;\n+use astconv::{AstConv, OnlySelfBounds};\n use bounds::Bounds;\n \n fluent_messages! { \"../messages.ftl\" }\n@@ -531,6 +531,7 @@ pub fn hir_trait_to_predicates<'tcx>(\n         self_ty,\n         &mut bounds,\n         true,\n+        OnlySelfBounds(false),\n     );\n \n     bounds"}, {"sha": "42612eed7508b4bc506dc873aae02bb4dc1f4719", "filename": "compiler/rustc_hir_analysis/src/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -61,7 +61,7 @@ fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[(ty::Clau\n \n                     let span = tcx.def_span(item_def_id);\n                     let mut err = tcx.sess.struct_span_err(span, \"rustc_outlives\");\n-                    for p in &pred {\n+                    for p in pred {\n                         err.note(p);\n                     }\n                     err.emit();"}, {"sha": "c37dff61b727a606d6aae049e830500707805cf2", "filename": "compiler/rustc_hir_analysis/src/structured_errors/missing_cast_for_variadic_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for MissingCastForVariadicArg<'tcx, '_> {\n         &self,\n         mut err: DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        err.note(&format!(\n+        err.note(format!(\n             \"certain types, like `{}`, must be casted before passing them to a \\\n                 variadic function, because of arcane ABI rules dictated by the C \\\n                 standard\","}, {"sha": "6d1a1634ab4e82f943d73c24ab85ecf2db01ae40", "filename": "compiler/rustc_hir_analysis/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -480,7 +480,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         let span = self.path_segment.ident.span;\n         let msg = self.create_error_message();\n \n-        self.tcx.sess.struct_span_err_with_code(span, &msg, self.code())\n+        self.tcx.sess.struct_span_err_with_code(span, msg, self.code())\n     }\n \n     /// Builds the `expected 1 type argument / supplied 2 type arguments` message.\n@@ -602,7 +602,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n \n                 err.span_suggestion_verbose(\n                     span.shrink_to_hi(),\n-                    &msg,\n+                    msg,\n                     sugg,\n                     Applicability::HasPlaceholders,\n                 );\n@@ -625,7 +625,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n                 let sugg = format!(\"{}{}{}\", sugg_prefix, suggested_args, sugg_suffix);\n                 debug!(\"sugg: {:?}\", sugg);\n \n-                err.span_suggestion_verbose(sugg_span, &msg, sugg, Applicability::HasPlaceholders);\n+                err.span_suggestion_verbose(sugg_span, msg, sugg, Applicability::HasPlaceholders);\n             }\n             AngleBrackets::Implied => {\n                 // We never encounter missing lifetimes in situations in which lifetimes are elided\n@@ -652,7 +652,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n \n                 err.span_suggestion_verbose(\n                     span.shrink_to_hi(),\n-                    &msg,\n+                    msg,\n                     sugg,\n                     Applicability::HasPlaceholders,\n                 );\n@@ -683,7 +683,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n                 let sugg = format!(\"{}{}{}\", sugg_prefix, suggested_args, sugg_suffix);\n                 debug!(\"sugg: {:?}\", sugg);\n \n-                err.span_suggestion_verbose(sugg_span, &msg, sugg, Applicability::HasPlaceholders);\n+                err.span_suggestion_verbose(sugg_span, msg, sugg, Applicability::HasPlaceholders);\n             }\n         }\n     }\n@@ -885,7 +885,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n \n             err.span_suggestion(\n                 span_redundant_lt_args,\n-                &msg_lifetimes,\n+                msg_lifetimes,\n                 \"\",\n                 Applicability::MaybeIncorrect,\n             );\n@@ -927,7 +927,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n \n             err.span_suggestion(\n                 span_redundant_type_or_const_args,\n-                &msg_types_or_consts,\n+                msg_types_or_consts,\n                 \"\",\n                 Applicability::MaybeIncorrect,\n             );\n@@ -943,7 +943,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n \n             if !suggestions.is_empty() {\n                 err.multipart_suggestion_verbose(\n-                    &format!(\n+                    format!(\n                         \"replace the generic bound{s} with the associated type{s}\",\n                         s = pluralize!(unbound_types.len())\n                     ),\n@@ -969,7 +969,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n                 },\n             );\n \n-            err.span_suggestion(span, &msg, \"\", Applicability::MaybeIncorrect);\n+            err.span_suggestion(span, msg, \"\", Applicability::MaybeIncorrect);\n         } else if redundant_lifetime_args && redundant_type_or_const_args {\n             remove_lifetime_args(err);\n             remove_type_or_const_args(err);\n@@ -1029,7 +1029,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             )\n         };\n \n-        err.span_note(spans, &msg);\n+        err.span_note(spans, msg);\n     }\n \n     /// Add note if `impl Trait` is explicitly specified."}, {"sha": "d93e8efc1b59ad2d0f344fc064babfde819a91b6", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1407,10 +1407,16 @@ impl<'a> State<'a> {\n                 self.print_type(ty);\n             }\n             hir::ExprKind::Type(expr, ty) => {\n-                let prec = AssocOp::Colon.precedence() as i8;\n-                self.print_expr_maybe_paren(expr, prec);\n-                self.word_space(\":\");\n+                self.word(\"type_ascribe!(\");\n+                self.ibox(0);\n+                self.print_expr(expr);\n+\n+                self.word(\",\");\n+                self.space_if_not_bol();\n                 self.print_type(ty);\n+\n+                self.end();\n+                self.word(\")\");\n             }\n             hir::ExprKind::DropTemps(init) => {\n                 // Print `{`:"}, {"sha": "7d2f7e876083a7d2e6ddbc09b30b07da9142ee31", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -271,7 +271,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             &cause,\n             &mut |err| {\n                 if let Some((span, msg)) = &ret_reason {\n-                    err.span_label(*span, msg);\n+                    err.span_label(*span, msg.clone());\n                 } else if let ExprKind::Block(block, _) = &then_expr.kind\n                     && let Some(expr) = &block.expr\n                 {"}, {"sha": "655ab94eb48d1336afedf2763690df32a11911b3", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -397,7 +397,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             .sess\n                             .struct_span_err(\n                                 callee_expr.span,\n-                                &format!(\"evaluate({:?}) = {:?}\", predicate, result),\n+                                format!(\"evaluate({:?}) = {:?}\", predicate, result),\n                             )\n                             .span_label(predicate_span, \"predicate\")\n                             .emit();\n@@ -630,7 +630,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if let Some((removal_span, kind, path)) = &unit_variant {\n             err.span_suggestion_verbose(\n                 *removal_span,\n-                &format!(\n+                format!(\n                     \"`{path}` is a unit {kind}, and does not take parentheses to be constructed\",\n                 ),\n                 \"\","}, {"sha": "a92f368e0830e2c5583a3a709e3ba20e5adf01af", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -146,7 +146,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let reported = self\n                     .tcx\n                     .sess\n-                    .delay_span_bug(span, &format!(\"`{:?}` should be sized but is not?\", t));\n+                    .delay_span_bug(span, format!(\"`{:?}` should be sized but is not?\", t));\n                 return Err(reported);\n             }\n         })\n@@ -270,7 +270,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     fcx,\n                 );\n                 if self.cast_ty.is_integral() {\n-                    err.help(&format!(\n+                    err.help(format!(\n                         \"cast through {} first\",\n                         match e {\n                             CastError::NeedViaPtr => \"a raw pointer\",\n@@ -292,7 +292,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     self.cast_ty,\n                     fcx,\n                 )\n-                .help(&format!(\n+                .help(format!(\n                     \"cast through {} first\",\n                     match e {\n                         CastError::NeedViaInt => \"an integer\",\n@@ -651,13 +651,13 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                             );\n                         }\n                         Err(_) => {\n-                            let msg = &format!(\"did you mean `&{}{}`?\", mtstr, tstr);\n+                            let msg = format!(\"did you mean `&{}{}`?\", mtstr, tstr);\n                             err.span_help(self.cast_span, msg);\n                         }\n                     }\n                 } else {\n                     let msg =\n-                        &format!(\"consider using an implicit coercion to `&{mtstr}{tstr}` instead\");\n+                        format!(\"consider using an implicit coercion to `&{mtstr}{tstr}` instead\");\n                     err.span_help(self.span, msg);\n                 }\n             }\n@@ -674,7 +674,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     Err(_) => {\n                         err.span_help(\n                             self.cast_span,\n-                            &format!(\"you might have meant `Box<{tstr}>`\"),\n+                            format!(\"you might have meant `Box<{tstr}>`\"),\n                         );\n                     }\n                 }"}, {"sha": "1a3a14c92a5374591a18c2361e5c5e30b56bab4a", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -707,9 +707,9 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 &self.tcx.sess.parse_sess,\n                 sym::trait_upcasting,\n                 self.cause.span,\n-                &format!(\"cannot cast `{sub}` to `{sup}`, trait upcasting coercion is experimental\"),\n+                format!(\"cannot cast `{sub}` to `{sup}`, trait upcasting coercion is experimental\"),\n             );\n-            err.note(&format!(\"required when coercing `{source}` into `{target}`\"));\n+            err.note(format!(\"required when coercing `{source}` into `{target}`\"));\n             err.emit();\n         }\n \n@@ -1657,7 +1657,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             \"the function expects a value to always be returned, but loops might run zero times\",\n         );\n         if MAXITER < ret_exprs.len() {\n-            err.note(&format!(\n+            err.note(format!(\n                 \"if the loop doesn't execute, {} other values would never get returned\",\n                 ret_exprs.len() - MAXITER\n             ));\n@@ -1767,7 +1767,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         {\n             err.span_note(\n                 sp,\n-                &format!(\n+                format!(\n                     \"return type inferred to be `{}` here\",\n                     expected\n                 ),\n@@ -1864,7 +1864,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     Applicability::MaybeIncorrect,\n                 );\n             } else {\n-                err.help(&format!(\n+                err.help(format!(\n                     \"if the trait `{}` were object safe, you could return a boxed trait object\",\n                     &snippet[5..]\n                 ));"}, {"sha": "ee81ea345a64ebd5da505f6badc5801b337814a9", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -543,13 +543,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // We are pointing at the binding's type or initializer value, but it's pattern\n                     // is in a different line, so we point at both.\n                     err.span_label(secondary_span, \"expected due to the type of this binding\");\n-                    err.span_label(primary_span, &format!(\"expected due to this{post_message}\"));\n+                    err.span_label(primary_span, format!(\"expected due to this{post_message}\"));\n                 } else if post_message == \"\" {\n                     // We are pointing at either the assignment lhs or the binding def pattern.\n                     err.span_label(primary_span, \"expected due to the type of this binding\");\n                 } else {\n                     // We are pointing at the binding's type or initializer value.\n-                    err.span_label(primary_span, &format!(\"expected due to this{post_message}\"));\n+                    err.span_label(primary_span, format!(\"expected due to this{post_message}\"));\n                 }\n \n                 if !lhs.is_syntactic_place_expr() {\n@@ -566,7 +566,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ) if rhs.hir_id == expr.hir_id\n                 && self.typeck_results.borrow().expr_ty_adjusted_opt(lhs) == Some(expected) =>\n             {\n-                err.span_label(lhs.span, &format!(\"expected because this is `{expected}`\"));\n+                err.span_label(lhs.span, format!(\"expected because this is `{expected}`\"));\n             }\n             _ => {}\n         }\n@@ -704,19 +704,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         });\n         err.span_note(\n             path_span,\n-            &format!(\n+            format!(\n                 \"the `{}` call is resolved to the method in `{container}`, shadowing {tail}\",\n                 path.ident,\n             ),\n         );\n         if suggestions.len() > other_methods_in_scope.len() {\n-            err.note(&format!(\n+            err.note(format!(\n                 \"additionally, there are {} other available methods that aren't in scope\",\n                 suggestions.len() - other_methods_in_scope.len()\n             ));\n         }\n         err.multipart_suggestions(\n-            &format!(\n+            format!(\n                 \"you might have meant to call {}; you can use the fully-qualified path to call {} \\\n                  explicitly\",\n                 if suggestions.len() == 1 {\n@@ -941,7 +941,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 [(variant, ctor_kind, field_name, note)] => {\n                     // Just a single matching variant.\n                     err.multipart_suggestion_verbose(\n-                        &format!(\n+                        format!(\n                             \"try wrapping the expression in `{variant}`{note}\",\n                             note = note.as_deref().unwrap_or(\"\")\n                         ),\n@@ -953,7 +953,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 _ => {\n                     // More than one matching variant.\n                     err.multipart_suggestions(\n-                        &format!(\n+                        format!(\n                             \"try wrapping the expression in a variant of `{}`\",\n                             self.tcx.def_path_str(expected_adt.did())\n                         ),\n@@ -1726,19 +1726,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ];\n                     (msg, suggestion)\n                 } else {\n-                    let msg = format!(\"{msg} and panic if the converted value doesn't fit\");\n+                    let msg =\n+                        format!(\"{} and panic if the converted value doesn't fit\", msg.clone());\n                     let mut suggestion = sugg.clone();\n                     suggestion.push((\n                         expr.span.shrink_to_hi(),\n                         format!(\"{close_paren}.try_into().unwrap()\"),\n                     ));\n                     (msg, suggestion)\n                 };\n-                err.multipart_suggestion_verbose(\n-                    &msg,\n-                    suggestion,\n-                    Applicability::MachineApplicable,\n-                );\n+                err.multipart_suggestion_verbose(msg, suggestion, Applicability::MachineApplicable);\n             };\n \n         let suggest_to_change_suffix_or_into =\n@@ -1755,21 +1752,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let always_fallible = found_to_exp_is_fallible\n                     && (exp_to_found_is_fallible || expected_ty_expr.is_none());\n                 let msg = if literal_is_ty_suffixed(expr) {\n-                    &lit_msg\n+                    lit_msg.clone()\n                 } else if always_fallible && (is_negative_int(expr) && is_uint(expected_ty)) {\n                     // We now know that converting either the lhs or rhs is fallible. Before we\n                     // suggest a fallible conversion, check if the value can never fit in the\n                     // expected type.\n                     let msg = format!(\"`{src}` cannot fit into type `{expected_ty}`\");\n-                    err.note(&msg);\n+                    err.note(msg);\n                     return;\n                 } else if in_const_context {\n                     // Do not recommend `into` or `try_into` in const contexts.\n                     return;\n                 } else if found_to_exp_is_fallible {\n                     return suggest_fallible_into_or_lhs_from(err, exp_to_found_is_fallible);\n                 } else {\n-                    &msg\n+                    msg.clone()\n                 };\n                 let suggestion = if literal_is_ty_suffixed(expr) {\n                     suffix_suggestion.clone()\n@@ -1831,14 +1828,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     suggest_to_change_suffix_or_into(err, false, true);\n                 } else if literal_is_ty_suffixed(expr) {\n                     err.multipart_suggestion_verbose(\n-                        &lit_msg,\n+                        lit_msg,\n                         suffix_suggestion,\n                         Applicability::MachineApplicable,\n                     );\n                 } else if can_cast {\n                     // Missing try_into implementation for `f64` to `f32`\n                     err.multipart_suggestion_verbose(\n-                        &format!(\"{cast_msg}, producing the closest possible value\"),\n+                        format!(\"{cast_msg}, producing the closest possible value\"),\n                         cast_suggestion,\n                         Applicability::MaybeIncorrect, // lossy conversion\n                     );\n@@ -1848,14 +1845,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             (&ty::Uint(_) | &ty::Int(_), &ty::Float(_)) => {\n                 if literal_is_ty_suffixed(expr) {\n                     err.multipart_suggestion_verbose(\n-                        &lit_msg,\n+                        lit_msg,\n                         suffix_suggestion,\n                         Applicability::MachineApplicable,\n                     );\n                 } else if can_cast {\n                     // Missing try_into implementation for `{float}` to `{integer}`\n                     err.multipart_suggestion_verbose(\n-                        &format!(\"{msg}, rounding the float towards zero\"),\n+                        format!(\"{msg}, rounding the float towards zero\"),\n                         cast_suggestion,\n                         Applicability::MaybeIncorrect, // lossy conversion\n                     );\n@@ -1866,22 +1863,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // if `found` is `None` (meaning found is `usize`), don't suggest `.into()`\n                 if exp.bit_width() > found.bit_width().unwrap_or(256) {\n                     err.multipart_suggestion_verbose(\n-                        &format!(\n+                        format!(\n                             \"{msg}, producing the floating point representation of the integer\",\n                         ),\n                         into_suggestion,\n                         Applicability::MachineApplicable,\n                     );\n                 } else if literal_is_ty_suffixed(expr) {\n                     err.multipart_suggestion_verbose(\n-                        &lit_msg,\n+                        lit_msg,\n                         suffix_suggestion,\n                         Applicability::MachineApplicable,\n                     );\n                 } else {\n                     // Missing try_into implementation for `{integer}` to `{float}`\n                     err.multipart_suggestion_verbose(\n-                        &format!(\n+                        format!(\n                             \"{cast_msg}, producing the floating point representation of the integer, \\\n                                  rounded if necessary\",\n                         ),\n@@ -1895,23 +1892,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // if `found` is `None` (meaning found is `isize`), don't suggest `.into()`\n                 if exp.bit_width() > found.bit_width().unwrap_or(256) {\n                     err.multipart_suggestion_verbose(\n-                        &format!(\n+                        format!(\n                             \"{}, producing the floating point representation of the integer\",\n-                            &msg,\n+                            msg.clone(),\n                         ),\n                         into_suggestion,\n                         Applicability::MachineApplicable,\n                     );\n                 } else if literal_is_ty_suffixed(expr) {\n                     err.multipart_suggestion_verbose(\n-                        &lit_msg,\n+                        lit_msg,\n                         suffix_suggestion,\n                         Applicability::MachineApplicable,\n                     );\n                 } else {\n                     // Missing try_into implementation for `{integer}` to `{float}`\n                     err.multipart_suggestion_verbose(\n-                        &format!(\n+                        format!(\n                             \"{}, producing the floating point representation of the integer, \\\n                                 rounded if necessary\",\n                             &msg,\n@@ -1928,7 +1925,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 &ty::Char,\n             ) => {\n                 err.multipart_suggestion_verbose(\n-                    &format!(\"{cast_msg}, since a `char` always occupies 4 bytes\"),\n+                    format!(\"{cast_msg}, since a `char` always occupies 4 bytes\"),\n                     cast_suggestion,\n                     Applicability::MachineApplicable,\n                 );"}, {"sha": "778ef06d57e20d61cdd1ebe3d499f40a5ae2392b", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1944,12 +1944,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         private_fields: Vec<&ty::FieldDef>,\n         used_fields: &'tcx [hir::ExprField<'tcx>],\n     ) {\n-        let mut err = self.tcx.sess.struct_span_err(\n-            span,\n-            &format!(\n-                \"cannot construct `{adt_ty}` with struct literal syntax due to private fields\",\n-            ),\n-        );\n+        let mut err =\n+            self.tcx.sess.struct_span_err(\n+                span,\n+                format!(\n+                    \"cannot construct `{adt_ty}` with struct literal syntax due to private fields\",\n+                ),\n+            );\n         let (used_private_fields, remaining_private_fields): (\n             Vec<(Symbol, Span, bool)>,\n             Vec<(Symbol, Span, bool)>,\n@@ -2045,7 +2046,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     err.span_label(field.ident.span, \"field does not exist\");\n                     err.span_suggestion_verbose(\n                         expr_span,\n-                        &format!(\n+                        format!(\n                             \"`{adt}::{variant}` is a tuple {kind_name}, use the appropriate syntax\",\n                             adt = ty,\n                             variant = variant.name,\n@@ -2063,7 +2064,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     err.span_label(field.ident.span, \"field does not exist\");\n                     err.span_suggestion_verbose(\n                         expr_span,\n-                        &format!(\n+                        format!(\n                             \"`{adt}` is a tuple {kind_name}, use the appropriate syntax\",\n                             adt = ty,\n                             kind_name = kind_name,\n@@ -2105,7 +2106,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             let available_field_names =\n                                 self.available_field_names(variant, expr_span);\n                             if !available_field_names.is_empty() {\n-                                err.note(&format!(\n+                                err.note(format!(\n                                     \"available fields are: {}\",\n                                     self.name_series_display(available_field_names)\n                                 ));\n@@ -2384,7 +2385,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n         if add_label {\n-            err.span_label(field_ident.span, &format!(\"field not found in `{ty}`\"));\n+            err.span_label(field_ident.span, format!(\"field not found in `{ty}`\"));\n         }\n     }\n \n@@ -2565,7 +2566,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let param_span = self.tcx.hir().span(param_hir_id);\n         let param_name = self.tcx.hir().ty_param_name(param_def_id.expect_local());\n \n-        err.span_label(param_span, &format!(\"type parameter '{param_name}' declared here\"));\n+        err.span_label(param_span, format!(\"type parameter '{param_name}' declared here\"));\n     }\n \n     fn suggest_fields_on_recordish(\n@@ -2589,7 +2590,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let struct_variant_def = def.non_enum_variant();\n             let field_names = self.available_field_names(struct_variant_def, access_span);\n             if !field_names.is_empty() {\n-                err.note(&format!(\n+                err.note(format!(\n                     \"available fields are: {}\",\n                     self.name_series_display(field_names),\n                 ));\n@@ -2630,7 +2631,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if let Ok(base) = self.tcx.sess.source_map().span_to_snippet(base.span) {\n             let msg = format!(\"`{base}` is a raw pointer; try dereferencing it\");\n             let suggestion = format!(\"(*{base}).{field}\");\n-            err.span_suggestion(expr.span, &msg, suggestion, Applicability::MaybeIncorrect);\n+            err.span_suggestion(expr.span, msg, suggestion, Applicability::MaybeIncorrect);\n         }\n     }\n "}, {"sha": "cbedbad1f3864ce527e3006d1280a857fe9fb2c6", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -63,9 +63,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     lint::builtin::UNREACHABLE_CODE,\n                     id,\n                     span,\n-                    &msg,\n+                    msg.clone(),\n                     |lint| {\n-                        lint.span_label(span, &msg).span_label(\n+                        lint.span_label(span, msg).span_label(\n                             orig_span,\n                             custom_note\n                                 .unwrap_or(\"any code following this expression is unreachable\"),\n@@ -275,7 +275,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     _ => {\n                         self.tcx.sess.delay_span_bug(\n                             expr.span,\n-                            &format!(\n+                            format!(\n                                 \"while adjusting {:?}, can't compose {:?} and {:?}\",\n                                 expr,\n                                 entry.get(),\n@@ -1034,15 +1034,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 rcvr.span,\n                 \"you probably want to use this value after calling the method...\",\n             );\n-            err.span_note(sp, &modifies_rcvr_note);\n-            err.note(&format!(\"...instead of the `()` output of method `{}`\", path_segment.ident));\n+            err.span_note(sp, modifies_rcvr_note);\n+            err.note(format!(\"...instead of the `()` output of method `{}`\", path_segment.ident));\n         } else if let ExprKind::MethodCall(..) = rcvr.kind {\n             err.span_note(\n                 sp,\n                 modifies_rcvr_note.clone() + \", it is not meant to be used in method chains.\",\n             );\n         } else {\n-            err.span_note(sp, &modifies_rcvr_note);\n+            err.span_note(sp, modifies_rcvr_note);\n         }\n     }\n \n@@ -1374,7 +1374,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Err(_) => {\n                     self.tcx.sess.delay_span_bug(\n                         span,\n-                        &format!(\n+                        format!(\n                         \"instantiate_value_path: (UFCS) {:?} was a subtype of {:?} but now is not?\",\n                         self_ty,\n                         impl_ty,"}, {"sha": "1e82161d9f7b265e5ed4897c98d4f30ae2f74931", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -685,7 +685,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     } else {\n                         err = tcx.sess.struct_span_err_with_code(\n                             full_call_span,\n-                            &format!(\n+                            format!(\n                                 \"{call_name} takes {}{} but {} {} supplied\",\n                                 if c_variadic { \"at least \" } else { \"\" },\n                                 potentially_plural_count(\n@@ -828,7 +828,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else {\n             tcx.sess.struct_span_err_with_code(\n                 full_call_span,\n-                &format!(\n+                format!(\n                     \"this {} takes {}{} but {} {} supplied\",\n                     call_name,\n                     if c_variadic { \"at least \" } else { \"\" },\n@@ -1203,7 +1203,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             SuggestionText::Remove(plural) => {\n                 err.multipart_suggestion(\n-                    &format!(\"remove the extra argument{}\", if plural { \"s\" } else { \"\" }),\n+                    format!(\"remove the extra argument{}\", if plural { \"s\" } else { \"\" }),\n                     suggestions,\n                     Applicability::HasPlaceholders,\n                 );\n@@ -1253,7 +1253,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             suggestion += \")\";\n             err.span_suggestion_verbose(\n                 suggestion_span,\n-                &suggestion_text,\n+                suggestion_text,\n                 suggestion,\n                 Applicability::HasPlaceholders,\n             );\n@@ -1947,7 +1947,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 spans.push_span_label(param.span, \"\");\n             }\n \n-            err.span_note(spans, &format!(\"{} defined here\", self.tcx.def_descr(def_id)));\n+            err.span_note(spans, format!(\"{} defined here\", self.tcx.def_descr(def_id)));\n         } else if let Some(hir::Node::Expr(e)) = self.tcx.hir().get_if_local(def_id)\n             && let hir::ExprKind::Closure(hir::Closure { body, .. }) = &e.kind\n         {\n@@ -1958,11 +1958,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             } else {\n                 (\"closure\", self.tcx.def_span(def_id))\n             };\n-            err.span_note(span, &format!(\"{} defined here\", kind));\n+            err.span_note(span, format!(\"{} defined here\", kind));\n         } else {\n             err.span_note(\n                 self.tcx.def_span(def_id),\n-                &format!(\"{} defined here\", self.tcx.def_descr(def_id)),\n+                format!(\"{} defined here\", self.tcx.def_descr(def_id)),\n             );\n         }\n     }"}, {"sha": "7c75bf00c02f8c368fbba281fc759a6527a0b67c", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -278,9 +278,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.check_ref(expr, found, expected)\n         {\n             if verbose {\n-                err.span_suggestion_verbose(sp, &msg, suggestion, applicability);\n+                err.span_suggestion_verbose(sp, msg, suggestion, applicability);\n             } else {\n-                err.span_suggestion(sp, &msg, suggestion, applicability);\n+                err.span_suggestion(sp, msg, suggestion, applicability);\n             }\n             if annotation {\n                 let suggest_annotation = match expr.peel_drop_temps().kind {\n@@ -1449,7 +1449,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         {\n             diag.span_note(\n                 callee_expr.span,\n-                &format!(\n+                format!(\n                     \"`{expected_ty}` does not implement `Clone`, so `{found_ty}` was cloned instead\"\n                 ),\n             );"}, {"sha": "8ab0bd535d6fd21c1418b537a15a4bbf8fe28c96", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -205,7 +205,7 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n         if ty.has_infer() {\n             self.tcx.sess.delay_span_bug(\n                 self.tcx.hir().span(assignee_place.hir_id),\n-                &format!(\"inference variables in {ty}\"),\n+                format!(\"inference variables in {ty}\"),\n             );\n         } else if ty.needs_drop(self.tcx, self.param_env) {\n             self.places"}, {"sha": "019fb86f55c4c89ce944cf45d09cf9528f589283", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                     self.fcx\n                         .tcx\n                         .sess\n-                        .delay_span_bug(span, &format!(\"Encountered var {:?}\", unresolved_term));\n+                        .delay_span_bug(span, format!(\"Encountered var {:?}\", unresolved_term));\n                 } else {\n                     let note = format!(\n                         \"the type is part of the {} because of this {}\",\n@@ -464,7 +464,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n                     self.fcx\n                         .tcx\n                         .sess\n-                        .delay_span_bug(expr.span, &format!(\"inference variables in {ty}\"));\n+                        .delay_span_bug(expr.span, format!(\"inference variables in {ty}\"));\n                     true\n                 } else {\n                     ty.needs_drop(self.fcx.tcx, self.fcx.param_env)"}, {"sha": "3c5eafd9484889b006e1be686820912e0f03be62", "filename": "compiler/rustc_hir_typeck/src/intrinsicck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -72,8 +72,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let from = unpack_option_like(tcx, from);\n             if let (&ty::FnDef(..), SizeSkeleton::Known(size_to)) = (from.kind(), sk_to) && size_to == Pointer(dl.instruction_address_space).size(&tcx) {\n                 struct_span_err!(tcx.sess, span, E0591, \"can't transmute zero-sized type\")\n-                    .note(&format!(\"source type: {from}\"))\n-                    .note(&format!(\"target type: {to}\"))\n+                    .note(format!(\"source type: {from}\"))\n+                    .note(format!(\"target type: {to}\"))\n                     .help(\"cast with `as` to a pointer instead\")\n                     .emit();\n                 return;\n@@ -109,10 +109,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         or dependently-sized types\"\n         );\n         if from == to {\n-            err.note(&format!(\"`{from}` does not have a fixed size\"));\n+            err.note(format!(\"`{from}` does not have a fixed size\"));\n         } else {\n-            err.note(&format!(\"source type: `{}` ({})\", from, skeleton_string(from, sk_from)))\n-                .note(&format!(\"target type: `{}` ({})\", to, skeleton_string(to, sk_to)));\n+            err.note(format!(\"source type: `{}` ({})\", from, skeleton_string(from, sk_from)))\n+                .note(format!(\"target type: `{}` ({})\", to, skeleton_string(to, sk_to)));\n             let mut should_delay_as_bug = false;\n             if let Err(LayoutError::Unknown(bad_from)) = sk_from && bad_from.references_error() {\n                 should_delay_as_bug = true;"}, {"sha": "a2a4362e2f5184e8c278451492ca520b4cc7f4f4", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -448,7 +448,7 @@ fn fatally_break_rust(sess: &Session) {\n         \"we would appreciate a joke overview: \\\n          https://github.com/rust-lang/rust/issues/43162#issuecomment-320764675\",\n     );\n-    handler.note_without_error(&format!(\n+    handler.note_without_error(format!(\n         \"rustc {} running on {}\",\n         option_env!(\"CFG_VERSION\").unwrap_or(\"unknown_version\"),\n         config::host_triple(),"}, {"sha": "ec4e7f7f88af517051cb3dcd39c19a82a4514bda", "filename": "compiler/rustc_hir_typeck/src/method/prelude2021.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprelude2021.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         };\n                         lint.span_help(\n                             sp,\n-                            &format!(\"disambiguate the method call with `({})`\", self_adjusted,),\n+                            format!(\"disambiguate the method call with `({})`\", self_adjusted,),\n                         );\n                     }\n \n@@ -180,7 +180,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     } else {\n                         lint.span_help(\n                             sp,\n-                            &format!(\n+                            format!(\n                                 \"disambiguate the associated function with `{}::{}(...)`\",\n                                 trait_name, segment.ident,\n                             ),"}, {"sha": "a0e978b0c1074b530e0ddc2a3f19a1fbd4e567f9", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1396,7 +1396,7 @@ impl<'tcx> Pick<'tcx> {\n                         // However `self.span` only\n                         // highlights the method name, so we can't use it. Also consider reusing\n                         // the code from `report_method_error()`.\n-                        lint.help(&format!(\n+                        lint.help(format!(\n                             \"call with fully qualified syntax `{}(...)` to keep using the current \\\n                              method\",\n                             tcx.def_path_str(self.item.def_id),\n@@ -1420,7 +1420,7 @@ impl<'tcx> Pick<'tcx> {\n                 }\n                 if tcx.sess.is_nightly_build() {\n                     for (candidate, feature) in &self.unstable_candidates {\n-                        lint.help(&format!(\n+                        lint.help(format!(\n                             \"add `#![feature({})]` to the crate attributes to enable `{}`\",\n                             feature,\n                             tcx.def_path_str(candidate.item.def_id),"}, {"sha": "b786348f89ea04ebc09d0ea3eca7599713539463", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -169,13 +169,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     kind,\n                     item_name\n                 );\n-                err.span_label(item_name.span, &format!(\"private {}\", kind));\n+                err.span_label(item_name.span, format!(\"private {}\", kind));\n                 let sp = self\n                     .tcx\n                     .hir()\n                     .span_if_local(def_id)\n                     .unwrap_or_else(|| self.tcx.def_span(def_id));\n-                err.span_label(sp, &format!(\"private {} defined here\", kind));\n+                err.span_label(sp, format!(\"private {} defined here\", kind));\n                 self.suggest_valid_traits(&mut err, out_of_scope_traits);\n                 err.emit();\n             }\n@@ -188,7 +188,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 } else {\n                     format!(\"the `{item_name}` method cannot be invoked on a trait object\")\n                 };\n-                let mut err = self.sess().struct_span_err(span, &msg);\n+                let mut err = self.sess().struct_span_err(span, msg);\n                 if !needs_mut {\n                     err.span_label(bound_span, \"this has a `Sized` requirement\");\n                 }\n@@ -228,12 +228,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         {\n                             err.span_suggestion_verbose(\n                                 mut_ty.ty.span.shrink_to_lo(),\n-                                &msg,\n+                                msg,\n                                 \"mut \",\n                                 Applicability::MachineApplicable,\n                             );\n                         } else {\n-                            err.help(&msg);\n+                            err.help(msg);\n                         }\n                     }\n                 }\n@@ -374,14 +374,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty_str\n         };\n         if let Some(file) = ty_file {\n-            err.note(&format!(\"the full type name has been written to '{}'\", file.display(),));\n+            err.note(format!(\"the full type name has been written to '{}'\", file.display(),));\n         }\n         if rcvr_ty.references_error() {\n             err.downgrade_to_delayed_bug();\n         }\n \n         if tcx.ty_is_opaque_future(rcvr_ty) && item_name.name == sym::poll {\n-            err.help(&format!(\n+            err.help(format!(\n                 \"method `poll` found on `Pin<&mut {ty_str}>`, \\\n                 see documentation for `std::pin::Pin`\"\n             ));\n@@ -510,7 +510,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             if let Some(iterator_trait) = self.tcx.get_diagnostic_item(sym::Iterator) {\n                 let iterator_trait = self.tcx.def_path_str(iterator_trait);\n-                err.note(&format!(\n+                err.note(format!(\n                     \"`count` is defined on `{iterator_trait}`, which `{rcvr_ty}` does not implement\"\n                 ));\n             }\n@@ -810,7 +810,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 for (sp, label) in span_labels {\n                     span.push_span_label(sp, label);\n                 }\n-                err.span_note(span, &msg);\n+                err.span_note(span, msg);\n                 unsatisfied_bounds = true;\n             }\n \n@@ -867,7 +867,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 obligations.sort();\n                 err.span_suggestion_verbose(\n                     span,\n-                    &format!(\n+                    format!(\n                         \"consider restricting the type parameter{s} to satisfy the \\\n                          trait bound{s}\",\n                         s = pluralize!(obligations.len())\n@@ -912,13 +912,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                          but its trait bounds were not satisfied\"\n                     )\n                 });\n-                err.set_primary_message(&primary_message);\n+                err.set_primary_message(primary_message);\n                 if let Some(label) = label {\n                     custom_span_label = true;\n                     err.span_label(span, label);\n                 }\n                 if !bound_list.is_empty() {\n-                    err.note(&format!(\n+                    err.note(format!(\n                         \"the following trait bounds were not satisfied:\\n{bound_list}\"\n                     ));\n                 }\n@@ -1002,7 +1002,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         } else {\n                             \"\".to_string()\n                         };\n-                        err.note(&format!(\n+                        err.note(format!(\n                             \"the {item_kind} was found for\\n{}{}\",\n                             type_candidates, additional_types\n                         ));\n@@ -1049,7 +1049,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         bound_spans.sort();\n         bound_spans.dedup();\n         for (span, msg) in bound_spans.into_iter() {\n-            err.span_label(span, &msg);\n+            err.span_label(span, msg);\n         }\n \n         if rcvr_ty.is_numeric() && rcvr_ty.is_fresh() || restrict_type_params {\n@@ -1119,7 +1119,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 } else {\n                     err.span_suggestion(\n                         span,\n-                        &format!(\n+                        format!(\n                             \"there is {} {} with a similar name\",\n                             self.tcx.def_kind_descr_article(def_kind, similar_candidate.def_id),\n                             self.tcx.def_kind_descr(def_kind, similar_candidate.def_id)\n@@ -1203,9 +1203,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     };\n                     if let Some(note_span) = note_span {\n                         // We have a span pointing to the method. Show note with snippet.\n-                        err.span_note(note_span, &note_str);\n+                        err.span_note(note_span, note_str);\n                     } else {\n-                        err.note(&note_str);\n+                        err.note(note_str);\n                     }\n                     if let Some(sugg_span) = sugg_span\n                         && let Some(trait_ref) = self.tcx.impl_trait_ref(impl_did) {\n@@ -1243,15 +1243,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let Some(item) = self.associated_value(trait_did, item_name) else { continue };\n                     let item_span = self.tcx.def_span(item.def_id);\n                     let idx = if sources.len() > 1 {\n-                        let msg = &format!(\n+                        let msg = format!(\n                             \"candidate #{} is defined in the trait `{}`\",\n                             idx + 1,\n                             self.tcx.def_path_str(trait_did)\n                         );\n                         err.span_note(item_span, msg);\n                         Some(idx + 1)\n                     } else {\n-                        let msg = &format!(\n+                        let msg = format!(\n                             \"the candidate is defined in the trait `{}`\",\n                             self.tcx.def_path_str(trait_did)\n                         );\n@@ -1278,7 +1278,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n         if sources.len() > limit {\n-            err.note(&format!(\"and {} others\", sources.len() - limit));\n+            err.note(format!(\"and {} others\", sources.len() - limit));\n         }\n     }\n \n@@ -1402,7 +1402,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 applicability,\n             );\n         } else {\n-            err.help(&format!(\"try with `{}::{}`\", ty_str, item_name,));\n+            err.help(format!(\"try with `{}::{}`\", ty_str, item_name,));\n         }\n     }\n \n@@ -1436,7 +1436,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if self.is_fn_ty(field_ty, span) {\n                     let expr_span = expr.span.to(item_name.span);\n                     err.multipart_suggestion(\n-                        &format!(\n+                        format!(\n                             \"to call the function stored in `{}`, \\\n                                          surround the field access with parentheses\",\n                             item_name,\n@@ -1612,7 +1612,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let snippet = snippet.strip_suffix('.').unwrap_or(&snippet);\n                     err.span_suggestion(\n                         lit.span,\n-                        &format!(\n+                        format!(\n                             \"you must specify a concrete type for this numeric value, \\\n                                          like `{}`\",\n                             concrete_type\n@@ -1648,7 +1648,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     // account for `let x: _ = 42;`\n                                     //                   ^^^\n                                     type_span,\n-                                    &msg,\n+                                    msg,\n                                     format!(\": {concrete_type}\"),\n                                     Applicability::MaybeIncorrect,\n                                 );\n@@ -1861,7 +1861,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let self_ty = field.ty(tcx, substs);\n                         err.span_note(\n                             tcx.def_span(pick.item.def_id),\n-                            &format!(\"the method `{item_name}` exists on the type `{self_ty}`\"),\n+                            format!(\"the method `{item_name}` exists on the type `{self_ty}`\"),\n                         );\n                         let (article, kind, variant, question) =\n                             if tcx.is_diagnostic_item(sym::Result, kind.did()) {\n@@ -1975,7 +1975,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 err.span_note(\n                     tcx.def_span(pick.item.def_id),\n-                    &format!(\"the method `{item_name}` exists on the type `{ty}`\"),\n+                    format!(\"the method `{item_name}` exists on the type `{ty}`\"),\n                 );\n             }\n         }\n@@ -2046,7 +2046,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     pluralize!(preds.len()),\n                 )\n             };\n-            err.span_note(spans, &msg);\n+            err.span_note(spans, msg);\n         }\n \n         let preds: Vec<_> = errors\n@@ -2160,14 +2160,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             err.span_note(\n                 span,\n-                &format!(\"the trait{} {} must be implemented\", pluralize!(len), names),\n+                format!(\"the trait{} {} must be implemented\", pluralize!(len), names),\n             );\n         }\n \n         for (self_name, self_span, traits) in &derives_grouped {\n             err.span_suggestion_verbose(\n                 self_span.shrink_to_lo(),\n-                &format!(\"consider annotating `{}` with `#[derive({})]`\", self_name, traits),\n+                format!(\"consider annotating `{}` with `#[derive({})]`\", self_name, traits),\n                 format!(\"#[derive({})]\\n\", traits),\n                 Applicability::MaybeIncorrect,\n             );\n@@ -2313,7 +2313,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         err.span_suggestions(\n             span,\n-            &msg,\n+            msg,\n             path_strings.chain(glob_path_strings),\n             Applicability::MaybeIncorrect,\n         );\n@@ -2345,7 +2345,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             self.suggest_use_candidates(err, msg, candidates);\n             if let Some(did) = edition_fix {\n-                err.note(&format!(\n+                err.note(format!(\n                     \"'{}' is included in the prelude starting in Edition 2021\",\n                     with_crate_prefix!(self.tcx.def_path_str(did))\n                 ));\n@@ -2413,7 +2413,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if pick.autoderefs == 0 && !skip {\n                             err.span_label(\n                                 pick.item.ident(self.tcx).span,\n-                                &format!(\"the method is available for `{}` here\", rcvr_ty),\n+                                format!(\"the method is available for `{}` here\", rcvr_ty),\n                             );\n                         }\n                         break;\n@@ -2459,7 +2459,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if pick.autoderefs == 0 && !skip {\n                             err.span_label(\n                                 pick.item.ident(self.tcx).span,\n-                                &format!(\"the method is available for `{}` here\", new_rcvr_t),\n+                                format!(\"the method is available for `{}` here\", new_rcvr_t),\n                             );\n                             err.multipart_suggestion(\n                                 \"consider wrapping the receiver expression with the \\\n@@ -2655,7 +2655,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             if !candidates.iter().any(|t| trait_def_ids.contains(&t.def_id)) {\n                                 err.span_suggestions(\n                                     sp,\n-                                    &message(format!(\n+                                    message(format!(\n                                         \"restrict type parameter `{}` with\",\n                                         param.name.ident(),\n                                     )),\n@@ -2687,7 +2687,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             };\n                             err.span_suggestions(\n                                 sp,\n-                                &message(format!(\"add {} supertrait for\", article)),\n+                                message(format!(\"add {} supertrait for\", article)),\n                                 candidates.iter().map(|t| {\n                                     format!(\"{} {}\", sep, self.tcx.def_path_str(t.def_id),)\n                                 }),\n@@ -2746,7 +2746,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 [trait_info] if trait_info.def_id.is_local() => {\n                     err.span_note(\n                         self.tcx.def_span(trait_info.def_id),\n-                        &format!(\n+                        format!(\n                             \"`{}` defines an item `{}`, perhaps you need to {} it\",\n                             self.tcx.def_path_str(trait_info.def_id),\n                             item_name,\n@@ -2763,7 +2763,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             self.tcx.def_path_str(trait_info.def_id),\n                         ));\n                     }\n-                    err.note(&msg);\n+                    err.note(msg);\n                 }\n             }\n             match &explicitly_negative[..] {\n@@ -2774,7 +2774,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         self.tcx.def_path_str(trait_info.def_id),\n                         item_name\n                     );\n-                    err.note(&msg);\n+                    err.note(msg);\n                 }\n                 trait_infos => {\n                     let mut msg = format!(\n@@ -2784,7 +2784,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     for trait_info in trait_infos {\n                         msg.push_str(&format!(\"\\n{}\", self.tcx.def_path_str(trait_info.def_id)));\n                     }\n-                    err.note(&msg);\n+                    err.note(msg);\n                 }\n             }\n         }\n@@ -2836,7 +2836,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 fn_args.len() == args.len() + 1 {\n                 err.span_suggestion_verbose(\n                     method_name.span.shrink_to_hi(),\n-                    &format!(\"try calling `{}` instead\", new_name.name.as_str()),\n+                    format!(\"try calling `{}` instead\", new_name.name.as_str()),\n                     \"_else\",\n                     Applicability::MaybeIncorrect,\n                 );\n@@ -2956,7 +2956,7 @@ fn print_disambiguation_help<'tcx>(\n     };\n     err.span_suggestion_verbose(\n         span,\n-        &format!(\n+        format!(\n             \"disambiguate the {} for {}\",\n             def_kind_descr,\n             if let Some(candidate) = candidate {"}, {"sha": "af351a3fa10e84cd5480e8ef3e55dcdb65fe5940", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -390,7 +390,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         )\n                         .is_ok()\n                     {\n-                        let msg = &format!(\n+                        let msg = format!(\n                             \"`{}{}` can be used on `{}` if you dereference the left-hand side\",\n                             op.node.as_str(),\n                             match is_assign {\n@@ -515,7 +515,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         } else {\n                             // When we know that a missing bound is responsible, we don't show\n                             // this note as it is redundant.\n-                            err.note(&format!(\n+                            err.note(format!(\n                                 \"the trait `{missing_trait}` is not implemented for `{lhs_ty}`\"\n                             ));\n                         }\n@@ -690,7 +690,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 {\n                                     err.span_suggestion(\n                                         ex.span,\n-                                        &format!(\n+                                        format!(\n                                             \"you may have meant the maximum value of `{actual}`\",\n                                         ),\n                                         format!(\"{actual}::MAX\"),"}, {"sha": "5af955d313482e25b0889d458b1181cbeddf8234", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -517,7 +517,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn endpoint_has_type(&self, err: &mut Diagnostic, span: Span, ty: Ty<'_>) {\n         if !ty.references_error() {\n-            err.span_label(span, &format!(\"this is of type `{}`\", ty));\n+            err.span_label(span, format!(\"this is of type `{}`\", ty));\n         }\n     }\n \n@@ -544,16 +544,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             format!(\"this is of type `{}` but it should be `char` or numeric\", ty)\n         };\n         let mut one_side_err = |first_span, first_ty, second: Option<(bool, Ty<'tcx>, Span)>| {\n-            err.span_label(first_span, &msg(first_ty));\n+            err.span_label(first_span, msg(first_ty));\n             if let Some((_, ty, sp)) = second {\n                 let ty = self.resolve_vars_if_possible(ty);\n                 self.endpoint_has_type(&mut err, sp, ty);\n             }\n         };\n         match (lhs, rhs) {\n             (Some((true, lhs_ty, lhs_sp)), Some((true, rhs_ty, rhs_sp))) => {\n-                err.span_label(lhs_sp, &msg(lhs_ty));\n-                err.span_label(rhs_sp, &msg(rhs_ty));\n+                err.span_label(lhs_sp, msg(lhs_ty));\n+                err.span_label(rhs_sp, msg(rhs_ty));\n             }\n             (Some((true, lhs_ty, lhs_sp)), rhs) => one_side_err(lhs_sp, lhs_ty, rhs),\n             (lhs, Some((true, rhs_ty, rhs_sp))) => one_side_err(rhs_sp, rhs_ty, lhs),\n@@ -651,7 +651,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 )\n             });\n             let pre = if in_match { \"in the same arm, \" } else { \"\" };\n-            err.note(&format!(\"{}a binding must have the same type in all alternatives\", pre));\n+            err.note(format!(\"{}a binding must have the same type in all alternatives\", pre));\n             self.suggest_adding_missing_ref_or_removing_ref(\n                 &mut err,\n                 span,\n@@ -958,11 +958,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) {\n         let pat_span = pat.span;\n         if let Some(span) = self.tcx.hir().res_span(pat_res) {\n-            e.span_label(span, &format!(\"{} defined here\", res.descr()));\n+            e.span_label(span, format!(\"{} defined here\", res.descr()));\n             if let [hir::PathSegment { ident, .. }] = &*segments {\n                 e.span_label(\n                     pat_span,\n-                    &format!(\n+                    format!(\n                         \"`{}` is interpreted as {} {}, not a new binding\",\n                         ident,\n                         res.article(),\n@@ -1158,7 +1158,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n         err.span_label(\n             last_subpat_span,\n-            &format!(\"expected {} field{}, found {}\", fields.len(), fields_ending, subpats.len()),\n+            format!(\"expected {} field{}, found {}\", fields.len(), fields_ending, subpats.len()),\n         );\n         if self.tcx.sess.source_map().is_multiline(qpath.span().between(last_subpat_span)) {\n             err.span_label(qpath.span(), \"\");\n@@ -1171,7 +1171,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         err.span_label(\n             last_field_def_span,\n-            &format!(\"{} has {} field{}\", res.descr(), fields.len(), fields_ending),\n+            format!(\"{} has {} field{}\", res.descr(), fields.len(), fields_ending),\n         );\n \n         // Identify the case `Some(x, y)` where the expected type is e.g. `Option<(T, U)>`.\n@@ -1641,7 +1641,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             let unmentioned_field = unmentioned_fields[0].1.name;\n                             err.span_suggestion_short(\n                                 pat_field.ident.span,\n-                                &format!(\n+                                format!(\n                                     \"`{}` has a field named `{}`\",\n                                     tcx.def_path_str(variant.def_id),\n                                     unmentioned_field\n@@ -1831,7 +1831,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         lint.help(\n             \"ensure that all fields are mentioned explicitly by adding the suggested fields\",\n         );\n-        lint.note(&format!(\n+        lint.note(format!(\n             \"the pattern is of type `{}` and the `non_exhaustive_omitted_patterns` attribute was found\",\n             ty,\n         ));\n@@ -1895,7 +1895,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n         err.span_suggestion(\n             sp,\n-            &format!(\n+            format!(\n                 \"include the missing field{} in the pattern{}\",\n                 pluralize!(len),\n                 if have_inaccessible_fields { \" and ignore the inaccessible fields\" } else { \"\" }\n@@ -1922,7 +1922,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n         err.span_suggestion(\n             sp,\n-            &format!(\n+            format!(\n                 \"if you don't care about {these} missing field{s}, you can explicitly ignore {them}\",\n                 these = pluralize!(\"this\", len),\n                 s = pluralize!(len),"}, {"sha": "f217c5c1e1c98ee8aecb0286d8e7db8062e37d41", "filename": "compiler/rustc_hir_typeck/src/place_op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -73,16 +73,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let ty = self.resolve_vars_if_possible(ty);\n         let mut err = self.tcx.sess.struct_span_err(\n             span,\n-            &format!(\"negative integers cannot be used to index on a `{ty}`\"),\n+            format!(\"negative integers cannot be used to index on a `{ty}`\"),\n         );\n-        err.span_label(span, &format!(\"cannot use a negative integer for indexing on `{ty}`\"));\n+        err.span_label(span, format!(\"cannot use a negative integer for indexing on `{ty}`\"));\n         if let (hir::ExprKind::Path(..), Ok(snippet)) =\n             (&base_expr.kind, self.tcx.sess.source_map().span_to_snippet(base_expr.span))\n         {\n             // `foo[-1]` to `foo[foo.len() - 1]`\n             err.span_suggestion_verbose(\n                 span.shrink_to_lo(),\n-                &format!(\n+                format!(\n                     \"to access an element starting from the end of the `{ty}`, compute the index\",\n                 ),\n                 format!(\"{snippet}.len() \"),"}, {"sha": "543194ac9d67b895366a4d234ec3db034d0ef331", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -713,7 +713,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 self.tcx.sess.delay_span_bug(\n                     closure_span,\n-                    &format!(\n+                    format!(\n                         \"two identical projections: ({:?}, {:?})\",\n                         capture1.place.projections, capture2.place.projections\n                     ),\n@@ -863,7 +863,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             let indent = line2.split_once(|c: char| !c.is_whitespace()).unwrap_or_default().0;\n                             lint.span_suggestion(\n                                 closure_body_span.with_lo(closure_body_span.lo() + BytePos::from_usize(line1.len())).shrink_to_lo(),\n-                                &diagnostic_msg,\n+                                diagnostic_msg,\n                                 format!(\"\\n{indent}{migration_string};\"),\n                                 Applicability::MachineApplicable,\n                             );\n@@ -874,15 +874,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             // directly after the `{`.\n                             lint.span_suggestion(\n                                 closure_body_span.with_lo(closure_body_span.lo() + BytePos(1)).shrink_to_lo(),\n-                                &diagnostic_msg,\n+                                diagnostic_msg,\n                                 format!(\" {migration_string};\"),\n                                 Applicability::MachineApplicable,\n                             );\n                         } else {\n                             // This is a closure without braces around the body.\n                             // We add braces to add the `let` before the body.\n                             lint.multipart_suggestion(\n-                                &diagnostic_msg,\n+                                diagnostic_msg,\n                                 vec![\n                                     (closure_body_span.shrink_to_lo(), format!(\"{{ {migration_string}; \")),\n                                     (closure_body_span.shrink_to_hi(), \" }\".to_string()),\n@@ -893,7 +893,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     } else {\n                         lint.span_suggestion(\n                             closure_span,\n-                            &diagnostic_msg,\n+                            diagnostic_msg,\n                             migration_string,\n                             Applicability::HasPlaceholders\n                         );\n@@ -1519,7 +1519,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 let span =\n                     capture_info.path_expr_id.map_or(closure_span, |e| self.tcx.hir().span(e));\n-                diag.span_note(span, &output_str);\n+                diag.span_note(span, output_str);\n             }\n             diag.emit();\n         }\n@@ -1560,13 +1560,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             multi_span.push_span_label(path_span, path_label);\n                             multi_span.push_span_label(capture_kind_span, capture_kind_label);\n \n-                            diag.span_note(multi_span, &output_str);\n+                            diag.span_note(multi_span, output_str);\n                         } else {\n                             let span = capture_info\n                                 .path_expr_id\n                                 .map_or(closure_span, |e| self.tcx.hir().span(e));\n \n-                            diag.span_note(span, &output_str);\n+                            diag.span_note(span, output_str);\n                         };\n                     }\n                 }"}, {"sha": "cf95d4f04bb9229a341063713c9923910d7dcc28", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -227,7 +227,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                 // When encountering `return [0][0]` outside of a `fn` body we can encounter a base\n                 // that isn't in the type table. We assume more relevant errors have already been\n                 // emitted, so we delay an ICE if none have. (#64638)\n-                self.tcx().sess.delay_span_bug(e.span, &format!(\"bad base: `{:?}`\", base));\n+                self.tcx().sess.delay_span_bug(e.span, format!(\"bad base: `{:?}`\", base));\n             }\n             if let Some(ty::Ref(_, base_ty, _)) = base_ty {\n                 let index_ty = typeck_results.expr_ty_adjusted_opt(index).unwrap_or_else(|| {\n@@ -491,7 +491,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                     let err = self\n                         .tcx()\n                         .sess\n-                        .struct_span_err(span, &format!(\"user substs: {:?}\", user_substs));\n+                        .struct_span_err(span, format!(\"user substs: {:?}\", user_substs));\n                     err.buffer(&mut errors_buffer);\n                 }\n             }"}, {"sha": "d798202a644412fda94bbd866902fa2f9adfae96", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -205,7 +205,7 @@ impl CanonicalizeMode for CanonicalizeQueryResponse {\n                 // `delay_span_bug` to allow type error over an ICE.\n                 canonicalizer.tcx.sess.delay_span_bug(\n                     rustc_span::DUMMY_SP,\n-                    &format!(\"unexpected region in query response: `{:?}`\", r),\n+                    format!(\"unexpected region in query response: `{:?}`\", r),\n                 );\n                 r\n             }"}, {"sha": "c9e13be02ff9a69964b067de9ac8cd6b1d142ba2", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -192,7 +192,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             self.tcx.check_tys_might_be_eq(canonical).map_err(|_| {\n                 self.tcx.sess.delay_span_bug(\n                     DUMMY_SP,\n-                    &format!(\"cannot relate consts of different types (a={:?}, b={:?})\", a, b,),\n+                    format!(\"cannot relate consts of different types (a={:?}, b={:?})\", a, b,),\n                 )\n             })\n         });"}, {"sha": "98da5ba65b7b473de21fa04ab7f076551fdd55d1", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -282,9 +282,9 @@ fn emit_msg_span(\n     let message = format!(\"{}{}{}\", prefix, description, suffix);\n \n     if let Some(span) = span {\n-        err.span_note(span, &message);\n+        err.span_note(span, message);\n     } else {\n-        err.note(&message);\n+        err.note(message);\n     }\n }\n \n@@ -298,9 +298,9 @@ fn label_msg_span(\n     let message = format!(\"{}{}{}\", prefix, description, suffix);\n \n     if let Some(span) = span {\n-        err.span_label(span, &message);\n+        err.span_label(span, message);\n     } else {\n-        err.note(&message);\n+        err.note(message);\n     }\n }\n \n@@ -2395,7 +2395,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 );\n             } else {\n                 let consider = format!(\"{} `{}: {}`...\", msg, bound_kind, sub);\n-                err.help(&consider);\n+                err.help(consider);\n             }\n         }\n \n@@ -2625,7 +2625,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             );\n             err.span_note(\n                 sup_trace.cause.span,\n-                &format!(\"...so that the {}\", sup_trace.cause.as_requirement_str()),\n+                format!(\"...so that the {}\", sup_trace.cause.as_requirement_str()),\n             );\n \n             err.note_expected_found(&\"\", sup_expected, &\"\", sup_found);"}, {"sha": "aad9885827da56cbc64989ca5fc7dd54015a910f", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -299,7 +299,7 @@ pub fn suggest_new_region_bound(\n                     if let Some(explicit_static) = &explicit_static {\n                         err.span_suggestion_verbose(\n                             span,\n-                            &format!(\"{consider} `{ty}`'s {explicit_static}\"),\n+                            format!(\"{consider} `{ty}`'s {explicit_static}\"),\n                             &lifetime_name,\n                             Applicability::MaybeIncorrect,\n                         );\n@@ -367,7 +367,7 @@ pub fn suggest_new_region_bound(\n                         spans_suggs\n                             .push((fn_return.span.shrink_to_hi(), format!(\" + {name} \")));\n                         err.multipart_suggestion_verbose(\n-                            &format!(\n+                            format!(\n                                 \"{declare} `{ty}` {captures}, {use_lt}\",\n                             ),\n                             spans_suggs,\n@@ -376,7 +376,7 @@ pub fn suggest_new_region_bound(\n                     } else {\n                         err.span_suggestion_verbose(\n                             fn_return.span.shrink_to_hi(),\n-                            &format!(\"{declare} `{ty}` {captures}, {explicit}\",),\n+                            format!(\"{declare} `{ty}` {captures}, {explicit}\",),\n                             &plus_lt,\n                             Applicability::MaybeIncorrect,\n                         );\n@@ -387,7 +387,7 @@ pub fn suggest_new_region_bound(\n                 if let LifetimeName::ImplicitObjectLifetimeDefault = lt.res {\n                     err.span_suggestion_verbose(\n                         fn_return.span.shrink_to_hi(),\n-                        &format!(\n+                        format!(\n                             \"{declare} the trait object {captures}, {explicit}\",\n                             declare = declare,\n                             captures = captures,\n@@ -404,7 +404,7 @@ pub fn suggest_new_region_bound(\n                     if let Some(explicit_static) = &explicit_static {\n                         err.span_suggestion_verbose(\n                             lt.ident.span,\n-                            &format!(\"{} the trait object's {}\", consider, explicit_static),\n+                            format!(\"{} the trait object's {}\", consider, explicit_static),\n                             &lifetime_name,\n                             Applicability::MaybeIncorrect,\n                         );"}, {"sha": "a31163519404cca872ea1d500085b313bc2cc312", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -209,7 +209,7 @@ impl<T> Trait<T> for X {\n                         if !sp.contains(p_span) {\n                             diag.span_label(p_span, \"this type parameter\");\n                         }\n-                        diag.help(&format!(\n+                        diag.help(format!(\n                             \"every closure has a distinct type and so could not always match the \\\n                              caller-chosen type of parameter `{}`\",\n                             p\n@@ -248,7 +248,7 @@ impl<T> Trait<T> for X {\n                             proj_ty,\n                             values.expected,\n                         )) {\n-                            diag.help(&msg);\n+                            diag.help(msg);\n                             diag.note(\n                                 \"for more information, visit \\\n                                 https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\",\n@@ -415,12 +415,12 @@ impl<T> Trait<T> for X {\n         if !impl_comparison {\n             // Generic suggestion when we can't be more specific.\n             if callable_scope {\n-                diag.help(&format!(\n+                diag.help(format!(\n                     \"{} or calling a method that returns `{}`\",\n                     msg, values.expected\n                 ));\n             } else {\n-                diag.help(&msg);\n+                diag.help(msg);\n             }\n             diag.note(\n                 \"for more information, visit \\\n@@ -536,7 +536,7 @@ fn foo(&self) -> Self::T { String::new() }\n             for (sp, label) in methods.into_iter() {\n                 span.push_span_label(sp, label);\n             }\n-            diag.span_help(span, &msg);\n+            diag.span_help(span, msg);\n             return true;\n         }\n         false"}, {"sha": "f1468cae455b5c7441239d1834ec2a3447273556", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -824,7 +824,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         // resolution errors here; delay ICE in favor of those errors.\n         self.tcx().sess.delay_span_bug(\n             self.var_infos[node_idx].origin.span(),\n-            &format!(\n+            format!(\n                 \"collect_error_for_expanding_node() could not find \\\n                  error for var {:?} in universe {:?}, lower_bounds={:#?}, \\\n                  upper_bounds={:#?}\","}, {"sha": "a0f6d7ecab70fb3dad93b3d9be5e64271333380b", "filename": "compiler/rustc_infer/src/infer/opaque_types/table.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -42,7 +42,7 @@ impl<'tcx> Drop for OpaqueTypeStorage<'tcx> {\n     fn drop(&mut self) {\n         if !self.opaque_types.is_empty() {\n             ty::tls::with(|tcx| {\n-                tcx.sess.delay_span_bug(DUMMY_SP, &format!(\"{:?}\", self.opaque_types))\n+                tcx.sess.delay_span_bug(DUMMY_SP, format!(\"{:?}\", self.opaque_types))\n             });\n         }\n     }"}, {"sha": "9c20c814b697f922fe00820f21bc279857c593ef", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -256,7 +256,7 @@ where\n                     // this point it never will be\n                     self.tcx.sess.delay_span_bug(\n                         origin.span(),\n-                        &format!(\"unresolved inference variable in outlives: {:?}\", v),\n+                        format!(\"unresolved inference variable in outlives: {:?}\", v),\n                     );\n                 }\n             }"}, {"sha": "c86da22526b02d933385902dbcfa608a63f01c91", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -179,7 +179,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n                 // this point it never will be\n                 self.tcx.sess.delay_span_bug(\n                     rustc_span::DUMMY_SP,\n-                    &format!(\"unresolved inference variable in outlives: {:?}\", v),\n+                    format!(\"unresolved inference variable in outlives: {:?}\", v),\n                 );\n                 // add a bound that never holds\n                 VerifyBound::AnyBound(vec![])"}, {"sha": "b5a7d0326a88d7db659f569feaf9bd13a41fc2a8", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -73,7 +73,7 @@ pub fn report_object_safety_error<'tcx>(\n                 format!(\"...because {}\", violation.error_msg())\n             };\n             if spans.is_empty() {\n-                err.note(&msg);\n+                err.note(msg);\n             } else {\n                 for span in spans {\n                     multi_span.push(span);"}, {"sha": "71cf644eb50195626cad82dda2f03e10841f58f2", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -50,6 +50,14 @@ lint_deprecated_lint_name =\n lint_renamed_or_removed_lint = {$msg}\n     .suggestion = use the new name\n \n+lint_suspicious_double_ref_op =\n+    using `.{$call}()` on a double reference, which returns `{$ty}` instead of {$op ->\n+        *[should_not_happen] [{$op}]\n+        [deref] dereferencing\n+        [borrow] borrowing\n+        [clone] cloning\n+    } the inner type\n+\n lint_unknown_lint =\n     unknown lint: `{$name}`\n     .suggestion = did you mean"}, {"sha": "d4898ffe883bc57a3354042a45f1d03177208240", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -616,7 +616,7 @@ pub trait LintContext: Sized {\n                         1 => (\"an \", \"\"),\n                         _ => (\"\", \"s\"),\n                     };\n-                    db.span_label(span, &format!(\n+                    db.span_label(span, format!(\n                         \"this comment contains {}invisible unicode text flow control codepoint{}\",\n                         an,\n                         s,\n@@ -680,12 +680,12 @@ pub trait LintContext: Sized {\n                     );\n                 }\n                 BuiltinLintDiagnostics::UnknownCrateTypes(span, note, sugg) => {\n-                    db.span_suggestion(span, &note, sugg, Applicability::MaybeIncorrect);\n+                    db.span_suggestion(span, note, sugg, Applicability::MaybeIncorrect);\n                 }\n                 BuiltinLintDiagnostics::UnusedImports(message, replaces, in_test_module) => {\n                     if !replaces.is_empty() {\n                         db.tool_only_multipart_suggestion(\n-                            &message,\n+                            message,\n                             replaces,\n                             Applicability::MachineApplicable,\n                         );\n@@ -720,13 +720,13 @@ pub trait LintContext: Sized {\n                 }\n                 BuiltinLintDiagnostics::MissingAbi(span, default_abi) => {\n                     db.span_label(span, \"ABI should be specified here\");\n-                    db.help(&format!(\"the default ABI is {}\", default_abi.name()));\n+                    db.help(format!(\"the default ABI is {}\", default_abi.name()));\n                 }\n                 BuiltinLintDiagnostics::LegacyDeriveHelpers(span) => {\n                     db.span_label(span, \"the attribute is introduced here\");\n                 }\n                 BuiltinLintDiagnostics::ProcMacroBackCompat(note) => {\n-                    db.note(&note);\n+                    db.note(note);\n                 }\n                 BuiltinLintDiagnostics::OrPatternsBackCompat(span,suggestion) => {\n                     db.span_suggestion(span, \"use pat_param to preserve semantics\", suggestion, Applicability::MachineApplicable);\n@@ -747,13 +747,13 @@ pub trait LintContext: Sized {\n                 } => {\n                     db.span_note(\n                         invoc_span,\n-                        &format!(\"the built-in attribute `{attr_name}` will be ignored, since it's applied to the macro invocation `{macro_name}`\")\n+                        format!(\"the built-in attribute `{attr_name}` will be ignored, since it's applied to the macro invocation `{macro_name}`\")\n                     );\n                 }\n                 BuiltinLintDiagnostics::TrailingMacro(is_trailing, name) => {\n                     if is_trailing {\n                         db.note(\"macro invocations at the end of a block are treated as expressions\");\n-                        db.note(&format!(\"to ignore the value produced by the macro, add a semicolon after the invocation of `{name}`\"));\n+                        db.note(format!(\"to ignore the value produced by the macro, add a semicolon after the invocation of `{name}`\"));\n                     }\n                 }\n                 BuiltinLintDiagnostics::BreakWithLabelAndLoop(span) => {\n@@ -765,7 +765,7 @@ pub trait LintContext: Sized {\n                     );\n                 }\n                 BuiltinLintDiagnostics::NamedAsmLabel(help) => {\n-                    db.help(&help);\n+                    db.help(help);\n                     db.note(\"see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\");\n                 },\n                 BuiltinLintDiagnostics::UnexpectedCfg((name, name_span), None) => {\n@@ -793,15 +793,15 @@ pub trait LintContext: Sized {\n                             possibilities.sort();\n \n                             let possibilities = possibilities.join(\", \");\n-                            db.note(&format!(\"expected values for `{name}` are: {possibilities}\"));\n+                            db.note(format!(\"expected values for `{name}` are: {possibilities}\"));\n                         }\n \n                         // Suggest the most probable if we found one\n                         if let Some(best_match) = find_best_match_for_name(&possibilities, value, None) {\n                             db.span_suggestion(value_span, \"did you mean\", format!(\"\\\"{best_match}\\\"\"), Applicability::MaybeIncorrect);\n                         }\n                     } else {\n-                        db.note(&format!(\"no expected value for `{name}`\"));\n+                        db.note(format!(\"no expected value for `{name}`\"));\n                         if name != sym::feature {\n                             db.span_suggestion(name_span.shrink_to_hi().to(value_span), \"remove the value\", \"\", Applicability::MaybeIncorrect);\n                         }"}, {"sha": "9f1f5a26ee5336b3610ab484b1549084435cfc36", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -428,7 +428,7 @@ pub fn check_ast_node_inner<'a, T: EarlyLintPass>(\n         for early_lint in lints {\n             sess.delay_span_bug(\n                 early_lint.span,\n-                &format!(\n+                format!(\n                     \"failed to process buffered lint here (dummy = {})\",\n                     id == ast::DUMMY_NODE_ID\n                 ),"}, {"sha": "d7bacc6485f15a85cb2547dc990873d45c25314f", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1150,6 +1150,14 @@ pub struct NoopMethodCallDiag<'a> {\n     pub label: Span,\n }\n \n+#[derive(LintDiagnostic)]\n+#[diag(lint_suspicious_double_ref_op)]\n+pub struct SuspiciousDoubleRefDiag<'a> {\n+    pub call: Symbol,\n+    pub ty: Ty<'a>,\n+    pub op: &'static str,\n+}\n+\n // pass_by_value.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_pass_by_value)]"}, {"sha": "d054966459d855ba6d3e15ad21e04bde8c29494b", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 63, "deletions": 18, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1,10 +1,11 @@\n use crate::context::LintContext;\n-use crate::lints::NoopMethodCallDiag;\n+use crate::lints::{NoopMethodCallDiag, SuspiciousDoubleRefDiag};\n use crate::LateContext;\n use crate::LateLintPass;\n use rustc_hir::def::DefKind;\n use rustc_hir::{Expr, ExprKind};\n use rustc_middle::ty;\n+use rustc_middle::ty::adjustment::Adjust;\n use rustc_span::symbol::sym;\n \n declare_lint! {\n@@ -35,14 +36,44 @@ declare_lint! {\n     \"detects the use of well-known noop methods\"\n }\n \n-declare_lint_pass!(NoopMethodCall => [NOOP_METHOD_CALL]);\n+declare_lint! {\n+    /// The `suspicious_double_ref_op` lint checks for usage of `.clone()`/`.borrow()`/`.deref()`\n+    /// on an `&&T` when `T: !Deref/Borrow/Clone`, which means the call will return the inner `&T`,\n+    /// instead of performing the operation on the underlying `T` and can be confusing.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// # #![allow(unused)]\n+    /// struct Foo;\n+    /// let foo = &&Foo;\n+    /// let clone: &Foo = foo.clone();\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Since `Foo` doesn't implement `Clone`, running `.clone()` only dereferences the double\n+    /// reference, instead of cloning the inner type which should be what was intended.\n+    pub SUSPICIOUS_DOUBLE_REF_OP,\n+    Warn,\n+    \"suspicious call of trait method on `&&T`\"\n+}\n+\n+declare_lint_pass!(NoopMethodCall => [NOOP_METHOD_CALL, SUSPICIOUS_DOUBLE_REF_OP]);\n \n impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         // We only care about method calls.\n-        let ExprKind::MethodCall(call, receiver, ..) = &expr.kind else {\n-            return\n+        let ExprKind::MethodCall(call, receiver, _, call_span) = &expr.kind else {\n+            return;\n         };\n+\n+        if call_span.from_expansion() {\n+            return;\n+        }\n+\n         // We only care about method calls corresponding to the `Clone`, `Deref` and `Borrow`\n         // traits and ignore any other method call.\n         let did = match cx.typeck_results().type_dependent_def(expr.hir_id) {\n@@ -70,25 +101,39 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n         };\n         // (Re)check that it implements the noop diagnostic.\n         let Some(name) = cx.tcx.get_diagnostic_name(i.def_id()) else { return };\n-        if !matches!(\n-            name,\n-            sym::noop_method_borrow | sym::noop_method_clone | sym::noop_method_deref\n-        ) {\n-            return;\n-        }\n+\n+        let op = match name {\n+            sym::noop_method_borrow => \"borrow\",\n+            sym::noop_method_clone => \"clone\",\n+            sym::noop_method_deref => \"deref\",\n+            _ => return,\n+        };\n+\n         let receiver_ty = cx.typeck_results().expr_ty(receiver);\n         let expr_ty = cx.typeck_results().expr_ty_adjusted(expr);\n-        if receiver_ty != expr_ty {\n-            // This lint will only trigger if the receiver type and resulting expression \\\n-            // type are the same, implying that the method call is unnecessary.\n+        let arg_adjustments = cx.typeck_results().expr_adjustments(receiver);\n+\n+        // If there is any user defined auto-deref step, then we don't want to warn.\n+        // https://github.com/rust-lang/rust-clippy/issues/9272\n+        if arg_adjustments.iter().any(|adj| matches!(adj.kind, Adjust::Deref(Some(_)))) {\n             return;\n         }\n+\n         let expr_span = expr.span;\n         let span = expr_span.with_lo(receiver.span.hi());\n-        cx.emit_spanned_lint(\n-            NOOP_METHOD_CALL,\n-            span,\n-            NoopMethodCallDiag { method: call.ident.name, receiver_ty, label: span },\n-        );\n+\n+        if receiver_ty == expr_ty {\n+            cx.emit_spanned_lint(\n+                NOOP_METHOD_CALL,\n+                span,\n+                NoopMethodCallDiag { method: call.ident.name, receiver_ty, label: span },\n+            );\n+        } else {\n+            cx.emit_spanned_lint(\n+                SUSPICIOUS_DOUBLE_REF_OP,\n+                span,\n+                SuspiciousDoubleRefDiag { call: call.ident.name, ty: expr_ty, op },\n+            )\n+        }\n     }\n }"}, {"sha": "a44c1dd582ed3f1dd580c1be14481e4df4ca22ac", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -498,7 +498,7 @@ impl IntoDiagnostic<'_> for MultipleCandidates {\n         diag.code(error_code!(E0464));\n         diag.set_span(self.span);\n         for (i, candidate) in self.candidates.iter().enumerate() {\n-            diag.note(&format!(\"candidate #{}: {}\", i + 1, candidate.display()));\n+            diag.note(format!(\"candidate #{}: {}\", i + 1, candidate.display()));\n         }\n         diag\n     }"}, {"sha": "b43dcf3e5a183f4b36c302e4b5d91b6a93f54000", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -287,7 +287,7 @@ impl<'tcx> Collector<'tcx> {\n                                 &sess.parse_sess,\n                                 sym::$feature,\n                                 span,\n-                                &format!(\"linking modifier `{modifier}` is unstable\"),\n+                                format!(\"linking modifier `{modifier}` is unstable\"),\n                             )\n                             .emit();\n                         }"}, {"sha": "c266584ac280f5f44b7bd66110d3cb738cc53e13", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -231,19 +231,19 @@ pub fn explain_lint_level_source(\n     let name = lint.name_lower();\n     match src {\n         LintLevelSource::Default => {\n-            err.note_once(&format!(\"`#[{}({})]` on by default\", level.as_str(), name));\n+            err.note_once(format!(\"`#[{}({})]` on by default\", level.as_str(), name));\n         }\n         LintLevelSource::CommandLine(lint_flag_val, orig_level) => {\n             let flag = orig_level.to_cmd_flag();\n             let hyphen_case_lint_name = name.replace('_', \"-\");\n             if lint_flag_val.as_str() == name {\n-                err.note_once(&format!(\n+                err.note_once(format!(\n                     \"requested on the command line with `{} {}`\",\n                     flag, hyphen_case_lint_name\n                 ));\n             } else {\n                 let hyphen_case_flag_val = lint_flag_val.as_str().replace('_', \"-\");\n-                err.note_once(&format!(\n+                err.note_once(format!(\n                     \"`{} {}` implied by `{} {}`\",\n                     flag, hyphen_case_lint_name, flag, hyphen_case_flag_val\n                 ));\n@@ -256,7 +256,7 @@ pub fn explain_lint_level_source(\n             err.span_note_once(span, \"the lint level is defined here\");\n             if lint_attr_name.as_str() != name {\n                 let level_str = level.as_str();\n-                err.note_once(&format!(\n+                err.note_once(format!(\n                     \"`#[{}({})]` implied by `#[{}({})]`\",\n                     level_str, name, level_str, lint_attr_name\n                 ));\n@@ -444,12 +444,12 @@ pub fn struct_lint_level(\n             };\n \n             if future_incompatible.explain_reason {\n-                err.warn(&explanation);\n+                err.warn(explanation);\n             }\n             if !future_incompatible.reference.is_empty() {\n                 let citation =\n                     format!(\"for more information, see {}\", future_incompatible.reference);\n-                err.note(&citation);\n+                err.note(citation);\n             }\n         }\n "}, {"sha": "89fc864319df6ca34823cfc7b6d337a29b70153b", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -115,8 +115,8 @@ pub fn report_unstable(\n         soft_handler(SOFT_UNSTABLE, span, &msg)\n     } else {\n         let mut err =\n-            feature_err_issue(&sess.parse_sess, feature, span, GateIssue::Library(issue), &msg);\n-        if let Some((inner_types, ref msg, sugg, applicability)) = suggestion {\n+            feature_err_issue(&sess.parse_sess, feature, span, GateIssue::Library(issue), msg);\n+        if let Some((inner_types, msg, sugg, applicability)) = suggestion {\n             err.span_suggestion(inner_types, msg, sugg, applicability);\n         }\n         err.emit();\n@@ -170,7 +170,7 @@ pub fn deprecation_suggestion(\n     if let Some(suggestion) = suggestion {\n         diag.span_suggestion_verbose(\n             span,\n-            &format!(\"replace the use of the deprecated {}\", kind),\n+            format!(\"replace the use of the deprecated {}\", kind),\n             suggestion,\n             Applicability::MachineApplicable,\n         );\n@@ -599,7 +599,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             |span, def_id| {\n                 // The API could be uncallable for other reasons, for example when a private module\n                 // was referenced.\n-                self.sess.delay_span_bug(span, &format!(\"encountered unmarked API: {:?}\", def_id));\n+                self.sess.delay_span_bug(span, format!(\"encountered unmarked API: {:?}\", def_id));\n             },\n         )\n     }"}, {"sha": "858a3d266ea3ce19e2f0981595af8ce4401c6502", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -3073,13 +3073,13 @@ mod size_asserts {\n     use super::*;\n     use rustc_data_structures::static_assert_size;\n     // tidy-alphabetical-start\n-    static_assert_size!(BasicBlockData<'_>, 144);\n+    static_assert_size!(BasicBlockData<'_>, 136);\n     static_assert_size!(LocalDecl<'_>, 40);\n     static_assert_size!(SourceScopeData<'_>, 72);\n     static_assert_size!(Statement<'_>, 32);\n     static_assert_size!(StatementKind<'_>, 16);\n-    static_assert_size!(Terminator<'_>, 112);\n-    static_assert_size!(TerminatorKind<'_>, 96);\n+    static_assert_size!(Terminator<'_>, 104);\n+    static_assert_size!(TerminatorKind<'_>, 88);\n     static_assert_size!(VarDebugInfo<'_>, 80);\n     // tidy-alphabetical-end\n }"}, {"sha": "33b7fe0c2dc5589ec4434a1d7e95e24b86388845", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -651,7 +651,7 @@ pub enum TerminatorKind<'tcx> {\n     Assert {\n         cond: Operand<'tcx>,\n         expected: bool,\n-        msg: AssertMessage<'tcx>,\n+        msg: Box<AssertMessage<'tcx>>,\n         target: BasicBlock,\n         unwind: UnwindAction,\n     },"}, {"sha": "be2657d25a6947edee5d4f538e1fe1fce020d50e", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -617,13 +617,11 @@ rustc_queries! {\n     /// `is_const_fn` function. Consider using `is_const_fn` or `is_const_fn_raw` instead.\n     query constness(key: DefId) -> hir::Constness {\n         desc { |tcx| \"checking if item is const: `{}`\", tcx.def_path_str(key) }\n-        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n     query asyncness(key: DefId) -> hir::IsAsync {\n         desc { |tcx| \"checking if the function is async: `{}`\", tcx.def_path_str(key) }\n-        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n@@ -641,14 +639,12 @@ rustc_queries! {\n     /// Returns `true` if this is a foreign item (i.e., linked via `extern { ... }`).\n     query is_foreign_item(key: DefId) -> bool {\n         desc { |tcx| \"checking if `{}` is a foreign item\", tcx.def_path_str(key) }\n-        cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n     /// Returns `Some(generator_kind)` if the node pointed to by `def_id` is a generator.\n     query generator_kind(def_id: DefId) -> Option<hir::GeneratorKind> {\n         desc { |tcx| \"looking up generator kind of `{}`\", tcx.def_path_str(def_id) }\n-        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n \n@@ -747,7 +743,6 @@ rustc_queries! {\n     }\n     query impl_polarity(impl_id: DefId) -> ty::ImplPolarity {\n         desc { |tcx| \"computing implementation polarity of `{}`\", tcx.def_path_str(impl_id) }\n-        cache_on_disk_if { impl_id.is_local() }\n         separate_provide_extern\n     }\n \n@@ -879,7 +874,6 @@ rustc_queries! {\n     }\n     query diagnostic_only_typeck(key: LocalDefId) -> &'tcx ty::TypeckResults<'tcx> {\n         desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key) }\n-        cache_on_disk_if { true }\n     }\n \n     query used_trait_imports(key: LocalDefId) -> &'tcx UnordSet<LocalDefId> {\n@@ -1144,20 +1138,17 @@ rustc_queries! {\n \n     query fn_arg_names(def_id: DefId) -> &'tcx [rustc_span::symbol::Ident] {\n         desc { |tcx| \"looking up function parameter names for `{}`\", tcx.def_path_str(def_id) }\n-        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n     /// Gets the rendered value of the specified constant or associated constant.\n     /// Used by rustdoc.\n     query rendered_const(def_id: DefId) -> &'tcx String {\n         arena_cache\n         desc { |tcx| \"rendering constant initializer of `{}`\", tcx.def_path_str(def_id) }\n-        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n     query impl_parent(def_id: DefId) -> Option<DefId> {\n         desc { |tcx| \"computing specialization parent impl of `{}`\", tcx.def_path_str(def_id) }\n-        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n     }\n \n@@ -1410,7 +1401,6 @@ rustc_queries! {\n \n     query impl_defaultness(def_id: DefId) -> hir::Defaultness {\n         desc { |tcx| \"looking up whether `{}` is a default impl\", tcx.def_path_str(def_id) }\n-        cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n         feedable\n     }"}, {"sha": "c23755642084173afc675e5cc9bba0647352b871", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1010,18 +1010,15 @@ impl ObjectSafetyViolation {\n             ) => {\n                 err.span_suggestion(\n                     *span,\n-                    &format!(\n-                        \"consider changing method `{}`'s `self` parameter to be `&self`\",\n-                        name\n-                    ),\n+                    format!(\"consider changing method `{}`'s `self` parameter to be `&self`\", name),\n                     \"&Self\",\n                     Applicability::MachineApplicable,\n                 );\n             }\n             ObjectSafetyViolation::AssocConst(name, _)\n             | ObjectSafetyViolation::GAT(name, _)\n             | ObjectSafetyViolation::Method(name, ..) => {\n-                err.help(&format!(\"consider moving `{}` to another trait\", name));\n+                err.help(format!(\"consider moving `{}` to another trait\", name));\n             }\n         }\n     }"}, {"sha": "e7107c28bf407306e0f889be0ff2c999407fda3d", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -114,7 +114,7 @@ impl<'tcx> Const<'tcx> {\n                 Err(e) => {\n                     tcx.sess.delay_span_bug(\n                         expr.span,\n-                        &format!(\"Const::from_anon_const: couldn't lit_to_const {:?}\", e),\n+                        format!(\"Const::from_anon_const: couldn't lit_to_const {:?}\", e),\n                     );\n                 }\n             }"}, {"sha": "6a29063b80db39aadfd18d01dc26ce8e1905ca24", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -139,7 +139,7 @@ pub fn suggest_arbitrary_trait_bound<'tcx>(\n     // Suggest a where clause bound for a non-type parameter.\n     err.span_suggestion_verbose(\n         generics.tail_span_for_predicate_suggestion(),\n-        &format!(\n+        format!(\n             \"consider {} `where` clause, but there might be an alternative better way to express \\\n              this requirement\",\n             if generics.where_clause_span.is_empty() { \"introducing a\" } else { \"extending the\" },\n@@ -242,7 +242,7 @@ pub fn suggest_constraining_type_params<'a>(\n \n                 err.span_label(\n                     param.span,\n-                    &format!(\"this type parameter needs to be `{}`\", constraint),\n+                    format!(\"this type parameter needs to be `{}`\", constraint),\n                 );\n                 suggest_removing_unsized_bound(generics, &mut suggestions, param, def_id);\n             }"}, {"sha": "72710b78c93739d299642547cb8e30fbd9195195", "filename": "compiler/rustc_middle/src/ty/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -177,7 +177,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReverseMapper<'tcx> {\n                                 .sess\n                                 .struct_span_err(\n                                     self.span,\n-                                    &format!(\n+                                    format!(\n                                         \"type parameter `{}` is part of concrete type but not \\\n                                           used in parameter list for the `impl Trait` type alias\",\n                                         ty"}, {"sha": "3dfd0824f9872f029a95a678c3b634c98b4718e7", "filename": "compiler/rustc_middle/src/util/bug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -31,8 +31,8 @@ fn opt_span_bug_fmt<S: Into<MultiSpan>>(\n     tls::with_opt(move |tcx| {\n         let msg = format!(\"{}: {}\", location, args);\n         match (tcx, span) {\n-            (Some(tcx), Some(span)) => tcx.sess.diagnostic().span_bug(span, &msg),\n-            (Some(tcx), None) => tcx.sess.diagnostic().bug(&msg),\n+            (Some(tcx), Some(span)) => tcx.sess.diagnostic().span_bug(span, msg),\n+            (Some(tcx), None) => tcx.sess.diagnostic().bug(msg),\n             (None, _) => panic_any(msg),\n         }\n     })"}, {"sha": "56c87c402fe2b9aac822e1e6fcafc39735e72576", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1172,7 +1172,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             TerminatorKind::Assert {\n                 cond,\n                 expected,\n-                msg,\n+                msg: Box::new(msg),\n                 target: success_block,\n                 unwind: UnwindAction::Continue,\n             },"}, {"sha": "8cb3b00c9ad7006ae6188d05f895b8bf804a6c27", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -672,7 +672,7 @@ fn non_exhaustive_match<'p, 'tcx>(\n         ty::Adt(def, _) if def.is_variant_list_non_exhaustive() && !def.did().is_local());\n \n     adt_defined_here(cx, &mut err, scrut_ty, &witnesses);\n-    err.note(&format!(\n+    err.note(format!(\n         \"the matched value is of type `{}`{}\",\n         scrut_ty,\n         if is_variant_list_non_exhaustive { \", which is marked as non-exhaustive\" } else { \"\" }\n@@ -682,13 +682,13 @@ fn non_exhaustive_match<'p, 'tcx>(\n         && witnesses.len() == 1\n         && matches!(witnesses[0].ctor(), Constructor::NonExhaustive)\n     {\n-        err.note(&format!(\n+        err.note(format!(\n             \"`{}` does not have a fixed maximum value, so a wildcard `_` is necessary to match \\\n              exhaustively\",\n             scrut_ty,\n         ));\n         if cx.tcx.sess.is_nightly_build() {\n-            err.help(&format!(\n+            err.help(format!(\n                 \"add `#![feature(precise_pointer_size_matching)]` to the crate attributes to \\\n                  enable precise `{}` matching\",\n                 scrut_ty,\n@@ -793,9 +793,9 @@ fn non_exhaustive_match<'p, 'tcx>(\n         },\n     );\n     if let Some((span, sugg)) = suggestion {\n-        err.span_suggestion_verbose(span, &msg, sugg, Applicability::HasPlaceholders);\n+        err.span_suggestion_verbose(span, msg, sugg, Applicability::HasPlaceholders);\n     } else {\n-        err.help(&msg);\n+        err.help(msg);\n     }\n     err.emit();\n }\n@@ -857,7 +857,7 @@ fn adt_defined_here<'p, 'tcx>(\n         for pat in spans {\n             span.push_span_label(pat, \"not covered\");\n         }\n-        err.span_note(span, &format!(\"`{}` defined here\", ty));\n+        err.span_note(span, format!(\"`{}` defined here\", ty));\n     }\n }\n "}, {"sha": "1cf2f7ec0fff140a4d16225bee24b57a288f6d7e", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -229,7 +229,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                         self.lower_pattern_range(ty, lc, hc, end, lo_span, lo_expr, hi_expr)\n                     }\n                     None => {\n-                        let msg = &format!(\n+                        let msg = format!(\n                             \"found bad range pattern `{:?}` outside of error recovery\",\n                             (&lo, &hi),\n                         );"}, {"sha": "f229b10c44767162c0f0519c8da071a7c0d2e9b6", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -685,10 +685,9 @@ enum ArmType {\n /// For example, if we are constructing a witness for the match against\n ///\n /// ```compile_fail,E0004\n-/// # #![feature(type_ascription)]\n /// struct Pair(Option<(u32, u32)>, bool);\n /// # fn foo(p: Pair) {\n-/// match (p: Pair) {\n+/// match p {\n ///    Pair(None, _) => {}\n ///    Pair(_, false) => {}\n /// }"}, {"sha": "d60184e0ebef6f829d667737cfd24304eb91e133", "filename": "compiler/rustc_mir_transform/src/check_alignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -224,10 +224,10 @@ fn insert_alignment_check<'tcx>(\n             cond: Operand::Copy(is_ok),\n             expected: true,\n             target: new_block,\n-            msg: AssertKind::MisalignedPointerDereference {\n+            msg: Box::new(AssertKind::MisalignedPointerDereference {\n                 required: Operand::Copy(alignment),\n                 found: Operand::Copy(addr),\n-            },\n+            }),\n             unwind: UnwindAction::Terminate,\n         },\n     });"}, {"sha": "deec66bbaf356555e60868bf1faf4216b5b520cc", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -21,9 +21,9 @@ use rustc_target::spec::abi::Abi as CallAbi;\n \n use crate::MirPass;\n use rustc_const_eval::interpret::{\n-    self, compile_time_machine, AllocId, ConstAllocation, ConstValue, CtfeValidationMode, Frame,\n-    ImmTy, Immediate, InterpCx, InterpResult, LocalValue, MemoryKind, OpTy, PlaceTy, Pointer,\n-    Scalar, StackPopCleanup,\n+    self, compile_time_machine, AllocId, ConstAllocation, ConstValue, Frame, ImmTy, Immediate,\n+    InterpCx, InterpResult, LocalValue, MemoryKind, OpTy, PlaceTy, Pointer, Scalar,\n+    StackPopCleanup,\n };\n \n /// The maximum number of bytes that we'll allocate space for a local or the return value.\n@@ -464,16 +464,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n \n                 return None;\n             }\n-            // Do not try creating references, nor any types with potentially-complex\n-            // invariants. This avoids an issue where checking validity would do a\n-            // bunch of work generating a nice message about the invariant violation,\n-            // only to not show it to anyone (since this isn't the lint).\n-            Rvalue::Cast(CastKind::Transmute, op, dst_ty) if !dst_ty.is_primitive() => {\n-                trace!(\"skipping Transmute of {:?} to {:?}\", op, dst_ty);\n-\n-                return None;\n-            }\n-\n             // There's no other checking to do at this time.\n             Rvalue::Aggregate(..)\n             | Rvalue::Use(..)\n@@ -591,18 +581,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n \n         trace!(\"attempting to replace {:?} with {:?}\", rval, value);\n-        if let Err(e) = self.ecx.const_validate_operand(\n-            value,\n-            vec![],\n-            // FIXME: is ref tracking too expensive?\n-            // FIXME: what is the point of ref tracking if we do not even check the tracked refs?\n-            &mut interpret::RefTracking::empty(),\n-            CtfeValidationMode::Regular,\n-        ) {\n-            trace!(\"validation error, attempt failed: {:?}\", e);\n-            return;\n-        }\n-\n         // FIXME> figure out what to do when read_immediate_raw fails\n         let imm = self.ecx.read_immediate_raw(value).ok();\n "}, {"sha": "98e7a519c201395ab85bb13994761ac3b5db1df5", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -366,7 +366,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                     if maybe_dead {\n                         self.tcx.sess.delay_span_bug(\n                             terminator.source_info.span,\n-                            &format!(\n+                            format!(\n                                 \"drop of untracked, uninitialized value {:?}, place {:?} ({:?})\",\n                                 bb, place, path\n                             ),\n@@ -440,7 +440,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                             ) {\n                                 self.tcx.sess.delay_span_bug(\n                                     terminator.source_info.span,\n-                                    &format!(\"drop of untracked value {:?}\", bb),\n+                                    format!(\"drop of untracked value {:?}\", bb),\n                                 );\n                             }\n                             // A drop and replace behind a pointer/array/whatever."}, {"sha": "9e16c400f14798e038e55778091d9fa9d9dd4ea1", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -865,7 +865,7 @@ fn sanitize_witness<'tcx>(\n         _ => {\n             tcx.sess.delay_span_bug(\n                 body.span,\n-                &format!(\"unexpected generator witness type {:?}\", witness.kind()),\n+                format!(\"unexpected generator witness type {:?}\", witness.kind()),\n             );\n             return;\n         }\n@@ -1150,7 +1150,7 @@ fn insert_panic_block<'tcx>(\n             literal: ConstantKind::from_bool(tcx, false),\n         })),\n         expected: true,\n-        msg: message,\n+        msg: Box::new(message),\n         target: assert_block,\n         unwind: UnwindAction::Continue,\n     };\n@@ -1451,8 +1451,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n                 )\n             }\n             _ => {\n-                tcx.sess\n-                    .delay_span_bug(body.span, &format!(\"unexpected generator type {}\", gen_ty));\n+                tcx.sess.delay_span_bug(body.span, format!(\"unexpected generator type {}\", gen_ty));\n                 return;\n             }\n         };"}, {"sha": "65162477b7bc54c31d9c8399924fbb2ffe4a1166", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -843,7 +843,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 }\n             }\n             mir::TerminatorKind::Assert { ref msg, .. } => {\n-                let lang_item = match msg {\n+                let lang_item = match &**msg {\n                     mir::AssertKind::BoundsCheck { .. } => LangItem::PanicBoundsCheck,\n                     _ => LangItem::Panic,\n                 };"}, {"sha": "9a5232b1bcdd9eb903cc66f218c751251cedd06b", "filename": "compiler/rustc_parse/messages.ftl", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fmessages.ftl?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -420,6 +420,15 @@ parse_maybe_fn_typo_with_impl = you might have meant to write `impl` instead of\n parse_expected_fn_path_found_fn_keyword = expected identifier, found keyword `fn`\n     .suggestion = use `Fn` to refer to the trait\n \n+parse_path_single_colon = path separator must be a double colon\n+    .suggestion = use a double colon instead\n+\n+parse_colon_as_semi = statements are terminated with a semicolon\n+    .suggestion = use a semicolon instead\n+\n+parse_type_ascription_removed =\n+    if you meant to annotate an expression with a type, the type ascription syntax has been removed, see issue #101728 <https://github.com/rust-lang/rust/issues/101728>\n+\n parse_where_clause_before_tuple_struct_body = where clauses are not allowed before tuple struct bodies\n     .label = unexpected where clause\n     .name_label = while parsing this tuple struct"}, {"sha": "b445ccc7ad0aabc34727cd4da4d8effc5648b2d0", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1340,6 +1340,28 @@ pub(crate) struct ExpectedFnPathFoundFnKeyword {\n     pub fn_token_span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(parse_path_single_colon)]\n+pub(crate) struct PathSingleColon {\n+    #[primary_span]\n+    #[suggestion(applicability = \"machine-applicable\", code = \"::\")]\n+    pub span: Span,\n+\n+    #[note(parse_type_ascription_removed)]\n+    pub type_ascription: Option<()>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_colon_as_semi)]\n+pub(crate) struct ColonAsSemi {\n+    #[primary_span]\n+    #[suggestion(applicability = \"machine-applicable\", code = \";\")]\n+    pub span: Span,\n+\n+    #[note(parse_type_ascription_removed)]\n+    pub type_ascription: Option<()>,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(parse_where_clause_before_tuple_struct_body)]\n pub(crate) struct WhereClauseBeforeTupleStructBody {"}, {"sha": "b1c0dedd3c7dcade7a6b8de2abc537e76541fcd8", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -321,7 +321,7 @@ impl<'a> StringReader<'a> {\n     ) -> DiagnosticBuilder<'a, !> {\n         self.sess\n             .span_diagnostic\n-            .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!(\"{}: {}\", m, escaped_char(c)))\n+            .struct_span_fatal(self.mk_sp(from_pos, to_pos), format!(\"{}: {}\", m, escaped_char(c)))\n     }\n \n     /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly\n@@ -542,7 +542,7 @@ impl<'a> StringReader<'a> {\n         err.span_label(self.mk_sp(start, start), \"unterminated raw string\");\n \n         if n_hashes > 0 {\n-            err.note(&format!(\n+            err.note(format!(\n                 \"this raw string should be terminated with `\\\"{}`\",\n                 \"#\".repeat(n_hashes as usize)\n             ));"}, {"sha": "318a29985090237b06b752ec0ef463f071a3bbde", "filename": "compiler/rustc_parse/src/lexer/tokentrees.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -199,8 +199,7 @@ impl<'a> TokenTreesReader<'a> {\n         // matching opening delimiter).\n         let token_str = token_to_string(&self.token);\n         let msg = format!(\"unexpected closing delimiter: `{}`\", token_str);\n-        let mut err =\n-            self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);\n+        let mut err = self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, msg);\n \n         report_suspicious_mismatch_block(\n             &mut err,"}, {"sha": "d8bcf816fb26303f46599fb749e306d9967b019b", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -129,7 +129,7 @@ pub(crate) fn emit_unescape_error(\n             let label =\n                 if mode.is_byte() { \"unknown byte escape\" } else { \"unknown character escape\" };\n             let ec = escaped_char(c);\n-            let mut diag = handler.struct_span_err(span, &format!(\"{}: `{}`\", label, ec));\n+            let mut diag = handler.struct_span_err(span, format!(\"{}: `{}`\", label, ec));\n             diag.span_label(span, label);\n             if c == '{' || c == '}' && !mode.is_byte() {\n                 diag.help(\n@@ -180,13 +180,13 @@ pub(crate) fn emit_unescape_error(\n             } else {\n                 String::new()\n             };\n-            err.span_label(span, &format!(\"must be ASCII{}\", postfix));\n+            err.span_label(span, format!(\"must be ASCII{}\", postfix));\n             // Note: the \\\\xHH suggestions are not given for raw byte string\n             // literals, because they are araw and so cannot use any escapes.\n             if (c as u32) <= 0xFF && mode != Mode::RawByteStr {\n                 err.span_suggestion(\n                     span,\n-                    &format!(\n+                    format!(\n                         \"if you meant to use the unicode code point for {:?}, use a \\\\xHH escape\",\n                         c\n                     ),\n@@ -200,10 +200,7 @@ pub(crate) fn emit_unescape_error(\n                 utf8.push(c);\n                 err.span_suggestion(\n                     span,\n-                    &format!(\n-                        \"if you meant to use the UTF-8 encoding of {:?}, use \\\\xHH escapes\",\n-                        c\n-                    ),\n+                    format!(\"if you meant to use the UTF-8 encoding of {:?}, use \\\\xHH escapes\", c),\n                     utf8.as_bytes()\n                         .iter()\n                         .map(|b: &u8| format!(\"\\\\x{:X}\", *b))"}, {"sha": "829d9693e55a65615fc92d1c297d5626393fe564", "filename": "compiler/rustc_parse/src/lexer/unicode_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -350,7 +350,7 @@ pub(super) fn check_for_substitution(\n \n     let Some((_, ascii_name, token)) = ASCII_ARRAY.iter().find(|&&(s, _, _)| s == ascii_str) else {\n         let msg = format!(\"substitution character not found for '{}'\", ch);\n-        reader.sess.span_diagnostic.span_bug_no_panic(span, &msg);\n+        reader.sess.span_diagnostic.span_bug_no_panic(span, msg);\n         return (None, None);\n     };\n "}, {"sha": "25de780853291827770b780aa17516693ac6e95f", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -153,7 +153,7 @@ fn try_file_to_source_file(\n ) -> Result<Lrc<SourceFile>, Diagnostic> {\n     sess.source_map().load_file(path).map_err(|e| {\n         let msg = format!(\"couldn't read {}: {}\", path.display(), e);\n-        let mut diag = Diagnostic::new(Level::Fatal, &msg);\n+        let mut diag = Diagnostic::new(Level::Fatal, msg);\n         if let Some(sp) = spanopt {\n             diag.set_span(sp);\n         }\n@@ -190,7 +190,7 @@ pub fn maybe_file_to_stream(\n     override_span: Option<Span>,\n ) -> Result<TokenStream, Vec<Diagnostic>> {\n     let src = source_file.src.as_ref().unwrap_or_else(|| {\n-        sess.span_diagnostic.bug(&format!(\n+        sess.span_diagnostic.bug(format!(\n             \"cannot lex `source_file` without source: {}\",\n             sess.source_map().filename_for_diagnostics(&source_file.name)\n         ));\n@@ -247,7 +247,7 @@ pub fn parse_cfg_attr(\n             match parse_in(parse_sess, tokens.clone(), \"`cfg_attr` input\", |p| p.parse_cfg_attr()) {\n                 Ok(r) => return Some(r),\n                 Err(mut e) => {\n-                    e.help(&format!(\"the valid syntax is `{}`\", CFG_ATTR_GRAMMAR_HELP))\n+                    e.help(format!(\"the valid syntax is `{}`\", CFG_ATTR_GRAMMAR_HELP))\n                         .note(CFG_ATTR_NOTE_REF)\n                         .emit();\n                 }"}, {"sha": "513f51a3b5cf18d7a23d1de11b9d464f39608e0f", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 41, "deletions": 89, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -4,7 +4,7 @@ use super::{\n     TokenExpectType, TokenType,\n };\n use crate::errors::{\n-    AmbiguousPlus, AttributeOnParamType, BadQPathStage2, BadTypePlus, BadTypePlusSub,\n+    AmbiguousPlus, AttributeOnParamType, BadQPathStage2, BadTypePlus, BadTypePlusSub, ColonAsSemi,\n     ComparisonOperatorsCannotBeChained, ComparisonOperatorsCannotBeChainedSugg,\n     ConstGenericWithoutBraces, ConstGenericWithoutBracesSugg, DocCommentDoesNotDocumentAnything,\n     DocCommentOnParamType, DoubleColonInBound, ExpectedIdentifier, ExpectedSemi, ExpectedSemiSugg,\n@@ -84,6 +84,7 @@ impl RecoverQPath for Ty {\n }\n \n impl RecoverQPath for Pat {\n+    const PATH_STYLE: PathStyle = PathStyle::Pat;\n     fn to_ty(&self) -> Option<P<Ty>> {\n         self.to_ty()\n     }\n@@ -206,11 +207,11 @@ struct MultiSugg {\n \n impl MultiSugg {\n     fn emit(self, err: &mut Diagnostic) {\n-        err.multipart_suggestion(&self.msg, self.patches, self.applicability);\n+        err.multipart_suggestion(self.msg, self.patches, self.applicability);\n     }\n \n     fn emit_verbose(self, err: &mut Diagnostic) {\n-        err.multipart_suggestion_verbose(&self.msg, self.patches, self.applicability);\n+        err.multipart_suggestion_verbose(self.msg, self.patches, self.applicability);\n     }\n }\n \n@@ -590,13 +591,13 @@ impl<'a> Parser<'a> {\n         };\n         self.last_unexpected_token_span = Some(self.token.span);\n         // FIXME: translation requires list formatting (for `expect`)\n-        let mut err = self.struct_span_err(self.token.span, &msg_exp);\n+        let mut err = self.struct_span_err(self.token.span, msg_exp);\n \n         if let TokenKind::Ident(symbol, _) = &self.prev_token.kind {\n             if [\"def\", \"fun\", \"func\", \"function\"].contains(&symbol.as_str()) {\n                 err.span_suggestion_short(\n                     self.prev_token.span,\n-                    &format!(\"write `fn` instead of `{symbol}` to declare a function\"),\n+                    format!(\"write `fn` instead of `{symbol}` to declare a function\"),\n                     \"fn\",\n                     Applicability::MachineApplicable,\n                 );\n@@ -663,7 +664,6 @@ impl<'a> Parser<'a> {\n             err.span_label(sp, label_exp);\n             err.span_label(self.token.span, \"unexpected token\");\n         }\n-        self.maybe_annotate_with_ascription(&mut err, false);\n         Err(err)\n     }\n \n@@ -695,13 +695,13 @@ impl<'a> Parser<'a> {\n                 err.set_span(span);\n                 err.span_suggestion(\n                     span,\n-                    &format!(\"remove the extra `#`{}\", pluralize!(count)),\n+                    format!(\"remove the extra `#`{}\", pluralize!(count)),\n                     \"\",\n                     Applicability::MachineApplicable,\n                 );\n                 err.span_label(\n                     str_span,\n-                    &format!(\"this raw string started with {n_hashes} `#`{}\", pluralize!(n_hashes)),\n+                    format!(\"this raw string started with {n_hashes} `#`{}\", pluralize!(n_hashes)),\n                 );\n                 true\n             }\n@@ -788,59 +788,6 @@ impl<'a> Parser<'a> {\n         None\n     }\n \n-    pub fn maybe_annotate_with_ascription(\n-        &mut self,\n-        err: &mut Diagnostic,\n-        maybe_expected_semicolon: bool,\n-    ) {\n-        if let Some((sp, likely_path)) = self.last_type_ascription.take() {\n-            let sm = self.sess.source_map();\n-            let next_pos = sm.lookup_char_pos(self.token.span.lo());\n-            let op_pos = sm.lookup_char_pos(sp.hi());\n-\n-            let allow_unstable = self.sess.unstable_features.is_nightly_build();\n-\n-            if likely_path {\n-                err.span_suggestion(\n-                    sp,\n-                    \"maybe write a path separator here\",\n-                    \"::\",\n-                    if allow_unstable {\n-                        Applicability::MaybeIncorrect\n-                    } else {\n-                        Applicability::MachineApplicable\n-                    },\n-                );\n-                self.sess.type_ascription_path_suggestions.borrow_mut().insert(sp);\n-            } else if op_pos.line != next_pos.line && maybe_expected_semicolon {\n-                err.span_suggestion(\n-                    sp,\n-                    \"try using a semicolon\",\n-                    \";\",\n-                    Applicability::MaybeIncorrect,\n-                );\n-            } else if allow_unstable {\n-                err.span_label(sp, \"tried to parse a type due to this type ascription\");\n-            } else {\n-                err.span_label(sp, \"tried to parse a type due to this\");\n-            }\n-            if allow_unstable {\n-                // Give extra information about type ascription only if it's a nightly compiler.\n-                err.note(\n-                    \"`#![feature(type_ascription)]` lets you annotate an expression with a type: \\\n-                     `<expr>: <type>`\",\n-                );\n-                if !likely_path {\n-                    // Avoid giving too much info when it was likely an unrelated typo.\n-                    err.note(\n-                        \"see issue #23416 <https://github.com/rust-lang/rust/issues/23416> \\\n-                        for more information\",\n-                    );\n-                }\n-            }\n-        }\n-    }\n-\n     /// Eats and discards tokens until one of `kets` is encountered. Respects token trees,\n     /// passes through any errors encountered. Used for error recovery.\n     pub(super) fn eat_to_tokens(&mut self, kets: &[&TokenKind]) {\n@@ -1413,12 +1360,12 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, P<Expr>> {\n         let mut err = self.struct_span_err(\n             op_span,\n-            &format!(\"Rust has no {} {} operator\", kind.fixity, kind.op.name()),\n+            format!(\"Rust has no {} {} operator\", kind.fixity, kind.op.name()),\n         );\n-        err.span_label(op_span, &format!(\"not a valid {} operator\", kind.fixity));\n+        err.span_label(op_span, format!(\"not a valid {} operator\", kind.fixity));\n \n         let help_base_case = |mut err: DiagnosticBuilder<'_, _>, base| {\n-            err.help(&format!(\"use `{}= 1` instead\", kind.op.chr()));\n+            err.help(format!(\"use `{}= 1` instead\", kind.op.chr()));\n             err.emit();\n             Ok(base)\n         };\n@@ -1607,7 +1554,7 @@ impl<'a> Parser<'a> {\n                 _ => this_token_str,\n             },\n         );\n-        let mut err = self.struct_span_err(sp, &msg);\n+        let mut err = self.struct_span_err(sp, msg);\n         let label_exp = format!(\"expected `{token_str}`\");\n         let sm = self.sess.source_map();\n         if !sm.is_multiline(prev_sp.until(sp)) {\n@@ -1622,12 +1569,36 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(super) fn expect_semi(&mut self) -> PResult<'a, ()> {\n-        if self.eat(&token::Semi) {\n+        if self.eat(&token::Semi) || self.recover_colon_as_semi() {\n             return Ok(());\n         }\n         self.expect(&token::Semi).map(drop) // Error unconditionally\n     }\n \n+    pub(super) fn recover_colon_as_semi(&mut self) -> bool {\n+        let line_idx = |span: Span| {\n+            self.sess\n+                .source_map()\n+                .span_to_lines(span)\n+                .ok()\n+                .and_then(|lines| Some(lines.lines.get(0)?.line_index))\n+        };\n+\n+        if self.may_recover()\n+            && self.token == token::Colon\n+            && self.look_ahead(1, |next| line_idx(self.token.span) < line_idx(next.span))\n+        {\n+            self.sess.emit_err(ColonAsSemi {\n+                span: self.token.span,\n+                type_ascription: self.sess.unstable_features.is_nightly_build().then_some(()),\n+            });\n+            self.bump();\n+            return true;\n+        }\n+\n+        false\n+    }\n+\n     /// Consumes alternative await syntaxes like `await!(<expr>)`, `await <expr>`,\n     /// `await? <expr>`, `await(<expr>)`, and `await { <expr> }`.\n     pub(super) fn recover_incorrect_await_syntax(\n@@ -1734,7 +1705,7 @@ impl<'a> Parser<'a> {\n                     Applicability::MachineApplicable,\n                 );\n             }\n-            err.span_suggestion(lo.shrink_to_lo(), &format!(\"{prefix}you can still access the deprecated `try!()` macro using the \\\"raw identifier\\\" syntax\"), \"r#\", Applicability::MachineApplicable);\n+            err.span_suggestion(lo.shrink_to_lo(), format!(\"{prefix}you can still access the deprecated `try!()` macro using the \\\"raw identifier\\\" syntax\"), \"r#\", Applicability::MachineApplicable);\n             err.emit();\n             Ok(self.mk_expr_err(lo.to(hi)))\n         } else {\n@@ -1790,24 +1761,6 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub(super) fn could_ascription_be_path(&self, node: &ast::ExprKind) -> bool {\n-        (self.token == token::Lt && // `foo:<bar`, likely a typoed turbofish.\n-            self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident()))\n-            || self.token.is_ident() &&\n-            matches!(node, ast::ExprKind::Path(..) | ast::ExprKind::Field(..)) &&\n-            !self.token.is_reserved_ident() &&           // v `foo:bar(baz)`\n-            self.look_ahead(1, |t| t == &token::OpenDelim(Delimiter::Parenthesis))\n-            || self.look_ahead(1, |t| t == &token::OpenDelim(Delimiter::Brace)) // `foo:bar {`\n-            || self.look_ahead(1, |t| t == &token::Colon) &&     // `foo:bar::<baz`\n-            self.look_ahead(2, |t| t == &token::Lt) &&\n-            self.look_ahead(3, |t| t.is_ident())\n-            || self.look_ahead(1, |t| t == &token::Colon) &&  // `foo:bar:baz`\n-            self.look_ahead(2, |t| t.is_ident())\n-            || self.look_ahead(1, |t| t == &token::ModSep)\n-                && (self.look_ahead(2, |t| t.is_ident()) ||   // `foo:bar::baz`\n-            self.look_ahead(2, |t| t == &token::Lt)) // `foo:bar::<baz>`\n-    }\n-\n     pub(super) fn recover_seq_parse_error(\n         &mut self,\n         delim: Delimiter,\n@@ -1902,7 +1855,6 @@ impl<'a> Parser<'a> {\n                         && brace_depth == 0\n                         && bracket_depth == 0 =>\n                 {\n-                    debug!(\"recover_stmt_ return - Semi\");\n                     break;\n                 }\n                 _ => self.bump(),\n@@ -2108,7 +2060,7 @@ impl<'a> Parser<'a> {\n                 format!(\"expected expression, found {}\", super::token_descr(&self.token),),\n             ),\n         };\n-        let mut err = self.struct_span_err(span, &msg);\n+        let mut err = self.struct_span_err(span, msg);\n         let sp = self.sess.source_map().start_point(self.token.span);\n         if let Some(sp) = self.sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n             err.subdiagnostic(ExprParenthesesNeeded::surrounding(*sp));\n@@ -2179,7 +2131,7 @@ impl<'a> Parser<'a> {\n         // arguments after a comma.\n         let mut err = self.struct_span_err(\n             self.token.span,\n-            &format!(\"expected one of `,` or `>`, found {}\", super::token_descr(&self.token)),\n+            format!(\"expected one of `,` or `>`, found {}\", super::token_descr(&self.token)),\n         );\n         err.span_label(self.token.span, \"expected one of `,` or `>`\");\n         match self.recover_const_arg(arg.span(), err) {\n@@ -2606,7 +2558,7 @@ impl<'a> Parser<'a> {\n         let mut err = self.struct_span_err(comma_span, \"unexpected `,` in pattern\");\n         if let Ok(seq_snippet) = self.span_to_snippet(seq_span) {\n             err.multipart_suggestion(\n-                &format!(\n+                format!(\n                     \"try adding parentheses to match on a tuple{}\",\n                     if let CommaRecoveryMode::LikelyTuple = rt { \"\" } else { \"...\" },\n                 ),"}, {"sha": "f58f8919e5c9d4f135a74a57cda1edeade5e774a", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 24, "deletions": 70, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -174,10 +174,8 @@ impl<'a> Parser<'a> {\n                 self.parse_expr_prefix(attrs)?\n             }\n         };\n-        let last_type_ascription_set = self.last_type_ascription.is_some();\n \n         if !self.should_continue_as_assoc_expr(&lhs) {\n-            self.last_type_ascription = None;\n             return Ok(lhs);\n         }\n \n@@ -301,9 +299,6 @@ impl<'a> Parser<'a> {\n             if op == AssocOp::As {\n                 lhs = self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Cast)?;\n                 continue;\n-            } else if op == AssocOp::Colon {\n-                lhs = self.parse_assoc_op_ascribe(lhs, lhs_span)?;\n-                continue;\n             } else if op == AssocOp::DotDot || op == AssocOp::DotDotEq {\n                 // If we didn't have to handle `x..`/`x..=`, it would be pretty easy to\n                 // generalise it to the Fixity::None code.\n@@ -364,7 +359,7 @@ impl<'a> Parser<'a> {\n                     let aopexpr = self.mk_assign_op(source_map::respan(cur_op_span, aop), lhs, rhs);\n                     self.mk_expr(span, aopexpr)\n                 }\n-                AssocOp::As | AssocOp::Colon | AssocOp::DotDot | AssocOp::DotDotEq => {\n+                AssocOp::As | AssocOp::DotDot | AssocOp::DotDotEq => {\n                     self.span_bug(span, \"AssocOp should have been handled by special case\")\n                 }\n             };\n@@ -373,9 +368,7 @@ impl<'a> Parser<'a> {\n                 break;\n             }\n         }\n-        if last_type_ascription_set {\n-            self.last_type_ascription = None;\n-        }\n+\n         Ok(lhs)\n     }\n \n@@ -743,7 +736,7 @@ impl<'a> Parser<'a> {\n                     (\n                         // `foo: `\n                         ExprKind::Path(None, ast::Path { segments, .. }),\n-                        TokenKind::Ident(kw::For | kw::Loop | kw::While, false),\n+                        token::Ident(kw::For | kw::Loop | kw::While, false),\n                     ) if segments.len() == 1 => {\n                         let snapshot = self.create_snapshot_for_diagnostic();\n                         let label = Label {\n@@ -838,21 +831,19 @@ impl<'a> Parser<'a> {\n         &mut self,\n         cast_expr: P<Expr>,\n     ) -> PResult<'a, P<Expr>> {\n+        if let ExprKind::Type(_, _) = cast_expr.kind {\n+            panic!(\"ExprKind::Type must not be parsed\");\n+        }\n+\n         let span = cast_expr.span;\n-        let (cast_kind, maybe_ascription_span) =\n-            if let ExprKind::Type(ascripted_expr, _) = &cast_expr.kind {\n-                (\"type ascription\", Some(ascripted_expr.span.shrink_to_hi().with_hi(span.hi())))\n-            } else {\n-                (\"cast\", None)\n-            };\n \n         let with_postfix = self.parse_expr_dot_or_call_with_(cast_expr, span)?;\n \n         // Check if an illegal postfix operator has been added after the cast.\n         // If the resulting expression is not a cast, it is an illegal postfix operator.\n-        if !matches!(with_postfix.kind, ExprKind::Cast(_, _) | ExprKind::Type(_, _)) {\n+        if !matches!(with_postfix.kind, ExprKind::Cast(_, _)) {\n             let msg = format!(\n-                \"{cast_kind} cannot be followed by {}\",\n+                \"cast cannot be followed by {}\",\n                 match with_postfix.kind {\n                     ExprKind::Index(_, _) => \"indexing\",\n                     ExprKind::Try(_) => \"`?`\",\n@@ -864,7 +855,7 @@ impl<'a> Parser<'a> {\n                     _ => unreachable!(\"parse_dot_or_call_expr_with_ shouldn't produce this\"),\n                 }\n             );\n-            let mut err = self.struct_span_err(span, &msg);\n+            let mut err = self.struct_span_err(span, msg);\n \n             let suggest_parens = |err: &mut Diagnostic| {\n                 let suggestions = vec![\n@@ -878,44 +869,13 @@ impl<'a> Parser<'a> {\n                 );\n             };\n \n-            // If type ascription is \"likely an error\", the user will already be getting a useful\n-            // help message, and doesn't need a second.\n-            if self.last_type_ascription.map_or(false, |last_ascription| last_ascription.1) {\n-                self.maybe_annotate_with_ascription(&mut err, false);\n-            } else if let Some(ascription_span) = maybe_ascription_span {\n-                let is_nightly = self.sess.unstable_features.is_nightly_build();\n-                if is_nightly {\n-                    suggest_parens(&mut err);\n-                }\n-                err.span_suggestion(\n-                    ascription_span,\n-                    &format!(\n-                        \"{}remove the type ascription\",\n-                        if is_nightly { \"alternatively, \" } else { \"\" }\n-                    ),\n-                    \"\",\n-                    if is_nightly {\n-                        Applicability::MaybeIncorrect\n-                    } else {\n-                        Applicability::MachineApplicable\n-                    },\n-                );\n-            } else {\n-                suggest_parens(&mut err);\n-            }\n+            suggest_parens(&mut err);\n+\n             err.emit();\n         };\n         Ok(with_postfix)\n     }\n \n-    fn parse_assoc_op_ascribe(&mut self, lhs: P<Expr>, lhs_span: Span) -> PResult<'a, P<Expr>> {\n-        let maybe_path = self.could_ascription_be_path(&lhs.kind);\n-        self.last_type_ascription = Some((self.prev_token.span, maybe_path));\n-        let lhs = self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Type)?;\n-        self.sess.gated_spans.gate(sym::type_ascription, lhs.span);\n-        Ok(lhs)\n-    }\n-\n     /// Parse `& mut? <expr>` or `& raw [ const | mut ] <expr>`.\n     fn parse_expr_borrow(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n         self.expect_and()?;\n@@ -1010,7 +970,7 @@ impl<'a> Parser<'a> {\n             };\n             if has_dot {\n                 // expr.f\n-                e = self.parse_expr_dot_suffix(lo, e)?;\n+                e = self.parse_dot_suffix_expr(lo, e)?;\n                 continue;\n             }\n             if self.expr_is_complete(&e) {\n@@ -1024,13 +984,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn look_ahead_type_ascription_as_field(&mut self) -> bool {\n-        self.look_ahead(1, |t| t.is_ident())\n-            && self.look_ahead(2, |t| t == &token::Colon)\n-            && self.look_ahead(3, |t| t.can_begin_expr())\n-    }\n-\n-    fn parse_expr_dot_suffix(&mut self, lo: Span, base: P<Expr>) -> PResult<'a, P<Expr>> {\n+    fn parse_dot_suffix_expr(&mut self, lo: Span, base: P<Expr>) -> PResult<'a, P<Expr>> {\n         match self.token.uninterpolate().kind {\n             token::Ident(..) => self.parse_dot_suffix(base, lo),\n             token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) => {\n@@ -1183,9 +1137,7 @@ impl<'a> Parser<'a> {\n \n     /// Parse a function call expression, `expr(...)`.\n     fn parse_expr_fn_call(&mut self, lo: Span, fun: P<Expr>) -> P<Expr> {\n-        let snapshot = if self.token.kind == token::OpenDelim(Delimiter::Parenthesis)\n-            && self.look_ahead_type_ascription_as_field()\n-        {\n+        let snapshot = if self.token.kind == token::OpenDelim(Delimiter::Parenthesis) {\n             Some((self.create_snapshot_for_diagnostic(), fun.kind.clone()))\n         } else {\n             None\n@@ -1216,7 +1168,6 @@ impl<'a> Parser<'a> {\n         if !self.may_recover() {\n             return None;\n         }\n-\n         match (seq.as_mut(), snapshot) {\n             (Err(err), Some((mut snapshot, ExprKind::Path(None, path)))) => {\n                 snapshot.bump(); // `(`\n@@ -1260,9 +1211,7 @@ impl<'a> Parser<'a> {\n                         return Some(self.mk_expr_err(span));\n                     }\n                     Ok(_) => {}\n-                    Err(mut err) => {\n-                        err.emit();\n-                    }\n+                    Err(err) => err.cancel(),\n                 }\n             }\n             _ => {}\n@@ -1516,7 +1465,6 @@ impl<'a> Parser<'a> {\n             let mac = P(MacCall {\n                 path,\n                 args: self.parse_delim_args()?,\n-                prior_type_ascription: self.last_type_ascription,\n             });\n             (lo.to(self.prev_token.span), ExprKind::MacCall(mac))\n         } else if self.check(&token::OpenDelim(Delimiter::Brace))\n@@ -1535,7 +1483,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse `'label: $expr`. The label is already parsed.\n-    fn parse_expr_labeled(\n+    pub(super) fn parse_expr_labeled(\n         &mut self,\n         label_: Label,\n         mut consume_colon: bool,\n@@ -1855,7 +1803,7 @@ impl<'a> Parser<'a> {\n         let token = self.token.clone();\n         let err = |self_: &Self| {\n             let msg = format!(\"unexpected token: {}\", super::token_descr(&token));\n-            self_.struct_span_err(token.span, &msg)\n+            self_.struct_span_err(token.span, msg)\n         };\n         // On an error path, eagerly consider a lifetime to be an unclosed character lit\n         if self.token.is_lifetime() {\n@@ -3013,6 +2961,11 @@ impl<'a> Parser<'a> {\n                     } else {\n                         e.span_label(pth.span, \"while parsing this struct\");\n                     }\n+\n+                    if !recover {\n+                        return Err(e);\n+                    }\n+\n                     e.emit();\n \n                     // If the next token is a comma, then try to parse\n@@ -3024,6 +2977,7 @@ impl<'a> Parser<'a> {\n                             break;\n                         }\n                     }\n+\n                     None\n                 }\n             };"}, {"sha": "d7bfc432d54d38aaceb5e7fbb4ee637b7e83107a", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -71,7 +71,7 @@ impl<'a> Parser<'a> {\n         if !self.eat(term) {\n             let token_str = super::token_descr(&self.token);\n             if !self.maybe_consume_incorrect_semicolon(&items) {\n-                let msg = &format!(\"expected item, found {token_str}\");\n+                let msg = format!(\"expected item, found {token_str}\");\n                 let mut err = self.struct_span_err(self.token.span, msg);\n                 let label = if self.is_kw_followed_by_ident(kw::Let) {\n                     \"consider using `const` or `static` instead of `let` for global variables\"\n@@ -443,7 +443,7 @@ impl<'a> Parser<'a> {\n             Ok(args) => {\n                 self.eat_semi_for_macro_if_needed(&args);\n                 self.complain_if_pub_macro(vis, false);\n-                Ok(MacCall { path, args, prior_type_ascription: self.last_type_ascription })\n+                Ok(MacCall { path, args })\n             }\n \n             Err(mut err) => {\n@@ -1429,7 +1429,7 @@ impl<'a> Parser<'a> {\n             VariantData::Struct(fields, recovered)\n         } else {\n             let token_str = super::token_descr(&self.token);\n-            let msg = &format!(\"expected `where` or `{{` after union name, found {token_str}\");\n+            let msg = format!(\"expected `where` or `{{` after union name, found {token_str}\");\n             let mut err = self.struct_span_err(self.token.span, msg);\n             err.span_label(self.token.span, \"expected `where` or `{` after union name\");\n             return Err(err);\n@@ -1465,7 +1465,7 @@ impl<'a> Parser<'a> {\n             self.eat(&token::CloseDelim(Delimiter::Brace));\n         } else {\n             let token_str = super::token_descr(&self.token);\n-            let msg = &format!(\n+            let msg = format!(\n                 \"expected {}`{{` after struct name, found {}\",\n                 if parsed_where { \"\" } else { \"`where`, or \" },\n                 token_str\n@@ -1602,7 +1602,7 @@ impl<'a> Parser<'a> {\n                 let sp = self.prev_token.span.shrink_to_hi();\n                 let mut err = self.struct_span_err(\n                     sp,\n-                    &format!(\"expected `,`, or `}}`, found {}\", super::token_descr(&self.token)),\n+                    format!(\"expected `,`, or `}}`, found {}\", super::token_descr(&self.token)),\n                 );\n \n                 // Try to recover extra trailing angle brackets\n@@ -1740,7 +1740,7 @@ impl<'a> Parser<'a> {\n                     Ok(_) => {\n                         let mut err = self.struct_span_err(\n                             lo.to(self.prev_token.span),\n-                            &format!(\"functions are not allowed in {adt_ty} definitions\"),\n+                            format!(\"functions are not allowed in {adt_ty} definitions\"),\n                         );\n                         err.help(\n                             \"unlike in C++, Java, and C#, functions are declared in `impl` blocks\",\n@@ -1759,7 +1759,7 @@ impl<'a> Parser<'a> {\n                     Ok((ident, _)) => {\n                         let mut err = self.struct_span_err(\n                             lo.with_hi(ident.span.hi()),\n-                            &format!(\"structs are not allowed in {adt_ty} definitions\"),\n+                            format!(\"structs are not allowed in {adt_ty} definitions\"),\n                         );\n                         err.help(\"consider creating a new `struct` definition instead of nesting\");\n                         err\n@@ -2228,11 +2228,11 @@ impl<'a> Parser<'a> {\n \n                         err.span_suggestion(\n                             self.token.uninterpolated_span(),\n-                            &format!(\"`{original_kw}` already used earlier, remove this one\"),\n+                            format!(\"`{original_kw}` already used earlier, remove this one\"),\n                             \"\",\n                             Applicability::MachineApplicable,\n                         )\n-                        .span_note(original_sp, &format!(\"`{original_kw}` first seen here\"));\n+                        .span_note(original_sp, format!(\"`{original_kw}` first seen here\"));\n                     }\n                     // The keyword has not been seen yet, suggest correct placement in the function front matter\n                     else if let Some(WrongKw::Misplaced(correct_pos_sp)) = wrong_kw {\n@@ -2243,7 +2243,7 @@ impl<'a> Parser<'a> {\n \n                             err.span_suggestion(\n                                     correct_pos_sp.to(misplaced_qual_sp),\n-                                    &format!(\"`{misplaced_qual}` must come before `{current_qual}`\"),\n+                                    format!(\"`{misplaced_qual}` must come before `{current_qual}`\"),\n                                     format!(\"{misplaced_qual} {current_qual}\"),\n                                     Applicability::MachineApplicable,\n                                 ).note(\"keyword order for functions declaration is `pub`, `default`, `const`, `async`, `unsafe`, `extern`\");\n@@ -2267,7 +2267,7 @@ impl<'a> Parser<'a> {\n                             if matches!(orig_vis.kind, VisibilityKind::Inherited) {\n                                 err.span_suggestion(\n                                     sp_start.to(self.prev_token.span),\n-                                    &format!(\"visibility `{vs}` must come before `{snippet}`\"),\n+                                    format!(\"visibility `{vs}` must come before `{snippet}`\"),\n                                     format!(\"{vs} {snippet}\"),\n                                     Applicability::MachineApplicable,\n                                 );"}, {"sha": "0c265d7af0e6ec32f17340de28287a1cf1d788ac", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -148,9 +148,6 @@ pub struct Parser<'a> {\n     max_angle_bracket_count: u32,\n \n     last_unexpected_token_span: Option<Span>,\n-    /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it\n-    /// looked like it could have been a mistyped path or literal `Option:Some(42)`).\n-    pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,\n     /// If present, this `Parser` is not parsing Rust code but rather a macro call.\n     subparser_name: Option<&'static str>,\n     capture_state: CaptureState,\n@@ -165,7 +162,7 @@ pub struct Parser<'a> {\n // This type is used a lot, e.g. it's cloned when matching many declarative macro rules with nonterminals. Make sure\n // it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Parser<'_>, 288);\n+rustc_data_structures::static_assert_size!(Parser<'_>, 272);\n \n /// Stores span information about a closure.\n #[derive(Clone)]\n@@ -470,7 +467,6 @@ impl<'a> Parser<'a> {\n             unmatched_angle_bracket_count: 0,\n             max_angle_bracket_count: 0,\n             last_unexpected_token_span: None,\n-            last_type_ascription: None,\n             subparser_name,\n             capture_state: CaptureState {\n                 capturing: Capturing::No,\n@@ -909,7 +905,7 @@ impl<'a> Parser<'a> {\n                                 expect_err\n                                     .span_suggestion_verbose(\n                                         self.prev_token.span.shrink_to_hi().until(self.token.span),\n-                                        &msg,\n+                                        msg,\n                                         \" @ \",\n                                         Applicability::MaybeIncorrect,\n                                     )\n@@ -925,7 +921,7 @@ impl<'a> Parser<'a> {\n                                     expect_err\n                                         .span_suggestion_short(\n                                             sp,\n-                                            &format!(\"missing `{}`\", token_str),\n+                                            format!(\"missing `{}`\", token_str),\n                                             token_str,\n                                             Applicability::MaybeIncorrect,\n                                         )\n@@ -941,10 +937,14 @@ impl<'a> Parser<'a> {\n                                         // propagate the help message from sub error 'e' to main error 'expect_err;\n                                         expect_err.children.push(xx.clone());\n                                     }\n-                                    expect_err.emit();\n-\n                                     e.cancel();\n-                                    break;\n+                                    if self.token == token::Colon {\n+                                        // we will try to recover in `maybe_recover_struct_lit_bad_delims`\n+                                        return Err(expect_err);\n+                                    } else {\n+                                        expect_err.emit();\n+                                        break;\n+                                    }\n                                 }\n                             }\n                         }"}, {"sha": "c317d96368ee6b7cf2f720320528348f44ea5e09", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -406,11 +406,11 @@ impl<'a> Parser<'a> {\n             // Parse pattern starting with a path\n             let (qself, path) = if self.eat_lt() {\n                 // Parse a qualified path\n-                let (qself, path) = self.parse_qpath(PathStyle::Expr)?;\n+                let (qself, path) = self.parse_qpath(PathStyle::Pat)?;\n                 (Some(qself), path)\n             } else {\n                 // Parse an unqualified path\n-                (None, self.parse_path(PathStyle::Expr)?)\n+                (None, self.parse_path(PathStyle::Pat)?)\n             };\n             let span = lo.to(self.prev_token.span);\n \n@@ -444,7 +444,7 @@ impl<'a> Parser<'a> {\n                         super::token_descr(&self_.token)\n                     );\n \n-                    let mut err = self_.struct_span_err(self_.token.span, &msg);\n+                    let mut err = self_.struct_span_err(self_.token.span, msg);\n                     err.span_label(self_.token.span, format!(\"expected {}\", expected));\n                     err\n                 });\n@@ -666,7 +666,7 @@ impl<'a> Parser<'a> {\n     fn parse_pat_mac_invoc(&mut self, path: Path) -> PResult<'a, PatKind> {\n         self.bump();\n         let args = self.parse_delim_args()?;\n-        let mac = P(MacCall { path, args, prior_type_ascription: self.last_type_ascription });\n+        let mac = P(MacCall { path, args });\n         Ok(PatKind::MacCall(mac))\n     }\n \n@@ -680,7 +680,7 @@ impl<'a> Parser<'a> {\n         let expected = Expected::to_string_or_fallback(expected);\n         let msg = format!(\"expected {}, found {}\", expected, super::token_descr(&self.token));\n \n-        let mut err = self.struct_span_err(self.token.span, &msg);\n+        let mut err = self.struct_span_err(self.token.span, msg);\n         err.span_label(self.token.span, format!(\"expected {}\", expected));\n \n         let sp = self.sess.source_map().start_point(self.token.span);\n@@ -789,11 +789,11 @@ impl<'a> Parser<'a> {\n             let lo = self.token.span;\n             let (qself, path) = if self.eat_lt() {\n                 // Parse a qualified path\n-                let (qself, path) = self.parse_qpath(PathStyle::Expr)?;\n+                let (qself, path) = self.parse_qpath(PathStyle::Pat)?;\n                 (Some(qself), path)\n             } else {\n                 // Parse an unqualified path\n-                (None, self.parse_path(PathStyle::Expr)?)\n+                (None, self.parse_path(PathStyle::Pat)?)\n             };\n             let hi = self.prev_token.span;\n             Ok(self.mk_expr(lo.to(hi), ExprKind::Path(qself, path)))\n@@ -978,7 +978,7 @@ impl<'a> Parser<'a> {\n                     break;\n                 }\n                 let token_str = super::token_descr(&self.token);\n-                let msg = &format!(\"expected `}}`, found {}\", token_str);\n+                let msg = format!(\"expected `}}`, found {}\", token_str);\n                 let mut err = self.struct_span_err(self.token.span, msg);\n \n                 err.span_label(self.token.span, \"expected `}`\");"}, {"sha": "47822a9ac7807bfc8dbdaecbc914fcf73654387c", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 64, "deletions": 6, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1,5 +1,6 @@\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{Parser, Restrictions, TokenType};\n+use crate::errors::PathSingleColon;\n use crate::{errors, maybe_whole};\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, Token, TokenKind};\n@@ -8,7 +9,7 @@ use rustc_ast::{\n     AssocConstraintKind, BlockCheckMode, GenericArg, GenericArgs, Generics, ParenthesizedArgs,\n     Path, PathSegment, QSelf,\n };\n-use rustc_errors::{Applicability, PResult};\n+use rustc_errors::{Applicability, IntoDiagnostic, PResult};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::symbol::{kw, sym, Ident};\n use std::mem;\n@@ -24,7 +25,19 @@ pub enum PathStyle {\n     /// In all such contexts the non-path interpretation is preferred by default for practical\n     /// reasons, but the path interpretation can be forced by the disambiguator `::`, e.g.\n     /// `x<y>` - comparisons, `x::<y>` - unambiguously a path.\n+    ///\n+    /// Also, a path may never be followed by a `:`. This means that we can eagerly recover if\n+    /// we encounter it.\n     Expr,\n+    /// The same as `Expr`, but may be followed by a `:`.\n+    /// For example, this code:\n+    /// ```rust\n+    /// struct S;\n+    ///\n+    /// let S: S;\n+    /// //  ^ Followed by a `:`\n+    /// ```\n+    Pat,\n     /// In other contexts, notably in types, no ambiguity exists and paths can be written\n     /// without the disambiguator, e.g., `x<y>` - unambiguously a path.\n     /// Paths with disambiguators are still accepted, `x::<Y>` - unambiguously a path too.\n@@ -38,6 +51,12 @@ pub enum PathStyle {\n     Mod,\n }\n \n+impl PathStyle {\n+    fn has_generic_ambiguity(&self) -> bool {\n+        matches!(self, Self::Expr | Self::Pat)\n+    }\n+}\n+\n impl<'a> Parser<'a> {\n     /// Parses a qualified path.\n     /// Assumes that the leading `<` has been parsed already.\n@@ -183,7 +202,6 @@ impl<'a> Parser<'a> {\n             segments.push(PathSegment::path_root(lo.shrink_to_lo().with_ctxt(mod_sep_ctxt)));\n         }\n         self.parse_path_segments(&mut segments, style, ty_generics)?;\n-\n         Ok(Path { segments, span: lo.to(self.prev_token.span), tokens: None })\n     }\n \n@@ -195,7 +213,7 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, ()> {\n         loop {\n             let segment = self.parse_path_segment(style, ty_generics)?;\n-            if style == PathStyle::Expr {\n+            if style.has_generic_ambiguity() {\n                 // In order to check for trailing angle brackets, we must have finished\n                 // recursing (`parse_path_segment` can indirectly call this function),\n                 // that is, the next token must be the highlighted part of the below example:\n@@ -217,6 +235,29 @@ impl<'a> Parser<'a> {\n             segments.push(segment);\n \n             if self.is_import_coupler() || !self.eat(&token::ModSep) {\n+                if style == PathStyle::Expr\n+                    && self.may_recover()\n+                    && self.token == token::Colon\n+                    && self.look_ahead(1, |token| token.is_ident() && !token.is_reserved_ident())\n+                {\n+                    // Emit a special error message for `a::b:c` to help users\n+                    // otherwise, `a: c` might have meant to introduce a new binding\n+                    if self.token.span.lo() == self.prev_token.span.hi()\n+                        && self.look_ahead(1, |token| self.token.span.hi() == token.span.lo())\n+                    {\n+                        self.bump(); // bump past the colon\n+                        self.sess.emit_err(PathSingleColon {\n+                            span: self.prev_token.span,\n+                            type_ascription: self\n+                                .sess\n+                                .unstable_features\n+                                .is_nightly_build()\n+                                .then_some(()),\n+                        });\n+                    }\n+                    continue;\n+                }\n+\n                 return Ok(());\n             }\n         }\n@@ -270,8 +311,25 @@ impl<'a> Parser<'a> {\n                         ty_generics,\n                     )?;\n                     self.expect_gt().map_err(|mut err| {\n+                        // Try to recover a `:` into a `::`\n+                        if self.token == token::Colon\n+                            && self.look_ahead(1, |token| {\n+                                token.is_ident() && !token.is_reserved_ident()\n+                            })\n+                        {\n+                            err.cancel();\n+                            err = PathSingleColon {\n+                                span: self.token.span,\n+                                type_ascription: self\n+                                    .sess\n+                                    .unstable_features\n+                                    .is_nightly_build()\n+                                    .then_some(()),\n+                            }\n+                            .into_diagnostic(self.diagnostic());\n+                        }\n                         // Attempt to find places where a missing `>` might belong.\n-                        if let Some(arg) = args\n+                        else if let Some(arg) = args\n                             .iter()\n                             .rev()\n                             .find(|arg| !matches!(arg, AngleBracketedArg::Constraint(_)))\n@@ -621,14 +679,14 @@ impl<'a> Parser<'a> {\n                     );\n                     err.span_suggestion(\n                         eq.to(before_next),\n-                        &format!(\"remove the `=` if `{}` is a type\", ident),\n+                        format!(\"remove the `=` if `{}` is a type\", ident),\n                         \"\",\n                         Applicability::MaybeIncorrect,\n                     )\n                 } else {\n                     err.span_label(\n                         self.token.span,\n-                        &format!(\"expected type, found {}\", super::token_descr(&self.token)),\n+                        format!(\"expected type, found {}\", super::token_descr(&self.token)),\n                     )\n                 };\n                 return Err(err);"}, {"sha": "1c17de337e83300d5e759ea31907540546737490", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 108, "deletions": 21, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -10,6 +10,8 @@ use super::{\n use crate::errors;\n use crate::maybe_whole;\n \n+use crate::errors::MalformedLoopLabel;\n+use ast::Label;\n use rustc_ast as ast;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, TokenKind};\n@@ -19,7 +21,8 @@ use rustc_ast::{Block, BlockCheckMode, Expr, ExprKind, HasAttrs, Local, Stmt};\n use rustc_ast::{StmtKind, DUMMY_NODE_ID};\n use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n use rustc_span::source_map::{BytePos, Span};\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::{kw, sym, Ident};\n+\n use std::mem;\n use thin_vec::{thin_vec, ThinVec};\n \n@@ -186,7 +189,7 @@ impl<'a> Parser<'a> {\n             _ => MacStmtStyle::NoBraces,\n         };\n \n-        let mac = P(MacCall { path, args, prior_type_ascription: self.last_type_ascription });\n+        let mac = P(MacCall { path, args });\n \n         let kind = if (style == MacStmtStyle::Braces\n             && self.token != token::Dot\n@@ -546,10 +549,36 @@ impl<'a> Parser<'a> {\n             }\n             let stmt = match self.parse_full_stmt(recover) {\n                 Err(mut err) if recover.yes() => {\n-                    self.maybe_annotate_with_ascription(&mut err, false);\n                     if let Some(ref mut snapshot) = snapshot {\n                         snapshot.recover_diff_marker();\n                     }\n+                    if self.token == token::Colon {\n+                        // if next token is following a colon, it's likely a path\n+                        // and we can suggest a path separator\n+                        let ident_span = self.prev_token.span;\n+                        self.bump();\n+                        if self.token.span.lo() == self.prev_token.span.hi() {\n+                            err.span_suggestion_verbose(\n+                                self.prev_token.span,\n+                                \"maybe write a path separator here\",\n+                                \"::\",\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                        if self.look_ahead(1, |token| token == &token::Eq) {\n+                            err.span_suggestion_verbose(\n+                                ident_span.shrink_to_lo(),\n+                                \"you might have meant to introduce a new binding\",\n+                                \"let \",\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                        if self.sess.unstable_features.is_nightly_build() {\n+                            // FIXME(Nilstrieb): Remove this again after a few months.\n+                            err.note(\"type ascription syntax has been removed, see issue #101728 <https://github.com/rust-lang/rust/issues/101728>\");\n+                        }\n+                    }\n+\n                     err.emit();\n                     self.recover_stmt_(SemiColonMode::Ignore, BlockMode::Ignore);\n                     Some(self.mk_stmt_err(self.token.span))\n@@ -580,47 +609,104 @@ impl<'a> Parser<'a> {\n         };\n \n         let mut eat_semi = true;\n+        let mut add_semi_to_stmt = false;\n+\n         match &mut stmt.kind {\n             // Expression without semicolon.\n             StmtKind::Expr(expr)\n                 if self.token != token::Eof && classify::expr_requires_semi_to_be_stmt(expr) => {\n                 // Just check for errors and recover; do not eat semicolon yet.\n                 // `expect_one_of` returns PResult<'a, bool /* recovered */>\n-                let replace_with_err =\n-                    match self.expect_one_of(&[], &[token::Semi, token::CloseDelim(Delimiter::Brace)]) {\n+\n+                let expect_result = self.expect_one_of(&[], &[token::Semi, token::CloseDelim(Delimiter::Brace)]);\n+\n+                let replace_with_err = 'break_recover: {\n+                    match expect_result {\n                     // Recover from parser, skip type error to avoid extra errors.\n-                    Ok(true) => true,\n-                    Err(mut e) => {\n-                        if let TokenKind::DocComment(..) = self.token.kind &&\n-                            let Ok(snippet) = self.span_to_snippet(self.token.span) {\n+                        Ok(true) => true,\n+                        Err(mut e) => {\n+                            if let TokenKind::DocComment(..) = self.token.kind\n+                                && let Ok(snippet) = self.span_to_snippet(self.token.span)\n+                            {\n                                 let sp = self.token.span;\n                                 let marker = &snippet[..3];\n                                 let (comment_marker, doc_comment_marker) = marker.split_at(2);\n \n                                 e.span_suggestion(\n                                     sp.with_hi(sp.lo() + BytePos(marker.len() as u32)),\n-                                    &format!(\n+                                    format!(\n                                         \"add a space before `{}` to use a regular comment\",\n                                         doc_comment_marker,\n                                     ),\n                                     format!(\"{} {}\", comment_marker, doc_comment_marker),\n                                     Applicability::MaybeIncorrect,\n                                 );\n-                        }\n+                            }\n+\n+                            if self.recover_colon_as_semi() {\n+                                // recover_colon_as_semi has already emitted a nicer error.\n+                                e.delay_as_bug();\n+                                add_semi_to_stmt = true;\n+                                eat_semi = false;\n+\n+                                break 'break_recover false;\n+                            }\n+\n+                            match &expr.kind {\n+                                ExprKind::Path(None, ast::Path { segments, .. }) if segments.len() == 1 => {\n+                                    if self.token == token::Colon\n+                                        && self.look_ahead(1, |token| {\n+                                            token.is_whole_block() || matches!(\n+                                                token.kind,\n+                                                token::Ident(kw::For | kw::Loop | kw::While, false)\n+                                                    | token::OpenDelim(Delimiter::Brace)\n+                                            )\n+                                        })\n+                                    {\n+                                        let snapshot = self.create_snapshot_for_diagnostic();\n+                                        let label = Label {\n+                                            ident: Ident::from_str_and_span(\n+                                                &format!(\"'{}\", segments[0].ident),\n+                                                segments[0].ident.span,\n+                                            ),\n+                                        };\n+                                        match self.parse_expr_labeled(label, false) {\n+                                            Ok(labeled_expr) => {\n+                                                e.delay_as_bug();\n+                                                self.sess.emit_err(MalformedLoopLabel {\n+                                                    span: label.ident.span,\n+                                                    correct_label: label.ident,\n+                                                });\n+                                                *expr = labeled_expr;\n+                                                break 'break_recover false;\n+                                            }\n+                                            Err(err) => {\n+                                                err.cancel();\n+                                                self.restore_snapshot(snapshot);\n+                                            }\n+                                        }\n+                                    }\n+                                }\n+                                _ => {}\n+                            }\n \n-                        if let Err(mut e) =\n-                            self.check_mistyped_turbofish_with_multiple_type_params(e, expr)\n-                        {\n-                            if recover.no() {\n-                                return Err(e);\n+                            if let Err(mut e) =\n+                                self.check_mistyped_turbofish_with_multiple_type_params(e, expr)\n+                            {\n+                                if recover.no() {\n+                                    return Err(e);\n+                                }\n+                                e.emit();\n+                                self.recover_stmt();\n                             }\n-                            e.emit();\n-                            self.recover_stmt();\n+\n+                            true\n+\n                         }\n-                        true\n+                        Ok(false) => false\n                     }\n-                    _ => false\n                 };\n+\n                 if replace_with_err {\n                     // We already emitted an error, so don't emit another type error\n                     let sp = expr.span.to(self.prev_token.span);\n@@ -643,9 +729,10 @@ impl<'a> Parser<'a> {\n             StmtKind::Empty | StmtKind::Item(_) | StmtKind::Local(_) | StmtKind::Semi(_) => eat_semi = false,\n         }\n \n-        if eat_semi && self.eat(&token::Semi) {\n+        if add_semi_to_stmt || (eat_semi && self.eat(&token::Semi)) {\n             stmt = stmt.add_trailing_semicolon();\n         }\n+\n         stmt.span = stmt.span.to(self.prev_token.span);\n         Ok(Some(stmt))\n     }"}, {"sha": "f58f09d06bcdab8baa241b55faf6f140f65d6bb0", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -315,9 +315,8 @@ impl<'a> Parser<'a> {\n             }\n         } else {\n             let msg = format!(\"expected type, found {}\", super::token_descr(&self.token));\n-            let mut err = self.struct_span_err(self.token.span, &msg);\n+            let mut err = self.struct_span_err(self.token.span, msg);\n             err.span_label(self.token.span, \"expected type\");\n-            self.maybe_annotate_with_ascription(&mut err, true);\n             return Err(err);\n         };\n \n@@ -651,11 +650,7 @@ impl<'a> Parser<'a> {\n         let path = self.parse_path_inner(PathStyle::Type, ty_generics)?;\n         if self.eat(&token::Not) {\n             // Macro invocation in type position\n-            Ok(TyKind::MacCall(P(MacCall {\n-                path,\n-                args: self.parse_delim_args()?,\n-                prior_type_ascription: self.last_type_ascription,\n-            })))\n+            Ok(TyKind::MacCall(P(MacCall { path, args: self.parse_delim_args()? })))\n         } else if allow_plus == AllowPlus::Yes && self.check_plus() {\n             // `Trait1 + Trait2 + 'a`\n             self.parse_remaining_bounds_path(ThinVec::new(), path, lo, true)"}, {"sha": "982c4615affb639bad04439112ed4a3aae16ad7e", "filename": "compiler/rustc_parse/src/validate_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -189,7 +189,7 @@ fn emit_malformed_attribute(\n         sess.buffer_lint(&ILL_FORMED_ATTRIBUTE_INPUT, span, ast::CRATE_NODE_ID, &msg);\n     } else {\n         sess.span_diagnostic\n-            .struct_span_err(span, &error_msg)\n+            .struct_span_err(span, error_msg)\n             .span_suggestions(\n                 span,\n                 if suggestions.len() == 1 {"}, {"sha": "6742722ce52c62ef43e21fef3fd65b9f8663809b", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -148,7 +148,7 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n             [missing_primary, ref missing_secondary @ ..] => {\n                 let msg =\n                     format!(\"{} is not allowed in a `{}`\", expr.name(), const_kind.keyword_name());\n-                let mut err = feature_err(&tcx.sess.parse_sess, *missing_primary, span, &msg);\n+                let mut err = feature_err(&tcx.sess.parse_sess, *missing_primary, span, msg);\n \n                 // If multiple feature gates would be required to enable this expression, include\n                 // them as help messages. Don't emit a separate error for each missing feature gate.\n@@ -161,7 +161,7 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n                             \"add `#![feature({})]` to the crate attributes to enable\",\n                             gate,\n                         );\n-                        err.help(&note);\n+                        err.help(note);\n                     }\n                 }\n "}, {"sha": "363e1743677addb05621a1632ad9fadedb69214e", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -31,7 +31,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n \n         if !errors.is_empty() {\n             let message = errors.iter().fold(String::new(), |s1, s2| s1 + \"\\n\" + s2);\n-            tcx.sess.delay_span_bug(rustc_span::DUMMY_SP, &message);\n+            tcx.sess.delay_span_bug(rustc_span::DUMMY_SP, message);\n         }\n     }\n }"}, {"sha": "5f2ec656d1d1e35749092edb8fb8688c97d0f9c6", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -633,7 +633,7 @@ pub fn print_query_stack<Qcx: QueryContext>(\n         };\n         let mut diag = Diagnostic::new(\n             Level::FailureNote,\n-            &format!(\"#{} [{:?}] {}\", i, query_info.query.dep_kind, query_info.query.description),\n+            format!(\"#{} [{:?}] {}\", i, query_info.query.dep_kind, query_info.query.description),\n         );\n         diag.span = query_info.job.span.into();\n         handler.force_print_diagnostic(diag);"}, {"sha": "2438b3a38ed4d63ffa325325932ee65aee2fbcaf", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1002,7 +1002,7 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n             let msg = format!(\"`{}` is already in scope\", name);\n             let note =\n                 \"macro-expanded `#[macro_use]`s may not shadow existing macros (see RFC 1560)\";\n-            self.r.tcx.sess.struct_span_err(span, &msg).note(note).emit();\n+            self.r.tcx.sess.struct_span_err(span, msg).note(note).emit();\n         }\n     }\n "}, {"sha": "17c4a6be049ed1a4b9242c1d1be4f23228d1dbed", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -418,7 +418,7 @@ impl Resolver<'_, '_> {\n                 UNUSED_IMPORTS,\n                 unused.use_tree_id,\n                 ms,\n-                &msg,\n+                msg,\n                 BuiltinLintDiagnostics::UnusedImports(fix_msg.into(), fixes, test_module_span),\n             );\n         }"}, {"sha": "fd263bab78fbd379801ed59aa6e730f610671ebc", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -238,7 +238,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             },\n         };\n \n-        err.note(&format!(\n+        err.note(format!(\n             \"`{}` must be defined only once in the {} namespace of this {}\",\n             name,\n             ns.descr(),\n@@ -683,7 +683,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                              making the path in the pattern qualified: `path::to::ModOrType::{}`\",\n                             name,\n                         );\n-                        err.span_help(span, &help_msg);\n+                        err.span_help(span, help_msg);\n                     }\n                     show_candidates(\n                         self.tcx,\n@@ -783,10 +783,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                 if let Some((suggestions, msg, applicability)) = suggestion {\n                     if suggestions.is_empty() {\n-                        err.help(&msg);\n+                        err.help(msg);\n                         return err;\n                     }\n-                    err.multipart_suggestion(&msg, suggestions, applicability);\n+                    err.multipart_suggestion(msg, suggestions, applicability);\n                 }\n \n                 err\n@@ -930,7 +930,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             } => {\n                 let mut err = self.tcx.sess.struct_span_err_with_code(\n                     span,\n-                    &format!(\n+                    format!(\n                         \"item `{}` is an associated {}, which doesn't match its trait `{}`\",\n                         name, kind, trait_path,\n                     ),\n@@ -1359,7 +1359,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         if macro_kind == MacroKind::Derive && (ident.name == sym::Send || ident.name == sym::Sync) {\n             let msg = format!(\"unsafe traits like `{}` should be implemented explicitly\", ident);\n-            err.span_note(ident.span, &msg);\n+            err.span_note(ident.span, msg);\n             return;\n         }\n         if self.macro_names.contains(&ident.normalize_to_macros_2_0()) {\n@@ -1419,15 +1419,15 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     if !import.span.is_dummy() {\n                         err.span_note(\n                             import.span,\n-                            &format!(\"`{}` is imported here, but it is {}\", ident, desc),\n+                            format!(\"`{}` is imported here, but it is {}\", ident, desc),\n                         );\n                         // Silence the 'unused import' warning we might get,\n                         // since this diagnostic already covers that import.\n                         self.record_use(ident, binding, false);\n                         return;\n                     }\n                 }\n-                err.note(&format!(\"`{}` is in scope, but it is {}\", ident, desc));\n+                err.note(format!(\"`{}` is in scope, but it is {}\", ident, desc));\n                 return;\n             }\n         }\n@@ -1474,7 +1474,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n             err.span_label(\n                 self.tcx.sess.source_map().guess_head_span(def_span),\n-                &format!(\n+                format!(\n                     \"{}{} `{}` defined here\",\n                     prefix,\n                     suggestion.res.descr(),\n@@ -1492,7 +1492,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 format!(\"maybe you meant this {}\", suggestion.res.descr())\n             }\n         };\n-        err.span_suggestion(span, &msg, suggestion.candidate, Applicability::MaybeIncorrect);\n+        err.span_suggestion(span, msg, suggestion.candidate, Applicability::MaybeIncorrect);\n         true\n     }\n \n@@ -1534,7 +1534,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         let mut err = struct_span_err!(self.tcx.sess, ident.span, E0659, \"`{ident}` is ambiguous\");\n         err.span_label(ident.span, \"ambiguous name\");\n-        err.note(&format!(\"ambiguous because of {}\", kind.descr()));\n+        err.note(format!(\"ambiguous because of {}\", kind.descr()));\n \n         let mut could_refer_to = |b: &NameBinding<'_>, misc: AmbiguityErrorMisc, also: &str| {\n             let what = self.binding_description(b, ident, misc == AmbiguityErrorMisc::FromPrelude);\n@@ -1562,10 +1562,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 AmbiguityErrorMisc::FromPrelude | AmbiguityErrorMisc::None => {}\n             }\n \n-            err.span_note(b.span, &note_msg);\n+            err.span_note(b.span, note_msg);\n             for (i, help_msg) in help_msgs.iter().enumerate() {\n                 let or = if i == 0 { \"\" } else { \"or \" };\n-                err.help(&format!(\"{}{}\", or, help_msg));\n+                err.help(format!(\"{}{}\", or, help_msg));\n             }\n         };\n \n@@ -1608,7 +1608,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let descr = get_descr(binding);\n         let mut err =\n             struct_span_err!(self.tcx.sess, ident.span, E0603, \"{} `{}` is private\", descr, ident);\n-        err.span_label(ident.span, &format!(\"private {}\", descr));\n+        err.span_label(ident.span, format!(\"private {}\", descr));\n \n         let mut non_exhaustive = None;\n         // If an ADT is foreign and marked as `non_exhaustive`, then that's\n@@ -1623,7 +1623,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             err.span_label(span, \"a constructor is private if any of the fields is private\");\n             if let Res::Def(_, d) = res && let Some(fields) = self.field_visibility_spans.get(&d) {\n                 err.multipart_suggestion_verbose(\n-                    &format!(\n+                    format!(\n                         \"consider making the field{} publicly accessible\",\n                         pluralize!(fields.len())\n                     ),\n@@ -1676,7 +1676,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     format!(\"cannot be constructed because it is `#[non_exhaustive]`\"),\n                 );\n             }\n-            err.span_note(note_span, &msg);\n+            err.span_note(note_span, msg);\n         }\n \n         err.emit();\n@@ -2444,15 +2444,15 @@ fn show_candidates(\n         };\n \n         for note in accessible_path_strings.iter().flat_map(|cand| cand.3.as_ref()) {\n-            err.note(note);\n+            err.note(note.clone());\n         }\n \n         if let Some(span) = use_placement_span {\n             let (add_use, trailing) = match mode {\n                 DiagnosticMode::Pattern => {\n                     err.span_suggestions(\n                         span,\n-                        &msg,\n+                        msg,\n                         accessible_path_strings.into_iter().map(|a| a.0),\n                         Applicability::MaybeIncorrect,\n                     );\n@@ -2471,7 +2471,7 @@ fn show_candidates(\n \n             err.span_suggestions_with_style(\n                 span,\n-                &msg,\n+                msg,\n                 accessible_path_strings.into_iter().map(|a| a.0),\n                 Applicability::MaybeIncorrect,\n                 SuggestionStyle::ShowAlways,\n@@ -2481,7 +2481,7 @@ fn show_candidates(\n                 if sp.can_be_used_for_suggestions() {\n                     err.span_suggestion_verbose(\n                         sp,\n-                        &format!(\"if you import `{}`, refer to it directly\", last.ident),\n+                        format!(\"if you import `{}`, refer to it directly\", last.ident),\n                         \"\",\n                         Applicability::Unspecified,\n                     );\n@@ -2495,7 +2495,7 @@ fn show_candidates(\n                 msg.push_str(&candidate.0);\n             }\n \n-            err.help(&msg);\n+            err.help(msg);\n         }\n     } else if !matches!(mode, DiagnosticMode::Import) {\n         assert!(!inaccessible_path_strings.is_empty());\n@@ -2520,9 +2520,9 @@ fn show_candidates(\n                 let span = tcx.sess.source_map().guess_head_span(span);\n                 let mut multi_span = MultiSpan::from_span(span);\n                 multi_span.push_span_label(span, \"not accessible\");\n-                err.span_note(multi_span, &msg);\n+                err.span_note(multi_span, msg);\n             } else {\n-                err.note(&msg);\n+                err.note(msg);\n             }\n             if let Some(note) = (*note).as_deref() {\n                 err.note(note);\n@@ -2566,10 +2566,10 @@ fn show_candidates(\n             }\n \n             for note in inaccessible_path_strings.iter().flat_map(|cand| cand.3.as_ref()) {\n-                err.note(note);\n+                err.note(note.clone());\n             }\n \n-            err.span_note(multi_span, &msg);\n+            err.span_note(multi_span, msg);\n         }\n     }\n }"}, {"sha": "530c188fe18034a4bb7df23a265808698686ff28", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -527,7 +527,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                         PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n                                         lint_id,\n                                         orig_ident.span,\n-                                        &format!(\n+                                        format!(\n                                             \"cannot find {} `{}` in this scope\",\n                                             ns.descr(),\n                                             ident\n@@ -1345,7 +1345,13 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         ribs: Option<&PerNS<Vec<Rib<'a>>>>,\n         ignore_binding: Option<&'a NameBinding<'a>>,\n     ) -> PathResult<'a> {\n-        debug!(\"resolve_path(path={:?}, opt_ns={:?}, finalize={:?})\", path, opt_ns, finalize);\n+        debug!(\n+            \"resolve_path(path={:?}, opt_ns={:?}, finalize={:?}) path_len: {}\",\n+            path,\n+            opt_ns,\n+            finalize,\n+            path.len()\n+        );\n \n         let mut module = None;\n         let mut allow_super = true;"}, {"sha": "2044798f4d01d5cf5d5a243ca7e204553673eec5", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -578,7 +578,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let mut diag = struct_span_err!(self.tcx.sess, span, E0432, \"{}\", &msg);\n \n         if let Some((_, UnresolvedImportError { note: Some(note), .. })) = errors.iter().last() {\n-            diag.note(note);\n+            diag.note(note.clone());\n         }\n \n         for (import, err) in errors.into_iter().take(MAX_LABEL_COUNT) {\n@@ -588,10 +588,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n             if let Some((suggestions, msg, applicability)) = err.suggestion {\n                 if suggestions.is_empty() {\n-                    diag.help(&msg);\n+                    diag.help(msg);\n                     continue;\n                 }\n-                diag.multipart_suggestion(&msg, suggestions, applicability);\n+                diag.multipart_suggestion(msg, suggestions, applicability);\n             }\n \n             if let Some(candidates) = &err.candidates {\n@@ -1063,7 +1063,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n                     import_id,\n                     import.span,\n-                    &msg,\n+                    msg,\n                 );\n             } else {\n                 let error_msg = if crate_private_reexport {\n@@ -1084,7 +1084,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                     struct_span_err!(self.tcx.sess, import.span, E0365, \"{}\", error_msg)\n                         .span_label(import.span, label_msg)\n-                        .note(&format!(\"consider declaring type or module `{}` with `pub`\", ident))\n+                        .note(format!(\"consider declaring type or module `{}` with `pub`\", ident))\n                         .emit();\n                 } else {\n                     let mut err =\n@@ -1102,7 +1102,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         _ => {\n                             err.span_note(\n                                 import.span,\n-                                &format!(\n+                                format!(\n                                     \"consider marking `{ident}` as `pub` in the imported module\"\n                                 ),\n                             );\n@@ -1200,7 +1200,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 UNUSED_IMPORTS,\n                 id,\n                 import.span,\n-                &format!(\"the item `{}` is imported redundantly\", ident),\n+                format!(\"the item `{}` is imported redundantly\", ident),\n                 BuiltinLintDiagnostics::RedundantImport(redundant_spans, ident),\n             );\n         }"}, {"sha": "11d2b975fec6d38c11e76bb2bb9a4034a7ef4143", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -548,9 +548,6 @@ struct DiagnosticMetadata<'ast> {\n     /// they are used (in a `break` or `continue` statement)\n     unused_labels: FxHashMap<NodeId, Span>,\n \n-    /// Only used for better errors on `fn(): fn()`.\n-    current_type_ascription: Vec<Span>,\n-\n     /// Only used for better errors on `let x = { foo: bar };`.\n     /// In the case of a parse error with `let x = { foo: bar, };`, this isn't needed, it's only\n     /// needed for cases where this parses as a correct type ascription.\n@@ -2201,7 +2198,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                     this.r\n                         .tcx\n                         .sess\n-                        .span_err(ident.span, &format!(\"imports cannot refer to {}\", what));\n+                        .span_err(ident.span, format!(\"imports cannot refer to {}\", what));\n                 }\n             };\n \n@@ -4064,17 +4061,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                     }\n                 }\n             }\n-            ExprKind::Type(ref type_expr, ref ty) => {\n-                // `ParseSess::type_ascription_path_suggestions` keeps spans of colon tokens in\n-                // type ascription. Here we are trying to retrieve the span of the colon token as\n-                // well, but only if it's written without spaces `expr:Ty` and therefore confusable\n-                // with `expr::Ty`, only in this case it will match the span from\n-                // `type_ascription_path_suggestions`.\n-                self.diagnostic_metadata\n-                    .current_type_ascription\n-                    .push(type_expr.span.between(ty.span));\n+            ExprKind::Type(ref _type_expr, ref _ty) => {\n                 visit::walk_expr(self, expr);\n-                self.diagnostic_metadata.current_type_ascription.pop();\n             }\n             // `async |x| ...` gets desugared to `|x| async {...}`, so we need to\n             // resolve the arguments within the proper scopes so that usages of them inside the"}, {"sha": "e215b6b7090ae8414a1b620efa63112461ad463c", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 36, "deletions": 148, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -28,7 +28,7 @@ use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{BytePos, Span};\n+use rustc_span::Span;\n \n use std::iter;\n use std::ops::Deref;\n@@ -315,8 +315,11 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n         debug!(?res, ?source);\n         let base_error = self.make_base_error(path, span, source, res);\n         let code = source.error_code(res.is_some());\n-        let mut err =\n-            self.r.tcx.sess.struct_span_err_with_code(base_error.span, &base_error.msg, code);\n+        let mut err = self.r.tcx.sess.struct_span_err_with_code(\n+            base_error.span,\n+            base_error.msg.clone(),\n+            code,\n+        );\n \n         self.suggest_swapping_misplaced_self_ty_and_trait(&mut err, source, res, base_error.span);\n \n@@ -332,7 +335,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n \n         if self.suggest_pattern_match_with_let(&mut err, source, span) {\n             // Fallback label.\n-            err.span_label(base_error.span, &base_error.fallback_label);\n+            err.span_label(base_error.span, base_error.fallback_label);\n             return (err, Vec::new());\n         }\n \n@@ -350,18 +353,15 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n             return (err, candidates);\n         }\n \n-        if !self.type_ascription_suggestion(&mut err, base_error.span) {\n-            let mut fallback =\n-                self.suggest_trait_and_bounds(&mut err, source, res, span, &base_error);\n+        let mut fallback = self.suggest_trait_and_bounds(&mut err, source, res, span, &base_error);\n \n-            // if we have suggested using pattern matching, then don't add needless suggestions\n-            // for typos.\n-            fallback |= self.suggest_typo(&mut err, source, path, span, &base_error);\n+        // if we have suggested using pattern matching, then don't add needless suggestions\n+        // for typos.\n+        fallback |= self.suggest_typo(&mut err, source, path, span, &base_error);\n \n-            if fallback {\n-                // Fallback label.\n-                err.span_label(base_error.span, &base_error.fallback_label);\n-            }\n+        if fallback {\n+            // Fallback label.\n+            err.span_label(base_error.span, base_error.fallback_label);\n         }\n         self.err_code_special_cases(&mut err, source, path, span);\n \n@@ -494,24 +494,6 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 .filter(|(_, enum_ty_path)| !enum_ty_path.starts_with(\"std::prelude::\"))\n                 .collect();\n             if !enum_candidates.is_empty() {\n-                if let (PathSource::Type, Some(span)) =\n-                    (source, self.diagnostic_metadata.current_type_ascription.last())\n-                {\n-                    if self\n-                        .r\n-                        .tcx\n-                        .sess\n-                        .parse_sess\n-                        .type_ascription_path_suggestions\n-                        .borrow()\n-                        .contains(span)\n-                    {\n-                        // Already reported this issue on the lhs of the type ascription.\n-                        err.downgrade_to_delayed_bug();\n-                        return (true, candidates);\n-                    }\n-                }\n-\n                 enum_candidates.sort();\n \n                 // Contextualize for E0412 \"cannot find type\", but don't belabor the point\n@@ -530,7 +512,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n \n                 err.span_suggestions(\n                     span,\n-                    &msg,\n+                    msg,\n                     enum_candidates.into_iter().map(|(_variant_path, enum_ty_path)| enum_ty_path),\n                     Applicability::MachineApplicable,\n                 );\n@@ -577,7 +559,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                     | AssocSuggestion::AssocType => {\n                         err.span_suggestion(\n                             span,\n-                            &format!(\"you might have meant to {}\", candidate.action()),\n+                            format!(\"you might have meant to {}\", candidate.action()),\n                             format!(\"Self::{path_str}\"),\n                             Applicability::MachineApplicable,\n                         );\n@@ -598,7 +580,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n \n                 err.span_suggestion(\n                     call_span,\n-                    &format!(\"try calling `{ident}` as a method\"),\n+                    format!(\"try calling `{ident}` as a method\"),\n                     format!(\"self.{path_str}({args_snippet})\"),\n                     Applicability::MachineApplicable,\n                 );\n@@ -630,7 +612,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                     ident.name == path[0].ident.name {\n                     err.span_help(\n                         ident.span,\n-                        &format!(\"the binding `{}` is available in a different scope in the same function\", path_str),\n+                        format!(\"the binding `{}` is available in a different scope in the same function\", path_str),\n                     );\n                     return (true, candidates);\n                 }\n@@ -911,7 +893,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 if let Some(ident) = fn_kind.ident() {\n                     err.span_label(\n                         ident.span,\n-                        &format!(\"this function {} have a `self` parameter\", doesnt),\n+                        format!(\"this function {} have a `self` parameter\", doesnt),\n                     );\n                 }\n             }\n@@ -1087,7 +1069,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                     if ident.span == span {\n                         err.span_suggestion_verbose(\n                             *where_span,\n-                            &format!(\"constrain the associated type to `{}`\", ident),\n+                            format!(\"constrain the associated type to `{}`\", ident),\n                             format!(\n                                 \"{}: {}<{} = {}>\",\n                                 self.r\n@@ -1288,7 +1270,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 }\n                 PathSource::Expr(_) | PathSource::TupleStruct(..) | PathSource::Pat => {\n                     let span = find_span(&source, err);\n-                    err.span_label(self.r.def_span(def_id), &format!(\"`{path_str}` defined here\"));\n+                    err.span_label(self.r.def_span(def_id), format!(\"`{path_str}` defined here\"));\n \n                     let (tail, descr, applicability, old_fields) = match source {\n                         PathSource::Pat => (\"\", \"pattern\", Applicability::MachineApplicable, None),\n@@ -1332,7 +1314,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                     };\n                     err.span_suggestion(\n                         span,\n-                        &format!(\"use struct {} syntax instead\", descr),\n+                        format!(\"use struct {} syntax instead\", descr),\n                         format!(\"{path_str} {{{pad}{fields}{pad}}}\"),\n                         applicability,\n                     );\n@@ -1393,26 +1375,6 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 Res::Def(DefKind::Enum, def_id),\n                 PathSource::TupleStruct(..) | PathSource::Expr(..),\n             ) => {\n-                if self\n-                    .diagnostic_metadata\n-                    .current_type_ascription\n-                    .last()\n-                    .map(|sp| {\n-                        self.r\n-                            .tcx\n-                            .sess\n-                            .parse_sess\n-                            .type_ascription_path_suggestions\n-                            .borrow()\n-                            .contains(&sp)\n-                    })\n-                    .unwrap_or(false)\n-                {\n-                    err.downgrade_to_delayed_bug();\n-                    // We already suggested changing `:` into `::` during parsing.\n-                    return false;\n-                }\n-\n                 self.suggest_using_enum_variant(err, source, def_id, span);\n             }\n             (Res::Def(DefKind::Struct, def_id), source) if ns == ValueNS => {\n@@ -1494,7 +1456,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                     if non_visible_spans.len() > 0 {\n                         if let Some(fields) = self.r.field_visibility_spans.get(&def_id) {\n                             err.multipart_suggestion_verbose(\n-                                &format!(\n+                                format!(\n                                     \"consider making the field{} publicly accessible\",\n                                     pluralize!(fields.len())\n                                 ),\n@@ -1524,7 +1486,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                         let span = find_span(&source, err);\n                         err.span_label(\n                             self.r.def_span(def_id),\n-                            &format!(\"`{path_str}` defined here\"),\n+                            format!(\"`{path_str}` defined here\"),\n                         );\n                         err.span_suggestion(\n                             span,\n@@ -1538,7 +1500,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n             }\n             (Res::Def(DefKind::Ctor(_, CtorKind::Fn), ctor_def_id), _) if ns == ValueNS => {\n                 let def_id = self.r.tcx.parent(ctor_def_id);\n-                err.span_label(self.r.def_span(def_id), &format!(\"`{path_str}` defined here\"));\n+                err.span_label(self.r.def_span(def_id), format!(\"`{path_str}` defined here\"));\n                 let fields = self.r.field_def_ids(def_id).map_or_else(\n                     || \"/* fields */\".to_string(),\n                     |field_ids| vec![\"_\"; field_ids.len()].join(\", \"),\n@@ -1817,80 +1779,6 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n         })\n     }\n \n-    /// Only used in a specific case of type ascription suggestions\n-    fn get_colon_suggestion_span(&self, start: Span) -> Span {\n-        let sm = self.r.tcx.sess.source_map();\n-        start.to(sm.next_point(start))\n-    }\n-\n-    fn type_ascription_suggestion(&self, err: &mut Diagnostic, base_span: Span) -> bool {\n-        let sm = self.r.tcx.sess.source_map();\n-        let base_snippet = sm.span_to_snippet(base_span);\n-        if let Some(&sp) = self.diagnostic_metadata.current_type_ascription.last() {\n-            if let Ok(snippet) = sm.span_to_snippet(sp) {\n-                let len = snippet.trim_end().len() as u32;\n-                if snippet.trim() == \":\" {\n-                    let colon_sp =\n-                        sp.with_lo(sp.lo() + BytePos(len - 1)).with_hi(sp.lo() + BytePos(len));\n-                    let mut show_label = true;\n-                    if sm.is_multiline(sp) {\n-                        err.span_suggestion_short(\n-                            colon_sp,\n-                            \"maybe you meant to write `;` here\",\n-                            \";\",\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    } else {\n-                        let after_colon_sp =\n-                            self.get_colon_suggestion_span(colon_sp.shrink_to_hi());\n-                        if snippet.len() == 1 {\n-                            // `foo:bar`\n-                            err.span_suggestion(\n-                                colon_sp,\n-                                \"maybe you meant to write a path separator here\",\n-                                \"::\",\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                            show_label = false;\n-                            if !self\n-                                .r\n-                                .tcx\n-                                .sess\n-                                .parse_sess\n-                                .type_ascription_path_suggestions\n-                                .borrow_mut()\n-                                .insert(colon_sp)\n-                            {\n-                                err.downgrade_to_delayed_bug();\n-                            }\n-                        }\n-                        if let Ok(base_snippet) = base_snippet {\n-                            // Try to find an assignment\n-                            let eq_span = sm.span_look_ahead(after_colon_sp, Some(\"=\"), Some(50));\n-                            if let Ok(ref snippet) = sm.span_to_snippet(eq_span) && snippet == \"=\" {\n-                                err.span_suggestion(\n-                                    base_span,\n-                                    \"maybe you meant to write an assignment here\",\n-                                    format!(\"let {}\", base_snippet),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                                show_label = false;\n-                            }\n-                        }\n-                    }\n-                    if show_label {\n-                        err.span_label(\n-                            base_span,\n-                            \"expecting a type here because of type ascription\",\n-                        );\n-                    }\n-                    return show_label;\n-                }\n-            }\n-        }\n-        false\n-    }\n-\n     // try to give a suggestion for this pattern: `name = blah`, which is common in other languages\n     // suggest `let name = blah` to introduce a new binding\n     fn let_binding_suggestion(&mut self, err: &mut Diagnostic, ident_span: Span) -> bool {\n@@ -2014,25 +1902,25 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n \n                 err.span_suggestions(\n                     span,\n-                    &msg,\n+                    msg,\n                     suggestable_variants,\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n \n             // If the enum has no tuple variants..\n             if non_suggestable_variant_count == variants.len() {\n-                err.help(&format!(\"the enum has no tuple variants {}\", source_msg));\n+                err.help(format!(\"the enum has no tuple variants {}\", source_msg));\n             }\n \n             // If there are also non-tuple variants..\n             if non_suggestable_variant_count == 1 {\n-                err.help(&format!(\n+                err.help(format!(\n                     \"you might have meant {} the enum's non-tuple variant\",\n                     source_msg\n                 ));\n             } else if non_suggestable_variant_count >= 1 {\n-                err.help(&format!(\n+                err.help(format!(\n                     \"you might have meant {} one of the enum's non-tuple variants\",\n                     source_msg\n                 ));\n@@ -2282,7 +2170,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                         lint::builtin::SINGLE_USE_LIFETIMES,\n                         param.id,\n                         param.ident.span,\n-                        &format!(\"lifetime parameter `{}` only used once\", param.ident),\n+                        format!(\"lifetime parameter `{}` only used once\", param.ident),\n                         lint::BuiltinLintDiagnostics::SingleUseLifetime {\n                             param_span: param.ident.span,\n                             use_span: Some((use_span, elidable)),\n@@ -2301,7 +2189,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                             lint::builtin::UNUSED_LIFETIMES,\n                             param.id,\n                             param.ident.span,\n-                            &format!(\"lifetime parameter `{}` never used\", param.ident),\n+                            format!(\"lifetime parameter `{}` never used\", param.ident),\n                             lint::BuiltinLintDiagnostics::SingleUseLifetime {\n                                 param_span: param.ident.span,\n                                 use_span: None,\n@@ -2367,7 +2255,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                         suggest_note = false; // Avoid displaying the same help multiple times.\n                         err.span_label(\n                             span,\n-                            &format!(\n+                            format!(\n                                 \"lifetime `{}` is missing in item created through this procedural macro\",\n                                 name,\n                             ),\n@@ -2573,13 +2461,13 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                     )];\n                 }\n             } else if num_params == 1 {\n-                err.help(&format!(\n+                err.help(format!(\n                     \"this function's return type contains a borrowed value, \\\n                  but the signature does not say which {} it is borrowed from\",\n                     m\n                 ));\n             } else {\n-                err.help(&format!(\n+                err.help(format!(\n                     \"this function's return type contains a borrowed value, \\\n                  but the signature does not say whether it is borrowed from {}\",\n                     m\n@@ -2648,7 +2536,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n             }\n             1 => {\n                 err.multipart_suggestion_verbose(\n-                    &format!(\"consider using the `{}` lifetime\", existing_name),\n+                    format!(\"consider using the `{}` lifetime\", existing_name),\n                     spans_suggs,\n                     Applicability::MaybeIncorrect,\n                 );\n@@ -2699,7 +2587,7 @@ pub(super) fn signal_label_shadowing(sess: &Session, orig: Span, shadower: Ident\n     let shadower = shadower.span;\n     let mut err = sess.struct_span_warn(\n         shadower,\n-        &format!(\"label name `{}` shadows a label name that is already in scope\", name),\n+        format!(\"label name `{}` shadows a label name that is already in scope\", name),\n     );\n     err.span_label(orig, \"first declared here\");\n     err.span_label(shadower, format!(\"label `{}` already in scope\", name));"}, {"sha": "4da43c6a9a2dbacc01ffdeac54b0a339b6a38c30", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -121,7 +121,7 @@ pub(crate) fn registered_tools(tcx: TyCtxt<'_>, (): ()) -> RegisteredTools {\n                     if let Some(old_ident) = registered_tools.replace(ident) {\n                         let msg = format!(\"{} `{}` was already registered\", \"tool\", ident);\n                         tcx.sess\n-                            .struct_span_err(ident.span, &msg)\n+                            .struct_span_err(ident.span, msg)\n                             .span_label(old_ident.span, \"already registered here\")\n                             .emit();\n                     }\n@@ -130,7 +130,7 @@ pub(crate) fn registered_tools(tcx: TyCtxt<'_>, (): ()) -> RegisteredTools {\n                     let msg = format!(\"`{}` only accepts identifiers\", sym::register_tool);\n                     let span = nested_meta.span();\n                     tcx.sess\n-                        .struct_span_err(span, &msg)\n+                        .struct_span_err(span, msg)\n                         .span_label(span, \"not an identifier\")\n                         .emit();\n                 }\n@@ -202,7 +202,7 @@ impl<'a, 'tcx> ResolverExpand for Resolver<'a, 'tcx> {\n             self.tcx\n                 .sess\n                 .diagnostic()\n-                .bug(&format!(\"built-in macro `{}` was already registered\", name));\n+                .bug(format!(\"built-in macro `{}` was already registered\", name));\n         }\n     }\n \n@@ -315,7 +315,7 @@ impl<'a, 'tcx> ResolverExpand for Resolver<'a, 'tcx> {\n                 UNUSED_MACROS,\n                 node_id,\n                 ident.span,\n-                &format!(\"unused macro definition: `{}`\", ident.name),\n+                format!(\"unused macro definition: `{}`\", ident.name),\n             );\n         }\n         for (&(def_id, arm_i), &(ident, rule_span)) in self.unused_macro_rules.iter() {\n@@ -328,7 +328,7 @@ impl<'a, 'tcx> ResolverExpand for Resolver<'a, 'tcx> {\n                 UNUSED_MACRO_RULES,\n                 node_id,\n                 rule_span,\n-                &format!(\n+                format!(\n                     \"{} rule of macro `{}` is never used\",\n                     crate::diagnostics::ordinalize(arm_i + 1),\n                     ident.name\n@@ -698,7 +698,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         Segment::names_to_string(path)\n                     );\n                     let msg_note = \"import resolution is stuck, try simplifying macro imports\";\n-                    this.tcx.sess.struct_span_err(span, &msg).note(msg_note).emit();\n+                    this.tcx.sess.struct_span_err(span, msg).note(msg_note).emit();\n                 }\n             }\n         };\n@@ -788,7 +788,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 Err(..) => {\n                     let expected = kind.descr_expected();\n                     let msg = format!(\"cannot find {} `{}` in this scope\", expected, ident);\n-                    let mut err = self.tcx.sess.struct_span_err(ident.span, &msg);\n+                    let mut err = self.tcx.sess.struct_span_err(ident.span, msg);\n                     self.unresolved_macro_suggestions(&mut err, kind, &parent_scope, ident);\n                     err.emit();\n                 }\n@@ -866,9 +866,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             if kind != NonMacroAttrKind::Tool && binding.map_or(true, |b| b.is_import()) {\n                 let msg =\n                     format!(\"cannot use {} {} through an import\", kind.article(), kind.descr());\n-                let mut err = self.tcx.sess.struct_span_err(span, &msg);\n+                let mut err = self.tcx.sess.struct_span_err(span, msg);\n                 if let Some(binding) = binding {\n-                    err.span_note(binding.span, &format!(\"the {} imported here\", kind.descr()));\n+                    err.span_note(binding.span, format!(\"the {} imported here\", kind.descr()));\n                 }\n                 err.emit();\n             }\n@@ -883,7 +883,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             if macro_kind.is_some() && sub_namespace_match(macro_kind, Some(MacroKind::Attr)) {\n                 self.tcx.sess.span_err(\n                     ident.span,\n-                    &format!(\"name `{}` is reserved in attribute namespace\", ident),\n+                    format!(\"name `{}` is reserved in attribute namespace\", ident),\n                 );\n             }\n         }\n@@ -927,7 +927,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 }\n             } else {\n                 let msg = format!(\"cannot find a built-in macro with name `{}`\", item.ident);\n-                self.tcx.sess.span_err(item.span, &msg);\n+                self.tcx.sess.span_err(item.span, msg);\n             }\n         }\n "}, {"sha": "5cc9c62617dd5aafac439a0a9a230eaa0bcdd883", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -214,8 +214,6 @@ pub struct ParseSess {\n     pub env_depinfo: Lock<FxHashSet<(Symbol, Option<Symbol>)>>,\n     /// File paths accessed during the build.\n     pub file_depinfo: Lock<FxHashSet<Symbol>>,\n-    /// All the type ascriptions expressions that have had a suggestion for likely path typo.\n-    pub type_ascription_path_suggestions: Lock<FxHashSet<Span>>,\n     /// Whether cfg(version) should treat the current release as incomplete\n     pub assume_incomplete_release: bool,\n     /// Spans passed to `proc_macro::quote_span`. Each span has a numerical\n@@ -258,7 +256,6 @@ impl ParseSess {\n             reached_eof: AtomicBool::new(false),\n             env_depinfo: Default::default(),\n             file_depinfo: Default::default(),\n-            type_ascription_path_suggestions: Default::default(),\n             assume_incomplete_release: false,\n             proc_macro_quoted_spans: Default::default(),\n             attr_id_generator: AttrIdGenerator::new(),"}, {"sha": "80360a3c73f8dcfddbff2b5ab5c324f9f0c0662f", "filename": "compiler/rustc_smir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_smir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_smir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2FCargo.toml?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -4,6 +4,7 @@ version = \"0.0.0\"\n edition = \"2021\"\n \n [dependencies]\n+rustc_hir = { path = \"../rustc_hir\" }\n rustc_middle = { path = \"../rustc_middle\", optional = true }\n rustc_span = { path = \"../rustc_span\", optional = true }\n tracing = \"0.1\""}, {"sha": "241cd182059ba2d0a54719714076c8a37d9be933", "filename": "compiler/rustc_smir/src/rustc_smir/mod.rs", "status": "modified", "additions": 117, "deletions": 9, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -93,20 +93,26 @@ fn rustc_statement_to_statement(\n     }\n }\n \n-fn rustc_rvalue_to_rvalue(rvalue: &rustc_middle::mir::Rvalue<'_>) -> stable_mir::mir::Operand {\n+fn rustc_rvalue_to_rvalue(rvalue: &rustc_middle::mir::Rvalue<'_>) -> stable_mir::mir::Rvalue {\n     use rustc_middle::mir::Rvalue::*;\n     match rvalue {\n-        Use(op) => rustc_op_to_op(op),\n+        Use(op) => stable_mir::mir::Rvalue::Use(rustc_op_to_op(op)),\n         Repeat(_, _) => todo!(),\n         Ref(_, _, _) => todo!(),\n         ThreadLocalRef(_) => todo!(),\n         AddressOf(_, _) => todo!(),\n         Len(_) => todo!(),\n         Cast(_, _, _) => todo!(),\n         BinaryOp(_, _) => todo!(),\n-        CheckedBinaryOp(_, _) => todo!(),\n+        CheckedBinaryOp(bin_op, ops) => stable_mir::mir::Rvalue::CheckedBinaryOp(\n+            rustc_bin_op_to_bin_op(bin_op),\n+            rustc_op_to_op(&ops.0),\n+            rustc_op_to_op(&ops.1),\n+        ),\n         NullaryOp(_, _) => todo!(),\n-        UnaryOp(_, _) => todo!(),\n+        UnaryOp(un_op, op) => {\n+            stable_mir::mir::Rvalue::UnaryOp(rustc_un_op_to_un_op(un_op), rustc_op_to_op(op))\n+        }\n         Discriminant(_) => todo!(),\n         Aggregate(_, _) => todo!(),\n         ShallowInitBox(_, _) => todo!(),\n@@ -124,8 +130,10 @@ fn rustc_op_to_op(op: &rustc_middle::mir::Operand<'_>) -> stable_mir::mir::Opera\n }\n \n fn rustc_place_to_place(place: &rustc_middle::mir::Place<'_>) -> stable_mir::mir::Place {\n-    assert_eq!(&place.projection[..], &[]);\n-    stable_mir::mir::Place { local: place.local.as_usize() }\n+    stable_mir::mir::Place {\n+        local: place.local.as_usize(),\n+        projection: format!(\"{:?}\", place.projection),\n+    }\n }\n \n fn rustc_unwind_to_unwind(\n@@ -140,6 +148,96 @@ fn rustc_unwind_to_unwind(\n     }\n }\n \n+fn rustc_assert_msg_to_msg<'tcx>(\n+    assert_message: &rustc_middle::mir::AssertMessage<'tcx>,\n+) -> stable_mir::mir::AssertMessage {\n+    use rustc_middle::mir::AssertKind;\n+    match assert_message {\n+        AssertKind::BoundsCheck { len, index } => stable_mir::mir::AssertMessage::BoundsCheck {\n+            len: rustc_op_to_op(len),\n+            index: rustc_op_to_op(index),\n+        },\n+        AssertKind::Overflow(bin_op, op1, op2) => stable_mir::mir::AssertMessage::Overflow(\n+            rustc_bin_op_to_bin_op(bin_op),\n+            rustc_op_to_op(op1),\n+            rustc_op_to_op(op2),\n+        ),\n+        AssertKind::OverflowNeg(op) => {\n+            stable_mir::mir::AssertMessage::OverflowNeg(rustc_op_to_op(op))\n+        }\n+        AssertKind::DivisionByZero(op) => {\n+            stable_mir::mir::AssertMessage::DivisionByZero(rustc_op_to_op(op))\n+        }\n+        AssertKind::RemainderByZero(op) => {\n+            stable_mir::mir::AssertMessage::RemainderByZero(rustc_op_to_op(op))\n+        }\n+        AssertKind::ResumedAfterReturn(generator) => {\n+            stable_mir::mir::AssertMessage::ResumedAfterReturn(rustc_generator_to_generator(\n+                generator,\n+            ))\n+        }\n+        AssertKind::ResumedAfterPanic(generator) => {\n+            stable_mir::mir::AssertMessage::ResumedAfterPanic(rustc_generator_to_generator(\n+                generator,\n+            ))\n+        }\n+        AssertKind::MisalignedPointerDereference { required, found } => {\n+            stable_mir::mir::AssertMessage::MisalignedPointerDereference {\n+                required: rustc_op_to_op(required),\n+                found: rustc_op_to_op(found),\n+            }\n+        }\n+    }\n+}\n+\n+fn rustc_bin_op_to_bin_op(bin_op: &rustc_middle::mir::BinOp) -> stable_mir::mir::BinOp {\n+    use rustc_middle::mir::BinOp;\n+    match bin_op {\n+        BinOp::Add => stable_mir::mir::BinOp::Add,\n+        BinOp::Sub => stable_mir::mir::BinOp::Sub,\n+        BinOp::Mul => stable_mir::mir::BinOp::Mul,\n+        BinOp::Div => stable_mir::mir::BinOp::Div,\n+        BinOp::Rem => stable_mir::mir::BinOp::Rem,\n+        BinOp::BitXor => stable_mir::mir::BinOp::BitXor,\n+        BinOp::BitAnd => stable_mir::mir::BinOp::BitAnd,\n+        BinOp::BitOr => stable_mir::mir::BinOp::BitOr,\n+        BinOp::Shl => stable_mir::mir::BinOp::Shl,\n+        BinOp::Shr => stable_mir::mir::BinOp::Shr,\n+        BinOp::Eq => stable_mir::mir::BinOp::Eq,\n+        BinOp::Lt => stable_mir::mir::BinOp::Lt,\n+        BinOp::Le => stable_mir::mir::BinOp::Le,\n+        BinOp::Ne => stable_mir::mir::BinOp::Ne,\n+        BinOp::Ge => stable_mir::mir::BinOp::Ge,\n+        BinOp::Gt => stable_mir::mir::BinOp::Gt,\n+        BinOp::Offset => stable_mir::mir::BinOp::Offset,\n+    }\n+}\n+\n+fn rustc_un_op_to_un_op(unary_op: &rustc_middle::mir::UnOp) -> stable_mir::mir::UnOp {\n+    use rustc_middle::mir::UnOp;\n+    match unary_op {\n+        UnOp::Not => stable_mir::mir::UnOp::Not,\n+        UnOp::Neg => stable_mir::mir::UnOp::Neg,\n+    }\n+}\n+\n+fn rustc_generator_to_generator(\n+    generator: &rustc_hir::GeneratorKind,\n+) -> stable_mir::mir::GeneratorKind {\n+    use rustc_hir::{AsyncGeneratorKind, GeneratorKind};\n+    match generator {\n+        GeneratorKind::Async(async_gen) => {\n+            let async_gen = match async_gen {\n+                AsyncGeneratorKind::Block => stable_mir::mir::AsyncGeneratorKind::Block,\n+                AsyncGeneratorKind::Closure => stable_mir::mir::AsyncGeneratorKind::Closure,\n+                AsyncGeneratorKind::Fn => stable_mir::mir::AsyncGeneratorKind::Fn,\n+            };\n+            stable_mir::mir::GeneratorKind::Async(async_gen)\n+        }\n+        GeneratorKind::Gen => stable_mir::mir::GeneratorKind::Gen,\n+    }\n+}\n+\n fn rustc_terminator_to_terminator(\n     terminator: &rustc_middle::mir::Terminator<'_>,\n ) -> stable_mir::mir::Terminator {\n@@ -162,7 +260,11 @@ fn rustc_terminator_to_terminator(\n         Terminate => Terminator::Abort,\n         Return => Terminator::Return,\n         Unreachable => Terminator::Unreachable,\n-        Drop { .. } => todo!(),\n+        Drop { place, target, unwind } => Terminator::Drop {\n+            place: rustc_place_to_place(place),\n+            target: target.as_usize(),\n+            unwind: rustc_unwind_to_unwind(unwind),\n+        },\n         Call { func, args, destination, target, unwind, from_hir_call: _, fn_span: _ } => {\n             Terminator::Call {\n                 func: rustc_op_to_op(func),\n@@ -172,9 +274,15 @@ fn rustc_terminator_to_terminator(\n                 unwind: rustc_unwind_to_unwind(unwind),\n             }\n         }\n-        Assert { .. } => todo!(),\n+        Assert { cond, expected, msg, target, unwind } => Terminator::Assert {\n+            cond: rustc_op_to_op(cond),\n+            expected: *expected,\n+            msg: rustc_assert_msg_to_msg(msg),\n+            target: target.as_usize(),\n+            unwind: rustc_unwind_to_unwind(unwind),\n+        },\n         Yield { .. } => todo!(),\n-        GeneratorDrop => todo!(),\n+        GeneratorDrop => Terminator::GeneratorDrop,\n         FalseEdge { .. } => todo!(),\n         FalseUnwind { .. } => todo!(),\n         InlineAsm { .. } => todo!(),"}, {"sha": "4baf3f1f75eac400117a02ff4f1ed657d3bd6db3", "filename": "compiler/rustc_smir/src/stable_mir/mir/body.rs", "status": "modified", "additions": 66, "deletions": 4, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -26,7 +26,7 @@ pub enum Terminator {\n     Drop {\n         place: Place,\n         target: usize,\n-        unwind: Option<usize>,\n+        unwind: UnwindAction,\n     },\n     Call {\n         func: Operand,\n@@ -38,10 +38,11 @@ pub enum Terminator {\n     Assert {\n         cond: Operand,\n         expected: bool,\n-        msg: String,\n+        msg: AssertMessage,\n         target: usize,\n-        cleanup: Option<usize>,\n+        unwind: UnwindAction,\n     },\n+    GeneratorDrop,\n }\n \n #[derive(Clone, Debug)]\n@@ -52,12 +53,72 @@ pub enum UnwindAction {\n     Cleanup(usize),\n }\n \n+#[derive(Clone, Debug)]\n+pub enum AssertMessage {\n+    BoundsCheck { len: Operand, index: Operand },\n+    Overflow(BinOp, Operand, Operand),\n+    OverflowNeg(Operand),\n+    DivisionByZero(Operand),\n+    RemainderByZero(Operand),\n+    ResumedAfterReturn(GeneratorKind),\n+    ResumedAfterPanic(GeneratorKind),\n+    MisalignedPointerDereference { required: Operand, found: Operand },\n+}\n+\n+#[derive(Clone, Debug)]\n+pub enum BinOp {\n+    Add,\n+    Sub,\n+    Mul,\n+    Div,\n+    Rem,\n+    BitXor,\n+    BitAnd,\n+    BitOr,\n+    Shl,\n+    Shr,\n+    Eq,\n+    Lt,\n+    Le,\n+    Ne,\n+    Ge,\n+    Gt,\n+    Offset,\n+}\n+\n+#[derive(Clone, Debug)]\n+pub enum UnOp {\n+    Not,\n+    Neg,\n+}\n+\n+#[derive(Clone, Debug)]\n+pub enum GeneratorKind {\n+    Async(AsyncGeneratorKind),\n+    Gen,\n+}\n+\n+#[derive(Clone, Debug)]\n+pub enum AsyncGeneratorKind {\n+    Block,\n+    Closure,\n+    Fn,\n+}\n+\n #[derive(Clone, Debug)]\n pub enum Statement {\n-    Assign(Place, Operand),\n+    Assign(Place, Rvalue),\n     Nop,\n }\n \n+// FIXME this is incomplete\n+#[derive(Clone, Debug)]\n+pub enum Rvalue {\n+    Use(Operand),\n+    CheckedBinaryOp(BinOp, Operand, Operand),\n+    UnaryOp(UnOp, Operand),\n+}\n+\n #[derive(Clone, Debug)]\n pub enum Operand {\n     Copy(Place),\n@@ -68,6 +129,7 @@ pub enum Operand {\n #[derive(Clone, Debug)]\n pub struct Place {\n     pub local: usize,\n+    pub projection: String,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "7969b848fd95656a81f62854e1f2894f855c01cf", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -531,6 +531,7 @@ symbols! {\n         const_mut_refs,\n         const_panic,\n         const_panic_fmt,\n+        const_param_ty,\n         const_precise_live_drops,\n         const_raw_ptr_deref,\n         const_raw_ptr_to_usize_cast,"}, {"sha": "69b3c1e7effbf45eb96c41a8adec6c7a371700f1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 34, "deletions": 36, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -271,7 +271,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                 let underscores = vec![\"_\"; expected_args.len()].join(\", \");\n                 err.span_suggestion_verbose(\n                     closure_arg_span.unwrap_or(found_span),\n-                    &format!(\n+                    format!(\n                         \"consider changing the closure to take and ignore the expected argument{}\",\n                         pluralize!(expected_args.len())\n                     ),\n@@ -575,7 +575,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             Limit(0) => Limit(2),\n             limit => limit * 2,\n         };\n-        err.help(&format!(\n+        err.help(format!(\n             \"consider increasing the recursion limit by adding a \\\n              `#![recursion_limit = \\\"{}\\\"]` attribute to your crate (`{}`)\",\n             suggested_limit,\n@@ -737,7 +737,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         if is_try_conversion && let Some(ret_span) = self.return_type_span(&obligation) {\n                             err.span_label(\n                                 ret_span,\n-                                &format!(\n+                                format!(\n                                     \"expected `{}` because of this\",\n                                     trait_ref.skip_binder().self_ty()\n                                 ),\n@@ -780,15 +780,15 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             err.emit();\n                             return;\n                         }\n-                        if let Some(ref s) = label {\n+                        if let Some(s) = label {\n                             // If it has a custom `#[rustc_on_unimplemented]`\n                             // error message, let's display it as the label!\n                             err.span_label(span, s);\n                             if !matches!(trait_ref.skip_binder().self_ty().kind(), ty::Param(_)) {\n                                 // When the self type is a type param We don't need to \"the trait\n                                 // `std::marker::Sized` is not implemented for `T`\" as we will point\n                                 // at the type param with a label to suggest constraining it.\n-                                err.help(&explanation);\n+                                err.help(explanation);\n                             }\n                         } else if let Some(custom_explanation) = safe_transmute_explanation {\n                             err.span_label(span, custom_explanation);\n@@ -811,13 +811,13 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             );\n \n                         if let Some((msg, span)) = type_def {\n-                            err.span_label(span, &msg);\n+                            err.span_label(span, msg);\n                         }\n-                        if let Some(ref s) = note {\n+                        if let Some(s) = note {\n                             // If it has a custom `#[rustc_on_unimplemented]` note, let's display it\n-                            err.note(s.as_str());\n+                            err.note(s);\n                         }\n-                        if let Some(ref s) = parent_label {\n+                        if let Some(s) = parent_label {\n                             let body = obligation.cause.body_id;\n                             err.span_label(tcx.def_span(body), s);\n                         }\n@@ -1028,7 +1028,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 // which bounds actually failed to hold.\n                                 self.tcx.sess.struct_span_err(\n                                     span,\n-                                    &format!(\"the type `{}` is not well-formed\", ty),\n+                                    format!(\"the type `{}` is not well-formed\", ty),\n                                 )\n                             }\n                         }\n@@ -1071,7 +1071,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {\n                         let mut diag = self.tcx.sess.struct_span_err(\n                             span,\n-                            &format!(\"the constant `{}` is not of type `{}`\", ct, ty),\n+                            format!(\"the constant `{}` is not of type `{}`\", ct, ty),\n                         );\n                         self.note_type_err(\n                             &mut diag,\n@@ -1835,7 +1835,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             candidates.sort();\n             candidates.dedup();\n             let end = if candidates.len() <= 9 { candidates.len() } else { 8 };\n-            err.help(&format!(\n+            err.help(format!(\n                 \"the following {other}types implement trait `{}`:{}{}\",\n                 trait_ref.print_only_trait_path(),\n                 candidates[..end].join(\"\"),\n@@ -2026,7 +2026,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 \"perhaps two different versions of crate `{}` are being used?\",\n                 trait_crate\n             );\n-            err.note(&crate_msg);\n+            err.note(crate_msg);\n             suggested = true;\n         }\n         suggested\n@@ -2158,7 +2158,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 err.cancel();\n                                 return;\n                             }\n-                            err.note(&format!(\"cannot satisfy `{}`\", predicate));\n+                            err.note(format!(\"cannot satisfy `{}`\", predicate));\n                             let impl_candidates = self.find_similar_impl_candidates(\n                                 predicate.to_opt_poly_trait_pred().unwrap(),\n                             );\n@@ -2178,7 +2178,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             err.cancel();\n                             return;\n                         }\n-                        err.note(&format!(\"cannot satisfy `{}`\", predicate));\n+                        err.note(format!(\"cannot satisfy `{}`\", predicate));\n                     }\n                 }\n \n@@ -2223,9 +2223,9 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         err.cancel();\n                         err = self.tcx.sess.struct_span_err_with_code(\n                             span,\n-                            &format!(\n+                            format!(\n                                 \"cannot {verb} associated {noun} on trait without specifying the corresponding `impl` type\",\n-                             ),\n+                            ),\n                             rustc_errors::error_code!(E0790),\n                         );\n \n@@ -2332,7 +2332,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         ErrorCode::E0284,\n                         true,\n                     );\n-                    err.note(&format!(\"cannot satisfy `{}`\", predicate));\n+                    err.note(format!(\"cannot satisfy `{}`\", predicate));\n                     err\n                 } else {\n                     // If we can't find a substitution, just print a generic error\n@@ -2343,7 +2343,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         \"type annotations needed: cannot satisfy `{}`\",\n                         predicate,\n                     );\n-                    err.span_label(span, &format!(\"cannot satisfy `{}`\", predicate));\n+                    err.span_label(span, format!(\"cannot satisfy `{}`\", predicate));\n                     err\n                 }\n             }\n@@ -2371,7 +2371,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         \"type annotations needed: cannot satisfy `{}`\",\n                         predicate,\n                     );\n-                    err.span_label(span, &format!(\"cannot satisfy `{}`\", predicate));\n+                    err.span_label(span, format!(\"cannot satisfy `{}`\", predicate));\n                     err\n                 }\n             }\n@@ -2386,7 +2386,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     \"type annotations needed: cannot satisfy `{}`\",\n                     predicate,\n                 );\n-                err.span_label(span, &format!(\"cannot satisfy `{}`\", predicate));\n+                err.span_label(span, format!(\"cannot satisfy `{}`\", predicate));\n                 err\n             }\n         };\n@@ -2459,13 +2459,13 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         match (spans.len(), crates.len(), crate_names.len()) {\n             (0, 0, 0) => {\n-                err.note(&format!(\"cannot satisfy `{}`\", predicate));\n+                err.note(format!(\"cannot satisfy `{}`\", predicate));\n             }\n             (0, _, 1) => {\n-                err.note(&format!(\"{} in the `{}` crate{}\", msg, crates[0], post,));\n+                err.note(format!(\"{} in the `{}` crate{}\", msg, crates[0], post,));\n             }\n             (0, _, _) => {\n-                err.note(&format!(\n+                err.note(format!(\n                     \"{} in the following crates: {}{}\",\n                     msg,\n                     crate_names.join(\", \"),\n@@ -2474,19 +2474,17 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             }\n             (_, 0, 0) => {\n                 let span: MultiSpan = spans.into();\n-                err.span_note(span, &msg);\n+                err.span_note(span, msg);\n             }\n             (_, 1, 1) => {\n                 let span: MultiSpan = spans.into();\n-                err.span_note(span, &msg);\n-                err.note(\n-                    &format!(\"and another `impl` found in the `{}` crate{}\", crates[0], post,),\n-                );\n+                err.span_note(span, msg);\n+                err.note(format!(\"and another `impl` found in the `{}` crate{}\", crates[0], post,));\n             }\n             _ => {\n                 let span: MultiSpan = spans.into();\n-                err.span_note(span, &msg);\n-                err.note(&format!(\n+                err.span_note(span, msg);\n+                err.note(format!(\n                     \"and more `impl`s found in the following crates: {}{}\",\n                     crate_names.join(\", \"),\n                     post,\n@@ -2657,7 +2655,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         }\n         err.span_help(\n             multispan,\n-            &format!(\n+            format!(\n                 \"you could relax the implicit `Sized` bound on `{T}` if it were \\\n                 used through indirection like `&{T}` or `Box<{T}>`\",\n                 T = param.name.ident(),\n@@ -2882,7 +2880,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             .fn_trait_kind_from_def_id(trait_ref.def_id())\n             .expect(\"expected to map DefId to ClosureKind\");\n         if !implemented_kind.extends(selected_kind) {\n-            err.note(&format!(\n+            err.note(format!(\n                 \"`{}` implements `{}`, but it must implement `{}`, which is more general\",\n                 trait_ref.skip_binder().self_ty(),\n                 implemented_kind,\n@@ -2899,7 +2897,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             if expected.len() != given.len() {\n                 // Note number of types that were expected and given\n                 err.note(\n-                    &format!(\n+                    format!(\n                         \"expected a closure taking {} argument{}, but one taking {} argument{} was given\",\n                         given.len(),\n                         pluralize!(given.len()),\n@@ -2942,7 +2940,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 unsatisfied_const = UnsatisfiedConst(true);\n                 err.span_note(\n                     span,\n-                    &format!(\n+                    format!(\n                         \"the trait `{}` is implemented for `{}`, \\\n                         but that implementation is not `const`\",\n                         non_const_predicate.print_modifiers_and_trait_path(),\n@@ -3171,7 +3169,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 let mut err = self.tcx.sess.struct_span_err(span, \"unconstrained generic constant\");\n                 let const_span = self.tcx.def_span(uv.def);\n                 match self.tcx.sess.source_map().span_to_snippet(const_span) {\n-                    Ok(snippet) => err.help(&format!(\n+                    Ok(snippet) => err.help(format!(\n                         \"try adding a `where` bound using this expression: `where [(); {}]:`\",\n                         snippet\n                     )),"}, {"sha": "08220c4fe9fece8bb8cbbf8d4c38b47a354c39d5", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -515,7 +515,7 @@ fn suggest_restriction<'tcx>(\n \n         err.span_suggestion_verbose(\n             sp,\n-            &format!(\"consider further restricting {}\", msg),\n+            format!(\"consider further restricting {}\", msg),\n             suggestion,\n             Applicability::MachineApplicable,\n         );\n@@ -964,7 +964,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             // a more general note.\n             err.span_suggestion_verbose(\n                 obligation.cause.span.shrink_to_hi(),\n-                &msg,\n+                msg,\n                 format!(\"({args})\"),\n                 Applicability::HasPlaceholders,\n             );\n@@ -994,7 +994,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 }\n                 _ => return false,\n             };\n-            err.help(&format!(\"{msg}: `{name}({args})`\"));\n+            err.help(format!(\"{msg}: `{name}({args})`\"));\n         }\n         true\n     }\n@@ -1334,7 +1334,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n                     let msg = format!(\"the trait bound `{}` is not satisfied\", old_pred);\n                     if has_custom_message {\n-                        err.note(&msg);\n+                        err.note(msg);\n                     } else {\n                         err.message =\n                             vec![(rustc_errors::DiagnosticMessage::Str(msg), Style::NoStyle)];\n@@ -1358,7 +1358,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     } else {\n                         let is_mut = mut_ref_self_ty_satisfies_pred || ref_inner_ty_mut;\n                         let sugg_prefix = format!(\"&{}\", if is_mut { \"mut \" } else { \"\" });\n-                        let sugg_msg = &format!(\n+                        let sugg_msg = format!(\n                             \"consider{} borrowing here\",\n                             if is_mut { \" mutably\" } else { \"\" }\n                         );\n@@ -1452,7 +1452,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         err.span_suggestion(\n             obligation.cause.span.shrink_to_lo(),\n-            &format!(\n+            format!(\n                 \"consider borrowing the value, since `&{self_ty}` can be coerced into `{object_ty}`\"\n             ),\n             \"&\",\n@@ -1505,7 +1505,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 };\n \n                 err.multipart_suggestion_verbose(\n-                    &msg,\n+                    msg,\n                     suggestions,\n                     Applicability::MachineApplicable,\n                 );\n@@ -1617,7 +1617,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(pred)) =\n                     obligation.predicate.kind().skip_binder()\n                 {\n-                    err.span_label(*span, &format!(\"this call returns `{}`\", pred.self_ty()));\n+                    err.span_label(*span, format!(\"this call returns `{}`\", pred.self_ty()));\n                 }\n                 if let Some(typeck_results) = &self.typeck_results\n                         && let ty = typeck_results.expr_ty_adjusted(base)\n@@ -1632,14 +1632,14 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         if vis_span.is_empty() {\n                             err.span_suggestion_verbose(\n                                 span.shrink_to_lo(),\n-                                &msg,\n+                                msg,\n                                 \"async \",\n                                 Applicability::MaybeIncorrect,\n                             );\n                         } else {\n                             err.span_suggestion_verbose(\n                                 vis_span.shrink_to_hi(),\n-                                &msg,\n+                                msg,\n                                 \" async\",\n                                 Applicability::MaybeIncorrect,\n                             );\n@@ -1717,7 +1717,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             Applicability::MachineApplicable,\n                         );\n                     } else {\n-                        err.note(&format!(\n+                        err.note(format!(\n                             \"`{}` is implemented for `{:?}`, but not for `{:?}`\",\n                             trait_pred.print_modifiers_and_trait_path(),\n                             suggested_ty,\n@@ -1754,7 +1754,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         {\n             err.span_label(\n                 expr.span,\n-                &format!(\n+                format!(\n                     \"this expression has type `{}`, which implements `{}`\",\n                     ty,\n                     trait_pred.print_modifiers_and_trait_path()\n@@ -1946,7 +1946,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             // Suggest `-> impl Trait`.\n             err.span_suggestion(\n                 ret_ty.span,\n-                &format!(\n+                format!(\n                     \"use `impl {1}` as the return type, as all return paths are of type `{}`, \\\n                      which implements `{1}`\",\n                     last_ty, trait_obj,\n@@ -1981,13 +1981,13 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             } else {\n                 // This is currently not possible to trigger because E0038 takes precedence, but\n                 // leave it in for completeness in case anything changes in an earlier stage.\n-                err.note(&format!(\n+                err.note(format!(\n                     \"if trait `{}` were object-safe, you could return a trait object\",\n                     trait_obj,\n                 ));\n             }\n             err.note(trait_obj_msg);\n-            err.note(&format!(\n+            err.note(format!(\n                 \"if all the returned values were of the same type you could use `impl {}` as the \\\n                  return type\",\n                 trait_obj,\n@@ -2027,7 +2027,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     } else {\n                         err.span_label(\n                             expr.span,\n-                            &format!(\"this returned value is of type `{}`\", ty),\n+                            format!(\"this returned value is of type `{}`\", ty),\n                         );\n                     }\n                 }\n@@ -2177,7 +2177,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     ) {\n         if let Some(assoc_item) = self.tcx.opt_associated_item(item_def_id) {\n             if let ty::AssocKind::Const | ty::AssocKind::Type = assoc_item.kind {\n-                err.note(&format!(\n+                err.note(format!(\n                     \"{}s cannot be accessed directly on a `trait`, they can only be \\\n                         accessed through a specific `impl`\",\n                     self.tcx.def_kind_descr(assoc_item.kind.as_def_kind(), item_def_id)\n@@ -2607,7 +2607,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 }\n                 err.span_note(\n                     span,\n-                    &format!(\n+                    format!(\n                         \"{} {} as this value is used across {}\",\n                         future_or_generator, trait_explanation, an_await_or_yield\n                     ),\n@@ -2628,7 +2628,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         );\n                         err.span_note(\n                             span,\n-                            &format!(\n+                            format!(\n                                 \"future {not_trait} as it awaits another future which {not_trait}\",\n                                 not_trait = trait_explanation\n                             ),\n@@ -2730,7 +2730,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n                 let mut span = MultiSpan::from_span(upvar_span);\n                 span.push_span_label(upvar_span, span_label);\n-                err.span_note(span, &span_note);\n+                err.span_note(span, span_note);\n             }\n         }\n \n@@ -2794,15 +2794,15 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 err.note(\"only the last element of a tuple may have a dynamically sized type\");\n             }\n             ObligationCauseCode::ProjectionWf(data) => {\n-                err.note(&format!(\"required so that the projection `{data}` is well-formed\"));\n+                err.note(format!(\"required so that the projection `{data}` is well-formed\"));\n             }\n             ObligationCauseCode::ReferenceOutlivesReferent(ref_ty) => {\n-                err.note(&format!(\n+                err.note(format!(\n                     \"required so that reference `{ref_ty}` does not outlive its referent\"\n                 ));\n             }\n             ObligationCauseCode::ObjectTypeBound(object_ty, region) => {\n-                err.note(&format!(\n+                err.note(format!(\n                     \"required so that the lifetime bound of `{}` for `{}` is satisfied\",\n                     region, object_ty,\n                 ));\n@@ -2838,34 +2838,34 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 if span.is_visible(sm) {\n                     let msg = format!(\"required by this bound in `{short_item_name}`\");\n                     multispan.push_span_label(span, msg);\n-                    err.span_note(multispan, &descr);\n+                    err.span_note(multispan, descr);\n                 } else {\n-                    err.span_note(tcx.def_span(item_def_id), &descr);\n+                    err.span_note(tcx.def_span(item_def_id), descr);\n                 }\n             }\n             ObligationCauseCode::ObjectCastObligation(concrete_ty, object_ty) => {\n                 let (concrete_ty, concrete_file) =\n                     self.tcx.short_ty_string(self.resolve_vars_if_possible(concrete_ty));\n                 let (object_ty, object_file) =\n                     self.tcx.short_ty_string(self.resolve_vars_if_possible(object_ty));\n-                err.note(&with_forced_trimmed_paths!(format!(\n+                err.note(with_forced_trimmed_paths!(format!(\n                     \"required for the cast from `{concrete_ty}` to the object type `{object_ty}`\",\n                 )));\n                 if let Some(file) = concrete_file {\n-                    err.note(&format!(\n+                    err.note(format!(\n                         \"the full name for the casted type has been written to '{}'\",\n                         file.display(),\n                     ));\n                 }\n                 if let Some(file) = object_file {\n-                    err.note(&format!(\n+                    err.note(format!(\n                         \"the full name for the object type has been written to '{}'\",\n                         file.display(),\n                     ));\n                 }\n             }\n             ObligationCauseCode::Coercion { source: _, target } => {\n-                err.note(&format!(\"required by cast to type `{}`\", self.ty_to_string(target)));\n+                err.note(format!(\"required by cast to type `{}`\", self.ty_to_string(target)));\n             }\n             ObligationCauseCode::RepeatElementCopy { is_const_fn } => {\n                 err.note(\n@@ -3068,8 +3068,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         ));\n                         match ty.kind() {\n                             ty::Adt(def, _) => match self.tcx.opt_item_ident(def.did()) {\n-                                Some(ident) => err.span_note(ident.span, &msg),\n-                                None => err.note(&msg),\n+                                Some(ident) => err.span_note(ident.span, msg),\n+                                None => err.note(msg),\n                             },\n                             ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n                                 // If the previous type is async fn, this is the future generated by the body of an async function.\n@@ -3090,7 +3090,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 {\n                                     break 'print;\n                                 }\n-                                err.span_note(self.tcx.def_span(def_id), &msg)\n+                                err.span_note(self.tcx.def_span(def_id), msg)\n                             }\n                             ty::GeneratorWitness(bound_tys) => {\n                                 use std::fmt::Write;\n@@ -3126,7 +3126,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 let kind = tcx.generator_kind(def_id).unwrap().descr();\n                                 err.span_note(\n                                     sp,\n-                                    with_forced_trimmed_paths!(&format!(\n+                                    with_forced_trimmed_paths!(format!(\n                                         \"required because it's used within this {kind}\",\n                                     )),\n                                 )\n@@ -3136,7 +3136,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 \"required because it's used within this closure\",\n                             ),\n                             ty::Str => err.note(\"`str` is considered to contain a `[u8]` slice for auto trait purposes\"),\n-                            _ => err.note(&msg),\n+                            _ => err.note(msg),\n                         };\n                     }\n                 }\n@@ -3190,7 +3190,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         // FIXME: we should do something else so that it works even on crate foreign\n                         // auto traits.\n                         is_auto_trait = matches!(is_auto, hir::IsAuto::Yes);\n-                        err.span_note(ident.span, &msg);\n+                        err.span_note(ident.span, msg);\n                     }\n                     Some(Node::Item(hir::Item {\n                         kind: hir::ItemKind::Impl(hir::Impl { of_trait, self_ty, .. }),\n@@ -3219,15 +3219,15 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 \"unsatisfied trait bound introduced here\",\n                             );\n                         }\n-                        err.span_note(spans, &msg);\n+                        err.span_note(spans, msg);\n                     }\n                     _ => {\n-                        err.note(&msg);\n+                        err.note(msg);\n                     }\n                 };\n \n                 if let Some(file) = file {\n-                    err.note(&format!(\n+                    err.note(format!(\n                         \"the full type name has been written to '{}'\",\n                         file.display(),\n                     ));\n@@ -3267,19 +3267,19 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     parent_trait_pred = child_trait_pred;\n                 }\n                 if count > 0 {\n-                    err.note(&format!(\n+                    err.note(format!(\n                         \"{} redundant requirement{} hidden\",\n                         count,\n                         pluralize!(count)\n                     ));\n                     let (self_ty, file) =\n                         self.tcx.short_ty_string(parent_trait_pred.skip_binder().self_ty());\n-                    err.note(&format!(\n+                    err.note(format!(\n                         \"required for `{self_ty}` to implement `{}`\",\n                         parent_trait_pred.print_modifiers_and_trait_path()\n                     ));\n                     if let Some(file) = file {\n-                        err.note(&format!(\n+                        err.note(format!(\n                             \"the full type name has been written to '{}'\",\n                             file.display(),\n                         ));\n@@ -3360,7 +3360,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 {\n                     assoc_span.push_span_label(ident.span, \"in this trait\");\n                 }\n-                err.span_note(assoc_span, &msg);\n+                err.span_note(assoc_span, msg);\n             }\n             ObligationCauseCode::TrivialBound => {\n                 err.help(\"see issue #48214\");\n@@ -3516,7 +3516,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         if can_derive {\n             err.span_suggestion_verbose(\n                 self.tcx.def_span(adt.did()).shrink_to_lo(),\n-                &format!(\n+                format!(\n                     \"consider annotating `{}` with `#[derive({})]`\",\n                     trait_pred.skip_binder().self_ty(),\n                     diagnostic_name,\n@@ -3903,7 +3903,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             .map(|trait_ref| trait_ref.trait_ref.self_ty())\n             .find(|t| is_slice(*t))\n         {\n-            let msg = &format!(\"convert the array to a `{}` slice instead\", slice_ty);\n+            let msg = format!(\"convert the array to a `{}` slice instead\", slice_ty);\n \n             if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n                 let mut suggestions = vec![];\n@@ -4124,7 +4124,7 @@ fn suggest_trait_object_return_type_alternatives(\n ) {\n     err.span_suggestion(\n         ret_ty,\n-        &format!(\n+        format!(\n             \"use `impl {}` as the return type if all return paths have the same type but you \\\n                 want to expose only the trait in the signature\",\n             trait_obj,\n@@ -4134,7 +4134,7 @@ fn suggest_trait_object_return_type_alternatives(\n     );\n     if is_object_safe {\n         err.multipart_suggestion(\n-            &format!(\n+            format!(\n                 \"use a boxed trait object if all return paths implement trait `{}`\",\n                 trait_obj,\n             ),"}, {"sha": "2210ef975e6c82732fa78c72098f3211de3e237e", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 86, "deletions": 15, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -2,13 +2,14 @@\n \n use crate::traits::{self, ObligationCause, ObligationCtxt};\n \n+use hir::LangItem;\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n use rustc_infer::infer::canonical::Canonical;\n use rustc_infer::infer::{RegionResolutionError, TyCtxtInferExt};\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::{infer::outlives::env::OutlivesEnvironment, traits::FulfillmentError};\n-use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, TypeVisitableExt};\n+use rustc_middle::ty::{self, AdtDef, GenericArg, List, ParamEnv, Ty, TyCtxt, TypeVisitableExt};\n use rustc_span::DUMMY_SP;\n \n use super::outlives_bounds::InferCtxtExt;\n@@ -19,6 +20,11 @@ pub enum CopyImplementationError<'tcx> {\n     HasDestructor,\n }\n \n+pub enum ConstParamTyImplementationError<'tcx> {\n+    InfrigingFields(Vec<(&'tcx ty::FieldDef, Ty<'tcx>, InfringingFieldsReason<'tcx>)>),\n+    NotAnAdtOrBuiltinAllowed,\n+}\n+\n pub enum InfringingFieldsReason<'tcx> {\n     Fulfill(Vec<FulfillmentError<'tcx>>),\n     Regions(Vec<RegionResolutionError<'tcx>>),\n@@ -27,7 +33,10 @@ pub enum InfringingFieldsReason<'tcx> {\n /// Checks that the fields of the type (an ADT) all implement copy.\n ///\n /// If fields don't implement copy, return an error containing a list of\n-/// those violating fields. If it's not an ADT, returns `Err(NotAnAdt)`.\n+/// those violating fields.\n+///\n+/// If it's not an ADT, int ty, `bool`, float ty, `char`, raw pointer, `!`,\n+/// a reference or an array returns `Err(NotAnAdt)`.\n pub fn type_allowed_to_implement_copy<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -47,12 +56,82 @@ pub fn type_allowed_to_implement_copy<'tcx>(\n         | ty::Ref(_, _, hir::Mutability::Not)\n         | ty::Array(..) => return Ok(()),\n \n-        ty::Adt(adt, substs) => (adt, substs),\n+        &ty::Adt(adt, substs) => (adt, substs),\n \n         _ => return Err(CopyImplementationError::NotAnAdt),\n     };\n \n-    let copy_def_id = tcx.require_lang_item(hir::LangItem::Copy, Some(parent_cause.span));\n+    all_fields_implement_trait(\n+        tcx,\n+        param_env,\n+        self_type,\n+        adt,\n+        substs,\n+        parent_cause,\n+        hir::LangItem::Copy,\n+    )\n+    .map_err(CopyImplementationError::InfringingFields)?;\n+\n+    if adt.has_dtor(tcx) {\n+        return Err(CopyImplementationError::HasDestructor);\n+    }\n+\n+    Ok(())\n+}\n+\n+/// Checks that the fields of the type (an ADT) all implement `ConstParamTy`.\n+///\n+/// If fields don't implement `ConstParamTy`, return an error containing a list of\n+/// those violating fields.\n+///\n+/// If it's not an ADT, int ty, `bool` or `char`, returns `Err(NotAnAdtOrBuiltinAllowed)`.\n+pub fn type_allowed_to_implement_const_param_ty<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    self_type: Ty<'tcx>,\n+    parent_cause: ObligationCause<'tcx>,\n+) -> Result<(), ConstParamTyImplementationError<'tcx>> {\n+    let (adt, substs) = match self_type.kind() {\n+        // `core` provides these impls.\n+        ty::Uint(_)\n+        | ty::Int(_)\n+        | ty::Bool\n+        | ty::Char\n+        | ty::Str\n+        | ty::Array(..)\n+        | ty::Slice(_)\n+        | ty::Ref(.., hir::Mutability::Not) => return Ok(()),\n+\n+        &ty::Adt(adt, substs) => (adt, substs),\n+\n+        _ => return Err(ConstParamTyImplementationError::NotAnAdtOrBuiltinAllowed),\n+    };\n+\n+    all_fields_implement_trait(\n+        tcx,\n+        param_env,\n+        self_type,\n+        adt,\n+        substs,\n+        parent_cause,\n+        hir::LangItem::ConstParamTy,\n+    )\n+    .map_err(ConstParamTyImplementationError::InfrigingFields)?;\n+\n+    Ok(())\n+}\n+\n+/// Check that all fields of a given `adt` implement `lang_item` trait.\n+pub fn all_fields_implement_trait<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    self_type: Ty<'tcx>,\n+    adt: AdtDef<'tcx>,\n+    substs: &'tcx List<GenericArg<'tcx>>,\n+    parent_cause: ObligationCause<'tcx>,\n+    lang_item: LangItem,\n+) -> Result<(), Vec<(&'tcx ty::FieldDef, Ty<'tcx>, InfringingFieldsReason<'tcx>)>> {\n+    let trait_def_id = tcx.require_lang_item(lang_item, Some(parent_cause.span));\n \n     let mut infringing = Vec::new();\n     for variant in adt.variants() {\n@@ -93,15 +172,15 @@ pub fn type_allowed_to_implement_copy<'tcx>(\n             // between expected and found const-generic types. Don't report an\n             // additional copy error here, since it's not typically useful.\n             if !normalization_errors.is_empty() || ty.references_error() {\n-                tcx.sess.delay_span_bug(field_span, format!(\"couldn't normalize struct field `{unnormalized_ty}` when checking Copy implementation\"));\n+                tcx.sess.delay_span_bug(field_span, format!(\"couldn't normalize struct field `{unnormalized_ty}` when checking {tr} implementation\", tr = tcx.def_path_str(trait_def_id)));\n                 continue;\n             }\n \n             ocx.register_bound(\n                 ObligationCause::dummy_with_span(field_ty_span),\n                 param_env,\n                 ty,\n-                copy_def_id,\n+                trait_def_id,\n             );\n             let errors = ocx.select_all_or_error();\n             if !errors.is_empty() {\n@@ -124,15 +203,7 @@ pub fn type_allowed_to_implement_copy<'tcx>(\n         }\n     }\n \n-    if !infringing.is_empty() {\n-        return Err(CopyImplementationError::InfringingFields(infringing));\n-    }\n-\n-    if adt.has_dtor(tcx) {\n-        return Err(CopyImplementationError::HasDestructor);\n-    }\n-\n-    Ok(())\n+    if infringing.is_empty() { Ok(()) } else { Err(infringing) }\n }\n \n pub fn check_tys_might_be_eq<'tcx>("}, {"sha": "384b6ae93a12a6493d0a4948eae16e824a7b2f6a", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -525,7 +525,7 @@ fn virtual_call_violation_for_method<'tcx>(\n                         // #78372\n                         tcx.sess.delay_span_bug(\n                             tcx.def_span(method.def_id),\n-                            &format!(\"error: {}\\n while computing layout for type {:?}\", err, ty),\n+                            format!(\"error: {}\\n while computing layout for type {:?}\", err, ty),\n                         );\n                         None\n                     }\n@@ -541,7 +541,7 @@ fn virtual_call_violation_for_method<'tcx>(\n                 abi => {\n                     tcx.sess.delay_span_bug(\n                         tcx.def_span(method.def_id),\n-                        &format!(\n+                        format!(\n                             \"receiver when `Self = ()` should have a Scalar ABI; found {:?}\",\n                             abi\n                         ),\n@@ -560,7 +560,7 @@ fn virtual_call_violation_for_method<'tcx>(\n                 abi => {\n                     tcx.sess.delay_span_bug(\n                         tcx.def_span(method.def_id),\n-                        &format!(\n+                        format!(\n                             \"receiver when `Self = {}` should have a ScalarPair ABI; found {:?}\",\n                             trait_object_ty, abi\n                         ),"}, {"sha": "4369b257f5fe7c06238bcc05cc9be2d07f82d8c9", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1749,7 +1749,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                 // These traits have no associated types.\n                 selcx.tcx().sess.delay_span_bug(\n                     obligation.cause.span,\n-                    &format!(\"Cannot project an associated type from `{:?}`\", impl_source),\n+                    format!(\"Cannot project an associated type from `{:?}`\", impl_source),\n                 );\n                 return Err(());\n             }"}, {"sha": "1f8e756043d235c45e39a7f458e9b1610be67290", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -79,7 +79,7 @@ pub fn scrape_region_constraints<'tcx, Op: super::TypeOp<'tcx, Output = R>, R>(\n     if !errors.is_empty() {\n         infcx.tcx.sess.diagnostic().delay_span_bug(\n             DUMMY_SP,\n-            &format!(\"errors selecting obligation during MIR typeck: {:?}\", errors),\n+            format!(\"errors selecting obligation during MIR typeck: {:?}\", errors),\n         );\n     }\n "}, {"sha": "9890e990eebf0c9700a798ff81bb99d350792f8f", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -67,7 +67,7 @@ impl IntercrateAmbiguityCause {\n     /// Emits notes when the overlap is caused by complex intercrate ambiguities.\n     /// See #23980 for details.\n     pub fn add_intercrate_ambiguity_hint(&self, err: &mut Diagnostic) {\n-        err.note(&self.intercrate_ambiguity_hint());\n+        err.note(self.intercrate_ambiguity_hint());\n     }\n \n     pub fn intercrate_ambiguity_hint(&self) -> String {\n@@ -2449,7 +2449,7 @@ impl<'tcx> SelectionContext<'_, 'tcx> {\n                 // for a variable being generalized...\n                 let guar = self.infcx.tcx.sess.delay_span_bug(\n                     obligation.cause.span,\n-                    &format!(\n+                    format!(\n                         \"Impl {:?} was matchable against {:?} but now is not\",\n                         impl_def_id, obligation\n                     ),"}, {"sha": "233d35aed3820b777ea86cc5606e2b427cd4b040", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -373,7 +373,7 @@ fn report_conflicting_impls<'tcx>(\n                     }\n                     None => format!(\"conflicting implementation in crate `{}`\", cname),\n                 };\n-                err.note(&msg);\n+                err.note(msg);\n             }\n         }\n "}, {"sha": "fcdffc7468b82acefecf8953b6f5ae99a512aadf", "filename": "compiler/rustc_traits/src/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -190,7 +190,7 @@ fn dtorck_constraint_for_ty<'tcx>(\n \n                 tcx.sess.delay_span_bug(\n                     span,\n-                    &format!(\"upvar_tys for closure not found. Expected capture information for closure {ty}\",),\n+                    format!(\"upvar_tys for closure not found. Expected capture information for closure {ty}\",),\n                 );\n                 return Err(NoSolution);\n             }\n@@ -232,7 +232,7 @@ fn dtorck_constraint_for_ty<'tcx>(\n                 // be fully resolved.\n                 tcx.sess.delay_span_bug(\n                     span,\n-                    &format!(\"upvar_tys for generator not found. Expected capture information for generator {ty}\",),\n+                    format!(\"upvar_tys for generator not found. Expected capture information for generator {ty}\",),\n                 );\n                 return Err(NoSolution);\n             }"}, {"sha": "eedf459ce8fbc15b1b1599f261a69d8ebd26d87d", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -85,7 +85,7 @@ fn resolve_associated_item<'tcx>(\n         Err(CodegenObligationError::Ambiguity) => {\n             let reported = tcx.sess.delay_span_bug(\n                 tcx.def_span(trait_item_id),\n-                &format!(\n+                format!(\n                     \"encountered ambiguity selecting `{trait_ref:?}` during codegen, presuming due to \\\n                      overflow or prior type error\",\n                 ),"}, {"sha": "a04f85afb9ee2754e114bf3e8dafc22d2f6d88e9", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -132,7 +132,7 @@ where\n                             _ => {\n                                 tcx.sess.delay_span_bug(\n                                     tcx.hir().span_if_local(def_id).unwrap_or(DUMMY_SP),\n-                                    &format!(\"unexpected generator witness type {:?}\", witness),\n+                                    format!(\"unexpected generator witness type {:?}\", witness),\n                                 );\n                                 return Some(Err(AlwaysRequiresDrop));\n                             }"}, {"sha": "065f1b3e70e689c360b408a8bf0c9bc1e9a6b162", "filename": "library/core/src/ascii.rs", "status": "modified", "additions": 41, "deletions": 30, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/library%2Fcore%2Fsrc%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/library%2Fcore%2Fsrc%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fascii.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -9,10 +9,10 @@\n \n #![stable(feature = \"core_ascii\", since = \"1.26.0\")]\n \n+use crate::escape;\n use crate::fmt;\n use crate::iter::FusedIterator;\n-use crate::ops::Range;\n-use crate::str::from_utf8_unchecked;\n+use crate::num::NonZeroUsize;\n \n /// An iterator over the escaped version of a byte.\n ///\n@@ -21,10 +21,7 @@ use crate::str::from_utf8_unchecked;\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n-pub struct EscapeDefault {\n-    range: Range<u8>,\n-    data: [u8; 4],\n-}\n+pub struct EscapeDefault(escape::EscapeIterInner<4>);\n \n /// Returns an iterator that produces an escaped version of a `u8`.\n ///\n@@ -90,21 +87,9 @@ pub struct EscapeDefault {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn escape_default(c: u8) -> EscapeDefault {\n-    let (data, len) = match c {\n-        b'\\t' => ([b'\\\\', b't', 0, 0], 2),\n-        b'\\r' => ([b'\\\\', b'r', 0, 0], 2),\n-        b'\\n' => ([b'\\\\', b'n', 0, 0], 2),\n-        b'\\\\' => ([b'\\\\', b'\\\\', 0, 0], 2),\n-        b'\\'' => ([b'\\\\', b'\\'', 0, 0], 2),\n-        b'\"' => ([b'\\\\', b'\"', 0, 0], 2),\n-        b'\\x20'..=b'\\x7e' => ([c, 0, 0, 0], 1),\n-        _ => {\n-            let hex_digits: &[u8; 16] = b\"0123456789abcdef\";\n-            ([b'\\\\', b'x', hex_digits[(c >> 4) as usize], hex_digits[(c & 0xf) as usize]], 4)\n-        }\n-    };\n-\n-    return EscapeDefault { range: 0..len, data };\n+    let mut data = [0; 4];\n+    let range = escape::escape_ascii_into(&mut data, c);\n+    EscapeDefault(escape::EscapeIterInner::new(data, range))\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -113,33 +98,59 @@ impl Iterator for EscapeDefault {\n \n     #[inline]\n     fn next(&mut self) -> Option<u8> {\n-        self.range.next().map(|i| self.data[i as usize])\n+        self.0.next()\n     }\n+\n+    #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.range.size_hint()\n+        let n = self.0.len();\n+        (n, Some(n))\n+    }\n+\n+    #[inline]\n+    fn count(self) -> usize {\n+        self.0.len()\n     }\n+\n+    #[inline]\n     fn last(mut self) -> Option<u8> {\n-        self.next_back()\n+        self.0.next_back()\n+    }\n+\n+    #[inline]\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        self.0.advance_by(n)\n     }\n }\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl DoubleEndedIterator for EscapeDefault {\n+    #[inline]\n     fn next_back(&mut self) -> Option<u8> {\n-        self.range.next_back().map(|i| self.data[i as usize])\n+        self.0.next_back()\n+    }\n+\n+    #[inline]\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        self.0.advance_back_by(n)\n     }\n }\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl ExactSizeIterator for EscapeDefault {}\n+impl ExactSizeIterator for EscapeDefault {\n+    #[inline]\n+    fn len(&self) -> usize {\n+        self.0.len()\n+    }\n+}\n+\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for EscapeDefault {}\n \n #[stable(feature = \"ascii_escape_display\", since = \"1.39.0\")]\n impl fmt::Display for EscapeDefault {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        // SAFETY: ok because `escape_default` created only valid utf-8 data\n-        f.write_str(unsafe {\n-            from_utf8_unchecked(&self.data[(self.range.start as usize)..(self.range.end as usize)])\n-        })\n+        f.write_str(self.0.as_str())\n     }\n }\n "}, {"sha": "2408f1780755437a94089ef2b3e702aad8f17d5a", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 21, "deletions": 36, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -380,20 +380,7 @@ impl char {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn escape_unicode(self) -> EscapeUnicode {\n-        let c = self as u32;\n-\n-        // or-ing 1 ensures that for c==0 the code computes that one\n-        // digit should be printed and (which is the same) avoids the\n-        // (31 - 32) underflow\n-        let msb = 31 - (c | 1).leading_zeros();\n-\n-        // the index of the most significant hex digit\n-        let ms_hex_digit = msb / 4;\n-        EscapeUnicode {\n-            c: self,\n-            state: EscapeUnicodeState::Backslash,\n-            hex_digit_idx: ms_hex_digit as usize,\n-        }\n+        EscapeUnicode::new(self)\n     }\n \n     /// An extended version of `escape_debug` that optionally permits escaping\n@@ -403,21 +390,20 @@ impl char {\n     /// characters, and double quotes in strings.\n     #[inline]\n     pub(crate) fn escape_debug_ext(self, args: EscapeDebugExtArgs) -> EscapeDebug {\n-        let init_state = match self {\n-            '\\0' => EscapeDefaultState::Backslash('0'),\n-            '\\t' => EscapeDefaultState::Backslash('t'),\n-            '\\r' => EscapeDefaultState::Backslash('r'),\n-            '\\n' => EscapeDefaultState::Backslash('n'),\n-            '\\\\' => EscapeDefaultState::Backslash(self),\n-            '\"' if args.escape_double_quote => EscapeDefaultState::Backslash(self),\n-            '\\'' if args.escape_single_quote => EscapeDefaultState::Backslash(self),\n+        match self {\n+            '\\0' => EscapeDebug::backslash(b'0'),\n+            '\\t' => EscapeDebug::backslash(b't'),\n+            '\\r' => EscapeDebug::backslash(b'r'),\n+            '\\n' => EscapeDebug::backslash(b'n'),\n+            '\\\\' => EscapeDebug::backslash(b'\\\\'),\n+            '\"' if args.escape_double_quote => EscapeDebug::backslash(b'\"'),\n+            '\\'' if args.escape_single_quote => EscapeDebug::backslash(b'\\''),\n             _ if args.escape_grapheme_extended && self.is_grapheme_extended() => {\n-                EscapeDefaultState::Unicode(self.escape_unicode())\n+                EscapeDebug::from_unicode(self.escape_unicode())\n             }\n-            _ if is_printable(self) => EscapeDefaultState::Char(self),\n-            _ => EscapeDefaultState::Unicode(self.escape_unicode()),\n-        };\n-        EscapeDebug(EscapeDefault { state: init_state })\n+            _ if is_printable(self) => EscapeDebug::printable(self),\n+            _ => EscapeDebug::from_unicode(self.escape_unicode()),\n+        }\n     }\n \n     /// Returns an iterator that yields the literal escape code of a character\n@@ -515,15 +501,14 @@ impl char {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn escape_default(self) -> EscapeDefault {\n-        let init_state = match self {\n-            '\\t' => EscapeDefaultState::Backslash('t'),\n-            '\\r' => EscapeDefaultState::Backslash('r'),\n-            '\\n' => EscapeDefaultState::Backslash('n'),\n-            '\\\\' | '\\'' | '\"' => EscapeDefaultState::Backslash(self),\n-            '\\x20'..='\\x7e' => EscapeDefaultState::Char(self),\n-            _ => EscapeDefaultState::Unicode(self.escape_unicode()),\n-        };\n-        EscapeDefault { state: init_state }\n+        match self {\n+            '\\t' => EscapeDefault::backslash(b't'),\n+            '\\r' => EscapeDefault::backslash(b'r'),\n+            '\\n' => EscapeDefault::backslash(b'n'),\n+            '\\\\' | '\\'' | '\"' => EscapeDefault::backslash(self as u8),\n+            '\\x20'..='\\x7e' => EscapeDefault::printable(self as u8),\n+            _ => EscapeDefault::from_unicode(self.escape_unicode()),\n+        }\n     }\n \n     /// Returns the number of bytes this `char` would need if encoded in UTF-8."}, {"sha": "e186db7052cd04ce09ae427546623943bf33b747", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 111, "deletions": 140, "changes": 251, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -39,8 +39,10 @@ pub use self::methods::encode_utf16_raw;\n pub use self::methods::encode_utf8_raw;\n \n use crate::error::Error;\n+use crate::escape;\n use crate::fmt::{self, Write};\n use crate::iter::FusedIterator;\n+use crate::num::NonZeroUsize;\n \n pub(crate) use self::methods::EscapeDebugExtArgs;\n \n@@ -146,103 +148,52 @@ pub const fn from_digit(num: u32, radix: u32) -> Option<char> {\n /// [`escape_unicode`]: char::escape_unicode\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct EscapeUnicode {\n-    c: char,\n-    state: EscapeUnicodeState,\n-\n-    // The index of the next hex digit to be printed (0 if none),\n-    // i.e., the number of remaining hex digits to be printed;\n-    // increasing from the least significant digit: 0x543210\n-    hex_digit_idx: usize,\n-}\n+pub struct EscapeUnicode(escape::EscapeIterInner<10>);\n \n-// The enum values are ordered so that their representation is the\n-// same as the remaining length (besides the hexadecimal digits). This\n-// likely makes `len()` a single load from memory) and inline-worth.\n-#[derive(Clone, Debug)]\n-enum EscapeUnicodeState {\n-    Done,\n-    RightBrace,\n-    Value,\n-    LeftBrace,\n-    Type,\n-    Backslash,\n+impl EscapeUnicode {\n+    fn new(chr: char) -> Self {\n+        let mut data = [0; 10];\n+        let range = escape::escape_unicode_into(&mut data, chr);\n+        Self(escape::EscapeIterInner::new(data, range))\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Iterator for EscapeUnicode {\n     type Item = char;\n \n+    #[inline]\n     fn next(&mut self) -> Option<char> {\n-        match self.state {\n-            EscapeUnicodeState::Backslash => {\n-                self.state = EscapeUnicodeState::Type;\n-                Some('\\\\')\n-            }\n-            EscapeUnicodeState::Type => {\n-                self.state = EscapeUnicodeState::LeftBrace;\n-                Some('u')\n-            }\n-            EscapeUnicodeState::LeftBrace => {\n-                self.state = EscapeUnicodeState::Value;\n-                Some('{')\n-            }\n-            EscapeUnicodeState::Value => {\n-                let hex_digit = ((self.c as u32) >> (self.hex_digit_idx * 4)) & 0xf;\n-                let c = char::from_digit(hex_digit, 16).unwrap();\n-                if self.hex_digit_idx == 0 {\n-                    self.state = EscapeUnicodeState::RightBrace;\n-                } else {\n-                    self.hex_digit_idx -= 1;\n-                }\n-                Some(c)\n-            }\n-            EscapeUnicodeState::RightBrace => {\n-                self.state = EscapeUnicodeState::Done;\n-                Some('}')\n-            }\n-            EscapeUnicodeState::Done => None,\n-        }\n+        self.0.next().map(char::from)\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let n = self.len();\n+        let n = self.0.len();\n         (n, Some(n))\n     }\n \n     #[inline]\n     fn count(self) -> usize {\n-        self.len()\n+        self.0.len()\n     }\n \n-    fn last(self) -> Option<char> {\n-        match self.state {\n-            EscapeUnicodeState::Done => None,\n+    #[inline]\n+    fn last(mut self) -> Option<char> {\n+        self.0.next_back().map(char::from)\n+    }\n \n-            EscapeUnicodeState::RightBrace\n-            | EscapeUnicodeState::Value\n-            | EscapeUnicodeState::LeftBrace\n-            | EscapeUnicodeState::Type\n-            | EscapeUnicodeState::Backslash => Some('}'),\n-        }\n+    #[inline]\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        self.0.advance_by(n)\n     }\n }\n \n #[stable(feature = \"exact_size_escape\", since = \"1.11.0\")]\n impl ExactSizeIterator for EscapeUnicode {\n     #[inline]\n     fn len(&self) -> usize {\n-        // The match is a single memory access with no branching\n-        self.hex_digit_idx\n-            + match self.state {\n-                EscapeUnicodeState::Done => 0,\n-                EscapeUnicodeState::RightBrace => 1,\n-                EscapeUnicodeState::Value => 2,\n-                EscapeUnicodeState::LeftBrace => 3,\n-                EscapeUnicodeState::Type => 4,\n-                EscapeUnicodeState::Backslash => 5,\n-            }\n+        self.0.len()\n     }\n }\n \n@@ -252,10 +203,7 @@ impl FusedIterator for EscapeUnicode {}\n #[stable(feature = \"char_struct_display\", since = \"1.16.0\")]\n impl fmt::Display for EscapeUnicode {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        for c in self.clone() {\n-            f.write_char(c)?;\n-        }\n-        Ok(())\n+        f.write_str(self.0.as_str())\n     }\n }\n \n@@ -267,90 +215,60 @@ impl fmt::Display for EscapeUnicode {\n /// [`escape_default`]: char::escape_default\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct EscapeDefault {\n-    state: EscapeDefaultState,\n-}\n+pub struct EscapeDefault(escape::EscapeIterInner<10>);\n \n-#[derive(Clone, Debug)]\n-enum EscapeDefaultState {\n-    Done,\n-    Char(char),\n-    Backslash(char),\n-    Unicode(EscapeUnicode),\n+impl EscapeDefault {\n+    fn printable(chr: u8) -> Self {\n+        let data = [chr, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+        Self(escape::EscapeIterInner::new(data, 0..1))\n+    }\n+\n+    fn backslash(chr: u8) -> Self {\n+        let data = [b'\\\\', chr, 0, 0, 0, 0, 0, 0, 0, 0];\n+        Self(escape::EscapeIterInner::new(data, 0..2))\n+    }\n+\n+    fn from_unicode(esc: EscapeUnicode) -> Self {\n+        Self(esc.0)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Iterator for EscapeDefault {\n     type Item = char;\n \n+    #[inline]\n     fn next(&mut self) -> Option<char> {\n-        match self.state {\n-            EscapeDefaultState::Backslash(c) => {\n-                self.state = EscapeDefaultState::Char(c);\n-                Some('\\\\')\n-            }\n-            EscapeDefaultState::Char(c) => {\n-                self.state = EscapeDefaultState::Done;\n-                Some(c)\n-            }\n-            EscapeDefaultState::Done => None,\n-            EscapeDefaultState::Unicode(ref mut iter) => iter.next(),\n-        }\n+        self.0.next().map(char::from)\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let n = self.len();\n+        let n = self.0.len();\n         (n, Some(n))\n     }\n \n     #[inline]\n     fn count(self) -> usize {\n-        self.len()\n+        self.0.len()\n     }\n \n-    fn nth(&mut self, n: usize) -> Option<char> {\n-        match self.state {\n-            EscapeDefaultState::Backslash(c) if n == 0 => {\n-                self.state = EscapeDefaultState::Char(c);\n-                Some('\\\\')\n-            }\n-            EscapeDefaultState::Backslash(c) if n == 1 => {\n-                self.state = EscapeDefaultState::Done;\n-                Some(c)\n-            }\n-            EscapeDefaultState::Backslash(_) => {\n-                self.state = EscapeDefaultState::Done;\n-                None\n-            }\n-            EscapeDefaultState::Char(c) => {\n-                self.state = EscapeDefaultState::Done;\n-\n-                if n == 0 { Some(c) } else { None }\n-            }\n-            EscapeDefaultState::Done => None,\n-            EscapeDefaultState::Unicode(ref mut i) => i.nth(n),\n-        }\n+    #[inline]\n+    fn last(mut self) -> Option<char> {\n+        self.0.next_back().map(char::from)\n     }\n \n-    fn last(self) -> Option<char> {\n-        match self.state {\n-            EscapeDefaultState::Unicode(iter) => iter.last(),\n-            EscapeDefaultState::Done => None,\n-            EscapeDefaultState::Backslash(c) | EscapeDefaultState::Char(c) => Some(c),\n-        }\n+    #[inline]\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        self.0.advance_by(n)\n     }\n }\n \n #[stable(feature = \"exact_size_escape\", since = \"1.11.0\")]\n impl ExactSizeIterator for EscapeDefault {\n+    #[inline]\n     fn len(&self) -> usize {\n-        match self.state {\n-            EscapeDefaultState::Done => 0,\n-            EscapeDefaultState::Char(_) => 1,\n-            EscapeDefaultState::Backslash(_) => 2,\n-            EscapeDefaultState::Unicode(ref iter) => iter.len(),\n-        }\n+        self.0.len()\n     }\n }\n \n@@ -360,10 +278,7 @@ impl FusedIterator for EscapeDefault {}\n #[stable(feature = \"char_struct_display\", since = \"1.16.0\")]\n impl fmt::Display for EscapeDefault {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        for c in self.clone() {\n-            f.write_char(c)?;\n-        }\n-        Ok(())\n+        f.write_str(self.0.as_str())\n     }\n }\n \n@@ -375,29 +290,85 @@ impl fmt::Display for EscapeDefault {\n /// [`escape_debug`]: char::escape_debug\n #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n #[derive(Clone, Debug)]\n-pub struct EscapeDebug(EscapeDefault);\n+pub struct EscapeDebug(EscapeDebugInner);\n+\n+#[derive(Clone, Debug)]\n+// Note: It\u2019s possible to manually encode the EscapeDebugInner inside of\n+// EscapeIterInner (e.g. with alive=254..255 indicating that data[0..4] holds\n+// a char) which would likely result in a more optimised code.  For now we use\n+// the option easier to implement.\n+enum EscapeDebugInner {\n+    Bytes(escape::EscapeIterInner<10>),\n+    Char(char),\n+}\n+\n+impl EscapeDebug {\n+    fn printable(chr: char) -> Self {\n+        Self(EscapeDebugInner::Char(chr))\n+    }\n+\n+    fn backslash(chr: u8) -> Self {\n+        let data = [b'\\\\', chr, 0, 0, 0, 0, 0, 0, 0, 0];\n+        let iter = escape::EscapeIterInner::new(data, 0..2);\n+        Self(EscapeDebugInner::Bytes(iter))\n+    }\n+\n+    fn from_unicode(esc: EscapeUnicode) -> Self {\n+        Self(EscapeDebugInner::Bytes(esc.0))\n+    }\n+\n+    fn clear(&mut self) {\n+        let bytes = escape::EscapeIterInner::new([0; 10], 0..0);\n+        self.0 = EscapeDebugInner::Bytes(bytes);\n+    }\n+}\n \n #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n impl Iterator for EscapeDebug {\n     type Item = char;\n+\n+    #[inline]\n     fn next(&mut self) -> Option<char> {\n-        self.0.next()\n+        match self.0 {\n+            EscapeDebugInner::Bytes(ref mut bytes) => bytes.next().map(char::from),\n+            EscapeDebugInner::Char(chr) => {\n+                self.clear();\n+                Some(chr)\n+            }\n+        }\n     }\n+\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.0.size_hint()\n+        let n = self.len();\n+        (n, Some(n))\n+    }\n+\n+    #[inline]\n+    fn count(self) -> usize {\n+        self.len()\n     }\n }\n \n #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n-impl ExactSizeIterator for EscapeDebug {}\n+impl ExactSizeIterator for EscapeDebug {\n+    fn len(&self) -> usize {\n+        match &self.0 {\n+            EscapeDebugInner::Bytes(bytes) => bytes.len(),\n+            EscapeDebugInner::Char(_) => 1,\n+        }\n+    }\n+}\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for EscapeDebug {}\n \n #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n impl fmt::Display for EscapeDebug {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(&self.0, f)\n+        match &self.0 {\n+            EscapeDebugInner::Bytes(bytes) => f.write_str(bytes.as_str()),\n+            EscapeDebugInner::Char(chr) => f.write_char(*chr),\n+        }\n     }\n }\n "}, {"sha": "20ac3cf027f87fc87b4ff186f5606e6916d8a0c0", "filename": "library/core/src/escape.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/library%2Fcore%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/library%2Fcore%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fescape.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -0,0 +1,99 @@\n+//! Helper code for character escaping.\n+\n+use crate::num::NonZeroUsize;\n+use crate::ops::Range;\n+\n+const HEX_DIGITS: [u8; 16] = *b\"0123456789abcdef\";\n+\n+/// Escapes a byte into provided buffer; returns length of escaped\n+/// representation.\n+pub(crate) fn escape_ascii_into(output: &mut [u8; 4], byte: u8) -> Range<u8> {\n+    let (data, len) = match byte {\n+        b'\\t' => ([b'\\\\', b't', 0, 0], 2),\n+        b'\\r' => ([b'\\\\', b'r', 0, 0], 2),\n+        b'\\n' => ([b'\\\\', b'n', 0, 0], 2),\n+        b'\\\\' => ([b'\\\\', b'\\\\', 0, 0], 2),\n+        b'\\'' => ([b'\\\\', b'\\'', 0, 0], 2),\n+        b'\"' => ([b'\\\\', b'\"', 0, 0], 2),\n+        b'\\x20'..=b'\\x7e' => ([byte, 0, 0, 0], 1),\n+        _ => {\n+            let hi = HEX_DIGITS[usize::from(byte >> 4)];\n+            let lo = HEX_DIGITS[usize::from(byte & 0xf)];\n+            ([b'\\\\', b'x', hi, lo], 4)\n+        }\n+    };\n+    *output = data;\n+    0..(len as u8)\n+}\n+\n+/// Escapes a character into provided buffer using `\\u{NNNN}` representation.\n+pub(crate) fn escape_unicode_into(output: &mut [u8; 10], ch: char) -> Range<u8> {\n+    output[9] = b'}';\n+\n+    let ch = ch as u32;\n+    output[3] = HEX_DIGITS[((ch >> 20) & 15) as usize];\n+    output[4] = HEX_DIGITS[((ch >> 16) & 15) as usize];\n+    output[5] = HEX_DIGITS[((ch >> 12) & 15) as usize];\n+    output[6] = HEX_DIGITS[((ch >> 8) & 15) as usize];\n+    output[7] = HEX_DIGITS[((ch >> 4) & 15) as usize];\n+    output[8] = HEX_DIGITS[((ch >> 0) & 15) as usize];\n+\n+    // or-ing 1 ensures that for ch==0 the code computes that one digit should\n+    // be printed.\n+    let start = (ch | 1).leading_zeros() as usize / 4 - 2;\n+    output[start..start + 3].copy_from_slice(b\"\\\\u{\");\n+\n+    (start as u8)..10\n+}\n+\n+/// An iterator over an fixed-size array.\n+///\n+/// This is essentially equivalent to array\u2019s IntoIter except that indexes are\n+/// limited to u8 to reduce size of the structure.\n+#[derive(Clone, Debug)]\n+pub(crate) struct EscapeIterInner<const N: usize> {\n+    // Invariant: data[alive] is all ASCII.\n+    pub(crate) data: [u8; N],\n+\n+    // Invariant: alive.start <= alive.end <= N.\n+    pub(crate) alive: Range<u8>,\n+}\n+\n+impl<const N: usize> EscapeIterInner<N> {\n+    pub fn new(data: [u8; N], alive: Range<u8>) -> Self {\n+        const { assert!(N < 256) };\n+        debug_assert!(alive.start <= alive.end && usize::from(alive.end) <= N, \"{alive:?}\");\n+        let this = Self { data, alive };\n+        debug_assert!(this.as_bytes().is_ascii(), \"Expected ASCII, got {:?}\", this.as_bytes());\n+        this\n+    }\n+\n+    fn as_bytes(&self) -> &[u8] {\n+        &self.data[usize::from(self.alive.start)..usize::from(self.alive.end)]\n+    }\n+\n+    pub fn as_str(&self) -> &str {\n+        // SAFETY: self.data[self.alive] is all ASCII characters.\n+        unsafe { crate::str::from_utf8_unchecked(self.as_bytes()) }\n+    }\n+\n+    pub fn len(&self) -> usize {\n+        usize::from(self.alive.end - self.alive.start)\n+    }\n+\n+    pub fn next(&mut self) -> Option<u8> {\n+        self.alive.next().map(|i| self.data[usize::from(i)])\n+    }\n+\n+    pub fn next_back(&mut self) -> Option<u8> {\n+        self.alive.next_back().map(|i| self.data[usize::from(i)])\n+    }\n+\n+    pub fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        self.alive.advance_by(n)\n+    }\n+\n+    pub fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        self.alive.advance_back_by(n)\n+    }\n+}"}, {"sha": "a535a011aafe2cb355b417d3c82de6b737a251f2", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -162,6 +162,7 @@\n #![feature(const_waker)]\n #![feature(core_panic)]\n #![feature(duration_consts_float)]\n+#![feature(internal_impls_macro)]\n #![feature(ip)]\n #![feature(is_ascii_octdigit)]\n #![feature(maybe_uninit_uninit_array)]\n@@ -376,6 +377,7 @@ pub mod alloc;\n \n // note: does not need to be public\n mod bool;\n+mod escape;\n mod tuple;\n mod unit;\n "}, {"sha": "52f3d208aba4e591094ad565780b3b34f60fe3b3", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 131, "deletions": 52, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -12,6 +12,60 @@ use crate::fmt::Debug;\n use crate::hash::Hash;\n use crate::hash::Hasher;\n \n+/// Implements a given marker trait for multiple types at the same time.\n+///\n+/// The basic syntax looks like this:\n+/// ```ignore private macro\n+/// marker_impls! { MarkerTrait for u8, i8 }\n+/// ```\n+/// You can also implement `unsafe` traits\n+/// ```ignore private macro\n+/// marker_impls! { unsafe MarkerTrait for u8, i8 }\n+/// ```\n+/// Add attributes to all impls:\n+/// ```ignore private macro\n+/// marker_impls! {\n+///     #[allow(lint)]\n+///     #[unstable(feature = \"marker_trait\", issue = \"none\")]\n+///     MarkerTrait for u8, i8\n+/// }\n+/// ```\n+/// And use generics:\n+/// ```ignore private macro\n+/// marker_impls! {\n+///     MarkerTrait for\n+///         u8, i8,\n+///         {T: ?Sized} *const T,\n+///         {T: ?Sized} *mut T,\n+///         {T: MarkerTrait} PhantomData<T>,\n+///         u32,\n+/// }\n+/// ```\n+#[unstable(feature = \"internal_impls_macro\", issue = \"none\")]\n+macro marker_impls {\n+    ( $(#[$($meta:tt)*])* $Trait:ident for $( $({$($bounds:tt)*})? $T:ty ),+ $(,)?) => {\n+        // This inner macro is needed because... idk macros are weird.\n+        // It allows repeating `meta` on all impls.\n+        #[unstable(feature = \"internal_impls_macro\", issue = \"none\")]\n+        macro _impl {\n+            ( $$({$$($$bounds_:tt)*})? $$T_:ty ) => {\n+                $(#[$($meta)*])* impl<$$($$($$bounds_)*)?> $Trait for $$T_ {}\n+            }\n+        }\n+        $( _impl! { $({$($bounds)*})? $T } )+\n+    },\n+    ( $(#[$($meta:tt)*])* unsafe $Trait:ident for $( $({$($bounds:tt)*})? $T:ty ),+ $(,)?) => {\n+        #[unstable(feature = \"internal_impls_macro\", issue = \"none\")]\n+        macro _impl {\n+            ( $$({$$($$bounds_:tt)*})? $$T_:ty ) => {\n+                $(#[$($meta)*])* unsafe impl<$$($$($$bounds_)*)?> $Trait for $$T_ {}\n+            }\n+        }\n+\n+        $( _impl! { $({$($bounds)*})? $T } )+\n+    },\n+}\n+\n /// Types that can be transferred across thread boundaries.\n ///\n /// This trait is automatically implemented when the compiler determines it's\n@@ -214,6 +268,20 @@ pub trait StructuralEq {\n     // Empty.\n }\n \n+// FIXME: Remove special cases of these types from the compiler pattern checking code and always check `T: StructuralEq` instead\n+marker_impls! {\n+    #[unstable(feature = \"structural_match\", issue = \"31434\")]\n+    StructuralEq for\n+        usize, u8, u16, u32, u64, u128,\n+        isize, i8, i16, i32, i64, i128,\n+        bool,\n+        char,\n+        str /* Technically requires `[u8]: StructuralEq` */,\n+        {T, const N: usize} [T; N],\n+        {T} [T],\n+        {T: ?Sized} &T,\n+}\n+\n /// Types whose values can be duplicated simply by copying bits.\n ///\n /// By default, variable bindings have 'move semantics.' In other\n@@ -401,6 +469,30 @@ pub macro Copy($item:item) {\n     /* compiler built-in */\n }\n \n+// Implementations of `Copy` for primitive types.\n+//\n+// Implementations that cannot be described in Rust\n+// are implemented in `traits::SelectionContext::copy_clone_conditions()`\n+// in `rustc_trait_selection`.\n+marker_impls! {\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    Copy for\n+        usize, u8, u16, u32, u64, u128,\n+        isize, i8, i16, i32, i64, i128,\n+        f32, f64,\n+        bool, char,\n+        {T: ?Sized} *const T,\n+        {T: ?Sized} *mut T,\n+\n+}\n+\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n+impl Copy for ! {}\n+\n+/// Shared references can be copied, but mutable references *cannot*!\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> Copy for &T {}\n+\n /// Types for which it is safe to share references between threads.\n ///\n /// This trait is automatically implemented when the compiler determines\n@@ -778,11 +870,14 @@ pub trait DiscriminantKind {\n pub(crate) unsafe auto trait Freeze {}\n \n impl<T: ?Sized> !Freeze for UnsafeCell<T> {}\n-unsafe impl<T: ?Sized> Freeze for PhantomData<T> {}\n-unsafe impl<T: ?Sized> Freeze for *const T {}\n-unsafe impl<T: ?Sized> Freeze for *mut T {}\n-unsafe impl<T: ?Sized> Freeze for &T {}\n-unsafe impl<T: ?Sized> Freeze for &mut T {}\n+marker_impls! {\n+    unsafe Freeze for\n+        {T: ?Sized} PhantomData<T>,\n+        {T: ?Sized} *const T,\n+        {T: ?Sized} *mut T,\n+        {T: ?Sized} &T,\n+        {T: ?Sized} &mut T,\n+}\n \n /// Types that can be safely moved after being pinned.\n ///\n@@ -843,17 +938,19 @@ pub struct PhantomPinned;\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl !Unpin for PhantomPinned {}\n \n-#[stable(feature = \"pin\", since = \"1.33.0\")]\n-impl<'a, T: ?Sized + 'a> Unpin for &'a T {}\n-\n-#[stable(feature = \"pin\", since = \"1.33.0\")]\n-impl<'a, T: ?Sized + 'a> Unpin for &'a mut T {}\n-\n-#[stable(feature = \"pin_raw\", since = \"1.38.0\")]\n-impl<T: ?Sized> Unpin for *const T {}\n+marker_impls! {\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    Unpin for\n+        {T: ?Sized} &T,\n+        {T: ?Sized} &mut T,\n+}\n \n-#[stable(feature = \"pin_raw\", since = \"1.38.0\")]\n-impl<T: ?Sized> Unpin for *mut T {}\n+marker_impls! {\n+    #[stable(feature = \"pin_raw\", since = \"1.38.0\")]\n+    Unpin for\n+        {T: ?Sized} *const T,\n+        {T: ?Sized} *mut T,\n+}\n \n /// A marker for types that can be dropped.\n ///\n@@ -888,43 +985,25 @@ pub trait Tuple {}\n )]\n pub trait PointerLike {}\n \n-/// Implementations of `Copy` for primitive types.\n-///\n-/// Implementations that cannot be described in Rust\n-/// are implemented in `traits::SelectionContext::copy_clone_conditions()`\n-/// in `rustc_trait_selection`.\n-mod copy_impls {\n-\n-    use super::Copy;\n-\n-    macro_rules! impl_copy {\n-        ($($t:ty)*) => {\n-            $(\n-                #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-                impl Copy for $t {}\n-            )*\n-        }\n-    }\n-\n-    impl_copy! {\n-        usize u8 u16 u32 u64 u128\n-        isize i8 i16 i32 i64 i128\n-        f32 f64\n-        bool char\n-    }\n-\n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n-    impl Copy for ! {}\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<T: ?Sized> Copy for *const T {}\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<T: ?Sized> Copy for *mut T {}\n-\n-    /// Shared references can be copied, but mutable references *cannot*!\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<T: ?Sized> Copy for &T {}\n+/// A marker for types which can be used as types of `const` generic parameters.\n+#[cfg_attr(not(bootstrap), lang = \"const_param_ty\")]\n+#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n+#[rustc_on_unimplemented(message = \"`{Self}` can't be used as a const parameter type\")]\n+pub trait ConstParamTy: StructuralEq {}\n+\n+// FIXME(generic_const_parameter_types): handle `ty::FnDef`/`ty::Closure`\n+// FIXME(generic_const_parameter_types): handle `ty::Tuple`\n+marker_impls! {\n+    #[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n+    ConstParamTy for\n+        usize, u8, u16, u32, u64, u128,\n+        isize, i8, i16, i32, i64, i128,\n+        bool,\n+        char,\n+        str /* Technically requires `[u8]: ConstParamTy` */,\n+        {T: ConstParamTy, const N: usize} [T; N],\n+        {T: ConstParamTy} [T],\n+        {T: ?Sized + ConstParamTy} &T,\n }\n \n /// A common trait implemented by all function pointers."}, {"sha": "aafe5ced2e97f61cb8bd5197a7b1f565e17d20d9", "filename": "library/core/tests/clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/library%2Fcore%2Ftests%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/library%2Fcore%2Ftests%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fclone.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1,4 +1,5 @@\n #[test]\n+#[cfg_attr(not(bootstrap), allow(suspicious_double_ref_op))]\n fn test_borrowed_clone() {\n     let x = 5;\n     let y: &i32 = &x;"}, {"sha": "951d509ec9533193975c32d12cd49e7ff43af7d7", "filename": "library/std/src/sys/common/thread_local/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -6,7 +6,7 @@ cfg_if::cfg_if! {\n         mod static_local;\n         #[doc(hidden)]\n         pub use static_local::{Key, thread_local_inner};\n-    } else if #[cfg(all(target_thread_local))] {\n+    } else if #[cfg(target_thread_local)] {\n         #[doc(hidden)]\n         mod fast_local;\n         #[doc(hidden)]"}, {"sha": "47c4e7757e40cb96eccabdedc9acbab259d7ecea", "filename": "library/test/src/formatters/json.rs", "status": "modified", "additions": 62, "deletions": 70, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -18,14 +18,10 @@ impl<T: Write> JsonFormatter<T> {\n     }\n \n     fn writeln_message(&mut self, s: &str) -> io::Result<()> {\n-        assert!(!s.contains('\\n'));\n-\n-        self.out.write_all(s.as_ref())?;\n-        self.out.write_all(b\"\\n\")\n-    }\n-\n-    fn write_message(&mut self, s: &str) -> io::Result<()> {\n-        assert!(!s.contains('\\n'));\n+        // self.out will take a lock, but that lock is released when write_all returns. This\n+        // results in a race condition and json output may not end with a new line. We avoid this\n+        // by issuing `write_all` calls line-by-line.\n+        assert_eq!(s.chars().last(), Some('\\n'));\n \n         self.out.write_all(s.as_ref())\n     }\n@@ -34,34 +30,35 @@ impl<T: Write> JsonFormatter<T> {\n         &mut self,\n         ty: &str,\n         name: &str,\n-        evt: &str,\n+        event: &str,\n         exec_time: Option<&time::TestExecTime>,\n         stdout: Option<Cow<'_, str>>,\n         extra: Option<&str>,\n     ) -> io::Result<()> {\n         // A doc test's name includes a filename which must be escaped for correct json.\n-        self.write_message(&format!(\n-            r#\"{{ \"type\": \"{}\", \"name\": \"{}\", \"event\": \"{}\"\"#,\n-            ty,\n-            EscapedString(name),\n-            evt\n-        ))?;\n-        if let Some(exec_time) = exec_time {\n-            self.write_message(&format!(r#\", \"exec_time\": {}\"#, exec_time.0.as_secs_f64()))?;\n-        }\n-        if let Some(stdout) = stdout {\n-            self.write_message(&format!(r#\", \"stdout\": \"{}\"\"#, EscapedString(stdout)))?;\n-        }\n-        if let Some(extra) = extra {\n-            self.write_message(&format!(r#\", {extra}\"#))?;\n-        }\n-        self.writeln_message(\" }\")\n+        let name = EscapedString(name);\n+        let exec_time_json = if let Some(exec_time) = exec_time {\n+            format!(r#\", \"exec_time\": {}\"#, exec_time.0.as_secs_f64())\n+        } else {\n+            String::from(\"\")\n+        };\n+        let stdout_json = if let Some(stdout) = stdout {\n+            format!(r#\", \"stdout\": \"{}\"\"#, EscapedString(stdout))\n+        } else {\n+            String::from(\"\")\n+        };\n+        let extra_json =\n+            if let Some(extra) = extra { format!(r#\", {extra}\"#) } else { String::from(\"\") };\n+        let newline = \"\\n\";\n+\n+        self.writeln_message(&format!(\n+                r#\"{{ \"type\": \"{ty}\", \"name\": \"{name}\", \"event\": \"{event}\"{exec_time_json}{stdout_json}{extra_json} }}{newline}\"#))\n     }\n }\n \n impl<T: Write> OutputFormatter for JsonFormatter<T> {\n     fn write_discovery_start(&mut self) -> io::Result<()> {\n-        self.writeln_message(&format!(r#\"{{ \"type\": \"suite\", \"event\": \"discovery\" }}\"#))\n+        self.writeln_message(concat!(r#\"{ \"type\": \"suite\", \"event\": \"discovery\" }\"#, \"\\n\"))\n     }\n \n     fn write_test_discovered(&mut self, desc: &TestDesc, test_type: &str) -> io::Result<()> {\n@@ -77,21 +74,24 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n             ..\n         } = desc;\n \n+        let name = EscapedString(name.as_slice());\n+        let ignore_message = ignore_message.unwrap_or(\"\");\n+        let source_path = EscapedString(source_file);\n+        let newline = \"\\n\";\n+\n         self.writeln_message(&format!(\n-            r#\"{{ \"type\": \"{test_type}\", \"event\": \"discovered\", \"name\": \"{}\", \"ignore\": {ignore}, \"ignore_message\": \"{}\", \"source_path\": \"{}\", \"start_line\": {start_line}, \"start_col\": {start_col}, \"end_line\": {end_line}, \"end_col\": {end_col} }}\"#,\n-            EscapedString(name.as_slice()),\n-            ignore_message.unwrap_or(\"\"),\n-            EscapedString(source_file),\n+            r#\"{{ \"type\": \"{test_type}\", \"event\": \"discovered\", \"name\": \"{name}\", \"ignore\": {ignore}, \"ignore_message\": \"{ignore_message}\", \"source_path\": \"{source_path}\", \"start_line\": {start_line}, \"start_col\": {start_col}, \"end_line\": {end_line}, \"end_col\": {end_col} }}{newline}\"#\n         ))\n     }\n \n     fn write_discovery_finish(&mut self, state: &ConsoleTestDiscoveryState) -> io::Result<()> {\n         let ConsoleTestDiscoveryState { tests, benchmarks, ignored, .. } = state;\n \n         let total = tests + benchmarks;\n+        let newline = \"\\n\";\n         self.writeln_message(&format!(\n-            r#\"{{ \"type\": \"suite\", \"event\": \"completed\", \"tests\": {tests}, \"benchmarks\": {benchmarks}, \"total\": {total}, \"ignored\": {ignored} }}\"#\n-        ))\n+            r#\"{{ \"type\": \"suite\", \"event\": \"completed\", \"tests\": {tests}, \"benchmarks\": {benchmarks}, \"total\": {total}, \"ignored\": {ignored} }}{newline}\"#\n+            ))\n     }\n \n     fn write_run_start(&mut self, test_count: usize, shuffle_seed: Option<u64>) -> io::Result<()> {\n@@ -100,15 +100,17 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n         } else {\n             String::new()\n         };\n+        let newline = \"\\n\";\n         self.writeln_message(&format!(\n-            r#\"{{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": {test_count}{shuffle_seed_json} }}\"#\n-        ))\n+            r#\"{{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": {test_count}{shuffle_seed_json} }}{newline}\"#\n+            ))\n     }\n \n     fn write_test_start(&mut self, desc: &TestDesc) -> io::Result<()> {\n+        let name = EscapedString(desc.name.as_slice());\n+        let newline = \"\\n\";\n         self.writeln_message(&format!(\n-            r#\"{{ \"type\": \"test\", \"event\": \"started\", \"name\": \"{}\" }}\"#,\n-            EscapedString(desc.name.as_slice())\n+            r#\"{{ \"type\": \"test\", \"event\": \"started\", \"name\": \"{name}\" }}{newline}\"#\n         ))\n     }\n \n@@ -173,53 +175,43 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n                 } else {\n                     format!(r#\", \"mib_per_second\": {}\"#, bs.mb_s)\n                 };\n+                let name = EscapedString(desc.name.as_slice());\n \n-                let line = format!(\n+                self.writeln_message(&format!(\n                     \"{{ \\\"type\\\": \\\"bench\\\", \\\n-                     \\\"name\\\": \\\"{}\\\", \\\n-                     \\\"median\\\": {}, \\\n-                     \\\"deviation\\\": {}{} }}\",\n-                    EscapedString(desc.name.as_slice()),\n-                    median,\n-                    deviation,\n-                    mbps\n-                );\n-\n-                self.writeln_message(&line)\n+                     \\\"name\\\": \\\"{name}\\\", \\\n+                     \\\"median\\\": {median}, \\\n+                     \\\"deviation\\\": {deviation}{mbps} }}\\n\",\n+                ))\n             }\n         }\n     }\n \n     fn write_timeout(&mut self, desc: &TestDesc) -> io::Result<()> {\n+        let name = EscapedString(desc.name.as_slice());\n+        let newline = \"\\n\";\n         self.writeln_message(&format!(\n-            r#\"{{ \"type\": \"test\", \"event\": \"timeout\", \"name\": \"{}\" }}\"#,\n-            EscapedString(desc.name.as_slice())\n+            r#\"{{ \"type\": \"test\", \"event\": \"timeout\", \"name\": \"{name}\" }}{newline}\"#,\n         ))\n     }\n \n     fn write_run_finish(&mut self, state: &ConsoleTestState) -> io::Result<bool> {\n-        self.write_message(&format!(\n-            \"{{ \\\"type\\\": \\\"suite\\\", \\\n-             \\\"event\\\": \\\"{}\\\", \\\n-             \\\"passed\\\": {}, \\\n-             \\\"failed\\\": {}, \\\n-             \\\"ignored\\\": {}, \\\n-             \\\"measured\\\": {}, \\\n-             \\\"filtered_out\\\": {}\",\n-            if state.failed == 0 { \"ok\" } else { \"failed\" },\n-            state.passed,\n-            state.failed,\n-            state.ignored,\n-            state.measured,\n-            state.filtered_out,\n-        ))?;\n-\n-        if let Some(ref exec_time) = state.exec_time {\n-            let time_str = format!(\", \\\"exec_time\\\": {}\", exec_time.0.as_secs_f64());\n-            self.write_message(&time_str)?;\n-        }\n+        let event = if state.failed == 0 { \"ok\" } else { \"failed\" };\n+        let passed = state.passed;\n+        let failed = state.failed;\n+        let ignored = state.ignored;\n+        let measured = state.measured;\n+        let filtered_out = state.filtered_out;\n+        let exec_time_json = if let Some(ref exec_time) = state.exec_time {\n+            format!(r#\", \"exec_time\": {}\"#, exec_time.0.as_secs_f64())\n+        } else {\n+            String::from(\"\")\n+        };\n+        let newline = \"\\n\";\n \n-        self.writeln_message(\" }\")?;\n+        self.writeln_message(&format!(\n+            r#\"{{ \"type\": \"suite\", \"event\": \"{event}\", \"passed\": {passed}, \"failed\": {failed}, \"ignored\": {ignored}, \"measured\": {measured}, \"filtered_out\": {filtered_out}{exec_time_json} }}{newline}\"#\n+        ))?;\n \n         Ok(state.failed == 0)\n     }"}, {"sha": "5898a21d61350f9126fe66368c975544db9187d5", "filename": "src/ci/docker/README.md", "status": "modified", "additions": 66, "deletions": 43, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2FREADME.md?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -83,12 +83,12 @@ To run the image,\n A number of these images take quite a long time to compile as they're building\n whole gcc toolchains to do cross builds with. Much of this is relatively\n self-explanatory but some images use [crosstool-ng] which isn't quite as self\n-explanatory. Below is a description of where these `*.config` files come form,\n+explanatory. Below is a description of where these `*.defconfig` files come form,\n how to generate them, and how the existing ones were generated.\n \n [crosstool-ng]: https://github.com/crosstool-ng/crosstool-ng\n \n-### Generating a `.config` file\n+### Generating a `.defconfig` file\n \n **NOTE:** Existing Dockerfiles can also be a good guide for the process and order\n of script execution.\n@@ -100,14 +100,14 @@ next two steps.\n   these steps are outside the container:\n \n ```\n-# Note: We use ubuntu:16.04 because that's the \"base\" of linux-cross Docker\n+# Note: We use ubuntu:22.04 because that's the \"base\" of linux-cross Docker\n # image, or simply run ./src/ci/docker/run.sh once, which will download the correct\n # one and you can check it out with `docker images`\n-$ docker run -it ubuntu:16.04 bash\n+$ docker run -it ubuntu:22.04 bash\n # in another terminal:\n $ docker ps\n CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n-cfbec05ed730        ubuntu:16.04        \"bash\"              16 seconds ago      Up 15 seconds                           drunk_murdock\n+cfbec05ed730        ubuntu:22.04        \"bash\"              16 seconds ago      Up 15 seconds                           drunk_murdock\n $ docker cp src/ci/docker/scripts drunk_murdock:/tmp/\n ```\n \n@@ -127,7 +127,7 @@ $ bash ./crosstool-ng.sh\n   present. Otherwise one can use the TUI to load any config-file.\n \n ```\n-$ docker cp arm-linux-gnueabi.config drunk_murdock:/tmp/.config\n+$ docker cp arm-linux-gnueabi.defconfig drunk_murdock:/tmp/.config\n ```\n \n - Now, inside the container run the following command to configure the\n@@ -136,66 +136,73 @@ $ docker cp arm-linux-gnueabi.config drunk_murdock:/tmp/.config\n \n ```\n $ cd /tmp/\n+$ ct-ng olddefconfig\n $ ct-ng menuconfig\n+$ ct-ng savedefconfig\n ```\n \n-- Finally, we retrieve the `.config` file from the container and give it a\n+- Finally, we retrieve the `defconfig` file from the container and give it a\n   meaningful name. This is done outside the container.\n \n ```\n-$ docker cp drunk_murdock:/tmp/.config arm-linux-gnueabi.config\n+$ docker cp drunk_murdock:/tmp/defconfig arm-linux-gnueabi.defconfig\n ```\n \n - Now you can shutdown the container or repeat the two last steps to generate a\n-  new `.config` file.\n+  new `.defconfig` file.\n \n ### Toolchain configuration\n \n Changes on top of the default toolchain configuration used to generate the\n-`.config` files in this directory. The changes are formatted as follows:\n+`.defconfig` files in this directory. The changes are formatted as follows:\n \n ```\n $category > $option = $value -- $comment\n ```\n \n-### `arm-linux-gnueabi.config`\n+### `arm-linux-gnueabi.defconfig`\n \n For targets: `arm-unknown-linux-gnueabi`\n \n - Path and misc options > Prefix directory = /x-tools/${CT\\_TARGET}\n-- Path and misc options > Patches origin = Bundled only\n+- Path and misc options > Use a mirror = ENABLE\n+- Path and misc options > Base URL = https://ci-mirrors.rust-lang.org/rustc\n - Target options > Target Architecture = arm\n - Target options > Architecture level = armv6 -- (+)\n - Target options > Floating point = software (no FPU) -- (\\*)\n - Operating System > Target OS = linux\n - Operating System > Linux kernel version = 3.2.101\n+- Binary utilities > Version of binutils = 2.32\n - C-library > glibc version = 2.17.0\n-- C compiler > gcc version = 8.3.0\n+- C compiler > gcc version = 8.5.0\n - C compiler > C++ = ENABLE -- to cross compile LLVM\n \n-### `arm-linux-gnueabihf.config`\n+### `arm-linux-gnueabihf.defconfig`\n \n For targets: `arm-unknown-linux-gnueabihf`\n \n - Path and misc options > Prefix directory = /x-tools/${CT\\_TARGET}\n-- Path and misc options > Patches origin = Bundled only\n+- Path and misc options > Use a mirror = ENABLE\n+- Path and misc options > Base URL = https://ci-mirrors.rust-lang.org/rustc\n - Target options > Target Architecture = arm\n - Target options > Architecture level = armv6 -- (+)\n - Target options > Use specific FPU = vfp -- (+)\n - Target options > Floating point = hardware (FPU) -- (\\*)\n - Target options > Default instruction set mode = arm -- (+)\n - Operating System > Target OS = linux\n - Operating System > Linux kernel version = 3.2.101\n+- Binary utilities > Version of binutils = 2.32\n - C-library > glibc version = 2.17.0\n-- C compiler > gcc version = 8.3.0\n+- C compiler > gcc version = 8.5.0\n - C compiler > C++ = ENABLE -- to cross compile LLVM\n \n-### `armv7-linux-gnueabihf.config`\n+### `armv7-linux-gnueabihf.defconfig`\n \n For targets: `armv7-unknown-linux-gnueabihf`\n \n - Path and misc options > Prefix directory = /x-tools/${CT\\_TARGET}\n-- Path and misc options > Patches origin = Bundled only\n+- Path and misc options > Use a mirror = ENABLE\n+- Path and misc options > Base URL = https://ci-mirrors.rust-lang.org/rustc\n - Target options > Target Architecture = arm\n - Target options > Suffix to the arch-part = v7\n - Target options > Architecture level = armv7-a -- (+)\n@@ -204,8 +211,9 @@ For targets: `armv7-unknown-linux-gnueabihf`\n - Target options > Default instruction set mode = thumb -- (\\*)\n - Operating System > Target OS = linux\n - Operating System > Linux kernel version = 3.2.101\n+- Binary utilities > Version of binutils = 2.32\n - C-library > glibc version = 2.17.0\n-- C compiler > gcc version = 8.3.0\n+- C compiler > gcc version = 8.5.0\n - C compiler > C++ = ENABLE -- to cross compile LLVM\n \n (\\*) These options have been selected to match the configuration of the arm\n@@ -214,7 +222,7 @@ For targets: `armv7-unknown-linux-gnueabihf`\n     libraries like jemalloc. See the mk/cfg/arm(v7)-unknown-linux-gnueabi{,hf}.mk\n     file in Rust's source code.\n \n-### `aarch64-linux-gnu.config`\n+### `aarch64-linux-gnu.defconfig`\n \n For targets: `aarch64-unknown-linux-gnu`\n \n@@ -225,17 +233,16 @@ For targets: `aarch64-unknown-linux-gnu`\n - Target options > Bitness = 64-bit\n - Operating System > Target OS = linux\n - Operating System > Linux kernel version = 4.1.49\n-- Binary utilities > Version of binutils = 2.32\n+- Binary utilities > Version of binutils = 2.29.1\n - C-library > glibc version = 2.17 -- aarch64 support was introduced in this version\n-- C compiler > gcc version = 8.3.0\n+- C compiler > gcc version = 8.5.0\n - C compiler > C++ = ENABLE -- to cross compile LLVM\n \n-### `i586-linux-gnu.config`\n+### `i586-linux-gnu.defconfig`\n \n For targets: `i586-unknown-linux-gnu`\n \n - Path and misc options > Prefix directory = /x-tools/${CT\\_TARGET}\n-- Path and misc options > Patches origin = Bundled only\n - Target options > Target Architecture = x86\n - Target options > Architecture level = i586\n - Target options > Target CFLAGS = -Wa,-mrelax-relocations=no\n@@ -244,13 +251,13 @@ For targets: `i586-unknown-linux-gnu`\n - Binary utilities > Version of binutils = 2.32\n - Binary utilities > binutils extra config = --enable-compressed-debug-sections=none -- (\\*)\n - C-library > glibc version = 2.17.0\n-- C compiler > gcc version = 8.3.0\n+- C compiler > gcc version = 8.5.0\n - C compiler > C++ = ENABLE\n \n (\\*) Compressed debug is enabled by default for gas (assembly) on Linux/x86 targets,\n      but that makes our `compiler_builtins` incompatible with binutils < 2.32.\n \n-### `mips-linux-gnu.config`\n+### `mips-linux-gnu.defconfig`\n \n For targets: `mips-unknown-linux-gnu`\n \n@@ -265,14 +272,14 @@ For targets: `mips-unknown-linux-gnu`\n - Target options > Bitness = 32-bit\n - Target options > Architecture level = mips32r2\n - Operating System > Target OS = linux\n-- Operating System > Linux kernel version = 4.4.174\n+- Operating System > Linux kernel version = 4.4.302\n - Binary utilities > Version of binutils = 2.32\n - C-library > glibc version = 2.23\n-- C compiler > gcc version = 8.3.0\n+- C compiler > gcc version = 8.5.0\n - C compiler > gcc extra config = --with-fp-32=xx --with-odd-spreg-32=no\n - C compiler > C++ = ENABLE -- to cross compile LLVM\n \n-### `mipsel-linux-gnu.config`\n+### `mipsel-linux-gnu.defconfig`\n \n For targets: `mipsel-unknown-linux-gnu`\n \n@@ -287,14 +294,14 @@ For targets: `mipsel-unknown-linux-gnu`\n - Target options > Bitness = 32-bit\n - Target options > Architecture level = mips32r2\n - Operating System > Target OS = linux\n-- Operating System > Linux kernel version = 4.4.174\n+- Operating System > Linux kernel version = 4.4.302\n - Binary utilities > Version of binutils = 2.32\n - C-library > glibc version = 2.23\n-- C compiler > gcc version = 8.3.0\n+- C compiler > gcc version = 8.5.0\n - C compiler > gcc extra config = --with-fp-32=xx --with-odd-spreg-32=no\n - C compiler > C++ = ENABLE -- to cross compile LLVM\n \n-### `mips64-linux-gnu.config`\n+### `mips64-linux-gnu.defconfig`\n \n For targets: `mips64-unknown-linux-gnuabi64`\n \n@@ -309,13 +316,13 @@ For targets: `mips64-unknown-linux-gnuabi64`\n - Target options > Bitness = 64-bit\n - Target options > Architecture level = mips64r2\n - Operating System > Target OS = linux\n-- Operating System > Linux kernel version = 4.4.174\n+- Operating System > Linux kernel version = 4.4.302\n - Binary utilities > Version of binutils = 2.32\n - C-library > glibc version = 2.23\n-- C compiler > gcc version = 8.3.0\n+- C compiler > gcc version = 8.5.0\n - C compiler > C++ = ENABLE -- to cross compile LLVM\n \n-### `mips64el-linux-gnu.config`\n+### `mips64el-linux-gnu.defconfig`\n \n For targets: `mips64el-unknown-linux-gnuabi64`\n \n@@ -330,13 +337,13 @@ For targets: `mips64el-unknown-linux-gnuabi64`\n - Target options > Bitness = 64-bit\n - Target options > Architecture level = mips64r2\n - Operating System > Target OS = linux\n-- Operating System > Linux kernel version = 4.4.174\n+- Operating System > Linux kernel version = 4.4.302\n - Binary utilities > Version of binutils = 2.32\n - C-library > glibc version = 2.23\n-- C compiler > gcc version = 8.3.0\n+- C compiler > gcc version = 8.5.0\n - C compiler > C++ = ENABLE -- to cross compile LLVM\n \n-### `powerpc-linux-gnu.config`\n+### `powerpc-linux-gnu.defconfig`\n \n For targets: `powerpc-unknown-linux-gnu`\n \n@@ -349,10 +356,10 @@ For targets: `powerpc-unknown-linux-gnu`\n - Operating System > Linux kernel version = 3.2.101\n - Binary utilities > Version of binutils = 2.30\n - C-library > glibc version = 2.17 -- ~RHEL7 glibc\n-- C compiler > gcc version = 8.3.0\n+- C compiler > gcc version = 8.5.0\n - C compiler > C++ = ENABLE -- to cross compile LLVM\n \n-### `powerpc64-linux-gnu.config`\n+### `powerpc64-linux-gnu.defconfig`\n \n For targets: `powerpc64-unknown-linux-gnu`\n \n@@ -367,12 +374,28 @@ For targets: `powerpc64-unknown-linux-gnu`\n - Operating System > Linux kernel version = 3.2.101\n - Binary utilities > Version of binutils = 2.32\n - C-library > glibc version = 2.17 -- ~RHEL7 glibc\n-- C compiler > gcc version = 8.3.0\n+- C compiler > gcc version = 8.5.0\n - C compiler > C++ = ENABLE -- to cross compile LLVM\n \n (+) These CPU options match the configuration of the toolchains in RHEL6.\n \n-### `s390x-linux-gnu.config`\n+### `riscv64-unknown-linux-gnu.defconfig`\n+\n+For targets: `riscv64-unknown-linux-gnu`\n+\n+- Path and misc options > Prefix directory = /x-tools/${CT\\_TARGET}\n+- Path and misc options > Use a mirror = ENABLE\n+- Path and misc options > Base URL = https://ci-mirrors.rust-lang.org/rustc\n+- Target options > Target Architecture = riscv\n+- Target options > Bitness = 64-bit\n+- Operating System > Target OS = linux\n+- Operating System > Linux kernel version = 4.20.17\n+- Binary utilities > Version of binutils = 2.32\n+- C-library > glibc version = 2.29\n+- C compiler > gcc version = 8.5.0\n+- C compiler > C++ = ENABLE -- to cross compile LLVM\n+\n+### `s390x-linux-gnu.defconfig`\n \n For targets: `s390x-unknown-linux-gnu`\n \n@@ -385,6 +408,6 @@ For targets: `s390x-unknown-linux-gnu`\n - Operating System > Linux kernel version = 3.2.101\n - Binary utilities > Version of binutils = 2.32\n - C-library > glibc version = 2.17 -- ~RHEL7 glibc\n-- C compiler > gcc version = 8.3.0\n+- C compiler > gcc version = 8.5.0\n - C compiler > gcc extra config = --with-arch=z10 -- LLVM's minimum support\n - C compiler > C++ = ENABLE -- to cross compile LLVM"}, {"sha": "18972387e34d776e381eaa81eab833117e7f6a66", "filename": "src/ci/docker/host-x86_64/dist-aarch64-linux/Dockerfile", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2FDockerfile?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1,20 +1,18 @@\n-FROM ubuntu:20.04\n+FROM ubuntu:22.04\n \n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/crosstool-ng-1.24.sh /scripts/\n-RUN sh /scripts/crosstool-ng-1.24.sh\n+COPY scripts/crosstool-ng.sh /scripts/\n+RUN sh /scripts/crosstool-ng.sh\n \n COPY scripts/rustbuild-setup.sh /scripts/\n RUN sh /scripts/rustbuild-setup.sh\n-USER rustbuild\n WORKDIR /tmp\n \n-COPY host-x86_64/dist-aarch64-linux/aarch64-linux-gnu.config host-x86_64/dist-aarch64-linux/build-toolchains.sh /tmp/\n-RUN ./build-toolchains.sh\n-\n-USER root\n+COPY scripts/crosstool-ng-build.sh /scripts/\n+COPY host-x86_64/dist-aarch64-linux/aarch64-linux-gnu.defconfig /tmp/crosstool.defconfig\n+RUN /scripts/crosstool-ng-build.sh\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "4561e2a1ec39240d3a2bcd7d623f8ea85e048ceb", "filename": "src/ci/docker/host-x86_64/dist-aarch64-linux/aarch64-linux-gnu.config", "status": "removed", "additions": 0, "deletions": 754, "changes": 754, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2Faarch64-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2Faarch64-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2Faarch64-linux-gnu.config?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,754 +0,0 @@\n-#\n-# Automatically generated file; DO NOT EDIT.\n-# crosstool-NG  Configuration\n-#\n-CT_CONFIGURE_has_static_link=y\n-CT_CONFIGURE_has_cxx11=y\n-CT_CONFIGURE_has_wget=y\n-CT_CONFIGURE_has_curl=y\n-CT_CONFIGURE_has_make_3_81_or_newer=y\n-CT_CONFIGURE_has_make_4_0_or_newer=y\n-CT_CONFIGURE_has_libtool_2_4_or_newer=y\n-CT_CONFIGURE_has_libtoolize_2_4_or_newer=y\n-CT_CONFIGURE_has_autoconf_2_65_or_newer=y\n-CT_CONFIGURE_has_autoreconf_2_65_or_newer=y\n-CT_CONFIGURE_has_automake_1_15_or_newer=y\n-CT_CONFIGURE_has_gnu_m4_1_4_12_or_newer=y\n-CT_CONFIGURE_has_python_3_4_or_newer=y\n-CT_CONFIGURE_has_bison_2_7_or_newer=y\n-CT_CONFIGURE_has_python=y\n-CT_CONFIGURE_has_git=y\n-CT_CONFIGURE_has_md5sum=y\n-CT_CONFIGURE_has_sha1sum=y\n-CT_CONFIGURE_has_sha256sum=y\n-CT_CONFIGURE_has_sha512sum=y\n-CT_CONFIGURE_has_install_with_strip_program=y\n-CT_CONFIG_VERSION_CURRENT=\"3\"\n-CT_CONFIG_VERSION=\"3\"\n-CT_MODULES=y\n-\n-#\n-# Paths and misc options\n-#\n-\n-#\n-# crosstool-NG behavior\n-#\n-# CT_OBSOLETE is not set\n-# CT_EXPERIMENTAL is not set\n-# CT_DEBUG_CT is not set\n-\n-#\n-# Paths\n-#\n-CT_LOCAL_TARBALLS_DIR=\"${HOME}/src\"\n-CT_SAVE_TARBALLS=y\n-# CT_TARBALLS_BUILDROOT_LAYOUT is not set\n-CT_WORK_DIR=\"${CT_TOP_DIR}/.build\"\n-CT_BUILD_TOP_DIR=\"${CT_WORK_DIR:-${CT_TOP_DIR}/.build}/${CT_HOST:+HOST-${CT_HOST}/}${CT_TARGET}\"\n-CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n-CT_RM_RF_PREFIX_DIR=y\n-CT_REMOVE_DOCS=y\n-CT_INSTALL_LICENSES=y\n-CT_PREFIX_DIR_RO=y\n-CT_STRIP_HOST_TOOLCHAIN_EXECUTABLES=y\n-# CT_STRIP_TARGET_TOOLCHAIN_EXECUTABLES is not set\n-\n-#\n-# Downloading\n-#\n-CT_DOWNLOAD_AGENT_WGET=y\n-# CT_DOWNLOAD_AGENT_CURL is not set\n-# CT_DOWNLOAD_AGENT_NONE is not set\n-# CT_FORBID_DOWNLOAD is not set\n-# CT_FORCE_DOWNLOAD is not set\n-CT_CONNECT_TIMEOUT=10\n-CT_DOWNLOAD_WGET_OPTIONS=\"--passive-ftp --tries=3 -nc --progress=dot:binary\"\n-# CT_ONLY_DOWNLOAD is not set\n-CT_USE_MIRROR=y\n-# CT_FORCE_MIRROR is not set\n-CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n-CT_VERIFY_DOWNLOAD_DIGEST=y\n-CT_VERIFY_DOWNLOAD_DIGEST_SHA512=y\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA256 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA1 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_MD5 is not set\n-CT_VERIFY_DOWNLOAD_DIGEST_ALG=\"sha512\"\n-# CT_VERIFY_DOWNLOAD_SIGNATURE is not set\n-\n-#\n-# Extracting\n-#\n-# CT_FORCE_EXTRACT is not set\n-CT_OVERRIDE_CONFIG_GUESS_SUB=y\n-# CT_ONLY_EXTRACT is not set\n-CT_PATCH_BUNDLED=y\n-# CT_PATCH_BUNDLED_LOCAL is not set\n-CT_PATCH_ORDER=\"bundled\"\n-\n-#\n-# Build behavior\n-#\n-CT_PARALLEL_JOBS=0\n-CT_LOAD=\"\"\n-CT_USE_PIPES=y\n-CT_EXTRA_CFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_LDFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_CFLAGS_FOR_HOST=\"\"\n-CT_EXTRA_LDFLAGS_FOR_HOST=\"\"\n-# CT_CONFIG_SHELL_SH is not set\n-# CT_CONFIG_SHELL_ASH is not set\n-CT_CONFIG_SHELL_BASH=y\n-# CT_CONFIG_SHELL_CUSTOM is not set\n-CT_CONFIG_SHELL=\"${bash}\"\n-\n-#\n-# Logging\n-#\n-# CT_LOG_ERROR is not set\n-# CT_LOG_WARN is not set\n-# CT_LOG_INFO is not set\n-CT_LOG_EXTRA=y\n-# CT_LOG_ALL is not set\n-# CT_LOG_DEBUG is not set\n-CT_LOG_LEVEL_MAX=\"EXTRA\"\n-# CT_LOG_SEE_TOOLS_WARN is not set\n-CT_LOG_PROGRESS_BAR=y\n-CT_LOG_TO_FILE=y\n-CT_LOG_FILE_COMPRESS=y\n-\n-#\n-# Target options\n-#\n-# CT_ARCH_ALPHA is not set\n-# CT_ARCH_ARC is not set\n-CT_ARCH_ARM=y\n-# CT_ARCH_AVR is not set\n-# CT_ARCH_M68K is not set\n-# CT_ARCH_MIPS is not set\n-# CT_ARCH_NIOS2 is not set\n-# CT_ARCH_POWERPC is not set\n-# CT_ARCH_S390 is not set\n-# CT_ARCH_SH is not set\n-# CT_ARCH_SPARC is not set\n-# CT_ARCH_X86 is not set\n-# CT_ARCH_XTENSA is not set\n-CT_ARCH=\"arm\"\n-CT_ARCH_CHOICE_KSYM=\"ARM\"\n-# CT_ARCH_ALPHA_EV4 is not set\n-# CT_ARCH_ALPHA_EV45 is not set\n-# CT_ARCH_ALPHA_EV5 is not set\n-# CT_ARCH_ALPHA_EV56 is not set\n-# CT_ARCH_ALPHA_EV6 is not set\n-# CT_ARCH_ALPHA_EV67 is not set\n-CT_ARCH_CPU=\"\"\n-CT_ARCH_TUNE=\"\"\n-CT_ARCH_ARM_SHOW=y\n-\n-#\n-# Options for arm\n-#\n-CT_ARCH_ARM_PKG_KSYM=\"\"\n-# CT_ARCH_ARM_MODE_ARM is not set\n-# CT_ARCH_ARM_MODE_THUMB is not set\n-CT_ALL_ARCH_CHOICES=\"ALPHA ARC ARM AVR M68K MICROBLAZE MIPS MOXIE MSP430 NIOS2 POWERPC RISCV S390 SH SPARC X86 XTENSA\"\n-CT_ARCH_SUFFIX=\"\"\n-# CT_OMIT_TARGET_VENDOR is not set\n-\n-#\n-# Generic target options\n-#\n-# CT_MULTILIB is not set\n-CT_DEMULTILIB=y\n-CT_ARCH_SUPPORTS_BOTH_MMU=y\n-CT_ARCH_DEFAULT_HAS_MMU=y\n-CT_ARCH_USE_MMU=y\n-CT_ARCH_SUPPORTS_FLAT_FORMAT=y\n-CT_ARCH_SUPPORTS_EITHER_ENDIAN=y\n-CT_ARCH_DEFAULT_LE=y\n-# CT_ARCH_BE is not set\n-CT_ARCH_LE=y\n-CT_ARCH_ENDIAN=\"little\"\n-CT_ARCH_SUPPORTS_32=y\n-CT_ARCH_SUPPORTS_64=y\n-CT_ARCH_DEFAULT_32=y\n-CT_ARCH_BITNESS=64\n-# CT_ARCH_32 is not set\n-CT_ARCH_64=y\n-\n-#\n-# Target optimisations\n-#\n-CT_ARCH_SUPPORTS_WITH_ARCH=y\n-CT_ARCH_SUPPORTS_WITH_CPU=y\n-CT_ARCH_SUPPORTS_WITH_TUNE=y\n-CT_ARCH_EXCLUSIVE_WITH_CPU=y\n-CT_ARCH_ARCH=\"\"\n-# CT_ARCH_FLOAT_AUTO is not set\n-# CT_ARCH_FLOAT_HW is not set\n-# CT_ARCH_FLOAT_SOFTFP is not set\n-# CT_ARCH_FLOAT_SW is not set\n-CT_TARGET_CFLAGS=\"\"\n-CT_TARGET_LDFLAGS=\"\"\n-\n-#\n-# Toolchain options\n-#\n-\n-#\n-# General toolchain options\n-#\n-CT_FORCE_SYSROOT=y\n-CT_USE_SYSROOT=y\n-CT_SYSROOT_NAME=\"sysroot\"\n-CT_SYSROOT_DIR_PREFIX=\"\"\n-CT_WANTS_STATIC_LINK=y\n-CT_WANTS_STATIC_LINK_CXX=y\n-# CT_STATIC_TOOLCHAIN is not set\n-CT_SHOW_CT_VERSION=y\n-CT_TOOLCHAIN_PKGVERSION=\"\"\n-CT_TOOLCHAIN_BUGURL=\"\"\n-\n-#\n-# Tuple completion and aliasing\n-#\n-CT_TARGET_VENDOR=\"unknown\"\n-CT_TARGET_ALIAS_SED_EXPR=\"\"\n-CT_TARGET_ALIAS=\"\"\n-\n-#\n-# Toolchain type\n-#\n-CT_CROSS=y\n-# CT_CANADIAN is not set\n-CT_TOOLCHAIN_TYPE=\"cross\"\n-\n-#\n-# Build system\n-#\n-CT_BUILD=\"\"\n-CT_BUILD_PREFIX=\"\"\n-CT_BUILD_SUFFIX=\"\"\n-\n-#\n-# Misc options\n-#\n-# CT_TOOLCHAIN_ENABLE_NLS is not set\n-\n-#\n-# Operating System\n-#\n-CT_KERNEL_SUPPORTS_SHARED_LIBS=y\n-# CT_KERNEL_BARE_METAL is not set\n-CT_KERNEL_LINUX=y\n-CT_KERNEL=\"linux\"\n-CT_KERNEL_CHOICE_KSYM=\"LINUX\"\n-CT_KERNEL_LINUX_SHOW=y\n-\n-#\n-# Options for linux\n-#\n-CT_KERNEL_LINUX_PKG_KSYM=\"LINUX\"\n-CT_LINUX_DIR_NAME=\"linux\"\n-CT_LINUX_PKG_NAME=\"linux\"\n-CT_LINUX_SRC_RELEASE=y\n-CT_LINUX_PATCH_ORDER=\"global\"\n-# CT_LINUX_V_4_20 is not set\n-# CT_LINUX_V_4_19 is not set\n-# CT_LINUX_V_4_18 is not set\n-# CT_LINUX_V_4_17 is not set\n-# CT_LINUX_V_4_16 is not set\n-# CT_LINUX_V_4_15 is not set\n-# CT_LINUX_V_4_14 is not set\n-# CT_LINUX_V_4_13 is not set\n-# CT_LINUX_V_4_12 is not set\n-# CT_LINUX_V_4_11 is not set\n-# CT_LINUX_V_4_10 is not set\n-# CT_LINUX_V_4_9 is not set\n-# CT_LINUX_V_4_4 is not set\n-CT_LINUX_V_4_1=y\n-# CT_LINUX_V_3_16 is not set\n-# CT_LINUX_V_3_13 is not set\n-# CT_LINUX_V_3_12 is not set\n-# CT_LINUX_V_3_10 is not set\n-# CT_LINUX_NO_VERSIONS is not set\n-CT_LINUX_VERSION=\"4.1.49\"\n-CT_LINUX_MIRRORS=\"$(CT_Mirrors kernel.org linux ${CT_LINUX_VERSION})\"\n-CT_LINUX_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_LINUX_SIGNATURE_FORMAT=\"unpacked/.sign\"\n-CT_LINUX_4_8_or_older=y\n-CT_LINUX_older_than_4_8=y\n-CT_LINUX_later_than_3_7=y\n-CT_LINUX_3_7_or_later=y\n-CT_LINUX_REQUIRE_3_7_or_later=y\n-CT_LINUX_later_than_3_2=y\n-CT_LINUX_3_2_or_later=y\n-CT_KERNEL_LINUX_VERBOSITY_0=y\n-# CT_KERNEL_LINUX_VERBOSITY_1 is not set\n-# CT_KERNEL_LINUX_VERBOSITY_2 is not set\n-CT_KERNEL_LINUX_VERBOSE_LEVEL=0\n-CT_KERNEL_LINUX_INSTALL_CHECK=y\n-CT_ALL_KERNEL_CHOICES=\"BARE_METAL LINUX WINDOWS\"\n-\n-#\n-# Common kernel options\n-#\n-CT_SHARED_LIBS=y\n-\n-#\n-# Binary utilities\n-#\n-CT_ARCH_BINFMT_ELF=y\n-CT_BINUTILS_BINUTILS=y\n-CT_BINUTILS=\"binutils\"\n-CT_BINUTILS_CHOICE_KSYM=\"BINUTILS\"\n-CT_BINUTILS_BINUTILS_SHOW=y\n-\n-#\n-# Options for binutils\n-#\n-CT_BINUTILS_BINUTILS_PKG_KSYM=\"BINUTILS\"\n-CT_BINUTILS_DIR_NAME=\"binutils\"\n-CT_BINUTILS_USE_GNU=y\n-CT_BINUTILS_USE=\"BINUTILS\"\n-CT_BINUTILS_PKG_NAME=\"binutils\"\n-CT_BINUTILS_SRC_RELEASE=y\n-CT_BINUTILS_PATCH_ORDER=\"global\"\n-# CT_BINUTILS_V_2_32 is not set\n-# CT_BINUTILS_V_2_31 is not set\n-# CT_BINUTILS_V_2_30 is not set\n-CT_BINUTILS_V_2_29=y\n-# CT_BINUTILS_V_2_28 is not set\n-# CT_BINUTILS_V_2_27 is not set\n-# CT_BINUTILS_V_2_26 is not set\n-# CT_BINUTILS_NO_VERSIONS is not set\n-CT_BINUTILS_VERSION=\"2.29.1\"\n-CT_BINUTILS_MIRRORS=\"$(CT_Mirrors GNU binutils) $(CT_Mirrors sourceware binutils/releases)\"\n-CT_BINUTILS_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_BINUTILS_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_BINUTILS_2_30_or_older=y\n-CT_BINUTILS_older_than_2_30=y\n-CT_BINUTILS_REQUIRE_older_than_2_30=y\n-CT_BINUTILS_later_than_2_27=y\n-CT_BINUTILS_2_27_or_later=y\n-CT_BINUTILS_later_than_2_25=y\n-CT_BINUTILS_2_25_or_later=y\n-CT_BINUTILS_later_than_2_23=y\n-CT_BINUTILS_2_23_or_later=y\n-\n-#\n-# GNU binutils\n-#\n-CT_BINUTILS_HAS_HASH_STYLE=y\n-CT_BINUTILS_HAS_GOLD=y\n-CT_BINUTILS_HAS_PLUGINS=y\n-CT_BINUTILS_HAS_PKGVERSION_BUGURL=y\n-CT_BINUTILS_GOLD_SUPPORTS_ARCH=y\n-CT_BINUTILS_GOLD_SUPPORT=y\n-CT_BINUTILS_FORCE_LD_BFD_DEFAULT=y\n-CT_BINUTILS_LINKER_LD=y\n-# CT_BINUTILS_LINKER_LD_GOLD is not set\n-CT_BINUTILS_LINKERS_LIST=\"ld\"\n-CT_BINUTILS_LINKER_DEFAULT=\"bfd\"\n-# CT_BINUTILS_PLUGINS is not set\n-CT_BINUTILS_RELRO=m\n-CT_BINUTILS_EXTRA_CONFIG_ARRAY=\"\"\n-# CT_BINUTILS_FOR_TARGET is not set\n-CT_ALL_BINUTILS_CHOICES=\"BINUTILS\"\n-\n-#\n-# C-library\n-#\n-CT_LIBC_GLIBC=y\n-# CT_LIBC_NEWLIB is not set\n-# CT_LIBC_NONE is not set\n-# CT_LIBC_UCLIBC is not set\n-CT_LIBC=\"glibc\"\n-CT_LIBC_CHOICE_KSYM=\"GLIBC\"\n-CT_THREADS=\"nptl\"\n-CT_LIBC_GLIBC_SHOW=y\n-\n-#\n-# Options for glibc\n-#\n-CT_LIBC_GLIBC_PKG_KSYM=\"GLIBC\"\n-CT_GLIBC_DIR_NAME=\"glibc\"\n-CT_GLIBC_USE_GNU=y\n-CT_GLIBC_USE=\"GLIBC\"\n-CT_GLIBC_PKG_NAME=\"glibc\"\n-CT_GLIBC_SRC_RELEASE=y\n-CT_GLIBC_PATCH_ORDER=\"global\"\n-# CT_GLIBC_V_2_29 is not set\n-# CT_GLIBC_V_2_28 is not set\n-# CT_GLIBC_V_2_27 is not set\n-# CT_GLIBC_V_2_26 is not set\n-# CT_GLIBC_V_2_25 is not set\n-# CT_GLIBC_V_2_24 is not set\n-# CT_GLIBC_V_2_23 is not set\n-# CT_GLIBC_V_2_19 is not set\n-CT_GLIBC_V_2_17=y\n-# CT_GLIBC_V_2_12_1 is not set\n-# CT_GLIBC_NO_VERSIONS is not set\n-CT_GLIBC_VERSION=\"2.17\"\n-CT_GLIBC_MIRRORS=\"$(CT_Mirrors GNU glibc)\"\n-CT_GLIBC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_GLIBC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GLIBC_2_29_or_older=y\n-CT_GLIBC_older_than_2_29=y\n-CT_GLIBC_2_27_or_older=y\n-CT_GLIBC_older_than_2_27=y\n-CT_GLIBC_2_26_or_older=y\n-CT_GLIBC_older_than_2_26=y\n-CT_GLIBC_2_25_or_older=y\n-CT_GLIBC_older_than_2_25=y\n-CT_GLIBC_2_24_or_older=y\n-CT_GLIBC_older_than_2_24=y\n-CT_GLIBC_2_23_or_older=y\n-CT_GLIBC_older_than_2_23=y\n-CT_GLIBC_2_20_or_older=y\n-CT_GLIBC_older_than_2_20=y\n-CT_GLIBC_2_17_or_later=y\n-CT_GLIBC_2_17_or_older=y\n-CT_GLIBC_later_than_2_14=y\n-CT_GLIBC_2_14_or_later=y\n-CT_GLIBC_DEP_KERNEL_HEADERS_VERSION=y\n-CT_GLIBC_DEP_BINUTILS=y\n-CT_GLIBC_DEP_GCC=y\n-CT_GLIBC_DEP_PYTHON=y\n-CT_GLIBC_HAS_NPTL_ADDON=y\n-CT_GLIBC_HAS_PORTS_ADDON=y\n-CT_GLIBC_HAS_LIBIDN_ADDON=y\n-CT_GLIBC_USE_PORTS_ADDON=y\n-CT_GLIBC_USE_NPTL_ADDON=y\n-# CT_GLIBC_USE_LIBIDN_ADDON is not set\n-CT_GLIBC_HAS_OBSOLETE_RPC=y\n-CT_GLIBC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_GLIBC_CONFIGPARMS=\"\"\n-CT_GLIBC_EXTRA_CFLAGS=\"\"\n-CT_GLIBC_ENABLE_OBSOLETE_RPC=y\n-# CT_GLIBC_DISABLE_VERSIONING is not set\n-CT_GLIBC_OLDEST_ABI=\"\"\n-CT_GLIBC_FORCE_UNWIND=y\n-# CT_GLIBC_LOCALES is not set\n-# CT_GLIBC_KERNEL_VERSION_NONE is not set\n-CT_GLIBC_KERNEL_VERSION_AS_HEADERS=y\n-# CT_GLIBC_KERNEL_VERSION_CHOSEN is not set\n-CT_GLIBC_MIN_KERNEL=\"4.1.49\"\n-# CT_GLIBC_SSP_DEFAULT is not set\n-# CT_GLIBC_SSP_NO is not set\n-# CT_GLIBC_SSP_YES is not set\n-# CT_GLIBC_SSP_ALL is not set\n-# CT_GLIBC_SSP_STRONG is not set\n-# CT_NEWLIB_USE_REDHAT is not set\n-CT_ALL_LIBC_CHOICES=\"AVR_LIBC BIONIC GLIBC MINGW_W64 MOXIEBOX MUSL NEWLIB NONE UCLIBC\"\n-CT_LIBC_SUPPORT_THREADS_ANY=y\n-CT_LIBC_SUPPORT_THREADS_NATIVE=y\n-\n-#\n-# Common C library options\n-#\n-CT_THREADS_NATIVE=y\n-# CT_CREATE_LDSO_CONF is not set\n-CT_LIBC_XLDD=y\n-\n-#\n-# C compiler\n-#\n-CT_CC_CORE_PASSES_NEEDED=y\n-CT_CC_CORE_PASS_1_NEEDED=y\n-CT_CC_CORE_PASS_2_NEEDED=y\n-CT_CC_SUPPORT_CXX=y\n-CT_CC_SUPPORT_FORTRAN=y\n-CT_CC_SUPPORT_ADA=y\n-CT_CC_SUPPORT_OBJC=y\n-CT_CC_SUPPORT_OBJCXX=y\n-CT_CC_SUPPORT_GOLANG=y\n-CT_CC_GCC=y\n-CT_CC=\"gcc\"\n-CT_CC_CHOICE_KSYM=\"GCC\"\n-CT_CC_GCC_SHOW=y\n-\n-#\n-# Options for gcc\n-#\n-CT_CC_GCC_PKG_KSYM=\"GCC\"\n-CT_GCC_DIR_NAME=\"gcc\"\n-CT_GCC_USE_GNU=y\n-CT_GCC_USE=\"GCC\"\n-CT_GCC_PKG_NAME=\"gcc\"\n-CT_GCC_SRC_RELEASE=y\n-CT_GCC_PATCH_ORDER=\"global\"\n-CT_GCC_V_8=y\n-# CT_GCC_V_7 is not set\n-# CT_GCC_V_6 is not set\n-# CT_GCC_V_5 is not set\n-# CT_GCC_V_4_9 is not set\n-# CT_GCC_NO_VERSIONS is not set\n-CT_GCC_VERSION=\"8.3.0\"\n-CT_GCC_MIRRORS=\"$(CT_Mirrors GNU gcc/gcc-${CT_GCC_VERSION}) $(CT_Mirrors sourceware gcc/releases/gcc-${CT_GCC_VERSION})\"\n-CT_GCC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_GCC_SIGNATURE_FORMAT=\"\"\n-CT_GCC_later_than_7=y\n-CT_GCC_7_or_later=y\n-CT_GCC_later_than_6=y\n-CT_GCC_6_or_later=y\n-CT_GCC_later_than_5=y\n-CT_GCC_5_or_later=y\n-CT_GCC_later_than_4_9=y\n-CT_GCC_4_9_or_later=y\n-CT_GCC_later_than_4_8=y\n-CT_GCC_4_8_or_later=y\n-CT_CC_GCC_HAS_LIBMPX=y\n-CT_CC_GCC_ENABLE_CXX_FLAGS=\"\"\n-CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_STATIC_LIBSTDCXX=y\n-# CT_CC_GCC_SYSTEM_ZLIB is not set\n-CT_CC_GCC_CONFIG_TLS=m\n-\n-#\n-# Optimisation features\n-#\n-CT_CC_GCC_USE_GRAPHITE=y\n-CT_CC_GCC_USE_LTO=y\n-\n-#\n-# Settings for libraries running on target\n-#\n-CT_CC_GCC_ENABLE_TARGET_OPTSPACE=y\n-# CT_CC_GCC_LIBMUDFLAP is not set\n-# CT_CC_GCC_LIBGOMP is not set\n-# CT_CC_GCC_LIBSSP is not set\n-# CT_CC_GCC_LIBQUADMATH is not set\n-# CT_CC_GCC_LIBSANITIZER is not set\n-\n-#\n-# Misc. obscure options.\n-#\n-CT_CC_CXA_ATEXIT=y\n-# CT_CC_GCC_DISABLE_PCH is not set\n-CT_CC_GCC_SJLJ_EXCEPTIONS=m\n-CT_CC_GCC_LDBL_128=m\n-# CT_CC_GCC_BUILD_ID is not set\n-CT_CC_GCC_LNK_HASH_STYLE_DEFAULT=y\n-# CT_CC_GCC_LNK_HASH_STYLE_SYSV is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_GNU is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_BOTH is not set\n-CT_CC_GCC_LNK_HASH_STYLE=\"\"\n-CT_CC_GCC_DEC_FLOAT_AUTO=y\n-# CT_CC_GCC_DEC_FLOAT_BID is not set\n-# CT_CC_GCC_DEC_FLOAT_DPD is not set\n-# CT_CC_GCC_DEC_FLOATS_NO is not set\n-CT_ALL_CC_CHOICES=\"GCC\"\n-\n-#\n-# Additional supported languages:\n-#\n-CT_CC_LANG_CXX=y\n-# CT_CC_LANG_FORTRAN is not set\n-\n-#\n-# Debug facilities\n-#\n-# CT_DEBUG_DUMA is not set\n-# CT_DEBUG_GDB is not set\n-# CT_DEBUG_LTRACE is not set\n-# CT_DEBUG_STRACE is not set\n-CT_ALL_DEBUG_CHOICES=\"DUMA GDB LTRACE STRACE\"\n-\n-#\n-# Companion libraries\n-#\n-# CT_COMPLIBS_CHECK is not set\n-# CT_COMP_LIBS_CLOOG is not set\n-# CT_COMP_LIBS_EXPAT is not set\n-CT_COMP_LIBS_GETTEXT=y\n-CT_COMP_LIBS_GETTEXT_PKG_KSYM=\"GETTEXT\"\n-CT_GETTEXT_DIR_NAME=\"gettext\"\n-CT_GETTEXT_PKG_NAME=\"gettext\"\n-CT_GETTEXT_SRC_RELEASE=y\n-CT_GETTEXT_PATCH_ORDER=\"global\"\n-CT_GETTEXT_V_0_19_8_1=y\n-# CT_GETTEXT_NO_VERSIONS is not set\n-CT_GETTEXT_VERSION=\"0.19.8.1\"\n-CT_GETTEXT_MIRRORS=\"$(CT_Mirrors GNU gettext)\"\n-CT_GETTEXT_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.gz\"\n-CT_GETTEXT_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_GMP=y\n-CT_COMP_LIBS_GMP_PKG_KSYM=\"GMP\"\n-CT_GMP_DIR_NAME=\"gmp\"\n-CT_GMP_PKG_NAME=\"gmp\"\n-CT_GMP_SRC_RELEASE=y\n-CT_GMP_PATCH_ORDER=\"global\"\n-CT_GMP_V_6_1=y\n-# CT_GMP_NO_VERSIONS is not set\n-CT_GMP_VERSION=\"6.1.2\"\n-CT_GMP_MIRRORS=\"https://gmplib.org/download/gmp https://gmplib.org/download/gmp/archive $(CT_Mirrors GNU gmp)\"\n-CT_GMP_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.bz2\"\n-CT_GMP_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GMP_later_than_5_1_0=y\n-CT_GMP_5_1_0_or_later=y\n-CT_GMP_later_than_5_0_0=y\n-CT_GMP_5_0_0_or_later=y\n-CT_GMP_REQUIRE_5_0_0_or_later=y\n-CT_COMP_LIBS_ISL=y\n-CT_COMP_LIBS_ISL_PKG_KSYM=\"ISL\"\n-CT_ISL_DIR_NAME=\"isl\"\n-CT_ISL_PKG_NAME=\"isl\"\n-CT_ISL_SRC_RELEASE=y\n-CT_ISL_PATCH_ORDER=\"global\"\n-CT_ISL_V_0_20=y\n-# CT_ISL_V_0_19 is not set\n-# CT_ISL_V_0_18 is not set\n-# CT_ISL_V_0_17 is not set\n-# CT_ISL_V_0_16 is not set\n-# CT_ISL_V_0_15 is not set\n-# CT_ISL_NO_VERSIONS is not set\n-CT_ISL_VERSION=\"0.20\"\n-CT_ISL_MIRRORS=\"http://isl.gforge.inria.fr\"\n-CT_ISL_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_ISL_SIGNATURE_FORMAT=\"\"\n-CT_ISL_later_than_0_18=y\n-CT_ISL_0_18_or_later=y\n-CT_ISL_later_than_0_15=y\n-CT_ISL_0_15_or_later=y\n-CT_ISL_REQUIRE_0_15_or_later=y\n-CT_ISL_later_than_0_14=y\n-CT_ISL_0_14_or_later=y\n-CT_ISL_REQUIRE_0_14_or_later=y\n-CT_ISL_later_than_0_13=y\n-CT_ISL_0_13_or_later=y\n-CT_ISL_later_than_0_12=y\n-CT_ISL_0_12_or_later=y\n-CT_ISL_REQUIRE_0_12_or_later=y\n-# CT_COMP_LIBS_LIBELF is not set\n-CT_COMP_LIBS_LIBICONV=y\n-CT_COMP_LIBS_LIBICONV_PKG_KSYM=\"LIBICONV\"\n-CT_LIBICONV_DIR_NAME=\"libiconv\"\n-CT_LIBICONV_PKG_NAME=\"libiconv\"\n-CT_LIBICONV_SRC_RELEASE=y\n-CT_LIBICONV_PATCH_ORDER=\"global\"\n-CT_LIBICONV_V_1_15=y\n-# CT_LIBICONV_NO_VERSIONS is not set\n-CT_LIBICONV_VERSION=\"1.15\"\n-CT_LIBICONV_MIRRORS=\"$(CT_Mirrors GNU libiconv)\"\n-CT_LIBICONV_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_LIBICONV_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_MPC=y\n-CT_COMP_LIBS_MPC_PKG_KSYM=\"MPC\"\n-CT_MPC_DIR_NAME=\"mpc\"\n-CT_MPC_PKG_NAME=\"mpc\"\n-CT_MPC_SRC_RELEASE=y\n-CT_MPC_PATCH_ORDER=\"global\"\n-CT_MPC_V_1_1=y\n-# CT_MPC_V_1_0 is not set\n-# CT_MPC_NO_VERSIONS is not set\n-CT_MPC_VERSION=\"1.1.0\"\n-CT_MPC_MIRRORS=\"http://www.multiprecision.org/downloads $(CT_Mirrors GNU mpc)\"\n-CT_MPC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_MPC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_MPC_1_1_0_or_later=y\n-CT_MPC_1_1_0_or_older=y\n-CT_COMP_LIBS_MPFR=y\n-CT_COMP_LIBS_MPFR_PKG_KSYM=\"MPFR\"\n-CT_MPFR_DIR_NAME=\"mpfr\"\n-CT_MPFR_PKG_NAME=\"mpfr\"\n-CT_MPFR_SRC_RELEASE=y\n-CT_MPFR_PATCH_ORDER=\"global\"\n-CT_MPFR_V_4_0=y\n-# CT_MPFR_V_3_1 is not set\n-# CT_MPFR_NO_VERSIONS is not set\n-CT_MPFR_VERSION=\"4.0.2\"\n-CT_MPFR_MIRRORS=\"http://www.mpfr.org/mpfr-${CT_MPFR_VERSION} $(CT_Mirrors GNU mpfr)\"\n-CT_MPFR_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz .zip\"\n-CT_MPFR_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_MPFR_later_than_4_0_0=y\n-CT_MPFR_4_0_0_or_later=y\n-CT_MPFR_later_than_3_0_0=y\n-CT_MPFR_3_0_0_or_later=y\n-CT_MPFR_REQUIRE_3_0_0_or_later=y\n-CT_COMP_LIBS_NCURSES=y\n-CT_COMP_LIBS_NCURSES_PKG_KSYM=\"NCURSES\"\n-CT_NCURSES_DIR_NAME=\"ncurses\"\n-CT_NCURSES_PKG_NAME=\"ncurses\"\n-CT_NCURSES_SRC_RELEASE=y\n-CT_NCURSES_PATCH_ORDER=\"global\"\n-CT_NCURSES_V_6_1=y\n-# CT_NCURSES_V_6_0 is not set\n-# CT_NCURSES_NO_VERSIONS is not set\n-CT_NCURSES_VERSION=\"6.1\"\n-CT_NCURSES_MIRRORS=\"ftp://invisible-island.net/ncurses $(CT_Mirrors GNU ncurses)\"\n-CT_NCURSES_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_NCURSES_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_NCURSES_HOST_CONFIG_ARGS=\"\"\n-CT_NCURSES_HOST_DISABLE_DB=y\n-CT_NCURSES_HOST_FALLBACKS=\"linux,xterm,xterm-color,xterm-256color,vt100\"\n-CT_NCURSES_TARGET_CONFIG_ARGS=\"\"\n-# CT_NCURSES_TARGET_DISABLE_DB is not set\n-CT_NCURSES_TARGET_FALLBACKS=\"\"\n-CT_COMP_LIBS_ZLIB=y\n-CT_COMP_LIBS_ZLIB_PKG_KSYM=\"ZLIB\"\n-CT_ZLIB_DIR_NAME=\"zlib\"\n-CT_ZLIB_PKG_NAME=\"zlib\"\n-CT_ZLIB_SRC_RELEASE=y\n-CT_ZLIB_PATCH_ORDER=\"global\"\n-CT_ZLIB_V_1_2_11=y\n-# CT_ZLIB_NO_VERSIONS is not set\n-CT_ZLIB_VERSION=\"1.2.11\"\n-CT_ZLIB_MIRRORS=\"http://downloads.sourceforge.net/project/libpng/zlib/${CT_ZLIB_VERSION}\"\n-CT_ZLIB_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_ZLIB_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_ALL_COMP_LIBS_CHOICES=\"CLOOG EXPAT GETTEXT GMP ISL LIBELF LIBICONV MPC MPFR NCURSES ZLIB\"\n-CT_LIBICONV_NEEDED=y\n-CT_GETTEXT_NEEDED=y\n-CT_GMP_NEEDED=y\n-CT_MPFR_NEEDED=y\n-CT_ISL_NEEDED=y\n-CT_MPC_NEEDED=y\n-CT_NCURSES_NEEDED=y\n-CT_ZLIB_NEEDED=y\n-CT_LIBICONV=y\n-CT_GETTEXT=y\n-CT_GMP=y\n-CT_MPFR=y\n-CT_ISL=y\n-CT_MPC=y\n-CT_NCURSES=y\n-CT_ZLIB=y\n-\n-#\n-# Companion tools\n-#\n-# CT_COMP_TOOLS_FOR_HOST is not set\n-# CT_COMP_TOOLS_AUTOCONF is not set\n-# CT_COMP_TOOLS_AUTOMAKE is not set\n-# CT_COMP_TOOLS_BISON is not set\n-# CT_COMP_TOOLS_DTC is not set\n-# CT_COMP_TOOLS_LIBTOOL is not set\n-# CT_COMP_TOOLS_M4 is not set\n-# CT_COMP_TOOLS_MAKE is not set\n-CT_ALL_COMP_TOOLS_CHOICES=\"AUTOCONF AUTOMAKE BISON DTC LIBTOOL M4 MAKE\""}, {"sha": "47e984ef85a213e6fbbaf129c2f8d7c35e8bdd33", "filename": "src/ci/docker/host-x86_64/dist-aarch64-linux/aarch64-linux-gnu.defconfig", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2Faarch64-linux-gnu.defconfig", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2Faarch64-linux-gnu.defconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2Faarch64-linux-gnu.defconfig?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -0,0 +1,12 @@\n+CT_CONFIG_VERSION=\"4\"\n+CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n+CT_USE_MIRROR=y\n+CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n+CT_ARCH_ARM=y\n+CT_ARCH_64=y\n+CT_KERNEL_LINUX=y\n+CT_LINUX_V_4_1=y\n+CT_BINUTILS_V_2_29=y\n+CT_GLIBC_V_2_17=y\n+CT_GCC_V_8=y\n+CT_CC_LANG_CXX=y"}, {"sha": "f15a7081612d8352d608e60e31af424d4e3eaa30", "filename": "src/ci/docker/host-x86_64/dist-aarch64-linux/build-toolchains.sh", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-aarch64-linux%2Fbuild-toolchains.sh?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,27 +0,0 @@\n-#!/usr/bin/env bash\n-set -ex\n-\n-hide_output() {\n-  set +x\n-  on_err=\"\n-echo ERROR: An error was encountered with the build.\n-cat /tmp/build.log\n-exit 1\n-\"\n-  trap \"$on_err\" ERR\n-  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n-  PING_LOOP_PID=$!\n-  \"$@\" &> /tmp/build.log\n-  rm /tmp/build.log\n-  trap - ERR\n-  kill $PING_LOOP_PID\n-  set -x\n-}\n-\n-mkdir build\n-cd build\n-cp ../aarch64-linux-gnu.config .config\n-ct-ng oldconfig\n-hide_output ct-ng build\n-cd ..\n-rm -rf build"}, {"sha": "9a1b3e3641add1a90aa65d768d64170bf477db52", "filename": "src/ci/docker/host-x86_64/dist-arm-linux/Dockerfile", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2FDockerfile?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1,10 +1,10 @@\n-FROM ubuntu:20.04\n+FROM ubuntu:22.04\n \n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/crosstool-ng-1.24.sh /scripts/\n-RUN sh /scripts/crosstool-ng-1.24.sh\n+COPY scripts/crosstool-ng.sh /scripts/\n+RUN sh /scripts/crosstool-ng.sh\n \n WORKDIR /build\n \n@@ -17,13 +17,11 @@ RUN CFLAGS=\"-Wa,--compress-debug-sections=none -Wl,--compress-debug-sections=non\n \n COPY scripts/rustbuild-setup.sh /scripts/\n RUN sh /scripts/rustbuild-setup.sh\n-USER rustbuild\n WORKDIR /tmp\n \n-COPY host-x86_64/dist-arm-linux/arm-linux-gnueabi.config host-x86_64/dist-arm-linux/build-toolchains.sh /tmp/\n-RUN ./build-toolchains.sh\n-\n-USER root\n+COPY scripts/crosstool-ng-build.sh /scripts/\n+COPY host-x86_64/dist-arm-linux/arm-linux-gnueabi.defconfig /tmp/crosstool.defconfig\n+RUN /scripts/crosstool-ng-build.sh\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "e047db92652c2f02e843ccbde25201a08a501f25", "filename": "src/ci/docker/host-x86_64/dist-arm-linux/arm-linux-gnueabi.config", "status": "removed", "additions": 0, "deletions": 748, "changes": 748, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2Farm-linux-gnueabi.config", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2Farm-linux-gnueabi.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2Farm-linux-gnueabi.config?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,748 +0,0 @@\n-#\n-# Automatically generated file; DO NOT EDIT.\n-# crosstool-NG  Configuration\n-#\n-CT_CONFIGURE_has_static_link=y\n-CT_CONFIGURE_has_cxx11=y\n-CT_CONFIGURE_has_wget=y\n-CT_CONFIGURE_has_curl=y\n-CT_CONFIGURE_has_make_3_81_or_newer=y\n-CT_CONFIGURE_has_make_4_0_or_newer=y\n-CT_CONFIGURE_has_libtool_2_4_or_newer=y\n-CT_CONFIGURE_has_libtoolize_2_4_or_newer=y\n-CT_CONFIGURE_has_autoconf_2_65_or_newer=y\n-CT_CONFIGURE_has_autoreconf_2_65_or_newer=y\n-CT_CONFIGURE_has_automake_1_15_or_newer=y\n-CT_CONFIGURE_has_gnu_m4_1_4_12_or_newer=y\n-CT_CONFIGURE_has_python_3_4_or_newer=y\n-CT_CONFIGURE_has_bison_2_7_or_newer=y\n-CT_CONFIGURE_has_python=y\n-CT_CONFIGURE_has_git=y\n-CT_CONFIGURE_has_md5sum=y\n-CT_CONFIGURE_has_sha1sum=y\n-CT_CONFIGURE_has_sha256sum=y\n-CT_CONFIGURE_has_sha512sum=y\n-CT_CONFIGURE_has_install_with_strip_program=y\n-CT_CONFIG_VERSION_CURRENT=\"3\"\n-CT_CONFIG_VERSION=\"3\"\n-CT_MODULES=y\n-\n-#\n-# Paths and misc options\n-#\n-\n-#\n-# crosstool-NG behavior\n-#\n-# CT_OBSOLETE is not set\n-# CT_EXPERIMENTAL is not set\n-# CT_DEBUG_CT is not set\n-\n-#\n-# Paths\n-#\n-CT_LOCAL_TARBALLS_DIR=\"${HOME}/src\"\n-CT_SAVE_TARBALLS=y\n-# CT_TARBALLS_BUILDROOT_LAYOUT is not set\n-CT_WORK_DIR=\"${CT_TOP_DIR}/.build\"\n-CT_BUILD_TOP_DIR=\"${CT_WORK_DIR:-${CT_TOP_DIR}/.build}/${CT_HOST:+HOST-${CT_HOST}/}${CT_TARGET}\"\n-CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n-CT_RM_RF_PREFIX_DIR=y\n-CT_REMOVE_DOCS=y\n-CT_INSTALL_LICENSES=y\n-CT_PREFIX_DIR_RO=y\n-CT_STRIP_HOST_TOOLCHAIN_EXECUTABLES=y\n-# CT_STRIP_TARGET_TOOLCHAIN_EXECUTABLES is not set\n-\n-#\n-# Downloading\n-#\n-CT_DOWNLOAD_AGENT_WGET=y\n-# CT_DOWNLOAD_AGENT_CURL is not set\n-# CT_DOWNLOAD_AGENT_NONE is not set\n-# CT_FORBID_DOWNLOAD is not set\n-# CT_FORCE_DOWNLOAD is not set\n-CT_CONNECT_TIMEOUT=10\n-CT_DOWNLOAD_WGET_OPTIONS=\"--passive-ftp --tries=3 -nc --progress=dot:binary\"\n-# CT_ONLY_DOWNLOAD is not set\n-# CT_USE_MIRROR is not set\n-CT_VERIFY_DOWNLOAD_DIGEST=y\n-CT_VERIFY_DOWNLOAD_DIGEST_SHA512=y\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA256 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA1 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_MD5 is not set\n-CT_VERIFY_DOWNLOAD_DIGEST_ALG=\"sha512\"\n-# CT_VERIFY_DOWNLOAD_SIGNATURE is not set\n-\n-#\n-# Extracting\n-#\n-# CT_FORCE_EXTRACT is not set\n-CT_OVERRIDE_CONFIG_GUESS_SUB=y\n-# CT_ONLY_EXTRACT is not set\n-CT_PATCH_BUNDLED=y\n-# CT_PATCH_BUNDLED_LOCAL is not set\n-CT_PATCH_ORDER=\"bundled\"\n-\n-#\n-# Build behavior\n-#\n-CT_PARALLEL_JOBS=0\n-CT_LOAD=\"\"\n-CT_USE_PIPES=y\n-CT_EXTRA_CFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_LDFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_CFLAGS_FOR_HOST=\"\"\n-CT_EXTRA_LDFLAGS_FOR_HOST=\"\"\n-# CT_CONFIG_SHELL_SH is not set\n-# CT_CONFIG_SHELL_ASH is not set\n-CT_CONFIG_SHELL_BASH=y\n-# CT_CONFIG_SHELL_CUSTOM is not set\n-CT_CONFIG_SHELL=\"${bash}\"\n-\n-#\n-# Logging\n-#\n-# CT_LOG_ERROR is not set\n-# CT_LOG_WARN is not set\n-# CT_LOG_INFO is not set\n-CT_LOG_EXTRA=y\n-# CT_LOG_ALL is not set\n-# CT_LOG_DEBUG is not set\n-CT_LOG_LEVEL_MAX=\"EXTRA\"\n-# CT_LOG_SEE_TOOLS_WARN is not set\n-CT_LOG_PROGRESS_BAR=y\n-CT_LOG_TO_FILE=y\n-CT_LOG_FILE_COMPRESS=y\n-\n-#\n-# Target options\n-#\n-# CT_ARCH_ALPHA is not set\n-# CT_ARCH_ARC is not set\n-CT_ARCH_ARM=y\n-# CT_ARCH_AVR is not set\n-# CT_ARCH_M68K is not set\n-# CT_ARCH_MIPS is not set\n-# CT_ARCH_NIOS2 is not set\n-# CT_ARCH_POWERPC is not set\n-# CT_ARCH_S390 is not set\n-# CT_ARCH_SH is not set\n-# CT_ARCH_SPARC is not set\n-# CT_ARCH_X86 is not set\n-# CT_ARCH_XTENSA is not set\n-CT_ARCH=\"arm\"\n-CT_ARCH_CHOICE_KSYM=\"ARM\"\n-CT_ARCH_CPU=\"\"\n-CT_ARCH_TUNE=\"\"\n-CT_ARCH_ARM_SHOW=y\n-\n-#\n-# Options for arm\n-#\n-CT_ARCH_ARM_PKG_KSYM=\"\"\n-CT_ARCH_ARM_MODE=\"arm\"\n-CT_ARCH_ARM_MODE_ARM=y\n-# CT_ARCH_ARM_MODE_THUMB is not set\n-# CT_ARCH_ARM_INTERWORKING is not set\n-CT_ARCH_ARM_EABI_FORCE=y\n-CT_ARCH_ARM_EABI=y\n-CT_ALL_ARCH_CHOICES=\"ALPHA ARC ARM AVR M68K MICROBLAZE MIPS MOXIE MSP430 NIOS2 POWERPC RISCV S390 SH SPARC X86 XTENSA\"\n-CT_ARCH_SUFFIX=\"\"\n-# CT_OMIT_TARGET_VENDOR is not set\n-\n-#\n-# Generic target options\n-#\n-# CT_MULTILIB is not set\n-CT_DEMULTILIB=y\n-CT_ARCH_SUPPORTS_BOTH_MMU=y\n-CT_ARCH_DEFAULT_HAS_MMU=y\n-CT_ARCH_USE_MMU=y\n-CT_ARCH_SUPPORTS_FLAT_FORMAT=y\n-CT_ARCH_SUPPORTS_EITHER_ENDIAN=y\n-CT_ARCH_DEFAULT_LE=y\n-# CT_ARCH_BE is not set\n-CT_ARCH_LE=y\n-CT_ARCH_ENDIAN=\"little\"\n-CT_ARCH_SUPPORTS_32=y\n-CT_ARCH_SUPPORTS_64=y\n-CT_ARCH_DEFAULT_32=y\n-CT_ARCH_BITNESS=32\n-CT_ARCH_32=y\n-# CT_ARCH_64 is not set\n-\n-#\n-# Target optimisations\n-#\n-CT_ARCH_SUPPORTS_WITH_ARCH=y\n-CT_ARCH_SUPPORTS_WITH_CPU=y\n-CT_ARCH_SUPPORTS_WITH_TUNE=y\n-CT_ARCH_SUPPORTS_WITH_FLOAT=y\n-CT_ARCH_SUPPORTS_WITH_FPU=y\n-CT_ARCH_SUPPORTS_SOFTFP=y\n-CT_ARCH_EXCLUSIVE_WITH_CPU=y\n-CT_ARCH_ARCH=\"armv6\"\n-CT_ARCH_FPU=\"\"\n-# CT_ARCH_FLOAT_AUTO is not set\n-# CT_ARCH_FLOAT_HW is not set\n-# CT_ARCH_FLOAT_SOFTFP is not set\n-CT_ARCH_FLOAT_SW=y\n-CT_TARGET_CFLAGS=\"\"\n-CT_TARGET_LDFLAGS=\"\"\n-CT_ARCH_FLOAT=\"soft\"\n-\n-#\n-# Toolchain options\n-#\n-\n-#\n-# General toolchain options\n-#\n-CT_FORCE_SYSROOT=y\n-CT_USE_SYSROOT=y\n-CT_SYSROOT_NAME=\"sysroot\"\n-CT_SYSROOT_DIR_PREFIX=\"\"\n-CT_WANTS_STATIC_LINK=y\n-CT_WANTS_STATIC_LINK_CXX=y\n-# CT_STATIC_TOOLCHAIN is not set\n-CT_SHOW_CT_VERSION=y\n-CT_TOOLCHAIN_PKGVERSION=\"\"\n-CT_TOOLCHAIN_BUGURL=\"\"\n-\n-#\n-# Tuple completion and aliasing\n-#\n-CT_TARGET_VENDOR=\"unknown\"\n-CT_TARGET_ALIAS_SED_EXPR=\"\"\n-CT_TARGET_ALIAS=\"\"\n-\n-#\n-# Toolchain type\n-#\n-CT_CROSS=y\n-# CT_CANADIAN is not set\n-CT_TOOLCHAIN_TYPE=\"cross\"\n-\n-#\n-# Build system\n-#\n-CT_BUILD=\"\"\n-CT_BUILD_PREFIX=\"\"\n-CT_BUILD_SUFFIX=\"\"\n-\n-#\n-# Misc options\n-#\n-# CT_TOOLCHAIN_ENABLE_NLS is not set\n-\n-#\n-# Operating System\n-#\n-CT_KERNEL_SUPPORTS_SHARED_LIBS=y\n-# CT_KERNEL_BARE_METAL is not set\n-CT_KERNEL_LINUX=y\n-CT_KERNEL=\"linux\"\n-CT_KERNEL_CHOICE_KSYM=\"LINUX\"\n-CT_KERNEL_LINUX_SHOW=y\n-\n-#\n-# Options for linux\n-#\n-CT_KERNEL_LINUX_PKG_KSYM=\"LINUX\"\n-CT_LINUX_DIR_NAME=\"linux\"\n-CT_LINUX_PKG_NAME=\"linux\"\n-CT_LINUX_SRC_RELEASE=y\n-CT_LINUX_PATCH_ORDER=\"global\"\n-# CT_LINUX_V_4_20 is not set\n-# CT_LINUX_V_4_19 is not set\n-# CT_LINUX_V_4_18 is not set\n-# CT_LINUX_V_4_17 is not set\n-# CT_LINUX_V_4_16 is not set\n-# CT_LINUX_V_4_15 is not set\n-# CT_LINUX_V_4_14 is not set\n-# CT_LINUX_V_4_13 is not set\n-# CT_LINUX_V_4_12 is not set\n-# CT_LINUX_V_4_11 is not set\n-# CT_LINUX_V_4_10 is not set\n-# CT_LINUX_V_4_9 is not set\n-# CT_LINUX_V_4_4 is not set\n-# CT_LINUX_V_4_1 is not set\n-# CT_LINUX_V_3_16 is not set\n-# CT_LINUX_V_3_13 is not set\n-# CT_LINUX_V_3_12 is not set\n-# CT_LINUX_V_3_10 is not set\n-# CT_LINUX_V_3_4 is not set\n-CT_LINUX_V_3_2=y\n-# CT_LINUX_V_2_6_32 is not set\n-# CT_LINUX_NO_VERSIONS is not set\n-CT_LINUX_VERSION=\"3.2.101\"\n-CT_LINUX_MIRRORS=\"$(CT_Mirrors kernel.org linux ${CT_LINUX_VERSION})\"\n-CT_LINUX_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_LINUX_SIGNATURE_FORMAT=\"unpacked/.sign\"\n-CT_LINUX_4_8_or_older=y\n-CT_LINUX_older_than_4_8=y\n-CT_LINUX_3_7_or_older=y\n-CT_LINUX_older_than_3_7=y\n-CT_LINUX_later_than_3_2=y\n-CT_LINUX_3_2_or_later=y\n-CT_KERNEL_LINUX_VERBOSITY_0=y\n-# CT_KERNEL_LINUX_VERBOSITY_1 is not set\n-# CT_KERNEL_LINUX_VERBOSITY_2 is not set\n-CT_KERNEL_LINUX_VERBOSE_LEVEL=0\n-CT_KERNEL_LINUX_INSTALL_CHECK=y\n-CT_ALL_KERNEL_CHOICES=\"BARE_METAL LINUX WINDOWS\"\n-\n-#\n-# Common kernel options\n-#\n-CT_SHARED_LIBS=y\n-\n-#\n-# Binary utilities\n-#\n-CT_ARCH_BINFMT_ELF=y\n-CT_BINUTILS_BINUTILS=y\n-CT_BINUTILS=\"binutils\"\n-CT_BINUTILS_CHOICE_KSYM=\"BINUTILS\"\n-CT_BINUTILS_BINUTILS_SHOW=y\n-\n-#\n-# Options for binutils\n-#\n-CT_BINUTILS_BINUTILS_PKG_KSYM=\"BINUTILS\"\n-CT_BINUTILS_DIR_NAME=\"binutils\"\n-CT_BINUTILS_USE_GNU=y\n-CT_BINUTILS_USE=\"BINUTILS\"\n-CT_BINUTILS_PKG_NAME=\"binutils\"\n-CT_BINUTILS_SRC_RELEASE=y\n-CT_BINUTILS_PATCH_ORDER=\"global\"\n-CT_BINUTILS_V_2_32=y\n-# CT_BINUTILS_V_2_31 is not set\n-# CT_BINUTILS_V_2_30 is not set\n-# CT_BINUTILS_V_2_29 is not set\n-# CT_BINUTILS_V_2_28 is not set\n-# CT_BINUTILS_V_2_27 is not set\n-# CT_BINUTILS_V_2_26 is not set\n-# CT_BINUTILS_NO_VERSIONS is not set\n-CT_BINUTILS_VERSION=\"2.32\"\n-CT_BINUTILS_MIRRORS=\"$(CT_Mirrors GNU binutils) $(CT_Mirrors sourceware binutils/releases)\"\n-CT_BINUTILS_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_BINUTILS_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_BINUTILS_later_than_2_30=y\n-CT_BINUTILS_2_30_or_later=y\n-CT_BINUTILS_later_than_2_27=y\n-CT_BINUTILS_2_27_or_later=y\n-CT_BINUTILS_later_than_2_25=y\n-CT_BINUTILS_2_25_or_later=y\n-CT_BINUTILS_later_than_2_23=y\n-CT_BINUTILS_2_23_or_later=y\n-\n-#\n-# GNU binutils\n-#\n-CT_BINUTILS_HAS_HASH_STYLE=y\n-CT_BINUTILS_HAS_GOLD=y\n-CT_BINUTILS_HAS_PLUGINS=y\n-CT_BINUTILS_HAS_PKGVERSION_BUGURL=y\n-CT_BINUTILS_GOLD_SUPPORTS_ARCH=y\n-CT_BINUTILS_GOLD_SUPPORT=y\n-CT_BINUTILS_FORCE_LD_BFD_DEFAULT=y\n-CT_BINUTILS_LINKER_LD=y\n-# CT_BINUTILS_LINKER_LD_GOLD is not set\n-CT_BINUTILS_LINKERS_LIST=\"ld\"\n-CT_BINUTILS_LINKER_DEFAULT=\"bfd\"\n-# CT_BINUTILS_PLUGINS is not set\n-CT_BINUTILS_RELRO=m\n-CT_BINUTILS_EXTRA_CONFIG_ARRAY=\"\"\n-# CT_BINUTILS_FOR_TARGET is not set\n-CT_ALL_BINUTILS_CHOICES=\"BINUTILS\"\n-\n-#\n-# C-library\n-#\n-CT_LIBC_GLIBC=y\n-# CT_LIBC_UCLIBC is not set\n-CT_LIBC=\"glibc\"\n-CT_LIBC_CHOICE_KSYM=\"GLIBC\"\n-CT_THREADS=\"nptl\"\n-CT_LIBC_GLIBC_SHOW=y\n-\n-#\n-# Options for glibc\n-#\n-CT_LIBC_GLIBC_PKG_KSYM=\"GLIBC\"\n-CT_GLIBC_DIR_NAME=\"glibc\"\n-CT_GLIBC_USE_GNU=y\n-CT_GLIBC_USE=\"GLIBC\"\n-CT_GLIBC_PKG_NAME=\"glibc\"\n-CT_GLIBC_SRC_RELEASE=y\n-CT_GLIBC_PATCH_ORDER=\"global\"\n-# CT_GLIBC_V_2_29 is not set\n-# CT_GLIBC_V_2_28 is not set\n-# CT_GLIBC_V_2_27 is not set\n-# CT_GLIBC_V_2_26 is not set\n-# CT_GLIBC_V_2_25 is not set\n-# CT_GLIBC_V_2_24 is not set\n-# CT_GLIBC_V_2_23 is not set\n-# CT_GLIBC_V_2_19 is not set\n-CT_GLIBC_V_2_17=y\n-# CT_GLIBC_V_2_12_1 is not set\n-# CT_GLIBC_NO_VERSIONS is not set\n-CT_GLIBC_VERSION=\"2.17\"\n-CT_GLIBC_MIRRORS=\"$(CT_Mirrors GNU glibc)\"\n-CT_GLIBC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_GLIBC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GLIBC_2_29_or_older=y\n-CT_GLIBC_older_than_2_29=y\n-CT_GLIBC_2_27_or_older=y\n-CT_GLIBC_older_than_2_27=y\n-CT_GLIBC_2_26_or_older=y\n-CT_GLIBC_older_than_2_26=y\n-CT_GLIBC_2_25_or_older=y\n-CT_GLIBC_older_than_2_25=y\n-CT_GLIBC_2_24_or_older=y\n-CT_GLIBC_older_than_2_24=y\n-CT_GLIBC_2_23_or_older=y\n-CT_GLIBC_older_than_2_23=y\n-CT_GLIBC_2_20_or_older=y\n-CT_GLIBC_older_than_2_20=y\n-CT_GLIBC_2_17_or_later=y\n-CT_GLIBC_2_17_or_older=y\n-CT_GLIBC_later_than_2_14=y\n-CT_GLIBC_2_14_or_later=y\n-CT_GLIBC_DEP_KERNEL_HEADERS_VERSION=y\n-CT_GLIBC_DEP_BINUTILS=y\n-CT_GLIBC_DEP_GCC=y\n-CT_GLIBC_DEP_PYTHON=y\n-CT_GLIBC_HAS_NPTL_ADDON=y\n-CT_GLIBC_HAS_PORTS_ADDON=y\n-CT_GLIBC_HAS_LIBIDN_ADDON=y\n-CT_GLIBC_USE_PORTS_ADDON=y\n-CT_GLIBC_USE_NPTL_ADDON=y\n-# CT_GLIBC_USE_LIBIDN_ADDON is not set\n-CT_GLIBC_HAS_OBSOLETE_RPC=y\n-CT_GLIBC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_GLIBC_CONFIGPARMS=\"\"\n-CT_GLIBC_EXTRA_CFLAGS=\"\"\n-CT_GLIBC_ENABLE_OBSOLETE_RPC=y\n-# CT_GLIBC_DISABLE_VERSIONING is not set\n-CT_GLIBC_OLDEST_ABI=\"\"\n-CT_GLIBC_FORCE_UNWIND=y\n-# CT_GLIBC_LOCALES is not set\n-# CT_GLIBC_KERNEL_VERSION_NONE is not set\n-CT_GLIBC_KERNEL_VERSION_AS_HEADERS=y\n-# CT_GLIBC_KERNEL_VERSION_CHOSEN is not set\n-CT_GLIBC_MIN_KERNEL=\"3.2.101\"\n-CT_ALL_LIBC_CHOICES=\"AVR_LIBC BIONIC GLIBC MINGW_W64 MOXIEBOX MUSL NEWLIB NONE UCLIBC\"\n-CT_LIBC_SUPPORT_THREADS_ANY=y\n-CT_LIBC_SUPPORT_THREADS_NATIVE=y\n-\n-#\n-# Common C library options\n-#\n-CT_THREADS_NATIVE=y\n-# CT_CREATE_LDSO_CONF is not set\n-CT_LIBC_XLDD=y\n-\n-#\n-# C compiler\n-#\n-CT_CC_CORE_PASSES_NEEDED=y\n-CT_CC_CORE_PASS_1_NEEDED=y\n-CT_CC_CORE_PASS_2_NEEDED=y\n-CT_CC_SUPPORT_CXX=y\n-CT_CC_SUPPORT_FORTRAN=y\n-CT_CC_SUPPORT_ADA=y\n-CT_CC_SUPPORT_OBJC=y\n-CT_CC_SUPPORT_OBJCXX=y\n-CT_CC_SUPPORT_GOLANG=y\n-CT_CC_GCC=y\n-CT_CC=\"gcc\"\n-CT_CC_CHOICE_KSYM=\"GCC\"\n-CT_CC_GCC_SHOW=y\n-\n-#\n-# Options for gcc\n-#\n-CT_CC_GCC_PKG_KSYM=\"GCC\"\n-CT_GCC_DIR_NAME=\"gcc\"\n-CT_GCC_USE_GNU=y\n-CT_GCC_USE=\"GCC\"\n-CT_GCC_PKG_NAME=\"gcc\"\n-CT_GCC_SRC_RELEASE=y\n-CT_GCC_PATCH_ORDER=\"global\"\n-CT_GCC_V_8=y\n-# CT_GCC_V_7 is not set\n-# CT_GCC_V_6 is not set\n-# CT_GCC_V_5 is not set\n-# CT_GCC_V_4_9 is not set\n-# CT_GCC_NO_VERSIONS is not set\n-CT_GCC_VERSION=\"8.3.0\"\n-CT_GCC_MIRRORS=\"$(CT_Mirrors GNU gcc/gcc-${CT_GCC_VERSION}) $(CT_Mirrors sourceware gcc/releases/gcc-${CT_GCC_VERSION})\"\n-CT_GCC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_GCC_SIGNATURE_FORMAT=\"\"\n-CT_GCC_later_than_7=y\n-CT_GCC_7_or_later=y\n-CT_GCC_later_than_6=y\n-CT_GCC_6_or_later=y\n-CT_GCC_later_than_5=y\n-CT_GCC_5_or_later=y\n-CT_GCC_later_than_4_9=y\n-CT_GCC_4_9_or_later=y\n-CT_GCC_later_than_4_8=y\n-CT_GCC_4_8_or_later=y\n-CT_CC_GCC_HAS_LIBMPX=y\n-CT_CC_GCC_ENABLE_CXX_FLAGS=\"\"\n-CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_STATIC_LIBSTDCXX=y\n-# CT_CC_GCC_SYSTEM_ZLIB is not set\n-CT_CC_GCC_CONFIG_TLS=m\n-\n-#\n-# Optimisation features\n-#\n-CT_CC_GCC_USE_GRAPHITE=y\n-CT_CC_GCC_USE_LTO=y\n-\n-#\n-# Settings for libraries running on target\n-#\n-CT_CC_GCC_ENABLE_TARGET_OPTSPACE=y\n-# CT_CC_GCC_LIBMUDFLAP is not set\n-# CT_CC_GCC_LIBGOMP is not set\n-# CT_CC_GCC_LIBSSP is not set\n-# CT_CC_GCC_LIBQUADMATH is not set\n-# CT_CC_GCC_LIBSANITIZER is not set\n-\n-#\n-# Misc. obscure options.\n-#\n-CT_CC_CXA_ATEXIT=y\n-# CT_CC_GCC_DISABLE_PCH is not set\n-CT_CC_GCC_SJLJ_EXCEPTIONS=m\n-CT_CC_GCC_LDBL_128=m\n-# CT_CC_GCC_BUILD_ID is not set\n-CT_CC_GCC_LNK_HASH_STYLE_DEFAULT=y\n-# CT_CC_GCC_LNK_HASH_STYLE_SYSV is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_GNU is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_BOTH is not set\n-CT_CC_GCC_LNK_HASH_STYLE=\"\"\n-CT_CC_GCC_DEC_FLOAT_AUTO=y\n-# CT_CC_GCC_DEC_FLOAT_BID is not set\n-# CT_CC_GCC_DEC_FLOAT_DPD is not set\n-# CT_CC_GCC_DEC_FLOATS_NO is not set\n-CT_ALL_CC_CHOICES=\"GCC\"\n-\n-#\n-# Additional supported languages:\n-#\n-CT_CC_LANG_CXX=y\n-# CT_CC_LANG_FORTRAN is not set\n-\n-#\n-# Debug facilities\n-#\n-# CT_DEBUG_DUMA is not set\n-# CT_DEBUG_GDB is not set\n-# CT_DEBUG_LTRACE is not set\n-# CT_DEBUG_STRACE is not set\n-CT_ALL_DEBUG_CHOICES=\"DUMA GDB LTRACE STRACE\"\n-\n-#\n-# Companion libraries\n-#\n-# CT_COMPLIBS_CHECK is not set\n-# CT_COMP_LIBS_CLOOG is not set\n-# CT_COMP_LIBS_EXPAT is not set\n-CT_COMP_LIBS_GETTEXT=y\n-CT_COMP_LIBS_GETTEXT_PKG_KSYM=\"GETTEXT\"\n-CT_GETTEXT_DIR_NAME=\"gettext\"\n-CT_GETTEXT_PKG_NAME=\"gettext\"\n-CT_GETTEXT_SRC_RELEASE=y\n-CT_GETTEXT_PATCH_ORDER=\"global\"\n-CT_GETTEXT_V_0_19_8_1=y\n-# CT_GETTEXT_NO_VERSIONS is not set\n-CT_GETTEXT_VERSION=\"0.19.8.1\"\n-CT_GETTEXT_MIRRORS=\"$(CT_Mirrors GNU gettext)\"\n-CT_GETTEXT_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.gz\"\n-CT_GETTEXT_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_GMP=y\n-CT_COMP_LIBS_GMP_PKG_KSYM=\"GMP\"\n-CT_GMP_DIR_NAME=\"gmp\"\n-CT_GMP_PKG_NAME=\"gmp\"\n-CT_GMP_SRC_RELEASE=y\n-CT_GMP_PATCH_ORDER=\"global\"\n-CT_GMP_V_6_1=y\n-# CT_GMP_NO_VERSIONS is not set\n-CT_GMP_VERSION=\"6.1.2\"\n-CT_GMP_MIRRORS=\"https://gmplib.org/download/gmp https://gmplib.org/download/gmp/archive $(CT_Mirrors GNU gmp)\"\n-CT_GMP_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.bz2\"\n-CT_GMP_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GMP_later_than_5_1_0=y\n-CT_GMP_5_1_0_or_later=y\n-CT_GMP_later_than_5_0_0=y\n-CT_GMP_5_0_0_or_later=y\n-CT_GMP_REQUIRE_5_0_0_or_later=y\n-CT_COMP_LIBS_ISL=y\n-CT_COMP_LIBS_ISL_PKG_KSYM=\"ISL\"\n-CT_ISL_DIR_NAME=\"isl\"\n-CT_ISL_PKG_NAME=\"isl\"\n-CT_ISL_SRC_RELEASE=y\n-CT_ISL_PATCH_ORDER=\"global\"\n-CT_ISL_V_0_20=y\n-# CT_ISL_V_0_19 is not set\n-# CT_ISL_V_0_18 is not set\n-# CT_ISL_V_0_17 is not set\n-# CT_ISL_V_0_16 is not set\n-# CT_ISL_V_0_15 is not set\n-# CT_ISL_NO_VERSIONS is not set\n-CT_ISL_VERSION=\"0.20\"\n-CT_ISL_MIRRORS=\"https://ci-mirrors.rust-lang.org/rustc\"\n-CT_ISL_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_ISL_SIGNATURE_FORMAT=\"\"\n-CT_ISL_later_than_0_18=y\n-CT_ISL_0_18_or_later=y\n-CT_ISL_later_than_0_15=y\n-CT_ISL_0_15_or_later=y\n-CT_ISL_REQUIRE_0_15_or_later=y\n-CT_ISL_later_than_0_14=y\n-CT_ISL_0_14_or_later=y\n-CT_ISL_REQUIRE_0_14_or_later=y\n-CT_ISL_later_than_0_13=y\n-CT_ISL_0_13_or_later=y\n-CT_ISL_later_than_0_12=y\n-CT_ISL_0_12_or_later=y\n-CT_ISL_REQUIRE_0_12_or_later=y\n-# CT_COMP_LIBS_LIBELF is not set\n-CT_COMP_LIBS_LIBICONV=y\n-CT_COMP_LIBS_LIBICONV_PKG_KSYM=\"LIBICONV\"\n-CT_LIBICONV_DIR_NAME=\"libiconv\"\n-CT_LIBICONV_PKG_NAME=\"libiconv\"\n-CT_LIBICONV_SRC_RELEASE=y\n-CT_LIBICONV_PATCH_ORDER=\"global\"\n-CT_LIBICONV_V_1_15=y\n-# CT_LIBICONV_NO_VERSIONS is not set\n-CT_LIBICONV_VERSION=\"1.15\"\n-CT_LIBICONV_MIRRORS=\"$(CT_Mirrors GNU libiconv)\"\n-CT_LIBICONV_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_LIBICONV_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_MPC=y\n-CT_COMP_LIBS_MPC_PKG_KSYM=\"MPC\"\n-CT_MPC_DIR_NAME=\"mpc\"\n-CT_MPC_PKG_NAME=\"mpc\"\n-CT_MPC_SRC_RELEASE=y\n-CT_MPC_PATCH_ORDER=\"global\"\n-CT_MPC_V_1_1=y\n-# CT_MPC_V_1_0 is not set\n-# CT_MPC_NO_VERSIONS is not set\n-CT_MPC_VERSION=\"1.1.0\"\n-CT_MPC_MIRRORS=\"http://www.multiprecision.org/downloads $(CT_Mirrors GNU mpc)\"\n-CT_MPC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_MPC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_MPC_1_1_0_or_later=y\n-CT_MPC_1_1_0_or_older=y\n-CT_COMP_LIBS_MPFR=y\n-CT_COMP_LIBS_MPFR_PKG_KSYM=\"MPFR\"\n-CT_MPFR_DIR_NAME=\"mpfr\"\n-CT_MPFR_PKG_NAME=\"mpfr\"\n-CT_MPFR_SRC_RELEASE=y\n-CT_MPFR_PATCH_ORDER=\"global\"\n-CT_MPFR_V_4_0=y\n-# CT_MPFR_V_3_1 is not set\n-# CT_MPFR_NO_VERSIONS is not set\n-CT_MPFR_VERSION=\"4.0.2\"\n-CT_MPFR_MIRRORS=\"http://www.mpfr.org/mpfr-${CT_MPFR_VERSION} $(CT_Mirrors GNU mpfr)\"\n-CT_MPFR_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz .zip\"\n-CT_MPFR_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_MPFR_later_than_4_0_0=y\n-CT_MPFR_4_0_0_or_later=y\n-CT_MPFR_later_than_3_0_0=y\n-CT_MPFR_3_0_0_or_later=y\n-CT_MPFR_REQUIRE_3_0_0_or_later=y\n-CT_COMP_LIBS_NCURSES=y\n-CT_COMP_LIBS_NCURSES_PKG_KSYM=\"NCURSES\"\n-CT_NCURSES_DIR_NAME=\"ncurses\"\n-CT_NCURSES_PKG_NAME=\"ncurses\"\n-CT_NCURSES_SRC_RELEASE=y\n-CT_NCURSES_PATCH_ORDER=\"global\"\n-CT_NCURSES_V_6_1=y\n-# CT_NCURSES_V_6_0 is not set\n-# CT_NCURSES_NO_VERSIONS is not set\n-CT_NCURSES_VERSION=\"6.1\"\n-CT_NCURSES_MIRRORS=\"ftp://invisible-island.net/ncurses $(CT_Mirrors GNU ncurses)\"\n-CT_NCURSES_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_NCURSES_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_NCURSES_HOST_CONFIG_ARGS=\"\"\n-CT_NCURSES_HOST_DISABLE_DB=y\n-CT_NCURSES_HOST_FALLBACKS=\"linux,xterm,xterm-color,xterm-256color,vt100\"\n-CT_NCURSES_TARGET_CONFIG_ARGS=\"\"\n-# CT_NCURSES_TARGET_DISABLE_DB is not set\n-CT_NCURSES_TARGET_FALLBACKS=\"\"\n-CT_COMP_LIBS_ZLIB=y\n-CT_COMP_LIBS_ZLIB_PKG_KSYM=\"ZLIB\"\n-CT_ZLIB_DIR_NAME=\"zlib\"\n-CT_ZLIB_PKG_NAME=\"zlib\"\n-CT_ZLIB_SRC_RELEASE=y\n-CT_ZLIB_PATCH_ORDER=\"global\"\n-CT_ZLIB_V_1_2_11=y\n-# CT_ZLIB_NO_VERSIONS is not set\n-CT_ZLIB_VERSION=\"1.2.11\"\n-CT_ZLIB_MIRRORS=\"https://downloads.sourceforge.net/project/libpng/zlib/${CT_ZLIB_VERSION}\"\n-CT_ZLIB_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_ZLIB_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_ALL_COMP_LIBS_CHOICES=\"CLOOG EXPAT GETTEXT GMP ISL LIBELF LIBICONV MPC MPFR NCURSES ZLIB\"\n-CT_LIBICONV_NEEDED=y\n-CT_GETTEXT_NEEDED=y\n-CT_GMP_NEEDED=y\n-CT_MPFR_NEEDED=y\n-CT_ISL_NEEDED=y\n-CT_MPC_NEEDED=y\n-CT_NCURSES_NEEDED=y\n-CT_ZLIB_NEEDED=y\n-CT_LIBICONV=y\n-CT_GETTEXT=y\n-CT_GMP=y\n-CT_MPFR=y\n-CT_ISL=y\n-CT_MPC=y\n-CT_NCURSES=y\n-CT_ZLIB=y\n-\n-#\n-# Companion tools\n-#\n-# CT_COMP_TOOLS_FOR_HOST is not set\n-# CT_COMP_TOOLS_AUTOCONF is not set\n-# CT_COMP_TOOLS_AUTOMAKE is not set\n-# CT_COMP_TOOLS_BISON is not set\n-# CT_COMP_TOOLS_DTC is not set\n-# CT_COMP_TOOLS_LIBTOOL is not set\n-# CT_COMP_TOOLS_M4 is not set\n-# CT_COMP_TOOLS_MAKE is not set\n-CT_ALL_COMP_TOOLS_CHOICES=\"AUTOCONF AUTOMAKE BISON DTC LIBTOOL M4 MAKE\""}, {"sha": "e7afdbe9d4deacc0ea2f6220b97fcc62eeefe27d", "filename": "src/ci/docker/host-x86_64/dist-arm-linux/arm-linux-gnueabi.defconfig", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2Farm-linux-gnueabi.defconfig", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2Farm-linux-gnueabi.defconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2Farm-linux-gnueabi.defconfig?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -0,0 +1,13 @@\n+CT_CONFIG_VERSION=\"4\"\n+CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n+CT_USE_MIRROR=y\n+CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n+CT_ARCH_ARM=y\n+CT_ARCH_ARCH=\"armv6\"\n+CT_ARCH_FLOAT_SW=y\n+CT_KERNEL_LINUX=y\n+CT_LINUX_V_3_2=y\n+CT_BINUTILS_V_2_32=y\n+CT_GLIBC_V_2_17=y\n+CT_GCC_V_8=y\n+CT_CC_LANG_CXX=y"}, {"sha": "ad53ba4dd1bc0b208aec94c781c130de553e1586", "filename": "src/ci/docker/host-x86_64/dist-arm-linux/build-toolchains.sh", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2Fbuild-toolchains.sh?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,29 +0,0 @@\n-#!/usr/bin/env bash\n-\n-set -ex\n-\n-hide_output() {\n-  set +x\n-  on_err=\"\n-echo ERROR: An error was encountered with the build.\n-cat /tmp/build.log\n-exit 1\n-\"\n-  trap \"$on_err\" ERR\n-  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n-  PING_LOOP_PID=$!\n-  \"$@\" &> /tmp/build.log\n-  rm /tmp/build.log\n-  trap - ERR\n-  kill $PING_LOOP_PID\n-  set -x\n-}\n-\n-mkdir build\n-cd build\n-cp ../arm-linux-gnueabi.config .config\n-# FIXME ct-ng oldconfig is not working as intended.\n-# ct-ng oldconfig\n-hide_output ct-ng build\n-cd ..\n-rm -rf build"}, {"sha": "855465aa38e243e96bbf9212693da734ff8f8dba", "filename": "src/ci/docker/host-x86_64/dist-armhf-linux/Dockerfile", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armhf-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armhf-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armhf-linux%2FDockerfile?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1,20 +1,18 @@\n-FROM ubuntu:20.04\n+FROM ubuntu:22.04\n \n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/crosstool-ng-1.24.sh /scripts/\n-RUN sh /scripts/crosstool-ng-1.24.sh\n+COPY scripts/crosstool-ng.sh /scripts/\n+RUN sh /scripts/crosstool-ng.sh\n \n COPY scripts/rustbuild-setup.sh /scripts/\n RUN sh /scripts/rustbuild-setup.sh\n-USER rustbuild\n WORKDIR /tmp\n \n-COPY host-x86_64/dist-armhf-linux/arm-linux-gnueabihf.config host-x86_64/dist-armhf-linux/build-toolchains.sh /tmp/\n-RUN ./build-toolchains.sh\n-\n-USER root\n+COPY scripts/crosstool-ng-build.sh /scripts/\n+COPY host-x86_64/dist-armhf-linux/arm-linux-gnueabihf.defconfig /tmp/crosstool.defconfig\n+RUN /scripts/crosstool-ng-build.sh\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "e0f6417793de8fa01caaa1855e5cf0ca2df53108", "filename": "src/ci/docker/host-x86_64/dist-armhf-linux/arm-linux-gnueabihf.config", "status": "removed", "additions": 0, "deletions": 749, "changes": 749, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armhf-linux%2Farm-linux-gnueabihf.config", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armhf-linux%2Farm-linux-gnueabihf.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armhf-linux%2Farm-linux-gnueabihf.config?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,749 +0,0 @@\n-#\n-# Automatically generated file; DO NOT EDIT.\n-# crosstool-NG  Configuration\n-#\n-CT_CONFIGURE_has_static_link=y\n-CT_CONFIGURE_has_cxx11=y\n-CT_CONFIGURE_has_wget=y\n-CT_CONFIGURE_has_curl=y\n-CT_CONFIGURE_has_make_3_81_or_newer=y\n-CT_CONFIGURE_has_make_4_0_or_newer=y\n-CT_CONFIGURE_has_libtool_2_4_or_newer=y\n-CT_CONFIGURE_has_libtoolize_2_4_or_newer=y\n-CT_CONFIGURE_has_autoconf_2_65_or_newer=y\n-CT_CONFIGURE_has_autoreconf_2_65_or_newer=y\n-CT_CONFIGURE_has_automake_1_15_or_newer=y\n-CT_CONFIGURE_has_gnu_m4_1_4_12_or_newer=y\n-CT_CONFIGURE_has_python_3_4_or_newer=y\n-CT_CONFIGURE_has_bison_2_7_or_newer=y\n-CT_CONFIGURE_has_python=y\n-CT_CONFIGURE_has_git=y\n-CT_CONFIGURE_has_md5sum=y\n-CT_CONFIGURE_has_sha1sum=y\n-CT_CONFIGURE_has_sha256sum=y\n-CT_CONFIGURE_has_sha512sum=y\n-CT_CONFIGURE_has_install_with_strip_program=y\n-CT_CONFIG_VERSION_CURRENT=\"3\"\n-CT_CONFIG_VERSION=\"3\"\n-CT_MODULES=y\n-\n-#\n-# Paths and misc options\n-#\n-\n-#\n-# crosstool-NG behavior\n-#\n-# CT_OBSOLETE is not set\n-# CT_EXPERIMENTAL is not set\n-# CT_DEBUG_CT is not set\n-\n-#\n-# Paths\n-#\n-CT_LOCAL_TARBALLS_DIR=\"${HOME}/src\"\n-CT_SAVE_TARBALLS=y\n-# CT_TARBALLS_BUILDROOT_LAYOUT is not set\n-CT_WORK_DIR=\"${CT_TOP_DIR}/.build\"\n-CT_BUILD_TOP_DIR=\"${CT_WORK_DIR:-${CT_TOP_DIR}/.build}/${CT_HOST:+HOST-${CT_HOST}/}${CT_TARGET}\"\n-CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n-CT_RM_RF_PREFIX_DIR=y\n-CT_REMOVE_DOCS=y\n-CT_INSTALL_LICENSES=y\n-CT_PREFIX_DIR_RO=y\n-CT_STRIP_HOST_TOOLCHAIN_EXECUTABLES=y\n-# CT_STRIP_TARGET_TOOLCHAIN_EXECUTABLES is not set\n-\n-#\n-# Downloading\n-#\n-CT_DOWNLOAD_AGENT_WGET=y\n-# CT_DOWNLOAD_AGENT_CURL is not set\n-# CT_DOWNLOAD_AGENT_NONE is not set\n-# CT_FORBID_DOWNLOAD is not set\n-# CT_FORCE_DOWNLOAD is not set\n-CT_CONNECT_TIMEOUT=10\n-CT_DOWNLOAD_WGET_OPTIONS=\"--passive-ftp --tries=3 -nc --progress=dot:binary\"\n-# CT_ONLY_DOWNLOAD is not set\n-# CT_USE_MIRROR is not set\n-CT_VERIFY_DOWNLOAD_DIGEST=y\n-CT_VERIFY_DOWNLOAD_DIGEST_SHA512=y\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA256 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA1 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_MD5 is not set\n-CT_VERIFY_DOWNLOAD_DIGEST_ALG=\"sha512\"\n-# CT_VERIFY_DOWNLOAD_SIGNATURE is not set\n-\n-#\n-# Extracting\n-#\n-# CT_FORCE_EXTRACT is not set\n-CT_OVERRIDE_CONFIG_GUESS_SUB=y\n-# CT_ONLY_EXTRACT is not set\n-CT_PATCH_BUNDLED=y\n-# CT_PATCH_BUNDLED_LOCAL is not set\n-CT_PATCH_ORDER=\"bundled\"\n-\n-#\n-# Build behavior\n-#\n-CT_PARALLEL_JOBS=0\n-CT_LOAD=\"\"\n-CT_USE_PIPES=y\n-CT_EXTRA_CFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_LDFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_CFLAGS_FOR_HOST=\"\"\n-CT_EXTRA_LDFLAGS_FOR_HOST=\"\"\n-# CT_CONFIG_SHELL_SH is not set\n-# CT_CONFIG_SHELL_ASH is not set\n-CT_CONFIG_SHELL_BASH=y\n-# CT_CONFIG_SHELL_CUSTOM is not set\n-CT_CONFIG_SHELL=\"${bash}\"\n-\n-#\n-# Logging\n-#\n-# CT_LOG_ERROR is not set\n-# CT_LOG_WARN is not set\n-# CT_LOG_INFO is not set\n-CT_LOG_EXTRA=y\n-# CT_LOG_ALL is not set\n-# CT_LOG_DEBUG is not set\n-CT_LOG_LEVEL_MAX=\"EXTRA\"\n-# CT_LOG_SEE_TOOLS_WARN is not set\n-CT_LOG_PROGRESS_BAR=y\n-CT_LOG_TO_FILE=y\n-CT_LOG_FILE_COMPRESS=y\n-\n-#\n-# Target options\n-#\n-# CT_ARCH_ALPHA is not set\n-# CT_ARCH_ARC is not set\n-CT_ARCH_ARM=y\n-# CT_ARCH_AVR is not set\n-# CT_ARCH_M68K is not set\n-# CT_ARCH_MIPS is not set\n-# CT_ARCH_NIOS2 is not set\n-# CT_ARCH_POWERPC is not set\n-# CT_ARCH_S390 is not set\n-# CT_ARCH_SH is not set\n-# CT_ARCH_SPARC is not set\n-# CT_ARCH_X86 is not set\n-# CT_ARCH_XTENSA is not set\n-CT_ARCH=\"arm\"\n-CT_ARCH_CHOICE_KSYM=\"ARM\"\n-CT_ARCH_CPU=\"\"\n-CT_ARCH_TUNE=\"\"\n-CT_ARCH_ARM_SHOW=y\n-\n-#\n-# Options for arm\n-#\n-CT_ARCH_ARM_PKG_KSYM=\"\"\n-CT_ARCH_ARM_MODE=\"arm\"\n-CT_ARCH_ARM_MODE_ARM=y\n-# CT_ARCH_ARM_MODE_THUMB is not set\n-# CT_ARCH_ARM_INTERWORKING is not set\n-CT_ARCH_ARM_EABI_FORCE=y\n-CT_ARCH_ARM_EABI=y\n-CT_ARCH_ARM_TUPLE_USE_EABIHF=y\n-CT_ALL_ARCH_CHOICES=\"ALPHA ARC ARM AVR M68K MICROBLAZE MIPS MOXIE MSP430 NIOS2 POWERPC RISCV S390 SH SPARC X86 XTENSA\"\n-CT_ARCH_SUFFIX=\"\"\n-# CT_OMIT_TARGET_VENDOR is not set\n-\n-#\n-# Generic target options\n-#\n-# CT_MULTILIB is not set\n-CT_DEMULTILIB=y\n-CT_ARCH_SUPPORTS_BOTH_MMU=y\n-CT_ARCH_DEFAULT_HAS_MMU=y\n-CT_ARCH_USE_MMU=y\n-CT_ARCH_SUPPORTS_FLAT_FORMAT=y\n-CT_ARCH_SUPPORTS_EITHER_ENDIAN=y\n-CT_ARCH_DEFAULT_LE=y\n-# CT_ARCH_BE is not set\n-CT_ARCH_LE=y\n-CT_ARCH_ENDIAN=\"little\"\n-CT_ARCH_SUPPORTS_32=y\n-CT_ARCH_SUPPORTS_64=y\n-CT_ARCH_DEFAULT_32=y\n-CT_ARCH_BITNESS=32\n-CT_ARCH_32=y\n-# CT_ARCH_64 is not set\n-\n-#\n-# Target optimisations\n-#\n-CT_ARCH_SUPPORTS_WITH_ARCH=y\n-CT_ARCH_SUPPORTS_WITH_CPU=y\n-CT_ARCH_SUPPORTS_WITH_TUNE=y\n-CT_ARCH_SUPPORTS_WITH_FLOAT=y\n-CT_ARCH_SUPPORTS_WITH_FPU=y\n-CT_ARCH_SUPPORTS_SOFTFP=y\n-CT_ARCH_EXCLUSIVE_WITH_CPU=y\n-CT_ARCH_ARCH=\"armv6\"\n-CT_ARCH_FPU=\"vfp\"\n-# CT_ARCH_FLOAT_AUTO is not set\n-CT_ARCH_FLOAT_HW=y\n-# CT_ARCH_FLOAT_SOFTFP is not set\n-# CT_ARCH_FLOAT_SW is not set\n-CT_TARGET_CFLAGS=\"\"\n-CT_TARGET_LDFLAGS=\"\"\n-CT_ARCH_FLOAT=\"hard\"\n-\n-#\n-# Toolchain options\n-#\n-\n-#\n-# General toolchain options\n-#\n-CT_FORCE_SYSROOT=y\n-CT_USE_SYSROOT=y\n-CT_SYSROOT_NAME=\"sysroot\"\n-CT_SYSROOT_DIR_PREFIX=\"\"\n-CT_WANTS_STATIC_LINK=y\n-CT_WANTS_STATIC_LINK_CXX=y\n-# CT_STATIC_TOOLCHAIN is not set\n-CT_SHOW_CT_VERSION=y\n-CT_TOOLCHAIN_PKGVERSION=\"\"\n-CT_TOOLCHAIN_BUGURL=\"\"\n-\n-#\n-# Tuple completion and aliasing\n-#\n-CT_TARGET_VENDOR=\"unknown\"\n-CT_TARGET_ALIAS_SED_EXPR=\"\"\n-CT_TARGET_ALIAS=\"\"\n-\n-#\n-# Toolchain type\n-#\n-CT_CROSS=y\n-# CT_CANADIAN is not set\n-CT_TOOLCHAIN_TYPE=\"cross\"\n-\n-#\n-# Build system\n-#\n-CT_BUILD=\"\"\n-CT_BUILD_PREFIX=\"\"\n-CT_BUILD_SUFFIX=\"\"\n-\n-#\n-# Misc options\n-#\n-# CT_TOOLCHAIN_ENABLE_NLS is not set\n-\n-#\n-# Operating System\n-#\n-CT_KERNEL_SUPPORTS_SHARED_LIBS=y\n-# CT_KERNEL_BARE_METAL is not set\n-CT_KERNEL_LINUX=y\n-CT_KERNEL=\"linux\"\n-CT_KERNEL_CHOICE_KSYM=\"LINUX\"\n-CT_KERNEL_LINUX_SHOW=y\n-\n-#\n-# Options for linux\n-#\n-CT_KERNEL_LINUX_PKG_KSYM=\"LINUX\"\n-CT_LINUX_DIR_NAME=\"linux\"\n-CT_LINUX_PKG_NAME=\"linux\"\n-CT_LINUX_SRC_RELEASE=y\n-CT_LINUX_PATCH_ORDER=\"global\"\n-# CT_LINUX_V_4_20 is not set\n-# CT_LINUX_V_4_19 is not set\n-# CT_LINUX_V_4_18 is not set\n-# CT_LINUX_V_4_17 is not set\n-# CT_LINUX_V_4_16 is not set\n-# CT_LINUX_V_4_15 is not set\n-# CT_LINUX_V_4_14 is not set\n-# CT_LINUX_V_4_13 is not set\n-# CT_LINUX_V_4_12 is not set\n-# CT_LINUX_V_4_11 is not set\n-# CT_LINUX_V_4_10 is not set\n-# CT_LINUX_V_4_9 is not set\n-# CT_LINUX_V_4_4 is not set\n-# CT_LINUX_V_4_1 is not set\n-# CT_LINUX_V_3_16 is not set\n-# CT_LINUX_V_3_13 is not set\n-# CT_LINUX_V_3_12 is not set\n-# CT_LINUX_V_3_10 is not set\n-# CT_LINUX_V_3_4 is not set\n-CT_LINUX_V_3_2=y\n-# CT_LINUX_V_2_6_32 is not set\n-# CT_LINUX_NO_VERSIONS is not set\n-CT_LINUX_VERSION=\"3.2.101\"\n-CT_LINUX_MIRRORS=\"$(CT_Mirrors kernel.org linux ${CT_LINUX_VERSION})\"\n-CT_LINUX_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_LINUX_SIGNATURE_FORMAT=\"unpacked/.sign\"\n-CT_LINUX_4_8_or_older=y\n-CT_LINUX_older_than_4_8=y\n-CT_LINUX_3_7_or_older=y\n-CT_LINUX_older_than_3_7=y\n-CT_LINUX_later_than_3_2=y\n-CT_LINUX_3_2_or_later=y\n-CT_KERNEL_LINUX_VERBOSITY_0=y\n-# CT_KERNEL_LINUX_VERBOSITY_1 is not set\n-# CT_KERNEL_LINUX_VERBOSITY_2 is not set\n-CT_KERNEL_LINUX_VERBOSE_LEVEL=0\n-CT_KERNEL_LINUX_INSTALL_CHECK=y\n-CT_ALL_KERNEL_CHOICES=\"BARE_METAL LINUX WINDOWS\"\n-\n-#\n-# Common kernel options\n-#\n-CT_SHARED_LIBS=y\n-\n-#\n-# Binary utilities\n-#\n-CT_ARCH_BINFMT_ELF=y\n-CT_BINUTILS_BINUTILS=y\n-CT_BINUTILS=\"binutils\"\n-CT_BINUTILS_CHOICE_KSYM=\"BINUTILS\"\n-CT_BINUTILS_BINUTILS_SHOW=y\n-\n-#\n-# Options for binutils\n-#\n-CT_BINUTILS_BINUTILS_PKG_KSYM=\"BINUTILS\"\n-CT_BINUTILS_DIR_NAME=\"binutils\"\n-CT_BINUTILS_USE_GNU=y\n-CT_BINUTILS_USE=\"BINUTILS\"\n-CT_BINUTILS_PKG_NAME=\"binutils\"\n-CT_BINUTILS_SRC_RELEASE=y\n-CT_BINUTILS_PATCH_ORDER=\"global\"\n-CT_BINUTILS_V_2_32=y\n-# CT_BINUTILS_V_2_31 is not set\n-# CT_BINUTILS_V_2_30 is not set\n-# CT_BINUTILS_V_2_29 is not set\n-# CT_BINUTILS_V_2_28 is not set\n-# CT_BINUTILS_V_2_27 is not set\n-# CT_BINUTILS_V_2_26 is not set\n-# CT_BINUTILS_NO_VERSIONS is not set\n-CT_BINUTILS_VERSION=\"2.32\"\n-CT_BINUTILS_MIRRORS=\"$(CT_Mirrors GNU binutils) $(CT_Mirrors sourceware binutils/releases)\"\n-CT_BINUTILS_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_BINUTILS_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_BINUTILS_later_than_2_30=y\n-CT_BINUTILS_2_30_or_later=y\n-CT_BINUTILS_later_than_2_27=y\n-CT_BINUTILS_2_27_or_later=y\n-CT_BINUTILS_later_than_2_25=y\n-CT_BINUTILS_2_25_or_later=y\n-CT_BINUTILS_later_than_2_23=y\n-CT_BINUTILS_2_23_or_later=y\n-\n-#\n-# GNU binutils\n-#\n-CT_BINUTILS_HAS_HASH_STYLE=y\n-CT_BINUTILS_HAS_GOLD=y\n-CT_BINUTILS_HAS_PLUGINS=y\n-CT_BINUTILS_HAS_PKGVERSION_BUGURL=y\n-CT_BINUTILS_GOLD_SUPPORTS_ARCH=y\n-CT_BINUTILS_GOLD_SUPPORT=y\n-CT_BINUTILS_FORCE_LD_BFD_DEFAULT=y\n-CT_BINUTILS_LINKER_LD=y\n-# CT_BINUTILS_LINKER_LD_GOLD is not set\n-CT_BINUTILS_LINKERS_LIST=\"ld\"\n-CT_BINUTILS_LINKER_DEFAULT=\"bfd\"\n-# CT_BINUTILS_PLUGINS is not set\n-CT_BINUTILS_RELRO=m\n-CT_BINUTILS_EXTRA_CONFIG_ARRAY=\"\"\n-# CT_BINUTILS_FOR_TARGET is not set\n-CT_ALL_BINUTILS_CHOICES=\"BINUTILS\"\n-\n-#\n-# C-library\n-#\n-CT_LIBC_GLIBC=y\n-# CT_LIBC_UCLIBC is not set\n-CT_LIBC=\"glibc\"\n-CT_LIBC_CHOICE_KSYM=\"GLIBC\"\n-CT_THREADS=\"nptl\"\n-CT_LIBC_GLIBC_SHOW=y\n-\n-#\n-# Options for glibc\n-#\n-CT_LIBC_GLIBC_PKG_KSYM=\"GLIBC\"\n-CT_GLIBC_DIR_NAME=\"glibc\"\n-CT_GLIBC_USE_GNU=y\n-CT_GLIBC_USE=\"GLIBC\"\n-CT_GLIBC_PKG_NAME=\"glibc\"\n-CT_GLIBC_SRC_RELEASE=y\n-CT_GLIBC_PATCH_ORDER=\"global\"\n-# CT_GLIBC_V_2_29 is not set\n-# CT_GLIBC_V_2_28 is not set\n-# CT_GLIBC_V_2_27 is not set\n-# CT_GLIBC_V_2_26 is not set\n-# CT_GLIBC_V_2_25 is not set\n-# CT_GLIBC_V_2_24 is not set\n-# CT_GLIBC_V_2_23 is not set\n-# CT_GLIBC_V_2_19 is not set\n-CT_GLIBC_V_2_17=y\n-# CT_GLIBC_V_2_12_1 is not set\n-# CT_GLIBC_NO_VERSIONS is not set\n-CT_GLIBC_VERSION=\"2.17\"\n-CT_GLIBC_MIRRORS=\"$(CT_Mirrors GNU glibc)\"\n-CT_GLIBC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_GLIBC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GLIBC_2_29_or_older=y\n-CT_GLIBC_older_than_2_29=y\n-CT_GLIBC_2_27_or_older=y\n-CT_GLIBC_older_than_2_27=y\n-CT_GLIBC_2_26_or_older=y\n-CT_GLIBC_older_than_2_26=y\n-CT_GLIBC_2_25_or_older=y\n-CT_GLIBC_older_than_2_25=y\n-CT_GLIBC_2_24_or_older=y\n-CT_GLIBC_older_than_2_24=y\n-CT_GLIBC_2_23_or_older=y\n-CT_GLIBC_older_than_2_23=y\n-CT_GLIBC_2_20_or_older=y\n-CT_GLIBC_older_than_2_20=y\n-CT_GLIBC_2_17_or_later=y\n-CT_GLIBC_2_17_or_older=y\n-CT_GLIBC_later_than_2_14=y\n-CT_GLIBC_2_14_or_later=y\n-CT_GLIBC_DEP_KERNEL_HEADERS_VERSION=y\n-CT_GLIBC_DEP_BINUTILS=y\n-CT_GLIBC_DEP_GCC=y\n-CT_GLIBC_DEP_PYTHON=y\n-CT_GLIBC_HAS_NPTL_ADDON=y\n-CT_GLIBC_HAS_PORTS_ADDON=y\n-CT_GLIBC_HAS_LIBIDN_ADDON=y\n-CT_GLIBC_USE_PORTS_ADDON=y\n-CT_GLIBC_USE_NPTL_ADDON=y\n-# CT_GLIBC_USE_LIBIDN_ADDON is not set\n-CT_GLIBC_HAS_OBSOLETE_RPC=y\n-CT_GLIBC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_GLIBC_CONFIGPARMS=\"\"\n-CT_GLIBC_EXTRA_CFLAGS=\"\"\n-CT_GLIBC_ENABLE_OBSOLETE_RPC=y\n-# CT_GLIBC_DISABLE_VERSIONING is not set\n-CT_GLIBC_OLDEST_ABI=\"\"\n-CT_GLIBC_FORCE_UNWIND=y\n-# CT_GLIBC_LOCALES is not set\n-# CT_GLIBC_KERNEL_VERSION_NONE is not set\n-CT_GLIBC_KERNEL_VERSION_AS_HEADERS=y\n-# CT_GLIBC_KERNEL_VERSION_CHOSEN is not set\n-CT_GLIBC_MIN_KERNEL=\"3.2.101\"\n-CT_ALL_LIBC_CHOICES=\"AVR_LIBC BIONIC GLIBC MINGW_W64 MOXIEBOX MUSL NEWLIB NONE UCLIBC\"\n-CT_LIBC_SUPPORT_THREADS_ANY=y\n-CT_LIBC_SUPPORT_THREADS_NATIVE=y\n-\n-#\n-# Common C library options\n-#\n-CT_THREADS_NATIVE=y\n-# CT_CREATE_LDSO_CONF is not set\n-CT_LIBC_XLDD=y\n-\n-#\n-# C compiler\n-#\n-CT_CC_CORE_PASSES_NEEDED=y\n-CT_CC_CORE_PASS_1_NEEDED=y\n-CT_CC_CORE_PASS_2_NEEDED=y\n-CT_CC_SUPPORT_CXX=y\n-CT_CC_SUPPORT_FORTRAN=y\n-CT_CC_SUPPORT_ADA=y\n-CT_CC_SUPPORT_OBJC=y\n-CT_CC_SUPPORT_OBJCXX=y\n-CT_CC_SUPPORT_GOLANG=y\n-CT_CC_GCC=y\n-CT_CC=\"gcc\"\n-CT_CC_CHOICE_KSYM=\"GCC\"\n-CT_CC_GCC_SHOW=y\n-\n-#\n-# Options for gcc\n-#\n-CT_CC_GCC_PKG_KSYM=\"GCC\"\n-CT_GCC_DIR_NAME=\"gcc\"\n-CT_GCC_USE_GNU=y\n-CT_GCC_USE=\"GCC\"\n-CT_GCC_PKG_NAME=\"gcc\"\n-CT_GCC_SRC_RELEASE=y\n-CT_GCC_PATCH_ORDER=\"global\"\n-CT_GCC_V_8=y\n-# CT_GCC_V_7 is not set\n-# CT_GCC_V_6 is not set\n-# CT_GCC_V_5 is not set\n-# CT_GCC_V_4_9 is not set\n-# CT_GCC_NO_VERSIONS is not set\n-CT_GCC_VERSION=\"8.3.0\"\n-CT_GCC_MIRRORS=\"$(CT_Mirrors GNU gcc/gcc-${CT_GCC_VERSION}) $(CT_Mirrors sourceware gcc/releases/gcc-${CT_GCC_VERSION})\"\n-CT_GCC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_GCC_SIGNATURE_FORMAT=\"\"\n-CT_GCC_later_than_7=y\n-CT_GCC_7_or_later=y\n-CT_GCC_later_than_6=y\n-CT_GCC_6_or_later=y\n-CT_GCC_later_than_5=y\n-CT_GCC_5_or_later=y\n-CT_GCC_later_than_4_9=y\n-CT_GCC_4_9_or_later=y\n-CT_GCC_later_than_4_8=y\n-CT_GCC_4_8_or_later=y\n-CT_CC_GCC_HAS_LIBMPX=y\n-CT_CC_GCC_ENABLE_CXX_FLAGS=\"\"\n-CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_STATIC_LIBSTDCXX=y\n-# CT_CC_GCC_SYSTEM_ZLIB is not set\n-CT_CC_GCC_CONFIG_TLS=m\n-\n-#\n-# Optimisation features\n-#\n-CT_CC_GCC_USE_GRAPHITE=y\n-CT_CC_GCC_USE_LTO=y\n-\n-#\n-# Settings for libraries running on target\n-#\n-CT_CC_GCC_ENABLE_TARGET_OPTSPACE=y\n-# CT_CC_GCC_LIBMUDFLAP is not set\n-# CT_CC_GCC_LIBGOMP is not set\n-# CT_CC_GCC_LIBSSP is not set\n-# CT_CC_GCC_LIBQUADMATH is not set\n-# CT_CC_GCC_LIBSANITIZER is not set\n-\n-#\n-# Misc. obscure options.\n-#\n-CT_CC_CXA_ATEXIT=y\n-# CT_CC_GCC_DISABLE_PCH is not set\n-CT_CC_GCC_SJLJ_EXCEPTIONS=m\n-CT_CC_GCC_LDBL_128=m\n-# CT_CC_GCC_BUILD_ID is not set\n-CT_CC_GCC_LNK_HASH_STYLE_DEFAULT=y\n-# CT_CC_GCC_LNK_HASH_STYLE_SYSV is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_GNU is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_BOTH is not set\n-CT_CC_GCC_LNK_HASH_STYLE=\"\"\n-CT_CC_GCC_DEC_FLOAT_AUTO=y\n-# CT_CC_GCC_DEC_FLOAT_BID is not set\n-# CT_CC_GCC_DEC_FLOAT_DPD is not set\n-# CT_CC_GCC_DEC_FLOATS_NO is not set\n-CT_ALL_CC_CHOICES=\"GCC\"\n-\n-#\n-# Additional supported languages:\n-#\n-CT_CC_LANG_CXX=y\n-# CT_CC_LANG_FORTRAN is not set\n-\n-#\n-# Debug facilities\n-#\n-# CT_DEBUG_DUMA is not set\n-# CT_DEBUG_GDB is not set\n-# CT_DEBUG_LTRACE is not set\n-# CT_DEBUG_STRACE is not set\n-CT_ALL_DEBUG_CHOICES=\"DUMA GDB LTRACE STRACE\"\n-\n-#\n-# Companion libraries\n-#\n-# CT_COMPLIBS_CHECK is not set\n-# CT_COMP_LIBS_CLOOG is not set\n-# CT_COMP_LIBS_EXPAT is not set\n-CT_COMP_LIBS_GETTEXT=y\n-CT_COMP_LIBS_GETTEXT_PKG_KSYM=\"GETTEXT\"\n-CT_GETTEXT_DIR_NAME=\"gettext\"\n-CT_GETTEXT_PKG_NAME=\"gettext\"\n-CT_GETTEXT_SRC_RELEASE=y\n-CT_GETTEXT_PATCH_ORDER=\"global\"\n-CT_GETTEXT_V_0_19_8_1=y\n-# CT_GETTEXT_NO_VERSIONS is not set\n-CT_GETTEXT_VERSION=\"0.19.8.1\"\n-CT_GETTEXT_MIRRORS=\"$(CT_Mirrors GNU gettext)\"\n-CT_GETTEXT_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.gz\"\n-CT_GETTEXT_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_GMP=y\n-CT_COMP_LIBS_GMP_PKG_KSYM=\"GMP\"\n-CT_GMP_DIR_NAME=\"gmp\"\n-CT_GMP_PKG_NAME=\"gmp\"\n-CT_GMP_SRC_RELEASE=y\n-CT_GMP_PATCH_ORDER=\"global\"\n-CT_GMP_V_6_1=y\n-# CT_GMP_NO_VERSIONS is not set\n-CT_GMP_VERSION=\"6.1.2\"\n-CT_GMP_MIRRORS=\"https://gmplib.org/download/gmp https://gmplib.org/download/gmp/archive $(CT_Mirrors GNU gmp)\"\n-CT_GMP_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.bz2\"\n-CT_GMP_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GMP_later_than_5_1_0=y\n-CT_GMP_5_1_0_or_later=y\n-CT_GMP_later_than_5_0_0=y\n-CT_GMP_5_0_0_or_later=y\n-CT_GMP_REQUIRE_5_0_0_or_later=y\n-CT_COMP_LIBS_ISL=y\n-CT_COMP_LIBS_ISL_PKG_KSYM=\"ISL\"\n-CT_ISL_DIR_NAME=\"isl\"\n-CT_ISL_PKG_NAME=\"isl\"\n-CT_ISL_SRC_RELEASE=y\n-CT_ISL_PATCH_ORDER=\"global\"\n-CT_ISL_V_0_20=y\n-# CT_ISL_V_0_19 is not set\n-# CT_ISL_V_0_18 is not set\n-# CT_ISL_V_0_17 is not set\n-# CT_ISL_V_0_16 is not set\n-# CT_ISL_V_0_15 is not set\n-# CT_ISL_NO_VERSIONS is not set\n-CT_ISL_VERSION=\"0.20\"\n-CT_ISL_MIRRORS=\"https://ci-mirrors.rust-lang.org/rustc\"\n-CT_ISL_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_ISL_SIGNATURE_FORMAT=\"\"\n-CT_ISL_later_than_0_18=y\n-CT_ISL_0_18_or_later=y\n-CT_ISL_later_than_0_15=y\n-CT_ISL_0_15_or_later=y\n-CT_ISL_REQUIRE_0_15_or_later=y\n-CT_ISL_later_than_0_14=y\n-CT_ISL_0_14_or_later=y\n-CT_ISL_REQUIRE_0_14_or_later=y\n-CT_ISL_later_than_0_13=y\n-CT_ISL_0_13_or_later=y\n-CT_ISL_later_than_0_12=y\n-CT_ISL_0_12_or_later=y\n-CT_ISL_REQUIRE_0_12_or_later=y\n-# CT_COMP_LIBS_LIBELF is not set\n-CT_COMP_LIBS_LIBICONV=y\n-CT_COMP_LIBS_LIBICONV_PKG_KSYM=\"LIBICONV\"\n-CT_LIBICONV_DIR_NAME=\"libiconv\"\n-CT_LIBICONV_PKG_NAME=\"libiconv\"\n-CT_LIBICONV_SRC_RELEASE=y\n-CT_LIBICONV_PATCH_ORDER=\"global\"\n-CT_LIBICONV_V_1_15=y\n-# CT_LIBICONV_NO_VERSIONS is not set\n-CT_LIBICONV_VERSION=\"1.15\"\n-CT_LIBICONV_MIRRORS=\"$(CT_Mirrors GNU libiconv)\"\n-CT_LIBICONV_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_LIBICONV_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_MPC=y\n-CT_COMP_LIBS_MPC_PKG_KSYM=\"MPC\"\n-CT_MPC_DIR_NAME=\"mpc\"\n-CT_MPC_PKG_NAME=\"mpc\"\n-CT_MPC_SRC_RELEASE=y\n-CT_MPC_PATCH_ORDER=\"global\"\n-CT_MPC_V_1_1=y\n-# CT_MPC_V_1_0 is not set\n-# CT_MPC_NO_VERSIONS is not set\n-CT_MPC_VERSION=\"1.1.0\"\n-CT_MPC_MIRRORS=\"http://www.multiprecision.org/downloads $(CT_Mirrors GNU mpc)\"\n-CT_MPC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_MPC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_MPC_1_1_0_or_later=y\n-CT_MPC_1_1_0_or_older=y\n-CT_COMP_LIBS_MPFR=y\n-CT_COMP_LIBS_MPFR_PKG_KSYM=\"MPFR\"\n-CT_MPFR_DIR_NAME=\"mpfr\"\n-CT_MPFR_PKG_NAME=\"mpfr\"\n-CT_MPFR_SRC_RELEASE=y\n-CT_MPFR_PATCH_ORDER=\"global\"\n-CT_MPFR_V_4_0=y\n-# CT_MPFR_V_3_1 is not set\n-# CT_MPFR_NO_VERSIONS is not set\n-CT_MPFR_VERSION=\"4.0.2\"\n-CT_MPFR_MIRRORS=\"http://www.mpfr.org/mpfr-${CT_MPFR_VERSION} $(CT_Mirrors GNU mpfr)\"\n-CT_MPFR_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz .zip\"\n-CT_MPFR_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_MPFR_later_than_4_0_0=y\n-CT_MPFR_4_0_0_or_later=y\n-CT_MPFR_later_than_3_0_0=y\n-CT_MPFR_3_0_0_or_later=y\n-CT_MPFR_REQUIRE_3_0_0_or_later=y\n-CT_COMP_LIBS_NCURSES=y\n-CT_COMP_LIBS_NCURSES_PKG_KSYM=\"NCURSES\"\n-CT_NCURSES_DIR_NAME=\"ncurses\"\n-CT_NCURSES_PKG_NAME=\"ncurses\"\n-CT_NCURSES_SRC_RELEASE=y\n-CT_NCURSES_PATCH_ORDER=\"global\"\n-CT_NCURSES_V_6_1=y\n-# CT_NCURSES_V_6_0 is not set\n-# CT_NCURSES_NO_VERSIONS is not set\n-CT_NCURSES_VERSION=\"6.1\"\n-CT_NCURSES_MIRRORS=\"ftp://invisible-island.net/ncurses $(CT_Mirrors GNU ncurses)\"\n-CT_NCURSES_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_NCURSES_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_NCURSES_HOST_CONFIG_ARGS=\"\"\n-CT_NCURSES_HOST_DISABLE_DB=y\n-CT_NCURSES_HOST_FALLBACKS=\"linux,xterm,xterm-color,xterm-256color,vt100\"\n-CT_NCURSES_TARGET_CONFIG_ARGS=\"\"\n-# CT_NCURSES_TARGET_DISABLE_DB is not set\n-CT_NCURSES_TARGET_FALLBACKS=\"\"\n-CT_COMP_LIBS_ZLIB=y\n-CT_COMP_LIBS_ZLIB_PKG_KSYM=\"ZLIB\"\n-CT_ZLIB_DIR_NAME=\"zlib\"\n-CT_ZLIB_PKG_NAME=\"zlib\"\n-CT_ZLIB_SRC_RELEASE=y\n-CT_ZLIB_PATCH_ORDER=\"global\"\n-CT_ZLIB_V_1_2_11=y\n-# CT_ZLIB_NO_VERSIONS is not set\n-CT_ZLIB_VERSION=\"1.2.11\"\n-CT_ZLIB_MIRRORS=\"https://downloads.sourceforge.net/project/libpng/zlib/${CT_ZLIB_VERSION}\"\n-CT_ZLIB_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_ZLIB_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_ALL_COMP_LIBS_CHOICES=\"CLOOG EXPAT GETTEXT GMP ISL LIBELF LIBICONV MPC MPFR NCURSES ZLIB\"\n-CT_LIBICONV_NEEDED=y\n-CT_GETTEXT_NEEDED=y\n-CT_GMP_NEEDED=y\n-CT_MPFR_NEEDED=y\n-CT_ISL_NEEDED=y\n-CT_MPC_NEEDED=y\n-CT_NCURSES_NEEDED=y\n-CT_ZLIB_NEEDED=y\n-CT_LIBICONV=y\n-CT_GETTEXT=y\n-CT_GMP=y\n-CT_MPFR=y\n-CT_ISL=y\n-CT_MPC=y\n-CT_NCURSES=y\n-CT_ZLIB=y\n-\n-#\n-# Companion tools\n-#\n-# CT_COMP_TOOLS_FOR_HOST is not set\n-# CT_COMP_TOOLS_AUTOCONF is not set\n-# CT_COMP_TOOLS_AUTOMAKE is not set\n-# CT_COMP_TOOLS_BISON is not set\n-# CT_COMP_TOOLS_DTC is not set\n-# CT_COMP_TOOLS_LIBTOOL is not set\n-# CT_COMP_TOOLS_M4 is not set\n-# CT_COMP_TOOLS_MAKE is not set\n-CT_ALL_COMP_TOOLS_CHOICES=\"AUTOCONF AUTOMAKE BISON DTC LIBTOOL M4 MAKE\""}, {"sha": "c7c5b4d5a286575d357e4791afcb47363713b9f4", "filename": "src/ci/docker/host-x86_64/dist-armhf-linux/arm-linux-gnueabihf.defconfig", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armhf-linux%2Farm-linux-gnueabihf.defconfig", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armhf-linux%2Farm-linux-gnueabihf.defconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armhf-linux%2Farm-linux-gnueabihf.defconfig?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -0,0 +1,14 @@\n+CT_CONFIG_VERSION=\"4\"\n+CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n+CT_USE_MIRROR=y\n+CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n+CT_ARCH_ARM=y\n+CT_ARCH_ARCH=\"armv6\"\n+CT_ARCH_FPU=\"vfp\"\n+CT_ARCH_FLOAT_HW=y\n+CT_KERNEL_LINUX=y\n+CT_LINUX_V_3_2=y\n+CT_BINUTILS_V_2_32=y\n+CT_GLIBC_V_2_17=y\n+CT_GCC_V_8=y\n+CT_CC_LANG_CXX=y"}, {"sha": "dab0667ed55c4fa56fb36256a4ff4ad6cab9be98", "filename": "src/ci/docker/host-x86_64/dist-armv7-linux/Dockerfile", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2FDockerfile?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1,20 +1,18 @@\n-FROM ubuntu:20.04\n+FROM ubuntu:22.04\n \n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/crosstool-ng-1.24.sh /scripts/\n-RUN sh /scripts/crosstool-ng-1.24.sh\n+COPY scripts/crosstool-ng.sh /scripts/\n+RUN sh /scripts/crosstool-ng.sh\n \n COPY scripts/rustbuild-setup.sh /scripts/\n RUN sh /scripts/rustbuild-setup.sh\n-USER rustbuild\n WORKDIR /tmp\n \n-COPY host-x86_64/dist-armv7-linux/build-toolchains.sh host-x86_64/dist-armv7-linux/armv7-linux-gnueabihf.config /tmp/\n-RUN ./build-toolchains.sh\n-\n-USER root\n+COPY scripts/crosstool-ng-build.sh /scripts/\n+COPY host-x86_64/dist-armv7-linux/armv7-linux-gnueabihf.defconfig /tmp/crosstool.defconfig\n+RUN /scripts/crosstool-ng-build.sh\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "2d8167f1f33289e639153877c09fbf6dd85ebc31", "filename": "src/ci/docker/host-x86_64/dist-armv7-linux/armv7-linux-gnueabihf.config", "status": "removed", "additions": 0, "deletions": 746, "changes": 746, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2Farmv7-linux-gnueabihf.config", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2Farmv7-linux-gnueabihf.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2Farmv7-linux-gnueabihf.config?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,746 +0,0 @@\n-#\n-# Automatically generated file; DO NOT EDIT.\n-# crosstool-NG  Configuration\n-#\n-CT_CONFIGURE_has_static_link=y\n-CT_CONFIGURE_has_cxx11=y\n-CT_CONFIGURE_has_wget=y\n-CT_CONFIGURE_has_curl=y\n-CT_CONFIGURE_has_make_3_81_or_newer=y\n-CT_CONFIGURE_has_make_4_0_or_newer=y\n-CT_CONFIGURE_has_libtool_2_4_or_newer=y\n-CT_CONFIGURE_has_libtoolize_2_4_or_newer=y\n-CT_CONFIGURE_has_autoconf_2_65_or_newer=y\n-CT_CONFIGURE_has_autoreconf_2_65_or_newer=y\n-CT_CONFIGURE_has_automake_1_15_or_newer=y\n-CT_CONFIGURE_has_gnu_m4_1_4_12_or_newer=y\n-CT_CONFIGURE_has_python_3_4_or_newer=y\n-CT_CONFIGURE_has_bison_2_7_or_newer=y\n-CT_CONFIGURE_has_python=y\n-CT_CONFIGURE_has_git=y\n-CT_CONFIGURE_has_md5sum=y\n-CT_CONFIGURE_has_sha1sum=y\n-CT_CONFIGURE_has_sha256sum=y\n-CT_CONFIGURE_has_sha512sum=y\n-CT_CONFIGURE_has_install_with_strip_program=y\n-CT_CONFIG_VERSION_CURRENT=\"3\"\n-CT_CONFIG_VERSION=\"3\"\n-CT_MODULES=y\n-\n-#\n-# Paths and misc options\n-#\n-\n-#\n-# crosstool-NG behavior\n-#\n-# CT_OBSOLETE is not set\n-# CT_EXPERIMENTAL is not set\n-# CT_DEBUG_CT is not set\n-\n-#\n-# Paths\n-#\n-CT_LOCAL_TARBALLS_DIR=\"\"\n-# CT_TARBALLS_BUILDROOT_LAYOUT is not set\n-CT_WORK_DIR=\"${CT_TOP_DIR}/.build\"\n-CT_BUILD_TOP_DIR=\"${CT_WORK_DIR:-${CT_TOP_DIR}/.build}/${CT_HOST:+HOST-${CT_HOST}/}${CT_TARGET}\"\n-CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n-CT_RM_RF_PREFIX_DIR=y\n-CT_REMOVE_DOCS=y\n-CT_INSTALL_LICENSES=y\n-CT_PREFIX_DIR_RO=y\n-CT_STRIP_HOST_TOOLCHAIN_EXECUTABLES=y\n-# CT_STRIP_TARGET_TOOLCHAIN_EXECUTABLES is not set\n-\n-#\n-# Downloading\n-#\n-CT_DOWNLOAD_AGENT_WGET=y\n-# CT_DOWNLOAD_AGENT_CURL is not set\n-# CT_DOWNLOAD_AGENT_NONE is not set\n-# CT_FORBID_DOWNLOAD is not set\n-# CT_FORCE_DOWNLOAD is not set\n-CT_CONNECT_TIMEOUT=10\n-CT_DOWNLOAD_WGET_OPTIONS=\"--passive-ftp --tries=3 -nc --progress=dot:binary\"\n-# CT_ONLY_DOWNLOAD is not set\n-# CT_USE_MIRROR is not set\n-CT_VERIFY_DOWNLOAD_DIGEST=y\n-CT_VERIFY_DOWNLOAD_DIGEST_SHA512=y\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA256 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA1 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_MD5 is not set\n-CT_VERIFY_DOWNLOAD_DIGEST_ALG=\"sha512\"\n-# CT_VERIFY_DOWNLOAD_SIGNATURE is not set\n-\n-#\n-# Extracting\n-#\n-# CT_FORCE_EXTRACT is not set\n-CT_OVERRIDE_CONFIG_GUESS_SUB=y\n-# CT_ONLY_EXTRACT is not set\n-CT_PATCH_BUNDLED=y\n-# CT_PATCH_BUNDLED_LOCAL is not set\n-CT_PATCH_ORDER=\"bundled\"\n-\n-#\n-# Build behavior\n-#\n-CT_PARALLEL_JOBS=0\n-CT_LOAD=\"\"\n-CT_USE_PIPES=y\n-CT_EXTRA_CFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_LDFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_CFLAGS_FOR_HOST=\"\"\n-CT_EXTRA_LDFLAGS_FOR_HOST=\"\"\n-# CT_CONFIG_SHELL_SH is not set\n-# CT_CONFIG_SHELL_ASH is not set\n-CT_CONFIG_SHELL_BASH=y\n-# CT_CONFIG_SHELL_CUSTOM is not set\n-CT_CONFIG_SHELL=\"${bash}\"\n-\n-#\n-# Logging\n-#\n-# CT_LOG_ERROR is not set\n-# CT_LOG_WARN is not set\n-CT_LOG_INFO=y\n-# CT_LOG_EXTRA is not set\n-# CT_LOG_ALL is not set\n-# CT_LOG_DEBUG is not set\n-CT_LOG_LEVEL_MAX=\"INFO\"\n-# CT_LOG_SEE_TOOLS_WARN is not set\n-CT_LOG_PROGRESS_BAR=y\n-CT_LOG_TO_FILE=y\n-CT_LOG_FILE_COMPRESS=y\n-\n-#\n-# Target options\n-#\n-# CT_ARCH_ALPHA is not set\n-# CT_ARCH_ARC is not set\n-CT_ARCH_ARM=y\n-# CT_ARCH_AVR is not set\n-# CT_ARCH_M68K is not set\n-# CT_ARCH_MIPS is not set\n-# CT_ARCH_NIOS2 is not set\n-# CT_ARCH_POWERPC is not set\n-# CT_ARCH_S390 is not set\n-# CT_ARCH_SH is not set\n-# CT_ARCH_SPARC is not set\n-# CT_ARCH_X86 is not set\n-# CT_ARCH_XTENSA is not set\n-CT_ARCH=\"arm\"\n-CT_ARCH_CHOICE_KSYM=\"ARM\"\n-CT_ARCH_CPU=\"\"\n-CT_ARCH_TUNE=\"\"\n-CT_ARCH_ARM_SHOW=y\n-\n-#\n-# Options for arm\n-#\n-CT_ARCH_ARM_PKG_KSYM=\"\"\n-CT_ARCH_ARM_MODE=\"thumb\"\n-# CT_ARCH_ARM_MODE_ARM is not set\n-CT_ARCH_ARM_MODE_THUMB=y\n-# CT_ARCH_ARM_INTERWORKING is not set\n-CT_ARCH_ARM_EABI_FORCE=y\n-CT_ARCH_ARM_EABI=y\n-CT_ARCH_ARM_TUPLE_USE_EABIHF=y\n-CT_ALL_ARCH_CHOICES=\"ALPHA ARC ARM AVR M68K MICROBLAZE MIPS MOXIE MSP430 NIOS2 POWERPC RISCV S390 SH SPARC X86 XTENSA\"\n-CT_ARCH_SUFFIX=\"v7\"\n-# CT_OMIT_TARGET_VENDOR is not set\n-\n-#\n-# Generic target options\n-#\n-# CT_MULTILIB is not set\n-CT_DEMULTILIB=y\n-CT_ARCH_SUPPORTS_BOTH_MMU=y\n-CT_ARCH_DEFAULT_HAS_MMU=y\n-CT_ARCH_USE_MMU=y\n-CT_ARCH_SUPPORTS_FLAT_FORMAT=y\n-CT_ARCH_SUPPORTS_EITHER_ENDIAN=y\n-CT_ARCH_DEFAULT_LE=y\n-# CT_ARCH_BE is not set\n-CT_ARCH_LE=y\n-CT_ARCH_ENDIAN=\"little\"\n-CT_ARCH_SUPPORTS_32=y\n-CT_ARCH_SUPPORTS_64=y\n-CT_ARCH_DEFAULT_32=y\n-CT_ARCH_BITNESS=32\n-CT_ARCH_32=y\n-# CT_ARCH_64 is not set\n-\n-#\n-# Target optimisations\n-#\n-CT_ARCH_SUPPORTS_WITH_ARCH=y\n-CT_ARCH_SUPPORTS_WITH_CPU=y\n-CT_ARCH_SUPPORTS_WITH_TUNE=y\n-CT_ARCH_SUPPORTS_WITH_FLOAT=y\n-CT_ARCH_SUPPORTS_WITH_FPU=y\n-CT_ARCH_SUPPORTS_SOFTFP=y\n-CT_ARCH_EXCLUSIVE_WITH_CPU=y\n-CT_ARCH_ARCH=\"armv7-a\"\n-CT_ARCH_FPU=\"vfpv3-d16\"\n-# CT_ARCH_FLOAT_AUTO is not set\n-CT_ARCH_FLOAT_HW=y\n-# CT_ARCH_FLOAT_SOFTFP is not set\n-# CT_ARCH_FLOAT_SW is not set\n-CT_TARGET_CFLAGS=\"\"\n-CT_TARGET_LDFLAGS=\"\"\n-CT_ARCH_FLOAT=\"hard\"\n-\n-#\n-# Toolchain options\n-#\n-\n-#\n-# General toolchain options\n-#\n-CT_FORCE_SYSROOT=y\n-CT_USE_SYSROOT=y\n-CT_SYSROOT_NAME=\"sysroot\"\n-CT_SYSROOT_DIR_PREFIX=\"\"\n-CT_WANTS_STATIC_LINK=y\n-CT_WANTS_STATIC_LINK_CXX=y\n-# CT_STATIC_TOOLCHAIN is not set\n-CT_SHOW_CT_VERSION=y\n-CT_TOOLCHAIN_PKGVERSION=\"\"\n-CT_TOOLCHAIN_BUGURL=\"\"\n-\n-#\n-# Tuple completion and aliasing\n-#\n-CT_TARGET_VENDOR=\"unknown\"\n-CT_TARGET_ALIAS_SED_EXPR=\"\"\n-CT_TARGET_ALIAS=\"\"\n-\n-#\n-# Toolchain type\n-#\n-CT_CROSS=y\n-# CT_CANADIAN is not set\n-CT_TOOLCHAIN_TYPE=\"cross\"\n-\n-#\n-# Build system\n-#\n-CT_BUILD=\"\"\n-CT_BUILD_PREFIX=\"\"\n-CT_BUILD_SUFFIX=\"\"\n-\n-#\n-# Misc options\n-#\n-# CT_TOOLCHAIN_ENABLE_NLS is not set\n-\n-#\n-# Operating System\n-#\n-CT_KERNEL_SUPPORTS_SHARED_LIBS=y\n-# CT_KERNEL_BARE_METAL is not set\n-CT_KERNEL_LINUX=y\n-CT_KERNEL=\"linux\"\n-CT_KERNEL_CHOICE_KSYM=\"LINUX\"\n-CT_KERNEL_LINUX_SHOW=y\n-\n-#\n-# Options for linux\n-#\n-CT_KERNEL_LINUX_PKG_KSYM=\"LINUX\"\n-CT_LINUX_DIR_NAME=\"linux\"\n-CT_LINUX_PKG_NAME=\"linux\"\n-CT_LINUX_SRC_RELEASE=y\n-CT_LINUX_PATCH_ORDER=\"global\"\n-# CT_LINUX_V_4_20 is not set\n-# CT_LINUX_V_4_19 is not set\n-# CT_LINUX_V_4_18 is not set\n-# CT_LINUX_V_4_17 is not set\n-# CT_LINUX_V_4_16 is not set\n-# CT_LINUX_V_4_15 is not set\n-# CT_LINUX_V_4_14 is not set\n-# CT_LINUX_V_4_13 is not set\n-# CT_LINUX_V_4_12 is not set\n-# CT_LINUX_V_4_11 is not set\n-# CT_LINUX_V_4_10 is not set\n-# CT_LINUX_V_4_9 is not set\n-# CT_LINUX_V_4_4 is not set\n-# CT_LINUX_V_4_1 is not set\n-# CT_LINUX_V_3_16 is not set\n-# CT_LINUX_V_3_13 is not set\n-# CT_LINUX_V_3_12 is not set\n-# CT_LINUX_V_3_10 is not set\n-# CT_LINUX_V_3_4 is not set\n-CT_LINUX_V_3_2=y\n-# CT_LINUX_V_2_6_32 is not set\n-# CT_LINUX_NO_VERSIONS is not set\n-CT_LINUX_VERSION=\"3.2.101\"\n-CT_LINUX_MIRRORS=\"$(CT_Mirrors kernel.org linux ${CT_LINUX_VERSION})\"\n-CT_LINUX_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_LINUX_SIGNATURE_FORMAT=\"unpacked/.sign\"\n-CT_LINUX_4_8_or_older=y\n-CT_LINUX_older_than_4_8=y\n-CT_LINUX_3_7_or_older=y\n-CT_LINUX_older_than_3_7=y\n-CT_LINUX_later_than_3_2=y\n-CT_LINUX_3_2_or_later=y\n-CT_KERNEL_LINUX_VERBOSITY_0=y\n-# CT_KERNEL_LINUX_VERBOSITY_1 is not set\n-# CT_KERNEL_LINUX_VERBOSITY_2 is not set\n-CT_KERNEL_LINUX_VERBOSE_LEVEL=0\n-CT_KERNEL_LINUX_INSTALL_CHECK=y\n-CT_ALL_KERNEL_CHOICES=\"BARE_METAL LINUX WINDOWS\"\n-\n-#\n-# Common kernel options\n-#\n-CT_SHARED_LIBS=y\n-\n-#\n-# Binary utilities\n-#\n-CT_ARCH_BINFMT_ELF=y\n-CT_BINUTILS_BINUTILS=y\n-CT_BINUTILS=\"binutils\"\n-CT_BINUTILS_CHOICE_KSYM=\"BINUTILS\"\n-CT_BINUTILS_BINUTILS_SHOW=y\n-\n-#\n-# Options for binutils\n-#\n-CT_BINUTILS_BINUTILS_PKG_KSYM=\"BINUTILS\"\n-CT_BINUTILS_DIR_NAME=\"binutils\"\n-CT_BINUTILS_USE_GNU=y\n-CT_BINUTILS_USE=\"BINUTILS\"\n-CT_BINUTILS_PKG_NAME=\"binutils\"\n-CT_BINUTILS_SRC_RELEASE=y\n-CT_BINUTILS_PATCH_ORDER=\"global\"\n-CT_BINUTILS_V_2_32=y\n-# CT_BINUTILS_V_2_31 is not set\n-# CT_BINUTILS_V_2_30 is not set\n-# CT_BINUTILS_V_2_29 is not set\n-# CT_BINUTILS_V_2_28 is not set\n-# CT_BINUTILS_V_2_27 is not set\n-# CT_BINUTILS_V_2_26 is not set\n-# CT_BINUTILS_NO_VERSIONS is not set\n-CT_BINUTILS_VERSION=\"2.32\"\n-CT_BINUTILS_MIRRORS=\"$(CT_Mirrors GNU binutils) $(CT_Mirrors sourceware binutils/releases)\"\n-CT_BINUTILS_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_BINUTILS_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_BINUTILS_later_than_2_30=y\n-CT_BINUTILS_2_30_or_later=y\n-CT_BINUTILS_later_than_2_27=y\n-CT_BINUTILS_2_27_or_later=y\n-CT_BINUTILS_later_than_2_25=y\n-CT_BINUTILS_2_25_or_later=y\n-CT_BINUTILS_later_than_2_23=y\n-CT_BINUTILS_2_23_or_later=y\n-\n-#\n-# GNU binutils\n-#\n-CT_BINUTILS_HAS_HASH_STYLE=y\n-CT_BINUTILS_HAS_GOLD=y\n-CT_BINUTILS_HAS_PLUGINS=y\n-CT_BINUTILS_HAS_PKGVERSION_BUGURL=y\n-CT_BINUTILS_GOLD_SUPPORTS_ARCH=y\n-CT_BINUTILS_GOLD_SUPPORT=y\n-CT_BINUTILS_FORCE_LD_BFD_DEFAULT=y\n-CT_BINUTILS_LINKER_LD=y\n-# CT_BINUTILS_LINKER_LD_GOLD is not set\n-CT_BINUTILS_LINKERS_LIST=\"ld\"\n-CT_BINUTILS_LINKER_DEFAULT=\"bfd\"\n-# CT_BINUTILS_PLUGINS is not set\n-CT_BINUTILS_RELRO=m\n-CT_BINUTILS_EXTRA_CONFIG_ARRAY=\"\"\n-# CT_BINUTILS_FOR_TARGET is not set\n-CT_ALL_BINUTILS_CHOICES=\"BINUTILS\"\n-\n-#\n-# C-library\n-#\n-CT_LIBC_GLIBC=y\n-# CT_LIBC_UCLIBC is not set\n-CT_LIBC=\"glibc\"\n-CT_LIBC_CHOICE_KSYM=\"GLIBC\"\n-CT_THREADS=\"nptl\"\n-CT_LIBC_GLIBC_SHOW=y\n-\n-#\n-# Options for glibc\n-#\n-CT_LIBC_GLIBC_PKG_KSYM=\"GLIBC\"\n-CT_GLIBC_DIR_NAME=\"glibc\"\n-CT_GLIBC_USE_GNU=y\n-CT_GLIBC_USE=\"GLIBC\"\n-CT_GLIBC_PKG_NAME=\"glibc\"\n-CT_GLIBC_SRC_RELEASE=y\n-CT_GLIBC_PATCH_ORDER=\"global\"\n-# CT_GLIBC_V_2_29 is not set\n-# CT_GLIBC_V_2_28 is not set\n-# CT_GLIBC_V_2_27 is not set\n-# CT_GLIBC_V_2_26 is not set\n-# CT_GLIBC_V_2_25 is not set\n-# CT_GLIBC_V_2_24 is not set\n-# CT_GLIBC_V_2_23 is not set\n-# CT_GLIBC_V_2_19 is not set\n-CT_GLIBC_V_2_17=y\n-# CT_GLIBC_V_2_12_1 is not set\n-# CT_GLIBC_NO_VERSIONS is not set\n-CT_GLIBC_VERSION=\"2.17\"\n-CT_GLIBC_MIRRORS=\"$(CT_Mirrors GNU glibc)\"\n-CT_GLIBC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_GLIBC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GLIBC_2_29_or_older=y\n-CT_GLIBC_older_than_2_29=y\n-CT_GLIBC_2_27_or_older=y\n-CT_GLIBC_older_than_2_27=y\n-CT_GLIBC_2_26_or_older=y\n-CT_GLIBC_older_than_2_26=y\n-CT_GLIBC_2_25_or_older=y\n-CT_GLIBC_older_than_2_25=y\n-CT_GLIBC_2_24_or_older=y\n-CT_GLIBC_older_than_2_24=y\n-CT_GLIBC_2_23_or_older=y\n-CT_GLIBC_older_than_2_23=y\n-CT_GLIBC_2_20_or_older=y\n-CT_GLIBC_older_than_2_20=y\n-CT_GLIBC_2_17_or_later=y\n-CT_GLIBC_2_17_or_older=y\n-CT_GLIBC_later_than_2_14=y\n-CT_GLIBC_2_14_or_later=y\n-CT_GLIBC_DEP_KERNEL_HEADERS_VERSION=y\n-CT_GLIBC_DEP_BINUTILS=y\n-CT_GLIBC_DEP_GCC=y\n-CT_GLIBC_DEP_PYTHON=y\n-CT_GLIBC_HAS_NPTL_ADDON=y\n-CT_GLIBC_HAS_PORTS_ADDON=y\n-CT_GLIBC_HAS_LIBIDN_ADDON=y\n-CT_GLIBC_USE_PORTS_ADDON=y\n-CT_GLIBC_USE_NPTL_ADDON=y\n-# CT_GLIBC_USE_LIBIDN_ADDON is not set\n-CT_GLIBC_HAS_OBSOLETE_RPC=y\n-CT_GLIBC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_GLIBC_CONFIGPARMS=\"\"\n-CT_GLIBC_EXTRA_CFLAGS=\"\"\n-CT_GLIBC_ENABLE_OBSOLETE_RPC=y\n-# CT_GLIBC_DISABLE_VERSIONING is not set\n-CT_GLIBC_OLDEST_ABI=\"\"\n-CT_GLIBC_FORCE_UNWIND=y\n-# CT_GLIBC_LOCALES is not set\n-# CT_GLIBC_KERNEL_VERSION_NONE is not set\n-CT_GLIBC_KERNEL_VERSION_AS_HEADERS=y\n-# CT_GLIBC_KERNEL_VERSION_CHOSEN is not set\n-CT_GLIBC_MIN_KERNEL=\"3.2.101\"\n-CT_ALL_LIBC_CHOICES=\"AVR_LIBC BIONIC GLIBC MINGW_W64 MOXIEBOX MUSL NEWLIB NONE UCLIBC\"\n-CT_LIBC_SUPPORT_THREADS_ANY=y\n-CT_LIBC_SUPPORT_THREADS_NATIVE=y\n-\n-#\n-# Common C library options\n-#\n-CT_THREADS_NATIVE=y\n-# CT_CREATE_LDSO_CONF is not set\n-CT_LIBC_XLDD=y\n-\n-#\n-# C compiler\n-#\n-CT_CC_CORE_PASSES_NEEDED=y\n-CT_CC_CORE_PASS_1_NEEDED=y\n-CT_CC_CORE_PASS_2_NEEDED=y\n-CT_CC_SUPPORT_CXX=y\n-CT_CC_SUPPORT_FORTRAN=y\n-CT_CC_SUPPORT_ADA=y\n-CT_CC_SUPPORT_OBJC=y\n-CT_CC_SUPPORT_OBJCXX=y\n-CT_CC_SUPPORT_GOLANG=y\n-CT_CC_GCC=y\n-CT_CC=\"gcc\"\n-CT_CC_CHOICE_KSYM=\"GCC\"\n-CT_CC_GCC_SHOW=y\n-\n-#\n-# Options for gcc\n-#\n-CT_CC_GCC_PKG_KSYM=\"GCC\"\n-CT_GCC_DIR_NAME=\"gcc\"\n-CT_GCC_USE_GNU=y\n-CT_GCC_USE=\"GCC\"\n-CT_GCC_PKG_NAME=\"gcc\"\n-CT_GCC_SRC_RELEASE=y\n-CT_GCC_PATCH_ORDER=\"global\"\n-CT_GCC_V_8=y\n-# CT_GCC_V_7 is not set\n-# CT_GCC_V_6 is not set\n-# CT_GCC_V_5 is not set\n-# CT_GCC_V_4_9 is not set\n-# CT_GCC_NO_VERSIONS is not set\n-CT_GCC_VERSION=\"8.3.0\"\n-CT_GCC_MIRRORS=\"$(CT_Mirrors GNU gcc/gcc-${CT_GCC_VERSION}) $(CT_Mirrors sourceware gcc/releases/gcc-${CT_GCC_VERSION})\"\n-CT_GCC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_GCC_SIGNATURE_FORMAT=\"\"\n-CT_GCC_later_than_7=y\n-CT_GCC_7_or_later=y\n-CT_GCC_later_than_6=y\n-CT_GCC_6_or_later=y\n-CT_GCC_later_than_5=y\n-CT_GCC_5_or_later=y\n-CT_GCC_later_than_4_9=y\n-CT_GCC_4_9_or_later=y\n-CT_GCC_later_than_4_8=y\n-CT_GCC_4_8_or_later=y\n-CT_CC_GCC_HAS_LIBMPX=y\n-CT_CC_GCC_ENABLE_CXX_FLAGS=\"\"\n-CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_STATIC_LIBSTDCXX=y\n-# CT_CC_GCC_SYSTEM_ZLIB is not set\n-CT_CC_GCC_CONFIG_TLS=m\n-\n-#\n-# Optimisation features\n-#\n-CT_CC_GCC_USE_GRAPHITE=y\n-CT_CC_GCC_USE_LTO=y\n-\n-#\n-# Settings for libraries running on target\n-#\n-CT_CC_GCC_ENABLE_TARGET_OPTSPACE=y\n-# CT_CC_GCC_LIBMUDFLAP is not set\n-# CT_CC_GCC_LIBGOMP is not set\n-# CT_CC_GCC_LIBSSP is not set\n-# CT_CC_GCC_LIBQUADMATH is not set\n-# CT_CC_GCC_LIBSANITIZER is not set\n-\n-#\n-# Misc. obscure options.\n-#\n-CT_CC_CXA_ATEXIT=y\n-# CT_CC_GCC_DISABLE_PCH is not set\n-CT_CC_GCC_SJLJ_EXCEPTIONS=m\n-CT_CC_GCC_LDBL_128=m\n-# CT_CC_GCC_BUILD_ID is not set\n-CT_CC_GCC_LNK_HASH_STYLE_DEFAULT=y\n-# CT_CC_GCC_LNK_HASH_STYLE_SYSV is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_GNU is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_BOTH is not set\n-CT_CC_GCC_LNK_HASH_STYLE=\"\"\n-CT_CC_GCC_DEC_FLOAT_AUTO=y\n-# CT_CC_GCC_DEC_FLOAT_BID is not set\n-# CT_CC_GCC_DEC_FLOAT_DPD is not set\n-# CT_CC_GCC_DEC_FLOATS_NO is not set\n-CT_ALL_CC_CHOICES=\"GCC\"\n-\n-#\n-# Additional supported languages:\n-#\n-CT_CC_LANG_CXX=y\n-# CT_CC_LANG_FORTRAN is not set\n-\n-#\n-# Debug facilities\n-#\n-# CT_DEBUG_DUMA is not set\n-# CT_DEBUG_GDB is not set\n-# CT_DEBUG_LTRACE is not set\n-# CT_DEBUG_STRACE is not set\n-CT_ALL_DEBUG_CHOICES=\"DUMA GDB LTRACE STRACE\"\n-\n-#\n-# Companion libraries\n-#\n-# CT_COMPLIBS_CHECK is not set\n-# CT_COMP_LIBS_CLOOG is not set\n-# CT_COMP_LIBS_EXPAT is not set\n-CT_COMP_LIBS_GETTEXT=y\n-CT_COMP_LIBS_GETTEXT_PKG_KSYM=\"GETTEXT\"\n-CT_GETTEXT_DIR_NAME=\"gettext\"\n-CT_GETTEXT_PKG_NAME=\"gettext\"\n-CT_GETTEXT_SRC_RELEASE=y\n-CT_GETTEXT_PATCH_ORDER=\"global\"\n-CT_GETTEXT_V_0_19_8_1=y\n-# CT_GETTEXT_NO_VERSIONS is not set\n-CT_GETTEXT_VERSION=\"0.19.8.1\"\n-CT_GETTEXT_MIRRORS=\"$(CT_Mirrors GNU gettext)\"\n-CT_GETTEXT_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.gz\"\n-CT_GETTEXT_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_GMP=y\n-CT_COMP_LIBS_GMP_PKG_KSYM=\"GMP\"\n-CT_GMP_DIR_NAME=\"gmp\"\n-CT_GMP_PKG_NAME=\"gmp\"\n-CT_GMP_SRC_RELEASE=y\n-CT_GMP_PATCH_ORDER=\"global\"\n-CT_GMP_V_6_1=y\n-# CT_GMP_NO_VERSIONS is not set\n-CT_GMP_VERSION=\"6.1.2\"\n-CT_GMP_MIRRORS=\"https://gmplib.org/download/gmp https://gmplib.org/download/gmp/archive $(CT_Mirrors GNU gmp)\"\n-CT_GMP_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.bz2\"\n-CT_GMP_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GMP_later_than_5_1_0=y\n-CT_GMP_5_1_0_or_later=y\n-CT_GMP_later_than_5_0_0=y\n-CT_GMP_5_0_0_or_later=y\n-CT_COMP_LIBS_ISL=y\n-CT_COMP_LIBS_ISL_PKG_KSYM=\"ISL\"\n-CT_ISL_DIR_NAME=\"isl\"\n-CT_ISL_PKG_NAME=\"isl\"\n-CT_ISL_SRC_RELEASE=y\n-CT_ISL_PATCH_ORDER=\"global\"\n-CT_ISL_V_0_20=y\n-# CT_ISL_V_0_19 is not set\n-# CT_ISL_V_0_18 is not set\n-# CT_ISL_V_0_17 is not set\n-# CT_ISL_V_0_16 is not set\n-# CT_ISL_V_0_15 is not set\n-# CT_ISL_NO_VERSIONS is not set\n-CT_ISL_VERSION=\"0.20\"\n-CT_ISL_MIRRORS=\"https://ci-mirrors.rust-lang.org/rustc\"\n-CT_ISL_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_ISL_SIGNATURE_FORMAT=\"\"\n-CT_ISL_later_than_0_18=y\n-CT_ISL_0_18_or_later=y\n-CT_ISL_later_than_0_15=y\n-CT_ISL_0_15_or_later=y\n-CT_ISL_REQUIRE_0_15_or_later=y\n-CT_ISL_later_than_0_14=y\n-CT_ISL_0_14_or_later=y\n-CT_ISL_REQUIRE_0_14_or_later=y\n-CT_ISL_later_than_0_13=y\n-CT_ISL_0_13_or_later=y\n-CT_ISL_later_than_0_12=y\n-CT_ISL_0_12_or_later=y\n-CT_ISL_REQUIRE_0_12_or_later=y\n-# CT_COMP_LIBS_LIBELF is not set\n-CT_COMP_LIBS_LIBICONV=y\n-CT_COMP_LIBS_LIBICONV_PKG_KSYM=\"LIBICONV\"\n-CT_LIBICONV_DIR_NAME=\"libiconv\"\n-CT_LIBICONV_PKG_NAME=\"libiconv\"\n-CT_LIBICONV_SRC_RELEASE=y\n-CT_LIBICONV_PATCH_ORDER=\"global\"\n-CT_LIBICONV_V_1_15=y\n-# CT_LIBICONV_NO_VERSIONS is not set\n-CT_LIBICONV_VERSION=\"1.15\"\n-CT_LIBICONV_MIRRORS=\"$(CT_Mirrors GNU libiconv)\"\n-CT_LIBICONV_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_LIBICONV_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_MPC=y\n-CT_COMP_LIBS_MPC_PKG_KSYM=\"MPC\"\n-CT_MPC_DIR_NAME=\"mpc\"\n-CT_MPC_PKG_NAME=\"mpc\"\n-CT_MPC_SRC_RELEASE=y\n-CT_MPC_PATCH_ORDER=\"global\"\n-# CT_MPC_V_1_1 is not set\n-CT_MPC_V_1_0=y\n-# CT_MPC_NO_VERSIONS is not set\n-CT_MPC_VERSION=\"1.0.3\"\n-CT_MPC_MIRRORS=\"http://www.multiprecision.org/downloads $(CT_Mirrors GNU mpc)\"\n-CT_MPC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_MPC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_MPC_1_1_0_or_older=y\n-CT_MPC_older_than_1_1_0=y\n-CT_COMP_LIBS_MPFR=y\n-CT_COMP_LIBS_MPFR_PKG_KSYM=\"MPFR\"\n-CT_MPFR_DIR_NAME=\"mpfr\"\n-CT_MPFR_PKG_NAME=\"mpfr\"\n-CT_MPFR_SRC_RELEASE=y\n-CT_MPFR_PATCH_ORDER=\"global\"\n-CT_MPFR_V_3_1=y\n-# CT_MPFR_NO_VERSIONS is not set\n-CT_MPFR_VERSION=\"3.1.6\"\n-CT_MPFR_MIRRORS=\"https://www.mpfr.org/mpfr-${CT_MPFR_VERSION} $(CT_Mirrors GNU mpfr)\"\n-CT_MPFR_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz .zip\"\n-CT_MPFR_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_MPFR_4_0_0_or_older=y\n-CT_MPFR_older_than_4_0_0=y\n-CT_MPFR_REQUIRE_older_than_4_0_0=y\n-CT_MPFR_later_than_3_0_0=y\n-CT_MPFR_3_0_0_or_later=y\n-CT_COMP_LIBS_NCURSES=y\n-CT_COMP_LIBS_NCURSES_PKG_KSYM=\"NCURSES\"\n-CT_NCURSES_DIR_NAME=\"ncurses\"\n-CT_NCURSES_PKG_NAME=\"ncurses\"\n-CT_NCURSES_SRC_RELEASE=y\n-CT_NCURSES_PATCH_ORDER=\"global\"\n-CT_NCURSES_V_6_1=y\n-# CT_NCURSES_V_6_0 is not set\n-# CT_NCURSES_NO_VERSIONS is not set\n-CT_NCURSES_VERSION=\"6.1\"\n-CT_NCURSES_MIRRORS=\"ftp://invisible-island.net/ncurses $(CT_Mirrors GNU ncurses)\"\n-CT_NCURSES_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_NCURSES_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_NCURSES_HOST_CONFIG_ARGS=\"\"\n-CT_NCURSES_HOST_DISABLE_DB=y\n-CT_NCURSES_HOST_FALLBACKS=\"linux,xterm,xterm-color,xterm-256color,vt100\"\n-CT_NCURSES_TARGET_CONFIG_ARGS=\"\"\n-# CT_NCURSES_TARGET_DISABLE_DB is not set\n-CT_NCURSES_TARGET_FALLBACKS=\"\"\n-CT_COMP_LIBS_ZLIB=y\n-CT_COMP_LIBS_ZLIB_PKG_KSYM=\"ZLIB\"\n-CT_ZLIB_DIR_NAME=\"zlib\"\n-CT_ZLIB_PKG_NAME=\"zlib\"\n-CT_ZLIB_SRC_RELEASE=y\n-CT_ZLIB_PATCH_ORDER=\"global\"\n-CT_ZLIB_V_1_2_11=y\n-# CT_ZLIB_NO_VERSIONS is not set\n-CT_ZLIB_VERSION=\"1.2.11\"\n-CT_ZLIB_MIRRORS=\"https://downloads.sourceforge.net/project/libpng/zlib/${CT_ZLIB_VERSION}\"\n-CT_ZLIB_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_ZLIB_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_ALL_COMP_LIBS_CHOICES=\"CLOOG EXPAT GETTEXT GMP ISL LIBELF LIBICONV MPC MPFR NCURSES ZLIB\"\n-CT_LIBICONV_NEEDED=y\n-CT_GETTEXT_NEEDED=y\n-CT_GMP_NEEDED=y\n-CT_MPFR_NEEDED=y\n-CT_ISL_NEEDED=y\n-CT_MPC_NEEDED=y\n-CT_NCURSES_NEEDED=y\n-CT_ZLIB_NEEDED=y\n-CT_LIBICONV=y\n-CT_GETTEXT=y\n-CT_GMP=y\n-CT_MPFR=y\n-CT_ISL=y\n-CT_MPC=y\n-CT_NCURSES=y\n-CT_ZLIB=y\n-\n-#\n-# Companion tools\n-#\n-# CT_COMP_TOOLS_FOR_HOST is not set\n-# CT_COMP_TOOLS_AUTOCONF is not set\n-# CT_COMP_TOOLS_AUTOMAKE is not set\n-# CT_COMP_TOOLS_BISON is not set\n-# CT_COMP_TOOLS_DTC is not set\n-# CT_COMP_TOOLS_LIBTOOL is not set\n-# CT_COMP_TOOLS_M4 is not set\n-# CT_COMP_TOOLS_MAKE is not set\n-CT_ALL_COMP_TOOLS_CHOICES=\"AUTOCONF AUTOMAKE BISON DTC LIBTOOL M4 MAKE\""}, {"sha": "3f37e546b425520b3fa28098dea6dccdde0bc12c", "filename": "src/ci/docker/host-x86_64/dist-armv7-linux/armv7-linux-gnueabihf.defconfig", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2Farmv7-linux-gnueabihf.defconfig", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2Farmv7-linux-gnueabihf.defconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2Farmv7-linux-gnueabihf.defconfig?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -0,0 +1,16 @@\n+CT_CONFIG_VERSION=\"4\"\n+CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n+CT_USE_MIRROR=y\n+CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n+CT_ARCH_ARM=y\n+CT_ARCH_ARM_MODE_THUMB=y\n+CT_ARCH_SUFFIX=\"v7\"\n+CT_ARCH_ARCH=\"armv7-a\"\n+CT_ARCH_FPU=\"vfpv3-d16\"\n+CT_ARCH_FLOAT_HW=y\n+CT_KERNEL_LINUX=y\n+CT_LINUX_V_3_2=y\n+CT_BINUTILS_V_2_32=y\n+CT_GLIBC_V_2_17=y\n+CT_GCC_V_8=y\n+CT_CC_LANG_CXX=y"}, {"sha": "602ad8ac877370d8425d35c54e08fc5116214f57", "filename": "src/ci/docker/host-x86_64/dist-armv7-linux/build-toolchains.sh", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-armv7-linux%2Fbuild-toolchains.sh?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,29 +0,0 @@\n-#!/usr/bin/env bash\n-\n-set -ex\n-\n-hide_output() {\n-  set +x\n-  on_err=\"\n-echo ERROR: An error was encountered with the build.\n-cat /tmp/build.log\n-exit 1\n-\"\n-  trap \"$on_err\" ERR\n-  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n-  PING_LOOP_PID=$!\n-  \"$@\" &> /tmp/build.log\n-  rm /tmp/build.log\n-  trap - ERR\n-  kill $PING_LOOP_PID\n-  set -x\n-}\n-\n-mkdir build\n-cd build\n-cp ../armv7-linux-gnueabihf.config .config\n-# FIXME ct-ng oldconfig is not working as intended.\n-# ct-ng oldconfig\n-hide_output ct-ng build\n-cd ..\n-rm -rf build"}, {"sha": "a62f98b21d225b183aa193745a4966224197885d", "filename": "src/ci/docker/host-x86_64/dist-i586-gnu-i586-i686-musl/Dockerfile", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -21,17 +21,17 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/crosstool-ng-1.24.sh /scripts/\n-RUN sh /scripts/crosstool-ng-1.24.sh\n+COPY scripts/crosstool-ng.sh /scripts/\n+RUN sh /scripts/crosstool-ng.sh\n \n COPY scripts/rustbuild-setup.sh /scripts/\n RUN sh /scripts/rustbuild-setup.sh\n WORKDIR /tmp\n \n-COPY host-x86_64/dist-i586-gnu-i586-i686-musl/i586-linux-gnu.config \\\n-     host-x86_64/dist-i586-gnu-i586-i686-musl/build-i586-gnu-toolchain.sh \\\n-     /tmp/\n-RUN su rustbuild -c ./build-i586-gnu-toolchain.sh\n+COPY scripts/crosstool-ng-build.sh /scripts/\n+COPY host-x86_64/dist-i586-gnu-i586-i686-musl/i586-linux-gnu.defconfig /tmp/crosstool.defconfig\n+RUN /scripts/crosstool-ng-build.sh\n+\n ENV PATH=$PATH:/x-tools/i586-unknown-linux-gnu/bin\n ENV \\\n     CC_i586_unknown_linux_gnu=i586-unknown-linux-gnu-gcc \\"}, {"sha": "ceab60cfb45e978fa51c9a6a904911de1997953e", "filename": "src/ci/docker/host-x86_64/dist-i586-gnu-i586-i686-musl/build-i586-gnu-toolchain.sh", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2Fbuild-i586-gnu-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2Fbuild-i586-gnu-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2Fbuild-i586-gnu-toolchain.sh?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,26 +0,0 @@\n-#!/usr/bin/env bash\n-set -ex\n-\n-hide_output() {\n-  set +x\n-  on_err=\"\n-echo ERROR: An error was encountered with the build.\n-cat /tmp/build.log\n-exit 1\n-\"\n-  trap \"$on_err\" ERR\n-  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n-  PING_LOOP_PID=$!\n-  \"$@\" &> /tmp/build.log\n-  rm /tmp/build.log\n-  trap - ERR\n-  kill $PING_LOOP_PID\n-  set -x\n-}\n-\n-mkdir build\n-cd build\n-cp ../i586-linux-gnu.config .config\n-hide_output ct-ng build\n-cd ..\n-rm -rf build"}, {"sha": "cdbd52d23bc37221faa3089a4dea824871306e07", "filename": "src/ci/docker/host-x86_64/dist-i586-gnu-i586-i686-musl/i586-linux-gnu.config", "status": "removed", "additions": 0, "deletions": 726, "changes": 726, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2Fi586-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2Fi586-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2Fi586-linux-gnu.config?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,726 +0,0 @@\n-#\n-# Automatically generated file; DO NOT EDIT.\n-# crosstool-NG  Configuration\n-#\n-CT_CONFIGURE_has_static_link=y\n-CT_CONFIGURE_has_cxx11=y\n-CT_CONFIGURE_has_wget=y\n-CT_CONFIGURE_has_curl=y\n-CT_CONFIGURE_has_make_3_81_or_newer=y\n-CT_CONFIGURE_has_make_4_0_or_newer=y\n-CT_CONFIGURE_has_libtool_2_4_or_newer=y\n-CT_CONFIGURE_has_libtoolize_2_4_or_newer=y\n-CT_CONFIGURE_has_autoconf_2_65_or_newer=y\n-CT_CONFIGURE_has_autoreconf_2_65_or_newer=y\n-CT_CONFIGURE_has_automake_1_15_or_newer=y\n-CT_CONFIGURE_has_gnu_m4_1_4_12_or_newer=y\n-CT_CONFIGURE_has_python_3_4_or_newer=y\n-CT_CONFIGURE_has_bison_2_7_or_newer=y\n-CT_CONFIGURE_has_python=y\n-CT_CONFIGURE_has_git=y\n-CT_CONFIGURE_has_md5sum=y\n-CT_CONFIGURE_has_sha1sum=y\n-CT_CONFIGURE_has_sha256sum=y\n-CT_CONFIGURE_has_sha512sum=y\n-CT_CONFIGURE_has_install_with_strip_program=y\n-CT_CONFIG_VERSION_CURRENT=\"3\"\n-CT_CONFIG_VERSION=\"3\"\n-CT_MODULES=y\n-\n-#\n-# Paths and misc options\n-#\n-\n-#\n-# crosstool-NG behavior\n-#\n-# CT_OBSOLETE is not set\n-# CT_EXPERIMENTAL is not set\n-# CT_DEBUG_CT is not set\n-\n-#\n-# Paths\n-#\n-CT_LOCAL_TARBALLS_DIR=\"${HOME}/src\"\n-CT_SAVE_TARBALLS=y\n-# CT_TARBALLS_BUILDROOT_LAYOUT is not set\n-CT_WORK_DIR=\"${CT_TOP_DIR}/.build\"\n-CT_BUILD_TOP_DIR=\"${CT_WORK_DIR:-${CT_TOP_DIR}/.build}/${CT_HOST:+HOST-${CT_HOST}/}${CT_TARGET}\"\n-CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n-CT_RM_RF_PREFIX_DIR=y\n-CT_REMOVE_DOCS=y\n-CT_INSTALL_LICENSES=y\n-CT_PREFIX_DIR_RO=y\n-CT_STRIP_HOST_TOOLCHAIN_EXECUTABLES=y\n-# CT_STRIP_TARGET_TOOLCHAIN_EXECUTABLES is not set\n-\n-#\n-# Downloading\n-#\n-CT_DOWNLOAD_AGENT_WGET=y\n-# CT_DOWNLOAD_AGENT_CURL is not set\n-# CT_DOWNLOAD_AGENT_NONE is not set\n-# CT_FORBID_DOWNLOAD is not set\n-# CT_FORCE_DOWNLOAD is not set\n-CT_CONNECT_TIMEOUT=10\n-CT_DOWNLOAD_WGET_OPTIONS=\"--passive-ftp --tries=3 -nc --progress=dot:binary\"\n-# CT_ONLY_DOWNLOAD is not set\n-CT_USE_MIRROR=y\n-# CT_FORCE_MIRROR is not set\n-CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n-CT_VERIFY_DOWNLOAD_DIGEST=y\n-CT_VERIFY_DOWNLOAD_DIGEST_SHA512=y\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA256 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA1 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_MD5 is not set\n-CT_VERIFY_DOWNLOAD_DIGEST_ALG=\"sha512\"\n-# CT_VERIFY_DOWNLOAD_SIGNATURE is not set\n-\n-#\n-# Extracting\n-#\n-# CT_FORCE_EXTRACT is not set\n-CT_OVERRIDE_CONFIG_GUESS_SUB=y\n-# CT_ONLY_EXTRACT is not set\n-CT_PATCH_BUNDLED=y\n-# CT_PATCH_BUNDLED_LOCAL is not set\n-CT_PATCH_ORDER=\"bundled\"\n-\n-#\n-# Build behavior\n-#\n-CT_PARALLEL_JOBS=0\n-CT_LOAD=\"\"\n-CT_USE_PIPES=y\n-CT_EXTRA_CFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_LDFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_CFLAGS_FOR_HOST=\"\"\n-CT_EXTRA_LDFLAGS_FOR_HOST=\"\"\n-# CT_CONFIG_SHELL_SH is not set\n-# CT_CONFIG_SHELL_ASH is not set\n-CT_CONFIG_SHELL_BASH=y\n-# CT_CONFIG_SHELL_CUSTOM is not set\n-CT_CONFIG_SHELL=\"${bash}\"\n-\n-#\n-# Logging\n-#\n-# CT_LOG_ERROR is not set\n-# CT_LOG_WARN is not set\n-# CT_LOG_INFO is not set\n-CT_LOG_EXTRA=y\n-# CT_LOG_ALL is not set\n-# CT_LOG_DEBUG is not set\n-CT_LOG_LEVEL_MAX=\"EXTRA\"\n-# CT_LOG_SEE_TOOLS_WARN is not set\n-CT_LOG_PROGRESS_BAR=y\n-CT_LOG_TO_FILE=y\n-CT_LOG_FILE_COMPRESS=y\n-\n-#\n-# Target options\n-#\n-# CT_ARCH_ALPHA is not set\n-# CT_ARCH_ARC is not set\n-# CT_ARCH_ARM is not set\n-# CT_ARCH_AVR is not set\n-# CT_ARCH_M68K is not set\n-# CT_ARCH_MIPS is not set\n-# CT_ARCH_NIOS2 is not set\n-# CT_ARCH_POWERPC is not set\n-# CT_ARCH_S390 is not set\n-# CT_ARCH_SH is not set\n-# CT_ARCH_SPARC is not set\n-CT_ARCH_X86=y\n-# CT_ARCH_XTENSA is not set\n-CT_ARCH=\"x86\"\n-CT_ARCH_CHOICE_KSYM=\"X86\"\n-CT_ARCH_CPU=\"\"\n-CT_ARCH_TUNE=\"\"\n-CT_ARCH_X86_SHOW=y\n-\n-#\n-# Options for x86\n-#\n-CT_ARCH_X86_PKG_KSYM=\"\"\n-CT_ALL_ARCH_CHOICES=\"ALPHA ARC ARM AVR M68K MICROBLAZE MIPS MOXIE MSP430 NIOS2 POWERPC RISCV S390 SH SPARC X86 XTENSA\"\n-CT_ARCH_SUFFIX=\"\"\n-# CT_OMIT_TARGET_VENDOR is not set\n-\n-#\n-# Generic target options\n-#\n-# CT_MULTILIB is not set\n-CT_DEMULTILIB=y\n-CT_ARCH_USE_MMU=y\n-CT_ARCH_SUPPORTS_32=y\n-CT_ARCH_SUPPORTS_64=y\n-CT_ARCH_DEFAULT_32=y\n-CT_ARCH_BITNESS=32\n-CT_ARCH_32=y\n-# CT_ARCH_64 is not set\n-\n-#\n-# Target optimisations\n-#\n-CT_ARCH_SUPPORTS_WITH_ARCH=y\n-CT_ARCH_SUPPORTS_WITH_CPU=y\n-CT_ARCH_SUPPORTS_WITH_TUNE=y\n-CT_ARCH_ARCH=\"i586\"\n-CT_TARGET_CFLAGS=\"-Wa,-mrelax-relocations=no\"\n-CT_TARGET_LDFLAGS=\"\"\n-\n-#\n-# Toolchain options\n-#\n-\n-#\n-# General toolchain options\n-#\n-CT_FORCE_SYSROOT=y\n-CT_USE_SYSROOT=y\n-CT_SYSROOT_NAME=\"sysroot\"\n-CT_SYSROOT_DIR_PREFIX=\"\"\n-CT_WANTS_STATIC_LINK=y\n-CT_WANTS_STATIC_LINK_CXX=y\n-# CT_STATIC_TOOLCHAIN is not set\n-CT_SHOW_CT_VERSION=y\n-CT_TOOLCHAIN_PKGVERSION=\"\"\n-CT_TOOLCHAIN_BUGURL=\"\"\n-\n-#\n-# Tuple completion and aliasing\n-#\n-CT_TARGET_VENDOR=\"unknown\"\n-CT_TARGET_ALIAS_SED_EXPR=\"\"\n-CT_TARGET_ALIAS=\"\"\n-\n-#\n-# Toolchain type\n-#\n-CT_CROSS=y\n-# CT_CANADIAN is not set\n-CT_TOOLCHAIN_TYPE=\"cross\"\n-\n-#\n-# Build system\n-#\n-CT_BUILD=\"\"\n-CT_BUILD_PREFIX=\"\"\n-CT_BUILD_SUFFIX=\"\"\n-\n-#\n-# Misc options\n-#\n-# CT_TOOLCHAIN_ENABLE_NLS is not set\n-\n-#\n-# Operating System\n-#\n-CT_KERNEL_SUPPORTS_SHARED_LIBS=y\n-# CT_KERNEL_BARE_METAL is not set\n-CT_KERNEL_LINUX=y\n-CT_KERNEL=\"linux\"\n-CT_KERNEL_CHOICE_KSYM=\"LINUX\"\n-CT_KERNEL_LINUX_SHOW=y\n-\n-#\n-# Options for linux\n-#\n-CT_KERNEL_LINUX_PKG_KSYM=\"LINUX\"\n-CT_LINUX_DIR_NAME=\"linux\"\n-CT_LINUX_PKG_NAME=\"linux\"\n-CT_LINUX_SRC_RELEASE=y\n-CT_LINUX_PATCH_ORDER=\"global\"\n-# CT_LINUX_V_4_20 is not set\n-# CT_LINUX_V_4_19 is not set\n-# CT_LINUX_V_4_18 is not set\n-# CT_LINUX_V_4_17 is not set\n-# CT_LINUX_V_4_16 is not set\n-# CT_LINUX_V_4_15 is not set\n-# CT_LINUX_V_4_14 is not set\n-# CT_LINUX_V_4_13 is not set\n-# CT_LINUX_V_4_12 is not set\n-# CT_LINUX_V_4_11 is not set\n-# CT_LINUX_V_4_10 is not set\n-# CT_LINUX_V_4_9 is not set\n-# CT_LINUX_V_4_4 is not set\n-# CT_LINUX_V_4_1 is not set\n-# CT_LINUX_V_3_16 is not set\n-# CT_LINUX_V_3_13 is not set\n-# CT_LINUX_V_3_12 is not set\n-# CT_LINUX_V_3_10 is not set\n-# CT_LINUX_V_3_4 is not set\n-CT_LINUX_V_3_2=y\n-# CT_LINUX_V_2_6_32 is not set\n-# CT_LINUX_NO_VERSIONS is not set\n-CT_LINUX_VERSION=\"3.2.101\"\n-CT_LINUX_MIRRORS=\"$(CT_Mirrors kernel.org linux ${CT_LINUX_VERSION})\"\n-CT_LINUX_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_LINUX_SIGNATURE_FORMAT=\"unpacked/.sign\"\n-CT_LINUX_4_8_or_older=y\n-CT_LINUX_older_than_4_8=y\n-CT_LINUX_3_7_or_older=y\n-CT_LINUX_older_than_3_7=y\n-CT_LINUX_later_than_3_2=y\n-CT_LINUX_3_2_or_later=y\n-CT_KERNEL_LINUX_VERBOSITY_0=y\n-# CT_KERNEL_LINUX_VERBOSITY_1 is not set\n-# CT_KERNEL_LINUX_VERBOSITY_2 is not set\n-CT_KERNEL_LINUX_VERBOSE_LEVEL=0\n-CT_KERNEL_LINUX_INSTALL_CHECK=y\n-CT_ALL_KERNEL_CHOICES=\"BARE_METAL LINUX WINDOWS\"\n-\n-#\n-# Common kernel options\n-#\n-CT_SHARED_LIBS=y\n-\n-#\n-# Binary utilities\n-#\n-CT_ARCH_BINFMT_ELF=y\n-CT_BINUTILS_BINUTILS=y\n-CT_BINUTILS=\"binutils\"\n-CT_BINUTILS_CHOICE_KSYM=\"BINUTILS\"\n-CT_BINUTILS_BINUTILS_SHOW=y\n-\n-#\n-# Options for binutils\n-#\n-CT_BINUTILS_BINUTILS_PKG_KSYM=\"BINUTILS\"\n-CT_BINUTILS_DIR_NAME=\"binutils\"\n-CT_BINUTILS_USE_GNU=y\n-CT_BINUTILS_USE=\"BINUTILS\"\n-CT_BINUTILS_PKG_NAME=\"binutils\"\n-CT_BINUTILS_SRC_RELEASE=y\n-CT_BINUTILS_PATCH_ORDER=\"global\"\n-CT_BINUTILS_V_2_32=y\n-# CT_BINUTILS_V_2_31 is not set\n-# CT_BINUTILS_V_2_30 is not set\n-# CT_BINUTILS_V_2_29 is not set\n-# CT_BINUTILS_V_2_28 is not set\n-# CT_BINUTILS_V_2_27 is not set\n-# CT_BINUTILS_V_2_26 is not set\n-# CT_BINUTILS_NO_VERSIONS is not set\n-CT_BINUTILS_VERSION=\"2.32\"\n-CT_BINUTILS_MIRRORS=\"$(CT_Mirrors GNU binutils) $(CT_Mirrors sourceware binutils/releases)\"\n-CT_BINUTILS_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_BINUTILS_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_BINUTILS_later_than_2_30=y\n-CT_BINUTILS_2_30_or_later=y\n-CT_BINUTILS_later_than_2_27=y\n-CT_BINUTILS_2_27_or_later=y\n-CT_BINUTILS_later_than_2_25=y\n-CT_BINUTILS_2_25_or_later=y\n-CT_BINUTILS_later_than_2_23=y\n-CT_BINUTILS_2_23_or_later=y\n-\n-#\n-# GNU binutils\n-#\n-CT_BINUTILS_HAS_HASH_STYLE=y\n-CT_BINUTILS_HAS_GOLD=y\n-CT_BINUTILS_HAS_PLUGINS=y\n-CT_BINUTILS_HAS_PKGVERSION_BUGURL=y\n-CT_BINUTILS_GOLD_SUPPORTS_ARCH=y\n-CT_BINUTILS_GOLD_SUPPORT=y\n-CT_BINUTILS_FORCE_LD_BFD_DEFAULT=y\n-CT_BINUTILS_LINKER_LD=y\n-# CT_BINUTILS_LINKER_LD_GOLD is not set\n-CT_BINUTILS_LINKERS_LIST=\"ld\"\n-CT_BINUTILS_LINKER_DEFAULT=\"bfd\"\n-# CT_BINUTILS_PLUGINS is not set\n-CT_BINUTILS_RELRO=m\n-CT_BINUTILS_EXTRA_CONFIG_ARRAY=\"--enable-compressed-debug-sections=none\"\n-# CT_BINUTILS_FOR_TARGET is not set\n-CT_ALL_BINUTILS_CHOICES=\"BINUTILS\"\n-\n-#\n-# C-library\n-#\n-CT_LIBC_GLIBC=y\n-# CT_LIBC_UCLIBC is not set\n-CT_LIBC=\"glibc\"\n-CT_LIBC_CHOICE_KSYM=\"GLIBC\"\n-CT_THREADS=\"nptl\"\n-CT_LIBC_GLIBC_SHOW=y\n-\n-#\n-# Options for glibc\n-#\n-CT_LIBC_GLIBC_PKG_KSYM=\"GLIBC\"\n-CT_GLIBC_DIR_NAME=\"glibc\"\n-CT_GLIBC_USE_GNU=y\n-CT_GLIBC_USE=\"GLIBC\"\n-CT_GLIBC_PKG_NAME=\"glibc\"\n-CT_GLIBC_SRC_RELEASE=y\n-CT_GLIBC_PATCH_ORDER=\"global\"\n-# CT_GLIBC_V_2_29 is not set\n-# CT_GLIBC_V_2_28 is not set\n-# CT_GLIBC_V_2_27 is not set\n-# CT_GLIBC_V_2_26 is not set\n-# CT_GLIBC_V_2_25 is not set\n-# CT_GLIBC_V_2_24 is not set\n-# CT_GLIBC_V_2_23 is not set\n-# CT_GLIBC_V_2_19 is not set\n-CT_GLIBC_V_2_17=y\n-# CT_GLIBC_V_2_12_1 is not set\n-# CT_GLIBC_NO_VERSIONS is not set\n-CT_GLIBC_VERSION=\"2.17\"\n-CT_GLIBC_MIRRORS=\"$(CT_Mirrors GNU glibc)\"\n-CT_GLIBC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_GLIBC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GLIBC_2_29_or_older=y\n-CT_GLIBC_older_than_2_29=y\n-CT_GLIBC_2_27_or_older=y\n-CT_GLIBC_older_than_2_27=y\n-CT_GLIBC_2_26_or_older=y\n-CT_GLIBC_older_than_2_26=y\n-CT_GLIBC_2_25_or_older=y\n-CT_GLIBC_older_than_2_25=y\n-CT_GLIBC_2_24_or_older=y\n-CT_GLIBC_older_than_2_24=y\n-CT_GLIBC_2_23_or_older=y\n-CT_GLIBC_older_than_2_23=y\n-CT_GLIBC_2_20_or_older=y\n-CT_GLIBC_older_than_2_20=y\n-CT_GLIBC_2_17_or_later=y\n-CT_GLIBC_2_17_or_older=y\n-CT_GLIBC_later_than_2_14=y\n-CT_GLIBC_2_14_or_later=y\n-CT_GLIBC_DEP_KERNEL_HEADERS_VERSION=y\n-CT_GLIBC_DEP_BINUTILS=y\n-CT_GLIBC_DEP_GCC=y\n-CT_GLIBC_DEP_PYTHON=y\n-CT_GLIBC_HAS_NPTL_ADDON=y\n-CT_GLIBC_HAS_PORTS_ADDON=y\n-CT_GLIBC_HAS_LIBIDN_ADDON=y\n-CT_GLIBC_USE_NPTL_ADDON=y\n-# CT_GLIBC_USE_LIBIDN_ADDON is not set\n-CT_GLIBC_HAS_OBSOLETE_RPC=y\n-CT_GLIBC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_GLIBC_CONFIGPARMS=\"\"\n-CT_GLIBC_EXTRA_CFLAGS=\"\"\n-CT_GLIBC_ENABLE_OBSOLETE_RPC=y\n-# CT_GLIBC_DISABLE_VERSIONING is not set\n-CT_GLIBC_OLDEST_ABI=\"\"\n-CT_GLIBC_FORCE_UNWIND=y\n-# CT_GLIBC_LOCALES is not set\n-# CT_GLIBC_KERNEL_VERSION_NONE is not set\n-CT_GLIBC_KERNEL_VERSION_AS_HEADERS=y\n-# CT_GLIBC_KERNEL_VERSION_CHOSEN is not set\n-CT_GLIBC_MIN_KERNEL=\"3.2.101\"\n-CT_ALL_LIBC_CHOICES=\"AVR_LIBC BIONIC GLIBC MINGW_W64 MOXIEBOX MUSL NEWLIB NONE UCLIBC\"\n-CT_LIBC_SUPPORT_THREADS_ANY=y\n-CT_LIBC_SUPPORT_THREADS_NATIVE=y\n-\n-#\n-# Common C library options\n-#\n-CT_THREADS_NATIVE=y\n-# CT_CREATE_LDSO_CONF is not set\n-CT_LIBC_XLDD=y\n-\n-#\n-# C compiler\n-#\n-CT_CC_CORE_PASSES_NEEDED=y\n-CT_CC_CORE_PASS_1_NEEDED=y\n-CT_CC_CORE_PASS_2_NEEDED=y\n-CT_CC_SUPPORT_CXX=y\n-CT_CC_SUPPORT_FORTRAN=y\n-CT_CC_SUPPORT_ADA=y\n-CT_CC_SUPPORT_OBJC=y\n-CT_CC_SUPPORT_OBJCXX=y\n-CT_CC_SUPPORT_GOLANG=y\n-CT_CC_GCC=y\n-CT_CC=\"gcc\"\n-CT_CC_CHOICE_KSYM=\"GCC\"\n-CT_CC_GCC_SHOW=y\n-\n-#\n-# Options for gcc\n-#\n-CT_CC_GCC_PKG_KSYM=\"GCC\"\n-CT_GCC_DIR_NAME=\"gcc\"\n-CT_GCC_USE_GNU=y\n-CT_GCC_USE=\"GCC\"\n-CT_GCC_PKG_NAME=\"gcc\"\n-CT_GCC_SRC_RELEASE=y\n-CT_GCC_PATCH_ORDER=\"global\"\n-CT_GCC_V_8=y\n-# CT_GCC_V_7 is not set\n-# CT_GCC_V_6 is not set\n-# CT_GCC_V_5 is not set\n-# CT_GCC_V_4_9 is not set\n-# CT_GCC_NO_VERSIONS is not set\n-CT_GCC_VERSION=\"8.3.0\"\n-CT_GCC_MIRRORS=\"$(CT_Mirrors GNU gcc/gcc-${CT_GCC_VERSION}) $(CT_Mirrors sourceware gcc/releases/gcc-${CT_GCC_VERSION})\"\n-CT_GCC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_GCC_SIGNATURE_FORMAT=\"\"\n-CT_GCC_later_than_7=y\n-CT_GCC_7_or_later=y\n-CT_GCC_later_than_6=y\n-CT_GCC_6_or_later=y\n-CT_GCC_later_than_5=y\n-CT_GCC_5_or_later=y\n-CT_GCC_later_than_4_9=y\n-CT_GCC_4_9_or_later=y\n-CT_GCC_later_than_4_8=y\n-CT_GCC_4_8_or_later=y\n-CT_CC_GCC_HAS_LIBMPX=y\n-CT_CC_GCC_ENABLE_CXX_FLAGS=\"\"\n-CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_STATIC_LIBSTDCXX=y\n-# CT_CC_GCC_SYSTEM_ZLIB is not set\n-CT_CC_GCC_CONFIG_TLS=m\n-\n-#\n-# Optimisation features\n-#\n-CT_CC_GCC_USE_GRAPHITE=y\n-CT_CC_GCC_USE_LTO=y\n-\n-#\n-# Settings for libraries running on target\n-#\n-CT_CC_GCC_ENABLE_TARGET_OPTSPACE=y\n-# CT_CC_GCC_LIBMUDFLAP is not set\n-# CT_CC_GCC_LIBGOMP is not set\n-# CT_CC_GCC_LIBSSP is not set\n-# CT_CC_GCC_LIBQUADMATH is not set\n-# CT_CC_GCC_LIBSANITIZER is not set\n-CT_CC_GCC_LIBMPX=y\n-\n-#\n-# Misc. obscure options.\n-#\n-CT_CC_CXA_ATEXIT=y\n-# CT_CC_GCC_DISABLE_PCH is not set\n-CT_CC_GCC_SJLJ_EXCEPTIONS=m\n-CT_CC_GCC_LDBL_128=m\n-# CT_CC_GCC_BUILD_ID is not set\n-CT_CC_GCC_LNK_HASH_STYLE_DEFAULT=y\n-# CT_CC_GCC_LNK_HASH_STYLE_SYSV is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_GNU is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_BOTH is not set\n-CT_CC_GCC_LNK_HASH_STYLE=\"\"\n-CT_CC_GCC_DEC_FLOAT_AUTO=y\n-# CT_CC_GCC_DEC_FLOAT_BID is not set\n-# CT_CC_GCC_DEC_FLOAT_DPD is not set\n-# CT_CC_GCC_DEC_FLOATS_NO is not set\n-CT_ALL_CC_CHOICES=\"GCC\"\n-\n-#\n-# Additional supported languages:\n-#\n-CT_CC_LANG_CXX=y\n-# CT_CC_LANG_FORTRAN is not set\n-\n-#\n-# Debug facilities\n-#\n-# CT_DEBUG_DUMA is not set\n-# CT_DEBUG_GDB is not set\n-# CT_DEBUG_LTRACE is not set\n-# CT_DEBUG_STRACE is not set\n-CT_ALL_DEBUG_CHOICES=\"DUMA GDB LTRACE STRACE\"\n-\n-#\n-# Companion libraries\n-#\n-# CT_COMPLIBS_CHECK is not set\n-# CT_COMP_LIBS_CLOOG is not set\n-# CT_COMP_LIBS_EXPAT is not set\n-CT_COMP_LIBS_GETTEXT=y\n-CT_COMP_LIBS_GETTEXT_PKG_KSYM=\"GETTEXT\"\n-CT_GETTEXT_DIR_NAME=\"gettext\"\n-CT_GETTEXT_PKG_NAME=\"gettext\"\n-CT_GETTEXT_SRC_RELEASE=y\n-CT_GETTEXT_PATCH_ORDER=\"global\"\n-CT_GETTEXT_V_0_19_8_1=y\n-# CT_GETTEXT_NO_VERSIONS is not set\n-CT_GETTEXT_VERSION=\"0.19.8.1\"\n-CT_GETTEXT_MIRRORS=\"$(CT_Mirrors GNU gettext)\"\n-CT_GETTEXT_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.gz\"\n-CT_GETTEXT_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_GMP=y\n-CT_COMP_LIBS_GMP_PKG_KSYM=\"GMP\"\n-CT_GMP_DIR_NAME=\"gmp\"\n-CT_GMP_PKG_NAME=\"gmp\"\n-CT_GMP_SRC_RELEASE=y\n-CT_GMP_PATCH_ORDER=\"global\"\n-CT_GMP_V_6_1=y\n-# CT_GMP_NO_VERSIONS is not set\n-CT_GMP_VERSION=\"6.1.2\"\n-CT_GMP_MIRRORS=\"https://gmplib.org/download/gmp https://gmplib.org/download/gmp/archive $(CT_Mirrors GNU gmp)\"\n-CT_GMP_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.bz2\"\n-CT_GMP_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GMP_later_than_5_1_0=y\n-CT_GMP_5_1_0_or_later=y\n-CT_GMP_later_than_5_0_0=y\n-CT_GMP_5_0_0_or_later=y\n-CT_GMP_REQUIRE_5_0_0_or_later=y\n-CT_COMP_LIBS_ISL=y\n-CT_COMP_LIBS_ISL_PKG_KSYM=\"ISL\"\n-CT_ISL_DIR_NAME=\"isl\"\n-CT_ISL_PKG_NAME=\"isl\"\n-CT_ISL_SRC_RELEASE=y\n-CT_ISL_PATCH_ORDER=\"global\"\n-CT_ISL_V_0_20=y\n-# CT_ISL_V_0_19 is not set\n-# CT_ISL_V_0_18 is not set\n-# CT_ISL_V_0_17 is not set\n-# CT_ISL_V_0_16 is not set\n-# CT_ISL_V_0_15 is not set\n-# CT_ISL_NO_VERSIONS is not set\n-CT_ISL_VERSION=\"0.20\"\n-CT_ISL_MIRRORS=\"https://ci-mirrors.rust-lang.org/rustc\"\n-CT_ISL_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_ISL_SIGNATURE_FORMAT=\"\"\n-CT_ISL_later_than_0_18=y\n-CT_ISL_0_18_or_later=y\n-CT_ISL_later_than_0_15=y\n-CT_ISL_0_15_or_later=y\n-CT_ISL_REQUIRE_0_15_or_later=y\n-CT_ISL_later_than_0_14=y\n-CT_ISL_0_14_or_later=y\n-CT_ISL_REQUIRE_0_14_or_later=y\n-CT_ISL_later_than_0_13=y\n-CT_ISL_0_13_or_later=y\n-CT_ISL_later_than_0_12=y\n-CT_ISL_0_12_or_later=y\n-CT_ISL_REQUIRE_0_12_or_later=y\n-# CT_COMP_LIBS_LIBELF is not set\n-CT_COMP_LIBS_LIBICONV=y\n-CT_COMP_LIBS_LIBICONV_PKG_KSYM=\"LIBICONV\"\n-CT_LIBICONV_DIR_NAME=\"libiconv\"\n-CT_LIBICONV_PKG_NAME=\"libiconv\"\n-CT_LIBICONV_SRC_RELEASE=y\n-CT_LIBICONV_PATCH_ORDER=\"global\"\n-CT_LIBICONV_V_1_15=y\n-# CT_LIBICONV_NO_VERSIONS is not set\n-CT_LIBICONV_VERSION=\"1.15\"\n-CT_LIBICONV_MIRRORS=\"$(CT_Mirrors GNU libiconv)\"\n-CT_LIBICONV_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_LIBICONV_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_MPC=y\n-CT_COMP_LIBS_MPC_PKG_KSYM=\"MPC\"\n-CT_MPC_DIR_NAME=\"mpc\"\n-CT_MPC_PKG_NAME=\"mpc\"\n-CT_MPC_SRC_RELEASE=y\n-CT_MPC_PATCH_ORDER=\"global\"\n-CT_MPC_V_1_1=y\n-# CT_MPC_V_1_0 is not set\n-# CT_MPC_NO_VERSIONS is not set\n-CT_MPC_VERSION=\"1.1.0\"\n-CT_MPC_MIRRORS=\"http://www.multiprecision.org/downloads $(CT_Mirrors GNU mpc)\"\n-CT_MPC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_MPC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_MPC_1_1_0_or_later=y\n-CT_MPC_1_1_0_or_older=y\n-CT_COMP_LIBS_MPFR=y\n-CT_COMP_LIBS_MPFR_PKG_KSYM=\"MPFR\"\n-CT_MPFR_DIR_NAME=\"mpfr\"\n-CT_MPFR_PKG_NAME=\"mpfr\"\n-CT_MPFR_SRC_RELEASE=y\n-CT_MPFR_PATCH_ORDER=\"global\"\n-CT_MPFR_V_4_0=y\n-# CT_MPFR_V_3_1 is not set\n-# CT_MPFR_NO_VERSIONS is not set\n-CT_MPFR_VERSION=\"4.0.2\"\n-CT_MPFR_MIRRORS=\"http://www.mpfr.org/mpfr-${CT_MPFR_VERSION} $(CT_Mirrors GNU mpfr)\"\n-CT_MPFR_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz .zip\"\n-CT_MPFR_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_MPFR_later_than_4_0_0=y\n-CT_MPFR_4_0_0_or_later=y\n-CT_MPFR_later_than_3_0_0=y\n-CT_MPFR_3_0_0_or_later=y\n-CT_MPFR_REQUIRE_3_0_0_or_later=y\n-CT_COMP_LIBS_NCURSES=y\n-CT_COMP_LIBS_NCURSES_PKG_KSYM=\"NCURSES\"\n-CT_NCURSES_DIR_NAME=\"ncurses\"\n-CT_NCURSES_PKG_NAME=\"ncurses\"\n-CT_NCURSES_SRC_RELEASE=y\n-CT_NCURSES_PATCH_ORDER=\"global\"\n-CT_NCURSES_V_6_1=y\n-# CT_NCURSES_V_6_0 is not set\n-# CT_NCURSES_NO_VERSIONS is not set\n-CT_NCURSES_VERSION=\"6.1\"\n-CT_NCURSES_MIRRORS=\"ftp://invisible-island.net/ncurses $(CT_Mirrors GNU ncurses)\"\n-CT_NCURSES_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_NCURSES_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_NCURSES_HOST_CONFIG_ARGS=\"\"\n-CT_NCURSES_HOST_DISABLE_DB=y\n-CT_NCURSES_HOST_FALLBACKS=\"linux,xterm,xterm-color,xterm-256color,vt100\"\n-CT_NCURSES_TARGET_CONFIG_ARGS=\"\"\n-# CT_NCURSES_TARGET_DISABLE_DB is not set\n-CT_NCURSES_TARGET_FALLBACKS=\"\"\n-CT_COMP_LIBS_ZLIB=y\n-CT_COMP_LIBS_ZLIB_PKG_KSYM=\"ZLIB\"\n-CT_ZLIB_DIR_NAME=\"zlib\"\n-CT_ZLIB_PKG_NAME=\"zlib\"\n-CT_ZLIB_SRC_RELEASE=y\n-CT_ZLIB_PATCH_ORDER=\"global\"\n-CT_ZLIB_V_1_2_11=y\n-# CT_ZLIB_NO_VERSIONS is not set\n-CT_ZLIB_VERSION=\"1.2.11\"\n-CT_ZLIB_MIRRORS=\"http://downloads.sourceforge.net/project/libpng/zlib/${CT_ZLIB_VERSION}\"\n-CT_ZLIB_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_ZLIB_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_ALL_COMP_LIBS_CHOICES=\"CLOOG EXPAT GETTEXT GMP ISL LIBELF LIBICONV MPC MPFR NCURSES ZLIB\"\n-CT_LIBICONV_NEEDED=y\n-CT_GETTEXT_NEEDED=y\n-CT_GMP_NEEDED=y\n-CT_MPFR_NEEDED=y\n-CT_ISL_NEEDED=y\n-CT_MPC_NEEDED=y\n-CT_NCURSES_NEEDED=y\n-CT_ZLIB_NEEDED=y\n-CT_LIBICONV=y\n-CT_GETTEXT=y\n-CT_GMP=y\n-CT_MPFR=y\n-CT_ISL=y\n-CT_MPC=y\n-CT_NCURSES=y\n-CT_ZLIB=y\n-\n-#\n-# Companion tools\n-#\n-# CT_COMP_TOOLS_FOR_HOST is not set\n-# CT_COMP_TOOLS_AUTOCONF is not set\n-# CT_COMP_TOOLS_AUTOMAKE is not set\n-# CT_COMP_TOOLS_BISON is not set\n-# CT_COMP_TOOLS_DTC is not set\n-# CT_COMP_TOOLS_LIBTOOL is not set\n-# CT_COMP_TOOLS_M4 is not set\n-# CT_COMP_TOOLS_MAKE is not set\n-CT_ALL_COMP_TOOLS_CHOICES=\"AUTOCONF AUTOMAKE BISON DTC LIBTOOL M4 MAKE\""}, {"sha": "01fe493a9fecdf94451901ec0977ca703bb41c6d", "filename": "src/ci/docker/host-x86_64/dist-i586-gnu-i586-i686-musl/i586-linux-gnu.defconfig", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2Fi586-linux-gnu.defconfig", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2Fi586-linux-gnu.defconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2Fi586-linux-gnu.defconfig?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -0,0 +1,14 @@\n+CT_CONFIG_VERSION=\"4\"\n+CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n+CT_USE_MIRROR=y\n+CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n+CT_ARCH_X86=y\n+CT_ARCH_ARCH=\"i586\"\n+CT_TARGET_CFLAGS=\"-Wa,-mrelax-relocations=no\"\n+CT_KERNEL_LINUX=y\n+CT_LINUX_V_3_2=y\n+CT_BINUTILS_V_2_32=y\n+CT_BINUTILS_EXTRA_CONFIG_ARRAY=\"--enable-compressed-debug-sections=none\"\n+CT_GLIBC_V_2_17=y\n+CT_GCC_V_8=y\n+CT_CC_LANG_CXX=y"}, {"sha": "c08febf423adbf8e9d55b09f1cd7bb4944172640", "filename": "src/ci/docker/host-x86_64/dist-mips-linux/Dockerfile", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips-linux%2FDockerfile?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -3,16 +3,17 @@ FROM ubuntu:22.04\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/crosstool-ng-1.24.sh /scripts/\n-RUN sh /scripts/crosstool-ng-1.24.sh\n+COPY scripts/crosstool-ng.sh /scripts/\n+RUN sh /scripts/crosstool-ng.sh\n \n COPY scripts/rustbuild-setup.sh /scripts/\n RUN sh /scripts/rustbuild-setup.sh\n WORKDIR /tmp\n \n+COPY scripts/crosstool-ng-build.sh /scripts/\n COPY host-x86_64/dist-mips-linux/patches/ /tmp/patches/\n-COPY host-x86_64/dist-mips-linux/mips-linux-gnu.config host-x86_64/dist-mips-linux/build-mips-toolchain.sh /tmp/\n-RUN su rustbuild -c ./build-mips-toolchain.sh\n+COPY host-x86_64/dist-mips-linux/mips-linux-gnu.defconfig /tmp/crosstool.defconfig\n+RUN /scripts/crosstool-ng-build.sh\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "32612cf6852834123597afbde5a96fd8fac5d227", "filename": "src/ci/docker/host-x86_64/dist-mips-linux/build-mips-toolchain.sh", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips-linux%2Fbuild-mips-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips-linux%2Fbuild-mips-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips-linux%2Fbuild-mips-toolchain.sh?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,26 +0,0 @@\n-#!/usr/bin/env bash\n-set -ex\n-\n-hide_output() {\n-  set +x\n-  on_err=\"\n-echo ERROR: An error was encountered with the build.\n-cat /tmp/build.log\n-exit 1\n-\"\n-  trap \"$on_err\" ERR\n-  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n-  PING_LOOP_PID=$!\n-  \"$@\" &> /tmp/build.log\n-  rm /tmp/build.log\n-  trap - ERR\n-  kill $PING_LOOP_PID\n-  set -x\n-}\n-\n-mkdir build\n-cd build\n-cp ../mips-linux-gnu.config .config\n-hide_output ct-ng build\n-cd ..\n-rm -rf build"}, {"sha": "5bfbbae206b4180acf7543a76e69013ddb168222", "filename": "src/ci/docker/host-x86_64/dist-mips-linux/mips-linux-gnu.config", "status": "removed", "additions": 0, "deletions": 740, "changes": 740, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips-linux%2Fmips-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips-linux%2Fmips-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips-linux%2Fmips-linux-gnu.config?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,740 +0,0 @@\n-#\n-# Automatically generated file; DO NOT EDIT.\n-# crosstool-NG  Configuration\n-#\n-CT_CONFIGURE_has_static_link=y\n-CT_CONFIGURE_has_cxx11=y\n-CT_CONFIGURE_has_wget=y\n-CT_CONFIGURE_has_curl=y\n-CT_CONFIGURE_has_make_3_81_or_newer=y\n-CT_CONFIGURE_has_make_4_0_or_newer=y\n-CT_CONFIGURE_has_libtool_2_4_or_newer=y\n-CT_CONFIGURE_has_libtoolize_2_4_or_newer=y\n-CT_CONFIGURE_has_autoconf_2_65_or_newer=y\n-CT_CONFIGURE_has_autoreconf_2_65_or_newer=y\n-CT_CONFIGURE_has_automake_1_15_or_newer=y\n-CT_CONFIGURE_has_gnu_m4_1_4_12_or_newer=y\n-CT_CONFIGURE_has_python_3_4_or_newer=y\n-CT_CONFIGURE_has_bison_2_7_or_newer=y\n-CT_CONFIGURE_has_python=y\n-CT_CONFIGURE_has_git=y\n-CT_CONFIGURE_has_md5sum=y\n-CT_CONFIGURE_has_sha1sum=y\n-CT_CONFIGURE_has_sha256sum=y\n-CT_CONFIGURE_has_sha512sum=y\n-CT_CONFIGURE_has_install_with_strip_program=y\n-CT_CONFIG_VERSION_CURRENT=\"3\"\n-CT_CONFIG_VERSION=\"3\"\n-CT_MODULES=y\n-\n-#\n-# Paths and misc options\n-#\n-\n-#\n-# crosstool-NG behavior\n-#\n-# CT_OBSOLETE is not set\n-# CT_EXPERIMENTAL is not set\n-# CT_DEBUG_CT is not set\n-\n-#\n-# Paths\n-#\n-CT_LOCAL_TARBALLS_DIR=\"${HOME}/src\"\n-CT_SAVE_TARBALLS=y\n-# CT_TARBALLS_BUILDROOT_LAYOUT is not set\n-CT_WORK_DIR=\"${CT_TOP_DIR}/.build\"\n-CT_BUILD_TOP_DIR=\"${CT_WORK_DIR:-${CT_TOP_DIR}/.build}/${CT_HOST:+HOST-${CT_HOST}/}${CT_TARGET}\"\n-CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n-CT_RM_RF_PREFIX_DIR=y\n-CT_REMOVE_DOCS=y\n-CT_INSTALL_LICENSES=y\n-CT_PREFIX_DIR_RO=y\n-CT_STRIP_HOST_TOOLCHAIN_EXECUTABLES=y\n-# CT_STRIP_TARGET_TOOLCHAIN_EXECUTABLES is not set\n-\n-#\n-# Downloading\n-#\n-CT_DOWNLOAD_AGENT_WGET=y\n-# CT_DOWNLOAD_AGENT_CURL is not set\n-# CT_DOWNLOAD_AGENT_NONE is not set\n-# CT_FORBID_DOWNLOAD is not set\n-# CT_FORCE_DOWNLOAD is not set\n-CT_CONNECT_TIMEOUT=10\n-CT_DOWNLOAD_WGET_OPTIONS=\"--passive-ftp --tries=3 -nc --progress=dot:binary\"\n-# CT_ONLY_DOWNLOAD is not set\n-CT_USE_MIRROR=y\n-# CT_FORCE_MIRROR is not set\n-CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n-CT_VERIFY_DOWNLOAD_DIGEST=y\n-CT_VERIFY_DOWNLOAD_DIGEST_SHA512=y\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA256 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA1 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_MD5 is not set\n-CT_VERIFY_DOWNLOAD_DIGEST_ALG=\"sha512\"\n-# CT_VERIFY_DOWNLOAD_SIGNATURE is not set\n-\n-#\n-# Extracting\n-#\n-# CT_FORCE_EXTRACT is not set\n-CT_OVERRIDE_CONFIG_GUESS_SUB=y\n-# CT_ONLY_EXTRACT is not set\n-# CT_PATCH_BUNDLED is not set\n-CT_PATCH_BUNDLED_LOCAL=y\n-CT_PATCH_ORDER=\"bundled,local\"\n-CT_PATCH_USE_LOCAL=y\n-CT_LOCAL_PATCH_DIR=\"/tmp/patches\"\n-\n-#\n-# Build behavior\n-#\n-CT_PARALLEL_JOBS=0\n-CT_LOAD=\"\"\n-CT_USE_PIPES=y\n-CT_EXTRA_CFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_LDFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_CFLAGS_FOR_HOST=\"\"\n-CT_EXTRA_LDFLAGS_FOR_HOST=\"\"\n-# CT_CONFIG_SHELL_SH is not set\n-# CT_CONFIG_SHELL_ASH is not set\n-CT_CONFIG_SHELL_BASH=y\n-# CT_CONFIG_SHELL_CUSTOM is not set\n-CT_CONFIG_SHELL=\"${bash}\"\n-\n-#\n-# Logging\n-#\n-# CT_LOG_ERROR is not set\n-# CT_LOG_WARN is not set\n-# CT_LOG_INFO is not set\n-CT_LOG_EXTRA=y\n-# CT_LOG_ALL is not set\n-# CT_LOG_DEBUG is not set\n-CT_LOG_LEVEL_MAX=\"EXTRA\"\n-# CT_LOG_SEE_TOOLS_WARN is not set\n-CT_LOG_PROGRESS_BAR=y\n-CT_LOG_TO_FILE=y\n-CT_LOG_FILE_COMPRESS=y\n-\n-#\n-# Target options\n-#\n-# CT_ARCH_ALPHA is not set\n-# CT_ARCH_ARC is not set\n-# CT_ARCH_ARM is not set\n-# CT_ARCH_AVR is not set\n-# CT_ARCH_M68K is not set\n-CT_ARCH_MIPS=y\n-# CT_ARCH_NIOS2 is not set\n-# CT_ARCH_POWERPC is not set\n-# CT_ARCH_S390 is not set\n-# CT_ARCH_SH is not set\n-# CT_ARCH_SPARC is not set\n-# CT_ARCH_X86 is not set\n-# CT_ARCH_XTENSA is not set\n-CT_ARCH=\"mips\"\n-CT_ARCH_CHOICE_KSYM=\"MIPS\"\n-CT_ARCH_TUNE=\"\"\n-CT_ARCH_MIPS_SHOW=y\n-\n-#\n-# Options for mips\n-#\n-CT_ARCH_MIPS_PKG_KSYM=\"\"\n-CT_ARCH_mips_o32=y\n-CT_ARCH_mips_ABI=\"32\"\n-CT_ALL_ARCH_CHOICES=\"ALPHA ARC ARM AVR M68K MICROBLAZE MIPS MOXIE MSP430 NIOS2 POWERPC RISCV S390 SH SPARC X86 XTENSA\"\n-CT_ARCH_SUFFIX=\"\"\n-# CT_OMIT_TARGET_VENDOR is not set\n-\n-#\n-# Generic target options\n-#\n-# CT_MULTILIB is not set\n-CT_DEMULTILIB=y\n-CT_ARCH_USE_MMU=y\n-CT_ARCH_SUPPORTS_EITHER_ENDIAN=y\n-CT_ARCH_DEFAULT_BE=y\n-CT_ARCH_BE=y\n-# CT_ARCH_LE is not set\n-CT_ARCH_ENDIAN=\"big\"\n-CT_ARCH_SUPPORTS_32=y\n-CT_ARCH_SUPPORTS_64=y\n-CT_ARCH_DEFAULT_32=y\n-CT_ARCH_BITNESS=32\n-CT_ARCH_32=y\n-# CT_ARCH_64 is not set\n-\n-#\n-# Target optimisations\n-#\n-CT_ARCH_SUPPORTS_WITH_ARCH=y\n-CT_ARCH_SUPPORTS_WITH_TUNE=y\n-CT_ARCH_SUPPORTS_WITH_FLOAT=y\n-CT_ARCH_ARCH=\"mips32r2\"\n-CT_ARCH_FLOAT_AUTO=y\n-# CT_ARCH_FLOAT_HW is not set\n-# CT_ARCH_FLOAT_SW is not set\n-CT_TARGET_CFLAGS=\"\"\n-CT_TARGET_LDFLAGS=\"\"\n-CT_ARCH_FLOAT=\"auto\"\n-\n-#\n-# Toolchain options\n-#\n-\n-#\n-# General toolchain options\n-#\n-CT_FORCE_SYSROOT=y\n-CT_USE_SYSROOT=y\n-CT_SYSROOT_NAME=\"sysroot\"\n-CT_SYSROOT_DIR_PREFIX=\"\"\n-CT_WANTS_STATIC_LINK=y\n-CT_WANTS_STATIC_LINK_CXX=y\n-# CT_STATIC_TOOLCHAIN is not set\n-CT_SHOW_CT_VERSION=y\n-CT_TOOLCHAIN_PKGVERSION=\"\"\n-CT_TOOLCHAIN_BUGURL=\"\"\n-\n-#\n-# Tuple completion and aliasing\n-#\n-CT_TARGET_VENDOR=\"unknown\"\n-CT_TARGET_ALIAS_SED_EXPR=\"\"\n-CT_TARGET_ALIAS=\"\"\n-\n-#\n-# Toolchain type\n-#\n-CT_CROSS=y\n-# CT_CANADIAN is not set\n-CT_TOOLCHAIN_TYPE=\"cross\"\n-\n-#\n-# Build system\n-#\n-CT_BUILD=\"\"\n-CT_BUILD_PREFIX=\"\"\n-CT_BUILD_SUFFIX=\"\"\n-\n-#\n-# Misc options\n-#\n-# CT_TOOLCHAIN_ENABLE_NLS is not set\n-\n-#\n-# Operating System\n-#\n-CT_KERNEL_SUPPORTS_SHARED_LIBS=y\n-# CT_KERNEL_BARE_METAL is not set\n-CT_KERNEL_LINUX=y\n-CT_KERNEL=\"linux\"\n-CT_KERNEL_CHOICE_KSYM=\"LINUX\"\n-CT_KERNEL_LINUX_SHOW=y\n-\n-#\n-# Options for linux\n-#\n-CT_KERNEL_LINUX_PKG_KSYM=\"LINUX\"\n-CT_LINUX_DIR_NAME=\"linux\"\n-CT_LINUX_PKG_NAME=\"linux\"\n-CT_LINUX_SRC_RELEASE=y\n-CT_LINUX_PATCH_ORDER=\"global\"\n-# CT_LINUX_V_4_20 is not set\n-# CT_LINUX_V_4_19 is not set\n-# CT_LINUX_V_4_18 is not set\n-# CT_LINUX_V_4_17 is not set\n-# CT_LINUX_V_4_16 is not set\n-# CT_LINUX_V_4_15 is not set\n-# CT_LINUX_V_4_14 is not set\n-# CT_LINUX_V_4_13 is not set\n-# CT_LINUX_V_4_12 is not set\n-# CT_LINUX_V_4_11 is not set\n-# CT_LINUX_V_4_10 is not set\n-# CT_LINUX_V_4_9 is not set\n-CT_LINUX_V_4_4=y\n-# CT_LINUX_V_4_1 is not set\n-# CT_LINUX_V_3_16 is not set\n-# CT_LINUX_V_3_13 is not set\n-# CT_LINUX_V_3_12 is not set\n-# CT_LINUX_V_3_10 is not set\n-# CT_LINUX_V_3_4 is not set\n-# CT_LINUX_V_3_2 is not set\n-# CT_LINUX_V_2_6_32 is not set\n-# CT_LINUX_NO_VERSIONS is not set\n-CT_LINUX_VERSION=\"4.4.174\"\n-CT_LINUX_MIRRORS=\"$(CT_Mirrors kernel.org linux ${CT_LINUX_VERSION})\"\n-CT_LINUX_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_LINUX_SIGNATURE_FORMAT=\"unpacked/.sign\"\n-CT_LINUX_4_8_or_older=y\n-CT_LINUX_older_than_4_8=y\n-CT_LINUX_later_than_3_7=y\n-CT_LINUX_3_7_or_later=y\n-CT_LINUX_later_than_3_2=y\n-CT_LINUX_3_2_or_later=y\n-CT_KERNEL_LINUX_VERBOSITY_0=y\n-# CT_KERNEL_LINUX_VERBOSITY_1 is not set\n-# CT_KERNEL_LINUX_VERBOSITY_2 is not set\n-CT_KERNEL_LINUX_VERBOSE_LEVEL=0\n-CT_KERNEL_LINUX_INSTALL_CHECK=y\n-CT_ALL_KERNEL_CHOICES=\"BARE_METAL LINUX WINDOWS\"\n-\n-#\n-# Common kernel options\n-#\n-CT_SHARED_LIBS=y\n-\n-#\n-# Binary utilities\n-#\n-CT_ARCH_BINFMT_ELF=y\n-CT_BINUTILS_BINUTILS=y\n-CT_BINUTILS=\"binutils\"\n-CT_BINUTILS_CHOICE_KSYM=\"BINUTILS\"\n-CT_BINUTILS_BINUTILS_SHOW=y\n-\n-#\n-# Options for binutils\n-#\n-CT_BINUTILS_BINUTILS_PKG_KSYM=\"BINUTILS\"\n-CT_BINUTILS_DIR_NAME=\"binutils\"\n-CT_BINUTILS_USE_GNU=y\n-CT_BINUTILS_USE=\"BINUTILS\"\n-CT_BINUTILS_PKG_NAME=\"binutils\"\n-CT_BINUTILS_SRC_RELEASE=y\n-CT_BINUTILS_PATCH_ORDER=\"global\"\n-CT_BINUTILS_V_2_32=y\n-# CT_BINUTILS_V_2_31 is not set\n-# CT_BINUTILS_V_2_30 is not set\n-# CT_BINUTILS_V_2_29 is not set\n-# CT_BINUTILS_V_2_28 is not set\n-# CT_BINUTILS_V_2_27 is not set\n-# CT_BINUTILS_V_2_26 is not set\n-# CT_BINUTILS_NO_VERSIONS is not set\n-CT_BINUTILS_VERSION=\"2.32\"\n-CT_BINUTILS_MIRRORS=\"$(CT_Mirrors GNU binutils) $(CT_Mirrors sourceware binutils/releases)\"\n-CT_BINUTILS_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_BINUTILS_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_BINUTILS_later_than_2_30=y\n-CT_BINUTILS_2_30_or_later=y\n-CT_BINUTILS_later_than_2_27=y\n-CT_BINUTILS_2_27_or_later=y\n-CT_BINUTILS_later_than_2_25=y\n-CT_BINUTILS_2_25_or_later=y\n-CT_BINUTILS_later_than_2_23=y\n-CT_BINUTILS_2_23_or_later=y\n-\n-#\n-# GNU binutils\n-#\n-CT_BINUTILS_HAS_HASH_STYLE=y\n-CT_BINUTILS_HAS_GOLD=y\n-CT_BINUTILS_HAS_PLUGINS=y\n-CT_BINUTILS_HAS_PKGVERSION_BUGURL=y\n-CT_BINUTILS_FORCE_LD_BFD_DEFAULT=y\n-CT_BINUTILS_LINKER_LD=y\n-CT_BINUTILS_LINKERS_LIST=\"ld\"\n-CT_BINUTILS_LINKER_DEFAULT=\"bfd\"\n-# CT_BINUTILS_PLUGINS is not set\n-CT_BINUTILS_RELRO=m\n-CT_BINUTILS_EXTRA_CONFIG_ARRAY=\"\"\n-# CT_BINUTILS_FOR_TARGET is not set\n-CT_ALL_BINUTILS_CHOICES=\"BINUTILS\"\n-\n-#\n-# C-library\n-#\n-CT_LIBC_GLIBC=y\n-# CT_LIBC_UCLIBC is not set\n-CT_LIBC=\"glibc\"\n-CT_LIBC_CHOICE_KSYM=\"GLIBC\"\n-CT_THREADS=\"nptl\"\n-CT_LIBC_GLIBC_SHOW=y\n-\n-#\n-# Options for glibc\n-#\n-CT_LIBC_GLIBC_PKG_KSYM=\"GLIBC\"\n-CT_GLIBC_DIR_NAME=\"glibc\"\n-CT_GLIBC_USE_GNU=y\n-CT_GLIBC_USE=\"GLIBC\"\n-CT_GLIBC_PKG_NAME=\"glibc\"\n-CT_GLIBC_SRC_RELEASE=y\n-CT_GLIBC_PATCH_ORDER=\"global\"\n-# CT_GLIBC_V_2_29 is not set\n-# CT_GLIBC_V_2_28 is not set\n-# CT_GLIBC_V_2_27 is not set\n-# CT_GLIBC_V_2_26 is not set\n-# CT_GLIBC_V_2_25 is not set\n-# CT_GLIBC_V_2_24 is not set\n-CT_GLIBC_V_2_23=y\n-# CT_GLIBC_V_2_19 is not set\n-# CT_GLIBC_V_2_17 is not set\n-# CT_GLIBC_V_2_12_1 is not set\n-# CT_GLIBC_NO_VERSIONS is not set\n-CT_GLIBC_VERSION=\"2.23\"\n-CT_GLIBC_MIRRORS=\"$(CT_Mirrors GNU glibc)\"\n-CT_GLIBC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_GLIBC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GLIBC_2_29_or_older=y\n-CT_GLIBC_older_than_2_29=y\n-CT_GLIBC_2_27_or_older=y\n-CT_GLIBC_older_than_2_27=y\n-CT_GLIBC_2_26_or_older=y\n-CT_GLIBC_older_than_2_26=y\n-CT_GLIBC_2_25_or_older=y\n-CT_GLIBC_older_than_2_25=y\n-CT_GLIBC_2_24_or_older=y\n-CT_GLIBC_older_than_2_24=y\n-CT_GLIBC_2_23_or_later=y\n-CT_GLIBC_2_23_or_older=y\n-CT_GLIBC_later_than_2_20=y\n-CT_GLIBC_2_20_or_later=y\n-CT_GLIBC_later_than_2_17=y\n-CT_GLIBC_2_17_or_later=y\n-CT_GLIBC_later_than_2_14=y\n-CT_GLIBC_2_14_or_later=y\n-CT_GLIBC_DEP_KERNEL_HEADERS_VERSION=y\n-CT_GLIBC_DEP_BINUTILS=y\n-CT_GLIBC_DEP_GCC=y\n-CT_GLIBC_DEP_PYTHON=y\n-CT_GLIBC_HAS_LIBIDN_ADDON=y\n-# CT_GLIBC_USE_LIBIDN_ADDON is not set\n-CT_GLIBC_NO_SPARC_V8=y\n-CT_GLIBC_HAS_OBSOLETE_RPC=y\n-CT_GLIBC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_GLIBC_CONFIGPARMS=\"\"\n-CT_GLIBC_EXTRA_CFLAGS=\"\"\n-CT_GLIBC_ENABLE_OBSOLETE_RPC=y\n-# CT_GLIBC_DISABLE_VERSIONING is not set\n-CT_GLIBC_OLDEST_ABI=\"\"\n-CT_GLIBC_FORCE_UNWIND=y\n-# CT_GLIBC_LOCALES is not set\n-# CT_GLIBC_KERNEL_VERSION_NONE is not set\n-CT_GLIBC_KERNEL_VERSION_AS_HEADERS=y\n-# CT_GLIBC_KERNEL_VERSION_CHOSEN is not set\n-CT_GLIBC_MIN_KERNEL=\"4.4.174\"\n-CT_ALL_LIBC_CHOICES=\"AVR_LIBC BIONIC GLIBC MINGW_W64 MOXIEBOX MUSL NEWLIB NONE UCLIBC\"\n-CT_LIBC_SUPPORT_THREADS_ANY=y\n-CT_LIBC_SUPPORT_THREADS_NATIVE=y\n-\n-#\n-# Common C library options\n-#\n-CT_THREADS_NATIVE=y\n-# CT_CREATE_LDSO_CONF is not set\n-CT_LIBC_XLDD=y\n-\n-#\n-# C compiler\n-#\n-CT_CC_CORE_PASSES_NEEDED=y\n-CT_CC_CORE_PASS_1_NEEDED=y\n-CT_CC_CORE_PASS_2_NEEDED=y\n-CT_CC_SUPPORT_CXX=y\n-CT_CC_SUPPORT_FORTRAN=y\n-CT_CC_SUPPORT_ADA=y\n-CT_CC_SUPPORT_OBJC=y\n-CT_CC_SUPPORT_OBJCXX=y\n-CT_CC_SUPPORT_GOLANG=y\n-CT_CC_GCC=y\n-CT_CC=\"gcc\"\n-CT_CC_CHOICE_KSYM=\"GCC\"\n-CT_CC_GCC_SHOW=y\n-\n-#\n-# Options for gcc\n-#\n-CT_CC_GCC_PKG_KSYM=\"GCC\"\n-CT_GCC_DIR_NAME=\"gcc\"\n-CT_GCC_USE_GNU=y\n-CT_GCC_USE=\"GCC\"\n-CT_GCC_PKG_NAME=\"gcc\"\n-CT_GCC_SRC_RELEASE=y\n-CT_GCC_PATCH_ORDER=\"global\"\n-CT_GCC_V_8=y\n-# CT_GCC_V_7 is not set\n-# CT_GCC_V_6 is not set\n-# CT_GCC_V_5 is not set\n-# CT_GCC_V_4_9 is not set\n-# CT_GCC_NO_VERSIONS is not set\n-CT_GCC_VERSION=\"8.3.0\"\n-CT_GCC_MIRRORS=\"$(CT_Mirrors GNU gcc/gcc-${CT_GCC_VERSION}) $(CT_Mirrors sourceware gcc/releases/gcc-${CT_GCC_VERSION})\"\n-CT_GCC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_GCC_SIGNATURE_FORMAT=\"\"\n-CT_GCC_later_than_7=y\n-CT_GCC_7_or_later=y\n-CT_GCC_later_than_6=y\n-CT_GCC_6_or_later=y\n-CT_GCC_later_than_5=y\n-CT_GCC_5_or_later=y\n-CT_GCC_later_than_4_9=y\n-CT_GCC_4_9_or_later=y\n-CT_GCC_later_than_4_8=y\n-CT_GCC_4_8_or_later=y\n-CT_CC_GCC_HAS_LIBMPX=y\n-CT_CC_GCC_ENABLE_CXX_FLAGS=\"\"\n-CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"--with-fp-32=xx --with-odd-spreg-32=no\"\n-CT_CC_GCC_STATIC_LIBSTDCXX=y\n-# CT_CC_GCC_SYSTEM_ZLIB is not set\n-CT_CC_GCC_CONFIG_TLS=m\n-\n-#\n-# Optimisation features\n-#\n-CT_CC_GCC_USE_GRAPHITE=y\n-CT_CC_GCC_USE_LTO=y\n-\n-#\n-# Settings for libraries running on target\n-#\n-CT_CC_GCC_ENABLE_TARGET_OPTSPACE=y\n-# CT_CC_GCC_LIBMUDFLAP is not set\n-# CT_CC_GCC_LIBGOMP is not set\n-# CT_CC_GCC_LIBSSP is not set\n-# CT_CC_GCC_LIBQUADMATH is not set\n-# CT_CC_GCC_LIBSANITIZER is not set\n-\n-#\n-# Misc. obscure options.\n-#\n-CT_CC_CXA_ATEXIT=y\n-# CT_CC_GCC_DISABLE_PCH is not set\n-CT_CC_GCC_SJLJ_EXCEPTIONS=m\n-CT_CC_GCC_LDBL_128=m\n-# CT_CC_GCC_BUILD_ID is not set\n-CT_CC_GCC_LNK_HASH_STYLE_DEFAULT=y\n-# CT_CC_GCC_LNK_HASH_STYLE_SYSV is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_GNU is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_BOTH is not set\n-CT_CC_GCC_LNK_HASH_STYLE=\"\"\n-CT_CC_GCC_DEC_FLOAT_AUTO=y\n-# CT_CC_GCC_DEC_FLOAT_BID is not set\n-# CT_CC_GCC_DEC_FLOAT_DPD is not set\n-# CT_CC_GCC_DEC_FLOATS_NO is not set\n-CT_CC_GCC_HAS_ARCH_OPTIONS=y\n-\n-#\n-# architecture-specific options\n-#\n-CT_CC_GCC_mips_llsc=m\n-CT_CC_GCC_mips_synci=m\n-# CT_CC_GCC_mips_plt is not set\n-CT_ALL_CC_CHOICES=\"GCC\"\n-\n-#\n-# Additional supported languages:\n-#\n-CT_CC_LANG_CXX=y\n-# CT_CC_LANG_FORTRAN is not set\n-\n-#\n-# Debug facilities\n-#\n-# CT_DEBUG_DUMA is not set\n-# CT_DEBUG_GDB is not set\n-# CT_DEBUG_LTRACE is not set\n-# CT_DEBUG_STRACE is not set\n-CT_ALL_DEBUG_CHOICES=\"DUMA GDB LTRACE STRACE\"\n-\n-#\n-# Companion libraries\n-#\n-# CT_COMPLIBS_CHECK is not set\n-# CT_COMP_LIBS_CLOOG is not set\n-# CT_COMP_LIBS_EXPAT is not set\n-CT_COMP_LIBS_GETTEXT=y\n-CT_COMP_LIBS_GETTEXT_PKG_KSYM=\"GETTEXT\"\n-CT_GETTEXT_DIR_NAME=\"gettext\"\n-CT_GETTEXT_PKG_NAME=\"gettext\"\n-CT_GETTEXT_SRC_RELEASE=y\n-CT_GETTEXT_PATCH_ORDER=\"global\"\n-CT_GETTEXT_V_0_19_8_1=y\n-# CT_GETTEXT_NO_VERSIONS is not set\n-CT_GETTEXT_VERSION=\"0.19.8.1\"\n-CT_GETTEXT_MIRRORS=\"$(CT_Mirrors GNU gettext)\"\n-CT_GETTEXT_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.gz\"\n-CT_GETTEXT_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_GMP=y\n-CT_COMP_LIBS_GMP_PKG_KSYM=\"GMP\"\n-CT_GMP_DIR_NAME=\"gmp\"\n-CT_GMP_PKG_NAME=\"gmp\"\n-CT_GMP_SRC_RELEASE=y\n-CT_GMP_PATCH_ORDER=\"global\"\n-CT_GMP_V_6_1=y\n-# CT_GMP_NO_VERSIONS is not set\n-CT_GMP_VERSION=\"6.1.2\"\n-CT_GMP_MIRRORS=\"https://gmplib.org/download/gmp https://gmplib.org/download/gmp/archive $(CT_Mirrors GNU gmp)\"\n-CT_GMP_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.bz2\"\n-CT_GMP_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GMP_later_than_5_1_0=y\n-CT_GMP_5_1_0_or_later=y\n-CT_GMP_later_than_5_0_0=y\n-CT_GMP_5_0_0_or_later=y\n-CT_GMP_REQUIRE_5_0_0_or_later=y\n-CT_COMP_LIBS_ISL=y\n-CT_COMP_LIBS_ISL_PKG_KSYM=\"ISL\"\n-CT_ISL_DIR_NAME=\"isl\"\n-CT_ISL_PKG_NAME=\"isl\"\n-CT_ISL_SRC_RELEASE=y\n-CT_ISL_PATCH_ORDER=\"global\"\n-CT_ISL_V_0_20=y\n-# CT_ISL_V_0_19 is not set\n-# CT_ISL_V_0_18 is not set\n-# CT_ISL_V_0_17 is not set\n-# CT_ISL_V_0_16 is not set\n-# CT_ISL_V_0_15 is not set\n-# CT_ISL_NO_VERSIONS is not set\n-CT_ISL_VERSION=\"0.20\"\n-CT_ISL_MIRRORS=\"http://isl.gforge.inria.fr\"\n-CT_ISL_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_ISL_SIGNATURE_FORMAT=\"\"\n-CT_ISL_later_than_0_18=y\n-CT_ISL_0_18_or_later=y\n-CT_ISL_later_than_0_15=y\n-CT_ISL_0_15_or_later=y\n-CT_ISL_REQUIRE_0_15_or_later=y\n-CT_ISL_later_than_0_14=y\n-CT_ISL_0_14_or_later=y\n-CT_ISL_REQUIRE_0_14_or_later=y\n-CT_ISL_later_than_0_13=y\n-CT_ISL_0_13_or_later=y\n-CT_ISL_later_than_0_12=y\n-CT_ISL_0_12_or_later=y\n-CT_ISL_REQUIRE_0_12_or_later=y\n-# CT_COMP_LIBS_LIBELF is not set\n-CT_COMP_LIBS_LIBICONV=y\n-CT_COMP_LIBS_LIBICONV_PKG_KSYM=\"LIBICONV\"\n-CT_LIBICONV_DIR_NAME=\"libiconv\"\n-CT_LIBICONV_PKG_NAME=\"libiconv\"\n-CT_LIBICONV_SRC_RELEASE=y\n-CT_LIBICONV_PATCH_ORDER=\"global\"\n-CT_LIBICONV_V_1_15=y\n-# CT_LIBICONV_NO_VERSIONS is not set\n-CT_LIBICONV_VERSION=\"1.15\"\n-CT_LIBICONV_MIRRORS=\"$(CT_Mirrors GNU libiconv)\"\n-CT_LIBICONV_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_LIBICONV_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_MPC=y\n-CT_COMP_LIBS_MPC_PKG_KSYM=\"MPC\"\n-CT_MPC_DIR_NAME=\"mpc\"\n-CT_MPC_PKG_NAME=\"mpc\"\n-CT_MPC_SRC_RELEASE=y\n-CT_MPC_PATCH_ORDER=\"global\"\n-CT_MPC_V_1_1=y\n-# CT_MPC_V_1_0 is not set\n-# CT_MPC_NO_VERSIONS is not set\n-CT_MPC_VERSION=\"1.1.0\"\n-CT_MPC_MIRRORS=\"http://www.multiprecision.org/downloads $(CT_Mirrors GNU mpc)\"\n-CT_MPC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_MPC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_MPC_1_1_0_or_later=y\n-CT_MPC_1_1_0_or_older=y\n-CT_COMP_LIBS_MPFR=y\n-CT_COMP_LIBS_MPFR_PKG_KSYM=\"MPFR\"\n-CT_MPFR_DIR_NAME=\"mpfr\"\n-CT_MPFR_PKG_NAME=\"mpfr\"\n-CT_MPFR_SRC_RELEASE=y\n-CT_MPFR_PATCH_ORDER=\"global\"\n-CT_MPFR_V_4_0=y\n-# CT_MPFR_V_3_1 is not set\n-# CT_MPFR_NO_VERSIONS is not set\n-CT_MPFR_VERSION=\"4.0.2\"\n-CT_MPFR_MIRRORS=\"http://www.mpfr.org/mpfr-${CT_MPFR_VERSION} $(CT_Mirrors GNU mpfr)\"\n-CT_MPFR_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz .zip\"\n-CT_MPFR_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_MPFR_later_than_4_0_0=y\n-CT_MPFR_4_0_0_or_later=y\n-CT_MPFR_later_than_3_0_0=y\n-CT_MPFR_3_0_0_or_later=y\n-CT_MPFR_REQUIRE_3_0_0_or_later=y\n-CT_COMP_LIBS_NCURSES=y\n-CT_COMP_LIBS_NCURSES_PKG_KSYM=\"NCURSES\"\n-CT_NCURSES_DIR_NAME=\"ncurses\"\n-CT_NCURSES_PKG_NAME=\"ncurses\"\n-CT_NCURSES_SRC_RELEASE=y\n-CT_NCURSES_PATCH_ORDER=\"global\"\n-CT_NCURSES_V_6_1=y\n-# CT_NCURSES_V_6_0 is not set\n-# CT_NCURSES_NO_VERSIONS is not set\n-CT_NCURSES_VERSION=\"6.1\"\n-CT_NCURSES_MIRRORS=\"ftp://invisible-island.net/ncurses $(CT_Mirrors GNU ncurses)\"\n-CT_NCURSES_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_NCURSES_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_NCURSES_HOST_CONFIG_ARGS=\"\"\n-CT_NCURSES_HOST_DISABLE_DB=y\n-CT_NCURSES_HOST_FALLBACKS=\"linux,xterm,xterm-color,xterm-256color,vt100\"\n-CT_NCURSES_TARGET_CONFIG_ARGS=\"\"\n-# CT_NCURSES_TARGET_DISABLE_DB is not set\n-CT_NCURSES_TARGET_FALLBACKS=\"\"\n-CT_COMP_LIBS_ZLIB=y\n-CT_COMP_LIBS_ZLIB_PKG_KSYM=\"ZLIB\"\n-CT_ZLIB_DIR_NAME=\"zlib\"\n-CT_ZLIB_PKG_NAME=\"zlib\"\n-CT_ZLIB_SRC_RELEASE=y\n-CT_ZLIB_PATCH_ORDER=\"global\"\n-CT_ZLIB_V_1_2_11=y\n-# CT_ZLIB_NO_VERSIONS is not set\n-CT_ZLIB_VERSION=\"1.2.11\"\n-CT_ZLIB_MIRRORS=\"http://downloads.sourceforge.net/project/libpng/zlib/${CT_ZLIB_VERSION}\"\n-CT_ZLIB_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_ZLIB_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_ALL_COMP_LIBS_CHOICES=\"CLOOG EXPAT GETTEXT GMP ISL LIBELF LIBICONV MPC MPFR NCURSES ZLIB\"\n-CT_LIBICONV_NEEDED=y\n-CT_GETTEXT_NEEDED=y\n-CT_GMP_NEEDED=y\n-CT_MPFR_NEEDED=y\n-CT_ISL_NEEDED=y\n-CT_MPC_NEEDED=y\n-CT_NCURSES_NEEDED=y\n-CT_ZLIB_NEEDED=y\n-CT_LIBICONV=y\n-CT_GETTEXT=y\n-CT_GMP=y\n-CT_MPFR=y\n-CT_ISL=y\n-CT_MPC=y\n-CT_NCURSES=y\n-CT_ZLIB=y\n-\n-#\n-# Companion tools\n-#\n-# CT_COMP_TOOLS_FOR_HOST is not set\n-# CT_COMP_TOOLS_AUTOCONF is not set\n-# CT_COMP_TOOLS_AUTOMAKE is not set\n-# CT_COMP_TOOLS_BISON is not set\n-# CT_COMP_TOOLS_DTC is not set\n-# CT_COMP_TOOLS_LIBTOOL is not set\n-# CT_COMP_TOOLS_M4 is not set\n-# CT_COMP_TOOLS_MAKE is not set\n-CT_ALL_COMP_TOOLS_CHOICES=\"AUTOCONF AUTOMAKE BISON DTC LIBTOOL M4 MAKE\""}, {"sha": "75743fe81416b15004b54054a2dbc0ec0dded097", "filename": "src/ci/docker/host-x86_64/dist-mips-linux/mips-linux-gnu.defconfig", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips-linux%2Fmips-linux-gnu.defconfig", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips-linux%2Fmips-linux-gnu.defconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips-linux%2Fmips-linux-gnu.defconfig?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -0,0 +1,16 @@\n+CT_CONFIG_VERSION=\"4\"\n+CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n+CT_USE_MIRROR=y\n+CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n+CT_PATCH_BUNDLED_LOCAL=y\n+CT_LOCAL_PATCH_DIR=\"/tmp/patches\"\n+CT_ARCH_MIPS=y\n+CT_ARCH_mips_o32=y\n+CT_ARCH_ARCH=\"mips32r2\"\n+CT_KERNEL_LINUX=y\n+CT_LINUX_V_4_4=y\n+CT_BINUTILS_V_2_32=y\n+CT_GLIBC_V_2_23=y\n+CT_GCC_V_8=y\n+CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"--with-fp-32=xx --with-odd-spreg-32=no\"\n+CT_CC_LANG_CXX=y"}, {"sha": "10f31075e2d55d8d5a20f6149c1b7308fa9a8fe3", "filename": "src/ci/docker/host-x86_64/dist-mips64-linux/Dockerfile", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64-linux%2FDockerfile?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -3,16 +3,17 @@ FROM ubuntu:22.04\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/crosstool-ng-1.24.sh /scripts/\n-RUN sh /scripts/crosstool-ng-1.24.sh\n+COPY scripts/crosstool-ng.sh /scripts/\n+RUN sh /scripts/crosstool-ng.sh\n \n COPY scripts/rustbuild-setup.sh /scripts/\n RUN sh /scripts/rustbuild-setup.sh\n WORKDIR /tmp\n \n+COPY scripts/crosstool-ng-build.sh /scripts/\n COPY host-x86_64/dist-mips-linux/patches/ /tmp/patches/\n-COPY host-x86_64/dist-mips64-linux/mips64-linux-gnu.config host-x86_64/dist-mips64-linux/build-mips64-toolchain.sh /tmp/\n-RUN su rustbuild -c ./build-mips64-toolchain.sh\n+COPY host-x86_64/dist-mips64-linux/mips64-linux-gnu.defconfig /tmp/crosstool.defconfig\n+RUN /scripts/crosstool-ng-build.sh\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "f554a5f4754987474be054e0378736755f7bae32", "filename": "src/ci/docker/host-x86_64/dist-mips64-linux/build-mips64-toolchain.sh", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64-linux%2Fbuild-mips64-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64-linux%2Fbuild-mips64-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64-linux%2Fbuild-mips64-toolchain.sh?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,26 +0,0 @@\n-#!/usr/bin/env bash\n-set -ex\n-\n-hide_output() {\n-  set +x\n-  on_err=\"\n-echo ERROR: An error was encountered with the build.\n-cat /tmp/build.log\n-exit 1\n-\"\n-  trap \"$on_err\" ERR\n-  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n-  PING_LOOP_PID=$!\n-  \"$@\" &> /tmp/build.log\n-  rm /tmp/build.log\n-  trap - ERR\n-  kill $PING_LOOP_PID\n-  set -x\n-}\n-\n-mkdir build\n-cd build\n-cp ../mips64-linux-gnu.config .config\n-hide_output ct-ng build\n-cd ..\n-rm -rf build"}, {"sha": "c28d655427e3c25b914646b8fd97fdef502d56ce", "filename": "src/ci/docker/host-x86_64/dist-mips64-linux/mips64-linux-gnu.config", "status": "removed", "additions": 0, "deletions": 741, "changes": 741, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64-linux%2Fmips64-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64-linux%2Fmips64-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64-linux%2Fmips64-linux-gnu.config?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,741 +0,0 @@\n-#\n-# Automatically generated file; DO NOT EDIT.\n-# crosstool-NG  Configuration\n-#\n-CT_CONFIGURE_has_static_link=y\n-CT_CONFIGURE_has_cxx11=y\n-CT_CONFIGURE_has_wget=y\n-CT_CONFIGURE_has_curl=y\n-CT_CONFIGURE_has_make_3_81_or_newer=y\n-CT_CONFIGURE_has_make_4_0_or_newer=y\n-CT_CONFIGURE_has_libtool_2_4_or_newer=y\n-CT_CONFIGURE_has_libtoolize_2_4_or_newer=y\n-CT_CONFIGURE_has_autoconf_2_65_or_newer=y\n-CT_CONFIGURE_has_autoreconf_2_65_or_newer=y\n-CT_CONFIGURE_has_automake_1_15_or_newer=y\n-CT_CONFIGURE_has_gnu_m4_1_4_12_or_newer=y\n-CT_CONFIGURE_has_python_3_4_or_newer=y\n-CT_CONFIGURE_has_bison_2_7_or_newer=y\n-CT_CONFIGURE_has_python=y\n-CT_CONFIGURE_has_git=y\n-CT_CONFIGURE_has_md5sum=y\n-CT_CONFIGURE_has_sha1sum=y\n-CT_CONFIGURE_has_sha256sum=y\n-CT_CONFIGURE_has_sha512sum=y\n-CT_CONFIGURE_has_install_with_strip_program=y\n-CT_CONFIG_VERSION_CURRENT=\"3\"\n-CT_CONFIG_VERSION=\"3\"\n-CT_MODULES=y\n-\n-#\n-# Paths and misc options\n-#\n-\n-#\n-# crosstool-NG behavior\n-#\n-# CT_OBSOLETE is not set\n-# CT_EXPERIMENTAL is not set\n-# CT_DEBUG_CT is not set\n-\n-#\n-# Paths\n-#\n-CT_LOCAL_TARBALLS_DIR=\"${HOME}/src\"\n-CT_SAVE_TARBALLS=y\n-# CT_TARBALLS_BUILDROOT_LAYOUT is not set\n-CT_WORK_DIR=\"${CT_TOP_DIR}/.build\"\n-CT_BUILD_TOP_DIR=\"${CT_WORK_DIR:-${CT_TOP_DIR}/.build}/${CT_HOST:+HOST-${CT_HOST}/}${CT_TARGET}\"\n-CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n-CT_RM_RF_PREFIX_DIR=y\n-CT_REMOVE_DOCS=y\n-CT_INSTALL_LICENSES=y\n-CT_PREFIX_DIR_RO=y\n-CT_STRIP_HOST_TOOLCHAIN_EXECUTABLES=y\n-# CT_STRIP_TARGET_TOOLCHAIN_EXECUTABLES is not set\n-\n-#\n-# Downloading\n-#\n-CT_DOWNLOAD_AGENT_WGET=y\n-# CT_DOWNLOAD_AGENT_CURL is not set\n-# CT_DOWNLOAD_AGENT_NONE is not set\n-# CT_FORBID_DOWNLOAD is not set\n-# CT_FORCE_DOWNLOAD is not set\n-CT_CONNECT_TIMEOUT=10\n-CT_DOWNLOAD_WGET_OPTIONS=\"--passive-ftp --tries=3 -nc --progress=dot:binary\"\n-# CT_ONLY_DOWNLOAD is not set\n-CT_USE_MIRROR=y\n-# CT_FORCE_MIRROR is not set\n-CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n-CT_VERIFY_DOWNLOAD_DIGEST=y\n-CT_VERIFY_DOWNLOAD_DIGEST_SHA512=y\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA256 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA1 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_MD5 is not set\n-CT_VERIFY_DOWNLOAD_DIGEST_ALG=\"sha512\"\n-# CT_VERIFY_DOWNLOAD_SIGNATURE is not set\n-\n-#\n-# Extracting\n-#\n-# CT_FORCE_EXTRACT is not set\n-CT_OVERRIDE_CONFIG_GUESS_SUB=y\n-# CT_ONLY_EXTRACT is not set\n-# CT_PATCH_BUNDLED is not set\n-CT_PATCH_BUNDLED_LOCAL=y\n-CT_PATCH_ORDER=\"bundled,local\"\n-CT_PATCH_USE_LOCAL=y\n-CT_LOCAL_PATCH_DIR=\"/tmp/patches\"\n-\n-#\n-# Build behavior\n-#\n-CT_PARALLEL_JOBS=0\n-CT_LOAD=\"\"\n-CT_USE_PIPES=y\n-CT_EXTRA_CFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_LDFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_CFLAGS_FOR_HOST=\"\"\n-CT_EXTRA_LDFLAGS_FOR_HOST=\"\"\n-# CT_CONFIG_SHELL_SH is not set\n-# CT_CONFIG_SHELL_ASH is not set\n-CT_CONFIG_SHELL_BASH=y\n-# CT_CONFIG_SHELL_CUSTOM is not set\n-CT_CONFIG_SHELL=\"${bash}\"\n-\n-#\n-# Logging\n-#\n-# CT_LOG_ERROR is not set\n-# CT_LOG_WARN is not set\n-# CT_LOG_INFO is not set\n-CT_LOG_EXTRA=y\n-# CT_LOG_ALL is not set\n-# CT_LOG_DEBUG is not set\n-CT_LOG_LEVEL_MAX=\"EXTRA\"\n-# CT_LOG_SEE_TOOLS_WARN is not set\n-CT_LOG_PROGRESS_BAR=y\n-CT_LOG_TO_FILE=y\n-CT_LOG_FILE_COMPRESS=y\n-\n-#\n-# Target options\n-#\n-# CT_ARCH_ALPHA is not set\n-# CT_ARCH_ARC is not set\n-# CT_ARCH_ARM is not set\n-# CT_ARCH_AVR is not set\n-# CT_ARCH_M68K is not set\n-CT_ARCH_MIPS=y\n-# CT_ARCH_NIOS2 is not set\n-# CT_ARCH_POWERPC is not set\n-# CT_ARCH_S390 is not set\n-# CT_ARCH_SH is not set\n-# CT_ARCH_SPARC is not set\n-# CT_ARCH_X86 is not set\n-# CT_ARCH_XTENSA is not set\n-CT_ARCH=\"mips\"\n-CT_ARCH_CHOICE_KSYM=\"MIPS\"\n-CT_ARCH_TUNE=\"\"\n-CT_ARCH_MIPS_SHOW=y\n-\n-#\n-# Options for mips\n-#\n-CT_ARCH_MIPS_PKG_KSYM=\"\"\n-# CT_ARCH_mips_n32 is not set\n-CT_ARCH_mips_n64=y\n-CT_ARCH_mips_ABI=\"64\"\n-CT_ALL_ARCH_CHOICES=\"ALPHA ARC ARM AVR M68K MICROBLAZE MIPS MOXIE MSP430 NIOS2 POWERPC RISCV S390 SH SPARC X86 XTENSA\"\n-CT_ARCH_SUFFIX=\"\"\n-# CT_OMIT_TARGET_VENDOR is not set\n-\n-#\n-# Generic target options\n-#\n-# CT_MULTILIB is not set\n-CT_DEMULTILIB=y\n-CT_ARCH_USE_MMU=y\n-CT_ARCH_SUPPORTS_EITHER_ENDIAN=y\n-CT_ARCH_DEFAULT_BE=y\n-CT_ARCH_BE=y\n-# CT_ARCH_LE is not set\n-CT_ARCH_ENDIAN=\"big\"\n-CT_ARCH_SUPPORTS_32=y\n-CT_ARCH_SUPPORTS_64=y\n-CT_ARCH_DEFAULT_32=y\n-CT_ARCH_BITNESS=64\n-# CT_ARCH_32 is not set\n-CT_ARCH_64=y\n-\n-#\n-# Target optimisations\n-#\n-CT_ARCH_SUPPORTS_WITH_ARCH=y\n-CT_ARCH_SUPPORTS_WITH_TUNE=y\n-CT_ARCH_SUPPORTS_WITH_FLOAT=y\n-CT_ARCH_ARCH=\"mips64r2\"\n-CT_ARCH_FLOAT_AUTO=y\n-# CT_ARCH_FLOAT_HW is not set\n-# CT_ARCH_FLOAT_SW is not set\n-CT_TARGET_CFLAGS=\"\"\n-CT_TARGET_LDFLAGS=\"\"\n-CT_ARCH_FLOAT=\"auto\"\n-\n-#\n-# Toolchain options\n-#\n-\n-#\n-# General toolchain options\n-#\n-CT_FORCE_SYSROOT=y\n-CT_USE_SYSROOT=y\n-CT_SYSROOT_NAME=\"sysroot\"\n-CT_SYSROOT_DIR_PREFIX=\"\"\n-CT_WANTS_STATIC_LINK=y\n-CT_WANTS_STATIC_LINK_CXX=y\n-# CT_STATIC_TOOLCHAIN is not set\n-CT_SHOW_CT_VERSION=y\n-CT_TOOLCHAIN_PKGVERSION=\"\"\n-CT_TOOLCHAIN_BUGURL=\"\"\n-\n-#\n-# Tuple completion and aliasing\n-#\n-CT_TARGET_VENDOR=\"unknown\"\n-CT_TARGET_ALIAS_SED_EXPR=\"\"\n-CT_TARGET_ALIAS=\"\"\n-\n-#\n-# Toolchain type\n-#\n-CT_CROSS=y\n-# CT_CANADIAN is not set\n-CT_TOOLCHAIN_TYPE=\"cross\"\n-\n-#\n-# Build system\n-#\n-CT_BUILD=\"\"\n-CT_BUILD_PREFIX=\"\"\n-CT_BUILD_SUFFIX=\"\"\n-\n-#\n-# Misc options\n-#\n-# CT_TOOLCHAIN_ENABLE_NLS is not set\n-\n-#\n-# Operating System\n-#\n-CT_KERNEL_SUPPORTS_SHARED_LIBS=y\n-# CT_KERNEL_BARE_METAL is not set\n-CT_KERNEL_LINUX=y\n-CT_KERNEL=\"linux\"\n-CT_KERNEL_CHOICE_KSYM=\"LINUX\"\n-CT_KERNEL_LINUX_SHOW=y\n-\n-#\n-# Options for linux\n-#\n-CT_KERNEL_LINUX_PKG_KSYM=\"LINUX\"\n-CT_LINUX_DIR_NAME=\"linux\"\n-CT_LINUX_PKG_NAME=\"linux\"\n-CT_LINUX_SRC_RELEASE=y\n-CT_LINUX_PATCH_ORDER=\"global\"\n-# CT_LINUX_V_4_20 is not set\n-# CT_LINUX_V_4_19 is not set\n-# CT_LINUX_V_4_18 is not set\n-# CT_LINUX_V_4_17 is not set\n-# CT_LINUX_V_4_16 is not set\n-# CT_LINUX_V_4_15 is not set\n-# CT_LINUX_V_4_14 is not set\n-# CT_LINUX_V_4_13 is not set\n-# CT_LINUX_V_4_12 is not set\n-# CT_LINUX_V_4_11 is not set\n-# CT_LINUX_V_4_10 is not set\n-# CT_LINUX_V_4_9 is not set\n-CT_LINUX_V_4_4=y\n-# CT_LINUX_V_4_1 is not set\n-# CT_LINUX_V_3_16 is not set\n-# CT_LINUX_V_3_13 is not set\n-# CT_LINUX_V_3_12 is not set\n-# CT_LINUX_V_3_10 is not set\n-# CT_LINUX_V_3_4 is not set\n-# CT_LINUX_V_3_2 is not set\n-# CT_LINUX_V_2_6_32 is not set\n-# CT_LINUX_NO_VERSIONS is not set\n-CT_LINUX_VERSION=\"4.4.174\"\n-CT_LINUX_MIRRORS=\"$(CT_Mirrors kernel.org linux ${CT_LINUX_VERSION})\"\n-CT_LINUX_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_LINUX_SIGNATURE_FORMAT=\"unpacked/.sign\"\n-CT_LINUX_4_8_or_older=y\n-CT_LINUX_older_than_4_8=y\n-CT_LINUX_later_than_3_7=y\n-CT_LINUX_3_7_or_later=y\n-CT_LINUX_later_than_3_2=y\n-CT_LINUX_3_2_or_later=y\n-CT_KERNEL_LINUX_VERBOSITY_0=y\n-# CT_KERNEL_LINUX_VERBOSITY_1 is not set\n-# CT_KERNEL_LINUX_VERBOSITY_2 is not set\n-CT_KERNEL_LINUX_VERBOSE_LEVEL=0\n-CT_KERNEL_LINUX_INSTALL_CHECK=y\n-CT_ALL_KERNEL_CHOICES=\"BARE_METAL LINUX WINDOWS\"\n-\n-#\n-# Common kernel options\n-#\n-CT_SHARED_LIBS=y\n-\n-#\n-# Binary utilities\n-#\n-CT_ARCH_BINFMT_ELF=y\n-CT_BINUTILS_BINUTILS=y\n-CT_BINUTILS=\"binutils\"\n-CT_BINUTILS_CHOICE_KSYM=\"BINUTILS\"\n-CT_BINUTILS_BINUTILS_SHOW=y\n-\n-#\n-# Options for binutils\n-#\n-CT_BINUTILS_BINUTILS_PKG_KSYM=\"BINUTILS\"\n-CT_BINUTILS_DIR_NAME=\"binutils\"\n-CT_BINUTILS_USE_GNU=y\n-CT_BINUTILS_USE=\"BINUTILS\"\n-CT_BINUTILS_PKG_NAME=\"binutils\"\n-CT_BINUTILS_SRC_RELEASE=y\n-CT_BINUTILS_PATCH_ORDER=\"global\"\n-CT_BINUTILS_V_2_32=y\n-# CT_BINUTILS_V_2_31 is not set\n-# CT_BINUTILS_V_2_30 is not set\n-# CT_BINUTILS_V_2_29 is not set\n-# CT_BINUTILS_V_2_28 is not set\n-# CT_BINUTILS_V_2_27 is not set\n-# CT_BINUTILS_V_2_26 is not set\n-# CT_BINUTILS_NO_VERSIONS is not set\n-CT_BINUTILS_VERSION=\"2.32\"\n-CT_BINUTILS_MIRRORS=\"$(CT_Mirrors GNU binutils) $(CT_Mirrors sourceware binutils/releases)\"\n-CT_BINUTILS_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_BINUTILS_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_BINUTILS_later_than_2_30=y\n-CT_BINUTILS_2_30_or_later=y\n-CT_BINUTILS_later_than_2_27=y\n-CT_BINUTILS_2_27_or_later=y\n-CT_BINUTILS_later_than_2_25=y\n-CT_BINUTILS_2_25_or_later=y\n-CT_BINUTILS_later_than_2_23=y\n-CT_BINUTILS_2_23_or_later=y\n-\n-#\n-# GNU binutils\n-#\n-CT_BINUTILS_HAS_HASH_STYLE=y\n-CT_BINUTILS_HAS_GOLD=y\n-CT_BINUTILS_HAS_PLUGINS=y\n-CT_BINUTILS_HAS_PKGVERSION_BUGURL=y\n-CT_BINUTILS_FORCE_LD_BFD_DEFAULT=y\n-CT_BINUTILS_LINKER_LD=y\n-CT_BINUTILS_LINKERS_LIST=\"ld\"\n-CT_BINUTILS_LINKER_DEFAULT=\"bfd\"\n-# CT_BINUTILS_PLUGINS is not set\n-CT_BINUTILS_RELRO=m\n-CT_BINUTILS_EXTRA_CONFIG_ARRAY=\"\"\n-# CT_BINUTILS_FOR_TARGET is not set\n-CT_ALL_BINUTILS_CHOICES=\"BINUTILS\"\n-\n-#\n-# C-library\n-#\n-CT_LIBC_GLIBC=y\n-# CT_LIBC_UCLIBC is not set\n-CT_LIBC=\"glibc\"\n-CT_LIBC_CHOICE_KSYM=\"GLIBC\"\n-CT_THREADS=\"nptl\"\n-CT_LIBC_GLIBC_SHOW=y\n-\n-#\n-# Options for glibc\n-#\n-CT_LIBC_GLIBC_PKG_KSYM=\"GLIBC\"\n-CT_GLIBC_DIR_NAME=\"glibc\"\n-CT_GLIBC_USE_GNU=y\n-CT_GLIBC_USE=\"GLIBC\"\n-CT_GLIBC_PKG_NAME=\"glibc\"\n-CT_GLIBC_SRC_RELEASE=y\n-CT_GLIBC_PATCH_ORDER=\"global\"\n-# CT_GLIBC_V_2_29 is not set\n-# CT_GLIBC_V_2_28 is not set\n-# CT_GLIBC_V_2_27 is not set\n-# CT_GLIBC_V_2_26 is not set\n-# CT_GLIBC_V_2_25 is not set\n-# CT_GLIBC_V_2_24 is not set\n-CT_GLIBC_V_2_23=y\n-# CT_GLIBC_V_2_19 is not set\n-# CT_GLIBC_V_2_17 is not set\n-# CT_GLIBC_V_2_12_1 is not set\n-# CT_GLIBC_NO_VERSIONS is not set\n-CT_GLIBC_VERSION=\"2.23\"\n-CT_GLIBC_MIRRORS=\"$(CT_Mirrors GNU glibc)\"\n-CT_GLIBC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_GLIBC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GLIBC_2_29_or_older=y\n-CT_GLIBC_older_than_2_29=y\n-CT_GLIBC_2_27_or_older=y\n-CT_GLIBC_older_than_2_27=y\n-CT_GLIBC_2_26_or_older=y\n-CT_GLIBC_older_than_2_26=y\n-CT_GLIBC_2_25_or_older=y\n-CT_GLIBC_older_than_2_25=y\n-CT_GLIBC_2_24_or_older=y\n-CT_GLIBC_older_than_2_24=y\n-CT_GLIBC_2_23_or_later=y\n-CT_GLIBC_2_23_or_older=y\n-CT_GLIBC_later_than_2_20=y\n-CT_GLIBC_2_20_or_later=y\n-CT_GLIBC_later_than_2_17=y\n-CT_GLIBC_2_17_or_later=y\n-CT_GLIBC_later_than_2_14=y\n-CT_GLIBC_2_14_or_later=y\n-CT_GLIBC_DEP_KERNEL_HEADERS_VERSION=y\n-CT_GLIBC_DEP_BINUTILS=y\n-CT_GLIBC_DEP_GCC=y\n-CT_GLIBC_DEP_PYTHON=y\n-CT_GLIBC_HAS_LIBIDN_ADDON=y\n-# CT_GLIBC_USE_LIBIDN_ADDON is not set\n-CT_GLIBC_NO_SPARC_V8=y\n-CT_GLIBC_HAS_OBSOLETE_RPC=y\n-CT_GLIBC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_GLIBC_CONFIGPARMS=\"\"\n-CT_GLIBC_EXTRA_CFLAGS=\"\"\n-CT_GLIBC_ENABLE_OBSOLETE_RPC=y\n-# CT_GLIBC_DISABLE_VERSIONING is not set\n-CT_GLIBC_OLDEST_ABI=\"\"\n-CT_GLIBC_FORCE_UNWIND=y\n-# CT_GLIBC_LOCALES is not set\n-# CT_GLIBC_KERNEL_VERSION_NONE is not set\n-CT_GLIBC_KERNEL_VERSION_AS_HEADERS=y\n-# CT_GLIBC_KERNEL_VERSION_CHOSEN is not set\n-CT_GLIBC_MIN_KERNEL=\"4.4.174\"\n-CT_ALL_LIBC_CHOICES=\"AVR_LIBC BIONIC GLIBC MINGW_W64 MOXIEBOX MUSL NEWLIB NONE UCLIBC\"\n-CT_LIBC_SUPPORT_THREADS_ANY=y\n-CT_LIBC_SUPPORT_THREADS_NATIVE=y\n-\n-#\n-# Common C library options\n-#\n-CT_THREADS_NATIVE=y\n-# CT_CREATE_LDSO_CONF is not set\n-CT_LIBC_XLDD=y\n-\n-#\n-# C compiler\n-#\n-CT_CC_CORE_PASSES_NEEDED=y\n-CT_CC_CORE_PASS_1_NEEDED=y\n-CT_CC_CORE_PASS_2_NEEDED=y\n-CT_CC_SUPPORT_CXX=y\n-CT_CC_SUPPORT_FORTRAN=y\n-CT_CC_SUPPORT_ADA=y\n-CT_CC_SUPPORT_OBJC=y\n-CT_CC_SUPPORT_OBJCXX=y\n-CT_CC_SUPPORT_GOLANG=y\n-CT_CC_GCC=y\n-CT_CC=\"gcc\"\n-CT_CC_CHOICE_KSYM=\"GCC\"\n-CT_CC_GCC_SHOW=y\n-\n-#\n-# Options for gcc\n-#\n-CT_CC_GCC_PKG_KSYM=\"GCC\"\n-CT_GCC_DIR_NAME=\"gcc\"\n-CT_GCC_USE_GNU=y\n-CT_GCC_USE=\"GCC\"\n-CT_GCC_PKG_NAME=\"gcc\"\n-CT_GCC_SRC_RELEASE=y\n-CT_GCC_PATCH_ORDER=\"global\"\n-CT_GCC_V_8=y\n-# CT_GCC_V_7 is not set\n-# CT_GCC_V_6 is not set\n-# CT_GCC_V_5 is not set\n-# CT_GCC_V_4_9 is not set\n-# CT_GCC_NO_VERSIONS is not set\n-CT_GCC_VERSION=\"8.3.0\"\n-CT_GCC_MIRRORS=\"$(CT_Mirrors GNU gcc/gcc-${CT_GCC_VERSION}) $(CT_Mirrors sourceware gcc/releases/gcc-${CT_GCC_VERSION})\"\n-CT_GCC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_GCC_SIGNATURE_FORMAT=\"\"\n-CT_GCC_later_than_7=y\n-CT_GCC_7_or_later=y\n-CT_GCC_later_than_6=y\n-CT_GCC_6_or_later=y\n-CT_GCC_later_than_5=y\n-CT_GCC_5_or_later=y\n-CT_GCC_later_than_4_9=y\n-CT_GCC_4_9_or_later=y\n-CT_GCC_later_than_4_8=y\n-CT_GCC_4_8_or_later=y\n-CT_CC_GCC_HAS_LIBMPX=y\n-CT_CC_GCC_ENABLE_CXX_FLAGS=\"\"\n-CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_STATIC_LIBSTDCXX=y\n-# CT_CC_GCC_SYSTEM_ZLIB is not set\n-CT_CC_GCC_CONFIG_TLS=m\n-\n-#\n-# Optimisation features\n-#\n-CT_CC_GCC_USE_GRAPHITE=y\n-CT_CC_GCC_USE_LTO=y\n-\n-#\n-# Settings for libraries running on target\n-#\n-CT_CC_GCC_ENABLE_TARGET_OPTSPACE=y\n-# CT_CC_GCC_LIBMUDFLAP is not set\n-# CT_CC_GCC_LIBGOMP is not set\n-# CT_CC_GCC_LIBSSP is not set\n-# CT_CC_GCC_LIBQUADMATH is not set\n-# CT_CC_GCC_LIBSANITIZER is not set\n-\n-#\n-# Misc. obscure options.\n-#\n-CT_CC_CXA_ATEXIT=y\n-# CT_CC_GCC_DISABLE_PCH is not set\n-CT_CC_GCC_SJLJ_EXCEPTIONS=m\n-CT_CC_GCC_LDBL_128=m\n-# CT_CC_GCC_BUILD_ID is not set\n-CT_CC_GCC_LNK_HASH_STYLE_DEFAULT=y\n-# CT_CC_GCC_LNK_HASH_STYLE_SYSV is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_GNU is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_BOTH is not set\n-CT_CC_GCC_LNK_HASH_STYLE=\"\"\n-CT_CC_GCC_DEC_FLOAT_AUTO=y\n-# CT_CC_GCC_DEC_FLOAT_BID is not set\n-# CT_CC_GCC_DEC_FLOAT_DPD is not set\n-# CT_CC_GCC_DEC_FLOATS_NO is not set\n-CT_CC_GCC_HAS_ARCH_OPTIONS=y\n-\n-#\n-# architecture-specific options\n-#\n-CT_CC_GCC_mips_llsc=m\n-CT_CC_GCC_mips_synci=m\n-# CT_CC_GCC_mips_plt is not set\n-CT_ALL_CC_CHOICES=\"GCC\"\n-\n-#\n-# Additional supported languages:\n-#\n-CT_CC_LANG_CXX=y\n-# CT_CC_LANG_FORTRAN is not set\n-\n-#\n-# Debug facilities\n-#\n-# CT_DEBUG_DUMA is not set\n-# CT_DEBUG_GDB is not set\n-# CT_DEBUG_LTRACE is not set\n-# CT_DEBUG_STRACE is not set\n-CT_ALL_DEBUG_CHOICES=\"DUMA GDB LTRACE STRACE\"\n-\n-#\n-# Companion libraries\n-#\n-# CT_COMPLIBS_CHECK is not set\n-# CT_COMP_LIBS_CLOOG is not set\n-# CT_COMP_LIBS_EXPAT is not set\n-CT_COMP_LIBS_GETTEXT=y\n-CT_COMP_LIBS_GETTEXT_PKG_KSYM=\"GETTEXT\"\n-CT_GETTEXT_DIR_NAME=\"gettext\"\n-CT_GETTEXT_PKG_NAME=\"gettext\"\n-CT_GETTEXT_SRC_RELEASE=y\n-CT_GETTEXT_PATCH_ORDER=\"global\"\n-CT_GETTEXT_V_0_19_8_1=y\n-# CT_GETTEXT_NO_VERSIONS is not set\n-CT_GETTEXT_VERSION=\"0.19.8.1\"\n-CT_GETTEXT_MIRRORS=\"$(CT_Mirrors GNU gettext)\"\n-CT_GETTEXT_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.gz\"\n-CT_GETTEXT_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_GMP=y\n-CT_COMP_LIBS_GMP_PKG_KSYM=\"GMP\"\n-CT_GMP_DIR_NAME=\"gmp\"\n-CT_GMP_PKG_NAME=\"gmp\"\n-CT_GMP_SRC_RELEASE=y\n-CT_GMP_PATCH_ORDER=\"global\"\n-CT_GMP_V_6_1=y\n-# CT_GMP_NO_VERSIONS is not set\n-CT_GMP_VERSION=\"6.1.2\"\n-CT_GMP_MIRRORS=\"https://gmplib.org/download/gmp https://gmplib.org/download/gmp/archive $(CT_Mirrors GNU gmp)\"\n-CT_GMP_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.bz2\"\n-CT_GMP_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GMP_later_than_5_1_0=y\n-CT_GMP_5_1_0_or_later=y\n-CT_GMP_later_than_5_0_0=y\n-CT_GMP_5_0_0_or_later=y\n-CT_GMP_REQUIRE_5_0_0_or_later=y\n-CT_COMP_LIBS_ISL=y\n-CT_COMP_LIBS_ISL_PKG_KSYM=\"ISL\"\n-CT_ISL_DIR_NAME=\"isl\"\n-CT_ISL_PKG_NAME=\"isl\"\n-CT_ISL_SRC_RELEASE=y\n-CT_ISL_PATCH_ORDER=\"global\"\n-CT_ISL_V_0_20=y\n-# CT_ISL_V_0_19 is not set\n-# CT_ISL_V_0_18 is not set\n-# CT_ISL_V_0_17 is not set\n-# CT_ISL_V_0_16 is not set\n-# CT_ISL_V_0_15 is not set\n-# CT_ISL_NO_VERSIONS is not set\n-CT_ISL_VERSION=\"0.20\"\n-CT_ISL_MIRRORS=\"http://isl.gforge.inria.fr\"\n-CT_ISL_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_ISL_SIGNATURE_FORMAT=\"\"\n-CT_ISL_later_than_0_18=y\n-CT_ISL_0_18_or_later=y\n-CT_ISL_later_than_0_15=y\n-CT_ISL_0_15_or_later=y\n-CT_ISL_REQUIRE_0_15_or_later=y\n-CT_ISL_later_than_0_14=y\n-CT_ISL_0_14_or_later=y\n-CT_ISL_REQUIRE_0_14_or_later=y\n-CT_ISL_later_than_0_13=y\n-CT_ISL_0_13_or_later=y\n-CT_ISL_later_than_0_12=y\n-CT_ISL_0_12_or_later=y\n-CT_ISL_REQUIRE_0_12_or_later=y\n-# CT_COMP_LIBS_LIBELF is not set\n-CT_COMP_LIBS_LIBICONV=y\n-CT_COMP_LIBS_LIBICONV_PKG_KSYM=\"LIBICONV\"\n-CT_LIBICONV_DIR_NAME=\"libiconv\"\n-CT_LIBICONV_PKG_NAME=\"libiconv\"\n-CT_LIBICONV_SRC_RELEASE=y\n-CT_LIBICONV_PATCH_ORDER=\"global\"\n-CT_LIBICONV_V_1_15=y\n-# CT_LIBICONV_NO_VERSIONS is not set\n-CT_LIBICONV_VERSION=\"1.15\"\n-CT_LIBICONV_MIRRORS=\"$(CT_Mirrors GNU libiconv)\"\n-CT_LIBICONV_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_LIBICONV_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_MPC=y\n-CT_COMP_LIBS_MPC_PKG_KSYM=\"MPC\"\n-CT_MPC_DIR_NAME=\"mpc\"\n-CT_MPC_PKG_NAME=\"mpc\"\n-CT_MPC_SRC_RELEASE=y\n-CT_MPC_PATCH_ORDER=\"global\"\n-CT_MPC_V_1_1=y\n-# CT_MPC_V_1_0 is not set\n-# CT_MPC_NO_VERSIONS is not set\n-CT_MPC_VERSION=\"1.1.0\"\n-CT_MPC_MIRRORS=\"http://www.multiprecision.org/downloads $(CT_Mirrors GNU mpc)\"\n-CT_MPC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_MPC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_MPC_1_1_0_or_later=y\n-CT_MPC_1_1_0_or_older=y\n-CT_COMP_LIBS_MPFR=y\n-CT_COMP_LIBS_MPFR_PKG_KSYM=\"MPFR\"\n-CT_MPFR_DIR_NAME=\"mpfr\"\n-CT_MPFR_PKG_NAME=\"mpfr\"\n-CT_MPFR_SRC_RELEASE=y\n-CT_MPFR_PATCH_ORDER=\"global\"\n-CT_MPFR_V_4_0=y\n-# CT_MPFR_V_3_1 is not set\n-# CT_MPFR_NO_VERSIONS is not set\n-CT_MPFR_VERSION=\"4.0.2\"\n-CT_MPFR_MIRRORS=\"http://www.mpfr.org/mpfr-${CT_MPFR_VERSION} $(CT_Mirrors GNU mpfr)\"\n-CT_MPFR_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz .zip\"\n-CT_MPFR_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_MPFR_later_than_4_0_0=y\n-CT_MPFR_4_0_0_or_later=y\n-CT_MPFR_later_than_3_0_0=y\n-CT_MPFR_3_0_0_or_later=y\n-CT_MPFR_REQUIRE_3_0_0_or_later=y\n-CT_COMP_LIBS_NCURSES=y\n-CT_COMP_LIBS_NCURSES_PKG_KSYM=\"NCURSES\"\n-CT_NCURSES_DIR_NAME=\"ncurses\"\n-CT_NCURSES_PKG_NAME=\"ncurses\"\n-CT_NCURSES_SRC_RELEASE=y\n-CT_NCURSES_PATCH_ORDER=\"global\"\n-CT_NCURSES_V_6_1=y\n-# CT_NCURSES_V_6_0 is not set\n-# CT_NCURSES_NO_VERSIONS is not set\n-CT_NCURSES_VERSION=\"6.1\"\n-CT_NCURSES_MIRRORS=\"ftp://invisible-island.net/ncurses $(CT_Mirrors GNU ncurses)\"\n-CT_NCURSES_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_NCURSES_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_NCURSES_HOST_CONFIG_ARGS=\"\"\n-CT_NCURSES_HOST_DISABLE_DB=y\n-CT_NCURSES_HOST_FALLBACKS=\"linux,xterm,xterm-color,xterm-256color,vt100\"\n-CT_NCURSES_TARGET_CONFIG_ARGS=\"\"\n-# CT_NCURSES_TARGET_DISABLE_DB is not set\n-CT_NCURSES_TARGET_FALLBACKS=\"\"\n-CT_COMP_LIBS_ZLIB=y\n-CT_COMP_LIBS_ZLIB_PKG_KSYM=\"ZLIB\"\n-CT_ZLIB_DIR_NAME=\"zlib\"\n-CT_ZLIB_PKG_NAME=\"zlib\"\n-CT_ZLIB_SRC_RELEASE=y\n-CT_ZLIB_PATCH_ORDER=\"global\"\n-CT_ZLIB_V_1_2_11=y\n-# CT_ZLIB_NO_VERSIONS is not set\n-CT_ZLIB_VERSION=\"1.2.11\"\n-CT_ZLIB_MIRRORS=\"http://downloads.sourceforge.net/project/libpng/zlib/${CT_ZLIB_VERSION}\"\n-CT_ZLIB_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_ZLIB_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_ALL_COMP_LIBS_CHOICES=\"CLOOG EXPAT GETTEXT GMP ISL LIBELF LIBICONV MPC MPFR NCURSES ZLIB\"\n-CT_LIBICONV_NEEDED=y\n-CT_GETTEXT_NEEDED=y\n-CT_GMP_NEEDED=y\n-CT_MPFR_NEEDED=y\n-CT_ISL_NEEDED=y\n-CT_MPC_NEEDED=y\n-CT_NCURSES_NEEDED=y\n-CT_ZLIB_NEEDED=y\n-CT_LIBICONV=y\n-CT_GETTEXT=y\n-CT_GMP=y\n-CT_MPFR=y\n-CT_ISL=y\n-CT_MPC=y\n-CT_NCURSES=y\n-CT_ZLIB=y\n-\n-#\n-# Companion tools\n-#\n-# CT_COMP_TOOLS_FOR_HOST is not set\n-# CT_COMP_TOOLS_AUTOCONF is not set\n-# CT_COMP_TOOLS_AUTOMAKE is not set\n-# CT_COMP_TOOLS_BISON is not set\n-# CT_COMP_TOOLS_DTC is not set\n-# CT_COMP_TOOLS_LIBTOOL is not set\n-# CT_COMP_TOOLS_M4 is not set\n-# CT_COMP_TOOLS_MAKE is not set\n-CT_ALL_COMP_TOOLS_CHOICES=\"AUTOCONF AUTOMAKE BISON DTC LIBTOOL M4 MAKE\""}, {"sha": "4b8f7a5492033f0c3aa66d89aed7d6b773cbf5ea", "filename": "src/ci/docker/host-x86_64/dist-mips64-linux/mips64-linux-gnu.defconfig", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64-linux%2Fmips64-linux-gnu.defconfig", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64-linux%2Fmips64-linux-gnu.defconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64-linux%2Fmips64-linux-gnu.defconfig?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -0,0 +1,16 @@\n+CT_CONFIG_VERSION=\"4\"\n+CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n+CT_USE_MIRROR=y\n+CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n+CT_PATCH_BUNDLED_LOCAL=y\n+CT_LOCAL_PATCH_DIR=\"/tmp/patches\"\n+CT_ARCH_MIPS=y\n+CT_ARCH_mips_n64=y\n+CT_ARCH_64=y\n+CT_ARCH_ARCH=\"mips64r2\"\n+CT_KERNEL_LINUX=y\n+CT_LINUX_V_4_4=y\n+CT_BINUTILS_V_2_32=y\n+CT_GLIBC_V_2_23=y\n+CT_GCC_V_8=y\n+CT_CC_LANG_CXX=y"}, {"sha": "5ab4a53de8a8867d57964bb11616a476d765c5d7", "filename": "src/ci/docker/host-x86_64/dist-mips64el-linux/Dockerfile", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64el-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64el-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64el-linux%2FDockerfile?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -3,16 +3,17 @@ FROM ubuntu:22.04\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/crosstool-ng-1.24.sh /scripts/\n-RUN sh /scripts/crosstool-ng-1.24.sh\n+COPY scripts/crosstool-ng.sh /scripts/\n+RUN sh /scripts/crosstool-ng.sh\n \n COPY scripts/rustbuild-setup.sh /scripts/\n RUN sh /scripts/rustbuild-setup.sh\n WORKDIR /tmp\n \n+COPY scripts/crosstool-ng-build.sh /scripts/\n COPY host-x86_64/dist-mips-linux/patches/ /tmp/patches/\n-COPY host-x86_64/dist-mips64el-linux/mips64el-linux-gnu.config host-x86_64/dist-mips64el-linux/build-mips64el-toolchain.sh /tmp/\n-RUN su rustbuild -c ./build-mips64el-toolchain.sh\n+COPY host-x86_64/dist-mips64el-linux/mips64el-linux-gnu.defconfig /tmp/crosstool.defconfig\n+RUN /scripts/crosstool-ng-build.sh\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "1ad406800b1aa9abc5025f0333bbb832dce88d49", "filename": "src/ci/docker/host-x86_64/dist-mips64el-linux/build-mips64el-toolchain.sh", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64el-linux%2Fbuild-mips64el-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64el-linux%2Fbuild-mips64el-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64el-linux%2Fbuild-mips64el-toolchain.sh?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,26 +0,0 @@\n-#!/usr/bin/env bash\n-set -ex\n-\n-hide_output() {\n-  set +x\n-  on_err=\"\n-echo ERROR: An error was encountered with the build.\n-cat /tmp/build.log\n-exit 1\n-\"\n-  trap \"$on_err\" ERR\n-  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n-  PING_LOOP_PID=$!\n-  \"$@\" &> /tmp/build.log\n-  rm /tmp/build.log\n-  trap - ERR\n-  kill $PING_LOOP_PID\n-  set -x\n-}\n-\n-mkdir build\n-cd build\n-cp ../mips64el-linux-gnu.config .config\n-hide_output ct-ng build\n-cd ..\n-rm -rf build"}, {"sha": "50dfe7b2dd1a61cb4afae205ce81d41a0d0c3dbc", "filename": "src/ci/docker/host-x86_64/dist-mips64el-linux/mips64el-linux-gnu.config", "status": "removed", "additions": 0, "deletions": 741, "changes": 741, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64el-linux%2Fmips64el-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64el-linux%2Fmips64el-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64el-linux%2Fmips64el-linux-gnu.config?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,741 +0,0 @@\n-#\n-# Automatically generated file; DO NOT EDIT.\n-# crosstool-NG  Configuration\n-#\n-CT_CONFIGURE_has_static_link=y\n-CT_CONFIGURE_has_cxx11=y\n-CT_CONFIGURE_has_wget=y\n-CT_CONFIGURE_has_curl=y\n-CT_CONFIGURE_has_make_3_81_or_newer=y\n-CT_CONFIGURE_has_make_4_0_or_newer=y\n-CT_CONFIGURE_has_libtool_2_4_or_newer=y\n-CT_CONFIGURE_has_libtoolize_2_4_or_newer=y\n-CT_CONFIGURE_has_autoconf_2_65_or_newer=y\n-CT_CONFIGURE_has_autoreconf_2_65_or_newer=y\n-CT_CONFIGURE_has_automake_1_15_or_newer=y\n-CT_CONFIGURE_has_gnu_m4_1_4_12_or_newer=y\n-CT_CONFIGURE_has_python_3_4_or_newer=y\n-CT_CONFIGURE_has_bison_2_7_or_newer=y\n-CT_CONFIGURE_has_python=y\n-CT_CONFIGURE_has_git=y\n-CT_CONFIGURE_has_md5sum=y\n-CT_CONFIGURE_has_sha1sum=y\n-CT_CONFIGURE_has_sha256sum=y\n-CT_CONFIGURE_has_sha512sum=y\n-CT_CONFIGURE_has_install_with_strip_program=y\n-CT_CONFIG_VERSION_CURRENT=\"3\"\n-CT_CONFIG_VERSION=\"3\"\n-CT_MODULES=y\n-\n-#\n-# Paths and misc options\n-#\n-\n-#\n-# crosstool-NG behavior\n-#\n-# CT_OBSOLETE is not set\n-# CT_EXPERIMENTAL is not set\n-# CT_DEBUG_CT is not set\n-\n-#\n-# Paths\n-#\n-CT_LOCAL_TARBALLS_DIR=\"${HOME}/src\"\n-CT_SAVE_TARBALLS=y\n-# CT_TARBALLS_BUILDROOT_LAYOUT is not set\n-CT_WORK_DIR=\"${CT_TOP_DIR}/.build\"\n-CT_BUILD_TOP_DIR=\"${CT_WORK_DIR:-${CT_TOP_DIR}/.build}/${CT_HOST:+HOST-${CT_HOST}/}${CT_TARGET}\"\n-CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n-CT_RM_RF_PREFIX_DIR=y\n-CT_REMOVE_DOCS=y\n-CT_INSTALL_LICENSES=y\n-CT_PREFIX_DIR_RO=y\n-CT_STRIP_HOST_TOOLCHAIN_EXECUTABLES=y\n-# CT_STRIP_TARGET_TOOLCHAIN_EXECUTABLES is not set\n-\n-#\n-# Downloading\n-#\n-CT_DOWNLOAD_AGENT_WGET=y\n-# CT_DOWNLOAD_AGENT_CURL is not set\n-# CT_DOWNLOAD_AGENT_NONE is not set\n-# CT_FORBID_DOWNLOAD is not set\n-# CT_FORCE_DOWNLOAD is not set\n-CT_CONNECT_TIMEOUT=10\n-CT_DOWNLOAD_WGET_OPTIONS=\"--passive-ftp --tries=3 -nc --progress=dot:binary\"\n-# CT_ONLY_DOWNLOAD is not set\n-CT_USE_MIRROR=y\n-# CT_FORCE_MIRROR is not set\n-CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n-CT_VERIFY_DOWNLOAD_DIGEST=y\n-CT_VERIFY_DOWNLOAD_DIGEST_SHA512=y\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA256 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA1 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_MD5 is not set\n-CT_VERIFY_DOWNLOAD_DIGEST_ALG=\"sha512\"\n-# CT_VERIFY_DOWNLOAD_SIGNATURE is not set\n-\n-#\n-# Extracting\n-#\n-# CT_FORCE_EXTRACT is not set\n-CT_OVERRIDE_CONFIG_GUESS_SUB=y\n-# CT_ONLY_EXTRACT is not set\n-# CT_PATCH_BUNDLED is not set\n-CT_PATCH_BUNDLED_LOCAL=y\n-CT_PATCH_ORDER=\"bundled,local\"\n-CT_PATCH_USE_LOCAL=y\n-CT_LOCAL_PATCH_DIR=\"/tmp/patches\"\n-\n-#\n-# Build behavior\n-#\n-CT_PARALLEL_JOBS=0\n-CT_LOAD=\"\"\n-CT_USE_PIPES=y\n-CT_EXTRA_CFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_LDFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_CFLAGS_FOR_HOST=\"\"\n-CT_EXTRA_LDFLAGS_FOR_HOST=\"\"\n-# CT_CONFIG_SHELL_SH is not set\n-# CT_CONFIG_SHELL_ASH is not set\n-CT_CONFIG_SHELL_BASH=y\n-# CT_CONFIG_SHELL_CUSTOM is not set\n-CT_CONFIG_SHELL=\"${bash}\"\n-\n-#\n-# Logging\n-#\n-# CT_LOG_ERROR is not set\n-# CT_LOG_WARN is not set\n-# CT_LOG_INFO is not set\n-CT_LOG_EXTRA=y\n-# CT_LOG_ALL is not set\n-# CT_LOG_DEBUG is not set\n-CT_LOG_LEVEL_MAX=\"EXTRA\"\n-# CT_LOG_SEE_TOOLS_WARN is not set\n-CT_LOG_PROGRESS_BAR=y\n-CT_LOG_TO_FILE=y\n-CT_LOG_FILE_COMPRESS=y\n-\n-#\n-# Target options\n-#\n-# CT_ARCH_ALPHA is not set\n-# CT_ARCH_ARC is not set\n-# CT_ARCH_ARM is not set\n-# CT_ARCH_AVR is not set\n-# CT_ARCH_M68K is not set\n-CT_ARCH_MIPS=y\n-# CT_ARCH_NIOS2 is not set\n-# CT_ARCH_POWERPC is not set\n-# CT_ARCH_S390 is not set\n-# CT_ARCH_SH is not set\n-# CT_ARCH_SPARC is not set\n-# CT_ARCH_X86 is not set\n-# CT_ARCH_XTENSA is not set\n-CT_ARCH=\"mips\"\n-CT_ARCH_CHOICE_KSYM=\"MIPS\"\n-CT_ARCH_TUNE=\"\"\n-CT_ARCH_MIPS_SHOW=y\n-\n-#\n-# Options for mips\n-#\n-CT_ARCH_MIPS_PKG_KSYM=\"\"\n-# CT_ARCH_mips_n32 is not set\n-CT_ARCH_mips_n64=y\n-CT_ARCH_mips_ABI=\"64\"\n-CT_ALL_ARCH_CHOICES=\"ALPHA ARC ARM AVR M68K MICROBLAZE MIPS MOXIE MSP430 NIOS2 POWERPC RISCV S390 SH SPARC X86 XTENSA\"\n-CT_ARCH_SUFFIX=\"\"\n-# CT_OMIT_TARGET_VENDOR is not set\n-\n-#\n-# Generic target options\n-#\n-# CT_MULTILIB is not set\n-CT_DEMULTILIB=y\n-CT_ARCH_USE_MMU=y\n-CT_ARCH_SUPPORTS_EITHER_ENDIAN=y\n-CT_ARCH_DEFAULT_BE=y\n-# CT_ARCH_BE is not set\n-CT_ARCH_LE=y\n-CT_ARCH_ENDIAN=\"little\"\n-CT_ARCH_SUPPORTS_32=y\n-CT_ARCH_SUPPORTS_64=y\n-CT_ARCH_DEFAULT_32=y\n-CT_ARCH_BITNESS=64\n-# CT_ARCH_32 is not set\n-CT_ARCH_64=y\n-\n-#\n-# Target optimisations\n-#\n-CT_ARCH_SUPPORTS_WITH_ARCH=y\n-CT_ARCH_SUPPORTS_WITH_TUNE=y\n-CT_ARCH_SUPPORTS_WITH_FLOAT=y\n-CT_ARCH_ARCH=\"mips64r2\"\n-CT_ARCH_FLOAT_AUTO=y\n-# CT_ARCH_FLOAT_HW is not set\n-# CT_ARCH_FLOAT_SW is not set\n-CT_TARGET_CFLAGS=\"\"\n-CT_TARGET_LDFLAGS=\"\"\n-CT_ARCH_FLOAT=\"auto\"\n-\n-#\n-# Toolchain options\n-#\n-\n-#\n-# General toolchain options\n-#\n-CT_FORCE_SYSROOT=y\n-CT_USE_SYSROOT=y\n-CT_SYSROOT_NAME=\"sysroot\"\n-CT_SYSROOT_DIR_PREFIX=\"\"\n-CT_WANTS_STATIC_LINK=y\n-CT_WANTS_STATIC_LINK_CXX=y\n-# CT_STATIC_TOOLCHAIN is not set\n-CT_SHOW_CT_VERSION=y\n-CT_TOOLCHAIN_PKGVERSION=\"\"\n-CT_TOOLCHAIN_BUGURL=\"\"\n-\n-#\n-# Tuple completion and aliasing\n-#\n-CT_TARGET_VENDOR=\"unknown\"\n-CT_TARGET_ALIAS_SED_EXPR=\"\"\n-CT_TARGET_ALIAS=\"\"\n-\n-#\n-# Toolchain type\n-#\n-CT_CROSS=y\n-# CT_CANADIAN is not set\n-CT_TOOLCHAIN_TYPE=\"cross\"\n-\n-#\n-# Build system\n-#\n-CT_BUILD=\"\"\n-CT_BUILD_PREFIX=\"\"\n-CT_BUILD_SUFFIX=\"\"\n-\n-#\n-# Misc options\n-#\n-# CT_TOOLCHAIN_ENABLE_NLS is not set\n-\n-#\n-# Operating System\n-#\n-CT_KERNEL_SUPPORTS_SHARED_LIBS=y\n-# CT_KERNEL_BARE_METAL is not set\n-CT_KERNEL_LINUX=y\n-CT_KERNEL=\"linux\"\n-CT_KERNEL_CHOICE_KSYM=\"LINUX\"\n-CT_KERNEL_LINUX_SHOW=y\n-\n-#\n-# Options for linux\n-#\n-CT_KERNEL_LINUX_PKG_KSYM=\"LINUX\"\n-CT_LINUX_DIR_NAME=\"linux\"\n-CT_LINUX_PKG_NAME=\"linux\"\n-CT_LINUX_SRC_RELEASE=y\n-CT_LINUX_PATCH_ORDER=\"global\"\n-# CT_LINUX_V_4_20 is not set\n-# CT_LINUX_V_4_19 is not set\n-# CT_LINUX_V_4_18 is not set\n-# CT_LINUX_V_4_17 is not set\n-# CT_LINUX_V_4_16 is not set\n-# CT_LINUX_V_4_15 is not set\n-# CT_LINUX_V_4_14 is not set\n-# CT_LINUX_V_4_13 is not set\n-# CT_LINUX_V_4_12 is not set\n-# CT_LINUX_V_4_11 is not set\n-# CT_LINUX_V_4_10 is not set\n-# CT_LINUX_V_4_9 is not set\n-CT_LINUX_V_4_4=y\n-# CT_LINUX_V_4_1 is not set\n-# CT_LINUX_V_3_16 is not set\n-# CT_LINUX_V_3_13 is not set\n-# CT_LINUX_V_3_12 is not set\n-# CT_LINUX_V_3_10 is not set\n-# CT_LINUX_V_3_4 is not set\n-# CT_LINUX_V_3_2 is not set\n-# CT_LINUX_V_2_6_32 is not set\n-# CT_LINUX_NO_VERSIONS is not set\n-CT_LINUX_VERSION=\"4.4.174\"\n-CT_LINUX_MIRRORS=\"$(CT_Mirrors kernel.org linux ${CT_LINUX_VERSION})\"\n-CT_LINUX_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_LINUX_SIGNATURE_FORMAT=\"unpacked/.sign\"\n-CT_LINUX_4_8_or_older=y\n-CT_LINUX_older_than_4_8=y\n-CT_LINUX_later_than_3_7=y\n-CT_LINUX_3_7_or_later=y\n-CT_LINUX_later_than_3_2=y\n-CT_LINUX_3_2_or_later=y\n-CT_KERNEL_LINUX_VERBOSITY_0=y\n-# CT_KERNEL_LINUX_VERBOSITY_1 is not set\n-# CT_KERNEL_LINUX_VERBOSITY_2 is not set\n-CT_KERNEL_LINUX_VERBOSE_LEVEL=0\n-CT_KERNEL_LINUX_INSTALL_CHECK=y\n-CT_ALL_KERNEL_CHOICES=\"BARE_METAL LINUX WINDOWS\"\n-\n-#\n-# Common kernel options\n-#\n-CT_SHARED_LIBS=y\n-\n-#\n-# Binary utilities\n-#\n-CT_ARCH_BINFMT_ELF=y\n-CT_BINUTILS_BINUTILS=y\n-CT_BINUTILS=\"binutils\"\n-CT_BINUTILS_CHOICE_KSYM=\"BINUTILS\"\n-CT_BINUTILS_BINUTILS_SHOW=y\n-\n-#\n-# Options for binutils\n-#\n-CT_BINUTILS_BINUTILS_PKG_KSYM=\"BINUTILS\"\n-CT_BINUTILS_DIR_NAME=\"binutils\"\n-CT_BINUTILS_USE_GNU=y\n-CT_BINUTILS_USE=\"BINUTILS\"\n-CT_BINUTILS_PKG_NAME=\"binutils\"\n-CT_BINUTILS_SRC_RELEASE=y\n-CT_BINUTILS_PATCH_ORDER=\"global\"\n-CT_BINUTILS_V_2_32=y\n-# CT_BINUTILS_V_2_31 is not set\n-# CT_BINUTILS_V_2_30 is not set\n-# CT_BINUTILS_V_2_29 is not set\n-# CT_BINUTILS_V_2_28 is not set\n-# CT_BINUTILS_V_2_27 is not set\n-# CT_BINUTILS_V_2_26 is not set\n-# CT_BINUTILS_NO_VERSIONS is not set\n-CT_BINUTILS_VERSION=\"2.32\"\n-CT_BINUTILS_MIRRORS=\"$(CT_Mirrors GNU binutils) $(CT_Mirrors sourceware binutils/releases)\"\n-CT_BINUTILS_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_BINUTILS_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_BINUTILS_later_than_2_30=y\n-CT_BINUTILS_2_30_or_later=y\n-CT_BINUTILS_later_than_2_27=y\n-CT_BINUTILS_2_27_or_later=y\n-CT_BINUTILS_later_than_2_25=y\n-CT_BINUTILS_2_25_or_later=y\n-CT_BINUTILS_later_than_2_23=y\n-CT_BINUTILS_2_23_or_later=y\n-\n-#\n-# GNU binutils\n-#\n-CT_BINUTILS_HAS_HASH_STYLE=y\n-CT_BINUTILS_HAS_GOLD=y\n-CT_BINUTILS_HAS_PLUGINS=y\n-CT_BINUTILS_HAS_PKGVERSION_BUGURL=y\n-CT_BINUTILS_FORCE_LD_BFD_DEFAULT=y\n-CT_BINUTILS_LINKER_LD=y\n-CT_BINUTILS_LINKERS_LIST=\"ld\"\n-CT_BINUTILS_LINKER_DEFAULT=\"bfd\"\n-# CT_BINUTILS_PLUGINS is not set\n-CT_BINUTILS_RELRO=m\n-CT_BINUTILS_EXTRA_CONFIG_ARRAY=\"\"\n-# CT_BINUTILS_FOR_TARGET is not set\n-CT_ALL_BINUTILS_CHOICES=\"BINUTILS\"\n-\n-#\n-# C-library\n-#\n-CT_LIBC_GLIBC=y\n-# CT_LIBC_UCLIBC is not set\n-CT_LIBC=\"glibc\"\n-CT_LIBC_CHOICE_KSYM=\"GLIBC\"\n-CT_THREADS=\"nptl\"\n-CT_LIBC_GLIBC_SHOW=y\n-\n-#\n-# Options for glibc\n-#\n-CT_LIBC_GLIBC_PKG_KSYM=\"GLIBC\"\n-CT_GLIBC_DIR_NAME=\"glibc\"\n-CT_GLIBC_USE_GNU=y\n-CT_GLIBC_USE=\"GLIBC\"\n-CT_GLIBC_PKG_NAME=\"glibc\"\n-CT_GLIBC_SRC_RELEASE=y\n-CT_GLIBC_PATCH_ORDER=\"global\"\n-# CT_GLIBC_V_2_29 is not set\n-# CT_GLIBC_V_2_28 is not set\n-# CT_GLIBC_V_2_27 is not set\n-# CT_GLIBC_V_2_26 is not set\n-# CT_GLIBC_V_2_25 is not set\n-# CT_GLIBC_V_2_24 is not set\n-CT_GLIBC_V_2_23=y\n-# CT_GLIBC_V_2_19 is not set\n-# CT_GLIBC_V_2_17 is not set\n-# CT_GLIBC_V_2_12_1 is not set\n-# CT_GLIBC_NO_VERSIONS is not set\n-CT_GLIBC_VERSION=\"2.23\"\n-CT_GLIBC_MIRRORS=\"$(CT_Mirrors GNU glibc)\"\n-CT_GLIBC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_GLIBC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GLIBC_2_29_or_older=y\n-CT_GLIBC_older_than_2_29=y\n-CT_GLIBC_2_27_or_older=y\n-CT_GLIBC_older_than_2_27=y\n-CT_GLIBC_2_26_or_older=y\n-CT_GLIBC_older_than_2_26=y\n-CT_GLIBC_2_25_or_older=y\n-CT_GLIBC_older_than_2_25=y\n-CT_GLIBC_2_24_or_older=y\n-CT_GLIBC_older_than_2_24=y\n-CT_GLIBC_2_23_or_later=y\n-CT_GLIBC_2_23_or_older=y\n-CT_GLIBC_later_than_2_20=y\n-CT_GLIBC_2_20_or_later=y\n-CT_GLIBC_later_than_2_17=y\n-CT_GLIBC_2_17_or_later=y\n-CT_GLIBC_later_than_2_14=y\n-CT_GLIBC_2_14_or_later=y\n-CT_GLIBC_DEP_KERNEL_HEADERS_VERSION=y\n-CT_GLIBC_DEP_BINUTILS=y\n-CT_GLIBC_DEP_GCC=y\n-CT_GLIBC_DEP_PYTHON=y\n-CT_GLIBC_HAS_LIBIDN_ADDON=y\n-# CT_GLIBC_USE_LIBIDN_ADDON is not set\n-CT_GLIBC_NO_SPARC_V8=y\n-CT_GLIBC_HAS_OBSOLETE_RPC=y\n-CT_GLIBC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_GLIBC_CONFIGPARMS=\"\"\n-CT_GLIBC_EXTRA_CFLAGS=\"\"\n-CT_GLIBC_ENABLE_OBSOLETE_RPC=y\n-# CT_GLIBC_DISABLE_VERSIONING is not set\n-CT_GLIBC_OLDEST_ABI=\"\"\n-CT_GLIBC_FORCE_UNWIND=y\n-# CT_GLIBC_LOCALES is not set\n-# CT_GLIBC_KERNEL_VERSION_NONE is not set\n-CT_GLIBC_KERNEL_VERSION_AS_HEADERS=y\n-# CT_GLIBC_KERNEL_VERSION_CHOSEN is not set\n-CT_GLIBC_MIN_KERNEL=\"4.4.174\"\n-CT_ALL_LIBC_CHOICES=\"AVR_LIBC BIONIC GLIBC MINGW_W64 MOXIEBOX MUSL NEWLIB NONE UCLIBC\"\n-CT_LIBC_SUPPORT_THREADS_ANY=y\n-CT_LIBC_SUPPORT_THREADS_NATIVE=y\n-\n-#\n-# Common C library options\n-#\n-CT_THREADS_NATIVE=y\n-# CT_CREATE_LDSO_CONF is not set\n-CT_LIBC_XLDD=y\n-\n-#\n-# C compiler\n-#\n-CT_CC_CORE_PASSES_NEEDED=y\n-CT_CC_CORE_PASS_1_NEEDED=y\n-CT_CC_CORE_PASS_2_NEEDED=y\n-CT_CC_SUPPORT_CXX=y\n-CT_CC_SUPPORT_FORTRAN=y\n-CT_CC_SUPPORT_ADA=y\n-CT_CC_SUPPORT_OBJC=y\n-CT_CC_SUPPORT_OBJCXX=y\n-CT_CC_SUPPORT_GOLANG=y\n-CT_CC_GCC=y\n-CT_CC=\"gcc\"\n-CT_CC_CHOICE_KSYM=\"GCC\"\n-CT_CC_GCC_SHOW=y\n-\n-#\n-# Options for gcc\n-#\n-CT_CC_GCC_PKG_KSYM=\"GCC\"\n-CT_GCC_DIR_NAME=\"gcc\"\n-CT_GCC_USE_GNU=y\n-CT_GCC_USE=\"GCC\"\n-CT_GCC_PKG_NAME=\"gcc\"\n-CT_GCC_SRC_RELEASE=y\n-CT_GCC_PATCH_ORDER=\"global\"\n-CT_GCC_V_8=y\n-# CT_GCC_V_7 is not set\n-# CT_GCC_V_6 is not set\n-# CT_GCC_V_5 is not set\n-# CT_GCC_V_4_9 is not set\n-# CT_GCC_NO_VERSIONS is not set\n-CT_GCC_VERSION=\"8.3.0\"\n-CT_GCC_MIRRORS=\"$(CT_Mirrors GNU gcc/gcc-${CT_GCC_VERSION}) $(CT_Mirrors sourceware gcc/releases/gcc-${CT_GCC_VERSION})\"\n-CT_GCC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_GCC_SIGNATURE_FORMAT=\"\"\n-CT_GCC_later_than_7=y\n-CT_GCC_7_or_later=y\n-CT_GCC_later_than_6=y\n-CT_GCC_6_or_later=y\n-CT_GCC_later_than_5=y\n-CT_GCC_5_or_later=y\n-CT_GCC_later_than_4_9=y\n-CT_GCC_4_9_or_later=y\n-CT_GCC_later_than_4_8=y\n-CT_GCC_4_8_or_later=y\n-CT_CC_GCC_HAS_LIBMPX=y\n-CT_CC_GCC_ENABLE_CXX_FLAGS=\"\"\n-CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_STATIC_LIBSTDCXX=y\n-# CT_CC_GCC_SYSTEM_ZLIB is not set\n-CT_CC_GCC_CONFIG_TLS=m\n-\n-#\n-# Optimisation features\n-#\n-CT_CC_GCC_USE_GRAPHITE=y\n-CT_CC_GCC_USE_LTO=y\n-\n-#\n-# Settings for libraries running on target\n-#\n-CT_CC_GCC_ENABLE_TARGET_OPTSPACE=y\n-# CT_CC_GCC_LIBMUDFLAP is not set\n-# CT_CC_GCC_LIBGOMP is not set\n-# CT_CC_GCC_LIBSSP is not set\n-# CT_CC_GCC_LIBQUADMATH is not set\n-# CT_CC_GCC_LIBSANITIZER is not set\n-\n-#\n-# Misc. obscure options.\n-#\n-CT_CC_CXA_ATEXIT=y\n-# CT_CC_GCC_DISABLE_PCH is not set\n-CT_CC_GCC_SJLJ_EXCEPTIONS=m\n-CT_CC_GCC_LDBL_128=m\n-# CT_CC_GCC_BUILD_ID is not set\n-CT_CC_GCC_LNK_HASH_STYLE_DEFAULT=y\n-# CT_CC_GCC_LNK_HASH_STYLE_SYSV is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_GNU is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_BOTH is not set\n-CT_CC_GCC_LNK_HASH_STYLE=\"\"\n-CT_CC_GCC_DEC_FLOAT_AUTO=y\n-# CT_CC_GCC_DEC_FLOAT_BID is not set\n-# CT_CC_GCC_DEC_FLOAT_DPD is not set\n-# CT_CC_GCC_DEC_FLOATS_NO is not set\n-CT_CC_GCC_HAS_ARCH_OPTIONS=y\n-\n-#\n-# architecture-specific options\n-#\n-CT_CC_GCC_mips_llsc=m\n-CT_CC_GCC_mips_synci=m\n-# CT_CC_GCC_mips_plt is not set\n-CT_ALL_CC_CHOICES=\"GCC\"\n-\n-#\n-# Additional supported languages:\n-#\n-CT_CC_LANG_CXX=y\n-# CT_CC_LANG_FORTRAN is not set\n-\n-#\n-# Debug facilities\n-#\n-# CT_DEBUG_DUMA is not set\n-# CT_DEBUG_GDB is not set\n-# CT_DEBUG_LTRACE is not set\n-# CT_DEBUG_STRACE is not set\n-CT_ALL_DEBUG_CHOICES=\"DUMA GDB LTRACE STRACE\"\n-\n-#\n-# Companion libraries\n-#\n-# CT_COMPLIBS_CHECK is not set\n-# CT_COMP_LIBS_CLOOG is not set\n-# CT_COMP_LIBS_EXPAT is not set\n-CT_COMP_LIBS_GETTEXT=y\n-CT_COMP_LIBS_GETTEXT_PKG_KSYM=\"GETTEXT\"\n-CT_GETTEXT_DIR_NAME=\"gettext\"\n-CT_GETTEXT_PKG_NAME=\"gettext\"\n-CT_GETTEXT_SRC_RELEASE=y\n-CT_GETTEXT_PATCH_ORDER=\"global\"\n-CT_GETTEXT_V_0_19_8_1=y\n-# CT_GETTEXT_NO_VERSIONS is not set\n-CT_GETTEXT_VERSION=\"0.19.8.1\"\n-CT_GETTEXT_MIRRORS=\"$(CT_Mirrors GNU gettext)\"\n-CT_GETTEXT_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.gz\"\n-CT_GETTEXT_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_GMP=y\n-CT_COMP_LIBS_GMP_PKG_KSYM=\"GMP\"\n-CT_GMP_DIR_NAME=\"gmp\"\n-CT_GMP_PKG_NAME=\"gmp\"\n-CT_GMP_SRC_RELEASE=y\n-CT_GMP_PATCH_ORDER=\"global\"\n-CT_GMP_V_6_1=y\n-# CT_GMP_NO_VERSIONS is not set\n-CT_GMP_VERSION=\"6.1.2\"\n-CT_GMP_MIRRORS=\"https://gmplib.org/download/gmp https://gmplib.org/download/gmp/archive $(CT_Mirrors GNU gmp)\"\n-CT_GMP_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.bz2\"\n-CT_GMP_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GMP_later_than_5_1_0=y\n-CT_GMP_5_1_0_or_later=y\n-CT_GMP_later_than_5_0_0=y\n-CT_GMP_5_0_0_or_later=y\n-CT_GMP_REQUIRE_5_0_0_or_later=y\n-CT_COMP_LIBS_ISL=y\n-CT_COMP_LIBS_ISL_PKG_KSYM=\"ISL\"\n-CT_ISL_DIR_NAME=\"isl\"\n-CT_ISL_PKG_NAME=\"isl\"\n-CT_ISL_SRC_RELEASE=y\n-CT_ISL_PATCH_ORDER=\"global\"\n-CT_ISL_V_0_20=y\n-# CT_ISL_V_0_19 is not set\n-# CT_ISL_V_0_18 is not set\n-# CT_ISL_V_0_17 is not set\n-# CT_ISL_V_0_16 is not set\n-# CT_ISL_V_0_15 is not set\n-# CT_ISL_NO_VERSIONS is not set\n-CT_ISL_VERSION=\"0.20\"\n-CT_ISL_MIRRORS=\"http://isl.gforge.inria.fr\"\n-CT_ISL_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_ISL_SIGNATURE_FORMAT=\"\"\n-CT_ISL_later_than_0_18=y\n-CT_ISL_0_18_or_later=y\n-CT_ISL_later_than_0_15=y\n-CT_ISL_0_15_or_later=y\n-CT_ISL_REQUIRE_0_15_or_later=y\n-CT_ISL_later_than_0_14=y\n-CT_ISL_0_14_or_later=y\n-CT_ISL_REQUIRE_0_14_or_later=y\n-CT_ISL_later_than_0_13=y\n-CT_ISL_0_13_or_later=y\n-CT_ISL_later_than_0_12=y\n-CT_ISL_0_12_or_later=y\n-CT_ISL_REQUIRE_0_12_or_later=y\n-# CT_COMP_LIBS_LIBELF is not set\n-CT_COMP_LIBS_LIBICONV=y\n-CT_COMP_LIBS_LIBICONV_PKG_KSYM=\"LIBICONV\"\n-CT_LIBICONV_DIR_NAME=\"libiconv\"\n-CT_LIBICONV_PKG_NAME=\"libiconv\"\n-CT_LIBICONV_SRC_RELEASE=y\n-CT_LIBICONV_PATCH_ORDER=\"global\"\n-CT_LIBICONV_V_1_15=y\n-# CT_LIBICONV_NO_VERSIONS is not set\n-CT_LIBICONV_VERSION=\"1.15\"\n-CT_LIBICONV_MIRRORS=\"$(CT_Mirrors GNU libiconv)\"\n-CT_LIBICONV_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_LIBICONV_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_MPC=y\n-CT_COMP_LIBS_MPC_PKG_KSYM=\"MPC\"\n-CT_MPC_DIR_NAME=\"mpc\"\n-CT_MPC_PKG_NAME=\"mpc\"\n-CT_MPC_SRC_RELEASE=y\n-CT_MPC_PATCH_ORDER=\"global\"\n-CT_MPC_V_1_1=y\n-# CT_MPC_V_1_0 is not set\n-# CT_MPC_NO_VERSIONS is not set\n-CT_MPC_VERSION=\"1.1.0\"\n-CT_MPC_MIRRORS=\"http://www.multiprecision.org/downloads $(CT_Mirrors GNU mpc)\"\n-CT_MPC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_MPC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_MPC_1_1_0_or_later=y\n-CT_MPC_1_1_0_or_older=y\n-CT_COMP_LIBS_MPFR=y\n-CT_COMP_LIBS_MPFR_PKG_KSYM=\"MPFR\"\n-CT_MPFR_DIR_NAME=\"mpfr\"\n-CT_MPFR_PKG_NAME=\"mpfr\"\n-CT_MPFR_SRC_RELEASE=y\n-CT_MPFR_PATCH_ORDER=\"global\"\n-CT_MPFR_V_4_0=y\n-# CT_MPFR_V_3_1 is not set\n-# CT_MPFR_NO_VERSIONS is not set\n-CT_MPFR_VERSION=\"4.0.2\"\n-CT_MPFR_MIRRORS=\"http://www.mpfr.org/mpfr-${CT_MPFR_VERSION} $(CT_Mirrors GNU mpfr)\"\n-CT_MPFR_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz .zip\"\n-CT_MPFR_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_MPFR_later_than_4_0_0=y\n-CT_MPFR_4_0_0_or_later=y\n-CT_MPFR_later_than_3_0_0=y\n-CT_MPFR_3_0_0_or_later=y\n-CT_MPFR_REQUIRE_3_0_0_or_later=y\n-CT_COMP_LIBS_NCURSES=y\n-CT_COMP_LIBS_NCURSES_PKG_KSYM=\"NCURSES\"\n-CT_NCURSES_DIR_NAME=\"ncurses\"\n-CT_NCURSES_PKG_NAME=\"ncurses\"\n-CT_NCURSES_SRC_RELEASE=y\n-CT_NCURSES_PATCH_ORDER=\"global\"\n-CT_NCURSES_V_6_1=y\n-# CT_NCURSES_V_6_0 is not set\n-# CT_NCURSES_NO_VERSIONS is not set\n-CT_NCURSES_VERSION=\"6.1\"\n-CT_NCURSES_MIRRORS=\"ftp://invisible-island.net/ncurses $(CT_Mirrors GNU ncurses)\"\n-CT_NCURSES_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_NCURSES_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_NCURSES_HOST_CONFIG_ARGS=\"\"\n-CT_NCURSES_HOST_DISABLE_DB=y\n-CT_NCURSES_HOST_FALLBACKS=\"linux,xterm,xterm-color,xterm-256color,vt100\"\n-CT_NCURSES_TARGET_CONFIG_ARGS=\"\"\n-# CT_NCURSES_TARGET_DISABLE_DB is not set\n-CT_NCURSES_TARGET_FALLBACKS=\"\"\n-CT_COMP_LIBS_ZLIB=y\n-CT_COMP_LIBS_ZLIB_PKG_KSYM=\"ZLIB\"\n-CT_ZLIB_DIR_NAME=\"zlib\"\n-CT_ZLIB_PKG_NAME=\"zlib\"\n-CT_ZLIB_SRC_RELEASE=y\n-CT_ZLIB_PATCH_ORDER=\"global\"\n-CT_ZLIB_V_1_2_11=y\n-# CT_ZLIB_NO_VERSIONS is not set\n-CT_ZLIB_VERSION=\"1.2.11\"\n-CT_ZLIB_MIRRORS=\"http://downloads.sourceforge.net/project/libpng/zlib/${CT_ZLIB_VERSION}\"\n-CT_ZLIB_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_ZLIB_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_ALL_COMP_LIBS_CHOICES=\"CLOOG EXPAT GETTEXT GMP ISL LIBELF LIBICONV MPC MPFR NCURSES ZLIB\"\n-CT_LIBICONV_NEEDED=y\n-CT_GETTEXT_NEEDED=y\n-CT_GMP_NEEDED=y\n-CT_MPFR_NEEDED=y\n-CT_ISL_NEEDED=y\n-CT_MPC_NEEDED=y\n-CT_NCURSES_NEEDED=y\n-CT_ZLIB_NEEDED=y\n-CT_LIBICONV=y\n-CT_GETTEXT=y\n-CT_GMP=y\n-CT_MPFR=y\n-CT_ISL=y\n-CT_MPC=y\n-CT_NCURSES=y\n-CT_ZLIB=y\n-\n-#\n-# Companion tools\n-#\n-# CT_COMP_TOOLS_FOR_HOST is not set\n-# CT_COMP_TOOLS_AUTOCONF is not set\n-# CT_COMP_TOOLS_AUTOMAKE is not set\n-# CT_COMP_TOOLS_BISON is not set\n-# CT_COMP_TOOLS_DTC is not set\n-# CT_COMP_TOOLS_LIBTOOL is not set\n-# CT_COMP_TOOLS_M4 is not set\n-# CT_COMP_TOOLS_MAKE is not set\n-CT_ALL_COMP_TOOLS_CHOICES=\"AUTOCONF AUTOMAKE BISON DTC LIBTOOL M4 MAKE\""}, {"sha": "9c8eb5007b79b8c8d296e7ee8523a8ad81653e72", "filename": "src/ci/docker/host-x86_64/dist-mips64el-linux/mips64el-linux-gnu.defconfig", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64el-linux%2Fmips64el-linux-gnu.defconfig", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64el-linux%2Fmips64el-linux-gnu.defconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mips64el-linux%2Fmips64el-linux-gnu.defconfig?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -0,0 +1,17 @@\n+CT_CONFIG_VERSION=\"4\"\n+CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n+CT_USE_MIRROR=y\n+CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n+CT_PATCH_BUNDLED_LOCAL=y\n+CT_LOCAL_PATCH_DIR=\"/tmp/patches\"\n+CT_ARCH_MIPS=y\n+CT_ARCH_mips_n64=y\n+CT_ARCH_LE=y\n+CT_ARCH_64=y\n+CT_ARCH_ARCH=\"mips64r2\"\n+CT_KERNEL_LINUX=y\n+CT_LINUX_V_4_4=y\n+CT_BINUTILS_V_2_32=y\n+CT_GLIBC_V_2_23=y\n+CT_GCC_V_8=y\n+CT_CC_LANG_CXX=y"}, {"sha": "0bbaf00339d0af3275345f9b77ec7cf4163977da", "filename": "src/ci/docker/host-x86_64/dist-mipsel-linux/Dockerfile", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mipsel-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mipsel-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mipsel-linux%2FDockerfile?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -3,16 +3,17 @@ FROM ubuntu:22.04\n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/crosstool-ng-1.24.sh /scripts/\n-RUN sh /scripts/crosstool-ng-1.24.sh\n+COPY scripts/crosstool-ng.sh /scripts/\n+RUN sh /scripts/crosstool-ng.sh\n \n COPY scripts/rustbuild-setup.sh /scripts/\n RUN sh /scripts/rustbuild-setup.sh\n WORKDIR /tmp\n \n+COPY scripts/crosstool-ng-build.sh /scripts/\n COPY host-x86_64/dist-mips-linux/patches/ /tmp/patches/\n-COPY host-x86_64/dist-mipsel-linux/mipsel-linux-gnu.config host-x86_64/dist-mipsel-linux/build-mipsel-toolchain.sh /tmp/\n-RUN su rustbuild -c ./build-mipsel-toolchain.sh\n+COPY host-x86_64/dist-mipsel-linux/mipsel-linux-gnu.defconfig /tmp/crosstool.defconfig\n+RUN /scripts/crosstool-ng-build.sh\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "598e4893325f70d2da0c591aea7ae4b0db8a5bbb", "filename": "src/ci/docker/host-x86_64/dist-mipsel-linux/build-mipsel-toolchain.sh", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mipsel-linux%2Fbuild-mipsel-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mipsel-linux%2Fbuild-mipsel-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mipsel-linux%2Fbuild-mipsel-toolchain.sh?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,26 +0,0 @@\n-#!/usr/bin/env bash\n-set -ex\n-\n-hide_output() {\n-  set +x\n-  on_err=\"\n-echo ERROR: An error was encountered with the build.\n-cat /tmp/build.log\n-exit 1\n-\"\n-  trap \"$on_err\" ERR\n-  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n-  PING_LOOP_PID=$!\n-  \"$@\" &> /tmp/build.log\n-  rm /tmp/build.log\n-  trap - ERR\n-  kill $PING_LOOP_PID\n-  set -x\n-}\n-\n-mkdir build\n-cd build\n-cp ../mipsel-linux-gnu.config .config\n-hide_output ct-ng build\n-cd ..\n-rm -rf build"}, {"sha": "3566c7c8593e2143765d078c35f738b6c37d28fc", "filename": "src/ci/docker/host-x86_64/dist-mipsel-linux/mipsel-linux-gnu.config", "status": "removed", "additions": 0, "deletions": 740, "changes": 740, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mipsel-linux%2Fmipsel-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mipsel-linux%2Fmipsel-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mipsel-linux%2Fmipsel-linux-gnu.config?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,740 +0,0 @@\n-#\n-# Automatically generated file; DO NOT EDIT.\n-# crosstool-NG  Configuration\n-#\n-CT_CONFIGURE_has_static_link=y\n-CT_CONFIGURE_has_cxx11=y\n-CT_CONFIGURE_has_wget=y\n-CT_CONFIGURE_has_curl=y\n-CT_CONFIGURE_has_make_3_81_or_newer=y\n-CT_CONFIGURE_has_make_4_0_or_newer=y\n-CT_CONFIGURE_has_libtool_2_4_or_newer=y\n-CT_CONFIGURE_has_libtoolize_2_4_or_newer=y\n-CT_CONFIGURE_has_autoconf_2_65_or_newer=y\n-CT_CONFIGURE_has_autoreconf_2_65_or_newer=y\n-CT_CONFIGURE_has_automake_1_15_or_newer=y\n-CT_CONFIGURE_has_gnu_m4_1_4_12_or_newer=y\n-CT_CONFIGURE_has_python_3_4_or_newer=y\n-CT_CONFIGURE_has_bison_2_7_or_newer=y\n-CT_CONFIGURE_has_python=y\n-CT_CONFIGURE_has_git=y\n-CT_CONFIGURE_has_md5sum=y\n-CT_CONFIGURE_has_sha1sum=y\n-CT_CONFIGURE_has_sha256sum=y\n-CT_CONFIGURE_has_sha512sum=y\n-CT_CONFIGURE_has_install_with_strip_program=y\n-CT_CONFIG_VERSION_CURRENT=\"3\"\n-CT_CONFIG_VERSION=\"3\"\n-CT_MODULES=y\n-\n-#\n-# Paths and misc options\n-#\n-\n-#\n-# crosstool-NG behavior\n-#\n-# CT_OBSOLETE is not set\n-# CT_EXPERIMENTAL is not set\n-# CT_DEBUG_CT is not set\n-\n-#\n-# Paths\n-#\n-CT_LOCAL_TARBALLS_DIR=\"${HOME}/src\"\n-CT_SAVE_TARBALLS=y\n-# CT_TARBALLS_BUILDROOT_LAYOUT is not set\n-CT_WORK_DIR=\"${CT_TOP_DIR}/.build\"\n-CT_BUILD_TOP_DIR=\"${CT_WORK_DIR:-${CT_TOP_DIR}/.build}/${CT_HOST:+HOST-${CT_HOST}/}${CT_TARGET}\"\n-CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n-CT_RM_RF_PREFIX_DIR=y\n-CT_REMOVE_DOCS=y\n-CT_INSTALL_LICENSES=y\n-CT_PREFIX_DIR_RO=y\n-CT_STRIP_HOST_TOOLCHAIN_EXECUTABLES=y\n-# CT_STRIP_TARGET_TOOLCHAIN_EXECUTABLES is not set\n-\n-#\n-# Downloading\n-#\n-CT_DOWNLOAD_AGENT_WGET=y\n-# CT_DOWNLOAD_AGENT_CURL is not set\n-# CT_DOWNLOAD_AGENT_NONE is not set\n-# CT_FORBID_DOWNLOAD is not set\n-# CT_FORCE_DOWNLOAD is not set\n-CT_CONNECT_TIMEOUT=10\n-CT_DOWNLOAD_WGET_OPTIONS=\"--passive-ftp --tries=3 -nc --progress=dot:binary\"\n-# CT_ONLY_DOWNLOAD is not set\n-CT_USE_MIRROR=y\n-# CT_FORCE_MIRROR is not set\n-CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n-CT_VERIFY_DOWNLOAD_DIGEST=y\n-CT_VERIFY_DOWNLOAD_DIGEST_SHA512=y\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA256 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA1 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_MD5 is not set\n-CT_VERIFY_DOWNLOAD_DIGEST_ALG=\"sha512\"\n-# CT_VERIFY_DOWNLOAD_SIGNATURE is not set\n-\n-#\n-# Extracting\n-#\n-# CT_FORCE_EXTRACT is not set\n-CT_OVERRIDE_CONFIG_GUESS_SUB=y\n-# CT_ONLY_EXTRACT is not set\n-# CT_PATCH_BUNDLED is not set\n-CT_PATCH_BUNDLED_LOCAL=y\n-CT_PATCH_ORDER=\"bundled,local\"\n-CT_PATCH_USE_LOCAL=y\n-CT_LOCAL_PATCH_DIR=\"/tmp/patches\"\n-\n-#\n-# Build behavior\n-#\n-CT_PARALLEL_JOBS=0\n-CT_LOAD=\"\"\n-CT_USE_PIPES=y\n-CT_EXTRA_CFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_LDFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_CFLAGS_FOR_HOST=\"\"\n-CT_EXTRA_LDFLAGS_FOR_HOST=\"\"\n-# CT_CONFIG_SHELL_SH is not set\n-# CT_CONFIG_SHELL_ASH is not set\n-CT_CONFIG_SHELL_BASH=y\n-# CT_CONFIG_SHELL_CUSTOM is not set\n-CT_CONFIG_SHELL=\"${bash}\"\n-\n-#\n-# Logging\n-#\n-# CT_LOG_ERROR is not set\n-# CT_LOG_WARN is not set\n-# CT_LOG_INFO is not set\n-CT_LOG_EXTRA=y\n-# CT_LOG_ALL is not set\n-# CT_LOG_DEBUG is not set\n-CT_LOG_LEVEL_MAX=\"EXTRA\"\n-# CT_LOG_SEE_TOOLS_WARN is not set\n-CT_LOG_PROGRESS_BAR=y\n-CT_LOG_TO_FILE=y\n-CT_LOG_FILE_COMPRESS=y\n-\n-#\n-# Target options\n-#\n-# CT_ARCH_ALPHA is not set\n-# CT_ARCH_ARC is not set\n-# CT_ARCH_ARM is not set\n-# CT_ARCH_AVR is not set\n-# CT_ARCH_M68K is not set\n-CT_ARCH_MIPS=y\n-# CT_ARCH_NIOS2 is not set\n-# CT_ARCH_POWERPC is not set\n-# CT_ARCH_S390 is not set\n-# CT_ARCH_SH is not set\n-# CT_ARCH_SPARC is not set\n-# CT_ARCH_X86 is not set\n-# CT_ARCH_XTENSA is not set\n-CT_ARCH=\"mips\"\n-CT_ARCH_CHOICE_KSYM=\"MIPS\"\n-CT_ARCH_TUNE=\"\"\n-CT_ARCH_MIPS_SHOW=y\n-\n-#\n-# Options for mips\n-#\n-CT_ARCH_MIPS_PKG_KSYM=\"\"\n-CT_ARCH_mips_o32=y\n-CT_ARCH_mips_ABI=\"32\"\n-CT_ALL_ARCH_CHOICES=\"ALPHA ARC ARM AVR M68K MICROBLAZE MIPS MOXIE MSP430 NIOS2 POWERPC RISCV S390 SH SPARC X86 XTENSA\"\n-CT_ARCH_SUFFIX=\"\"\n-# CT_OMIT_TARGET_VENDOR is not set\n-\n-#\n-# Generic target options\n-#\n-# CT_MULTILIB is not set\n-CT_DEMULTILIB=y\n-CT_ARCH_USE_MMU=y\n-CT_ARCH_SUPPORTS_EITHER_ENDIAN=y\n-CT_ARCH_DEFAULT_BE=y\n-# CT_ARCH_BE is not set\n-CT_ARCH_LE=y\n-CT_ARCH_ENDIAN=\"little\"\n-CT_ARCH_SUPPORTS_32=y\n-CT_ARCH_SUPPORTS_64=y\n-CT_ARCH_DEFAULT_32=y\n-CT_ARCH_BITNESS=32\n-CT_ARCH_32=y\n-# CT_ARCH_64 is not set\n-\n-#\n-# Target optimisations\n-#\n-CT_ARCH_SUPPORTS_WITH_ARCH=y\n-CT_ARCH_SUPPORTS_WITH_TUNE=y\n-CT_ARCH_SUPPORTS_WITH_FLOAT=y\n-CT_ARCH_ARCH=\"mips32r2\"\n-CT_ARCH_FLOAT_AUTO=y\n-# CT_ARCH_FLOAT_HW is not set\n-# CT_ARCH_FLOAT_SW is not set\n-CT_TARGET_CFLAGS=\"\"\n-CT_TARGET_LDFLAGS=\"\"\n-CT_ARCH_FLOAT=\"auto\"\n-\n-#\n-# Toolchain options\n-#\n-\n-#\n-# General toolchain options\n-#\n-CT_FORCE_SYSROOT=y\n-CT_USE_SYSROOT=y\n-CT_SYSROOT_NAME=\"sysroot\"\n-CT_SYSROOT_DIR_PREFIX=\"\"\n-CT_WANTS_STATIC_LINK=y\n-CT_WANTS_STATIC_LINK_CXX=y\n-# CT_STATIC_TOOLCHAIN is not set\n-CT_SHOW_CT_VERSION=y\n-CT_TOOLCHAIN_PKGVERSION=\"\"\n-CT_TOOLCHAIN_BUGURL=\"\"\n-\n-#\n-# Tuple completion and aliasing\n-#\n-CT_TARGET_VENDOR=\"unknown\"\n-CT_TARGET_ALIAS_SED_EXPR=\"\"\n-CT_TARGET_ALIAS=\"\"\n-\n-#\n-# Toolchain type\n-#\n-CT_CROSS=y\n-# CT_CANADIAN is not set\n-CT_TOOLCHAIN_TYPE=\"cross\"\n-\n-#\n-# Build system\n-#\n-CT_BUILD=\"\"\n-CT_BUILD_PREFIX=\"\"\n-CT_BUILD_SUFFIX=\"\"\n-\n-#\n-# Misc options\n-#\n-# CT_TOOLCHAIN_ENABLE_NLS is not set\n-\n-#\n-# Operating System\n-#\n-CT_KERNEL_SUPPORTS_SHARED_LIBS=y\n-# CT_KERNEL_BARE_METAL is not set\n-CT_KERNEL_LINUX=y\n-CT_KERNEL=\"linux\"\n-CT_KERNEL_CHOICE_KSYM=\"LINUX\"\n-CT_KERNEL_LINUX_SHOW=y\n-\n-#\n-# Options for linux\n-#\n-CT_KERNEL_LINUX_PKG_KSYM=\"LINUX\"\n-CT_LINUX_DIR_NAME=\"linux\"\n-CT_LINUX_PKG_NAME=\"linux\"\n-CT_LINUX_SRC_RELEASE=y\n-CT_LINUX_PATCH_ORDER=\"global\"\n-# CT_LINUX_V_4_20 is not set\n-# CT_LINUX_V_4_19 is not set\n-# CT_LINUX_V_4_18 is not set\n-# CT_LINUX_V_4_17 is not set\n-# CT_LINUX_V_4_16 is not set\n-# CT_LINUX_V_4_15 is not set\n-# CT_LINUX_V_4_14 is not set\n-# CT_LINUX_V_4_13 is not set\n-# CT_LINUX_V_4_12 is not set\n-# CT_LINUX_V_4_11 is not set\n-# CT_LINUX_V_4_10 is not set\n-# CT_LINUX_V_4_9 is not set\n-CT_LINUX_V_4_4=y\n-# CT_LINUX_V_4_1 is not set\n-# CT_LINUX_V_3_16 is not set\n-# CT_LINUX_V_3_13 is not set\n-# CT_LINUX_V_3_12 is not set\n-# CT_LINUX_V_3_10 is not set\n-# CT_LINUX_V_3_4 is not set\n-# CT_LINUX_V_3_2 is not set\n-# CT_LINUX_V_2_6_32 is not set\n-# CT_LINUX_NO_VERSIONS is not set\n-CT_LINUX_VERSION=\"4.4.174\"\n-CT_LINUX_MIRRORS=\"$(CT_Mirrors kernel.org linux ${CT_LINUX_VERSION})\"\n-CT_LINUX_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_LINUX_SIGNATURE_FORMAT=\"unpacked/.sign\"\n-CT_LINUX_4_8_or_older=y\n-CT_LINUX_older_than_4_8=y\n-CT_LINUX_later_than_3_7=y\n-CT_LINUX_3_7_or_later=y\n-CT_LINUX_later_than_3_2=y\n-CT_LINUX_3_2_or_later=y\n-CT_KERNEL_LINUX_VERBOSITY_0=y\n-# CT_KERNEL_LINUX_VERBOSITY_1 is not set\n-# CT_KERNEL_LINUX_VERBOSITY_2 is not set\n-CT_KERNEL_LINUX_VERBOSE_LEVEL=0\n-CT_KERNEL_LINUX_INSTALL_CHECK=y\n-CT_ALL_KERNEL_CHOICES=\"BARE_METAL LINUX WINDOWS\"\n-\n-#\n-# Common kernel options\n-#\n-CT_SHARED_LIBS=y\n-\n-#\n-# Binary utilities\n-#\n-CT_ARCH_BINFMT_ELF=y\n-CT_BINUTILS_BINUTILS=y\n-CT_BINUTILS=\"binutils\"\n-CT_BINUTILS_CHOICE_KSYM=\"BINUTILS\"\n-CT_BINUTILS_BINUTILS_SHOW=y\n-\n-#\n-# Options for binutils\n-#\n-CT_BINUTILS_BINUTILS_PKG_KSYM=\"BINUTILS\"\n-CT_BINUTILS_DIR_NAME=\"binutils\"\n-CT_BINUTILS_USE_GNU=y\n-CT_BINUTILS_USE=\"BINUTILS\"\n-CT_BINUTILS_PKG_NAME=\"binutils\"\n-CT_BINUTILS_SRC_RELEASE=y\n-CT_BINUTILS_PATCH_ORDER=\"global\"\n-CT_BINUTILS_V_2_32=y\n-# CT_BINUTILS_V_2_31 is not set\n-# CT_BINUTILS_V_2_30 is not set\n-# CT_BINUTILS_V_2_29 is not set\n-# CT_BINUTILS_V_2_28 is not set\n-# CT_BINUTILS_V_2_27 is not set\n-# CT_BINUTILS_V_2_26 is not set\n-# CT_BINUTILS_NO_VERSIONS is not set\n-CT_BINUTILS_VERSION=\"2.32\"\n-CT_BINUTILS_MIRRORS=\"$(CT_Mirrors GNU binutils) $(CT_Mirrors sourceware binutils/releases)\"\n-CT_BINUTILS_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_BINUTILS_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_BINUTILS_later_than_2_30=y\n-CT_BINUTILS_2_30_or_later=y\n-CT_BINUTILS_later_than_2_27=y\n-CT_BINUTILS_2_27_or_later=y\n-CT_BINUTILS_later_than_2_25=y\n-CT_BINUTILS_2_25_or_later=y\n-CT_BINUTILS_later_than_2_23=y\n-CT_BINUTILS_2_23_or_later=y\n-\n-#\n-# GNU binutils\n-#\n-CT_BINUTILS_HAS_HASH_STYLE=y\n-CT_BINUTILS_HAS_GOLD=y\n-CT_BINUTILS_HAS_PLUGINS=y\n-CT_BINUTILS_HAS_PKGVERSION_BUGURL=y\n-CT_BINUTILS_FORCE_LD_BFD_DEFAULT=y\n-CT_BINUTILS_LINKER_LD=y\n-CT_BINUTILS_LINKERS_LIST=\"ld\"\n-CT_BINUTILS_LINKER_DEFAULT=\"bfd\"\n-# CT_BINUTILS_PLUGINS is not set\n-CT_BINUTILS_RELRO=m\n-CT_BINUTILS_EXTRA_CONFIG_ARRAY=\"\"\n-# CT_BINUTILS_FOR_TARGET is not set\n-CT_ALL_BINUTILS_CHOICES=\"BINUTILS\"\n-\n-#\n-# C-library\n-#\n-CT_LIBC_GLIBC=y\n-# CT_LIBC_UCLIBC is not set\n-CT_LIBC=\"glibc\"\n-CT_LIBC_CHOICE_KSYM=\"GLIBC\"\n-CT_THREADS=\"nptl\"\n-CT_LIBC_GLIBC_SHOW=y\n-\n-#\n-# Options for glibc\n-#\n-CT_LIBC_GLIBC_PKG_KSYM=\"GLIBC\"\n-CT_GLIBC_DIR_NAME=\"glibc\"\n-CT_GLIBC_USE_GNU=y\n-CT_GLIBC_USE=\"GLIBC\"\n-CT_GLIBC_PKG_NAME=\"glibc\"\n-CT_GLIBC_SRC_RELEASE=y\n-CT_GLIBC_PATCH_ORDER=\"global\"\n-# CT_GLIBC_V_2_29 is not set\n-# CT_GLIBC_V_2_28 is not set\n-# CT_GLIBC_V_2_27 is not set\n-# CT_GLIBC_V_2_26 is not set\n-# CT_GLIBC_V_2_25 is not set\n-# CT_GLIBC_V_2_24 is not set\n-CT_GLIBC_V_2_23=y\n-# CT_GLIBC_V_2_19 is not set\n-# CT_GLIBC_V_2_17 is not set\n-# CT_GLIBC_V_2_12_1 is not set\n-# CT_GLIBC_NO_VERSIONS is not set\n-CT_GLIBC_VERSION=\"2.23\"\n-CT_GLIBC_MIRRORS=\"$(CT_Mirrors GNU glibc)\"\n-CT_GLIBC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_GLIBC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GLIBC_2_29_or_older=y\n-CT_GLIBC_older_than_2_29=y\n-CT_GLIBC_2_27_or_older=y\n-CT_GLIBC_older_than_2_27=y\n-CT_GLIBC_2_26_or_older=y\n-CT_GLIBC_older_than_2_26=y\n-CT_GLIBC_2_25_or_older=y\n-CT_GLIBC_older_than_2_25=y\n-CT_GLIBC_2_24_or_older=y\n-CT_GLIBC_older_than_2_24=y\n-CT_GLIBC_2_23_or_later=y\n-CT_GLIBC_2_23_or_older=y\n-CT_GLIBC_later_than_2_20=y\n-CT_GLIBC_2_20_or_later=y\n-CT_GLIBC_later_than_2_17=y\n-CT_GLIBC_2_17_or_later=y\n-CT_GLIBC_later_than_2_14=y\n-CT_GLIBC_2_14_or_later=y\n-CT_GLIBC_DEP_KERNEL_HEADERS_VERSION=y\n-CT_GLIBC_DEP_BINUTILS=y\n-CT_GLIBC_DEP_GCC=y\n-CT_GLIBC_DEP_PYTHON=y\n-CT_GLIBC_HAS_LIBIDN_ADDON=y\n-# CT_GLIBC_USE_LIBIDN_ADDON is not set\n-CT_GLIBC_NO_SPARC_V8=y\n-CT_GLIBC_HAS_OBSOLETE_RPC=y\n-CT_GLIBC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_GLIBC_CONFIGPARMS=\"\"\n-CT_GLIBC_EXTRA_CFLAGS=\"\"\n-CT_GLIBC_ENABLE_OBSOLETE_RPC=y\n-# CT_GLIBC_DISABLE_VERSIONING is not set\n-CT_GLIBC_OLDEST_ABI=\"\"\n-CT_GLIBC_FORCE_UNWIND=y\n-# CT_GLIBC_LOCALES is not set\n-# CT_GLIBC_KERNEL_VERSION_NONE is not set\n-CT_GLIBC_KERNEL_VERSION_AS_HEADERS=y\n-# CT_GLIBC_KERNEL_VERSION_CHOSEN is not set\n-CT_GLIBC_MIN_KERNEL=\"4.4.174\"\n-CT_ALL_LIBC_CHOICES=\"AVR_LIBC BIONIC GLIBC MINGW_W64 MOXIEBOX MUSL NEWLIB NONE UCLIBC\"\n-CT_LIBC_SUPPORT_THREADS_ANY=y\n-CT_LIBC_SUPPORT_THREADS_NATIVE=y\n-\n-#\n-# Common C library options\n-#\n-CT_THREADS_NATIVE=y\n-# CT_CREATE_LDSO_CONF is not set\n-CT_LIBC_XLDD=y\n-\n-#\n-# C compiler\n-#\n-CT_CC_CORE_PASSES_NEEDED=y\n-CT_CC_CORE_PASS_1_NEEDED=y\n-CT_CC_CORE_PASS_2_NEEDED=y\n-CT_CC_SUPPORT_CXX=y\n-CT_CC_SUPPORT_FORTRAN=y\n-CT_CC_SUPPORT_ADA=y\n-CT_CC_SUPPORT_OBJC=y\n-CT_CC_SUPPORT_OBJCXX=y\n-CT_CC_SUPPORT_GOLANG=y\n-CT_CC_GCC=y\n-CT_CC=\"gcc\"\n-CT_CC_CHOICE_KSYM=\"GCC\"\n-CT_CC_GCC_SHOW=y\n-\n-#\n-# Options for gcc\n-#\n-CT_CC_GCC_PKG_KSYM=\"GCC\"\n-CT_GCC_DIR_NAME=\"gcc\"\n-CT_GCC_USE_GNU=y\n-CT_GCC_USE=\"GCC\"\n-CT_GCC_PKG_NAME=\"gcc\"\n-CT_GCC_SRC_RELEASE=y\n-CT_GCC_PATCH_ORDER=\"global\"\n-CT_GCC_V_8=y\n-# CT_GCC_V_7 is not set\n-# CT_GCC_V_6 is not set\n-# CT_GCC_V_5 is not set\n-# CT_GCC_V_4_9 is not set\n-# CT_GCC_NO_VERSIONS is not set\n-CT_GCC_VERSION=\"8.3.0\"\n-CT_GCC_MIRRORS=\"$(CT_Mirrors GNU gcc/gcc-${CT_GCC_VERSION}) $(CT_Mirrors sourceware gcc/releases/gcc-${CT_GCC_VERSION})\"\n-CT_GCC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_GCC_SIGNATURE_FORMAT=\"\"\n-CT_GCC_later_than_7=y\n-CT_GCC_7_or_later=y\n-CT_GCC_later_than_6=y\n-CT_GCC_6_or_later=y\n-CT_GCC_later_than_5=y\n-CT_GCC_5_or_later=y\n-CT_GCC_later_than_4_9=y\n-CT_GCC_4_9_or_later=y\n-CT_GCC_later_than_4_8=y\n-CT_GCC_4_8_or_later=y\n-CT_CC_GCC_HAS_LIBMPX=y\n-CT_CC_GCC_ENABLE_CXX_FLAGS=\"\"\n-CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"--with-fp-32=xx --with-odd-spreg-32=no\"\n-CT_CC_GCC_STATIC_LIBSTDCXX=y\n-# CT_CC_GCC_SYSTEM_ZLIB is not set\n-CT_CC_GCC_CONFIG_TLS=m\n-\n-#\n-# Optimisation features\n-#\n-CT_CC_GCC_USE_GRAPHITE=y\n-CT_CC_GCC_USE_LTO=y\n-\n-#\n-# Settings for libraries running on target\n-#\n-CT_CC_GCC_ENABLE_TARGET_OPTSPACE=y\n-# CT_CC_GCC_LIBMUDFLAP is not set\n-# CT_CC_GCC_LIBGOMP is not set\n-# CT_CC_GCC_LIBSSP is not set\n-# CT_CC_GCC_LIBQUADMATH is not set\n-# CT_CC_GCC_LIBSANITIZER is not set\n-\n-#\n-# Misc. obscure options.\n-#\n-CT_CC_CXA_ATEXIT=y\n-# CT_CC_GCC_DISABLE_PCH is not set\n-CT_CC_GCC_SJLJ_EXCEPTIONS=m\n-CT_CC_GCC_LDBL_128=m\n-# CT_CC_GCC_BUILD_ID is not set\n-CT_CC_GCC_LNK_HASH_STYLE_DEFAULT=y\n-# CT_CC_GCC_LNK_HASH_STYLE_SYSV is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_GNU is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_BOTH is not set\n-CT_CC_GCC_LNK_HASH_STYLE=\"\"\n-CT_CC_GCC_DEC_FLOAT_AUTO=y\n-# CT_CC_GCC_DEC_FLOAT_BID is not set\n-# CT_CC_GCC_DEC_FLOAT_DPD is not set\n-# CT_CC_GCC_DEC_FLOATS_NO is not set\n-CT_CC_GCC_HAS_ARCH_OPTIONS=y\n-\n-#\n-# architecture-specific options\n-#\n-CT_CC_GCC_mips_llsc=m\n-CT_CC_GCC_mips_synci=m\n-# CT_CC_GCC_mips_plt is not set\n-CT_ALL_CC_CHOICES=\"GCC\"\n-\n-#\n-# Additional supported languages:\n-#\n-CT_CC_LANG_CXX=y\n-# CT_CC_LANG_FORTRAN is not set\n-\n-#\n-# Debug facilities\n-#\n-# CT_DEBUG_DUMA is not set\n-# CT_DEBUG_GDB is not set\n-# CT_DEBUG_LTRACE is not set\n-# CT_DEBUG_STRACE is not set\n-CT_ALL_DEBUG_CHOICES=\"DUMA GDB LTRACE STRACE\"\n-\n-#\n-# Companion libraries\n-#\n-# CT_COMPLIBS_CHECK is not set\n-# CT_COMP_LIBS_CLOOG is not set\n-# CT_COMP_LIBS_EXPAT is not set\n-CT_COMP_LIBS_GETTEXT=y\n-CT_COMP_LIBS_GETTEXT_PKG_KSYM=\"GETTEXT\"\n-CT_GETTEXT_DIR_NAME=\"gettext\"\n-CT_GETTEXT_PKG_NAME=\"gettext\"\n-CT_GETTEXT_SRC_RELEASE=y\n-CT_GETTEXT_PATCH_ORDER=\"global\"\n-CT_GETTEXT_V_0_19_8_1=y\n-# CT_GETTEXT_NO_VERSIONS is not set\n-CT_GETTEXT_VERSION=\"0.19.8.1\"\n-CT_GETTEXT_MIRRORS=\"$(CT_Mirrors GNU gettext)\"\n-CT_GETTEXT_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.gz\"\n-CT_GETTEXT_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_GMP=y\n-CT_COMP_LIBS_GMP_PKG_KSYM=\"GMP\"\n-CT_GMP_DIR_NAME=\"gmp\"\n-CT_GMP_PKG_NAME=\"gmp\"\n-CT_GMP_SRC_RELEASE=y\n-CT_GMP_PATCH_ORDER=\"global\"\n-CT_GMP_V_6_1=y\n-# CT_GMP_NO_VERSIONS is not set\n-CT_GMP_VERSION=\"6.1.2\"\n-CT_GMP_MIRRORS=\"https://gmplib.org/download/gmp https://gmplib.org/download/gmp/archive $(CT_Mirrors GNU gmp)\"\n-CT_GMP_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.bz2\"\n-CT_GMP_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GMP_later_than_5_1_0=y\n-CT_GMP_5_1_0_or_later=y\n-CT_GMP_later_than_5_0_0=y\n-CT_GMP_5_0_0_or_later=y\n-CT_GMP_REQUIRE_5_0_0_or_later=y\n-CT_COMP_LIBS_ISL=y\n-CT_COMP_LIBS_ISL_PKG_KSYM=\"ISL\"\n-CT_ISL_DIR_NAME=\"isl\"\n-CT_ISL_PKG_NAME=\"isl\"\n-CT_ISL_SRC_RELEASE=y\n-CT_ISL_PATCH_ORDER=\"global\"\n-CT_ISL_V_0_20=y\n-# CT_ISL_V_0_19 is not set\n-# CT_ISL_V_0_18 is not set\n-# CT_ISL_V_0_17 is not set\n-# CT_ISL_V_0_16 is not set\n-# CT_ISL_V_0_15 is not set\n-# CT_ISL_NO_VERSIONS is not set\n-CT_ISL_VERSION=\"0.20\"\n-CT_ISL_MIRRORS=\"http://isl.gforge.inria.fr\"\n-CT_ISL_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_ISL_SIGNATURE_FORMAT=\"\"\n-CT_ISL_later_than_0_18=y\n-CT_ISL_0_18_or_later=y\n-CT_ISL_later_than_0_15=y\n-CT_ISL_0_15_or_later=y\n-CT_ISL_REQUIRE_0_15_or_later=y\n-CT_ISL_later_than_0_14=y\n-CT_ISL_0_14_or_later=y\n-CT_ISL_REQUIRE_0_14_or_later=y\n-CT_ISL_later_than_0_13=y\n-CT_ISL_0_13_or_later=y\n-CT_ISL_later_than_0_12=y\n-CT_ISL_0_12_or_later=y\n-CT_ISL_REQUIRE_0_12_or_later=y\n-# CT_COMP_LIBS_LIBELF is not set\n-CT_COMP_LIBS_LIBICONV=y\n-CT_COMP_LIBS_LIBICONV_PKG_KSYM=\"LIBICONV\"\n-CT_LIBICONV_DIR_NAME=\"libiconv\"\n-CT_LIBICONV_PKG_NAME=\"libiconv\"\n-CT_LIBICONV_SRC_RELEASE=y\n-CT_LIBICONV_PATCH_ORDER=\"global\"\n-CT_LIBICONV_V_1_15=y\n-# CT_LIBICONV_NO_VERSIONS is not set\n-CT_LIBICONV_VERSION=\"1.15\"\n-CT_LIBICONV_MIRRORS=\"$(CT_Mirrors GNU libiconv)\"\n-CT_LIBICONV_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_LIBICONV_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_MPC=y\n-CT_COMP_LIBS_MPC_PKG_KSYM=\"MPC\"\n-CT_MPC_DIR_NAME=\"mpc\"\n-CT_MPC_PKG_NAME=\"mpc\"\n-CT_MPC_SRC_RELEASE=y\n-CT_MPC_PATCH_ORDER=\"global\"\n-CT_MPC_V_1_1=y\n-# CT_MPC_V_1_0 is not set\n-# CT_MPC_NO_VERSIONS is not set\n-CT_MPC_VERSION=\"1.1.0\"\n-CT_MPC_MIRRORS=\"http://www.multiprecision.org/downloads $(CT_Mirrors GNU mpc)\"\n-CT_MPC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_MPC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_MPC_1_1_0_or_later=y\n-CT_MPC_1_1_0_or_older=y\n-CT_COMP_LIBS_MPFR=y\n-CT_COMP_LIBS_MPFR_PKG_KSYM=\"MPFR\"\n-CT_MPFR_DIR_NAME=\"mpfr\"\n-CT_MPFR_PKG_NAME=\"mpfr\"\n-CT_MPFR_SRC_RELEASE=y\n-CT_MPFR_PATCH_ORDER=\"global\"\n-CT_MPFR_V_4_0=y\n-# CT_MPFR_V_3_1 is not set\n-# CT_MPFR_NO_VERSIONS is not set\n-CT_MPFR_VERSION=\"4.0.2\"\n-CT_MPFR_MIRRORS=\"http://www.mpfr.org/mpfr-${CT_MPFR_VERSION} $(CT_Mirrors GNU mpfr)\"\n-CT_MPFR_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz .zip\"\n-CT_MPFR_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_MPFR_later_than_4_0_0=y\n-CT_MPFR_4_0_0_or_later=y\n-CT_MPFR_later_than_3_0_0=y\n-CT_MPFR_3_0_0_or_later=y\n-CT_MPFR_REQUIRE_3_0_0_or_later=y\n-CT_COMP_LIBS_NCURSES=y\n-CT_COMP_LIBS_NCURSES_PKG_KSYM=\"NCURSES\"\n-CT_NCURSES_DIR_NAME=\"ncurses\"\n-CT_NCURSES_PKG_NAME=\"ncurses\"\n-CT_NCURSES_SRC_RELEASE=y\n-CT_NCURSES_PATCH_ORDER=\"global\"\n-CT_NCURSES_V_6_1=y\n-# CT_NCURSES_V_6_0 is not set\n-# CT_NCURSES_NO_VERSIONS is not set\n-CT_NCURSES_VERSION=\"6.1\"\n-CT_NCURSES_MIRRORS=\"ftp://invisible-island.net/ncurses $(CT_Mirrors GNU ncurses)\"\n-CT_NCURSES_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_NCURSES_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_NCURSES_HOST_CONFIG_ARGS=\"\"\n-CT_NCURSES_HOST_DISABLE_DB=y\n-CT_NCURSES_HOST_FALLBACKS=\"linux,xterm,xterm-color,xterm-256color,vt100\"\n-CT_NCURSES_TARGET_CONFIG_ARGS=\"\"\n-# CT_NCURSES_TARGET_DISABLE_DB is not set\n-CT_NCURSES_TARGET_FALLBACKS=\"\"\n-CT_COMP_LIBS_ZLIB=y\n-CT_COMP_LIBS_ZLIB_PKG_KSYM=\"ZLIB\"\n-CT_ZLIB_DIR_NAME=\"zlib\"\n-CT_ZLIB_PKG_NAME=\"zlib\"\n-CT_ZLIB_SRC_RELEASE=y\n-CT_ZLIB_PATCH_ORDER=\"global\"\n-CT_ZLIB_V_1_2_11=y\n-# CT_ZLIB_NO_VERSIONS is not set\n-CT_ZLIB_VERSION=\"1.2.11\"\n-CT_ZLIB_MIRRORS=\"http://downloads.sourceforge.net/project/libpng/zlib/${CT_ZLIB_VERSION}\"\n-CT_ZLIB_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_ZLIB_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_ALL_COMP_LIBS_CHOICES=\"CLOOG EXPAT GETTEXT GMP ISL LIBELF LIBICONV MPC MPFR NCURSES ZLIB\"\n-CT_LIBICONV_NEEDED=y\n-CT_GETTEXT_NEEDED=y\n-CT_GMP_NEEDED=y\n-CT_MPFR_NEEDED=y\n-CT_ISL_NEEDED=y\n-CT_MPC_NEEDED=y\n-CT_NCURSES_NEEDED=y\n-CT_ZLIB_NEEDED=y\n-CT_LIBICONV=y\n-CT_GETTEXT=y\n-CT_GMP=y\n-CT_MPFR=y\n-CT_ISL=y\n-CT_MPC=y\n-CT_NCURSES=y\n-CT_ZLIB=y\n-\n-#\n-# Companion tools\n-#\n-# CT_COMP_TOOLS_FOR_HOST is not set\n-# CT_COMP_TOOLS_AUTOCONF is not set\n-# CT_COMP_TOOLS_AUTOMAKE is not set\n-# CT_COMP_TOOLS_BISON is not set\n-# CT_COMP_TOOLS_DTC is not set\n-# CT_COMP_TOOLS_LIBTOOL is not set\n-# CT_COMP_TOOLS_M4 is not set\n-# CT_COMP_TOOLS_MAKE is not set\n-CT_ALL_COMP_TOOLS_CHOICES=\"AUTOCONF AUTOMAKE BISON DTC LIBTOOL M4 MAKE\""}, {"sha": "a9dae121e536ab5dd3017c8b9c237b62411c85a6", "filename": "src/ci/docker/host-x86_64/dist-mipsel-linux/mipsel-linux-gnu.defconfig", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mipsel-linux%2Fmipsel-linux-gnu.defconfig", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mipsel-linux%2Fmipsel-linux-gnu.defconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-mipsel-linux%2Fmipsel-linux-gnu.defconfig?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -0,0 +1,17 @@\n+CT_CONFIG_VERSION=\"4\"\n+CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n+CT_USE_MIRROR=y\n+CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n+CT_PATCH_BUNDLED_LOCAL=y\n+CT_LOCAL_PATCH_DIR=\"/tmp/patches\"\n+CT_ARCH_MIPS=y\n+CT_ARCH_mips_o32=y\n+CT_ARCH_LE=y\n+CT_ARCH_ARCH=\"mips32r2\"\n+CT_KERNEL_LINUX=y\n+CT_LINUX_V_4_4=y\n+CT_BINUTILS_V_2_32=y\n+CT_GLIBC_V_2_23=y\n+CT_GCC_V_8=y\n+CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"--with-fp-32=xx --with-odd-spreg-32=no\"\n+CT_CC_LANG_CXX=y"}, {"sha": "b546f571f66bd0995780f2f9522cac2dab210aef", "filename": "src/ci/docker/host-x86_64/dist-powerpc-linux/Dockerfile", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2FDockerfile?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1,20 +1,18 @@\n-FROM ubuntu:20.04\n+FROM ubuntu:22.04\n \n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/crosstool-ng-1.24.sh /scripts/\n-RUN sh /scripts/crosstool-ng-1.24.sh\n+COPY scripts/crosstool-ng.sh /scripts/\n+RUN sh /scripts/crosstool-ng.sh\n \n COPY scripts/rustbuild-setup.sh /scripts/\n RUN sh /scripts/rustbuild-setup.sh\n-USER rustbuild\n WORKDIR /tmp\n \n-COPY host-x86_64/dist-powerpc-linux/powerpc-linux-gnu.config host-x86_64/dist-powerpc-linux/build-powerpc-toolchain.sh /tmp/\n-RUN ./build-powerpc-toolchain.sh\n-\n-USER root\n+COPY scripts/crosstool-ng-build.sh /scripts/\n+COPY host-x86_64/dist-powerpc-linux/powerpc-linux-gnu.defconfig /tmp/crosstool.defconfig\n+RUN /scripts/crosstool-ng-build.sh\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "264d0764f2957636af187ff165800e08e964dce1", "filename": "src/ci/docker/host-x86_64/dist-powerpc-linux/build-powerpc-toolchain.sh", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2Fbuild-powerpc-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2Fbuild-powerpc-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2Fbuild-powerpc-toolchain.sh?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,26 +0,0 @@\n-#!/usr/bin/env bash\n-set -ex\n-\n-hide_output() {\n-  set +x\n-  on_err=\"\n-echo ERROR: An error was encountered with the build.\n-cat /tmp/build.log\n-exit 1\n-\"\n-  trap \"$on_err\" ERR\n-  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n-  PING_LOOP_PID=$!\n-  \"$@\" &> /tmp/build.log\n-  rm /tmp/build.log\n-  trap - ERR\n-  kill $PING_LOOP_PID\n-  set -x\n-}\n-\n-mkdir build\n-cd build\n-cp ../powerpc-linux-gnu.config .config\n-hide_output ct-ng build\n-cd ..\n-rm -rf build"}, {"sha": "0df859ad944884ed03c970bc6608007e749ead1a", "filename": "src/ci/docker/host-x86_64/dist-powerpc-linux/powerpc-linux-gnu.config", "status": "removed", "additions": 0, "deletions": 736, "changes": 736, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2Fpowerpc-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2Fpowerpc-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2Fpowerpc-linux-gnu.config?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,736 +0,0 @@\n-#\n-# Automatically generated file; DO NOT EDIT.\n-# crosstool-NG  Configuration\n-#\n-CT_CONFIGURE_has_static_link=y\n-CT_CONFIGURE_has_cxx11=y\n-CT_CONFIGURE_has_wget=y\n-CT_CONFIGURE_has_curl=y\n-CT_CONFIGURE_has_make_3_81_or_newer=y\n-CT_CONFIGURE_has_make_4_0_or_newer=y\n-CT_CONFIGURE_has_libtool_2_4_or_newer=y\n-CT_CONFIGURE_has_libtoolize_2_4_or_newer=y\n-CT_CONFIGURE_has_autoconf_2_65_or_newer=y\n-CT_CONFIGURE_has_autoreconf_2_65_or_newer=y\n-CT_CONFIGURE_has_automake_1_15_or_newer=y\n-CT_CONFIGURE_has_gnu_m4_1_4_12_or_newer=y\n-CT_CONFIGURE_has_python_3_4_or_newer=y\n-CT_CONFIGURE_has_bison_2_7_or_newer=y\n-CT_CONFIGURE_has_python=y\n-CT_CONFIGURE_has_git=y\n-CT_CONFIGURE_has_md5sum=y\n-CT_CONFIGURE_has_sha1sum=y\n-CT_CONFIGURE_has_sha256sum=y\n-CT_CONFIGURE_has_sha512sum=y\n-CT_CONFIGURE_has_install_with_strip_program=y\n-CT_CONFIG_VERSION_CURRENT=\"3\"\n-CT_CONFIG_VERSION=\"3\"\n-CT_MODULES=y\n-\n-#\n-# Paths and misc options\n-#\n-\n-#\n-# crosstool-NG behavior\n-#\n-# CT_OBSOLETE is not set\n-# CT_EXPERIMENTAL is not set\n-# CT_DEBUG_CT is not set\n-\n-#\n-# Paths\n-#\n-CT_LOCAL_TARBALLS_DIR=\"${HOME}/src\"\n-CT_SAVE_TARBALLS=y\n-# CT_TARBALLS_BUILDROOT_LAYOUT is not set\n-CT_WORK_DIR=\"${CT_TOP_DIR}/.build\"\n-CT_BUILD_TOP_DIR=\"${CT_WORK_DIR:-${CT_TOP_DIR}/.build}/${CT_HOST:+HOST-${CT_HOST}/}${CT_TARGET}\"\n-CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n-CT_RM_RF_PREFIX_DIR=y\n-CT_REMOVE_DOCS=y\n-CT_INSTALL_LICENSES=y\n-CT_PREFIX_DIR_RO=y\n-CT_STRIP_HOST_TOOLCHAIN_EXECUTABLES=y\n-# CT_STRIP_TARGET_TOOLCHAIN_EXECUTABLES is not set\n-\n-#\n-# Downloading\n-#\n-CT_DOWNLOAD_AGENT_WGET=y\n-# CT_DOWNLOAD_AGENT_CURL is not set\n-# CT_DOWNLOAD_AGENT_NONE is not set\n-# CT_FORBID_DOWNLOAD is not set\n-# CT_FORCE_DOWNLOAD is not set\n-CT_CONNECT_TIMEOUT=10\n-CT_DOWNLOAD_WGET_OPTIONS=\"--passive-ftp --tries=3 -nc --progress=dot:binary\"\n-# CT_ONLY_DOWNLOAD is not set\n-CT_USE_MIRROR=y\n-# CT_FORCE_MIRROR is not set\n-CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n-CT_VERIFY_DOWNLOAD_DIGEST=y\n-CT_VERIFY_DOWNLOAD_DIGEST_SHA512=y\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA256 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA1 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_MD5 is not set\n-CT_VERIFY_DOWNLOAD_DIGEST_ALG=\"sha512\"\n-# CT_VERIFY_DOWNLOAD_SIGNATURE is not set\n-\n-#\n-# Extracting\n-#\n-# CT_FORCE_EXTRACT is not set\n-CT_OVERRIDE_CONFIG_GUESS_SUB=y\n-# CT_ONLY_EXTRACT is not set\n-CT_PATCH_BUNDLED=y\n-# CT_PATCH_BUNDLED_LOCAL is not set\n-CT_PATCH_ORDER=\"bundled\"\n-\n-#\n-# Build behavior\n-#\n-CT_PARALLEL_JOBS=0\n-CT_LOAD=\"\"\n-CT_USE_PIPES=y\n-CT_EXTRA_CFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_LDFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_CFLAGS_FOR_HOST=\"\"\n-CT_EXTRA_LDFLAGS_FOR_HOST=\"\"\n-# CT_CONFIG_SHELL_SH is not set\n-# CT_CONFIG_SHELL_ASH is not set\n-CT_CONFIG_SHELL_BASH=y\n-# CT_CONFIG_SHELL_CUSTOM is not set\n-CT_CONFIG_SHELL=\"${bash}\"\n-\n-#\n-# Logging\n-#\n-# CT_LOG_ERROR is not set\n-# CT_LOG_WARN is not set\n-# CT_LOG_INFO is not set\n-CT_LOG_EXTRA=y\n-# CT_LOG_ALL is not set\n-# CT_LOG_DEBUG is not set\n-CT_LOG_LEVEL_MAX=\"EXTRA\"\n-# CT_LOG_SEE_TOOLS_WARN is not set\n-CT_LOG_PROGRESS_BAR=y\n-CT_LOG_TO_FILE=y\n-CT_LOG_FILE_COMPRESS=y\n-\n-#\n-# Target options\n-#\n-# CT_ARCH_ALPHA is not set\n-# CT_ARCH_ARC is not set\n-# CT_ARCH_ARM is not set\n-# CT_ARCH_AVR is not set\n-# CT_ARCH_M68K is not set\n-# CT_ARCH_MIPS is not set\n-# CT_ARCH_NIOS2 is not set\n-CT_ARCH_POWERPC=y\n-# CT_ARCH_S390 is not set\n-# CT_ARCH_SH is not set\n-# CT_ARCH_SPARC is not set\n-# CT_ARCH_X86 is not set\n-# CT_ARCH_XTENSA is not set\n-CT_ARCH=\"powerpc\"\n-CT_ARCH_CHOICE_KSYM=\"POWERPC\"\n-CT_ARCH_CPU=\"powerpc\"\n-CT_ARCH_TUNE=\"\"\n-CT_ARCH_POWERPC_SHOW=y\n-\n-#\n-# Options for powerpc\n-#\n-CT_ARCH_POWERPC_PKG_KSYM=\"\"\n-CT_ARCH_powerpc_ABI=\"\"\n-CT_ARCH_powerpc_ABI_DEFAULT=y\n-# CT_ARCH_powerpc_ABI_SPE is not set\n-CT_ALL_ARCH_CHOICES=\"ALPHA ARC ARM AVR M68K MICROBLAZE MIPS MOXIE MSP430 NIOS2 POWERPC RISCV S390 SH SPARC X86 XTENSA\"\n-CT_ARCH_SUFFIX=\"\"\n-# CT_OMIT_TARGET_VENDOR is not set\n-\n-#\n-# Generic target options\n-#\n-# CT_MULTILIB is not set\n-CT_DEMULTILIB=y\n-CT_ARCH_USE_MMU=y\n-CT_ARCH_SUPPORTS_EITHER_ENDIAN=y\n-CT_ARCH_DEFAULT_BE=y\n-CT_ARCH_BE=y\n-# CT_ARCH_LE is not set\n-CT_ARCH_ENDIAN=\"big\"\n-CT_ARCH_SUPPORTS_32=y\n-CT_ARCH_SUPPORTS_64=y\n-CT_ARCH_DEFAULT_32=y\n-CT_ARCH_BITNESS=32\n-CT_ARCH_32=y\n-# CT_ARCH_64 is not set\n-\n-#\n-# Target optimisations\n-#\n-CT_ARCH_SUPPORTS_WITH_ABI=y\n-CT_ARCH_SUPPORTS_WITH_CPU=y\n-CT_ARCH_SUPPORTS_WITH_TUNE=y\n-CT_ARCH_SUPPORTS_WITH_FLOAT=y\n-CT_ARCH_ABI=\"\"\n-CT_ARCH_FLOAT_AUTO=y\n-# CT_ARCH_FLOAT_HW is not set\n-# CT_ARCH_FLOAT_SW is not set\n-CT_TARGET_CFLAGS=\"\"\n-CT_TARGET_LDFLAGS=\"\"\n-CT_ARCH_FLOAT=\"auto\"\n-\n-#\n-# Toolchain options\n-#\n-\n-#\n-# General toolchain options\n-#\n-CT_FORCE_SYSROOT=y\n-CT_USE_SYSROOT=y\n-CT_SYSROOT_NAME=\"sysroot\"\n-CT_SYSROOT_DIR_PREFIX=\"\"\n-CT_WANTS_STATIC_LINK=y\n-CT_WANTS_STATIC_LINK_CXX=y\n-# CT_STATIC_TOOLCHAIN is not set\n-CT_SHOW_CT_VERSION=y\n-CT_TOOLCHAIN_PKGVERSION=\"\"\n-CT_TOOLCHAIN_BUGURL=\"\"\n-\n-#\n-# Tuple completion and aliasing\n-#\n-CT_TARGET_VENDOR=\"unknown\"\n-CT_TARGET_ALIAS_SED_EXPR=\"\"\n-CT_TARGET_ALIAS=\"\"\n-\n-#\n-# Toolchain type\n-#\n-CT_CROSS=y\n-# CT_CANADIAN is not set\n-CT_TOOLCHAIN_TYPE=\"cross\"\n-\n-#\n-# Build system\n-#\n-CT_BUILD=\"\"\n-CT_BUILD_PREFIX=\"\"\n-CT_BUILD_SUFFIX=\"\"\n-\n-#\n-# Misc options\n-#\n-# CT_TOOLCHAIN_ENABLE_NLS is not set\n-\n-#\n-# Operating System\n-#\n-CT_KERNEL_SUPPORTS_SHARED_LIBS=y\n-# CT_KERNEL_BARE_METAL is not set\n-CT_KERNEL_LINUX=y\n-CT_KERNEL=\"linux\"\n-CT_KERNEL_CHOICE_KSYM=\"LINUX\"\n-CT_KERNEL_LINUX_SHOW=y\n-\n-#\n-# Options for linux\n-#\n-CT_KERNEL_LINUX_PKG_KSYM=\"LINUX\"\n-CT_LINUX_DIR_NAME=\"linux\"\n-CT_LINUX_PKG_NAME=\"linux\"\n-CT_LINUX_SRC_RELEASE=y\n-CT_LINUX_PATCH_ORDER=\"global\"\n-# CT_LINUX_V_4_20 is not set\n-# CT_LINUX_V_4_19 is not set\n-# CT_LINUX_V_4_18 is not set\n-# CT_LINUX_V_4_17 is not set\n-# CT_LINUX_V_4_16 is not set\n-# CT_LINUX_V_4_15 is not set\n-# CT_LINUX_V_4_14 is not set\n-# CT_LINUX_V_4_13 is not set\n-# CT_LINUX_V_4_12 is not set\n-# CT_LINUX_V_4_11 is not set\n-# CT_LINUX_V_4_10 is not set\n-# CT_LINUX_V_4_9 is not set\n-# CT_LINUX_V_4_4 is not set\n-# CT_LINUX_V_4_1 is not set\n-# CT_LINUX_V_3_16 is not set\n-# CT_LINUX_V_3_13 is not set\n-# CT_LINUX_V_3_12 is not set\n-# CT_LINUX_V_3_10 is not set\n-# CT_LINUX_V_3_4 is not set\n-CT_LINUX_V_3_2=y\n-# CT_LINUX_V_2_6_32 is not set\n-# CT_LINUX_NO_VERSIONS is not set\n-CT_LINUX_VERSION=\"3.2.101\"\n-CT_LINUX_MIRRORS=\"$(CT_Mirrors kernel.org linux ${CT_LINUX_VERSION})\"\n-CT_LINUX_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_LINUX_SIGNATURE_FORMAT=\"unpacked/.sign\"\n-CT_LINUX_4_8_or_older=y\n-CT_LINUX_older_than_4_8=y\n-CT_LINUX_3_7_or_older=y\n-CT_LINUX_older_than_3_7=y\n-CT_LINUX_later_than_3_2=y\n-CT_LINUX_3_2_or_later=y\n-CT_KERNEL_LINUX_VERBOSITY_0=y\n-# CT_KERNEL_LINUX_VERBOSITY_1 is not set\n-# CT_KERNEL_LINUX_VERBOSITY_2 is not set\n-CT_KERNEL_LINUX_VERBOSE_LEVEL=0\n-CT_KERNEL_LINUX_INSTALL_CHECK=y\n-CT_ALL_KERNEL_CHOICES=\"BARE_METAL LINUX WINDOWS\"\n-\n-#\n-# Common kernel options\n-#\n-CT_SHARED_LIBS=y\n-\n-#\n-# Binary utilities\n-#\n-CT_ARCH_BINFMT_ELF=y\n-CT_BINUTILS_BINUTILS=y\n-CT_BINUTILS=\"binutils\"\n-CT_BINUTILS_CHOICE_KSYM=\"BINUTILS\"\n-CT_BINUTILS_BINUTILS_SHOW=y\n-\n-#\n-# Options for binutils\n-#\n-CT_BINUTILS_BINUTILS_PKG_KSYM=\"BINUTILS\"\n-CT_BINUTILS_DIR_NAME=\"binutils\"\n-CT_BINUTILS_USE_GNU=y\n-CT_BINUTILS_USE=\"BINUTILS\"\n-CT_BINUTILS_PKG_NAME=\"binutils\"\n-CT_BINUTILS_SRC_RELEASE=y\n-CT_BINUTILS_PATCH_ORDER=\"global\"\n-# CT_BINUTILS_V_2_32 is not set\n-# CT_BINUTILS_V_2_31 is not set\n-CT_BINUTILS_V_2_30=y\n-# CT_BINUTILS_V_2_29 is not set\n-# CT_BINUTILS_V_2_28 is not set\n-# CT_BINUTILS_V_2_27 is not set\n-# CT_BINUTILS_V_2_26 is not set\n-# CT_BINUTILS_NO_VERSIONS is not set\n-CT_BINUTILS_VERSION=\"2.30\"\n-CT_BINUTILS_MIRRORS=\"$(CT_Mirrors GNU binutils) $(CT_Mirrors sourceware binutils/releases)\"\n-CT_BINUTILS_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_BINUTILS_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_BINUTILS_2_30_or_later=y\n-CT_BINUTILS_2_30_or_older=y\n-CT_BINUTILS_later_than_2_27=y\n-CT_BINUTILS_2_27_or_later=y\n-CT_BINUTILS_later_than_2_25=y\n-CT_BINUTILS_2_25_or_later=y\n-CT_BINUTILS_later_than_2_23=y\n-CT_BINUTILS_2_23_or_later=y\n-\n-#\n-# GNU binutils\n-#\n-CT_BINUTILS_HAS_HASH_STYLE=y\n-CT_BINUTILS_HAS_GOLD=y\n-CT_BINUTILS_HAS_PLUGINS=y\n-CT_BINUTILS_HAS_PKGVERSION_BUGURL=y\n-CT_BINUTILS_FORCE_LD_BFD_DEFAULT=y\n-CT_BINUTILS_LINKER_LD=y\n-CT_BINUTILS_LINKERS_LIST=\"ld\"\n-CT_BINUTILS_LINKER_DEFAULT=\"bfd\"\n-# CT_BINUTILS_PLUGINS is not set\n-CT_BINUTILS_RELRO=m\n-CT_BINUTILS_EXTRA_CONFIG_ARRAY=\"\"\n-# CT_BINUTILS_FOR_TARGET is not set\n-CT_ALL_BINUTILS_CHOICES=\"BINUTILS\"\n-\n-#\n-# C-library\n-#\n-CT_LIBC_GLIBC=y\n-# CT_LIBC_UCLIBC is not set\n-CT_LIBC=\"glibc\"\n-CT_LIBC_CHOICE_KSYM=\"GLIBC\"\n-CT_THREADS=\"nptl\"\n-CT_LIBC_GLIBC_SHOW=y\n-\n-#\n-# Options for glibc\n-#\n-CT_LIBC_GLIBC_PKG_KSYM=\"GLIBC\"\n-CT_GLIBC_DIR_NAME=\"glibc\"\n-CT_GLIBC_USE_GNU=y\n-CT_GLIBC_USE=\"GLIBC\"\n-CT_GLIBC_PKG_NAME=\"glibc\"\n-CT_GLIBC_SRC_RELEASE=y\n-CT_GLIBC_PATCH_ORDER=\"global\"\n-# CT_GLIBC_V_2_29 is not set\n-# CT_GLIBC_V_2_28 is not set\n-# CT_GLIBC_V_2_27 is not set\n-# CT_GLIBC_V_2_26 is not set\n-# CT_GLIBC_V_2_25 is not set\n-# CT_GLIBC_V_2_24 is not set\n-# CT_GLIBC_V_2_23 is not set\n-# CT_GLIBC_V_2_19 is not set\n-CT_GLIBC_V_2_17=y\n-# CT_GLIBC_V_2_12_1 is not set\n-# CT_GLIBC_NO_VERSIONS is not set\n-CT_GLIBC_VERSION=\"2.17\"\n-CT_GLIBC_MIRRORS=\"$(CT_Mirrors GNU glibc)\"\n-CT_GLIBC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_GLIBC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GLIBC_2_29_or_older=y\n-CT_GLIBC_older_than_2_29=y\n-CT_GLIBC_2_27_or_older=y\n-CT_GLIBC_older_than_2_27=y\n-CT_GLIBC_2_26_or_older=y\n-CT_GLIBC_older_than_2_26=y\n-CT_GLIBC_2_25_or_older=y\n-CT_GLIBC_older_than_2_25=y\n-CT_GLIBC_2_24_or_older=y\n-CT_GLIBC_older_than_2_24=y\n-CT_GLIBC_2_23_or_older=y\n-CT_GLIBC_older_than_2_23=y\n-CT_GLIBC_2_20_or_older=y\n-CT_GLIBC_older_than_2_20=y\n-CT_GLIBC_2_17_or_later=y\n-CT_GLIBC_2_17_or_older=y\n-CT_GLIBC_later_than_2_14=y\n-CT_GLIBC_2_14_or_later=y\n-CT_GLIBC_DEP_KERNEL_HEADERS_VERSION=y\n-CT_GLIBC_DEP_BINUTILS=y\n-CT_GLIBC_DEP_GCC=y\n-CT_GLIBC_DEP_PYTHON=y\n-CT_GLIBC_HAS_NPTL_ADDON=y\n-CT_GLIBC_HAS_PORTS_ADDON=y\n-CT_GLIBC_HAS_LIBIDN_ADDON=y\n-CT_GLIBC_USE_PORTS_ADDON=y\n-CT_GLIBC_USE_NPTL_ADDON=y\n-# CT_GLIBC_USE_LIBIDN_ADDON is not set\n-CT_GLIBC_HAS_OBSOLETE_RPC=y\n-CT_GLIBC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_GLIBC_CONFIGPARMS=\"\"\n-CT_GLIBC_EXTRA_CFLAGS=\"\"\n-CT_GLIBC_ENABLE_OBSOLETE_RPC=y\n-# CT_GLIBC_DISABLE_VERSIONING is not set\n-CT_GLIBC_OLDEST_ABI=\"\"\n-CT_GLIBC_FORCE_UNWIND=y\n-# CT_GLIBC_LOCALES is not set\n-# CT_GLIBC_KERNEL_VERSION_NONE is not set\n-CT_GLIBC_KERNEL_VERSION_AS_HEADERS=y\n-# CT_GLIBC_KERNEL_VERSION_CHOSEN is not set\n-CT_GLIBC_MIN_KERNEL=\"3.2.101\"\n-CT_ALL_LIBC_CHOICES=\"AVR_LIBC BIONIC GLIBC MINGW_W64 MOXIEBOX MUSL NEWLIB NONE UCLIBC\"\n-CT_LIBC_SUPPORT_THREADS_ANY=y\n-CT_LIBC_SUPPORT_THREADS_NATIVE=y\n-\n-#\n-# Common C library options\n-#\n-CT_THREADS_NATIVE=y\n-# CT_CREATE_LDSO_CONF is not set\n-CT_LIBC_XLDD=y\n-\n-#\n-# C compiler\n-#\n-CT_CC_CORE_PASSES_NEEDED=y\n-CT_CC_CORE_PASS_1_NEEDED=y\n-CT_CC_CORE_PASS_2_NEEDED=y\n-CT_CC_SUPPORT_CXX=y\n-CT_CC_SUPPORT_FORTRAN=y\n-CT_CC_SUPPORT_ADA=y\n-CT_CC_SUPPORT_OBJC=y\n-CT_CC_SUPPORT_OBJCXX=y\n-CT_CC_SUPPORT_GOLANG=y\n-CT_CC_GCC=y\n-CT_CC=\"gcc\"\n-CT_CC_CHOICE_KSYM=\"GCC\"\n-CT_CC_GCC_SHOW=y\n-\n-#\n-# Options for gcc\n-#\n-CT_CC_GCC_PKG_KSYM=\"GCC\"\n-CT_GCC_DIR_NAME=\"gcc\"\n-CT_GCC_USE_GNU=y\n-CT_GCC_USE=\"GCC\"\n-CT_GCC_PKG_NAME=\"gcc\"\n-CT_GCC_SRC_RELEASE=y\n-CT_GCC_PATCH_ORDER=\"global\"\n-CT_GCC_V_8=y\n-# CT_GCC_V_7 is not set\n-# CT_GCC_V_6 is not set\n-# CT_GCC_V_5 is not set\n-# CT_GCC_V_4_9 is not set\n-# CT_GCC_NO_VERSIONS is not set\n-CT_GCC_VERSION=\"8.3.0\"\n-CT_GCC_MIRRORS=\"$(CT_Mirrors GNU gcc/gcc-${CT_GCC_VERSION}) $(CT_Mirrors sourceware gcc/releases/gcc-${CT_GCC_VERSION})\"\n-CT_GCC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_GCC_SIGNATURE_FORMAT=\"\"\n-CT_GCC_later_than_7=y\n-CT_GCC_7_or_later=y\n-CT_GCC_later_than_6=y\n-CT_GCC_6_or_later=y\n-CT_GCC_later_than_5=y\n-CT_GCC_5_or_later=y\n-CT_GCC_later_than_4_9=y\n-CT_GCC_4_9_or_later=y\n-CT_GCC_later_than_4_8=y\n-CT_GCC_4_8_or_later=y\n-CT_CC_GCC_HAS_LIBMPX=y\n-CT_CC_GCC_ENABLE_CXX_FLAGS=\"\"\n-CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_STATIC_LIBSTDCXX=y\n-# CT_CC_GCC_SYSTEM_ZLIB is not set\n-CT_CC_GCC_CONFIG_TLS=m\n-\n-#\n-# Optimisation features\n-#\n-CT_CC_GCC_USE_GRAPHITE=y\n-CT_CC_GCC_USE_LTO=y\n-\n-#\n-# Settings for libraries running on target\n-#\n-CT_CC_GCC_ENABLE_TARGET_OPTSPACE=y\n-# CT_CC_GCC_LIBMUDFLAP is not set\n-# CT_CC_GCC_LIBGOMP is not set\n-# CT_CC_GCC_LIBSSP is not set\n-# CT_CC_GCC_LIBQUADMATH is not set\n-# CT_CC_GCC_LIBSANITIZER is not set\n-\n-#\n-# Misc. obscure options.\n-#\n-CT_CC_CXA_ATEXIT=y\n-# CT_CC_GCC_DISABLE_PCH is not set\n-CT_CC_GCC_SJLJ_EXCEPTIONS=m\n-CT_CC_GCC_LDBL_128=m\n-# CT_CC_GCC_BUILD_ID is not set\n-CT_CC_GCC_LNK_HASH_STYLE_DEFAULT=y\n-# CT_CC_GCC_LNK_HASH_STYLE_SYSV is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_GNU is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_BOTH is not set\n-CT_CC_GCC_LNK_HASH_STYLE=\"\"\n-CT_CC_GCC_DEC_FLOAT_AUTO=y\n-# CT_CC_GCC_DEC_FLOAT_BID is not set\n-# CT_CC_GCC_DEC_FLOAT_DPD is not set\n-# CT_CC_GCC_DEC_FLOATS_NO is not set\n-CT_ALL_CC_CHOICES=\"GCC\"\n-\n-#\n-# Additional supported languages:\n-#\n-CT_CC_LANG_CXX=y\n-# CT_CC_LANG_FORTRAN is not set\n-\n-#\n-# Debug facilities\n-#\n-# CT_DEBUG_DUMA is not set\n-# CT_DEBUG_GDB is not set\n-# CT_DEBUG_LTRACE is not set\n-# CT_DEBUG_STRACE is not set\n-CT_ALL_DEBUG_CHOICES=\"DUMA GDB LTRACE STRACE\"\n-\n-#\n-# Companion libraries\n-#\n-# CT_COMPLIBS_CHECK is not set\n-# CT_COMP_LIBS_CLOOG is not set\n-# CT_COMP_LIBS_EXPAT is not set\n-CT_COMP_LIBS_GETTEXT=y\n-CT_COMP_LIBS_GETTEXT_PKG_KSYM=\"GETTEXT\"\n-CT_GETTEXT_DIR_NAME=\"gettext\"\n-CT_GETTEXT_PKG_NAME=\"gettext\"\n-CT_GETTEXT_SRC_RELEASE=y\n-CT_GETTEXT_PATCH_ORDER=\"global\"\n-CT_GETTEXT_V_0_19_8_1=y\n-# CT_GETTEXT_NO_VERSIONS is not set\n-CT_GETTEXT_VERSION=\"0.19.8.1\"\n-CT_GETTEXT_MIRRORS=\"$(CT_Mirrors GNU gettext)\"\n-CT_GETTEXT_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.gz\"\n-CT_GETTEXT_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_GMP=y\n-CT_COMP_LIBS_GMP_PKG_KSYM=\"GMP\"\n-CT_GMP_DIR_NAME=\"gmp\"\n-CT_GMP_PKG_NAME=\"gmp\"\n-CT_GMP_SRC_RELEASE=y\n-CT_GMP_PATCH_ORDER=\"global\"\n-CT_GMP_V_6_1=y\n-# CT_GMP_NO_VERSIONS is not set\n-CT_GMP_VERSION=\"6.1.2\"\n-CT_GMP_MIRRORS=\"https://gmplib.org/download/gmp https://gmplib.org/download/gmp/archive $(CT_Mirrors GNU gmp)\"\n-CT_GMP_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.bz2\"\n-CT_GMP_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GMP_later_than_5_1_0=y\n-CT_GMP_5_1_0_or_later=y\n-CT_GMP_later_than_5_0_0=y\n-CT_GMP_5_0_0_or_later=y\n-CT_GMP_REQUIRE_5_0_0_or_later=y\n-CT_COMP_LIBS_ISL=y\n-CT_COMP_LIBS_ISL_PKG_KSYM=\"ISL\"\n-CT_ISL_DIR_NAME=\"isl\"\n-CT_ISL_PKG_NAME=\"isl\"\n-CT_ISL_SRC_RELEASE=y\n-CT_ISL_PATCH_ORDER=\"global\"\n-CT_ISL_V_0_20=y\n-# CT_ISL_V_0_19 is not set\n-# CT_ISL_V_0_18 is not set\n-# CT_ISL_V_0_17 is not set\n-# CT_ISL_V_0_16 is not set\n-# CT_ISL_V_0_15 is not set\n-# CT_ISL_NO_VERSIONS is not set\n-CT_ISL_VERSION=\"0.20\"\n-CT_ISL_MIRRORS=\"http://isl.gforge.inria.fr\"\n-CT_ISL_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_ISL_SIGNATURE_FORMAT=\"\"\n-CT_ISL_later_than_0_18=y\n-CT_ISL_0_18_or_later=y\n-CT_ISL_later_than_0_15=y\n-CT_ISL_0_15_or_later=y\n-CT_ISL_REQUIRE_0_15_or_later=y\n-CT_ISL_later_than_0_14=y\n-CT_ISL_0_14_or_later=y\n-CT_ISL_REQUIRE_0_14_or_later=y\n-CT_ISL_later_than_0_13=y\n-CT_ISL_0_13_or_later=y\n-CT_ISL_later_than_0_12=y\n-CT_ISL_0_12_or_later=y\n-CT_ISL_REQUIRE_0_12_or_later=y\n-# CT_COMP_LIBS_LIBELF is not set\n-CT_COMP_LIBS_LIBICONV=y\n-CT_COMP_LIBS_LIBICONV_PKG_KSYM=\"LIBICONV\"\n-CT_LIBICONV_DIR_NAME=\"libiconv\"\n-CT_LIBICONV_PKG_NAME=\"libiconv\"\n-CT_LIBICONV_SRC_RELEASE=y\n-CT_LIBICONV_PATCH_ORDER=\"global\"\n-CT_LIBICONV_V_1_15=y\n-# CT_LIBICONV_NO_VERSIONS is not set\n-CT_LIBICONV_VERSION=\"1.15\"\n-CT_LIBICONV_MIRRORS=\"$(CT_Mirrors GNU libiconv)\"\n-CT_LIBICONV_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_LIBICONV_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_MPC=y\n-CT_COMP_LIBS_MPC_PKG_KSYM=\"MPC\"\n-CT_MPC_DIR_NAME=\"mpc\"\n-CT_MPC_PKG_NAME=\"mpc\"\n-CT_MPC_SRC_RELEASE=y\n-CT_MPC_PATCH_ORDER=\"global\"\n-CT_MPC_V_1_1=y\n-# CT_MPC_V_1_0 is not set\n-# CT_MPC_NO_VERSIONS is not set\n-CT_MPC_VERSION=\"1.1.0\"\n-CT_MPC_MIRRORS=\"http://www.multiprecision.org/downloads $(CT_Mirrors GNU mpc)\"\n-CT_MPC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_MPC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_MPC_1_1_0_or_later=y\n-CT_MPC_1_1_0_or_older=y\n-CT_COMP_LIBS_MPFR=y\n-CT_COMP_LIBS_MPFR_PKG_KSYM=\"MPFR\"\n-CT_MPFR_DIR_NAME=\"mpfr\"\n-CT_MPFR_PKG_NAME=\"mpfr\"\n-CT_MPFR_SRC_RELEASE=y\n-CT_MPFR_PATCH_ORDER=\"global\"\n-CT_MPFR_V_4_0=y\n-# CT_MPFR_V_3_1 is not set\n-# CT_MPFR_NO_VERSIONS is not set\n-CT_MPFR_VERSION=\"4.0.2\"\n-CT_MPFR_MIRRORS=\"http://www.mpfr.org/mpfr-${CT_MPFR_VERSION} $(CT_Mirrors GNU mpfr)\"\n-CT_MPFR_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz .zip\"\n-CT_MPFR_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_MPFR_later_than_4_0_0=y\n-CT_MPFR_4_0_0_or_later=y\n-CT_MPFR_later_than_3_0_0=y\n-CT_MPFR_3_0_0_or_later=y\n-CT_MPFR_REQUIRE_3_0_0_or_later=y\n-CT_COMP_LIBS_NCURSES=y\n-CT_COMP_LIBS_NCURSES_PKG_KSYM=\"NCURSES\"\n-CT_NCURSES_DIR_NAME=\"ncurses\"\n-CT_NCURSES_PKG_NAME=\"ncurses\"\n-CT_NCURSES_SRC_RELEASE=y\n-CT_NCURSES_PATCH_ORDER=\"global\"\n-CT_NCURSES_V_6_1=y\n-# CT_NCURSES_V_6_0 is not set\n-# CT_NCURSES_NO_VERSIONS is not set\n-CT_NCURSES_VERSION=\"6.1\"\n-CT_NCURSES_MIRRORS=\"ftp://invisible-island.net/ncurses $(CT_Mirrors GNU ncurses)\"\n-CT_NCURSES_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_NCURSES_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_NCURSES_HOST_CONFIG_ARGS=\"\"\n-CT_NCURSES_HOST_DISABLE_DB=y\n-CT_NCURSES_HOST_FALLBACKS=\"linux,xterm,xterm-color,xterm-256color,vt100\"\n-CT_NCURSES_TARGET_CONFIG_ARGS=\"\"\n-# CT_NCURSES_TARGET_DISABLE_DB is not set\n-CT_NCURSES_TARGET_FALLBACKS=\"\"\n-CT_COMP_LIBS_ZLIB=y\n-CT_COMP_LIBS_ZLIB_PKG_KSYM=\"ZLIB\"\n-CT_ZLIB_DIR_NAME=\"zlib\"\n-CT_ZLIB_PKG_NAME=\"zlib\"\n-CT_ZLIB_SRC_RELEASE=y\n-CT_ZLIB_PATCH_ORDER=\"global\"\n-CT_ZLIB_V_1_2_11=y\n-# CT_ZLIB_NO_VERSIONS is not set\n-CT_ZLIB_VERSION=\"1.2.11\"\n-CT_ZLIB_MIRRORS=\"http://downloads.sourceforge.net/project/libpng/zlib/${CT_ZLIB_VERSION}\"\n-CT_ZLIB_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_ZLIB_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_ALL_COMP_LIBS_CHOICES=\"CLOOG EXPAT GETTEXT GMP ISL LIBELF LIBICONV MPC MPFR NCURSES ZLIB\"\n-CT_LIBICONV_NEEDED=y\n-CT_GETTEXT_NEEDED=y\n-CT_GMP_NEEDED=y\n-CT_MPFR_NEEDED=y\n-CT_ISL_NEEDED=y\n-CT_MPC_NEEDED=y\n-CT_NCURSES_NEEDED=y\n-CT_ZLIB_NEEDED=y\n-CT_LIBICONV=y\n-CT_GETTEXT=y\n-CT_GMP=y\n-CT_MPFR=y\n-CT_ISL=y\n-CT_MPC=y\n-CT_NCURSES=y\n-CT_ZLIB=y\n-\n-#\n-# Companion tools\n-#\n-# CT_COMP_TOOLS_FOR_HOST is not set\n-# CT_COMP_TOOLS_AUTOCONF is not set\n-# CT_COMP_TOOLS_AUTOMAKE is not set\n-# CT_COMP_TOOLS_BISON is not set\n-# CT_COMP_TOOLS_DTC is not set\n-# CT_COMP_TOOLS_LIBTOOL is not set\n-# CT_COMP_TOOLS_M4 is not set\n-# CT_COMP_TOOLS_MAKE is not set\n-CT_ALL_COMP_TOOLS_CHOICES=\"AUTOCONF AUTOMAKE BISON DTC LIBTOOL M4 MAKE\""}, {"sha": "6a0e96a3b67bc2ff3c5bb8f4eafe6c164f90390d", "filename": "src/ci/docker/host-x86_64/dist-powerpc-linux/powerpc-linux-gnu.defconfig", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2Fpowerpc-linux-gnu.defconfig", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2Fpowerpc-linux-gnu.defconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc-linux%2Fpowerpc-linux-gnu.defconfig?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -0,0 +1,12 @@\n+CT_CONFIG_VERSION=\"4\"\n+CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n+CT_USE_MIRROR=y\n+CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n+CT_ARCH_POWERPC=y\n+CT_ARCH_CPU=\"powerpc\"\n+CT_KERNEL_LINUX=y\n+CT_LINUX_V_3_2=y\n+CT_BINUTILS_V_2_30=y\n+CT_GLIBC_V_2_17=y\n+CT_GCC_V_8=y\n+CT_CC_LANG_CXX=y"}, {"sha": "c88185a2000db10152ab9f22ca015ca1940640ae", "filename": "src/ci/docker/host-x86_64/dist-powerpc64-linux/Dockerfile", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2FDockerfile?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1,20 +1,18 @@\n-FROM ubuntu:20.04\n+FROM ubuntu:22.04\n \n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/crosstool-ng-1.24.sh /scripts/\n-RUN sh /scripts/crosstool-ng-1.24.sh\n+COPY scripts/crosstool-ng.sh /scripts/\n+RUN sh /scripts/crosstool-ng.sh\n \n COPY scripts/rustbuild-setup.sh /scripts/\n RUN sh /scripts/rustbuild-setup.sh\n-USER rustbuild\n WORKDIR /tmp\n \n-COPY host-x86_64/dist-powerpc64-linux/shared.sh host-x86_64/dist-powerpc64-linux/powerpc64-linux-gnu.config host-x86_64/dist-powerpc64-linux/build-powerpc64-toolchain.sh /tmp/\n-RUN ./build-powerpc64-toolchain.sh\n-\n-USER root\n+COPY scripts/crosstool-ng-build.sh /scripts/\n+COPY host-x86_64/dist-powerpc64-linux/powerpc64-linux-gnu.defconfig /tmp/crosstool.defconfig\n+RUN /scripts/crosstool-ng-build.sh\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "f7aa2cd326832b52495d5ea40d3e9891b828251e", "filename": "src/ci/docker/host-x86_64/dist-powerpc64-linux/build-powerpc64-toolchain.sh", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2Fbuild-powerpc64-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2Fbuild-powerpc64-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2Fbuild-powerpc64-toolchain.sh?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,11 +0,0 @@\n-#!/usr/bin/env bash\n-set -ex\n-\n-source shared.sh\n-\n-mkdir build\n-cd build\n-cp ../powerpc64-linux-gnu.config .config\n-hide_output ct-ng build\n-cd ..\n-rm -rf build"}, {"sha": "d3293eab2bed69d829c11e4a43e794b5c2b3087f", "filename": "src/ci/docker/host-x86_64/dist-powerpc64-linux/powerpc64-linux-gnu.config", "status": "removed", "additions": 0, "deletions": 736, "changes": 736, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2Fpowerpc64-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2Fpowerpc64-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2Fpowerpc64-linux-gnu.config?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,736 +0,0 @@\n-#\n-# Automatically generated file; DO NOT EDIT.\n-# crosstool-NG  Configuration\n-#\n-CT_CONFIGURE_has_static_link=y\n-CT_CONFIGURE_has_cxx11=y\n-CT_CONFIGURE_has_wget=y\n-CT_CONFIGURE_has_curl=y\n-CT_CONFIGURE_has_make_3_81_or_newer=y\n-CT_CONFIGURE_has_make_4_0_or_newer=y\n-CT_CONFIGURE_has_libtool_2_4_or_newer=y\n-CT_CONFIGURE_has_libtoolize_2_4_or_newer=y\n-CT_CONFIGURE_has_autoconf_2_65_or_newer=y\n-CT_CONFIGURE_has_autoreconf_2_65_or_newer=y\n-CT_CONFIGURE_has_automake_1_15_or_newer=y\n-CT_CONFIGURE_has_gnu_m4_1_4_12_or_newer=y\n-CT_CONFIGURE_has_python_3_4_or_newer=y\n-CT_CONFIGURE_has_bison_2_7_or_newer=y\n-CT_CONFIGURE_has_python=y\n-CT_CONFIGURE_has_git=y\n-CT_CONFIGURE_has_md5sum=y\n-CT_CONFIGURE_has_sha1sum=y\n-CT_CONFIGURE_has_sha256sum=y\n-CT_CONFIGURE_has_sha512sum=y\n-CT_CONFIGURE_has_install_with_strip_program=y\n-CT_CONFIG_VERSION_CURRENT=\"3\"\n-CT_CONFIG_VERSION=\"3\"\n-CT_MODULES=y\n-\n-#\n-# Paths and misc options\n-#\n-\n-#\n-# crosstool-NG behavior\n-#\n-# CT_OBSOLETE is not set\n-# CT_EXPERIMENTAL is not set\n-# CT_DEBUG_CT is not set\n-\n-#\n-# Paths\n-#\n-CT_LOCAL_TARBALLS_DIR=\"${HOME}/src\"\n-CT_SAVE_TARBALLS=y\n-# CT_TARBALLS_BUILDROOT_LAYOUT is not set\n-CT_WORK_DIR=\"${CT_TOP_DIR}/.build\"\n-CT_BUILD_TOP_DIR=\"${CT_WORK_DIR:-${CT_TOP_DIR}/.build}/${CT_HOST:+HOST-${CT_HOST}/}${CT_TARGET}\"\n-CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n-CT_RM_RF_PREFIX_DIR=y\n-CT_REMOVE_DOCS=y\n-CT_INSTALL_LICENSES=y\n-CT_PREFIX_DIR_RO=y\n-CT_STRIP_HOST_TOOLCHAIN_EXECUTABLES=y\n-# CT_STRIP_TARGET_TOOLCHAIN_EXECUTABLES is not set\n-\n-#\n-# Downloading\n-#\n-CT_DOWNLOAD_AGENT_WGET=y\n-# CT_DOWNLOAD_AGENT_CURL is not set\n-# CT_DOWNLOAD_AGENT_NONE is not set\n-# CT_FORBID_DOWNLOAD is not set\n-# CT_FORCE_DOWNLOAD is not set\n-CT_CONNECT_TIMEOUT=10\n-CT_DOWNLOAD_WGET_OPTIONS=\"--passive-ftp --tries=3 -nc --progress=dot:binary\"\n-# CT_ONLY_DOWNLOAD is not set\n-CT_USE_MIRROR=y\n-# CT_FORCE_MIRROR is not set\n-CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n-CT_VERIFY_DOWNLOAD_DIGEST=y\n-CT_VERIFY_DOWNLOAD_DIGEST_SHA512=y\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA256 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_SHA1 is not set\n-# CT_VERIFY_DOWNLOAD_DIGEST_MD5 is not set\n-CT_VERIFY_DOWNLOAD_DIGEST_ALG=\"sha512\"\n-# CT_VERIFY_DOWNLOAD_SIGNATURE is not set\n-\n-#\n-# Extracting\n-#\n-# CT_FORCE_EXTRACT is not set\n-CT_OVERRIDE_CONFIG_GUESS_SUB=y\n-# CT_ONLY_EXTRACT is not set\n-CT_PATCH_BUNDLED=y\n-# CT_PATCH_BUNDLED_LOCAL is not set\n-CT_PATCH_ORDER=\"bundled\"\n-\n-#\n-# Build behavior\n-#\n-CT_PARALLEL_JOBS=0\n-CT_LOAD=\"\"\n-CT_USE_PIPES=y\n-CT_EXTRA_CFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_LDFLAGS_FOR_BUILD=\"\"\n-CT_EXTRA_CFLAGS_FOR_HOST=\"\"\n-CT_EXTRA_LDFLAGS_FOR_HOST=\"\"\n-# CT_CONFIG_SHELL_SH is not set\n-# CT_CONFIG_SHELL_ASH is not set\n-CT_CONFIG_SHELL_BASH=y\n-# CT_CONFIG_SHELL_CUSTOM is not set\n-CT_CONFIG_SHELL=\"${bash}\"\n-\n-#\n-# Logging\n-#\n-# CT_LOG_ERROR is not set\n-# CT_LOG_WARN is not set\n-# CT_LOG_INFO is not set\n-CT_LOG_EXTRA=y\n-# CT_LOG_ALL is not set\n-# CT_LOG_DEBUG is not set\n-CT_LOG_LEVEL_MAX=\"EXTRA\"\n-# CT_LOG_SEE_TOOLS_WARN is not set\n-CT_LOG_PROGRESS_BAR=y\n-CT_LOG_TO_FILE=y\n-CT_LOG_FILE_COMPRESS=y\n-\n-#\n-# Target options\n-#\n-# CT_ARCH_ALPHA is not set\n-# CT_ARCH_ARC is not set\n-# CT_ARCH_ARM is not set\n-# CT_ARCH_AVR is not set\n-# CT_ARCH_M68K is not set\n-# CT_ARCH_MIPS is not set\n-# CT_ARCH_NIOS2 is not set\n-CT_ARCH_POWERPC=y\n-# CT_ARCH_S390 is not set\n-# CT_ARCH_SH is not set\n-# CT_ARCH_SPARC is not set\n-# CT_ARCH_X86 is not set\n-# CT_ARCH_XTENSA is not set\n-CT_ARCH=\"powerpc\"\n-CT_ARCH_CHOICE_KSYM=\"POWERPC\"\n-CT_ARCH_CPU=\"power4\"\n-CT_ARCH_TUNE=\"power6\"\n-CT_ARCH_POWERPC_SHOW=y\n-\n-#\n-# Options for powerpc\n-#\n-CT_ARCH_POWERPC_PKG_KSYM=\"\"\n-CT_ARCH_powerpc_ABI=\"\"\n-CT_ARCH_powerpc_ABI_DEFAULT=y\n-# CT_ARCH_powerpc_ABI_SPE is not set\n-CT_ALL_ARCH_CHOICES=\"ALPHA ARC ARM AVR M68K MICROBLAZE MIPS MOXIE MSP430 NIOS2 POWERPC RISCV S390 SH SPARC X86 XTENSA\"\n-CT_ARCH_SUFFIX=\"\"\n-# CT_OMIT_TARGET_VENDOR is not set\n-\n-#\n-# Generic target options\n-#\n-# CT_MULTILIB is not set\n-CT_DEMULTILIB=y\n-CT_ARCH_USE_MMU=y\n-CT_ARCH_SUPPORTS_EITHER_ENDIAN=y\n-CT_ARCH_DEFAULT_BE=y\n-CT_ARCH_BE=y\n-# CT_ARCH_LE is not set\n-CT_ARCH_ENDIAN=\"big\"\n-CT_ARCH_SUPPORTS_32=y\n-CT_ARCH_SUPPORTS_64=y\n-CT_ARCH_DEFAULT_32=y\n-CT_ARCH_BITNESS=64\n-# CT_ARCH_32 is not set\n-CT_ARCH_64=y\n-\n-#\n-# Target optimisations\n-#\n-CT_ARCH_SUPPORTS_WITH_ABI=y\n-CT_ARCH_SUPPORTS_WITH_CPU=y\n-CT_ARCH_SUPPORTS_WITH_TUNE=y\n-CT_ARCH_SUPPORTS_WITH_FLOAT=y\n-CT_ARCH_ABI=\"\"\n-CT_ARCH_FLOAT_AUTO=y\n-# CT_ARCH_FLOAT_HW is not set\n-# CT_ARCH_FLOAT_SW is not set\n-CT_TARGET_CFLAGS=\"\"\n-CT_TARGET_LDFLAGS=\"\"\n-CT_ARCH_FLOAT=\"auto\"\n-\n-#\n-# Toolchain options\n-#\n-\n-#\n-# General toolchain options\n-#\n-CT_FORCE_SYSROOT=y\n-CT_USE_SYSROOT=y\n-CT_SYSROOT_NAME=\"sysroot\"\n-CT_SYSROOT_DIR_PREFIX=\"\"\n-CT_WANTS_STATIC_LINK=y\n-CT_WANTS_STATIC_LINK_CXX=y\n-# CT_STATIC_TOOLCHAIN is not set\n-CT_SHOW_CT_VERSION=y\n-CT_TOOLCHAIN_PKGVERSION=\"\"\n-CT_TOOLCHAIN_BUGURL=\"\"\n-\n-#\n-# Tuple completion and aliasing\n-#\n-CT_TARGET_VENDOR=\"unknown\"\n-CT_TARGET_ALIAS_SED_EXPR=\"\"\n-CT_TARGET_ALIAS=\"\"\n-\n-#\n-# Toolchain type\n-#\n-CT_CROSS=y\n-# CT_CANADIAN is not set\n-CT_TOOLCHAIN_TYPE=\"cross\"\n-\n-#\n-# Build system\n-#\n-CT_BUILD=\"\"\n-CT_BUILD_PREFIX=\"\"\n-CT_BUILD_SUFFIX=\"\"\n-\n-#\n-# Misc options\n-#\n-# CT_TOOLCHAIN_ENABLE_NLS is not set\n-\n-#\n-# Operating System\n-#\n-CT_KERNEL_SUPPORTS_SHARED_LIBS=y\n-# CT_KERNEL_BARE_METAL is not set\n-CT_KERNEL_LINUX=y\n-CT_KERNEL=\"linux\"\n-CT_KERNEL_CHOICE_KSYM=\"LINUX\"\n-CT_KERNEL_LINUX_SHOW=y\n-\n-#\n-# Options for linux\n-#\n-CT_KERNEL_LINUX_PKG_KSYM=\"LINUX\"\n-CT_LINUX_DIR_NAME=\"linux\"\n-CT_LINUX_PKG_NAME=\"linux\"\n-CT_LINUX_SRC_RELEASE=y\n-CT_LINUX_PATCH_ORDER=\"global\"\n-# CT_LINUX_V_4_20 is not set\n-# CT_LINUX_V_4_19 is not set\n-# CT_LINUX_V_4_18 is not set\n-# CT_LINUX_V_4_17 is not set\n-# CT_LINUX_V_4_16 is not set\n-# CT_LINUX_V_4_15 is not set\n-# CT_LINUX_V_4_14 is not set\n-# CT_LINUX_V_4_13 is not set\n-# CT_LINUX_V_4_12 is not set\n-# CT_LINUX_V_4_11 is not set\n-# CT_LINUX_V_4_10 is not set\n-# CT_LINUX_V_4_9 is not set\n-# CT_LINUX_V_4_4 is not set\n-# CT_LINUX_V_4_1 is not set\n-# CT_LINUX_V_3_16 is not set\n-# CT_LINUX_V_3_13 is not set\n-# CT_LINUX_V_3_12 is not set\n-# CT_LINUX_V_3_10 is not set\n-# CT_LINUX_V_3_4 is not set\n-CT_LINUX_V_3_2=y\n-# CT_LINUX_V_2_6_32 is not set\n-# CT_LINUX_NO_VERSIONS is not set\n-CT_LINUX_VERSION=\"3.2.101\"\n-CT_LINUX_MIRRORS=\"$(CT_Mirrors kernel.org linux ${CT_LINUX_VERSION})\"\n-CT_LINUX_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LINUX_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_LINUX_SIGNATURE_FORMAT=\"unpacked/.sign\"\n-CT_LINUX_4_8_or_older=y\n-CT_LINUX_older_than_4_8=y\n-CT_LINUX_3_7_or_older=y\n-CT_LINUX_older_than_3_7=y\n-CT_LINUX_later_than_3_2=y\n-CT_LINUX_3_2_or_later=y\n-CT_KERNEL_LINUX_VERBOSITY_0=y\n-# CT_KERNEL_LINUX_VERBOSITY_1 is not set\n-# CT_KERNEL_LINUX_VERBOSITY_2 is not set\n-CT_KERNEL_LINUX_VERBOSE_LEVEL=0\n-CT_KERNEL_LINUX_INSTALL_CHECK=y\n-CT_ALL_KERNEL_CHOICES=\"BARE_METAL LINUX WINDOWS\"\n-\n-#\n-# Common kernel options\n-#\n-CT_SHARED_LIBS=y\n-\n-#\n-# Binary utilities\n-#\n-CT_ARCH_BINFMT_ELF=y\n-CT_BINUTILS_BINUTILS=y\n-CT_BINUTILS=\"binutils\"\n-CT_BINUTILS_CHOICE_KSYM=\"BINUTILS\"\n-CT_BINUTILS_BINUTILS_SHOW=y\n-\n-#\n-# Options for binutils\n-#\n-CT_BINUTILS_BINUTILS_PKG_KSYM=\"BINUTILS\"\n-CT_BINUTILS_DIR_NAME=\"binutils\"\n-CT_BINUTILS_USE_GNU=y\n-CT_BINUTILS_USE=\"BINUTILS\"\n-CT_BINUTILS_PKG_NAME=\"binutils\"\n-CT_BINUTILS_SRC_RELEASE=y\n-CT_BINUTILS_PATCH_ORDER=\"global\"\n-CT_BINUTILS_V_2_32=y\n-# CT_BINUTILS_V_2_31 is not set\n-# CT_BINUTILS_V_2_30 is not set\n-# CT_BINUTILS_V_2_29 is not set\n-# CT_BINUTILS_V_2_28 is not set\n-# CT_BINUTILS_V_2_27 is not set\n-# CT_BINUTILS_V_2_26 is not set\n-# CT_BINUTILS_NO_VERSIONS is not set\n-CT_BINUTILS_VERSION=\"2.32\"\n-CT_BINUTILS_MIRRORS=\"$(CT_Mirrors GNU binutils) $(CT_Mirrors sourceware binutils/releases)\"\n-CT_BINUTILS_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_BINUTILS_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_BINUTILS_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_BINUTILS_later_than_2_30=y\n-CT_BINUTILS_2_30_or_later=y\n-CT_BINUTILS_later_than_2_27=y\n-CT_BINUTILS_2_27_or_later=y\n-CT_BINUTILS_later_than_2_25=y\n-CT_BINUTILS_2_25_or_later=y\n-CT_BINUTILS_later_than_2_23=y\n-CT_BINUTILS_2_23_or_later=y\n-\n-#\n-# GNU binutils\n-#\n-CT_BINUTILS_HAS_HASH_STYLE=y\n-CT_BINUTILS_HAS_GOLD=y\n-CT_BINUTILS_HAS_PLUGINS=y\n-CT_BINUTILS_HAS_PKGVERSION_BUGURL=y\n-CT_BINUTILS_FORCE_LD_BFD_DEFAULT=y\n-CT_BINUTILS_LINKER_LD=y\n-CT_BINUTILS_LINKERS_LIST=\"ld\"\n-CT_BINUTILS_LINKER_DEFAULT=\"bfd\"\n-# CT_BINUTILS_PLUGINS is not set\n-CT_BINUTILS_RELRO=m\n-CT_BINUTILS_EXTRA_CONFIG_ARRAY=\"\"\n-# CT_BINUTILS_FOR_TARGET is not set\n-CT_ALL_BINUTILS_CHOICES=\"BINUTILS\"\n-\n-#\n-# C-library\n-#\n-CT_LIBC_GLIBC=y\n-# CT_LIBC_UCLIBC is not set\n-CT_LIBC=\"glibc\"\n-CT_LIBC_CHOICE_KSYM=\"GLIBC\"\n-CT_THREADS=\"nptl\"\n-CT_LIBC_GLIBC_SHOW=y\n-\n-#\n-# Options for glibc\n-#\n-CT_LIBC_GLIBC_PKG_KSYM=\"GLIBC\"\n-CT_GLIBC_DIR_NAME=\"glibc\"\n-CT_GLIBC_USE_GNU=y\n-CT_GLIBC_USE=\"GLIBC\"\n-CT_GLIBC_PKG_NAME=\"glibc\"\n-CT_GLIBC_SRC_RELEASE=y\n-CT_GLIBC_PATCH_ORDER=\"global\"\n-# CT_GLIBC_V_2_29 is not set\n-# CT_GLIBC_V_2_28 is not set\n-# CT_GLIBC_V_2_27 is not set\n-# CT_GLIBC_V_2_26 is not set\n-# CT_GLIBC_V_2_25 is not set\n-# CT_GLIBC_V_2_24 is not set\n-# CT_GLIBC_V_2_23 is not set\n-# CT_GLIBC_V_2_19 is not set\n-CT_GLIBC_V_2_17=y\n-# CT_GLIBC_V_2_12_1 is not set\n-# CT_GLIBC_NO_VERSIONS is not set\n-CT_GLIBC_VERSION=\"2.17\"\n-CT_GLIBC_MIRRORS=\"$(CT_Mirrors GNU glibc)\"\n-CT_GLIBC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GLIBC_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_GLIBC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GLIBC_2_29_or_older=y\n-CT_GLIBC_older_than_2_29=y\n-CT_GLIBC_2_27_or_older=y\n-CT_GLIBC_older_than_2_27=y\n-CT_GLIBC_2_26_or_older=y\n-CT_GLIBC_older_than_2_26=y\n-CT_GLIBC_2_25_or_older=y\n-CT_GLIBC_older_than_2_25=y\n-CT_GLIBC_2_24_or_older=y\n-CT_GLIBC_older_than_2_24=y\n-CT_GLIBC_2_23_or_older=y\n-CT_GLIBC_older_than_2_23=y\n-CT_GLIBC_2_20_or_older=y\n-CT_GLIBC_older_than_2_20=y\n-CT_GLIBC_2_17_or_later=y\n-CT_GLIBC_2_17_or_older=y\n-CT_GLIBC_later_than_2_14=y\n-CT_GLIBC_2_14_or_later=y\n-CT_GLIBC_DEP_KERNEL_HEADERS_VERSION=y\n-CT_GLIBC_DEP_BINUTILS=y\n-CT_GLIBC_DEP_GCC=y\n-CT_GLIBC_DEP_PYTHON=y\n-CT_GLIBC_HAS_NPTL_ADDON=y\n-CT_GLIBC_HAS_PORTS_ADDON=y\n-CT_GLIBC_HAS_LIBIDN_ADDON=y\n-CT_GLIBC_USE_PORTS_ADDON=y\n-CT_GLIBC_USE_NPTL_ADDON=y\n-# CT_GLIBC_USE_LIBIDN_ADDON is not set\n-CT_GLIBC_HAS_OBSOLETE_RPC=y\n-CT_GLIBC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_GLIBC_CONFIGPARMS=\"\"\n-CT_GLIBC_EXTRA_CFLAGS=\"\"\n-CT_GLIBC_ENABLE_OBSOLETE_RPC=y\n-# CT_GLIBC_DISABLE_VERSIONING is not set\n-CT_GLIBC_OLDEST_ABI=\"\"\n-CT_GLIBC_FORCE_UNWIND=y\n-# CT_GLIBC_LOCALES is not set\n-# CT_GLIBC_KERNEL_VERSION_NONE is not set\n-CT_GLIBC_KERNEL_VERSION_AS_HEADERS=y\n-# CT_GLIBC_KERNEL_VERSION_CHOSEN is not set\n-CT_GLIBC_MIN_KERNEL=\"3.2.101\"\n-CT_ALL_LIBC_CHOICES=\"AVR_LIBC BIONIC GLIBC MINGW_W64 MOXIEBOX MUSL NEWLIB NONE UCLIBC\"\n-CT_LIBC_SUPPORT_THREADS_ANY=y\n-CT_LIBC_SUPPORT_THREADS_NATIVE=y\n-\n-#\n-# Common C library options\n-#\n-CT_THREADS_NATIVE=y\n-# CT_CREATE_LDSO_CONF is not set\n-CT_LIBC_XLDD=y\n-\n-#\n-# C compiler\n-#\n-CT_CC_CORE_PASSES_NEEDED=y\n-CT_CC_CORE_PASS_1_NEEDED=y\n-CT_CC_CORE_PASS_2_NEEDED=y\n-CT_CC_SUPPORT_CXX=y\n-CT_CC_SUPPORT_FORTRAN=y\n-CT_CC_SUPPORT_ADA=y\n-CT_CC_SUPPORT_OBJC=y\n-CT_CC_SUPPORT_OBJCXX=y\n-CT_CC_SUPPORT_GOLANG=y\n-CT_CC_GCC=y\n-CT_CC=\"gcc\"\n-CT_CC_CHOICE_KSYM=\"GCC\"\n-CT_CC_GCC_SHOW=y\n-\n-#\n-# Options for gcc\n-#\n-CT_CC_GCC_PKG_KSYM=\"GCC\"\n-CT_GCC_DIR_NAME=\"gcc\"\n-CT_GCC_USE_GNU=y\n-CT_GCC_USE=\"GCC\"\n-CT_GCC_PKG_NAME=\"gcc\"\n-CT_GCC_SRC_RELEASE=y\n-CT_GCC_PATCH_ORDER=\"global\"\n-CT_GCC_V_8=y\n-# CT_GCC_V_7 is not set\n-# CT_GCC_V_6 is not set\n-# CT_GCC_V_5 is not set\n-# CT_GCC_V_4_9 is not set\n-# CT_GCC_NO_VERSIONS is not set\n-CT_GCC_VERSION=\"8.3.0\"\n-CT_GCC_MIRRORS=\"$(CT_Mirrors GNU gcc/gcc-${CT_GCC_VERSION}) $(CT_Mirrors sourceware gcc/releases/gcc-${CT_GCC_VERSION})\"\n-CT_GCC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GCC_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_GCC_SIGNATURE_FORMAT=\"\"\n-CT_GCC_later_than_7=y\n-CT_GCC_7_or_later=y\n-CT_GCC_later_than_6=y\n-CT_GCC_6_or_later=y\n-CT_GCC_later_than_5=y\n-CT_GCC_5_or_later=y\n-CT_GCC_later_than_4_9=y\n-CT_GCC_4_9_or_later=y\n-CT_GCC_later_than_4_8=y\n-CT_GCC_4_8_or_later=y\n-CT_CC_GCC_HAS_LIBMPX=y\n-CT_CC_GCC_ENABLE_CXX_FLAGS=\"\"\n-CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"\"\n-CT_CC_GCC_STATIC_LIBSTDCXX=y\n-# CT_CC_GCC_SYSTEM_ZLIB is not set\n-CT_CC_GCC_CONFIG_TLS=m\n-\n-#\n-# Optimisation features\n-#\n-CT_CC_GCC_USE_GRAPHITE=y\n-CT_CC_GCC_USE_LTO=y\n-\n-#\n-# Settings for libraries running on target\n-#\n-CT_CC_GCC_ENABLE_TARGET_OPTSPACE=y\n-# CT_CC_GCC_LIBMUDFLAP is not set\n-# CT_CC_GCC_LIBGOMP is not set\n-# CT_CC_GCC_LIBSSP is not set\n-# CT_CC_GCC_LIBQUADMATH is not set\n-# CT_CC_GCC_LIBSANITIZER is not set\n-\n-#\n-# Misc. obscure options.\n-#\n-CT_CC_CXA_ATEXIT=y\n-# CT_CC_GCC_DISABLE_PCH is not set\n-CT_CC_GCC_SJLJ_EXCEPTIONS=m\n-CT_CC_GCC_LDBL_128=m\n-# CT_CC_GCC_BUILD_ID is not set\n-CT_CC_GCC_LNK_HASH_STYLE_DEFAULT=y\n-# CT_CC_GCC_LNK_HASH_STYLE_SYSV is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_GNU is not set\n-# CT_CC_GCC_LNK_HASH_STYLE_BOTH is not set\n-CT_CC_GCC_LNK_HASH_STYLE=\"\"\n-CT_CC_GCC_DEC_FLOAT_AUTO=y\n-# CT_CC_GCC_DEC_FLOAT_BID is not set\n-# CT_CC_GCC_DEC_FLOAT_DPD is not set\n-# CT_CC_GCC_DEC_FLOATS_NO is not set\n-CT_ALL_CC_CHOICES=\"GCC\"\n-\n-#\n-# Additional supported languages:\n-#\n-CT_CC_LANG_CXX=y\n-# CT_CC_LANG_FORTRAN is not set\n-\n-#\n-# Debug facilities\n-#\n-# CT_DEBUG_DUMA is not set\n-# CT_DEBUG_GDB is not set\n-# CT_DEBUG_LTRACE is not set\n-# CT_DEBUG_STRACE is not set\n-CT_ALL_DEBUG_CHOICES=\"DUMA GDB LTRACE STRACE\"\n-\n-#\n-# Companion libraries\n-#\n-# CT_COMPLIBS_CHECK is not set\n-# CT_COMP_LIBS_CLOOG is not set\n-# CT_COMP_LIBS_EXPAT is not set\n-CT_COMP_LIBS_GETTEXT=y\n-CT_COMP_LIBS_GETTEXT_PKG_KSYM=\"GETTEXT\"\n-CT_GETTEXT_DIR_NAME=\"gettext\"\n-CT_GETTEXT_PKG_NAME=\"gettext\"\n-CT_GETTEXT_SRC_RELEASE=y\n-CT_GETTEXT_PATCH_ORDER=\"global\"\n-CT_GETTEXT_V_0_19_8_1=y\n-# CT_GETTEXT_NO_VERSIONS is not set\n-CT_GETTEXT_VERSION=\"0.19.8.1\"\n-CT_GETTEXT_MIRRORS=\"$(CT_Mirrors GNU gettext)\"\n-CT_GETTEXT_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GETTEXT_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.gz\"\n-CT_GETTEXT_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_GMP=y\n-CT_COMP_LIBS_GMP_PKG_KSYM=\"GMP\"\n-CT_GMP_DIR_NAME=\"gmp\"\n-CT_GMP_PKG_NAME=\"gmp\"\n-CT_GMP_SRC_RELEASE=y\n-CT_GMP_PATCH_ORDER=\"global\"\n-CT_GMP_V_6_1=y\n-# CT_GMP_NO_VERSIONS is not set\n-CT_GMP_VERSION=\"6.1.2\"\n-CT_GMP_MIRRORS=\"https://gmplib.org/download/gmp https://gmplib.org/download/gmp/archive $(CT_Mirrors GNU gmp)\"\n-CT_GMP_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_GMP_ARCHIVE_FORMATS=\".tar.xz .tar.lz .tar.bz2\"\n-CT_GMP_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_GMP_later_than_5_1_0=y\n-CT_GMP_5_1_0_or_later=y\n-CT_GMP_later_than_5_0_0=y\n-CT_GMP_5_0_0_or_later=y\n-CT_GMP_REQUIRE_5_0_0_or_later=y\n-CT_COMP_LIBS_ISL=y\n-CT_COMP_LIBS_ISL_PKG_KSYM=\"ISL\"\n-CT_ISL_DIR_NAME=\"isl\"\n-CT_ISL_PKG_NAME=\"isl\"\n-CT_ISL_SRC_RELEASE=y\n-CT_ISL_PATCH_ORDER=\"global\"\n-CT_ISL_V_0_20=y\n-# CT_ISL_V_0_19 is not set\n-# CT_ISL_V_0_18 is not set\n-# CT_ISL_V_0_17 is not set\n-# CT_ISL_V_0_16 is not set\n-# CT_ISL_V_0_15 is not set\n-# CT_ISL_NO_VERSIONS is not set\n-CT_ISL_VERSION=\"0.20\"\n-CT_ISL_MIRRORS=\"http://isl.gforge.inria.fr\"\n-CT_ISL_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ISL_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz\"\n-CT_ISL_SIGNATURE_FORMAT=\"\"\n-CT_ISL_later_than_0_18=y\n-CT_ISL_0_18_or_later=y\n-CT_ISL_later_than_0_15=y\n-CT_ISL_0_15_or_later=y\n-CT_ISL_REQUIRE_0_15_or_later=y\n-CT_ISL_later_than_0_14=y\n-CT_ISL_0_14_or_later=y\n-CT_ISL_REQUIRE_0_14_or_later=y\n-CT_ISL_later_than_0_13=y\n-CT_ISL_0_13_or_later=y\n-CT_ISL_later_than_0_12=y\n-CT_ISL_0_12_or_later=y\n-CT_ISL_REQUIRE_0_12_or_later=y\n-# CT_COMP_LIBS_LIBELF is not set\n-CT_COMP_LIBS_LIBICONV=y\n-CT_COMP_LIBS_LIBICONV_PKG_KSYM=\"LIBICONV\"\n-CT_LIBICONV_DIR_NAME=\"libiconv\"\n-CT_LIBICONV_PKG_NAME=\"libiconv\"\n-CT_LIBICONV_SRC_RELEASE=y\n-CT_LIBICONV_PATCH_ORDER=\"global\"\n-CT_LIBICONV_V_1_15=y\n-# CT_LIBICONV_NO_VERSIONS is not set\n-CT_LIBICONV_VERSION=\"1.15\"\n-CT_LIBICONV_MIRRORS=\"$(CT_Mirrors GNU libiconv)\"\n-CT_LIBICONV_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_LIBICONV_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_LIBICONV_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_COMP_LIBS_MPC=y\n-CT_COMP_LIBS_MPC_PKG_KSYM=\"MPC\"\n-CT_MPC_DIR_NAME=\"mpc\"\n-CT_MPC_PKG_NAME=\"mpc\"\n-CT_MPC_SRC_RELEASE=y\n-CT_MPC_PATCH_ORDER=\"global\"\n-CT_MPC_V_1_1=y\n-# CT_MPC_V_1_0 is not set\n-# CT_MPC_NO_VERSIONS is not set\n-CT_MPC_VERSION=\"1.1.0\"\n-CT_MPC_MIRRORS=\"http://www.multiprecision.org/downloads $(CT_Mirrors GNU mpc)\"\n-CT_MPC_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPC_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_MPC_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_MPC_1_1_0_or_later=y\n-CT_MPC_1_1_0_or_older=y\n-CT_COMP_LIBS_MPFR=y\n-CT_COMP_LIBS_MPFR_PKG_KSYM=\"MPFR\"\n-CT_MPFR_DIR_NAME=\"mpfr\"\n-CT_MPFR_PKG_NAME=\"mpfr\"\n-CT_MPFR_SRC_RELEASE=y\n-CT_MPFR_PATCH_ORDER=\"global\"\n-CT_MPFR_V_4_0=y\n-# CT_MPFR_V_3_1 is not set\n-# CT_MPFR_NO_VERSIONS is not set\n-CT_MPFR_VERSION=\"4.0.2\"\n-CT_MPFR_MIRRORS=\"http://www.mpfr.org/mpfr-${CT_MPFR_VERSION} $(CT_Mirrors GNU mpfr)\"\n-CT_MPFR_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_MPFR_ARCHIVE_FORMATS=\".tar.xz .tar.bz2 .tar.gz .zip\"\n-CT_MPFR_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_MPFR_later_than_4_0_0=y\n-CT_MPFR_4_0_0_or_later=y\n-CT_MPFR_later_than_3_0_0=y\n-CT_MPFR_3_0_0_or_later=y\n-CT_MPFR_REQUIRE_3_0_0_or_later=y\n-CT_COMP_LIBS_NCURSES=y\n-CT_COMP_LIBS_NCURSES_PKG_KSYM=\"NCURSES\"\n-CT_NCURSES_DIR_NAME=\"ncurses\"\n-CT_NCURSES_PKG_NAME=\"ncurses\"\n-CT_NCURSES_SRC_RELEASE=y\n-CT_NCURSES_PATCH_ORDER=\"global\"\n-CT_NCURSES_V_6_1=y\n-# CT_NCURSES_V_6_0 is not set\n-# CT_NCURSES_NO_VERSIONS is not set\n-CT_NCURSES_VERSION=\"6.1\"\n-CT_NCURSES_MIRRORS=\"ftp://invisible-island.net/ncurses $(CT_Mirrors GNU ncurses)\"\n-CT_NCURSES_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_NCURSES_ARCHIVE_FORMATS=\".tar.gz\"\n-CT_NCURSES_SIGNATURE_FORMAT=\"packed/.sig\"\n-CT_NCURSES_HOST_CONFIG_ARGS=\"\"\n-CT_NCURSES_HOST_DISABLE_DB=y\n-CT_NCURSES_HOST_FALLBACKS=\"linux,xterm,xterm-color,xterm-256color,vt100\"\n-CT_NCURSES_TARGET_CONFIG_ARGS=\"\"\n-# CT_NCURSES_TARGET_DISABLE_DB is not set\n-CT_NCURSES_TARGET_FALLBACKS=\"\"\n-CT_COMP_LIBS_ZLIB=y\n-CT_COMP_LIBS_ZLIB_PKG_KSYM=\"ZLIB\"\n-CT_ZLIB_DIR_NAME=\"zlib\"\n-CT_ZLIB_PKG_NAME=\"zlib\"\n-CT_ZLIB_SRC_RELEASE=y\n-CT_ZLIB_PATCH_ORDER=\"global\"\n-CT_ZLIB_V_1_2_11=y\n-# CT_ZLIB_NO_VERSIONS is not set\n-CT_ZLIB_VERSION=\"1.2.11\"\n-CT_ZLIB_MIRRORS=\"http://downloads.sourceforge.net/project/libpng/zlib/${CT_ZLIB_VERSION}\"\n-CT_ZLIB_ARCHIVE_FILENAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_DIRNAME=\"@{pkg_name}-@{version}\"\n-CT_ZLIB_ARCHIVE_FORMATS=\".tar.xz .tar.gz\"\n-CT_ZLIB_SIGNATURE_FORMAT=\"packed/.asc\"\n-CT_ALL_COMP_LIBS_CHOICES=\"CLOOG EXPAT GETTEXT GMP ISL LIBELF LIBICONV MPC MPFR NCURSES ZLIB\"\n-CT_LIBICONV_NEEDED=y\n-CT_GETTEXT_NEEDED=y\n-CT_GMP_NEEDED=y\n-CT_MPFR_NEEDED=y\n-CT_ISL_NEEDED=y\n-CT_MPC_NEEDED=y\n-CT_NCURSES_NEEDED=y\n-CT_ZLIB_NEEDED=y\n-CT_LIBICONV=y\n-CT_GETTEXT=y\n-CT_GMP=y\n-CT_MPFR=y\n-CT_ISL=y\n-CT_MPC=y\n-CT_NCURSES=y\n-CT_ZLIB=y\n-\n-#\n-# Companion tools\n-#\n-# CT_COMP_TOOLS_FOR_HOST is not set\n-# CT_COMP_TOOLS_AUTOCONF is not set\n-# CT_COMP_TOOLS_AUTOMAKE is not set\n-# CT_COMP_TOOLS_BISON is not set\n-# CT_COMP_TOOLS_DTC is not set\n-# CT_COMP_TOOLS_LIBTOOL is not set\n-# CT_COMP_TOOLS_M4 is not set\n-# CT_COMP_TOOLS_MAKE is not set\n-CT_ALL_COMP_TOOLS_CHOICES=\"AUTOCONF AUTOMAKE BISON DTC LIBTOOL M4 MAKE\""}, {"sha": "2b442cbe7946731aa04b4f5192086da2ec115350", "filename": "src/ci/docker/host-x86_64/dist-powerpc64-linux/powerpc64-linux-gnu.defconfig", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2Fpowerpc64-linux-gnu.defconfig", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2Fpowerpc64-linux-gnu.defconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2Fpowerpc64-linux-gnu.defconfig?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -0,0 +1,14 @@\n+CT_CONFIG_VERSION=\"4\"\n+CT_PREFIX_DIR=\"/x-tools/${CT_TARGET}\"\n+CT_USE_MIRROR=y\n+CT_MIRROR_BASE_URL=\"https://ci-mirrors.rust-lang.org/rustc\"\n+CT_ARCH_POWERPC=y\n+CT_ARCH_CPU=\"power4\"\n+CT_ARCH_TUNE=\"power6\"\n+CT_ARCH_64=y\n+CT_KERNEL_LINUX=y\n+CT_LINUX_V_3_2=y\n+CT_BINUTILS_V_2_32=y\n+CT_GLIBC_V_2_17=y\n+CT_GCC_V_8=y\n+CT_CC_LANG_CXX=y"}, {"sha": "dc86dddd464f2fb77319ae6f9b606ed6257a4bf8", "filename": "src/ci/docker/host-x86_64/dist-powerpc64-linux/shared.sh", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-powerpc64-linux%2Fshared.sh?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,16 +0,0 @@\n-#!/bin/sh\n-hide_output() {\n-  set +x\n-  on_err=\"\n-echo ERROR: An error was encountered with the build.\n-cat /tmp/build.log\n-exit 1\n-\"\n-  trap \"$on_err\" ERR\n-  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n-  PING_LOOP_PID=$!\n-  \"$@\" &> /tmp/build.log\n-  trap - ERR\n-  kill $PING_LOOP_PID\n-  set -x\n-}"}, {"sha": "426e601f5d34dda1e3087d3ee2b6cb1714a442e0", "filename": "src/ci/docker/host-x86_64/dist-riscv64-linux/Dockerfile", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2FDockerfile?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "patch": "@@ -1,20 +1,18 @@\n-FROM ubuntu:20.04\n+FROM ubuntu:22.04\n \n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n \n-COPY scripts/crosstool-ng-1.24.sh /scripts/\n-RUN sh /scripts/crosstool-ng-1.24.sh\n+COPY scripts/crosstool-ng.sh /scripts/\n+RUN sh /scripts/crosstool-ng.sh\n \n COPY scripts/rustbuild-setup.sh /scripts/\n RUN sh /scripts/rustbuild-setup.sh\n-USER rustbuild\n WORKDIR /tmp\n \n-COPY host-x86_64/dist-riscv64-linux/build-toolchains.sh host-x86_64/dist-riscv64-linux/riscv64-unknown-linux-gnu.config /tmp/\n-RUN ./build-toolchains.sh\n-\n-USER root\n+COPY scripts/crosstool-ng-build.sh /scripts/\n+COPY host-x86_64/dist-riscv64-linux/riscv64-unknown-linux-gnu.defconfig /tmp/crosstool.defconfig\n+RUN /scripts/crosstool-ng-build.sh\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "a7025b2b7545e6cd1b94323303af25a71dc0f9e5", "filename": "src/ci/docker/host-x86_64/dist-riscv64-linux/build-toolchains.sh", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Fbuild-toolchains.sh?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583", "patch": "@@ -1,27 +0,0 @@\n-#!/usr/bin/env bash\n-\n-set -ex\n-\n-hide_output() {\n-  set +x\n-  on_err=\"\n-echo ERROR: An error was encountered with the build.\n-cat /tmp/build.log\n-exit 1\n-\"\n-  trap \"$on_err\" ERR\n-  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n-  PING_LOOP_PID=$!\n-  \"$@\" &> /tmp/build.log\n-  rm /tmp/build.log\n-  trap - ERR\n-  kill $PING_LOOP_PID\n-  set -x\n-}\n-\n-mkdir build\n-cd build\n-cp ../riscv64-unknown-linux-gnu.config .config\n-hide_output ct-ng build\n-cd ..\n-rm -rf build"}, {"sha": "7400a8a038d0c42a34368cba06dbe99ec2c39fd3", "filename": "src/ci/docker/host-x86_64/dist-riscv64-linux/riscv64-unknown-linux-gnu.config", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Friscv64-unknown-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Friscv64-unknown-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Friscv64-unknown-linux-gnu.config?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583"}, {"sha": "10075907beb00e0db28f28cd5c01a283704f2e01", "filename": "src/ci/docker/host-x86_64/dist-riscv64-linux/riscv64-unknown-linux-gnu.defconfig", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Friscv64-unknown-linux-gnu.defconfig", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Friscv64-unknown-linux-gnu.defconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-riscv64-linux%2Friscv64-unknown-linux-gnu.defconfig?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "de776911d628db2a471f7a48dd21982110f4be2c", "filename": "src/ci/docker/host-x86_64/dist-s390x-linux/Dockerfile", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2FDockerfile?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "6f8d6be842b8ebc89d8cec64a14444182e88814b", "filename": "src/ci/docker/host-x86_64/dist-s390x-linux/build-s390x-toolchain.sh", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2Fbuild-s390x-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2Fbuild-s390x-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2Fbuild-s390x-toolchain.sh?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583"}, {"sha": "51ef36b03ac09494e3419f93d9cbfe34b248c2a8", "filename": "src/ci/docker/host-x86_64/dist-s390x-linux/s390x-linux-gnu.config", "status": "removed", "additions": 0, "deletions": 732, "changes": 732, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2Fs390x-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2Fs390x-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2Fs390x-linux-gnu.config?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583"}, {"sha": "1fe21966600bb3e451322949e69e48e0824ac3ac", "filename": "src/ci/docker/host-x86_64/dist-s390x-linux/s390x-linux-gnu.defconfig", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2Fs390x-linux-gnu.defconfig", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2Fs390x-linux-gnu.defconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2Fs390x-linux-gnu.defconfig?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "3a40f6cddb3694140797d58f8dddda397221205f", "filename": "src/ci/docker/scripts/crosstool-ng-1.24.sh", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng-1.24.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng-1.24.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng-1.24.sh?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583"}, {"sha": "c813d10eb9d2b2077a2801733c2d1b8c334b88a7", "filename": "src/ci/docker/scripts/crosstool-ng-build.sh", "status": "renamed", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng-build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng-build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng-build.sh?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234", "previous_filename": "src/ci/docker/host-x86_64/dist-armhf-linux/build-toolchains.sh"}, {"sha": "a28d7bde2accf33527c8d09c485ba1bc0884f1a6", "filename": "src/ci/docker/scripts/crosstool-ng.sh", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng.sh", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fcrosstool-ng.sh?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "5661adf677625ca4d04551e3d7998e6bdfcd5aa1", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "c7a0414b67602d191a25157ee8ffa43c85dc601b", "filename": "src/doc/unstable-book/src/language-features/debugger-visualizer.md", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdebugger-visualizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/9db11c97896e9a0de9fbd2d28c72bcf3b2e60583/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdebugger-visualizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdebugger-visualizer.md?ref=9db11c97896e9a0de9fbd2d28c72bcf3b2e60583"}, {"sha": "dfa4b091b0164ed30e2edf7707c3f4ebd2845c68", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "a6be132337eb64c9264f31728d3c255fbcbee965", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "88049c4ca00512227dcf256939996a367a604994", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "297120da284b91c2dfbdc4292b24c27dff931624", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "01a92f6df6a0c1624fa61ed8307eedb9462b924d", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "e09c6480060d054aa5dd4cbe696e660d58a4353f", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "a26fa3749129625aa9b5dca7d7b6c5ef67720cf5", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "263ce3d93b9fd1fca6a5d4cea13917bb5589512f", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "a885ff0ca5e580d060ebf6bda784194403f3ff41", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "8f873dbe501311d04bf74bb0943190d822988437", "filename": "src/librustdoc/passes/lint/check_code_block_syntax.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fpasses%2Flint%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fpasses%2Flint%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Flint%2Fcheck_code_block_syntax.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "d2fa7769bbd2f2a1b450b0d4edd57a0041612688", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "722e01cd1fc72869e10819df7d735204b96394d4", "filename": "src/librustdoc/theme.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Ftheme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Flibrustdoc%2Ftheme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "ac84010322a31f4a581dafe26258aa4ac8dea9cd", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "fa726a649370e7825b4a99be0a0cdfa086df4009", "filename": "src/tools/clippy/clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "d1314795f580344f096db7750b7a9d5b43f938bc", "filename": "src/tools/clippy/clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "9e65f9ecd1664b85770ff6719f5b22db30c6acf8", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "65fd50dff58465b3995189c1a51eea6e3aba507a", "filename": "src/tools/clippy/clippy_lints/src/methods/clone_on_copy.rs", "status": "modified", "additions": 2, "deletions": 38, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "e4a659d3ce73c1e650db16792f8b9404defded77", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "91f7ce1dbe58e438c7944854d7ac50ea61371586", "filename": "src/tools/clippy/clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "7eaa7db78a4706753f84ba60330710ab58117e1c", "filename": "src/tools/clippy/clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "5e81a01a461ab4c6508affd27e48128d4374885d", "filename": "src/tools/clippy/clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "49cb9718ef66e201414a13c6f59da771d17111cd", "filename": "src/tools/clippy/clippy_utils/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fattrs.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "03cd8e48b9a55479bcb636b53863eb5010d6f9e4", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "60482c66da7c437a7f213622c9a4f05aa73b45ad", "filename": "src/tools/clippy/tests/ui/explicit_deref_methods.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.fixed?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "e3613e216bb223ac7e935d803dd22e810c70b9f1", "filename": "src/tools/clippy/tests/ui/explicit_deref_methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "ff19a042825d8a60106661d557612f5d245e8ce1", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "38b1647c0cca03be2d083b2858109470b9fe8e60", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "70d15408b9fc14eade2bc5d36ced6c9cc23e8ed9", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 49, "deletions": 43, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "7ceed3c75fd85a5b50815a13c0f1ca23644c9048", "filename": "src/tools/clippy/tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "5686ab6b4531ee60ca0c671ec6d0af45a29a84e5", "filename": "src/tools/clippy/tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 3, "deletions": 49, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.stderr?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "a4be7af886b458c951588d1370c7a0d622ca6945", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "213413e578f01fad62293e6fa2ae7e685a257656", "filename": "src/tools/miri/rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fmiri%2Frust-version", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fmiri%2Frust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Frust-version?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}, {"sha": "a93f3eb84f2c143c4eae76e57295be6d2f318e4f", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd7eaa8b7622b327f9800e78a83443b29fab234/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=cfd7eaa8b7622b327f9800e78a83443b29fab234"}]}