{"sha": "c7711002bb3eed4ecbc8c8da63c97681fd1588e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NzExMDAyYmIzZWVkNGVjYmM4YzhkYTYzYzk3NjgxZmQxNTg4ZTY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-05-25T21:41:27Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-05-26T08:38:56Z"}, "message": "Make caching in stability work. This improves stability check performance\nby 90%.", "tree": {"sha": "112fe4db4748c3f8e0cdabc746f9b3b1d87bdb2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/112fe4db4748c3f8e0cdabc746f9b3b1d87bdb2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7711002bb3eed4ecbc8c8da63c97681fd1588e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7711002bb3eed4ecbc8c8da63c97681fd1588e6", "html_url": "https://github.com/rust-lang/rust/commit/c7711002bb3eed4ecbc8c8da63c97681fd1588e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "014bf0df341ef63a8f3ce39b6eecc1e11ca41c55", "url": "https://api.github.com/repos/rust-lang/rust/commits/014bf0df341ef63a8f3ce39b6eecc1e11ca41c55", "html_url": "https://github.com/rust-lang/rust/commit/014bf0df341ef63a8f3ce39b6eecc1e11ca41c55"}], "stats": {"total": 247, "additions": 150, "deletions": 97}, "files": [{"sha": "47aad257d156f73d8eec20d664aa67cb57c49a94", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=c7711002bb3eed4ecbc8c8da63c97681fd1588e6", "patch": "@@ -380,15 +380,20 @@ pub fn is_const_fn(cstore: &cstore::CStore, did: ast::DefId) -> bool {\n     decoder::is_const_fn(&*cdata, did.node)\n }\n \n+pub fn is_impl(cstore: &cstore::CStore, did: ast::DefId) -> bool {\n+    let cdata = cstore.get_crate_data(did.krate);\n+    decoder::is_impl(&*cdata, did.node)\n+}\n+\n pub fn get_stability(cstore: &cstore::CStore,\n                      def: ast::DefId)\n                      -> Option<attr::Stability> {\n     let cdata = cstore.get_crate_data(def.krate);\n     decoder::get_stability(&*cdata, def.node)\n }\n \n-pub fn is_staged_api(cstore: &cstore::CStore, def: ast::DefId) -> bool {\n-    let cdata = cstore.get_crate_data(def.krate);\n+pub fn is_staged_api(cstore: &cstore::CStore, krate: ast::CrateNum) -> bool {\n+    let cdata = cstore.get_crate_data(krate);\n     let attrs = decoder::get_crate_attributes(cdata.data());\n     for attr in &attrs {\n         if &attr.name()[..] == \"staged_api\" {"}, {"sha": "42dcc9661ca2d0ec97619d27ac6019c703de275b", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=c7711002bb3eed4ecbc8c8da63c97681fd1588e6", "patch": "@@ -1533,6 +1533,14 @@ pub fn is_const_fn(cdata: Cmd, id: ast::NodeId) -> bool {\n     }\n }\n \n+pub fn is_impl(cdata: Cmd, id: ast::NodeId) -> bool {\n+    let item_doc = lookup_item(id, cdata.data());\n+    match item_family(item_doc) {\n+        Impl => true,\n+        _ => false,\n+    }\n+}\n+\n fn doc_generics<'tcx>(base_doc: rbml::Doc,\n                       tcx: &ty::ctxt<'tcx>,\n                       cdata: Cmd,"}, {"sha": "e6591789a74a2984c7298c9d1a1933762a7e656b", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=c7711002bb3eed4ecbc8c8da63c97681fd1588e6", "patch": "@@ -999,7 +999,7 @@ fn encode_extension_implementations(ecx: &EncodeContext,\n     });\n }\n \n-fn encode_stability(rbml_w: &mut Encoder, stab_opt: Option<attr::Stability>) {\n+fn encode_stability(rbml_w: &mut Encoder, stab_opt: Option<&attr::Stability>) {\n     stab_opt.map(|stab| {\n         rbml_w.start_tag(tag_items_data_item_stability);\n         stab.encode(rbml_w).unwrap();"}, {"sha": "b29e40d2d5ec61cbbd3596ca82dbbdbf306f11fb", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 69, "deletions": 61, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=c7711002bb3eed4ecbc8c8da63c97681fd1588e6", "patch": "@@ -23,46 +23,47 @@ use syntax::{attr, visit};\n use syntax::ast;\n use syntax::ast::{Attribute, Block, Crate, DefId, FnDecl, NodeId, Variant};\n use syntax::ast::{Item, Generics, StructField};\n-use syntax::ast_util::is_local;\n+use syntax::ast_util::{is_local, local_def};\n use syntax::attr::{Stability, AttrMetaMethods};\n use syntax::visit::{FnKind, Visitor};\n use syntax::feature_gate::emit_feature_err;\n-use util::nodemap::{NodeMap, DefIdMap, FnvHashSet, FnvHashMap};\n+use util::nodemap::{DefIdMap, FnvHashSet, FnvHashMap};\n use util::ppaux::Repr;\n \n use std::mem::replace;\n \n /// A stability index, giving the stability level for items and methods.\n-pub struct Index {\n-    // Indicates whether this crate has #![feature(staged_api)]\n-    staged_api: bool,\n-    // stability for crate-local items; unmarked stability == no entry\n-    local: NodeMap<Stability>,\n-    // cache for extern-crate items; unmarked stability == entry with None\n-    extern_cache: DefIdMap<Option<Stability>>\n+pub struct Index<'tcx> {\n+    /// This is mostly a cache, except the stabilities of local items\n+    /// are filled by the annotator.\n+    map: DefIdMap<Option<&'tcx Stability>>,\n+\n+    /// Maps for each crate whether it is part of the staged API.\n+    staged_api: FnvHashMap<ast::CrateNum, bool>\n }\n \n // A private tree-walker for producing an Index.\n-struct Annotator<'a> {\n-    sess: &'a Session,\n-    index: &'a mut Index,\n-    parent: Option<Stability>,\n+struct Annotator<'a, 'tcx: 'a> {\n+    tcx: &'a ty::ctxt<'tcx>,\n+    index: &'a mut Index<'tcx>,\n+    parent: Option<&'tcx Stability>,\n     export_map: &'a PublicItems,\n }\n \n-impl<'a> Annotator<'a> {\n+impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n     // Determine the stability for a node based on its attributes and inherited\n     // stability. The stability is recorded in the index and used as the parent.\n     fn annotate<F>(&mut self, id: NodeId, use_parent: bool,\n                    attrs: &Vec<Attribute>, item_sp: Span, f: F, required: bool) where\n         F: FnOnce(&mut Annotator),\n     {\n-        if self.index.staged_api {\n+        if self.index.staged_api[&ast::LOCAL_CRATE] {\n             debug!(\"annotate(id = {:?}, attrs = {:?})\", id, attrs);\n-            match attr::find_stability(self.sess.diagnostic(), attrs, item_sp) {\n+            match attr::find_stability(self.tcx.sess.diagnostic(), attrs, item_sp) {\n                 Some(stab) => {\n                     debug!(\"annotate: found {:?}\", stab);\n-                    self.index.local.insert(id, stab.clone());\n+                    let stab = self.tcx.intern_stability(stab);\n+                    self.index.map.insert(local_def(id), Some(stab));\n \n                     // Don't inherit #[stable(feature = \"rust1\", since = \"1.0.0\")]\n                     if stab.level != attr::Stable {\n@@ -77,13 +78,14 @@ impl<'a> Annotator<'a> {\n                     debug!(\"annotate: not found, use_parent = {:?}, parent = {:?}\",\n                            use_parent, self.parent);\n                     if use_parent {\n-                        if let Some(stab) = self.parent.clone() {\n-                            self.index.local.insert(id, stab);\n-                        } else if self.index.staged_api && required\n+                        if let Some(stab) = self.parent {\n+                            self.index.map.insert(local_def(id), Some(stab));\n+                        } else if self.index.staged_api[&ast::LOCAL_CRATE] && required\n                             && self.export_map.contains(&id)\n-                            && !self.sess.opts.test {\n-                                self.sess.span_err(item_sp,\n-                                                   \"This node does not have a stability attribute\");\n+                            && !self.tcx.sess.opts.test {\n+                                self.tcx.sess.span_err(item_sp,\n+                                                       \"This node does not \\\n+                                                        have a stability attribute\");\n                             }\n                     }\n                     f(self);\n@@ -95,7 +97,7 @@ impl<'a> Annotator<'a> {\n                 let tag = attr.name();\n                 if tag == \"unstable\" || tag == \"stable\" || tag == \"deprecated\" {\n                     attr::mark_used(attr);\n-                    self.sess.span_err(attr.span(),\n+                    self.tcx.sess.span_err(attr.span(),\n                                        \"stability attributes may not be used outside \\\n                                         of the standard library\");\n                 }\n@@ -105,7 +107,7 @@ impl<'a> Annotator<'a> {\n     }\n }\n \n-impl<'a, 'v> Visitor<'v> for Annotator<'a> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> {\n     fn visit_item(&mut self, i: &Item) {\n         // FIXME (#18969): the following is a hack around the fact\n         // that we cannot currently annotate the stability of\n@@ -168,11 +170,11 @@ impl<'a, 'v> Visitor<'v> for Annotator<'a> {\n     }\n }\n \n-impl Index {\n+impl<'tcx> Index<'tcx> {\n     /// Construct the stability index for a crate being compiled.\n-    pub fn build(&mut self, sess: &Session, krate: &Crate, export_map: &PublicItems) {\n+    pub fn build(&mut self, tcx: &ty::ctxt<'tcx>, krate: &Crate, export_map: &PublicItems) {\n         let mut annotator = Annotator {\n-            sess: sess,\n+            tcx: tcx,\n             index: self,\n             parent: None,\n             export_map: export_map,\n@@ -182,22 +184,23 @@ impl Index {\n     }\n \n     pub fn new(krate: &Crate) -> Index {\n-        let mut staged_api = false;\n+        let mut is_staged_api = false;\n         for attr in &krate.attrs {\n             if &attr.name()[..] == \"staged_api\" {\n                 match attr.node.value.node {\n                     ast::MetaWord(_) => {\n                         attr::mark_used(attr);\n-                        staged_api = true;\n+                        is_staged_api = true;\n                     }\n                     _ => (/*pass*/)\n                 }\n             }\n         }\n+        let mut staged_api = FnvHashMap();\n+        staged_api.insert(ast::LOCAL_CRATE, is_staged_api);\n         Index {\n             staged_api: staged_api,\n-            local: NodeMap(),\n-            extern_cache: DefIdMap()\n+            map: DefIdMap(),\n         }\n     }\n }\n@@ -232,13 +235,13 @@ struct Checker<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> Checker<'a, 'tcx> {\n-    fn check(&mut self, id: ast::DefId, span: Span, stab: &Option<Stability>) {\n+    fn check(&mut self, id: ast::DefId, span: Span, stab: &Option<&Stability>) {\n         // Only the cross-crate scenario matters when checking unstable APIs\n         let cross_crate = !is_local(id);\n         if !cross_crate { return }\n \n         match *stab {\n-            Some(Stability { level: attr::Unstable, ref feature, ref reason, .. }) => {\n+            Some(&Stability { level: attr::Unstable, ref feature, ref reason, .. }) => {\n                 self.used_features.insert(feature.clone(), attr::Unstable);\n \n                 if !self.active_features.contains(feature) {\n@@ -252,7 +255,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                                       &feature, span, &msg);\n                 }\n             }\n-            Some(Stability { level, ref feature, .. }) => {\n+            Some(&Stability { level, ref feature, .. }) => {\n                 self.used_features.insert(feature.clone(), level);\n \n                 // Stable APIs are always ok to call and deprecated APIs are\n@@ -312,7 +315,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Checker<'a, 'tcx> {\n \n /// Helper for discovering nodes to check for stability\n pub fn check_item(tcx: &ty::ctxt, item: &ast::Item, warn_about_defns: bool,\n-                  cb: &mut FnMut(ast::DefId, Span, &Option<Stability>)) {\n+                  cb: &mut FnMut(ast::DefId, Span, &Option<&Stability>)) {\n     match item.node {\n         ast::ItemExternCrate(_) => {\n             // compiler-generated `extern crate` items have a dummy span.\n@@ -349,7 +352,7 @@ pub fn check_item(tcx: &ty::ctxt, item: &ast::Item, warn_about_defns: bool,\n \n /// Helper for discovering nodes to check for stability\n pub fn check_expr(tcx: &ty::ctxt, e: &ast::Expr,\n-                  cb: &mut FnMut(ast::DefId, Span, &Option<Stability>)) {\n+                  cb: &mut FnMut(ast::DefId, Span, &Option<&Stability>)) {\n     let span;\n     let id = match e.node {\n         ast::ExprMethodCall(i, _, _) => {\n@@ -458,7 +461,7 @@ pub fn check_expr(tcx: &ty::ctxt, e: &ast::Expr,\n }\n \n pub fn check_path(tcx: &ty::ctxt, path: &ast::Path, id: ast::NodeId,\n-                  cb: &mut FnMut(ast::DefId, Span, &Option<Stability>)) {\n+                  cb: &mut FnMut(ast::DefId, Span, &Option<&Stability>)) {\n     match tcx.def_map.borrow().get(&id).map(|d| d.full_def()) {\n         Some(def::DefPrimTy(..)) => {}\n         Some(def) => {\n@@ -470,7 +473,7 @@ pub fn check_path(tcx: &ty::ctxt, path: &ast::Path, id: ast::NodeId,\n }\n \n pub fn check_pat(tcx: &ty::ctxt, pat: &ast::Pat,\n-                 cb: &mut FnMut(ast::DefId, Span, &Option<Stability>)) {\n+                 cb: &mut FnMut(ast::DefId, Span, &Option<&Stability>)) {\n     debug!(\"check_pat(pat = {:?})\", pat);\n     if is_internal(tcx, pat.span) { return; }\n \n@@ -511,7 +514,7 @@ pub fn check_pat(tcx: &ty::ctxt, pat: &ast::Pat,\n }\n \n fn maybe_do_stability_check(tcx: &ty::ctxt, id: ast::DefId, span: Span,\n-                            cb: &mut FnMut(ast::DefId, Span, &Option<Stability>)) {\n+                            cb: &mut FnMut(ast::DefId, Span, &Option<&Stability>)) {\n     if !is_staged_api(tcx, id) { return  }\n     if is_internal(tcx, span) { return }\n     let ref stability = lookup(tcx, id);\n@@ -528,20 +531,27 @@ fn is_staged_api(tcx: &ty::ctxt, id: DefId) -> bool {\n             if trait_method_id != id => {\n                 is_staged_api(tcx, trait_method_id)\n             }\n-        _ if is_local(id) => {\n-            tcx.stability.borrow().staged_api\n-        }\n         _ => {\n-            csearch::is_staged_api(&tcx.sess.cstore, id)\n+            *tcx.stability.borrow_mut().staged_api.entry(id.krate).or_insert_with(\n+                || csearch::is_staged_api(&tcx.sess.cstore, id.krate))\n         }\n     }\n }\n \n /// Lookup the stability for a node, loading external crate\n /// metadata as necessary.\n-pub fn lookup(tcx: &ty::ctxt, id: DefId) -> Option<Stability> {\n-    debug!(\"lookup(id={})\",\n-           id.repr(tcx));\n+pub fn lookup<'tcx>(tcx: &ty::ctxt<'tcx>, id: DefId) -> Option<&'tcx Stability> {\n+    if let Some(st) = tcx.stability.borrow().map.get(&id) {\n+        return *st;\n+    }\n+\n+    let st = lookup_uncached(tcx, id);\n+    tcx.stability.borrow_mut().map.insert(id, st);\n+    st\n+}\n+\n+fn lookup_uncached<'tcx>(tcx: &ty::ctxt<'tcx>, id: DefId) -> Option<&'tcx Stability> {\n+    debug!(\"lookup(id={})\", id.repr(tcx));\n \n     // is this definition the implementation of a trait method?\n     match ty::trait_item_of_item(tcx, id) {\n@@ -553,25 +563,23 @@ pub fn lookup(tcx: &ty::ctxt, id: DefId) -> Option<Stability> {\n     }\n \n     let item_stab = if is_local(id) {\n-        tcx.stability.borrow().local.get(&id.node).cloned()\n+        None // The stability cache is filled partially lazily\n     } else {\n-        let stab = csearch::get_stability(&tcx.sess.cstore, id);\n-        let mut index = tcx.stability.borrow_mut();\n-        (*index).extern_cache.insert(id, stab.clone());\n-        stab\n+        csearch::get_stability(&tcx.sess.cstore, id).map(|st| tcx.intern_stability(st))\n     };\n \n     item_stab.or_else(|| {\n-        if let Some(trait_id) = ty::trait_id_of_impl(tcx, id) {\n-            // FIXME (#18969): for the time being, simply use the\n-            // stability of the trait to determine the stability of any\n-            // unmarked impls for it. See FIXME above for more details.\n-\n-            debug!(\"lookup: trait_id={:?}\", trait_id);\n-            lookup(tcx, trait_id)\n-        } else {\n-            None\n+        if ty::is_impl(tcx, id) {\n+            if let Some(trait_id) = ty::trait_id_of_impl(tcx, id) {\n+                // FIXME (#18969): for the time being, simply use the\n+                // stability of the trait to determine the stability of any\n+                // unmarked impls for it. See FIXME above for more details.\n+\n+                debug!(\"lookup: trait_id={:?}\", trait_id);\n+                return lookup(tcx, trait_id);\n+            }\n         }\n+        None\n     })\n }\n "}, {"sha": "64a82fec05cae1cd4cabff7baa0ef6b5b3a97a3c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c7711002bb3eed4ecbc8c8da63c97681fd1588e6", "patch": "@@ -554,9 +554,11 @@ pub struct CtxtArenas<'tcx> {\n     substs: TypedArena<Substs<'tcx>>,\n     bare_fn: TypedArena<BareFnTy<'tcx>>,\n     region: TypedArena<Region>,\n+    stability: TypedArena<attr::Stability>,\n \n     // references\n     trait_defs: TypedArena<TraitDef<'tcx>>\n+\n }\n \n impl<'tcx> CtxtArenas<'tcx> {\n@@ -566,6 +568,7 @@ impl<'tcx> CtxtArenas<'tcx> {\n             substs: TypedArena::new(),\n             bare_fn: TypedArena::new(),\n             region: TypedArena::new(),\n+            stability: TypedArena::new(),\n \n             trait_defs: TypedArena::new()\n         }\n@@ -607,6 +610,8 @@ pub struct ctxt<'tcx> {\n     substs_interner: RefCell<FnvHashMap<&'tcx Substs<'tcx>, &'tcx Substs<'tcx>>>,\n     bare_fn_interner: RefCell<FnvHashMap<&'tcx BareFnTy<'tcx>, &'tcx BareFnTy<'tcx>>>,\n     region_interner: RefCell<FnvHashMap<&'tcx Region, &'tcx Region>>,\n+    stability_interner: RefCell<FnvHashMap<&'tcx attr::Stability, &'tcx attr::Stability>>,\n+\n \n     /// Common types, pre-interned for your convenience.\n     pub types: CommonTypes<'tcx>,\n@@ -754,7 +759,7 @@ pub struct ctxt<'tcx> {\n     pub transmute_restrictions: RefCell<Vec<TransmuteRestriction<'tcx>>>,\n \n     /// Maps any item's def-id to its stability index.\n-    pub stability: RefCell<stability::Index>,\n+    pub stability: RefCell<stability::Index<'tcx>>,\n \n     /// Caches the results of trait selection. This cache is used\n     /// for things that do not have to do with the parameters in scope.\n@@ -797,6 +802,16 @@ impl<'tcx> ctxt<'tcx> {\n         interned\n     }\n \n+    pub fn intern_stability(&self, stab: attr::Stability) -> &'tcx attr::Stability {\n+        if let Some(st) = self.stability_interner.borrow().get(&stab) {\n+            return st;\n+        }\n+\n+        let interned = self.arenas.stability.alloc(stab);\n+        self.stability_interner.borrow_mut().insert(interned, interned);\n+        interned\n+    }\n+\n     pub fn store_free_region_map(&self, id: NodeId, map: FreeRegionMap) {\n         self.free_region_maps.borrow_mut()\n                              .insert(id, map);\n@@ -898,6 +913,7 @@ impl<'tcx> ctxt<'tcx> {\n         println!(\"Substs interner: #{}\", self.substs_interner.borrow().len());\n         println!(\"BareFnTy interner: #{}\", self.bare_fn_interner.borrow().len());\n         println!(\"Region interner: #{}\", self.region_interner.borrow().len());\n+        println!(\"Stability interner: #{}\", self.stability_interner.borrow().len());\n     }\n }\n \n@@ -2703,7 +2719,7 @@ pub fn mk_ctxt<'tcx>(s: Session,\n                      freevars: RefCell<FreevarMap>,\n                      region_maps: RegionMaps,\n                      lang_items: middle::lang_items::LanguageItems,\n-                     stability: stability::Index) -> ctxt<'tcx>\n+                     stability: stability::Index<'tcx>) -> ctxt<'tcx>\n {\n     let mut interner = FnvHashMap();\n     let common_types = CommonTypes::new(&arenas.type_, &mut interner);\n@@ -2714,6 +2730,7 @@ pub fn mk_ctxt<'tcx>(s: Session,\n         substs_interner: RefCell::new(FnvHashMap()),\n         bare_fn_interner: RefCell::new(FnvHashMap()),\n         region_interner: RefCell::new(FnvHashMap()),\n+        stability_interner: RefCell::new(FnvHashMap()),\n         types: common_types,\n         named_region_map: named_region_map,\n         region_maps: region_maps,\n@@ -5355,34 +5372,33 @@ pub fn associated_type_parameter_index(cx: &ctxt,\n \n pub fn trait_item_def_ids(cx: &ctxt, id: ast::DefId)\n                           -> Rc<Vec<ImplOrTraitItemId>> {\n-    lookup_locally_or_in_crate_store(\"trait_item_def_ids\",\n-                                     id,\n-                                     &mut *cx.trait_item_def_ids.borrow_mut(),\n-                                     || {\n-        Rc::new(csearch::get_trait_item_def_ids(&cx.sess.cstore, id))\n-    })\n+    lookup_locally_or_in_crate_store(\n+        \"trait_item_def_ids\", id, &cx.trait_item_def_ids,\n+        || Rc::new(csearch::get_trait_item_def_ids(&cx.sess.cstore, id)))\n }\n \n+/// Returns the trait-ref corresponding to a given impl, or None if it is\n+/// an inherent impl.\n pub fn impl_trait_ref<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)\n-                            -> Option<TraitRef<'tcx>> {\n-    memoized(&cx.impl_trait_cache, id, |id: ast::DefId| {\n-        if id.krate == ast::LOCAL_CRATE {\n-            debug!(\"(impl_trait_ref) searching for trait impl {:?}\", id);\n-            if let Some(ast_map::NodeItem(item)) = cx.map.find(id.node) {\n-                match item.node {\n-                    ast::ItemImpl(_, _, _, Some(_), _, _) |\n-                    ast::ItemDefaultImpl(..) => {\n-                        Some(ty::impl_id_to_trait_ref(cx, id.node))\n-                    }\n-                    _ => None\n-                }\n-            } else {\n-                None\n-            }\n+                            -> Option<TraitRef<'tcx>>\n+{\n+    lookup_locally_or_in_crate_store(\n+        \"impl_trait_refs\", id, &cx.impl_trait_refs,\n+        || csearch::get_impl_trait(cx, id))\n+}\n+\n+/// Returns whether this DefId refers to an impl\n+pub fn is_impl<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId) -> bool {\n+    if id.krate == ast::LOCAL_CRATE {\n+        if let Some(ast_map::NodeItem(\n+            &ast::Item { node: ast::ItemImpl(..), .. })) = cx.map.find(id.node) {\n+            true\n         } else {\n-            csearch::get_impl_trait(cx, id)\n+            false\n         }\n-    })\n+    } else {\n+        csearch::is_impl(&cx.sess.cstore, id)\n+    }\n }\n \n pub fn trait_ref_to_def_id(tcx: &ctxt, tr: &ast::TraitRef) -> ast::DefId {"}, {"sha": "13dec30e0a0162e22797365670fdfc45214ae739", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=c7711002bb3eed4ecbc8c8da63c97681fd1588e6", "patch": "@@ -653,7 +653,7 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n \n     // Do not move this check past lint\n     time(time_passes, \"stability index\", (), |_|\n-         ty_cx.stability.borrow_mut().build(&ty_cx.sess, krate, &public_items));\n+         ty_cx.stability.borrow_mut().build(&ty_cx, krate, &public_items));\n \n     time(time_passes, \"intrinsic checking\", (), |_|\n          middle::intrinsicck::check_crate(&ty_cx));"}, {"sha": "247ed5bc0130b5d6e8bfd620b7a675547e7b9869", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=c7711002bb3eed4ecbc8c8da63c97681fd1588e6", "patch": "@@ -1796,20 +1796,20 @@ declare_lint! {\n pub struct Stability;\n \n impl Stability {\n-    fn lint(&self, cx: &Context, _id: ast::DefId, span: Span, stability: &Option<attr::Stability>) {\n+    fn lint(&self, cx: &Context, _id: ast::DefId, span: Span, stability: &Option<&attr::Stability>) {\n         // Deprecated attributes apply in-crate and cross-crate.\n         let (lint, label) = match *stability {\n-            Some(attr::Stability { deprecated_since: Some(_), .. }) =>\n+            Some(&attr::Stability { deprecated_since: Some(_), .. }) =>\n                 (DEPRECATED, \"deprecated\"),\n             _ => return\n         };\n \n         output(cx, span, stability, lint, label);\n \n-        fn output(cx: &Context, span: Span, stability: &Option<attr::Stability>,\n+        fn output(cx: &Context, span: Span, stability: &Option<&attr::Stability>,\n                   lint: &'static Lint, label: &'static str) {\n             let msg = match *stability {\n-                Some(attr::Stability { reason: Some(ref s), .. }) => {\n+                Some(&attr::Stability { reason: Some(ref s), .. }) => {\n                     format!(\"use of {} item: {}\", label, *s)\n                 }\n                 _ => format!(\"use of {} item\", label)"}, {"sha": "95444bb915872d6ccd0cabe7116c22187d093317", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c7711002bb3eed4ecbc8c8da63c97681fd1588e6", "patch": "@@ -2695,6 +2695,21 @@ impl Clean<Stability> for attr::Stability {\n     }\n }\n \n+impl<'a> Clean<Stability> for &'a attr::Stability {\n+    fn clean(&self, _: &DocContext) -> Stability {\n+        Stability {\n+            level: self.level,\n+            feature: self.feature.to_string(),\n+            since: self.since.as_ref().map_or(\"\".to_string(),\n+                                              |interned| interned.to_string()),\n+            deprecated_since: self.deprecated_since.as_ref().map_or(\"\".to_string(),\n+                                                                    |istr| istr.to_string()),\n+            reason: self.reason.as_ref().map_or(\"\".to_string(),\n+                                                |interned| interned.to_string()),\n+        }\n+    }\n+}\n+\n impl<'tcx> Clean<Item> for ty::AssociatedConst<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Item {\n         Item {"}, {"sha": "e0a462dd43795c96f6108256492de754d95b25bd", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=c7711002bb3eed4ecbc8c8da63c97681fd1588e6", "patch": "@@ -61,7 +61,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     }\n \n     fn stability(&self, id: ast::NodeId) -> Option<attr::Stability> {\n-        self.cx.tcx_opt().and_then(|tcx| stability::lookup(tcx, ast_util::local_def(id)))\n+        self.cx.tcx_opt().and_then(\n+            |tcx| stability::lookup(tcx, ast_util::local_def(id)).map(|x| x.clone()))\n     }\n \n     pub fn visit(&mut self, krate: &ast::Crate) {"}, {"sha": "3c4c4d70343c38484b0e406f6bc55c571dad2101", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7711002bb3eed4ecbc8c8da63c97681fd1588e6/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=c7711002bb3eed4ecbc8c8da63c97681fd1588e6", "patch": "@@ -366,7 +366,7 @@ pub fn cfg_matches(diagnostic: &SpanHandler, cfgs: &[P<MetaItem>], cfg: &ast::Me\n }\n \n /// Represents the #[deprecated] and friends attributes.\n-#[derive(RustcEncodable,RustcDecodable,Clone,Debug)]\n+#[derive(RustcEncodable, RustcDecodable, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct Stability {\n     pub level: StabilityLevel,\n     pub feature: InternedString,\n@@ -378,7 +378,7 @@ pub struct Stability {\n }\n \n /// The available stability levels.\n-#[derive(RustcEncodable,RustcDecodable,PartialEq,PartialOrd,Clone,Debug,Copy)]\n+#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Clone, Debug, Copy, Eq, Hash)]\n pub enum StabilityLevel {\n     Unstable,\n     Stable,"}]}