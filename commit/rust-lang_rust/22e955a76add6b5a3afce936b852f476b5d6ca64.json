{"sha": "22e955a76add6b5a3afce936b852f476b5d6ca64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZTk1NWE3NmFkZDZiNWEzYWZjZTkzNmI4NTJmNDc2YjVkNmNhNjQ=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-10T18:58:43Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-11T05:00:48Z"}, "message": "Move streams into core.", "tree": {"sha": "e8c3984ab7482efc61e5f34bb6221e14a35c6fae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8c3984ab7482efc61e5f34bb6221e14a35c6fae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22e955a76add6b5a3afce936b852f476b5d6ca64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22e955a76add6b5a3afce936b852f476b5d6ca64", "html_url": "https://github.com/rust-lang/rust/commit/22e955a76add6b5a3afce936b852f476b5d6ca64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22e955a76add6b5a3afce936b852f476b5d6ca64/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "594d9a055497313a098469a597ac348e47911555", "url": "https://api.github.com/repos/rust-lang/rust/commits/594d9a055497313a098469a597ac348e47911555", "html_url": "https://github.com/rust-lang/rust/commit/594d9a055497313a098469a597ac348e47911555"}], "stats": {"total": 114, "additions": 71, "deletions": 43}, "files": [{"sha": "794f2d3890b48940b303f60ae2687b21239be937", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/22e955a76add6b5a3afce936b852f476b5d6ca64/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e955a76add6b5a3afce936b852f476b5d6ca64/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=22e955a76add6b5a3afce936b852f476b5d6ca64", "patch": "@@ -2,6 +2,7 @@\n \n import unsafe::{forget, reinterpret_cast, transmute};\n import either::{either, left, right};\n+import option::unwrap;\n \n enum state {\n     empty,\n@@ -428,3 +429,69 @@ fn spawn_service_recv<T: send>(\n \n     client\n }\n+\n+// Streams - Make pipes a little easier in general.\n+\n+proto! streamp {\n+    open:send<T: send> {\n+        data(T) -> open<T>\n+    }\n+}\n+\n+type chan<T:send> = { mut endp: option<streamp::client::open<T>> };\n+type port<T:send> = { mut endp: option<streamp::server::open<T>> };\n+\n+fn stream<T:send>() -> (chan<T>, port<T>) {\n+    let (c, s) = streamp::init();\n+\n+    #macro[\n+        [#move[x],\n+         unsafe { let y <- *ptr::addr_of(x); y }]\n+    ];\n+\n+    ({ mut endp: some(c) }, { mut endp: some(s) })\n+}\n+\n+impl chan<T: send> for chan<T> {\n+    fn send(+x: T) {\n+        let mut endp = none;\n+        endp <-> self.endp;\n+        self.endp = some(\n+            streamp::client::data(unwrap(endp), x))\n+    }\n+}\n+\n+impl port<T: send> for port<T> {\n+    fn recv() -> T {\n+        let mut endp = none;\n+        endp <-> self.endp;\n+        let streamp::data(x, endp) = pipes::recv(unwrap(endp));\n+        self.endp = some(endp);\n+        x\n+    }\n+\n+    fn try_recv() -> option<T> {\n+        let mut endp = none;\n+        endp <-> self.endp;\n+        alt pipes::try_recv(unwrap(endp)) {\n+          some(streamp::data(x, endp)) {\n+            self.endp = some(#move(endp));\n+            some(#move(x))\n+          }\n+          none { none }\n+        }\n+    }\n+\n+    pure fn peek() -> bool unchecked {\n+        let mut endp = none;\n+        endp <-> self.endp;\n+        let peek = alt endp {\n+          some(endp) {\n+            pipes::peek(endp)\n+          }\n+          none { fail \"peeking empty stream\" }\n+        };\n+        self.endp <-> endp;\n+        peek\n+    }\n+}"}, {"sha": "3704bb3d7806645ece1472d269d78b92e28fe08e", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 4, "deletions": 43, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/22e955a76add6b5a3afce936b852f476b5d6ca64/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e955a76add6b5a3afce936b852f476b5d6ca64/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=22e955a76add6b5a3afce936b852f476b5d6ca64", "patch": "@@ -9,46 +9,7 @@ import std::map;\n import std::map::hashmap;\n import std::sort;\n \n-import stream::{stream, chan, port};\n-\n-// After a snapshot, this should move into core, or std.\n-mod stream {\n-    import option::unwrap;\n-\n-    proto! streamp {\n-        open:send<T: send> {\n-            data(T) -> open<T>\n-        }\n-    }\n-\n-    type chan<T:send> = { mut endp: option<streamp::client::open<T>> };\n-    type port<T:send> = { mut endp: option<streamp::server::open<T>> };\n-\n-    fn stream<T:send>() -> (chan<T>, port<T>) {\n-        let (c, s) = streamp::init();\n-        ({ mut endp: some(c) }, { mut endp: some(s) })\n-    }\n-\n-    impl chan<T: send> for chan<T> {\n-        fn send(+x: T) {\n-            let mut endp = none;\n-            endp <-> self.endp;\n-            self.endp = some(\n-                streamp::client::data(unwrap(endp), x))\n-        }\n-    }\n-\n-    impl port<T: send> for port<T> {\n-        fn recv() -> T {\n-            let mut endp = none;\n-            endp <-> self.endp;\n-            let streamp::data(x, endp) = unwrap(\n-                pipes::try_recv(unwrap(endp)));\n-            self.endp = some(endp);\n-            x\n-        }\n-    }\n-}\n+import pipes::{stream, port, chan};\n \n // given a map, print a sorted version of it\n fn sort_and_fmt(mm: hashmap<~[u8], uint>, total: uint) -> str { \n@@ -127,8 +88,8 @@ fn windows_with_carry(bb: ~[const u8], nn: uint,\n    ret vec::slice(bb, len - (nn - 1u), len); \n }\n \n-fn make_sequence_processor(sz: uint, from_parent: stream::port<~[u8]>,\n-                           to_parent: stream::chan<str>) {\n+fn make_sequence_processor(sz: uint, from_parent: pipes::port<~[u8]>,\n+                           to_parent: pipes::chan<str>) {\n    \n    let freqs: hashmap<~[u8], uint> = map::bytes_hash();\n    let mut carry: ~[u8] = ~[];\n@@ -190,7 +151,7 @@ fn main(args: ~[str]) {\n \n         vec::push(from_child, from_child_);\n \n-        let (to_child, from_parent) = stream::stream();\n+        let (to_child, from_parent) = pipes::stream();\n \n         do task::spawn_with(from_parent) |from_parent| {\n             make_sequence_processor(sz, from_parent, to_parent_);"}]}