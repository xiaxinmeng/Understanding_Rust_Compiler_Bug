{"sha": "9c241aa7144b17aa423dde02cc6cd5f2964a73c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMjQxYWE3MTQ0YjE3YWE0MjNkZGUwMmNjNmNkNWYyOTY0YTczYzY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-19T20:27:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-19T20:27:48Z"}, "message": "expand Unpin example", "tree": {"sha": "eb8112af6b8364094dc2f50c8cee9fbfc52485bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb8112af6b8364094dc2f50c8cee9fbfc52485bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c241aa7144b17aa423dde02cc6cd5f2964a73c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c241aa7144b17aa423dde02cc6cd5f2964a73c6", "html_url": "https://github.com/rust-lang/rust/commit/9c241aa7144b17aa423dde02cc6cd5f2964a73c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c241aa7144b17aa423dde02cc6cd5f2964a73c6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5df8a49d73c273aa9feb5f508e16f939af5ab34", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5df8a49d73c273aa9feb5f508e16f939af5ab34", "html_url": "https://github.com/rust-lang/rust/commit/d5df8a49d73c273aa9feb5f508e16f939af5ab34"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "38c9fe79f844b2166a38a658e0620668c7931212", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c241aa7144b17aa423dde02cc6cd5f2964a73c6/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c241aa7144b17aa423dde02cc6cd5f2964a73c6/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=9c241aa7144b17aa423dde02cc6cd5f2964a73c6", "patch": "@@ -618,14 +618,16 @@ unsafe impl<T: ?Sized> Freeze for &mut T {}\n /// So this, for example, can only be done on types implementing `Unpin`:\n ///\n /// ```rust\n-/// use std::mem::replace;\n+/// use std::mem;\n /// use std::pin::Pin;\n ///\n /// let mut string = \"this\".to_string();\n /// let mut pinned_string = Pin::new(&mut string);\n ///\n-/// // dereferencing the pointer mutably is only possible because String implements Unpin\n-/// replace(&mut *pinned_string, \"other\".to_string());\n+/// // We need a mutable reference to call `mem::replace`.\n+/// // We can obtain such a reference by (implicitly) invoking `Pin::deref_mut`,\n+/// // but that is only possible because `String` implements `Unpin`.\n+/// mem::replace(&mut *pinned_string, \"other\".to_string());\n /// ```\n ///\n /// This trait is automatically implemented for almost every type."}]}