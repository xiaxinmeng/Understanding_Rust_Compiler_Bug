{"sha": "ac43d58d3aca4b578864ec6dbb24d68a9f9c201c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNDNkNThkM2FjYTRiNTc4ODY0ZWM2ZGJiMjRkNjhhOWY5YzIwMWM=", "commit": {"author": {"name": "Florian Zeitz", "email": "florob@babelmonkeys.de", "date": "2017-07-26T14:27:25Z"}, "committer": {"name": "Florian Zeitz", "email": "florob@babelmonkeys.de", "date": "2017-07-26T14:27:25Z"}, "message": "trans: Optimize initialization using repeat expressions\n\nThis elides initialization for zero-sized arrays:\n* for zero-sized elements we previously emitted an empty loop\n* for arrays with a length of zero we previously emitted a loop with zero\n  iterations\n\nThis emits llvm.memset() instead of a loop over each element when:\n* all elements are zero integers\n* elements are byte sized", "tree": {"sha": "bf2c1da06c63a8ccdc6a0d6bee3ed7ca144f6bf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf2c1da06c63a8ccdc6a0d6bee3ed7ca144f6bf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac43d58d3aca4b578864ec6dbb24d68a9f9c201c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac43d58d3aca4b578864ec6dbb24d68a9f9c201c", "html_url": "https://github.com/rust-lang/rust/commit/ac43d58d3aca4b578864ec6dbb24d68a9f9c201c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac43d58d3aca4b578864ec6dbb24d68a9f9c201c/comments", "author": {"login": "Florob", "id": 133684, "node_id": "MDQ6VXNlcjEzMzY4NA==", "avatar_url": "https://avatars.githubusercontent.com/u/133684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Florob", "html_url": "https://github.com/Florob", "followers_url": "https://api.github.com/users/Florob/followers", "following_url": "https://api.github.com/users/Florob/following{/other_user}", "gists_url": "https://api.github.com/users/Florob/gists{/gist_id}", "starred_url": "https://api.github.com/users/Florob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Florob/subscriptions", "organizations_url": "https://api.github.com/users/Florob/orgs", "repos_url": "https://api.github.com/users/Florob/repos", "events_url": "https://api.github.com/users/Florob/events{/privacy}", "received_events_url": "https://api.github.com/users/Florob/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Florob", "id": 133684, "node_id": "MDQ6VXNlcjEzMzY4NA==", "avatar_url": "https://avatars.githubusercontent.com/u/133684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Florob", "html_url": "https://github.com/Florob", "followers_url": "https://api.github.com/users/Florob/followers", "following_url": "https://api.github.com/users/Florob/following{/other_user}", "gists_url": "https://api.github.com/users/Florob/gists{/gist_id}", "starred_url": "https://api.github.com/users/Florob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Florob/subscriptions", "organizations_url": "https://api.github.com/users/Florob/orgs", "repos_url": "https://api.github.com/users/Florob/repos", "events_url": "https://api.github.com/users/Florob/events{/privacy}", "received_events_url": "https://api.github.com/users/Florob/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d721c1f9e3caf1f4a0e0afb0151ec127d4fd2771", "url": "https://api.github.com/repos/rust-lang/rust/commits/d721c1f9e3caf1f4a0e0afb0151ec127d4fd2771", "html_url": "https://github.com/rust-lang/rust/commit/d721c1f9e3caf1f4a0e0afb0151ec127d4fd2771"}], "stats": {"total": 117, "additions": 113, "deletions": 4}, "files": [{"sha": "c5f69bd638f3c75af86886d13180a391a0fa0f23", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac43d58d3aca4b578864ec6dbb24d68a9f9c201c/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac43d58d3aca4b578864ec6dbb24d68a9f9c201c/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=ac43d58d3aca4b578864ec6dbb24d68a9f9c201c", "patch": "@@ -372,7 +372,7 @@ pub fn const_to_uint(v: ValueRef) -> u64 {\n     }\n }\n \n-fn is_const_integral(v: ValueRef) -> bool {\n+pub fn is_const_integral(v: ValueRef) -> bool {\n     unsafe {\n         !llvm::LLVMIsAConstantInt(v).is_null()\n     }"}, {"sha": "2cae2150885a604677474156edba1d81370821da", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ac43d58d3aca4b578864ec6dbb24d68a9f9c201c/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac43d58d3aca4b578864ec6dbb24d68a9f9c201c/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=ac43d58d3aca4b578864ec6dbb24d68a9f9c201c", "patch": "@@ -11,7 +11,7 @@\n use llvm::{self, ValueRef};\n use rustc::ty::{self, Ty};\n use rustc::ty::cast::{CastTy, IntTy};\n-use rustc::ty::layout::{Layout, LayoutTyper};\n+use rustc::ty::layout::{self, Layout, LayoutTyper, Primitive};\n use rustc::mir::tcx::LvalueTy;\n use rustc::mir;\n use rustc::middle::lang_items::ExchangeMallocFnLangItem;\n@@ -20,7 +20,7 @@ use base;\n use builder::Builder;\n use callee;\n use common::{self, val_ty, C_bool, C_null, C_uint};\n-use common::{C_integral};\n+use common::{C_integral, C_i32};\n use adt;\n use machine;\n use monomorphize;\n@@ -93,12 +93,47 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             }\n \n             mir::Rvalue::Repeat(ref elem, ref count) => {\n+                let dest_ty = dest.ty.to_ty(bcx.tcx());\n+\n+                // No need to inizialize memory of a zero-sized slice\n+                if common::type_is_zero_size(bcx.ccx, dest_ty) {\n+                    return bcx;\n+                }\n+\n                 let tr_elem = self.trans_operand(&bcx, elem);\n                 let size = count.as_u64(bcx.tcx().sess.target.uint_type);\n                 let size = C_uint(bcx.ccx, size);\n                 let base = base::get_dataptr(&bcx, dest.llval);\n+                let align = dest.alignment.to_align();\n+\n+                if let OperandValue::Immediate(v) = tr_elem.val {\n+                    if common::is_const_integral(v) && common::const_to_uint(v) == 0 {\n+                        let align = align.unwrap_or_else(|| bcx.ccx.align_of(tr_elem.ty));\n+                        let align = C_i32(bcx.ccx, align as i32);\n+                        let ty = type_of::type_of(bcx.ccx, dest_ty);\n+                        let size = machine::llsize_of(bcx.ccx, ty);\n+                        let fill = C_integral(Type::i8(bcx.ccx), 0, false);\n+                        base::call_memset(&bcx, base, fill, size, align, false);\n+                        return bcx;\n+                    }\n+                }\n+\n+                // Use llvm.memset.p0i8.* to initialize byte arrays\n+                let elem_layout = bcx.ccx.layout_of(tr_elem.ty).layout;\n+                match *elem_layout {\n+                    Layout::Scalar { value: Primitive::Int(layout::I8), .. } |\n+                    Layout::CEnum { discr: layout::I8, .. } => {\n+                        let align = align.unwrap_or_else(|| bcx.ccx.align_of(tr_elem.ty));\n+                        let align = C_i32(bcx.ccx, align as i32);\n+                        let fill = tr_elem.immediate();\n+                        base::call_memset(&bcx, base, fill, size, align, false);\n+                        return bcx;\n+                    }\n+                    _ => ()\n+                }\n+\n                 tvec::slice_for_each(&bcx, base, tr_elem.ty, size, |bcx, llslot, loop_bb| {\n-                    self.store_operand(bcx, llslot, dest.alignment.to_align(), tr_elem);\n+                    self.store_operand(bcx, llslot, align, tr_elem);\n                     bcx.br(loop_bb);\n                 })\n             }"}, {"sha": "cb684af395363d475902239234a5049d4abdb0c7", "filename": "src/test/codegen/slice-init.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/ac43d58d3aca4b578864ec6dbb24d68a9f9c201c/src%2Ftest%2Fcodegen%2Fslice-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac43d58d3aca4b578864ec6dbb24d68a9f9c201c/src%2Ftest%2Fcodegen%2Fslice-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fslice-init.rs?ref=ac43d58d3aca4b578864ec6dbb24d68a9f9c201c", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK-LABEL: @zero_sized_elem\n+#[no_mangle]\n+pub fn zero_sized_elem() {\n+    // CHECK-NOT: br label %slice_loop_header{{.*}}\n+    // CHECK-NOT: call void @llvm.memset.p0i8\n+    let x = [(); 4];\n+    drop(&x);\n+}\n+\n+// CHECK-LABEL: @zero_len_array\n+#[no_mangle]\n+pub fn zero_len_array() {\n+    // CHECK-NOT: br label %slice_loop_header{{.*}}\n+    // CHECK-NOT: call void @llvm.memset.p0i8\n+    let x = [4; 0];\n+    drop(&x);\n+}\n+\n+// CHECK-LABEL: @byte_array\n+#[no_mangle]\n+pub fn byte_array() {\n+    // CHECK: call void @llvm.memset.p0i8.i{{[0-9]+}}(i8* {{.*}}, i8 7, i64 4\n+    // CHECK-NOT: br label %slice_loop_header{{.*}}\n+    let x = [7u8; 4];\n+    drop(&x);\n+}\n+\n+#[allow(dead_code)]\n+#[derive(Copy, Clone)]\n+enum Init {\n+    Loop,\n+    Memset,\n+}\n+\n+// CHECK-LABEL: @byte_enum_array\n+#[no_mangle]\n+pub fn byte_enum_array() {\n+    // CHECK: call void @llvm.memset.p0i8.i{{[0-9]+}}(i8* {{.*}}, i8 {{.*}}, i64 4\n+    // CHECK-NOT: br label %slice_loop_header{{.*}}\n+    let x = [Init::Memset; 4];\n+    drop(&x);\n+}\n+\n+// CHECK-LABEL: @zeroed_integer_array\n+#[no_mangle]\n+pub fn zeroed_integer_array() {\n+    // CHECK: call void @llvm.memset.p0i8.i{{[0-9]+}}(i8* {{.*}}, i8 0, i64 16\n+    // CHECK-NOT: br label %slice_loop_header{{.*}}\n+    let x = [0u32; 4];\n+    drop(&x);\n+}\n+\n+// CHECK-LABEL: @nonzero_integer_array\n+#[no_mangle]\n+pub fn nonzero_integer_array() {\n+    // CHECK: br label %slice_loop_header{{.*}}\n+    // CHECK-NOT: call void @llvm.memset.p0i8\n+    let x = [0x1a_2b_3c_4d_u32; 4];\n+    drop(&x);\n+}"}]}