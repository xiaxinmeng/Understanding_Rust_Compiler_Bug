{"sha": "64ccb42bb87ea7f10784cb6fcfd185fc716fd3ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0Y2NiNDJiYjg3ZWE3ZjEwNzg0Y2I2ZmNmZDE4NWZjNzE2ZmQzZmY=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-07-08T14:34:26Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-07-08T14:34:26Z"}, "message": "Rollup merge of #26850 - steveklabnik:more_format_docs, r=alexcrichton\n\nhttps://www.reddit.com/r/rust/comments/3ceaui/psa_produces_prettyprinted_debug_output/", "tree": {"sha": "98f9209094e0494216732d837d411d18fd3a278d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98f9209094e0494216732d837d411d18fd3a278d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64ccb42bb87ea7f10784cb6fcfd185fc716fd3ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64ccb42bb87ea7f10784cb6fcfd185fc716fd3ff", "html_url": "https://github.com/rust-lang/rust/commit/64ccb42bb87ea7f10784cb6fcfd185fc716fd3ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64ccb42bb87ea7f10784cb6fcfd185fc716fd3ff/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5629e9e3556a35e2a9bc2f5bd1bee30d7966e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5629e9e3556a35e2a9bc2f5bd1bee30d7966e0d", "html_url": "https://github.com/rust-lang/rust/commit/d5629e9e3556a35e2a9bc2f5bd1bee30d7966e0d"}, {"sha": "6c5290389170cc024e1ecfb09efdd88ae0303d02", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c5290389170cc024e1ecfb09efdd88ae0303d02", "html_url": "https://github.com/rust-lang/rust/commit/6c5290389170cc024e1ecfb09efdd88ae0303d02"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "47030bf0fb31efc989952e8f53fcf9b1122eb44a", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/64ccb42bb87ea7f10784cb6fcfd185fc716fd3ff/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ccb42bb87ea7f10784cb6fcfd185fc716fd3ff/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=64ccb42bb87ea7f10784cb6fcfd185fc716fd3ff", "patch": "@@ -273,6 +273,8 @@ impl<'a> Display for Arguments<'a> {\n ///\n /// Generally speaking, you should just `derive` a `Debug` implementation.\n ///\n+/// When used with the alternate format specifier `#?`, the output is pretty-printed.\n+///\n /// For more information on formatters, see [the module-level documentation][module].\n ///\n /// [module]: ../index.html\n@@ -314,13 +316,42 @@ impl<'a> Display for Arguments<'a> {\n /// println!(\"The origin is: {:?}\", origin);\n /// ```\n ///\n+/// This outputs:\n+///\n+/// ```text\n+/// The origin is: Point { x: 0, y: 0 }\n+/// ```\n+///\n /// There are a number of `debug_*` methods on `Formatter` to help you with manual\n /// implementations, such as [`debug_struct`][debug_struct].\n ///\n /// `Debug` implementations using either `derive` or the debug builder API\n /// on `Formatter` support pretty printing using the alternate flag: `{:#?}`.\n ///\n /// [debug_struct]: ../std/fmt/struct.Formatter.html#method.debug_struct\n+///\n+/// Pretty printing with `#?`:\n+///\n+/// ```\n+/// #[derive(Debug)]\n+/// struct Point {\n+///     x: i32,\n+///     y: i32,\n+/// }\n+///\n+/// let origin = Point { x: 0, y: 0 };\n+///\n+/// println!(\"The origin is: {:#?}\", origin);\n+/// ```\n+///\n+/// This outputs:\n+///\n+/// ```text\n+/// The origin is: Point {\n+///     x: 0,\n+///     y: 0\n+/// }\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented = \"`{Self}` cannot be formatted using `:?`; if it is \\\n                             defined in your crate, add `#[derive(Debug)]` or \\\n@@ -379,6 +410,8 @@ pub trait Display {\n ///\n /// The `Octal` trait should format its output as a number in base-8.\n ///\n+/// The alternate flag, `#`, adds a `0o` in front of the output.\n+///\n /// For more information on formatters, see [the module-level documentation][module].\n ///\n /// [module]: ../index.html\n@@ -391,6 +424,7 @@ pub trait Display {\n /// let x = 42; // 42 is '52' in octal\n ///\n /// assert_eq!(format!(\"{:o}\", x), \"52\");\n+/// assert_eq!(format!(\"{:#o}\", x), \"0o52\");\n /// ```\n ///\n /// Implementing `Octal` on a type:\n@@ -423,6 +457,8 @@ pub trait Octal {\n ///\n /// The `Binary` trait should format its output as a number in binary.\n ///\n+/// The alternate flag, `#`, adds a `0b` in front of the output.\n+///\n /// For more information on formatters, see [the module-level documentation][module].\n ///\n /// [module]: ../index.html\n@@ -435,6 +471,7 @@ pub trait Octal {\n /// let x = 42; // 42 is '101010' in binary\n ///\n /// assert_eq!(format!(\"{:b}\", x), \"101010\");\n+/// assert_eq!(format!(\"{:#b}\", x), \"0b101010\");\n /// ```\n ///\n /// Implementing `Binary` on a type:\n@@ -468,6 +505,8 @@ pub trait Binary {\n /// The `LowerHex` trait should format its output as a number in hexidecimal, with `a` through `f`\n /// in lower case.\n ///\n+/// The alternate flag, `#`, adds a `0x` in front of the output.\n+///\n /// For more information on formatters, see [the module-level documentation][module].\n ///\n /// [module]: ../index.html\n@@ -480,6 +519,7 @@ pub trait Binary {\n /// let x = 42; // 42 is '2a' in hex\n ///\n /// assert_eq!(format!(\"{:x}\", x), \"2a\");\n+/// assert_eq!(format!(\"{:#x}\", x), \"0x2a\");\n /// ```\n ///\n /// Implementing `LowerHex` on a type:\n@@ -513,6 +553,8 @@ pub trait LowerHex {\n /// The `UpperHex` trait should format its output as a number in hexidecimal, with `A` through `F`\n /// in upper case.\n ///\n+/// The alternate flag, `#`, adds a `0x` in front of the output.\n+///\n /// For more information on formatters, see [the module-level documentation][module].\n ///\n /// [module]: ../index.html\n@@ -525,6 +567,7 @@ pub trait LowerHex {\n /// let x = 42; // 42 is '2A' in hex\n ///\n /// assert_eq!(format!(\"{:X}\", x), \"2A\");\n+/// assert_eq!(format!(\"{:#X}\", x), \"0x2A\");\n /// ```\n ///\n /// Implementing `UpperHex` on a type:"}]}