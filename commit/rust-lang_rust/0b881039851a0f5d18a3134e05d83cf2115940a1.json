{"sha": "0b881039851a0f5d18a3134e05d83cf2115940a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiODgxMDM5ODUxYTBmNWQxOGEzMTM0ZTA1ZDgzY2YyMTE1OTQwYTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-18T15:05:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-21T12:56:47Z"}, "message": "skip no-op obligations and add a little debug output", "tree": {"sha": "2532fc6abcf9a169ee7090346d3925be6eca9c69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2532fc6abcf9a169ee7090346d3925be6eca9c69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b881039851a0f5d18a3134e05d83cf2115940a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b881039851a0f5d18a3134e05d83cf2115940a1", "html_url": "https://github.com/rust-lang/rust/commit/0b881039851a0f5d18a3134e05d83cf2115940a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b881039851a0f5d18a3134e05d83cf2115940a1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5286d9fa6155291f8a66f96191ecd20f5c971a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5286d9fa6155291f8a66f96191ecd20f5c971a1", "html_url": "https://github.com/rust-lang/rust/commit/e5286d9fa6155291f8a66f96191ecd20f5c971a1"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "f0b6d25e9dae8a9be8a846028db373873af127fc", "filename": "src/librustc/infer/canonical/query_result.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0b881039851a0f5d18a3134e05d83cf2115940a1/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b881039851a0f5d18a3134e05d83cf2115940a1/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs?ref=0b881039851a0f5d18a3134e05d83cf2115940a1", "patch": "@@ -18,8 +18,10 @@\n //! [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html\n \n use infer::canonical::substitute::substitute_value;\n-use infer::canonical::{Canonical, CanonicalVarKind, CanonicalVarValues, CanonicalizedQueryResult,\n-                       Certainty, QueryRegionConstraint, QueryResult, SmallCanonicalVarValues};\n+use infer::canonical::{\n+    Canonical, CanonicalVarKind, CanonicalVarValues, CanonicalizedQueryResult, Certainty,\n+    QueryRegionConstraint, QueryResult, SmallCanonicalVarValues,\n+};\n use infer::region_constraints::{Constraint, RegionConstraintData};\n use infer::InferCtxtBuilder;\n use infer::{InferCtxt, InferOk, InferResult, RegionObligation};\n@@ -276,9 +278,9 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n \n         for (index, original_value) in original_values.iter().enumerate() {\n             // ...with the value `v_r` of that variable from the query.\n-            let result_value = query_result\n-                .substitute_projected(self.tcx, &result_subst,\n-                                      |v| &v.var_values[CanonicalVar::new(index)]);\n+            let result_value = query_result.substitute_projected(self.tcx, &result_subst, |v| {\n+                &v.var_values[CanonicalVar::new(index)]\n+            });\n             match (original_value.unpack(), result_value.unpack()) {\n                 (UnpackedKind::Lifetime(ty::ReErased), UnpackedKind::Lifetime(ty::ReErased)) => {\n                     // no action needed\n@@ -312,11 +314,13 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         // ...also include the other query region constraints from the query.\n         output_query_region_constraints.reserve(query_result.value.region_constraints.len());\n         for r_c in query_result.value.region_constraints.iter() {\n-            output_query_region_constraints.push(r_c.map_bound(|ty::OutlivesPredicate(k1, r2)| {\n-                let k1 = substitute_value(self.tcx, &result_subst, &k1);\n-                let r2 = substitute_value(self.tcx, &result_subst, &r2);\n-                ty::OutlivesPredicate(k1, r2)\n-            }));\n+            let &ty::OutlivesPredicate(k1, r2) = r_c.skip_binder(); // reconstructed below\n+            let k1 = substitute_value(self.tcx, &result_subst, &k1);\n+            let r2 = substitute_value(self.tcx, &result_subst, &r2);\n+            if k1 != r2.into() {\n+                output_query_region_constraints\n+                    .push(ty::Binder::bind(ty::OutlivesPredicate(k1, r2)));\n+            }\n         }\n \n         let user_result: R ="}, {"sha": "6d48e7601cb3e29aecefd97f9e148b923ced6ae9", "filename": "src/librustc/traits/query/outlives_bounds.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b881039851a0f5d18a3134e05d83cf2115940a1/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b881039851a0f5d18a3134e05d83cf2115940a1/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs?ref=0b881039851a0f5d18a3134e05d83cf2115940a1", "patch": "@@ -103,6 +103,8 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         ty: Ty<'tcx>,\n         span: Span,\n     ) -> Vec<OutlivesBound<'tcx>> {\n+        debug!(\"implied_outlives_bounds(ty = {:?})\", ty);\n+\n         let mut orig_values = SmallVec::new();\n         let key = self.canonicalize_query(&param_env.and(ty), &mut orig_values);\n         let result = match self.tcx.global_tcx().implied_outlives_bounds(key) {\n@@ -119,7 +121,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n \n         let result = self.instantiate_query_result_and_region_obligations(\n             &ObligationCause::dummy(), param_env, &orig_values, &result);\n-        debug!(\"implied_outlives_bounds for {:?}: {:?}\", ty, result);\n+        debug!(\"implied_outlives_bounds for {:?}: {:#?}\", ty, result);\n         let result = match result {\n             Ok(v) => v,\n             Err(_) => {"}]}