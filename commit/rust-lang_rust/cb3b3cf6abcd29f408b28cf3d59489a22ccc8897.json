{"sha": "cb3b3cf6abcd29f408b28cf3d59489a22ccc8897", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiM2IzY2Y2YWJjZDI5ZjQwOGIyOGNmM2Q1OTQ4OWEyMmNjYzg4OTc=", "commit": {"author": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-06-18T09:22:41Z"}, "committer": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-07-23T09:04:21Z"}, "message": "Improve `get_by_key_enumerated` more", "tree": {"sha": "6bdd753c6e6d593b20f5f810be9c8fd1ef6ed039", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bdd753c6e6d593b20f5f810be9c8fd1ef6ed039"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb3b3cf6abcd29f408b28cf3d59489a22ccc8897", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEx6scKn6IIf/+FpBu2rpbBylhwYoFAmD6hhUACgkQ2rpbBylh\nwYrQLg/9HxmTo14Xzq7mqO/TAsLkHFMEy3YSVG5U3O2vMhHC9l97sFdIQvD9OjQ1\nIfl4zvuj2D/0tUQfx42n47TuWKV+7YDrb9jgmAy6Dl6KotioyEPaBo+Vp7Q0QaJH\nVZ0q7Sas+0Xh/yHGiBNCyq5ehUjRmnMSIOrtJ10vOxNwF9Lv35MG/wWXoFVFBtbj\nmz1USJpno1i8QtXfI0pq3Sv0JTFsAqvb97zg10hr3lV4eyRxO1Sr8JPBwrAMRjWM\n/j1UBlMTH3LOZzuCBJJfdsyh6LwaAIxovkuPYueoy9OlOt/SYVoYVqw2y6aWleK+\nhXIyiokwN0ayqL9qd2qHYJni7ZjWhycJSXscFucM9j3C2qVM2xpxBXaqKTH1z5au\n2UQjeLd7PhGMEtg/KSEpvOul356d6N22yqHhmtwrs9O9p86714J0MNp/wrrFuaIe\nlIMlojlVlnvHCop06wPxRb3V12PKp05Qb8MDslpAkFsV/QfoPDWukYaQBORViM7Q\n8uA1hkeuTRTqlTQVrMqNyW6yMWtlVWyWoa3l6Apc7NR6eAD7YLIPhuCnM7gtXnva\nMuLYYymNQ65LhOKaScA8G9d0OQ+Gc4BodfNukXyyaLoSavK4HDKDylbvRjvsRpEL\ncL0dRv/9Tyu3tcS8dUdPfudiyeeWSN9FzQ9Ho2f9GkzcR8iJm5I=\n=SM3k\n-----END PGP SIGNATURE-----", "payload": "tree 6bdd753c6e6d593b20f5f810be9c8fd1ef6ed039\nparent b2b7c859c1aae39d26884e760201f5e6c7feeff9\nauthor Yuki Okushi <yuki.okushi@huawei.com> 1624008161 +0900\ncommitter Yuki Okushi <yuki.okushi@huawei.com> 1627031061 +0900\n\nImprove `get_by_key_enumerated` more\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3b3cf6abcd29f408b28cf3d59489a22ccc8897", "html_url": "https://github.com/rust-lang/rust/commit/cb3b3cf6abcd29f408b28cf3d59489a22ccc8897", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb3b3cf6abcd29f408b28cf3d59489a22ccc8897/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2b7c859c1aae39d26884e760201f5e6c7feeff9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b7c859c1aae39d26884e760201f5e6c7feeff9", "html_url": "https://github.com/rust-lang/rust/commit/b2b7c859c1aae39d26884e760201f5e6c7feeff9"}], "stats": {"total": 50, "additions": 11, "deletions": 39}, "files": [{"sha": "2054f5eebf5791457b52cd66605e2cb0b2b80f47", "filename": "compiler/rustc_data_structures/src/sorted_map/index_map.rs", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cb3b3cf6abcd29f408b28cf3d59489a22ccc8897/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3b3cf6abcd29f408b28cf3d59489a22ccc8897/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs?ref=cb3b3cf6abcd29f408b28cf3d59489a22ccc8897", "patch": "@@ -1,6 +1,5 @@\n //! A variant of `SortedMap` that preserves insertion order.\n \n-use std::borrow::Borrow;\n use std::hash::{Hash, Hasher};\n use std::iter::FromIterator;\n \n@@ -76,11 +75,7 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n     ///\n     /// If there are multiple items that are equivalent to `key`, they will be yielded in\n     /// insertion order.\n-    pub fn get_by_key<Q: 'a>(&'a self, key: &Q) -> impl 'a + Iterator<Item = &'a V>\n-    where\n-        Q: Ord + ?Sized,\n-        K: Borrow<Q>,\n-    {\n+    pub fn get_by_key(&'a self, key: K) -> impl 'a + Iterator<Item = &'a V> {\n         self.get_by_key_enumerated(key).map(|(_, v)| v)\n     }\n \n@@ -89,35 +84,12 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n     ///\n     /// If there are multiple items that are equivalent to `key`, they will be yielded in\n     /// insertion order.\n-    pub fn get_by_key_enumerated<Q>(&self, key: &Q) -> impl '_ + Iterator<Item = (I, &V)>\n-    where\n-        Q: Ord + ?Sized,\n-        K: Borrow<Q>,\n-    {\n-        match self.binary_search_idx(key) {\n-            Err(_) => self.idxs_to_items_enumerated(&[]),\n-\n-            Ok(idx) => {\n-                let start = self.idx_sorted_by_item_key[..idx]\n-                    .partition_point(|&i| self.items[i].0.borrow() != key);\n-                let end = idx\n-                    + self.idx_sorted_by_item_key[idx..]\n-                        .partition_point(|&i| self.items[i].0.borrow() == key);\n-                self.idxs_to_items_enumerated(&self.idx_sorted_by_item_key[start..end])\n-            }\n-        }\n-    }\n-\n-    fn binary_search_idx<Q>(&self, key: &Q) -> Result<usize, usize>\n-    where\n-        Q: Ord + ?Sized,\n-        K: Borrow<Q>,\n-    {\n-        self.idx_sorted_by_item_key.binary_search_by(|&idx| self.items[idx].0.borrow().cmp(key))\n-    }\n-\n-    fn idxs_to_items_enumerated(&'a self, idxs: &'a [I]) -> impl 'a + Iterator<Item = (I, &'a V)> {\n-        idxs.iter().map(move |&idx| (idx, &self.items[idx].1))\n+    pub fn get_by_key_enumerated(&'a self, key: K) -> impl '_ + Iterator<Item = (I, &V)> {\n+        let lower_bound = self.idx_sorted_by_item_key.partition_point(|&i| self.items[i].0 < key);\n+        self.idx_sorted_by_item_key[lower_bound..]\n+            .iter()\n+            .take_while(move |&&i| self.items[i].0.eq(&key))\n+            .map(move |&idx| (idx, &self.items[idx].1))\n     }\n }\n "}, {"sha": "1e977d709f1cdae35699717160e0c29b97c973da", "filename": "compiler/rustc_data_structures/src/sorted_map/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb3b3cf6abcd29f408b28cf3d59489a22ccc8897/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3b3cf6abcd29f408b28cf3d59489a22ccc8897/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Ftests.rs?ref=cb3b3cf6abcd29f408b28cf3d59489a22ccc8897", "patch": "@@ -14,11 +14,11 @@ fn test_sorted_index_multi_map() {\n     }\n \n     // `get_by_key` works.\n-    assert_eq!(set.get_by_key(&3).copied().collect::<Vec<_>>(), vec![0]);\n-    assert!(set.get_by_key(&4).next().is_none());\n+    assert_eq!(set.get_by_key(3).copied().collect::<Vec<_>>(), vec![0]);\n+    assert!(set.get_by_key(4).next().is_none());\n \n     // `get_by_key` returns items in insertion order.\n-    let twos: Vec<_> = set.get_by_key_enumerated(&2).collect();\n+    let twos: Vec<_> = set.get_by_key_enumerated(2).collect();\n     let idxs: Vec<usize> = twos.iter().map(|(i, _)| *i).collect();\n     let values: Vec<usize> = twos.iter().map(|(_, &v)| v).collect();\n "}, {"sha": "2d177551664f6fa43aa22b08674b1a415a6ac65a", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb3b3cf6abcd29f408b28cf3d59489a22ccc8897/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3b3cf6abcd29f408b28cf3d59489a22ccc8897/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=cb3b3cf6abcd29f408b28cf3d59489a22ccc8897", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> AssocItems<'tcx> {\n         &self,\n         name: Symbol,\n     ) -> impl '_ + Iterator<Item = &ty::AssocItem> {\n-        self.items.get_by_key(&name).copied()\n+        self.items.get_by_key(name).copied()\n     }\n \n     /// Returns an iterator over all associated items with the given name."}]}