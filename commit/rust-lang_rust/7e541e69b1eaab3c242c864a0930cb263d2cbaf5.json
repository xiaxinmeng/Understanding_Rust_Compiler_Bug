{"sha": "7e541e69b1eaab3c242c864a0930cb263d2cbaf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNTQxZTY5YjFlYWFiM2MyNDJjODY0YTA5MzBjYjI2M2QyY2JhZjU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-03T15:49:29Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T12:08:55Z"}, "message": "Add HasInterner bounds", "tree": {"sha": "88fb29aa7e0b782efc9f91ec5676d93e4db4ffd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88fb29aa7e0b782efc9f91ec5676d93e4db4ffd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e541e69b1eaab3c242c864a0930cb263d2cbaf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e541e69b1eaab3c242c864a0930cb263d2cbaf5", "html_url": "https://github.com/rust-lang/rust/commit/7e541e69b1eaab3c242c864a0930cb263d2cbaf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e541e69b1eaab3c242c864a0930cb263d2cbaf5/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "926bfef0efc5caca2a04a50beaba9127338e21e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/926bfef0efc5caca2a04a50beaba9127338e21e0", "html_url": "https://github.com/rust-lang/rust/commit/926bfef0efc5caca2a04a50beaba9127338e21e0"}], "stats": {"total": 49, "additions": 35, "deletions": 14}, "files": [{"sha": "8bdd32ad6e5b349caf3af06177cbf05c3c6527f2", "filename": "crates/hir_ty/src/chalk_cast.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e541e69b1eaab3c242c864a0930cb263d2cbaf5/crates%2Fhir_ty%2Fsrc%2Fchalk_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e541e69b1eaab3c242c864a0930cb263d2cbaf5/crates%2Fhir_ty%2Fsrc%2Fchalk_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_cast.rs?ref=7e541e69b1eaab3c242c864a0930cb263d2cbaf5", "patch": "@@ -5,7 +5,10 @@ use chalk_ir::{\n     interner::HasInterner,\n };\n \n-use crate::{AliasEq, DomainGoal, GenericArg, GenericArgData, Interner, TraitRef, Ty, WhereClause};\n+use crate::{\n+    AliasEq, CallableSig, DomainGoal, GenericArg, GenericArgData, Interner, PolyFnSig,\n+    ReturnTypeImplTraits, TraitRef, Ty, WhereClause,\n+};\n \n macro_rules! has_interner {\n     ($t:ty) => {\n@@ -24,3 +27,6 @@ macro_rules! transitive_impl {\n         }\n     };\n }\n+\n+has_interner!(CallableSig);\n+has_interner!(ReturnTypeImplTraits);"}, {"sha": "3732d8ebdc41110ad294d366d65e827309bbcdf6", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e541e69b1eaab3c242c864a0930cb263d2cbaf5/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e541e69b1eaab3c242c864a0930cb263d2cbaf5/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=7e541e69b1eaab3c242c864a0930cb263d2cbaf5", "patch": "@@ -2,7 +2,9 @@\n \n use std::borrow::Cow;\n \n-use chalk_ir::{FloatTy, IntTy, TyVariableKind, UniverseIndex, VariableKind};\n+use chalk_ir::{\n+    interner::HasInterner, FloatTy, IntTy, TyVariableKind, UniverseIndex, VariableKind,\n+};\n use ena::unify::{InPlaceUnificationTable, NoError, UnifyKey, UnifyValue};\n \n use super::{DomainGoal, InferenceContext};\n@@ -34,7 +36,10 @@ where\n }\n \n #[derive(Debug)]\n-pub(super) struct Canonicalized<T> {\n+pub(super) struct Canonicalized<T>\n+where\n+    T: HasInterner<Interner = Interner>,\n+{\n     pub(super) value: Canonical<T>,\n     free_vars: Vec<(InferenceVar, TyVariableKind)>,\n }\n@@ -76,7 +81,10 @@ impl<'a, 'b> Canonicalizer<'a, 'b> {\n         )\n     }\n \n-    fn into_canonicalized<T>(self, result: T) -> Canonicalized<T> {\n+    fn into_canonicalized<T: HasInterner<Interner = Interner>>(\n+        self,\n+        result: T,\n+    ) -> Canonicalized<T> {\n         let kinds = self\n             .free_vars\n             .iter()\n@@ -108,7 +116,7 @@ impl<'a, 'b> Canonicalizer<'a, 'b> {\n     }\n }\n \n-impl<T> Canonicalized<T> {\n+impl<T: HasInterner<Interner = Interner>> Canonicalized<T> {\n     pub(super) fn decanonicalize_ty(&self, ty: Ty) -> Ty {\n         ty.fold_binders(\n             &mut |ty, binders| {"}, {"sha": "23dec70405feb225a03096e7fc1eb60bc527a66d", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7e541e69b1eaab3c242c864a0930cb263d2cbaf5/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e541e69b1eaab3c242c864a0930cb263d2cbaf5/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=7e541e69b1eaab3c242c864a0930cb263d2cbaf5", "patch": "@@ -33,7 +33,11 @@ mod test_db;\n use std::sync::Arc;\n \n use base_db::salsa;\n-use chalk_ir::UintTy;\n+use chalk_ir::{\n+    cast::{CastTo, Caster},\n+    interner::HasInterner,\n+    UintTy,\n+};\n use hir_def::{\n     expr::ExprId, type_ref::Rawness, ConstParamId, LifetimeParamId, TraitId, TypeAliasId,\n     TypeParamId,\n@@ -115,12 +119,15 @@ pub fn param_idx(db: &dyn HirDatabase, id: TypeParamId) -> Option<usize> {\n \n pub fn wrap_empty_binders<T>(value: T) -> Binders<T>\n where\n-    T: TypeWalk,\n+    T: TypeWalk + HasInterner<Interner = Interner>,\n {\n     Binders::empty(&Interner, value.shifted_in_from(DebruijnIndex::ONE))\n }\n \n-pub fn make_only_type_binders<T>(num_vars: usize, value: T) -> Binders<T> {\n+pub fn make_only_type_binders<T: HasInterner<Interner = Interner>>(\n+    num_vars: usize,\n+    value: T,\n+) -> Binders<T> {\n     Binders::new(\n         VariableKinds::from_iter(\n             &Interner,\n@@ -132,7 +139,7 @@ pub fn make_only_type_binders<T>(num_vars: usize, value: T) -> Binders<T> {\n }\n \n // FIXME: get rid of this\n-pub fn make_canonical<T>(\n+pub fn make_canonical<T: HasInterner<Interner = Interner>>(\n     value: T,\n     kinds: impl IntoIterator<Item = TyVariableKind>,\n ) -> Canonical<T> {"}, {"sha": "d4ba707b48fc52b26bb29b35fca733967ea0fc72", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e541e69b1eaab3c242c864a0930cb263d2cbaf5/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e541e69b1eaab3c242c864a0930cb263d2cbaf5/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=7e541e69b1eaab3c242c864a0930cb263d2cbaf5", "patch": "@@ -8,7 +8,7 @@\n use std::{iter, sync::Arc};\n \n use base_db::CrateId;\n-use chalk_ir::{cast::Cast, Mutability, Safety};\n+use chalk_ir::{cast::Cast, interner::HasInterner, Mutability, Safety};\n use hir_def::{\n     adt::StructKind,\n     builtin_type::BuiltinType,\n@@ -1307,6 +1307,6 @@ pub(crate) fn lower_to_chalk_mutability(m: hir_def::type_ref::Mutability) -> Mut\n     }\n }\n \n-fn make_binders<T>(generics: &Generics, value: T) -> Binders<T> {\n+fn make_binders<T: HasInterner<Interner = Interner>>(generics: &Generics, value: T) -> Binders<T> {\n     crate::make_only_type_binders(generics.len(), value)\n }"}, {"sha": "a5aa40c10e5dd6f687ccbf0a96a18bb4d64ac50f", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e541e69b1eaab3c242c864a0930cb263d2cbaf5/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e541e69b1eaab3c242c864a0930cb263d2cbaf5/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=7e541e69b1eaab3c242c864a0930cb263d2cbaf5", "patch": "@@ -3,7 +3,7 @@ use std::sync::Arc;\n \n use log::debug;\n \n-use chalk_ir::{fold::shift::Shift, CanonicalVarKinds};\n+use chalk_ir::{fold::shift::Shift, interner::HasInterner, CanonicalVarKinds};\n use chalk_solve::rust_ir::{self, OpaqueTyDatumBound, WellKnownTrait};\n \n use base_db::{salsa::InternKey, CrateId};"}, {"sha": "c1aecdafc485cc531fd4a41224b78596e3c55a1d", "filename": "crates/hir_ty/src/walk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e541e69b1eaab3c242c864a0930cb263d2cbaf5/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e541e69b1eaab3c242c864a0930cb263d2cbaf5/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fwalk.rs?ref=7e541e69b1eaab3c242c864a0930cb263d2cbaf5", "patch": "@@ -3,7 +3,7 @@\n \n use std::mem;\n \n-use chalk_ir::DebruijnIndex;\n+use chalk_ir::{interner::HasInterner, DebruijnIndex};\n \n use crate::{\n     utils::make_mut_slice, AliasEq, AliasTy, Binders, CallableSig, FnSubst, GenericArg,\n@@ -320,7 +320,7 @@ impl TypeWalk for Substitution {\n     }\n }\n \n-impl<T: TypeWalk> TypeWalk for Binders<T> {\n+impl<T: TypeWalk + HasInterner<Interner = Interner>> TypeWalk for Binders<T> {\n     fn walk(&self, f: &mut impl FnMut(&Ty)) {\n         self.skip_binders().walk(f);\n     }"}]}