{"sha": "8a11b8cdd7cc7214c2bb9e77a6c961dd4dad9b7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMTFiOGNkZDdjYzcyMTRjMmJiOWU3N2E2Yzk2MWRkNGRhZDliN2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-05T05:20:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-05T05:20:23Z"}, "message": "Auto merge of #46907 - varkor:contrib-8, r=nagisa\n\nAllow non-alphabetic underscores in camel case\n\nCertain identifiers, such as `X86_64`, cannot currently be unambiguously represented in camel case (`X8664`, `X86_64`, `X8_664`, etc. are all transformed to the same identifier). This change relaxes the rules so that underscores are permitted between two non-alphabetic characters under `#[forbid(non_camel_case_types)]`. Fixes #34633 and fixes #41621.", "tree": {"sha": "f1c416eefbb3b14c40152ae70d33bb088bed9ad4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1c416eefbb3b14c40152ae70d33bb088bed9ad4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a11b8cdd7cc7214c2bb9e77a6c961dd4dad9b7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a11b8cdd7cc7214c2bb9e77a6c961dd4dad9b7c", "html_url": "https://github.com/rust-lang/rust/commit/8a11b8cdd7cc7214c2bb9e77a6c961dd4dad9b7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a11b8cdd7cc7214c2bb9e77a6c961dd4dad9b7c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e66887fedefcae51ebf3beacefb0ded007700b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e66887fedefcae51ebf3beacefb0ded007700b1", "html_url": "https://github.com/rust-lang/rust/commit/5e66887fedefcae51ebf3beacefb0ded007700b1"}, {"sha": "3dff918c6c3748104bf83db1b27fd13d51d587be", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dff918c6c3748104bf83db1b27fd13d51d587be", "html_url": "https://github.com/rust-lang/rust/commit/3dff918c6c3748104bf83db1b27fd13d51d587be"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "ac0bf9f4a99b03f90443fa5f0b9ad1b1de15054d", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8a11b8cdd7cc7214c2bb9e77a6c961dd4dad9b7c/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a11b8cdd7cc7214c2bb9e77a6c961dd4dad9b7c/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=8a11b8cdd7cc7214c2bb9e77a6c961dd4dad9b7c", "patch": "@@ -53,6 +53,10 @@ pub struct NonCamelCaseTypes;\n \n impl NonCamelCaseTypes {\n     fn check_case(&self, cx: &LateContext, sort: &str, name: ast::Name, span: Span) {\n+        fn char_has_case(c: char) -> bool {\n+            c.is_lowercase() || c.is_uppercase()\n+        }\n+\n         fn is_camel_case(name: ast::Name) -> bool {\n             let name = name.as_str();\n             if name.is_empty() {\n@@ -62,20 +66,38 @@ impl NonCamelCaseTypes {\n \n             // start with a non-lowercase letter rather than non-uppercase\n             // ones (some scripts don't have a concept of upper/lowercase)\n-            !name.is_empty() && !name.chars().next().unwrap().is_lowercase() && !name.contains('_')\n+            !name.is_empty() && !name.chars().next().unwrap().is_lowercase() &&\n+                !name.contains(\"__\") && !name.chars().collect::<Vec<_>>().windows(2).any(|pair| {\n+                    // contains a capitalisable character followed by, or preceded by, an underscore\n+                    char_has_case(pair[0]) && pair[1] == '_' ||\n+                    char_has_case(pair[1]) && pair[0] == '_'\n+                })\n         }\n \n         fn to_camel_case(s: &str) -> String {\n-            s.split('_')\n-                .flat_map(|word| {\n+            s.trim_matches('_')\n+                .split('_')\n+                .map(|word| {\n                     word.chars().enumerate().map(|(i, c)| if i == 0 {\n                         c.to_uppercase().collect::<String>()\n                     } else {\n                         c.to_lowercase().collect()\n                     })\n+                    .collect::<Vec<_>>()\n+                    .concat()\n                 })\n+                .filter(|x| !x.is_empty())\n                 .collect::<Vec<_>>()\n-                .concat()\n+                .iter().fold((String::new(), None), |(acc, prev): (String, Option<&String>), next| {\n+                    // separate two components with an underscore if their boundary cannot\n+                    // be distinguished using a uppercase/lowercase case distinction\n+                    let join = if let Some(prev) = prev {\n+                                    let l = prev.chars().last().unwrap();\n+                                    let f = next.chars().next().unwrap();\n+                                    !char_has_case(l) && !char_has_case(f)\n+                                } else { false };\n+                    (acc + if join { \"_\" } else { \"\" } + next, Some(next))\n+                }).0\n         }\n \n         if !is_camel_case(name) {"}, {"sha": "5dcdf3a863f879accf87179314344c0a3e415394", "filename": "src/test/compile-fail/lint-non-camel-case-types.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a11b8cdd7cc7214c2bb9e77a6c961dd4dad9b7c/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a11b8cdd7cc7214c2bb9e77a6c961dd4dad9b7c/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs?ref=8a11b8cdd7cc7214c2bb9e77a6c961dd4dad9b7c", "patch": "@@ -45,4 +45,12 @@ struct foo7 {\n \n type __ = isize; //~ ERROR type `__` should have a camel case name such as `CamelCase`\n \n+struct X86_64;\n+\n+struct X86__64; //~ ERROR type `X86__64` should have a camel case name such as `X86_64`\n+\n+struct Abc_123; //~ ERROR type `Abc_123` should have a camel case name such as `Abc123`\n+\n+struct A1_b2_c3; //~ ERROR type `A1_b2_c3` should have a camel case name such as `A1B2C3`\n+\n fn main() { }"}]}