{"sha": "ecb1ad11d9df883f4070695276c0714c148c751b", "node_id": "C_kwDOAAsO6NoAKGVjYjFhZDExZDlkZjg4M2Y0MDcwNjk1Mjc2YzA3MTRjMTQ4Yzc1MWI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-14T11:28:14Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-14T11:28:14Z"}, "message": "Make `LhsExpr::AlreadyParsed` a named struct", "tree": {"sha": "a84ccaaa361f84006135d8b89cf80eb1aa0946b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a84ccaaa361f84006135d8b89cf80eb1aa0946b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecb1ad11d9df883f4070695276c0714c148c751b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecb1ad11d9df883f4070695276c0714c148c751b", "html_url": "https://github.com/rust-lang/rust/commit/ecb1ad11d9df883f4070695276c0714c148c751b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecb1ad11d9df883f4070695276c0714c148c751b/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b", "html_url": "https://github.com/rust-lang/rust/commit/5ca6f7d2c34953ee360ccf7d3c84c7853ea2df4b"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "24821f1bd97cf024d385876839911a6c7093e810", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ecb1ad11d9df883f4070695276c0714c148c751b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecb1ad11d9df883f4070695276c0714c148c751b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=ecb1ad11d9df883f4070695276c0714c148c751b", "patch": "@@ -83,7 +83,7 @@ macro_rules! maybe_whole_expr {\n pub(super) enum LhsExpr {\n     NotYetParsed,\n     AttributesParsed(AttrWrapper),\n-    AlreadyParsed(P<Expr>, bool), // (expr, starts_statement)\n+    AlreadyParsed { expr: P<Expr>, starts_statement: bool },\n }\n \n impl From<Option<AttrWrapper>> for LhsExpr {\n@@ -97,11 +97,11 @@ impl From<Option<AttrWrapper>> for LhsExpr {\n }\n \n impl From<P<Expr>> for LhsExpr {\n-    /// Converts the `expr: P<Expr>` into `LhsExpr::AlreadyParsed(expr)`.\n+    /// Converts the `expr: P<Expr>` into `LhsExpr::AlreadyParsed { expr, starts_statement: false }`.\n     ///\n     /// This conversion does not allocate.\n     fn from(expr: P<Expr>) -> Self {\n-        LhsExpr::AlreadyParsed(expr, false)\n+        LhsExpr::AlreadyParsed { expr, starts_statement: false }\n     }\n }\n \n@@ -174,7 +174,7 @@ impl<'a> Parser<'a> {\n         lhs: LhsExpr,\n     ) -> PResult<'a, P<Expr>> {\n         let mut starts_stmt = false;\n-        let mut lhs = if let LhsExpr::AlreadyParsed(expr, starts_statement) = lhs {\n+        let mut lhs = if let LhsExpr::AlreadyParsed { expr, starts_statement } = lhs {\n             starts_stmt = starts_statement;\n             expr\n         } else {"}, {"sha": "4ff9927aab51af8d3acf925aeff8ccfd6f8ba9fc", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ecb1ad11d9df883f4070695276c0714c148c751b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecb1ad11d9df883f4070695276c0714c148c751b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=ecb1ad11d9df883f4070695276c0714c148c751b", "patch": "@@ -164,7 +164,10 @@ impl<'a> Parser<'a> {\n             // Perform this outside of the `collect_tokens_trailing_token` closure,\n             // since our outer attributes do not apply to this part of the expression\n             let expr = self.with_res(Restrictions::STMT_EXPR, |this| {\n-                this.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(expr, true))\n+                this.parse_assoc_expr_with(\n+                    0,\n+                    LhsExpr::AlreadyParsed { expr, starts_statement: true },\n+                )\n             })?;\n             Ok(self.mk_stmt(lo.to(self.prev_token.span), StmtKind::Expr(expr)))\n         } else {\n@@ -198,7 +201,10 @@ impl<'a> Parser<'a> {\n             let e = self.mk_expr(lo.to(hi), ExprKind::MacCall(mac));\n             let e = self.maybe_recover_from_bad_qpath(e)?;\n             let e = self.parse_dot_or_call_expr_with(e, lo, attrs)?;\n-            let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e, false))?;\n+            let e = self.parse_assoc_expr_with(\n+                0,\n+                LhsExpr::AlreadyParsed { expr: e, starts_statement: false },\n+            )?;\n             StmtKind::Expr(e)\n         };\n         Ok(self.mk_stmt(lo.to(hi), kind))"}]}