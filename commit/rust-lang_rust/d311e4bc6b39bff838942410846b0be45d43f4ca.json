{"sha": "d311e4bc6b39bff838942410846b0be45d43f4ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMTFlNGJjNmIzOWJmZjgzODk0MjQxMDg0NmIwYmU0NWQ0M2Y0Y2E=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-27T16:21:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-27T16:21:09Z"}, "message": "Merge #3351\n\n3351: Refactor string literals r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d08350bd15b6b950c9254215e7e04c2de03fcd0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d08350bd15b6b950c9254215e7e04c2de03fcd0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d311e4bc6b39bff838942410846b0be45d43f4ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeV+x1CRBK7hj4Ov3rIwAAdHIIAJjYpwSF+KOaF961IBMzJFG1\nV9hKegXkAKRLNpdV8zabKNlAwwE+p8wiwYX39TWTjb99WDXqjhl3/4VX2MiLrA3H\n63Q68AC0apzi5w7CSfh35goCrjJxsraNjsxFHzpXeMtYXCo1GS/vrRTC1DTmdcSI\nXPXWn1UPrp+uaVLbirfDCGD79ECf8QkWpF9HIcKkD81uttqwki4bIRU3j7m2JXOM\nol8X2l2n5QL69nwlBM23HPirY7HCArc/uFxs1HqtVjg6Tpo9Sq6tRXl3ttw5Io/x\n6NfqxrKGERfQqTAby7UjoYJZczoBSB8UVAF/6pWOei2CBnFtH/q+toNcEv1uoc0=\n=W9dY\n-----END PGP SIGNATURE-----\n", "payload": "tree d08350bd15b6b950c9254215e7e04c2de03fcd0e\nparent fedab39011e1225b580f5afce8607c8eedad77e1\nparent e74484e1338b7d90038fc996208bb15e4e162f0f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1582820469 +0000\ncommitter GitHub <noreply@github.com> 1582820469 +0000\n\nMerge #3351\n\n3351: Refactor string literals r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d311e4bc6b39bff838942410846b0be45d43f4ca", "html_url": "https://github.com/rust-lang/rust/commit/d311e4bc6b39bff838942410846b0be45d43f4ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d311e4bc6b39bff838942410846b0be45d43f4ca/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fedab39011e1225b580f5afce8607c8eedad77e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fedab39011e1225b580f5afce8607c8eedad77e1", "html_url": "https://github.com/rust-lang/rust/commit/fedab39011e1225b580f5afce8607c8eedad77e1"}, {"sha": "e74484e1338b7d90038fc996208bb15e4e162f0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e74484e1338b7d90038fc996208bb15e4e162f0f", "html_url": "https://github.com/rust-lang/rust/commit/e74484e1338b7d90038fc996208bb15e4e162f0f"}], "stats": {"total": 143, "additions": 80, "deletions": 63}, "files": [{"sha": "7e4b83f13fc302a168a36c9541e34da06377e422", "filename": "crates/ra_assists/src/handlers/raw_string.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d311e4bc6b39bff838942410846b0be45d43f4ca/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d311e4bc6b39bff838942410846b0be45d43f4ca/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=d311e4bc6b39bff838942410846b0be45d43f4ca", "patch": "@@ -1,5 +1,6 @@\n use ra_syntax::{\n-    ast, AstToken,\n+    ast::{self, HasStringValue},\n+    AstToken,\n     SyntaxKind::{RAW_STRING, STRING},\n     TextUnit,\n };"}, {"sha": "d7bca119331170990d7216117726caa3cb16653a", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d311e4bc6b39bff838942410846b0be45d43f4ca/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d311e4bc6b39bff838942410846b0be45d43f4ca/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=d311e4bc6b39bff838942410846b0be45d43f4ca", "patch": "@@ -12,8 +12,10 @@ use ra_ide_db::{\n };\n use ra_prof::profile;\n use ra_syntax::{\n-    ast, AstNode, AstToken, Direction, NodeOrToken, SyntaxElement, SyntaxKind::*, SyntaxToken,\n-    TextRange, WalkEvent, T,\n+    ast::{self, HasQuotes, HasStringValue},\n+    AstNode, AstToken, Direction, NodeOrToken, SyntaxElement,\n+    SyntaxKind::*,\n+    SyntaxToken, TextRange, WalkEvent, T,\n };\n use rustc_hash::FxHashMap;\n "}, {"sha": "1a51b8d3b91799c4bb66411cd6fe9b147c33b94f", "filename": "crates/ra_syntax/src/ast/tokens.rs", "status": "modified", "additions": 74, "deletions": 60, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/d311e4bc6b39bff838942410846b0be45d43f4ca/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d311e4bc6b39bff838942410846b0be45d43f4ca/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs?ref=d311e4bc6b39bff838942410846b0be45d43f4ca", "patch": "@@ -110,6 +110,64 @@ impl Whitespace {\n     }\n }\n \n+pub struct QuoteOffsets {\n+    pub quotes: [TextRange; 2],\n+    pub contents: TextRange,\n+}\n+\n+impl QuoteOffsets {\n+    fn new(literal: &str) -> Option<QuoteOffsets> {\n+        let left_quote = literal.find('\"')?;\n+        let right_quote = literal.rfind('\"')?;\n+        if left_quote == right_quote {\n+            // `literal` only contains one quote\n+            return None;\n+        }\n+\n+        let start = TextUnit::from(0);\n+        let left_quote = TextUnit::from_usize(left_quote) + TextUnit::of_char('\"');\n+        let right_quote = TextUnit::from_usize(right_quote);\n+        let end = TextUnit::of_str(literal);\n+\n+        let res = QuoteOffsets {\n+            quotes: [TextRange::from_to(start, left_quote), TextRange::from_to(right_quote, end)],\n+            contents: TextRange::from_to(left_quote, right_quote),\n+        };\n+        Some(res)\n+    }\n+}\n+\n+pub trait HasQuotes: AstToken {\n+    fn quote_offsets(&self) -> Option<QuoteOffsets> {\n+        let text = self.text().as_str();\n+        let offsets = QuoteOffsets::new(text)?;\n+        let o = self.syntax().text_range().start();\n+        let offsets = QuoteOffsets {\n+            quotes: [offsets.quotes[0] + o, offsets.quotes[1] + o],\n+            contents: offsets.contents + o,\n+        };\n+        Some(offsets)\n+    }\n+    fn open_quote_text_range(&self) -> Option<TextRange> {\n+        self.quote_offsets().map(|it| it.quotes[0])\n+    }\n+\n+    fn close_quote_text_range(&self) -> Option<TextRange> {\n+        self.quote_offsets().map(|it| it.quotes[1])\n+    }\n+\n+    fn text_range_between_quotes(&self) -> Option<TextRange> {\n+        self.quote_offsets().map(|it| it.contents)\n+    }\n+}\n+\n+impl HasQuotes for String {}\n+impl HasQuotes for RawString {}\n+\n+pub trait HasStringValue: HasQuotes {\n+    fn value(&self) -> Option<std::string::String>;\n+}\n+\n pub struct String(SyntaxToken);\n \n impl AstToken for String {\n@@ -124,21 +182,16 @@ impl AstToken for String {\n     }\n }\n \n-impl String {\n-    pub fn value(&self) -> Option<std::string::String> {\n+impl HasStringValue for String {\n+    fn value(&self) -> Option<std::string::String> {\n         let text = self.text().as_str();\n-        let usual_string_range = find_usual_string_range(text)?;\n-        let start_of_inside = usual_string_range.start().to_usize() + 1;\n-        let end_of_inside = usual_string_range.end().to_usize();\n-        let inside_str = &text[start_of_inside..end_of_inside];\n+        let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n \n-        let mut buf = std::string::String::with_capacity(inside_str.len());\n+        let mut buf = std::string::String::with_capacity(text.len());\n         let mut has_error = false;\n-        rustc_lexer::unescape::unescape_str(inside_str, &mut |_, unescaped_char| {\n-            match unescaped_char {\n-                Ok(c) => buf.push(c),\n-                Err(_) => has_error = true,\n-            }\n+        rustc_lexer::unescape::unescape_str(text, &mut |_, unescaped_char| match unescaped_char {\n+            Ok(c) => buf.push(c),\n+            Err(_) => has_error = true,\n         });\n \n         if has_error {\n@@ -162,57 +215,18 @@ impl AstToken for RawString {\n     }\n }\n \n-impl RawString {\n-    pub fn value(&self) -> Option<std::string::String> {\n-        let text = self.text().as_str();\n-        let usual_string_range = find_usual_string_range(text)?;\n-        let start_of_inside = usual_string_range.start().to_usize() + 1;\n-        let end_of_inside = usual_string_range.end().to_usize();\n-        let inside_str = &text[start_of_inside..end_of_inside];\n-        Some(inside_str.to_string())\n-    }\n-\n-    pub fn open_quote_text_range(&self) -> Option<TextRange> {\n+impl HasStringValue for RawString {\n+    fn value(&self) -> Option<std::string::String> {\n         let text = self.text().as_str();\n-        let usual_string_range = find_usual_string_range(text)?;\n-\n-        let start = self.syntax().text_range().start();\n-        let len = usual_string_range.start() + TextUnit::of_char('\"');\n-        Some(TextRange::offset_len(start, len))\n-    }\n-\n-    pub fn close_quote_text_range(&self) -> Option<TextRange> {\n-        let text = self.text().as_str();\n-        let usual_string_range = find_usual_string_range(text)?;\n-\n-        let end = self.syntax().text_range().end();\n-        let len = TextUnit::of_str(text) - usual_string_range.end();\n-        Some(TextRange::from_to(end - len, end))\n+        let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n+        Some(text.to_string())\n     }\n+}\n \n+impl RawString {\n     pub fn map_range_up(&self, range: TextRange) -> Option<TextRange> {\n-        // FIXME: handle escapes here properly\n-        let text = self.text().as_str();\n-        let usual_string_range = find_usual_string_range(text)?;\n-        Some(\n-            range\n-                + self.syntax().text_range().start()\n-                + TextUnit::of_char('\"')\n-                + usual_string_range.start(),\n-        )\n-    }\n-}\n-\n-fn find_usual_string_range(s: &str) -> Option<TextRange> {\n-    let left_quote = s.find('\"')?;\n-    let right_quote = s.rfind('\"')?;\n-    if left_quote == right_quote {\n-        // `s` only contains one quote\n-        None\n-    } else {\n-        Some(TextRange::from_to(\n-            TextUnit::from(left_quote as u32),\n-            TextUnit::from(right_quote as u32),\n-        ))\n+        let contents_range = self.text_range_between_quotes()?;\n+        assert!(range.is_subrange(&TextRange::offset_len(0.into(), contents_range.len())));\n+        Some(range + contents_range.start())\n     }\n }"}]}