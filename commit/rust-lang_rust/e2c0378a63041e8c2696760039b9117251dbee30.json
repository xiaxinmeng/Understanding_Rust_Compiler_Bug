{"sha": "e2c0378a63041e8c2696760039b9117251dbee30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYzAzNzhhNjMwNDFlOGMyNjk2NzYwMDM5YjkxMTcyNTFkYmVlMzA=", "commit": {"author": {"name": "Eh2406", "email": "YeomanYaacov@gmail.com", "date": "2018-06-27T20:46:27Z"}, "committer": {"name": "Eh2406", "email": "YeomanYaacov@gmail.com", "date": "2018-06-28T14:18:29Z"}, "message": "move related types into the new module", "tree": {"sha": "084f14fb0e00590d5300b8e93fb318cbd5803f1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/084f14fb0e00590d5300b8e93fb318cbd5803f1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2c0378a63041e8c2696760039b9117251dbee30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c0378a63041e8c2696760039b9117251dbee30", "html_url": "https://github.com/rust-lang/rust/commit/e2c0378a63041e8c2696760039b9117251dbee30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2c0378a63041e8c2696760039b9117251dbee30/comments", "author": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4f03682df6cff533d7897c4e12f57d63c3635a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f03682df6cff533d7897c4e12f57d63c3635a3", "html_url": "https://github.com/rust-lang/rust/commit/e4f03682df6cff533d7897c4e12f57d63c3635a3"}], "stats": {"total": 109, "additions": 57, "deletions": 52}, "files": [{"sha": "5d4ffc8f4fd3818914919fb60943f517aa790405", "filename": "src/librustc_mir/borrow_check/nll/constraint_set.rs", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e2c0378a63041e8c2696760039b9117251dbee30/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c0378a63041e8c2696760039b9117251dbee30/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_set.rs?ref=e2c0378a63041e8c2696760039b9117251dbee30", "patch": "@@ -1,7 +1,10 @@\n-use borrow_check::nll::region_infer::{ConstraintIndex, OutlivesConstraint};\n-use rustc_data_structures::indexed_vec::IndexVec;\n+use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::fx::FxHashSet;\n use rustc::ty::RegionVid;\n+use rustc::mir::Location;\n+\n+use std::fmt;\n+use syntax_pos::Span;\n \n #[derive(Clone, Default)]\n crate struct ConstraintSet {\n@@ -31,3 +34,50 @@ impl ConstraintSet {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct OutlivesConstraint {\n+    // NB. The ordering here is not significant for correctness, but\n+    // it is for convenience. Before we dump the constraints in the\n+    // debugging logs, we sort them, and we'd like the \"super region\"\n+    // to be first, etc. (In particular, span should remain last.)\n+    /// The region SUP must outlive SUB...\n+    pub sup: RegionVid,\n+\n+    /// Region that must be outlived.\n+    pub sub: RegionVid,\n+\n+    /// At this location.\n+    pub point: Location,\n+\n+    /// Later on, we thread the constraints onto a linked list\n+    /// grouped by their `sub` field. So if you had:\n+    ///\n+    /// Index | Constraint | Next Field\n+    /// ----- | ---------- | ----------\n+    /// 0     | `'a: 'b`   | Some(2)\n+    /// 1     | `'b: 'c`   | None\n+    /// 2     | `'c: 'b`   | None\n+    pub next: Option<ConstraintIndex>,\n+\n+    /// Where did this constraint arise?\n+    pub span: Span,\n+}\n+\n+impl OutlivesConstraint {\n+    pub fn dedup_key(&self) -> (RegionVid, RegionVid) {\n+        (self.sup, self.sub)\n+    }\n+}\n+\n+impl fmt::Debug for OutlivesConstraint {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        write!(\n+            formatter,\n+            \"({:?}: {:?} @ {:?}) due to {:?}\",\n+            self.sup, self.sub, self.point, self.span\n+        )\n+    }\n+}\n+\n+newtype_index!(ConstraintIndex { DEBUG_FORMAT = \"ConstraintIndex({})\" });\n+"}, {"sha": "78ec60baa874ad6d6f2d943b56dc6d5ff5a4b800", "filename": "src/librustc_mir/borrow_check/nll/region_infer/graphviz.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2c0378a63041e8c2696760039b9117251dbee30/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c0378a63041e8c2696760039b9117251dbee30/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs?ref=e2c0378a63041e8c2696760039b9117251dbee30", "patch": "@@ -17,6 +17,8 @@ use rustc_data_structures::indexed_vec::Idx;\n use std::borrow::Cow;\n use std::io::{self, Write};\n use super::*;\n+use borrow_check::nll::constraint_set::OutlivesConstraint;\n+\n \n impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Write out the region constraint graph."}, {"sha": "0f6c98920d78d3f1805dddd5d70ff3bc3c3ddf49", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e2c0378a63041e8c2696760039b9117251dbee30/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c0378a63041e8c2696760039b9117251dbee30/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=e2c0378a63041e8c2696760039b9117251dbee30", "patch": "@@ -10,7 +10,7 @@\n \n use super::universal_regions::UniversalRegions;\n use borrow_check::nll::region_infer::values::ToElementIndex;\n-use borrow_check::nll::constraint_set::ConstraintSet;\n+use borrow_check::nll::constraint_set::{ConstraintIndex, ConstraintSet, OutlivesConstraint};\n use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::infer::error_reporting::nice_region_error::NiceRegionError;\n@@ -26,7 +26,6 @@ use rustc::ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable};\n use rustc::util::common::{self, ErrorReported};\n use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n-use std::fmt;\n use std::rc::Rc;\n use syntax_pos::Span;\n \n@@ -115,43 +114,6 @@ pub(crate) enum Cause {\n     UniversalRegion(RegionVid),\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct OutlivesConstraint {\n-    // NB. The ordering here is not significant for correctness, but\n-    // it is for convenience. Before we dump the constraints in the\n-    // debugging logs, we sort them, and we'd like the \"super region\"\n-    // to be first, etc. (In particular, span should remain last.)\n-    /// The region SUP must outlive SUB...\n-    pub sup: RegionVid,\n-\n-    /// Region that must be outlived.\n-    pub sub: RegionVid,\n-\n-    /// At this location.\n-    pub point: Location,\n-\n-    /// Later on, we thread the constraints onto a linked list\n-    /// grouped by their `sub` field. So if you had:\n-    ///\n-    /// Index | Constraint | Next Field\n-    /// ----- | ---------- | ----------\n-    /// 0     | `'a: 'b`   | Some(2)\n-    /// 1     | `'b: 'c`   | None\n-    /// 2     | `'c: 'b`   | None\n-    pub next: Option<ConstraintIndex>,\n-\n-    /// Where did this constraint arise?\n-    pub span: Span,\n-}\n-\n-impl OutlivesConstraint {\n-    pub fn dedup_key(&self) -> (RegionVid, RegionVid) {\n-        (self.sup, self.sub)\n-    }\n-}\n-\n-newtype_index!(ConstraintIndex { DEBUG_FORMAT = \"ConstraintIndex({})\" });\n-\n /// A \"type test\" corresponds to an outlives constraint between a type\n /// and a lifetime, like `T: 'x` or `<T as Foo>::Bar: 'x`.  They are\n /// translated from the `Verify` region constraints in the ordinary\n@@ -1153,16 +1115,6 @@ impl<'tcx> RegionDefinition<'tcx> {\n     }\n }\n \n-impl fmt::Debug for OutlivesConstraint {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        write!(\n-            formatter,\n-            \"({:?}: {:?} @ {:?}) due to {:?}\",\n-            self.sup, self.sub, self.point, self.span\n-        )\n-    }\n-}\n-\n pub trait ClosureRegionRequirementsExt<'gcx, 'tcx> {\n     fn apply_requirements(\n         &self,"}, {"sha": "3100df3e8f629aa19dd606ba9fe35b2849c0d236", "filename": "src/librustc_mir/borrow_check/nll/type_check/constraint_conversion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2c0378a63041e8c2696760039b9117251dbee30/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c0378a63041e8c2696760039b9117251dbee30/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs?ref=e2c0378a63041e8c2696760039b9117251dbee30", "patch": "@@ -9,8 +9,9 @@\n // except according to those terms.\n \n use borrow_check::location::LocationTable;\n+use borrow_check::nll::constraint_set::OutlivesConstraint;\n use borrow_check::nll::facts::AllFacts;\n-use borrow_check::nll::region_infer::{OutlivesConstraint, RegionTest, TypeTest};\n+use borrow_check::nll::region_infer::{RegionTest, TypeTest};\n use borrow_check::nll::type_check::Locations;\n use borrow_check::nll::universal_regions::UniversalRegions;\n use borrow_check::nll::constraint_set::ConstraintSet;"}]}