{"sha": "40bcbed3c7809fe779734d6a5c93e4b5e5d4b420", "node_id": "C_kwDOAAsO6NoAKDQwYmNiZWQzYzc4MDlmZTc3OTczNGQ2YTVjOTNlNGI1ZTVkNGI0MjA", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-03T02:06:38Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-04T14:26:58Z"}, "message": "Avoid explicitly handling res when is not needed", "tree": {"sha": "233a9f8a464d8d16ae6704a4716bb86d292d113d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/233a9f8a464d8d16ae6704a4716bb86d292d113d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40bcbed3c7809fe779734d6a5c93e4b5e5d4b420", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmLr1zIACgkQgTGiTgx5\n7687/hAAwEetbkWw9nw4yB14Yj/PzHjRdVMaRm73LWD5vzO0UH+doygS1xfn1unb\nIURs0U0eGOCQ3pk/qLVIAFuav45uIPxdBVNXoekqEwrw9M1HoDwbxEB/YqpfeBBH\nYGwqlfemd5d4jAmx1DPjjh20lJ5O6iuEDNHg6YMYH//NPU14ie8rfMkHoCQixhqH\nR+9SEl96EMKCZgzcQkLOzp+gerfu56FbGXKlGLZkE9xWgBSKIHwvwwgrHe7CRJ1X\n0hXX/AhHPElB1lhzlLg7nwkwIItxX9mUDoQpa8kf7TDqOrN49pGsO2snIJI/WAju\nXmWu6pSdnsGfPRVtvihaHA9AaciK4emaYwNT5VtsVyIiArrijyXMD18+auDGRobg\nZeMH/KEv1J+/dBbV8NN6qOZq0nuyt/Vi+zDOAJhddaltjSj3OyHoO1mirU0DHdZO\naFB5pG7D1/NsxE8MjedX2ToICpSXILIeGM3bFM1dqvreeLGf5rl7IAHulAMw2lH+\nc2NUMiYuK78OUFCsCOH9hHLtQ9mCqEQFz0KbwQnaU3C+Oo/lnZcAVaZ7K1+lwkPt\nVuhY6sp+n8m4jV1MD85KGNShQ/oIugI05BJS2IcX4xCkHC4MvplTPVOR8BOzzdu5\nQXveu+HBEnqUKtNhWhyIKywwBXBdEb3fBR9HN+mkB6tL8q3tr1I=\n=UHc3\n-----END PGP SIGNATURE-----", "payload": "tree 233a9f8a464d8d16ae6704a4716bb86d292d113d\nparent cd3c388418c96fc801b29dd44e864c4590540c28\nauthor Santiago Pastorino <spastorino@gmail.com> 1659492398 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1659623218 -0300\n\nAvoid explicitly handling res when is not needed\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40bcbed3c7809fe779734d6a5c93e4b5e5d4b420", "html_url": "https://github.com/rust-lang/rust/commit/40bcbed3c7809fe779734d6a5c93e4b5e5d4b420", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40bcbed3c7809fe779734d6a5c93e4b5e5d4b420/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd3c388418c96fc801b29dd44e864c4590540c28", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3c388418c96fc801b29dd44e864c4590540c28", "html_url": "https://github.com/rust-lang/rust/commit/cd3c388418c96fc801b29dd44e864c4590540c28"}], "stats": {"total": 77, "additions": 46, "deletions": 31}, "files": [{"sha": "ee4c0036f76981a3ca444557121fa7ab4dde1e27", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40bcbed3c7809fe779734d6a5c93e4b5e5d4b420/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40bcbed3c7809fe779734d6a5c93e4b5e5d4b420/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=40bcbed3c7809fe779734d6a5c93e4b5e5d4b420", "patch": "@@ -1453,11 +1453,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             GenericParamKind::Lifetime => {\n                 let ident_span = self.lower_span(ident.span);\n                 let ident = self.lower_ident(ident);\n-                let res = self.resolver.get_lifetime_res(id).unwrap_or_else(|| {\n-                    panic!(\"Missing resolution for lifetime {:?} at {:?}\", id, ident.span)\n-                });\n                 let lt_id = self.next_node_id();\n-                let lifetime = self.new_named_lifetime_with_res(lt_id, ident_span, ident, res);\n+                let lifetime = self.new_named_lifetime(id, lt_id, ident_span, ident);\n                 Some(hir::WherePredicate::RegionPredicate(hir::WhereRegionPredicate {\n                     lifetime,\n                     span,"}, {"sha": "69398918f897e730541f20ccce9973ec3117708c", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 45, "deletions": 27, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/40bcbed3c7809fe779734d6a5c93e4b5e5d4b420/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40bcbed3c7809fe779734d6a5c93e4b5e5d4b420/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=40bcbed3c7809fe779734d6a5c93e4b5e5d4b420", "patch": "@@ -1361,10 +1361,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             lctx.with_remapping(new_remapping, |lctx| {\n                 let hir_bounds = lctx.lower_param_bounds(bounds, itctx);\n \n-                let lifetime_defs =\n-                    lctx.arena.alloc_from_iter(collected_lifetimes.iter().map(|&(lifetime, _)| {\n-                        let hir_id = lctx.lower_node_id(lifetime.id);\n-                        debug_assert_ne!(lctx.opt_local_def_id(lifetime.id), None);\n+                let lifetime_defs = lctx.arena.alloc_from_iter(collected_lifetimes.iter().map(\n+                    |&(new_node_id, lifetime)| {\n+                        let hir_id = lctx.lower_node_id(new_node_id);\n+                        debug_assert_ne!(lctx.opt_local_def_id(new_node_id), None);\n \n                         let (name, kind) = if lifetime.ident.name == kw::UnderscoreLifetime {\n                             (hir::ParamName::Fresh, hir::LifetimeParamKind::Elided)\n@@ -1383,7 +1383,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             kind: hir::GenericParamKind::Lifetime { kind },\n                             colon_span: None,\n                         }\n-                    }));\n+                    },\n+                ));\n \n                 debug!(\"lower_opaque_impl_trait: lifetime_defs={:#?}\", lifetime_defs);\n \n@@ -1405,7 +1406,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         });\n \n         let lifetimes =\n-            self.arena.alloc_from_iter(collected_lifetimes.into_iter().map(|(lifetime, res)| {\n+            self.arena.alloc_from_iter(collected_lifetimes.into_iter().map(|(_, lifetime)| {\n                 let id = self.next_node_id();\n                 let span = lifetime.ident.span;\n \n@@ -1415,7 +1416,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     lifetime.ident\n                 };\n \n-                let l = self.new_named_lifetime_with_res(id, span, ident, res);\n+                let l = self.new_named_lifetime(lifetime.id, id, span, ident);\n                 hir::GenericArg::Lifetime(l)\n             }));\n \n@@ -1452,7 +1453,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         parent_def_id: LocalDefId,\n         lifetimes_in_bounds: &[Lifetime],\n         remapping: &mut FxHashMap<LocalDefId, LocalDefId>,\n-    ) -> Vec<(Lifetime, LifetimeRes)> {\n+    ) -> Vec<(NodeId, Lifetime)> {\n         let mut result = Vec::new();\n \n         for lifetime in lifetimes_in_bounds {\n@@ -1471,8 +1472,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         );\n                         remapping.insert(old_def_id, new_def_id);\n \n-                        let new_lifetime = Lifetime { id: node_id, ident: lifetime.ident };\n-                        result.push((new_lifetime, res));\n+                        result.push((node_id, *lifetime));\n                     }\n                 }\n \n@@ -1489,8 +1489,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         );\n                         remapping.insert(old_def_id, new_def_id);\n \n-                        let new_lifetime = Lifetime { id: node_id, ident: lifetime.ident };\n-                        result.push((new_lifetime, res));\n+                        result.push((node_id, *lifetime));\n                     }\n                 }\n \n@@ -1732,8 +1731,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 }\n             };\n \n-            let new_lifetime = Lifetime { id: inner_node_id, ident };\n-            captures.push((new_lifetime, inner_res));\n+            let lifetime = Lifetime { id: outer_node_id, ident };\n+            captures.push((inner_node_id, lifetime, Some(inner_res)));\n         }\n \n         debug!(?captures);\n@@ -1743,11 +1742,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 lifetime_collector::lifetimes_in_ret_ty(&this.resolver, output);\n             debug!(?lifetimes_in_bounds);\n \n-            captures.extend(this.create_lifetime_defs(\n-                opaque_ty_def_id,\n-                &lifetimes_in_bounds,\n-                &mut new_remapping,\n-            ));\n+            captures.extend(\n+                this.create_lifetime_defs(\n+                    opaque_ty_def_id,\n+                    &lifetimes_in_bounds,\n+                    &mut new_remapping,\n+                )\n+                .into_iter()\n+                .map(|(new_node_id, lifetime)| (new_node_id, lifetime, None)),\n+            );\n \n             this.with_remapping(new_remapping, |this| {\n                 // We have to be careful to get elision right here. The\n@@ -1761,10 +1764,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 let future_bound =\n                     this.lower_async_fn_output_type_to_future_bound(output, fn_def_id, span);\n \n-                let generic_params =\n-                    this.arena.alloc_from_iter(captures.iter().map(|&(lifetime, _)| {\n-                        let hir_id = this.lower_node_id(lifetime.id);\n-                        debug_assert_ne!(this.opt_local_def_id(lifetime.id), None);\n+                let generic_params = this.arena.alloc_from_iter(captures.iter().map(\n+                    |&(new_node_id, lifetime, _)| {\n+                        let hir_id = this.lower_node_id(new_node_id);\n+                        debug_assert_ne!(this.opt_local_def_id(new_node_id), None);\n \n                         let (name, kind) = if lifetime.ident.name == kw::UnderscoreLifetime {\n                             (hir::ParamName::Fresh, hir::LifetimeParamKind::Elided)\n@@ -1783,7 +1786,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             kind: hir::GenericParamKind::Lifetime { kind },\n                             colon_span: None,\n                         }\n-                    }));\n+                    },\n+                ));\n                 debug!(\"lower_async_fn_ret_ty: generic_params={:#?}\", generic_params);\n \n                 let opaque_ty_item = hir::OpaqueTy {\n@@ -1819,7 +1823,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // For the \"output\" lifetime parameters, we just want to\n         // generate `'_`.\n         let generic_args =\n-            self.arena.alloc_from_iter(captures.into_iter().map(|(lifetime, res)| {\n+            self.arena.alloc_from_iter(captures.into_iter().map(|(_, lifetime, res)| {\n                 let id = self.next_node_id();\n                 let span = lifetime.ident.span;\n \n@@ -1829,6 +1833,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     lifetime.ident\n                 };\n \n+                let res = res.unwrap_or(\n+                    self.resolver.get_lifetime_res(lifetime.id).unwrap_or(LifetimeRes::Error),\n+                );\n                 let l = self.new_named_lifetime_with_res(id, span, ident, res);\n                 hir::GenericArg::Lifetime(l)\n             }));\n@@ -1901,8 +1908,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_lifetime(&mut self, l: &Lifetime) -> hir::Lifetime {\n         let span = self.lower_span(l.ident.span);\n         let ident = self.lower_ident(l.ident);\n-        let res = self.resolver.get_lifetime_res(l.id).unwrap_or(LifetimeRes::Error);\n-        self.new_named_lifetime_with_res(l.id, span, ident, res)\n+        self.new_named_lifetime(l.id, l.id, span, ident)\n     }\n \n     #[tracing::instrument(level = \"debug\", skip(self))]\n@@ -1936,6 +1942,18 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::Lifetime { hir_id: self.lower_node_id(id), span: self.lower_span(span), name }\n     }\n \n+    #[tracing::instrument(level = \"debug\", skip(self))]\n+    fn new_named_lifetime(\n+        &mut self,\n+        id: NodeId,\n+        new_id: NodeId,\n+        span: Span,\n+        ident: Ident,\n+    ) -> hir::Lifetime {\n+        let res = self.resolver.get_lifetime_res(id).unwrap_or(LifetimeRes::Error);\n+        self.new_named_lifetime_with_res(new_id, span, ident, res)\n+    }\n+\n     fn lower_generic_params_mut<'s>(\n         &'s mut self,\n         params: &'s [GenericParam],"}]}