{"sha": "67aca498c6b17b8888f17c5035e2c6f257e32c5c", "node_id": "C_kwDOAAsO6NoAKDY3YWNhNDk4YzZiMTdiODg4OGYxN2M1MDM1ZTJjNmYyNTdlMzJjNWM", "commit": {"author": {"name": "Christopher Durham", "email": "cad97@cad97.com", "date": "2022-05-23T14:20:57Z"}, "committer": {"name": "Christopher Durham", "email": "cad97@cad97.com", "date": "2022-05-23T14:20:57Z"}, "message": "Put a bound on collection misbehavior\n\nAs currently written, when a logic error occurs in a collection's trait\nparameters, this allows *completely arbitrary* misbehavior, so long as\nit does not cause undefined behavior in std. However, because the extent\nof misbehavior is not specified, it is allowed for *any* code in std to\nstart misbehaving in arbitrary ways which are not formally UB; consider\nthe theoretical example of a global which gets set on an observed logic\nerror. Because the misbehavior is only bound by not resulting in UB from\nsafe APIs and the crate-level encapsulation boundary of all of std, this\nmakes writing user unsafe code that utilizes std theoretically\nimpossible, as it now relies on undocumented QOI that unrelated parts of\nstd cannot be caused to misbehave by a misuse of std::collections APIs.\n\nIn practice, this is a nonconcern, because std has reasonable QOI and an\nimplementation that takes advantage of this freedom is essentially a\nmalicious implementation and only compliant by the most langauage-lawyer\nreading of the documentation.\n\nTo close this hole, we just add a small clause to the existing logic\nerror paragraph that ensures that any misbehavior is limited to the\ncollection which observed the logic error, making it more plausible to\nprove the soundness of user unsafe code.\n\nThis is not meant to be formal; a formal refinement would likely need to\nmention that values derived from the collection can also misbehave after a\nlogic error is observed, as well as define what it means to \"observe\" a\nlogic error in the first place. This fix errs on the side of informality\nin order to close the hole without complicating a normal reading which\ncan assume a reasonable nonmalicious QOI.\n\nSee also [discussion on IRLO][1].\n\n[1]: https://internals.rust-lang.org/t/using-std-collections-and-unsafe-anything-can-happen/16640", "tree": {"sha": "918fa6f966f709a19a075c1689665853fe1f5271", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/918fa6f966f709a19a075c1689665853fe1f5271"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67aca498c6b17b8888f17c5035e2c6f257e32c5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67aca498c6b17b8888f17c5035e2c6f257e32c5c", "html_url": "https://github.com/rust-lang/rust/commit/67aca498c6b17b8888f17c5035e2c6f257e32c5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67aca498c6b17b8888f17c5035e2c6f257e32c5c/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32c8c5df06c025441ad04791d7982d65c79a60e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/32c8c5df06c025441ad04791d7982d65c79a60e4", "html_url": "https://github.com/rust-lang/rust/commit/32c8c5df06c025441ad04791d7982d65c79a60e4"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "839088eac21eadf84207b3727f413458210aaa8b", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/67aca498c6b17b8888f17c5035e2c6f257e32c5c/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67aca498c6b17b8888f17c5035e2c6f257e32c5c/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=67aca498c6b17b8888f17c5035e2c6f257e32c5c", "patch": "@@ -166,9 +166,10 @@ mod tests;\n /// item's ordering relative to any other item, as determined by the [`Ord`]\n /// trait, changes while it is in the heap. This is normally only possible\n /// through [`Cell`], [`RefCell`], global state, I/O, or unsafe code. The\n-/// behavior resulting from such a logic error is not specified (it\n-/// could include panics, incorrect results, aborts, memory leaks, or\n-/// non-termination) but will not be undefined behavior.\n+/// behavior resulting from such a logic error is not specified, but will\n+/// be encapsulated to the `BinaryHeap` that observed the logic error and not\n+/// result in undefined behavior. This could include panics, incorrect results,\n+/// aborts, memory leaks, and non-termination.\n ///\n /// # Examples\n ///"}, {"sha": "28b44e3acb9da31917348d5a4467a8d0b024e88e", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67aca498c6b17b8888f17c5035e2c6f257e32c5c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67aca498c6b17b8888f17c5035e2c6f257e32c5c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=67aca498c6b17b8888f17c5035e2c6f257e32c5c", "patch": "@@ -64,9 +64,9 @@ pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n /// It is a logic error for a key to be modified in such a way that the key's ordering relative to\n /// any other key, as determined by the [`Ord`] trait, changes while it is in the map. This is\n /// normally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n-/// The behavior resulting from such a logic error is not specified (it could include panics,\n-/// incorrect results, aborts, memory leaks, or non-termination) but will not be undefined\n-/// behavior.\n+/// The behavior resulting from such a logic error is not specified, but will be encapsulated to the\n+/// `BTreeSet` that observed the logic error and not result in undefined behavior. This could\n+/// include panics, incorrect results, aborts, memory leaks, and non-termination.\n ///\n /// Iterators obtained from functions such as [`BTreeMap::iter`], [`BTreeMap::values`], or\n /// [`BTreeMap::keys`] produce their items in order by key, and take worst-case logarithmic and"}, {"sha": "20ef834eaeef3153ee62f7eeab94e5200052a800", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67aca498c6b17b8888f17c5035e2c6f257e32c5c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67aca498c6b17b8888f17c5035e2c6f257e32c5c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=67aca498c6b17b8888f17c5035e2c6f257e32c5c", "patch": "@@ -23,9 +23,9 @@ use super::Recover;\n /// It is a logic error for an item to be modified in such a way that the item's ordering relative\n /// to any other item, as determined by the [`Ord`] trait, changes while it is in the set. This is\n /// normally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n-/// The behavior resulting from such a logic error is not specified (it could include panics,\n-/// incorrect results, aborts, memory leaks, or non-termination) but will not be undefined\n-/// behavior.\n+/// The behavior resulting from such a logic error is not specified, but will be encapsulated to the\n+/// `BTreeSet` that observed the logic error and not result in undefined behavior. This could\n+/// include panics, incorrect results, aborts, memory leaks, and non-termination.\n ///\n /// Iterators returned by [`BTreeSet::iter`] produce their items in order, and take worst-case\n /// logarithmic and amortized constant time per item returned."}, {"sha": "4ec423eb27f31093f5689e700b06edac0fe392a6", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67aca498c6b17b8888f17c5035e2c6f257e32c5c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67aca498c6b17b8888f17c5035e2c6f257e32c5c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=67aca498c6b17b8888f17c5035e2c6f257e32c5c", "patch": "@@ -54,7 +54,8 @@ use crate::sys;\n /// the [`Eq`] trait, changes while it is in the map. This is normally only\n /// possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n /// The behavior resulting from such a logic error is not specified, but will\n-/// not result in undefined behavior. This could include panics, incorrect results,\n+/// be encapsulated to the `HashMap` that observed the logic error and not\n+/// result in undefined behavior. This could include panics, incorrect results,\n /// aborts, memory leaks, and non-termination.\n ///\n /// The hash table implementation is a Rust port of Google's [SwissTable]."}, {"sha": "da0572047eca803fe0053ddf855cd780ec59be7b", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/67aca498c6b17b8888f17c5035e2c6f257e32c5c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67aca498c6b17b8888f17c5035e2c6f257e32c5c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=67aca498c6b17b8888f17c5035e2c6f257e32c5c", "patch": "@@ -33,13 +33,14 @@ use super::map::{map_try_reserve_error, RandomState};\n /// In other words, if two keys are equal, their hashes must be equal.\n ///\n ///\n-/// It is a logic error for an item to be modified in such a way that the\n-/// item's hash, as determined by the [`Hash`] trait, or its equality, as\n-/// determined by the [`Eq`] trait, changes while it is in the set. This is\n-/// normally only possible through [`Cell`], [`RefCell`], global state, I/O, or\n-/// unsafe code. The behavior resulting from such a logic error is not\n-/// specified (it could include panics, incorrect results, aborts, memory\n-/// leaks, or non-termination) but will not be undefined behavior.\n+/// It is a logic error for a key to be modified in such a way that the key's\n+/// hash, as determined by the [`Hash`] trait, or its equality, as determined by\n+/// the [`Eq`] trait, changes while it is in the map. This is normally only\n+/// possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n+/// The behavior resulting from such a logic error is not specified, but will\n+/// be encapsulated to the `HashSet` that observed the logic error and not\n+/// result in undefined behavior. This could include panics, incorrect results,\n+/// aborts, memory leaks, and non-termination.\n ///\n /// # Examples\n ///"}]}