{"sha": "a7f450ab2284ace796ce01f99919f058735c491c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZjQ1MGFiMjI4NGFjZTc5NmNlMDFmOTk5MTlmMDU4NzM1YzQ5MWM=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-24T02:32:33Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-24T02:32:33Z"}, "message": "indentation fix", "tree": {"sha": "c559367aa6b7a5c46835c2a5205a3224416c364b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c559367aa6b7a5c46835c2a5205a3224416c364b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7f450ab2284ace796ce01f99919f058735c491c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f450ab2284ace796ce01f99919f058735c491c", "html_url": "https://github.com/rust-lang/rust/commit/a7f450ab2284ace796ce01f99919f058735c491c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7f450ab2284ace796ce01f99919f058735c491c/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d2f836065b51d6f7fa50ccc17b07ff907ba2d46", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d2f836065b51d6f7fa50ccc17b07ff907ba2d46", "html_url": "https://github.com/rust-lang/rust/commit/7d2f836065b51d6f7fa50ccc17b07ff907ba2d46"}], "stats": {"total": 290, "additions": 145, "deletions": 145}, "files": [{"sha": "6ae03ee45062df7b018ac2cd4922bd7bf0ae5def", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 145, "deletions": 145, "changes": 290, "blob_url": "https://github.com/rust-lang/rust/blob/a7f450ab2284ace796ce01f99919f058735c491c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f450ab2284ace796ce01f99919f058735c491c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=a7f450ab2284ace796ce01f99919f058735c491c", "patch": "@@ -3451,152 +3451,152 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n \n     let tcx = ccx.tcx;\n     let (n_tps, inputs, output) = match *ccx.tcx.sess.str_of(it.ident) {\n-      ~\"size_of\" |\n-      ~\"pref_align_of\" | ~\"min_align_of\" => (1u, ~[], ty::mk_uint()),\n-      ~\"init\" => (1u, ~[], param(ccx, 0u)),\n-      ~\"uninit\" => (1u, ~[], param(ccx, 0u)),\n-      ~\"forget\" => (1u, ~[ param(ccx, 0) ], ty::mk_nil()),\n-      ~\"transmute\" => (2, ~[ param(ccx, 0) ], param(ccx, 1)),\n-      ~\"move_val\" | ~\"move_val_init\" => {\n-          (1u,\n+        ~\"size_of\" |\n+        ~\"pref_align_of\" | ~\"min_align_of\" => (1u, ~[], ty::mk_uint()),\n+        ~\"init\" => (1u, ~[], param(ccx, 0u)),\n+        ~\"uninit\" => (1u, ~[], param(ccx, 0u)),\n+        ~\"forget\" => (1u, ~[ param(ccx, 0) ], ty::mk_nil()),\n+        ~\"transmute\" => (2, ~[ param(ccx, 0) ], param(ccx, 1)),\n+        ~\"move_val\" | ~\"move_val_init\" => {\n+            (1u,\n+             ~[\n+                ty::mk_mut_rptr(tcx, ty::re_bound(ty::br_anon(0)), param(ccx, 0)),\n+                param(ccx, 0u)\n+              ],\n+           ty::mk_nil())\n+        }\n+        ~\"needs_drop\" => (1u, ~[], ty::mk_bool()),\n+\n+        ~\"atomic_cxchg\"    | ~\"atomic_cxchg_acq\"| ~\"atomic_cxchg_rel\" => {\n+          (0,\n            ~[\n-              ty::mk_mut_rptr(tcx, ty::re_bound(ty::br_anon(0)), param(ccx, 0)),\n-              param(ccx, 0u)\n-            ],\n-         ty::mk_nil())\n-      }\n-      ~\"needs_drop\" => (1u, ~[], ty::mk_bool()),\n-\n-      ~\"atomic_cxchg\"    | ~\"atomic_cxchg_acq\"| ~\"atomic_cxchg_rel\" => {\n-        (0,\n-         ~[\n-            ty::mk_mut_rptr(tcx,\n-                            ty::re_bound(ty::br_anon(0)),\n-                            ty::mk_int()),\n-            ty::mk_int(),\n-            ty::mk_int()\n-         ],\n-         ty::mk_int())\n-      }\n-      ~\"atomic_load\"     | ~\"atomic_load_acq\" => {\n-        (0,\n-         ~[\n-            ty::mk_imm_rptr(tcx, ty::re_bound(ty::br_anon(0)), ty::mk_int())\n-         ],\n-        ty::mk_int())\n-      }\n-      ~\"atomic_store\"    | ~\"atomic_store_rel\" => {\n-        (0,\n-         ~[\n-            ty::mk_mut_rptr(tcx, ty::re_bound(ty::br_anon(0)), ty::mk_int()),\n-            ty::mk_int()\n-         ],\n-         ty::mk_nil())\n-      }\n-      ~\"atomic_xchg\"     | ~\"atomic_xadd\"     | ~\"atomic_xsub\"     |\n-      ~\"atomic_xchg_acq\" | ~\"atomic_xadd_acq\" | ~\"atomic_xsub_acq\" |\n-      ~\"atomic_xchg_rel\" | ~\"atomic_xadd_rel\" | ~\"atomic_xsub_rel\" => {\n-        (0,\n-         ~[\n-            ty::mk_mut_rptr(tcx, ty::re_bound(ty::br_anon(0)), ty::mk_int()),\n-            ty::mk_int()\n-         ],\n-         ty::mk_int())\n-      }\n-\n-      ~\"get_tydesc\" => {\n-        // FIXME (#3730): return *intrinsic::tydesc, not *()\n-        (1u, ~[], ty::mk_nil_ptr(ccx.tcx))\n-      }\n-      ~\"visit_tydesc\" => {\n-        let tydesc_name = special_idents::tydesc;\n-        assert!(tcx.intrinsic_defs.contains_key(&tydesc_name));\n-        let (_, tydesc_ty) = tcx.intrinsic_defs.get_copy(&tydesc_name);\n-        let (_, visitor_object_ty) = ty::visitor_object_ty(tcx);\n-        let td_ptr = ty::mk_ptr(ccx.tcx, ty::mt {\n-            ty: tydesc_ty,\n-            mutbl: ast::m_imm\n-        });\n-        (0, ~[ td_ptr, visitor_object_ty ], ty::mk_nil())\n-      }\n-      ~\"frame_address\" => {\n-        let fty = ty::mk_closure(ccx.tcx, ty::ClosureTy {\n-            purity: ast::impure_fn,\n-            sigil: ast::BorrowedSigil,\n-            onceness: ast::Once,\n-            region: ty::re_bound(ty::br_anon(0)),\n-            bounds: ty::EmptyBuiltinBounds(),\n-            sig: ty::FnSig {\n-                bound_lifetime_names: opt_vec::Empty,\n-                inputs: ~[ty::mk_imm_ptr(ccx.tcx, ty::mk_mach_uint(ast::ty_u8))],\n-                output: ty::mk_nil()\n-            }\n-        });\n-        (0u, ~[fty], ty::mk_nil())\n-      }\n-      ~\"morestack_addr\" => {\n-        (0u, ~[], ty::mk_nil_ptr(ccx.tcx))\n-      }\n-      ~\"memcpy32\" => {\n-        (0,\n-         ~[\n-            ty::mk_ptr(tcx, ty::mt {\n-                ty: ty::mk_u8(),\n-                mutbl: ast::m_mutbl\n-            }),\n-            ty::mk_ptr(tcx, ty::mt {\n-                ty: ty::mk_u8(),\n-                mutbl: ast::m_imm\n-            }),\n-            ty::mk_u32()\n-         ],\n-         ty::mk_nil())\n-      }\n-      ~\"memcpy64\" => {\n-        (0,\n-         ~[\n-            ty::mk_ptr(tcx, ty::mt {\n-                ty: ty::mk_u8(),\n-                mutbl: ast::m_mutbl\n-            }),\n-            ty::mk_ptr(tcx, ty::mt {\n-                ty: ty::mk_u8(),\n-                mutbl: ast::m_imm\n-            }),\n-            ty::mk_u64()\n-         ],\n-         ty::mk_nil())\n-      }\n-      ~\"memmove32\" => {\n-        (0,\n-         ~[\n-            ty::mk_ptr(tcx, ty::mt {\n-                ty: ty::mk_u8(),\n-                mutbl: ast::m_mutbl\n-            }),\n-            ty::mk_ptr(tcx, ty::mt {\n-                ty: ty::mk_u8(),\n-                mutbl: ast::m_imm\n-            }),\n-            ty::mk_u32()\n-         ],\n-         ty::mk_nil())\n-      }\n-      ~\"memmove64\" => {\n-        (0,\n-         ~[\n-            ty::mk_ptr(tcx, ty::mt {\n-                ty: ty::mk_u8(),\n-                mutbl: ast::m_mutbl\n-            }),\n-            ty::mk_ptr(tcx, ty::mt {\n-                ty: ty::mk_u8(),\n-                mutbl: ast::m_imm\n-            }),\n-            ty::mk_u64()\n-         ],\n-         ty::mk_nil())\n-      }\n+              ty::mk_mut_rptr(tcx,\n+                              ty::re_bound(ty::br_anon(0)),\n+                              ty::mk_int()),\n+              ty::mk_int(),\n+              ty::mk_int()\n+           ],\n+           ty::mk_int())\n+        }\n+        ~\"atomic_load\"     | ~\"atomic_load_acq\" => {\n+          (0,\n+           ~[\n+              ty::mk_imm_rptr(tcx, ty::re_bound(ty::br_anon(0)), ty::mk_int())\n+           ],\n+          ty::mk_int())\n+        }\n+        ~\"atomic_store\"    | ~\"atomic_store_rel\" => {\n+          (0,\n+           ~[\n+              ty::mk_mut_rptr(tcx, ty::re_bound(ty::br_anon(0)), ty::mk_int()),\n+              ty::mk_int()\n+           ],\n+           ty::mk_nil())\n+        }\n+        ~\"atomic_xchg\"     | ~\"atomic_xadd\"     | ~\"atomic_xsub\"     |\n+        ~\"atomic_xchg_acq\" | ~\"atomic_xadd_acq\" | ~\"atomic_xsub_acq\" |\n+        ~\"atomic_xchg_rel\" | ~\"atomic_xadd_rel\" | ~\"atomic_xsub_rel\" => {\n+          (0,\n+           ~[\n+              ty::mk_mut_rptr(tcx, ty::re_bound(ty::br_anon(0)), ty::mk_int()),\n+              ty::mk_int()\n+           ],\n+           ty::mk_int())\n+        }\n+\n+        ~\"get_tydesc\" => {\n+          // FIXME (#3730): return *intrinsic::tydesc, not *()\n+          (1u, ~[], ty::mk_nil_ptr(ccx.tcx))\n+        }\n+        ~\"visit_tydesc\" => {\n+          let tydesc_name = special_idents::tydesc;\n+          assert!(tcx.intrinsic_defs.contains_key(&tydesc_name));\n+          let (_, tydesc_ty) = tcx.intrinsic_defs.get_copy(&tydesc_name);\n+          let (_, visitor_object_ty) = ty::visitor_object_ty(tcx);\n+          let td_ptr = ty::mk_ptr(ccx.tcx, ty::mt {\n+              ty: tydesc_ty,\n+              mutbl: ast::m_imm\n+          });\n+          (0, ~[ td_ptr, visitor_object_ty ], ty::mk_nil())\n+        }\n+        ~\"frame_address\" => {\n+          let fty = ty::mk_closure(ccx.tcx, ty::ClosureTy {\n+              purity: ast::impure_fn,\n+              sigil: ast::BorrowedSigil,\n+              onceness: ast::Once,\n+              region: ty::re_bound(ty::br_anon(0)),\n+              bounds: ty::EmptyBuiltinBounds(),\n+              sig: ty::FnSig {\n+                  bound_lifetime_names: opt_vec::Empty,\n+                  inputs: ~[ty::mk_imm_ptr(ccx.tcx, ty::mk_mach_uint(ast::ty_u8))],\n+                  output: ty::mk_nil()\n+              }\n+          });\n+          (0u, ~[fty], ty::mk_nil())\n+        }\n+        ~\"morestack_addr\" => {\n+          (0u, ~[], ty::mk_nil_ptr(ccx.tcx))\n+        }\n+        ~\"memcpy32\" => {\n+          (0,\n+           ~[\n+              ty::mk_ptr(tcx, ty::mt {\n+                  ty: ty::mk_u8(),\n+                  mutbl: ast::m_mutbl\n+              }),\n+              ty::mk_ptr(tcx, ty::mt {\n+                  ty: ty::mk_u8(),\n+                  mutbl: ast::m_imm\n+              }),\n+              ty::mk_u32()\n+           ],\n+           ty::mk_nil())\n+        }\n+        ~\"memcpy64\" => {\n+          (0,\n+           ~[\n+              ty::mk_ptr(tcx, ty::mt {\n+                  ty: ty::mk_u8(),\n+                  mutbl: ast::m_mutbl\n+              }),\n+              ty::mk_ptr(tcx, ty::mt {\n+                  ty: ty::mk_u8(),\n+                  mutbl: ast::m_imm\n+              }),\n+              ty::mk_u64()\n+           ],\n+           ty::mk_nil())\n+        }\n+        ~\"memmove32\" => {\n+          (0,\n+           ~[\n+              ty::mk_ptr(tcx, ty::mt {\n+                  ty: ty::mk_u8(),\n+                  mutbl: ast::m_mutbl\n+              }),\n+              ty::mk_ptr(tcx, ty::mt {\n+                  ty: ty::mk_u8(),\n+                  mutbl: ast::m_imm\n+              }),\n+              ty::mk_u32()\n+           ],\n+           ty::mk_nil())\n+        }\n+        ~\"memmove64\" => {\n+          (0,\n+           ~[\n+              ty::mk_ptr(tcx, ty::mt {\n+                  ty: ty::mk_u8(),\n+                  mutbl: ast::m_mutbl\n+              }),\n+              ty::mk_ptr(tcx, ty::mt {\n+                  ty: ty::mk_u8(),\n+                  mutbl: ast::m_imm\n+              }),\n+              ty::mk_u64()\n+           ],\n+           ty::mk_nil())\n+        }\n         ~\"sqrtf32\" => (0, ~[ ty::mk_f32() ], ty::mk_f32()),\n         ~\"sqrtf64\" => (0, ~[ ty::mk_f64() ], ty::mk_f64()),\n         ~\"powif32\" => {"}]}