{"sha": "e44fdf97929d1315add3b76208adf99e8299252d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NGZkZjk3OTI5ZDEzMTVhZGQzYjc2MjA4YWRmOTllODI5OTI1MmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-21T17:09:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-21T17:09:25Z"}, "message": "Auto merge of #63790 - Centril:rollup-m4ax3r9, r=Centril\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #61236 (take into account the system theme)\n - #63717 (Fix nested eager expansions in arguments of `format_args`)\n - #63747 (update Miri)\n - #63772 (ci: move libc mirrors to the rust-lang-ci-mirrors bucket)\n - #63780 (Improve diagnostics: break/continue in wrong context)\n - #63781 (Run Clippy without json-rendered flag)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "fe45714c22cfe937c213890b6995b1788eeed146", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe45714c22cfe937c213890b6995b1788eeed146"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e44fdf97929d1315add3b76208adf99e8299252d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e44fdf97929d1315add3b76208adf99e8299252d", "html_url": "https://github.com/rust-lang/rust/commit/e44fdf97929d1315add3b76208adf99e8299252d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e44fdf97929d1315add3b76208adf99e8299252d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "html_url": "https://github.com/rust-lang/rust/commit/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1"}, {"sha": "1294774e94ba42702a8405c0add75bef234f550b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1294774e94ba42702a8405c0add75bef234f550b", "html_url": "https://github.com/rust-lang/rust/commit/1294774e94ba42702a8405c0add75bef234f550b"}], "stats": {"total": 296, "additions": 194, "deletions": 102}, "files": [{"sha": "4e49aaa16eae1eabef04f18b93308ad47e5389b2", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -875,8 +875,7 @@ impl<'a> Builder<'a> {\n         }\n \n         if cmd == \"clippy\" {\n-            extra_args.push_str(\"-Zforce-unstable-if-unmarked -Zunstable-options \\\n-                --json-rendered=termcolor\");\n+            extra_args.push_str(\"-Zforce-unstable-if-unmarked\");\n         }\n \n         if !extra_args.is_empty() {"}, {"sha": "de8c359d16757a223b84fce8afce6ae2331bd61d", "filename": "src/ci/docker/dist-various-1/install-mipsel-musl.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-mipsel-musl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-mipsel-musl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-mipsel-musl.sh?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -5,7 +5,7 @@ mkdir /usr/local/mipsel-linux-musl\n # Note that this originally came from:\n # https://downloads.openwrt.org/snapshots/trunk/malta/generic/\n # OpenWrt-Toolchain-malta-le_gcc-5.3.0_musl-1.1.15.Linux-x86_64.tar.bz2\n-URL=\"https://rust-lang-ci2.s3.amazonaws.com/libc\"\n+URL=\"https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\"\n FILE=\"OpenWrt-Toolchain-malta-le_gcc-5.3.0_musl-1.1.15.Linux-x86_64.tar.bz2\"\n curl -L \"$URL/$FILE\" | tar xjf - -C /usr/local/mipsel-linux-musl --strip-components=2\n "}, {"sha": "a30cd8a627fe3e32d0e67a3dbd4e8296b236c86c", "filename": "src/librustc_passes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Flibrustc_passes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Flibrustc_passes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Ferror_codes.rs?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -131,7 +131,7 @@ be taken. Erroneous code example:\n \n ```compile_fail,E0268\n fn some_func() {\n-    break; // error: `break` outside of loop\n+    break; // error: `break` outside of a loop\n }\n ```\n "}, {"sha": "dbfbec32a6fbf53508d9f4cb77b1ccdae11b8f73", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -16,8 +16,8 @@ use errors::Applicability;\n enum Context {\n     Normal,\n     Loop(hir::LoopSource),\n-    Closure,\n-    AsyncClosure,\n+    Closure(Span),\n+    AsyncClosure(Span),\n     LabeledBlock,\n     AnonConst,\n }\n@@ -58,11 +58,11 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n             hir::ExprKind::Loop(ref b, _, source) => {\n                 self.with_context(Loop(source), |v| v.visit_block(&b));\n             }\n-            hir::ExprKind::Closure(_, ref function_decl, b, _, movability) => {\n+            hir::ExprKind::Closure(_, ref function_decl, b, span, movability) => {\n                 let cx = if let Some(GeneratorMovability::Static) = movability {\n-                    AsyncClosure\n+                    AsyncClosure(span)\n                 } else {\n-                    Closure\n+                    Closure(span)\n                 };\n                 self.visit_fn_decl(&function_decl);\n                 self.with_context(cx, |v| v.visit_nested_body(b));\n@@ -170,23 +170,22 @@ impl<'a, 'hir> CheckLoopVisitor<'a, 'hir> {\n     }\n \n     fn require_break_cx(&self, name: &str, span: Span) {\n-        match self.cx {\n-            LabeledBlock | Loop(_) => {}\n-            Closure => {\n-                struct_span_err!(self.sess, span, E0267, \"`{}` inside of a closure\", name)\n-                .span_label(span, \"cannot break inside of a closure\")\n+        let err_inside_of = |article, ty, closure_span| {\n+            struct_span_err!(self.sess, span, E0267, \"`{}` inside of {} {}\", name, article, ty)\n+                .span_label(span, format!(\"cannot `{}` inside of {} {}\", name, article, ty))\n+                .span_label(closure_span, &format!(\"enclosing {}\", ty))\n                 .emit();\n-            }\n-            AsyncClosure => {\n-                struct_span_err!(self.sess, span, E0267, \"`{}` inside of an async block\", name)\n-                    .span_label(span, \"cannot break inside of an async block\")\n-                    .emit();\n-            }\n+        };\n+\n+        match self.cx {\n+            LabeledBlock | Loop(_) => {},\n+            Closure(closure_span) => err_inside_of(\"a\", \"closure\", closure_span),\n+            AsyncClosure(closure_span) => err_inside_of(\"an\", \"`async` block\", closure_span),\n             Normal | AnonConst => {\n-                struct_span_err!(self.sess, span, E0268, \"`{}` outside of loop\", name)\n-                .span_label(span, \"cannot break outside of a loop\")\n+                struct_span_err!(self.sess, span, E0268, \"`{}` outside of a loop\", name)\n+                .span_label(span, format!(\"cannot `{}` outside of a loop\", name))\n                 .emit();\n-            }\n+            },\n         }\n     }\n "}, {"sha": "719167eb057b21ded168838155838addc2efe1aa", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -140,9 +140,23 @@ impl<'a> base::Resolver for Resolver<'a> {\n         ImportResolver { r: self }.resolve_imports()\n     }\n \n-    fn resolve_macro_invocation(&mut self, invoc: &Invocation, invoc_id: ExpnId, force: bool)\n-                                -> Result<Option<Lrc<SyntaxExtension>>, Indeterminate> {\n-        let parent_scope = self.invocation_parent_scopes[&invoc_id];\n+    fn resolve_macro_invocation(\n+        &mut self, invoc: &Invocation, eager_expansion_root: ExpnId, force: bool\n+    ) -> Result<Option<Lrc<SyntaxExtension>>, Indeterminate> {\n+        let invoc_id = invoc.expansion_data.id;\n+        let parent_scope = match self.invocation_parent_scopes.get(&invoc_id) {\n+            Some(parent_scope) => *parent_scope,\n+            None => {\n+                // If there's no entry in the table, then we are resolving an eagerly expanded\n+                // macro, which should inherit its parent scope from its eager expansion root -\n+                // the macro that requested this eager expansion.\n+                let parent_scope = *self.invocation_parent_scopes.get(&eager_expansion_root)\n+                    .expect(\"non-eager expansion without a parent scope\");\n+                self.invocation_parent_scopes.insert(invoc_id, parent_scope);\n+                parent_scope\n+            }\n+        };\n+\n         let (path, kind, derives, after_derive) = match invoc.kind {\n             InvocationKind::Attr { ref attr, ref derives, after_derive, .. } =>\n                 (&attr.path, MacroKind::Attr, self.arenas.alloc_ast_paths(derives), after_derive),\n@@ -161,7 +175,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n                         match self.resolve_macro_path(path, Some(MacroKind::Derive),\n                                                       &parent_scope, true, force) {\n                             Ok((Some(ref ext), _)) if ext.is_derive_copy => {\n-                                self.add_derives(invoc.expansion_data.id, SpecialDerives::COPY);\n+                                self.add_derives(invoc_id, SpecialDerives::COPY);\n                                 return Ok(None);\n                             }\n                             Err(Determinacy::Undetermined) => result = Err(Indeterminate),\n@@ -178,19 +192,15 @@ impl<'a> base::Resolver for Resolver<'a> {\n         let (ext, res) = self.smart_resolve_macro_path(path, kind, parent_scope, force)?;\n \n         let span = invoc.span();\n-        invoc.expansion_data.id.set_expn_data(\n-            ext.expn_data(parent_scope.expansion, span, fast_print_path(path))\n-        );\n+        invoc_id.set_expn_data(ext.expn_data(parent_scope.expansion, span, fast_print_path(path)));\n \n         if let Res::Def(_, def_id) = res {\n             if after_derive {\n                 self.session.span_err(span, \"macro attributes must be placed before `#[derive]`\");\n             }\n-            self.macro_defs.insert(invoc.expansion_data.id, def_id);\n-            let normal_module_def_id =\n-                self.macro_def_scope(invoc.expansion_data.id).normal_ancestor_id;\n-            self.definitions.add_parent_module_of_macro_def(invoc.expansion_data.id,\n-                                                            normal_module_def_id);\n+            self.macro_defs.insert(invoc_id, def_id);\n+            let normal_module_def_id = self.macro_def_scope(invoc_id).normal_ancestor_id;\n+            self.definitions.add_parent_module_of_macro_def(invoc_id, normal_module_def_id);\n         }\n \n         Ok(Some(ext))"}, {"sha": "211c4157da828311a6a4ea70539967c7c9a362ba", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -914,7 +914,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n     var but = document.createElement('button');\n     but.innerHTML = item;\n     but.onclick = function(el) {{\n-        switchTheme(currentTheme, mainTheme, item);\n+        switchTheme(currentTheme, mainTheme, item, true);\n     }};\n     but.onblur = handleThemeButtonsBlur;\n     themes.appendChild(but);"}, {"sha": "244b24af43f35b40af552940bd8b3808f91f9085", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -54,6 +54,21 @@\n \t\t  box-sizing: border-box;\n }\n \n+/* This part handles the \"default\" theme being used depending on the system one. */\n+html {\n+\tcontent: \"\";\n+}\n+@media (prefers-color-scheme: light) {\n+\thtml {\n+\t\tcontent: \"light\";\n+\t}\n+}\n+@media (prefers-color-scheme: dark) {\n+\thtml {\n+\t\tcontent: \"dark\";\n+\t}\n+}\n+\n /* General structure and fonts */\n \n body {"}, {"sha": "c55b1e414436c69276c8ab713b0c6507ea9957a2", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -86,7 +86,7 @@ function getCurrentValue(name) {\n     return null;\n }\n \n-function switchTheme(styleElem, mainStyleElem, newTheme) {\n+function switchTheme(styleElem, mainStyleElem, newTheme, saveTheme) {\n     var fullBasicCss = \"rustdoc\" + resourcesSuffix + \".css\";\n     var fullNewTheme = newTheme + resourcesSuffix + \".css\";\n     var newHref = mainStyleElem.href.replace(fullBasicCss, fullNewTheme);\n@@ -109,8 +109,18 @@ function switchTheme(styleElem, mainStyleElem, newTheme) {\n     });\n     if (found === true) {\n         styleElem.href = newHref;\n-        updateLocalStorage(\"rustdoc-theme\", newTheme);\n+        // If this new value comes from a system setting or from the previously saved theme, no\n+        // need to save it.\n+        if (saveTheme === true) {\n+            updateLocalStorage(\"rustdoc-theme\", newTheme);\n+        }\n     }\n }\n \n-switchTheme(currentTheme, mainTheme, getCurrentValue(\"rustdoc-theme\") || \"light\");\n+function getSystemValue() {\n+    return getComputedStyle(document.documentElement).getPropertyValue('content');\n+}\n+\n+switchTheme(currentTheme, mainTheme,\n+            getCurrentValue(\"rustdoc-theme\") || getSystemValue() || \"light\",\n+            false);"}, {"sha": "075e6a80013364bdf99c153349a8b60642f62047", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -682,8 +682,9 @@ pub trait Resolver {\n \n     fn resolve_imports(&mut self);\n \n-    fn resolve_macro_invocation(&mut self, invoc: &Invocation, invoc_id: ExpnId, force: bool)\n-                                -> Result<Option<Lrc<SyntaxExtension>>, Indeterminate>;\n+    fn resolve_macro_invocation(\n+        &mut self, invoc: &Invocation, eager_expansion_root: ExpnId, force: bool\n+    ) -> Result<Option<Lrc<SyntaxExtension>>, Indeterminate>;\n \n     fn check_unused_macros(&self);\n \n@@ -908,12 +909,9 @@ impl<'a> ExtCtxt<'a> {\n /// compilation on error, merely emits a non-fatal error and returns `None`.\n pub fn expr_to_spanned_string<'a>(\n     cx: &'a mut ExtCtxt<'_>,\n-    mut expr: P<ast::Expr>,\n+    expr: P<ast::Expr>,\n     err_msg: &str,\n ) -> Result<(Symbol, ast::StrStyle, Span), Option<DiagnosticBuilder<'a>>> {\n-    // Update `expr.span`'s ctxt now in case expr is an `include!` macro invocation.\n-    expr.span = expr.span.apply_mark(cx.current_expansion.id);\n-\n     // Perform eager expansion on the expression.\n     // We want to be able to handle e.g., `concat!(\"foo\", \"bar\")`.\n     let expr = cx.expander().fully_expand_fragment(AstFragment::Expr(expr)).make_expr();"}, {"sha": "72f2c1375e7a2d75cd1e98b95408c845b09d18c7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -305,9 +305,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 continue\n             };\n \n-            let scope =\n+            let eager_expansion_root =\n                 if self.monotonic { invoc.expansion_data.id } else { orig_expansion_data.id };\n-            let ext = match self.cx.resolver.resolve_macro_invocation(&invoc, scope, force) {\n+            let ext = match self.cx.resolver.resolve_macro_invocation(\n+                &invoc, eager_expansion_root, force\n+            ) {\n                 Ok(ext) => ext,\n                 Err(Indeterminate) => {\n                     undetermined_invocations.push(invoc);\n@@ -318,7 +320,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             progress = true;\n             let ExpansionData { depth, id: expn_id, .. } = invoc.expansion_data;\n             self.cx.current_expansion = invoc.expansion_data.clone();\n-            self.cx.current_expansion.id = scope;\n \n             // FIXME(jseyfried): Refactor out the following logic\n             let (expanded_fragment, new_invocations) = if let Some(ext) = ext {"}, {"sha": "959f4a2babbf8a522769fa41b368b6904ed090bf", "filename": "src/test/ui/array-break-length.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Farray-break-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Farray-break-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-break-length.rs?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -1,11 +1,11 @@\n fn main() {\n     loop {\n-        |_: [_; break]| {} //~ ERROR: `break` outside of loop\n+        |_: [_; break]| {} //~ ERROR: `break` outside of a loop\n         //~^ ERROR mismatched types\n     }\n \n     loop {\n-        |_: [_; continue]| {} //~ ERROR: `continue` outside of loop\n+        |_: [_; continue]| {} //~ ERROR: `continue` outside of a loop\n         //~^ ERROR mismatched types\n     }\n }"}, {"sha": "45f529bafe7286889592c8fb6d4339e21fdaea38", "filename": "src/test/ui/array-break-length.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Farray-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Farray-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-break-length.stderr?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -1,14 +1,14 @@\n-error[E0268]: `break` outside of loop\n+error[E0268]: `break` outside of a loop\n   --> $DIR/array-break-length.rs:3:17\n    |\n LL |         |_: [_; break]| {}\n-   |                 ^^^^^ cannot break outside of a loop\n+   |                 ^^^^^ cannot `break` outside of a loop\n \n-error[E0268]: `continue` outside of loop\n+error[E0268]: `continue` outside of a loop\n   --> $DIR/array-break-length.rs:8:17\n    |\n LL |         |_: [_; continue]| {}\n-   |                 ^^^^^^^^ cannot break outside of a loop\n+   |                 ^^^^^^^^ cannot `continue` outside of a loop\n \n error[E0308]: mismatched types\n   --> $DIR/array-break-length.rs:3:9"}, {"sha": "753a4e491550f0d8346437ddbe155a7a72f748b9", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -30,14 +30,14 @@ async fn return_targets_async_block_not_async_fn() -> u8 {\n \n fn no_break_in_async_block() {\n     async {\n-        break 0u8; //~ ERROR `break` inside of an async block\n+        break 0u8; //~ ERROR `break` inside of an `async` block\n     };\n }\n \n fn no_break_in_async_block_even_with_outer_loop() {\n     loop {\n         async {\n-            break 0u8; //~ ERROR `break` inside of an async block\n+            break 0u8; //~ ERROR `break` inside of an `async` block\n         };\n     }\n }"}, {"sha": "c36caa5586fb0936a80521becd8c30aea4cce3ab", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -1,14 +1,22 @@\n-error[E0267]: `break` inside of an async block\n+error[E0267]: `break` inside of an `async` block\n   --> $DIR/async-block-control-flow-static-semantics.rs:33:9\n    |\n-LL |         break 0u8;\n-   |         ^^^^^^^^^ cannot break inside of an async block\n+LL |       async {\n+   |  ___________-\n+LL | |         break 0u8;\n+   | |         ^^^^^^^^^ cannot `break` inside of an `async` block\n+LL | |     };\n+   | |_____- enclosing `async` block\n \n-error[E0267]: `break` inside of an async block\n+error[E0267]: `break` inside of an `async` block\n   --> $DIR/async-block-control-flow-static-semantics.rs:40:13\n    |\n-LL |             break 0u8;\n-   |             ^^^^^^^^^ cannot break inside of an async block\n+LL |           async {\n+   |  _______________-\n+LL | |             break 0u8;\n+   | |             ^^^^^^^^^ cannot `break` inside of an `async` block\n+LL | |         };\n+   | |_________- enclosing `async` block\n \n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:13:43"}, {"sha": "c424c25c646bd34d61b7a7ae4d6fbe3f580ea735", "filename": "src/test/ui/break-outside-loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fbreak-outside-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fbreak-outside-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-outside-loop.rs?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -7,8 +7,8 @@ fn cond() -> bool { true }\n fn foo<F>(_: F) where F: FnOnce() {}\n \n fn main() {\n-    let pth = break; //~ ERROR: `break` outside of loop\n-    if cond() { continue } //~ ERROR: `continue` outside of loop\n+    let pth = break; //~ ERROR: `break` outside of a loop\n+    if cond() { continue } //~ ERROR: `continue` outside of a loop\n \n     while cond() {\n         if cond() { break }\n@@ -21,5 +21,5 @@ fn main() {\n \n     let rs: Foo = Foo{t: pth};\n \n-    let unconstrained = break; //~ ERROR: `break` outside of loop\n+    let unconstrained = break; //~ ERROR: `break` outside of a loop\n }"}, {"sha": "8b686356055a34bef3b4abad3ecad33e9af76a8c", "filename": "src/test/ui/break-outside-loop.stderr", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fbreak-outside-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fbreak-outside-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-outside-loop.stderr?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -1,32 +1,37 @@\n-error[E0268]: `break` outside of loop\n+error[E0268]: `break` outside of a loop\n   --> $DIR/break-outside-loop.rs:10:15\n    |\n LL |     let pth = break;\n-   |               ^^^^^ cannot break outside of a loop\n+   |               ^^^^^ cannot `break` outside of a loop\n \n-error[E0268]: `continue` outside of loop\n+error[E0268]: `continue` outside of a loop\n   --> $DIR/break-outside-loop.rs:11:17\n    |\n LL |     if cond() { continue }\n-   |                 ^^^^^^^^ cannot break outside of a loop\n+   |                 ^^^^^^^^ cannot `continue` outside of a loop\n \n error[E0267]: `break` inside of a closure\n   --> $DIR/break-outside-loop.rs:17:25\n    |\n+LL |         foo(|| {\n+   |             -- enclosing closure\n LL |             if cond() { break }\n-   |                         ^^^^^ cannot break inside of a closure\n+   |                         ^^^^^ cannot `break` inside of a closure\n \n error[E0267]: `continue` inside of a closure\n   --> $DIR/break-outside-loop.rs:18:25\n    |\n+LL |         foo(|| {\n+   |             -- enclosing closure\n+LL |             if cond() { break }\n LL |             if cond() { continue }\n-   |                         ^^^^^^^^ cannot break inside of a closure\n+   |                         ^^^^^^^^ cannot `continue` inside of a closure\n \n-error[E0268]: `break` outside of loop\n+error[E0268]: `break` outside of a loop\n   --> $DIR/break-outside-loop.rs:24:25\n    |\n LL |     let unconstrained = break;\n-   |                         ^^^^^ cannot break outside of a loop\n+   |                         ^^^^^ cannot `break` outside of a loop\n \n error: aborting due to 5 previous errors\n "}, {"sha": "f3567db1fac9c964697e394ba9646d369a238417", "filename": "src/test/ui/closures/closure-array-break-length.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.rs?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -1,9 +1,9 @@\n fn main() {\n-    |_: [_; continue]| {}; //~ ERROR: `continue` outside of loop\n+    |_: [_; continue]| {}; //~ ERROR: `continue` outside of a loop\n \n-    while |_: [_; continue]| {} {} //~ ERROR: `continue` outside of loop\n+    while |_: [_; continue]| {} {} //~ ERROR: `continue` outside of a loop\n     //~^ ERROR mismatched types\n \n-    while |_: [_; break]| {} {} //~ ERROR: `break` outside of loop\n+    while |_: [_; break]| {} {} //~ ERROR: `break` outside of a loop\n     //~^ ERROR mismatched types\n }"}, {"sha": "18da4a94e6f05853d794fe555adf6b88196c98c9", "filename": "src/test/ui/closures/closure-array-break-length.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -1,20 +1,20 @@\n-error[E0268]: `continue` outside of loop\n+error[E0268]: `continue` outside of a loop\n   --> $DIR/closure-array-break-length.rs:2:13\n    |\n LL |     |_: [_; continue]| {};\n-   |             ^^^^^^^^ cannot break outside of a loop\n+   |             ^^^^^^^^ cannot `continue` outside of a loop\n \n-error[E0268]: `continue` outside of loop\n+error[E0268]: `continue` outside of a loop\n   --> $DIR/closure-array-break-length.rs:4:19\n    |\n LL |     while |_: [_; continue]| {} {}\n-   |                   ^^^^^^^^ cannot break outside of a loop\n+   |                   ^^^^^^^^ cannot `continue` outside of a loop\n \n-error[E0268]: `break` outside of loop\n+error[E0268]: `break` outside of a loop\n   --> $DIR/closure-array-break-length.rs:7:19\n    |\n LL |     while |_: [_; break]| {} {}\n-   |                   ^^^^^ cannot break outside of a loop\n+   |                   ^^^^^ cannot `break` outside of a loop\n \n error[E0308]: mismatched types\n   --> $DIR/closure-array-break-length.rs:4:11"}, {"sha": "1f8657373efecb36fc7933a8b70213b597e2be28", "filename": "src/test/ui/error-codes/E0267.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Ferror-codes%2FE0267.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Ferror-codes%2FE0267.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0267.stderr?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -2,7 +2,9 @@ error[E0267]: `break` inside of a closure\n   --> $DIR/E0267.rs:2:18\n    |\n LL |     let w = || { break; };\n-   |                  ^^^^^ cannot break inside of a closure\n+   |             --   ^^^^^ cannot `break` inside of a closure\n+   |             |\n+   |             enclosing closure\n \n error: aborting due to previous error\n "}, {"sha": "c926f9e4874944722b4a7a82a67c1206ef29ff01", "filename": "src/test/ui/error-codes/E0268.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Ferror-codes%2FE0268.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Ferror-codes%2FE0268.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0268.stderr?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -1,8 +1,8 @@\n-error[E0268]: `break` outside of loop\n+error[E0268]: `break` outside of a loop\n   --> $DIR/E0268.rs:2:5\n    |\n LL |     break;\n-   |     ^^^^^ cannot break outside of a loop\n+   |     ^^^^^ cannot `break` outside of a loop\n \n error: aborting due to previous error\n "}, {"sha": "220e5526745c3a835a965829a41505cc2d2bb6ec", "filename": "src/test/ui/hygiene/eager-from-opaque-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fhygiene%2Feager-from-opaque-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fhygiene%2Feager-from-opaque-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Feager-from-opaque-2.rs?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -0,0 +1,22 @@\n+// Regression test for the issue #63460.\n+\n+// check-pass\n+\n+#[macro_export]\n+macro_rules! separator {\n+    () => { \"/\" };\n+}\n+\n+#[macro_export]\n+macro_rules! concat_separator {\n+    ( $e:literal, $($other:literal),+ ) => {\n+        concat!($e, $crate::separator!(), $crate::concat_separator!($($other),+))\n+    };\n+    ( $e:literal ) => {\n+        $e\n+    }\n+}\n+\n+fn main() {\n+    println!(\"{}\", concat_separator!(2, 3, 4))\n+}"}, {"sha": "6f3215dd697f321cf279482cba388e45741c4936", "filename": "src/test/ui/hygiene/eager-from-opaque.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fhygiene%2Feager-from-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fhygiene%2Feager-from-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Feager-from-opaque.rs?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -0,0 +1,20 @@\n+// Opaque macro can eagerly expand its input without breaking its resolution.\n+// Regression test for issue #63685.\n+\n+// check-pass\n+\n+macro_rules! foo {\n+    () => {\n+        \"foo\"\n+    };\n+}\n+\n+macro_rules! bar {\n+    () => {\n+        foo!()\n+    };\n+}\n+\n+fn main() {\n+    format_args!(bar!());\n+}"}, {"sha": "1e8d2d6ccf1325432c332a1af900ef15f34a5e64", "filename": "src/test/ui/issues/issue-28105.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fissues%2Fissue-28105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fissues%2Fissue-28105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28105.rs?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -1,8 +1,8 @@\n // Make sure that a continue span actually contains the keyword.\n \n fn main() {\n-    continue //~ ERROR `continue` outside of loop\n+    continue //~ ERROR `continue` outside of a loop\n     ;\n-    break //~ ERROR `break` outside of loop\n+    break //~ ERROR `break` outside of a loop\n     ;\n }"}, {"sha": "42ed838d7c0371eb8490aa43ec99231b7eee6e9f", "filename": "src/test/ui/issues/issue-28105.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fissues%2Fissue-28105.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fissues%2Fissue-28105.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28105.stderr?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -1,14 +1,14 @@\n-error[E0268]: `continue` outside of loop\n+error[E0268]: `continue` outside of a loop\n   --> $DIR/issue-28105.rs:4:5\n    |\n LL |     continue\n-   |     ^^^^^^^^ cannot break outside of a loop\n+   |     ^^^^^^^^ cannot `continue` outside of a loop\n \n-error[E0268]: `break` outside of loop\n+error[E0268]: `break` outside of a loop\n   --> $DIR/issue-28105.rs:6:5\n    |\n LL |     break\n-   |     ^^^^^ cannot break outside of a loop\n+   |     ^^^^^ cannot `break` outside of a loop\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c729c05ff229e2cdc3523a08593dba8d336b286f", "filename": "src/test/ui/issues/issue-43162.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -1,14 +1,14 @@\n-error[E0268]: `break` outside of loop\n+error[E0268]: `break` outside of a loop\n   --> $DIR/issue-43162.rs:3:5\n    |\n LL |     break true;\n-   |     ^^^^^^^^^^ cannot break outside of a loop\n+   |     ^^^^^^^^^^ cannot `break` outside of a loop\n \n-error[E0268]: `break` outside of loop\n+error[E0268]: `break` outside of a loop\n   --> $DIR/issue-43162.rs:7:5\n    |\n LL |     break {};\n-   |     ^^^^^^^^ cannot break outside of a loop\n+   |     ^^^^^^^^ cannot `break` outside of a loop\n \n error[E0308]: mismatched types\n   --> $DIR/issue-43162.rs:1:13"}, {"sha": "9fea1411080f503bd7f824e09fa689d103f78abf", "filename": "src/test/ui/issues/issue-50576.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fissues%2Fissue-50576.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fissues%2Fissue-50576.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50576.stderr?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -4,17 +4,17 @@ error[E0426]: use of undeclared label `'L`\n LL |     |bool: [u8; break 'L]| 0;\n    |                       ^^ undeclared label `'L`\n \n-error[E0268]: `break` outside of loop\n+error[E0268]: `break` outside of a loop\n   --> $DIR/issue-50576.rs:2:17\n    |\n LL |     |bool: [u8; break 'L]| 0;\n-   |                 ^^^^^^^^ cannot break outside of a loop\n+   |                 ^^^^^^^^ cannot `break` outside of a loop\n \n-error[E0268]: `break` outside of loop\n+error[E0268]: `break` outside of a loop\n   --> $DIR/issue-50576.rs:5:16\n    |\n LL |     Vec::<[u8; break]>::new();\n-   |                ^^^^^ cannot break outside of a loop\n+   |                ^^^^^ cannot `break` outside of a loop\n \n error: aborting due to 3 previous errors\n "}, {"sha": "35d6fc49cedc88b92df918fd3c2bd2b70d5bd300", "filename": "src/test/ui/issues/issue-50581.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fissues%2Fissue-50581.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fissues%2Fissue-50581.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50581.stderr?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -1,8 +1,8 @@\n-error[E0268]: `break` outside of loop\n+error[E0268]: `break` outside of a loop\n   --> $DIR/issue-50581.rs:2:14\n    |\n LL |     |_: [u8; break]| ();\n-   |              ^^^^^ cannot break outside of a loop\n+   |              ^^^^^ cannot `break` outside of a loop\n \n error: aborting due to previous error\n "}, {"sha": "5ca4088e585dbcc38ca5eadd8311a6b5a2c7eb64", "filename": "src/test/ui/macros/derive-in-eager-expansion-hang.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e44fdf97929d1315add3b76208adf99e8299252d/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -8,6 +8,9 @@ LL | |\n LL | |         \"\"\n LL | |     }\n    | |_____^\n+...\n+LL |       format_args!(hang!());\n+   |                    ------- in this macro invocation\n help: you might be missing a string literal to format with\n    |\n LL |     format_args!(\"{}\", hang!());"}, {"sha": "d77fe6c63ca4c50b207a1161def90c9e57368d5b", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=e44fdf97929d1315add3b76208adf99e8299252d", "patch": "@@ -1 +1 @@\n-Subproject commit 4f6f264c305ea30f1de90ad0c2f341e84d972b2e\n+Subproject commit d77fe6c63ca4c50b207a1161def90c9e57368d5b"}]}