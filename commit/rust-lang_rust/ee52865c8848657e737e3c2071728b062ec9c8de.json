{"sha": "ee52865c8848657e737e3c2071728b062ec9c8de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNTI4NjVjODg0ODY1N2U3MzdlM2MyMDcxNzI4YjA2MmVjOWM4ZGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-22T00:24:31Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-23T04:57:10Z"}, "message": "test: Update tests and import the prelude in some more places.", "tree": {"sha": "885518283fff1b22a383bd8193a9fd4feea26515", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/885518283fff1b22a383bd8193a9fd4feea26515"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee52865c8848657e737e3c2071728b062ec9c8de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee52865c8848657e737e3c2071728b062ec9c8de", "html_url": "https://github.com/rust-lang/rust/commit/ee52865c8848657e737e3c2071728b062ec9c8de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee52865c8848657e737e3c2071728b062ec9c8de/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1be40be613177d4849f42da284a3af74e1d58da2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1be40be613177d4849f42da284a3af74e1d58da2", "html_url": "https://github.com/rust-lang/rust/commit/1be40be613177d4849f42da284a3af74e1d58da2"}], "stats": {"total": 109, "additions": 66, "deletions": 43}, "files": [{"sha": "648089a552475dc64301d25c5a4a1b46ee253827", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -511,6 +511,7 @@ pub impl<'self, T:Const + Owned> RWReadMode<'self, T> {\n \n #[cfg(test)]\n mod tests {\n+    use core::prelude::*;\n \n     use arc::*;\n     use arc;"}, {"sha": "75249b9f467ad5b4ec7c08bdfcd6b3da77a8f842", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -534,6 +534,8 @@ impl<T> BaseIter<T> for @mut DList<T> {\n \n #[cfg(test)]\n mod tests {\n+    use core::prelude::*;\n+\n     use super::*;\n \n     #[test]"}, {"sha": "ec2c73251ba12fbda470d08c82bd07509d7dd300", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -405,6 +405,8 @@ pub fn input_vec_state(files: ~[Option<Path>],\n \n #[cfg(test)]\n mod test {\n+    use core::prelude::*;\n+\n     use core::io::WriterUtil;\n     use super::{FileInput, pathify, input_vec, input_vec_state};\n "}, {"sha": "76361db7d76cfa6a4f4cbab5410ad8950898b292", "filename": "src/libextra/flatpipes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflatpipes.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -866,6 +866,8 @@ mod test {\n     // Tests that the different backends behave the same when the\n     // binary streaming protocol is broken\n     mod broken_protocol {\n+        use core::prelude::*;\n+\n         use flatpipes::{BytePort, FlatPort};\n         use flatpipes::flatteners::PodUnflattener;\n         use flatpipes::pod;"}, {"sha": "6656c896e74c3886a9b09ac93111a4e8f3806a46", "filename": "src/libextra/json.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -1327,6 +1327,8 @@ impl to_str::ToStr for Error {\n \n #[cfg(test)]\n mod tests {\n+    use core::prelude::*;\n+\n     use super::*;\n \n     use core::hashmap::HashMap;"}, {"sha": "894488e47e123be55dc5696c3a50a2cc2831711a", "filename": "src/libextra/net_tcp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_tcp.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -1440,6 +1440,8 @@ struct TcpBufferedSocketData {\n \n #[cfg(test)]\n mod test {\n+    use core::prelude::*;\n+\n     use net::ip;\n     use net::tcp::{GenericListenErr, TcpConnectErrData, TcpListenErrData};\n     use net::tcp::{connect, accept, read, listen, TcpSocket, socket_buf};"}, {"sha": "776172262b74297e5f076accf82187ac57d8776e", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -1145,6 +1145,8 @@ pub impl BigInt {\n \n #[cfg(test)]\n mod biguint_tests {\n+    use core::prelude::*;\n+\n     use super::*;\n     use core::num::{IntConvertible, Zero, One, FromStrRadix};\n     use core::cmp::{Less, Equal, Greater};\n@@ -1611,6 +1613,8 @@ mod biguint_tests {\n \n #[cfg(test)]\n mod bigint_tests {\n+    use core::prelude::*;\n+\n     use super::*;\n     use core::cmp::{Less, Equal, Greater};\n     use core::num::{IntConvertible, Zero, One, FromStrRadix};"}, {"sha": "de114a35e36be8d5f7cc74e36c5c839ce158692d", "filename": "src/libextra/num/rational.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Frational.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -284,6 +284,8 @@ impl<T: FromStrRadix + Clone + Integer + Ord>\n \n #[cfg(test)]\n mod test {\n+    use core::prelude::*;\n+\n     use super::*;\n     use core::num::{Zero,One,FromStrRadix,IntConvertible};\n     use core::from_str::FromStr;"}, {"sha": "a4fc30cedcdaa77eed884c08e4e76a003aef2b5c", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -185,13 +185,13 @@ pub impl <T:Ord> PriorityQueue<T> {\n mod tests {\n     use sort::merge_sort;\n     use core::cmp::le;\n-    use priority_queue::PriorityQueue::{from_vec, new};\n+    use priority_queue::PriorityQueue;\n \n     #[test]\n     fn test_top_and_pop() {\n         let data = ~[2, 4, 6, 2, 1, 8, 10, 3, 5, 7, 0, 9, 1];\n         let mut sorted = merge_sort(data, le);\n-        let mut heap = from_vec(data);\n+        let mut heap = PriorityQueue::from_vec(data);\n         while !heap.is_empty() {\n             assert_eq!(heap.top(), sorted.last());\n             assert_eq!(heap.pop(), sorted.pop());\n@@ -200,7 +200,7 @@ mod tests {\n \n     #[test]\n     fn test_push() {\n-        let mut heap = from_vec(~[2, 4, 9]);\n+        let mut heap = PriorityQueue::from_vec(~[2, 4, 9]);\n         assert_eq!(heap.len(), 3);\n         assert!(*heap.top() == 9);\n         heap.push(11);\n@@ -222,7 +222,7 @@ mod tests {\n \n     #[test]\n     fn test_push_unique() {\n-        let mut heap = from_vec(~[~2, ~4, ~9]);\n+        let mut heap = PriorityQueue::from_vec(~[~2, ~4, ~9]);\n         assert_eq!(heap.len(), 3);\n         assert!(*heap.top() == ~9);\n         heap.push(~11);\n@@ -244,7 +244,7 @@ mod tests {\n \n     #[test]\n     fn test_push_pop() {\n-        let mut heap = from_vec(~[5, 5, 2, 1, 3]);\n+        let mut heap = PriorityQueue::from_vec(~[5, 5, 2, 1, 3]);\n         assert_eq!(heap.len(), 5);\n         assert_eq!(heap.push_pop(6), 6);\n         assert_eq!(heap.len(), 5);\n@@ -258,7 +258,7 @@ mod tests {\n \n     #[test]\n     fn test_replace() {\n-        let mut heap = from_vec(~[5, 5, 2, 1, 3]);\n+        let mut heap = PriorityQueue::from_vec(~[5, 5, 2, 1, 3]);\n         assert_eq!(heap.len(), 5);\n         assert_eq!(heap.replace(6), 5);\n         assert_eq!(heap.len(), 5);\n@@ -271,7 +271,7 @@ mod tests {\n     }\n \n     fn check_to_vec(data: ~[int]) {\n-        let heap = from_vec(copy data);\n+        let heap = PriorityQueue::from_vec(copy data);\n         assert_eq!(merge_sort((copy heap).to_vec(), le), merge_sort(data, le));\n         assert_eq!(heap.to_sorted_vec(), merge_sort(data, le));\n     }\n@@ -296,27 +296,27 @@ mod tests {\n     #[test]\n     #[should_fail]\n     #[ignore(cfg(windows))]\n-    fn test_empty_pop() { let mut heap = new::<int>(); heap.pop(); }\n+    fn test_empty_pop() { let mut heap = PriorityQueue::new::<int>(); heap.pop(); }\n \n     #[test]\n     fn test_empty_maybe_pop() {\n-        let mut heap = new::<int>();\n+        let mut heap = PriorityQueue::new::<int>();\n         assert!(heap.maybe_pop().is_none());\n     }\n \n     #[test]\n     #[should_fail]\n     #[ignore(cfg(windows))]\n-    fn test_empty_top() { let empty = new::<int>(); empty.top(); }\n+    fn test_empty_top() { let empty = PriorityQueue::new::<int>(); empty.top(); }\n \n     #[test]\n     fn test_empty_maybe_top() {\n-        let empty = new::<int>();\n+        let empty = PriorityQueue::new::<int>();\n         assert!(empty.maybe_top().is_none());\n     }\n \n     #[test]\n     #[should_fail]\n     #[ignore(cfg(windows))]\n-    fn test_empty_replace() { let mut heap = new(); heap.replace(5); }\n+    fn test_empty_replace() { let mut heap = PriorityQueue::new(); heap.replace(5); }\n }"}, {"sha": "b2a98845b2f658beb2b9e2904bc8291e933c98c3", "filename": "src/libextra/smallintmap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -267,6 +267,8 @@ pub impl SmallIntSet {\n \n #[cfg(test)]\n mod tests {\n+    use core::prelude::*;\n+\n     use super::SmallIntMap;\n \n     #[test]"}, {"sha": "388f321d9ea87e67d92696bf1f2e13ba74398adf", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -746,6 +746,8 @@ fn shift_vec<T:Copy>(dest: &mut [T],\n \n #[cfg(test)]\n mod test_qsort3 {\n+    use core::prelude::*;\n+\n     use sort::*;\n \n     use core::vec;\n@@ -788,6 +790,8 @@ mod test_qsort3 {\n \n #[cfg(test)]\n mod test_qsort {\n+    use core::prelude::*;\n+\n     use sort::*;\n \n     use core::int;\n@@ -852,6 +856,7 @@ mod test_qsort {\n \n #[cfg(test)]\n mod tests {\n+    use core::prelude::*;\n \n     use sort::*;\n \n@@ -920,6 +925,8 @@ mod tests {\n \n #[cfg(test)]\n mod test_tim_sort {\n+    use core::prelude::*;\n+\n     use sort::tim_sort;\n     use core::rand::RngUtil;\n \n@@ -1011,6 +1018,8 @@ mod test_tim_sort {\n \n #[cfg(test)]\n mod big_tests {\n+    use core::prelude::*;\n+\n     use sort::*;\n     use core::rand::RngUtil;\n "}, {"sha": "a23a547634242742da10dc510975147d42cb4721", "filename": "src/libextra/std.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstd.rc?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -36,6 +36,8 @@ extern mod core(name = \"std\", vers = \"0.7-pre\");\n use core::{str, unstable};\n use core::str::{StrSlice, OwnedStr};\n \n+pub use core::os;\n+\n pub mod uv_ll;\n \n // General io and system-services modules"}, {"sha": "9e0ebc0222102c55b62cd308dbff5a1fa439d4ce", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -711,6 +711,7 @@ pub impl<'self> RWlockReadMode<'self> {\n \n #[cfg(test)]\n mod tests {\n+    use core::prelude::*;\n \n     use sync::*;\n "}, {"sha": "be9b920c592bf856bcb2bff204d69ed2d2538788", "filename": "src/libextra/tempfile.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftempfile.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -27,6 +27,8 @@ pub fn mkdtemp(tmpdir: &Path, suffix: &str) -> Option<Path> {\n \n #[cfg(test)]\n mod tests {\n+    use core::prelude::*;\n+\n     use tempfile::mkdtemp;\n     use tempfile;\n     use core::os;"}, {"sha": "75caf1a4829e08c08010a2ae76e5264095aa4122", "filename": "src/libextra/timer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftimer.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -175,6 +175,8 @@ extern fn delayed_send_close_cb(handle: *uv::ll::uv_timer_t) {\n \n #[cfg(test)]\n mod test {\n+    use core::prelude::*;\n+\n     use timer::*;\n     use uv;\n     use core::cell::Cell;"}, {"sha": "973d1faa9a6e5d9d938f88db84344d4be90fcfdc", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -699,6 +699,8 @@ fn remove<K: TotalOrd, V>(node: &mut Option<~TreeNode<K, V>>,\n \n #[cfg(test)]\n mod test_treemap {\n+    use core::prelude::*;\n+\n     use core::iterator::*;\n     use super::*;\n     use core::rand::RngUtil;\n@@ -1017,6 +1019,7 @@ mod test_treemap {\n \n #[cfg(test)]\n mod test_set {\n+    use core::prelude::*;\n     use core::iterator::*;\n     use super::*;\n "}, {"sha": "5be8dd514de43df07a39b5f115cc9db481f10e7c", "filename": "src/libextra/uv_ll.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Flibextra%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuv_ll.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -1224,6 +1224,7 @@ pub unsafe fn addrinfo_as_sockaddr_in6(input: *addrinfo) -> *sockaddr_in6 {\n \n #[cfg(test)]\n mod test {\n+    use core::prelude::*;\n     use core::comm::{SharedChan, stream, GenericChan, GenericPort};\n     use super::*;\n "}, {"sha": "3c81c787a09a2155187677da3815f479b759f3b2", "filename": "src/test/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -15,9 +15,7 @@\n \n pub mod rustrt {\n     pub extern {\n-        pub fn rust_dbg_call(cb: extern \"C\" fn(data: libc::uintptr_t)\n-                                               -> libc::uintptr_t,\n-                             data: libc::uintptr_t)\n+        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }\n }"}, {"sha": "1c8e92b91cd1bbf3378a34205a9f00384c457db7", "filename": "src/test/run-pass/const-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cast.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -10,7 +10,7 @@\n \n extern fn foo() {}\n \n-static x: extern \"C\" fn() = foo;\n+static x: *u8 = foo;\n static y: *libc::c_void = x as *libc::c_void;\n static a: &'static int = &10;\n static b: *int = a as *int;"}, {"sha": "5281c217626895dd0255226bafc784f34b7d17ad", "filename": "src/test/run-pass/const-cross-crate-extern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -13,7 +13,7 @@\n \n extern mod cci_const;\n use cci_const::bar;\n-static foo: extern \"C\" fn() = bar;\n+static foo: *u8 = bar;\n \n pub fn main() {\n     assert_eq!(foo, cci_const::bar);"}, {"sha": "9a8104cb14f719a3d2281dc3f424e21c7c9be4c1", "filename": "src/test/run-pass/const-extern-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -10,7 +10,7 @@\n \n extern fn foopy() {}\n \n-static f: extern \"C\" fn() = foopy;\n+static f: *u8 = foopy;\n static s: S = S { f: foopy };\n \n struct S {"}, {"sha": "6831048bee41d3d9fd2821fccaa8bea54a5aae9e", "filename": "src/test/run-pass/extern-call-deep.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -10,9 +10,7 @@\n \n mod rustrt {\n     pub extern {\n-        pub fn rust_dbg_call(cb: extern \"C\" fn(data: libc::uintptr_t)\n-                                               -> libc::uintptr_t,\n-                             data: libc::uintptr_t)\n+        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }\n }"}, {"sha": "4c5d4218b1fce456febced41931a06f3735edcaf", "filename": "src/test/run-pass/extern-call-deep2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -10,9 +10,7 @@\n \n mod rustrt {\n     pub extern {\n-        pub fn rust_dbg_call(cb: extern \"C\" fn(data: libc::uintptr_t)\n-                                               -> libc::uintptr_t,\n-                             data: libc::uintptr_t)\n+        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }\n }"}, {"sha": "5c4d594476ff378b3262c3bf60358e62ec2d48e4", "filename": "src/test/run-pass/extern-call-scrub.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -14,9 +14,7 @@\n \n mod rustrt {\n     pub extern {\n-        pub fn rust_dbg_call(cb: extern \"C\" fn(data: libc::uintptr_t)\n-                                               -> libc::uintptr_t,\n-                             data: libc::uintptr_t)\n+        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }\n }"}, {"sha": "ec335cf8a82b8d503d0a26b2d58193fcfaf4b442", "filename": "src/test/run-pass/extern-call.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fextern-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fextern-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -10,9 +10,7 @@\n \n mod rustrt {\n     pub extern {\n-        pub fn rust_dbg_call(cb: extern \"C\" fn(data: libc::uintptr_t)\n-                                               -> libc::uintptr_t,\n-                             data: libc::uintptr_t)\n+        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }\n }"}, {"sha": "4257f2b2435f558380e13e29c442d36d844c0645", "filename": "src/test/run-pass/extern-stress.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -13,9 +13,7 @@\n \n mod rustrt {\n     pub extern {\n-        pub fn rust_dbg_call(cb: extern \"C\" fn(data: libc::uintptr_t)\n-                                               -> libc::uintptr_t,\n-                             data: libc::uintptr_t)\n+        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }\n }"}, {"sha": "542686c9099f1d1f469ce8f034de1cfad95c94b2", "filename": "src/test/run-pass/extern-take-value.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fextern-take-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fextern-take-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-take-value.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -15,10 +15,10 @@ extern fn g() {\n }\n \n pub fn main() {\n-    // extern functions are extern function types\n-    let a: extern \"C\" fn() = f;\n-    let b: extern \"C\" fn() = f;\n-    let c: extern \"C\" fn() = g;\n+    // extern functions are *u8 types\n+    let a: *u8 = f;\n+    let b: *u8 = f;\n+    let c: *u8 = g;\n \n     assert_eq!(a, b);\n     assert!(a != c);"}, {"sha": "b0c44030a17249b2c926f446be60fe0db0ffe76e", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -10,9 +10,7 @@\n \n mod rustrt {\n     pub extern {\n-        pub fn rust_dbg_call(cb: extern \"C\" fn(data: libc::uintptr_t)\n-                                               -> libc::uintptr_t,\n-                             data: libc::uintptr_t)\n+        pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n                              -> libc::uintptr_t;\n     }\n }"}, {"sha": "6ff8b24ab833658ad4a79ae3e71516af6d2475f0", "filename": "src/test/run-pass/foreign-call-no-runtime.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee52865c8848657e737e3c2071728b062ec9c8de/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs?ref=ee52865c8848657e737e3c2071728b062ec9c8de", "patch": "@@ -1,9 +1,7 @@\n use std::unstable::run_in_bare_thread;\n \n extern {\n-    pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t)\n-                                           -> libc::uintptr_t,\n-                         data: libc::uintptr_t) -> libc::uintptr_t;\n+    pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t) -> libc::uintptr_t;\n }\n \n pub fn main() {"}]}