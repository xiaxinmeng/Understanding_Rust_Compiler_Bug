{"sha": "1b87306b98eceb60873ee20e9542f855ec90809f", "node_id": "C_kwDOAAsO6NoAKDFiODczMDZiOThlY2ViNjA4NzNlZTIwZTk1NDJmODU1ZWM5MDgwOWY", "commit": {"author": {"name": "Kevin Reid", "email": "kpreid@google.com", "date": "2022-08-04T01:12:21Z"}, "committer": {"name": "Kevin Reid", "email": "kpreid@google.com", "date": "2022-08-04T02:14:31Z"}, "message": "Document that `RawWakerVTable` functions must be thread-safe.\n\nAlso add some intra-doc links and more high-level explanation of how\n`Waker` is used, while I'm here.\n\nContext:\nhttps://internals.rust-lang.org/t/thread-safety-of-rawwakervtables/17126", "tree": {"sha": "02d5c7b397faa2a3032d271d10f84216d0aefb94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02d5c7b397faa2a3032d271d10f84216d0aefb94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b87306b98eceb60873ee20e9542f855ec90809f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b87306b98eceb60873ee20e9542f855ec90809f", "html_url": "https://github.com/rust-lang/rust/commit/1b87306b98eceb60873ee20e9542f855ec90809f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b87306b98eceb60873ee20e9542f855ec90809f/comments", "author": {"login": "kpreid", "id": 779501, "node_id": "MDQ6VXNlcjc3OTUwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/779501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpreid", "html_url": "https://github.com/kpreid", "followers_url": "https://api.github.com/users/kpreid/followers", "following_url": "https://api.github.com/users/kpreid/following{/other_user}", "gists_url": "https://api.github.com/users/kpreid/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpreid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpreid/subscriptions", "organizations_url": "https://api.github.com/users/kpreid/orgs", "repos_url": "https://api.github.com/users/kpreid/repos", "events_url": "https://api.github.com/users/kpreid/events{/privacy}", "received_events_url": "https://api.github.com/users/kpreid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kpreid", "id": 779501, "node_id": "MDQ6VXNlcjc3OTUwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/779501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpreid", "html_url": "https://github.com/kpreid", "followers_url": "https://api.github.com/users/kpreid/followers", "following_url": "https://api.github.com/users/kpreid/following{/other_user}", "gists_url": "https://api.github.com/users/kpreid/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpreid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpreid/subscriptions", "organizations_url": "https://api.github.com/users/kpreid/orgs", "repos_url": "https://api.github.com/users/kpreid/repos", "events_url": "https://api.github.com/users/kpreid/events{/privacy}", "received_events_url": "https://api.github.com/users/kpreid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b57946a405d5b2a87e612335db033edb2c3427f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b57946a405d5b2a87e612335db033edb2c3427f", "html_url": "https://github.com/rust-lang/rust/commit/1b57946a405d5b2a87e612335db033edb2c3427f"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "1aeb30c667e3e98a013637bede846c5ec367b378", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1b87306b98eceb60873ee20e9542f855ec90809f/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b87306b98eceb60873ee20e9542f855ec90809f/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=1b87306b98eceb60873ee20e9542f855ec90809f", "patch": "@@ -71,6 +71,12 @@ impl RawWaker {\n /// pointer of a properly constructed [`RawWaker`] object from inside the\n /// [`RawWaker`] implementation. Calling one of the contained functions using\n /// any other `data` pointer will cause undefined behavior.\n+///\n+/// These functions must all be thread-safe (even though [`RawWaker`] is\n+/// <code>\\![Send] + \\![Sync]</code>)\n+/// because [`Waker`] is <code>[Send] + [Sync]</code>, and thus wakers may be moved to\n+/// arbitrary threads or invoked by `&` reference. For example, this means that if the\n+/// `clone` and `drop` functions manage a reference count, they must do so atomically.\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n #[derive(PartialEq, Copy, Clone, Debug)]\n pub struct RawWakerVTable {\n@@ -110,6 +116,12 @@ impl RawWakerVTable {\n     /// Creates a new `RawWakerVTable` from the provided `clone`, `wake`,\n     /// `wake_by_ref`, and `drop` functions.\n     ///\n+    /// These functions must all be thread-safe (even though [`RawWaker`] is\n+    /// <code>\\![Send] + \\![Sync]</code>)\n+    /// because [`Waker`] is <code>[Send] + [Sync]</code>, and thus wakers may be moved to\n+    /// arbitrary threads or invoked by `&` reference. For example, this means that if the\n+    /// `clone` and `drop` functions manage a reference count, they must do so atomically.\n+    ///\n     /// # `clone`\n     ///\n     /// This function will be called when the [`RawWaker`] gets cloned, e.g. when\n@@ -157,9 +169,9 @@ impl RawWakerVTable {\n     }\n }\n \n-/// The `Context` of an asynchronous task.\n+/// The context of an asynchronous task.\n ///\n-/// Currently, `Context` only serves to provide access to a `&Waker`\n+/// Currently, `Context` only serves to provide access to a [`&Waker`](Waker)\n /// which can be used to wake the current task.\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub struct Context<'a> {\n@@ -172,15 +184,15 @@ pub struct Context<'a> {\n }\n \n impl<'a> Context<'a> {\n-    /// Create a new `Context` from a `&Waker`.\n+    /// Create a new [`Context`] from a [`&Waker`](Waker).\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     #[must_use]\n     #[inline]\n     pub fn from_waker(waker: &'a Waker) -> Self {\n         Context { waker, _marker: PhantomData }\n     }\n \n-    /// Returns a reference to the `Waker` for the current task.\n+    /// Returns a reference to the [`Waker`] for the current task.\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     #[must_use]\n     #[inline]\n@@ -202,7 +214,18 @@ impl fmt::Debug for Context<'_> {\n /// This handle encapsulates a [`RawWaker`] instance, which defines the\n /// executor-specific wakeup behavior.\n ///\n-/// Implements [`Clone`], [`Send`], and [`Sync`].\n+/// The typical life of a [`Waker`] is that it is constructed by an executor, wrapped in a\n+/// [`Context`], then passed to [`Future::poll()`]. Then, if the future chooses to return\n+/// [`Poll::Pending`], it must also store the waker somehow and call [`Waker::wake()`] when\n+/// the future should be polled again.\n+///\n+/// Implements [`Clone`], [`Send`], and [`Sync`]; therefore, a waker may be invoked\n+/// from any thread, including ones not in any way managed by the executor. For example,\n+/// this might be done to wake a future when a blocking function call completes on another\n+/// thread.\n+///\n+/// [`Future::poll()`]: core::future::Future::poll\n+/// [`Poll::Pending`]: core::task::Poll::Pending\n #[repr(transparent)]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub struct Waker {\n@@ -219,18 +242,21 @@ unsafe impl Sync for Waker {}\n impl Waker {\n     /// Wake up the task associated with this `Waker`.\n     ///\n-    /// As long as the runtime keeps running and the task is not finished, it is\n-    /// guaranteed that each invocation of `wake` (or `wake_by_ref`) will be followed\n-    /// by at least one `poll` of the task to which this `Waker` belongs. This makes\n+    /// As long as the executor keeps running and the task is not finished, it is\n+    /// guaranteed that each invocation of [`wake()`](Self::wake) (or\n+    /// [`wake_by_ref()`](Self::wake_by_ref)) will be followed by at least one\n+    /// [`poll()`] of the task to which this [`Waker`] belongs. This makes\n     /// it possible to temporarily yield to other tasks while running potentially\n     /// unbounded processing loops.\n     ///\n     /// Note that the above implies that multiple wake-ups may be coalesced into a\n-    /// single `poll` invocation by the runtime.\n+    /// single [`poll()`] invocation by the runtime.\n     ///\n     /// Also note that yielding to competing tasks is not guaranteed: it is the\n     /// executor\u2019s choice which task to run and the executor may choose to run the\n     /// current task again.\n+    ///\n+    /// [`poll()`]: crate::future::Future::poll\n     #[inline]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub fn wake(self) {\n@@ -250,8 +276,8 @@ impl Waker {\n \n     /// Wake up the task associated with this `Waker` without consuming the `Waker`.\n     ///\n-    /// This is similar to `wake`, but may be slightly less efficient in the case\n-    /// where an owned `Waker` is available. This method should be preferred to\n+    /// This is similar to [`wake()`](Self::wake), but may be slightly less efficient in\n+    /// the case where an owned `Waker` is available. This method should be preferred to\n     /// calling `waker.clone().wake()`.\n     #[inline]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n@@ -263,7 +289,7 @@ impl Waker {\n         unsafe { (self.waker.vtable.wake_by_ref)(self.waker.data) }\n     }\n \n-    /// Returns `true` if this `Waker` and another `Waker` have awoken the same task.\n+    /// Returns `true` if this `Waker` and another [`Waker`] would awake the same task.\n     ///\n     /// This function works on a best-effort basis, and may return false even\n     /// when the `Waker`s would awaken the same task. However, if this function"}]}