{"sha": "a040b8005f37b94f3394cc3c6ab7058717830661", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNDBiODAwNWYzN2I5NGYzMzk0Y2MzYzZhYjcwNTg3MTc4MzA2NjE=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-03-07T22:40:34Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-03-07T22:46:46Z"}, "message": "add deriving_eq for tokens", "tree": {"sha": "7827839b7703fc8468876880a9b408c72b8bfecb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7827839b7703fc8468876880a9b408c72b8bfecb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a040b8005f37b94f3394cc3c6ab7058717830661", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a040b8005f37b94f3394cc3c6ab7058717830661", "html_url": "https://github.com/rust-lang/rust/commit/a040b8005f37b94f3394cc3c6ab7058717830661", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a040b8005f37b94f3394cc3c6ab7058717830661/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "url": "https://api.github.com/repos/rust-lang/rust/commits/7140d7c52bdf55daf0b978a19706d20c3bf7ee92", "html_url": "https://github.com/rust-lang/rust/commit/7140d7c52bdf55daf0b978a19706d20c3bf7ee92"}], "stats": {"total": 275, "additions": 2, "deletions": 273}, "files": [{"sha": "81aacbf173d5e34388d00594f03de203405f447b", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 273, "changes": 275, "blob_url": "https://github.com/rust-lang/rust/blob/a040b8005f37b94f3394cc3c6ab7058717830661/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040b8005f37b94f3394cc3c6ab7058717830661/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=a040b8005f37b94f3394cc3c6ab7058717830661", "patch": "@@ -18,7 +18,6 @@ use util::interner;\n \n use core::cast;\n use core::char;\n-use core::cmp;\n use core::str;\n use core::task;\n use std::oldmap::HashMap;\n@@ -41,6 +40,7 @@ pub enum binop {\n \n #[auto_encode]\n #[auto_decode]\n+#[deriving_eq]\n pub enum Token {\n     /* Expression-operator symbols. */\n     EQ,\n@@ -103,6 +103,7 @@ pub enum Token {\n \n #[auto_encode]\n #[auto_decode]\n+#[deriving_eq]\n /// For interpolation during macro expansion.\n pub enum nonterminal {\n     nt_item(@ast::item),\n@@ -522,278 +523,6 @@ pub fn reserved_keyword_table() -> HashMap<~str, ()> {\n }\n \n \n-impl cmp::Eq for Token {\n-    pure fn eq(&self, other: &Token) -> bool {\n-        match (*self) {\n-            EQ => {\n-                match (*other) {\n-                    EQ => true,\n-                    _ => false\n-                }\n-            }\n-            LT => {\n-                match (*other) {\n-                    LT => true,\n-                    _ => false\n-                }\n-            }\n-            LE => {\n-                match (*other) {\n-                    LE => true,\n-                    _ => false\n-                }\n-            }\n-            EQEQ => {\n-                match (*other) {\n-                    EQEQ => true,\n-                    _ => false\n-                }\n-            }\n-            NE => {\n-                match (*other) {\n-                    NE => true,\n-                    _ => false\n-                }\n-            }\n-            GE => {\n-                match (*other) {\n-                    GE => true,\n-                    _ => false\n-                }\n-            }\n-            GT => {\n-                match (*other) {\n-                    GT => true,\n-                    _ => false\n-                }\n-            }\n-            ANDAND => {\n-                match (*other) {\n-                    ANDAND => true,\n-                    _ => false\n-                }\n-            }\n-            OROR => {\n-                match (*other) {\n-                    OROR => true,\n-                    _ => false\n-                }\n-            }\n-            NOT => {\n-                match (*other) {\n-                    NOT => true,\n-                    _ => false\n-                }\n-            }\n-            TILDE => {\n-                match (*other) {\n-                    TILDE => true,\n-                    _ => false\n-                }\n-            }\n-            BINOP(e0a) => {\n-                match (*other) {\n-                    BINOP(e0b) => e0a == e0b,\n-                    _ => false\n-                }\n-            }\n-            BINOPEQ(e0a) => {\n-                match (*other) {\n-                    BINOPEQ(e0b) => e0a == e0b,\n-                    _ => false\n-                }\n-            }\n-            AT => {\n-                match (*other) {\n-                    AT => true,\n-                    _ => false\n-                }\n-            }\n-            DOT => {\n-                match (*other) {\n-                    DOT => true,\n-                    _ => false\n-                }\n-            }\n-            DOTDOT => {\n-                match (*other) {\n-                    DOTDOT => true,\n-                    _ => false\n-                }\n-            }\n-            COMMA => {\n-                match (*other) {\n-                    COMMA => true,\n-                    _ => false\n-                }\n-            }\n-            SEMI => {\n-                match (*other) {\n-                    SEMI => true,\n-                    _ => false\n-                }\n-            }\n-            COLON => {\n-                match (*other) {\n-                    COLON => true,\n-                    _ => false\n-                }\n-            }\n-            MOD_SEP => {\n-                match (*other) {\n-                    MOD_SEP => true,\n-                    _ => false\n-                }\n-            }\n-            RARROW => {\n-                match (*other) {\n-                    RARROW => true,\n-                    _ => false\n-                }\n-            }\n-            LARROW => {\n-                match (*other) {\n-                    LARROW => true,\n-                    _ => false\n-                }\n-            }\n-            DARROW => {\n-                match (*other) {\n-                    DARROW => true,\n-                    _ => false\n-                }\n-            }\n-            FAT_ARROW => {\n-                match (*other) {\n-                    FAT_ARROW => true,\n-                    _ => false\n-                }\n-            }\n-            LPAREN => {\n-                match (*other) {\n-                    LPAREN => true,\n-                    _ => false\n-                }\n-            }\n-            RPAREN => {\n-                match (*other) {\n-                    RPAREN => true,\n-                    _ => false\n-                }\n-            }\n-            LBRACKET => {\n-                match (*other) {\n-                    LBRACKET => true,\n-                    _ => false\n-                }\n-            }\n-            RBRACKET => {\n-                match (*other) {\n-                    RBRACKET => true,\n-                    _ => false\n-                }\n-            }\n-            LBRACE => {\n-                match (*other) {\n-                    LBRACE => true,\n-                    _ => false\n-                }\n-            }\n-            RBRACE => {\n-                match (*other) {\n-                    RBRACE => true,\n-                    _ => false\n-                }\n-            }\n-            POUND => {\n-                match (*other) {\n-                    POUND => true,\n-                    _ => false\n-                }\n-            }\n-            DOLLAR => {\n-                match (*other) {\n-                    DOLLAR => true,\n-                    _ => false\n-                }\n-            }\n-            LIT_INT(e0a, e1a) => {\n-                match (*other) {\n-                    LIT_INT(e0b, e1b) => e0a == e0b && e1a == e1b,\n-                    _ => false\n-                }\n-            }\n-            LIT_UINT(e0a, e1a) => {\n-                match (*other) {\n-                    LIT_UINT(e0b, e1b) => e0a == e0b && e1a == e1b,\n-                    _ => false\n-                }\n-            }\n-            LIT_INT_UNSUFFIXED(e0a) => {\n-                match (*other) {\n-                    LIT_INT_UNSUFFIXED(e0b) => e0a == e0b,\n-                    _ => false\n-                }\n-            }\n-            LIT_FLOAT(e0a, e1a) => {\n-                match (*other) {\n-                    LIT_FLOAT(e0b, e1b) => e0a == e0b && e1a == e1b,\n-                    _ => false\n-                }\n-            }\n-            LIT_FLOAT_UNSUFFIXED(e0a) => {\n-                match (*other) {\n-                    LIT_FLOAT_UNSUFFIXED(e0b) => e0a == e0b,\n-                    _ => false\n-                }\n-            }\n-            LIT_STR(e0a) => {\n-                match (*other) {\n-                    LIT_STR(e0b) => e0a == e0b,\n-                    _ => false\n-                }\n-            }\n-            IDENT(e0a, e1a) => {\n-                match (*other) {\n-                    IDENT(e0b, e1b) => e0a == e0b && e1a == e1b,\n-                    _ => false\n-                }\n-            }\n-            LIFETIME(e0a) => {\n-                match (*other) {\n-                    LIFETIME(e0b) => e0a == e0b,\n-                    _ => false\n-                }\n-            }\n-            UNDERSCORE => {\n-                match (*other) {\n-                    UNDERSCORE => true,\n-                    _ => false\n-                }\n-            }\n-            INTERPOLATED(_) => {\n-                match (*other) {\n-                    INTERPOLATED(_) => true,\n-                    _ => false\n-                }\n-            }\n-            DOC_COMMENT(e0a) => {\n-                match (*other) {\n-                    DOC_COMMENT(e0b) => e0a == e0b,\n-                    _ => false\n-                }\n-            }\n-            EOF => {\n-                match (*other) {\n-                    EOF => true,\n-                    _ => false\n-                }\n-            }\n-        }\n-    }\n-    pure fn ne(&self, other: &Token) -> bool { !(*self).eq(other) }\n-}\n-\n // Local Variables:\n // fill-column: 78;\n // indent-tabs-mode: nil"}]}