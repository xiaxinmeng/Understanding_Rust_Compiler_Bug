{"sha": "b778f7fa0192ac6863f3ce0ab49d9c4001bf5503", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NzhmN2ZhMDE5MmFjNjg2M2YzY2UwYWI0OWQ5YzQwMDFiZjU1MDM=", "commit": {"author": {"name": "Sean McArthur", "email": "sean.monstar@gmail.com", "date": "2016-08-31T23:02:55Z"}, "committer": {"name": "Sean McArthur", "email": "sean.monstar@gmail.com", "date": "2016-09-02T17:29:32Z"}, "message": "core: add likely and unlikely intrinsics", "tree": {"sha": "e462c72b1ce54a3f5e08e2fcb17b47f7d6216b48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e462c72b1ce54a3f5e08e2fcb17b47f7d6216b48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b778f7fa0192ac6863f3ce0ab49d9c4001bf5503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b778f7fa0192ac6863f3ce0ab49d9c4001bf5503", "html_url": "https://github.com/rust-lang/rust/commit/b778f7fa0192ac6863f3ce0ab49d9c4001bf5503", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b778f7fa0192ac6863f3ce0ab49d9c4001bf5503/comments", "author": {"login": "seanmonstar", "id": 51479, "node_id": "MDQ6VXNlcjUxNDc5", "avatar_url": "https://avatars.githubusercontent.com/u/51479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanmonstar", "html_url": "https://github.com/seanmonstar", "followers_url": "https://api.github.com/users/seanmonstar/followers", "following_url": "https://api.github.com/users/seanmonstar/following{/other_user}", "gists_url": "https://api.github.com/users/seanmonstar/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanmonstar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanmonstar/subscriptions", "organizations_url": "https://api.github.com/users/seanmonstar/orgs", "repos_url": "https://api.github.com/users/seanmonstar/repos", "events_url": "https://api.github.com/users/seanmonstar/events{/privacy}", "received_events_url": "https://api.github.com/users/seanmonstar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seanmonstar", "id": 51479, "node_id": "MDQ6VXNlcjUxNDc5", "avatar_url": "https://avatars.githubusercontent.com/u/51479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanmonstar", "html_url": "https://github.com/seanmonstar", "followers_url": "https://api.github.com/users/seanmonstar/followers", "following_url": "https://api.github.com/users/seanmonstar/following{/other_user}", "gists_url": "https://api.github.com/users/seanmonstar/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanmonstar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanmonstar/subscriptions", "organizations_url": "https://api.github.com/users/seanmonstar/orgs", "repos_url": "https://api.github.com/users/seanmonstar/repos", "events_url": "https://api.github.com/users/seanmonstar/events{/privacy}", "received_events_url": "https://api.github.com/users/seanmonstar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "824000aee3b9fd594a3da3eb38462fa341f0fa81", "url": "https://api.github.com/repos/rust-lang/rust/commits/824000aee3b9fd594a3da3eb38462fa341f0fa81", "html_url": "https://github.com/rust-lang/rust/commit/824000aee3b9fd594a3da3eb38462fa341f0fa81"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "619656f4d713c60d119fef748c557d9317e4481a", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b778f7fa0192ac6863f3ce0ab49d9c4001bf5503/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b778f7fa0192ac6863f3ce0ab49d9c4001bf5503/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=b778f7fa0192ac6863f3ce0ab49d9c4001bf5503", "patch": "@@ -194,6 +194,20 @@ extern \"rust-intrinsic\" {\n     /// own, or if it does not enable any significant optimizations.\n     pub fn assume(b: bool);\n \n+    #[cfg(not(stage0))]\n+    /// Hints to the compiler that branch condition is likely to be true.\n+    /// Returns the value passed to it.\n+    ///\n+    /// Any use other than with `if` statements will probably not have an effect.\n+    pub fn likely(b: bool) -> bool;\n+\n+    #[cfg(not(stage0))]\n+    /// Hints to the compiler that branch condition is likely to be false.\n+    /// Returns the value passed to it.\n+    ///\n+    /// Any use other than with `if` statements will probably not have an effect.\n+    pub fn unlikely(b: bool) -> bool;\n+\n     /// Executes a breakpoint trap, for inspection by a debugger.\n     pub fn breakpoint();\n "}, {"sha": "1ee5db7eafc5936fa0dce1d4333a506e2ad7abf9", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b778f7fa0192ac6863f3ce0ab49d9c4001bf5503/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b778f7fa0192ac6863f3ce0ab49d9c4001bf5503/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=b778f7fa0192ac6863f3ce0ab49d9c4001bf5503", "patch": "@@ -136,6 +136,14 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         (Some(llfn), _) => {\n             Call(bcx, llfn, &llargs, call_debug_location)\n         }\n+        (_, \"likely\") => {\n+            let expect = ccx.get_intrinsic(&(\"llvm.expect.i1\"));\n+            Call(bcx, expect, &[llargs[0], C_bool(ccx, true)], call_debug_location)\n+        }\n+        (_, \"unlikely\") => {\n+            let expect = ccx.get_intrinsic(&(\"llvm.expect.i1\"));\n+            Call(bcx, expect, &[llargs[0], C_bool(ccx, false)], call_debug_location)\n+        }\n         (_, \"try\") => {\n             bcx = try_intrinsic(bcx, llargs[0], llargs[1], llargs[2], llresult,\n                                 call_debug_location);"}, {"sha": "ea4b3e924b3b3ddf277670026e2e02d4a9628feb", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b778f7fa0192ac6863f3ce0ab49d9c4001bf5503/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b778f7fa0192ac6863f3ce0ab49d9c4001bf5503/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=b778f7fa0192ac6863f3ce0ab49d9c4001bf5503", "patch": "@@ -285,6 +285,8 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n                 (1, vec![param(ccx, 0), param(ccx, 0)], param(ccx, 0)),\n \n             \"assume\" => (0, vec![tcx.types.bool], tcx.mk_nil()),\n+            \"likely\" => (0, vec![tcx.types.bool], tcx.types.bool),\n+            \"unlikely\" => (0, vec![tcx.types.bool], tcx.types.bool),\n \n             \"discriminant_value\" => (1, vec![\n                     tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::new(1),"}, {"sha": "acaec0350bfbd9d42df062977d150b002321d846", "filename": "src/test/codegen/likely.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b778f7fa0192ac6863f3ce0ab49d9c4001bf5503/src%2Ftest%2Fcodegen%2Flikely.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b778f7fa0192ac6863f3ce0ab49d9c4001bf5503/src%2Ftest%2Fcodegen%2Flikely.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Flikely.rs?ref=b778f7fa0192ac6863f3ce0ab49d9c4001bf5503", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::{likely,unlikely};\n+\n+#[no_mangle]\n+pub fn check_likely(x: i32, y: i32) -> Option<i32> {\n+    unsafe {\n+        // CHECK: call i1 @llvm.expect.i1(i1 %{{.*}}, i1 true)\n+        if likely(x == y) {\n+            None\n+        } else {\n+            Some(x + y)\n+        }\n+    }\n+}\n+\n+#[no_mangle]\n+pub fn check_unlikely(x: i32, y: i32) -> Option<i32> {\n+    unsafe {\n+        // CHECK: call i1 @llvm.expect.i1(i1 %{{.*}}, i1 false)\n+        if unlikely(x == y) {\n+            None\n+        } else {\n+            Some(x + y)\n+        }\n+    }\n+}\n+"}]}