{"sha": "b38125c3bba8c6137bf47365c2009b647766059c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzODEyNWMzYmJhOGM2MTM3YmY0NzM2NWMyMDA5YjY0Nzc2NjA1OWM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-01-15T17:07:12Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-01-17T15:49:32Z"}, "message": "compiletest: Simplify handling of Clang-based tests.", "tree": {"sha": "da1f8016c5054332a88a4dc9970db6705f74115f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da1f8016c5054332a88a4dc9970db6705f74115f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b38125c3bba8c6137bf47365c2009b647766059c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b38125c3bba8c6137bf47365c2009b647766059c", "html_url": "https://github.com/rust-lang/rust/commit/b38125c3bba8c6137bf47365c2009b647766059c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b38125c3bba8c6137bf47365c2009b647766059c/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea4fb95dc9e234d35a7a94f6cdc37cb5103c35ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea4fb95dc9e234d35a7a94f6cdc37cb5103c35ed", "html_url": "https://github.com/rust-lang/rust/commit/ea4fb95dc9e234d35a7a94f6cdc37cb5103c35ed"}], "stats": {"total": 135, "additions": 26, "deletions": 109}, "files": [{"sha": "c9160aca9173e0772b0aab30160c0e113c7db74f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b38125c3bba8c6137bf47365c2009b647766059c/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38125c3bba8c6137bf47365c2009b647766059c/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=b38125c3bba8c6137bf47365c2009b647766059c", "patch": "@@ -1106,13 +1106,11 @@ impl Step for Compiletest {\n                     }).to_string()\n             })\n         };\n-        let (lldb_exe, clang_exe) =\n-            if builder.config.lldb_enabled && !target.contains(\"emscripten\") {\n+        let lldb_exe = if builder.config.lldb_enabled && !target.contains(\"emscripten\") {\n             // Test against the lldb that was just built.\n-            (builder.llvm_out(target).join(\"bin\").join(\"lldb\"),\n-             builder.llvm_out(target).join(\"bin\").join(\"clang\"))\n+            builder.llvm_out(target).join(\"bin\").join(\"lldb\")\n         } else {\n-            (PathBuf::from(\"lldb\"), PathBuf::from(\"clang\"))\n+            PathBuf::from(\"lldb\")\n         };\n         let lldb_version = Command::new(&lldb_exe)\n             .arg(\"--version\")\n@@ -1127,19 +1125,14 @@ impl Step for Compiletest {\n             }\n         }\n \n-        let clang_version = Command::new(&clang_exe)\n-            .arg(\"--version\")\n-            .output()\n-            .map(|output| { String::from_utf8_lossy(&output.stdout).to_string() })\n-            .ok();\n-        if let Some(ref vers) = clang_version {\n-            cmd.arg(\"--clang-version\").arg(vers);\n-        }\n-\n         if let Some(var) = env::var_os(\"RUSTBUILD_FORCE_CLANG_BASED_TESTS\") {\n-            match &var.to_string_lossy()[..] {\n+            match &var.to_string_lossy().to_lowercase()[..] {\n                 \"1\" | \"yes\" | \"on\" => {\n-                    cmd.arg(\"--force-clang-based-tests\");\n+                    assert!(builder.config.lldb_enabled,\n+                        \"RUSTBUILD_FORCE_CLANG_BASED_TESTS needs Clang/LLDB to \\\n+                         be built.\");\n+                    let clang_exe = builder.llvm_out(target).join(\"bin\").join(\"clang\");\n+                    cmd.arg(\"--run-clang-based-tests-with\").arg(clang_exe);\n                 }\n                 \"0\" | \"no\" | \"off\" => {\n                     // Nothing to do."}, {"sha": "cf687070bc2edcaa1e78021a079f2588d6d12d68", "filename": "src/test/run-make-fulldeps/cross-lang-lto-clang/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b38125c3bba8c6137bf47365c2009b647766059c/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b38125c3bba8c6137bf47365c2009b647766059c/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2FMakefile?ref=b38125c3bba8c6137bf47365c2009b647766059c", "patch": "@@ -9,7 +9,7 @@ all: cpp-executable rust-executable\n \n cpp-executable:\n \t$(RUSTC) -Zcross-lang-lto=on -o $(TMPDIR)/librustlib-xlto.a -Copt-level=2 -Ccodegen-units=1 ./rustlib.rs\n-\tclang -flto=thin -fuse-ld=lld -L $(TMPDIR) -lrustlib-xlto -o $(TMPDIR)/cmain ./cmain.c -O3\n+\t$(CLANG) -flto=thin -fuse-ld=lld -L $(TMPDIR) -lrustlib-xlto -o $(TMPDIR)/cmain ./cmain.c -O3\n \t# Make sure we don't find a call instruction to the function we expect to\n \t# always be inlined.\n \tllvm-objdump -d $(TMPDIR)/cmain | $(CGREP) -v -e \"call.*rust_always_inlined\"\n@@ -18,8 +18,8 @@ cpp-executable:\n \tllvm-objdump -d $(TMPDIR)/cmain | $(CGREP) -e \"call.*rust_never_inlined\"\n \n rust-executable:\n-\tclang ./clib.c -flto=thin -c -o $(TMPDIR)/clib.o -O2\n+\t$(CLANG) ./clib.c -flto=thin -c -o $(TMPDIR)/clib.o -O2\n \t(cd $(TMPDIR); $(AR) crus ./libxyz.a ./clib.o)\n-\t$(RUSTC) -Zcross-lang-lto=on -L$(TMPDIR) -Copt-level=2 -Clinker=clang -Clink-arg=-fuse-ld=lld ./main.rs -o $(TMPDIR)/rsmain\n+\t$(RUSTC) -Zcross-lang-lto=on -L$(TMPDIR) -Copt-level=2 -Clinker=$(CLANG) -Clink-arg=-fuse-ld=lld ./main.rs -o $(TMPDIR)/rsmain\n \tllvm-objdump -d $(TMPDIR)/rsmain | $(CGREP) -e \"call.*c_never_inlined\"\n \tllvm-objdump -d $(TMPDIR)/rsmain | $(CGREP) -v -e \"call.*c_always_inlined\""}, {"sha": "f6f8ef1dff4850cfa12d927b9c15e566617eb737", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b38125c3bba8c6137bf47365c2009b647766059c/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38125c3bba8c6137bf47365c2009b647766059c/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=b38125c3bba8c6137bf47365c2009b647766059c", "patch": "@@ -144,9 +144,9 @@ pub struct Config {\n     /// (or, alternatively, to silently run them like regular run-pass tests).\n     pub force_valgrind: bool,\n \n-    /// Whether to fail if we don't have a clang version available that matches\n-    /// rustc's LLVM version.\n-    pub force_clang_based_tests: bool,\n+    /// The path to the Clang executable to run Clang-based tests with. If\n+    /// `None` then these tests will be ignored.\n+    pub run_clang_based_tests_with: Option<String>,\n \n     /// The directory containing the tests to run\n     pub src_base: PathBuf,\n@@ -209,9 +209,6 @@ pub struct Config {\n     /// Is LLVM a system LLVM\n     pub system_llvm: bool,\n \n-    /// The version of Clang available to run-make tests (if any).\n-    pub clang_version: Option<String>,\n-\n     /// Path to the android tools\n     pub android_cross_path: PathBuf,\n "}, {"sha": "6a00bd3c42611bcefae50f152289816d09b339f2", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b38125c3bba8c6137bf47365c2009b647766059c/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38125c3bba8c6137bf47365c2009b647766059c/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=b38125c3bba8c6137bf47365c2009b647766059c", "patch": "@@ -112,7 +112,7 @@ impl EarlyProps {\n                     props.ignore = Ignore::Ignore;\n                 }\n \n-                if !config.force_clang_based_tests &&\n+                if config.run_clang_based_tests_with.is_none() &&\n                    config.parse_needs_matching_clang(ln) {\n                     props.ignore = Ignore::Ignore;\n                 }"}, {"sha": "682cce663a1ff8f71f60ea7bba0710cd8183903f", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 6, "deletions": 83, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/b38125c3bba8c6137bf47365c2009b647766059c/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38125c3bba8c6137bf47365c2009b647766059c/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=b38125c3bba8c6137bf47365c2009b647766059c", "patch": "@@ -50,32 +50,12 @@ pub mod util;\n fn main() {\n     env_logger::init();\n \n-    let mut config = parse_config(env::args().collect());\n+    let config = parse_config(env::args().collect());\n \n     if config.valgrind_path.is_none() && config.force_valgrind {\n         panic!(\"Can't find Valgrind to run Valgrind tests\");\n     }\n \n-    // Some run-make tests need a version of Clang available that matches\n-    // rustc's LLVM version. Since this isn't always the case, these tests are\n-    // opt-in.\n-    let clang_based_tests_possible = check_clang_based_tests_possible(&config);\n-    match (clang_based_tests_possible, config.force_clang_based_tests) {\n-        (Ok(_), true) |\n-        (Err(_), false) => {\n-            // Nothing to do\n-        }\n-        (Ok(_), false) => {\n-            // If a valid clang version is available, run the tests even if\n-            // they are not forced.\n-            config.force_clang_based_tests = true;\n-        }\n-        (Err(msg), true) => {\n-            // Tests are forced but we don't have a valid version of Clang.\n-            panic!(\"{}\", msg)\n-        }\n-    }\n-\n     log_config(&config);\n     run_tests(&config);\n }\n@@ -128,10 +108,11 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"force-valgrind\",\n             \"fail if Valgrind tests cannot be run under Valgrind\",\n         )\n-        .optflag(\n+        .optopt(\n             \"\",\n-            \"force-clang-based-tests\",\n-            \"fail if Clang-based run-make tests can't be run for some reason\",\n+            \"run-clang-based-tests-with\",\n+            \"path to Clang executable\",\n+            \"PATH\",\n         )\n         .optopt(\n             \"\",\n@@ -214,12 +195,6 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"VERSION STRING\",\n         )\n         .optflag(\"\", \"system-llvm\", \"is LLVM the system LLVM\")\n-        .optopt(\n-            \"\",\n-            \"clang-version\",\n-            \"the version of Clang available to run-make tests\",\n-            \"VERSION STRING\",\n-        )\n         .optopt(\n             \"\",\n             \"android-cross-path\",\n@@ -329,7 +304,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         docck_python: matches.opt_str(\"docck-python\").unwrap(),\n         valgrind_path: matches.opt_str(\"valgrind-path\"),\n         force_valgrind: matches.opt_present(\"force-valgrind\"),\n-        force_clang_based_tests: matches.opt_present(\"force-clang-based-tests\"),\n+        run_clang_based_tests_with: matches.opt_str(\"run-clang-based-tests-with\"),\n         llvm_filecheck: matches.opt_str(\"llvm-filecheck\").map(|s| PathBuf::from(&s)),\n         src_base,\n         build_base: opt_path(matches, \"build-base\"),\n@@ -355,7 +330,6 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         lldb_native_rust,\n         llvm_version: matches.opt_str(\"llvm-version\"),\n         system_llvm: matches.opt_present(\"system-llvm\"),\n-        clang_version: matches.opt_str(\"clang-version\"),\n         android_cross_path: android_cross_path,\n         adb_path: opt_str2(matches.opt_str(\"adb-path\")),\n         adb_test_dir: opt_str2(matches.opt_str(\"adb-test-dir\")),\n@@ -1064,54 +1038,3 @@ fn test_extract_gdb_version() {\n         7012050: \"GNU gdb (GDB) 7.12.50.20161027-git\",\n     }\n }\n-\n-\n-fn check_clang_based_tests_possible(config: &Config) -> Result<(), String> {\n-\n-    let llvm_version = if let Some(llvm_version) = config.llvm_version.as_ref() {\n-        llvm_version\n-    } else {\n-        return Err(format!(\"Running `compiletest` with `--force-clang-based-tests` \\\n-                            requires `--llvm-version` to be specified.\"));\n-    };\n-\n-    let clang_major_version = if let Some(ref version_string) = config.clang_version {\n-        major_version_from_clang_version_string(version_string)?\n-    } else {\n-        return Err(format!(\"Clang is required for running tests \\\n-                            (because of --force-clang-based-tests) \\\n-                            but it does not seem to be available.\"));\n-    };\n-\n-    let rustc_llvm_major_version = major_version_from_llvm_version_string(&llvm_version)?;\n-\n-    return if clang_major_version != rustc_llvm_major_version {\n-        Err(format!(\"`--force-clang-based-tests` needs the major version of Clang \\\n-                     and rustc's LLVM to be the same. Clang version is: {}, \\\n-                     Rustc LLVM is: {}\",\n-                     config.clang_version.clone().unwrap(),\n-                     llvm_version))\n-    } else {\n-        Ok(())\n-    };\n-\n-    fn major_version_from_clang_version_string(clang_version: &str) -> Result<&str, String> {\n-        let re = regex::Regex::new(r\"clang version (\\d)\\.\\d\").unwrap();\n-        if let Some(captures) = re.captures(clang_version) {\n-            Ok(captures.get(1).unwrap().as_str())\n-        } else {\n-            Err(format!(\"Failed to parse major version from Clang version \\\n-                         string '{}'.\", clang_version))\n-        }\n-    }\n-\n-    fn major_version_from_llvm_version_string(llvm_version: &str) -> Result<&str, String> {\n-        let re = regex::Regex::new(r\"(\\d)\\.\\d\").unwrap();\n-        if let Some(captures) = re.captures(llvm_version) {\n-            Ok(captures.get(1).unwrap().as_str())\n-        } else {\n-            Err(format!(\"Failed to parse major version from LLVM version \\\n-                         string '{}'.\", llvm_version))\n-        }\n-    }\n-}"}, {"sha": "f0050f2adb957811a2f26d3d89c14f16e633ccc9", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b38125c3bba8c6137bf47365c2009b647766059c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38125c3bba8c6137bf47365c2009b647766059c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=b38125c3bba8c6137bf47365c2009b647766059c", "patch": "@@ -2587,6 +2587,10 @@ impl<'test> TestCx<'test> {\n             cmd.env(\"RUSTC_LINKER\", linker);\n         }\n \n+        if let Some(ref clang) = self.config.run_clang_based_tests_with {\n+            cmd.env(\"CLANG\", clang);\n+        }\n+\n         // We don't want RUSTFLAGS set from the outside to interfere with\n         // compiler flags set in the test cases:\n         cmd.env_remove(\"RUSTFLAGS\");"}]}