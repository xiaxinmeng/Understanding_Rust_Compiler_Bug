{"sha": "5f549d9b49868648f0fb152aa12084dcb859ee45", "node_id": "C_kwDOAAsO6NoAKDVmNTQ5ZDliNDk4Njg2NDhmMGZiMTUyYWExMjA4NGRjYjg1OWVlNDU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-01-06T23:11:49Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-01-06T23:40:51Z"}, "message": "Modify the buffer position directly when reading leb128 values.\n\nIt's a small but clear performance win.", "tree": {"sha": "b20812720ddf48bcd2c7ed0fc3f37b76c9fbdb8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b20812720ddf48bcd2c7ed0fc3f37b76c9fbdb8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f549d9b49868648f0fb152aa12084dcb859ee45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f549d9b49868648f0fb152aa12084dcb859ee45", "html_url": "https://github.com/rust-lang/rust/commit/5f549d9b49868648f0fb152aa12084dcb859ee45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f549d9b49868648f0fb152aa12084dcb859ee45/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddabe0775c5f5b551d5eb54e3c4366fb8bec0c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddabe0775c5f5b551d5eb54e3c4366fb8bec0c92", "html_url": "https://github.com/rust-lang/rust/commit/ddabe0775c5f5b551d5eb54e3c4366fb8bec0c92"}], "stats": {"total": 30, "additions": 11, "deletions": 19}, "files": [{"sha": "de3337747632e871f7fdbb118fa73ddec3c834e1", "filename": "compiler/rustc_serialize/src/leb128.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5f549d9b49868648f0fb152aa12084dcb859ee45/compiler%2Frustc_serialize%2Fsrc%2Fleb128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f549d9b49868648f0fb152aa12084dcb859ee45/compiler%2Frustc_serialize%2Fsrc%2Fleb128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fleb128.rs?ref=5f549d9b49868648f0fb152aa12084dcb859ee45", "patch": "@@ -53,16 +53,15 @@ impl_write_unsigned_leb128!(write_usize_leb128, usize);\n macro_rules! impl_read_unsigned_leb128 {\n     ($fn_name:ident, $int_ty:ty) => {\n         #[inline]\n-        pub fn $fn_name(slice: &[u8]) -> ($int_ty, usize) {\n+        pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {\n             let mut result = 0;\n             let mut shift = 0;\n-            let mut position = 0;\n             loop {\n-                let byte = slice[position];\n-                position += 1;\n+                let byte = slice[*position];\n+                *position += 1;\n                 if (byte & 0x80) == 0 {\n                     result |= (byte as $int_ty) << shift;\n-                    return (result, position);\n+                    return result;\n                 } else {\n                     result |= ((byte & 0x7F) as $int_ty) << shift;\n                 }\n@@ -122,15 +121,14 @@ impl_write_signed_leb128!(write_isize_leb128, isize);\n macro_rules! impl_read_signed_leb128 {\n     ($fn_name:ident, $int_ty:ty) => {\n         #[inline]\n-        pub fn $fn_name(slice: &[u8]) -> ($int_ty, usize) {\n+        pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {\n             let mut result = 0;\n             let mut shift = 0;\n-            let mut position = 0;\n             let mut byte;\n \n             loop {\n-                byte = slice[position];\n-                position += 1;\n+                byte = slice[*position];\n+                *position += 1;\n                 result |= <$int_ty>::from(byte & 0x7F) << shift;\n                 shift += 7;\n \n@@ -144,7 +142,7 @@ macro_rules! impl_read_signed_leb128 {\n                 result |= (!0 << shift);\n             }\n \n-            (result, position)\n+            result\n         }\n     };\n }"}, {"sha": "3d28e3293e189c17e3dabcb8b7b0078476ad0311", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f549d9b49868648f0fb152aa12084dcb859ee45/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f549d9b49868648f0fb152aa12084dcb859ee45/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=5f549d9b49868648f0fb152aa12084dcb859ee45", "patch": "@@ -559,11 +559,7 @@ impl<'a> Decoder<'a> {\n }\n \n macro_rules! read_leb128 {\n-    ($dec:expr, $fun:ident) => {{\n-        let (value, bytes_read) = leb128::$fun(&$dec.data[$dec.position..]);\n-        $dec.position += bytes_read;\n-        Ok(value)\n-    }};\n+    ($dec:expr, $fun:ident) => {{ Ok(leb128::$fun($dec.data, &mut $dec.position)) }};\n }\n \n impl<'a> serialize::Decoder for Decoder<'a> {"}, {"sha": "314c07db981daccfca32eda6f492c0962e57bf03", "filename": "compiler/rustc_serialize/tests/leb128.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f549d9b49868648f0fb152aa12084dcb859ee45/compiler%2Frustc_serialize%2Ftests%2Fleb128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f549d9b49868648f0fb152aa12084dcb859ee45/compiler%2Frustc_serialize%2Ftests%2Fleb128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Ftests%2Fleb128.rs?ref=5f549d9b49868648f0fb152aa12084dcb859ee45", "patch": "@@ -30,9 +30,8 @@ macro_rules! impl_test_unsigned_leb128 {\n \n             let mut position = 0;\n             for &expected in &values {\n-                let (actual, bytes_read) = $read_fn_name(&stream[position..]);\n+                let actual = $read_fn_name(&stream, &mut position);\n                 assert_eq!(expected, actual);\n-                position += bytes_read;\n             }\n             assert_eq!(stream.len(), position);\n         }\n@@ -77,9 +76,8 @@ macro_rules! impl_test_signed_leb128 {\n \n             let mut position = 0;\n             for &expected in &values {\n-                let (actual, bytes_read) = $read_fn_name(&stream[position..]);\n+                let actual = $read_fn_name(&stream, &mut position);\n                 assert_eq!(expected, actual);\n-                position += bytes_read;\n             }\n             assert_eq!(stream.len(), position);\n         }"}]}