{"sha": "0198ea47d8f0a9d99820f9a3c168ab3d26fd4f2a", "node_id": "C_kwDOAAsO6NoAKDAxOThlYTQ3ZDhmMGE5ZDk5ODIwZjlhM2MxNjhhYjNkMjZmZDRmMmE", "commit": {"author": {"name": "Lucas Kent", "email": "rubickent@gmail.com", "date": "2021-12-04T12:15:45Z"}, "committer": {"name": "Lucas Kent", "email": "rubickent@gmail.com", "date": "2021-12-05T05:50:17Z"}, "message": "Fix duplicate derive clone suggestion", "tree": {"sha": "af44944884d41e636ca401351a752db813633221", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af44944884d41e636ca401351a752db813633221"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0198ea47d8f0a9d99820f9a3c168ab3d26fd4f2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0198ea47d8f0a9d99820f9a3c168ab3d26fd4f2a", "html_url": "https://github.com/rust-lang/rust/commit/0198ea47d8f0a9d99820f9a3c168ab3d26fd4f2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0198ea47d8f0a9d99820f9a3c168ab3d26fd4f2a/comments", "author": {"login": "rukai", "id": 5120858, "node_id": "MDQ6VXNlcjUxMjA4NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5120858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rukai", "html_url": "https://github.com/rukai", "followers_url": "https://api.github.com/users/rukai/followers", "following_url": "https://api.github.com/users/rukai/following{/other_user}", "gists_url": "https://api.github.com/users/rukai/gists{/gist_id}", "starred_url": "https://api.github.com/users/rukai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rukai/subscriptions", "organizations_url": "https://api.github.com/users/rukai/orgs", "repos_url": "https://api.github.com/users/rukai/repos", "events_url": "https://api.github.com/users/rukai/events{/privacy}", "received_events_url": "https://api.github.com/users/rukai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rukai", "id": 5120858, "node_id": "MDQ6VXNlcjUxMjA4NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5120858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rukai", "html_url": "https://github.com/rukai", "followers_url": "https://api.github.com/users/rukai/followers", "following_url": "https://api.github.com/users/rukai/following{/other_user}", "gists_url": "https://api.github.com/users/rukai/gists{/gist_id}", "starred_url": "https://api.github.com/users/rukai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rukai/subscriptions", "organizations_url": "https://api.github.com/users/rukai/orgs", "repos_url": "https://api.github.com/users/rukai/repos", "events_url": "https://api.github.com/users/rukai/events{/privacy}", "received_events_url": "https://api.github.com/users/rukai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14c1e71d095a5500def51d4e405bd2b0010f3d37", "url": "https://api.github.com/repos/rust-lang/rust/commits/14c1e71d095a5500def51d4e405bd2b0010f3d37", "html_url": "https://github.com/rust-lang/rust/commit/14c1e71d095a5500def51d4e405bd2b0010f3d37"}], "stats": {"total": 112, "additions": 96, "deletions": 16}, "files": [{"sha": "f0cc9d774645b24f65ea8b0603c0514599c18fa1", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0198ea47d8f0a9d99820f9a3c168ab3d26fd4f2a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198ea47d8f0a9d99820f9a3c168ab3d26fd4f2a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=0198ea47d8f0a9d99820f9a3c168ab3d26fd4f2a", "patch": "@@ -1175,11 +1175,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn suggest_derive(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n-        unsatisfied_predicates: &Vec<(\n+        unsatisfied_predicates: &[(\n             ty::Predicate<'tcx>,\n             Option<ty::Predicate<'tcx>>,\n             Option<ObligationCause<'tcx>>,\n-        )>,\n+        )],\n     ) {\n         let mut derives = Vec::<(String, Span, String)>::new();\n         let mut traits = Vec::<Span>::new();\n@@ -1216,23 +1216,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 traits.push(self.tcx.def_span(trait_pred.def_id()));\n             }\n         }\n-        derives.sort();\n-        let derives_grouped = derives.into_iter().fold(\n-            Vec::<(String, Span, String)>::new(),\n-            |mut acc, (self_name, self_span, trait_name)| {\n-                if let Some((acc_self_name, _, ref mut traits)) = acc.last_mut() {\n-                    if acc_self_name == &self_name {\n-                        traits.push_str(format!(\", {}\", trait_name).as_str());\n-                        return acc;\n-                    }\n-                }\n-                acc.push((self_name, self_span, trait_name));\n-                acc\n-            },\n-        );\n         traits.sort();\n         traits.dedup();\n \n+        derives.sort();\n+        derives.dedup();\n+\n+        let mut derives_grouped = Vec::<(String, Span, String)>::new();\n+        for (self_name, self_span, trait_name) in derives.into_iter() {\n+            if let Some((last_self_name, _, ref mut last_trait_names)) = derives_grouped.last_mut()\n+            {\n+                if last_self_name == &self_name {\n+                    last_trait_names.push_str(format!(\", {}\", trait_name).as_str());\n+                    continue;\n+                }\n+            }\n+            derives_grouped.push((self_name, self_span, trait_name));\n+        }\n+\n         let len = traits.len();\n         if len > 0 {\n             let span: MultiSpan = traits.into();"}, {"sha": "df792f118ab7652a135ab2ed8543eb1ae1d25843", "filename": "src/test/ui/derives/issue-91492.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0198ea47d8f0a9d99820f9a3c168ab3d26fd4f2a/src%2Ftest%2Fui%2Fderives%2Fissue-91492.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198ea47d8f0a9d99820f9a3c168ab3d26fd4f2a/src%2Ftest%2Fui%2Fderives%2Fissue-91492.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-91492.rs?ref=0198ea47d8f0a9d99820f9a3c168ab3d26fd4f2a", "patch": "@@ -0,0 +1,25 @@\n+// Reproduce the issue with vec\n+pub struct NoDerives;\n+fn fun1(foo: &mut Vec<NoDerives>, bar: &[NoDerives]) {\n+    foo.extend_from_slice(bar); //~ ERROR\n+}\n+\n+// Reproduce the issue with vec\n+// and demonstrate that other derives are ignored in the suggested output\n+#[derive(Default, PartialEq)]\n+pub struct SomeDerives;\n+fn fun2(foo: &mut Vec<SomeDerives>, bar: &[SomeDerives]) {\n+    foo.extend_from_slice(bar); //~ ERROR\n+}\n+\n+// Try and fail to reproduce the issue without vec.\n+// No idea why it doesnt reproduce the issue but its still a useful test case.\n+struct Object<T, A>(T, A);\n+impl<T: Clone, A: Default> Object<T, A> {\n+    fn use_clone(&self) {}\n+}\n+fn fun3(foo: Object<NoDerives, SomeDerives>) {\n+    foo.use_clone(); //~ ERROR\n+}\n+\n+fn main() {}"}, {"sha": "73c91154a7bda8c84b26427116a184061ddaac1e", "filename": "src/test/ui/derives/issue-91492.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0198ea47d8f0a9d99820f9a3c168ab3d26fd4f2a/src%2Ftest%2Fui%2Fderives%2Fissue-91492.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0198ea47d8f0a9d99820f9a3c168ab3d26fd4f2a/src%2Ftest%2Fui%2Fderives%2Fissue-91492.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-91492.stderr?ref=0198ea47d8f0a9d99820f9a3c168ab3d26fd4f2a", "patch": "@@ -0,0 +1,54 @@\n+error[E0599]: the method `extend_from_slice` exists for mutable reference `&mut Vec<NoDerives>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-91492.rs:4:9\n+   |\n+LL | pub struct NoDerives;\n+   | --------------------- doesn't satisfy `NoDerives: Clone`\n+LL | fn fun1(foo: &mut Vec<NoDerives>, bar: &[NoDerives]) {\n+LL |     foo.extend_from_slice(bar);\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `NoDerives: Clone`\n+help: consider annotating `NoDerives` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n+\n+error[E0599]: the method `extend_from_slice` exists for mutable reference `&mut Vec<SomeDerives>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-91492.rs:12:9\n+   |\n+LL | pub struct SomeDerives;\n+   | ----------------------- doesn't satisfy `SomeDerives: Clone`\n+LL | fn fun2(foo: &mut Vec<SomeDerives>, bar: &[SomeDerives]) {\n+LL |     foo.extend_from_slice(bar);\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `SomeDerives: Clone`\n+help: consider annotating `SomeDerives` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n+\n+error[E0599]: the method `use_clone` exists for struct `Object<NoDerives, SomeDerives>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-91492.rs:22:9\n+   |\n+LL | pub struct NoDerives;\n+   | --------------------- doesn't satisfy `NoDerives: Clone`\n+...\n+LL | struct Object<T, A>(T, A);\n+   | -------------------------- method `use_clone` not found for this\n+...\n+LL |     foo.use_clone();\n+   |         ^^^^^^^^^ method cannot be called on `Object<NoDerives, SomeDerives>` due to unsatisfied trait bounds\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `NoDerives: Clone`\n+help: consider annotating `NoDerives` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}]}