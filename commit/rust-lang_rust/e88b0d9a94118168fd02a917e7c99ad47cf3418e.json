{"sha": "e88b0d9a94118168fd02a917e7c99ad47cf3418e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OGIwZDlhOTQxMTgxNjhmZDAyYTkxN2U3Yzk5YWQ0N2NmMzQxOGU=", "commit": {"author": {"name": "Olivier Goffart", "email": "ogoffart@woboq.com", "date": "2018-11-08T09:07:02Z"}, "committer": {"name": "Olivier Goffart", "email": "ogoffart@woboq.com", "date": "2018-12-01T08:02:11Z"}, "message": "Introduce proc_macro::Span::source_text", "tree": {"sha": "34c83a7f8eb815514591ca6e4bb44e56bcfc397d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34c83a7f8eb815514591ca6e4bb44e56bcfc397d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e88b0d9a94118168fd02a917e7c99ad47cf3418e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e88b0d9a94118168fd02a917e7c99ad47cf3418e", "html_url": "https://github.com/rust-lang/rust/commit/e88b0d9a94118168fd02a917e7c99ad47cf3418e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e88b0d9a94118168fd02a917e7c99ad47cf3418e/comments", "author": {"login": "ogoffart", "id": 959326, "node_id": "MDQ6VXNlcjk1OTMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/959326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogoffart", "html_url": "https://github.com/ogoffart", "followers_url": "https://api.github.com/users/ogoffart/followers", "following_url": "https://api.github.com/users/ogoffart/following{/other_user}", "gists_url": "https://api.github.com/users/ogoffart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogoffart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogoffart/subscriptions", "organizations_url": "https://api.github.com/users/ogoffart/orgs", "repos_url": "https://api.github.com/users/ogoffart/repos", "events_url": "https://api.github.com/users/ogoffart/events{/privacy}", "received_events_url": "https://api.github.com/users/ogoffart/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ogoffart", "id": 959326, "node_id": "MDQ6VXNlcjk1OTMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/959326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogoffart", "html_url": "https://github.com/ogoffart", "followers_url": "https://api.github.com/users/ogoffart/followers", "following_url": "https://api.github.com/users/ogoffart/following{/other_user}", "gists_url": "https://api.github.com/users/ogoffart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogoffart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogoffart/subscriptions", "organizations_url": "https://api.github.com/users/ogoffart/orgs", "repos_url": "https://api.github.com/users/ogoffart/repos", "events_url": "https://api.github.com/users/ogoffart/events{/privacy}", "received_events_url": "https://api.github.com/users/ogoffart/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d48ab693d1ce99f30c0cf9abdf45c209824fe825", "url": "https://api.github.com/repos/rust-lang/rust/commits/d48ab693d1ce99f30c0cf9abdf45c209824fe825", "html_url": "https://github.com/rust-lang/rust/commit/d48ab693d1ce99f30c0cf9abdf45c209824fe825"}], "stats": {"total": 61, "additions": 59, "deletions": 2}, "files": [{"sha": "cf9229909d9ff4a16d93ea5e4e83328ad9cdc87f", "filename": "src/libproc_macro/bridge/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e88b0d9a94118168fd02a917e7c99ad47cf3418e/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88b0d9a94118168fd02a917e7c99ad47cf3418e/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fmod.rs?ref=e88b0d9a94118168fd02a917e7c99ad47cf3418e", "patch": "@@ -165,6 +165,7 @@ macro_rules! with_api {\n                 fn end($self: $S::Span) -> LineColumn;\n                 fn join($self: $S::Span, other: $S::Span) -> Option<$S::Span>;\n                 fn resolved_at($self: $S::Span, at: $S::Span) -> $S::Span;\n+                fn source_text($self: $S::Span) -> Option<String>;\n             },\n         }\n     };"}, {"sha": "b39e139de5467b32eb2884a74d0e07119d170b25", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e88b0d9a94118168fd02a917e7c99ad47cf3418e/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88b0d9a94118168fd02a917e7c99ad47cf3418e/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=e88b0d9a94118168fd02a917e7c99ad47cf3418e", "patch": "@@ -341,6 +341,18 @@ impl Span {\n         self.0 == other.0\n     }\n \n+    /// Returns the source text behind a span. This preserves the original source\n+    /// code, including spaces and comments. It only returns a result if the span\n+    /// corresponds to real source code.\n+    ///\n+    /// Note: The observable result of a macro should only rely on the tokens and\n+    /// not on this source text. The result of this function is a best effort to\n+    /// be used for diagnostics only.\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n+    pub fn source_text(&self) -> Option<String> {\n+        self.0.source_text()\n+    }\n+\n     diagnostic_method!(error, Level::Error);\n     diagnostic_method!(warning, Level::Warning);\n     diagnostic_method!(note, Level::Note);"}, {"sha": "a5a35662ec59ebd20618201c38ab0a0269816d77", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e88b0d9a94118168fd02a917e7c99ad47cf3418e/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88b0d9a94118168fd02a917e7c99ad47cf3418e/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=e88b0d9a94118168fd02a917e7c99ad47cf3418e", "patch": "@@ -748,4 +748,7 @@ impl server::Span for Rustc<'_> {\n     fn resolved_at(&mut self, span: Self::Span, at: Self::Span) -> Self::Span {\n         span.with_ctxt(at.ctxt())\n     }\n+    fn source_text(&mut self,  span: Self::Span) -> Option<String> {\n+        self.sess.source_map().span_to_snippet(span).ok()\n+    }\n }"}, {"sha": "7afc341d4160972923493e014e61b7a632e7593d", "filename": "src/test/run-pass/proc-macro/auxiliary/span-api-tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e88b0d9a94118168fd02a917e7c99ad47cf3418e/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fspan-api-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88b0d9a94118168fd02a917e7c99ad47cf3418e/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fspan-api-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fspan-api-tests.rs?ref=e88b0d9a94118168fd02a917e7c99ad47cf3418e", "patch": "@@ -43,3 +43,14 @@ pub fn assert_source_file(input: TokenStream) -> TokenStream {\n \n     \"\".parse().unwrap()\n }\n+\n+#[proc_macro]\n+pub fn macro_stringify(input: TokenStream) -> TokenStream {\n+    let mut tokens = input.into_iter();\n+    let first_span = tokens.next().expect(\"first token\").span();\n+    let last_span = tokens.last().map(|x| x.span()).unwrap_or(first_span);\n+    let span = first_span.join(last_span).expect(\"joined span\");\n+    let src = span.source_text().expect(\"source_text\");\n+    TokenTree::Literal(Literal::string(&src)).into()\n+}\n+"}, {"sha": "51cd8cfa208679f1e8da39f1aca9774a0f8ebe61", "filename": "src/test/run-pass/proc-macro/span-api-tests.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e88b0d9a94118168fd02a917e7c99ad47cf3418e/src%2Ftest%2Frun-pass%2Fproc-macro%2Fspan-api-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88b0d9a94118168fd02a917e7c99ad47cf3418e/src%2Ftest%2Frun-pass%2Fproc-macro%2Fspan-api-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fspan-api-tests.rs?ref=e88b0d9a94118168fd02a917e7c99ad47cf3418e", "patch": "@@ -13,12 +13,14 @@\n \n // ignore-pretty\n \n+#![feature(proc_macro_hygiene)]\n+\n #[macro_use]\n extern crate span_test_macros;\n \n extern crate span_api_tests;\n \n-use span_api_tests::{reemit, assert_fake_source_file, assert_source_file};\n+use span_api_tests::{reemit, assert_fake_source_file, assert_source_file, macro_stringify};\n \n macro_rules! say_hello {\n     ($macname:ident) => ( $macname! { \"Hello, world!\" })\n@@ -38,4 +40,32 @@ reemit! {\n     assert_source_file! { \"Hello, world!\" }\n }\n \n-fn main() {}\n+fn main() {\n+    let s = macro_stringify!(Hello, world!);\n+    assert_eq!(s, \"Hello, world!\");\n+    assert_eq!(macro_stringify!(Hello, world!), \"Hello, world!\");\n+    assert_eq!(reemit_legacy!(macro_stringify!(Hello, world!)), \"Hello, world!\");\n+    reemit_legacy!(assert_eq!(macro_stringify!(Hello, world!), \"Hello, world!\"));\n+    // reemit change the span to be that of the call site\n+    assert_eq!(\n+        reemit!(macro_stringify!(Hello, world!)),\n+        \"reemit!(macro_stringify!(Hello, world!))\"\n+    );\n+    let r = \"reemit!(assert_eq!(macro_stringify!(Hello, world!), r));\";\n+    reemit!(assert_eq!(macro_stringify!(Hello, world!), r));\n+\n+    assert_eq!(macro_stringify!(\n+        Hello,\n+        world!\n+    ), \"Hello,\\n        world!\");\n+\n+    assert_eq!(macro_stringify!(Hello, /*world */ !), \"Hello, /*world */ !\");\n+        assert_eq!(macro_stringify!(\n+        Hello,\n+        // comment\n+        world!\n+    ), \"Hello,\\n        // comment\\n        world!\");\n+\n+    assert_eq!(say_hello! { macro_stringify }, \"\\\"Hello, world!\\\"\");\n+    assert_eq!(say_hello_extern! { macro_stringify }, \"\\\"Hello, world!\\\"\");\n+}"}]}