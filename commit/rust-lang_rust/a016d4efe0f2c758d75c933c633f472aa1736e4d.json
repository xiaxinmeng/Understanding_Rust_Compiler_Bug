{"sha": "a016d4efe0f2c758d75c933c633f472aa1736e4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMTZkNGVmZTBmMmM3NThkNzVjOTMzYzYzM2Y0NzJhYTE3MzZlNGQ=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-08-05T19:35:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-05T19:35:55Z"}, "message": "Merge pull request #2991 from mikerite/issue2979\n\nFix #2979", "tree": {"sha": "a1c34c52e3f5f49b6ff612fdd9a6a42b201066b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1c34c52e3f5f49b6ff612fdd9a6a42b201066b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a016d4efe0f2c758d75c933c633f472aa1736e4d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbZ1GbCRBK7hj4Ov3rIwAAdHIIAAydyWMmbSwMQSa4d+EPeoWG\nD3lolJY/P4PoOqQxmhd+eIeCGZ+mUjbBAKRXQpEoZYKqfybGBEzY1QsD/pu9hqPM\nN9l2J+ut/SrdBINes+OdCYJu+nc7tM0V01M/aQbRpTJ9IbZ6wV/8HoaGOCLpN4aK\nzKtRpQWYvM2fI1IbCcWClnFtdKhtSSAQQnRZnCahlNMZYKuYzBaXALBwId2hik3+\n5taCqcXndbNJQf/tYBdybfxqxgzYSSsHSw3twDY5whD32iuwfTkGGTRtLbRegac4\nj3QLXL/KxOm/VXzBC6h6eu/5Q2KXZELICus+5VMs4Ts105RT3d+1Q80Jo6futSQ=\n=nCaX\n-----END PGP SIGNATURE-----\n", "payload": "tree a1c34c52e3f5f49b6ff612fdd9a6a42b201066b1\nparent 7e5e4c1e7e80ed689a49101569dde2c19753dc8d\nparent 534d546c8102706d1b23de3cd060686b40a33151\nauthor Philipp Hansch <dev@phansch.net> 1533497755 +0100\ncommitter GitHub <noreply@github.com> 1533497755 +0100\n\nMerge pull request #2991 from mikerite/issue2979\n\nFix #2979"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a016d4efe0f2c758d75c933c633f472aa1736e4d", "html_url": "https://github.com/rust-lang/rust/commit/a016d4efe0f2c758d75c933c633f472aa1736e4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a016d4efe0f2c758d75c933c633f472aa1736e4d/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e5e4c1e7e80ed689a49101569dde2c19753dc8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e5e4c1e7e80ed689a49101569dde2c19753dc8d", "html_url": "https://github.com/rust-lang/rust/commit/7e5e4c1e7e80ed689a49101569dde2c19753dc8d"}, {"sha": "534d546c8102706d1b23de3cd060686b40a33151", "url": "https://api.github.com/repos/rust-lang/rust/commits/534d546c8102706d1b23de3cd060686b40a33151", "html_url": "https://github.com/rust-lang/rust/commit/534d546c8102706d1b23de3cd060686b40a33151"}], "stats": {"total": 71, "additions": 43, "deletions": 28}, "files": [{"sha": "c8f3e0db3240895644170399d9f26ed69c1ab2a9", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a016d4efe0f2c758d75c933c633f472aa1736e4d/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a016d4efe0f2c758d75c933c633f472aa1736e4d/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=a016d4efe0f2c758d75c933c633f472aa1736e4d", "patch": "@@ -1047,10 +1047,21 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n             return;\n         }\n \n-        // don't lint for constant values\n-        let owner_def = cx.tcx.hir.get_parent_did(arg.id);\n-        let promotable = cx.tcx.rvalue_promotable_map(owner_def).contains(&arg.hir_id.local_id);\n-        if promotable {\n+        fn is_call(node: &hir::ExprKind) -> bool {\n+            match node {\n+                hir::ExprKind::AddrOf(_, expr) => {\n+                    is_call(&expr.node)\n+                },\n+                hir::ExprKind::Call(..)\n+                | hir::ExprKind::MethodCall(..)\n+                // These variants are debatable or require further examination\n+                | hir::ExprKind::If(..)\n+                | hir::ExprKind::Match(..) => true,\n+                _ => false,\n+            }\n+        }\n+\n+        if !is_call(&arg.node) {\n             return;\n         }\n "}, {"sha": "220b08caaf760b3b73bef7c355a25d7965f5c5f0", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a016d4efe0f2c758d75c933c633f472aa1736e4d/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a016d4efe0f2c758d75c933c633f472aa1736e4d/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=a016d4efe0f2c758d75c933c633f472aa1736e4d", "patch": "@@ -389,6 +389,10 @@ fn expect_fun_call() {\n \n     let with_dummy_type_and_as_str = Foo::new();\n     with_dummy_type_and_as_str.expect(format!(\"Error {}: fake error\", error_code).as_str());\n+\n+    //Issue #2979 - this should not lint\n+    let msg = \"bar\";\n+    Some(\"foo\").expect(msg);\n }\n \n /// Checks implementation of `ITER_NTH` lint"}, {"sha": "a3b67bf9f6d23487b334ba74c81741b15387e050", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a016d4efe0f2c758d75c933c633f472aa1736e4d/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a016d4efe0f2c758d75c933c633f472aa1736e4d/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=a016d4efe0f2c758d75c933c633f472aa1736e4d", "patch": "@@ -358,79 +358,79 @@ error: use of `expect` followed by a function call\n     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| panic!(format!(\"Error {}: fake error\", error_code).as_str()))`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:402:23\n+   --> $DIR/methods.rs:406:23\n     |\n-402 |         let bad_vec = some_vec.iter().nth(3);\n+406 |         let bad_vec = some_vec.iter().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:403:26\n+   --> $DIR/methods.rs:407:26\n     |\n-403 |         let bad_slice = &some_vec[..].iter().nth(3);\n+407 |         let bad_slice = &some_vec[..].iter().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:404:31\n+   --> $DIR/methods.rs:408:31\n     |\n-404 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n+408 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:405:29\n+   --> $DIR/methods.rs:409:29\n     |\n-405 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n+409 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:410:23\n+   --> $DIR/methods.rs:414:23\n     |\n-410 |         let bad_vec = some_vec.iter_mut().nth(3);\n+414 |         let bad_vec = some_vec.iter_mut().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:413:26\n+   --> $DIR/methods.rs:417:26\n     |\n-413 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n+417 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:416:29\n+   --> $DIR/methods.rs:420:29\n     |\n-416 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+420 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:428:13\n+   --> $DIR/methods.rs:432:13\n     |\n-428 |     let _ = some_vec.iter().skip(42).next();\n+432 |     let _ = some_vec.iter().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-skip-next` implied by `-D warnings`\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:429:13\n+   --> $DIR/methods.rs:433:13\n     |\n-429 |     let _ = some_vec.iter().cycle().skip(42).next();\n+433 |     let _ = some_vec.iter().cycle().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:430:13\n+   --> $DIR/methods.rs:434:13\n     |\n-430 |     let _ = (1..10).skip(10).next();\n+434 |     let _ = (1..10).skip(10).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:431:14\n+   --> $DIR/methods.rs:435:14\n     |\n-431 |     let _ = &some_vec[..].iter().skip(3).next();\n+435 |     let _ = &some_vec[..].iter().skip(3).next();\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:440:13\n+   --> $DIR/methods.rs:444:13\n     |\n-440 |     let _ = opt.unwrap();\n+444 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`"}]}