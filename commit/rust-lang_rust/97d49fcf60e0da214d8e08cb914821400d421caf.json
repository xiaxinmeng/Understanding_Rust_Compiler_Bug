{"sha": "97d49fcf60e0da214d8e08cb914821400d421caf", "node_id": "C_kwDOAAsO6NoAKDk3ZDQ5ZmNmNjBlMGRhMjE0ZDhlMDhjYjkxNDgyMTQwMGQ0MjFjYWY", "commit": {"author": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2023-03-28T09:39:09Z"}, "committer": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2023-03-30T12:49:43Z"}, "message": "core: use `pointer::write` to cleanup `LazyCell` initialization", "tree": {"sha": "ebd3afc7bb9c0c43645930f9b1b25813c8683047", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebd3afc7bb9c0c43645930f9b1b25813c8683047"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97d49fcf60e0da214d8e08cb914821400d421caf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAmQlhWcACgkQcE4BSbAZ\nSzxEbw//ToPwY0ImZ+jSu1ASKkVsiBHUwYpGDnSDn7kOTxteGon5SOFJZZFwogQ8\nJgL+QjC0QjEA6W+6k8TdzgWskWWtGlNpdeTpCT4LunE9Q/drAuR06vYMA8GyRuSs\nUmukUwJER0q/jjgL1F08+aAltxlyrCo7Qw6Glg9wN391vf8ZVms1Ohj7dopI40t7\nurapLEAAVDnXfL2q5RqeQzkiKSNDeJL1YAiul+Px0XH7R4KL1o+ej7MotcAPuM4W\nTdcgWC8lCeI5exjjo+bCzt/S/PSGTcX2LQqt353a43urLhv67zA1cL61NbtxDG0R\nBXhwErpgbocvNjapcVT0VtaBrfdRzB6IqRq46diStOmw2FMbRaBfDMGMZVNfCPXQ\ngHmnpO4QLeYjwCtx6uEDcxM45LRP1eyxS+9m2967/C8g0lBkjF2TbW7bG0zYIBOY\nkAfC2ks3tj5AjCwhxIqfLsc4a22t5dbmrEtKY2O+IK3xFmGNuDVeBAGQbJ6R7IJ1\n2dtMGzIUurStwEeEiZKdkvp8zENL+lPz4CEA6onvsUpciPUgnmcGJ47CgsYMCbgy\nmdPomg+vlwCH9ZHr42s+7CGFrzlWsLmLNiIUVTw1ICMCfyAx0xgRyDvBSLSlqxfd\nToAmQHSnuFHQIXblVA0t79g+iCppf3maS9PpdyTQLRx0QN6M5wQ=\n=trJC\n-----END PGP SIGNATURE-----", "payload": "tree ebd3afc7bb9c0c43645930f9b1b25813c8683047\nparent c7f9739bada7c54b0d848cd029c4faa4665c9adc\nauthor joboet <jonasboettiger@icloud.com> 1679996349 +0200\ncommitter joboet <jonasboettiger@icloud.com> 1680180583 +0200\n\ncore: use `pointer::write` to cleanup `LazyCell` initialization\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97d49fcf60e0da214d8e08cb914821400d421caf", "html_url": "https://github.com/rust-lang/rust/commit/97d49fcf60e0da214d8e08cb914821400d421caf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97d49fcf60e0da214d8e08cb914821400d421caf/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7f9739bada7c54b0d848cd029c4faa4665c9adc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7f9739bada7c54b0d848cd029c4faa4665c9adc", "html_url": "https://github.com/rust-lang/rust/commit/c7f9739bada7c54b0d848cd029c4faa4665c9adc"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "aff3388529a7552975572df558c2ceddf76918ba", "filename": "library/core/src/cell/lazy.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/97d49fcf60e0da214d8e08cb914821400d421caf/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d49fcf60e0da214d8e08cb914821400d421caf/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs?ref=97d49fcf60e0da214d8e08cb914821400d421caf", "patch": "@@ -115,16 +115,15 @@ impl<T, F: FnOnce() -> T> LazyCell<T, F> {\n         // SAFETY:\n         // If the closure accessed the cell through something like a reentrant\n         // mutex, but caught the panic resulting from the state being poisoned,\n-        // the mutable borrow for `state` will be invalidated, so create a new\n-        // one here.\n-        let state = unsafe { &mut *this.state.get() };\n-        *state = State::Init(data);\n+        // the mutable borrow for `state` will be invalidated, so we need to\n+        // go through the `UnsafeCell` pointer here. The state can only be\n+        // poisoned at this point, so using `write` to skip the destructor\n+        // of `State` should help the optimizer.\n+        unsafe { this.state.get().write(State::Init(data)) };\n \n         // SAFETY:\n-        // A reference obtained by downcasting from the mutable borrow would\n-        // become stale the next time `force` is called (since there is a conflict\n-        // between the mutable reference here and the shared reference there).\n-        // Do a new shared borrow of the state instead.\n+        // The previous references were invalidated by the `write` call above,\n+        // so do a new shared borrow of the state instead.\n         let state = unsafe { &*this.state.get() };\n         let State::Init(data) = state else { unreachable!() };\n         data"}]}