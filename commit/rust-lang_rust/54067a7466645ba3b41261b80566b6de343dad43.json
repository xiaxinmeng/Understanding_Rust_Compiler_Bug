{"sha": "54067a7466645ba3b41261b80566b6de343dad43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MDY3YTc0NjY2NDViYTNiNDEyNjFiODA1NjZiNmRlMzQzZGFkNDM=", "commit": {"author": {"name": "David Alber", "email": "alber.david@gmail.com", "date": "2017-12-18T00:50:09Z"}, "committer": {"name": "David Alber", "email": "alber.david@gmail.com", "date": "2017-12-18T00:50:09Z"}, "message": "Reporting test parse errors as test failures\n\nFixes 2078.", "tree": {"sha": "45e90019fa260f54aa6c338271fbf72906c28857", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45e90019fa260f54aa6c338271fbf72906c28857"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54067a7466645ba3b41261b80566b6de343dad43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54067a7466645ba3b41261b80566b6de343dad43", "html_url": "https://github.com/rust-lang/rust/commit/54067a7466645ba3b41261b80566b6de343dad43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54067a7466645ba3b41261b80566b6de343dad43/comments", "author": {"login": "davidalber", "id": 933552, "node_id": "MDQ6VXNlcjkzMzU1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/933552?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidalber", "html_url": "https://github.com/davidalber", "followers_url": "https://api.github.com/users/davidalber/followers", "following_url": "https://api.github.com/users/davidalber/following{/other_user}", "gists_url": "https://api.github.com/users/davidalber/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidalber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidalber/subscriptions", "organizations_url": "https://api.github.com/users/davidalber/orgs", "repos_url": "https://api.github.com/users/davidalber/repos", "events_url": "https://api.github.com/users/davidalber/events{/privacy}", "received_events_url": "https://api.github.com/users/davidalber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidalber", "id": 933552, "node_id": "MDQ6VXNlcjkzMzU1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/933552?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidalber", "html_url": "https://github.com/davidalber", "followers_url": "https://api.github.com/users/davidalber/followers", "following_url": "https://api.github.com/users/davidalber/following{/other_user}", "gists_url": "https://api.github.com/users/davidalber/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidalber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidalber/subscriptions", "organizations_url": "https://api.github.com/users/davidalber/orgs", "repos_url": "https://api.github.com/users/davidalber/repos", "events_url": "https://api.github.com/users/davidalber/events{/privacy}", "received_events_url": "https://api.github.com/users/davidalber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8998c1d5b580bbff99a6d63d0477daeecec4a1ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/8998c1d5b580bbff99a6d63d0477daeecec4a1ac", "html_url": "https://github.com/rust-lang/rust/commit/8998c1d5b580bbff99a6d63d0477daeecec4a1ac"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "b16821a97f16b6a6ad667000ba7161f43c397485", "filename": "tests/system.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/54067a7466645ba3b41261b80566b6de343dad43/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54067a7466645ba3b41261b80566b6de343dad43/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=54067a7466645ba3b41261b80566b6de343dad43", "patch": "@@ -75,7 +75,7 @@ fn checkstyle_test() {\n // to a known output file generated by one of the write modes.\n fn assert_output(source: &Path, expected_filename: &Path) {\n     let config = read_config(source);\n-    let (file_map, _report) = format_file(source, &config);\n+    let (_error_summary, file_map, _report) = format_file(source, &config);\n \n     // Populate output by writing to a vec.\n     let mut out = vec![];\n@@ -214,8 +214,11 @@ where\n                 fails += 1;\n             }\n             Ok(report) => reports.push(report),\n-            Err(msg) => {\n-                print_mismatches(msg);\n+            Err(err) => {\n+                match err {\n+                    IdempotentCheckError::Mismatch(msg) => print_mismatches(msg),\n+                    IdempotentCheckError::Parse => (),\n+                }\n                 fails += 1;\n             }\n         }\n@@ -263,20 +266,24 @@ fn read_config(filename: &Path) -> Config {\n     config\n }\n \n-fn format_file<P: Into<PathBuf>>(filepath: P, config: &Config) -> (FileMap, FormatReport) {\n+fn format_file<P: Into<PathBuf>>(filepath: P, config: &Config) -> (Summary, FileMap, FormatReport) {\n     let filepath = filepath.into();\n     let input = Input::File(filepath);\n-    let (_error_summary, file_map, report) =\n-        format_input::<io::Stdout>(input, config, None).unwrap();\n-    (file_map, report)\n+    format_input::<io::Stdout>(input, config, None).unwrap()\n+}\n+\n+pub enum IdempotentCheckError {\n+    Mismatch(HashMap<PathBuf, Vec<Mismatch>>),\n+    Parse,\n }\n \n-pub fn idempotent_check(\n-    filename: PathBuf,\n-) -> Result<FormatReport, HashMap<PathBuf, Vec<Mismatch>>> {\n+pub fn idempotent_check(filename: PathBuf) -> Result<FormatReport, IdempotentCheckError> {\n     let sig_comments = read_significant_comments(&filename);\n     let config = read_config(&filename);\n-    let (file_map, format_report) = format_file(filename, &config);\n+    let (error_summary, file_map, format_report) = format_file(filename, &config);\n+    if error_summary.has_parsing_errors() {\n+        return Err(IdempotentCheckError::Parse);\n+    }\n \n     let mut write_result = HashMap::new();\n     for &(ref filename, ref text) in &file_map {\n@@ -361,7 +368,7 @@ fn read_significant_comments(file_name: &Path) -> HashMap<String, String> {\n fn handle_result(\n     result: HashMap<PathBuf, String>,\n     target: Option<&str>,\n-) -> Result<(), HashMap<PathBuf, Vec<Mismatch>>> {\n+) -> Result<(), IdempotentCheckError> {\n     let mut failures = HashMap::new();\n \n     for (file_name, fmt_text) in result {\n@@ -388,7 +395,7 @@ fn handle_result(\n     if failures.is_empty() {\n         Ok(())\n     } else {\n-        Err(failures)\n+        Err(IdempotentCheckError::Mismatch(failures))\n     }\n }\n "}]}