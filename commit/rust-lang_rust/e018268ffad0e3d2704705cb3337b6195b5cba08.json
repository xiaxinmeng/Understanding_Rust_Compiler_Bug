{"sha": "e018268ffad0e3d2704705cb3337b6195b5cba08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMTgyNjhmZmFkMGUzZDI3MDQ3MDVjYjMzMzdiNjE5NWI1Y2JhMDg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-11-30T00:44:33Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-11-30T10:41:09Z"}, "message": "Add precise_pointer_size_matching feature", "tree": {"sha": "4c373238dc5fb7504e1d4cef30a91099a473233a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c373238dc5fb7504e1d4cef30a91099a473233a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e018268ffad0e3d2704705cb3337b6195b5cba08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e018268ffad0e3d2704705cb3337b6195b5cba08", "html_url": "https://github.com/rust-lang/rust/commit/e018268ffad0e3d2704705cb3337b6195b5cba08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e018268ffad0e3d2704705cb3337b6195b5cba08/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1f6d87eab20f62a4fbb16b327f16fa69dbbaf99", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f6d87eab20f62a4fbb16b327f16fa69dbbaf99", "html_url": "https://github.com/rust-lang/rust/commit/f1f6d87eab20f62a4fbb16b327f16fa69dbbaf99"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "fbc986965742fa3856906a7c2950a09dc4ee5d01", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e018268ffad0e3d2704705cb3337b6195b5cba08/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e018268ffad0e3d2704705cb3337b6195b5cba08/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=e018268ffad0e3d2704705cb3337b6195b5cba08", "patch": "@@ -1780,6 +1780,13 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    pub fn is_pointer_sized(&self) -> bool {\n+        match self.sty {\n+            Int(ast::IntTy::Isize) | Uint(ast::UintTy::Usize) => true,\n+            _ => false,\n+        }\n+    }\n+\n     pub fn is_machine(&self) -> bool {\n         match self.sty {\n             Int(ast::IntTy::Isize) | Uint(ast::UintTy::Usize) => false,"}, {"sha": "a2fbfd70a6540053d12554afd35d073fc89aed94", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e018268ffad0e3d2704705cb3337b6195b5cba08/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e018268ffad0e3d2704705cb3337b6195b5cba08/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=e018268ffad0e3d2704705cb3337b6195b5cba08", "patch": "@@ -1129,7 +1129,8 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n \n         // For privately empty and non-exhaustive enums, we work as if there were an \"extra\"\n         // `_` constructor for the type, so we can never match over all constructors.\n-        let is_non_exhaustive = is_privately_empty || is_declared_nonexhaustive;\n+        let is_non_exhaustive = is_privately_empty || is_declared_nonexhaustive ||\n+            (pcx.ty.is_pointer_sized() && !cx.tcx.features().precise_pointer_size_matching);\n \n         if cheap_missing_ctors == MissingCtors::Empty && !is_non_exhaustive {\n             split_grouped_constructors(cx.tcx, all_ctors, matrix, pcx.ty).into_iter().map(|c| {\n@@ -1436,7 +1437,7 @@ fn should_treat_range_exhaustively(tcx: TyCtxt<'_, 'tcx, 'tcx>, ctor: &Construct\n         _ => return false,\n     };\n     if let ty::Char | ty::Int(_) | ty::Uint(_) = ty.sty {\n-        true\n+        !ty.is_pointer_sized() || tcx.features().precise_pointer_size_matching\n     } else {\n         false\n     }"}, {"sha": "15679322663136458de27d2d5b6bd2558ab8037a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e018268ffad0e3d2704705cb3337b6195b5cba08/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e018268ffad0e3d2704705cb3337b6195b5cba08/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=e018268ffad0e3d2704705cb3337b6195b5cba08", "patch": "@@ -439,6 +439,8 @@ declare_features! (\n     // 'a: { break 'a; }\n     (active, label_break_value, \"1.28.0\", Some(48594), None),\n \n+    // Exhaustive pattern matching on `usize` and `isize`.\n+    (active, precise_pointer_size_matching, \"1.32.0\", Some(56354), None),\n \n     // #[doc(keyword = \"...\")]\n     (active, doc_keyword, \"1.28.0\", Some(51315), None),"}, {"sha": "ad955fbe05d46186e8e84cc888ff213d7bb0a9ed", "filename": "src/test/ui/exhaustive_integer_patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e018268ffad0e3d2704705cb3337b6195b5cba08/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e018268ffad0e3d2704705cb3337b6195b5cba08/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.rs?ref=e018268ffad0e3d2704705cb3337b6195b5cba08", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(precise_pointer_size_matching)]\n #![feature(exclusive_range_pattern)]\n \n #![deny(unreachable_patterns)]"}, {"sha": "1208552d256376b26926cc98dc462502dd81619e", "filename": "src/test/ui/feature-gates/feature-gate-precise_pointer_size_matching.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e018268ffad0e3d2704705cb3337b6195b5cba08/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e018268ffad0e3d2704705cb3337b6195b5cba08/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.rs?ref=e018268ffad0e3d2704705cb3337b6195b5cba08", "patch": "@@ -0,0 +1,14 @@\n+#![feature(exclusive_range_pattern)]\n+\n+use std::usize::MAX;\n+\n+fn main() {\n+    match 0usize { //~ERROR non-exhaustive patterns: `_` not covered\n+        0..=MAX => {}\n+    }\n+\n+    match 0isize { //~ERROR non-exhaustive patterns: `_` not covered\n+        1..=20 => {}\n+        -5..3 => {}\n+    }\n+}"}, {"sha": "5806f6f039157cbeaf91ee0b5f82208af7aa8054", "filename": "src/test/ui/feature-gates/feature-gate-precise_pointer_size_matching.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e018268ffad0e3d2704705cb3337b6195b5cba08/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e018268ffad0e3d2704705cb3337b6195b5cba08/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr?ref=e018268ffad0e3d2704705cb3337b6195b5cba08", "patch": "@@ -0,0 +1,15 @@\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/feature-gate-precise_pointer_size_matching.rs:6:11\n+   |\n+LL |     match 0usize { //~ERROR non-exhaustive patterns: `_` not covered\n+   |           ^^^^^^ pattern `_` not covered\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/feature-gate-precise_pointer_size_matching.rs:10:11\n+   |\n+LL |     match 0isize { //~ERROR non-exhaustive patterns: `_` not covered\n+   |           ^^^^^^ pattern `_` not covered\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}]}