{"sha": "98bc7d63fbc78643532853db3cb289bacc86167c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YmM3ZDYzZmJjNzg2NDM1MzI4NTNkYjNjYjI4OWJhY2M4NjE2N2M=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-13T05:03:09Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-13T11:20:28Z"}, "message": "Rollup merge of #55805 - nnethercote:mv-static_assert, r=Mark-Simulacrum\n\nMove `static_assert!` into librustc_data_structures", "tree": {"sha": "5c83d9eb185c22820484d44ece754200a29eb882", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c83d9eb185c22820484d44ece754200a29eb882"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98bc7d63fbc78643532853db3cb289bacc86167c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvqs3wACgkQ/vbIBR0O\nATyMQA//XYDBcm+4d7312XFXkQ1r9ljt2CLKMlBUZkqXX2PcOJ7QsRSQMnZLUiH2\nNsgGk2E0WW4D9DRI/l5musWCrdTuW5toB0LGKZfiG3hGj747rgPJ4SZn2w6uf3+r\nZduKRp0CeQIDUAKQZMOmr61vYDPNJr4AfaX9X0sd09eiN7RW0vmEn6Sopz/ephlI\nn7z9kUcX5xqi0YVmVlH0Ew51FSaYgOyTJHn7Wp79inyem168q4GZSeJKlvQKPuDN\nR9+Q2YItz9izu5mB9ISwKt1dN7G7gb4Lc7ZpOM2UaqeZeAE41sxpl2gY4wLTuXsr\nIi+qqrdIX6WfSu5jhwW0LXQelImpLlrfZDHNP5CjVcXse4pja9GXFOVTGew382M0\n3jhVPAB9yImHeY5pL5jvF6lYdU4OmaZrYxkQDr/BNCn3t0vTMQKGo3hU6trrb0g3\nE911ZoDdBLEvlf3YU+0xfIc/G9rhZEnaLiHtMttflSYQqlAPefRuii7PaHY3IBj1\nGarAWiSlZN6eReOmTjE5XIYYQIyFeLmhfIgWRN4LARSORVlGu7IkAvNK158Fks77\nSoGIHR9XFjKu1NG5TbCOzyAYBpPSia/Mj8OoUGtsT2ovRZzoQdLunv2x5yNU7Imo\nyUtKJDbZHXpbB9JH0VnnrpRDgEviKV6Pth2d1TCtMf81ohoCymU=\n=6w8V\n-----END PGP SIGNATURE-----", "payload": "tree 5c83d9eb185c22820484d44ece754200a29eb882\nparent d811f844a5e992f8a2533fc440421a4b3cf7056f\nparent 2bd4d5b1a0b05827401970f0cfbe17e6b6f32d0d\nauthor kennytm <kennytm@gmail.com> 1542085389 +0800\ncommitter kennytm <kennytm@gmail.com> 1542108028 +0800\n\nRollup merge of #55805 - nnethercote:mv-static_assert, r=Mark-Simulacrum\n\nMove `static_assert!` into librustc_data_structures\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98bc7d63fbc78643532853db3cb289bacc86167c", "html_url": "https://github.com/rust-lang/rust/commit/98bc7d63fbc78643532853db3cb289bacc86167c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98bc7d63fbc78643532853db3cb289bacc86167c/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d811f844a5e992f8a2533fc440421a4b3cf7056f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d811f844a5e992f8a2533fc440421a4b3cf7056f", "html_url": "https://github.com/rust-lang/rust/commit/d811f844a5e992f8a2533fc440421a4b3cf7056f"}, {"sha": "2bd4d5b1a0b05827401970f0cfbe17e6b6f32d0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd4d5b1a0b05827401970f0cfbe17e6b6f32d0d", "html_url": "https://github.com/rust-lang/rust/commit/2bd4d5b1a0b05827401970f0cfbe17e6b6f32d0d"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "781a0fa3f663a97fc1a3b7d86691c11faa195ad0", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98bc7d63fbc78643532853db3cb289bacc86167c/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98bc7d63fbc78643532853db3cb289bacc86167c/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=98bc7d63fbc78643532853db3cb289bacc86167c", "patch": "@@ -62,16 +62,6 @@ macro_rules! span_bug {\n     })\n }\n \n-#[macro_export]\n-macro_rules! static_assert {\n-    ($name:ident: $test:expr) => {\n-        // Use the bool to access an array such that if the bool is false, the access\n-        // is out-of-bounds.\n-        #[allow(dead_code)]\n-        static $name: () = [()][!$test as usize];\n-    }\n-}\n-\n #[macro_export]\n macro_rules! __impl_stable_hash_field {\n     ($field:ident, $ctx:expr, $hasher:expr) => ($field.hash_stable($ctx, $hasher));"}, {"sha": "46b61d8ffe64f219e3394ba0db5224710bc50b2d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98bc7d63fbc78643532853db3cb289bacc86167c/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98bc7d63fbc78643532853db3cb289bacc86167c/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=98bc7d63fbc78643532853db3cb289bacc86167c", "patch": "@@ -1719,14 +1719,14 @@ pub struct Statement<'tcx> {\n     pub kind: StatementKind<'tcx>,\n }\n \n+// `Statement` is used a lot. Make sure it doesn't unintentionally get bigger.\n+#[cfg(target_arch = \"x86_64\")]\n+static_assert!(MEM_SIZE_OF_STATEMENT: mem::size_of::<Statement<'_>>() == 56);\n+\n impl<'tcx> Statement<'tcx> {\n     /// Changes a statement to a nop. This is both faster than deleting instructions and avoids\n     /// invalidating statement indices in `Location`s.\n     pub fn make_nop(&mut self) {\n-        // `Statement` contributes significantly to peak memory usage. Make\n-        // sure it doesn't get bigger.\n-        static_assert!(STATEMENT_IS_AT_MOST_56_BYTES: mem::size_of::<Statement<'_>>() <= 56);\n-\n         self.kind = StatementKind::Nop\n     }\n "}, {"sha": "f78fad9f7aa9a432a5e0a6bc5f88ad453ae8e43d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98bc7d63fbc78643532853db3cb289bacc86167c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98bc7d63fbc78643532853db3cb289bacc86167c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=98bc7d63fbc78643532853db3cb289bacc86167c", "patch": "@@ -823,12 +823,6 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n \n impl<'tcx> CommonTypes<'tcx> {\n     fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {\n-        // Ensure our type representation does not grow\n-        #[cfg(target_pointer_width = \"64\")]\n-        static_assert!(ASSERT_TY_KIND: ::std::mem::size_of::<ty::TyKind<'_>>() <= 24);\n-        #[cfg(target_pointer_width = \"64\")]\n-        static_assert!(ASSERT_TYS: ::std::mem::size_of::<ty::TyS<'_>>() <= 32);\n-\n         let mk = |sty| CtxtInterners::intern_ty(interners, interners, sty);\n         let mk_region = |r| {\n             if let Some(r) = interners.region.borrow().get(&r) {"}, {"sha": "979cc9b115b5a2e6307631e1dd035956553eab2f", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98bc7d63fbc78643532853db3cb289bacc86167c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98bc7d63fbc78643532853db3cb289bacc86167c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=98bc7d63fbc78643532853db3cb289bacc86167c", "patch": "@@ -514,6 +514,10 @@ pub struct TyS<'tcx> {\n     outer_exclusive_binder: ty::DebruijnIndex,\n }\n \n+// `TyS` is used a lot. Make sure it doesn't unintentionally get bigger.\n+#[cfg(target_arch = \"x86_64\")]\n+static_assert!(MEM_SIZE_OF_TY_S: ::std::mem::size_of::<TyS<'_>>() == 32);\n+\n impl<'tcx> Ord for TyS<'tcx> {\n     fn cmp(&self, other: &TyS<'tcx>) -> Ordering {\n         self.sty.cmp(&other.sty)"}, {"sha": "bd3a34cae90f4330c4aaf2cfa8c5bfe245dd1d5c", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98bc7d63fbc78643532853db3cb289bacc86167c/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98bc7d63fbc78643532853db3cb289bacc86167c/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=98bc7d63fbc78643532853db3cb289bacc86167c", "patch": "@@ -211,6 +211,10 @@ pub enum TyKind<'tcx> {\n     Error,\n }\n \n+// `TyKind` is used a lot. Make sure it doesn't unintentionally get bigger.\n+#[cfg(target_arch = \"x86_64\")]\n+static_assert!(MEM_SIZE_OF_TY_KIND: ::std::mem::size_of::<TyKind<'_>>() == 24);\n+\n /// A closure can be modeled as a struct that looks like:\n ///\n ///     struct Closure<'l0...'li, T0...Tj, CK, CS, U0...Uk> {"}, {"sha": "135abebdacb7acacb4499d1bc0c1176a2decf11f", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98bc7d63fbc78643532853db3cb289bacc86167c/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98bc7d63fbc78643532853db3cb289bacc86167c/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=98bc7d63fbc78643532853db3cb289bacc86167c", "patch": "@@ -57,6 +57,7 @@ extern crate rustc_cratesio_shim;\n \n pub use rustc_serialize::hex::ToHex;\n \n+pub mod macros;\n pub mod svh;\n pub mod base_n;\n pub mod bit_set;"}, {"sha": "3cc91b0e93f0430b23b956e191fa1875cb0b8abc", "filename": "src/librustc_data_structures/macros.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/98bc7d63fbc78643532853db3cb289bacc86167c/src%2Flibrustc_data_structures%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98bc7d63fbc78643532853db3cb289bacc86167c/src%2Flibrustc_data_structures%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fmacros.rs?ref=98bc7d63fbc78643532853db3cb289bacc86167c", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// A simple static assertion macro. The first argument should be a unique\n+/// ALL_CAPS identifier that describes the condition.\n+#[macro_export]\n+macro_rules! static_assert {\n+    ($name:ident: $test:expr) => {\n+        // Use the bool to access an array such that if the bool is false, the access\n+        // is out-of-bounds.\n+        #[allow(dead_code)]\n+        static $name: () = [()][!$test as usize];\n+    }\n+}"}, {"sha": "808e19d6f120f0f069f6fb5bc7a940fbffaf2db9", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98bc7d63fbc78643532853db3cb289bacc86167c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98bc7d63fbc78643532853db3cb289bacc86167c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=98bc7d63fbc78643532853db3cb289bacc86167c", "patch": "@@ -20,6 +20,8 @@ use print::pprust;\n use ptr::P;\n use rustc_data_structures::indexed_vec;\n use rustc_data_structures::indexed_vec::Idx;\n+#[cfg(target_arch = \"x86_64\")]\n+use rustc_data_structures::static_assert;\n use rustc_target::spec::abi::Abi;\n use source_map::{dummy_spanned, respan, Spanned};\n use symbol::{keywords, Symbol};\n@@ -924,6 +926,10 @@ pub struct Expr {\n     pub attrs: ThinVec<Attribute>,\n }\n \n+// `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n+#[cfg(target_arch = \"x86_64\")]\n+static_assert!(MEM_SIZE_OF_EXPR: std::mem::size_of::<Expr>() == 88);\n+\n impl Expr {\n     /// Whether this expression would be valid somewhere that expects a value, for example, an `if`\n     /// condition."}]}