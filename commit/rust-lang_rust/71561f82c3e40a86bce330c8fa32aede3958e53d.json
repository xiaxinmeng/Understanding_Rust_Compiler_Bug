{"sha": "71561f82c3e40a86bce330c8fa32aede3958e53d", "node_id": "C_kwDOAAsO6NoAKDcxNTYxZjgyYzNlNDBhODZiY2UzMzBjOGZhMzJhZWRlMzk1OGU1M2Q", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-11-02T14:23:25Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-11-04T19:10:51Z"}, "message": "rustdoc: render the return type of cross-crate `Fn`-family trait bounds in trait-object types", "tree": {"sha": "df1aec5b3155a865d5067bfe39100d6c28d722fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df1aec5b3155a865d5067bfe39100d6c28d722fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71561f82c3e40a86bce330c8fa32aede3958e53d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71561f82c3e40a86bce330c8fa32aede3958e53d", "html_url": "https://github.com/rust-lang/rust/commit/71561f82c3e40a86bce330c8fa32aede3958e53d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71561f82c3e40a86bce330c8fa32aede3958e53d/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ac703448186773dbaa30382ed2423473a2f6bc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac703448186773dbaa30382ed2423473a2f6bc2", "html_url": "https://github.com/rust-lang/rust/commit/1ac703448186773dbaa30382ed2423473a2f6bc2"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "824d98113c8f3a18ae8aa3ffbb4197a74df499d9", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71561f82c3e40a86bce330c8fa32aede3958e53d/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71561f82c3e40a86bce330c8fa32aede3958e53d/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=71561f82c3e40a86bce330c8fa32aede3958e53d", "patch": "@@ -4,7 +4,7 @@ use crate::clean::render_macro_matchers::render_macro_matcher;\n use crate::clean::{\n     clean_doc_module, clean_middle_const, clean_middle_region, clean_middle_ty, inline, Crate,\n     ExternalCrate, Generic, GenericArg, GenericArgs, ImportSource, Item, ItemKind, Lifetime, Path,\n-    PathSegment, Primitive, PrimitiveType, Type, TypeBinding,\n+    PathSegment, Primitive, PrimitiveType, Term, Type, TypeBinding, TypeBindingKind,\n };\n use crate::core::DocContext;\n use crate::html::format::visibility_to_src_with_space;\n@@ -113,12 +113,12 @@ fn external_generic_args<'tcx>(\n                 ty::Tuple(tys) => tys.iter().map(|t| clean_middle_ty(t, cx, None)).collect::<Vec<_>>().into(),\n                 _ => return GenericArgs::AngleBracketed { args: args.into(), bindings },\n             };\n-        let output = None;\n-        // FIXME(#20299) return type comes from a projection now\n-        // match types[1].kind {\n-        //     ty::Tuple(ref v) if v.is_empty() => None, // -> ()\n-        //     _ => Some(types[1].clean(cx))\n-        // };\n+        let output = bindings.into_iter().next().and_then(|binding| match binding.kind {\n+            TypeBindingKind::Equality { term: Term::Type(ty) } if ty != Type::Tuple(Vec::new()) => {\n+                Some(Box::new(ty))\n+            }\n+            _ => None,\n+        });\n         GenericArgs::Parenthesized { inputs, output }\n     } else {\n         GenericArgs::AngleBracketed { args: args.into(), bindings: bindings.into() }"}]}