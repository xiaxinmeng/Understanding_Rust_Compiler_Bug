{"sha": "2945b96e587e162a52c66dfaa95aec8944b11797", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NDViOTZlNTg3ZTE2MmE1MmM2NmRmYWE5NWFlYzg5NDRiMTE3OTc=", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-04-28T13:44:18Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-06-17T08:42:37Z"}, "message": "Multithreading support for lazy-jit", "tree": {"sha": "02b31448167d90b803a32c27d73b8ddff0a5f34d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02b31448167d90b803a32c27d73b8ddff0a5f34d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2945b96e587e162a52c66dfaa95aec8944b11797", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1ycQ10Ou2Tzw/6ueaKZbzZ0on/4FAmDLCv0ACgkQaKZbzZ0o\nn/5/Pw//VkqKiEfWLI7Ul4P4DlqFHXOhH7TZREhKypWaBZlElBd4wJKbgNMGsFNI\nvGZAc3l/bB6LGJJ/Q4y4NmQ26+TRpmSsu+agnnhFiP0E6jy2RLu/IQLsARe4dvmr\nMs+f26KGFIOHhCeq6pQ+VWw5Zlc085K72q60R3ktvinqAQT8xLinKEwT+bV8gLA4\nr80GPXbyVLt2cQ1AFsb6uzDecFBG4YdRsf7JvnEl2UnkBaW2FYaH6aUhXCsVitOA\nCJwesdEvR63n4xC+RGY+t648laxVI9IMouibolF2HffVnXXuNa5O/+3+kLWcrt/Q\nKxtXIPBpR5ndVVX5LSsedIi+9trzVwJTz8Sp0qHBExB0Fq4uiQ36CSkZQmIoQiPX\nkmLoo8Rge6HwtnBSxe/p91LjYA9G3c2WypY5LDZfp3gxPXjjVKKB27VP0bPK/14c\nZPlBYlq0FWV5A6OVfEHQEB0l51ACmdQNrXI1osgiZhfDqchtt6RRInu+GzegxJtr\nN9UrRvPMaQnlsBXEfuabvXhZJ6I4kMb5Jd/3FnDuQYXFA7Ci4s//welsumOJ2sip\nfBNS/5XnKkpNRq01ev4eX8bw/n0jk98b3MJcSyJZRa60a60Yed35NaddCIVEo+5L\nPdQQhlG/KCsJxq7yYrSJcngUM4MrP4DLNkgCalCaYzVAB8e20+s=\n=Ok/E\n-----END PGP SIGNATURE-----", "payload": "tree 02b31448167d90b803a32c27d73b8ddff0a5f34d\nparent 432285fbc69ab0396f8226beb9fe2ef1496f73da\nauthor Alan Egerton <eggyal@gmail.com> 1619617458 +0100\ncommitter Alan Egerton <eggyal@gmail.com> 1623919357 +0100\n\nMultithreading support for lazy-jit\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2945b96e587e162a52c66dfaa95aec8944b11797", "html_url": "https://github.com/rust-lang/rust/commit/2945b96e587e162a52c66dfaa95aec8944b11797", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2945b96e587e162a52c66dfaa95aec8944b11797/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "432285fbc69ab0396f8226beb9fe2ef1496f73da", "url": "https://api.github.com/repos/rust-lang/rust/commits/432285fbc69ab0396f8226beb9fe2ef1496f73da", "html_url": "https://github.com/rust-lang/rust/commit/432285fbc69ab0396f8226beb9fe2ef1496f73da"}], "stats": {"total": 90, "additions": 82, "deletions": 8}, "files": [{"sha": "3d8f837a66c8acaf6d8683845979229d1fd0f26e", "filename": "src/driver/jit.rs", "status": "modified", "additions": 74, "deletions": 7, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/2945b96e587e162a52c66dfaa95aec8944b11797/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2945b96e587e162a52c66dfaa95aec8944b11797/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=2945b96e587e162a52c66dfaa95aec8944b11797", "patch": "@@ -3,7 +3,9 @@\n \n use std::cell::RefCell;\n use std::ffi::CString;\n+use std::lazy::{Lazy, SyncOnceCell};\n use std::os::raw::{c_char, c_int};\n+use std::sync::{mpsc, Mutex};\n \n use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n use rustc_codegen_ssa::CrateInfo;\n@@ -23,6 +25,39 @@ thread_local! {\n     static LAZY_JIT_STATE: RefCell<Option<JitState>> = RefCell::new(None);\n }\n \n+/// The Sender owned by the rustc thread\n+static GLOBAL_MESSAGE_SENDER: SyncOnceCell<Mutex<mpsc::Sender<UnsafeMessage>>> = SyncOnceCell::new();\n+\n+/// A message that is sent from the jitted runtime to the rustc thread.\n+/// Senders are responsible for upholding `Send` semantics.\n+enum UnsafeMessage {\n+    /// Request that the specified `Instance` be lazily jitted.\n+    ///\n+    /// Nothing accessible through `instance_ptr` may be moved or mutated by the sender after\n+    /// this message is sent.\n+    JitFn {\n+        instance_ptr: *const Instance<'static>,\n+        tx: mpsc::Sender<*const u8>,\n+    },\n+}\n+unsafe impl Send for UnsafeMessage {}\n+\n+impl UnsafeMessage {\n+    /// Send the message.\n+    fn send(self) -> Result<(), mpsc::SendError<UnsafeMessage>> {\n+        thread_local! {\n+            /// The Sender owned by the local thread\n+            static LOCAL_MESSAGE_SENDER: Lazy<mpsc::Sender<UnsafeMessage>> = Lazy::new(||\n+                GLOBAL_MESSAGE_SENDER\n+                    .get().unwrap()\n+                    .lock().unwrap()\n+                    .clone()\n+            );\n+        }\n+        LOCAL_MESSAGE_SENDER.with(|sender| sender.send(self))\n+    }\n+}\n+\n fn create_jit_module<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     backend_config: &BackendConfig,\n@@ -116,11 +151,6 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n         .chain(backend_config.jit_args.iter().map(|arg| &**arg))\n         .map(|arg| CString::new(arg).unwrap())\n         .collect::<Vec<_>>();\n-    let mut argv = args.iter().map(|arg| arg.as_ptr()).collect::<Vec<_>>();\n-\n-    // Push a null pointer as a terminating argument. This is required by POSIX and\n-    // useful as some dynamic linkers use it as a marker to jump over.\n-    argv.push(std::ptr::null());\n \n     let start_sig = Signature {\n         params: vec![\n@@ -141,12 +171,49 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n \n     let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n         unsafe { ::std::mem::transmute(finalized_start) };\n-    let ret = f(args.len() as c_int, argv.as_ptr());\n-    std::process::exit(ret);\n+\n+    let (tx, rx) = mpsc::channel();\n+    GLOBAL_MESSAGE_SENDER.set(Mutex::new(tx)).unwrap();\n+\n+    // Spawn the jitted runtime in a new thread so that this rustc thread can handle messages\n+    // (eg to lazily JIT further functions as required)\n+    std::thread::spawn(move || {\n+        let mut argv = args.iter().map(|arg| arg.as_ptr()).collect::<Vec<_>>();\n+\n+        // Push a null pointer as a terminating argument. This is required by POSIX and\n+        // useful as some dynamic linkers use it as a marker to jump over.\n+        argv.push(std::ptr::null());\n+\n+        let ret = f(args.len() as c_int, argv.as_ptr());\n+        std::process::exit(ret);\n+    });\n+\n+    // Handle messages\n+    loop {\n+        match rx.recv().unwrap() {\n+            // lazy JIT compilation request - compile requested instance and return pointer to result\n+            UnsafeMessage::JitFn { instance_ptr, tx } => {\n+                tx.send(jit_fn(instance_ptr))\n+                  .expect(\"jitted runtime hung up before response to lazy JIT request was sent\");\n+            }\n+        }\n+    }\n }\n \n #[no_mangle]\n extern \"C\" fn __clif_jit_fn(instance_ptr: *const Instance<'static>) -> *const u8 {\n+    // send the JIT request to the rustc thread, with a channel for the response\n+    let (tx, rx) = mpsc::channel();\n+    UnsafeMessage::JitFn { instance_ptr, tx }\n+        .send()\n+        .expect(\"rustc thread hung up before lazy JIT request was sent\");\n+\n+    // block on JIT compilation result\n+    rx.recv()\n+      .expect(\"rustc thread hung up before responding to sent lazy JIT request\")\n+}\n+\n+fn jit_fn(instance_ptr: *const Instance<'static>) -> *const u8 {\n     rustc_middle::ty::tls::with(|tcx| {\n         // lift is used to ensure the correct lifetime for instance.\n         let instance = tcx.lift(unsafe { *instance_ptr }).unwrap();"}, {"sha": "91ef62659387583ce64f61782b802262300a923e", "filename": "src/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2945b96e587e162a52c66dfaa95aec8944b11797/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2945b96e587e162a52c66dfaa95aec8944b11797/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2945b96e587e162a52c66dfaa95aec8944b11797", "patch": "@@ -1,4 +1,11 @@\n-#![feature(rustc_private, decl_macro, never_type, hash_drain_filter, vec_into_raw_parts)]\n+#![feature(\n+    rustc_private,\n+    decl_macro,\n+    never_type,\n+    hash_drain_filter,\n+    vec_into_raw_parts,\n+    once_cell,\n+)]\n #![warn(rust_2018_idioms)]\n #![warn(unused_lifetimes)]\n #![warn(unreachable_pub)]"}]}