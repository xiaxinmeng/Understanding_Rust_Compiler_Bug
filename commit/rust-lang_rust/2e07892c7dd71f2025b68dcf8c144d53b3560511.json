{"sha": "2e07892c7dd71f2025b68dcf8c144d53b3560511", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMDc4OTJjN2RkNzFmMjAyNWI2OGRjZjhjMTQ0ZDUzYjM1NjA1MTE=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-02-16T20:42:37Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-02-17T14:21:36Z"}, "message": "Do not emit note suggesting to implement trait to foreign type\n\nUpdate tests\n\nExtend to other operations\n\nRefractor check in a separate function\n\nFix more tests", "tree": {"sha": "d8a214513730b39e71f5eeb0ecaf275301b1ae7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8a214513730b39e71f5eeb0ecaf275301b1ae7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e07892c7dd71f2025b68dcf8c144d53b3560511", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e07892c7dd71f2025b68dcf8c144d53b3560511", "html_url": "https://github.com/rust-lang/rust/commit/2e07892c7dd71f2025b68dcf8c144d53b3560511", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e07892c7dd71f2025b68dcf8c144d53b3560511/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b98fbe77d472d85d1691bae5b25e7eefb3609c", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b98fbe77d472d85d1691bae5b25e7eefb3609c", "html_url": "https://github.com/rust-lang/rust/commit/75b98fbe77d472d85d1691bae5b25e7eefb3609c"}], "stats": {"total": 94, "additions": 17, "deletions": 77}, "files": [{"sha": "bb31e979b733fdae6017ade7e8a402a6683d2f4b", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -5,7 +5,7 @@ use super::{FnCtxt, Needs};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::TyKind::{Adt, Array, Char, FnDef, Never, Ref, Str, Tuple, Uint};\n use rustc::ty::{self, Ty, TypeFoldable};\n-use rustc_errors::{self, struct_span_err, Applicability};\n+use rustc_errors::{self, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_span::Span;\n@@ -321,11 +321,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         lhs_ty, missing_trait\n                                     ));\n                                 } else if !suggested_deref {\n-                                    err.note(&format!(\n-                                        \"an implementation of `{}` might \\\n-                                         be missing for `{}`\",\n-                                        missing_trait, lhs_ty\n-                                    ));\n+                                    suggest_impl_missing(&mut err, lhs_ty, &missing_trait);\n                                 }\n                             }\n                             err.emit();\n@@ -467,11 +463,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         lhs_ty, missing_trait\n                                     ));\n                                 } else if !suggested_deref && !involves_fn {\n-                                    err.note(&format!(\n-                                        \"an implementation of `{}` might \\\n-                                         be missing for `{}`\",\n-                                        missing_trait, lhs_ty\n-                                    ));\n+                                    suggest_impl_missing(&mut err, lhs_ty, &missing_trait);\n                                 }\n                             }\n                             err.emit();\n@@ -707,11 +699,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 hir::UnOp::UnNot => \"std::ops::Not\",\n                                 hir::UnOp::UnDeref => \"std::ops::UnDerf\",\n                             };\n-                            err.note(&format!(\n-                                \"an implementation of `{}` might \\\n-                                                be missing for `{}`\",\n-                                missing_trait, operand_ty\n-                            ));\n+                            suggest_impl_missing(&mut err, operand_ty, &missing_trait);\n                         }\n                     }\n                     err.emit();\n@@ -929,3 +917,16 @@ fn is_builtin_binop<'tcx>(lhs: Ty<'tcx>, rhs: Ty<'tcx>, op: hir::BinOp) -> bool\n         }\n     }\n }\n+\n+/// If applicable, note that an implementation of `trait` for `ty` may fix the error.\n+fn suggest_impl_missing(err: &mut DiagnosticBuilder<'_>, ty: Ty<'_>, missing_trait: &str) {\n+    if let Adt(def, _) = ty.peel_refs().kind {\n+        if def.did.is_local() {\n+            err.note(&format!(\n+                \"an implementation of `{}` might \\\n+                be missing for `{}`\",\n+                missing_trait, ty\n+            ));\n+        }\n+    }\n+}"}, {"sha": "f094388794edaf42057c05edb7d777330d9d3218", "filename": "src/test/ui/autoderef-full-lval.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fautoderef-full-lval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fautoderef-full-lval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoderef-full-lval.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -5,8 +5,6 @@ LL |     let z: isize = a.x + b.y;\n    |                    --- ^ --- std::boxed::Box<isize>\n    |                    |\n    |                    std::boxed::Box<isize>\n-   |\n-   = note: an implementation of `std::ops::Add` might be missing for `std::boxed::Box<isize>`\n \n error[E0369]: cannot add `std::boxed::Box<isize>` to `std::boxed::Box<isize>`\n   --> $DIR/autoderef-full-lval.rs:21:33\n@@ -15,8 +13,6 @@ LL |     let answer: isize = forty.a + two.a;\n    |                         ------- ^ ----- std::boxed::Box<isize>\n    |                         |\n    |                         std::boxed::Box<isize>\n-   |\n-   = note: an implementation of `std::ops::Add` might be missing for `std::boxed::Box<isize>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "18c1ce0ff02e14361f9fb88b299b048277ed157a", "filename": "src/test/ui/binop/binop-bitxor-str.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -5,8 +5,6 @@ LL | fn main() { let x = \"a\".to_string() ^ \"b\".to_string(); }\n    |                     --------------- ^ --------------- std::string::String\n    |                     |\n    |                     std::string::String\n-   |\n-   = note: an implementation of `std::ops::BitXor` might be missing for `std::string::String`\n \n error: aborting due to previous error\n "}, {"sha": "859c44a859e85125263abda99646aa9d8558b2b2", "filename": "src/test/ui/binop/binop-mul-bool.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -5,8 +5,6 @@ LL | fn main() { let x = true * false; }\n    |                     ---- ^ ----- bool\n    |                     |\n    |                     bool\n-   |\n-   = note: an implementation of `std::ops::Mul` might be missing for `bool`\n \n error: aborting due to previous error\n "}, {"sha": "42d910819995a67afb8242972024a1df358ff0c5", "filename": "src/test/ui/binop/binop-typeck.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fbinop%2Fbinop-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fbinop%2Fbinop-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-typeck.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -5,8 +5,6 @@ LL |     let z = x + y;\n    |             - ^ - {integer}\n    |             |\n    |             bool\n-   |\n-   = note: an implementation of `std::ops::Add` might be missing for `bool`\n \n error: aborting due to previous error\n "}, {"sha": "c03377d74e9b79f1ac2014841002002661ae5ede", "filename": "src/test/ui/const-generics/array-impls/core-traits-no-impls-length-33.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -23,8 +23,6 @@ LL |     [0_usize; 33] == [1_usize; 33]\n    |     ------------- ^^ ------------- [usize; 33]\n    |     |\n    |     [usize; 33]\n-   |\n-   = note: an implementation of `std::cmp::PartialEq` might be missing for `[usize; 33]`\n \n error[E0369]: binary operation `<` cannot be applied to type `[usize; 33]`\n   --> $DIR/core-traits-no-impls-length-33.rs:19:19\n@@ -33,8 +31,6 @@ LL |     [0_usize; 33] < [1_usize; 33]\n    |     ------------- ^ ------------- [usize; 33]\n    |     |\n    |     [usize; 33]\n-   |\n-   = note: an implementation of `std::cmp::PartialOrd` might be missing for `[usize; 33]`\n \n error[E0277]: the trait bound `&[usize; 33]: std::iter::IntoIterator` is not satisfied\n   --> $DIR/core-traits-no-impls-length-33.rs:24:14"}, {"sha": "d4e25930d22d74541d09874423ea394cd4937070", "filename": "src/test/ui/destructuring-assignment/note-unsupported.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -16,8 +16,6 @@ LL |     (a, b) += (3, 4);\n    |     ------^^^^^^^^^^\n    |     |\n    |     cannot use `+=` on type `({integer}, {integer})`\n-   |\n-   = note: an implementation of `std::ops::AddAssign` might be missing for `({integer}, {integer})`\n \n error[E0067]: invalid left-hand side of assignment\n   --> $DIR/note-unsupported.rs:7:12\n@@ -48,8 +46,6 @@ LL |     [a, b] += [3, 4];\n    |     ------^^^^^^^^^^\n    |     |\n    |     cannot use `+=` on type `[{integer}; 2]`\n-   |\n-   = note: an implementation of `std::ops::AddAssign` might be missing for `[{integer}; 2]`\n \n error[E0067]: invalid left-hand side of assignment\n   --> $DIR/note-unsupported.rs:11:12"}, {"sha": "fad8270fd5ad285f66b6449d236ce81ba52e7b95", "filename": "src/test/ui/error-codes/E0067.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Ferror-codes%2FE0067.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Ferror-codes%2FE0067.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0067.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -5,8 +5,6 @@ LL |     LinkedList::new() += 1;\n    |     -----------------^^^^^\n    |     |\n    |     cannot use `+=` on type `std::collections::LinkedList<_>`\n-   |\n-   = note: an implementation of `std::ops::AddAssign` might be missing for `std::collections::LinkedList<_>`\n \n error[E0067]: invalid left-hand side of assignment\n   --> $DIR/E0067.rs:4:23"}, {"sha": "fb5290bf64eb484a77812ca054579142dc1e1a97", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -23,8 +23,6 @@ LL |     x += 2;\n    |     -^^^^^\n    |     |\n    |     cannot use `+=` on type `&str`\n-   |\n-   = note: an implementation of `std::ops::AddAssign` might be missing for `&str`\n \n error[E0599]: no method named `z` found for reference `&str` in the current scope\n   --> $DIR/error-festival.rs:16:7"}, {"sha": "c93a3b9b25c15ba56aa23cf7798ab8f50ccde8a6", "filename": "src/test/ui/for/for-loop-type-error.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Ffor%2Ffor-loop-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Ffor%2Ffor-loop-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-loop-type-error.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -5,8 +5,6 @@ LL |     let x = () + ();\n    |             -- ^ -- ()\n    |             |\n    |             ()\n-   |\n-   = note: an implementation of `std::ops::Add` might be missing for `()`\n \n error: aborting due to previous error\n "}, {"sha": "3c34a8a34673e04b318346b7c7187a06f00ef5a2", "filename": "src/test/ui/issues/issue-14915.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fissues%2Fissue-14915.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fissues%2Fissue-14915.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14915.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -5,8 +5,6 @@ LL |     println!(\"{}\", x + 1);\n    |                    - ^ - {integer}\n    |                    |\n    |                    std::boxed::Box<isize>\n-   |\n-   = note: an implementation of `std::ops::Add` might be missing for `std::boxed::Box<isize>`\n \n error: aborting due to previous error\n "}, {"sha": "16537e21ae08c7cb1cc52a007c0d72dcb6c1bc48", "filename": "src/test/ui/issues/issue-24363.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fissues%2Fissue-24363.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fissues%2Fissue-24363.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24363.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -11,8 +11,6 @@ LL |         ()+()\n    |         --^-- ()\n    |         |\n    |         ()\n-   |\n-   = note: an implementation of `std::ops::Add` might be missing for `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4c0e1cf7ebb0bfd873f1d50dddcb72e1b4b29518", "filename": "src/test/ui/issues/issue-31076.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fissues%2Fissue-31076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fissues%2Fissue-31076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31076.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -5,8 +5,6 @@ LL |     let x = 5 + 6;\n    |             - ^ - {integer}\n    |             |\n    |             {integer}\n-   |\n-   = note: an implementation of `std::ops::Add` might be missing for `{integer}`\n \n error[E0369]: cannot add `i32` to `i32`\n   --> $DIR/issue-31076.rs:15:18\n@@ -15,8 +13,6 @@ LL |     let y = 5i32 + 6i32;\n    |             ---- ^ ---- i32\n    |             |\n    |             i32\n-   |\n-   = note: an implementation of `std::ops::Add` might be missing for `i32`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "98e8e6366b99b0e00d553a758fc09a50ddd747dd", "filename": "src/test/ui/issues/issue-35668.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fissues%2Fissue-35668.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fissues%2Fissue-35668.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35668.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -5,8 +5,6 @@ LL |     a.iter().map(|a| a*a)\n    |                      -^- &T\n    |                      |\n    |                      &T\n-   |\n-   = note: an implementation of `std::ops::Mul` might be missing for `&T`\n \n error: aborting due to previous error\n "}, {"sha": "b4e302dfffc7a7b257d46ceb706368d2688f1115", "filename": "src/test/ui/issues/issue-40610.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fissues%2Fissue-40610.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fissues%2Fissue-40610.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40610.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -5,8 +5,6 @@ LL |     () + f(&[1.0]);\n    |     -- ^ --------- ()\n    |     |\n    |     ()\n-   |\n-   = note: an implementation of `std::ops::Add` might be missing for `()`\n \n error: aborting due to previous error\n "}, {"sha": "47a24547d4533dcf333588d10315f2c42f942f7c", "filename": "src/test/ui/issues/issue-41394.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -5,8 +5,6 @@ LL |     A = \"\" + 1\n    |         -- ^ - {integer}\n    |         |\n    |         &str\n-   |\n-   = note: an implementation of `std::ops::Add` might be missing for `&str`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-41394.rs:7:9"}, {"sha": "58f1376b19ddf4419777715095b56ec142783aab", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -58,8 +58,6 @@ LL |     foo > bar;\n    |     --- ^ --- fn(i64) -> i64 {bar}\n    |     |\n    |     fn() -> i32 {foo}\n-   |\n-   = note: an implementation of `std::cmp::PartialOrd` might be missing for `fn() -> i32 {foo}`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-59488.rs:25:11\n@@ -79,7 +77,6 @@ LL |     assert_eq!(Foo::Bar, i);\n    |     fn(usize) -> Foo {Foo::Bar}\n    |     fn(usize) -> Foo {Foo::Bar}\n    |\n-   = note: an implementation of `std::cmp::PartialEq` might be missing for `fn(usize) -> Foo {Foo::Bar}`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `std::fmt::Debug`"}, {"sha": "3fbec7c89c9a2a96a78d9c2331feac6fe1cf5437", "filename": "src/test/ui/minus-string.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fminus-string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fminus-string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fminus-string.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -3,8 +3,6 @@ error[E0600]: cannot apply unary operator `-` to type `std::string::String`\n    |\n LL | fn main() { -\"foo\".to_string(); }\n    |             ^^^^^^^^^^^^^^^^^^ cannot apply unary operator `-`\n-   |\n-   = note: an implementation of `std::ops::Neg` might be missing for `std::string::String`\n \n error: aborting due to previous error\n "}, {"sha": "9566244464081fc222b098c0fc3e6d2c3e002a04", "filename": "src/test/ui/pattern/pattern-tyvar-2.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -5,8 +5,6 @@ LL | fn foo(t: Bar) -> isize { match t { Bar::T1(_, Some(x)) => { return x * 3;\n    |                                                                     - ^ - {integer}\n    |                                                                     |\n    |                                                                     std::vec::Vec<isize>\n-   |\n-   = note: an implementation of `std::ops::Mul` might be missing for `std::vec::Vec<isize>`\n \n error: aborting due to previous error\n "}, {"sha": "39874a6c680cd773f10e39618e4459b9758a8694", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -560,8 +560,6 @@ error[E0600]: cannot apply unary operator `-` to type `bool`\n    |\n LL |     if -let 0 = 0 {}\n    |        ^^^^^^^^^^ cannot apply unary operator `-`\n-   |\n-   = note: an implementation of `std::ops::Neg` might be missing for `bool`\n \n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n   --> $DIR/disallowed-positions.rs:46:8\n@@ -748,8 +746,6 @@ error[E0600]: cannot apply unary operator `-` to type `bool`\n    |\n LL |     while -let 0 = 0 {}\n    |           ^^^^^^^^^^ cannot apply unary operator `-`\n-   |\n-   = note: an implementation of `std::ops::Neg` might be missing for `bool`\n \n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n   --> $DIR/disallowed-positions.rs:110:11\n@@ -927,8 +923,6 @@ error[E0600]: cannot apply unary operator `-` to type `bool`\n    |\n LL |     -let 0 = 0;\n    |     ^^^^^^^^^^ cannot apply unary operator `-`\n-   |\n-   = note: an implementation of `std::ops::Neg` might be missing for `bool`\n \n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n   --> $DIR/disallowed-positions.rs:183:5"}, {"sha": "8caa5bea4ac1e15d981175bc8ed62cebbbe5d71f", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -136,8 +136,6 @@ LL |     let _ = &c + &d;\n    |             -- ^ -- &&str\n    |             |\n    |             &&str\n-   |\n-   = note: an implementation of `std::ops::Add` might be missing for `&&str`\n \n error[E0369]: cannot add `&str` to `&&str`\n   --> $DIR/issue-39018.rs:35:16\n@@ -146,8 +144,6 @@ LL |     let _ = &c + d;\n    |             -- ^ - &str\n    |             |\n    |             &&str\n-   |\n-   = note: an implementation of `std::ops::Add` might be missing for `&&str`\n \n error[E0369]: cannot add `&&str` to `&str`\n   --> $DIR/issue-39018.rs:36:15"}, {"sha": "29216f36f5f313aa4484b5c89df975fa52a24d51", "filename": "src/test/ui/traits/trait-resolution-in-overloaded-op.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -5,8 +5,6 @@ LL |     a * b\n    |     - ^ - f64\n    |     |\n    |     &T\n-   |\n-   = note: an implementation of `std::ops::Mul` might be missing for `&T`\n \n error: aborting due to previous error\n "}, {"sha": "9913747b88ee9b81e5f70962da05f7c18b6336fd", "filename": "src/test/ui/unop-neg-bool.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Funop-neg-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Funop-neg-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-neg-bool.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -3,8 +3,6 @@ error[E0600]: cannot apply unary operator `-` to type `bool`\n    |\n LL |     -true;\n    |     ^^^^^ cannot apply unary operator `-`\n-   |\n-   = note: an implementation of `std::ops::Neg` might be missing for `bool`\n \n error: aborting due to previous error\n "}, {"sha": "2d41583268c4efaaa3257140d24079ae3ab229b4", "filename": "src/test/ui/vec/vec-res-add.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e07892c7dd71f2025b68dcf8c144d53b3560511/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.stderr?ref=2e07892c7dd71f2025b68dcf8c144d53b3560511", "patch": "@@ -5,8 +5,6 @@ LL |     let k = i + j;\n    |             - ^ - std::vec::Vec<R>\n    |             |\n    |             std::vec::Vec<R>\n-   |\n-   = note: an implementation of `std::ops::Add` might be missing for `std::vec::Vec<R>`\n \n error: aborting due to previous error\n "}]}