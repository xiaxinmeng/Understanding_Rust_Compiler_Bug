{"sha": "6511d471bafd446026462ce0dba8ef5e2ebf462f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MTFkNDcxYmFmZDQ0NjAyNjQ2MmNlMGRiYThlZjVlMmViZjQ2MmY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-19T10:02:06Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-19T14:57:13Z"}, "message": "replace error logging with log_err in stdlib and rustc", "tree": {"sha": "7d1be7a2ed367965ef50b1e6f12c87e74391f750", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d1be7a2ed367965ef50b1e6f12c87e74391f750"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6511d471bafd446026462ce0dba8ef5e2ebf462f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6511d471bafd446026462ce0dba8ef5e2ebf462f", "html_url": "https://github.com/rust-lang/rust/commit/6511d471bafd446026462ce0dba8ef5e2ebf462f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6511d471bafd446026462ce0dba8ef5e2ebf462f/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d3a423094c77b25b20afe3a812a67f03080cc3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3a423094c77b25b20afe3a812a67f03080cc3d", "html_url": "https://github.com/rust-lang/rust/commit/6d3a423094c77b25b20afe3a812a67f03080cc3d"}], "stats": {"total": 264, "additions": 132, "deletions": 132}, "files": [{"sha": "3ad3ee0697587e1bb7261a4b246da1ee1175e47f", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=6511d471bafd446026462ce0dba8ef5e2ebf462f", "patch": "@@ -2664,10 +2664,12 @@ let trans_visitor\n            nabi_rust (upcall_fixup name) args);\n \n   and trans_log_int lev (a:Ast.atom) : unit =\n-    trans_void_upcall \"upcall_log_int\" [| simm (Int64.of_int lev); (trans_atom a) |]\n+    trans_void_upcall \"upcall_log_int\" [| simm (Int64.of_int lev);\n+                                          trans_atom a |]\n \n   and trans_log_str lev (a:Ast.atom) : unit =\n-    trans_void_upcall \"upcall_log_str\" [| simm (Int64.of_int lev); (trans_atom a) |]\n+    trans_void_upcall \"upcall_log_str\" [| simm (Int64.of_int lev);\n+                                          trans_atom a |]\n \n   and trans_spawn\n       ((*initializing*)_:bool)"}, {"sha": "085a1f5888b453e3bebfe25bd9b1ae089bc92337", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=6511d471bafd446026462ce0dba8ef5e2ebf462f", "patch": "@@ -18,6 +18,7 @@ import std.option.some;\n import std.option.none;\n import std._str;\n import std._vec;\n+import std.io;\n \n fn default_environment(session.session sess,\n                        str argv0,\n@@ -88,26 +89,24 @@ impure fn pretty_print_input(session.session sess,\n }\n \n fn warn_wrong_compiler() {\n-    log \"This is the rust 'self-hosted' compiler.\";\n-    log \"The one written in rust.\";\n-    log \"It is currently incomplete.\";\n-    log \"You may want rustboot instead, the compiler next door.\";\n+    io.stdout().write_str(\"This is the rust 'self-hosted' compiler.\n+The one written in rust.\n+It is currently incomplete.\n+You may want rustboot instead, the compiler next door.\\n\");\n }\n \n fn usage(session.session sess, str argv0) {\n-    log #fmt(\"usage: %s [options] <input>\", argv0);\n-    log \"options:\";\n-    log \"\";\n-    log \"    -o <filename>      write output to <filename>\";\n-    log \"    -nowarn            suppress wrong-compiler warning\";\n-    log \"    -glue              generate glue.bc file\";\n-    log \"    -shared            compile a shared-library crate\";\n-    log \"    -pp                pretty-print the input instead of compiling\";\n-    log \"    -ls                list the symbols defined by a crate file\";\n-    log \"    -L <path>          add a directory to the library search path\";\n-    log \"    -h                 display this message\";\n-    log \"\";\n-    log \"\";\n+    io.stdout().write_str(#fmt(\"usage: %s [options] <input>\\n\", argv0) + \"\n+options:\n+\n+    -o <filename>      write output to <filename>\n+    -nowarn            suppress wrong-compiler warning\n+    -glue              generate glue.bc file\n+    -shared            compile a shared-library crate\n+    -pp                pretty-print the input instead of compiling\n+    -ls                list the symbols defined by a crate file\n+    -L <path>          add a directory to the library search path\n+    -h                 display this message\\n\\n\");\n }\n \n fn get_os() -> session.os {"}, {"sha": "8e0f22b2f72558222a8c7bc99db779372d70ff09", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=6511d471bafd446026462ce0dba8ef5e2ebf462f", "patch": "@@ -42,16 +42,16 @@ state obj session(ast.crate_num cnum, cfg targ,\n     fn span_err(span sp, str msg) {\n         auto lo = codemap.lookup_pos(cm, sp.lo);\n         auto hi = codemap.lookup_pos(cm, sp.hi);\n-        log #fmt(\"%s:%u:%u:%u:%u: error: %s\",\n-                 lo.filename,\n-                 lo.line, lo.col,\n-                 hi.line, hi.col,\n-                 msg);\n+        log_err #fmt(\"%s:%u:%u:%u:%u: error: %s\",\n+                     lo.filename,\n+                     lo.line, lo.col,\n+                     hi.line, hi.col,\n+                     msg);\n         fail;\n     }\n \n     fn err(str msg) {\n-        log #fmt(\"error: %s\", msg);\n+        log_err #fmt(\"error: %s\", msg);\n         fail;\n     }\n \n@@ -65,31 +65,31 @@ state obj session(ast.crate_num cnum, cfg targ,\n     fn span_warn(span sp, str msg) {\n         auto lo = codemap.lookup_pos(cm, sp.lo);\n         auto hi = codemap.lookup_pos(cm, sp.hi);\n-        log #fmt(\"%s:%u:%u:%u:%u: warning: %s\",\n-                 lo.filename,\n-                 lo.line, lo.col,\n-                 hi.line, hi.col,\n-                 msg);\n+        log_err #fmt(\"%s:%u:%u:%u:%u: warning: %s\",\n+                     lo.filename,\n+                     lo.line, lo.col,\n+                     hi.line, hi.col,\n+                     msg);\n     }\n \n     fn bug(str msg) {\n-        log #fmt(\"error: internal compiler error %s\", msg);\n+        log_err #fmt(\"error: internal compiler error %s\", msg);\n         fail;\n     }\n \n     fn span_unimpl(span sp, str msg) {\n         auto lo = codemap.lookup_pos(cm, sp.lo);\n         auto hi = codemap.lookup_pos(cm, sp.hi);\n-        log #fmt(\"%s:%u:%u:%u:%u: error: unimplemented %s\",\n-                 lo.filename,\n-                 lo.line, lo.col,\n-                 hi.line, hi.col,\n-                 msg);\n+        log_err #fmt(\"%s:%u:%u:%u:%u: error: unimplemented %s\",\n+                     lo.filename,\n+                     lo.line, lo.col,\n+                     hi.line, hi.col,\n+                     msg);\n         fail;\n     }\n \n     fn unimpl(str msg) {\n-        log #fmt(\"error: unimplemented %s\", msg);\n+        log_err #fmt(\"error: unimplemented %s\", msg);\n         fail;\n     }\n "}, {"sha": "8088a6f09927649626d28eabaf2c06acd5972c04", "filename": "src/comp/front/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Ffront%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Ffront%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcodemap.rs?ref=6511d471bafd446026462ce0dba8ef5e2ebf462f", "patch": "@@ -46,7 +46,7 @@ fn lookup_pos(codemap map, uint pos) -> loc {\n             }\n         }\n     }\n-    log #fmt(\"Failed to find a location for character %u\", pos);\n+    log_err #fmt(\"Failed to find a location for character %u\", pos);\n     fail;\n }\n "}, {"sha": "ec9c6883ab55389963672f5d4d9c0af09dce2cad", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=6511d471bafd446026462ce0dba8ef5e2ebf462f", "patch": "@@ -67,7 +67,7 @@ fn parse_ty_str(str rep, str_def sd) -> @ty.t {\n     auto st = @rec(rep=rep, mutable pos=0u, len=len);\n     auto result = parse_ty(st, sd);\n     if (st.pos != len) {\n-        log \"parse_ty_str: incomplete parse, stopped at byte \"\n+        log_err \"parse_ty_str: incomplete parse, stopped at byte \"\n             + _uint.to_str(st.pos, 10u) + \" of \"\n             + _uint.to_str(len, 10u) + \" in str '\" + rep + \"'\";\n     }\n@@ -242,7 +242,7 @@ fn parse_def_id(vec[u8] buf) -> ast.def_id {\n         colon_idx += 1u;\n     }\n     if (colon_idx == len) {\n-        log \"didn't find ':' when parsing def id\";\n+        log_err \"didn't find ':' when parsing def id\";\n         fail;\n     }\n \n@@ -407,8 +407,8 @@ fn load_crate(session.session sess,\n         }\n     }\n \n-    log #fmt(\"can't open crate '%s' (looked for '%s' in lib search paths)\",\n-        ident, filename);\n+    log_err #fmt(\"can't open crate '%s' (looked for '%s' in lib search path)\",\n+                 ident, filename);\n     fail;\n }\n \n@@ -459,8 +459,8 @@ fn kind_has_type_params(u8 kind_ch) -> bool {\n     else if (kind_ch == ('n' as u8)) { ret false; }\n     else if (kind_ch == ('v' as u8)) { ret true;  }\n     else {\n-        log #fmt(\"kind_has_type_params(): unknown kind char: %d\",\n-                 kind_ch as int);\n+        log_err #fmt(\"kind_has_type_params(): unknown kind char: %d\",\n+                     kind_ch as int);\n         fail;\n     }\n }\n@@ -503,7 +503,7 @@ fn lookup_def(session.session sess, int cnum, vec[ast.ident] path)\n         tid = tup(cnum, tid._1);\n         def = ast.def_variant(tid, did);\n     } else {\n-        log #fmt(\"lookup_def(): unknown kind char: %d\", kind_ch as int);\n+        log_err #fmt(\"lookup_def(): unknown kind char: %d\", kind_ch as int);\n         fail;\n     }\n "}, {"sha": "e8f0c2521a03b77f98ce2a717cc874f07a0b1380", "filename": "src/comp/front/extfmt.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Ffront%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Ffront%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextfmt.rs?ref=6511d471bafd446026462ce0dba8ef5e2ebf462f", "patch": "@@ -49,7 +49,7 @@ fn expand_syntax_ext(vec[@ast.expr] args,\n                      option.t[@ast.expr] body) -> @ast.expr {\n \n     if (_vec.len[@ast.expr](args) == 0u) {\n-        log \"malformed #fmt call\";\n+        log_err \"malformed #fmt call\";\n         fail;\n     }\n \n@@ -74,7 +74,7 @@ fn expr_to_str(@ast.expr expr) -> str {\n             }\n         }\n     }\n-    log \"malformed #fmt call\";\n+    log_err \"malformed #fmt call\";\n     fail;\n }\n \n@@ -214,7 +214,7 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n                     ret make_call(sp, count_is_path, count_is_args);\n                 }\n                 case (_) {\n-                    log \"not implemented\";\n+                    log_err \"not implemented\";\n                     fail;\n                 }\n             }\n@@ -302,7 +302,7 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n             case (option.none[int]) {\n             }\n             case (_) {\n-                log unsupported;\n+                log_err unsupported;\n                 fail;\n             }\n         }\n@@ -313,21 +313,21 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n                 }\n                 case (flag_sign_always) {\n                     if (!is_signed_type(cnv)) {\n-                        log \"+ flag only valid in signed #fmt conversions\";\n+                        log_err \"+ flag only valid in signed #fmt conversion\";\n                         fail;\n                     }\n                 }\n                 case (flag_space_for_sign) {\n                     if (!is_signed_type(cnv)) {\n-                        log \"space flag only valid in \"\n+                        log_err \"space flag only valid in \"\n                             + \"signed #fmt conversions\";\n                         fail;\n                     }\n                 }\n                 case (flag_left_zero_pad) {\n                 }\n                 case (_) {\n-                    log unsupported;\n+                    log_err unsupported;\n                     fail;\n                 }\n             }\n@@ -339,7 +339,7 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n             case (count_is(_)) {\n             }\n             case (_) {\n-                log unsupported;\n+                log_err unsupported;\n                 fail;\n             }\n         }\n@@ -350,7 +350,7 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n             case (count_is(_)) {\n             }\n             case (_) {\n-                log unsupported;\n+                log_err unsupported;\n                 fail;\n             }\n         }\n@@ -382,7 +382,7 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n                 ret make_conv_call(arg.span, \"uint\", cnv, arg);\n             }\n             case (_) {\n-                log unsupported;\n+                log_err unsupported;\n                 fail;\n             }\n         }\n@@ -492,7 +492,7 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n             }\n             case (piece_conv(?conv)) {\n                 if (n >= _vec.len[@ast.expr](args)) {\n-                    log \"too many conversions in #fmt string\";\n+                    log_err \"too many conversions in #fmt string\";\n                     fail;\n                 }\n "}, {"sha": "e34ddd4f7822a4eaba634e3d73c43b6ac8a8ef7d", "filename": "src/comp/front/lexer.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Ffront%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Ffront%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Flexer.rs?ref=6511d471bafd446026462ce0dba8ef5e2ebf462f", "patch": "@@ -321,7 +321,7 @@ impure fn consume_block_comment(reader rdr) {\n             }\n         }\n         if (rdr.is_eof()) {\n-            log \"unterminated block comment\";\n+            log_err \"unterminated block comment\";\n             fail;\n         }\n     }\n@@ -359,7 +359,7 @@ impure fn scan_exponent(reader rdr) -> option.t[str] {\n             ret(some(res + exponent));\n         }\n         else {\n-            log (\"scan_exponent: bad fp literal\");\n+            log_err (\"scan_exponent: bad fp literal\");\n             fail;\n         }\n     }\n@@ -538,8 +538,7 @@ impure fn scan_numeric_escape(reader rdr) -> char {\n         case ('u') { n_hex_digits = 4; }\n         case ('U') { n_hex_digits = 8; }\n         case (?c) {\n-            log \"unknown numeric character escape\";\n-            log c;\n+            log_err #fmt(\"unknown numeric character escape: %d\", c as int);\n             fail;\n         }\n     }\n@@ -551,8 +550,7 @@ impure fn scan_numeric_escape(reader rdr) -> char {\n \n     while (n_hex_digits != 0) {\n         if (!is_hex_digit(n)) {\n-            log \"illegal numeric character escape\";\n-            log n;\n+            log_err #fmt(\"illegal numeric character escape: %d\", n as int);\n             fail;\n         }\n         accum_int *= 16;\n@@ -593,7 +591,7 @@ impure fn next_token(reader rdr) -> token.token {\n \n         auto rsvd = rdr.get_reserved();\n         if (rsvd.contains_key(accum_str)) {\n-            log \"reserved keyword\";\n+            log_err #fmt(\"reserved keyword: %s\", accum_str);\n             fail;\n         }\n \n@@ -716,16 +714,16 @@ impure fn next_token(reader rdr) -> token.token {\n                     case ('U') { c2 = scan_numeric_escape(rdr); }\n \n                     case (?c2) {\n-                        log \"unknown character escape\";\n-                        log c2;\n+                        log_err #fmt(\"unknown character escape: %d\",\n+                                     c2 as int);\n                         fail;\n                     }\n                 }\n                 rdr.bump();\n             }\n \n             if (rdr.next() != '\\'') {\n-                log \"unterminated character constant\";\n+                log_err \"unterminated character constant\";\n                 fail;\n             }\n             rdr.bump(); // advance curr to closing '\n@@ -776,8 +774,8 @@ impure fn next_token(reader rdr) -> token.token {\n                             }\n \n                             case (?c2) {\n-                                log \"unknown string escape\";\n-                                log c2;\n+                                log_err #fmt(\"unknown string escape: %d\",\n+                                             c2 as int);\n                                 fail;\n                             }\n                         }\n@@ -843,8 +841,7 @@ impure fn next_token(reader rdr) -> token.token {\n         }\n \n         case (?c) {\n-            log \"unkown start of token\";\n-            log c;\n+            log_err #fmt(\"unkown start of token: %d\", c as int);\n             fail;\n         }\n     }"}, {"sha": "2a2a658e17f119355c5a68dd17f79d37bd9e9194", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=6511d471bafd446026462ce0dba8ef5e2ebf462f", "patch": "@@ -1400,7 +1400,7 @@ fn type_to_str_inner(type_names names,\n         case (13) { ret \"Vector\"; }\n         case (14) { ret \"Metadata\"; }\n         case (_) {\n-            log \"unknown TypeKind\" + util.common.istr(kind as int);\n+            log_err #fmt(\"unknown TypeKind %d\", kind as int);\n             fail;\n         }\n     }"}, {"sha": "8ea91916a52716488a68d6cb5e12b1021f06937d", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=6511d471bafd446026462ce0dba8ef5e2ebf462f", "patch": "@@ -366,7 +366,7 @@ fn lookup_name_wrapped(&env e, ast.ident i, namespace ns)\n                                 ret some[def_wrap](def_wrap_other(t));\n                             }\n                             case (_) {\n-                                log \"tag item not actually a tag\";\n+                                log_err \"tag item not actually a tag\";\n                                 fail;\n                             }\n                         }\n@@ -426,7 +426,7 @@ fn lookup_name_wrapped(&env e, ast.ident i, namespace ns)\n                 ret def_wrap_other(t);\n             }\n             case (_) {\n-                log \"tag item not actually a tag\";\n+                log_err \"tag item not actually a tag\";\n                 fail;\n             }\n         }"}, {"sha": "f0010a5b758db32c45234aa924ba4e14a5cc6b2d", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=6511d471bafd446026462ce0dba8ef5e2ebf462f", "patch": "@@ -556,7 +556,7 @@ fn T_opaque_obj_ptr(type_names tn) -> TypeRef {\n // TODO: Enforce via a predicate.\n fn type_of(@crate_ctxt cx, @ty.t t) -> TypeRef {\n     if (ty.type_has_dynamic_size(t)) {\n-        log \"type_of() called on a type with dynamic size: \" +\n+        log_err \"type_of() called on a type with dynamic size: \" +\n             ty.ty_to_str(t);\n         fail;\n     }\n@@ -764,14 +764,14 @@ fn type_of_inner(@crate_ctxt cx, @ty.t t) -> TypeRef {\n             llty = abs_pair;\n         }\n         case (ty.ty_var(_)) {\n-            log \"ty_var in trans.type_of\";\n+            log_err \"ty_var in trans.type_of\";\n             fail;\n         }\n         case (ty.ty_param(_)) {\n             llty = T_i8();\n         }\n         case (ty.ty_bound_param(_)) {\n-            log \"ty_bound_param in trans.type_of\";\n+            log_err \"ty_bound_param in trans.type_of\";\n             fail;\n         }\n         case (ty.ty_type) { llty = T_ptr(T_tydesc(cx.tn)); }\n@@ -1152,7 +1152,7 @@ fn simplify_type(@ty.t typ) -> @ty.t {\n // Computes the size of the data part of a non-dynamically-sized tag.\n fn static_size_of_tag(@crate_ctxt cx, @ty.t t) -> uint {\n     if (ty.type_has_dynamic_size(t)) {\n-        log \"dynamically sized type passed to static_size_of_tag()\";\n+        log_err \"dynamically sized type passed to static_size_of_tag()\";\n         fail;\n     }\n \n@@ -1168,7 +1168,7 @@ fn static_size_of_tag(@crate_ctxt cx, @ty.t t) -> uint {\n             subtys = subtys_;\n         }\n         case (_) {\n-            log \"non-tag passed to static_size_of_tag()\";\n+            log_err \"non-tag passed to static_size_of_tag()\";\n             fail;\n         }\n     }\n@@ -2037,7 +2037,7 @@ fn tag_variant_with_id(@crate_ctxt cx,\n         i += 1u;\n     }\n \n-    log \"tag_variant_with_id(): no variant exists with that ID\";\n+    log_err \"tag_variant_with_id(): no variant exists with that ID\";\n     fail;\n }\n \n@@ -2584,13 +2584,13 @@ fn node_ann_type(@crate_ctxt cx, &ast.ann a) -> @ty.t {\n fn node_ann_ty_params(&ast.ann a) -> vec[@ty.t] {\n     alt (a) {\n         case (ast.ann_none) {\n-            log \"missing type annotation\";\n+            log_err \"missing type annotation\";\n             fail;\n         }\n         case (ast.ann_type(_, ?tps_opt, _)) {\n             alt (tps_opt) {\n                 case (none[vec[@ty.t]]) {\n-                    log \"type annotation has no ty params\";\n+                    log_err \"type annotation has no ty params\";\n                     fail;\n                 }\n                 case (some[vec[@ty.t]](?tps)) { ret tps; }\n@@ -2656,7 +2656,7 @@ fn trans_unary(@block_ctxt cx, ast.unop op,\n             ret res(sub.bcx, box);\n         }\n         case (ast.deref) {\n-            log \"deref expressions should have been translated using \" +\n+            log_err \"deref expressions should have been translated using \" +\n                 \"trans_lval(), not trans_unary()\";\n             fail;\n         }\n@@ -5030,16 +5030,17 @@ fn trans_log(int lvl, @block_ctxt cx, @ast.expr e) -> result {\n             }\n         }\n         if (is32bit) {\n-            trans_upcall(sub.bcx,\n-                         \"upcall_log_float\",\n-                         vec(C_int(lvl), sub.val)).bcx.build.Br(after_cx.llbb);\n+            auto uval = trans_upcall(sub.bcx,\n+                                     \"upcall_log_float\",\n+                                     vec(C_int(lvl), sub.val));\n+            uval.bcx.build.Br(after_cx.llbb);\n         } else {\n             auto tmp = alloca(sub.bcx, tr);\n             sub.bcx.build.Store(sub.val, tmp);\n-            auto v = vp2i(sub.bcx, tmp);\n-            trans_upcall(sub.bcx,\n-                         \"upcall_log_double\",\n-                         vec(C_int(lvl), v)).bcx.build.Br(after_cx.llbb);\n+            auto uval = trans_upcall(sub.bcx,\n+                                     \"upcall_log_double\",\n+                                     vec(C_int(lvl), vp2i(sub.bcx, tmp)));\n+            uval.bcx.build.Br(after_cx.llbb);\n         }\n     } else {\n         alt (e_ty.struct) {"}, {"sha": "0f527a33921d04953b42d8f7559d2d069309b582", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=6511d471bafd446026462ce0dba8ef5e2ebf462f", "patch": "@@ -663,7 +663,7 @@ fn eq_ty(&@t a, &@t b) -> bool {\n fn ann_to_type(&ast.ann ann) -> @t {\n     alt (ann) {\n         case (ast.ann_none) {\n-            log \"ann_to_type() called on node with no type\";\n+            log_err \"ann_to_type() called on node with no type\";\n             fail;\n         }\n         case (ast.ann_type(?ty, _, _)) {\n@@ -675,7 +675,7 @@ fn ann_to_type(&ast.ann ann) -> @t {\n fn ann_to_type_params(&ast.ann ann) -> vec[@t] {\n     alt (ann) {\n         case (ast.ann_none) {\n-            log \"ann_to_type_params() called on node with no type params\";\n+            log_err \"ann_to_type_params() called on node with no type params\";\n             fail;\n         }\n         case (ast.ann_type(_, ?tps, _)) {\n@@ -697,7 +697,7 @@ fn ann_to_monotype(ast.ann a) -> @ty.t {\n     // confident that it works.\n     alt (a) {\n         case (ast.ann_none) {\n-            log \"ann_to_monotype() called on expression with no type!\";\n+            log_err \"ann_to_monotype() called on expression with no type!\";\n             fail;\n         }\n         case (ast.ann_type(?typ, ?tps_opt, _)) {\n@@ -995,7 +995,7 @@ fn replace_expr_type(@ast.expr expr, tup(vec[@t], @t) new_tyt) -> @ast.expr {\n                                         ast.expr_path(p, dopt, ann));\n         }\n         case (_) {\n-            log \"unhandled expr type in replace_expr_type(): \" +\n+            log_err \"unhandled expr type in replace_expr_type(): \" +\n                 pretty.pprust.expr_to_str(expr);\n             fail;\n         }\n@@ -1356,7 +1356,7 @@ fn unify(@ty.t expected, @ty.t actual, &unify_handler handler)\n             case (ty.ty_bound_param(?actual_id)) {\n                 alt (expected.struct) {\n                     case (ty.ty_local(_)) {\n-                        log \"TODO: bound param unifying with local\";\n+                        log_err \"TODO: bound param unifying with local\";\n                         fail;\n                     }\n \n@@ -1782,7 +1782,8 @@ fn unify(@ty.t expected, @ty.t actual, &unify_handler handler)\n         let vec[@t] result = vec();\n         for (vec[@t] types in set_types) {\n             if (_vec.len[@t](types) > 1u) {\n-                log \"unification of > 1 types in a type set is unimplemented\";\n+                log_err \"unification of > 1 types in a type set is \" +\n+                    \"unimplemented\";\n                 fail;\n             }\n             result += vec(types.(0));\n@@ -1878,7 +1879,7 @@ fn bind_params_in_type(@t typ) -> @t {\n     fn binder(@t typ) -> @t {\n         alt (typ.struct) {\n             case (ty_bound_param(?index)) {\n-                log \"bind_params_in_type() called on type that already \" +\n+                log_err \"bind_params_in_type() called on type that already \" +\n                     \"has bound params in it\";\n                 fail;\n             }"}, {"sha": "9a7fe79abc2017e2d2c702640771fd5e8859b1e5", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=6511d471bafd446026462ce0dba8ef5e2ebf462f", "patch": "@@ -1099,7 +1099,7 @@ mod Pushdown {\n                 alt (expected.struct) {\n                     case (ty.ty_tag(_, ?tps)) { tag_tps = tps; }\n                     case (_) {\n-                        log \"tag pattern type not actually a tag?!\";\n+                        log_err \"tag pattern type not actually a tag?!\";\n                         fail;\n                     }\n                 }\n@@ -1153,7 +1153,7 @@ mod Pushdown {\n                         }\n                     }\n                     case (_) {\n-                        log \"vec expr doesn't have a vec type!\";\n+                        log_err \"vec expr doesn't have a vec type!\";\n                         fail;\n                     }\n                 }\n@@ -1174,7 +1174,7 @@ mod Pushdown {\n                         }\n                     }\n                     case (_) {\n-                        log \"tup expr doesn't have a tup type!\";\n+                        log_err \"tup expr doesn't have a tup type!\";\n                         fail;\n                     }\n                 }\n@@ -1231,7 +1231,7 @@ mod Pushdown {\n                         }\n                     }\n                     case (_) {\n-                        log \"rec expr doesn't have a rec type!\";\n+                        log_err \"rec expr doesn't have a rec type!\";\n                         fail;\n                     }\n                 }\n@@ -1355,8 +1355,8 @@ mod Pushdown {\n                 auto ty_params_opt;\n                 alt (ann) {\n                     case (ast.ann_none) {\n-                        log \"pushdown_expr(): no type annotation for path \" +\n-                            \"expr; did you pass it to check_expr() first?\";\n+                        log_err \"pushdown_expr(): no type annotation for \" +\n+                            \"path expr; did you pass it to check_expr()?\";\n                         fail;\n                     }\n                     case (ast.ann_type(_, ?tps_opt, _)) {\n@@ -1682,7 +1682,7 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n                 t_0 = plain_ty(ty.ty_native_fn(abi, arg_tys_0, rt_0));\n             }\n             case (_) {\n-                log \"check_call_or_bind(): fn expr doesn't have fn type\";\n+                log_err \"check_call_or_bind(): fn expr doesn't have fn type\";\n                 fail;\n             }\n         }\n@@ -1905,10 +1905,10 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n                                                     boring_ann()));\n         }\n \n-        case (ast.expr_log(_,?e,_)) {\n+        case (ast.expr_log(?l,?e,_)) {\n             auto expr_t = check_expr(fcx, e);\n             ret @fold.respan[ast.expr_]\n-                (expr.span, ast.expr_log(_, expr_t, boring_ann()));\n+                (expr.span, ast.expr_log(l, expr_t, boring_ann()));\n         }\n \n         case (ast.expr_check_expr(?e, _)) {\n@@ -2153,7 +2153,7 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n                     }\n                 }\n                 case (_) {\n-                    log \"LHS of bind expr didn't have a function type?!\";\n+                    log_err \"LHS of bind expr didn't have a function type?!\";\n                     fail;\n                 }\n             }\n@@ -2176,7 +2176,7 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n                 case (ty.ty_fn(_,_,?rt))    { rt_1 = rt; }\n                 case (ty.ty_native_fn(_, _, ?rt))    { rt_1 = rt; }\n                 case (_) {\n-                    log \"LHS of call expr didn't have a function type?!\";\n+                    log_err \"LHS of call expr didn't have a function type?!\";\n                     fail;\n                 }\n             }"}, {"sha": "4603fce94de2a443b1fedc47dd020753d11fe601", "filename": "src/comp/middle/typestate_check.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs?ref=6511d471bafd446026462ce0dba8ef5e2ebf462f", "patch": "@@ -463,13 +463,13 @@ fn stmt_pp(&stmt s) -> pre_and_post {\n fn expr_states(&expr e) -> pre_and_post_state {\n   alt (expr_ann(e)) {\n     case (ann_none) {\n-      log \"expr_pp: the impossible happened (no annotation)\";\n+      log_err \"expr_pp: the impossible happened (no annotation)\";\n       fail;\n     }\n     case (ann_type(_, _, ?maybe_pp)) {\n       alt (maybe_pp) {\n         case (none[@ts_ann]) {\n-          log \"expr_pp: the impossible happened (no pre/post)\";\n+          log_err \"expr_pp: the impossible happened (no pre/post)\";\n           fail;\n         }\n         case (some[@ts_ann](?p)) {\n@@ -484,13 +484,13 @@ fn expr_states(&expr e) -> pre_and_post_state {\n fn expr_pp(&expr e) -> pre_and_post {\n   alt (expr_ann(e)) {\n     case (ann_none) {\n-      log \"expr_pp: the impossible happened (no annotation)\";\n+      log_err \"expr_pp: the impossible happened (no annotation)\";\n       fail;\n     }\n     case (ann_type(_, _, ?maybe_pp)) {\n       alt (maybe_pp) {\n         case (none[@ts_ann]) {\n-          log \"expr_pp: the impossible happened (no pre/post)\";\n+          log_err \"expr_pp: the impossible happened (no pre/post)\";\n           fail;\n         }\n         case (some[@ts_ann](?p)) {\n@@ -506,13 +506,13 @@ fn expr_pp(&expr e) -> pre_and_post {\n fn block_pp(&block b) -> pre_and_post {\n     alt (b.node.a) {\n        case (ann_none) {\n-           log \"block_pp: the impossible happened (no ann)\";\n+           log_err \"block_pp: the impossible happened (no ann)\";\n            fail;\n        }\n        case (ann_type(_,_,?t)) {\n            alt (t) {\n                case (none[@ts_ann]) {\n-                   log \"block_pp: the impossible happened (no ty)\";\n+                   log_err \"block_pp: the impossible happened (no ty)\";\n                    fail;\n                }\n                case (some[@ts_ann](?ts)) {\n@@ -526,13 +526,13 @@ fn block_pp(&block b) -> pre_and_post {\n fn block_states(&block b) -> pre_and_post_state {\n     alt (b.node.a) {\n        case (ann_none) {\n-           log \"block_pp: the impossible happened (no ann)\";\n+           log_err \"block_pp: the impossible happened (no ann)\";\n            fail;\n        }\n        case (ann_type(_,_,?t)) {\n            alt (t) {\n                case (none[@ts_ann]) {\n-                   log \"block_states: the impossible happened (no ty)\";\n+                   log_err \"block_states: the impossible happened (no ty)\";\n                    fail;\n                }\n                case (some[@ts_ann](?ts)) {"}, {"sha": "fb7c4b9a0ae92d52939a556f5875644a1011bb0a", "filename": "src/lib/ExtFmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Flib%2FExtFmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Flib%2FExtFmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FExtFmt.rs?ref=6511d471bafd446026462ce0dba8ef5e2ebf462f", "patch": "@@ -96,7 +96,7 @@ mod CT {\n             if (_str.eq(curr, \"%\")) {\n                 i += 1u;\n                 if (i >= lim) {\n-                    log \"unterminated conversion at end of string\";\n+                    log_err \"unterminated conversion at end of string\";\n                     fail;\n                 }\n                 auto curr2 = _str.substr(s, i, 1u);\n@@ -264,7 +264,7 @@ mod CT {\n \n     fn parse_type(str s, uint i, uint lim) -> tup(ty, uint) {\n         if (i >= lim) {\n-            log \"missing type in conversion\";\n+            log_err \"missing type in conversion\";\n             fail;\n         }\n \n@@ -290,7 +290,7 @@ mod CT {\n         } else if (_str.eq(tstr, \"t\")) {\n             t = ty_bits;\n         } else {\n-            log \"unknown type in conversion\";\n+            log_err \"unknown type in conversion\";\n             fail;\n         }\n "}, {"sha": "f73ad4fc6474362c35e2ec07b04de756fb22ad24", "filename": "src/lib/ebml.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Flib%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Flib%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Febml.rs?ref=6511d471bafd446026462ce0dba8ef5e2ebf462f", "patch": "@@ -33,7 +33,7 @@ fn vint_at(vec[u8] data, uint start) -> tup(uint, uint) {\n                 ((data.(start + 2u) as uint) << 8u) |\n                 (data.(start + 3u) as uint), start + 4u);\n     } else {\n-        log \"vint too big\"; fail;\n+        log_err \"vint too big\"; fail;\n     }\n }\n \n@@ -65,7 +65,7 @@ fn get_doc(doc d, uint tg) -> doc {\n     alt (maybe_get_doc(d, tg)) {\n         case (some[doc](?d)) {ret d;}\n         case (none[doc]) {\n-            log \"failed to find block with tag \" + _uint.to_str(tg, 10u);\n+            log_err \"failed to find block with tag \" + _uint.to_str(tg, 10u);\n             fail;\n         }\n     }\n@@ -140,7 +140,7 @@ fn write_sized_vint(&io.buf_writer w, uint n, uint size) {\n                       (n & 0xffu) as u8);\n         }\n         case (_) {\n-            log \"vint to write too big\";\n+            log_err \"vint to write too big\";\n             fail;\n         }\n     }\n@@ -153,7 +153,7 @@ fn write_vint(&io.buf_writer w, uint n) {\n     if (n < 0x4000u)        { write_sized_vint(w, n, 2u); ret; }\n     if (n < 0x200000u)      { write_sized_vint(w, n, 3u); ret; }\n     if (n < 0x10000000u)    { write_sized_vint(w, n, 4u); ret; }\n-    log \"vint to write too big\";\n+    log_err \"vint to write too big\";\n     fail;\n }\n "}, {"sha": "c3ebd0fc0782416acd4079ca279820f0a9cfa724", "filename": "src/lib/io.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6511d471bafd446026462ce0dba8ef5e2ebf462f/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=6511d471bafd446026462ce0dba8ef5e2ebf462f", "patch": "@@ -193,7 +193,7 @@ fn stdin() -> reader {\n fn file_reader(str path) -> reader {\n     auto f = os.libc.fopen(_str.buf(path), _str.buf(\"r\"));\n     if (f as uint == 0u) {\n-        log \"error opening \" + path;\n+        log_err \"error opening \" + path;\n         fail;\n     }\n     ret new_reader(FILE_buf_reader(f, true));\n@@ -229,7 +229,7 @@ state obj byte_buf_reader(byte_buf bbuf) {\n     }\n \n     impure fn unread_byte(int byte) {\n-        log \"TODO: unread_byte\";\n+        log_err \"TODO: unread_byte\";\n         fail;\n     }\n \n@@ -274,7 +274,7 @@ state obj FILE_writer(os.libc.FILE f, bool must_close) {\n         auto vbuf = _vec.buf[u8](v);\n         auto nout = os.libc.fwrite(vbuf, len, 1u, f);\n         if (nout < 1u) {\n-            log \"error dumping buffer\";\n+            log_err \"error dumping buffer\";\n         }\n     }\n \n@@ -300,21 +300,21 @@ state obj fd_buf_writer(int fd, bool must_close) {\n             vbuf = _vec.buf_off[u8](v, count);\n             auto nout = os.libc.write(fd, vbuf, len);\n             if (nout < 0) {\n-                log \"error dumping buffer\";\n-                log sys.rustrt.last_os_error();\n+                log_err \"error dumping buffer\";\n+                log_err sys.rustrt.last_os_error();\n                 fail;\n             }\n             count += nout as uint;\n         }\n     }\n \n     fn seek(int offset, seek_style whence) {\n-        log \"need 64-bit native calls for seek, sorry\";\n+        log_err \"need 64-bit native calls for seek, sorry\";\n         fail;\n     }\n \n     fn tell() -> uint {\n-        log \"need 64-bit native calls for tell, sorry\";\n+        log_err \"need 64-bit native calls for tell, sorry\";\n         fail;\n     }\n \n@@ -343,8 +343,8 @@ fn file_buf_writer(str path, vec[fileflag] flags) -> buf_writer {\n                            os.libc_constants.S_IWUSR());\n \n     if (fd < 0) {\n-        log \"error opening file for writing\";\n-        log sys.rustrt.last_os_error();\n+        log_err \"error opening file for writing\";\n+        log_err sys.rustrt.last_os_error();\n         fail;\n     }\n     ret fd_buf_writer(fd, true);\n@@ -429,7 +429,7 @@ fn file_writer(str path, vec[fileflag] flags) -> writer {\n fn buffered_file_buf_writer(str path) -> buf_writer {\n     auto f = os.libc.fopen(_str.buf(path), _str.buf(\"w\"));\n     if (f as uint == 0u) {\n-        log \"error opening \" + path;\n+        log_err \"error opening \" + path;\n         fail;\n     }\n     ret FILE_writer(f, true);"}]}