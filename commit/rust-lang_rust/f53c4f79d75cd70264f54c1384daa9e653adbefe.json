{"sha": "f53c4f79d75cd70264f54c1384daa9e653adbefe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1M2M0Zjc5ZDc1Y2Q3MDI2NGY1NGMxMzg0ZGFhOWU2NTNhZGJlZmU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-28T02:41:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-28T17:03:41Z"}, "message": "Write metadata for crate attributes. Issue #487", "tree": {"sha": "525fcf1f8600aefe410dc13023cd87a11f0eb5be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/525fcf1f8600aefe410dc13023cd87a11f0eb5be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f53c4f79d75cd70264f54c1384daa9e653adbefe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f53c4f79d75cd70264f54c1384daa9e653adbefe", "html_url": "https://github.com/rust-lang/rust/commit/f53c4f79d75cd70264f54c1384daa9e653adbefe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f53c4f79d75cd70264f54c1384daa9e653adbefe/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "894e2229ac68e01418c4988a727341d10c3af3b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/894e2229ac68e01418c4988a727341d10c3af3b4", "html_url": "https://github.com/rust-lang/rust/commit/894e2229ac68e01418c4988a727341d10c3af3b4"}], "stats": {"total": 96, "additions": 74, "deletions": 22}, "files": [{"sha": "500b3f31137e09e76c67a4007d64fe99d8fb8d27", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f53c4f79d75cd70264f54c1384daa9e653adbefe/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53c4f79d75cd70264f54c1384daa9e653adbefe/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=f53c4f79d75cd70264f54c1384daa9e653adbefe", "patch": "@@ -259,7 +259,7 @@ fn item_kind_to_str(u8 kind) -> str {\n fn get_meta_items(&ebml::doc md) -> vec[ast::meta_item] {\n     let vec[ast::meta_item] items = [];\n     for each (ebml::doc meta_item_doc in\n-              ebml::tagged_docs(md, tag_meta_item)) {\n+              ebml::tagged_docs(md, tag_meta_item_key_value)) {\n         auto kd = ebml::get_doc(meta_item_doc, tag_meta_item_key);\n         auto vd = ebml::get_doc(meta_item_doc, tag_meta_item_value);\n         auto k = str::unsafe_from_bytes(ebml::doc_data(kd));\n@@ -270,17 +270,46 @@ fn get_meta_items(&ebml::doc md) -> vec[ast::meta_item] {\n     ret items;\n }\n \n+fn get_attributes(&ebml::doc md) -> vec[ast::attribute] {\n+    let vec[ast::attribute] attrs = [];\n+    alt (ebml::maybe_get_doc(md, tag_attributes)) {\n+        case (option::some(?attrs_d)) {\n+            for each (ebml::doc attr_doc in\n+                      ebml::tagged_docs(attrs_d, tag_attribute)) {\n+                auto meta_items = get_meta_items(attr_doc);\n+                // Currently it's only possible to have a single meta item on\n+                // an attribute\n+                assert (vec::len(meta_items) == 1u);\n+                auto meta_item = meta_items.(0);\n+                attrs += [rec(node=rec(style=ast::attr_outer,\n+                                       value=meta_item),\n+                              span=rec(lo=0u, hi=0u))];\n+            }\n+        }\n+        case (option::none) { }\n+    }\n+    ret attrs;\n+}\n+\n fn list_meta_items(&ebml::doc meta_items, io::writer out) {\n     for (ast::meta_item mi in get_meta_items(meta_items)) {\n         out.write_str(#fmt(\"%s\\n\", pprust::meta_item_to_str(mi)));\n     }\n }\n \n fn list_crate_attributes(&ebml::doc md, io::writer out) {\n-    out.write_str(\"=Crate=\\n\");\n+    out.write_str(\"=Crate=\");\n+\n+    // FIXME: This is transitional until attributes are snapshotted\n+    out.write_str(\"old-style:\\n\");\n     auto meta_items = ebml::get_doc(md, tag_meta_export);\n     list_meta_items(meta_items, out);\n-    out.write_str(\"\\n\");\n+\n+    for (ast::attribute attr in get_attributes(md)) {\n+        out.write_str(#fmt(\"%s\", pprust::attribute_to_str(attr)));\n+    }\n+\n+    out.write_str(\"\\n\\n\");\n }\n \n fn list_crate_items(vec[u8] bytes, &ebml::doc md, io::writer out) {\n@@ -316,7 +345,7 @@ fn get_exported_metadata(&session::session sess, &str path, &vec[u8] data) ->\n         ebml::get_doc(ebml::new_doc(data), tag_meta_export);\n     auto mm = common::new_str_hash[str]();\n     for each (ebml::doc m in\n-             ebml::tagged_docs(meta_items, tag_meta_item)) {\n+             ebml::tagged_docs(meta_items, tag_meta_item_key_value)) {\n         auto kd = ebml::get_doc(m, tag_meta_item_key);\n         auto vd = ebml::get_doc(m, tag_meta_item_value);\n         auto k = str::unsafe_from_bytes(ebml::doc_data(kd));"}, {"sha": "da3b5bcb1b2c7a0fc509695f1e4d303aac51d6c6", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f53c4f79d75cd70264f54c1384daa9e653adbefe/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53c4f79d75cd70264f54c1384daa9e653adbefe/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=f53c4f79d75cd70264f54c1384daa9e653adbefe", "patch": "@@ -416,25 +416,36 @@ fn write_int(&io::writer writer, &int n) {\n     writer.write_be_uint(n as uint, 4u);\n }\n \n-fn encode_meta_items(&ebml::writer ebml_w, &crate crate) {\n-    fn encode_meta_item(&ebml::writer ebml_w, &meta_item mi) {\n-        // FIXME (#487): Support all forms of meta item\n-        ebml::start_tag(ebml_w, tag_meta_item);\n-        alt (mi.node) {\n-            case (meta_key_value(?key, ?value)) {\n-                ebml::start_tag(ebml_w, tag_meta_item_key);\n-                ebml_w.writer.write(str::bytes(key));\n-                ebml::end_tag(ebml_w);\n-                ebml::start_tag(ebml_w, tag_meta_item_value);\n-                ebml_w.writer.write(str::bytes(value));\n-                ebml::end_tag(ebml_w);\n-            }\n-            case (_) {\n-                log_err \"unimplemented meta_item type\";\n-            }\n+fn encode_meta_item(&ebml::writer ebml_w, &meta_item mi) {\n+    // FIXME (#487): Support all forms of meta item\n+    ebml::start_tag(ebml_w, tag_meta_item_key_value);\n+    alt (mi.node) {\n+        case (meta_key_value(?key, ?value)) {\n+            ebml::start_tag(ebml_w, tag_meta_item_key);\n+            ebml_w.writer.write(str::bytes(key));\n+            ebml::end_tag(ebml_w);\n+            ebml::start_tag(ebml_w, tag_meta_item_value);\n+            ebml_w.writer.write(str::bytes(value));\n+            ebml::end_tag(ebml_w);\n+        }\n+        case (_) {\n+            log_err \"unimplemented meta_item type\";\n         }\n+    }\n+    ebml::end_tag(ebml_w);\n+}\n+\n+fn encode_attributes(&ebml::writer ebml_w, &vec[attribute] attrs) {\n+    ebml::start_tag(ebml_w, tag_attributes);\n+    for (attribute attr in attrs) {\n+        ebml::start_tag(ebml_w, tag_attribute);\n+        encode_meta_item(ebml_w, attr.node.value);\n         ebml::end_tag(ebml_w);\n     }\n+    ebml::end_tag(ebml_w);\n+}\n+\n+fn encode_meta_items(&ebml::writer ebml_w, &crate crate) {\n     ebml::start_tag(ebml_w, tag_meta_export);\n     for each (@meta_item mi in crate_export_metas(crate)) {\n         encode_meta_item(ebml_w, *mi);\n@@ -451,9 +462,12 @@ fn encode_metadata(&@crate_ctxt cx, &@crate crate) -> str {\n     auto string_w = io::string_writer();\n     auto buf_w = string_w.get_writer().get_buf_writer();\n     auto ebml_w = ebml::create_writer(buf_w);\n-    // Encode the meta items\n \n+    // FIXME: This is the old way of encoding crate meta items\n+    // Remove after going through a snapshot cycle\n     encode_meta_items(ebml_w, *crate);\n+    // Encode crate attributes\n+    encode_attributes(ebml_w, crate.node.attrs);\n     // Encode and index the paths.\n \n     ebml::start_tag(ebml_w, tag_paths);"}, {"sha": "856023b0b909a4fee443555a95145952542e18a8", "filename": "src/comp/metadata/tags.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f53c4f79d75cd70264f54c1384daa9e653adbefe/src%2Fcomp%2Fmetadata%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53c4f79d75cd70264f54c1384daa9e653adbefe/src%2Fcomp%2Fmetadata%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftags.rs?ref=f53c4f79d75cd70264f54c1384daa9e653adbefe", "patch": "@@ -44,8 +44,13 @@ const uint tag_meta_export = 0x16u;\n \n const uint tag_meta_local = 0x17u;\n \n-const uint tag_meta_item = 0x18u;\n+const uint tag_meta_item_key_value = 0x18u;\n \n const uint tag_meta_item_key = 0x19u;\n \n const uint tag_meta_item_value = 0x20u;\n+\n+const uint tag_attributes = 0x21u;\n+\n+const uint tag_attribute = 0x22u;\n+"}, {"sha": "a092dc86ddde7e28cc9a1fd80f51f79a9e8429c2", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f53c4f79d75cd70264f54c1384daa9e653adbefe/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53c4f79d75cd70264f54c1384daa9e653adbefe/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=f53c4f79d75cd70264f54c1384daa9e653adbefe", "patch": "@@ -84,6 +84,10 @@ fn meta_item_to_str(&ast::meta_item mi) -> str {\n     ret to_str(@mi, print_meta_item);\n }\n \n+fn attribute_to_str(&ast::attribute attr) -> str {\n+    be to_str(attr, print_attribute);\n+}\n+\n fn cbox(&ps s, uint u) {\n     vec::push(s.boxes, pp::consistent);\n     pp::cbox(s.s, u);"}]}