{"sha": "27f78051ada9d1290a62ff34d9fe014ca940d4e9", "node_id": "C_kwDOAAsO6NoAKDI3Zjc4MDUxYWRhOWQxMjkwYTYyZmYzNGQ5ZmUwMTRjYTk0MGQ0ZTk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-14T08:35:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-14T08:35:33Z"}, "message": "Rollup merge of #98069 - notriddle:notriddle/square-brackets, r=jsha\n\nrustdoc:  remove link on slice brackets\n\nThis is #91778, take two.\n\nFixes #91173\n\nThe reason I'm reevaluating this change is #97668, which makes fully-generic slices link to the slice docs page. This fixes some downsides in the original PR, where `Box<[T]>`, for example, was not linked to the primitive.slice.html page. In this PR, the `[T]` inside is still a link.\n\nThe other major reason for wanting to reevaluate this is the changed color scheme. When this feature was first introduced in rustdoc, primitives were a different color from structs and enums. This way, eagle-eyed users could figure out that the square brackets were separate links from the structs inside. Now, all types have the same color, so a significant fraction of users won't even know the links are there unless they pay close attention to the status bar or use an accessibility tool that lists all links on the page.", "tree": {"sha": "d2ab8e56581b538f81fe5d72307a01aa67605a92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2ab8e56581b538f81fe5d72307a01aa67605a92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27f78051ada9d1290a62ff34d9fe014ca940d4e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiqEhVCRBK7hj4Ov3rIwAAtpUIAFC7nEKExJPNhSM77HoeelG7\nZ4atv1AD0VaV8gO4Rpqd/0s+FyY4JQO/XBwiCxSFoHyLZBYABW9aaySqYMgCSEC7\nLypUFfGHBRY+ApuApp9wsuHEuVKFpdBPtEhw62Rtbd+UyyIDA7u9lwggiZnjED6M\n7K4JtZ42JEw75x8cbIQzGS/slt7qxCljtbunD/i1M9aQ50OYsfYvoGaLElu+plnj\ntsLWD6Qj4H+zvddKlzTeUG3EwTU0qalJP+/ZTVd59dRGqCFF6WQxqlzqKWQ6hg4O\nj4907Y2BD4TLWjhfFuvH5MeOLtwMcpwyMdzrBNGnK9Y91r31LHiVpZ9la9Y4PFg=\n=cMX6\n-----END PGP SIGNATURE-----\n", "payload": "tree d2ab8e56581b538f81fe5d72307a01aa67605a92\nparent e5655418244cac9b3be0ef1b83aab1f8b00fe548\nparent 682889fb06591c4245422b73b005c5d8ae2d0cad\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1655195733 +0200\ncommitter GitHub <noreply@github.com> 1655195733 +0200\n\nRollup merge of #98069 - notriddle:notriddle/square-brackets, r=jsha\n\nrustdoc:  remove link on slice brackets\n\nThis is #91778, take two.\n\nFixes #91173\n\nThe reason I'm reevaluating this change is #97668, which makes fully-generic slices link to the slice docs page. This fixes some downsides in the original PR, where `Box<[T]>`, for example, was not linked to the primitive.slice.html page. In this PR, the `[T]` inside is still a link.\n\nThe other major reason for wanting to reevaluate this is the changed color scheme. When this feature was first introduced in rustdoc, primitives were a different color from structs and enums. This way, eagle-eyed users could figure out that the square brackets were separate links from the structs inside. Now, all types have the same color, so a significant fraction of users won't even know the links are there unless they pay close attention to the status bar or use an accessibility tool that lists all links on the page.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27f78051ada9d1290a62ff34d9fe014ca940d4e9", "html_url": "https://github.com/rust-lang/rust/commit/27f78051ada9d1290a62ff34d9fe014ca940d4e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27f78051ada9d1290a62ff34d9fe014ca940d4e9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5655418244cac9b3be0ef1b83aab1f8b00fe548", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5655418244cac9b3be0ef1b83aab1f8b00fe548", "html_url": "https://github.com/rust-lang/rust/commit/e5655418244cac9b3be0ef1b83aab1f8b00fe548"}, {"sha": "682889fb06591c4245422b73b005c5d8ae2d0cad", "url": "https://api.github.com/repos/rust-lang/rust/commits/682889fb06591c4245422b73b005c5d8ae2d0cad", "html_url": "https://github.com/rust-lang/rust/commit/682889fb06591c4245422b73b005c5d8ae2d0cad"}], "stats": {"total": 35, "additions": 5, "deletions": 30}, "files": [{"sha": "394db2d0cda6bfd783497e9fa529a0f26540b05d", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/27f78051ada9d1290a62ff34d9fe014ca940d4e9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f78051ada9d1290a62ff34d9fe014ca940d4e9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=27f78051ada9d1290a62ff34d9fe014ca940d4e9", "patch": "@@ -886,9 +886,9 @@ fn fmt_type<'cx>(\n                 primitive_link(f, PrimitiveType::Slice, &format!(\"[{name}]\"), cx)\n             }\n             _ => {\n-                primitive_link(f, PrimitiveType::Slice, \"[\", cx)?;\n+                write!(f, \"[\")?;\n                 fmt::Display::fmt(&t.print(cx), f)?;\n-                primitive_link(f, PrimitiveType::Slice, \"]\", cx)\n+                write!(f, \"]\")\n             }\n         },\n         clean::Array(ref t, ref n) => {\n@@ -926,31 +926,6 @@ fn fmt_type<'cx>(\n             let m = mutability.print_with_space();\n             let amp = if f.alternate() { \"&\".to_string() } else { \"&amp;\".to_string() };\n             match **ty {\n-                clean::Slice(ref bt) => {\n-                    // `BorrowedRef{ ... Slice(T) }` is `&[T]`\n-                    match **bt {\n-                        clean::Generic(name) => primitive_link(\n-                            f,\n-                            PrimitiveType::Slice,\n-                            &format!(\"{amp}{lt}{m}[{name}]\"),\n-                            cx,\n-                        ),\n-                        _ => {\n-                            primitive_link(\n-                                f,\n-                                PrimitiveType::Slice,\n-                                &format!(\"{}{}{}[\", amp, lt, m),\n-                                cx,\n-                            )?;\n-                            if f.alternate() {\n-                                write!(f, \"{:#}\", bt.print(cx))?;\n-                            } else {\n-                                write!(f, \"{}\", bt.print(cx))?;\n-                            }\n-                            primitive_link(f, PrimitiveType::Slice, \"]\", cx)\n-                        }\n-                    }\n-                }\n                 clean::DynTrait(ref bounds, ref trait_lt)\n                     if bounds.len() > 1 || trait_lt.is_some() =>\n                 {"}, {"sha": "7bec7582df7c9c8f96f481e642c052009cafc46b", "filename": "src/test/rustdoc/slice-links.link_box_u32.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27f78051ada9d1290a62ff34d9fe014ca940d4e9/src%2Ftest%2Frustdoc%2Fslice-links.link_box_u32.html", "raw_url": "https://github.com/rust-lang/rust/raw/27f78051ada9d1290a62ff34d9fe014ca940d4e9/src%2Ftest%2Frustdoc%2Fslice-links.link_box_u32.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fslice-links.link_box_u32.html?ref=27f78051ada9d1290a62ff34d9fe014ca940d4e9", "patch": "@@ -1 +1 @@\n-<code>pub fn gamma() -&gt; <a class=\"struct\" href=\"struct.MyBox.html\" title=\"struct foo::MyBox\">MyBox</a>&lt;<a class=\"primitive\" href=\"{{channel}}/core/primitive.slice.html\">[</a><a class=\"primitive\" href=\"{{channel}}/core/primitive.u32.html\">u32</a><a class=\"primitive\" href=\"{{channel}}/core/primitive.slice.html\">]</a>&gt;</code>\n\\ No newline at end of file\n+<code>pub fn gamma() -&gt; <a class=\"struct\" href=\"struct.MyBox.html\" title=\"struct foo::MyBox\">MyBox</a>&lt;[<a class=\"primitive\" href=\"{{channel}}/core/primitive.u32.html\">u32</a>]&gt;</code>\n\\ No newline at end of file"}, {"sha": "1d0f2bf75a233c4be2b7dcaf46a65296b4cde459", "filename": "src/test/rustdoc/slice-links.link_slice_generic.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27f78051ada9d1290a62ff34d9fe014ca940d4e9/src%2Ftest%2Frustdoc%2Fslice-links.link_slice_generic.html", "raw_url": "https://github.com/rust-lang/rust/raw/27f78051ada9d1290a62ff34d9fe014ca940d4e9/src%2Ftest%2Frustdoc%2Fslice-links.link_slice_generic.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fslice-links.link_slice_generic.html?ref=27f78051ada9d1290a62ff34d9fe014ca940d4e9", "patch": "@@ -1 +1 @@\n-<code>pub fn beta&lt;T&gt;() -&gt; <a class=\"primitive\" href=\"{{channel}}/core/primitive.slice.html\">&amp;'static [T]</a></code>\n\\ No newline at end of file\n+<code>pub fn beta&lt;T&gt;() -&gt; &amp;'static <a class=\"primitive\" href=\"{{channel}}/core/primitive.slice.html\">[T]</a></code>\n\\ No newline at end of file"}, {"sha": "c86d383042615388ebe4fa0fb22b8ab0ab53538d", "filename": "src/test/rustdoc/slice-links.link_slice_u32.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27f78051ada9d1290a62ff34d9fe014ca940d4e9/src%2Ftest%2Frustdoc%2Fslice-links.link_slice_u32.html", "raw_url": "https://github.com/rust-lang/rust/raw/27f78051ada9d1290a62ff34d9fe014ca940d4e9/src%2Ftest%2Frustdoc%2Fslice-links.link_slice_u32.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fslice-links.link_slice_u32.html?ref=27f78051ada9d1290a62ff34d9fe014ca940d4e9", "patch": "@@ -1 +1 @@\n-<code>pub fn alpha() -&gt; <a class=\"primitive\" href=\"{{channel}}/core/primitive.slice.html\">&amp;'static [</a><a class=\"primitive\" href=\"{{channel}}/core/primitive.u32.html\">u32</a><a class=\"primitive\" href=\"{{channel}}/core/primitive.slice.html\">]</a></code>\n\\ No newline at end of file\n+<code>pub fn alpha() -&gt; &amp;'static [<a class=\"primitive\" href=\"{{channel}}/core/primitive.u32.html\">u32</a>]</code>\n\\ No newline at end of file"}]}