{"sha": "3cf00c15770a8e140c5612d42b943f6919f7909b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZjAwYzE1NzcwYThlMTQwYzU2MTJkNDJiOTQzZjY5MTlmNzkwOWI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-06-23T18:32:37Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-06-23T18:54:10Z"}, "message": "Correct error message for argument mode mismatch\n\nIf you use a function expecting an alias argument in a context that\nexpects a function expecting a value argument, or vice versa, the\nprevious error message complained that the number of arguments was\nwrong. Fixed the error message to be accurate.", "tree": {"sha": "b1056ef67a3ed8598a6f35a805a46b129af82805", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1056ef67a3ed8598a6f35a805a46b129af82805"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cf00c15770a8e140c5612d42b943f6919f7909b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf00c15770a8e140c5612d42b943f6919f7909b", "html_url": "https://github.com/rust-lang/rust/commit/3cf00c15770a8e140c5612d42b943f6919f7909b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cf00c15770a8e140c5612d42b943f6919f7909b/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bd65de28957c05300987fad6576ce6d9223fbbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd65de28957c05300987fad6576ce6d9223fbbf", "html_url": "https://github.com/rust-lang/rust/commit/5bd65de28957c05300987fad6576ce6d9223fbbf"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "fe2cba1180c0cee833e01f7e2044222833e6edf4", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3cf00c15770a8e140c5612d42b943f6919f7909b/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf00c15770a8e140c5612d42b943f6919f7909b/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=3cf00c15770a8e140c5612d42b943f6919f7909b", "patch": "@@ -22,6 +22,7 @@ import middle::metadata;\n import util::common::*;\n import util::data::interner;\n import pretty::ppaux::ty_to_str;\n+import pretty::ppaux::mode_str_1;\n \n \n export node_id_to_monotype;\n@@ -292,6 +293,7 @@ tag type_err {\n     terr_meth_count;\n     terr_obj_meths(ast::ident, ast::ident);\n     terr_arg_count;\n+    terr_mode_mismatch(mode, mode);\n }\n \n type ty_param_count_and_ty = tup(uint, t);\n@@ -1984,9 +1986,8 @@ mod unify {\n \n             auto result_mode;\n             if (expected_input.mode != actual_input.mode) {\n-                // FIXME this is the wrong error\n-\n-                ret fn_common_res_err(ures_err(terr_arg_count));\n+                ret fn_common_res_err(ures_err(terr_mode_mismatch(\n+                                    expected_input.mode, actual_input.mode)));\n             } else { result_mode = expected_input.mode; }\n             auto result = unify_step(cx, expected_input.ty, actual_input.ty);\n             alt (result) {\n@@ -2584,6 +2585,11 @@ fn type_err_to_str(&ty::type_err err) -> str {\n             ret \"expected an obj with method '\" + e_meth +\n                     \"' but found one with method '\" + a_meth + \"'\";\n         }\n+        case (terr_mode_mismatch(?e_mode, ?a_mode)) {\n+            ret \"expected argument mode \" + mode_str_1(e_mode) + \" but found \"\n+                + mode_str_1(a_mode);\n+            fail;\n+        }\n     }\n }\n "}, {"sha": "97c932cdd5fff4950d448c5f2c277537950ace1d", "filename": "src/comp/pretty/ppaux.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3cf00c15770a8e140c5612d42b943f6919f7909b/src%2Fcomp%2Fpretty%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf00c15770a8e140c5612d42b943f6919f7909b/src%2Fcomp%2Fpretty%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fppaux.rs?ref=3cf00c15770a8e140c5612d42b943f6919f7909b", "patch": "@@ -5,6 +5,7 @@ import std::str;\n import std::option;\n import std::option::none;\n import std::option::some;\n+import middle::ty;\n import middle::ty::*;\n import front::lexer;\n import front::ast;\n@@ -18,15 +19,25 @@ import util::common::istr;\n import util::common::uistr;\n import util::common::ty_mach_to_str;\n \n+fn mode_str(&ty::mode m) -> str {\n+    alt (m) {\n+        case (mo_val) { \"\" }\n+        case (mo_alias(false)) { \"&\" }\n+        case (mo_alias(true)) { \"&mutable \" }\n+    }\n+}\n+\n+fn mode_str_1(&ty::mode m) -> str {\n+    alt (m) {\n+        case (mo_val) { \"val\" }\n+        case (_)      { mode_str(m) }\n+    }\n+}\n+\n fn ty_to_str(&ctxt cx, &t typ) -> str {\n     fn fn_input_to_str(&ctxt cx, &rec(middle::ty::mode mode, t ty) input) ->\n        str {\n-        auto s =\n-            alt (input.mode) {\n-                case (mo_val) { \"\" }\n-                case (mo_alias(false)) { \"&\" }\n-                case (mo_alias(true)) { \"&mutable \" }\n-            };\n+        auto s = mode_str(input.mode);\n         ret s + ty_to_str(cx, input.ty);\n     }\n     fn fn_to_str(&ctxt cx, ast::proto proto, option::t[ast::ident] ident,"}, {"sha": "b280351db2be97af5af73f23ec547f98250f0c35", "filename": "src/test/compile-fail/alias-mismatch.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3cf00c15770a8e140c5612d42b943f6919f7909b/src%2Ftest%2Fcompile-fail%2Falias-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf00c15770a8e140c5612d42b943f6919f7909b/src%2Ftest%2Fcompile-fail%2Falias-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falias-mismatch.rs?ref=3cf00c15770a8e140c5612d42b943f6919f7909b", "patch": "@@ -0,0 +1,9 @@\n+// error-pattern:expected argument mode\n+use std;\n+import std::vec::map;\n+\n+fn main() {\n+  fn f(uint i) -> bool { true }\n+\n+  auto a = map(f, [5u]);\n+}\n\\ No newline at end of file"}]}