{"sha": "a87a0d089e793903844ef40851deae48c039f8bb", "node_id": "C_kwDOAAsO6NoAKGE4N2EwZDA4OWU3OTM5MDM4NDRlZjQwODUxZGVhZTQ4YzAzOWY4YmI", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2021-10-19T22:23:19Z"}, "committer": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2022-04-08T16:00:16Z"}, "message": "Add ThinBox type for 1 stack pointer sized heap allocated trait objects\n\nRelevant commit messages from squashed history in order:\n\nAdd initial version of ThinBox\n\nupdate test to actually capture failure\n\nswap to middle ptr impl based on matthieu-m's design\n\nFix stack overflow in debug impl\n\nThe previous version would take a `&ThinBox<T>` and deref it once, which\nresulted in a no-op and the same type, which it would then print causing\nan endless recursion. I've switched to calling `deref` by name to let\nmethod resolution handle deref the correct number of times.\n\nI've also updated the Drop impl for good measure since it seemed like it\ncould be falling prey to the same bug, and I'll be adding some tests to\nverify that the drop is happening correctly.\n\nadd test to verify drop is behaving\n\nadd doc examples and remove unnecessary Pointee bounds\n\nThinBox: use NonNull\n\nThinBox: tests for size\n\nApply suggestions from code review\n\nCo-authored-by: Alphyr <47725341+a1phyr@users.noreply.github.com>\n\nuse handle_alloc_error and fix drop signature\n\nupdate niche and size tests\n\nadd cfg for allocating APIs\n\ncheck null before calculating offset\n\nadd test for zst and trial usage\n\nprevent optimizer induced ub in drop and cleanup metadata gathering\n\naccount for arbitrary size and alignment metadata\n\nThank you nika and thomcc!\n\nUpdate library/alloc/src/boxed/thin.rs\n\nCo-authored-by: Josh Triplett <josh@joshtriplett.org>\n\nUpdate library/alloc/src/boxed/thin.rs\n\nCo-authored-by: Josh Triplett <josh@joshtriplett.org>", "tree": {"sha": "0c9689d8503b00752ea696976064203150be8171", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c9689d8503b00752ea696976064203150be8171"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a87a0d089e793903844ef40851deae48c039f8bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a87a0d089e793903844ef40851deae48c039f8bb", "html_url": "https://github.com/rust-lang/rust/commit/a87a0d089e793903844ef40851deae48c039f8bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a87a0d089e793903844ef40851deae48c039f8bb/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36", "html_url": "https://github.com/rust-lang/rust/commit/2d5a21f63c98f8a1d5f3c3af93bcb0a8af19af36"}], "stats": {"total": 390, "additions": 388, "deletions": 2}, "files": [{"sha": "e6faf1df3a8105fc219a37604165c654476e2321", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a87a0d089e793903844ef40851deae48c039f8bb/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87a0d089e793903844ef40851deae48c039f8bb/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=a87a0d089e793903844ef40851deae48c039f8bb", "patch": "@@ -163,6 +163,11 @@ use crate::str::from_boxed_utf8_unchecked;\n #[cfg(not(no_global_oom_handling))]\n use crate::vec::Vec;\n \n+#[unstable(feature = \"thin_box\", issue = \"92791\")]\n+pub use thin::ThinBox;\n+\n+mod thin;\n+\n /// A pointer type for heap allocation.\n ///\n /// See the [module-level documentation](../../std/boxed/index.html) for more."}, {"sha": "390030fa2b21cbd82db95c7d721a539df5818fd4", "filename": "library/alloc/src/boxed/thin.rs", "status": "added", "additions": 215, "deletions": 0, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/a87a0d089e793903844ef40851deae48c039f8bb/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87a0d089e793903844ef40851deae48c039f8bb/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs?ref=a87a0d089e793903844ef40851deae48c039f8bb", "patch": "@@ -0,0 +1,215 @@\n+// Based on\n+// https://github.com/matthieu-m/rfc2580/blob/b58d1d3cba0d4b5e859d3617ea2d0943aaa31329/examples/thin.rs\n+// by matthieu-m\n+use crate::alloc::{self, Layout, LayoutError};\n+use core::fmt::{self, Debug, Display, Formatter};\n+use core::marker::{PhantomData, Unsize};\n+use core::mem;\n+use core::ops::{Deref, DerefMut};\n+use core::ptr::Pointee;\n+use core::ptr::{self, NonNull};\n+\n+/// ThinBox.\n+///\n+/// A thin pointer for heap allocation, regardless of T.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(thin_box)]\n+/// use std::boxed::ThinBox;\n+///\n+/// let five = ThinBox::new(5);\n+/// let thin_slice = ThinBox::<[i32]>::new_unsize([1, 2, 3, 4]);\n+///\n+/// use std::mem::{size_of, size_of_val};\n+/// let size_of_ptr = size_of::<*const ()>();\n+/// assert_eq!(size_of_ptr, size_of_val(&five));\n+/// assert_eq!(size_of_ptr, size_of_val(&thin_slice));\n+/// ```\n+#[unstable(feature = \"thin_box\", issue = \"92791\")]\n+pub struct ThinBox<T: ?Sized> {\n+    ptr: WithHeader<<T as Pointee>::Metadata>,\n+    _marker: PhantomData<T>,\n+}\n+\n+#[unstable(feature = \"thin_box\", issue = \"92791\")]\n+impl<T> ThinBox<T> {\n+    /// Moves a type to the heap with its `Metadata` stored in the heap allocation instead of on\n+    /// the stack.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(thin_box)]\n+    /// use std::boxed::ThinBox;\n+    ///\n+    /// let five = ThinBox::new(5);\n+    /// ```\n+    #[cfg(not(no_global_oom_handling))]\n+    pub fn new(value: T) -> Self {\n+        let meta = ptr::metadata(&value);\n+        let ptr = WithHeader::new(meta, value);\n+        ThinBox { ptr, _marker: PhantomData }\n+    }\n+}\n+\n+#[unstable(feature = \"thin_box\", issue = \"92791\")]\n+impl<Dyn: ?Sized> ThinBox<Dyn> {\n+    /// Moves a type to the heap with its `Metadata` stored in the heap allocation instead of on\n+    /// the stack.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(thin_box)]\n+    /// use std::boxed::ThinBox;\n+    ///\n+    /// let thin_slice = ThinBox::<[i32]>::new_unsize([1, 2, 3, 4]);\n+    /// ```\n+    #[cfg(not(no_global_oom_handling))]\n+    pub fn new_unsize<T>(value: T) -> Self\n+    where\n+        T: Unsize<Dyn>,\n+    {\n+        let meta = ptr::metadata(&value as &Dyn);\n+        let ptr = WithHeader::new(meta, value);\n+        ThinBox { ptr, _marker: PhantomData }\n+    }\n+}\n+\n+#[unstable(feature = \"thin_box\", issue = \"92791\")]\n+impl<T: ?Sized + Debug> Debug for ThinBox<T> {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        Debug::fmt(self.deref(), f)\n+    }\n+}\n+\n+#[unstable(feature = \"thin_box\", issue = \"92791\")]\n+impl<T: ?Sized + Display> Display for ThinBox<T> {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        Display::fmt(self.deref(), f)\n+    }\n+}\n+\n+#[unstable(feature = \"thin_box\", issue = \"92791\")]\n+impl<T: ?Sized> Deref for ThinBox<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        let value = self.data();\n+        let metadata = self.meta();\n+        let pointer = ptr::from_raw_parts(value as *const (), metadata);\n+        unsafe { &*pointer }\n+    }\n+}\n+\n+#[unstable(feature = \"thin_box\", issue = \"92791\")]\n+impl<T: ?Sized> DerefMut for ThinBox<T> {\n+    fn deref_mut(&mut self) -> &mut T {\n+        let value = self.data();\n+        let metadata = self.meta();\n+        let pointer = ptr::from_raw_parts_mut::<T>(value as *mut (), metadata);\n+        unsafe { &mut *pointer }\n+    }\n+}\n+\n+#[unstable(feature = \"thin_box\", issue = \"92791\")]\n+impl<T: ?Sized> Drop for ThinBox<T> {\n+    fn drop(&mut self) {\n+        unsafe {\n+            let value = self.deref_mut();\n+            let value = value as *mut T;\n+            self.ptr.drop::<T>(value);\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"thin_box\", issue = \"92791\")]\n+impl<T: ?Sized> ThinBox<T> {\n+    fn meta(&self) -> <T as Pointee>::Metadata {\n+        //  Safety:\n+        //  -   NonNull and valid.\n+        unsafe { *self.ptr.header() }\n+    }\n+\n+    fn data(&self) -> *mut u8 {\n+        self.ptr.value()\n+    }\n+}\n+\n+/// A pointer to type-erased data, guaranteed to have a header `H` before the pointed-to location.\n+struct WithHeader<H>(NonNull<u8>, PhantomData<H>);\n+\n+impl<H> WithHeader<H> {\n+    #[cfg(not(no_global_oom_handling))]\n+    fn new<T>(header: H, value: T) -> WithHeader<H> {\n+        let value_layout = Layout::new::<T>();\n+        let Ok((layout, value_offset)) = Self::alloc_layout(value_layout) else {\n+            // We pass an empty layout here because we do not know which layout caused the\n+            // arithmetic overflow in `Layout::extend` and `handle_alloc_error` takes `Layout` as\n+            // its argument rather than `Result<Layout, LayoutError>`, also this function has been\n+            // stable since 1.28 ._.\n+            //\n+            // On the other hand, look at this gorgeous turbofish!\n+            alloc::handle_alloc_error(Layout::new::<()>());\n+        };\n+\n+        unsafe {\n+            let ptr = alloc::alloc(layout);\n+\n+            if ptr.is_null() {\n+                alloc::handle_alloc_error(layout);\n+            }\n+            //  Safety:\n+            //  -   The size is at least `aligned_header_size`.\n+            let ptr = ptr.add(value_offset) as *mut _;\n+\n+            let ptr = NonNull::new_unchecked(ptr);\n+\n+            let result = WithHeader(ptr, PhantomData);\n+            ptr::write(result.header(), header);\n+            ptr::write(result.value().cast(), value);\n+\n+            result\n+        }\n+    }\n+\n+    //  Safety:\n+    //  -   Assumes that `value` can be dereferenced.\n+    unsafe fn drop<T: ?Sized>(&self, value: *mut T) {\n+        unsafe {\n+            // SAFETY: Layout must have been computable if we're in drop\n+            let (layout, value_offset) =\n+                Self::alloc_layout(Layout::for_value_raw(value)).unwrap_unchecked();\n+\n+            ptr::drop_in_place::<T>(value);\n+            // We only drop the value because the Pointee trait requires that the metadata is copy\n+            // aka trivially droppable\n+            alloc::dealloc(self.0.as_ptr().sub(value_offset), layout);\n+        }\n+    }\n+\n+    fn header(&self) -> *mut H {\n+        //  Safety:\n+        //  - At least `size_of::<H>()` bytes are allocated ahead of the pointer.\n+        //  - We know that H will be aligned because the middle pointer is aligned to the greater\n+        //    of the alignment of the header and the data and the header size includes the padding\n+        //    needed to align the header. Subtracting the header size from the aligned data pointer\n+        //    will always result in an aligned header pointer, it just may not point to the\n+        //    beginning of the allocation.\n+        unsafe { self.0.as_ptr().sub(Self::header_size()) as *mut H }\n+    }\n+\n+    fn value(&self) -> *mut u8 {\n+        self.0.as_ptr()\n+    }\n+\n+    const fn header_size() -> usize {\n+        mem::size_of::<H>()\n+    }\n+\n+    fn alloc_layout(value_layout: Layout) -> Result<(Layout, usize), LayoutError> {\n+        Layout::new::<H>().extend(value_layout)\n+    }\n+}"}, {"sha": "c54001dceea49b8a29fb2fab63337e4d684cda36", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a87a0d089e793903844ef40851deae48c039f8bb/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87a0d089e793903844ef40851deae48c039f8bb/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=a87a0d089e793903844ef40851deae48c039f8bb", "patch": "@@ -120,6 +120,7 @@\n #![feature(nonnull_slice_from_raw_parts)]\n #![feature(pattern)]\n #![feature(ptr_internals)]\n+#![feature(ptr_metadata)]\n #![feature(receiver_trait)]\n #![feature(set_ptr_value)]\n #![feature(slice_group_by)]\n@@ -152,6 +153,7 @@\n #![feature(fundamental)]\n #![cfg_attr(not(test), feature(generator_trait))]\n #![feature(lang_items)]\n+#![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(negative_impls)]\n #![feature(never_type)]"}, {"sha": "16d3b36859570e27c3505d45dd51163837fa4ca9", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a87a0d089e793903844ef40851deae48c039f8bb/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87a0d089e793903844ef40851deae48c039f8bb/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=a87a0d089e793903844ef40851deae48c039f8bb", "patch": "@@ -39,6 +39,7 @@\n #![feature(nonnull_slice_from_raw_parts)]\n #![feature(panic_update_hook)]\n #![feature(slice_flatten)]\n+#![feature(thin_box)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};\n@@ -57,6 +58,7 @@ mod rc;\n mod slice;\n mod str;\n mod string;\n+mod thin_box;\n mod vec;\n mod vec_deque;\n "}, {"sha": "0fe6aaa4d004855f52c2b07a6ac439b07eeded3c", "filename": "library/alloc/tests/thin_box.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a87a0d089e793903844ef40851deae48c039f8bb/library%2Falloc%2Ftests%2Fthin_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87a0d089e793903844ef40851deae48c039f8bb/library%2Falloc%2Ftests%2Fthin_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fthin_box.rs?ref=a87a0d089e793903844ef40851deae48c039f8bb", "patch": "@@ -0,0 +1,26 @@\n+use alloc::boxed::ThinBox;\n+use core::mem::size_of;\n+\n+#[test]\n+fn want_niche_optimization() {\n+    fn uses_niche<T: ?Sized>() -> bool {\n+        size_of::<*const ()>() == size_of::<Option<ThinBox<T>>>()\n+    }\n+\n+    trait Tr {}\n+    assert!(uses_niche::<dyn Tr>());\n+    assert!(uses_niche::<[i32]>());\n+    assert!(uses_niche::<i32>());\n+}\n+\n+#[test]\n+fn want_thin() {\n+    fn is_thin<T: ?Sized>() -> bool {\n+        size_of::<*const ()>() == size_of::<ThinBox<T>>()\n+    }\n+\n+    trait Tr {}\n+    assert!(is_thin::<dyn Tr>());\n+    assert!(is_thin::<[i32]>());\n+    assert!(is_thin::<i32>());\n+}"}, {"sha": "4fb94908c80fd4ed3c2fe5088e9f23aeabcd0f19", "filename": "library/std/src/error.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a87a0d089e793903844ef40851deae48c039f8bb/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87a0d089e793903844ef40851deae48c039f8bb/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=a87a0d089e793903844ef40851deae48c039f8bb", "patch": "@@ -516,6 +516,14 @@ impl<T: Error> Error for Box<T> {\n     }\n }\n \n+#[unstable(feature = \"thin_box\", issue = \"92791\")]\n+impl<T: ?Sized + crate::error::Error> crate::error::Error for crate::boxed::ThinBox<T> {\n+    fn source(&self) -> Option<&(dyn crate::error::Error + 'static)> {\n+        use core::ops::Deref;\n+        self.deref().source()\n+    }\n+}\n+\n #[stable(feature = \"error_by_ref\", since = \"1.51.0\")]\n impl<'a, T: Error + ?Sized> Error for &'a T {\n     #[allow(deprecated, deprecated_in_future)]"}, {"sha": "60e7c2af8e4a5a36507c7a3f5a3f9ce7338bde09", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a87a0d089e793903844ef40851deae48c039f8bb/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87a0d089e793903844ef40851deae48c039f8bb/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=a87a0d089e793903844ef40851deae48c039f8bb", "patch": "@@ -290,6 +290,7 @@\n #![feature(get_mut_unchecked)]\n #![feature(map_try_insert)]\n #![feature(new_uninit)]\n+#![feature(thin_box)]\n #![feature(toowned_clone_into)]\n #![feature(try_reserve_kind)]\n #![feature(vec_into_raw_parts)]"}, {"sha": "3c61d0090e42bb8698644fdafe4eec924535f2b8", "filename": "src/test/ui/box/thin_align.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a87a0d089e793903844ef40851deae48c039f8bb/src%2Ftest%2Fui%2Fbox%2Fthin_align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87a0d089e793903844ef40851deae48c039f8bb/src%2Ftest%2Fui%2Fbox%2Fthin_align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox%2Fthin_align.rs?ref=a87a0d089e793903844ef40851deae48c039f8bb", "patch": "@@ -0,0 +1,26 @@\n+#![feature(thin_box)]\n+// run-pass\n+use std::boxed::ThinBox;\n+use std::error::Error;\n+use std::ops::Deref;\n+use std::fmt;\n+\n+fn main() {\n+    let expected = \"Foo error!\";\n+    let a: ThinBox<dyn Error> = ThinBox::new_unsize(Foo(expected));\n+    let a = a.deref();\n+    let msg = a.to_string();\n+    assert_eq!(expected, msg);\n+}\n+\n+#[derive(Debug)]\n+#[repr(align(1024))]\n+struct Foo(&'static str);\n+\n+impl fmt::Display for Foo {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.0)\n+    }\n+}\n+\n+impl Error for Foo {}"}, {"sha": "965613c114e3a06b6cff068a92a3bd8f1103e2f2", "filename": "src/test/ui/box/thin_drop.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a87a0d089e793903844ef40851deae48c039f8bb/src%2Ftest%2Fui%2Fbox%2Fthin_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87a0d089e793903844ef40851deae48c039f8bb/src%2Ftest%2Fui%2Fbox%2Fthin_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox%2Fthin_drop.rs?ref=a87a0d089e793903844ef40851deae48c039f8bb", "patch": "@@ -0,0 +1,37 @@\n+#![feature(thin_box)]\n+// run-pass\n+use std::boxed::ThinBox;\n+use std::error::Error;\n+use std::ops::Deref;\n+use std::fmt;\n+\n+fn main() {\n+    let expected = \"Foo error!\";\n+    let mut dropped = false;\n+    {\n+        let foo = Foo(expected, &mut dropped);\n+        let a: ThinBox<dyn Error> = ThinBox::new_unsize(foo);\n+        let a = a.deref();\n+        let msg = a.to_string();\n+        assert_eq!(expected, msg);\n+    }\n+    assert!(dropped);\n+}\n+\n+#[derive(Debug)]\n+#[repr(align(1024))]\n+struct Foo<'a>(&'static str, &'a mut bool);\n+\n+impl Drop for Foo<'_> {\n+    fn drop(&mut self) {\n+        *self.1 = true;\n+    }\n+}\n+\n+impl fmt::Display for Foo<'_> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.0)\n+    }\n+}\n+\n+impl Error for Foo<'_> {}"}, {"sha": "53f46478be403d319884a29dcd0be2dd8129fbae", "filename": "src/test/ui/box/thin_new.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a87a0d089e793903844ef40851deae48c039f8bb/src%2Ftest%2Fui%2Fbox%2Fthin_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87a0d089e793903844ef40851deae48c039f8bb/src%2Ftest%2Fui%2Fbox%2Fthin_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox%2Fthin_new.rs?ref=a87a0d089e793903844ef40851deae48c039f8bb", "patch": "@@ -0,0 +1,30 @@\n+#![feature(thin_box)]\n+// run-pass\n+use std::boxed::ThinBox;\n+use std::error::Error;\n+use std::{fmt, mem};\n+\n+fn main() {\n+    let thin_error: ThinBox<dyn Error> = ThinBox::new_unsize(Foo);\n+    assert_eq!(mem::size_of::<*const i32>(), mem::size_of_val(&thin_error));\n+    println!(\"{:?}\", thin_error);\n+\n+    let thin = ThinBox::new(42i32);\n+    assert_eq!(mem::size_of::<*const i32>(), mem::size_of_val(&thin));\n+    println!(\"{:?}\", thin);\n+\n+    let thin_slice = ThinBox::<[i32]>::new_unsize([1, 2, 3, 4]);\n+    assert_eq!(mem::size_of::<*const i32>(), mem::size_of_val(&thin_slice));\n+    println!(\"{:?}\", thin_slice);\n+}\n+\n+#[derive(Debug)]\n+struct Foo;\n+\n+impl fmt::Display for Foo {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"boooo!\")\n+    }\n+}\n+\n+impl Error for Foo {}"}, {"sha": "77c400d17bbe5768471e507aec46337a2018d3d7", "filename": "src/test/ui/box/thin_zst.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a87a0d089e793903844ef40851deae48c039f8bb/src%2Ftest%2Fui%2Fbox%2Fthin_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87a0d089e793903844ef40851deae48c039f8bb/src%2Ftest%2Fui%2Fbox%2Fthin_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox%2Fthin_zst.rs?ref=a87a0d089e793903844ef40851deae48c039f8bb", "patch": "@@ -0,0 +1,34 @@\n+#![feature(thin_box)]\n+// run-pass\n+use std::boxed::ThinBox;\n+use std::error::Error;\n+use std::{fmt, mem};\n+use std::ops::DerefMut;\n+\n+const EXPECTED: &str = \"boooo!\";\n+\n+fn main() {\n+    let thin_error: ThinBox<dyn Error> = ThinBox::new_unsize(Foo);\n+    assert_eq!(mem::size_of::<*const i32>(), mem::size_of_val(&thin_error));\n+    let msg = thin_error.to_string();\n+    assert_eq!(EXPECTED, msg);\n+\n+    let mut thin_concrete_error: ThinBox<Foo> = ThinBox::new(Foo);\n+    assert_eq!(mem::size_of::<*const i32>(), mem::size_of_val(&thin_concrete_error));\n+    let msg = thin_concrete_error.to_string();\n+    assert_eq!(EXPECTED, msg);\n+    let inner = thin_concrete_error.deref_mut();\n+    let msg = inner.to_string();\n+    assert_eq!(EXPECTED, msg);\n+}\n+\n+#[derive(Debug)]\n+struct Foo;\n+\n+impl fmt::Display for Foo {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", EXPECTED)\n+    }\n+}\n+\n+impl Error for Foo {}"}, {"sha": "1b1ce67cb0c1fd20e716ef156775cfea4f3b95c7", "filename": "src/test/ui/coercion/coerce-issue-49593-box-never.nofallback.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a87a0d089e793903844ef40851deae48c039f8bb/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a87a0d089e793903844ef40851deae48c039f8bb/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr?ref=a87a0d089e793903844ef40851deae48c039f8bb", "patch": "@@ -13,7 +13,7 @@ LL |     /* *mut $0 is coerced to Box<dyn Error> here */ Box::<_ /* ! */>::new(x\n              BorrowError\n              BorrowMutError\n              Box<T>\n-           and 42 others\n+           and 43 others\n    = note: required for the cast to the object type `dyn std::error::Error`\n \n error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n@@ -31,7 +31,7 @@ LL |     /* *mut $0 is coerced to *mut Error here */ raw_ptr_box::<_ /* ! */>(x)\n              BorrowError\n              BorrowMutError\n              Box<T>\n-           and 42 others\n+           and 43 others\n    = note: required for the cast to the object type `(dyn std::error::Error + 'static)`\n \n error: aborting due to 2 previous errors"}]}