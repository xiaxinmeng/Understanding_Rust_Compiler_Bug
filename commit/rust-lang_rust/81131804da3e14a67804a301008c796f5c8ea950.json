{"sha": "81131804da3e14a67804a301008c796f5c8ea950", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMTMxODA0ZGEzZTE0YTY3ODA0YTMwMTAwOGM3OTZmNWM4ZWE5NTA=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-10-11T12:40:14Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-10-17T12:09:38Z"}, "message": "Visit tys in `program_clauses_for_env`", "tree": {"sha": "05f93214031dc87491016acc1bd0631d08529bf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05f93214031dc87491016acc1bd0631d08529bf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81131804da3e14a67804a301008c796f5c8ea950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81131804da3e14a67804a301008c796f5c8ea950", "html_url": "https://github.com/rust-lang/rust/commit/81131804da3e14a67804a301008c796f5c8ea950", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81131804da3e14a67804a301008c796f5c8ea950/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62df97329384c308de91feb2126953a0da049d8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/62df97329384c308de91feb2126953a0da049d8c", "html_url": "https://github.com/rust-lang/rust/commit/62df97329384c308de91feb2126953a0da049d8c"}], "stats": {"total": 95, "additions": 66, "deletions": 29}, "files": [{"sha": "338cad8154ff0f423ba63bcf629e9b60e6a9b5c3", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 66, "deletions": 29, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/81131804da3e14a67804a301008c796f5c8ea950/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81131804da3e14a67804a301008c796f5c8ea950/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=81131804da3e14a67804a301008c796f5c8ea950", "patch": "@@ -13,11 +13,10 @@ use rustc::traits::{\n     Clauses,\n     DomainGoal,\n     FromEnv,\n-    Goal,\n     ProgramClause,\n     Environment,\n };\n-use rustc::ty::{TyCtxt, Ty};\n+use rustc::ty::{self, TyCtxt, Ty};\n use rustc_data_structures::fx::FxHashSet;\n \n struct ClauseVisitor<'set, 'a, 'tcx: 'a> {\n@@ -33,8 +32,63 @@ impl ClauseVisitor<'set, 'a, 'tcx> {\n         }\n     }\n \n-    fn visit_ty(&mut self, _ty: Ty<'tcx>) {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) {\n+        match ty.sty {\n+            ty::Projection(data) => {\n+                self.round.extend(\n+                    self.tcx.program_clauses_for(data.item_def_id)\n+                        .iter()\n+                        .cloned()\n+                );\n+            }\n+\n+            // forall<'a, T> { `Outlives(T, 'a) :- FromEnv(&'a T)` }\n+            ty::Ref(_region, _sub_ty, ..) => {\n+                // FIXME: we need bound tys in order to write the above rule\n+            }\n+\n+            ty::Dynamic(..) => {\n+                // FIXME: trait object rules are not yet implemented\n+            }\n+\n+            ty::Adt(def, ..) => {\n+                self.round.extend(\n+                    self.tcx.program_clauses_for(def.did)\n+                        .iter()\n+                        .cloned()\n+                );\n+            }\n \n+            ty::Foreign(def_id) |\n+            ty::FnDef(def_id, ..) |\n+            ty::Closure(def_id, ..) |\n+            ty::Generator(def_id, ..) |\n+            ty::Opaque(def_id, ..) => {\n+                self.round.extend(\n+                    self.tcx.program_clauses_for(def_id)\n+                        .iter()\n+                        .cloned()\n+                );\n+            }\n+\n+            ty::Bool |\n+            ty::Char |\n+            ty::Int(..) |\n+            ty::Uint(..) |\n+            ty::Float(..) |\n+            ty::Str |\n+            ty::Array(..) |\n+            ty::Slice(..) |\n+            ty::RawPtr(..) |\n+            ty::FnPtr(..) |\n+            ty::Never |\n+            ty::Tuple(..) |\n+            ty::GeneratorWitness(..) |\n+            ty::UnnormalizedProjection(..) |\n+            ty::Param(..) |\n+            ty::Infer(..) |\n+            ty::Error => (),\n+        }\n     }\n \n     fn visit_from_env(&mut self, from_env: FromEnv<'tcx>) {\n@@ -52,37 +106,20 @@ impl ClauseVisitor<'set, 'a, 'tcx> {\n     }\n \n     fn visit_domain_goal(&mut self, domain_goal: DomainGoal<'tcx>) {\n+        // The only domain goals we can find in an environment are:\n+        // * `DomainGoal::Holds(..)`\n+        // * `DomainGoal::FromEnv(..)`\n+        // The former do not lead to any implied bounds. So we only need\n+        // to visit the latter.\n         if let DomainGoal::FromEnv(from_env) = domain_goal {\n             self.visit_from_env(from_env);\n         }\n     }\n \n-    fn visit_goal(&mut self, goal: Goal<'tcx>) {\n-        match goal {\n-            Goal::Implies(clauses, goal) => {\n-                for clause in clauses {\n-                    self.visit_clause(*clause);\n-                }\n-                self.visit_goal(*goal);\n-            }\n-\n-            Goal::And(goal1, goal2) => {\n-                self.visit_goal(*goal1);\n-                self.visit_goal(*goal2);\n-            }\n-\n-            Goal::Not(goal) => self.visit_goal(*goal),\n-            Goal::DomainGoal(domain_goal) => self.visit_domain_goal(domain_goal),\n-            Goal::Quantified(_, goal) => self.visit_goal(**goal.skip_binder()),\n-            Goal::CannotProve => (),\n-        }\n-    }\n-\n     fn visit_program_clause(&mut self, clause: ProgramClause<'tcx>) {\n         self.visit_domain_goal(clause.goal);\n-        for goal in clause.hypotheses {\n-            self.visit_goal(*goal);\n-        }\n+        // No need to visit `clause.hypotheses`: they are always of the form\n+        // `FromEnv(...)` and were visited at a previous round.\n     }\n \n     fn visit_clause(&mut self, clause: Clause<'tcx>) {\n@@ -102,8 +139,8 @@ crate fn program_clauses_for_env<'a, 'tcx>(\n     let mut last_round = FxHashSet();\n     {\n         let mut visitor = ClauseVisitor::new(tcx, &mut last_round);\n-        for clause in environment.clauses {\n-            visitor.visit_clause(*clause);\n+        for &clause in environment.clauses {\n+            visitor.visit_clause(clause);\n         }\n     }\n "}]}