{"sha": "19dedf3a4b6cfd42ec46949b1d0c4416dd80d11b", "node_id": "C_kwDOAAsO6NoAKDE5ZGVkZjNhNGI2Y2ZkNDJlYzQ2OTQ5YjFkMGM0NDE2ZGQ4MGQxMWI", "commit": {"author": {"name": "Martin Gammels\u00e6ter", "email": "martin@mg.am", "date": "2022-04-17T09:04:58Z"}, "committer": {"name": "Martin Gammels\u00e6ter", "email": "martin@mg.am", "date": "2022-04-17T09:04:58Z"}, "message": "Split relate_substs into two functions\n\nOne for the case with variances, and one without.\nAll callers use an explicit Option for the variable anyway.", "tree": {"sha": "9fc33f9ba69e2f709e3acc27873d2aa806635db3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fc33f9ba69e2f709e3acc27873d2aa806635db3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19dedf3a4b6cfd42ec46949b1d0c4416dd80d11b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19dedf3a4b6cfd42ec46949b1d0c4416dd80d11b", "html_url": "https://github.com/rust-lang/rust/commit/19dedf3a4b6cfd42ec46949b1d0c4416dd80d11b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19dedf3a4b6cfd42ec46949b1d0c4416dd80d11b/comments", "author": {"login": "martingms", "id": 458783, "node_id": "MDQ6VXNlcjQ1ODc4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/458783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martingms", "html_url": "https://github.com/martingms", "followers_url": "https://api.github.com/users/martingms/followers", "following_url": "https://api.github.com/users/martingms/following{/other_user}", "gists_url": "https://api.github.com/users/martingms/gists{/gist_id}", "starred_url": "https://api.github.com/users/martingms/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martingms/subscriptions", "organizations_url": "https://api.github.com/users/martingms/orgs", "repos_url": "https://api.github.com/users/martingms/repos", "events_url": "https://api.github.com/users/martingms/events{/privacy}", "received_events_url": "https://api.github.com/users/martingms/received_events", "type": "User", "site_admin": false}, "committer": {"login": "martingms", "id": 458783, "node_id": "MDQ6VXNlcjQ1ODc4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/458783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martingms", "html_url": "https://github.com/martingms", "followers_url": "https://api.github.com/users/martingms/followers", "following_url": "https://api.github.com/users/martingms/following{/other_user}", "gists_url": "https://api.github.com/users/martingms/gists{/gist_id}", "starred_url": "https://api.github.com/users/martingms/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martingms/subscriptions", "organizations_url": "https://api.github.com/users/martingms/orgs", "repos_url": "https://api.github.com/users/martingms/repos", "events_url": "https://api.github.com/users/martingms/events{/privacy}", "received_events_url": "https://api.github.com/users/martingms/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "041121a18434023982b88b0d60f92ee904df4f49", "url": "https://api.github.com/repos/rust-lang/rust/commits/041121a18434023982b88b0d60f92ee904df4f49", "html_url": "https://github.com/rust-lang/rust/commit/041121a18434023982b88b0d60f92ee904df4f49"}], "stats": {"total": 73, "additions": 42, "deletions": 31}, "files": [{"sha": "0ca0fe33614f826600589d69fd0edfcea9b14d9e", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19dedf3a4b6cfd42ec46949b1d0c4416dd80d11b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19dedf3a4b6cfd42ec46949b1d0c4416dd80d11b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=19dedf3a4b6cfd42ec46949b1d0c4416dd80d11b", "patch": "@@ -567,11 +567,17 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n             // Avoid fetching the variance if we are in an invariant\n             // context; no need, and it can induce dependency cycles\n             // (e.g., #41849).\n-            relate::relate_substs(self, None, a_subst, b_subst)\n+            relate::relate_substs(self, a_subst, b_subst)\n         } else {\n             let tcx = self.tcx();\n             let opt_variances = tcx.variances_of(item_def_id);\n-            relate::relate_substs(self, Some((item_def_id, &opt_variances)), a_subst, b_subst)\n+            relate::relate_substs_with_variances(\n+                self,\n+                item_def_id,\n+                &opt_variances,\n+                a_subst,\n+                b_subst,\n+            )\n         }\n     }\n "}, {"sha": "ef6d464d3c6f101bad711e81647aa88450a4857b", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19dedf3a4b6cfd42ec46949b1d0c4416dd80d11b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19dedf3a4b6cfd42ec46949b1d0c4416dd80d11b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=19dedf3a4b6cfd42ec46949b1d0c4416dd80d11b", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n         // performing trait matching (which then performs equality\n         // unification).\n \n-        relate::relate_substs(self, None, a_subst, b_subst)\n+        relate::relate_substs(self, a_subst, b_subst)\n     }\n \n     fn relate_with_variance<T: Relate<'tcx>>("}, {"sha": "4c1160e21fec2bf715d8257f46082faba65f2916", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/19dedf3a4b6cfd42ec46949b1d0c4416dd80d11b/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19dedf3a4b6cfd42ec46949b1d0c4416dd80d11b/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=19dedf3a4b6cfd42ec46949b1d0c4416dd80d11b", "patch": "@@ -61,7 +61,7 @@ pub trait TypeRelation<'tcx>: Sized {\n \n         let tcx = self.tcx();\n         let opt_variances = tcx.variances_of(item_def_id);\n-        relate_substs(self, Some((item_def_id, opt_variances)), a_subst, b_subst)\n+        relate_substs_with_variances(self, item_def_id, opt_variances, a_subst, b_subst)\n     }\n \n     /// Switch variance for the purpose of relating `a` and `b`.\n@@ -135,34 +135,39 @@ pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(\n     }\n }\n \n+#[inline]\n pub fn relate_substs<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n-    variances: Option<(DefId, &[ty::Variance])>,\n+    a_subst: SubstsRef<'tcx>,\n+    b_subst: SubstsRef<'tcx>,\n+) -> RelateResult<'tcx, SubstsRef<'tcx>> {\n+    relation.tcx().mk_substs(iter::zip(a_subst, b_subst).map(|(a, b)| {\n+        relation.relate_with_variance(ty::Invariant, ty::VarianceDiagInfo::default(), a, b)\n+    }))\n+}\n+\n+pub fn relate_substs_with_variances<'tcx, R: TypeRelation<'tcx>>(\n+    relation: &mut R,\n+    ty_def_id: DefId,\n+    variances: &[ty::Variance],\n     a_subst: SubstsRef<'tcx>,\n     b_subst: SubstsRef<'tcx>,\n ) -> RelateResult<'tcx, SubstsRef<'tcx>> {\n     let tcx = relation.tcx();\n \n-    let zipped = iter::zip(a_subst, b_subst);\n-    match variances {\n-        Some((ty_def_id, variances)) => {\n-            let mut cached_ty = None;\n-            tcx.mk_substs(zipped.enumerate().map(|(i, (a, b))| {\n-                let variance = variances[i];\n-                let variance_info = if variance == ty::Invariant {\n-                    let ty = *cached_ty\n-                        .get_or_insert_with(|| tcx.type_of(ty_def_id).subst(tcx, a_subst));\n-                    ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }\n-                } else {\n-                    ty::VarianceDiagInfo::default()\n-                };\n-                relation.relate_with_variance(variance, variance_info, a, b)\n-            }))\n-        }\n-        None => tcx.mk_substs(zipped.map(|(a, b)| {\n-            relation.relate_with_variance(ty::Invariant, ty::VarianceDiagInfo::default(), a, b)\n-        })),\n-    }\n+    let mut cached_ty = None;\n+    let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {\n+        let variance = variances[i];\n+        let variance_info = if variance == ty::Invariant {\n+            let ty = *cached_ty.get_or_insert_with(|| tcx.type_of(ty_def_id).subst(tcx, a_subst));\n+            ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }\n+        } else {\n+            ty::VarianceDiagInfo::default()\n+        };\n+        relation.relate_with_variance(variance, variance_info, a, b)\n+    });\n+\n+    tcx.mk_substs(params)\n }\n \n impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n@@ -318,7 +323,7 @@ impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {\n         if a.def_id != b.def_id {\n             Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))\n         } else {\n-            let substs = relate_substs(relation, None, a.substs, b.substs)?;\n+            let substs = relate_substs(relation, a.substs, b.substs)?;\n             Ok(ty::TraitRef { def_id: a.def_id, substs })\n         }\n     }\n@@ -334,7 +339,7 @@ impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {\n         if a.def_id != b.def_id {\n             Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))\n         } else {\n-            let substs = relate_substs(relation, None, a.substs, b.substs)?;\n+            let substs = relate_substs(relation, a.substs, b.substs)?;\n             Ok(ty::ExistentialTraitRef { def_id: a.def_id, substs })\n         }\n     }\n@@ -554,7 +559,7 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n         (&ty::Opaque(a_def_id, a_substs), &ty::Opaque(b_def_id, b_substs))\n             if a_def_id == b_def_id =>\n         {\n-            let substs = relate_substs(relation, None, a_substs, b_substs)?;\n+            let substs = relate_substs(relation, a_substs, b_substs)?;\n             Ok(tcx.mk_opaque(a_def_id, substs))\n         }\n \n@@ -742,7 +747,7 @@ impl<'tcx> Relate<'tcx> for ty::ClosureSubsts<'tcx> {\n         a: ty::ClosureSubsts<'tcx>,\n         b: ty::ClosureSubsts<'tcx>,\n     ) -> RelateResult<'tcx, ty::ClosureSubsts<'tcx>> {\n-        let substs = relate_substs(relation, None, a.substs, b.substs)?;\n+        let substs = relate_substs(relation, a.substs, b.substs)?;\n         Ok(ty::ClosureSubsts { substs })\n     }\n }\n@@ -753,7 +758,7 @@ impl<'tcx> Relate<'tcx> for ty::GeneratorSubsts<'tcx> {\n         a: ty::GeneratorSubsts<'tcx>,\n         b: ty::GeneratorSubsts<'tcx>,\n     ) -> RelateResult<'tcx, ty::GeneratorSubsts<'tcx>> {\n-        let substs = relate_substs(relation, None, a.substs, b.substs)?;\n+        let substs = relate_substs(relation, a.substs, b.substs)?;\n         Ok(ty::GeneratorSubsts { substs })\n     }\n }\n@@ -764,7 +769,7 @@ impl<'tcx> Relate<'tcx> for SubstsRef<'tcx> {\n         a: SubstsRef<'tcx>,\n         b: SubstsRef<'tcx>,\n     ) -> RelateResult<'tcx, SubstsRef<'tcx>> {\n-        relate_substs(relation, None, a, b)\n+        relate_substs(relation, a, b)\n     }\n }\n "}]}