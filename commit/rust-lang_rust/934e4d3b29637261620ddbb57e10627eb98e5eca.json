{"sha": "934e4d3b29637261620ddbb57e10627eb98e5eca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNGU0ZDNiMjk2MzcyNjE2MjBkZGJiNTdlMTA2MjdlYjk4ZTVlY2E=", "commit": {"author": {"name": "yui-knk", "email": "spiketeika@gmail.com", "date": "2018-11-28T23:54:35Z"}, "committer": {"name": "yui-knk", "email": "spiketeika@gmail.com", "date": "2018-11-28T23:54:35Z"}, "message": "Remove not used mod\n\n`mir_stats` mod has not been used since c1ff10464dc6b685f871d2365e3d8a39de324ba9.", "tree": {"sha": "2a21429b1f97ae4f2d1d8e2e48c7ddb739537527", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a21429b1f97ae4f2d1d8e2e48c7ddb739537527"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/934e4d3b29637261620ddbb57e10627eb98e5eca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/934e4d3b29637261620ddbb57e10627eb98e5eca", "html_url": "https://github.com/rust-lang/rust/commit/934e4d3b29637261620ddbb57e10627eb98e5eca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/934e4d3b29637261620ddbb57e10627eb98e5eca/comments", "author": {"login": "yui-knk", "id": 5356517, "node_id": "MDQ6VXNlcjUzNTY1MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5356517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yui-knk", "html_url": "https://github.com/yui-knk", "followers_url": "https://api.github.com/users/yui-knk/followers", "following_url": "https://api.github.com/users/yui-knk/following{/other_user}", "gists_url": "https://api.github.com/users/yui-knk/gists{/gist_id}", "starred_url": "https://api.github.com/users/yui-knk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yui-knk/subscriptions", "organizations_url": "https://api.github.com/users/yui-knk/orgs", "repos_url": "https://api.github.com/users/yui-knk/repos", "events_url": "https://api.github.com/users/yui-knk/events{/privacy}", "received_events_url": "https://api.github.com/users/yui-knk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yui-knk", "id": 5356517, "node_id": "MDQ6VXNlcjUzNTY1MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5356517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yui-knk", "html_url": "https://github.com/yui-knk", "followers_url": "https://api.github.com/users/yui-knk/followers", "following_url": "https://api.github.com/users/yui-knk/following{/other_user}", "gists_url": "https://api.github.com/users/yui-knk/gists{/gist_id}", "starred_url": "https://api.github.com/users/yui-knk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yui-knk/subscriptions", "organizations_url": "https://api.github.com/users/yui-knk/orgs", "repos_url": "https://api.github.com/users/yui-knk/repos", "events_url": "https://api.github.com/users/yui-knk/events{/privacy}", "received_events_url": "https://api.github.com/users/yui-knk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b68fc18c45350e1cdcd83cecf0f12e294e55af56", "url": "https://api.github.com/repos/rust-lang/rust/commits/b68fc18c45350e1cdcd83cecf0f12e294e55af56", "html_url": "https://github.com/rust-lang/rust/commit/b68fc18c45350e1cdcd83cecf0f12e294e55af56"}], "stats": {"total": 257, "additions": 0, "deletions": 257}, "files": [{"sha": "a5d2edbc5d4396f286688ded2938246aa7dbf509", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/934e4d3b29637261620ddbb57e10627eb98e5eca/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934e4d3b29637261620ddbb57e10627eb98e5eca/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=934e4d3b29637261620ddbb57e10627eb98e5eca", "patch": "@@ -41,7 +41,6 @@ pub mod ast_validation;\n pub mod rvalue_promotion;\n pub mod hir_stats;\n pub mod loops;\n-mod mir_stats;\n \n __build_diagnostic_array! { librustc_passes, DIAGNOSTICS }\n "}, {"sha": "fb37f03a1cc41244d0a1466174cfc009fabeb37b", "filename": "src/librustc_passes/mir_stats.rs", "status": "removed", "additions": 0, "deletions": 256, "changes": 256, "blob_url": "https://github.com/rust-lang/rust/blob/b68fc18c45350e1cdcd83cecf0f12e294e55af56/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b68fc18c45350e1cdcd83cecf0f12e294e55af56/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=b68fc18c45350e1cdcd83cecf0f12e294e55af56", "patch": "@@ -1,256 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// The visitors in this module collect sizes and counts of the most important\n-// pieces of MIR. The resulting numbers are good approximations but not\n-// completely accurate (some things might be counted twice, others missed).\n-\n-use rustc::mir::{AggregateKind, AssertMessage, BasicBlock, BasicBlockData};\n-use rustc::mir::{Constant, Location, Local, LocalDecl};\n-use rustc::mir::{Place, PlaceElem, PlaceProjection};\n-use rustc::mir::{Mir, Operand, ProjectionElem};\n-use rustc::mir::{Rvalue, SourceInfo, Statement, StatementKind};\n-use rustc::mir::{Terminator, TerminatorKind, SourceScope, SourceScopeData};\n-use rustc::mir::interpret::EvalErrorKind;\n-use rustc::mir::visit as mir_visit;\n-use rustc::ty::{self, ClosureSubsts, TyCtxt};\n-use rustc::util::nodemap::{FxHashMap};\n-\n-struct NodeData {\n-    count: usize,\n-    size: usize,\n-}\n-\n-struct StatCollector<'a, 'tcx: 'a> {\n-    _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    data: FxHashMap<&'static str, NodeData>,\n-}\n-\n-impl<'a, 'tcx> StatCollector<'a, 'tcx> {\n-\n-    fn record_with_size(&mut self, label: &'static str, node_size: usize) {\n-        let entry = self.data.entry(label).or_insert(NodeData {\n-            count: 0,\n-            size: 0,\n-        });\n-\n-        entry.count += 1;\n-        entry.size = node_size;\n-    }\n-\n-    fn record<T>(&mut self, label: &'static str, node: &T) {\n-        self.record_with_size(label, ::std::mem::size_of_val(node));\n-    }\n-}\n-\n-impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n-    fn visit_mir(&mut self, mir: &Mir<'tcx>) {\n-        self.record(\"Mir\", mir);\n-\n-        // since the `super_mir` method does not traverse the MIR of\n-        // promoted rvalues, (but we still want to gather statistics\n-        // on the structures represented there) we manually traverse\n-        // the promoted rvalues here.\n-        for promoted_mir in &mir.promoted {\n-            self.visit_mir(promoted_mir);\n-        }\n-\n-        self.super_mir(mir);\n-    }\n-\n-    fn visit_basic_block_data(&mut self, block: BasicBlock, data: &BasicBlockData<'tcx>) {\n-        self.record(\"BasicBlockData\", data);\n-        self.super_basic_block_data(block, data);\n-    }\n-\n-    fn visit_source_scope_data(&mut self, scope_data: &SourceScopeData) {\n-        self.record(\"SourceScopeData\", scope_data);\n-        self.super_source_scope_data(scope_data);\n-    }\n-\n-    fn visit_statement(&mut self,\n-                       block: BasicBlock,\n-                       statement: &Statement<'tcx>,\n-                       location: Location) {\n-        self.record(\"Statement\", statement);\n-        self.record(match statement.kind {\n-            StatementKind::Assign(..) => \"StatementKind::Assign\",\n-            StatementKind::FakeRead(..) => \"StatementKind::FakeRead\",\n-            StatementKind::Retag { .. } => \"StatementKind::Retag\",\n-            StatementKind::EscapeToRaw { .. } => \"StatementKind::EscapeToRaw\",\n-            StatementKind::SetDiscriminant { .. } => \"StatementKind::SetDiscriminant\",\n-            StatementKind::StorageLive(..) => \"StatementKind::StorageLive\",\n-            StatementKind::StorageDead(..) => \"StatementKind::StorageDead\",\n-            StatementKind::InlineAsm { .. } => \"StatementKind::InlineAsm\",\n-            StatementKind::AscribeUserType(..) => \"StatementKind::AscribeUserType\",\n-            StatementKind::Nop => \"StatementKind::Nop\",\n-        }, &statement.kind);\n-        self.super_statement(block, statement, location);\n-    }\n-\n-    fn visit_terminator(&mut self,\n-                        block: BasicBlock,\n-                        terminator: &Terminator<'tcx>,\n-                        location: Location) {\n-        self.record(\"Terminator\", terminator);\n-        self.super_terminator(block, terminator, location);\n-    }\n-\n-    fn visit_terminator_kind(&mut self,\n-                             block: BasicBlock,\n-                             kind: &TerminatorKind<'tcx>,\n-                             location: Location) {\n-        self.record(\"TerminatorKind\", kind);\n-        self.record(match *kind {\n-            TerminatorKind::Goto { .. } => \"TerminatorKind::Goto\",\n-            TerminatorKind::SwitchInt { .. } => \"TerminatorKind::SwitchInt\",\n-            TerminatorKind::Resume => \"TerminatorKind::Resume\",\n-            TerminatorKind::Abort => \"TerminatorKind::Abort\",\n-            TerminatorKind::Return => \"TerminatorKind::Return\",\n-            TerminatorKind::Unreachable => \"TerminatorKind::Unreachable\",\n-            TerminatorKind::Drop { .. } => \"TerminatorKind::Drop\",\n-            TerminatorKind::DropAndReplace { .. } => \"TerminatorKind::DropAndReplace\",\n-            TerminatorKind::Call { .. } => \"TerminatorKind::Call\",\n-            TerminatorKind::Assert { .. } => \"TerminatorKind::Assert\",\n-            TerminatorKind::GeneratorDrop => \"TerminatorKind::GeneratorDrop\",\n-            TerminatorKind::Yield { .. } => \"TerminatorKind::Yield\",\n-            TerminatorKind::FalseEdges { .. } => \"TerminatorKind::FalseEdges\",\n-            TerminatorKind::FalseUnwind { .. } => \"TerminatorKind::FalseUnwind\",\n-        }, kind);\n-        self.super_terminator_kind(block, kind, location);\n-    }\n-\n-    fn visit_assert_message(&mut self, msg: &AssertMessage<'tcx>, location: Location) {\n-        self.record(\"AssertMessage\", msg);\n-        self.record(match *msg {\n-            EvalErrorKind::BoundsCheck { .. } => \"AssertMessage::BoundsCheck\",\n-            EvalErrorKind::Overflow(..) => \"AssertMessage::Overflow\",\n-            EvalErrorKind::OverflowNeg => \"AssertMessage::OverflowNeg\",\n-            EvalErrorKind::DivisionByZero => \"AssertMessage::DivisionByZero\",\n-            EvalErrorKind::RemainderByZero => \"AssertMessage::RemainderByZero\",\n-            EvalErrorKind::GeneratorResumedAfterReturn => {\n-                \"AssertMessage::GeneratorResumedAfterReturn\"\n-            }\n-            EvalErrorKind::GeneratorResumedAfterPanic => {\n-                \"AssertMessage::GeneratorResumedAfterPanic\"\n-            }\n-            _ => bug!(),\n-        }, msg);\n-        self.super_assert_message(msg, location);\n-    }\n-\n-    fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n-        self.record(\"Rvalue\", rvalue);\n-        let rvalue_kind = match *rvalue {\n-            Rvalue::Use(..) => \"Rvalue::Use\",\n-            Rvalue::Repeat(..) => \"Rvalue::Repeat\",\n-            Rvalue::Ref(..) => \"Rvalue::Ref\",\n-            Rvalue::Len(..) => \"Rvalue::Len\",\n-            Rvalue::Cast(..) => \"Rvalue::Cast\",\n-            Rvalue::BinaryOp(..) => \"Rvalue::BinaryOp\",\n-            Rvalue::CheckedBinaryOp(..) => \"Rvalue::CheckedBinaryOp\",\n-            Rvalue::UnaryOp(..) => \"Rvalue::UnaryOp\",\n-            Rvalue::Discriminant(..) => \"Rvalue::Discriminant\",\n-            Rvalue::NullaryOp(..) => \"Rvalue::NullaryOp\",\n-            Rvalue::Aggregate(ref kind, ref _operands) => {\n-                // AggregateKind is not distinguished by visit API, so\n-                // record it. (`super_rvalue` handles `_operands`.)\n-                self.record(match **kind {\n-                    AggregateKind::Array(_) => \"AggregateKind::Array\",\n-                    AggregateKind::Tuple => \"AggregateKind::Tuple\",\n-                    AggregateKind::Adt(..) => \"AggregateKind::Adt\",\n-                    AggregateKind::Closure(..) => \"AggregateKind::Closure\",\n-                    AggregateKind::Generator(..) => \"AggregateKind::Generator\",\n-                }, kind);\n-\n-                \"Rvalue::Aggregate\"\n-            }\n-        };\n-        self.record(rvalue_kind, rvalue);\n-        self.super_rvalue(rvalue, location);\n-    }\n-\n-    fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) {\n-        self.record(\"Operand\", operand);\n-        self.record(match *operand {\n-            Operand::Copy(..) => \"Operand::Copy\",\n-            Operand::Move(..) => \"Operand::Move\",\n-            Operand::Constant(..) => \"Operand::Constant\",\n-        }, operand);\n-        self.super_operand(operand, location);\n-    }\n-\n-    fn visit_place(&mut self,\n-                    place: &Place<'tcx>,\n-                    context: mir_visit::PlaceContext<'tcx>,\n-                    location: Location) {\n-        self.record(\"Place\", place);\n-        self.record(match *place {\n-            Place::Local(..) => \"Place::Local\",\n-            Place::Static(..) => \"Place::Static\",\n-            Place::Promoted(..) => \"Place::Promoted\",\n-            Place::Projection(..) => \"Place::Projection\",\n-        }, place);\n-        self.super_place(place, context, location);\n-    }\n-\n-    fn visit_projection(&mut self,\n-                        place: &PlaceProjection<'tcx>,\n-                        context: mir_visit::PlaceContext<'tcx>,\n-                        location: Location) {\n-        self.record(\"PlaceProjection\", place);\n-        self.super_projection(place, context, location);\n-    }\n-\n-    fn visit_projection_elem(&mut self,\n-                             place: &PlaceElem<'tcx>,\n-                             location: Location) {\n-        self.record(\"PlaceElem\", place);\n-        self.record(match *place {\n-            ProjectionElem::Deref => \"PlaceElem::Deref\",\n-            ProjectionElem::Subslice { .. } => \"PlaceElem::Subslice\",\n-            ProjectionElem::Field(..) => \"PlaceElem::Field\",\n-            ProjectionElem::Index(..) => \"PlaceElem::Index\",\n-            ProjectionElem::ConstantIndex { .. } => \"PlaceElem::ConstantIndex\",\n-            ProjectionElem::Downcast(..) => \"PlaceElem::Downcast\",\n-        }, place);\n-        self.super_projection_elem(place, location);\n-    }\n-\n-    fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n-        self.record(\"Constant\", constant);\n-        self.super_constant(constant, location);\n-    }\n-\n-    fn visit_source_info(&mut self, source_info: &SourceInfo) {\n-        self.record(\"SourceInfo\", source_info);\n-        self.super_source_info(source_info);\n-    }\n-\n-    fn visit_closure_substs(&mut self, substs: &ClosureSubsts<'tcx>, _: Location) {\n-        self.record(\"ClosureSubsts\", substs);\n-        self.super_closure_substs(substs);\n-    }\n-\n-    fn visit_const(&mut self, constant: &&'tcx ty::Const<'tcx>, _: Location) {\n-        self.record(\"Const\", constant);\n-        self.super_const(constant);\n-    }\n-\n-    fn visit_local_decl(&mut self, local: Local, local_decl: &LocalDecl<'tcx>) {\n-        self.record(\"LocalDecl\", local_decl);\n-        self.super_local_decl(local, local_decl);\n-    }\n-\n-    fn visit_source_scope(&mut self, scope: &SourceScope) {\n-        self.record(\"VisiblityScope\", scope);\n-        self.super_source_scope(scope);\n-    }\n-}"}]}