{"sha": "6f7faa0b757a5afef33fcb9702f85a4a66341603", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmN2ZhYTBiNzU3YTVhZmVmMzNmY2I5NzAyZjg1YTRhNjYzNDE2MDM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T02:36:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T02:36:17Z"}, "message": "rollup merge of #19736: steveklabnik/gh19662\n\nFixes #19662.", "tree": {"sha": "fbe5afbe618f51ec88500f654d64a1017d3cf028", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbe5afbe618f51ec88500f654d64a1017d3cf028"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f7faa0b757a5afef33fcb9702f85a4a66341603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f7faa0b757a5afef33fcb9702f85a4a66341603", "html_url": "https://github.com/rust-lang/rust/commit/6f7faa0b757a5afef33fcb9702f85a4a66341603", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f7faa0b757a5afef33fcb9702f85a4a66341603/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d46b8f1fce6da33df8bf7c8c74c2da7bc023f993", "url": "https://api.github.com/repos/rust-lang/rust/commits/d46b8f1fce6da33df8bf7c8c74c2da7bc023f993", "html_url": "https://github.com/rust-lang/rust/commit/d46b8f1fce6da33df8bf7c8c74c2da7bc023f993"}, {"sha": "a56e7aee81733485d6edd415ab383347232e3c36", "url": "https://api.github.com/repos/rust-lang/rust/commits/a56e7aee81733485d6edd415ab383347232e3c36", "html_url": "https://github.com/rust-lang/rust/commit/a56e7aee81733485d6edd415ab383347232e3c36"}], "stats": {"total": 79, "additions": 77, "deletions": 2}, "files": [{"sha": "414a874082eefdc24fe8acf2bfbdc656351bf93d", "filename": "src/doc/guide-ownership.md", "status": "modified", "additions": 77, "deletions": 2, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/6f7faa0b757a5afef33fcb9702f85a4a66341603/src%2Fdoc%2Fguide-ownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/6f7faa0b757a5afef33fcb9702f85a4a66341603/src%2Fdoc%2Fguide-ownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-ownership.md?ref=6f7faa0b757a5afef33fcb9702f85a4a66341603", "patch": "@@ -230,8 +230,9 @@ fn add_one(num: &int) -> int {\n ```\n \n Rust has a feature called 'lifetime elision,' which allows you to not write\n-lifetime annotations in certain circumstances. This is one of them. Without\n-eliding the lifetimes, `add_one` looks like this:\n+lifetime annotations in certain circumstances. This is one of them. We will\n+cover the others later. Without eliding the lifetimes, `add_one` looks like\n+this:\n \n ```rust\n fn add_one<'a>(num: &'a int) -> int {\n@@ -449,6 +450,80 @@ This is the simplest kind of multiple ownership possible. For example, there's\n also `Arc<T>`, which uses more expensive atomic instructions to be the\n thread-safe counterpart of `Rc<T>`.\n \n+## Lifetime Elision\n+\n+Earlier, we mentioned 'lifetime elision,' a feature of Rust which allows you to\n+not write lifetime annotations in certain circumstances. All references have a\n+lifetime, and so if you elide a lifetime (like `&T` instead of `&'a T`), Rust\n+will do three things to determine what those lifetimes should be.\n+\n+When talking about lifetime elision, we use the term 'input lifetime' and\n+'output lifetime'. An 'input liftime' is a lifetime associated with a parameter\n+of a function, and an 'output lifetime' is a lifetime associated with the return\n+value of a function. For example, this function has an input lifetime:\n+\n+```{rust,ignore}\n+fn foo<'a>(bar: &'a str)\n+```\n+\n+This one has an output lifetime:\n+\n+```{rust,ignore}\n+fn foo<'a>() -> &'a str\n+```\n+\n+This one has a lifetime in both positions:\n+\n+```{rust,ignore}\n+fn foo<'a>(bar: &'a str) -> &'a str\n+```\n+\n+Here are the three rules:\n+\n+* Each elided lifetime in a function's arguments becomes a distinct lifetime\n+  parameter.\n+\n+* If there is exactly one input lifetime, elided or not, that lifetime is\n+  assigned to all elided lifetimes in the return values of that function..\n+\n+* If there are multiple input lifetimes, but one of them is `&self` or `&mut\n+  self`, the lifetime of `self` is assigned to all elided output lifetimes.\n+\n+Otherwise, it is an error to elide an output lifetime.\n+\n+### Examples\n+\n+Here are some examples of functions with elided lifetimes, and the version of\n+what the elided lifetimes are expand to:\n+\n+```{rust,ignore}\n+fn print(s: &str);                                      // elided\n+fn print<'a>(s: &'a str);                               // expanded\n+\n+fn debug(lvl: uint, s: &str);                           // elided\n+fn debug<'a>(lvl: uint, s: &'a str);                    // expanded\n+\n+// In the preceeding example, `lvl` doesn't need a lifetime because it's not a\n+// reference (`&`). Only things relating to references (such as a `struct`\n+// which contains a reference) need lifetimes.\n+\n+fn substr(s: &str, until: uint) -> &str;                // elided\n+fn substr<'a>(s: &'a str, until: uint) -> &'a str;      // expanded\n+\n+fn get_str() -> &str;                                   // ILLEGAL, no inputs\n+\n+fn frob(s: &str, t: &str) -> &str;                      // ILLEGAL, two inputs\n+\n+fn get_mut(&mut self) -> &mut T;                        // elided\n+fn get_mut<'a>(&'a mut self) -> &'a mut T;              // expanded\n+\n+fn args<T:ToCStr>(&mut self, args: &[T]) -> &mut Command                  // elided\n+fn args<'a, 'b, T:ToCStr>(&'a mut self, args: &'b [T]) -> &'a mut Command // expanded\n+\n+fn new(buf: &mut [u8]) -> BufWriter;                    // elided\n+fn new<'a>(buf: &'a mut [u8]) -> BufWriter<'a>          // expanded\n+```\n+\n # Related Resources\n \n Coming Soon."}]}