{"sha": "c36228f6961a1af122ed55d50127fcaa67dce5aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNjIyOGY2OTYxYTFhZjEyMmVkNTVkNTAxMjdmY2FhNjdkY2U1YWE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-11-18T11:15:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-18T11:15:22Z"}, "message": "Rollup merge of #46044 - collinanderson:py3, r=kennytm\n\nfix some python3 incompatibilities", "tree": {"sha": "bb75eca3a5f24f5cc8d920a2967ac765179135d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb75eca3a5f24f5cc8d920a2967ac765179135d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c36228f6961a1af122ed55d50127fcaa67dce5aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c36228f6961a1af122ed55d50127fcaa67dce5aa", "html_url": "https://github.com/rust-lang/rust/commit/c36228f6961a1af122ed55d50127fcaa67dce5aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c36228f6961a1af122ed55d50127fcaa67dce5aa/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdadb6c7255d66969a86dcf2259651138f641ae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdadb6c7255d66969a86dcf2259651138f641ae1", "html_url": "https://github.com/rust-lang/rust/commit/cdadb6c7255d66969a86dcf2259651138f641ae1"}, {"sha": "261d4d8185ec710ea2a5568c76395860834f7246", "url": "https://api.github.com/repos/rust-lang/rust/commits/261d4d8185ec710ea2a5568c76395860834f7246", "html_url": "https://github.com/rust-lang/rust/commit/261d4d8185ec710ea2a5568c76395860834f7246"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "21bfc448ae2b4a0c8b2ec4ede7d9285820365286", "filename": "src/etc/indenter", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c36228f6961a1af122ed55d50127fcaa67dce5aa/src%2Fetc%2Findenter", "raw_url": "https://github.com/rust-lang/rust/raw/c36228f6961a1af122ed55d50127fcaa67dce5aa/src%2Fetc%2Findenter", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Findenter?ref=c36228f6961a1af122ed55d50127fcaa67dce5aa", "patch": "@@ -13,7 +13,7 @@ while True:\n     if more_re.match(line):\n         indent += 1\n \n-    print \"%03d %s%s\" % (indent, \" \" * indent, line.strip())\n+    print(\"%03d %s%s\" % (indent, \" \" * indent, line.strip()))\n \n     if less_re.match(line):\n         indent -= 1"}, {"sha": "ac2223f4acef3052d32d35689b90eb1227ca4a19", "filename": "src/etc/sugarise-doc-comments.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c36228f6961a1af122ed55d50127fcaa67dce5aa/src%2Fetc%2Fsugarise-doc-comments.py", "raw_url": "https://github.com/rust-lang/rust/raw/c36228f6961a1af122ed55d50127fcaa67dce5aa/src%2Fetc%2Fsugarise-doc-comments.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fsugarise-doc-comments.py?ref=c36228f6961a1af122ed55d50127fcaa67dce5aa", "patch": "@@ -50,11 +50,11 @@ def block_trim(s):\n         lns = lns[:-1]\n \n     # remove leading horizontal whitespace\n-    n = sys.maxint\n+    n = sys.maxsize\n     for ln in lns:\n         if ln.strip():\n             n = min(n, len(re.search('^\\s*', ln).group()))\n-    if n != sys.maxint:\n+    if n != sys.maxsize:\n         lns = [ln[n:] for ln in lns]\n \n     # strip trailing whitespace"}, {"sha": "75c92b9b15ca28f6731ec75d16f8f03a09768304", "filename": "src/etc/test-float-parse/runtests.py", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c36228f6961a1af122ed55d50127fcaa67dce5aa/src%2Fetc%2Ftest-float-parse%2Fruntests.py", "raw_url": "https://github.com/rust-lang/rust/raw/c36228f6961a1af122ed55d50127fcaa67dce5aa/src%2Fetc%2Ftest-float-parse%2Fruntests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fruntests.py?ref=c36228f6961a1af122ed55d50127fcaa67dce5aa", "patch": "@@ -97,11 +97,15 @@\n from subprocess import Popen, check_call, PIPE\n from glob import glob\n import multiprocessing\n-import Queue\n import threading\n import ctypes\n import binascii\n \n+try:  # Python 3\n+    import queue as Queue\n+except ImportError:  # Python 2\n+    import Queue\n+\n NUM_WORKERS = 2\n UPDATE_EVERY_N = 50000\n INF = namedtuple('INF', '')()"}, {"sha": "df79760894e3025c6af5b87f9f7342f4357e480f", "filename": "src/libstd_unicode/unicode.py", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c36228f6961a1af122ed55d50127fcaa67dce5aa/src%2Flibstd_unicode%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/c36228f6961a1af122ed55d50127fcaa67dce5aa/src%2Flibstd_unicode%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Funicode.py?ref=c36228f6961a1af122ed55d50127fcaa67dce5aa", "patch": "@@ -89,7 +89,7 @@ def load_unicode_data(f):\n         if is_surrogate(cp):\n             continue\n         if range_start >= 0:\n-            for i in xrange(range_start, cp):\n+            for i in range(range_start, cp):\n                 udict[i] = data\n             range_start = -1\n         if data[1].endswith(\", First>\"):\n@@ -382,7 +382,7 @@ def compute_trie(rawdata, chunksize):\n     root = []\n     childmap = {}\n     child_data = []\n-    for i in range(len(rawdata) / chunksize):\n+    for i in range(len(rawdata) // chunksize):\n         data = rawdata[i * chunksize: (i + 1) * chunksize]\n         child = '|'.join(map(str, data))\n         if child not in childmap:\n@@ -400,7 +400,7 @@ def emit_bool_trie(f, name, t_data, is_pub=True):\n \n     # convert to bitmap chunks of 64 bits each\n     chunks = []\n-    for i in range(0x110000 / CHUNK):\n+    for i in range(0x110000 // CHUNK):\n         chunk = 0\n         for j in range(64):\n             if rawdata[i * 64 + j]:\n@@ -412,12 +412,12 @@ def emit_bool_trie(f, name, t_data, is_pub=True):\n         pub_string = \"pub \"\n     f.write(\"    %sconst %s: &'static super::BoolTrie = &super::BoolTrie {\\n\" % (pub_string, name))\n     f.write(\"        r1: [\\n\")\n-    data = ','.join('0x%016x' % chunk for chunk in chunks[0:0x800 / CHUNK])\n+    data = ','.join('0x%016x' % chunk for chunk in chunks[0:0x800 // CHUNK])\n     format_table_content(f, data, 12)\n     f.write(\"\\n        ],\\n\")\n \n     # 0x800..0x10000 trie\n-    (r2, r3) = compute_trie(chunks[0x800 / CHUNK : 0x10000 / CHUNK], 64 / CHUNK)\n+    (r2, r3) = compute_trie(chunks[0x800 // CHUNK : 0x10000 // CHUNK], 64 // CHUNK)\n     f.write(\"        r2: [\\n\")\n     data = ','.join(str(node) for node in r2)\n     format_table_content(f, data, 12)\n@@ -428,7 +428,7 @@ def emit_bool_trie(f, name, t_data, is_pub=True):\n     f.write(\"\\n        ],\\n\")\n \n     # 0x10000..0x110000 trie\n-    (mid, r6) = compute_trie(chunks[0x10000 / CHUNK : 0x110000 / CHUNK], 64 / CHUNK)\n+    (mid, r6) = compute_trie(chunks[0x10000 // CHUNK : 0x110000 // CHUNK], 64 // CHUNK)\n     (r4, r5) = compute_trie(mid, 64)\n     f.write(\"        r4: [\\n\")\n     data = ','.join(str(node) for node in r4)\n@@ -446,14 +446,14 @@ def emit_bool_trie(f, name, t_data, is_pub=True):\n     f.write(\"    };\\n\\n\")\n \n def emit_small_bool_trie(f, name, t_data, is_pub=True):\n-    last_chunk = max(int(hi / 64) for (lo, hi) in t_data)\n+    last_chunk = max(hi // 64 for (lo, hi) in t_data)\n     n_chunks = last_chunk + 1\n     chunks = [0] * n_chunks\n     for (lo, hi) in t_data:\n         for cp in range(lo, hi + 1):\n-            if int(cp / 64) >= len(chunks):\n-                print(cp, int(cp / 64), len(chunks), lo, hi)\n-            chunks[int(cp / 64)] |= 1 << (cp & 63)\n+            if cp // 64 >= len(chunks):\n+                print(cp, cp // 64, len(chunks), lo, hi)\n+            chunks[cp // 64] |= 1 << (cp & 63)\n \n     pub_string = \"\"\n     if is_pub:\n@@ -519,32 +519,29 @@ def emit_conversions_module(f, to_upper, to_lower, to_title):\n     pfun = lambda x: \"(%s,[%s,%s,%s])\" % (\n         escape_char(x[0]), escape_char(x[1][0]), escape_char(x[1][1]), escape_char(x[1][2]))\n     emit_table(f, \"to_lowercase_table\",\n-        sorted(to_lower.iteritems(), key=operator.itemgetter(0)),\n+        sorted(to_lower.items(), key=operator.itemgetter(0)),\n         is_pub=False, t_type = t_type, pfun=pfun)\n     emit_table(f, \"to_uppercase_table\",\n-        sorted(to_upper.iteritems(), key=operator.itemgetter(0)),\n+        sorted(to_upper.items(), key=operator.itemgetter(0)),\n         is_pub=False, t_type = t_type, pfun=pfun)\n     f.write(\"}\\n\\n\")\n \n def emit_norm_module(f, canon, compat, combine, norm_props):\n-    canon_keys = canon.keys()\n-    canon_keys.sort()\n+    canon_keys = sorted(canon.keys())\n \n-    compat_keys = compat.keys()\n-    compat_keys.sort()\n+    compat_keys = sorted(compat.keys())\n \n     canon_comp = {}\n     comp_exclusions = norm_props[\"Full_Composition_Exclusion\"]\n     for char in canon_keys:\n-        if True in map(lambda (lo, hi): lo <= char <= hi, comp_exclusions):\n+        if any(lo <= char <= hi for lo, hi in comp_exclusions):\n             continue\n         decomp = canon[char]\n         if len(decomp) == 2:\n-            if not canon_comp.has_key(decomp[0]):\n+            if decomp[0] not in canon_comp:\n                 canon_comp[decomp[0]] = []\n             canon_comp[decomp[0]].append( (decomp[1], char) )\n-    canon_comp_keys = canon_comp.keys()\n-    canon_comp_keys.sort()\n+    canon_comp_keys = sorted(canon_comp.keys())\n \n if __name__ == \"__main__\":\n     r = \"tables.rs\""}]}