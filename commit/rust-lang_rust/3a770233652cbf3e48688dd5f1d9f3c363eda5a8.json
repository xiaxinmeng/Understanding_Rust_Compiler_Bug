{"sha": "3a770233652cbf3e48688dd5f1d9f3c363eda5a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNzcwMjMzNjUyY2JmM2U0ODY4OGRkNWYxZDlmM2MzNjNlZGE1YTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-17T09:43:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-17T09:53:22Z"}, "message": "docs", "tree": {"sha": "df584fbb044cad23e196da5ae0b3636b06bfeeff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df584fbb044cad23e196da5ae0b3636b06bfeeff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a770233652cbf3e48688dd5f1d9f3c363eda5a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a770233652cbf3e48688dd5f1d9f3c363eda5a8", "html_url": "https://github.com/rust-lang/rust/commit/3a770233652cbf3e48688dd5f1d9f3c363eda5a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a770233652cbf3e48688dd5f1d9f3c363eda5a8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d7fa6d30b89523aa4037cac61e10b8213ac4c04", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d7fa6d30b89523aa4037cac61e10b8213ac4c04", "html_url": "https://github.com/rust-lang/rust/commit/4d7fa6d30b89523aa4037cac61e10b8213ac4c04"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "edd2f25f7eacc97e57a164d1b93d5fb5f5ebc4d1", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3a770233652cbf3e48688dd5f1d9f3c363eda5a8/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a770233652cbf3e48688dd5f1d9f3c363eda5a8/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=3a770233652cbf3e48688dd5f1d9f3c363eda5a8", "patch": "@@ -10,12 +10,12 @@\n ///\n /// Computing `CrateDefMap` can be partitioned into several logically\n /// independent \"phases\". The phases are mutually recursive though, there's no\n-/// stric ordering.\n+/// strict ordering.\n ///\n /// ## Collecting RawItems\n ///\n ///  This happens in the `raw` module, which parses a single source file into a\n-///  set of top-level items. Nested importa are desugared to flat imports in\n+///  set of top-level items. Nested imports are desugared to flat imports in\n ///  this phase. Macro calls are represented as a triple of (Path, Option<Name>,\n ///  TokenTree).\n ///\n@@ -24,22 +24,28 @@\n /// This happens in the `collector` module. In this phase, we recursively walk\n /// tree of modules, collect raw items from submodules, populate module scopes\n /// with defined items (so, we assign item ids in this phase) and record the set\n-/// of unresovled imports and macros.\n+/// of unresolved imports and macros.\n ///\n-/// While we walk tree of modules, we also record macro_rules defenitions and\n+/// While we walk tree of modules, we also record macro_rules definitions and\n /// expand calls to macro_rules defined macros.\n ///\n /// ## Resolving Imports\n ///\n-/// TBD\n+/// We maintain a list of currently unresolved imports. On every iteration, we\n+/// try to resolve some imports from this list. If the import is resolved, we\n+/// record it, by adding an item to current module scope and, if necessary, by\n+/// recursively populating glob imports.\n ///\n /// ## Resolving Macros\n ///\n-/// While macro_rules from the same crate use a global mutable namespace, macros\n-/// from other crates (including proc-macros) can be used with `foo::bar!`\n-/// syntax.\n+/// macro_rules from the same crate use a global mutable namespace. We expand\n+/// them immediately, when we collect modules.\n ///\n-/// TBD;\n+/// Macros from other crates (including proc-macros) can be used with\n+/// `foo::bar!` syntax. We handle them similarly to imports. There's a list of\n+/// unexpanded macros. On every iteration, we try to resolve each macro call\n+/// path and, upon success, we run macro expansion and \"collect module\" phase\n+/// on the result\n \n mod per_ns;\n mod raw;"}]}