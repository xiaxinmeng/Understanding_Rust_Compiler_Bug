{"sha": "c7710cdf4563533b211a16cb02a9b4cb70ed3ca9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NzEwY2RmNDU2MzUzM2IyMTFhMTZjYjAyYTliNGNiNzBlZDNjYTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-02-09T06:16:42Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-02-09T08:17:41Z"}, "message": "std: Add move_val_init to mem. Replace direct intrinsic usage", "tree": {"sha": "2c1280bdcad9bdd4a60a1df8dc18e4cae127a9aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c1280bdcad9bdd4a60a1df8dc18e4cae127a9aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9", "html_url": "https://github.com/rust-lang/rust/commit/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d433b80e026960b28ba660ebdb09175237e02e05", "url": "https://api.github.com/repos/rust-lang/rust/commits/d433b80e026960b28ba660ebdb09175237e02e05", "html_url": "https://github.com/rust-lang/rust/commit/d433b80e026960b28ba660ebdb09175237e02e05"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "e22f30871baa8639c519fb754aedb54e4f841554", "filename": "src/doc/guide-ffi.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9/src%2Fdoc%2Fguide-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9/src%2Fdoc%2Fguide-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-ffi.md?ref=c7710cdf4563533b211a16cb02a9b4cb70ed3ca9", "patch": "@@ -178,7 +178,6 @@ use std::cast;\n use std::libc::{c_void, size_t, malloc, free};\n use std::mem;\n use std::ptr;\n-use std::unstable::intrinsics;\n \n // Define a wrapper around the handle returned by the foreign code.\n // Unique<T> has the same semantics as ~T\n@@ -200,7 +199,7 @@ impl<T: Send> Unique<T> {\n             // `*ptr` is uninitialized, and `*ptr = value` would attempt to destroy it\n             // move_val_init moves a value into this memory without\n             // attempting to drop the original value.\n-            intrinsics::move_val_init(&mut *ptr, value);\n+            mem::move_val_init(&mut *ptr, value);\n             Unique{ptr: ptr}\n         }\n     }"}, {"sha": "5ce034f26654913e097d29d66d5c6e0162d10f3c", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=c7710cdf4563533b211a16cb02a9b4cb70ed3ca9", "patch": "@@ -32,10 +32,10 @@ use collections::list;\n use std::cast::{transmute, transmute_mut, transmute_mut_region};\n use std::cast;\n use std::cell::{Cell, RefCell};\n+use std::mem;\n use std::num;\n use std::ptr;\n use std::kinds::marker;\n-use std::mem;\n use std::rc::Rc;\n use std::rt::global_heap;\n use std::unstable::intrinsics::{TyDesc, get_tydesc};\n@@ -216,7 +216,7 @@ impl Arena {\n         unsafe {\n             let ptr = self.alloc_pod_inner(mem::size_of::<T>(), mem::min_align_of::<T>());\n             let ptr: *mut T = transmute(ptr);\n-            intrinsics::move_val_init(&mut (*ptr), op());\n+            mem::move_val_init(&mut (*ptr), op());\n             return transmute(ptr);\n         }\n     }\n@@ -278,7 +278,7 @@ impl Arena {\n             // has *not* been initialized yet.\n             *ty_ptr = transmute(tydesc);\n             // Actually initialize it\n-            intrinsics::move_val_init(&mut(*ptr), op());\n+            mem::move_val_init(&mut(*ptr), op());\n             // Now that we are done, update the tydesc to indicate that\n             // the object is there.\n             *ty_ptr = bitpack_tydesc_ptr(tydesc, true);\n@@ -379,7 +379,7 @@ impl TypedArenaChunk {\n         let mut chunk = unsafe {\n             let chunk = global_heap::exchange_malloc(size);\n             let mut chunk: ~TypedArenaChunk = cast::transmute(chunk);\n-            intrinsics::move_val_init(&mut chunk.next, next);\n+            mem::move_val_init(&mut chunk.next, next);\n             chunk\n         };\n \n@@ -466,7 +466,7 @@ impl<T> TypedArena<T> {\n             }\n \n             let ptr: &'a mut T = cast::transmute(this.ptr);\n-            intrinsics::move_val_init(ptr, object);\n+            mem::move_val_init(ptr, object);\n             this.ptr = this.ptr.offset(1);\n             let ptr: &'a T = ptr;\n             ptr"}, {"sha": "beac40308c021082d4ba535f07bbf2682b846338", "filename": "src/libcollections/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9/src%2Flibcollections%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9/src%2Flibcollections%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fpriority_queue.rs?ref=c7710cdf4563533b211a16cb02a9b4cb70ed3ca9", "patch": "@@ -13,7 +13,7 @@\n #[allow(missing_doc)];\n \n use std::clone::Clone;\n-use std::unstable::intrinsics::{move_val_init, init};\n+use std::mem::{move_val_init, init};\n use std::util::{replace, swap};\n use std::vec;\n "}, {"sha": "c1cf226a8f287a7cc51166d5f9f07ede39cd8eee", "filename": "src/libstd/mem.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9/src%2Flibstd%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9/src%2Flibstd%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmem.rs?ref=c7710cdf4563533b211a16cb02a9b4cb70ed3ca9", "patch": "@@ -83,6 +83,15 @@ pub unsafe fn uninit<T>() -> T {\n     intrinsics::uninit()\n }\n \n+/// Move a value to an uninitialized memory location.\n+///\n+/// Drop glue is not run on the destination.\n+#[inline]\n+pub unsafe fn move_val_init<T>(dst: &mut T, src: T) {\n+    intrinsics::move_val_init(dst, src)\n+}\n+\n+\n #[cfg(test)]\n mod tests {\n     use mem::*;"}, {"sha": "85413cb5bd6623dbfffe455cdd5fa484f03ae129", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=c7710cdf4563533b211a16cb02a9b4cb70ed3ca9", "patch": "@@ -120,7 +120,6 @@ use mem::size_of;\n use kinds::marker;\n use uint;\n use unstable::finally::Finally;\n-use unstable::intrinsics;\n use unstable::raw::{Repr, Slice, Vec};\n use util;\n \n@@ -137,7 +136,7 @@ pub fn from_fn<T>(n_elts: uint, op: |uint| -> T) -> ~[T] {\n         let mut i: uint = 0u;\n         (|| {\n             while i < n_elts {\n-                intrinsics::move_val_init(&mut(*ptr::mut_offset(p, i as int)), op(i));\n+                mem::move_val_init(&mut(*ptr::mut_offset(p, i as int)), op(i));\n                 i += 1u;\n             }\n         }).finally(|| {\n@@ -164,7 +163,7 @@ pub fn from_elem<T:Clone>(n_elts: uint, t: T) -> ~[T] {\n         let mut i = 0u;\n         (|| {\n             while i < n_elts {\n-                intrinsics::move_val_init(&mut(*ptr::mut_offset(p, i as int)), t.clone());\n+                mem::move_val_init(&mut(*ptr::mut_offset(p, i as int)), t.clone());\n                 i += 1u;\n             }\n         }).finally(|| {\n@@ -1495,7 +1494,7 @@ impl<T> OwnedVector<T> for ~[T] {\n             (**repr).fill += mem::nonzero_size_of::<T>();\n             let p = to_unsafe_ptr(&((**repr).data));\n             let p = ptr::offset(p, fill as int) as *mut T;\n-            intrinsics::move_val_init(&mut(*p), t);\n+            mem::move_val_init(&mut(*p), t);\n         }\n     }\n \n@@ -1552,7 +1551,7 @@ impl<T> OwnedVector<T> for ~[T] {\n             ptr::copy_memory(p.offset(1), p, len - i);\n             // Write it in, overwriting the first copy of the `i`th\n             // element.\n-            intrinsics::move_val_init(&mut *p, x);\n+            mem::move_val_init(&mut *p, x);\n             self.set_len(len + 1);\n         }\n     }\n@@ -2397,7 +2396,7 @@ impl<'a,T> MutableVector<'a, T> for &'a mut [T] {\n \n     #[inline]\n     unsafe fn init_elem(self, i: uint, val: T) {\n-        intrinsics::move_val_init(&mut (*self.as_mut_ptr().offset(i as int)), val);\n+        mem::move_val_init(&mut (*self.as_mut_ptr().offset(i as int)), val);\n     }\n \n     #[inline]"}, {"sha": "90bc5836240124e6c6c43e798f9367286a57e113", "filename": "src/libstd/vec_ng.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9/src%2Flibstd%2Fvec_ng.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9/src%2Flibstd%2Fvec_ng.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec_ng.rs?ref=c7710cdf4563533b211a16cb02a9b4cb70ed3ca9", "patch": "@@ -17,14 +17,13 @@ use clone::Clone;\n use iter::{DoubleEndedIterator, Iterator};\n use num::CheckedMul;\n use container::Container;\n-use mem::size_of;\n+use mem::{size_of, move_val_init};\n use cast::{forget, transmute};\n use rt::global_heap::{malloc_raw, realloc_raw};\n use vec::{ImmutableVector, Items, MutableVector};\n use unstable::raw::Slice;\n use ptr::{offset, read_ptr};\n use libc::{free, c_void};\n-use unstable::intrinsics::move_val_init;\n \n pub struct Vec<T> {\n     priv len: uint,"}, {"sha": "ea067bc65cb7417292ffa39135cf3cf6663dd372", "filename": "src/test/run-pass/type-use-i1-versus-i8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9/src%2Ftest%2Frun-pass%2Ftype-use-i1-versus-i8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7710cdf4563533b211a16cb02a9b4cb70ed3ca9/src%2Ftest%2Frun-pass%2Ftype-use-i1-versus-i8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-use-i1-versus-i8.rs?ref=c7710cdf4563533b211a16cb02a9b4cb70ed3ca9", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::unstable;\n+use std::mem;\n \n pub fn main() {\n     unsafe {\n         let mut x: bool = false;\n         // this line breaks it\n-        unstable::intrinsics::move_val_init(&mut x, false);\n+        mem::move_val_init(&mut x, false);\n     }\n }"}]}