{"sha": "c2f59483f96cf1ab1e92cf10e0f9094432a8374c", "node_id": "C_kwDOAAsO6NoAKGMyZjU5NDgzZjk2Y2YxYWIxZTkyY2YxMGUwZjkwOTQ0MzJhODM3NGM", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-09-22T01:55:05Z"}, "committer": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-09-22T02:42:31Z"}, "message": "Feature-flag fused mul-add to block libcalls", "tree": {"sha": "6d4a25c1d9b573a199cf65725bfaed3fc4df42eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d4a25c1d9b573a199cf65725bfaed3fc4df42eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2f59483f96cf1ab1e92cf10e0f9094432a8374c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2f59483f96cf1ab1e92cf10e0f9094432a8374c", "html_url": "https://github.com/rust-lang/rust/commit/c2f59483f96cf1ab1e92cf10e0f9094432a8374c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2f59483f96cf1ab1e92cf10e0f9094432a8374c/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d3d07abfede1f885230ecefa2a076919ef6290c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3d07abfede1f885230ecefa2a076919ef6290c", "html_url": "https://github.com/rust-lang/rust/commit/6d3d07abfede1f885230ecefa2a076919ef6290c"}], "stats": {"total": 47, "additions": 25, "deletions": 22}, "files": [{"sha": "5783950f353e553c1bcbb8524e7c036c3f93704f", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c2f59483f96cf1ab1e92cf10e0f9094432a8374c/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2f59483f96cf1ab1e92cf10e0f9094432a8374c/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=c2f59483f96cf1ab1e92cf10e0f9094432a8374c", "patch": "@@ -46,13 +46,6 @@ extern \"platform-intrinsic\" {\n     /// fabs\n     pub(crate) fn simd_fabs<T>(x: T) -> T;\n \n-    /// fsqrt\n-    #[cfg(feature = \"std\")]\n-    pub(crate) fn simd_fsqrt<T>(x: T) -> T;\n-\n-    /// fma\n-    pub(crate) fn simd_fma<T>(x: T, y: T, z: T) -> T;\n-\n     pub(crate) fn simd_eq<T, U>(x: T, y: T) -> U;\n     pub(crate) fn simd_ne<T, U>(x: T, y: T) -> U;\n     pub(crate) fn simd_lt<T, U>(x: T, y: T) -> U;\n@@ -110,6 +103,12 @@ mod std {\n \n         // trunc\n         pub(crate) fn simd_trunc<T>(x: T) -> T;\n+\n+        // fsqrt\n+        pub(crate) fn simd_fsqrt<T>(x: T) -> T;\n+\n+        // fma\n+        pub(crate) fn simd_fma<T>(x: T, y: T, z: T) -> T;\n     }\n }\n "}, {"sha": "c09d0ac84d246c24d8051a02a3373c93d75930b7", "filename": "crates/core_simd/src/vector/float.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2f59483f96cf1ab1e92cf10e0f9094432a8374c/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2f59483f96cf1ab1e92cf10e0f9094432a8374c/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs?ref=c2f59483f96cf1ab1e92cf10e0f9094432a8374c", "patch": "@@ -42,6 +42,7 @@ macro_rules! impl_float_vector {\n             /// architecture has a dedicated `fma` CPU instruction.  However, this is not always\n             /// true, and will be heavily dependent on designing algorithms with specific target\n             /// hardware in mind.\n+            #[cfg(feature = \"std\")]\n             #[inline]\n             pub fn mul_add(self, a: Self, b: Self) -> Self {\n                 unsafe { intrinsics::simd_fma(self, a, b) }"}, {"sha": "31b7ee2069590a516970b5925c0628346dd64ca2", "filename": "crates/core_simd/tests/ops_macros.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c2f59483f96cf1ab1e92cf10e0f9094432a8374c/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2f59483f96cf1ab1e92cf10e0f9094432a8374c/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_macros.rs?ref=c2f59483f96cf1ab1e92cf10e0f9094432a8374c", "patch": "@@ -437,14 +437,6 @@ macro_rules! impl_float_tests {\n                     )\n                 }\n \n-                fn mul_add<const LANES: usize>() {\n-                    test_helpers::test_ternary_elementwise(\n-                        &Vector::<LANES>::mul_add,\n-                        &Scalar::mul_add,\n-                        &|_, _, _| true,\n-                    )\n-                }\n-\n                 fn recip<const LANES: usize>() {\n                     test_helpers::test_unary_elementwise(\n                         &Vector::<LANES>::recip,\n@@ -601,13 +593,24 @@ macro_rules! impl_float_tests {\n             }\n \n             #[cfg(feature = \"std\")]\n-            test_helpers::test_lanes! {\n-                fn sqrt<const LANES: usize>() {\n-                    test_helpers::test_unary_elementwise(\n-                        &Vector::<LANES>::sqrt,\n-                        &Scalar::sqrt,\n-                        &|_| true,\n-                    )\n+            mod std {\n+                use super::*;\n+                test_helpers::test_lanes! {\n+                    fn sqrt<const LANES: usize>() {\n+                        test_helpers::test_unary_elementwise(\n+                            &Vector::<LANES>::sqrt,\n+                            &Scalar::sqrt,\n+                            &|_| true,\n+                        )\n+                    }\n+\n+                    fn mul_add<const LANES: usize>() {\n+                        test_helpers::test_ternary_elementwise(\n+                            &Vector::<LANES>::mul_add,\n+                            &Scalar::mul_add,\n+                            &|_, _, _| true,\n+                        )\n+                    }\n                 }\n             }\n         }"}]}