{"sha": "40b324f0dec364a9fa71f9f8b47b8ab156f6d61e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYjMyNGYwZGVjMzY0YTlmYTcxZjlmOGI0N2I4YWIxNTZmNmQ2MWU=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-16T03:01:33Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-16T17:26:48Z"}, "message": "path2: Remove Path.into_str()", "tree": {"sha": "4f2bc03c69e8361aa9b17a0e418ea5f98a880a05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f2bc03c69e8361aa9b17a0e418ea5f98a880a05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40b324f0dec364a9fa71f9f8b47b8ab156f6d61e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40b324f0dec364a9fa71f9f8b47b8ab156f6d61e", "html_url": "https://github.com/rust-lang/rust/commit/40b324f0dec364a9fa71f9f8b47b8ab156f6d61e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40b324f0dec364a9fa71f9f8b47b8ab156f6d61e/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c7e8f7a92318d19fd9de96ba70fa36fc41de1e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c7e8f7a92318d19fd9de96ba70fa36fc41de1e2", "html_url": "https://github.com/rust-lang/rust/commit/0c7e8f7a92318d19fd9de96ba70fa36fc41de1e2"}], "stats": {"total": 19, "additions": 0, "deletions": 19}, "files": [{"sha": "4962b63c8cff6aa6478bf0aed51dc2d3250e88a5", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40b324f0dec364a9fa71f9f8b47b8ab156f6d61e/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40b324f0dec364a9fa71f9f8b47b8ab156f6d61e/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=40b324f0dec364a9fa71f9f8b47b8ab156f6d61e", "patch": "@@ -179,9 +179,6 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n         str::from_utf8_slice_opt(self.as_vec())\n     }\n \n-    /// Converts the Path into an owned string, if possible\n-    fn into_str(self) -> Option<~str>;\n-\n     /// Returns the path as a byte vector\n     fn as_vec<'a>(&'a self) -> &'a [u8];\n "}, {"sha": "5eea65a5b919c9949be6ee310cd1d9572a7c5891", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/40b324f0dec364a9fa71f9f8b47b8ab156f6d61e/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40b324f0dec364a9fa71f9f8b47b8ab156f6d61e/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=40b324f0dec364a9fa71f9f8b47b8ab156f6d61e", "patch": "@@ -178,10 +178,6 @@ impl GenericPath for Path {\n         self.repr\n     }\n \n-    fn into_str(self) -> Option<~str> {\n-        str::from_utf8_owned_opt(self.repr)\n-    }\n-\n     fn dirname<'a>(&'a self) -> &'a [u8] {\n         match self.sepidx {\n             None if bytes!(\"..\") == self.repr => self.repr.as_slice(),\n@@ -614,12 +610,9 @@ mod tests {\n         assert_eq!(Path::new(b!(\"foo/bar\")).into_vec(), b!(\"foo/bar\").to_owned());\n         assert_eq!(Path::new(b!(\"/foo/../../bar\")).into_vec(),\n                    b!(\"/bar\").to_owned());\n-        assert_eq!(Path::new(\"foo/bar\").into_str(), Some(~\"foo/bar\"));\n-        assert_eq!(Path::new(\"/foo/../../bar\").into_str(), Some(~\"/bar\"));\n \n         let p = Path::new(b!(\"foo/bar\", 0x80));\n         assert_eq!(p.as_str(), None);\n-        assert_eq!(Path::new(b!(\"foo\", 0xff, \"/bar\")).into_str(), None);\n     }\n \n     #[test]"}, {"sha": "9576e62f439260de9c5d0dbff48e71156e075ea2", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/40b324f0dec364a9fa71f9f8b47b8ab156f6d61e/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40b324f0dec364a9fa71f9f8b47b8ab156f6d61e/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=40b324f0dec364a9fa71f9f8b47b8ab156f6d61e", "patch": "@@ -327,13 +327,6 @@ impl GenericPath for Path {\n         Some(self.repr.as_slice())\n     }\n \n-    /// See `GenericPath::into_str` for info.\n-    /// Always returns a `Some` value.\n-    #[inline]\n-    fn into_str(self) -> Option<~str> {\n-        Some(self.repr)\n-    }\n-\n     #[inline]\n     fn as_vec<'a>(&'a self) -> &'a [u8] {\n         self.repr.as_bytes()\n@@ -1260,8 +1253,6 @@ mod tests {\n         assert_eq!(Path::new(b!(\"foo\\\\bar\")).into_vec(), b!(\"foo\\\\bar\").to_owned());\n         assert_eq!(Path::new(b!(\"\\\\foo\\\\..\\\\..\\\\bar\")).into_vec(),\n                    b!(\"\\\\bar\").to_owned());\n-        assert_eq!(Path::new(\"foo\\\\bar\").into_str(), Some(~\"foo\\\\bar\"));\n-        assert_eq!(Path::new(\"\\\\foo\\\\..\\\\..\\\\bar\").into_str(), Some(~\"\\\\bar\"));\n \n         t!(s: Path::new(\"\\\\\\\\a\"), \"\\\\a\");\n         t!(s: Path::new(\"\\\\\\\\a\\\\\"), \"\\\\a\");"}]}