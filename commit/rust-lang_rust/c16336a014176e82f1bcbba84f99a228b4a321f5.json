{"sha": "c16336a014176e82f1bcbba84f99a228b4a321f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNjMzNmEwMTQxNzZlODJmMWJjYmJhODRmOTlhMjI4YjRhMzIxZjU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-20T09:57:45Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-20T09:57:45Z"}, "message": "move loop detector constants to the module that uses them; make lifetime order in ConstPropagator consistent with Memory", "tree": {"sha": "ba9ca544a45676a7a6ea065d4c21952b975c9895", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba9ca544a45676a7a6ea065d4c21952b975c9895"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c16336a014176e82f1bcbba84f99a228b4a321f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c16336a014176e82f1bcbba84f99a228b4a321f5", "html_url": "https://github.com/rust-lang/rust/commit/c16336a014176e82f1bcbba84f99a228b4a321f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c16336a014176e82f1bcbba84f99a228b4a321f5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1453dda0f69148ba1ec627b3f9770603b7817d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1453dda0f69148ba1ec627b3f9770603b7817d4", "html_url": "https://github.com/rust-lang/rust/commit/b1453dda0f69148ba1ec627b3f9770603b7817d4"}], "stats": {"total": 57, "additions": 28, "deletions": 29}, "files": [{"sha": "bde0e95d372f590868631ffec4010ae6af200c6f", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c16336a014176e82f1bcbba84f99a228b4a321f5/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16336a014176e82f1bcbba84f99a228b4a321f5/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=c16336a014176e82f1bcbba84f99a228b4a321f5", "patch": "@@ -34,6 +34,13 @@ use interpret::{self,\n     snapshot,\n };\n \n+/// Number of steps until the detector even starts doing anything.\n+/// Also, a warning is shown to the user when this number is reached.\n+const STEPS_UNTIL_DETECTOR_ENABLED: isize = 1_000_000;\n+/// The number of steps between loop detector snapshots.\n+/// Should be a power of two for performance reasons.\n+const DETECTOR_SNAPSHOT_PERIOD: isize = 256;\n+\n pub fn mk_borrowck_eval_cx<'a, 'mir, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     instance: Instance<'tcx>,\n@@ -245,7 +252,7 @@ impl<'a, 'mir, 'tcx> CompileTimeInterpreter<'a, 'mir, 'tcx> {\n     fn new() -> Self {\n         CompileTimeInterpreter {\n             loop_detector: Default::default(),\n-            steps_since_detector_enabled: -snapshot::STEPS_UNTIL_DETECTOR_ENABLED,\n+            steps_since_detector_enabled: -STEPS_UNTIL_DETECTOR_ENABLED,\n         }\n     }\n }\n@@ -349,22 +356,15 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n                 return Ok(());\n             }\n \n-            *steps %= snapshot::DETECTOR_SNAPSHOT_PERIOD;\n+            *steps %= DETECTOR_SNAPSHOT_PERIOD;\n             if *steps != 0 {\n                 return Ok(());\n             }\n         }\n \n-        if ecx.machine.loop_detector.is_empty() {\n-            // First run of the loop detector\n-\n-            // FIXME(#49980): make this warning a lint\n-            ecx.tcx.sess.span_warn(ecx.frame().span,\n-                \"Constant evaluating a complex constant, this might take some time\");\n-        }\n-\n         ecx.machine.loop_detector.observe_and_analyze(\n             &ecx.tcx,\n+            ecx.frame().span,\n             &ecx.memory,\n             &ecx.stack[..],\n         )"}, {"sha": "938f2e6db1cd22572fe996331366cff91575990c", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c16336a014176e82f1bcbba84f99a228b4a321f5/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16336a014176e82f1bcbba84f99a228b4a321f5/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=c16336a014176e82f1bcbba84f99a228b4a321f5", "patch": "@@ -28,13 +28,6 @@ use super::eval_context::{LocalValue, StackPopCleanup};\n use super::{Frame, Memory, Operand, MemPlace, Place, Value};\n use const_eval::CompileTimeInterpreter;\n \n-/// Number of steps until the detector even starts doing anything.\n-/// Also, a warning is shown to the user when this number is reached.\n-pub(crate) const STEPS_UNTIL_DETECTOR_ENABLED: isize = 1_000_000;\n-/// The number of steps between loop detector snapshots.\n-/// Should be a power of two for performance reasons.\n-pub(crate) const DETECTOR_SNAPSHOT_PERIOD: isize = 256;\n-\n #[derive(Default)]\n pub(crate) struct InfiniteLoopDetector<'a, 'mir, 'tcx: 'a + 'mir> {\n     /// The set of all `EvalSnapshot` *hashes* observed by this detector.\n@@ -53,28 +46,31 @@ pub(crate) struct InfiniteLoopDetector<'a, 'mir, 'tcx: 'a + 'mir> {\n \n impl<'a, 'mir, 'tcx> InfiniteLoopDetector<'a, 'mir, 'tcx>\n {\n-    /// Returns `true` if the loop detector has not yet observed a snapshot.\n-    pub fn is_empty(&self) -> bool {\n-        self.hashes.is_empty()\n-    }\n-\n     pub fn observe_and_analyze<'b>(\n         &mut self,\n         tcx: &TyCtxt<'b, 'tcx, 'tcx>,\n+        span: Span,\n         memory: &Memory<'a, 'mir, 'tcx, CompileTimeInterpreter<'a, 'mir, 'tcx>>,\n         stack: &[Frame<'mir, 'tcx>],\n     ) -> EvalResult<'tcx, ()> {\n-\n+        // Compute stack's hash before copying anything\n         let mut hcx = tcx.get_stable_hashing_context();\n         let mut hasher = StableHasher::<u64>::new();\n         stack.hash_stable(&mut hcx, &mut hasher);\n         let hash = hasher.finish();\n \n+        // Check if we know that hash already\n+        if self.hashes.is_empty() {\n+            // FIXME(#49980): make this warning a lint\n+            tcx.sess.span_warn(span,\n+                \"Constant evaluating a complex constant, this might take some time\");\n+        }\n         if self.hashes.insert(hash) {\n             // No collision\n             return Ok(())\n         }\n \n+        // We need to make a full copy. NOW things that to get really expensive.\n         info!(\"snapshotting the state of the interpreter\");\n \n         if self.snapshots.insert(EvalSnapshot::new(memory, stack)) {\n@@ -461,6 +457,9 @@ impl<'a, 'mir, 'tcx> Eq for EvalSnapshot<'a, 'mir, 'tcx>\n impl<'a, 'mir, 'tcx> PartialEq for EvalSnapshot<'a, 'mir, 'tcx>\n {\n     fn eq(&self, other: &Self) -> bool {\n+        // FIXME: This looks to be a *ridicolously expensive* comparison operation.\n+        // Doesn't this make tons of copies?  Either `snapshot` is very badly named,\n+        // or it does!\n         self.snapshot() == other.snapshot()\n     }\n }"}, {"sha": "e2a6cee0549708f6c314b8d1a465a2aab2c987a0", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c16336a014176e82f1bcbba84f99a228b4a321f5/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16336a014176e82f1bcbba84f99a228b4a321f5/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=c16336a014176e82f1bcbba84f99a228b4a321f5", "patch": "@@ -68,9 +68,9 @@ impl MirPass for ConstProp {\n type Const<'tcx> = (OpTy<'tcx>, Span);\n \n /// Finds optimization opportunities on the MIR.\n-struct ConstPropagator<'b, 'a, 'tcx:'a+'b> {\n-    ecx: EvalContext<'a, 'b, 'tcx, CompileTimeInterpreter<'a, 'b, 'tcx>>,\n-    mir: &'b Mir<'tcx>,\n+struct ConstPropagator<'a, 'mir, 'tcx:'a+'mir> {\n+    ecx: EvalContext<'a, 'mir, 'tcx, CompileTimeInterpreter<'a, 'mir, 'tcx>>,\n+    mir: &'mir Mir<'tcx>,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     source: MirSource,\n     places: IndexVec<Local, Option<Const<'tcx>>>,\n@@ -101,12 +101,12 @@ impl<'a, 'b, 'tcx> HasTyCtxt<'tcx> for &'a ConstPropagator<'a, 'b, 'tcx> {\n     }\n }\n \n-impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n+impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n     fn new(\n-        mir: &'b Mir<'tcx>,\n+        mir: &'mir Mir<'tcx>,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         source: MirSource,\n-    ) -> ConstPropagator<'b, 'a, 'tcx> {\n+    ) -> ConstPropagator<'a, 'mir, 'tcx> {\n         let param_env = tcx.param_env(source.def_id);\n         let substs = Substs::identity_for_item(tcx, source.def_id);\n         let instance = Instance::new(source.def_id, substs);"}]}