{"sha": "88d7f0a8daf9c147178e4ea2b1815f6a035ccaa2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZDdmMGE4ZGFmOWMxNDcxNzhlNGVhMmIxODE1ZjZhMDM1Y2NhYTI=", "commit": {"author": {"name": "Daniel Hofstetter", "email": "daniel.hofstetter@42dh.com", "date": "2014-11-01T13:56:48Z"}, "committer": {"name": "Daniel Hofstetter", "email": "daniel.hofstetter@42dh.com", "date": "2014-11-01T13:56:48Z"}, "message": "Guide: Fix variable name", "tree": {"sha": "d697d98466a30be0c0c1d94bafc39a5303f2055c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d697d98466a30be0c0c1d94bafc39a5303f2055c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88d7f0a8daf9c147178e4ea2b1815f6a035ccaa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88d7f0a8daf9c147178e4ea2b1815f6a035ccaa2", "html_url": "https://github.com/rust-lang/rust/commit/88d7f0a8daf9c147178e4ea2b1815f6a035ccaa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88d7f0a8daf9c147178e4ea2b1815f6a035ccaa2/comments", "author": {"login": "cakebaker", "id": 26196, "node_id": "MDQ6VXNlcjI2MTk2", "avatar_url": "https://avatars.githubusercontent.com/u/26196?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cakebaker", "html_url": "https://github.com/cakebaker", "followers_url": "https://api.github.com/users/cakebaker/followers", "following_url": "https://api.github.com/users/cakebaker/following{/other_user}", "gists_url": "https://api.github.com/users/cakebaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/cakebaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cakebaker/subscriptions", "organizations_url": "https://api.github.com/users/cakebaker/orgs", "repos_url": "https://api.github.com/users/cakebaker/repos", "events_url": "https://api.github.com/users/cakebaker/events{/privacy}", "received_events_url": "https://api.github.com/users/cakebaker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cakebaker", "id": 26196, "node_id": "MDQ6VXNlcjI2MTk2", "avatar_url": "https://avatars.githubusercontent.com/u/26196?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cakebaker", "html_url": "https://github.com/cakebaker", "followers_url": "https://api.github.com/users/cakebaker/followers", "following_url": "https://api.github.com/users/cakebaker/following{/other_user}", "gists_url": "https://api.github.com/users/cakebaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/cakebaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cakebaker/subscriptions", "organizations_url": "https://api.github.com/users/cakebaker/orgs", "repos_url": "https://api.github.com/users/cakebaker/repos", "events_url": "https://api.github.com/users/cakebaker/events{/privacy}", "received_events_url": "https://api.github.com/users/cakebaker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0547a407aa03b9f1c03843aead617a2e8c5d1147", "url": "https://api.github.com/repos/rust-lang/rust/commits/0547a407aa03b9f1c03843aead617a2e8c5d1147", "html_url": "https://github.com/rust-lang/rust/commit/0547a407aa03b9f1c03843aead617a2e8c5d1147"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "4128ae9538b6a9a1543a20a84f9f6f0016f8791d", "filename": "src/doc/guide-testing.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88d7f0a8daf9c147178e4ea2b1815f6a035ccaa2/src%2Fdoc%2Fguide-testing.md", "raw_url": "https://github.com/rust-lang/rust/raw/88d7f0a8daf9c147178e4ea2b1815f6a035ccaa2/src%2Fdoc%2Fguide-testing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-testing.md?ref=88d7f0a8daf9c147178e4ea2b1815f6a035ccaa2", "patch": "@@ -287,7 +287,7 @@ The benchmarking runner offers two ways to avoid this. Either, the\n closure that the `iter` method receives can return an arbitrary value\n which forces the optimizer to consider the result used and ensures it\n cannot remove the computation entirely. This could be done for the\n-example above by adjusting the `bh.iter` call to\n+example above by adjusting the `b.iter` call to\n \n ~~~\n # struct X; impl X { fn iter<T>(&self, _: || -> T) {} } let b = X;"}]}