{"sha": "1916732cfd7efa916da3877ca6e823d18221b04b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MTY3MzJjZmQ3ZWZhOTE2ZGEzODc3Y2E2ZTgyM2QxODIyMWIwNGI=", "commit": {"author": {"name": "Jason Toffaletti", "email": "jason@topsy.com", "date": "2013-10-07T08:17:09Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-10-26T01:27:45Z"}, "message": "fix bug introduced by previous clean up. more clean up.", "tree": {"sha": "1c14f21bc3267e15d6a5ba7173552fe98dc504c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c14f21bc3267e15d6a5ba7173552fe98dc504c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1916732cfd7efa916da3877ca6e823d18221b04b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1916732cfd7efa916da3877ca6e823d18221b04b", "html_url": "https://github.com/rust-lang/rust/commit/1916732cfd7efa916da3877ca6e823d18221b04b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1916732cfd7efa916da3877ca6e823d18221b04b/comments", "author": {"login": "toffaletti", "id": 145012, "node_id": "MDQ6VXNlcjE0NTAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/145012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toffaletti", "html_url": "https://github.com/toffaletti", "followers_url": "https://api.github.com/users/toffaletti/followers", "following_url": "https://api.github.com/users/toffaletti/following{/other_user}", "gists_url": "https://api.github.com/users/toffaletti/gists{/gist_id}", "starred_url": "https://api.github.com/users/toffaletti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toffaletti/subscriptions", "organizations_url": "https://api.github.com/users/toffaletti/orgs", "repos_url": "https://api.github.com/users/toffaletti/repos", "events_url": "https://api.github.com/users/toffaletti/events{/privacy}", "received_events_url": "https://api.github.com/users/toffaletti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89c91208a7e1e2a5ce77dcb2032601393d861128", "url": "https://api.github.com/repos/rust-lang/rust/commits/89c91208a7e1e2a5ce77dcb2032601393d861128", "html_url": "https://github.com/rust-lang/rust/commit/89c91208a7e1e2a5ce77dcb2032601393d861128"}], "stats": {"total": 42, "additions": 19, "deletions": 23}, "files": [{"sha": "e10ec7de01766010b0b673696a0955972d30b996", "filename": "src/libstd/rt/mpsc_queue.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1916732cfd7efa916da3877ca6e823d18221b04b/src%2Flibstd%2Frt%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1916732cfd7efa916da3877ca6e823d18221b04b/src%2Flibstd%2Frt%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmpsc_queue.rs?ref=1916732cfd7efa916da3877ca6e823d18221b04b", "patch": "@@ -34,24 +34,20 @@ use ptr::{mut_null, to_mut_unsafe_ptr};\n use cast;\n use option::*;\n use clone::Clone;\n-use default::Default;\n use kinds::Send;\n-use fmt;\n \n struct Node<T> {\n     next: AtomicPtr<Node<T>>,\n     value: Option<T>,\n }\n \n impl<T> Node<T> {\n-    fn new(value: T) -> Node<T> {\n-        Node{next: AtomicPtr::new(mut_null()), value: Some(value)}\n+    fn empty() -> Node<T> {\n+        Node{next: AtomicPtr::new(mut_null()), value: None}\n     }\n-}\n \n-impl<T> Default for Node<T> {\n-    fn default() -> Node<T> {\n-        Node{next: AtomicPtr::new(mut_null()), value: None}\n+    fn with_value(value: T) -> Node<T> {\n+        Node{next: AtomicPtr::new(mut_null()), value: Some(value)}\n     }\n }\n \n@@ -77,27 +73,23 @@ impl<T: Send> Clone for Queue<T> {\n     }\n }\n \n-impl<T: Send> fmt::Default for Queue<T> {\n-    fn fmt(value: &Queue<T>, f: &mut fmt::Formatter) {\n-        write!(f.buf, \"Queue({})\", value.state.get());\n-    }\n-}\n-\n impl<T: Send> State<T> {\n     pub fn new() -> State<T> {\n-        let mut state = State {\n+        State{\n             pad0: [0, ..64],\n             head: AtomicPtr::new(mut_null()),\n             pad1: [0, ..64],\n-            stub: Default::default(),\n+            stub: Node::<T>::empty(),\n             pad2: [0, ..64],\n             tail: mut_null(),\n             pad3: [0, ..64],\n-        };\n-        let stub = state.get_stub_unsafe();\n-        state.head.store(stub, Relaxed);\n-        state.tail = stub;\n-        state\n+        }\n+    }\n+\n+    fn init(&mut self) {\n+        let stub = self.get_stub_unsafe();\n+        self.head.store(stub, Relaxed);\n+        self.tail = stub;\n     }\n \n     fn get_stub_unsafe(&mut self) -> *mut Node<T> {\n@@ -106,7 +98,7 @@ impl<T: Send> State<T> {\n \n     fn push(&mut self, value: T) {\n         unsafe {\n-            let node = cast::transmute(~Node::new(value));\n+            let node = cast::transmute(~Node::with_value(value));\n             self.push_node(node);\n         }\n     }\n@@ -155,7 +147,11 @@ impl<T: Send> State<T> {\n \n impl<T: Send> Queue<T> {\n     pub fn new() -> Queue<T> {\n-        Queue{state: UnsafeArc::new(State::new())}\n+        unsafe {\n+            let mut q = Queue{state: UnsafeArc::new(State::new())};\n+            (*q.state.get()).init();\n+            q\n+        }\n     }\n \n     pub fn push(&mut self, value: T) {"}]}