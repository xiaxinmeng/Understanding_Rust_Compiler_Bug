{"sha": "442f848d74c4c3b89e9358a2dced1518f406cbb6", "node_id": "C_kwDOAAsO6NoAKDQ0MmY4NDhkNzRjNGMzYjg5ZTkzNThhMmRjZWQxNTE4ZjQwNmNiYjY", "commit": {"author": {"name": "cui fliter", "email": "imcusg@gmail.com", "date": "2022-11-13T07:26:17Z"}, "committer": {"name": "cui fliter", "email": "imcusg@gmail.com", "date": "2022-11-13T07:26:17Z"}, "message": "fix some typos in comments\n\nSigned-off-by: cui fliter <imcusg@gmail.com>", "tree": {"sha": "f35e794467cb38203e0e0edbfbc71769f4035d28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f35e794467cb38203e0e0edbfbc71769f4035d28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/442f848d74c4c3b89e9358a2dced1518f406cbb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/442f848d74c4c3b89e9358a2dced1518f406cbb6", "html_url": "https://github.com/rust-lang/rust/commit/442f848d74c4c3b89e9358a2dced1518f406cbb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/442f848d74c4c3b89e9358a2dced1518f406cbb6/comments", "author": {"login": "cuishuang", "id": 15921519, "node_id": "MDQ6VXNlcjE1OTIxNTE5", "avatar_url": "https://avatars.githubusercontent.com/u/15921519?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuishuang", "html_url": "https://github.com/cuishuang", "followers_url": "https://api.github.com/users/cuishuang/followers", "following_url": "https://api.github.com/users/cuishuang/following{/other_user}", "gists_url": "https://api.github.com/users/cuishuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuishuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuishuang/subscriptions", "organizations_url": "https://api.github.com/users/cuishuang/orgs", "repos_url": "https://api.github.com/users/cuishuang/repos", "events_url": "https://api.github.com/users/cuishuang/events{/privacy}", "received_events_url": "https://api.github.com/users/cuishuang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuishuang", "id": 15921519, "node_id": "MDQ6VXNlcjE1OTIxNTE5", "avatar_url": "https://avatars.githubusercontent.com/u/15921519?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuishuang", "html_url": "https://github.com/cuishuang", "followers_url": "https://api.github.com/users/cuishuang/followers", "following_url": "https://api.github.com/users/cuishuang/following{/other_user}", "gists_url": "https://api.github.com/users/cuishuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuishuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuishuang/subscriptions", "organizations_url": "https://api.github.com/users/cuishuang/orgs", "repos_url": "https://api.github.com/users/cuishuang/repos", "events_url": "https://api.github.com/users/cuishuang/events{/privacy}", "received_events_url": "https://api.github.com/users/cuishuang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "229e875878a682411df8b8adae39372302d2b4c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/229e875878a682411df8b8adae39372302d2b4c7", "html_url": "https://github.com/rust-lang/rust/commit/229e875878a682411df8b8adae39372302d2b4c7"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "8717a325fa5cd343dc68e9f2f8518516be6000d5", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=442f848d74c4c3b89e9358a2dced1518f406cbb6", "patch": "@@ -376,7 +376,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     /// Read an immediate from a place, asserting that that is possible with the given layout.\n     ///\n-    /// If this suceeds, the `ImmTy` is never `Uninit`.\n+    /// If this succeeds, the `ImmTy` is never `Uninit`.\n     #[inline(always)]\n     pub fn read_immediate(\n         &self,"}, {"sha": "5e17d8a021e96cf82fe1089ab864c33221a5cf1f", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=442f848d74c4c3b89e9358a2dced1518f406cbb6", "patch": "@@ -333,7 +333,7 @@ fn expand_macro<'cx>(\n     assert!(try_success_result.is_err(), \"Macro matching returned a success on the second try\");\n \n     if let Some(result) = tracker.result {\n-        // An irrecoverable error occured and has been emitted.\n+        // An irrecoverable error occurred and has been emitted.\n         return result;\n     }\n "}, {"sha": "01477265f6175529dc07027e19467841c1ff72cd", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=442f848d74c4c3b89e9358a2dced1518f406cbb6", "patch": "@@ -147,7 +147,7 @@ pub enum AttributeDuplicates {\n     FutureWarnPreceding,\n }\n \n-/// A conveniece macro to deal with `$($expr)?`.\n+/// A convenience macro to deal with `$($expr)?`.\n macro_rules! or_default {\n     ($default:expr,) => {\n         $default"}, {"sha": "8d3acee48884d11aeced9a66eb442c4338176986", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=442f848d74c4c3b89e9358a2dced1518f406cbb6", "patch": "@@ -35,7 +35,7 @@ struct ClosureSignatures<'tcx> {\n     bound_sig: ty::PolyFnSig<'tcx>,\n     /// The signature within the function body.\n     /// This mostly differs in the sense that lifetimes are now early bound and any\n-    /// opaque types from the signature expectation are overriden in case there are\n+    /// opaque types from the signature expectation are overridden in case there are\n     /// explicit hidden types written by the user in the closure signature.\n     liberated_sig: ty::FnSig<'tcx>,\n }"}, {"sha": "3e2efb7d3610d23a54afdef59b37a1ce543ffd5d", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=442f848d74c4c3b89e9358a2dced1518f406cbb6", "patch": "@@ -360,7 +360,7 @@ fn lint_int_literal<'tcx>(\n         }\n \n         if lint_overflowing_range_endpoint(cx, lit, v, max, e, t.name_str()) {\n-            // The overflowing literal lint was emited by `lint_overflowing_range_endpoint`.\n+            // The overflowing literal lint was emitted by `lint_overflowing_range_endpoint`.\n             return;\n         }\n \n@@ -429,7 +429,7 @@ fn lint_uint_literal<'tcx>(\n             }\n         }\n         if lint_overflowing_range_endpoint(cx, lit, lit_val, max, e, t.name_str()) {\n-            // The overflowing literal lint was emited by `lint_overflowing_range_endpoint`.\n+            // The overflowing literal lint was emitted by `lint_overflowing_range_endpoint`.\n             return;\n         }\n         if let Some(repr_str) = get_bin_hex_repr(cx, lit) {"}, {"sha": "4781651071d38a6207e873b8573576af6a5936e7", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=442f848d74c4c3b89e9358a2dced1518f406cbb6", "patch": "@@ -1541,7 +1541,7 @@ impl<'tcx> Place<'tcx> {\n     /// If MirPhase >= Derefered and if projection contains Deref,\n     /// It's guaranteed to be in the first place\n     pub fn has_deref(&self) -> bool {\n-        // To make sure this is not accidently used in wrong mir phase\n+        // To make sure this is not accidentally used in wrong mir phase\n         debug_assert!(\n             self.projection.is_empty() || !self.projection[1..].contains(&PlaceElem::Deref)\n         );"}, {"sha": "fed943169dfb542b2b2913270df4bc4bd4599da9", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=442f848d74c4c3b89e9358a2dced1518f406cbb6", "patch": "@@ -85,7 +85,7 @@ pub enum MirPhase {\n     ///\n     /// Also note that the lint pass which reports eg `200_u8 + 200_u8` as an error is run as a part\n     /// of analysis to runtime MIR lowering. To ensure lints are reported reliably, this means that\n-    /// transformations which may supress such errors should not run on analysis MIR.\n+    /// transformations which may suppress such errors should not run on analysis MIR.\n     Runtime(RuntimePhase),\n }\n "}, {"sha": "db05592ed0ea5fa27a24a8b0f1bce32545c5987a", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=442f848d74c4c3b89e9358a2dced1518f406cbb6", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     else_block: Some(else_block),\n                 } => {\n                     // When lowering the statement `let <pat> = <expr> else { <else> };`,\n-                    // the `<else>` block is nested in the parent scope enclosing this statment.\n+                    // the `<else>` block is nested in the parent scope enclosing this statement.\n                     // That scope is usually either the enclosing block scope,\n                     // or the remainder scope of the last statement.\n                     // This is to make sure that temporaries instantiated in `<expr>` are dropped"}, {"sha": "82dcc7efb1bafce5082b07f045342b366ae07bb6", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=442f848d74c4c3b89e9358a2dced1518f406cbb6", "patch": "@@ -72,7 +72,7 @@ impl<'r, 'a> EffectiveVisibilitiesVisitor<'r, 'a> {\n                 update(node_id);\n                 if let ImportKind::Single { additional_ids: (id1, id2), .. } = import.kind {\n                     // In theory all the single import IDs have individual visibilities and\n-                    // effective visibilities, but in practice these IDs go straigth to HIR\n+                    // effective visibilities, but in practice these IDs go straight to HIR\n                     // where all their few uses assume that their (effective) visibility\n                     // applies to the whole syntactic `use` item. So they all get the same\n                     // value which is the maximum of all bindings. Maybe HIR for imports"}, {"sha": "664592b02a12443cc34ebbd6b94f90498de57728", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442f848d74c4c3b89e9358a2dced1518f406cbb6/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=442f848d74c4c3b89e9358a2dced1518f406cbb6", "patch": "@@ -114,7 +114,7 @@ pub enum Lld {\n /// relevant now.\n ///\n /// The second goal is to keep the number of flavors to the minimum if possible.\n-/// LLD somewhat forces our hand here because that linker is self-sufficent only if its executable\n+/// LLD somewhat forces our hand here because that linker is self-sufficient only if its executable\n /// (`argv[0]`) is named in specific way, otherwise it doesn't work and requires a\n /// `-flavor LLD_FLAVOR` argument to choose which logic to use. Our shipped `rust-lld` in\n /// particular is not named in such specific way, so it needs the flavor option, so we make our"}, {"sha": "acfbd072121a13491fe2845d1f06361bc27ac2bf", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/442f848d74c4c3b89e9358a2dced1518f406cbb6/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442f848d74c4c3b89e9358a2dced1518f406cbb6/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=442f848d74c4c3b89e9358a2dced1518f406cbb6", "patch": "@@ -674,7 +674,7 @@ impl FromWithTcx<clean::Variant> for Variant {\n impl FromWithTcx<clean::Discriminant> for Discriminant {\n     fn from_tcx(disr: clean::Discriminant, tcx: TyCtxt<'_>) -> Self {\n         Discriminant {\n-            // expr is only none if going throught the inlineing path, which gets\n+            // expr is only none if going through the inlineing path, which gets\n             // `rustc_middle` types, not `rustc_hir`, but because JSON never inlines\n             // the expr is always some.\n             expr: disr.expr(tcx).unwrap(),"}, {"sha": "beb70540091388322329b433c7400984a59ebbcc", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/442f848d74c4c3b89e9358a2dced1518f406cbb6/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442f848d74c4c3b89e9358a2dced1518f406cbb6/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=442f848d74c4c3b89e9358a2dced1518f406cbb6", "patch": "@@ -277,7 +277,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n \n         let e = ExternalCrate { crate_num: LOCAL_CRATE };\n \n-        // FIXME(adotinthevoid): Remove this, as it's not consistant with not\n+        // FIXME(adotinthevoid): Remove this, as it's not consistent with not\n         // inlining foreign items.\n         let foreign_trait_items = self.get_trait_items();\n         let mut index = (*self.index).clone().into_inner();"}, {"sha": "817b3e484194f74947063208eaef4b006a807b05", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/442f848d74c4c3b89e9358a2dced1518f406cbb6/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442f848d74c4c3b89e9358a2dced1518f406cbb6/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=442f848d74c4c3b89e9358a2dced1518f406cbb6", "patch": "@@ -53,7 +53,7 @@ pub struct ItemSummary {\n     /// `[\"std\", \"io\", \"lazy\", \"Lazy\"]` for `std::io::lazy::Lazy`).\n     ///\n     /// Note that items can appear in multiple paths, and the one chosen is implementation\n-    /// defined. Currenty, this is the full path to where the item was defined. Eg\n+    /// defined. Currently, this is the full path to where the item was defined. Eg\n     /// [`String`] is currently `[\"alloc\", \"string\", \"String\"]` and [`HashMap`] is\n     /// `[\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"]`, but this is subject to change.\n     pub path: Vec<String>,\n@@ -351,7 +351,7 @@ pub enum Variant {\n     /// A variant with unnamed fields.\n     ///\n     /// Unlike most of json, `#[doc(hidden)]` fields will be given as `None`\n-    /// instead of being ommited, because order matters.\n+    /// instead of being omitted, because order matters.\n     ///\n     /// ```rust\n     /// enum Demo {"}]}