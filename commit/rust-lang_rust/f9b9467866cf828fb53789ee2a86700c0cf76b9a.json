{"sha": "f9b9467866cf828fb53789ee2a86700c0cf76b9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5Yjk0Njc4NjZjZjgyOGZiNTM3ODllZTJhODY3MDBjMGNmNzZiOWE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-13T18:21:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-13T18:21:13Z"}, "message": "Rollup merge of #76640 - fusion-engineering-forks:synconcecell-drop, r=matklad\n\nSimplify SyncOnceCell's `take` and `drop`.\n\nPrevents copies by using `assume_init_read` and `assume_init_drop`.", "tree": {"sha": "76354428753764b290be1c10e14ea65a23e7c81b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76354428753764b290be1c10e14ea65a23e7c81b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9b9467866cf828fb53789ee2a86700c0cf76b9a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfXmMZCRBK7hj4Ov3rIwAAdHIIAK22txeTdDwD1FJr1/K8E6Iw\n0oc97HdZOyKPVKij2yCLHzPaUAK688czW0nZaYW0VnvVCbvZBxb15HtwPXVyQzr1\nDr5qDTYZuKhMroJ0TMREvWoIrKND2o7cjmt7H/azNK4yIJv8s2NsutK+/W5/SC3o\nQjx+me2Iv0mDdWfK8S4lMaQmFnqMPaiYNv32XcrdQBWRUQ3C6XsMZj5VTFbDHsvb\nyJldBcID3hEnYq/pv+1ZqHNmCSOiZfkVVNa/FmAZMoqhp9MZGBMIXnLgDaLwp9NI\nZawJ8+W0waA4UiUlO5qA0r0oJEurfQh2ZG9l2/bwglvvS9mBWLF0BlfSww3unqw=\n=JX81\n-----END PGP SIGNATURE-----\n", "payload": "tree 76354428753764b290be1c10e14ea65a23e7c81b\nparent 148b24f7963e4242563dfb91455047426e60f140\nparent aa68aaa8e1b6c667987b71a83c332f1ce0988e54\nauthor Jonas Schievink <jonasschievink@gmail.com> 1600021273 +0200\ncommitter GitHub <noreply@github.com> 1600021273 +0200\n\nRollup merge of #76640 - fusion-engineering-forks:synconcecell-drop, r=matklad\n\nSimplify SyncOnceCell's `take` and `drop`.\n\nPrevents copies by using `assume_init_read` and `assume_init_drop`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9b9467866cf828fb53789ee2a86700c0cf76b9a", "html_url": "https://github.com/rust-lang/rust/commit/f9b9467866cf828fb53789ee2a86700c0cf76b9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9b9467866cf828fb53789ee2a86700c0cf76b9a/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "148b24f7963e4242563dfb91455047426e60f140", "url": "https://api.github.com/repos/rust-lang/rust/commits/148b24f7963e4242563dfb91455047426e60f140", "html_url": "https://github.com/rust-lang/rust/commit/148b24f7963e4242563dfb91455047426e60f140"}, {"sha": "aa68aaa8e1b6c667987b71a83c332f1ce0988e54", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa68aaa8e1b6c667987b71a83c332f1ce0988e54", "html_url": "https://github.com/rust-lang/rust/commit/aa68aaa8e1b6c667987b71a83c332f1ce0988e54"}], "stats": {"total": 40, "additions": 14, "deletions": 26}, "files": [{"sha": "e0095e64faf312502398333fc434f609b437ef8e", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f9b9467866cf828fb53789ee2a86700c0cf76b9a/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b9467866cf828fb53789ee2a86700c0cf76b9a/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=f9b9467866cf828fb53789ee2a86700c0cf76b9a", "patch": "@@ -7,7 +7,7 @@ use crate::{\n     cell::{Cell, UnsafeCell},\n     fmt,\n     marker::PhantomData,\n-    mem::{self, MaybeUninit},\n+    mem::MaybeUninit,\n     ops::{Deref, Drop},\n     panic::{RefUnwindSafe, UnwindSafe},\n     sync::Once,\n@@ -316,13 +316,7 @@ impl<T> SyncOnceCell<T> {\n     /// ```\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn into_inner(mut self) -> Option<T> {\n-        // SAFETY: Safe because we immediately free `self` without dropping\n-        let inner = unsafe { self.take_inner() };\n-\n-        // Don't drop this `SyncOnceCell`. We just moved out one of the fields, but didn't set\n-        // the state to uninitialized.\n-        mem::forget(self);\n-        inner\n+        self.take()\n     }\n \n     /// Takes the value out of this `SyncOnceCell`, moving it back to an uninitialized state.\n@@ -348,22 +342,12 @@ impl<T> SyncOnceCell<T> {\n     /// ```\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn take(&mut self) -> Option<T> {\n-        mem::take(self).into_inner()\n-    }\n-\n-    /// Takes the wrapped value out of a `SyncOnceCell`.\n-    /// Afterwards the cell is no longer initialized.\n-    ///\n-    /// Safety: The cell must now be free'd WITHOUT dropping. No other usages of the cell\n-    /// are valid. Only used by `into_inner` and `drop`.\n-    unsafe fn take_inner(&mut self) -> Option<T> {\n-        // The mutable reference guarantees there are no other threads that can observe us\n-        // taking out the wrapped value.\n-        // Right after this function `self` is supposed to be freed, so it makes little sense\n-        // to atomically set the state to uninitialized.\n         if self.is_initialized() {\n-            let value = mem::replace(&mut self.value, UnsafeCell::new(MaybeUninit::uninit()));\n-            Some(value.into_inner().assume_init())\n+            self.once = Once::new();\n+            // SAFETY: `self.value` is initialized and contains a valid `T`.\n+            // `self.once` is reset, so `is_initialized()` will be false again\n+            // which prevents the value from being read twice.\n+            unsafe { Some((&mut *self.value.get()).assume_init_read()) }\n         } else {\n             None\n         }\n@@ -416,9 +400,12 @@ impl<T> SyncOnceCell<T> {\n \n unsafe impl<#[may_dangle] T> Drop for SyncOnceCell<T> {\n     fn drop(&mut self) {\n-        // SAFETY: The cell is being dropped, so it can't be accessed again.\n-        // We also don't touch the `T`, which validates our usage of #[may_dangle].\n-        unsafe { self.take_inner() };\n+        if self.is_initialized() {\n+            // Safety: The cell is initialized and being dropped, so it can't\n+            // be accessed again. We also don't touch the `T` other than\n+            // dropping it, which validates our usage of #[may_dangle].\n+            unsafe { (&mut *self.value.get()).assume_init_drop() };\n+        }\n     }\n }\n "}, {"sha": "29ae338cb2ec74bab242190b78187c63d1388e87", "filename": "library/std/src/sync/once.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9b9467866cf828fb53789ee2a86700c0cf76b9a/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b9467866cf828fb53789ee2a86700c0cf76b9a/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs?ref=f9b9467866cf828fb53789ee2a86700c0cf76b9a", "patch": "@@ -191,6 +191,7 @@ struct WaiterQueue<'a> {\n \n impl Once {\n     /// Creates a new `Once` value.\n+    #[inline]\n     #[stable(feature = \"once_new\", since = \"1.2.0\")]\n     #[rustc_const_stable(feature = \"const_once_new\", since = \"1.32.0\")]\n     pub const fn new() -> Once {"}]}