{"sha": "af9dfa36921a66116e2cbd4a2aeb8f8f7e0082e9", "node_id": "C_kwDOAAsO6NoAKGFmOWRmYTM2OTIxYTY2MTE2ZTJjYmQ0YTJhZWI4ZjhmN2UwMDgyZTk", "commit": {"author": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2022-04-23T16:49:40Z"}, "committer": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2022-04-23T17:07:13Z"}, "message": "fix ICE by using a type to return the info we want and also fix some bugs in displaying an extra mut when a TypeAndMut was wrong", "tree": {"sha": "23eb6835408957b9cadbcfbbbdd55c8d307d9db2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23eb6835408957b9cadbcfbbbdd55c8d307d9db2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af9dfa36921a66116e2cbd4a2aeb8f8f7e0082e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af9dfa36921a66116e2cbd4a2aeb8f8f7e0082e9", "html_url": "https://github.com/rust-lang/rust/commit/af9dfa36921a66116e2cbd4a2aeb8f8f7e0082e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af9dfa36921a66116e2cbd4a2aeb8f8f7e0082e9/comments", "author": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "committer": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c922bb9443993df9f32ebf25bed76195cfab11f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c922bb9443993df9f32ebf25bed76195cfab11f2", "html_url": "https://github.com/rust-lang/rust/commit/c922bb9443993df9f32ebf25bed76195cfab11f2"}], "stats": {"total": 169, "additions": 113, "deletions": 56}, "files": [{"sha": "893af60db2c5ecfa2a1582083cdfa359300010a1", "filename": "clippy_lints/src/casts/cast_slice_different_sizes.rs", "status": "modified", "additions": 69, "deletions": 40, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/af9dfa36921a66116e2cbd4a2aeb8f8f7e0082e9/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af9dfa36921a66116e2cbd4a2aeb8f8f7e0082e9/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs?ref=af9dfa36921a66116e2cbd4a2aeb8f8f7e0082e9", "patch": "@@ -8,31 +8,6 @@ use rustc_semver::RustcVersion;\n \n use super::CAST_SLICE_DIFFERENT_SIZES;\n \n-fn is_child_of_cast(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    let map = cx.tcx.hir();\n-    if_chain! {\n-        if let Some(parent_id) = map.find_parent_node(expr.hir_id);\n-        if let Some(parent) = map.find(parent_id);\n-        then {\n-            let expr = match parent {\n-                Node::Block(block) => {\n-                    if let Some(parent_expr) = block.expr {\n-                        parent_expr\n-                    } else {\n-                        return false;\n-                    }\n-                },\n-                Node::Expr(expr) => expr,\n-                _ => return false,\n-            };\n-\n-            matches!(expr.kind, ExprKind::Cast(..))\n-        } else {\n-            false\n-        }\n-    }\n-}\n-\n pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, msrv: &Option<RustcVersion>) {\n     // suggestion is invalid if `ptr::slice_from_raw_parts` does not exist\n     if !meets_msrv(msrv.as_ref(), &msrvs::PTR_SLICE_RAW_PARTS) {\n@@ -45,8 +20,13 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, msrv: &Option<RustcVe\n         return;\n     }\n \n-    if let Some((from_slice_ty, to_slice_ty)) = expr_cast_chain_tys(cx, expr) {\n-        if let (Ok(from_layout), Ok(to_layout)) = (cx.layout_of(from_slice_ty.ty), cx.layout_of(to_slice_ty.ty)) {\n+    if let Some(CastChainInfo {\n+        left_cast,\n+        start_ty,\n+        end_ty,\n+    }) = expr_cast_chain_tys(cx, expr)\n+    {\n+        if let (Ok(from_layout), Ok(to_layout)) = (cx.layout_of(start_ty.ty), cx.layout_of(end_ty.ty)) {\n             let from_size = from_layout.size.bytes();\n             let to_size = to_layout.size.bytes();\n             if from_size != to_size && from_size != 0 && to_size != 0 {\n@@ -56,21 +36,20 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, msrv: &Option<RustcVe\n                     expr.span,\n                     &format!(\n                         \"casting between raw pointers to `[{}]` (element size {}) and `[{}]` (element size {}) does not adjust the count\",\n-                        from_slice_ty, from_size, to_slice_ty, to_size,\n+                        start_ty.ty, from_size, end_ty.ty, to_size,\n                     ),\n                     |diag| {\n-                        let cast_expr = match expr.peel_blocks().kind {\n-                            ExprKind::Cast(cast_expr, ..) => cast_expr,\n-                            _ => unreachable!(\"expr should be a cast as checked by expr_cast_chain_tys\"),\n-                        };\n-                        let ptr_snippet = snippet_opt(cx, cast_expr.span).unwrap();\n+                        let ptr_snippet = snippet_opt(cx, left_cast.span).unwrap();\n \n-                        let (mutbl_fn_str, mutbl_ptr_str) = match to_slice_ty.mutbl {\n+                        let (mutbl_fn_str, mutbl_ptr_str) = match end_ty.mutbl {\n                             Mutability::Mut => (\"_mut\", \"mut\"),\n                             Mutability::Not => (\"\", \"const\"),\n                         };\n                         let sugg = format!(\n-                            \"core::ptr::slice_from_raw_parts{mutbl_fn_str}({ptr_snippet} as *{mutbl_ptr_str} {to_slice_ty}, ..)\"\n+                            \"core::ptr::slice_from_raw_parts{mutbl_fn_str}({ptr_snippet} as *{mutbl_ptr_str} {}, ..)\",\n+                            // get just the ty from the TypeAndMut so that the printed type isn't something like `mut\n+                            // T`, extract just the `T`\n+                            end_ty.ty\n                         );\n \n                         diag.span_suggestion(\n@@ -86,6 +65,31 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, msrv: &Option<RustcVe\n     }\n }\n \n+fn is_child_of_cast(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    let map = cx.tcx.hir();\n+    if_chain! {\n+        if let Some(parent_id) = map.find_parent_node(expr.hir_id);\n+        if let Some(parent) = map.find(parent_id);\n+        then {\n+            let expr = match parent {\n+                Node::Block(block) => {\n+                    if let Some(parent_expr) = block.expr {\n+                        parent_expr\n+                    } else {\n+                        return false;\n+                    }\n+                },\n+                Node::Expr(expr) => expr,\n+                _ => return false,\n+            };\n+\n+            matches!(expr.kind, ExprKind::Cast(..))\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n /// Returns the type T of the pointed to *const [T] or *mut [T] and the mutability of the slice if\n /// the type is one of those slices\n fn get_raw_slice_ty_mut(ty: Ty<'_>) -> Option<TypeAndMut<'_>> {\n@@ -98,18 +102,43 @@ fn get_raw_slice_ty_mut(ty: Ty<'_>) -> Option<TypeAndMut<'_>> {\n     }\n }\n \n-/// Returns the pair (original ptr T, final ptr U) if the expression is composed of casts\n+struct CastChainInfo<'expr, 'tcx> {\n+    /// The left most part of the cast chain, or in other words, the first cast in the chain\n+    /// Used for diagnostics\n+    left_cast: &'expr Expr<'expr>,\n+    /// The starting type of the cast chain\n+    start_ty: TypeAndMut<'tcx>,\n+    /// The final type of the cast chain\n+    end_ty: TypeAndMut<'tcx>,\n+}\n+\n+// FIXME(asquared31415): unbounded recursion linear with the number of casts in an expression\n+/// Returns a `CastChainInfo` with the left-most cast in the chain and the original ptr T and final\n+/// ptr U if the expression is composed of casts.\n /// Returns None if the expr is not a Cast\n-fn expr_cast_chain_tys<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> Option<(TypeAndMut<'tcx>, TypeAndMut<'tcx>)> {\n+fn expr_cast_chain_tys<'tcx, 'expr>(cx: &LateContext<'tcx>, expr: &Expr<'expr>) -> Option<CastChainInfo<'expr, 'tcx>> {\n     if let ExprKind::Cast(cast_expr, _cast_to_hir_ty) = expr.peel_blocks().kind {\n         let cast_to = cx.typeck_results().expr_ty(expr);\n         let to_slice_ty = get_raw_slice_ty_mut(cast_to)?;\n-        if let Some((inner_from_ty, _inner_to_ty)) = expr_cast_chain_tys(cx, cast_expr) {\n-            Some((inner_from_ty, to_slice_ty))\n+        if let Some(CastChainInfo {\n+            left_cast,\n+            start_ty,\n+            end_ty: _,\n+        }) = expr_cast_chain_tys(cx, cast_expr)\n+        {\n+            Some(CastChainInfo {\n+                left_cast,\n+                start_ty,\n+                end_ty: to_slice_ty,\n+            })\n         } else {\n             let cast_from = cx.typeck_results().expr_ty(cast_expr);\n             let from_slice_ty = get_raw_slice_ty_mut(cast_from)?;\n-            Some((from_slice_ty, to_slice_ty))\n+            Some(CastChainInfo {\n+                left_cast: cast_expr,\n+                start_ty: from_slice_ty,\n+                end_ty: to_slice_ty,\n+            })\n         }\n     } else {\n         None"}, {"sha": "24d7eb28a197aa03b75fd663cbeda11339ee8c4a", "filename": "tests/ui/cast_slice_different_sizes.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af9dfa36921a66116e2cbd4a2aeb8f8f7e0082e9/tests%2Fui%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af9dfa36921a66116e2cbd4a2aeb8f8f7e0082e9/tests%2Fui%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_slice_different_sizes.rs?ref=af9dfa36921a66116e2cbd4a2aeb8f8f7e0082e9", "patch": "@@ -62,6 +62,16 @@ fn bar2(x: *mut [u16]) -> *mut [u8] {\n     x as _\n }\n \n+// constify\n+fn bar3(x: *mut [u16]) -> *const [u8] {\n+    x as _\n+}\n+\n+// unconstify\n+fn bar4(x: *const [u16]) -> *mut [u8] {\n+    x as _\n+}\n+\n // function returns plus blocks\n fn blocks(x: *mut [u16]) -> *mut [u8] {\n     ({ x }) as _"}, {"sha": "40721dcd05d5dbc909d140a82d70de3bfb28ddc7", "filename": "tests/ui/cast_slice_different_sizes.stderr", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/af9dfa36921a66116e2cbd4a2aeb8f8f7e0082e9/tests%2Fui%2Fcast_slice_different_sizes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af9dfa36921a66116e2cbd4a2aeb8f8f7e0082e9/tests%2Fui%2Fcast_slice_different_sizes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_slice_different_sizes.stderr?ref=af9dfa36921a66116e2cbd4a2aeb8f8f7e0082e9", "patch": "@@ -46,58 +46,76 @@ error: casting between raw pointers to `[i32]` (element size 4) and `[u8]` (elem\n   --> $DIR/cast_slice_different_sizes.rs:38:27\n    |\n LL |     let long_chain_loss = r_x as *const [i32] as *const [u32] as *const [u16] as *const [i8] as *const [u8];\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with `ptr::slice_from_raw_parts`: `core::ptr::slice_from_raw_parts(r_x as *const [i32] as *const [u32] as *const [u16] as *const [i8] as *const u8, ..)`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with `ptr::slice_from_raw_parts`: `core::ptr::slice_from_raw_parts(r_x as *const [i32] as *const u8, ..)`\n \n-error: casting between raw pointers to `[mut u16]` (element size 2) and `[mut u8]` (element size 1) does not adjust the count\n+error: casting between raw pointers to `[u16]` (element size 2) and `[u8]` (element size 1) does not adjust the count\n   --> $DIR/cast_slice_different_sizes.rs:53:36\n    |\n LL |   fn bar(x: *mut [u16]) -> *mut [u8] {\n    |  ____________________________________^\n LL | |     x as *mut [u8]\n LL | | }\n-   | |_^ help: replace with `ptr::slice_from_raw_parts_mut`: `core::ptr::slice_from_raw_parts_mut(x as *mut mut u8, ..)`\n+   | |_^ help: replace with `ptr::slice_from_raw_parts_mut`: `core::ptr::slice_from_raw_parts_mut(x as *mut u8, ..)`\n \n-error: casting between raw pointers to `[mut u16]` (element size 2) and `[mut u8]` (element size 1) does not adjust the count\n+error: casting between raw pointers to `[u16]` (element size 2) and `[u8]` (element size 1) does not adjust the count\n   --> $DIR/cast_slice_different_sizes.rs:57:36\n    |\n LL |   fn uwu(x: *mut [u16]) -> *mut [u8] {\n    |  ____________________________________^\n LL | |     x as *mut _\n LL | | }\n-   | |_^ help: replace with `ptr::slice_from_raw_parts_mut`: `core::ptr::slice_from_raw_parts_mut(x as *mut mut u8, ..)`\n+   | |_^ help: replace with `ptr::slice_from_raw_parts_mut`: `core::ptr::slice_from_raw_parts_mut(x as *mut u8, ..)`\n \n-error: casting between raw pointers to `[mut u16]` (element size 2) and `[mut u8]` (element size 1) does not adjust the count\n+error: casting between raw pointers to `[u16]` (element size 2) and `[u8]` (element size 1) does not adjust the count\n   --> $DIR/cast_slice_different_sizes.rs:61:37\n    |\n LL |   fn bar2(x: *mut [u16]) -> *mut [u8] {\n    |  _____________________________________^\n LL | |     x as _\n LL | | }\n-   | |_^ help: replace with `ptr::slice_from_raw_parts_mut`: `core::ptr::slice_from_raw_parts_mut(x as *mut mut u8, ..)`\n+   | |_^ help: replace with `ptr::slice_from_raw_parts_mut`: `core::ptr::slice_from_raw_parts_mut(x as *mut u8, ..)`\n \n-error: casting between raw pointers to `[mut u16]` (element size 2) and `[mut u8]` (element size 1) does not adjust the count\n+error: casting between raw pointers to `[u16]` (element size 2) and `[u8]` (element size 1) does not adjust the count\n   --> $DIR/cast_slice_different_sizes.rs:66:39\n    |\n+LL |   fn bar3(x: *mut [u16]) -> *const [u8] {\n+   |  _______________________________________^\n+LL | |     x as _\n+LL | | }\n+   | |_^ help: replace with `ptr::slice_from_raw_parts`: `core::ptr::slice_from_raw_parts(x as *const u8, ..)`\n+\n+error: casting between raw pointers to `[u16]` (element size 2) and `[u8]` (element size 1) does not adjust the count\n+  --> $DIR/cast_slice_different_sizes.rs:71:39\n+   |\n+LL |   fn bar4(x: *const [u16]) -> *mut [u8] {\n+   |  _______________________________________^\n+LL | |     x as _\n+LL | | }\n+   | |_^ help: replace with `ptr::slice_from_raw_parts_mut`: `core::ptr::slice_from_raw_parts_mut(x as *mut u8, ..)`\n+\n+error: casting between raw pointers to `[u16]` (element size 2) and `[u8]` (element size 1) does not adjust the count\n+  --> $DIR/cast_slice_different_sizes.rs:76:39\n+   |\n LL |   fn blocks(x: *mut [u16]) -> *mut [u8] {\n    |  _______________________________________^\n LL | |     ({ x }) as _\n LL | | }\n-   | |_^ help: replace with `ptr::slice_from_raw_parts_mut`: `core::ptr::slice_from_raw_parts_mut(({ x }) as *mut mut u8, ..)`\n+   | |_^ help: replace with `ptr::slice_from_raw_parts_mut`: `core::ptr::slice_from_raw_parts_mut(({ x }) as *mut u8, ..)`\n \n-error: casting between raw pointers to `[mut u16]` (element size 2) and `[mut u8]` (element size 1) does not adjust the count\n-  --> $DIR/cast_slice_different_sizes.rs:70:44\n+error: casting between raw pointers to `[u16]` (element size 2) and `[u8]` (element size 1) does not adjust the count\n+  --> $DIR/cast_slice_different_sizes.rs:80:44\n    |\n LL |   fn more_blocks(x: *mut [u16]) -> *mut [u8] {\n    |  ____________________________________________^\n LL | |     { ({ x }) as _ }\n LL | | }\n-   | |_^ help: replace with `ptr::slice_from_raw_parts_mut`: `core::ptr::slice_from_raw_parts_mut(({ x }) as *mut mut u8, ..)`\n+   | |_^ help: replace with `ptr::slice_from_raw_parts_mut`: `core::ptr::slice_from_raw_parts_mut(({ x }) as *mut u8, ..)`\n \n-error: casting between raw pointers to `[mut u16]` (element size 2) and `[mut u8]` (element size 1) does not adjust the count\n-  --> $DIR/cast_slice_different_sizes.rs:71:5\n+error: casting between raw pointers to `[u16]` (element size 2) and `[u8]` (element size 1) does not adjust the count\n+  --> $DIR/cast_slice_different_sizes.rs:81:5\n    |\n LL |     { ({ x }) as _ }\n-   |     ^^^^^^^^^^^^^^^^ help: replace with `ptr::slice_from_raw_parts_mut`: `core::ptr::slice_from_raw_parts_mut(({ x }) as *mut mut u8, ..)`\n+   |     ^^^^^^^^^^^^^^^^ help: replace with `ptr::slice_from_raw_parts_mut`: `core::ptr::slice_from_raw_parts_mut(({ x }) as *mut u8, ..)`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 14 previous errors\n "}]}