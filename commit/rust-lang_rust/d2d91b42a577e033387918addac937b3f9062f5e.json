{"sha": "d2d91b42a577e033387918addac937b3f9062f5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZDkxYjQyYTU3N2UwMzMzODc5MThhZGRhYzkzN2IzZjkwNjJmNWU=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-11-28T21:29:51Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-11-28T21:39:02Z"}, "message": "lint-docs: Add --validate flag to validate lint docs separately.", "tree": {"sha": "8d3c54828022241c284f458b1969e5e0206c7437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d3c54828022241c284f458b1969e5e0206c7437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2d91b42a577e033387918addac937b3f9062f5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2d91b42a577e033387918addac937b3f9062f5e", "html_url": "https://github.com/rust-lang/rust/commit/d2d91b42a577e033387918addac937b3f9062f5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2d91b42a577e033387918addac937b3f9062f5e/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f17e6487b2315d3cc3826fb8badeb7d4959b3ffd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f17e6487b2315d3cc3826fb8badeb7d4959b3ffd", "html_url": "https://github.com/rust-lang/rust/commit/f17e6487b2315d3cc3826fb8badeb7d4959b3ffd"}], "stats": {"total": 138, "additions": 115, "deletions": 23}, "files": [{"sha": "aec0fc253ca5e4b5d059e5ce048342d2cb599507", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d2d91b42a577e033387918addac937b3f9062f5e/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d91b42a577e033387918addac937b3f9062f5e/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=d2d91b42a577e033387918addac937b3f9062f5e", "patch": "@@ -366,11 +366,25 @@ impl LintBuffer {\n /// ```\n ///\n /// The `{{produces}}` tag will be automatically replaced with the output from\n-/// the example by the build system. You can build and view the rustc book\n-/// with `x.py doc --stage=1 src/doc/rustc --open`. If the lint example is too\n-/// complex to run as a simple example (for example, it needs an extern\n-/// crate), mark it with `ignore` and manually paste the expected output below\n-/// the example.\n+/// the example by the build system. If the lint example is too complex to run\n+/// as a simple example (for example, it needs an extern crate), mark the code\n+/// block with `ignore` and manually replace the `{{produces}}` line with the\n+/// expected output in a `text` code block.\n+///\n+/// If this is a rustdoc-only lint, then only include a brief introduction\n+/// with a link with the text `[rustdoc book]` so that the validator knows\n+/// that this is for rustdoc only (see BROKEN_INTRA_DOC_LINKS as an example).\n+///\n+/// Commands to view and test the documentation:\n+///\n+/// * `./x.py doc --stage=1 src/doc/rustc --open`: Builds the rustc book and opens it.\n+/// * `./x.py test src/tools/lint-docs`: Validates that the lint docs have the\n+///   correct style, and that the code example actually emits the expected\n+///   lint.\n+///\n+/// If you have already built the compiler, and you want to make changes to\n+/// just the doc comments, then use the `--keep-stage=0` flag with the above\n+/// commands to avoid rebuilding the compiler.\n #[macro_export]\n macro_rules! declare_lint {\n     ($(#[$attr:meta])* $vis: vis $NAME: ident, $Level: ident, $desc: expr) => ("}, {"sha": "9336d7165ee75f93b3822958db6a57797b8f1dc1", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2d91b42a577e033387918addac937b3f9062f5e/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d91b42a577e033387918addac937b3f9062f5e/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=d2d91b42a577e033387918addac937b3f9062f5e", "patch": "@@ -413,6 +413,7 @@ impl<'a> Builder<'a> {\n                 test::TheBook,\n                 test::UnstableBook,\n                 test::RustcBook,\n+                test::LintDocs,\n                 test::RustcGuide,\n                 test::EmbeddedBook,\n                 test::EditionGuide,"}, {"sha": "bb0555c227d70c55ba9706ddf7d5466b8da3eb81", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2d91b42a577e033387918addac937b3f9062f5e/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d91b42a577e033387918addac937b3f9062f5e/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=d2d91b42a577e033387918addac937b3f9062f5e", "patch": "@@ -726,6 +726,7 @@ fn symlink_dir_force(config: &Config, src: &Path, dst: &Path) -> io::Result<()>\n pub struct RustcBook {\n     pub compiler: Compiler,\n     pub target: TargetSelection,\n+    pub validate: bool,\n }\n \n impl Step for RustcBook {\n@@ -742,6 +743,7 @@ impl Step for RustcBook {\n         run.builder.ensure(RustcBook {\n             compiler: run.builder.compiler(run.builder.top_stage, run.builder.config.build),\n             target: run.target,\n+            validate: false,\n         });\n     }\n \n@@ -772,6 +774,9 @@ impl Step for RustcBook {\n         if builder.config.verbose() {\n             cmd.arg(\"--verbose\");\n         }\n+        if self.validate {\n+            cmd.arg(\"--validate\");\n+        }\n         // If the lib directories are in an unusual location (changed in\n         // config.toml), then this needs to explicitly update the dylib search\n         // path."}, {"sha": "611fecca0546bee1bdc35aed398f2b60abd8dfc3", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d2d91b42a577e033387918addac937b3f9062f5e/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d91b42a577e033387918addac937b3f9062f5e/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=d2d91b42a577e033387918addac937b3f9062f5e", "patch": "@@ -2115,3 +2115,36 @@ impl Step for TierCheck {\n         try_run(builder, &mut cargo.into());\n     }\n }\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct LintDocs {\n+    pub compiler: Compiler,\n+    pub target: TargetSelection,\n+}\n+\n+impl Step for LintDocs {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/lint-docs\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(LintDocs {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.builder.config.build),\n+            target: run.target,\n+        });\n+    }\n+\n+    /// Tests that the lint examples in the rustc book generate the correct\n+    /// lints and have the expected format.\n+    fn run(self, builder: &Builder<'_>) {\n+        builder.ensure(crate::doc::RustcBook {\n+            compiler: self.compiler,\n+            target: self.target,\n+            validate: true,\n+        });\n+    }\n+}"}, {"sha": "0a69b18a3325413a4aa4b8642ca2e37152f3edb9", "filename": "src/tools/lint-docs/src/groups.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d2d91b42a577e033387918addac937b3f9062f5e/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d91b42a577e033387918addac937b3f9062f5e/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs?ref=d2d91b42a577e033387918addac937b3f9062f5e", "patch": "@@ -5,6 +5,7 @@ use std::fmt::Write;\n use std::fs;\n use std::process::Command;\n \n+/// Descriptions of rustc lint groups.\n static GROUP_DESCRIPTIONS: &[(&str, &str)] = &[\n     (\"unused\", \"Lints that detect things being declared but not used, or excess syntax\"),\n     (\"rustdoc\", \"Rustdoc-specific lints\"),\n@@ -86,17 +87,27 @@ impl<'a> LintExtractor<'a> {\n         result.push_str(\"|-------|-------------|-------|\\n\");\n         result.push_str(\"| warnings | All lints that are set to issue warnings | See [warn-by-default] for the default set of warnings |\\n\");\n         for (group_name, group_lints) in groups {\n-            let description = GROUP_DESCRIPTIONS\n-                .iter()\n-                .find(|(n, _)| n == group_name)\n-                .ok_or_else(|| {\n-                    format!(\n+            let description = match GROUP_DESCRIPTIONS.iter().find(|(n, _)| n == group_name) {\n+                Some((_, desc)) => desc,\n+                None if self.validate => {\n+                    return Err(format!(\n                         \"lint group `{}` does not have a description, \\\n-                         please update the GROUP_DESCRIPTIONS list\",\n+                         please update the GROUP_DESCRIPTIONS list in \\\n+                         src/tools/lint-docs/src/groups.rs\",\n                         group_name\n                     )\n-                })?\n-                .1;\n+                    .into());\n+                }\n+                None => {\n+                    eprintln!(\n+                        \"warning: lint group `{}` is missing from the GROUP_DESCRIPTIONS list\\n\\\n+                         If this is a new lint group, please update the GROUP_DESCRIPTIONS in \\\n+                         src/tools/lint-docs/src/groups.rs\",\n+                        group_name\n+                    );\n+                    continue;\n+                }\n+            };\n             to_link.extend(group_lints);\n             let brackets: Vec<_> = group_lints.iter().map(|l| format!(\"[{}]\", l)).collect();\n             write!(result, \"| {} | {} | {} |\\n\", group_name, description, brackets.join(\", \"))"}, {"sha": "dc878b718ad6054d4c7b39f0326d5456dae9094b", "filename": "src/tools/lint-docs/src/lib.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d2d91b42a577e033387918addac937b3f9062f5e/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d91b42a577e033387918addac937b3f9062f5e/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs?ref=d2d91b42a577e033387918addac937b3f9062f5e", "patch": "@@ -19,6 +19,8 @@ pub struct LintExtractor<'a> {\n     pub rustc_target: &'a str,\n     /// Verbose output.\n     pub verbose: bool,\n+    /// Validate the style and the code example.\n+    pub validate: bool,\n }\n \n struct Lint {\n@@ -122,7 +124,7 @@ impl<'a> LintExtractor<'a> {\n         let contents = fs::read_to_string(path)\n             .map_err(|e| format!(\"could not read {}: {}\", path.display(), e))?;\n         let mut lines = contents.lines().enumerate();\n-        loop {\n+        'outer: loop {\n             // Find a lint declaration.\n             let lint_start = loop {\n                 match lines.next() {\n@@ -158,12 +160,22 @@ impl<'a> LintExtractor<'a> {\n                                 )\n                             })?;\n                             if doc_lines.is_empty() {\n-                                return Err(format!(\n-                                    \"did not find doc lines for lint `{}` in {}\",\n-                                    name,\n-                                    path.display()\n-                                )\n-                                .into());\n+                                if self.validate {\n+                                    return Err(format!(\n+                                        \"did not find doc lines for lint `{}` in {}\",\n+                                        name,\n+                                        path.display()\n+                                    )\n+                                    .into());\n+                                } else {\n+                                    eprintln!(\n+                                        \"warning: lint `{}` in {} does not define any doc lines, \\\n+                                         these are required for the lint documentation\",\n+                                        name,\n+                                        path.display()\n+                                    );\n+                                    continue 'outer;\n+                                }\n                             }\n                             break (doc_lines, name);\n                         }\n@@ -234,13 +246,26 @@ impl<'a> LintExtractor<'a> {\n             // Rustdoc lints are documented in the rustdoc book, don't check these.\n             return Ok(());\n         }\n-        lint.check_style()?;\n+        if self.validate {\n+            lint.check_style()?;\n+        }\n         // Unfortunately some lints have extra requirements that this simple test\n         // setup can't handle (like extern crates). An alternative is to use a\n         // separate test suite, and use an include mechanism such as mdbook's\n         // `{{#rustdoc_include}}`.\n         if !lint.is_ignored() {\n-            self.replace_produces(lint)?;\n+            if let Err(e) = self.replace_produces(lint) {\n+                if self.validate {\n+                    return Err(e);\n+                }\n+                eprintln!(\n+                    \"warning: the code example in lint `{}` in {} failed to \\\n+                     generate the expected output: {}\",\n+                    lint.name,\n+                    lint.path.display(),\n+                    e\n+                );\n+            }\n         }\n         Ok(())\n     }"}, {"sha": "922e70402f274c2ae93b2a1b58620a730403f032", "filename": "src/tools/lint-docs/src/main.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2d91b42a577e033387918addac937b3f9062f5e/src%2Ftools%2Flint-docs%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d91b42a577e033387918addac937b3f9062f5e/src%2Ftools%2Flint-docs%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Fmain.rs?ref=d2d91b42a577e033387918addac937b3f9062f5e", "patch": "@@ -3,7 +3,7 @@ use std::path::PathBuf;\n \n fn main() {\n     if let Err(e) = doit() {\n-        println!(\"error: {}\", e);\n+        eprintln!(\"error: {}\", e);\n         std::process::exit(1);\n     }\n }\n@@ -15,6 +15,7 @@ fn doit() -> Result<(), Box<dyn Error>> {\n     let mut rustc_path = None;\n     let mut rustc_target = None;\n     let mut verbose = false;\n+    let mut validate = false;\n     while let Some(arg) = args.next() {\n         match arg.as_str() {\n             \"--src\" => {\n@@ -42,6 +43,7 @@ fn doit() -> Result<(), Box<dyn Error>> {\n                 };\n             }\n             \"-v\" | \"--verbose\" => verbose = true,\n+            \"--validate\" => validate = true,\n             s => return Err(format!(\"unexpected argument `{}`\", s).into()),\n         }\n     }\n@@ -63,6 +65,7 @@ fn doit() -> Result<(), Box<dyn Error>> {\n         rustc_path: &rustc_path.unwrap(),\n         rustc_target: &rustc_target.unwrap(),\n         verbose,\n+        validate,\n     };\n     le.extract_lint_docs()\n }"}]}