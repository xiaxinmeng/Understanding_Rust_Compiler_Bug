{"sha": "e750d7faa7e18fb3af51de96b35baebcce4123a2", "node_id": "C_kwDOAAsO6NoAKGU3NTBkN2ZhYTdlMThmYjNhZjUxZGU5NmIzNWJhZWJjY2U0MTIzYTI", "commit": {"author": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-09-02T13:05:00Z"}, "committer": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-09-06T15:41:08Z"}, "message": "Remove a comment and use IntoDiagnosticArg instead of add_to() where feasible", "tree": {"sha": "a522b380a0536aa3ddfedab6248cb5ef08671925", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a522b380a0536aa3ddfedab6248cb5ef08671925"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e750d7faa7e18fb3af51de96b35baebcce4123a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEAWou4Gq79HasRseDspeR1Nh440UFAmMXahQACgkQspeR1Nh4\n40XU/g//XHACNtsHZX2apL00xF8r3ZjbZ53zqLebuBL2fn0l3BD44bnVlTVP4P63\n6TjnPFikT+9VwHFhmNqaM1HvBnO69seL0xwhPrpPCq7M88Idw80lR9H9LxoMj2Xb\nj7kD2Q75bEq0XGynqx/lQzUdhQSt4n+o/akd58t7tM/Jqp7vpx8nqzrQVwiDCPc9\nOJSaCAGS8vQWQ0/1Q3szgPkbUW3YQG5hYu349Z3a5GXmUojhkGrypI2DQT1meuJ2\n5RpRvnK4UYq8O0r+3nY9ZIH3jvx7HJQo33/F0c0G2GvfuxXS9ftneLhS7v+L2rr+\nOsOrGwP+jTTdVUYdRpDwmoAvbfj3PSCJwlMuYNyt9hMT+zG0ydq+XFSHCk/VyFBt\nxbypTmjJAEMSQw3eEsMVV34wV9OM07IwUviaycOhzLDXR4lC62FJRGhlGPL7dMaW\n8JcBdGEHm+m465L5SCr5+DHpopuGNv1BX5UBZC5xRtmoTnBKVQEZar5dD4layR6i\nPomzT0a+u/iSG/dhBXgT8dB9qzsLpRW3MmlPOUephWyqJUEeCpl6lm+uvN3PmEBp\nI+oJ+B5Moa2DPgcp6TTG4WptKm6UnuYQu5DavOpM4McNJaRJUPXkXK8Vz92clAeF\nJeFExz4FwJWMGQWmGIl373rprW9IdoU6BSP4vlREApcHrxQhdak=\n=7bnP\n-----END PGP SIGNATURE-----", "payload": "tree a522b380a0536aa3ddfedab6248cb5ef08671925\nparent 3190522294dac32db63b11b579f6b75a4f2f7d8e\nauthor Nikita Tomashevich <quant3234@gmail.com> 1662123900 +0300\ncommitter Nikita Tomashevich <quant3234@gmail.com> 1662478868 +0300\n\nRemove a comment and use IntoDiagnosticArg instead of add_to() where feasible\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e750d7faa7e18fb3af51de96b35baebcce4123a2", "html_url": "https://github.com/rust-lang/rust/commit/e750d7faa7e18fb3af51de96b35baebcce4123a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e750d7faa7e18fb3af51de96b35baebcce4123a2/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3190522294dac32db63b11b579f6b75a4f2f7d8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3190522294dac32db63b11b579f6b75a4f2f7d8e", "html_url": "https://github.com/rust-lang/rust/commit/3190522294dac32db63b11b579f6b75a4f2f7d8e"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "6f1f9522c869da5a472f7f895f735fe099b26f04", "filename": "compiler/rustc_infer/src/errors/note_and_explain.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e750d7faa7e18fb3af51de96b35baebcce4123a2/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e750d7faa7e18fb3af51de96b35baebcce4123a2/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs?ref=e750d7faa7e18fb3af51de96b35baebcce4123a2", "patch": "@@ -1,5 +1,5 @@\n use crate::infer::error_reporting::nice_region_error::find_anon_type;\n-use rustc_errors::{self, fluent, AddSubdiagnostic};\n+use rustc_errors::{self, fluent, AddSubdiagnostic, IntoDiagnosticArg};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::{symbol::kw, Span};\n \n@@ -29,7 +29,6 @@ impl<'a> DescriptionCtx<'a> {\n \n             ty::ReEmpty(ty::UniverseIndex::ROOT) => me.kind = \"reempty\",\n \n-            // uh oh, hope no user ever sees THIS\n             ty::ReEmpty(ui) => {\n                 me.kind = \"reemptyuni\";\n                 me.arg = format!(\"{:?}\", ui);\n@@ -128,19 +127,23 @@ pub enum SuffixKind {\n     Continues,\n }\n \n-impl PrefixKind {\n-    fn add_to(self, diag: &mut rustc_errors::Diagnostic) {\n-        match self {\n-            Self::Empty => diag.set_arg(\"pref_kind\", \"empty\"),\n-        };\n+impl IntoDiagnosticArg for PrefixKind {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        let kind = match self {\n+            Self::Empty => \"empty\",\n+        }\n+        .into();\n+        rustc_errors::DiagnosticArgValue::Str(kind)\n     }\n }\n \n-impl SuffixKind {\n-    fn add_to(self, diag: &mut rustc_errors::Diagnostic) {\n-        match self {\n-            Self::Continues => diag.set_arg(\"suff_kind\", \"continues\"),\n-        };\n+impl IntoDiagnosticArg for SuffixKind {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        let kind = match self {\n+            Self::Continues => \"continues\",\n+        }\n+        .into();\n+        rustc_errors::DiagnosticArgValue::Str(kind)\n     }\n }\n \n@@ -170,7 +173,7 @@ impl AddSubdiagnostic for RegionExplanation<'_> {\n             diag.note(fluent::infer::region_explanation);\n         }\n         self.desc.add_to(diag);\n-        self.prefix.add_to(diag);\n-        self.suffix.add_to(diag);\n+        diag.set_arg(\"pref_kind\", self.prefix);\n+        diag.set_arg(\"suff_kind\", self.suffix);\n     }\n }"}]}