{"sha": "8fd2ff57fa936f1fb24afe1f452e8d2ef9b485d6", "node_id": "C_kwDOAAsO6NoAKDhmZDJmZjU3ZmE5MzZmMWZiMjRhZmUxZjQ1MmU4ZDJlZjliNDg1ZDY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-31T06:00:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-31T06:00:41Z"}, "message": "Rollup merge of #93403 - nagisa:total-cmp-review, r=joshtriplett\n\nreview the total_cmp documentation\n\nThe documentation has been restructured to split out a brief summary\nparagraph out from the following elaborating paragraphs.\n\nI also attempted my hand at wording improvements and adding articles\nwhere I felt them missing, but being non-native english speaker these\nmay need more thorough review.\n\ncc https://github.com/rust-lang/rust/issues/72599", "tree": {"sha": "d86e75b8f7b34ae89e9c5ac94360dbd677a72142", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d86e75b8f7b34ae89e9c5ac94360dbd677a72142"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fd2ff57fa936f1fb24afe1f452e8d2ef9b485d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh93sJCRBK7hj4Ov3rIwAABHkIABdj3imcMp1S/Dq6bFPFht6O\nASQwVQwZ0AdwtuxO1/v3wmxEG9jh4WslnNBqTYR/f7M1hPsp6aom9HQiM9FCkJfg\noDY1Do7BvD/BMV0/K1F8wPrPHkoF01xPsVe6HmQUsBwLj5XEboqb+Efh9bBgW9cW\nRac/gPxWkETJkd0hM8pAy5S+1esQPvdOcHnNRRTzpqcuTMcDagTR6xstlz6rj9Ya\nbmygigUB5NwbwstDYk3JEdBQNeYTkGMI+5xK2xq3tNJIFUyjQyGA5yN55y89YSU8\nl3S7aFu7R/hLwhTq0LVthh0qu/u6i1fX4rNZ+lpWWWzGy21RB8VS9H3Xg0rZSj8=\n=7C1n\n-----END PGP SIGNATURE-----\n", "payload": "tree d86e75b8f7b34ae89e9c5ac94360dbd677a72142\nparent 2f4602a64cf20a3f22d4a4958910d3698401e8cc\nparent 78efb075d9f8459bb301610497b5c05790b3578f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643608841 +0100\ncommitter GitHub <noreply@github.com> 1643608841 +0100\n\nRollup merge of #93403 - nagisa:total-cmp-review, r=joshtriplett\n\nreview the total_cmp documentation\n\nThe documentation has been restructured to split out a brief summary\nparagraph out from the following elaborating paragraphs.\n\nI also attempted my hand at wording improvements and adding articles\nwhere I felt them missing, but being non-native english speaker these\nmay need more thorough review.\n\ncc https://github.com/rust-lang/rust/issues/72599\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fd2ff57fa936f1fb24afe1f452e8d2ef9b485d6", "html_url": "https://github.com/rust-lang/rust/commit/8fd2ff57fa936f1fb24afe1f452e8d2ef9b485d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fd2ff57fa936f1fb24afe1f452e8d2ef9b485d6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f4602a64cf20a3f22d4a4958910d3698401e8cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f4602a64cf20a3f22d4a4958910d3698401e8cc", "html_url": "https://github.com/rust-lang/rust/commit/2f4602a64cf20a3f22d4a4958910d3698401e8cc"}, {"sha": "78efb075d9f8459bb301610497b5c05790b3578f", "url": "https://api.github.com/repos/rust-lang/rust/commits/78efb075d9f8459bb301610497b5c05790b3578f", "html_url": "https://github.com/rust-lang/rust/commit/78efb075d9f8459bb301610497b5c05790b3578f"}], "stats": {"total": 92, "additions": 54, "deletions": 38}, "files": [{"sha": "d8dcfdafa8df9d0af4543eeed547e16677145211", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8fd2ff57fa936f1fb24afe1f452e8d2ef9b485d6/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd2ff57fa936f1fb24afe1f452e8d2ef9b485d6/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=8fd2ff57fa936f1fb24afe1f452e8d2ef9b485d6", "patch": "@@ -1008,29 +1008,37 @@ impl f32 {\n         Self::from_bits(u32::from_ne_bytes(bytes))\n     }\n \n-    /// Returns an ordering between self and other values.\n+    /// Return the ordering between `self` and `other`.\n+    ///\n     /// Unlike the standard partial comparison between floating point numbers,\n     /// this comparison always produces an ordering in accordance to\n-    /// the totalOrder predicate as defined in IEEE 754 (2008 revision)\n-    /// floating point standard. The values are ordered in following order:\n-    /// - Negative quiet NaN\n-    /// - Negative signaling NaN\n-    /// - Negative infinity\n-    /// - Negative numbers\n-    /// - Negative subnormal numbers\n-    /// - Negative zero\n-    /// - Positive zero\n-    /// - Positive subnormal numbers\n-    /// - Positive numbers\n-    /// - Positive infinity\n-    /// - Positive signaling NaN\n-    /// - Positive quiet NaN\n-    ///\n-    /// Note that this function does not always agree with the [`PartialOrd`]\n-    /// and [`PartialEq`] implementations of `f32`. In particular, they regard\n-    /// negative and positive zero as equal, while `total_cmp` doesn't.\n+    /// the `totalOrder` predicate as defined in the IEEE 754 (2008 revision)\n+    /// floating point standard. The values are ordered in the following sequence:\n+    ///\n+    /// - negative quiet NaN\n+    /// - negative signaling NaN\n+    /// - negative infinity\n+    /// - negative numbers\n+    /// - negative subnormal numbers\n+    /// - negative zero\n+    /// - positive zero\n+    /// - positive subnormal numbers\n+    /// - positive numbers\n+    /// - positive infinity\n+    /// - positive signaling NaN\n+    /// - positive quiet NaN.\n+    ///\n+    /// The ordering established by this function does not always agree with the\n+    /// [`PartialOrd`] and [`PartialEq`] implementations of `f32`. For example,\n+    /// they consider negative and positive zero equal, while `total_cmp`\n+    /// doesn't.\n+    ///\n+    /// The interpretation of the signaling NaN bit follows the definition in\n+    /// the IEEE 754 standard, which may not match the interpretation by some of\n+    /// the older, non-conformant (e.g. MIPS) hardware implementations.\n     ///\n     /// # Example\n+    ///\n     /// ```\n     /// #![feature(total_cmp)]\n     /// struct GoodBoy {"}, {"sha": "7c2f51ff64639db45dad8dce1543c9004b04f5a5", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8fd2ff57fa936f1fb24afe1f452e8d2ef9b485d6/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd2ff57fa936f1fb24afe1f452e8d2ef9b485d6/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=8fd2ff57fa936f1fb24afe1f452e8d2ef9b485d6", "patch": "@@ -1024,29 +1024,37 @@ impl f64 {\n         Self::from_bits(u64::from_ne_bytes(bytes))\n     }\n \n-    /// Returns an ordering between self and other values.\n+    /// Return the ordering between `self` and `other`.\n+    ///\n     /// Unlike the standard partial comparison between floating point numbers,\n     /// this comparison always produces an ordering in accordance to\n-    /// the totalOrder predicate as defined in IEEE 754 (2008 revision)\n-    /// floating point standard. The values are ordered in following order:\n-    /// - Negative quiet NaN\n-    /// - Negative signaling NaN\n-    /// - Negative infinity\n-    /// - Negative numbers\n-    /// - Negative subnormal numbers\n-    /// - Negative zero\n-    /// - Positive zero\n-    /// - Positive subnormal numbers\n-    /// - Positive numbers\n-    /// - Positive infinity\n-    /// - Positive signaling NaN\n-    /// - Positive quiet NaN\n-    ///\n-    /// Note that this function does not always agree with the [`PartialOrd`]\n-    /// and [`PartialEq`] implementations of `f64`. In particular, they regard\n-    /// negative and positive zero as equal, while `total_cmp` doesn't.\n+    /// the `totalOrder` predicate as defined in the IEEE 754 (2008 revision)\n+    /// floating point standard. The values are ordered in the following sequence:\n+    ///\n+    /// - negative quiet NaN\n+    /// - negative signaling NaN\n+    /// - negative infinity\n+    /// - negative numbers\n+    /// - negative subnormal numbers\n+    /// - negative zero\n+    /// - positive zero\n+    /// - positive subnormal numbers\n+    /// - positive numbers\n+    /// - positive infinity\n+    /// - positive signaling NaN\n+    /// - positive quiet NaN.\n+    ///\n+    /// The ordering established by this function does not always agree with the\n+    /// [`PartialOrd`] and [`PartialEq`] implementations of `f64`. For example,\n+    /// they consider negative and positive zero equal, while `total_cmp`\n+    /// doesn't.\n+    ///\n+    /// The interpretation of the signaling NaN bit follows the definition in\n+    /// the IEEE 754 standard, which may not match the interpretation by some of\n+    /// the older, non-conformant (e.g. MIPS) hardware implementations.\n     ///\n     /// # Example\n+    ///\n     /// ```\n     /// #![feature(total_cmp)]\n     /// struct GoodBoy {"}]}