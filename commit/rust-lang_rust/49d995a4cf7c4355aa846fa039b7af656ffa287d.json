{"sha": "49d995a4cf7c4355aa846fa039b7af656ffa287d", "node_id": "C_kwDOAAsO6NoAKDQ5ZDk5NWE0Y2Y3YzQzNTVhYTg0NmZhMDM5YjdhZjY1NmZmYTI4N2Q", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-02-15T21:44:31Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-02-23T04:00:10Z"}, "message": "rustdoc: reduce allocations when generating tooltips\n\nAn attempt to reduce the perf regression in\nhttps://github.com/rust-lang/rust/pull/108052#issuecomment-1430631861", "tree": {"sha": "5d1e3a819485cd244be1333d18cd6c3a3b5e7810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d1e3a819485cd244be1333d18cd6c3a3b5e7810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49d995a4cf7c4355aa846fa039b7af656ffa287d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49d995a4cf7c4355aa846fa039b7af656ffa287d", "html_url": "https://github.com/rust-lang/rust/commit/49d995a4cf7c4355aa846fa039b7af656ffa287d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49d995a4cf7c4355aa846fa039b7af656ffa287d/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0978711950b77582e4f8f334f6e9848d48ab7790", "url": "https://api.github.com/repos/rust-lang/rust/commits/0978711950b77582e4f8f334f6e9848d48ab7790", "html_url": "https://github.com/rust-lang/rust/commit/0978711950b77582e4f8f334f6e9848d48ab7790"}], "stats": {"total": 69, "additions": 40, "deletions": 29}, "files": [{"sha": "b8853c1744c92871879f5583f70b7a688f33eef3", "filename": "compiler/rustc_resolve/src/rustdoc.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/49d995a4cf7c4355aa846fa039b7af656ffa287d/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d995a4cf7c4355aa846fa039b7af656ffa287d/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs?ref=49d995a4cf7c4355aa846fa039b7af656ffa287d", "patch": "@@ -265,9 +265,9 @@ fn strip_generics_from_path_segment(segment: Vec<char>) -> Result<String, Malfor\n     }\n }\n \n-pub fn strip_generics_from_path(path_str: &str) -> Result<String, MalformedGenerics> {\n+pub fn strip_generics_from_path(path_str: &str) -> Result<Box<str>, MalformedGenerics> {\n     if !path_str.contains(['<', '>']) {\n-        return Ok(path_str.to_string());\n+        return Ok(path_str.into());\n     }\n     let mut stripped_segments = vec![];\n     let mut path = path_str.chars().peekable();\n@@ -322,7 +322,11 @@ pub fn strip_generics_from_path(path_str: &str) -> Result<String, MalformedGener\n \n     let stripped_path = stripped_segments.join(\"::\");\n \n-    if !stripped_path.is_empty() { Ok(stripped_path) } else { Err(MalformedGenerics::MissingType) }\n+    if !stripped_path.is_empty() {\n+        Ok(stripped_path.into())\n+    } else {\n+        Err(MalformedGenerics::MissingType)\n+    }\n }\n \n /// Returns whether the first doc-comment is an inner attribute.\n@@ -336,7 +340,7 @@ pub fn inner_docs(attrs: &[ast::Attribute]) -> bool {\n /// Simplified version of the corresponding function in rustdoc.\n /// If the rustdoc version returns a successful result, this function must return the same result.\n /// Otherwise this function may return anything.\n-fn preprocess_link(link: &str) -> String {\n+fn preprocess_link(link: &str) -> Box<str> {\n     let link = link.replace('`', \"\");\n     let link = link.split('#').next().unwrap();\n     let link = link.trim();\n@@ -345,7 +349,7 @@ fn preprocess_link(link: &str) -> String {\n     let link = link.strip_suffix(\"{}\").unwrap_or(link);\n     let link = link.strip_suffix(\"[]\").unwrap_or(link);\n     let link = if link != \"!\" { link.strip_suffix('!').unwrap_or(link) } else { link };\n-    strip_generics_from_path(link).unwrap_or_else(|_| link.to_string())\n+    strip_generics_from_path(link).unwrap_or_else(|_| link.into())\n }\n \n /// Keep inline and reference links `[]`,\n@@ -365,7 +369,7 @@ pub fn may_be_doc_link(link_type: LinkType) -> bool {\n \n /// Simplified version of `preprocessed_markdown_links` from rustdoc.\n /// Must return at least the same links as it, but may add some more links on top of that.\n-pub(crate) fn attrs_to_preprocessed_links(attrs: &[ast::Attribute]) -> Vec<String> {\n+pub(crate) fn attrs_to_preprocessed_links(attrs: &[ast::Attribute]) -> Vec<Box<str>> {\n     let (doc_fragments, _) = attrs_to_doc_fragments(attrs.iter().map(|attr| (attr, None)), true);\n     let doc = prepare_to_doc_link_resolution(&doc_fragments).into_values().next().unwrap();\n "}, {"sha": "27d18aad7a349f2a85414bc4a630471e8a166682", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49d995a4cf7c4355aa846fa039b7af656ffa287d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d995a4cf7c4355aa846fa039b7af656ffa287d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=49d995a4cf7c4355aa846fa039b7af656ffa287d", "patch": "@@ -1017,12 +1017,12 @@ pub(crate) fn collapse_doc_fragments(doc_strings: &[DocFragment]) -> String {\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub(crate) struct ItemLink {\n     /// The original link written in the markdown\n-    pub(crate) link: String,\n+    pub(crate) link: Box<str>,\n     /// The link text displayed in the HTML.\n     ///\n     /// This may not be the same as `link` if there was a disambiguator\n     /// in an intra-doc link (e.g. \\[`fn@f`\\])\n-    pub(crate) link_text: String,\n+    pub(crate) link_text: Box<str>,\n     /// The `DefId` of the Item whose **HTML Page** contains the item being\n     /// linked to. This will be different to `item_id` on item's that don't\n     /// have their own page, such as struct fields and enum variants.\n@@ -1035,9 +1035,9 @@ pub struct RenderedLink {\n     /// The text the link was original written as.\n     ///\n     /// This could potentially include disambiguators and backticks.\n-    pub(crate) original_text: String,\n+    pub(crate) original_text: Box<str>,\n     /// The text to display in the HTML\n-    pub(crate) new_text: String,\n+    pub(crate) new_text: Box<str>,\n     /// The URL to put in the `href`\n     pub(crate) href: String,\n     /// The tooltip."}, {"sha": "0e4c5ed6836827752b5fe6de118c02d829d95c01", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/49d995a4cf7c4355aa846fa039b7af656ffa287d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d995a4cf7c4355aa846fa039b7af656ffa287d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=49d995a4cf7c4355aa846fa039b7af656ffa287d", "patch": "@@ -772,14 +772,21 @@ pub(crate) fn link_tooltip(did: DefId, fragment: &Option<UrlFragment>, cx: &Cont\n     let Some((fqp, shortty)) = cache.paths.get(&did)\n         .or_else(|| cache.external_paths.get(&did))\n         else { return String::new() };\n-    let fqp = fqp.iter().map(|sym| sym.as_str()).join(\"::\");\n+    let mut buf = Buffer::new();\n     if let &Some(UrlFragment::Item(id)) = fragment {\n-        let name = cx.tcx().item_name(id);\n-        let descr = cx.tcx().def_descr(id);\n-        format!(\"{descr} {fqp}::{name}\")\n-    } else {\n-        format!(\"{shortty} {fqp}\")\n+        write!(buf, \"{} \", cx.tcx().def_descr(id));\n+        for component in fqp {\n+            write!(buf, \"{component}::\");\n+        }\n+        write!(buf, \"{}\", cx.tcx().item_name(id));\n+    } else if !fqp.is_empty() {\n+        let mut fqp_it = fqp.into_iter();\n+        write!(buf, \"{shortty} {}\", fqp_it.next().unwrap());\n+        for component in fqp_it {\n+            write!(buf, \"::{component}\");\n+        }\n     }\n+    buf.into_inner()\n }\n \n /// Used to render a [`clean::Path`]."}, {"sha": "b5a34814382d1995bf9016715a54611e7fa1bb20", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49d995a4cf7c4355aa846fa039b7af656ffa287d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d995a4cf7c4355aa846fa039b7af656ffa287d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=49d995a4cf7c4355aa846fa039b7af656ffa287d", "patch": "@@ -981,7 +981,7 @@ impl Markdown<'_> {\n         let mut replacer = |broken_link: BrokenLink<'_>| {\n             links\n                 .iter()\n-                .find(|link| link.original_text.as_str() == &*broken_link.reference)\n+                .find(|link| &*link.original_text == &*broken_link.reference)\n                 .map(|link| (link.href.as_str().into(), link.tooltip.as_str().into()))\n         };\n \n@@ -1064,7 +1064,7 @@ impl MarkdownSummaryLine<'_> {\n         let mut replacer = |broken_link: BrokenLink<'_>| {\n             links\n                 .iter()\n-                .find(|link| link.original_text.as_str() == &*broken_link.reference)\n+                .find(|link| &*link.original_text == &*broken_link.reference)\n                 .map(|link| (link.href.as_str().into(), link.tooltip.as_str().into()))\n         };\n \n@@ -1111,7 +1111,7 @@ fn markdown_summary_with_limit(\n     let mut replacer = |broken_link: BrokenLink<'_>| {\n         link_names\n             .iter()\n-            .find(|link| link.original_text.as_str() == &*broken_link.reference)\n+            .find(|link| &*link.original_text == &*broken_link.reference)\n             .map(|link| (link.href.as_str().into(), link.tooltip.as_str().into()))\n     };\n \n@@ -1192,7 +1192,7 @@ pub(crate) fn plain_text_summary(md: &str, link_names: &[RenderedLink]) -> Strin\n     let mut replacer = |broken_link: BrokenLink<'_>| {\n         link_names\n             .iter()\n-            .find(|link| link.original_text.as_str() == &*broken_link.reference)\n+            .find(|link| &*link.original_text == &*broken_link.reference)\n             .map(|link| (link.href.as_str().into(), link.tooltip.as_str().into()))\n     };\n "}, {"sha": "18c45fd69915561175c875bd4b8e1799fa2476b4", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49d995a4cf7c4355aa846fa039b7af656ffa287d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d995a4cf7c4355aa846fa039b7af656ffa287d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=49d995a4cf7c4355aa846fa039b7af656ffa287d", "patch": "@@ -38,7 +38,7 @@ impl JsonRenderer<'_> {\n                     Some(UrlFragment::UserWritten(_)) | None => *page_id,\n                 };\n \n-                (link.clone(), id_from_item_default(id.into(), self.tcx))\n+                (String::from(&**link), id_from_item_default(id.into(), self.tcx))\n             })\n             .collect();\n         let docs = item.attrs.collapsed_doc_value();"}, {"sha": "cbfc581389c27a1708c35d1cb303c8cfbd20d19f", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/49d995a4cf7c4355aa846fa039b7af656ffa287d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d995a4cf7c4355aa846fa039b7af656ffa287d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=49d995a4cf7c4355aa846fa039b7af656ffa287d", "patch": "@@ -228,7 +228,7 @@ struct ResolutionInfo {\n     item_id: ItemId,\n     module_id: DefId,\n     dis: Option<Disambiguator>,\n-    path_str: String,\n+    path_str: Box<str>,\n     extra_fragment: Option<String>,\n }\n \n@@ -849,10 +849,10 @@ impl PreprocessingError {\n \n #[derive(Clone)]\n struct PreprocessingInfo {\n-    path_str: String,\n+    path_str: Box<str>,\n     disambiguator: Option<Disambiguator>,\n     extra_fragment: Option<String>,\n-    link_text: String,\n+    link_text: Box<str>,\n }\n \n // Not a typedef to avoid leaking several private structures from this module.\n@@ -937,7 +937,7 @@ fn preprocess_link(\n         path_str,\n         disambiguator,\n         extra_fragment: extra_fragment.map(|frag| frag.to_owned()),\n-        link_text: link_text.to_owned(),\n+        link_text: Box::<str>::from(link_text),\n     }))\n }\n \n@@ -993,7 +993,7 @@ impl LinkCollector<'_, '_> {\n                 item_id: item.item_id,\n                 module_id,\n                 dis: disambiguator,\n-                path_str: path_str.to_owned(),\n+                path_str: path_str.clone(),\n                 extra_fragment: extra_fragment.clone(),\n             },\n             diag_info.clone(), // this struct should really be Copy, but Range is not :(\n@@ -1067,7 +1067,7 @@ impl LinkCollector<'_, '_> {\n                 }\n \n                 res.def_id(self.cx.tcx).map(|page_id| ItemLink {\n-                    link: ori_link.link.clone(),\n+                    link: Box::<str>::from(&*ori_link.link),\n                     link_text: link_text.clone(),\n                     page_id,\n                     fragment,\n@@ -1091,7 +1091,7 @@ impl LinkCollector<'_, '_> {\n \n                 let page_id = clean::register_res(self.cx, rustc_hir::def::Res::Def(kind, id));\n                 Some(ItemLink {\n-                    link: ori_link.link.clone(),\n+                    link: Box::<str>::from(&*ori_link.link),\n                     link_text: link_text.clone(),\n                     page_id,\n                     fragment,"}, {"sha": "4f72df5a5cda00e5ed5065748fd36525c31ea10e", "filename": "src/librustdoc/passes/lint/html_tags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49d995a4cf7c4355aa846fa039b7af656ffa287d/src%2Flibrustdoc%2Fpasses%2Flint%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d995a4cf7c4355aa846fa039b7af656ffa287d/src%2Flibrustdoc%2Fpasses%2Flint%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Flint%2Fhtml_tags.rs?ref=49d995a4cf7c4355aa846fa039b7af656ffa287d", "patch": "@@ -113,7 +113,7 @@ pub(crate) fn visit_item(cx: &DocContext<'_>, item: &Item) {\n             if let Some(link) =\n                 link_names.iter().find(|link| *link.original_text == *broken_link.reference)\n             {\n-                Some((link.href.as_str().into(), link.new_text.as_str().into()))\n+                Some((link.href.as_str().into(), link.new_text.to_string().into()))\n             } else if matches!(\n                 &broken_link.link_type,\n                 LinkType::Reference | LinkType::ReferenceUnknown"}]}