{"sha": "b13d6ea6c2f8e6ed6ced51648aadf7a1e7256220", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxM2Q2ZWE2YzJmOGU2ZWQ2Y2VkNTE2NDhhYWRmN2ExZTcyNTYyMjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-23T08:16:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-23T08:16:10Z"}, "message": "auto merge of #15900 : tbu-/rust/pr_numcleanup, r=kballard\n\nThis removes the special casing for `float`s where it was not necessary, as\r\n`-0.0 == 0.0`.", "tree": {"sha": "17f28d2ec8a143792502e5bba62ed3e2dba11b7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17f28d2ec8a143792502e5bba62ed3e2dba11b7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b13d6ea6c2f8e6ed6ced51648aadf7a1e7256220", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b13d6ea6c2f8e6ed6ced51648aadf7a1e7256220", "html_url": "https://github.com/rust-lang/rust/commit/b13d6ea6c2f8e6ed6ced51648aadf7a1e7256220", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b13d6ea6c2f8e6ed6ced51648aadf7a1e7256220/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83a8a5647392cd314c8191a5bceff360f0ebb60b", "url": "https://api.github.com/repos/rust-lang/rust/commits/83a8a5647392cd314c8191a5bceff360f0ebb60b", "html_url": "https://github.com/rust-lang/rust/commit/83a8a5647392cd314c8191a5bceff360f0ebb60b"}, {"sha": "737d92e11f555c049910d0cc118b710951ceab81", "url": "https://api.github.com/repos/rust-lang/rust/commits/737d92e11f555c049910d0cc118b710951ceab81", "html_url": "https://github.com/rust-lang/rust/commit/737d92e11f555c049910d0cc118b710951ceab81"}], "stats": {"total": 25, "additions": 7, "deletions": 18}, "files": [{"sha": "f0c537efa4656738fc5ece7dcf5ea439e7372c0b", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b13d6ea6c2f8e6ed6ced51648aadf7a1e7256220/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b13d6ea6c2f8e6ed6ced51648aadf7a1e7256220/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b13d6ea6c2f8e6ed6ced51648aadf7a1e7256220", "patch": "@@ -75,6 +75,7 @@ pub trait Zero: Add<Self, Self> {\n     fn zero() -> Self;\n \n     /// Returns `true` if `self` is equal to the additive identity.\n+    #[inline]\n     fn is_zero(&self) -> bool;\n }\n \n@@ -89,32 +90,20 @@ macro_rules! zero_impl(\n     }\n )\n \n-macro_rules! zero_float_impl(\n-    ($t:ty, $v:expr) => {\n-        impl Zero for $t {\n-            #[inline]\n-            fn zero() -> $t { $v }\n-\n-            #[inline]\n-            fn is_zero(&self) -> bool { *self == $v || *self == -$v }\n-        }\n-    }\n-)\n-\n zero_impl!(uint, 0u)\n-zero_impl!(u8,  0u8)\n-zero_impl!(u16, 0u16)\n-zero_impl!(u32, 0u32)\n-zero_impl!(u64, 0u64)\n+zero_impl!(u8,   0u8)\n+zero_impl!(u16,  0u16)\n+zero_impl!(u32,  0u32)\n+zero_impl!(u64,  0u64)\n \n zero_impl!(int, 0i)\n zero_impl!(i8,  0i8)\n zero_impl!(i16, 0i16)\n zero_impl!(i32, 0i32)\n zero_impl!(i64, 0i64)\n \n-zero_float_impl!(f32, 0.0f32)\n-zero_float_impl!(f64, 0.0f64)\n+zero_impl!(f32, 0.0f32)\n+zero_impl!(f64, 0.0f64)\n \n /// Returns the additive identity, `0`.\n #[inline(always)] pub fn zero<T: Zero>() -> T { Zero::zero() }"}]}