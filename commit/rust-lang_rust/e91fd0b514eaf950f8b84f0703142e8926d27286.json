{"sha": "e91fd0b514eaf950f8b84f0703142e8926d27286", "node_id": "C_kwDOAAsO6NoAKGU5MWZkMGI1MTRlYWY5NTBmOGI4NGYwNzAzMTQyZTg5MjZkMjcyODY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-17T15:15:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-17T15:15:50Z"}, "message": "Rollup merge of #102466 - lcnr:const-equate-uwu, r=BoxyUwU\n\nonly allow `ConstEquate` with `feature(gce)`", "tree": {"sha": "1b661539737ce98daad8327cc9b11c405532b5d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b661539737ce98daad8327cc9b11c405532b5d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e91fd0b514eaf950f8b84f0703142e8926d27286", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjTXGmCRBK7hj4Ov3rIwAAEhsIAFL2TaWsZHTOpyHA8YuZLcaU\n3ph+l1e3rEqRKDXlF1A76biZuaZ2SsJ9cXGd6lyxHd1XGjHnBucOiFDiocfIs+/x\nBvSqko9s+uy68G4dVLaN0o5ueGgox5sl94mGTzq2GRe9onMH9b9tLhi7jVXomXHi\nAXdnS/bR2JyAox63REJ8eSSdksTTq8AYf74NjE4gEpPjHtA2BJ8TuDJi4dM29d2c\nZJ/sVU8AcQd0x+yW82hUgyKBzteiE1i2kn0AwhvlYm84xdl8XHkHj53SQ2dQqotr\n5bZ0v8dz2ikcRbtnUPEJ5ZzYXpeZRy13gvjxvx277HN7pMsCnFMzMAkqf/kq+SE=\n=rCM3\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b661539737ce98daad8327cc9b11c405532b5d0\nparent 66de34b0352146994b76e6399dd5cd5abc3ae3ce\nparent 292f0c599fee4e5feae66d57a00be0af505c74d2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666019750 +0200\ncommitter GitHub <noreply@github.com> 1666019750 +0200\n\nRollup merge of #102466 - lcnr:const-equate-uwu, r=BoxyUwU\n\nonly allow `ConstEquate` with `feature(gce)`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e91fd0b514eaf950f8b84f0703142e8926d27286", "html_url": "https://github.com/rust-lang/rust/commit/e91fd0b514eaf950f8b84f0703142e8926d27286", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e91fd0b514eaf950f8b84f0703142e8926d27286/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66de34b0352146994b76e6399dd5cd5abc3ae3ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/66de34b0352146994b76e6399dd5cd5abc3ae3ce", "html_url": "https://github.com/rust-lang/rust/commit/66de34b0352146994b76e6399dd5cd5abc3ae3ce"}, {"sha": "292f0c599fee4e5feae66d57a00be0af505c74d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/292f0c599fee4e5feae66d57a00be0af505c74d2", "html_url": "https://github.com/rust-lang/rust/commit/292f0c599fee4e5feae66d57a00be0af505c74d2"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "5eb16bcd1564ed03d3a30ecf4699868a87f2defe", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e91fd0b514eaf950f8b84f0703142e8926d27286/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91fd0b514eaf950f8b84f0703142e8926d27286/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=e91fd0b514eaf950f8b84f0703142e8926d27286", "patch": "@@ -492,19 +492,20 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 }\n \n                 ty::PredicateKind::ConstEquate(c1, c2) => {\n+                    assert!(\n+                        self.selcx.tcx().features().generic_const_exprs,\n+                        \"`ConstEquate` without a feature gate: {c1:?} {c2:?}\",\n+                    );\n                     debug!(?c1, ?c2, \"equating consts\");\n-                    let tcx = self.selcx.tcx();\n-                    if tcx.features().generic_const_exprs {\n-                        // FIXME: we probably should only try to unify abstract constants\n-                        // if the constants depend on generic parameters.\n-                        //\n-                        // Let's just see where this breaks :shrug:\n-                        if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n-                            (c1.kind(), c2.kind())\n-                        {\n-                            if infcx.try_unify_abstract_consts(a, b, obligation.param_env) {\n-                                return ProcessResult::Changed(vec![]);\n-                            }\n+                    // FIXME: we probably should only try to unify abstract constants\n+                    // if the constants depend on generic parameters.\n+                    //\n+                    // Let's just see where this breaks :shrug:\n+                    if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n+                        (c1.kind(), c2.kind())\n+                    {\n+                        if infcx.try_unify_abstract_consts(a, b, obligation.param_env) {\n+                            return ProcessResult::Changed(vec![]);\n                         }\n                     }\n "}, {"sha": "9ebff48920160e6db54469f1fe6e676394cde01b", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e91fd0b514eaf950f8b84f0703142e8926d27286/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91fd0b514eaf950f8b84f0703142e8926d27286/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=e91fd0b514eaf950f8b84f0703142e8926d27286", "patch": "@@ -676,19 +676,21 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n \n                 ty::PredicateKind::ConstEquate(c1, c2) => {\n+                    assert!(\n+                        self.tcx().features().generic_const_exprs,\n+                        \"`ConstEquate` without a feature gate: {c1:?} {c2:?}\",\n+                    );\n                     debug!(?c1, ?c2, \"evaluate_predicate_recursively: equating consts\");\n \n-                    if self.tcx().features().generic_const_exprs {\n-                        // FIXME: we probably should only try to unify abstract constants\n-                        // if the constants depend on generic parameters.\n-                        //\n-                        // Let's just see where this breaks :shrug:\n-                        if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n-                            (c1.kind(), c2.kind())\n-                        {\n-                            if self.infcx.try_unify_abstract_consts(a, b, obligation.param_env) {\n-                                return Ok(EvaluatedToOk);\n-                            }\n+                    // FIXME: we probably should only try to unify abstract constants\n+                    // if the constants depend on generic parameters.\n+                    //\n+                    // Let's just see where this breaks :shrug:\n+                    if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n+                        (c1.kind(), c2.kind())\n+                    {\n+                        if self.infcx.try_unify_abstract_consts(a, b, obligation.param_env) {\n+                            return Ok(EvaluatedToOk);\n                         }\n                     }\n "}]}