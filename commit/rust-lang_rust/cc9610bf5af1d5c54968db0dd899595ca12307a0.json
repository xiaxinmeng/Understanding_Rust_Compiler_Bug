{"sha": "cc9610bf5af1d5c54968db0dd899595ca12307a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjOTYxMGJmNWFmMWQ1YzU0OTY4ZGIwZGQ4OTk1OTVjYTEyMzA3YTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-07T02:30:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-07T02:30:24Z"}, "message": "Auto merge of #85810 - bjorn3:further_driver_cleanup, r=varkor\n\nDriver improvements\n\nThis PR contains a couple of cleanups for the driver and a few small improvements for the custom codegen backend interface. It also implements `--version` and `-Cpasses=list` support for custom codegen backends.", "tree": {"sha": "e94808f43215f27d16ed0e9c834d0048a97e1bcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e94808f43215f27d16ed0e9c834d0048a97e1bcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc9610bf5af1d5c54968db0dd899595ca12307a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc9610bf5af1d5c54968db0dd899595ca12307a0", "html_url": "https://github.com/rust-lang/rust/commit/cc9610bf5af1d5c54968db0dd899595ca12307a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc9610bf5af1d5c54968db0dd899595ca12307a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69e2f23a41f3bb5cb49e3dc66160f3888d871917", "url": "https://api.github.com/repos/rust-lang/rust/commits/69e2f23a41f3bb5cb49e3dc66160f3888d871917", "html_url": "https://github.com/rust-lang/rust/commit/69e2f23a41f3bb5cb49e3dc66160f3888d871917"}, {"sha": "435b540607554ea11fa3d3c71b8b6b17df75f806", "url": "https://api.github.com/repos/rust-lang/rust/commits/435b540607554ea11fa3d3c71b8b6b17df75f806", "html_url": "https://github.com/rust-lang/rust/commit/435b540607554ea11fa3d3c71b8b6b17df75f806"}], "stats": {"total": 238, "additions": 103, "deletions": 135}, "files": [{"sha": "6676d88602c45d9e34991e80ce25e6cf158077e5", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=cc9610bf5af1d5c54968db0dd899595ca12307a0", "patch": "@@ -177,21 +177,6 @@ pub(crate) fn run_aot(\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n ) -> Box<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>)> {\n-    use rustc_span::symbol::sym;\n-\n-    let crate_attrs = tcx.hir().attrs(rustc_hir::CRATE_HIR_ID);\n-    let subsystem = tcx.sess.first_attr_value_str_by_name(crate_attrs, sym::windows_subsystem);\n-    let windows_subsystem = subsystem.map(|subsystem| {\n-        if subsystem != sym::windows && subsystem != sym::console {\n-            tcx.sess.fatal(&format!(\n-                \"invalid windows subsystem `{}`, only \\\n-                                    `windows` and `console` are allowed\",\n-                subsystem\n-            ));\n-        }\n-        subsystem.to_string()\n-    });\n-\n     let mut work_products = FxHashMap::default();\n \n     let cgus = if tcx.sess.opts.output_types.should_codegen() {\n@@ -307,12 +292,10 @@ pub(crate) fn run_aot(\n \n     Box::new((\n         CodegenResults {\n-            crate_name: tcx.crate_name(LOCAL_CRATE),\n             modules,\n             allocator_module,\n             metadata_module,\n             metadata,\n-            windows_subsystem,\n             linker_info: LinkerInfo::new(tcx, crate::target_triple(tcx.sess).to_string()),\n             crate_info: CrateInfo::new(tcx),\n         },"}, {"sha": "904efed5bd98c6e45800273a60a59da92529968a", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=cc9610bf5af1d5c54968db0dd899595ca12307a0", "patch": "@@ -28,8 +28,7 @@ use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::CodegenResults;\n use rustc_errors::ErrorReported;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n-use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoader};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_session::config::OutputFilenames;\n use rustc_session::Session;\n \n@@ -164,17 +163,14 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         }\n     }\n \n-    fn metadata_loader(&self) -> Box<dyn MetadataLoader + Sync> {\n-        Box::new(rustc_codegen_ssa::back::metadata::DefaultMetadataLoader)\n-    }\n-\n-    fn provide(&self, _providers: &mut Providers) {}\n-    fn provide_extern(&self, _providers: &mut Providers) {}\n-\n     fn target_features(&self, _sess: &Session) -> Vec<rustc_span::Symbol> {\n         vec![]\n     }\n \n+    fn print_version(&self) {\n+        println!(\"Cranelift version: {}\", cranelift_codegen::VERSION);\n+    }\n+\n     fn codegen_crate(\n         &self,\n         tcx: TyCtxt<'_>,\n@@ -222,7 +218,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             sess,\n             &codegen_results,\n             outputs,\n-            &codegen_results.crate_name.as_str(),\n+            &codegen_results.crate_info.local_crate_name.as_str(),\n         );\n \n         Ok(())"}, {"sha": "776cb2ee99bcbf727f6ce65d5fa6124454eed4f6", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=cc9610bf5af1d5c54968db0dd899595ca12307a0", "patch": "@@ -29,8 +29,8 @@ use rustc_codegen_ssa::{CodegenResults, CompiledModule};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{ErrorReported, FatalError, Handler};\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n-use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::middle::cstore::EncodedMetadata;\n+use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{OptLevel, OutputFilenames, PrintRequest};\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n@@ -248,13 +248,6 @@ impl CodegenBackend for LlvmCodegenBackend {\n         target_features(sess)\n     }\n \n-    fn metadata_loader(&self) -> Box<MetadataLoaderDyn> {\n-        Box::new(rustc_codegen_ssa::back::metadata::DefaultMetadataLoader)\n-    }\n-\n-    fn provide(&self, _providers: &mut ty::query::Providers) {}\n-    fn provide_extern(&self, _providers: &mut ty::query::Providers) {}\n-\n     fn codegen_crate<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,\n@@ -304,7 +297,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n             sess,\n             &codegen_results,\n             outputs,\n-            &codegen_results.crate_name.as_str(),\n+            &codegen_results.crate_info.local_crate_name.as_str(),\n         );\n \n         Ok(())"}, {"sha": "05df7ab53881e7e348f6c3615b534c998b3c9af7", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=cc9610bf5af1d5c54968db0dd899595ca12307a0", "patch": "@@ -1957,7 +1957,7 @@ fn add_order_independent_options(\n     cmd.output_filename(out_filename);\n \n     if crate_type == CrateType::Executable && sess.target.is_like_windows {\n-        if let Some(ref s) = codegen_results.windows_subsystem {\n+        if let Some(ref s) = codegen_results.crate_info.windows_subsystem {\n             cmd.subsystem(s);\n         }\n     }"}, {"sha": "b2ecc3b0f3242e33738c6255ca35e4365ff87f14", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=cc9610bf5af1d5c54968db0dd899595ca12307a0", "patch": "@@ -370,7 +370,6 @@ pub fn provide(providers: &mut Providers) {\n pub fn provide_extern(providers: &mut Providers) {\n     providers.is_reachable_non_generic = is_reachable_non_generic_provider_extern;\n     providers.upstream_monomorphizations_for = upstream_monomorphizations_for_provider;\n-    providers.wasm_import_module_map = wasm_import_module_map;\n }\n \n fn symbol_export_level(tcx: TyCtxt<'_>, sym_def_id: DefId) -> SymbolExportLevel {"}, {"sha": "ff4e64095714086cd4a76222786f164a2587b895", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=cc9610bf5af1d5c54968db0dd899595ca12307a0", "patch": "@@ -31,7 +31,7 @@ use rustc_session::config::{self, CrateType, Lto, OutputFilenames, OutputType};\n use rustc_session::config::{Passes, SwitchWithOptPath};\n use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::sym;\n use rustc_span::{BytePos, FileName, InnerSpan, Pos, Span};\n use rustc_target::spec::{MergeFunctions, PanicStrategy, SanitizerSet};\n \n@@ -426,21 +426,9 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n     let (coordinator_send, coordinator_receive) = channel();\n     let sess = tcx.sess;\n \n-    let crate_name = tcx.crate_name(LOCAL_CRATE);\n     let crate_attrs = tcx.hir().attrs(rustc_hir::CRATE_HIR_ID);\n     let no_builtins = tcx.sess.contains_name(crate_attrs, sym::no_builtins);\n     let is_compiler_builtins = tcx.sess.contains_name(crate_attrs, sym::compiler_builtins);\n-    let subsystem = tcx.sess.first_attr_value_str_by_name(crate_attrs, sym::windows_subsystem);\n-    let windows_subsystem = subsystem.map(|subsystem| {\n-        if subsystem != sym::windows && subsystem != sym::console {\n-            tcx.sess.fatal(&format!(\n-                \"invalid windows subsystem `{}`, only \\\n-                                     `windows` and `console` are allowed\",\n-                subsystem\n-            ));\n-        }\n-        subsystem.to_string()\n-    });\n \n     let linker_info = LinkerInfo::new(tcx, target_cpu);\n     let crate_info = CrateInfo::new(tcx);\n@@ -472,9 +460,7 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n \n     OngoingCodegen {\n         backend,\n-        crate_name,\n         metadata,\n-        windows_subsystem,\n         linker_info,\n         crate_info,\n \n@@ -1812,9 +1798,7 @@ impl SharedEmitterMain {\n \n pub struct OngoingCodegen<B: ExtraBackendMethods> {\n     pub backend: B,\n-    pub crate_name: Symbol,\n     pub metadata: EncodedMetadata,\n-    pub windows_subsystem: Option<String>,\n     pub linker_info: LinkerInfo,\n     pub crate_info: CrateInfo,\n     pub coordinator_send: Sender<Box<dyn Any + Send>>,\n@@ -1857,9 +1841,7 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n \n         (\n             CodegenResults {\n-                crate_name: self.crate_name,\n                 metadata: self.metadata,\n-                windows_subsystem: self.windows_subsystem,\n                 linker_info: self.linker_info,\n                 crate_info: self.crate_info,\n "}, {"sha": "38ab39febe066c4c0db3adfb8f4286d1ff0289e7", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=cc9610bf5af1d5c54968db0dd899595ca12307a0", "patch": "@@ -30,6 +30,7 @@ use rustc_middle::ty::{self, Instance, Ty, TyCtxt};\n use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_session::config::{self, EntryFnType};\n use rustc_session::Session;\n+use rustc_span::symbol::sym;\n use rustc_target::abi::{Align, LayoutOf, VariantIdx};\n \n use std::ops::{Deref, DerefMut};\n@@ -755,7 +756,22 @@ impl<B: ExtraBackendMethods> Drop for AbortCodegenOnDrop<B> {\n \n impl CrateInfo {\n     pub fn new(tcx: TyCtxt<'_>) -> CrateInfo {\n+        let local_crate_name = tcx.crate_name(LOCAL_CRATE);\n+        let crate_attrs = tcx.hir().attrs(rustc_hir::CRATE_HIR_ID);\n+        let subsystem = tcx.sess.first_attr_value_str_by_name(crate_attrs, sym::windows_subsystem);\n+        let windows_subsystem = subsystem.map(|subsystem| {\n+            if subsystem != sym::windows && subsystem != sym::console {\n+                tcx.sess.fatal(&format!(\n+                    \"invalid windows subsystem `{}`, only \\\n+                                     `windows` and `console` are allowed\",\n+                    subsystem\n+                ));\n+            }\n+            subsystem.to_string()\n+        });\n+\n         let mut info = CrateInfo {\n+            local_crate_name,\n             panic_runtime: None,\n             compiler_builtins: None,\n             profiler_runtime: None,\n@@ -769,6 +785,7 @@ impl CrateInfo {\n             lang_item_to_crate: Default::default(),\n             missing_lang_items: Default::default(),\n             dependency_formats: tcx.dependency_formats(()),\n+            windows_subsystem,\n         };\n         let lang_items = tcx.lang_items();\n "}, {"sha": "b6de12fa35e37ee183dcc89412d5ad2af0a08d8a", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=cc9610bf5af1d5c54968db0dd899595ca12307a0", "patch": "@@ -135,6 +135,7 @@ impl From<&cstore::NativeLib> for NativeLib {\n /// and the corresponding properties without referencing information outside of a `CrateInfo`.\n #[derive(Debug, Encodable, Decodable)]\n pub struct CrateInfo {\n+    pub local_crate_name: Symbol,\n     pub panic_runtime: Option<CrateNum>,\n     pub compiler_builtins: Option<CrateNum>,\n     pub profiler_runtime: Option<CrateNum>,\n@@ -148,16 +149,15 @@ pub struct CrateInfo {\n     pub lang_item_to_crate: FxHashMap<LangItem, CrateNum>,\n     pub missing_lang_items: FxHashMap<CrateNum, Vec<LangItem>>,\n     pub dependency_formats: Lrc<Dependencies>,\n+    pub windows_subsystem: Option<String>,\n }\n \n #[derive(Encodable, Decodable)]\n pub struct CodegenResults {\n-    pub crate_name: Symbol,\n     pub modules: Vec<CompiledModule>,\n     pub allocator_module: Option<CompiledModule>,\n     pub metadata_module: Option<CompiledModule>,\n     pub metadata: rustc_middle::middle::cstore::EncodedMetadata,\n-    pub windows_subsystem: Option<String>,\n     pub linker_info: back::linker::LinkerInfo,\n     pub crate_info: CrateInfo,\n }"}, {"sha": "dc4146ec7b58dc132fa1cf454e9fe2a9ae352d70", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=cc9610bf5af1d5c54968db0dd899595ca12307a0", "patch": "@@ -63,9 +63,16 @@ pub trait CodegenBackend {\n         None\n     }\n \n-    fn metadata_loader(&self) -> Box<MetadataLoaderDyn>;\n-    fn provide(&self, _providers: &mut Providers);\n-    fn provide_extern(&self, _providers: &mut Providers);\n+    /// The metadata loader used to load rlib and dylib metadata.\n+    ///\n+    /// Alternative codegen backends may want to use different rlib or dylib formats than the\n+    /// default native static archives and dynamic libraries.\n+    fn metadata_loader(&self) -> Box<MetadataLoaderDyn> {\n+        Box::new(crate::back::metadata::DefaultMetadataLoader)\n+    }\n+\n+    fn provide(&self, _providers: &mut Providers) {}\n+    fn provide_extern(&self, _providers: &mut Providers) {}\n     fn codegen_crate<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "b943977e4c2bb36c7518a4bcdae5c989a4681a49", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=cc9610bf5af1d5c54968db0dd899595ca12307a0", "patch": "@@ -21,7 +21,7 @@ use rustc_data_structures::sync::SeqCst;\n use rustc_errors::registry::{InvalidErrorCode, Registry};\n use rustc_errors::{ErrorReported, PResult};\n use rustc_feature::find_gated_cfg;\n-use rustc_interface::util::{self, collect_crate_types, get_builtin_codegen_backend};\n+use rustc_interface::util::{self, collect_crate_types, get_codegen_backend};\n use rustc_interface::{interface, Queries};\n use rustc_lint::LintStore;\n use rustc_metadata::locator;\n@@ -499,7 +499,7 @@ fn make_input(\n     }\n }\n \n-// Whether to stop or continue compilation.\n+/// Whether to stop or continue compilation.\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum Compilation {\n     Stop,\n@@ -765,9 +765,16 @@ pub fn version(binary: &str, matches: &getopts::Matches) {\n         println!(\"commit-date: {}\", unw(util::commit_date_str()));\n         println!(\"host: {}\", config::host_triple());\n         println!(\"release: {}\", unw(util::release_str()));\n-        if cfg!(feature = \"llvm\") {\n-            get_builtin_codegen_backend(&None, \"llvm\")().print_version();\n-        }\n+\n+        let debug_flags = matches.opt_strs(\"Z\");\n+        let backend_name = debug_flags.iter().find_map(|x| {\n+            if x.starts_with(\"codegen-backend=\") {\n+                Some(&x[\"codegen-backends=\".len()..])\n+            } else {\n+                None\n+            }\n+        });\n+        get_codegen_backend(&None, backend_name).print_version();\n     }\n }\n \n@@ -1039,8 +1046,8 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n     }\n \n     // Don't handle -W help here, because we might first load plugins.\n-    let r = matches.opt_strs(\"Z\");\n-    if r.iter().any(|x| *x == \"help\") {\n+    let debug_flags = matches.opt_strs(\"Z\");\n+    if debug_flags.iter().any(|x| *x == \"help\") {\n         describe_debug_flags();\n         return None;\n     }\n@@ -1060,9 +1067,14 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n     }\n \n     if cg_flags.iter().any(|x| *x == \"passes=list\") {\n-        if cfg!(feature = \"llvm\") {\n-            get_builtin_codegen_backend(&None, \"llvm\")().print_passes();\n-        }\n+        let backend_name = debug_flags.iter().find_map(|x| {\n+            if x.starts_with(\"codegen-backend=\") {\n+                Some(&x[\"codegen-backends=\".len()..])\n+            } else {\n+                None\n+            }\n+        });\n+        get_codegen_backend(&None, backend_name).print_passes();\n         return None;\n     }\n "}, {"sha": "2320f0b47d27df0bb04b9a8c530ebc0d6bbfc72f", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=cc9610bf5af1d5c54968db0dd899595ca12307a0", "patch": "@@ -245,8 +245,7 @@ impl<'tcx> Queries<'tcx> {\n         self.prepare_outputs.compute(|| {\n             let expansion_result = self.expansion()?;\n             let (krate, boxed_resolver, _) = &*expansion_result.peek();\n-            let crate_name = self.crate_name()?;\n-            let crate_name = crate_name.peek();\n+            let crate_name = self.crate_name()?.peek();\n             passes::prepare_outputs(\n                 self.session(),\n                 self.compiler,\n@@ -343,32 +342,36 @@ impl<'tcx> Queries<'tcx> {\n     }\n \n     pub fn linker(&'tcx self) -> Result<Linker> {\n-        let dep_graph = self.dep_graph()?;\n-        let prepare_outputs = self.prepare_outputs()?;\n-        let crate_hash = self.global_ctxt()?.peek_mut().enter(|tcx| tcx.crate_hash(LOCAL_CRATE));\n-        let ongoing_codegen = self.ongoing_codegen()?;\n-\n         let sess = self.session().clone();\n         let codegen_backend = self.codegen_backend().clone();\n \n+        let dep_graph = self.dep_graph()?.peek().clone();\n+        let prepare_outputs = self.prepare_outputs()?.take();\n+        let crate_hash = self.global_ctxt()?.peek_mut().enter(|tcx| tcx.crate_hash(LOCAL_CRATE));\n+        let ongoing_codegen = self.ongoing_codegen()?.take();\n+\n         Ok(Linker {\n             sess,\n-            dep_graph: dep_graph.peek().clone(),\n-            prepare_outputs: prepare_outputs.take(),\n-            crate_hash,\n-            ongoing_codegen: ongoing_codegen.take(),\n             codegen_backend,\n+\n+            dep_graph,\n+            prepare_outputs,\n+            crate_hash,\n+            ongoing_codegen,\n         })\n     }\n }\n \n pub struct Linker {\n+    // compilation inputs\n     sess: Lrc<Session>,\n+    codegen_backend: Lrc<Box<dyn CodegenBackend>>,\n+\n+    // compilation outputs\n     dep_graph: DepGraph,\n     prepare_outputs: OutputFilenames,\n     crate_hash: Svh,\n     ongoing_codegen: Box<dyn Any>,\n-    codegen_backend: Lrc<Box<dyn CodegenBackend>>,\n }\n \n impl Linker {"}, {"sha": "d1d0eee365d48f1e91418b606a31f65c88d5b81b", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 23, "deletions": 32, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9610bf5af1d5c54968db0dd899595ca12307a0/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=cc9610bf5af1d5c54968db0dd899595ca12307a0", "patch": "@@ -32,7 +32,7 @@ use std::ops::DerefMut;\n use std::panic;\n use std::path::{Path, PathBuf};\n use std::sync::atomic::{AtomicBool, Ordering};\n-use std::sync::{Arc, Mutex, Once};\n+use std::sync::{Arc, Mutex};\n use std::thread;\n use tracing::info;\n \n@@ -73,7 +73,10 @@ pub fn create_session(\n     let codegen_backend = if let Some(make_codegen_backend) = make_codegen_backend {\n         make_codegen_backend(&sopts)\n     } else {\n-        get_codegen_backend(&sopts)\n+        get_codegen_backend(\n+            &sopts.maybe_sysroot,\n+            sopts.debugging_opts.codegen_backend.as_ref().map(|name| &name[..]),\n+        )\n     };\n \n     // target_override is documented to be called before init(), so this is okay\n@@ -241,35 +244,34 @@ fn load_backend_from_dylib(path: &Path) -> fn() -> Box<dyn CodegenBackend> {\n     }\n }\n \n-pub fn get_codegen_backend(sopts: &config::Options) -> Box<dyn CodegenBackend> {\n-    static INIT: Once = Once::new();\n-\n-    static mut LOAD: fn() -> Box<dyn CodegenBackend> = || unreachable!();\n+/// Get the codegen backend based on the name and specified sysroot.\n+///\n+/// A name of `None` indicates that the default backend should be used.\n+pub fn get_codegen_backend(\n+    maybe_sysroot: &Option<PathBuf>,\n+    backend_name: Option<&str>,\n+) -> Box<dyn CodegenBackend> {\n+    static LOAD: SyncOnceCell<unsafe fn() -> Box<dyn CodegenBackend>> = SyncOnceCell::new();\n \n-    INIT.call_once(|| {\n+    let load = LOAD.get_or_init(|| {\n         #[cfg(feature = \"llvm\")]\n         const DEFAULT_CODEGEN_BACKEND: &str = \"llvm\";\n \n         #[cfg(not(feature = \"llvm\"))]\n         const DEFAULT_CODEGEN_BACKEND: &str = \"cranelift\";\n \n-        let codegen_name = sopts\n-            .debugging_opts\n-            .codegen_backend\n-            .as_ref()\n-            .map(|name| &name[..])\n-            .unwrap_or(DEFAULT_CODEGEN_BACKEND);\n-\n-        let backend = match codegen_name {\n+        match backend_name.unwrap_or(DEFAULT_CODEGEN_BACKEND) {\n             filename if filename.contains('.') => load_backend_from_dylib(filename.as_ref()),\n-            codegen_name => get_builtin_codegen_backend(&sopts.maybe_sysroot, codegen_name),\n-        };\n-\n-        unsafe {\n-            LOAD = backend;\n+            #[cfg(feature = \"llvm\")]\n+            \"llvm\" => rustc_codegen_llvm::LlvmCodegenBackend::new,\n+            backend_name => get_codegen_sysroot(maybe_sysroot, backend_name),\n         }\n     });\n-    unsafe { LOAD() }\n+\n+    // SAFETY: In case of a builtin codegen backend this is safe. In case of an external codegen\n+    // backend we hope that the backend links against the same rustc_driver version. If this is not\n+    // the case, we get UB.\n+    unsafe { load() }\n }\n \n // This is used for rustdoc, but it uses similar machinery to codegen backend\n@@ -387,17 +389,6 @@ fn sysroot_candidates() -> Vec<PathBuf> {\n     }\n }\n \n-pub fn get_builtin_codegen_backend(\n-    maybe_sysroot: &Option<PathBuf>,\n-    backend_name: &str,\n-) -> fn() -> Box<dyn CodegenBackend> {\n-    match backend_name {\n-        #[cfg(feature = \"llvm\")]\n-        \"llvm\" => rustc_codegen_llvm::LlvmCodegenBackend::new,\n-        _ => get_codegen_sysroot(maybe_sysroot, backend_name),\n-    }\n-}\n-\n pub fn get_codegen_sysroot(\n     maybe_sysroot: &Option<PathBuf>,\n     backend_name: &str,"}, {"sha": "443e2df357fb408fc30a30293718ffb2764ecff3", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cc9610bf5af1d5c54968db0dd899595ca12307a0/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9610bf5af1d5c54968db0dd899595ca12307a0/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=cc9610bf5af1d5c54968db0dd899595ca12307a0", "patch": "@@ -1,4 +1,5 @@\n #![feature(rustc_private)]\n+#![deny(warnings)]\n \n extern crate rustc_codegen_ssa;\n extern crate rustc_errors;\n@@ -15,44 +16,28 @@ use rustc_codegen_ssa::back::linker::LinkerInfo;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::{CodegenResults, CrateInfo};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::sync::MetadataRef;\n use rustc_errors::ErrorReported;\n-use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n-use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoader, MetadataLoaderDyn};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::OutputFilenames;\n use rustc_session::Session;\n-use rustc_target::spec::Target;\n use std::any::Any;\n-use std::path::Path;\n \n struct TheBackend;\n \n impl CodegenBackend for TheBackend {\n-    fn metadata_loader(&self) -> Box<MetadataLoaderDyn> {\n-        Box::new(rustc_codegen_ssa::back::metadata::DefaultMetadataLoader)\n-    }\n-\n-    fn provide(&self, providers: &mut Providers) {}\n-    fn provide_extern(&self, providers: &mut Providers) {}\n-\n     fn codegen_crate<'a, 'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,\n         metadata: EncodedMetadata,\n         _need_metadata_module: bool,\n     ) -> Box<dyn Any> {\n-        use rustc_hir::def_id::LOCAL_CRATE;\n-\n         Box::new(CodegenResults {\n-            crate_name: tcx.crate_name(LOCAL_CRATE),\n             modules: vec![],\n             allocator_module: None,\n             metadata_module: None,\n             metadata,\n-            windows_subsystem: None,\n             linker_info: LinkerInfo::new(tcx, \"fake_target_cpu\".to_string()),\n             crate_info: CrateInfo::new(tcx),\n         })\n@@ -77,7 +62,7 @@ impl CodegenBackend for TheBackend {\n     ) -> Result<(), ErrorReported> {\n         use rustc_session::{config::CrateType, output::out_filename};\n         use std::io::Write;\n-        let crate_name = codegen_results.crate_name;\n+        let crate_name = codegen_results.crate_info.local_crate_name;\n         for &crate_type in sess.opts.crate_types.iter() {\n             if crate_type != CrateType::Rlib {\n                 sess.fatal(&format!(\"Crate type is {:?}\", crate_type));"}]}