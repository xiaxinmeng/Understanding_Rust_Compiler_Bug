{"sha": "73315c9168901ef6d676f017daaa9b4976380c03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMzE1YzkxNjg5MDFlZjZkNjc2ZjAxN2RhYWE5YjQ5NzYzODBjMDM=", "commit": {"author": {"name": "Dmitry", "email": "mamhigtt@gmail.com", "date": "2020-08-14T18:43:34Z"}, "committer": {"name": "Dmitry", "email": "mamhigtt@gmail.com", "date": "2020-08-14T19:37:43Z"}, "message": "synchronizing changes", "tree": {"sha": "0fae548ddc8dbf3fdfd553e4020db8e6826c8d84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fae548ddc8dbf3fdfd553e4020db8e6826c8d84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73315c9168901ef6d676f017daaa9b4976380c03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73315c9168901ef6d676f017daaa9b4976380c03", "html_url": "https://github.com/rust-lang/rust/commit/73315c9168901ef6d676f017daaa9b4976380c03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73315c9168901ef6d676f017daaa9b4976380c03/comments", "author": {"login": "godcodehunter", "id": 22272886, "node_id": "MDQ6VXNlcjIyMjcyODg2", "avatar_url": "https://avatars.githubusercontent.com/u/22272886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/godcodehunter", "html_url": "https://github.com/godcodehunter", "followers_url": "https://api.github.com/users/godcodehunter/followers", "following_url": "https://api.github.com/users/godcodehunter/following{/other_user}", "gists_url": "https://api.github.com/users/godcodehunter/gists{/gist_id}", "starred_url": "https://api.github.com/users/godcodehunter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/godcodehunter/subscriptions", "organizations_url": "https://api.github.com/users/godcodehunter/orgs", "repos_url": "https://api.github.com/users/godcodehunter/repos", "events_url": "https://api.github.com/users/godcodehunter/events{/privacy}", "received_events_url": "https://api.github.com/users/godcodehunter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "godcodehunter", "id": 22272886, "node_id": "MDQ6VXNlcjIyMjcyODg2", "avatar_url": "https://avatars.githubusercontent.com/u/22272886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/godcodehunter", "html_url": "https://github.com/godcodehunter", "followers_url": "https://api.github.com/users/godcodehunter/followers", "following_url": "https://api.github.com/users/godcodehunter/following{/other_user}", "gists_url": "https://api.github.com/users/godcodehunter/gists{/gist_id}", "starred_url": "https://api.github.com/users/godcodehunter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/godcodehunter/subscriptions", "organizations_url": "https://api.github.com/users/godcodehunter/orgs", "repos_url": "https://api.github.com/users/godcodehunter/repos", "events_url": "https://api.github.com/users/godcodehunter/events{/privacy}", "received_events_url": "https://api.github.com/users/godcodehunter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "178c3e135a2a249692f7784712492e7884ae0c00", "url": "https://api.github.com/repos/rust-lang/rust/commits/178c3e135a2a249692f7784712492e7884ae0c00", "html_url": "https://github.com/rust-lang/rust/commit/178c3e135a2a249692f7784712492e7884ae0c00"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "3bad2338a273b7805da53374e17fe15181f6ebfe", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73315c9168901ef6d676f017daaa9b4976380c03/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73315c9168901ef6d676f017daaa9b4976380c03/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=73315c9168901ef6d676f017daaa9b4976380c03", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! Provides set of implementation for hir's objects that allows get back location in file.\n \n use either::Either;\n use hir_def::{"}, {"sha": "51dbac078f5ed209e3da7a2b06f46bf9d2388e61", "filename": "crates/ide/src/completion.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73315c9168901ef6d676f017daaa9b4976380c03/crates%2Fide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73315c9168901ef6d676f017daaa9b4976380c03/crates%2Fide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion.rs?ref=73315c9168901ef6d676f017daaa9b4976380c03", "patch": "@@ -18,6 +18,7 @@ mod complete_unqualified_path;\n mod complete_postfix;\n mod complete_macro_in_item_position;\n mod complete_trait_impl;\n+mod unstable_feature_descriptor;\n \n use ide_db::RootDatabase;\n \n@@ -29,6 +30,11 @@ use crate::{\n     FilePosition,\n };\n \n+//FIXME: cyclic imports caused by xtask generation, this should be better\n+use crate::completion::{\n+    complete_attribute::LintCompletion, unstable_feature_descriptor::UNSTABLE_FEATURE_DESCRIPTOR,\n+};\n+\n pub use crate::completion::{\n     completion_config::CompletionConfig,\n     completion_item::{CompletionItem, CompletionItemKind, CompletionScore, InsertTextFormat},"}, {"sha": "b193c638760204e5cdc6890e5070f5c8ab3a976e", "filename": "crates/ide/src/completion/complete_attribute.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/73315c9168901ef6d676f017daaa9b4976380c03/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73315c9168901ef6d676f017daaa9b4976380c03/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs?ref=73315c9168901ef6d676f017daaa9b4976380c03", "patch": "@@ -9,6 +9,7 @@ use syntax::{ast, AstNode, SyntaxKind};\n use crate::completion::{\n     completion_context::CompletionContext,\n     completion_item::{CompletionItem, CompletionItemKind, CompletionKind, Completions},\n+    UNSTABLE_FEATURE_DESCRIPTOR,\n };\n \n pub(super) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n@@ -17,12 +18,15 @@ pub(super) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n         (Some(path), Some(token_tree)) if path.to_string() == \"derive\" => {\n             complete_derive(acc, ctx, token_tree)\n         }\n+        (Some(path), Some(token_tree)) if path.to_string() == \"feature\" => {\n+            complete_lint(acc, ctx, token_tree, UNSTABLE_FEATURE_DESCRIPTOR)\n+        }\n         (Some(path), Some(token_tree))\n             if [\"allow\", \"warn\", \"deny\", \"forbid\"]\n                 .iter()\n                 .any(|lint_level| lint_level == &path.to_string()) =>\n         {\n-            complete_lint(acc, ctx, token_tree)\n+            complete_lint(acc, ctx, token_tree, DEFAULT_LINT_COMPLETIONS)\n         }\n         (_, Some(_token_tree)) => {}\n         _ => complete_attribute_start(acc, ctx, attribute),\n@@ -162,9 +166,14 @@ fn complete_derive(acc: &mut Completions, ctx: &CompletionContext, derive_input:\n     }\n }\n \n-fn complete_lint(acc: &mut Completions, ctx: &CompletionContext, derive_input: ast::TokenTree) {\n+fn complete_lint(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    derive_input: ast::TokenTree,\n+    lints_completions: &[LintCompletion],\n+) {\n     if let Ok(existing_lints) = parse_comma_sep_input(derive_input) {\n-        for lint_completion in DEFAULT_LINT_COMPLETIONS\n+        for lint_completion in lints_completions\n             .into_iter()\n             .filter(|completion| !existing_lints.contains(completion.label))\n         {\n@@ -228,7 +237,7 @@ fn get_derive_names_in_scope(ctx: &CompletionContext) -> FxHashSet<String> {\n     result\n }\n \n-struct DeriveCompletion {\n+pub(crate) struct DeriveCompletion {\n     label: &'static str,\n     dependencies: &'static [&'static str],\n }\n@@ -248,9 +257,9 @@ const DEFAULT_DERIVE_COMPLETIONS: &[DeriveCompletion] = &[\n     DeriveCompletion { label: \"Ord\", dependencies: &[\"PartialOrd\", \"Eq\", \"PartialEq\"] },\n ];\n \n-struct LintCompletion {\n-    label: &'static str,\n-    description: &'static str,\n+pub(crate) struct LintCompletion {\n+    pub(crate) label: &'static str,\n+    pub(crate) description: &'static str,\n }\n \n #[rustfmt::skip]"}, {"sha": "14cd583eaa8af084f01906a2510bd5045ba1c51f", "filename": "crates/ide/src/completion/unstable_feature_descriptor.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/73315c9168901ef6d676f017daaa9b4976380c03/crates%2Fide%2Fsrc%2Fcompletion%2Funstable_feature_descriptor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73315c9168901ef6d676f017daaa9b4976380c03/crates%2Fide%2Fsrc%2Fcompletion%2Funstable_feature_descriptor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Funstable_feature_descriptor.rs?ref=73315c9168901ef6d676f017daaa9b4976380c03", "previous_filename": "crates/ra_ide/src/completion/unstable_feature_descriptor.rs"}, {"sha": "4b2b614fae66f15188c4619689574ce685e26424", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73315c9168901ef6d676f017daaa9b4976380c03/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73315c9168901ef6d676f017daaa9b4976380c03/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=73315c9168901ef6d676f017daaa9b4976380c03", "patch": "@@ -29,9 +29,9 @@ pub use self::{\n // Directory used by xtask\n const STORAGE: &str = \".xtask\";\n \n-const GRAMMAR_DIR: &str = \"crates/ra_parser/src/grammar\";\n-const OK_INLINE_TESTS_DIR: &str = \"crates/ra_syntax/test_data/parser/inline/ok\";\n-const ERR_INLINE_TESTS_DIR: &str = \"crates/ra_syntax/test_data/parser/inline/err\";\n+const GRAMMAR_DIR: &str = \"crates/parser/src/grammar\";\n+const OK_INLINE_TESTS_DIR: &str = \"crates/syntax/test_data/parser/inline/ok\";\n+const ERR_INLINE_TESTS_DIR: &str = \"crates/syntax/test_data/parser/inline/err\";\n \n const SYNTAX_KINDS: &str = \"crates/parser/src/syntax_kind/generated.rs\";\n const AST_NODES: &str = \"crates/syntax/src/ast/generated/nodes.rs\";\n@@ -41,7 +41,7 @@ const ASSISTS_DIR: &str = \"crates/assists/src/handlers\";\n const ASSISTS_TESTS: &str = \"crates/assists/src/tests/generated.rs\";\n \n const REPOSITORY_URL: &str = \"https://github.com/rust-lang/rust\";\n-const UNSTABLE_FEATURE: &str = \"crates/ra_ide/src/completion/unstable_feature_descriptor.rs\";\n+const UNSTABLE_FEATURE: &str = \"crates/ide/src/completion/unstable_feature_descriptor.rs\";\n const REPO_PATH: &str = \"src/doc/unstable-book/src\";\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy)]"}, {"sha": "f220f85d3d68f7f617cf0eeef8f1dbe12d4cab4b", "filename": "xtask/src/codegen/gen_unstable_future_descriptor.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73315c9168901ef6d676f017daaa9b4976380c03/xtask%2Fsrc%2Fcodegen%2Fgen_unstable_future_descriptor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73315c9168901ef6d676f017daaa9b4976380c03/xtask%2Fsrc%2Fcodegen%2Fgen_unstable_future_descriptor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_unstable_future_descriptor.rs?ref=73315c9168901ef6d676f017daaa9b4976380c03", "patch": "@@ -15,8 +15,7 @@ fn generate_descriptor(src_dir: PathBuf) -> Result<TokenStream> {\n         .filter_map(|e| e.ok())\n         .filter(|entry| {\n             // Get all `.md ` files\n-            entry.file_type().is_file()\n-                && entry.path().extension().unwrap_or_default() == \"md\"\n+            entry.file_type().is_file() && entry.path().extension().unwrap_or_default() == \"md\"\n         })\n         .collect::<Vec<_>>();\n "}]}