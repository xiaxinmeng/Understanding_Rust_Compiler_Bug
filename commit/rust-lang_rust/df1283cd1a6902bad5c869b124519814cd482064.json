{"sha": "df1283cd1a6902bad5c869b124519814cd482064", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMTI4M2NkMWE2OTAyYmFkNWM4NjliMTI0NTE5ODE0Y2Q0ODIwNjQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-01-11T17:32:28Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-01-13T13:29:25Z"}, "message": "Unit/regression tests for issues #29092, #30018, #30530, #30822.\n\nNote that the test for #30822 is folded into the test for #30530 (but\nthe file name mentions only 30530).", "tree": {"sha": "24616eaac83ab45773e00aee3bfa3f5f0b40000d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24616eaac83ab45773e00aee3bfa3f5f0b40000d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df1283cd1a6902bad5c869b124519814cd482064", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df1283cd1a6902bad5c869b124519814cd482064", "html_url": "https://github.com/rust-lang/rust/commit/df1283cd1a6902bad5c869b124519814cd482064", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df1283cd1a6902bad5c869b124519814cd482064/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f251ff4081dc89b984000547ec0903e845f14201", "url": "https://api.github.com/repos/rust-lang/rust/commits/f251ff4081dc89b984000547ec0903e845f14201", "html_url": "https://github.com/rust-lang/rust/commit/f251ff4081dc89b984000547ec0903e845f14201"}], "stats": {"total": 213, "additions": 213, "deletions": 0}, "files": [{"sha": "c55cc91cc928fa66e96dfa4e79b60f48e1d505d9", "filename": "src/test/run-pass/issue-29092.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/df1283cd1a6902bad5c869b124519814cd482064/src%2Ftest%2Frun-pass%2Fissue-29092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df1283cd1a6902bad5c869b124519814cd482064/src%2Ftest%2Frun-pass%2Fissue-29092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-29092.rs?ref=df1283cd1a6902bad5c869b124519814cd482064", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for Issue #29092.\n+//\n+// (Possibly redundant with regression test run-pass/issue-30530.rs)\n+\n+use self::Term::*;\n+\n+#[derive(Clone)]\n+pub enum Term {\n+    Dummy,\n+    A(Box<Term>),\n+    B(Box<Term>),\n+}\n+\n+// a small-step evaluator\n+pub fn small_eval(v: Term) -> Term {\n+    match v {\n+        A(t) => *t.clone(),\n+        B(t) => *t.clone(),\n+        _ => Dummy,\n+    }\n+}\n+\n+fn main() {\n+    small_eval(Dummy);\n+}"}, {"sha": "25eff9def9dfc83e3c0d396262779c0599058907", "filename": "src/test/run-pass/issue-30018-nopanic.rs", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/df1283cd1a6902bad5c869b124519814cd482064/src%2Ftest%2Frun-pass%2Fissue-30018-nopanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df1283cd1a6902bad5c869b124519814cd482064/src%2Ftest%2Frun-pass%2Fissue-30018-nopanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-30018-nopanic.rs?ref=df1283cd1a6902bad5c869b124519814cd482064", "patch": "@@ -0,0 +1,111 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// More thorough regression test for Issues #30018 and #30822. This\n+// attempts to explore different ways that array element construction\n+// (for both scratch arrays and non-scratch ones) interacts with\n+// breaks in the control-flow, in terms of the order of evaluation of\n+// the destructors (which may change; see RFC Issue 744) and the\n+// number of times that the destructor evaluates for each value (which\n+// should never exceed 1; this latter case is what #30822 is about).\n+\n+use std::cell::RefCell;\n+\n+struct D<'a>(&'a RefCell<Vec<i32>>, i32);\n+\n+impl<'a> Drop for D<'a> {\n+    fn drop(&mut self) {\n+        println!(\"Dropping D({})\", self.1);\n+        (self.0).borrow_mut().push(self.1);\n+    }\n+}\n+\n+fn main() {\n+    println!(\"Start\");\n+    break_during_elem();\n+    break_after_whole();\n+    println!(\"Finis\");\n+}\n+\n+fn break_during_elem() {\n+    let log = &RefCell::new(Vec::new());\n+\n+    // CASE 1: Fixed-size array itself is stored in _r slot.\n+    loop {\n+        let _r = [D(log, 10),\n+                  D(log, 11),\n+                  { D(log, 12); break; },\n+                  D(log, 13)];\n+    }\n+    assert_eq!(&log.borrow()[..], &[12, 11, 10]);\n+    log.borrow_mut().clear();\n+\n+    // CASE 2: Slice (borrow of array) is stored in _r slot.\n+    // This is the case that is actually being reported in #30018.\n+    loop {\n+        let _r = &[D(log, 20),\n+                   D(log, 21),\n+                   { D(log, 22); break; },\n+                   D(log, 23)];\n+    }\n+    assert_eq!(&log.borrow()[..], &[22, 21, 20]);\n+    log.borrow_mut().clear();\n+\n+    // CASE 3: (Borrow of) slice-index of array is stored in _r slot.\n+    loop {\n+        let _r = &[D(log, 30),\n+                  D(log, 31),\n+                  { D(log, 32); break; },\n+                  D(log, 33)][..];\n+    }\n+    assert_eq!(&log.borrow()[..], &[32, 31, 30]);\n+    log.borrow_mut().clear();\n+}\n+\n+// The purpose of these functions is to test what happens when we\n+// panic after an array has been constructed in its entirety.\n+//\n+// It is meant to act as proof that we still need to continue\n+// scheduling the destruction of an array even after we've scheduling\n+// drop for its elements during construction; the latter is tested by\n+// `fn break_during_elem()`.\n+fn break_after_whole() {\n+    let log = &RefCell::new(Vec::new());\n+\n+    // CASE 1: Fixed-size array itself is stored in _r slot.\n+    loop {\n+        let _r = [D(log, 10),\n+                  D(log, 11),\n+                  D(log, 12)];\n+        break;\n+    }\n+    assert_eq!(&log.borrow()[..], &[10, 11, 12]);\n+    log.borrow_mut().clear();\n+\n+    // CASE 2: Slice (borrow of array) is stored in _r slot.\n+    loop {\n+        let _r = &[D(log, 20),\n+                   D(log, 21),\n+                   D(log, 22)];\n+        break;\n+    }\n+    assert_eq!(&log.borrow()[..], &[20, 21, 22]);\n+    log.borrow_mut().clear();\n+\n+    // CASE 3: (Borrow of) slice-index of array is stored in _r slot.\n+    loop {\n+        let _r = &[D(log, 30),\n+                   D(log, 31),\n+                   D(log, 32)][..];\n+        break;\n+    }\n+    assert_eq!(&log.borrow()[..], &[30, 31, 32]);\n+    log.borrow_mut().clear();\n+}"}, {"sha": "da4d5f19d4a2e9b585f825c93d539602e531fd6f", "filename": "src/test/run-pass/issue-30018-panic.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/df1283cd1a6902bad5c869b124519814cd482064/src%2Ftest%2Frun-pass%2Fissue-30018-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df1283cd1a6902bad5c869b124519814cd482064/src%2Ftest%2Frun-pass%2Fissue-30018-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-30018-panic.rs?ref=df1283cd1a6902bad5c869b124519814cd482064", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for Issue #30018. This is very similar to the\n+// original reported test, except that the panic is wrapped in a\n+// spawned thread to isolate the expected error result from the\n+// SIGTRAP injected by the drop-flag consistency checking.\n+\n+struct Foo;\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {}\n+}\n+\n+fn foo() -> Foo {\n+    panic!();\n+}\n+\n+fn main() {\n+    use std::thread;\n+    let handle = thread::spawn(|| {\n+        let _ = &[foo()];\n+    });\n+    let _ = handle.join();\n+}"}, {"sha": "d5139c908bdac2ea2b743c7e354c398a5c7ec399", "filename": "src/test/run-pass/issue-30530.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/df1283cd1a6902bad5c869b124519814cd482064/src%2Ftest%2Frun-pass%2Fissue-30530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df1283cd1a6902bad5c869b124519814cd482064/src%2Ftest%2Frun-pass%2Fissue-30530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-30530.rs?ref=df1283cd1a6902bad5c869b124519814cd482064", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for Issue #30530: alloca's created for storing\n+// intermediate scratch values during brace-less match arms need to be\n+// initialized with their drop-flag set to \"dropped\" (or else we end\n+// up running the destructors on garbage data at the end of the\n+// function).\n+\n+pub enum Handler {\n+    Default,\n+    #[allow(dead_code)]\n+    Custom(*mut Box<Fn()>),\n+}\n+\n+fn main() {\n+    take(Handler::Default, Box::new(main));\n+}\n+\n+#[inline(never)]\n+pub fn take(h: Handler, f: Box<Fn()>) -> Box<Fn()> {\n+    unsafe {\n+        match h {\n+            Handler::Custom(ptr) => *Box::from_raw(ptr),\n+            Handler::Default => f,\n+        }\n+    }\n+}"}]}