{"sha": "d0aff859d55766e132f3bbdd67e3d38a1d95e80a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYWZmODU5ZDU1NzY2ZTEzMmYzYmJkZDY3ZTNkMzhhMWQ5NWU4MGE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-02-09T15:43:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-13T15:21:30Z"}, "message": "make regions \"traceable\" so you can do `infcx.at(..).eq(r1, r2)`", "tree": {"sha": "a36d31dcaa5b1de34ee2ef35b9fd3915432fa3f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a36d31dcaa5b1de34ee2ef35b9fd3915432fa3f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0aff859d55766e132f3bbdd67e3d38a1d95e80a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0aff859d55766e132f3bbdd67e3d38a1d95e80a", "html_url": "https://github.com/rust-lang/rust/commit/d0aff859d55766e132f3bbdd67e3d38a1d95e80a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0aff859d55766e132f3bbdd67e3d38a1d95e80a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10ae216b7516af352fbb477875887b085f731aad", "url": "https://api.github.com/repos/rust-lang/rust/commits/10ae216b7516af352fbb477875887b085f731aad", "html_url": "https://github.com/rust-lang/rust/commit/10ae216b7516af352fbb477875887b085f731aad"}], "stats": {"total": 45, "additions": 23, "deletions": 22}, "files": [{"sha": "d9fbf4aa514821975485b324049dc7ded168b9fa", "filename": "src/librustc/infer/at.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d0aff859d55766e132f3bbdd67e3d38a1d95e80a/src%2Flibrustc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0aff859d55766e132f3bbdd67e3d38a1d95e80a/src%2Flibrustc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fat.rs?ref=d0aff859d55766e132f3bbdd67e3d38a1d95e80a", "patch": "@@ -281,6 +281,20 @@ impl<'tcx> ToTrace<'tcx> for Ty<'tcx> {\n     }\n }\n \n+impl<'tcx> ToTrace<'tcx> for ty::Region<'tcx> {\n+    fn to_trace(cause: &ObligationCause<'tcx>,\n+                a_is_expected: bool,\n+                a: Self,\n+                b: Self)\n+                -> TypeTrace<'tcx>\n+    {\n+        TypeTrace {\n+            cause: cause.clone(),\n+            values: Regions(ExpectedFound::new(a_is_expected, a, b))\n+        }\n+    }\n+}\n+\n impl<'tcx> ToTrace<'tcx> for ty::TraitRef<'tcx> {\n     fn to_trace(cause: &ObligationCause<'tcx>,\n                 a_is_expected: bool,"}, {"sha": "07551c4ebd3195125c5f7091c0da26c95054a3f0", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0aff859d55766e132f3bbdd67e3d38a1d95e80a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0aff859d55766e132f3bbdd67e3d38a1d95e80a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=d0aff859d55766e132f3bbdd67e3d38a1d95e80a", "patch": "@@ -975,6 +975,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     ) -> Option<(DiagnosticStyledString, DiagnosticStyledString)> {\n         match *values {\n             infer::Types(ref exp_found) => self.expected_found_str_ty(exp_found),\n+            infer::Regions(ref exp_found) => self.expected_found_str(exp_found),\n             infer::TraitRefs(ref exp_found) => self.expected_found_str(exp_found),\n             infer::PolyTraitRefs(ref exp_found) => self.expected_found_str(exp_found),\n         }"}, {"sha": "d952e430f6195197eee0b627e9fed02f501d96c9", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d0aff859d55766e132f3bbdd67e3d38a1d95e80a/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0aff859d55766e132f3bbdd67e3d38a1d95e80a/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=d0aff859d55766e132f3bbdd67e3d38a1d95e80a", "patch": "@@ -26,7 +26,7 @@ use ty::subst::Substs;\n use ty::{TyVid, IntVid, FloatVid};\n use ty::{self, Ty, TyCtxt};\n use ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n-use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n+use ty::fold::TypeFoldable;\n use ty::relate::RelateResult;\n use traits::{self, ObligationCause, PredicateObligations, Reveal};\n use rustc_data_structures::unify as ut;\n@@ -191,6 +191,7 @@ pub type SkolemizationMap<'tcx> = BTreeMap<ty::BoundRegion, ty::Region<'tcx>>;\n #[derive(Clone, Debug)]\n pub enum ValuePairs<'tcx> {\n     Types(ExpectedFound<Ty<'tcx>>),\n+    Regions(ExpectedFound<ty::Region<'tcx>>),\n     TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),\n     PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),\n }\n@@ -1623,27 +1624,12 @@ impl RegionVariableOrigin {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ValuePairs<'tcx> {\n-    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        match *self {\n-            ValuePairs::Types(ref ef) => {\n-                ValuePairs::Types(ef.fold_with(folder))\n-            }\n-            ValuePairs::TraitRefs(ref ef) => {\n-                ValuePairs::TraitRefs(ef.fold_with(folder))\n-            }\n-            ValuePairs::PolyTraitRefs(ref ef) => {\n-                ValuePairs::PolyTraitRefs(ef.fold_with(folder))\n-            }\n-        }\n-    }\n-\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        match *self {\n-            ValuePairs::Types(ref ef) => ef.visit_with(visitor),\n-            ValuePairs::TraitRefs(ref ef) => ef.visit_with(visitor),\n-            ValuePairs::PolyTraitRefs(ref ef) => ef.visit_with(visitor),\n-        }\n+EnumTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for ValuePairs<'tcx> {\n+        (ValuePairs::Types)(a),\n+        (ValuePairs::Regions)(a),\n+        (ValuePairs::TraitRefs)(a),\n+        (ValuePairs::PolyTraitRefs)(a),\n     }\n }\n "}]}