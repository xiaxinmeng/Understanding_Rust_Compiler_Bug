{"sha": "48870d4f05177aa8e4d8439b71f39283f1880327", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ODcwZDRmMDUxNzdhYThlNGQ4NDM5YjcxZjM5MjgzZjE4ODAzMjc=", "commit": {"author": {"name": "Ticki", "email": "@", "date": "2015-07-21T19:40:11Z"}, "committer": {"name": "Ticki", "email": "@", "date": "2015-07-21T19:40:11Z"}, "message": "rust -> Rust", "tree": {"sha": "f7f8b59125d76a245f5cac840ac02030117d3a21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7f8b59125d76a245f5cac840ac02030117d3a21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48870d4f05177aa8e4d8439b71f39283f1880327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48870d4f05177aa8e4d8439b71f39283f1880327", "html_url": "https://github.com/rust-lang/rust/commit/48870d4f05177aa8e4d8439b71f39283f1880327", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48870d4f05177aa8e4d8439b71f39283f1880327/comments", "author": null, "committer": null, "parents": [{"sha": "a5c7b96426cbddc1276ab4439ed2cc4a5689abc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c7b96426cbddc1276ab4439ed2cc4a5689abc2", "html_url": "https://github.com/rust-lang/rust/commit/a5c7b96426cbddc1276ab4439ed2cc4a5689abc2"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "753a5a32e8a1bfff0249e479e05ffd7292f0b998", "filename": "src/doc/trpl/ffi.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48870d4f05177aa8e4d8439b71f39283f1880327/src%2Fdoc%2Ftrpl%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/48870d4f05177aa8e4d8439b71f39283f1880327/src%2Fdoc%2Ftrpl%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fffi.md?ref=48870d4f05177aa8e4d8439b71f39283f1880327", "patch": "@@ -340,7 +340,7 @@ libraries:\n Note that frameworks are only available on OSX targets.\n \n The different `kind` values are meant to differentiate how the native library\n-participates in linkage. From a linkage perspective, the rust compiler creates\n+participates in linkage. From a linkage perspective, the Rust compiler creates\n two flavors of artifacts: partial (rlib/staticlib) and final (dylib/binary).\n Native dynamic library and framework dependencies are propagated to the final\n artifact boundary, while static library dependencies are not propagated at\n@@ -350,9 +350,9 @@ artifact.\n A few examples of how this model can be used are:\n \n * A native build dependency. Sometimes some C/C++ glue is needed when writing\n-  some rust code, but distribution of the C/C++ code in a library format is just\n+  some Rust code, but distribution of the C/C++ code in a library format is just\n   a burden. In this case, the code will be archived into `libfoo.a` and then the\n-  rust crate would declare a dependency via `#[link(name = \"foo\", kind =\n+  Rust crate would declare a dependency via `#[link(name = \"foo\", kind =\n   \"static\")]`.\n \n   Regardless of the flavor of output for the crate, the native static library\n@@ -361,7 +361,7 @@ A few examples of how this model can be used are:\n \n * A normal dynamic dependency. Common system libraries (like `readline`) are\n   available on a large number of systems, and often a static copy of these\n-  libraries cannot be found. When this dependency is included in a rust crate,\n+  libraries cannot be found. When this dependency is included in a Rust crate,\n   partial targets (like rlibs) will not link to the library, but when the rlib\n   is included in a final target (like a binary), the native library will be\n   linked in."}]}