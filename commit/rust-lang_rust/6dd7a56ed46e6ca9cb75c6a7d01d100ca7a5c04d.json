{"sha": "6dd7a56ed46e6ca9cb75c6a7d01d100ca7a5c04d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZDdhNTZlZDQ2ZTZjYTljYjc1YzZhN2QwMWQxMDBjYTdhNWMwNGQ=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-05-01T16:05:13Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-05-01T17:51:33Z"}, "message": "Add more comprehensive unit tests for SIMD binops", "tree": {"sha": "f3be422b350a77c7c90ccf97b602e1038eb1a689", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3be422b350a77c7c90ccf97b602e1038eb1a689"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dd7a56ed46e6ca9cb75c6a7d01d100ca7a5c04d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dd7a56ed46e6ca9cb75c6a7d01d100ca7a5c04d", "html_url": "https://github.com/rust-lang/rust/commit/6dd7a56ed46e6ca9cb75c6a7d01d100ca7a5c04d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dd7a56ed46e6ca9cb75c6a7d01d100ca7a5c04d/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3f9f37014c77cda1ae53bf0984190e877aa413a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f9f37014c77cda1ae53bf0984190e877aa413a", "html_url": "https://github.com/rust-lang/rust/commit/a3f9f37014c77cda1ae53bf0984190e877aa413a"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "30eda1296d186f3f8cd1eada7696c3adf3fb51da", "filename": "src/test/run-pass/simd-binop.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6dd7a56ed46e6ca9cb75c6a7d01d100ca7a5c04d/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd7a56ed46e6ca9cb75c6a7d01d100ca7a5c04d/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-binop.rs?ref=6dd7a56ed46e6ca9cb75c6a7d01d100ca7a5c04d", "patch": "@@ -12,27 +12,39 @@\n \n use std::unstable::simd::{i32x4, f32x4, u32x4};\n \n-fn test_int(e: i32) -> i32 {\n-    let v = i32x4(e, 0i32, 0i32, 0i32);\n-    let i32x4(e2, _, _, _) = v * v + v - v;\n-    e2\n+fn eq_u32x4(u32x4(x0, x1, x2, x3): u32x4, u32x4(y0, y1, y2, y3): u32x4) -> bool {\n+    (x0 == y0) && (x1 == y1) && (x2 == y2) && (x3 == y3)\n }\n \n-fn test_float(e: f32) -> f32 {\n-    let v = f32x4(e, 0f32, 0f32, 0f32);\n-    let f32x4(e2, _, _, _) = v * v + v - v;\n-    e2\n+fn eq_f32x4(f32x4(x0, x1, x2, x3): f32x4, f32x4(y0, y1, y2, y3): f32x4) -> bool {\n+    (x0 == y0) && (x1 == y1) && (x2 == y2) && (x3 == y3)\n }\n \n-pub fn test_shift(e: u32) -> u32 {\n-    let v = u32x4(e, 0u32, 0u32, 0u32);\n-    let one = u32x4(1u32, 0u32, 0u32, 0u32);\n-    let u32x4(e2, _, _, _) = v << one >> one;\n-    e2\n+fn eq_i32x4(i32x4(x0, x1, x2, x3): i32x4, i32x4(y0, y1, y2, y3): i32x4) -> bool {\n+    (x0 == y0) && (x1 == y1) && (x2 == y2) && (x3 == y3)\n }\n \n pub fn main() {\n-    assert_eq!(test_int(3i32), 9i32);\n-    assert_eq!(test_float(3f32), 9f32);\n-    assert_eq!(test_shift(3u32), 3u32);\n+    assert!(eq_u32x4(u32x4(1, 2, 3, 4) + u32x4(4, 3, 2, 1), u32x4(5, 5, 5, 5)));\n+    assert!(eq_u32x4(u32x4(4, 5, 6, 7) - u32x4(4, 3, 2, 1), u32x4(0, 2, 4, 6)));\n+    assert!(eq_u32x4(u32x4(1, 2, 3, 4) * u32x4(4, 3, 2, 1), u32x4(4, 6, 6, 4)));\n+    assert!(eq_u32x4(u32x4(1, 2, 3, 4) & u32x4(4, 3, 2, 1), u32x4(0, 2, 2, 0)));\n+    assert!(eq_u32x4(u32x4(1, 2, 3, 4) | u32x4(4, 3, 2, 1), u32x4(5, 3, 3, 5)));\n+    assert!(eq_u32x4(u32x4(1, 2, 3, 4) ^ u32x4(4, 3, 2, 1), u32x4(5, 1, 1, 5)));\n+    assert!(eq_u32x4(u32x4(1, 2, 3, 4) << u32x4(4, 3, 2, 1), u32x4(16, 16, 12, 8)));\n+    assert!(eq_u32x4(u32x4(1, 2, 3, 4) >> u32x4(4, 3, 2, 1), u32x4(0, 0, 0, 2)));\n+\n+    assert!(eq_i32x4(i32x4(1, 2, 3, 4) + i32x4(4, 3, 2, 1), i32x4(5, 5, 5, 5)));\n+    assert!(eq_i32x4(i32x4(1, 2, 3, 4) - i32x4(4, 3, 2, 1), i32x4(-3, -1, 1, 3)));\n+    assert!(eq_i32x4(i32x4(1, 2, 3, 4) * i32x4(4, 3, 2, 1), i32x4(4, 6, 6, 4)));\n+    assert!(eq_i32x4(i32x4(1, 2, 3, 4) & i32x4(4, 3, 2, 1), i32x4(0, 2, 2, 0)));\n+    assert!(eq_i32x4(i32x4(1, 2, 3, 4) | i32x4(4, 3, 2, 1), i32x4(5, 3, 3, 5)));\n+    assert!(eq_i32x4(i32x4(1, 2, 3, 4) ^ i32x4(4, 3, 2, 1), i32x4(5, 1, 1, 5)));\n+    assert!(eq_i32x4(i32x4(1, 2, 3, 4) << i32x4(4, 3, 2, 1), i32x4(16, 16, 12, 8)));\n+    assert!(eq_i32x4(i32x4(1, 2, 3, 4) >> i32x4(4, 3, 2, 1), i32x4(0, 0, 0, 2)));\n+\n+    assert!(eq_f32x4(f32x4(1.0, 2.0, 3.0, 4.0) + f32x4(4.0, 3.0, 2.0, 1.0), f32x4(5.0, 5.0, 5.0, 5.0)));\n+    assert!(eq_f32x4(f32x4(1.0, 2.0, 3.0, 4.0) - f32x4(4.0, 3.0, 2.0, 1.0), f32x4(-3.0, -1.0, 1.0, 3.0)));\n+    assert!(eq_f32x4(f32x4(1.0, 2.0, 3.0, 4.0) * f32x4(4.0, 3.0, 2.0, 1.0), f32x4(4.0, 6.0, 6.0, 4.0)));\n+    assert!(eq_f32x4(f32x4(1.0, 2.0, 3.0, 4.0) / f32x4(4.0, 4.0, 2.0, 1.0), f32x4(0.25, 0.5, 1.5, 4.0)));\n }"}]}