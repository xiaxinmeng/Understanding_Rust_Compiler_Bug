{"sha": "8852279a9ecac970e30b6d92d7efdcbd5485769c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NTIyNzlhOWVjYWM5NzBlMzBiNmQ5MmQ3ZWZkY2JkNTQ4NTc2OWM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-16T03:53:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-24T01:35:31Z"}, "message": "core: Add new weak task API", "tree": {"sha": "53a3e26fe5cf72ea12ecac35664db7e70f85eeed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53a3e26fe5cf72ea12ecac35664db7e70f85eeed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8852279a9ecac970e30b6d92d7efdcbd5485769c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8852279a9ecac970e30b6d92d7efdcbd5485769c", "html_url": "https://github.com/rust-lang/rust/commit/8852279a9ecac970e30b6d92d7efdcbd5485769c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8852279a9ecac970e30b6d92d7efdcbd5485769c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bf8e579436941a82e4a4806b74dfd27ed4d1d74", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bf8e579436941a82e4a4806b74dfd27ed4d1d74", "html_url": "https://github.com/rust-lang/rust/commit/1bf8e579436941a82e4a4806b74dfd27ed4d1d74"}], "stats": {"total": 241, "additions": 233, "deletions": 8}, "files": [{"sha": "2865c9421380b91e32e71671bccf4b2ca585b754", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8852279a9ecac970e30b6d92d7efdcbd5485769c/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8852279a9ecac970e30b6d92d7efdcbd5485769c/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=8852279a9ecac970e30b6d92d7efdcbd5485769c", "patch": "@@ -1234,6 +1234,16 @@ pub fn oneshot<T: Owned>() -> (PortOne<T>, ChanOne<T>) {\n     (port, chan)\n }\n \n+impl<T: Owned> PortOne<T> {\n+    fn recv(self) -> T { recv_one(self) }\n+    fn try_recv(self) -> Option<T> { try_recv_one(self) }\n+}\n+\n+impl<T: Owned> ChanOne<T> {\n+    fn send(self, data: T) { send_one(self, data) }\n+    fn try_send(self, data: T) -> bool { try_send_one(self, data) }\n+}\n+\n /**\n  * Receive a message from a oneshot pipe, failing if the connection was\n  * closed."}, {"sha": "aa976ee745d3d26cf0df967e9f00a43654ed6389", "filename": "src/libcore/private.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8852279a9ecac970e30b6d92d7efdcbd5485769c/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8852279a9ecac970e30b6d92d7efdcbd5485769c/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=8852279a9ecac970e30b6d92d7efdcbd5485769c", "patch": "@@ -34,6 +34,8 @@ pub mod at_exit;\n pub mod global;\n #[path = \"private/finally.rs\"]\n pub mod finally;\n+#[path = \"private/weak_task.rs\"]\n+pub mod weak_task;\n \n extern mod rustrt {\n     #[legacy_exports];"}, {"sha": "868361b0e6078abafda7460a874684c1a41fdfc6", "filename": "src/libcore/private/weak_task.rs", "status": "added", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/8852279a9ecac970e30b6d92d7efdcbd5485769c/src%2Flibcore%2Fprivate%2Fweak_task.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8852279a9ecac970e30b6d92d7efdcbd5485769c/src%2Flibcore%2Fprivate%2Fweak_task.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Fweak_task.rs?ref=8852279a9ecac970e30b6d92d7efdcbd5485769c", "patch": "@@ -0,0 +1,187 @@\n+/*!\n+Weak tasks\n+\n+Weak tasks are a runtime feature for building global services that\n+do not keep the runtime alive. Normally the runtime exits when all\n+tasks exits, but if a task is weak then the runtime may exit while\n+it is running, sending a notification to the task that the runtime\n+is trying to shut down.\n+*/\n+\n+use option::{Some, None, swap_unwrap};\n+use private::at_exit::at_exit;\n+use private::global::global_data_clone_create;\n+use private::finally::Finally;\n+use pipes::{Port, Chan, SharedChan, stream};\n+use task::{Task, task, spawn};\n+use task::rt::{task_id, get_task_id};\n+use send_map::linear::LinearMap;\n+use ops::Drop;\n+\n+type ShutdownMsg = ();\n+\n+// XXX: This could be a PortOne but I've experienced bugginess\n+// with oneshot pipes and try_send\n+pub unsafe fn weaken_task(f: &fn(Port<ShutdownMsg>)) {\n+    let service = global_data_clone_create(global_data_key,\n+                                           create_global_service);\n+    let (shutdown_port, shutdown_chan) = stream::<ShutdownMsg>();\n+    let shutdown_port = ~mut Some(shutdown_port);\n+    let task = get_task_id();\n+    // Expect the weak task service to be alive\n+    assert service.try_send(RegisterWeakTask(task, shutdown_chan));\n+    unsafe { rust_inc_weak_task_count(); }\n+    do fn&() {\n+        let shutdown_port = swap_unwrap(&mut *shutdown_port);\n+        f(shutdown_port)\n+    }.finally || {\n+        unsafe { rust_dec_weak_task_count(); }\n+        // Service my have already exited\n+        service.send(UnregisterWeakTask(task));\n+    }\n+}\n+\n+type WeakTaskService = SharedChan<ServiceMsg>;\n+type TaskHandle = task_id;\n+\n+fn global_data_key(_v: WeakTaskService) { }\n+\n+enum ServiceMsg {\n+    RegisterWeakTask(TaskHandle, Chan<ShutdownMsg>),\n+    UnregisterWeakTask(TaskHandle),\n+    Shutdown\n+}\n+\n+fn create_global_service() -> ~WeakTaskService {\n+\n+    debug!(\"creating global weak task service\");\n+    let (port, chan) = stream::<ServiceMsg>();\n+    let port = ~mut Some(port);\n+    let chan = SharedChan(chan);\n+    let chan_clone = chan.clone();\n+\n+    do task().unlinked().spawn {\n+        debug!(\"running global weak task service\");\n+        let port = swap_unwrap(&mut *port);\n+        let port = ~mut Some(port);\n+        do fn&() {\n+            let port = swap_unwrap(&mut *port);\n+            // The weak task service is itself a weak task\n+            debug!(\"weakening the weak service task\");\n+            unsafe { rust_inc_weak_task_count(); }\n+            run_weak_task_service(port);\n+        }.finally {\n+            debug!(\"unweakening the weak service task\");\n+            unsafe { rust_dec_weak_task_count(); }\n+        }\n+    }\n+\n+    do at_exit {\n+        debug!(\"shutting down weak task service\");\n+        chan.send(Shutdown);\n+    }\n+\n+    return ~chan_clone;\n+}\n+\n+fn run_weak_task_service(port: Port<ServiceMsg>) {\n+\n+    let mut shutdown_map = LinearMap();\n+\n+    loop {\n+        match port.recv() {\n+            RegisterWeakTask(task, shutdown_chan) => {\n+                let previously_unregistered =\n+                    shutdown_map.insert(task, shutdown_chan);\n+                assert previously_unregistered;\n+            }\n+            UnregisterWeakTask(task) => {\n+                match shutdown_map.pop(&task) {\n+                    Some(shutdown_chan) => {\n+                        // Oneshot pipes must send, even though\n+                        // nobody will receive this\n+                        shutdown_chan.send(());\n+                    }\n+                    None => fail\n+                }\n+            }\n+            Shutdown => break\n+        }\n+    }\n+\n+    do shutdown_map.consume |_, shutdown_chan| {\n+        // Weak task may have already exited\n+        shutdown_chan.send(());\n+    }\n+}\n+\n+extern {\n+    unsafe fn rust_inc_weak_task_count();\n+    unsafe fn rust_dec_weak_task_count();\n+}\n+\n+#[test]\n+fn test_simple() unsafe {\n+    let (port, chan) = stream();\n+    do spawn unsafe {\n+        do weaken_task |_signal| {\n+        }\n+        chan.send(());\n+    }\n+    port.recv();\n+}\n+\n+#[test]\n+fn test_weak_weak() unsafe {\n+    let (port, chan) = stream();\n+    do spawn unsafe {\n+        do weaken_task |_signal| {\n+        }\n+        do weaken_task |_signal| {\n+        }\n+        chan.send(());\n+    }\n+    port.recv();\n+}\n+\n+#[test]\n+fn test_wait_for_signal() unsafe {\n+    do spawn unsafe {\n+        do weaken_task |signal| {\n+            signal.recv();\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_wait_for_signal_many() unsafe {\n+    use uint;\n+    for uint::range(0, 100) |_| {\n+        do spawn unsafe {\n+            do weaken_task |signal| {\n+                signal.recv();\n+            }\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_select_stream_and_oneshot() unsafe {\n+    use pipes::select2i;\n+    use either::{Left, Right};\n+\n+    let (port, chan) = stream();\n+    let (waitport, waitchan) = stream();\n+    do spawn unsafe {\n+        do weaken_task |signal| {\n+            match select2i(&port, &signal) {\n+                Left(*) => (),\n+                Right(*) => fail\n+            }\n+        }\n+        waitchan.send(());\n+    }\n+    chan.send(());\n+    waitport.recv();\n+}\n+"}, {"sha": "a5e1260d4a557eb501bc2c9cc0b46f24d5f05f19", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8852279a9ecac970e30b6d92d7efdcbd5485769c/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8852279a9ecac970e30b6d92d7efdcbd5485769c/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=8852279a9ecac970e30b6d92d7efdcbd5485769c", "patch": "@@ -1038,6 +1038,18 @@ rust_get_global_data_ptr() {\n     return &task->kernel->global_data;\n }\n \n+extern \"C\" void\n+rust_inc_weak_task_count() {\n+    rust_task *task = rust_get_current_task();\n+    task->kernel->inc_weak_task_count();\n+}\n+\n+extern \"C\" void\n+rust_dec_weak_task_count() {\n+    rust_task *task = rust_get_current_task();\n+    task->kernel->dec_weak_task_count();\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "d270ac0763315542c98b060103f4b9b06db2fac8", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8852279a9ecac970e30b6d92d7efdcbd5485769c/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8852279a9ecac970e30b6d92d7efdcbd5485769c/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=8852279a9ecac970e30b6d92d7efdcbd5485769c", "patch": "@@ -377,17 +377,12 @@ rust_kernel::weaken_task(rust_port_id chan) {\n         KLOG_(\"Weakening task with channel %\" PRIdPTR, chan);\n         weak_task_chans.push_back(chan);\n     }\n-    uintptr_t new_non_weak_tasks = sync::decrement(non_weak_tasks);\n-    KLOG_(\"New non-weak tasks %\" PRIdPTR, new_non_weak_tasks);\n-    if (new_non_weak_tasks == 0) {\n-        begin_shutdown();\n-    }\n+    inc_weak_task_count();\n }\n \n void\n rust_kernel::unweaken_task(rust_port_id chan) {\n-    uintptr_t new_non_weak_tasks = sync::increment(non_weak_tasks);\n-    KLOG_(\"New non-weak tasks %\" PRIdPTR, new_non_weak_tasks);\n+    dec_weak_task_count();\n     {\n         scoped_lock with(weak_task_lock);\n         KLOG_(\"Unweakening task with channel %\" PRIdPTR, chan);\n@@ -399,6 +394,21 @@ rust_kernel::unweaken_task(rust_port_id chan) {\n     }\n }\n \n+void\n+rust_kernel::inc_weak_task_count() {\n+    uintptr_t new_non_weak_tasks = sync::decrement(non_weak_tasks);\n+    KLOG_(\"New non-weak tasks %\" PRIdPTR, new_non_weak_tasks);\n+    if (new_non_weak_tasks == 0) {\n+        begin_shutdown();\n+    }\n+}\n+\n+void\n+rust_kernel::dec_weak_task_count() {\n+    uintptr_t new_non_weak_tasks = sync::increment(non_weak_tasks);\n+    KLOG_(\"New non-weak tasks %\" PRIdPTR, new_non_weak_tasks);\n+}\n+\n void\n rust_kernel::end_weak_tasks() {\n     std::vector<rust_port_id> chancopies;"}, {"sha": "f90ecf01a7b3c43d6d8e044f4db6d72356febe17", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8852279a9ecac970e30b6d92d7efdcbd5485769c/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/8852279a9ecac970e30b6d92d7efdcbd5485769c/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=8852279a9ecac970e30b6d92d7efdcbd5485769c", "patch": "@@ -187,6 +187,8 @@ class rust_kernel {\n     void unregister_task();\n     void weaken_task(rust_port_id chan);\n     void unweaken_task(rust_port_id chan);\n+    void inc_weak_task_count();\n+    void dec_weak_task_count();\n \n     bool send_to_port(rust_port_id chan, void *sptr);\n "}, {"sha": "5be823d8fded9dd8ab3ca8fe083c053c5654eca8", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8852279a9ecac970e30b6d92d7efdcbd5485769c/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/8852279a9ecac970e30b6d92d7efdcbd5485769c/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=8852279a9ecac970e30b6d92d7efdcbd5485769c", "patch": "@@ -211,4 +211,6 @@ linenoiseHistoryLoad\n rust_raw_thread_start\n rust_raw_thread_join_delete\n rust_register_exit_function\n-rust_get_global_data_ptr\n\\ No newline at end of file\n+rust_get_global_data_ptr\n+rust_inc_weak_task_count\n+rust_dec_weak_task_count\n\\ No newline at end of file"}]}