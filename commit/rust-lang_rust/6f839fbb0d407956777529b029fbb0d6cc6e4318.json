{"sha": "6f839fbb0d407956777529b029fbb0d6cc6e4318", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmODM5ZmJiMGQ0MDc5NTY3Nzc1MjliMDI5ZmJiMGQ2Y2M2ZTQzMTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-19T12:49:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-19T12:49:32Z"}, "message": "Auto merge of #56977 - pietroalbini:rollup, r=pietroalbini\n\nRollup of 15 pull requests\n\nSuccessful merges:\n\n - #56363 (Defactored Bytes::read)\n - #56663 (Remove lifetime from Resolver)\n - #56689 (add a lint group for lints emitted by rustdoc)\n - #56772 (fix issue 54153 by not testing issue-18804 on Windows nor OS X.)\n - #56820 (format-related tweaks)\n - #56881 (Implement Eq, PartialEq and Hash for atomic::Ordering)\n - #56907 (Fix grammar in compiler error for array iterators)\n - #56908 (rustc: Don't ICE on usage of two new target features)\n - #56910 (Do not point at delim spans for complete correct blocks)\n - #56913 (Enable stack probes for UEFI images)\n - #56918 (Profiler: simplify total_duration, improve readability)\n - #56931 (Update release notes for Rust 1.31.1)\n - #56947 (Add targets thumbv7neon-linux-androideabi and thumbv7neon-unknown-linux-gnueabihf)\n - #56948 (Update LLVM submodule)\n - #56959 (Fix mobile menu rendering collision with tooltip.)\n\nFailed merges:\n\n - #56914 (Ignore ui/target-feature-gate on sparc, sparc64, powerpc, powerpc64 and powerpc64le)\n\nr? @ghost", "tree": {"sha": "7efc541878cc49a26d67b9eb036d16657c6a5937", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7efc541878cc49a26d67b9eb036d16657c6a5937"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f839fbb0d407956777529b029fbb0d6cc6e4318", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f839fbb0d407956777529b029fbb0d6cc6e4318", "html_url": "https://github.com/rust-lang/rust/commit/6f839fbb0d407956777529b029fbb0d6cc6e4318", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f839fbb0d407956777529b029fbb0d6cc6e4318/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74ebf026fe927ffa99d541479454f45791806802", "url": "https://api.github.com/repos/rust-lang/rust/commits/74ebf026fe927ffa99d541479454f45791806802", "html_url": "https://github.com/rust-lang/rust/commit/74ebf026fe927ffa99d541479454f45791806802"}, {"sha": "1ba6ec4a327d978471cdac31d17d9202106b15bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ba6ec4a327d978471cdac31d17d9202106b15bd", "html_url": "https://github.com/rust-lang/rust/commit/1ba6ec4a327d978471cdac31d17d9202106b15bd"}], "stats": {"total": 726, "additions": 471, "deletions": 255}, "files": [{"sha": "7022a86a45c5b611fa3c9f1671fca5d8084c7ee5", "filename": "RELEASES.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -1,3 +1,14 @@\n+Version 1.31.1 (2018-12-20)\n+===========================\n+\n+- [Fix Rust failing to build on `powerpc-unknown-netbsd`][56562]\n+- [Fix broken go-to-definition in RLS][rls/1171]\n+- [Fix infinite loop on hover in RLS][rls/1170]\n+\n+[56562]: https://github.com/rust-lang/rust/pull/56562\n+[rls/1171]: https://github.com/rust-lang/rls/issues/1171\n+[rls/1170]: https://github.com/rust-lang/rls/pull/1170\n+\n Version 1.31.0 (2018-12-06)\n ==========================\n "}, {"sha": "3307d9d3573c2b52670c73e1f369ae0fe51d2e75", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -143,7 +143,10 @@ fn set_compiler(cfg: &mut cc::Build,\n         // compiler already takes into account the triple in question.\n         t if t.contains(\"android\") => {\n             if let Some(ndk) = config.and_then(|c| c.ndk.as_ref()) {\n-                let target = target.replace(\"armv7\", \"arm\");\n+                let target = target.replace(\"armv7neon\", \"arm\")\n+                                   .replace(\"armv7\", \"arm\")\n+                                   .replace(\"thumbv7neon\", \"arm\")\n+                                   .replace(\"thumbv7\", \"arm\");\n                 let compiler = format!(\"{}-{}\", target, compiler.clang());\n                 cfg.compiler(ndk.join(\"bin\").join(compiler));\n             }"}, {"sha": "f2473cb9eda6bdab99b3fb04e78019a531ebaa8b", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -107,6 +107,8 @@ def v(*args):\n   \"arm-linux-androideabi NDK standalone path\")\n v(\"armv7-linux-androideabi-ndk\", \"target.armv7-linux-androideabi.android-ndk\",\n   \"armv7-linux-androideabi NDK standalone path\")\n+v(\"thumbv7neon-linux-androideabi-ndk\", \"target.thumbv7neon-linux-androideabi.android-ndk\",\n+  \"thumbv7neon-linux-androideabi NDK standalone path\")\n v(\"aarch64-linux-android-ndk\", \"target.aarch64-linux-android.android-ndk\",\n   \"aarch64-linux-android NDK standalone path\")\n v(\"x86_64-linux-android-ndk\", \"target.x86_64-linux-android.android-ndk\","}, {"sha": "a54a2d003b649b9a778cafaf22c0fb40ef8ca098", "filename": "src/ci/docker/dist-android/Dockerfile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -16,6 +16,7 @@ RUN . /scripts/android-ndk.sh && \\\n # env\n ENV TARGETS=arm-linux-androideabi\n ENV TARGETS=$TARGETS,armv7-linux-androideabi\n+ENV TARGETS=$TARGETS,thumbv7neon-linux-androideabi\n ENV TARGETS=$TARGETS,i686-linux-android\n ENV TARGETS=$TARGETS,aarch64-linux-android\n ENV TARGETS=$TARGETS,x86_64-linux-android\n@@ -24,6 +25,7 @@ ENV RUST_CONFIGURE_ARGS \\\n       --enable-extended \\\n       --arm-linux-androideabi-ndk=/android/ndk/arm-14 \\\n       --armv7-linux-androideabi-ndk=/android/ndk/arm-14 \\\n+      --thumbv7neon-linux-androideabi-ndk=/android/ndk/arm-14 \\\n       --i686-linux-android-ndk=/android/ndk/x86-14 \\\n       --aarch64-linux-android-ndk=/android/ndk/arm64-21 \\\n       --x86_64-linux-android-ndk=/android/ndk/x86_64-21 \\"}, {"sha": "f77d8eb6f7c552c181fccfc99444a34cb317bf7e", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -87,7 +87,7 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item=()>) {}\n     on(\n         _Self=\"[]\",\n         label=\"borrow the array with `&` or call `.iter()` on it to iterate over it\",\n-        note=\"arrays are not an iterators, but slices like the following are: `&[1, 2, 3]`\"\n+        note=\"arrays are not iterators, but slices like the following are: `&[1, 2, 3]`\"\n     ),\n     on(\n         _Self=\"{integral}\","}, {"sha": "70d940e2b5529ea1eb63e462ca571f8612795484", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -188,7 +188,7 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n /// [Ordering::Relaxed]: #variant.Relaxed\n /// [Ordering::SeqCst]: #variant.SeqCst\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n #[non_exhaustive]\n pub enum Ordering {\n     /// No ordering constraints, only atomic operations."}, {"sha": "0cde9ebf65486dbb29509522970f1b0e028af6a0", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -315,19 +315,19 @@ declare_lint! {\n declare_lint! {\n     pub INTRA_DOC_LINK_RESOLUTION_FAILURE,\n     Warn,\n-    \"warn about documentation intra links resolution failure\"\n+    \"failures in resolving intra-doc link targets\"\n }\n \n declare_lint! {\n     pub MISSING_DOC_CODE_EXAMPLES,\n     Allow,\n-    \"warn about missing code example in an item's documentation\"\n+    \"detects publicly-exported items without code samples in their documentation\"\n }\n \n declare_lint! {\n     pub PRIVATE_DOC_TESTS,\n     Allow,\n-    \"warn about doc test in private item\"\n+    \"detects code samples in docs of private items not documented by rustdoc\"\n }\n \n declare_lint! {"}, {"sha": "8757c9ff15da6eb23c3fbd8dd86f81074b0854b8", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -730,9 +730,9 @@ pub struct ExpansionResult {\n     pub hir_forest: hir_map::Forest,\n }\n \n-pub struct InnerExpansionResult<'a, 'b: 'a> {\n+pub struct InnerExpansionResult<'a> {\n     pub expanded_crate: ast::Crate,\n-    pub resolver: Resolver<'a, 'b>,\n+    pub resolver: Resolver<'a>,\n     pub hir_forest: hir_map::Forest,\n }\n \n@@ -811,7 +811,7 @@ where\n \n /// Same as phase_2_configure_and_expand, but doesn't let you keep the resolver\n /// around\n-pub fn phase_2_configure_and_expand_inner<'a, 'b: 'a, F>(\n+pub fn phase_2_configure_and_expand_inner<'a, F>(\n     sess: &'a Session,\n     cstore: &'a CStore,\n     mut krate: ast::Crate,\n@@ -820,9 +820,9 @@ pub fn phase_2_configure_and_expand_inner<'a, 'b: 'a, F>(\n     addl_plugins: Option<Vec<String>>,\n     make_glob_map: MakeGlobMap,\n     resolver_arenas: &'a ResolverArenas<'a>,\n-    crate_loader: &'a mut CrateLoader<'b>,\n+    crate_loader: &'a mut CrateLoader<'a>,\n     after_expand: F,\n-) -> Result<InnerExpansionResult<'a, 'b>, CompileIncomplete>\n+) -> Result<InnerExpansionResult<'a>, CompileIncomplete>\n where\n     F: FnOnce(&ast::Crate) -> CompileResult,\n {"}, {"sha": "0d4610d288ce6f0818e975b9da43e49f70c647a5", "filename": "src/librustc_driver/profile/mod.rs", "status": "modified", "additions": 57, "deletions": 62, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Fmod.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -64,9 +64,7 @@ struct StackFrame {\n }\n \n fn total_duration(traces: &[trace::Rec]) -> Duration {\n-    let mut sum : Duration = Duration::new(0, 0);\n-    for t in traces.iter() { sum += t.dur_total; }\n-    return sum\n+    Duration::new(0, 0) + traces.iter().map(|t| t.dur_total).sum()\n }\n \n // profiling thread; retains state (in local variables) and dump traces, upon request.\n@@ -93,50 +91,48 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n             ProfileQueriesMsg::Dump(params) => {\n                 assert!(stack.is_empty());\n                 assert!(frame.parse_st == ParseState::Clear);\n-                {\n-                    // write log of all messages\n-                    if params.dump_profq_msg_log {\n-                        let mut log_file =\n-                            File::create(format!(\"{}.log.txt\", params.path)).unwrap();\n-                        for m in profq_msgs.iter() {\n-                            writeln!(&mut log_file, \"{:?}\", m).unwrap()\n-                        };\n-                    }\n \n-                    // write HTML file, and counts file\n-                    let html_path = format!(\"{}.html\", params.path);\n-                    let mut html_file = File::create(&html_path).unwrap();\n+                // write log of all messages\n+                if params.dump_profq_msg_log {\n+                    let mut log_file =\n+                        File::create(format!(\"{}.log.txt\", params.path)).unwrap();\n+                    for m in profq_msgs.iter() {\n+                        writeln!(&mut log_file, \"{:?}\", m).unwrap()\n+                    };\n+                }\n \n-                    let counts_path = format!(\"{}.counts.txt\", params.path);\n-                    let mut counts_file = File::create(&counts_path).unwrap();\n+                // write HTML file, and counts file\n+                let html_path = format!(\"{}.html\", params.path);\n+                let mut html_file = File::create(&html_path).unwrap();\n \n-                    writeln!(html_file,\n-                        \"<html>\\n<head>\\n<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{}\\\">\",\n-                        \"profile_queries.css\").unwrap();\n-                    writeln!(html_file, \"<style>\").unwrap();\n-                    trace::write_style(&mut html_file);\n-                    writeln!(html_file, \"</style>\\n</head>\\n<body>\").unwrap();\n-                    trace::write_traces(&mut html_file, &mut counts_file, &frame.traces);\n-                    writeln!(html_file, \"</body>\\n</html>\").unwrap();\n+                let counts_path = format!(\"{}.counts.txt\", params.path);\n+                let mut counts_file = File::create(&counts_path).unwrap();\n \n-                    let ack_path = format!(\"{}.ack\", params.path);\n-                    let ack_file = File::create(&ack_path).unwrap();\n-                    drop(ack_file);\n+                writeln!(html_file,\n+                    \"<html>\\n<head>\\n<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{}\\\">\",\n+                    \"profile_queries.css\").unwrap();\n+                writeln!(html_file, \"<style>\").unwrap();\n+                trace::write_style(&mut html_file);\n+                writeln!(html_file, \"</style>\\n</head>\\n<body>\").unwrap();\n+                trace::write_traces(&mut html_file, &mut counts_file, &frame.traces);\n+                writeln!(html_file, \"</body>\\n</html>\").unwrap();\n \n-                    // Tell main thread that we are done, e.g., so it can exit\n-                    params.ack.send(()).unwrap();\n-                }\n-                continue\n+                let ack_path = format!(\"{}.ack\", params.path);\n+                let ack_file = File::create(&ack_path).unwrap();\n+                drop(ack_file);\n+\n+                // Tell main thread that we are done, e.g., so it can exit\n+                params.ack.send(()).unwrap();\n             }\n             // Actual query message:\n             msg => {\n                 // Record msg in our log\n                 profq_msgs.push(msg.clone());\n                 // Respond to the message, knowing that we've already handled Halt and Dump, above.\n                 match (frame.parse_st.clone(), msg) {\n-                    (_,ProfileQueriesMsg::Halt) => unreachable!(),\n-                    (_,ProfileQueriesMsg::Dump(_)) => unreachable!(),\n-\n+                    (_, ProfileQueriesMsg::Halt) | (_, ProfileQueriesMsg::Dump(_)) => {\n+                        unreachable!();\n+                    },\n                     // Parse State: Clear\n                     (ParseState::Clear,\n                      ProfileQueriesMsg::QueryBegin(span, querymsg)) => {\n@@ -163,8 +159,8 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                                     ParseState::HaveQuery(q, start) => {\n                                         let duration = start.elapsed();\n                                         frame = StackFrame{\n-                                            parse_st:ParseState::Clear,\n-                                            traces:old_frame.traces\n+                                            parse_st: ParseState::Clear,\n+                                            traces: old_frame.traces\n                                         };\n                                         let dur_extent = total_duration(&provider_extent);\n                                         let trace = Rec {\n@@ -181,18 +177,16 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                             }\n                         }\n                     },\n-\n-\n                     (ParseState::Clear,\n                      ProfileQueriesMsg::TimeBegin(msg)) => {\n                         let start = Instant::now();\n                         frame.parse_st = ParseState::HaveTimeBegin(msg, start);\n                         stack.push(frame);\n-                        frame = StackFrame{parse_st:ParseState::Clear, traces:vec![]};\n+                        frame = StackFrame{parse_st: ParseState::Clear, traces: vec![]};\n+                    },\n+                    (_, ProfileQueriesMsg::TimeBegin(_)) => {\n+                        panic!(\"parse error; did not expect time begin here\");\n                     },\n-                    (_, ProfileQueriesMsg::TimeBegin(_)) =>\n-                        panic!(\"parse error; did not expect time begin here\"),\n-\n                     (ParseState::Clear,\n                      ProfileQueriesMsg::TimeEnd) => {\n                         let provider_extent = frame.traces;\n@@ -204,8 +198,8 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                                     ParseState::HaveTimeBegin(msg, start) => {\n                                         let duration = start.elapsed();\n                                         frame = StackFrame{\n-                                            parse_st:ParseState::Clear,\n-                                            traces:old_frame.traces\n+                                            parse_st: ParseState::Clear,\n+                                            traces: old_frame.traces\n                                         };\n                                         let dur_extent = total_duration(&provider_extent);\n                                         let trace = Rec {\n@@ -222,18 +216,19 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                             }\n                         }\n                     },\n-                    (_, ProfileQueriesMsg::TimeEnd) => { panic!(\"parse error\") }\n-\n+                    (_, ProfileQueriesMsg::TimeEnd) => {\n+                        panic!(\"parse error\")\n+                    },\n                     (ParseState::Clear,\n                      ProfileQueriesMsg::TaskBegin(key)) => {\n                         let start = Instant::now();\n                         frame.parse_st = ParseState::HaveTaskBegin(key, start);\n                         stack.push(frame);\n-                        frame = StackFrame{parse_st:ParseState::Clear, traces:vec![]};\n+                        frame = StackFrame{ parse_st: ParseState::Clear, traces: vec![] };\n+                    },\n+                    (_, ProfileQueriesMsg::TaskBegin(_)) => {\n+                        panic!(\"parse error; did not expect time begin here\");\n                     },\n-                    (_, ProfileQueriesMsg::TaskBegin(_)) =>\n-                        panic!(\"parse error; did not expect time begin here\"),\n-\n                     (ParseState::Clear,\n                      ProfileQueriesMsg::TaskEnd) => {\n                         let provider_extent = frame.traces;\n@@ -245,8 +240,8 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                                     ParseState::HaveTaskBegin(key, start) => {\n                                         let duration = start.elapsed();\n                                         frame = StackFrame{\n-                                            parse_st:ParseState::Clear,\n-                                            traces:old_frame.traces\n+                                            parse_st: ParseState::Clear,\n+                                            traces: old_frame.traces\n                                         };\n                                         let dur_extent = total_duration(&provider_extent);\n                                         let trace = Rec {\n@@ -263,8 +258,9 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                             }\n                         }\n                     },\n-                    (_, ProfileQueriesMsg::TaskEnd) => { panic!(\"parse error\") }\n-\n+                    (_, ProfileQueriesMsg::TaskEnd) => {\n+                        panic!(\"parse error\")\n+                    },\n                     // Parse State: HaveQuery\n                     (ParseState::HaveQuery(q,start),\n                      ProfileQueriesMsg::CacheHit) => {\n@@ -279,26 +275,25 @@ fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n                         frame.traces.push( trace );\n                         frame.parse_st = ParseState::Clear;\n                     },\n-                    (ParseState::HaveQuery(_,_),\n+                    (ParseState::HaveQuery(_, _),\n                      ProfileQueriesMsg::ProviderBegin) => {\n                         stack.push(frame);\n-                        frame = StackFrame{parse_st:ParseState::Clear, traces:vec![]};\n+                        frame = StackFrame{ parse_st: ParseState::Clear, traces: vec![] };\n                     },\n \n                     // Parse errors:\n \n-                    (ParseState::HaveQuery(q,_),\n+                    (ParseState::HaveQuery(q, _),\n                      ProfileQueriesMsg::ProviderEnd) => {\n                         panic!(\"parse error: unexpected ProviderEnd; \\\n                                 expected something else to follow BeginQuery for {:?}\", q)\n                     },\n-                    (ParseState::HaveQuery(q1,_),\n-                     ProfileQueriesMsg::QueryBegin(span2,querymsg2)) => {\n+                    (ParseState::HaveQuery(q1, _),\n+                     ProfileQueriesMsg::QueryBegin(span2, querymsg2)) => {\n                         panic!(\"parse error: unexpected QueryBegin; \\\n                                 earlier query is unfinished: {:?} and now {:?}\",\n-                               q1, Query{span:span2, msg:querymsg2})\n+                               q1, Query{span:span2, msg: querymsg2})\n                     },\n-\n                     (ParseState::HaveTimeBegin(_, _), _) => {\n                         unreachable!()\n                     },"}, {"sha": "9dbc9cbc43bc2115a54ae52a631328a445093e34", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -53,6 +53,9 @@ use rustc::lint::builtin::{\n     ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n     ELIDED_LIFETIMES_IN_PATHS,\n     EXPLICIT_OUTLIVES_REQUIREMENTS,\n+    INTRA_DOC_LINK_RESOLUTION_FAILURE,\n+    MISSING_DOC_CODE_EXAMPLES,\n+    PRIVATE_DOC_TESTS,\n     parser::QUESTION_MARK_MACRO_SEP\n };\n use rustc::session;\n@@ -204,6 +207,12 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     // MACRO_USE_EXTERN_CRATE,\n                     );\n \n+    add_lint_group!(sess,\n+                    \"rustdoc\",\n+                    INTRA_DOC_LINK_RESOLUTION_FAILURE,\n+                    MISSING_DOC_CODE_EXAMPLES,\n+                    PRIVATE_DOC_TESTS);\n+\n     // Guidelines for creating a future incompatibility lint:\n     //\n     // - Create a lint defaulting to warn as normal, with ideally the same error"}, {"sha": "f082d776969ebe418da7b630468ff2f652adc085", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -83,7 +83,7 @@ impl<'a> ToNameBinding<'a> for (Def, ty::Visibility, Span, Mark, IsMacroExport)\n     }\n }\n \n-impl<'a, 'cl> Resolver<'a, 'cl> {\n+impl<'a> Resolver<'a> {\n     /// Defines `name` in namespace `ns` of module `parent` to be `def` if it is not yet defined;\n     /// otherwise, reports an error.\n     pub fn define<T>(&mut self, parent: Module<'a>, ident: Ident, ns: Namespace, def: T)\n@@ -888,13 +888,13 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n     }\n }\n \n-pub struct BuildReducedGraphVisitor<'a, 'b: 'a, 'c: 'b> {\n-    pub resolver: &'a mut Resolver<'b, 'c>,\n+pub struct BuildReducedGraphVisitor<'a, 'b: 'a> {\n+    pub resolver: &'a mut Resolver<'b>,\n     pub current_legacy_scope: LegacyScope<'b>,\n     pub expansion: Mark,\n }\n \n-impl<'a, 'b, 'cl> BuildReducedGraphVisitor<'a, 'b, 'cl> {\n+impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     fn visit_invoc(&mut self, id: ast::NodeId) -> &'b InvocationData<'b> {\n         let mark = id.placeholder_to_mark();\n         self.resolver.current_module.unresolved_invocations.borrow_mut().insert(mark);\n@@ -917,7 +917,7 @@ macro_rules! method {\n     }\n }\n \n-impl<'a, 'b, 'cl> Visitor<'a> for BuildReducedGraphVisitor<'a, 'b, 'cl> {\n+impl<'a, 'b> Visitor<'a> for BuildReducedGraphVisitor<'a, 'b> {\n     method!(visit_impl_item: ast::ImplItem, ast::ImplItemKind::Macro, walk_impl_item);\n     method!(visit_expr:      ast::Expr,     ast::ExprKind::Mac,       walk_expr);\n     method!(visit_pat:       ast::Pat,      ast::PatKind::Mac,        walk_pat);"}, {"sha": "5d231d845cfd86dea91d46740d69270f61ffac3e", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -31,30 +31,30 @@ use syntax::visit::{self, Visitor};\n use syntax_pos::{Span, MultiSpan, DUMMY_SP};\n \n \n-struct UnusedImportCheckVisitor<'a, 'b: 'a, 'd: 'b> {\n-    resolver: &'a mut Resolver<'b, 'd>,\n+struct UnusedImportCheckVisitor<'a, 'b: 'a> {\n+    resolver: &'a mut Resolver<'b>,\n     /// All the (so far) unused imports, grouped path list\n     unused_imports: NodeMap<NodeMap<Span>>,\n     base_id: ast::NodeId,\n     item_span: Span,\n }\n \n // Deref and DerefMut impls allow treating UnusedImportCheckVisitor as Resolver.\n-impl<'a, 'b, 'd> Deref for UnusedImportCheckVisitor<'a, 'b, 'd> {\n-    type Target = Resolver<'b, 'd>;\n+impl<'a, 'b> Deref for UnusedImportCheckVisitor<'a, 'b> {\n+    type Target = Resolver<'b>;\n \n-    fn deref<'c>(&'c self) -> &'c Resolver<'b, 'd> {\n+    fn deref<'c>(&'c self) -> &'c Resolver<'b> {\n         &*self.resolver\n     }\n }\n \n-impl<'a, 'b, 'd> DerefMut for UnusedImportCheckVisitor<'a, 'b, 'd> {\n-    fn deref_mut<'c>(&'c mut self) -> &'c mut Resolver<'b, 'd> {\n+impl<'a, 'b> DerefMut for UnusedImportCheckVisitor<'a, 'b> {\n+    fn deref_mut<'c>(&'c mut self) -> &'c mut Resolver<'b> {\n         &mut *self.resolver\n     }\n }\n \n-impl<'a, 'b, 'd> UnusedImportCheckVisitor<'a, 'b, 'd> {\n+impl<'a, 'b> UnusedImportCheckVisitor<'a, 'b> {\n     // We have information about whether `use` (import) directives are actually\n     // used now. If an import is not used at all, we signal a lint error.\n     fn check_import(&mut self, item_id: ast::NodeId, id: ast::NodeId, span: Span) {\n@@ -77,7 +77,7 @@ impl<'a, 'b, 'd> UnusedImportCheckVisitor<'a, 'b, 'd> {\n     }\n }\n \n-impl<'a, 'b, 'cl> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b, 'cl> {\n+impl<'a, 'b> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b> {\n     fn visit_item(&mut self, item: &'a ast::Item) {\n         self.item_span = item.span;\n "}, {"sha": "5ff012662f91c52d65a83a896daee9b1ba6e49b2", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -17,7 +17,7 @@ use syntax_pos::Span;\n use resolve_imports::ImportResolver;\n use std::cmp::Reverse;\n \n-impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n+impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n     /// Add suggestions for a path that cannot be resolved.\n     pub(crate) fn make_path_suggestion(\n         &mut self,"}, {"sha": "36f4497b77fe5331a76b831b9cebec7899d5f61c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -742,7 +742,7 @@ impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n }\n \n /// This thing walks the whole crate in DFS manner, visiting each item, resolving names as it goes.\n-impl<'a, 'tcx, 'cl> Visitor<'tcx> for Resolver<'a, 'cl> {\n+impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n     fn visit_item(&mut self, item: &'tcx Item) {\n         self.resolve_item(item);\n     }\n@@ -1476,7 +1476,7 @@ pub struct ExternPreludeEntry<'a> {\n /// The main resolver class.\n ///\n /// This is the visitor that walks the whole crate.\n-pub struct Resolver<'a, 'b: 'a> {\n+pub struct Resolver<'a> {\n     session: &'a Session,\n     cstore: &'a CStore,\n \n@@ -1580,7 +1580,7 @@ pub struct Resolver<'a, 'b: 'a> {\n     arenas: &'a ResolverArenas<'a>,\n     dummy_binding: &'a NameBinding<'a>,\n \n-    crate_loader: &'a mut CrateLoader<'b>,\n+    crate_loader: &'a mut CrateLoader<'a>,\n     macro_names: FxHashSet<Ident>,\n     builtin_macros: FxHashMap<Name, &'a NameBinding<'a>>,\n     macro_use_prelude: FxHashMap<Name, &'a NameBinding<'a>>,\n@@ -1654,7 +1654,7 @@ impl<'a> ResolverArenas<'a> {\n     }\n }\n \n-impl<'a, 'b: 'a, 'cl: 'b> ty::DefIdTree for &'a Resolver<'b, 'cl> {\n+impl<'a, 'b: 'a> ty::DefIdTree for &'a Resolver<'b> {\n     fn parent(self, id: DefId) -> Option<DefId> {\n         match id.krate {\n             LOCAL_CRATE => self.definitions.def_key(id.index).parent,\n@@ -1665,7 +1665,7 @@ impl<'a, 'b: 'a, 'cl: 'b> ty::DefIdTree for &'a Resolver<'b, 'cl> {\n \n /// This interface is used through the AST\u2192HIR step, to embed full paths into the HIR. After that\n /// the resolver is no longer needed as all the relevant information is inline.\n-impl<'a, 'cl> hir::lowering::Resolver for Resolver<'a, 'cl> {\n+impl<'a> hir::lowering::Resolver for Resolver<'a> {\n     fn resolve_hir_path(\n         &mut self,\n         path: &ast::Path,\n@@ -1711,7 +1711,7 @@ impl<'a, 'cl> hir::lowering::Resolver for Resolver<'a, 'cl> {\n     }\n }\n \n-impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n+impl<'a> Resolver<'a> {\n     /// Rustdoc uses this to resolve things in a recoverable way. ResolutionError<'a>\n     /// isn't something that can be returned because it can't be made to live that long,\n     /// and also it's a private type. Fortunately rustdoc doesn't need to know the error,\n@@ -1800,15 +1800,15 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n     }\n }\n \n-impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n+impl<'a> Resolver<'a> {\n     pub fn new(session: &'a Session,\n                cstore: &'a CStore,\n                krate: &Crate,\n                crate_name: &str,\n                make_glob_map: MakeGlobMap,\n-               crate_loader: &'a mut CrateLoader<'crateloader>,\n+               crate_loader: &'a mut CrateLoader<'a>,\n                arenas: &'a ResolverArenas<'a>)\n-               -> Resolver<'a, 'crateloader> {\n+               -> Resolver<'a> {\n         let root_def_id = DefId::local(CRATE_DEF_INDEX);\n         let root_module_kind = ModuleKind::Def(Def::Mod(root_def_id), keywords::Invalid.name());\n         let graph_root = arenas.alloc_module(ModuleData {"}, {"sha": "32f0d84342eddee8811c9fc8cde793ddf1589523", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -121,7 +121,7 @@ fn sub_namespace_match(candidate: Option<MacroKind>, requirement: Option<MacroKi\n     candidate.is_none() || requirement.is_none() || candidate == requirement\n }\n \n-impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n+impl<'a> base::Resolver for Resolver<'a> {\n     fn next_node_id(&mut self) -> ast::NodeId {\n         self.session.next_node_id()\n     }\n@@ -139,11 +139,11 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n     }\n \n     fn eliminate_crate_var(&mut self, item: P<ast::Item>) -> P<ast::Item> {\n-        struct EliminateCrateVar<'b, 'a: 'b, 'crateloader: 'a>(\n-            &'b mut Resolver<'a, 'crateloader>, Span\n+        struct EliminateCrateVar<'b, 'a: 'b>(\n+            &'b mut Resolver<'a>, Span\n         );\n \n-        impl<'a, 'b, 'crateloader> Folder for EliminateCrateVar<'a, 'b, 'crateloader> {\n+        impl<'a, 'b> Folder for EliminateCrateVar<'a, 'b> {\n             fn fold_path(&mut self, path: ast::Path) -> ast::Path {\n                 match self.fold_qpath(None, path) {\n                     (None, path) => path,\n@@ -290,7 +290,7 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n     }\n }\n \n-impl<'a, 'cl> Resolver<'a, 'cl> {\n+impl<'a> Resolver<'a> {\n     pub fn dummy_parent_scope(&self) -> ParentScope<'a> {\n         self.invoc_parent_scope(Mark::root(), Vec::new())\n     }"}, {"sha": "7b55ee9ce3336200053770dd44b8aeaeea2c3a46", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -134,7 +134,7 @@ impl<'a> NameResolution<'a> {\n     }\n }\n \n-impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n+impl<'a> Resolver<'a> {\n     fn resolution(&self, module: Module<'a>, ident: Ident, ns: Namespace)\n                   -> &'a RefCell<NameResolution<'a>> {\n         *module.resolutions.borrow_mut().entry((ident.modern(), ns))\n@@ -541,7 +541,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n     // If the resolution becomes a success, define it in the module's glob importers.\n     fn update_resolution<T, F>(&mut self, module: Module<'a>, ident: Ident, ns: Namespace, f: F)\n                                -> T\n-        where F: FnOnce(&mut Resolver<'a, 'crateloader>, &mut NameResolution<'a>) -> T\n+        where F: FnOnce(&mut Resolver<'a>, &mut NameResolution<'a>) -> T\n     {\n         // Ensure that `resolution` isn't borrowed when defining in the module's glob importers,\n         // during which the resolution might end up getting re-defined via a glob cycle.\n@@ -592,30 +592,30 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n     }\n }\n \n-pub struct ImportResolver<'a, 'b: 'a, 'c: 'a + 'b> {\n-    pub resolver: &'a mut Resolver<'b, 'c>,\n+pub struct ImportResolver<'a, 'b: 'a> {\n+    pub resolver: &'a mut Resolver<'b>,\n }\n \n-impl<'a, 'b: 'a, 'c: 'a + 'b> ::std::ops::Deref for ImportResolver<'a, 'b, 'c> {\n-    type Target = Resolver<'b, 'c>;\n-    fn deref(&self) -> &Resolver<'b, 'c> {\n+impl<'a, 'b: 'a> ::std::ops::Deref for ImportResolver<'a, 'b> {\n+    type Target = Resolver<'b>;\n+    fn deref(&self) -> &Resolver<'b> {\n         self.resolver\n     }\n }\n \n-impl<'a, 'b: 'a, 'c: 'a + 'b> ::std::ops::DerefMut for ImportResolver<'a, 'b, 'c> {\n-    fn deref_mut(&mut self) -> &mut Resolver<'b, 'c> {\n+impl<'a, 'b: 'a> ::std::ops::DerefMut for ImportResolver<'a, 'b> {\n+    fn deref_mut(&mut self) -> &mut Resolver<'b> {\n         self.resolver\n     }\n }\n \n-impl<'a, 'b: 'a, 'c: 'a + 'b> ty::DefIdTree for &'a ImportResolver<'a, 'b, 'c> {\n+impl<'a, 'b: 'a> ty::DefIdTree for &'a ImportResolver<'a, 'b> {\n     fn parent(self, id: DefId) -> Option<DefId> {\n         self.resolver.parent(id)\n     }\n }\n \n-impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n+impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n     // Import resolution\n     //\n     // This is a fixed-point algorithm. We resolve imports until our efforts"}, {"sha": "b1bc4df0a16b6f24a948d6d576ae19417496ac54", "filename": "src/librustc_target/spec/armv7_linux_androideabi.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -10,6 +10,11 @@\n \n use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n+// This target if is for the baseline of the Android v7a ABI\n+// in thumb mode. It's named armv7-* instead of thumbv7-*\n+// for historical reasons. See the thumbv7neon variant for\n+// enabling NEON.\n+\n // See https://developer.android.com/ndk/guides/abis.html#v7a\n // for target ABI requirements.\n "}, {"sha": "5e9a127f2f440b9483b458107c19484a4d65870e", "filename": "src/librustc_target/spec/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -10,6 +10,9 @@\n \n use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n+// This target is for glibc Linux on ARMv7 without NEON or\n+// thumb-mode. See the thumbv7neon variant for enabling both.\n+\n pub fn target() -> TargetResult {\n     let base = super::linux_base::opts();\n     Ok(Target {"}, {"sha": "66aa8d1dfcf1ae0d04474fce5fb52f7ff9d83cdc", "filename": "src/librustc_target/spec/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -10,6 +10,8 @@\n \n use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n+// This target is for musl Linux on ARMv7 without thumb-mode or NEON.\n+\n pub fn target() -> TargetResult {\n     let base = super::linux_musl_base::opts();\n     Ok(Target {"}, {"sha": "15f31275fd08a3283518d5957b456bdbebf17a2a", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -314,6 +314,7 @@ supported_targets! {\n     (\"armv5te-unknown-linux-gnueabi\", armv5te_unknown_linux_gnueabi),\n     (\"armv5te-unknown-linux-musleabi\", armv5te_unknown_linux_musleabi),\n     (\"armv7-unknown-linux-gnueabihf\", armv7_unknown_linux_gnueabihf),\n+    (\"thumbv7neon-unknown-linux-gnueabihf\", thumbv7neon_unknown_linux_gnueabihf),\n     (\"armv7-unknown-linux-musleabihf\", armv7_unknown_linux_musleabihf),\n     (\"aarch64-unknown-linux-gnu\", aarch64_unknown_linux_gnu),\n \n@@ -331,6 +332,7 @@ supported_targets! {\n     (\"x86_64-linux-android\", x86_64_linux_android),\n     (\"arm-linux-androideabi\", arm_linux_androideabi),\n     (\"armv7-linux-androideabi\", armv7_linux_androideabi),\n+    (\"thumbv7neon-linux-androideabi\", thumbv7neon_linux_androideabi),\n     (\"aarch64-linux-android\", aarch64_linux_android),\n \n     (\"aarch64-unknown-freebsd\", aarch64_unknown_freebsd),"}, {"sha": "eebbf85400c0b6aa42bf78675c60c401fa7092e9", "filename": "src/librustc_target/spec/thumbv7neon_linux_androideabi.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_linux_androideabi.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+\n+// This target if is for the Android v7a ABI in thumb mode with\n+// NEON unconditionally enabled and, therefore, with 32 FPU registers\n+// enabled as well. See section A2.6.2 on page A2-56 in\n+// https://static.docs.arm.com/ddi0406/cd/DDI0406C_d_armv7ar_arm.pdf\n+\n+// See https://developer.android.com/ndk/guides/abis.html#v7a\n+// for target ABI requirements.\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::android_base::opts();\n+    base.features = \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string();\n+    base.max_atomic_width = Some(64);\n+    base.pre_link_args\n+        .get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-march=armv7-a\".to_string());\n+\n+    Ok(Target {\n+        llvm_target: \"armv7-none-linux-android\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"android\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: TargetOptions {\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            .. base\n+        },\n+    })\n+}"}, {"sha": "8e641e2f6eb0101e6133d35e5162c7946001107f", "filename": "src/librustc_target/spec/thumbv7neon_unknown_linux_gnueabihf.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+\n+// This target is for glibc Linux on ARMv7 with thumb mode enabled\n+// (for consistency with Android and Debian-based distributions)\n+// and with NEON unconditionally enabled and, therefore, with 32 FPU\n+// registers enabled as well. See section A2.6.2 on page A2-56 in\n+// https://static.docs.arm.com/ddi0406/cd/DDI0406C_d_armv7ar_arm.pdf\n+\n+pub fn target() -> TargetResult {\n+    let base = super::linux_base::opts();\n+    Ok(Target {\n+        llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+\n+        options: TargetOptions {\n+            // Info about features at https://wiki.debian.org/ArmHardFloatPort\n+            features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string(),\n+            cpu: \"generic\".to_string(),\n+            max_atomic_width: Some(64),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            .. base\n+        }\n+    })\n+}"}, {"sha": "9b18c3faad7c601e7c1864c6f290e2481a4df9b8", "filename": "src/librustc_target/spec/uefi_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -62,6 +62,7 @@ pub fn opts() -> TargetOptions {\n         exe_suffix: \".efi\".to_string(),\n         allows_weak_linkage: false,\n         panic_strategy: PanicStrategy::Abort,\n+        stack_probes: true,\n         singlethread: true,\n         emit_debug_gdb_scripts: false,\n "}, {"sha": "a4eafee36d1a1ba70e7cef8840e6f0bacdca9237", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -2207,6 +2207,8 @@ fn from_target_feature(\n                 Some(\"sse4a_target_feature\") => rust_features.sse4a_target_feature,\n                 Some(\"tbm_target_feature\") => rust_features.tbm_target_feature,\n                 Some(\"wasm_target_feature\") => rust_features.wasm_target_feature,\n+                Some(\"cmpxchg16b_target_feature\") => rust_features.cmpxchg16b_target_feature,\n+                Some(\"adx_target_feature\") => rust_features.adx_target_feature,\n                 Some(name) => bug!(\"unknown target feature gate {}\", name),\n                 None => true,\n             };"}, {"sha": "2d879fc0f3048b935c714f7c672e43da44d94217", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -17,13 +17,13 @@ use self::def_ctor::{get_def_from_def_id, get_def_from_node_id};\n \n use super::*;\n \n-pub struct AutoTraitFinder<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n-    pub cx: &'a core::DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+pub struct AutoTraitFinder<'a, 'tcx: 'a, 'rcx: 'a> {\n+    pub cx: &'a core::DocContext<'a, 'tcx, 'rcx>,\n     pub f: auto::AutoTraitFinder<'a, 'tcx>,\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n-    pub fn new(cx: &'a core::DocContext<'a, 'tcx, 'rcx, 'cstore>) -> Self {\n+impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n+    pub fn new(cx: &'a core::DocContext<'a, 'tcx, 'rcx>) -> Self {\n         let f = auto::AutoTraitFinder::new(&cx.tcx);\n \n         AutoTraitFinder { cx, f }"}, {"sha": "ea8f892016c6da647380c4809911b84948f5bcbc", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -21,12 +21,12 @@ use super::*;\n \n use self::def_ctor::{get_def_from_def_id, get_def_from_node_id};\n \n-pub struct BlanketImplFinder<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n-    pub cx: &'a core::DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+pub struct BlanketImplFinder<'a, 'tcx: 'a, 'rcx: 'a> {\n+    pub cx: &'a core::DocContext<'a, 'tcx, 'rcx>,\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> BlanketImplFinder <'a, 'tcx, 'rcx, 'cstore> {\n-    pub fn new(cx: &'a core::DocContext<'a, 'tcx, 'rcx, 'cstore>) -> Self {\n+impl<'a, 'tcx, 'rcx> BlanketImplFinder <'a, 'tcx, 'rcx> {\n+    pub fn new(cx: &'a core::DocContext<'a, 'tcx, 'rcx>) -> Self {\n         BlanketImplFinder { cx }\n     }\n "}, {"sha": "3678aab87c290ecc7976485c5b2652753241ce81", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -149,7 +149,7 @@ pub struct Crate {\n     pub masked_crates: FxHashSet<CrateNum>,\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n+impl<'a, 'tcx, 'rcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx, 'rcx> {\n     fn clean(&self, cx: &DocContext) -> Crate {\n         use ::visit_lib::LibEmbargoVisitor;\n "}, {"sha": "15527d7d14133ca95a323aa11d507e4a4d975e4e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -55,9 +55,9 @@ pub use rustc::session::search_paths::SearchPath;\n \n pub type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n \n-pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n+pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    pub resolver: &'a RefCell<resolve::Resolver<'rcx, 'cstore>>,\n+    pub resolver: &'a RefCell<resolve::Resolver<'rcx>>,\n     /// The stack of module NodeIds up till this point\n     pub crate_name: Option<String>,\n     pub cstore: Rc<CStore>,\n@@ -88,7 +88,7 @@ pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n     pub all_traits: Vec<DefId>,\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> DocContext<'a, 'tcx, 'rcx, 'cstore> {\n+impl<'a, 'tcx, 'rcx> DocContext<'a, 'tcx, 'rcx> {\n     pub fn sess(&self) -> &session::Session {\n         &self.tcx.sess\n     }"}, {"sha": "1480c54ce4084f51a50a7141bab0bc2a4c807e20", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -997,7 +997,7 @@ span.since {\n \t\tmargin-left: -15px;\n \t\tpadding: 0 15px;\n \t\tposition: static;\n-\t\tz-index: 1;\n+\t\tz-index: 11;\n \t}\n \n \t.sidebar > .location {"}, {"sha": "4e1874180e7a7f2091b2e1c348b4a8aed44e4a58", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -53,14 +53,14 @@ enum PathKind {\n     Type,\n }\n \n-struct LinkCollector<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n-    cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+struct LinkCollector<'a, 'tcx: 'a, 'rcx: 'a> {\n+    cx: &'a DocContext<'a, 'tcx, 'rcx>,\n     mod_ids: Vec<NodeId>,\n     is_nightly_build: bool,\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> LinkCollector<'a, 'tcx, 'rcx, 'cstore> {\n-    fn new(cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>) -> Self {\n+impl<'a, 'tcx, 'rcx> LinkCollector<'a, 'tcx, 'rcx> {\n+    fn new(cx: &'a DocContext<'a, 'tcx, 'rcx>) -> Self {\n         LinkCollector {\n             cx,\n             mod_ids: Vec::new(),\n@@ -213,7 +213,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> LinkCollector<'a, 'tcx, 'rcx, 'cstore> {\n     }\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> DocFolder for LinkCollector<'a, 'tcx, 'rcx, 'cstore> {\n+impl<'a, 'tcx, 'rcx> DocFolder for LinkCollector<'a, 'tcx, 'rcx> {\n     fn fold_item(&mut self, mut item: Item) -> Option<Item> {\n         let item_node_id = if item.is_mod() {\n             if let Some(id) = self.cx.tcx.hir().as_local_node_id(item.def_id) {"}, {"sha": "80a906c9f435c28bc8e4e09fb11734546a784f36", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -147,21 +147,21 @@ pub fn collect_trait_impls(krate: Crate, cx: &DocContext) -> Crate {\n     krate\n }\n \n-struct SyntheticImplCollector<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n-    cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+struct SyntheticImplCollector<'a, 'tcx: 'a, 'rcx: 'a> {\n+    cx: &'a DocContext<'a, 'tcx, 'rcx>,\n     impls: Vec<Item>,\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> SyntheticImplCollector<'a, 'tcx, 'rcx, 'cstore> {\n-    fn new(cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>) -> Self {\n+impl<'a, 'tcx, 'rcx> SyntheticImplCollector<'a, 'tcx, 'rcx> {\n+    fn new(cx: &'a DocContext<'a, 'tcx, 'rcx>) -> Self {\n         SyntheticImplCollector {\n             cx,\n             impls: Vec::new(),\n         }\n     }\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> DocFolder for SyntheticImplCollector<'a, 'tcx, 'rcx, 'cstore> {\n+impl<'a, 'tcx, 'rcx> DocFolder for SyntheticImplCollector<'a, 'tcx, 'rcx> {\n     fn fold_item(&mut self, i: Item) -> Option<Item> {\n         if i.is_struct() || i.is_enum() || i.is_union() {\n             if let (Some(node_id), Some(name)) ="}, {"sha": "aca371f92ac9edfffb5811dda8d5150c62ed001c", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -361,8 +361,8 @@ impl fold::DocFolder for ImportStripper {\n     }\n }\n \n-pub fn look_for_tests<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx>(\n-    cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+pub fn look_for_tests<'a, 'tcx: 'a, 'rcx: 'a>(\n+    cx: &'a DocContext<'a, 'tcx, 'rcx>,\n     dox: &str,\n     item: &Item,\n     check_missing_code: bool,"}, {"sha": "cd8e039764c4b14181f93a540c465cc609b2e858", "filename": "src/librustdoc/passes/private_items_doc_tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -19,12 +19,12 @@ pub const CHECK_PRIVATE_ITEMS_DOC_TESTS: Pass =\n     Pass::early(\"check-private-items-doc-tests\", check_private_items_doc_tests,\n                 \"check private items doc tests\");\n \n-struct PrivateItemDocTestLinter<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n-    cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+struct PrivateItemDocTestLinter<'a, 'tcx: 'a, 'rcx: 'a> {\n+    cx: &'a DocContext<'a, 'tcx, 'rcx>,\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> PrivateItemDocTestLinter<'a, 'tcx, 'rcx, 'cstore> {\n-    fn new(cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>) -> Self {\n+impl<'a, 'tcx, 'rcx> PrivateItemDocTestLinter<'a, 'tcx, 'rcx> {\n+    fn new(cx: &'a DocContext<'a, 'tcx, 'rcx>) -> Self {\n         PrivateItemDocTestLinter {\n             cx,\n         }\n@@ -37,7 +37,7 @@ pub fn check_private_items_doc_tests(krate: Crate, cx: &DocContext) -> Crate {\n     coll.fold_crate(krate)\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> DocFolder for PrivateItemDocTestLinter<'a, 'tcx, 'rcx, 'cstore> {\n+impl<'a, 'tcx, 'rcx> DocFolder for PrivateItemDocTestLinter<'a, 'tcx, 'rcx> {\n     fn fold_item(&mut self, item: Item) -> Option<Item> {\n         let cx = self.cx;\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_else(String::new);"}, {"sha": "027652bb50b51a274441d24a3ae7911a1505f550", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -36,21 +36,21 @@ use doctree::*;\n // Also, is there some reason that this doesn't use the 'visit'\n // framework from syntax?.\n \n-pub struct RustdocVisitor<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n+pub struct RustdocVisitor<'a, 'tcx: 'a, 'rcx: 'a> {\n     pub module: Module,\n     pub attrs: hir::HirVec<ast::Attribute>,\n-    pub cx: &'a core::DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+    pub cx: &'a core::DocContext<'a, 'tcx, 'rcx>,\n     view_item_stack: FxHashSet<ast::NodeId>,\n     inlining: bool,\n     /// Are the current module and all of its parents public?\n     inside_public_path: bool,\n     exact_paths: Option<FxHashMap<DefId, Vec<String>>>,\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n+impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n     pub fn new(\n-        cx: &'a core::DocContext<'a, 'tcx, 'rcx, 'cstore>\n-    ) -> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n+        cx: &'a core::DocContext<'a, 'tcx, 'rcx>\n+    ) -> RustdocVisitor<'a, 'tcx, 'rcx> {\n         // If the root is re-exported, terminate all recursion.\n         let mut stack = FxHashSet::default();\n         stack.insert(ast::CRATE_NODE_ID);"}, {"sha": "391a222f5f503ba1ccda342bd59e68d07cf07b52", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -22,8 +22,8 @@ use clean::{AttributesExt, NestedAttributesExt};\n \n /// Similar to `librustc_privacy::EmbargoVisitor`, but also takes\n /// specific rustdoc annotations into account (i.e., `doc(hidden)`)\n-pub struct LibEmbargoVisitor<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n-    cx: &'a ::core::DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+pub struct LibEmbargoVisitor<'a, 'tcx: 'a, 'rcx: 'a> {\n+    cx: &'a ::core::DocContext<'a, 'tcx, 'rcx>,\n     // Accessibility levels for reachable nodes\n     access_levels: RefMut<'a, AccessLevels<DefId>>,\n     // Previous accessibility level, None means unreachable\n@@ -32,10 +32,10 @@ pub struct LibEmbargoVisitor<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n     visited_mods: FxHashSet<DefId>,\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> LibEmbargoVisitor<'a, 'tcx, 'rcx, 'cstore> {\n+impl<'a, 'tcx, 'rcx> LibEmbargoVisitor<'a, 'tcx, 'rcx> {\n     pub fn new(\n-        cx: &'a ::core::DocContext<'a, 'tcx, 'rcx, 'cstore>\n-    ) -> LibEmbargoVisitor<'a, 'tcx, 'rcx, 'cstore> {\n+        cx: &'a ::core::DocContext<'a, 'tcx, 'rcx>\n+    ) -> LibEmbargoVisitor<'a, 'tcx, 'rcx> {\n         LibEmbargoVisitor {\n             cx,\n             access_levels: RefMut::map(cx.renderinfo.borrow_mut(), |ri| &mut ri.access_levels),"}, {"sha": "5137a9432ae0cf0a6fa04be8f7a0238e176a35a4", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -271,6 +271,7 @@\n \n use cmp;\n use fmt;\n+use slice;\n use str;\n use memchr;\n use ptr;\n@@ -1936,18 +1937,6 @@ impl<T: BufRead> BufRead for Take<T> {\n     }\n }\n \n-fn read_one_byte(reader: &mut dyn Read) -> Option<Result<u8>> {\n-    let mut buf = [0];\n-    loop {\n-        return match reader.read(&mut buf) {\n-            Ok(0) => None,\n-            Ok(..) => Some(Ok(buf[0])),\n-            Err(ref e) if e.kind() == ErrorKind::Interrupted => continue,\n-            Err(e) => Some(Err(e)),\n-        };\n-    }\n-}\n-\n /// An iterator over `u8` values of a reader.\n ///\n /// This struct is generally created by calling [`bytes`] on a reader.\n@@ -1965,7 +1954,15 @@ impl<R: Read> Iterator for Bytes<R> {\n     type Item = Result<u8>;\n \n     fn next(&mut self) -> Option<Result<u8>> {\n-        read_one_byte(&mut self.inner)\n+        let mut byte = 0;\n+        loop {\n+            return match self.inner.read(slice::from_mut(&mut byte)) {\n+                Ok(0) => None,\n+                Ok(..) => Some(Ok(byte)),\n+                Err(ref e) if e.kind() == ErrorKind::Interrupted => continue,\n+                Err(e) => Some(Err(e)),\n+            };\n+        }\n     }\n }\n "}, {"sha": "844f49fe842b7257f7f03280e4c12f9ba4a3c02a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -417,6 +417,8 @@ declare_features! (\n     (active, sse4a_target_feature, \"1.27.0\", Some(44839), None),\n     (active, tbm_target_feature, \"1.27.0\", Some(44839), None),\n     (active, wasm_target_feature, \"1.30.0\", Some(44839), None),\n+    (active, adx_target_feature, \"1.32.0\", Some(44839), None),\n+    (active, cmpxchg16b_target_feature, \"1.32.0\", Some(44839), None),\n \n     // Allows macro invocations on modules expressions and statements and\n     // procedural macros to expand to non-items."}, {"sha": "6f9dc247a7897d1b7aba13f0069ccfbf10c5eb08", "filename": "src/libsyntax/parse/lexer/tokentrees.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -97,7 +97,15 @@ impl<'a> StringReader<'a> {\n                     // Correct delimiter.\n                     token::CloseDelim(d) if d == delim => {\n                         let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();\n-                        self.matching_delim_spans.push((open_brace, open_brace_span, self.span));\n+                        if self.open_braces.len() == 0 {\n+                            // Clear up these spans to avoid suggesting them as we've found\n+                            // properly matched delimiters so far for an entire block.\n+                            self.matching_delim_spans.clear();\n+                        } else {\n+                            self.matching_delim_spans.push(\n+                                (open_brace, open_brace_span, self.span),\n+                            );\n+                        }\n                         // Parse the close delimiter.\n                         self.real_token();\n                     }"}, {"sha": "5a51b629826ddb60809633841f59313aea4533c2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -3062,6 +3062,7 @@ impl<'a> Parser<'a> {\n     ///\n     /// This parses an expression accounting for associativity and precedence of the operators in\n     /// the expression.\n+    #[inline]\n     fn parse_assoc_expr(&mut self,\n                             already_parsed_attrs: Option<ThinVec<Attribute>>)\n                             -> PResult<'a, P<Expr>> {\n@@ -3722,6 +3723,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse an expression\n+    #[inline]\n     pub fn parse_expr(&mut self) -> PResult<'a, P<Expr>> {\n         self.parse_expr_res(Restrictions::empty(), None)\n     }\n@@ -3741,6 +3743,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse an expression, subject to the given restrictions\n+    #[inline]\n     fn parse_expr_res(&mut self, r: Restrictions,\n                           already_parsed_attrs: Option<ThinVec<Attribute>>)\n                           -> PResult<'a, P<Expr>> {"}, {"sha": "41799eede9e86d9a7a4405752db3029c5dbaf727", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 52, "deletions": 81, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -158,28 +158,15 @@ fn parse_args(ecx: &mut ExtCtxt,\n         } // accept trailing commas\n         if named || (p.token.is_ident() && p.look_ahead(1, |t| *t == token::Eq)) {\n             named = true;\n-            let ident = match p.token {\n-                token::Ident(i, _) => {\n-                    p.bump();\n-                    i\n-                }\n-                _ if named => {\n-                    ecx.span_err(\n-                        p.span,\n-                        \"expected ident, positional arguments cannot follow named arguments\",\n-                    );\n-                    return None;\n-                }\n-                _ => {\n-                    ecx.span_err(\n-                        p.span,\n-                        &format!(\n-                            \"expected ident for named argument, found `{}`\",\n-                            p.this_token_to_string()\n-                        ),\n-                    );\n-                    return None;\n-                }\n+            let ident = if let token::Ident(i, _) = p.token {\n+                p.bump();\n+                i\n+            } else {\n+                ecx.span_err(\n+                    p.span,\n+                    \"expected ident, positional arguments cannot follow named arguments\",\n+                );\n+                return None;\n             };\n             let name: &str = &ident.as_str();\n \n@@ -286,11 +273,11 @@ impl<'a, 'b> Context<'a, 'b> {\n         } else {\n             MultiSpan::from_span(self.fmtsp)\n         };\n-        let mut refs: Vec<_> = self\n+        let refs_len = self.invalid_refs.len();\n+        let mut refs = self\n             .invalid_refs\n             .iter()\n-            .map(|(r, pos)| (r.to_string(), self.arg_spans.get(*pos)))\n-            .collect();\n+            .map(|(r, pos)| (r.to_string(), self.arg_spans.get(*pos)));\n \n         if self.names.is_empty() && !numbered_position_args {\n             e = self.ecx.mut_span_err(\n@@ -303,28 +290,24 @@ impl<'a, 'b> Context<'a, 'b> {\n                 ),\n             );\n         } else {\n-            let (arg_list, mut sp) = match refs.len() {\n-                1 => {\n-                    let (reg, pos) = refs.pop().unwrap();\n-                    (\n-                        format!(\"argument {}\", reg),\n-                        MultiSpan::from_span(*pos.unwrap_or(&self.fmtsp)),\n-                    )\n-                }\n-                _ => {\n-                    let pos =\n-                        MultiSpan::from_spans(refs.iter().map(|(_, p)| *p.unwrap()).collect());\n-                    let mut refs: Vec<String> = refs.iter().map(|(s, _)| s.to_owned()).collect();\n-                    let reg = refs.pop().unwrap();\n-                    (\n-                        format!(\n-                            \"arguments {head} and {tail}\",\n-                            tail = reg,\n-                            head = refs.join(\", \")\n-                        ),\n-                        pos,\n-                    )\n-                }\n+            let (arg_list, mut sp) = if refs_len == 1 {\n+                let (reg, pos) = refs.next().unwrap();\n+                (\n+                    format!(\"argument {}\", reg),\n+                    MultiSpan::from_span(*pos.unwrap_or(&self.fmtsp)),\n+                )\n+            } else {\n+                let (mut refs, spans): (Vec<_>, Vec<_>) = refs.unzip();\n+                let pos = MultiSpan::from_spans(spans.into_iter().map(|s| *s.unwrap()).collect());\n+                let reg = refs.pop().unwrap();\n+                (\n+                    format!(\n+                        \"arguments {head} and {tail}\",\n+                        head = refs.join(\", \"),\n+                        tail = reg,\n+                    ),\n+                    pos,\n+                )\n             };\n             if !self.is_literal {\n                 sp = MultiSpan::from_span(self.fmtsp);\n@@ -353,33 +336,30 @@ impl<'a, 'b> Context<'a, 'b> {\n                     Placeholder(_) => {\n                         // record every (position, type) combination only once\n                         let ref mut seen_ty = self.arg_unique_types[arg];\n-                        let i = match seen_ty.iter().position(|x| *x == ty) {\n-                            Some(i) => i,\n-                            None => {\n-                                let i = seen_ty.len();\n-                                seen_ty.push(ty);\n-                                i\n-                            }\n-                        };\n+                        let i = seen_ty.iter().position(|x| *x == ty).unwrap_or_else(|| {\n+                            let i = seen_ty.len();\n+                            seen_ty.push(ty);\n+                            i\n+                        });\n                         self.arg_types[arg].push(i);\n                     }\n                     Count => {\n-                        match self.count_positions.entry(arg) {\n-                            Entry::Vacant(e) => {\n-                                let i = self.count_positions_count;\n-                                e.insert(i);\n-                                self.count_args.push(Exact(arg));\n-                                self.count_positions_count += 1;\n-                            }\n-                            Entry::Occupied(_) => {}\n+                        if let Entry::Vacant(e) = self.count_positions.entry(arg) {\n+                            let i = self.count_positions_count;\n+                            e.insert(i);\n+                            self.count_args.push(Exact(arg));\n+                            self.count_positions_count += 1;\n                         }\n                     }\n                 }\n             }\n \n             Named(name) => {\n-                let idx = match self.names.get(&name) {\n-                    Some(e) => *e,\n+                match self.names.get(&name) {\n+                    Some(idx) => {\n+                        // Treat as positional arg.\n+                        self.verify_arg_type(Exact(*idx), ty)\n+                    }\n                     None => {\n                         let msg = format!(\"there is no argument named `{}`\", name);\n                         let sp = if self.is_literal {\n@@ -389,11 +369,8 @@ impl<'a, 'b> Context<'a, 'b> {\n                         };\n                         let mut err = self.ecx.struct_span_err(sp, &msg[..]);\n                         err.emit();\n-                        return;\n                     }\n-                };\n-                // Treat as positional arg.\n-                self.verify_arg_type(Exact(idx), ty)\n+                }\n             }\n         }\n     }\n@@ -436,12 +413,10 @@ impl<'a, 'b> Context<'a, 'b> {\n             parse::CountIs(i) => count(\"Is\", Some(self.ecx.expr_usize(sp, i))),\n             parse::CountIsParam(i) => {\n                 // This needs mapping too, as `i` is referring to a macro\n-                // argument.\n-                let i = match self.count_positions.get(&i) {\n-                    Some(&i) => i,\n-                    None => 0, // error already emitted elsewhere\n-                };\n-                let i = i + self.count_args_index_offset;\n+                // argument. If `i` is not found in `count_positions` then\n+                // the error had already been emitted elsewhere.\n+                let i = self.count_positions.get(&i).cloned().unwrap_or(0)\n+                      + self.count_args_index_offset;\n                 count(\"Param\", Some(self.ecx.expr_usize(sp, i)))\n             }\n             parse::CountImplied => count(\"Implied\", None),\n@@ -526,10 +501,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                     },\n                 };\n \n-                let fill = match arg.format.fill {\n-                    Some(c) => c,\n-                    None => ' ',\n-                };\n+                let fill = arg.format.fill.unwrap_or(' ');\n \n                 if *arg != simple_arg || fill != ' ' {\n                     self.all_pieces_simple = false;\n@@ -828,8 +800,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n     if !parser.errors.is_empty() {\n         let err = parser.errors.remove(0);\n         let sp = fmt.span.from_inner_byte_pos(err.start, err.end);\n-        let mut e = ecx.struct_span_err(sp, &format!(\"invalid format string: {}\",\n-                                                        err.description));\n+        let mut e = ecx.struct_span_err(sp, &format!(\"invalid format string: {}\", err.description));\n         e.span_label(sp, err.label + \" in format string\");\n         if let Some(note) = err.note {\n             e.note(&note);"}, {"sha": "f4728ed8fa2296c5b009bb85550e157e1e57ed0b", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -1 +1 @@\n-Subproject commit 95185c8c801c765ac1072392d081d265af9fb310\n+Subproject commit f4728ed8fa2296c5b009bb85550e157e1e57ed0b"}, {"sha": "9e8b4fabf17989c43b82543c175356bd4f37262a", "filename": "src/test/run-make-fulldeps/atomic-lock-free/Makefile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2FMakefile?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -18,6 +18,8 @@ ifeq ($(filter arm,$(LLVM_COMPONENTS)),arm)\n \tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | $(CGREP) -v __atomic_fetch_add\n \t$(RUSTC) --target=armv7-unknown-linux-gnueabihf atomic_lock_free.rs\n \tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | $(CGREP) -v __atomic_fetch_add\n+\t$(RUSTC) --target=thumbv7neon-unknown-linux-gnueabihf atomic_lock_free.rs\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | $(CGREP) -v __atomic_fetch_add\n endif\n ifeq ($(filter aarch64,$(LLVM_COMPONENTS)),aarch64)\n \t$(RUSTC) --target=aarch64-unknown-linux-gnu atomic_lock_free.rs"}, {"sha": "4b32cc12dfd2ad222cddd4a662b59f76efcb3dce", "filename": "src/test/run-pass/issues/issue-18804/main.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18804%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18804%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18804%2Fmain.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -14,9 +14,14 @@\n \n // ignore-asmjs no weak symbol support\n // ignore-emscripten no weak symbol support\n+// ignore-windows no extern_weak linkage\n+// ignore-macos no extern_weak linkage\n \n // aux-build:lib.rs\n \n+// rust-lang/rust#56772: nikic says we need this to be proper test.\n+// compile-flags: -C no-prepopulate-passes -C passes=name-anon-globals\n+\n extern crate lib;\n \n fn main() {"}, {"sha": "f82bfb52246d906315a8b3e9f8d922c5e9e0f22a", "filename": "src/test/rustdoc-ui/lint-group.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Frustdoc-ui%2Flint-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Frustdoc-ui%2Flint-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Documenting the kinds of lints emitted by rustdoc.\n+//!\n+//! ```\n+//! println!(\"sup\");\n+//! ```\n+\n+#![deny(rustdoc)]\n+\n+/// what up, let's make an [error]\n+///\n+/// ```\n+/// println!(\"sup\");\n+/// ```\n+pub fn link_error() {} //~^^^^^ ERROR cannot be resolved, ignoring it\n+\n+/// wait, this doesn't have a doctest?\n+pub fn no_doctest() {} //~^ ERROR Missing code example in this documentation\n+\n+/// wait, this *does* have a doctest?\n+///\n+/// ```\n+/// println!(\"sup\");\n+/// ```\n+fn private_doctest() {} //~^^^^^ ERROR Documentation test in private item"}, {"sha": "2fd760d54c206b37f714ab82f5d164a7e3792dba", "filename": "src/test/rustdoc-ui/lint-group.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -0,0 +1,44 @@\n+error: Documentation test in private item\n+  --> $DIR/lint-group.rs:29:1\n+   |\n+LL | / /// wait, this *does* have a doctest?\n+LL | | ///\n+LL | | /// ```\n+LL | | /// println!(\"sup\");\n+LL | | /// ```\n+   | |_______^\n+   |\n+note: lint level defined here\n+  --> $DIR/lint-group.rs:17:9\n+   |\n+LL | #![deny(rustdoc)]\n+   |         ^^^^^^^\n+   = note: #[deny(private_doc_tests)] implied by #[deny(rustdoc)]\n+\n+error: `[error]` cannot be resolved, ignoring it...\n+  --> $DIR/lint-group.rs:19:29\n+   |\n+LL | /// what up, let's make an [error]\n+   |                             ^^^^^ cannot be resolved, ignoring\n+   |\n+note: lint level defined here\n+  --> $DIR/lint-group.rs:17:9\n+   |\n+LL | #![deny(rustdoc)]\n+   |         ^^^^^^^\n+   = note: #[deny(intra_doc_link_resolution_failure)] implied by #[deny(rustdoc)]\n+   = help: to escape `[` and `]` characters, just add '/' before them like `/[` or `/]`\n+\n+error: Missing code example in this documentation\n+  --> $DIR/lint-group.rs:26:1\n+   |\n+LL | /// wait, this doesn't have a doctest?\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/lint-group.rs:17:9\n+   |\n+LL | #![deny(rustdoc)]\n+   |         ^^^^^^^\n+   = note: #[deny(missing_doc_code_examples)] implied by #[deny(rustdoc)]\n+"}, {"sha": "3dbed9a106509338d61133b9494a30f543f6cd64", "filename": "src/test/ui/iterators/array-of-ranges.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -75,7 +75,7 @@ LL |     for _ in [0..1, 2..3] {}\n    |              ^^^^^^^^^^^^ borrow the array with `&` or call `.iter()` on it to iterate over it\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `[std::ops::Range<{integer}>; 2]`\n-   = note: arrays are not an iterators, but slices like the following are: `&[1, 2, 3]`\n+   = note: arrays are not iterators, but slices like the following are: `&[1, 2, 3]`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `[std::ops::RangeInclusive<{integer}>; 1]` is not an iterator"}, {"sha": "94731f1c745e46d15b0cae2804b410dca5dc5961", "filename": "src/test/ui/iterators/array.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Fui%2Fiterators%2Farray.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Fui%2Fiterators%2Farray.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Farray.stderr?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -5,7 +5,7 @@ LL |     for _ in [1, 2] {}\n    |              ^^^^^^ borrow the array with `&` or call `.iter()` on it to iterate over it\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `[{integer}; 2]`\n-   = note: arrays are not an iterators, but slices like the following are: `&[1, 2, 3]`\n+   = note: arrays are not iterators, but slices like the following are: `&[1, 2, 3]`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `[{integer}; 2]` is not an iterator\n@@ -15,7 +15,7 @@ LL |     for _ in x {}\n    |              ^ borrow the array with `&` or call `.iter()` on it to iterate over it\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `[{integer}; 2]`\n-   = note: arrays are not an iterators, but slices like the following are: `&[1, 2, 3]`\n+   = note: arrays are not iterators, but slices like the following are: `&[1, 2, 3]`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error[E0277]: `[{float}; 2]` is not an iterator\n@@ -25,7 +25,7 @@ LL |     for _ in [1.0, 2.0] {}\n    |              ^^^^^^^^^^ borrow the array with `&` or call `.iter()` on it to iterate over it\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `[{float}; 2]`\n-   = note: arrays are not an iterators, but slices like the following are: `&[1, 2, 3]`\n+   = note: arrays are not iterators, but slices like the following are: `&[1, 2, 3]`\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error: aborting due to 3 previous errors"}, {"sha": "3eef75bafd39beb65f73212ebcc51c9e538b833d", "filename": "src/test/ui/parser/unmatched-delimiter-at-end-of-file.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Fui%2Fparser%2Funmatched-delimiter-at-end-of-file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Fui%2Fparser%2Funmatched-delimiter-at-end-of-file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funmatched-delimiter-at-end-of-file.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -0,0 +1,11 @@\n+struct S {\n+    x: usize,\n+    y: usize,\n+}\n+\n+fn main() {\n+    S { x: 4,\n+        y: 5 };\n+}\n+\n+fn foo() { //~ ERROR this file contains an un-closed delimiter"}, {"sha": "442837e580802c06e09fddabad5bd02d7ce94c51", "filename": "src/test/ui/parser/unmatched-delimiter-at-end-of-file.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Fui%2Fparser%2Funmatched-delimiter-at-end-of-file.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Fui%2Fparser%2Funmatched-delimiter-at-end-of-file.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funmatched-delimiter-at-end-of-file.stderr?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -0,0 +1,8 @@\n+error: this file contains an un-closed delimiter\n+  --> $DIR/unmatched-delimiter-at-end-of-file.rs:11:64\n+   |\n+LL | fn foo() { //~ ERROR this file contains an un-closed delimiter\n+   |          - un-closed delimiter                                 ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "4207a3285c48c1e482b87fe39cbb70333a610db4", "filename": "src/test/ui/target-feature-gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Fui%2Ftarget-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Fui%2Ftarget-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-gate.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -24,6 +24,9 @@\n // gate-test-mips_target_feature\n // gate-test-mmx_target_feature\n // gate-test-wasm_target_feature\n+// gate-test-adx_target_feature\n+// gate-test-cmpxchg16b_target_feature\n+// min-llvm-version 6.0\n \n #[target_feature(enable = \"avx512bw\")]\n //~^ ERROR: currently unstable"}, {"sha": "54589536010aec5b0edddbd956039185faf592f6", "filename": "src/test/ui/target-feature-gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the target feature `avx512bw` is currently unstable (see issue #44839)\n-  --> $DIR/target-feature-gate.rs:28:18\n+  --> $DIR/target-feature-gate.rs:31:18\n    |\n LL | #[target_feature(enable = \"avx512bw\")]\n    |                  ^^^^^^^^^^^^^^^^^^^"}, {"sha": "aba0472ae366e4853cdfd6ce9fe45cb3e5d9ba9d", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -61,7 +61,9 @@ static TARGETS: &'static [&'static str] = &[\n     \"armv5te-unknown-linux-musleabi\",\n     \"armv7-apple-ios\",\n     \"armv7-linux-androideabi\",\n+    \"thumbv7neon-linux-androideabi\",\n     \"armv7-unknown-linux-gnueabihf\",\n+    \"thumbv7neon-unknown-linux-gnueabihf\",\n     \"armv7-unknown-linux-musleabihf\",\n     \"armebv7r-none-eabi\",\n     \"armebv7r-none-eabihf\","}, {"sha": "0e9b5b11366fba74244d13866976b81cecd407c4", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f839fbb0d407956777529b029fbb0d6cc6e4318/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=6f839fbb0d407956777529b029fbb0d6cc6e4318", "patch": "@@ -168,7 +168,10 @@ pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Misma\n \n pub fn run(config: Config, testpaths: &TestPaths, revision: Option<&str>) {\n     match &*config.target {\n-        \"arm-linux-androideabi\" | \"armv7-linux-androideabi\" | \"aarch64-linux-android\" => {\n+        \"arm-linux-androideabi\"\n+        | \"armv7-linux-androideabi\"\n+        | \"thumbv7neon-linux-androideabi\"\n+        | \"aarch64-linux-android\" => {\n             if !config.adb_device_status {\n                 panic!(\"android device not available\");\n             }"}]}