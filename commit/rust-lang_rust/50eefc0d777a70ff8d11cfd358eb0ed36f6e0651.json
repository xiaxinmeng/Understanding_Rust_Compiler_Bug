{"sha": "50eefc0d777a70ff8d11cfd358eb0ed36f6e0651", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZWVmYzBkNzc3YTcwZmY4ZDExY2ZkMzU4ZWIwZWQzNmY2ZTA2NTE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-05-24T01:31:54Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-05-24T11:16:54Z"}, "message": "Account for negative offsets in suggestions\n\nWhen suggesting code that has a shorter span than the current code,\naccount for this by keeping the offset as a signed value.", "tree": {"sha": "7fb047b4ce91491150638e4fc2407d7b127db80c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fb047b4ce91491150638e4fc2407d7b127db80c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50eefc0d777a70ff8d11cfd358eb0ed36f6e0651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50eefc0d777a70ff8d11cfd358eb0ed36f6e0651", "html_url": "https://github.com/rust-lang/rust/commit/50eefc0d777a70ff8d11cfd358eb0ed36f6e0651", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50eefc0d777a70ff8d11cfd358eb0ed36f6e0651/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2daa013290e054151424849e51c0b1f24db7e7f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2daa013290e054151424849e51c0b1f24db7e7f9", "html_url": "https://github.com/rust-lang/rust/commit/2daa013290e054151424849e51c0b1f24db7e7f9"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "4d1d33e1325b8b550286205eac062e2675114c9c", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/50eefc0d777a70ff8d11cfd358eb0ed36f6e0651/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50eefc0d777a70ff8d11cfd358eb0ed36f6e0651/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=50eefc0d777a70ff8d11cfd358eb0ed36f6e0651", "patch": "@@ -1242,50 +1242,55 @@ impl EmitterWriter {\n                     line_pos += 1;\n                     row_num += 1;\n                 }\n-                let mut extra = 0;\n+\n+                // This offset and the ones below need to be signed to account for replacement code\n+                // that is shorter than the original code.\n+                let mut offset: isize = 0;\n                 // Only show an underline in the suggestions if the suggestion is not the\n                 // entirety of the code being shown and the displayed code is not multiline.\n                 if show_underline {\n                     draw_col_separator(&mut buffer, row_num, max_line_num_len + 1);\n                     for part in parts {\n-                        let span_start_pos = cm.lookup_char_pos(part.span.lo());\n-                        let span_end_pos = cm.lookup_char_pos(part.span.hi());\n-                        // length of the code to be substituted\n-                        let snippet_len = span_end_pos.col_display - span_start_pos.col_display;\n-\n-                        // Do not underline the leading or trailing spaces.\n-                        let start = part.snippet.len() - part.snippet.trim_left().len();\n-                        // account for substitutions containing unicode characters\n+                        let span_start_pos = cm.lookup_char_pos(part.span.lo()).col_display;\n+                        let span_end_pos = cm.lookup_char_pos(part.span.hi()).col_display;\n+\n+                        // Do not underline the leading...\n+                        let start = part.snippet.len()\n+                            .saturating_sub(part.snippet.trim_left().len());\n+                        // ...or trailing spaces. Account for substitutions containing unicode\n+                        // characters.\n                         let sub_len = part.snippet.trim().chars().fold(0, |acc, ch| {\n                             acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(0)\n                         });\n \n-                        let underline_start = span_start_pos.col_display + start + extra;\n-                        let underline_end = span_start_pos.col_display + start + sub_len + extra;\n+                        let underline_start = (span_start_pos + start) as isize + offset;\n+                        let underline_end = (span_start_pos + start + sub_len) as isize + offset;\n                         for p in underline_start..underline_end {\n                             buffer.putc(row_num,\n-                                        max_line_num_len + 3 + p,\n+                                        max_line_num_len + 3 + p as usize,\n                                         '^',\n                                         Style::UnderlinePrimary);\n                         }\n                         // underline removals too\n                         if underline_start == underline_end {\n                             for p in underline_start-1..underline_start+1 {\n                                 buffer.putc(row_num,\n-                                            max_line_num_len + 3 + p,\n+                                            max_line_num_len + 3 + p as usize,\n                                             '-',\n                                             Style::UnderlineSecondary);\n                             }\n                         }\n \n                         // length of the code after substitution\n                         let full_sub_len = part.snippet.chars().fold(0, |acc, ch| {\n-                            acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(0)\n+                            acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(0) as isize\n                         });\n \n+                        // length of the code to be substituted\n+                        let snippet_len = (span_end_pos - span_start_pos) as isize;\n                         // For multiple substitutions, use the position *after* the previous\n                         // substitutions have happened.\n-                        extra += full_sub_len - snippet_len;\n+                        offset += full_sub_len - snippet_len;\n                     }\n                     row_num += 1;\n                 }"}, {"sha": "d47adee424c08d1be2e6269ed382818898db7351", "filename": "src/test/ui/impl-trait/impl-generic-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50eefc0d777a70ff8d11cfd358eb0ed36f6e0651/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50eefc0d777a70ff8d11cfd358eb0ed36f6e0651/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr?ref=50eefc0d777a70ff8d11cfd358eb0ed36f6e0651", "patch": "@@ -9,7 +9,7 @@ LL |     fn foo<U: Debug>(&self, _: &U) { }\n help: try removing the generic parameter and using `impl Trait` instead\n    |\n LL |     fn foo(&self, _: &impl Debug) { }\n-   |\n+   |          --           ^^^^^^^^^^\n \n error[E0643]: method `bar` has incompatible signature for trait\n   --> $DIR/impl-generic-mismatch.rs:27:23"}]}