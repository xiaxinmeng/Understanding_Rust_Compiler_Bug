{"sha": "c7a58b534e61f65e9f3724ec921ec7a3396efdcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YTU4YjUzNGU2MWY2NWU5ZjM3MjRlYzkyMWVjN2EzMzk2ZWZkY2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-17T13:24:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-17T13:24:01Z"}, "message": "Auto merge of #28933 - fhahn:issue-28837-partialeq-note, r=alexcrichton\n\nthis PR adds notes for missing `PartialEq` and `PartialOrd`. I've added a test case but it seems like `NOTE` is ignored by the test runner.\r\n\r\n#28837", "tree": {"sha": "b489d3b69ba19af74ea048edce3840e00c1f44eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b489d3b69ba19af74ea048edce3840e00c1f44eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7a58b534e61f65e9f3724ec921ec7a3396efdcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7a58b534e61f65e9f3724ec921ec7a3396efdcc", "html_url": "https://github.com/rust-lang/rust/commit/c7a58b534e61f65e9f3724ec921ec7a3396efdcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7a58b534e61f65e9f3724ec921ec7a3396efdcc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad5a43a4834990ac2c96781160f7a3186b185350", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad5a43a4834990ac2c96781160f7a3186b185350", "html_url": "https://github.com/rust-lang/rust/commit/ad5a43a4834990ac2c96781160f7a3186b185350"}, {"sha": "b21ae1ab1ad582964c12136f645f80865a4c8d54", "url": "https://api.github.com/repos/rust-lang/rust/commits/b21ae1ab1ad582964c12136f645f80865a4c8d54", "html_url": "https://github.com/rust-lang/rust/commit/b21ae1ab1ad582964c12136f645f80865a4c8d54"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "0c65f68f02e3e8fac792447de3f95495271511d6", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c7a58b534e61f65e9f3724ec921ec7a3396efdcc/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a58b534e61f65e9f3724ec921ec7a3396efdcc/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=c7a58b534e61f65e9f3724ec921ec7a3396efdcc", "patch": "@@ -191,6 +191,27 @@ fn check_overloaded_binop<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                               \"binary operation `{}` cannot be applied to type `{}`\",\n                               hir_util::binop_to_string(op.node),\n                               lhs_ty);\n+                    let missing_trait = match op.node {\n+                        hir::BiAdd    => Some(\"std::ops::Add\"),\n+                        hir::BiSub    => Some(\"std::ops::Sub\"),\n+                        hir::BiMul    => Some(\"std::ops::Mul\"),\n+                        hir::BiDiv    => Some(\"std::ops::Div\"),\n+                        hir::BiRem    => Some(\"std::ops::Rem\"),\n+                        hir::BiBitAnd => Some(\"std::ops::BitAnd\"),\n+                        hir::BiBitOr  => Some(\"std::ops::BitOr\"),\n+                        hir::BiShl    => Some(\"std::ops::Shl\"),\n+                        hir::BiShr    => Some(\"std::ops::Shr\"),\n+                        hir::BiEq | hir::BiNe => Some(\"std::cmp::PartialEq\"),\n+                        hir::BiLt | hir::BiLe | hir::BiGt | hir::BiGe =>\n+                            Some(\"std::cmp::PartialOrd\"),\n+                        _             => None\n+                    };\n+\n+                    if let Some(missing_trait) = missing_trait {\n+                        span_note!(fcx.tcx().sess, lhs_expr.span,\n+                                   \"an implementation of `{}` might be missing for `{}`\",\n+                                    missing_trait, lhs_ty);\n+                    }\n                 }\n             }\n             fcx.tcx().types.err"}, {"sha": "c7cf63bf2c46693c11aca1c6af234757424072a3", "filename": "src/test/compile-fail/issue-28837.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c7a58b534e61f65e9f3724ec921ec7a3396efdcc/src%2Ftest%2Fcompile-fail%2Fissue-28837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a58b534e61f65e9f3724ec921ec7a3396efdcc/src%2Ftest%2Fcompile-fail%2Fissue-28837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28837.rs?ref=c7a58b534e61f65e9f3724ec921ec7a3396efdcc", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct A;\n+\n+fn main() {\n+    let a = A;\n+\n+    a + a; //~ ERROR binary operation `+` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::ops::Add` might be missing for `A`\n+\n+    a - a; //~ ERROR binary operation `-` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::ops::Sub` might be missing for `A`\n+\n+    a * a; //~ ERROR binary operation `*` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::ops::Mul` might be missing for `A`\n+\n+    a / a; //~ ERROR binary operation `/` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::ops::Div` might be missing for `A`\n+\n+    a % a; //~ ERROR binary operation `%` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::ops::Rem` might be missing for `A`\n+\n+    a & a; //~ ERROR binary operation `&` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::ops::BitAnd` might be missing for `A`\n+\n+    a | a; //~ ERROR binary operation `|` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::ops::BitOr` might be missing for `A`\n+\n+    a << a; //~ ERROR binary operation `<<` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::ops::Shl` might be missing for `A`\n+\n+    a >> a; //~ ERROR binary operation `>>` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::ops::Shr` might be missing for `A`\n+\n+    a == a; //~ ERROR binary operation `==` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::cmp::PartialEq` might be missing for `A`\n+\n+    a != a; //~ ERROR binary operation `!=` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::cmp::PartialEq` might be missing for `A`\n+\n+    a < a; //~ ERROR binary operation `<` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::cmp::PartialOrd` might be missing for `A`\n+\n+    a <= a; //~ ERROR binary operation `<=` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::cmp::PartialOrd` might be missing for `A`\n+\n+    a > a; //~ ERROR binary operation `>` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::cmp::PartialOrd` might be missing for `A`\n+\n+    a >= a; //~ ERROR binary operation `>=` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::cmp::PartialOrd` might be missing for `A`\n+}"}]}