{"sha": "65bdfe3b41c862dd9413c49dfba884c6622897ab", "node_id": "C_kwDOAAsO6NoAKDY1YmRmZTNiNDFjODYyZGQ5NDEzYzQ5ZGZiYTg4NGM2NjIyODk3YWI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-30T12:33:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-30T12:33:52Z"}, "message": "Rollup merge of #97531 - compiler-errors:for-loop-pat-mismatch, r=davidtwco\n\nNote pattern mismatch coming from `for` loop desugaring\n\nFixes #97163", "tree": {"sha": "ddc3c7ad0e8d625911aafb0b9b714d403b4b584b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddc3c7ad0e8d625911aafb0b9b714d403b4b584b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65bdfe3b41c862dd9413c49dfba884c6622897ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJilLmwCRBK7hj4Ov3rIwAAfkAIAKJ4TVOfStW9ri1YlFli9Ttp\nRkKyFln3XI58fUoK8SS3wzkEZsDI/KKDMRXVpf82ayeem68DqUdO2jiLCuMdgdRs\naMiGEtuf98cQrHdeZb4f1vZnPwhOpxKiyd0tvU2ELlQj3NsA3IHb6nqT5CumAumg\ndFFrxzjLZwRp8M3zw9rIj62EVBdpx6aeqqV2MJAN1weIFFqSsDhsYoW2kXI7buSp\niASCz3I3M/ybjb62d3EpRNaPXv4G7A6A905n6SKSygEGBZcCaNtM0H/yDQKIoEIR\nkZdBQI9HDwlO8uN8uLqIBtY3b76dIg5V/Eqgbg/bgmyP+d1edmUXFVie2ye74To=\n=hcNt\n-----END PGP SIGNATURE-----\n", "payload": "tree ddc3c7ad0e8d625911aafb0b9b714d403b4b584b\nparent 9bb3832ebd7aa820366598187862fd6370aefd9f\nparent 2e25c2346b9cf58c3c30375bd6e6defef1c11f07\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1653914032 +0200\ncommitter GitHub <noreply@github.com> 1653914032 +0200\n\nRollup merge of #97531 - compiler-errors:for-loop-pat-mismatch, r=davidtwco\n\nNote pattern mismatch coming from `for` loop desugaring\n\nFixes #97163\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65bdfe3b41c862dd9413c49dfba884c6622897ab", "html_url": "https://github.com/rust-lang/rust/commit/65bdfe3b41c862dd9413c49dfba884c6622897ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65bdfe3b41c862dd9413c49dfba884c6622897ab/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bb3832ebd7aa820366598187862fd6370aefd9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb3832ebd7aa820366598187862fd6370aefd9f", "html_url": "https://github.com/rust-lang/rust/commit/9bb3832ebd7aa820366598187862fd6370aefd9f"}, {"sha": "2e25c2346b9cf58c3c30375bd6e6defef1c11f07", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e25c2346b9cf58c3c30375bd6e6defef1c11f07", "html_url": "https://github.com/rust-lang/rust/commit/2e25c2346b9cf58c3c30375bd6e6defef1c11f07"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "e156930cc89fdd8f7d5ce9dfd63c9b714dddcc5c", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65bdfe3b41c862dd9413c49dfba884c6622897ab/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bdfe3b41c862dd9413c49dfba884c6622897ab/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=65bdfe3b41c862dd9413c49dfba884c6622897ab", "patch": "@@ -609,7 +609,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 if !matches!(ty.kind(), ty::Infer(ty::InferTy::TyVar(_) | ty::InferTy::FreshTy(_)))\n                 {\n                     // don't show type `_`\n-                    err.span_label(span, format!(\"this expression has type `{}`\", ty));\n+                    if span.desugaring_kind() == Some(DesugaringKind::ForLoop)\n+                    && let ty::Adt(def, substs) = ty.kind()\n+                    && Some(def.did()) == self.tcx.get_diagnostic_item(sym::Option)\n+                    {\n+                        err.span_label(span, format!(\"this is an iterator with items of type `{}`\", substs.type_at(0)));\n+                    } else {\n+                        err.span_label(span, format!(\"this expression has type `{}`\", ty));\n+                    }\n                 }\n                 if let Some(ty::error::ExpectedFound { found, .. }) = exp_found\n                     && ty.is_box() && ty.boxed_ty() == found"}, {"sha": "9a56a399b9b563e5107f7a580cafd98c40d68848", "filename": "src/test/ui/pattern/for-loop-bad-item.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/65bdfe3b41c862dd9413c49dfba884c6622897ab/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bdfe3b41c862dd9413c49dfba884c6622897ab/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.rs?ref=65bdfe3b41c862dd9413c49dfba884c6622897ab", "patch": "@@ -0,0 +1,20 @@\n+struct Qux(i32);\n+\n+fn bad() {\n+    let mut map = std::collections::HashMap::new();\n+    map.insert(('a', 'b'), ('c', 'd'));\n+\n+    for ((_, _), (&mut c, _)) in &mut map {\n+    //~^ ERROR mismatched types\n+        if c == 'e' {}\n+    }\n+}\n+\n+fn bad2() {\n+    for Some(Qux(_)) | None in [Some(\"\"), None] {\n+    //~^ ERROR mismatched types\n+        todo!();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9410e4da8d2af41594c140ee6404216c1ecbd154", "filename": "src/test/ui/pattern/for-loop-bad-item.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/65bdfe3b41c862dd9413c49dfba884c6622897ab/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65bdfe3b41c862dd9413c49dfba884c6622897ab/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr?ref=65bdfe3b41c862dd9413c49dfba884c6622897ab", "patch": "@@ -0,0 +1,23 @@\n+error[E0308]: mismatched types\n+  --> $DIR/for-loop-bad-item.rs:7:19\n+   |\n+LL |     for ((_, _), (&mut c, _)) in &mut map {\n+   |                   ^^^^^^         -------- this is an iterator with items of type `(&(char, char), &mut (char, char))`\n+   |                   |\n+   |                   expected `char`, found `&mut _`\n+   |                   help: you can probably remove the explicit borrow: `c`\n+   |\n+   = note:           expected type `char`\n+           found mutable reference `&mut _`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/for-loop-bad-item.rs:14:14\n+   |\n+LL |     for Some(Qux(_)) | None in [Some(\"\"), None] {\n+   |              ^^^^^^            ---------------- this is an iterator with items of type `Option<&str>`\n+   |              |\n+   |              expected `str`, found struct `Qux`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}