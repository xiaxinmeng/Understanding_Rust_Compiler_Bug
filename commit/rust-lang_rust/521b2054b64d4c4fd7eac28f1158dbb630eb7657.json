{"sha": "521b2054b64d4c4fd7eac28f1158dbb630eb7657", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMWIyMDU0YjY0ZDRjNGZkN2VhYzI4ZjExNThkYmI2MzBlYjc2NTc=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-08-28T08:23:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-28T08:23:55Z"}, "message": "Rollup merge of #75927 - camelid:intra-doc-links-for-core-macros, r=jyn514\n\nUse intra-doc links in `core::macros`\n\nPart of #75080.\n\nAlso cleaned up some things.\n\n@rustbot modify labels: A-intra-doc-links T-doc T-rustdoc", "tree": {"sha": "5dbe540f91395a32bd43e6e895a6f90f94a516b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dbe540f91395a32bd43e6e895a6f90f94a516b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/521b2054b64d4c4fd7eac28f1158dbb630eb7657", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfSL8bCRBK7hj4Ov3rIwAAdHIIAG6NYlIvbjjyLJzA0ZSVUsoF\np0PahGRwCV3BpZx3l4NRuYzdbGVajNNcMHBzt7Tx8kqiuPi9MjVBOtONtOdgPY7c\nHn8sqswL/2imw9d/FlZVAB28d2AvMOH3pDQONUC5isv/q9F3YBVOyuryqDzmFcaL\n53bzqC3am64Sl4z5qlPunl3WAnX3GSAhlG4UABz5RxEG1XFih0odWLQyfPvC720v\npm7SlqCpELAdMaxVIplUKV06hAMQZCFpxGUIaK3KlmN1ww1glNHlrq4fwgAyhkZj\n+Gm5eVulc/zqVDokuc5oZ8LTPKpO+vCyByLSlpjuTeFk2KLolQKrkzpggKTgZYo=\n=lFsa\n-----END PGP SIGNATURE-----\n", "payload": "tree 5dbe540f91395a32bd43e6e895a6f90f94a516b0\nparent 8730c2beb742e406bcd8a1a846ad520322e1e132\nparent 511ee052a0c2381bb2e6b3cecefb9ee69ebf2467\nauthor Pietro Albini <pietro@pietroalbini.org> 1598603035 +0200\ncommitter GitHub <noreply@github.com> 1598603035 +0200\n\nRollup merge of #75927 - camelid:intra-doc-links-for-core-macros, r=jyn514\n\nUse intra-doc links in `core::macros`\n\nPart of #75080.\n\nAlso cleaned up some things.\n\n@rustbot modify labels: A-intra-doc-links T-doc T-rustdoc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/521b2054b64d4c4fd7eac28f1158dbb630eb7657", "html_url": "https://github.com/rust-lang/rust/commit/521b2054b64d4c4fd7eac28f1158dbb630eb7657", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/521b2054b64d4c4fd7eac28f1158dbb630eb7657/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8730c2beb742e406bcd8a1a846ad520322e1e132", "url": "https://api.github.com/repos/rust-lang/rust/commits/8730c2beb742e406bcd8a1a846ad520322e1e132", "html_url": "https://github.com/rust-lang/rust/commit/8730c2beb742e406bcd8a1a846ad520322e1e132"}, {"sha": "511ee052a0c2381bb2e6b3cecefb9ee69ebf2467", "url": "https://api.github.com/repos/rust-lang/rust/commits/511ee052a0c2381bb2e6b3cecefb9ee69ebf2467", "html_url": "https://github.com/rust-lang/rust/commit/511ee052a0c2381bb2e6b3cecefb9ee69ebf2467"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "4e0da1fc4a6a38c77ba4cfccef3589478ec5a9a8", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/521b2054b64d4c4fd7eac28f1158dbb630eb7657/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521b2054b64d4c4fd7eac28f1158dbb630eb7657/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=521b2054b64d4c4fd7eac28f1158dbb630eb7657", "patch": "@@ -333,16 +333,16 @@ macro_rules! r#try {\n /// This macro accepts a format string, a list of arguments, and a 'writer'. Arguments will be\n /// formatted according to the specified format string and the result will be passed to the writer.\n /// The writer may be any value with a `write_fmt` method; generally this comes from an\n-/// implementation of either the [`std::fmt::Write`] or the [`std::io::Write`] trait. The macro\n-/// returns whatever the `write_fmt` method returns; commonly a [`std::fmt::Result`], or an\n+/// implementation of either the [`fmt::Write`] or the [`io::Write`] trait. The macro\n+/// returns whatever the `write_fmt` method returns; commonly a [`fmt::Result`], or an\n /// [`io::Result`].\n ///\n /// See [`std::fmt`] for more information on the format string syntax.\n ///\n /// [`std::fmt`]: crate::fmt\n-/// [`std::fmt::Write`]: crate::fmt::Write\n-/// [`std::io::Write`]: ../std/io/trait.Write.html\n-/// [`std::fmt::Result`]: crate::fmt::Result\n+/// [`fmt::Write`]: crate::fmt::Write\n+/// [`io::Write`]: ../std/io/trait.Write.html\n+/// [`fmt::Result`]: crate::fmt::Result\n /// [`io::Result`]: ../std/io/type.Result.html\n ///\n /// # Examples"}, {"sha": "a02e74d5e5a4d3980c1c08b4facf83dd9908a8c1", "filename": "library/core/src/macros/panic.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/521b2054b64d4c4fd7eac28f1158dbb630eb7657/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "raw_url": "https://github.com/rust-lang/rust/raw/521b2054b64d4c4fd7eac28f1158dbb630eb7657/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md?ref=521b2054b64d4c4fd7eac28f1158dbb630eb7657", "patch": "@@ -5,12 +5,12 @@ to the caller of the program. `panic!` should be used when a program reaches\n an unrecoverable state.\n \n This macro is the perfect way to assert conditions in example code and in\n-tests. `panic!` is closely tied with the `unwrap` method of both [`Option`]\n-and [`Result`][runwrap] enums. Both implementations call `panic!` when they are set\n-to None or Err variants.\n+tests. `panic!` is closely tied with the `unwrap` method of both\n+[`Option`][ounwrap] and [`Result`][runwrap] enums. Both implementations call\n+`panic!` when they are set to [`None`] or [`Err`] variants.\n \n This macro is used to inject panic into a Rust thread, causing the thread to\n-panic entirely. Each thread's panic can be reaped as the `Box<Any>` type,\n+panic entirely. Each thread's panic can be reaped as the [`Box`]`<`[`Any`]`>` type,\n and the single-argument form of the `panic!` macro will be the value which\n is transmitted.\n \n@@ -24,11 +24,11 @@ The multi-argument form of this macro panics with a string and has the\n \n See also the macro [`compile_error!`], for raising errors during compilation.\n \n-[runwrap]: ../std/result/enum.Result.html#method.unwrap\n-[`Option`]: ../std/option/enum.Option.html#method.unwrap\n-[`Result`]: ../std/result/enum.Result.html\n+[ounwrap]: Option::unwrap\n+[runwrap]: Result::unwrap\n+[`Box`]: ../std/boxed/struct.Box.html\n+[`Any`]: crate::any::Any\n [`format!`]: ../std/macro.format.html\n-[`compile_error!`]: ../std/macro.compile_error.html\n [book]: ../book/ch09-00-error-handling.html\n \n # Current implementation"}]}