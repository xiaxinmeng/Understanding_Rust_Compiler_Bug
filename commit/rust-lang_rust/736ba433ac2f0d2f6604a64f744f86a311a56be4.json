{"sha": "736ba433ac2f0d2f6604a64f744f86a311a56be4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNmJhNDMzYWMyZjBkMmY2NjA0YTY0Zjc0NGY4NmEzMTFhNTZiZTQ=", "commit": {"author": {"name": "Yukio Siraichi", "email": "yukio.siraichi@gmail.com", "date": "2018-03-18T23:58:56Z"}, "committer": {"name": "Yukio Siraichi", "email": "yukio.siraichi@gmail.com", "date": "2018-03-18T23:58:56Z"}, "message": "Cleaned comments and extras s.", "tree": {"sha": "673ca8c12217bf775416d26369fc076523db791a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/673ca8c12217bf775416d26369fc076523db791a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/736ba433ac2f0d2f6604a64f744f86a311a56be4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/736ba433ac2f0d2f6604a64f744f86a311a56be4", "html_url": "https://github.com/rust-lang/rust/commit/736ba433ac2f0d2f6604a64f744f86a311a56be4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/736ba433ac2f0d2f6604a64f744f86a311a56be4/comments", "author": {"login": "ysiraichi", "id": 3337141, "node_id": "MDQ6VXNlcjMzMzcxNDE=", "avatar_url": "https://avatars.githubusercontent.com/u/3337141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysiraichi", "html_url": "https://github.com/ysiraichi", "followers_url": "https://api.github.com/users/ysiraichi/followers", "following_url": "https://api.github.com/users/ysiraichi/following{/other_user}", "gists_url": "https://api.github.com/users/ysiraichi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysiraichi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysiraichi/subscriptions", "organizations_url": "https://api.github.com/users/ysiraichi/orgs", "repos_url": "https://api.github.com/users/ysiraichi/repos", "events_url": "https://api.github.com/users/ysiraichi/events{/privacy}", "received_events_url": "https://api.github.com/users/ysiraichi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ysiraichi", "id": 3337141, "node_id": "MDQ6VXNlcjMzMzcxNDE=", "avatar_url": "https://avatars.githubusercontent.com/u/3337141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysiraichi", "html_url": "https://github.com/ysiraichi", "followers_url": "https://api.github.com/users/ysiraichi/followers", "following_url": "https://api.github.com/users/ysiraichi/following{/other_user}", "gists_url": "https://api.github.com/users/ysiraichi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysiraichi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysiraichi/subscriptions", "organizations_url": "https://api.github.com/users/ysiraichi/orgs", "repos_url": "https://api.github.com/users/ysiraichi/repos", "events_url": "https://api.github.com/users/ysiraichi/events{/privacy}", "received_events_url": "https://api.github.com/users/ysiraichi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b36b20651704cf7051f468aeb3b84babf940e63", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b36b20651704cf7051f468aeb3b84babf940e63", "html_url": "https://github.com/rust-lang/rust/commit/0b36b20651704cf7051f468aeb3b84babf940e63"}], "stats": {"total": 42, "additions": 2, "deletions": 40}, "files": [{"sha": "ab3c619dcdcd0a42e209d72d6a8603855c1cc2d7", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/736ba433ac2f0d2f6604a64f744f86a311a56be4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/736ba433ac2f0d2f6604a64f744f86a311a56be4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=736ba433ac2f0d2f6604a64f744f86a311a56be4", "patch": "@@ -575,44 +575,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             = self.on_unimplemented_note(trait_ref, obligation);\n                         let have_alt_message = message.is_some() || label.is_some();\n \n-                        // {\n-                        //     let ty::Binder(trait_ref) = trait_ref;\n-                        //     println!(\"TraitRef: {:?}\", trait_ref);\n-                        //     println!(\"TraitRef: id:{:?}; subst:{:?}\", trait_ref.def_id, trait_ref.substs);\n-\n-                        //     if let ty::Predicate::Trait(trait_predicate_binder) =\n-                        //         trait_ref.to_predicate() {\n-                        //             let trait_predicate = trait_predicate_binder.skip_binder();\n-                        //             println!(\"TraitPredicateBinder: {:?}\", trait_predicate_binder);\n-                        //             println!(\"TraitPredicate: {:?}\", trait_predicate);\n-\n-                        //             let trait_ty = trait_ref.self_ty();\n-                        //             println!(\"TraitPredicateTy: {:?}\", trait_ty);\n-                        //             println!(\"TraitPredicateTy: sty:{:?}; flags{:?}\", trait_ty.sty, trait_ty.flags);\n-                        //         }\n-\n-                        //     for in_ty in trait_ref.input_types() {\n-                        //         println!(\"\\t- {:?}\", in_ty);\n-                        //         println!(\"\\t\\t- sty:{:?}; flags:{:?}\", in_ty.sty, in_ty.flags);\n-                        //     }\n-\n-                        //     println!(\"Message: {:?}\", message);\n-                        //     println!(\"Label: {:?}\", label);\n-                        //     println!(\"Obligation: {:?}\", obligation);\n-                        //     println!(\"Span: {:?}\", self.tcx.sess.codemap().span_to_string(span));\n-\n-                        //     let body_id = obligation.cause.body_id;\n-                        //     println!(\"BodyId: {:?}\", body_id);\n-                        //     println!(\"BodyIdSpan: {:?}\", self.tcx.hir.span(body_id));\n-\n-                        //     match self.tcx.hir.find(body_id) {\n-                        //         Some(node) => println!(\"Node: {:?}\", node),\n-                        //         None => println!(\"Node not found.\"),\n-                        //     }\n-\n-                        //     println!(\"=------------------------------=\");\n-                        // }\n-\n                         let mut err = struct_span_err!(\n                             self.tcx.sess,\n                             span,"}, {"sha": "55785d9586cc37cebbd46479b1fcecf9293ec0ba", "filename": "src/librustc_traits/normalize_projection_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/736ba433ac2f0d2f6604a64f744f86a311a56be4/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/736ba433ac2f0d2f6604a64f744f86a311a56be4/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs?ref=736ba433ac2f0d2f6604a64f744f86a311a56be4", "patch": "@@ -36,7 +36,7 @@ crate fn normalize_projection_ty<'tcx>(\n         ) = infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &goal);\n         let fulfill_cx = &mut FulfillmentContext::new();\n         let selcx = &mut SelectionContext::new(infcx);\n-        let cause = ObligationCause::misc(DUMMY_SP, DUMMY_NODE_ID, DUMMY_NODE_ID);\n+        let cause = ObligationCause::misc(DUMMY_SP, DUMMY_NODE_ID);\n         let Normalized {\n             value: answer,\n             obligations,"}, {"sha": "596381d7ea676612081e8310a67b2f083367201f", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/736ba433ac2f0d2f6604a64f744f86a311a56be4/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/736ba433ac2f0d2f6604a64f744f86a311a56be4/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=736ba433ac2f0d2f6604a64f744f86a311a56be4", "patch": "@@ -298,7 +298,7 @@ pub fn check_safety_of_destructor_if_necessary<'a, 'gcx, 'tcx>(\n     };\n     let parent_scope = rcx.tcx.mk_region(ty::ReScope(parent_scope));\n     let origin = || infer::SubregionOrigin::SafeDestructor(span);\n-    let cause = &ObligationCause::misc(span, body_id, body_id);\n+    let cause = &ObligationCause::misc(span, body_id);\n     let infer_ok = rcx.infcx.at(cause, rcx.fcx.param_env).dropck_outlives(ty);\n     debug!(\"dropck_outlives = {:#?}\", infer_ok);\n     let kinds = rcx.fcx.register_infer_ok_obligations(infer_ok);"}]}