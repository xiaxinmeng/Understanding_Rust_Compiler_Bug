{"sha": "94e6a6642c0c4aacc3cc30163c0a7d3d27386ae8", "node_id": "C_kwDOAAsO6NoAKDk0ZTZhNjY0MmMwYzRhYWNjM2NjMzAxNjNjMGE3ZDNkMjczODZhZTg", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2023-04-04T06:50:20Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2023-04-04T06:50:20Z"}, "message": "assist: autoderef in generate delegate methods", "tree": {"sha": "1577535fe17d4caa5d779ac48cc4dc7b8b25a040", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1577535fe17d4caa5d779ac48cc4dc7b8b25a040"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94e6a6642c0c4aacc3cc30163c0a7d3d27386ae8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94e6a6642c0c4aacc3cc30163c0a7d3d27386ae8", "html_url": "https://github.com/rust-lang/rust/commit/94e6a6642c0c4aacc3cc30163c0a7d3d27386ae8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94e6a6642c0c4aacc3cc30163c0a7d3d27386ae8/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f070093462bee3d0560b9c532870e51352ce0ceb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f070093462bee3d0560b9c532870e51352ce0ceb", "html_url": "https://github.com/rust-lang/rust/commit/f070093462bee3d0560b9c532870e51352ce0ceb"}], "stats": {"total": 55, "additions": 48, "deletions": 7}, "files": [{"sha": "483ed165a5585e4238401ffc00d588d232e84f60", "filename": "crates/ide-assists/src/handlers/generate_delegate_methods.rs", "status": "modified", "additions": 48, "deletions": 7, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/94e6a6642c0c4aacc3cc30163c0a7d3d27386ae8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e6a6642c0c4aacc3cc30163c0a7d3d27386ae8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs?ref=94e6a6642c0c4aacc3cc30163c0a7d3d27386ae8", "patch": "@@ -65,14 +65,17 @@ pub(crate) fn generate_delegate_methods(acc: &mut Assists, ctx: &AssistContext<'\n     let sema_field_ty = ctx.sema.resolve_type(&field_ty)?;\n     let krate = sema_field_ty.krate(ctx.db());\n     let mut methods = vec![];\n-    sema_field_ty.iterate_assoc_items(ctx.db(), krate, |item| {\n-        if let hir::AssocItem::Function(f) = item {\n-            if f.self_param(ctx.db()).is_some() && f.is_visible_from(ctx.db(), current_module) {\n-                methods.push(f)\n+\n+    for ty in sema_field_ty.autoderef(ctx.db()) {\n+        ty.iterate_assoc_items(ctx.db(), krate, |item| {\n+            if let hir::AssocItem::Function(f) = item {\n+                if f.self_param(ctx.db()).is_some() && f.is_visible_from(ctx.db(), current_module) {\n+                    methods.push(f)\n+                }\n             }\n-        }\n-        Option::<()>::None\n-    });\n+            Option::<()>::None\n+        });\n+    }\n \n     for method in methods {\n         let adt = ast::Adt::Struct(strukt.clone());\n@@ -314,6 +317,44 @@ impl<T> Person<T> {\n         );\n     }\n \n+    #[test]\n+    fn test_generates_delegate_autoderef() {\n+        check_assist(\n+            generate_delegate_methods,\n+            r#\"\n+//- minicore: deref\n+struct Age(u8);\n+impl Age {\n+    fn age(&self) -> u8 {\n+        self.0\n+    }\n+}\n+struct AgeDeref(Age);\n+impl core::ops::Deref for AgeDeref { type Target = Age; }\n+struct Person {\n+    ag$0e: AgeDeref,\n+}\n+impl Person {}\"#,\n+            r#\"\n+struct Age(u8);\n+impl Age {\n+    fn age(&self) -> u8 {\n+        self.0\n+    }\n+}\n+struct AgeDeref(Age);\n+impl core::ops::Deref for AgeDeref { type Target = Age; }\n+struct Person {\n+    age: AgeDeref,\n+}\n+impl Person {\n+    $0fn age(&self) -> u8 {\n+        self.age.age()\n+    }\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_generate_delegate_visibility() {\n         check_assist_not_applicable("}]}