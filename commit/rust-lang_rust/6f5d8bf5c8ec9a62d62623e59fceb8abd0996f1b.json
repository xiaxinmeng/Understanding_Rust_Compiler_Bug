{"sha": "6f5d8bf5c8ec9a62d62623e59fceb8abd0996f1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNWQ4YmY1YzhlYzlhNjJkNjI2MjNlNTlmY2ViOGFiZDA5OTZmMWI=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-09T20:26:49Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-16T09:13:05Z"}, "message": "don't supply generics to AnonConsts in param lists", "tree": {"sha": "c5c47e31f3e136ec44f5c95e0a21a558da010dae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5c47e31f3e136ec44f5c95e0a21a558da010dae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f5d8bf5c8ec9a62d62623e59fceb8abd0996f1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5d8bf5c8ec9a62d62623e59fceb8abd0996f1b", "html_url": "https://github.com/rust-lang/rust/commit/6f5d8bf5c8ec9a62d62623e59fceb8abd0996f1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f5d8bf5c8ec9a62d62623e59fceb8abd0996f1b/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f558402431f4ce033fb472bdd9cc10bd92fa73a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f558402431f4ce033fb472bdd9cc10bd92fa73a", "html_url": "https://github.com/rust-lang/rust/commit/3f558402431f4ce033fb472bdd9cc10bd92fa73a"}], "stats": {"total": 105, "additions": 68, "deletions": 37}, "files": [{"sha": "17212187e6a01816ea08b0d00002d24cc2dc47b5", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 56, "deletions": 5, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6f5d8bf5c8ec9a62d62623e59fceb8abd0996f1b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5d8bf5c8ec9a62d62623e59fceb8abd0996f1b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=6f5d8bf5c8ec9a62d62623e59fceb8abd0996f1b", "patch": "@@ -29,7 +29,7 @@ use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::weak_lang_items;\n-use rustc_hir::{GenericParamKind, Node};\n+use rustc_hir::{GenericParamKind, HirId, Node};\n use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n@@ -1155,6 +1155,35 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     }\n }\n \n+struct AnonConstInParamListDetector {\n+    in_param_list: bool,\n+    found_anon_const_in_list: bool,\n+    ct: HirId,\n+}\n+\n+impl<'v> Visitor<'v> for AnonConstInParamListDetector {\n+    type Map = intravisit::ErasedMap<'v>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_generic_param(&mut self, p: &'v hir::GenericParam<'v>) {\n+        let prev = self.in_param_list;\n+        self.in_param_list = true;\n+        intravisit::walk_generic_param(self, p);\n+        self.in_param_list = prev;\n+    }\n+\n+    fn visit_anon_const(&mut self, c: &'v hir::AnonConst) {\n+        if self.in_param_list && self.ct == c.hir_id {\n+            self.found_anon_const_in_list = true;\n+        } else {\n+            intravisit::walk_anon_const(self, c)\n+        }\n+    }\n+}\n+\n fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n     use rustc_hir::*;\n \n@@ -1176,10 +1205,32 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             let parent_id = tcx.hir().get_parent_item(hir_id);\n             let parent_def_id = tcx.hir().local_def_id(parent_id);\n \n-            // HACK(eddyb) this provides the correct generics when\n-            // `feature(const_generics)` is enabled, so that const expressions\n-            // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n-            if tcx.lazy_normalization() {\n+            let mut in_param_list = false;\n+            for (_parent, node) in tcx.hir().parent_iter(hir_id) {\n+                if let Some(generics) = node.generics() {\n+                    let mut visitor = AnonConstInParamListDetector {\n+                        in_param_list: false,\n+                        found_anon_const_in_list: false,\n+                        ct: hir_id,\n+                    };\n+\n+                    visitor.visit_generics(generics);\n+                    in_param_list = visitor.found_anon_const_in_list;\n+                    break;\n+                }\n+            }\n+\n+            if in_param_list {\n+                // We do not allow generic parameters in anon consts if we are inside\n+                // of a param list.\n+                //\n+                // This affects both default type bindings, e.g. `struct<T, U = [u8; std::mem::size_of::<T>()]>(T, U)`,\n+                // and the types of const parameters, e.g. `struct V<const N: usize, const M: [u8; N]>();`.\n+                None\n+            } else if tcx.lazy_normalization() {\n+                // HACK(eddyb) this provides the correct generics when\n+                // `feature(const_generics)` is enabled, so that const expressions\n+                // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n                 Some(parent_def_id.to_def_id())\n             } else {\n                 let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));"}, {"sha": "5aa3617d1d7e03cfad9bca418e47bda023a0edb4", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f5d8bf5c8ec9a62d62623e59fceb8abd0996f1b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5d8bf5c8ec9a62d62623e59fceb8abd0996f1b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs?ref=6f5d8bf5c8ec9a62d62623e59fceb8abd0996f1b", "patch": "@@ -8,10 +8,8 @@\n \n pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n //~^ ERROR: the type of const parameters must not depend on other generic parameters\n-//~| ERROR: cycle detected when computing type of `Dependent::X`\n \n pub struct SelfDependent<const N: [u8; N]>;\n //~^ ERROR: the type of const parameters must not depend on other generic parameters\n-//~| ERROR: cycle detected when computing type of `SelfDependent::N`\n \n fn main() {}"}, {"sha": "a06bdea1b3ca043123c479d0a71333f9b8862c2b", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.stderr", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6f5d8bf5c8ec9a62d62623e59fceb8abd0996f1b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f5d8bf5c8ec9a62d62623e59fceb8abd0996f1b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.stderr?ref=6f5d8bf5c8ec9a62d62623e59fceb8abd0996f1b", "patch": "@@ -4,8 +4,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n    |                                                    ^ const parameters must have a concrete type\n \n-error[E0769]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/const-param-type-depends-on-const-param.rs:13:40\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/const-param-type-depends-on-const-param.rs:12:40\n    |\n LL | pub struct SelfDependent<const N: [u8; N]>;\n    |                                        ^ const parameters must have a concrete type\n@@ -19,32 +19,5 @@ LL | #![feature(const_generics)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-error[E0391]: cycle detected when computing type of `Dependent::X`\n-  --> $DIR/const-param-type-depends-on-const-param.rs:9:44\n-   |\n-LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n-   |                                            ^\n-   |\n-   = note: ...which again requires computing type of `Dependent::X`, completing the cycle\n-note: cycle used when computing type of `Dependent`\n-  --> $DIR/const-param-type-depends-on-const-param.rs:9:1\n-   |\n-LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0391]: cycle detected when computing type of `SelfDependent::N`\n-  --> $DIR/const-param-type-depends-on-const-param.rs:13:32\n-   |\n-LL | pub struct SelfDependent<const N: [u8; N]>;\n-   |                                ^\n-   |\n-   = note: ...which again requires computing type of `SelfDependent::N`, completing the cycle\n-note: cycle used when computing type of `SelfDependent`\n-  --> $DIR/const-param-type-depends-on-const-param.rs:13:1\n-   |\n-LL | pub struct SelfDependent<const N: [u8; N]>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0391`."}, {"sha": "2f427ef3a27dcc76f3ea56952eb86ed496c41a87", "filename": "src/test/ui/const-generics/issues/issue-74101.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f5d8bf5c8ec9a62d62623e59fceb8abd0996f1b/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5d8bf5c8ec9a62d62623e59fceb8abd0996f1b/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs?ref=6f5d8bf5c8ec9a62d62623e59fceb8abd0996f1b", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+fn test<const N: [u8; 1 + 2]>() {}\n+\n+struct Foo<const N: [u8; 1 + 2]>;\n+\n+fn main() {}"}]}