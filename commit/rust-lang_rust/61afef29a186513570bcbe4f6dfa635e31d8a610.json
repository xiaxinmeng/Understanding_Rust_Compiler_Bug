{"sha": "61afef29a186513570bcbe4f6dfa635e31d8a610", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYWZlZjI5YTE4NjUxMzU3MGJjYmU0ZjZkZmE2MzVlMzFkOGE2MTA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-23T18:42:20Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-23T18:42:20Z"}, "message": "rt: Add a RUST_TRACK_ORIGINS debug flag to help track down memory corruption", "tree": {"sha": "7fc02dfa6a72410392a04717098186455c72eb9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fc02dfa6a72410392a04717098186455c72eb9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61afef29a186513570bcbe4f6dfa635e31d8a610", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61afef29a186513570bcbe4f6dfa635e31d8a610", "html_url": "https://github.com/rust-lang/rust/commit/61afef29a186513570bcbe4f6dfa635e31d8a610", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61afef29a186513570bcbe4f6dfa635e31d8a610/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbdeff659fb30fd845490cf215b5733e1e064d46", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbdeff659fb30fd845490cf215b5733e1e064d46", "html_url": "https://github.com/rust-lang/rust/commit/dbdeff659fb30fd845490cf215b5733e1e064d46"}], "stats": {"total": 130, "additions": 120, "deletions": 10}, "files": [{"sha": "f2ed226b266b93bf7995f5b92dae640a390fb714", "filename": "mk/rt.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61afef29a186513570bcbe4f6dfa635e31d8a610/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/61afef29a186513570bcbe4f6dfa635e31d8a610/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=61afef29a186513570bcbe4f6dfa635e31d8a610", "patch": "@@ -28,6 +28,7 @@ RUNTIME_CS := rt/sync/timer.cpp \\\n               rt/rust_gc.cpp \\\n               rt/rust_abi.cpp \\\n               rt/rust_cc.cpp \\\n+              rt/rust_debug.cpp \\\n               rt/memory_region.cpp \\\n               rt/test/rust_test_harness.cpp \\\n               rt/test/rust_test_runtime.cpp \\"}, {"sha": "697f9f13bbc9af8fdd6680d25c13ddeae5500e23", "filename": "src/rt/rust_debug.cpp", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/61afef29a186513570bcbe4f6dfa635e31d8a610/src%2Frt%2Frust_debug.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/61afef29a186513570bcbe4f6dfa635e31d8a610/src%2Frt%2Frust_debug.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_debug.cpp?ref=61afef29a186513570bcbe4f6dfa635e31d8a610", "patch": "@@ -0,0 +1,70 @@\n+// Routines useful when debugging the Rust runtime.\n+\n+#include \"rust_debug.h\"\n+#include \"rust_internal.h\"\n+\n+#include <iostream>\n+#include <string>\n+#include <sstream>\n+#include <stdint.h>\n+\n+#if defined(__APPLE__) || defined(__linux__)\n+#define HAVE_BACKTRACE\n+#include <execinfo.h>\n+#elif defined(_WIN32)\n+#include <windows.h>\n+#endif\n+\n+namespace {\n+\n+debug::flag track_origins(\"RUST_TRACK_ORIGINS\");\n+\n+}   // end anonymous namespace\n+\n+namespace debug {\n+\n+std::string\n+backtrace() {\n+    void *call_stack[256];\n+    int n_frames = ::backtrace(call_stack, 256);\n+    char **syms = backtrace_symbols(call_stack, n_frames);\n+\n+    std::stringstream ss;\n+    for (int i = 0; i < n_frames; i++)\n+        ss << syms[i] << std::endl;\n+\n+    free(syms);\n+\n+    return ss.str();\n+}\n+\n+void\n+maybe_track_origin(rust_task *task, void *ptr) {\n+    if (!*track_origins)\n+        return;\n+    task->debug.origins[ptr] = backtrace();\n+}\n+\n+void\n+maybe_untrack_origin(rust_task *task, void *ptr) {\n+    if (!*track_origins)\n+        return;\n+    task->debug.origins.erase(ptr);\n+}\n+\n+// This function is intended to be called by the debugger.\n+void\n+dump_origin(rust_task *task, void *ptr) {\n+    if (!*track_origins) {\n+        std::cerr << \"Try again with RUST_TRACK_ORIGINS=1.\" << std::endl;\n+    } else if (task->debug.origins.find(ptr) == task->debug.origins.end()) {\n+        std::cerr << \"Pointer \" << std::hex << (uintptr_t)ptr <<\n+                     \" does not have a tracked origin.\";\n+    } else {\n+        std::cerr << \"Origin of pointer \" << std::hex << \":\" << std::endl <<\n+                     task->debug.origins[ptr];\n+    }\n+}\n+\n+}   // end namespace debug\n+"}, {"sha": "da9838ba34169c83d6e270200e1007f04d65e813", "filename": "src/rt/rust_debug.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/61afef29a186513570bcbe4f6dfa635e31d8a610/src%2Frt%2Frust_debug.h", "raw_url": "https://github.com/rust-lang/rust/raw/61afef29a186513570bcbe4f6dfa635e31d8a610/src%2Frt%2Frust_debug.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_debug.h?ref=61afef29a186513570bcbe4f6dfa635e31d8a610", "patch": "@@ -3,8 +3,12 @@\n #ifndef RUST_DEBUG_H\n #define RUST_DEBUG_H\n \n+#include <map>\n+#include <string>\n #include <cstdlib>\n \n+struct rust_task;\n+\n namespace debug {\n \n class flag {\n@@ -27,6 +31,19 @@ class flag {\n     }\n };\n \n+class task_debug_info {\n+public:\n+    std::map<void *,std::string> origins;\n+};\n+\n+std::string backtrace();\n+\n+void maybe_track_origin(rust_task *task, void *ptr);\n+void maybe_untrack_origin(rust_task *task, void *ptr);\n+\n+// This function is intended to be called by the debugger.\n+void dump_origin(rust_task *task, void *ptr);\n+\n }   // end namespace debug\n \n #endif"}, {"sha": "8688cedc857eac64cb373d62e7b7e95d2c19c278", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61afef29a186513570bcbe4f6dfa635e31d8a610/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/61afef29a186513570bcbe4f6dfa635e31d8a610/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=61afef29a186513570bcbe4f6dfa635e31d8a610", "patch": "@@ -67,12 +67,6 @@ struct frame_glue_fns;\n typedef intptr_t rust_task_id;\n typedef intptr_t rust_port_id;\n \n-// Corresponds to the rust chan (currently _chan) type.\n-struct chan_handle {\n-    rust_task_id task;\n-    rust_port_id port;\n-};\n-\n #ifndef __i386__\n #error \"Target CPU not supported.\"\n #endif"}, {"sha": "8d59dabdcb98377146d256aac385458c3cb7180d", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61afef29a186513570bcbe4f6dfa635e31d8a610/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/61afef29a186513570bcbe4f6dfa635e31d8a610/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=61afef29a186513570bcbe4f6dfa635e31d8a610", "patch": "@@ -2,6 +2,11 @@\n #ifndef RUST_KERNEL_H\n #define RUST_KERNEL_H\n \n+#include \"memory_region.h\"\n+#include \"rust_log.h\"\n+\n+struct rust_scheduler;\n+\n /**\n  * A global object shared by all thread domains. Most of the data structures\n  * in this class are synchronized since they are accessed from multiple"}, {"sha": "06e8571f5898c192b44c4bb75dfd8f01a3e87138", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/61afef29a186513570bcbe4f6dfa635e31d8a610/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/61afef29a186513570bcbe4f6dfa635e31d8a610/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=61afef29a186513570bcbe4f6dfa635e31d8a610", "patch": "@@ -16,11 +16,11 @@\n \n #define ARENA_SIZE          256\n \n-//#define DPRINT(fmt,...)     fprintf(stderr, fmt, ##__VA_ARGS__)\n-//#define DPRINTCX(cx)        shape::print::print_cx(cx)\n+#define DPRINT(fmt,...)     fprintf(stderr, fmt, ##__VA_ARGS__)\n+#define DPRINTCX(cx)        shape::print::print_cx(cx)\n \n-#define DPRINT(fmt,...)\n-#define DPRINTCX(cx)\n+//#define DPRINT(fmt,...)\n+//#define DPRINTCX(cx)\n \n \n namespace shape {\n@@ -526,6 +526,13 @@ class print : public ctxt<print> {\n           const rust_shape_tables *in_tables = NULL)\n     : ctxt<print>(other, in_sp, in_params, in_tables) {}\n \n+    print(rust_task *in_task,\n+          bool in_align,\n+          const uint8_t *in_sp,\n+          const type_param *in_params,\n+          const rust_shape_tables *in_tables)\n+    : ctxt<print>(in_task, in_align, in_sp, in_params, in_tables) {}\n+\n     void walk_tag(tag_info &tinfo);\n     void walk_struct(const uint8_t *end_sp);\n     void walk_res(const rust_fn *dtor, unsigned n_params,"}, {"sha": "76b828af58f4dd3883ea378d19f300061177fa9a", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/61afef29a186513570bcbe4f6dfa635e31d8a610/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/61afef29a186513570bcbe4f6dfa635e31d8a610/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=61afef29a186513570bcbe4f6dfa635e31d8a610", "patch": "@@ -10,8 +10,17 @@\n #include \"util/array_list.h\"\n \n #include \"context.h\"\n+#include \"rust_debug.h\"\n+#include \"rust_internal.h\"\n+#include \"rust_kernel.h\"\n #include \"rust_obstack.h\"\n \n+// Corresponds to the rust chan (currently _chan) type.\n+struct chan_handle {\n+    rust_task_id task;\n+    rust_port_id port;\n+};\n+\n struct rust_box;\n \n struct stk_seg {\n@@ -117,6 +126,8 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n \n     std::map<void *,const type_desc *> local_allocs;\n \n+    debug::task_debug_info debug;\n+\n     // Only a pointer to 'name' is kept, so it must live as long as this task.\n     rust_task(rust_scheduler *sched,\n               rust_task_list *state,"}, {"sha": "7a96a5ef7cb40928d6f48ec09d385303b6563bce", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61afef29a186513570bcbe4f6dfa635e31d8a610/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/61afef29a186513570bcbe4f6dfa635e31d8a610/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=61afef29a186513570bcbe4f6dfa635e31d8a610", "patch": "@@ -67,10 +67,13 @@ upcall_malloc(rust_task *task, size_t nbytes, type_desc *td) {\n     // TODO: Maybe use dladdr here to find a more useful name for the\n     // type_desc.\n \n+    // TODO: Implement RUST_TRACK_ORIGINS\n+\n     void *p = task->malloc(nbytes, \"tdesc\", td);\n     memset(p, '\\0', nbytes);\n \n     task->local_allocs[p] = td;\n+    debug::maybe_track_origin(task, p);\n \n     LOG(task, mem,\n         \"upcall malloc(%\" PRIdPTR \", 0x%\" PRIxPTR \") = 0x%\" PRIxPTR,\n@@ -91,6 +94,8 @@ upcall_free(rust_task *task, void* ptr, uintptr_t is_gc) {\n              (uintptr_t)ptr, is_gc);\n \n     task->local_allocs.erase(ptr);\n+    debug::maybe_untrack_origin(task, ptr);\n+\n     task->free(ptr, (bool) is_gc);\n }\n "}]}