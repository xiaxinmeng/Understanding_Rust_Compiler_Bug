{"sha": "62651df2b482af4dc98b0aec6c5f1ad112fab8ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNjUxZGYyYjQ4MmFmNGRjOThiMGFlYzZjNWYxYWQxMTJmYWI4ZWM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-03-08T04:44:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-03-08T14:56:52Z"}, "message": "Fix dvec-related fallout in tests", "tree": {"sha": "70dd00fbb69807cc2dcab84b9ad5803fe06e57bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70dd00fbb69807cc2dcab84b9ad5803fe06e57bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62651df2b482af4dc98b0aec6c5f1ad112fab8ec", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62651df2b482af4dc98b0aec6c5f1ad112fab8ec", "html_url": "https://github.com/rust-lang/rust/commit/62651df2b482af4dc98b0aec6c5f1ad112fab8ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62651df2b482af4dc98b0aec6c5f1ad112fab8ec/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59de3853be3b7d9e5306522bdfdb76be69555703", "url": "https://api.github.com/repos/rust-lang/rust/commits/59de3853be3b7d9e5306522bdfdb76be69555703", "html_url": "https://github.com/rust-lang/rust/commit/59de3853be3b7d9e5306522bdfdb76be69555703"}], "stats": {"total": 70, "additions": 17, "deletions": 53}, "files": [{"sha": "4634eb8793d952ccf4daff6a54f3aa2cbf4c4ba5", "filename": "src/libcore/io.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62651df2b482af4dc98b0aec6c5f1ad112fab8ec/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62651df2b482af4dc98b0aec6c5f1ad112fab8ec/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=62651df2b482af4dc98b0aec6c5f1ad112fab8ec", "patch": "@@ -1442,17 +1442,15 @@ mod tests {\n     fn bytes_buffer_overwrite() {\n         let wr = BytesWriter();\n         wr.write(~[0u8, 1u8, 2u8, 3u8]);\n-        fail_unless!(wr.bytes.borrow(|bytes| bytes == ~[0u8, 1u8, 2u8, 3u8]));\n+        fail_unless!(wr.bytes == ~[0u8, 1u8, 2u8, 3u8]);\n         wr.seek(-2, SeekCur);\n         wr.write(~[4u8, 5u8, 6u8, 7u8]);\n-        fail_unless!(wr.bytes.borrow(|bytes| bytes ==\n-            ~[0u8, 1u8, 4u8, 5u8, 6u8, 7u8]));\n+        fail_unless!(wr.bytes == ~[0u8, 1u8, 4u8, 5u8, 6u8, 7u8]);\n         wr.seek(-2, SeekEnd);\n         wr.write(~[8u8]);\n         wr.seek(1, SeekSet);\n         wr.write(~[9u8]);\n-        fail_unless!(wr.bytes.borrow(|bytes| bytes ==\n-            ~[0u8, 9u8, 4u8, 5u8, 8u8, 7u8]));\n+        fail_unless!(wr.bytes == ~[0u8, 9u8, 4u8, 5u8, 8u8, 7u8]);\n     }\n \n     #[test]"}, {"sha": "897cb4c2034034af04b277db61e96de0379c3bae", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/62651df2b482af4dc98b0aec6c5f1ad112fab8ec/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62651df2b482af4dc98b0aec6c5f1ad112fab8ec/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=62651df2b482af4dc98b0aec6c5f1ad112fab8ec", "patch": "@@ -452,13 +452,10 @@ pub mod flatteners {\n \n     pub fn serialize_value<D: Encoder + FromWriter,\n                            T: Encodable<D>>(val: &T) -> ~[u8] {\n-        let mut bytes_writer = BytesWriter();\n-        let writer = @bytes_writer as @Writer;\n-        let ser = FromWriter::from_writer(writer);\n-        val.encode(&ser);\n-        let mut ret = ~[];\n-        ret <-> bytes_writer.bytes;\n-        return ret;\n+        do io::with_bytes_writer |writer| {\n+            let ser = FromWriter::from_writer(writer);\n+            val.encode(&ser);\n+        }\n     }\n \n     pub trait FromReader {\n@@ -652,7 +649,7 @@ mod test {\n \n         chan.send(10);\n \n-        let bytes = chan.byte_chan.writer.bytes.get();\n+        let bytes = copy chan.byte_chan.writer.bytes;\n \n         let reader = BufReader::new(bytes);\n         let port = serial::reader_port(reader);\n@@ -698,7 +695,7 @@ mod test {\n \n         chan.send(10);\n \n-        let bytes = chan.byte_chan.writer.bytes.get();\n+        let bytes = copy chan.byte_chan.writer.bytes;\n \n         let reader = BufReader::new(bytes);\n         let port = pod::reader_port(reader);"}, {"sha": "9208d415971c6f0cbce35ea5d35792aa25d195fe", "filename": "src/libstd/json.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/62651df2b482af4dc98b0aec6c5f1ad112fab8ec/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62651df2b482af4dc98b0aec6c5f1ad112fab8ec/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=62651df2b482af4dc98b0aec6c5f1ad112fab8ec", "patch": "@@ -1311,8 +1311,7 @@ mod tests {\n                 }\n             }\n         }\n-        check_equal(str::from_bytes(bw.bytes.data),\n-                    ~\"[\\\"frog\\\",[\\\"Henry\\\",349]]\");\n+        check_equal(str::from_bytes(bw.bytes), ~\"[\\\"frog\\\",[\\\"Henry\\\",349]]\");\n     }\n \n     #[test]\n@@ -1327,8 +1326,7 @@ mod tests {\n                 }\n             }\n         }\n-        check_equal(str::from_bytes(bw.bytes.data),\n-                    ~\"\\\"jodhpurs\\\"\");\n+        check_equal(str::from_bytes(bw.bytes), ~\"\\\"jodhpurs\\\"\");\n     }\n \n     #[test]\n@@ -1340,8 +1338,7 @@ mod tests {\n             do encoder.emit_enum_variant (~\"None\",37,1242) {\n             }\n         }\n-        check_equal(str::from_bytes(bw.bytes.data),\n-                    ~\"null\");\n+        check_equal(str::from_bytes(bw.bytes), ~\"null\");\n     }\n \n     #[test]"}, {"sha": "a1fc7230dd1f040ed71ee9d5e5251c8b812b956c", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62651df2b482af4dc98b0aec6c5f1ad112fab8ec/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62651df2b482af4dc98b0aec6c5f1ad112fab8ec/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=62651df2b482af4dc98b0aec6c5f1ad112fab8ec", "patch": "@@ -303,9 +303,9 @@ mod test {\n     use util::testing::*;\n \n     #[test] fn to_json_str (val: Encodable<std::json::Encoder>) -> ~str {\n-        let bw = @io::BytesWriter();\n-        val.encode(~std::json::Encoder(bw as io::Writer));\n-        str::from_bytes(bw.bytes.data)\n+        do io::with_str_writer |writer| {\n+            val.encode(~std::json::Encoder(writer));\n+        }\n     }\n \n     #[test] fn alltts () {"}, {"sha": "39864059fcd4802129bbc9ac743063b20c483a50", "filename": "src/test/run-pass/call-closure-from-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62651df2b482af4dc98b0aec6c5f1ad112fab8ec/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62651df2b482af4dc98b0aec6c5f1ad112fab8ec/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs?ref=62651df2b482af4dc98b0aec6c5f1ad112fab8ec", "patch": "@@ -11,7 +11,7 @@\n fn foo() -> int { 22 }\n \n pub fn main() {\n-    let x: ~[@fn() -> int] = ~[];\n+    let mut x: ~[@fn() -> int] = ~[];\n     x.push(foo);\n     fail_unless!((x[0])() == 22);\n }"}, {"sha": "5f5e2f9fc308411aeb0ac343bef4abd54daed244", "filename": "src/test/run-pass/issue-2631-b.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62651df2b482af4dc98b0aec6c5f1ad112fab8ec/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62651df2b482af4dc98b0aec6c5f1ad112fab8ec/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs?ref=62651df2b482af4dc98b0aec6c5f1ad112fab8ec", "patch": "@@ -15,12 +15,11 @@ extern mod req;\n extern mod std;\n \n use req::*;\n-use std::oldmap::*;\n use std::oldmap::HashMap;\n \n pub fn main() {\n   let v = ~[@~\"hi\"];\n   let m: req::header_map = HashMap();\n-  m.insert(~\"METHOD\", @mut ~[v]);\n+  m.insert(~\"METHOD\", @mut v);\n   request::<int>(m);\n }"}, {"sha": "ea8edf5156a63ae2378f0d57d4efde992f3fbcf1", "filename": "src/test/run-pass/issue-5275", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/59de3853be3b7d9e5306522bdfdb76be69555703/src%2Ftest%2Frun-pass%2Fissue-5275", "raw_url": "https://github.com/rust-lang/rust/raw/59de3853be3b7d9e5306522bdfdb76be69555703/src%2Ftest%2Frun-pass%2Fissue-5275", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5275?ref=59de3853be3b7d9e5306522bdfdb76be69555703"}, {"sha": "a1b93d99f281406499b6f1146695b3bc4752288f", "filename": "src/test/run-pass/issue-5275.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/59de3853be3b7d9e5306522bdfdb76be69555703/src%2Ftest%2Frun-pass%2Fissue-5275.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59de3853be3b7d9e5306522bdfdb76be69555703/src%2Ftest%2Frun-pass%2Fissue-5275.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5275.rs?ref=59de3853be3b7d9e5306522bdfdb76be69555703", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn foo(self: &A) -> int {\n-    if true {\n-        fail!()\n-    } else {\n-        *bar(self.bar)\n-    }\n-}\n-\n-pub fn main() {}\n-\n-fn bar(_: &r/mut int) -> &r/int {\n-    fail!()\n-}\n-\n-struct A {\n-  bar: @mut int,\n-}"}]}