{"sha": "846d4f0613c77955d1e613715d1267e791f85165", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NmQ0ZjA2MTNjNzc5NTVkMWU2MTM3MTVkMTI2N2U3OTFmODUxNjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-16T19:19:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-16T19:19:06Z"}, "message": "Auto merge of #82536 - sexxi-goose:handle-patterns-take-2, r=nikomatsakis\n\n2229: Handle patterns within closures correctly when `capture_disjoint_fields` is enabled\n\nThis PR fixes several issues related to handling patterns within closures when `capture_disjoint_fields` is enabled.\n1. Matching is always considered a use of the place, even with `_` patterns\n2. Compiler ICE when capturing fields in closures through `let` assignments\n\nTo do so, we\n\n- Introduced new Fake Reads\n- Delayed use of `Place` in favor of `PlaceBuilder`\n- Ensured that `PlaceBuilder` can be resolved before attempting to extract `Place` in any of the pattern matching code\n\nCloses rust-lang/project-rfc-2229/issues/27\nCloses rust-lang/project-rfc-2229/issues/24\nr? `@nikomatsakis`", "tree": {"sha": "77b95d1fb7481f8090d5757fe90371617da74c6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77b95d1fb7481f8090d5757fe90371617da74c6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/846d4f0613c77955d1e613715d1267e791f85165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/846d4f0613c77955d1e613715d1267e791f85165", "html_url": "https://github.com/rust-lang/rust/commit/846d4f0613c77955d1e613715d1267e791f85165", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/846d4f0613c77955d1e613715d1267e791f85165/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d57c3e1fb64f0e8446436ac2c414a10e563cdfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d57c3e1fb64f0e8446436ac2c414a10e563cdfa", "html_url": "https://github.com/rust-lang/rust/commit/1d57c3e1fb64f0e8446436ac2c414a10e563cdfa"}, {"sha": "9d5daa6f45af3919f9bbc78b9e42daad5603d0f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5daa6f45af3919f9bbc78b9e42daad5603d0f7", "html_url": "https://github.com/rust-lang/rust/commit/9d5daa6f45af3919f9bbc78b9e42daad5603d0f7"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "972167575475e6048f101cee80594eecc1f6d034", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/846d4f0613c77955d1e613715d1267e791f85165/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/846d4f0613c77955d1e613715d1267e791f85165/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=846d4f0613c77955d1e613715d1267e791f85165", "patch": "@@ -2,6 +2,7 @@ use rustc_hir::intravisit;\n use rustc_hir::{self, AssocItemKind, Body, FnDecl, HirId, HirIdSet, Impl, ItemKind, Node};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::{self, TraitRef, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n@@ -184,6 +185,8 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) { }\n }\n \n impl<'a, 'tcx> EscapeDelegate<'a, 'tcx> {"}, {"sha": "cb56512db60fee29b266b2372ec8daa699304e24", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/846d4f0613c77955d1e613715d1267e791f85165/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/846d4f0613c77955d1e613715d1267e791f85165/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=846d4f0613c77955d1e613715d1267e791f85165", "patch": "@@ -4,6 +4,7 @@ use if_chain::if_chain;\n use rustc_hir::{BindingAnnotation, Expr, HirId, Node, PatKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n+use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty;\n use rustc_span::source_map::Span;\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n@@ -106,6 +107,8 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n             }\n         }\n     }\n+\n+    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _:HirId) { }\n }\n \n impl MutatePairDelegate<'_, '_> {"}, {"sha": "d439577f9c33b9918dbf0e1d6fda38924c842a85", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/846d4f0613c77955d1e613715d1267e791f85165/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/846d4f0613c77955d1e613715d1267e791f85165/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=846d4f0613c77955d1e613715d1267e791f85165", "patch": "@@ -11,6 +11,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{BindingAnnotation, Body, FnDecl, GenericArg, HirId, Impl, ItemKind, Node, PatKind, QPath, TyKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::{self, TypeFoldable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::kw;\n@@ -333,4 +334,6 @@ impl<'tcx> euv::Delegate<'tcx> for MovedVariablesCtxt {\n     fn borrow(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: HirId, _: ty::BorrowKind) {}\n \n     fn mutate(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: HirId) {}\n+\n+    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) { }\n }"}, {"sha": "0b1ab6b7ea188407e64ea32271737365e7903ef6", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/846d4f0613c77955d1e613715d1267e791f85165/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/846d4f0613c77955d1e613715d1267e791f85165/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=846d4f0613c77955d1e613715d1267e791f85165", "patch": "@@ -7,6 +7,7 @@ use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{Expr, ExprKind, HirId, Path};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n+use rustc_middle::mir::FakeReadCause;\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n@@ -77,6 +78,8 @@ impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n     fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId) {\n         self.update(&cmt)\n     }\n+\n+    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _:HirId) { }\n }\n \n pub struct ParamBindingIdCollector {"}]}