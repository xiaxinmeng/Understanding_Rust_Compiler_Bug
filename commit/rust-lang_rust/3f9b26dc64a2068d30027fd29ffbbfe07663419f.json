{"sha": "3f9b26dc64a2068d30027fd29ffbbfe07663419f", "node_id": "C_kwDOAAsO6NoAKDNmOWIyNmRjNjRhMjA2OGQzMDAyN2ZkMjlmZmJiZmUwNzY2MzQxOWY", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-10-14T10:10:18Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-11-19T12:00:23Z"}, "message": "Fix Iterator::advance_by contract inconsistency\n\nThe `advance_by(n)` docs state that in the error case `Err(k)` that k is always less than n.\nIt also states that `advance_by(0)` may return `Err(0)` to indicate an exhausted iterator.\nThese statements are inconsistent.\nSince only one implementation (Skip) actually made use of that I changed it to return Ok(()) in that case too.\n\nWhile adding some tests I also found a bug in `Take::advance_back_by`.", "tree": {"sha": "789ec818eeb3d78cf2c901ddf2c430daeb5f0152", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/789ec818eeb3d78cf2c901ddf2c430daeb5f0152"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f9b26dc64a2068d30027fd29ffbbfe07663419f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f9b26dc64a2068d30027fd29ffbbfe07663419f", "html_url": "https://github.com/rust-lang/rust/commit/3f9b26dc64a2068d30027fd29ffbbfe07663419f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f9b26dc64a2068d30027fd29ffbbfe07663419f/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc946fcd326f7d85d4af096efdc73538622568e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc946fcd326f7d85d4af096efdc73538622568e9", "html_url": "https://github.com/rust-lang/rust/commit/cc946fcd326f7d85d4af096efdc73538622568e9"}], "stats": {"total": 91, "additions": 69, "deletions": 22}, "files": [{"sha": "773142825329b7dd4130ad8111ff7c226c11f76d", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=3f9b26dc64a2068d30027fd29ffbbfe07663419f", "patch": "@@ -985,6 +985,9 @@ fn test_into_iter_advance_by() {\n \n     assert_eq!(i.advance_by(usize::MAX), Err(0));\n \n+    i.advance_by(0).unwrap();\n+    i.advance_back_by(0).unwrap();\n+\n     assert_eq!(i.len(), 0);\n }\n "}, {"sha": "ea1da8ba434edc54e21b15f73c5a7a4d8cf184b6", "filename": "library/core/src/iter/adapters/skip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs?ref=3f9b26dc64a2068d30027fd29ffbbfe07663419f", "patch": "@@ -119,8 +119,8 @@ where\n     #[rustc_inherit_overflow_checks]\n     fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n         let mut rem = n;\n-\n         let step_one = self.n.saturating_add(rem);\n+\n         match self.iter.advance_by(step_one) {\n             Ok(_) => {\n                 rem -= step_one - self.n;\n@@ -129,7 +129,7 @@ where\n             Err(advanced) => {\n                 let advanced_without_skip = advanced.saturating_sub(self.n);\n                 self.n = self.n.saturating_sub(advanced);\n-                return Err(advanced_without_skip);\n+                return if n == 0 { Ok(()) } else { Err(advanced_without_skip) };\n             }\n         }\n "}, {"sha": "2962e0104d11d0f7cb2bd2568d582eb7f490849e", "filename": "library/core/src/iter/adapters/take.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs?ref=3f9b26dc64a2068d30027fd29ffbbfe07663419f", "patch": "@@ -215,21 +215,22 @@ where\n     }\n \n     #[inline]\n+    #[rustc_inherit_overflow_checks]\n     fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n-        let inner_len = self.iter.len();\n-        let len = self.n;\n-        let remainder = len.saturating_sub(n);\n-        let to_advance = inner_len - remainder;\n-        match self.iter.advance_back_by(to_advance) {\n-            Ok(_) => {\n-                self.n = remainder;\n-                if n > len {\n-                    return Err(len);\n-                }\n-                return Ok(());\n-            }\n-            _ => panic!(\"ExactSizeIterator contract violation\"),\n-        }\n+        // The amount by which the inner iterator needs to be shortened for it to be\n+        // at most as long as the take() amount.\n+        let trim_inner = self.iter.len().saturating_sub(self.n);\n+        // The amount we need to advance inner to fulfill the caller's request.\n+        // take(), advance_by() and len() all can be at most usize, so we don't have to worry\n+        // about having to advance more than usize::MAX here.\n+        let advance_by = trim_inner.saturating_add(n);\n+\n+        let advanced = match self.iter.advance_back_by(advance_by) {\n+            Ok(_) => advance_by - trim_inner,\n+            Err(advanced) => advanced - trim_inner,\n+        };\n+        self.n -= advanced;\n+        return if advanced < n { Err(advanced) } else { Ok(()) };\n     }\n }\n "}, {"sha": "a6aed6d210beb9ea50a34caef132f809246b5895", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=3f9b26dc64a2068d30027fd29ffbbfe07663419f", "patch": "@@ -106,9 +106,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// Calling `advance_back_by(0)` can do meaningful work, for example [`Flatten`] can advance its\n     /// outer iterator until it finds an inner iterator that is not empty, which then often\n     /// allows it to return a more accurate `size_hint()` than in its initial state.\n-    /// `advance_back_by(0)` may either return `Ok()` or `Err(0)`. The former conveys no information\n-    /// whether the iterator is or is not exhausted, the latter can be treated as if [`next_back`]\n-    /// had returned `None`. Replacing a `Err(0)` with `Ok` is only correct for `n = 0`.\n     ///\n     /// [`advance_by`]: Iterator::advance_by\n     /// [`Flatten`]: crate::iter::Flatten"}, {"sha": "588758fed9cabe673246e3a24fde267945871164", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=3f9b26dc64a2068d30027fd29ffbbfe07663419f", "patch": "@@ -249,9 +249,6 @@ pub trait Iterator {\n     /// Calling `advance_by(0)` can do meaningful work, for example [`Flatten`]\n     /// can advance its outer iterator until it finds an inner iterator that is not empty, which\n     /// then often allows it to return a more accurate `size_hint()` than in its initial state.\n-    /// `advance_by(0)` may either return `Ok()` or `Err(0)`. The former conveys no information\n-    /// whether the iterator is or is not exhausted, the latter can be treated as if [`next`]\n-    /// had returned `None`. Replacing a `Err(0)` with `Ok` is only correct for `n = 0`.\n     ///\n     /// [`Flatten`]: crate::iter::Flatten\n     /// [`next`]: Iterator::next"}, {"sha": "f419f9cec12f8555df3281eae5019b75f4b88ea5", "filename": "library/core/tests/iter/adapters/chain.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs?ref=3f9b26dc64a2068d30027fd29ffbbfe07663419f", "patch": "@@ -34,21 +34,25 @@ fn test_iterator_chain_advance_by() {\n             iter.advance_by(i).unwrap();\n             assert_eq!(iter.next(), Some(&xs[i]));\n             assert_eq!(iter.advance_by(100), Err(len - i - 1));\n+            iter.advance_by(0).unwrap();\n         }\n \n         for i in 0..ys.len() {\n             let mut iter = Unfuse::new(xs).chain(Unfuse::new(ys));\n             iter.advance_by(xs.len() + i).unwrap();\n             assert_eq!(iter.next(), Some(&ys[i]));\n             assert_eq!(iter.advance_by(100), Err(ys.len() - i - 1));\n+            iter.advance_by(0).unwrap();\n         }\n \n         let mut iter = xs.iter().chain(ys);\n         iter.advance_by(len).unwrap();\n         assert_eq!(iter.next(), None);\n+        iter.advance_by(0).unwrap();\n \n         let mut iter = xs.iter().chain(ys);\n         assert_eq!(iter.advance_by(len + 1), Err(len));\n+        iter.advance_by(0).unwrap();\n     }\n \n     test_chain(&[], &[]);\n@@ -67,21 +71,25 @@ fn test_iterator_chain_advance_back_by() {\n             iter.advance_back_by(i).unwrap();\n             assert_eq!(iter.next_back(), Some(&ys[ys.len() - i - 1]));\n             assert_eq!(iter.advance_back_by(100), Err(len - i - 1));\n+            iter.advance_back_by(0).unwrap();\n         }\n \n         for i in 0..xs.len() {\n             let mut iter = Unfuse::new(xs).chain(Unfuse::new(ys));\n             iter.advance_back_by(ys.len() + i).unwrap();\n             assert_eq!(iter.next_back(), Some(&xs[xs.len() - i - 1]));\n             assert_eq!(iter.advance_back_by(100), Err(xs.len() - i - 1));\n+            iter.advance_back_by(0).unwrap();\n         }\n \n         let mut iter = xs.iter().chain(ys);\n         iter.advance_back_by(len).unwrap();\n         assert_eq!(iter.next_back(), None);\n+        iter.advance_back_by(0).unwrap();\n \n         let mut iter = xs.iter().chain(ys);\n         assert_eq!(iter.advance_back_by(len + 1), Err(len));\n+        iter.advance_back_by(0).unwrap();\n     }\n \n     test_chain(&[], &[]);"}, {"sha": "cd6513327f00e242728906e3b99dae2c7f534cc5", "filename": "library/core/tests/iter/adapters/flatten.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs?ref=3f9b26dc64a2068d30027fd29ffbbfe07663419f", "patch": "@@ -61,6 +61,7 @@ fn test_flatten_try_folds() {\n #[test]\n fn test_flatten_advance_by() {\n     let mut it = once(0..10).chain(once(10..30)).chain(once(30..40)).flatten();\n+\n     it.advance_by(5).unwrap();\n     assert_eq!(it.next(), Some(5));\n     it.advance_by(9).unwrap();\n@@ -72,6 +73,8 @@ fn test_flatten_advance_by() {\n \n     assert_eq!(it.advance_by(usize::MAX), Err(9));\n     assert_eq!(it.advance_back_by(usize::MAX), Err(0));\n+    it.advance_by(0).unwrap();\n+    it.advance_back_by(0).unwrap();\n     assert_eq!(it.size_hint(), (0, Some(0)));\n }\n "}, {"sha": "0c464bdd03a2202224d6692e464e24f66eb8709b", "filename": "library/core/tests/iter/adapters/skip.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs?ref=3f9b26dc64a2068d30027fd29ffbbfe07663419f", "patch": "@@ -69,6 +69,17 @@ fn test_iterator_skip_nth() {\n     assert_eq!(it.nth(0), None);\n }\n \n+#[test]\n+fn test_skip_advance_by() {\n+    assert_eq!((0..0).skip(10).advance_by(0), Ok(()));\n+    assert_eq!((0..0).skip(10).advance_by(1), Err(0));\n+    assert_eq!((0u128..(usize::MAX as u128) + 1).skip(usize::MAX).advance_by(usize::MAX), Err(1));\n+    assert_eq!((0u128..u128::MAX).skip(usize::MAX).advance_by(1), Ok(()));\n+\n+    assert_eq!((0..2).skip(1).advance_back_by(10), Err(1));\n+    assert_eq!((0..0).skip(1).advance_back_by(0), Ok(()));\n+}\n+\n #[test]\n fn test_iterator_skip_count() {\n     let xs = [0, 1, 2, 3, 5, 13, 15, 16, 17, 19, 20, 30];"}, {"sha": "bfb659f0a83780cab58bedecc1bc9c0dd68890ae", "filename": "library/core/tests/iter/adapters/take.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs?ref=3f9b26dc64a2068d30027fd29ffbbfe07663419f", "patch": "@@ -73,6 +73,28 @@ fn test_iterator_take_nth_back() {\n     assert_eq!(it.nth_back(1), None);\n }\n \n+#[test]\n+fn test_take_advance_by() {\n+    let mut take = (0..10).take(3);\n+    assert_eq!(take.advance_by(2), Ok(()));\n+    assert_eq!(take.next(), Some(2));\n+    assert_eq!(take.advance_by(1), Err(0));\n+\n+    assert_eq!((0..0).take(10).advance_by(0), Ok(()));\n+    assert_eq!((0..0).take(10).advance_by(1), Err(0));\n+    assert_eq!((0..10).take(4).advance_by(5), Err(4));\n+\n+    let mut take = (0..10).take(3);\n+    assert_eq!(take.advance_back_by(2), Ok(()));\n+    assert_eq!(take.next(), Some(0));\n+    assert_eq!(take.advance_back_by(1), Err(0));\n+\n+    assert_eq!((0..2).take(1).advance_back_by(10), Err(1));\n+    assert_eq!((0..0).take(1).advance_back_by(1), Err(0));\n+    assert_eq!((0..0).take(1).advance_back_by(0), Ok(()));\n+    assert_eq!((0..usize::MAX).take(100).advance_back_by(usize::MAX), Err(100));\n+}\n+\n #[test]\n fn test_iterator_take_short() {\n     let xs = [0, 1, 2, 3];"}, {"sha": "84498a8eae52eb425feb786904c4509b243fb6f7", "filename": "library/core/tests/iter/range.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Ftests%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Ftests%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Frange.rs?ref=3f9b26dc64a2068d30027fd29ffbbfe07663419f", "patch": "@@ -300,6 +300,9 @@ fn test_range_advance_by() {\n \n     assert_eq!(r.advance_by(usize::MAX), Err(usize::MAX - 2));\n \n+    r.advance_by(0).unwrap();\n+    r.advance_back_by(0).unwrap();\n+\n     let mut r = 0u128..u128::MAX;\n \n     r.advance_by(usize::MAX).unwrap();"}, {"sha": "66f03c68cbe017de7bb7e40a73a0c55d63a41db2", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f9b26dc64a2068d30027fd29ffbbfe07663419f/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=3f9b26dc64a2068d30027fd29ffbbfe07663419f", "patch": "@@ -154,6 +154,7 @@ fn test_iterator_advance_by() {\n     assert_eq!(iter.as_slice(), &v[3..]);\n     iter.advance_by(2).unwrap();\n     assert_eq!(iter.as_slice(), &[]);\n+    iter.advance_by(0).unwrap();\n }\n \n #[test]\n@@ -175,6 +176,7 @@ fn test_iterator_advance_back_by() {\n     assert_eq!(iter.as_slice(), &v[..v.len() - 3]);\n     iter.advance_back_by(2).unwrap();\n     assert_eq!(iter.as_slice(), &[]);\n+    iter.advance_back_by(0).unwrap();\n }\n \n #[test]"}]}