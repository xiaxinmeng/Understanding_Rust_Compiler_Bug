{"sha": "6fcf62831efcdef242f6858b47dd2a9b208b19ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmY2Y2MjgzMWVmY2RlZjI0MmY2ODU4YjQ3ZGQyYTliMjA4YjE5Y2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-29T08:23:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-29T08:23:04Z"}, "message": "Auto merge of #27349 - arielb1:constant-at, r=alexcrichton\n\nFixes #27033\r\nFixes #27077 \r\n\r\nr? @alexcrichton", "tree": {"sha": "9e250f2b3c5f287a006d5376e2dcf2f9f8afded5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e250f2b3c5f287a006d5376e2dcf2f9f8afded5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fcf62831efcdef242f6858b47dd2a9b208b19ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fcf62831efcdef242f6858b47dd2a9b208b19ce", "html_url": "https://github.com/rust-lang/rust/commit/6fcf62831efcdef242f6858b47dd2a9b208b19ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fcf62831efcdef242f6858b47dd2a9b208b19ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d576ef3d7be3efe28f902bbb3b2197f4553db412", "url": "https://api.github.com/repos/rust-lang/rust/commits/d576ef3d7be3efe28f902bbb3b2197f4553db412", "html_url": "https://github.com/rust-lang/rust/commit/d576ef3d7be3efe28f902bbb3b2197f4553db412"}, {"sha": "757b0c176fa185fda59283efaf0d8079b702ca69", "url": "https://api.github.com/repos/rust-lang/rust/commits/757b0c176fa185fda59283efaf0d8079b702ca69", "html_url": "https://github.com/rust-lang/rust/commit/757b0c176fa185fda59283efaf0d8079b702ca69"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "fa9c7a2038c80323b380b97ef0affe18afc72f12", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf62831efcdef242f6858b47dd2a9b208b19ce/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf62831efcdef242f6858b47dd2a9b208b19ce/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6fcf62831efcdef242f6858b47dd2a9b208b19ce", "patch": "@@ -2654,23 +2654,22 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let pat_id = pattern.id;\n         walk_pat(pattern, |pattern| {\n             match pattern.node {\n-                PatIdent(binding_mode, ref path1, _) => {\n-\n-                    // The meaning of pat_ident with no type parameters\n+                PatIdent(binding_mode, ref path1, ref at_rhs) => {\n+                    // The meaning of PatIdent with no type parameters\n                     // depends on whether an enum variant or unit-like struct\n                     // with that name is in scope. The probing lookup has to\n                     // be careful not to emit spurious errors. Only matching\n                     // patterns (match) can match nullary variants or\n-                    // unit-like structs. For binding patterns (let), matching\n-                    // such a value is simply disallowed (since it's rarely\n-                    // what you want).\n+                    // unit-like structs. For binding patterns (let\n+                    // and the LHS of @-patterns), matching such a value is\n+                    // simply disallowed (since it's rarely what you want).\n+                    let const_ok = mode == RefutableMode && at_rhs.is_none();\n \n                     let ident = path1.node;\n                     let renamed = mtwt::resolve(ident);\n \n                     match self.resolve_bare_identifier_pattern(ident.name, pattern.span) {\n-                        FoundStructOrEnumVariant(def, lp)\n-                                if mode == RefutableMode => {\n+                        FoundStructOrEnumVariant(def, lp) if const_ok => {\n                             debug!(\"(resolving pattern) resolving `{}` to \\\n                                     struct or enum variant\",\n                                    renamed);\n@@ -2693,7 +2692,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     renamed)\n                             );\n                         }\n-                        FoundConst(def, lp) if mode == RefutableMode => {\n+                        FoundConst(def, lp) if const_ok => {\n                             debug!(\"(resolving pattern) resolving `{}` to \\\n                                     constant\",\n                                    renamed);"}, {"sha": "051edfe5f451be041cfbff8c9d513400573c9b4d", "filename": "src/test/compile-fail/issue-27033.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf62831efcdef242f6858b47dd2a9b208b19ce/src%2Ftest%2Fcompile-fail%2Fissue-27033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf62831efcdef242f6858b47dd2a9b208b19ce/src%2Ftest%2Fcompile-fail%2Fissue-27033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27033.rs?ref=6fcf62831efcdef242f6858b47dd2a9b208b19ce", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    match Some(1) {\n+        None @ _ => {} //~ ERROR declaration of `None` shadows an enum variant\n+    };\n+    const C: u8 = 1;\n+    match 1 {\n+        C @ 2 => { //~ ERROR only irrefutable patterns allowed here\n+            println!(\"{}\", C);\n+        }\n+        _ => {}\n+    };\n+}"}]}