{"sha": "14b5d5658733d6428b983be6060db16bd5ba5c60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YjVkNTY1ODczM2Q2NDI4Yjk4M2JlNjA2MGRiMTZiZDViYTVjNjA=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-21T03:44:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-21T03:44:57Z"}, "message": "Rollup merge of #40332 - steveklabnik:extract-book, r=alexcrichton\n\nExtract book into a submodule\n\nPart of https://github.com/rust-lang/rust/issues/39588\n\nWe probably don't want to land this till after the beta branches on friday, but would still \u2764\ufe0f a review from @alexcrichton , since I am a rustbuild noob.\n\nThis pr:\n\n1. removes the book\n2. adds it back in as a submodule\n3. the submodule includes both the old book and the new book\n4. it also includes an index page explaining the difference in editions\n5. it also includes redirect pages for the old book URLs.\n6. so we build all that stuff too.\n\nr? @alexcrichton", "tree": {"sha": "6f42595093aa54c393dbcb57063bf39c9957c43f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f42595093aa54c393dbcb57063bf39c9957c43f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14b5d5658733d6428b983be6060db16bd5ba5c60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14b5d5658733d6428b983be6060db16bd5ba5c60", "html_url": "https://github.com/rust-lang/rust/commit/14b5d5658733d6428b983be6060db16bd5ba5c60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14b5d5658733d6428b983be6060db16bd5ba5c60/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "url": "https://api.github.com/repos/rust-lang/rust/commits/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "html_url": "https://github.com/rust-lang/rust/commit/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86"}, {"sha": "96d35947c36bba6c6545c06768b5358c0f8bf3dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d35947c36bba6c6545c06768b5358c0f8bf3dc", "html_url": "https://github.com/rust-lang/rust/commit/96d35947c36bba6c6545c06768b5358c0f8bf3dc"}], "stats": {"total": 17640, "additions": 118, "deletions": 17522}, "files": [{"sha": "d2e1fb868a9990b1ed81bfdda3c23f3ce78b09f9", "filename": ".gitmodules", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14b5d5658733d6428b983be6060db16bd5ba5c60/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/14b5d5658733d6428b983be6060db16bd5ba5c60/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=14b5d5658733d6428b983be6060db16bd5ba5c60", "patch": "@@ -27,3 +27,6 @@\n [submodule \"reference\"]\n \tpath = src/doc/reference\n \turl = https://github.com/rust-lang-nursery/reference.git\n+[submodule \"book\"]\n+\tpath = src/doc/book\n+\turl = https://github.com/rust-lang/book"}, {"sha": "40cdb9242df15b2fec93cee92f272d31e4ec5849", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=14b5d5658733d6428b983be6060db16bd5ba5c60", "patch": "@@ -285,6 +285,16 @@ pub fn docs(build: &Build, compiler: &Compiler) {\n             continue\n         }\n \n+        // The nostarch directory in the book is for no starch, and so isn't guaranteed to build.\n+        // we don't care if it doesn't build, so skip it.\n+        use std::ffi::OsStr;\n+        let path: &OsStr = p.as_ref();\n+        if let Some(path) = path.to_str() {\n+            if path.contains(\"nostarch\") {\n+                continue;\n+            }\n+        }\n+\n         println!(\"doc tests for: {}\", p.display());\n         markdown_test(build, compiler, &p);\n     }"}, {"sha": "baee1ada508f2b05697a81f99a0e56a57abe04de", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=14b5d5658733d6428b983be6060db16bd5ba5c60", "patch": "@@ -53,6 +53,82 @@ pub fn rustbook(build: &Build, target: &str, name: &str) {\n                    .arg(out));\n }\n \n+/// Build the book and associated stuff.\n+///\n+/// We need to build:\n+///\n+/// * Book (first edition)\n+/// * Book (second edition)\n+/// * Index page\n+/// * Redirect pages\n+pub fn book(build: &Build, target: &str, name: &str) {\n+    // build book first edition\n+    rustbook(build, target, &format!(\"{}/first-edition\", name));\n+\n+    // build book second edition\n+    rustbook(build, target, &format!(\"{}/second-edition\", name));\n+\n+    // build the index page\n+    let index = format!(\"{}/index.md\", name);\n+    println!(\"Documenting book index ({})\", target);\n+    invoke_rustdoc(build, target, &index);\n+\n+    // build the redirect pages\n+    println!(\"Documenting book redirect pages ({})\", target);\n+    for file in t!(fs::read_dir(build.src.join(\"src/doc/book/redirects\"))) {\n+        let file = t!(file);\n+        let path = file.path();\n+        let path = path.to_str().unwrap();\n+\n+        invoke_rustdoc(build, target, path);\n+    }\n+}\n+\n+fn invoke_rustdoc(build: &Build, target: &str, markdown: &str) {\n+    let out = build.doc_out(target);\n+\n+    let compiler = Compiler::new(0, &build.config.build);\n+\n+    let path = build.src.join(\"src/doc\").join(markdown);\n+\n+    let rustdoc = build.rustdoc(&compiler);\n+\n+    let favicon = build.src.join(\"src/doc/favicon.inc\");\n+    let footer = build.src.join(\"src/doc/footer.inc\");\n+\n+    let version_input = build.src.join(\"src/doc/version_info.html.template\");\n+    let version_info = out.join(\"version_info.html\");\n+\n+    if !up_to_date(&version_input, &version_info) {\n+        let mut info = String::new();\n+        t!(t!(File::open(&version_input)).read_to_string(&mut info));\n+        let info = info.replace(\"VERSION\", &build.rust_release())\n+                       .replace(\"SHORT_HASH\", build.rust_info.sha_short().unwrap_or(\"\"))\n+                       .replace(\"STAMP\", build.rust_info.sha().unwrap_or(\"\"));\n+        t!(t!(File::create(&version_info)).write_all(info.as_bytes()));\n+    }\n+\n+    let mut cmd = Command::new(&rustdoc);\n+\n+    build.add_rustc_lib_path(&compiler, &mut cmd);\n+\n+    let out = out.join(\"book\");\n+\n+    t!(fs::copy(build.src.join(\"src/doc/rust.css\"), out.join(\"rust.css\")));\n+\n+    cmd.arg(\"--html-after-content\").arg(&footer)\n+        .arg(\"--html-before-content\").arg(&version_info)\n+        .arg(\"--html-in-header\").arg(&favicon)\n+        .arg(\"--markdown-playground-url\")\n+        .arg(\"https://play.rust-lang.org/\")\n+        .arg(\"-o\").arg(&out)\n+        .arg(&path)\n+        .arg(\"--markdown-css\")\n+        .arg(\"rust.css\");\n+\n+    build.run(&mut cmd);\n+}\n+\n /// Generates all standalone documentation as compiled by the rustdoc in `stage`\n /// for the `target` into `out`.\n ///"}, {"sha": "6eb12fed5abb2d402a61cccc89b0412ecf1d3eb8", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=14b5d5658733d6428b983be6060db16bd5ba5c60", "patch": "@@ -581,7 +581,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n               .stage(0)\n          })\n          .default(build.config.docs)\n-         .run(move |s| doc::rustbook(build, s.target, \"book\"));\n+         .run(move |s| doc::book(build, s.target, \"book\"));\n     rules.doc(\"doc-nomicon\", \"src/doc/nomicon\")\n          .dep(move |s| {\n              s.name(\"tool-rustbook\")"}, {"sha": "e6d6caab41471f7115a621029bd428a812c5260e", "filename": "src/doc/book", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=14b5d5658733d6428b983be6060db16bd5ba5c60", "patch": "@@ -0,0 +1 @@\n+Subproject commit e6d6caab41471f7115a621029bd428a812c5260e"}, {"sha": "ade4d52c1eb318632af66c89c88fd8694513b0b1", "filename": "src/doc/book/src/README.md", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2FREADME.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,39 +0,0 @@\n-# The Rust Programming Language\n-\n-Welcome! This book will teach you about the [Rust Programming Language][rust].\n-Rust is a systems programming language focused on three goals: safety, speed,\n-and concurrency. It maintains these goals without having a garbage collector,\n-making it a useful language for a number of use cases other languages aren\u2019t\n-good at: embedding in other languages, programs with specific space and time\n-requirements, and writing low-level code, like device drivers and operating\n-systems. It improves on current languages targeting this space by having a\n-number of compile-time safety checks that produce no runtime overhead, while\n-eliminating all data races. Rust also aims to achieve \u2018zero-cost abstractions\u2019\n-even though some of these abstractions feel like those of a high-level language.\n-Even then, Rust still allows precise control like a low-level language would.\n-\n-[rust]: https://www.rust-lang.org\n-\n-\u201cThe Rust Programming Language\u201d is split into chapters. This introduction\n-is the first. After this:\n-\n-* [Getting started][gs] - Set up your computer for Rust development.\n-* [Tutorial: Guessing Game][gg] - Learn some Rust with a small project.\n-* [Syntax and Semantics][ss] - Each bit of Rust, broken down into small chunks.\n-* [Effective Rust][er] - Higher-level concepts for writing excellent Rust code.\n-* [Glossary][gl] - A reference of terms used in the book.\n-* [Bibliography][bi] - Background on Rust's influences, papers about Rust.\n-\n-[gs]: getting-started.html\n-[gg]: guessing-game.html\n-[er]: effective-rust.html\n-[ss]: syntax-and-semantics.html\n-[gl]: glossary.html\n-[bi]: bibliography.html\n-\n-### Contributing\n-\n-The source files from which this book is generated can be found on\n-[GitHub][book].\n-\n-[book]: https://github.com/rust-lang/rust/tree/master/src/doc/book"}, {"sha": "c3763cdf9d6d7ad7f3a0706c8b1747c27d53b499", "filename": "src/doc/book/src/SUMMARY.md", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2FSUMMARY.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,60 +0,0 @@\n-# Summary\n-\n-[Introduction](README.md)\n-\n-* [Getting Started](getting-started.md)\n-* [Tutorial: Guessing Game](guessing-game.md)\n-* [Syntax and Semantics](syntax-and-semantics.md)\n-    * [Variable Bindings](variable-bindings.md)\n-    * [Functions](functions.md)\n-    * [Primitive Types](primitive-types.md)\n-    * [Comments](comments.md)\n-    * [if](if.md)\n-    * [Loops](loops.md)\n-    * [Vectors](vectors.md)\n-    * [Ownership](ownership.md)\n-    * [References and Borrowing](references-and-borrowing.md)\n-    * [Lifetimes](lifetimes.md)\n-    * [Mutability](mutability.md)\n-    * [Structs](structs.md)\n-    * [Enums](enums.md)\n-    * [Match](match.md)\n-    * [Patterns](patterns.md)\n-    * [Method Syntax](method-syntax.md)\n-    * [Strings](strings.md)\n-    * [Generics](generics.md)\n-    * [Traits](traits.md)\n-    * [Drop](drop.md)\n-    * [if let](if-let.md)\n-    * [Trait Objects](trait-objects.md)\n-    * [Closures](closures.md)\n-    * [Universal Function Call Syntax](ufcs.md)\n-    * [Crates and Modules](crates-and-modules.md)\n-    * [`const` and `static`](const-and-static.md)\n-    * [Attributes](attributes.md)\n-    * [`type` aliases](type-aliases.md)\n-    * [Casting between types](casting-between-types.md)\n-    * [Associated Types](associated-types.md)\n-    * [Unsized Types](unsized-types.md)\n-    * [Operators and Overloading](operators-and-overloading.md)\n-    * [Deref coercions](deref-coercions.md)\n-    * [Macros](macros.md)\n-    * [Raw Pointers](raw-pointers.md)\n-    * [`unsafe`](unsafe.md)\n-* [Effective Rust](effective-rust.md)\n-    * [The Stack and the Heap](the-stack-and-the-heap.md)\n-    * [Testing](testing.md)\n-    * [Conditional Compilation](conditional-compilation.md)\n-    * [Documentation](documentation.md)\n-    * [Iterators](iterators.md)\n-    * [Concurrency](concurrency.md)\n-    * [Error Handling](error-handling.md)\n-    * [Choosing your Guarantees](choosing-your-guarantees.md)\n-    * [FFI](ffi.md)\n-    * [Borrow and AsRef](borrow-and-asref.md)\n-    * [Release Channels](release-channels.md)\n-    * [Using Rust without the standard library](using-rust-without-the-standard-library.md)\n-    * [Procedural Macros (and custom derive)](procedural-macros.md)\n-* [Glossary](glossary.md)\n-* [Syntax Index](syntax-index.md)\n-* [Bibliography](bibliography.md)"}, {"sha": "4db2b9e5eec2000463020cae9b88547c065cd9fe", "filename": "src/doc/book/src/associated-types.md", "status": "removed", "additions": 0, "deletions": 202, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fassociated-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fassociated-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fassociated-types.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,202 +0,0 @@\n-# Associated Types\n-\n-Associated types are a powerful part of Rust\u2019s type system. They\u2019re related to\n-the idea of a \u2018type family\u2019, in other words, grouping multiple types together. That\n-description is a bit abstract, so let\u2019s dive right into an example. If you want\n-to write a `Graph` trait, you have two types to be generic over: the node type\n-and the edge type. So you might write a trait, `Graph<N, E>`, that looks like\n-this:\n-\n-```rust\n-trait Graph<N, E> {\n-    fn has_edge(&self, &N, &N) -> bool;\n-    fn edges(&self, &N) -> Vec<E>;\n-    // Etc.\n-}\n-```\n-\n-While this sort of works, it ends up being awkward. For example, any function\n-that wants to take a `Graph` as a parameter now _also_ needs to be generic over\n-the `N`ode and `E`dge types too:\n-\n-```rust,ignore\n-fn distance<N, E, G: Graph<N, E>>(graph: &G, start: &N, end: &N) -> u32 { ... }\n-```\n-\n-Our distance calculation works regardless of our `Edge` type, so the `E` stuff in\n-this signature is a distraction.\n-\n-What we really want to say is that a certain `E`dge and `N`ode type come together\n-to form each kind of `Graph`. We can do that with associated types:\n-\n-```rust\n-trait Graph {\n-    type N;\n-    type E;\n-\n-    fn has_edge(&self, &Self::N, &Self::N) -> bool;\n-    fn edges(&self, &Self::N) -> Vec<Self::E>;\n-    // Etc.\n-}\n-```\n-\n-Now, our clients can be abstract over a given `Graph`:\n-\n-```rust,ignore\n-fn distance<G: Graph>(graph: &G, start: &G::N, end: &G::N) -> u32 { ... }\n-```\n-\n-No need to deal with the `E`dge type here!\n-\n-Let\u2019s go over all this in more detail.\n-\n-## Defining associated types\n-\n-Let\u2019s build that `Graph` trait. Here\u2019s the definition:\n-\n-```rust\n-trait Graph {\n-    type N;\n-    type E;\n-\n-    fn has_edge(&self, &Self::N, &Self::N) -> bool;\n-    fn edges(&self, &Self::N) -> Vec<Self::E>;\n-}\n-```\n-\n-Simple enough. Associated types use the `type` keyword, and go inside the body\n-of the trait, with the functions.\n-\n-These type declarations work the same way as those for functions. For example,\n-if we wanted our `N` type to implement `Display`, so we can print the nodes out,\n-we could do this:\n-\n-```rust\n-use std::fmt;\n-\n-trait Graph {\n-    type N: fmt::Display;\n-    type E;\n-\n-    fn has_edge(&self, &Self::N, &Self::N) -> bool;\n-    fn edges(&self, &Self::N) -> Vec<Self::E>;\n-}\n-```\n-\n-## Implementing associated types\n-\n-Just like any trait, traits that use associated types use the `impl` keyword to\n-provide implementations. Here\u2019s a simple implementation of Graph:\n-\n-```rust\n-# trait Graph {\n-#     type N;\n-#     type E;\n-#     fn has_edge(&self, &Self::N, &Self::N) -> bool;\n-#     fn edges(&self, &Self::N) -> Vec<Self::E>;\n-# }\n-struct Node;\n-\n-struct Edge;\n-\n-struct MyGraph;\n-\n-impl Graph for MyGraph {\n-    type N = Node;\n-    type E = Edge;\n-\n-    fn has_edge(&self, n1: &Node, n2: &Node) -> bool {\n-        true\n-    }\n-\n-    fn edges(&self, n: &Node) -> Vec<Edge> {\n-        Vec::new()\n-    }\n-}\n-```\n-\n-This silly implementation always returns `true` and an empty `Vec<Edge>`, but it\n-gives you an idea of how to implement this kind of thing. We first need three\n-`struct`s, one for the graph, one for the node, and one for the edge. If it made\n-more sense to use a different type, that would work as well, we\u2019re going to\n-use `struct`s for all three here.\n-\n-Next is the `impl` line, which is an implementation like any other trait.\n-\n-From here, we use `=` to define our associated types. The name the trait uses\n-goes on the left of the `=`, and the concrete type we\u2019re `impl`ementing this\n-for goes on the right. Finally, we use the concrete types in our function\n-declarations.\n-\n-## Trait objects with associated types\n-\n-There\u2019s one more bit of syntax we should talk about: trait objects. If you\n-try to create a trait object from a trait with an associated type, like this:\n-\n-```rust,ignore\n-# trait Graph {\n-#     type N;\n-#     type E;\n-#     fn has_edge(&self, &Self::N, &Self::N) -> bool;\n-#     fn edges(&self, &Self::N) -> Vec<Self::E>;\n-# }\n-# struct Node;\n-# struct Edge;\n-# struct MyGraph;\n-# impl Graph for MyGraph {\n-#     type N = Node;\n-#     type E = Edge;\n-#     fn has_edge(&self, n1: &Node, n2: &Node) -> bool {\n-#         true\n-#     }\n-#     fn edges(&self, n: &Node) -> Vec<Edge> {\n-#         Vec::new()\n-#     }\n-# }\n-let graph = MyGraph;\n-let obj = Box::new(graph) as Box<Graph>;\n-```\n-\n-You\u2019ll get two errors:\n-\n-```text\n-error: the value of the associated type `E` (from the trait `main::Graph`) must\n-be specified [E0191]\n-let obj = Box::new(graph) as Box<Graph>;\n-          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-24:44 error: the value of the associated type `N` (from the trait\n-`main::Graph`) must be specified [E0191]\n-let obj = Box::new(graph) as Box<Graph>;\n-          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-```\n-\n-We can\u2019t create a trait object like this, because we don\u2019t know the associated\n-types. Instead, we can write this:\n-\n-```rust\n-# trait Graph {\n-#     type N;\n-#     type E;\n-#     fn has_edge(&self, &Self::N, &Self::N) -> bool;\n-#     fn edges(&self, &Self::N) -> Vec<Self::E>;\n-# }\n-# struct Node;\n-# struct Edge;\n-# struct MyGraph;\n-# impl Graph for MyGraph {\n-#     type N = Node;\n-#     type E = Edge;\n-#     fn has_edge(&self, n1: &Node, n2: &Node) -> bool {\n-#         true\n-#     }\n-#     fn edges(&self, n: &Node) -> Vec<Edge> {\n-#         Vec::new()\n-#     }\n-# }\n-let graph = MyGraph;\n-let obj = Box::new(graph) as Box<Graph<N=Node, E=Edge>>;\n-```\n-\n-The `N=Node` syntax allows us to provide a concrete type, `Node`, for the `N`\n-type parameter. Same with `E=Edge`. If we didn\u2019t provide this constraint, we\n-couldn\u2019t be sure which `impl` to match this trait object to."}, {"sha": "103ec39aa38a50789f31d073d082eb3b5a6b04ca", "filename": "src/doc/book/src/attributes.md", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fattributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fattributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fattributes.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,70 +0,0 @@\n-# Attributes\n-\n-Declarations can be annotated with \u2018attributes\u2019 in Rust. They look like this:\n-\n-```rust\n-#[test]\n-# fn foo() {}\n-```\n-\n-or like this:\n-\n-```rust\n-# mod foo {\n-#![test]\n-# }\n-```\n-\n-The difference between the two is the `!`, which changes what the attribute\n-applies to:\n-\n-```rust,ignore\n-#[foo]\n-struct Foo;\n-\n-mod bar {\n-    #![bar]\n-}\n-```\n-\n-The `#[foo]` attribute applies to the next item, which is the `struct`\n-declaration. The `#![bar]` attribute applies to the item enclosing it, which is\n-the `mod` declaration. Otherwise, they\u2019re the same. Both change the meaning of\n-the item they\u2019re attached to somehow.\n-\n-For example, consider a function like this:\n-\n-```rust\n-#[test]\n-fn check() {\n-    assert_eq!(2, 1 + 1);\n-}\n-```\n-\n-It is marked with `#[test]`. This means it\u2019s special: when you run\n-[tests][tests], this function will execute. When you compile as usual, it won\u2019t\n-even be included. This function is now a test function.\n-\n-[tests]: testing.html\n-\n-Attributes may also have additional data:\n-\n-```rust\n-#[inline(always)]\n-fn super_fast_fn() {\n-# }\n-```\n-\n-Or even keys and values:\n-\n-```rust\n-#[cfg(target_os = \"macos\")]\n-mod macos_only {\n-# }\n-```\n-\n-Rust attributes are used for a number of different things. There is a full list\n-of attributes [in the reference][reference]. Currently, you are not allowed to\n-create your own attributes, the Rust compiler defines them.\n-\n-[reference]: ../reference/attributes.html"}, {"sha": "07b2aa94a77463fa279641cc15d0b7febed28901", "filename": "src/doc/book/src/bibliography.md", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fbibliography.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fbibliography.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fbibliography.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,83 +0,0 @@\n-# Bibliography\n-\n-This is a reading list of material relevant to Rust. It includes prior\n-research that has - at one time or another - influenced the design of\n-Rust, as well as publications about Rust.\n-\n-### Type system\n-\n-* [Region based memory management in Cyclone](http://209.68.42.137/ucsd-pages/Courses/cse227.w03/handouts/cyclone-regions.pdf)\n-* [Safe manual memory management in Cyclone](http://www.cs.umd.edu/projects/PL/cyclone/scp.pdf)\n-* [Typeclasses: making ad-hoc polymorphism less ad hoc](http://www.ps.uni-sb.de/courses/typen-ws99/class.ps.gz)\n-* [Macros that work together](https://www.cs.utah.edu/plt/publications/jfp12-draft-fcdf.pdf)\n-* [Traits: composable units of behavior](http://scg.unibe.ch/archive/papers/Scha03aTraits.pdf)\n-* [Alias burying](http://www.cs.uwm.edu/faculty/boyland/papers/unique-preprint.ps) - We tried something similar and abandoned it.\n-* [External uniqueness is unique enough](http://www.cs.uu.nl/research/techreps/UU-CS-2002-048.html)\n-* [Uniqueness and Reference Immutability for Safe Parallelism](https://research.microsoft.com/pubs/170528/msr-tr-2012-79.pdf)\n-* [Region Based Memory Management](http://www.cs.ucla.edu/~palsberg/tba/papers/tofte-talpin-iandc97.pdf)\n-\n-### Concurrency\n-\n-* [Singularity: rethinking the software stack](https://research.microsoft.com/pubs/69431/osr2007_rethinkingsoftwarestack.pdf)\n-* [Language support for fast and reliable message passing in singularity OS](https://research.microsoft.com/pubs/67482/singsharp.pdf)\n-* [Scheduling multithreaded computations by work stealing](http://supertech.csail.mit.edu/papers/steal.pdf)\n-* [Thread scheduling for multiprogramming multiprocessors](http://www.eecis.udel.edu/%7Ecavazos/cisc879-spring2008/papers/arora98thread.pdf)\n-* [The data locality of work stealing](http://www.aladdin.cs.cmu.edu/papers/pdfs/y2000/locality_spaa00.pdf)\n-* [Dynamic circular work stealing deque](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.170.1097&rep=rep1&type=pdf) - The Chase/Lev deque\n-* [Work-first and help-first scheduling policies for async-finish task parallelism](http://www.cs.rice.edu/%7Eyguo/pubs/PID824943.pdf) - More general than fully-strict work stealing\n-* [A Java fork/join calamity](http://www.coopsoft.com/ar/CalamityArticle.html) - critique of Java's fork/join library, particularly its application of work stealing to non-strict computation\n-* [Scheduling techniques for concurrent systems](http://www.stanford.edu/~ouster/cgi-bin/papers/coscheduling.pdf)\n-* [Contention aware scheduling](http://www.blagodurov.net/files/a8-blagodurov.pdf)\n-* [Balanced work stealing for time-sharing multicores](http://www.cse.ohio-state.edu/hpcs/WWW/HTML/publications/papers/TR-12-1.pdf)\n-* [Three layer cake for shared-memory programming](http://dl.acm.org/citation.cfm?id=1953616&dl=ACM&coll=DL&CFID=524387192&CFTOKEN=44362705)\n-* [Non-blocking steal-half work queues](http://www.cs.bgu.ac.il/%7Ehendlerd/papers/p280-hendler.pdf)\n-* [Reagents: expressing and composing fine-grained concurrency](http://www.mpi-sws.org/~turon/reagents.pdf)\n-* [Algorithms for scalable synchronization of shared-memory multiprocessors](https://www.cs.rochester.edu/u/scott/papers/1991_TOCS_synch.pdf)\n-* [Epoch-based reclamation](https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-579.pdf).\n-\n-### Others\n-\n-* [Crash-only software](https://www.usenix.org/legacy/events/hotos03/tech/full_papers/candea/candea.pdf)\n-* [Composing High-Performance Memory Allocators](http://people.cs.umass.edu/~emery/pubs/berger-pldi2001.pdf)\n-* [Reconsidering Custom Memory Allocation](http://people.cs.umass.edu/~emery/pubs/berger-oopsla2002.pdf)\n-\n-### Papers *about* Rust\n-\n-* [GPU Programming in Rust: Implementing High Level Abstractions in a\n-Systems Level\n-Language](http://www.cs.indiana.edu/~eholk/papers/hips2013.pdf). Early GPU work by Eric Holk.\n-* [Parallel closures: a new twist on an old\n-  idea](https://www.usenix.org/conference/hotpar12/parallel-closures-new-twist-old-idea)\n-  - not exactly about Rust, but by nmatsakis\n-* [Patina: A Formalization of the Rust Programming\n-  Language](ftp://ftp.cs.washington.edu/tr/2015/03/UW-CSE-15-03-02.pdf). Early\n-  formalization of a subset of the type system, by Eric Reed.\n-* [Experience Report: Developing the Servo Web Browser Engine using\n-  Rust](http://arxiv.org/abs/1505.07383). By Lars Bergstrom.\n-* [Implementing a Generic Radix Trie in\n-  Rust](https://michaelsproul.github.io/rust_radix_paper/rust-radix-sproul.pdf). Undergrad\n-  paper by Michael Sproul.\n-* [Reenix: Implementing a Unix-Like Operating System in\n-  Rust](http://scialex.github.io/reenix.pdf). Undergrad paper by Alex\n-  Light.\n-* [Evaluation of performance and productivity metrics of potential\n-  programming languages in the HPC environment]\n-  (http://octarineparrot.com/assets/mrfloya-thesis-ba.pdf).\n-  Bachelor's thesis by Florian Wilkens. Compares C, Go and Rust.\n-* [Nom, a byte oriented, streaming, zero copy, parser combinators library\n-  in Rust](http://spw15.langsec.org/papers/couprie-nom.pdf). By\n-  Geoffroy Couprie, research for VLC.\n-* [Graph-Based Higher-Order Intermediate\n-  Representation](http://compilers.cs.uni-saarland.de/papers/lkh15_cgo.pdf). An\n-  experimental IR implemented in Impala, a Rust-like language.\n-* [Code Refinement of Stencil\n-  Codes](http://compilers.cs.uni-saarland.de/papers/ppl14_web.pdf). Another\n-  paper using Impala.\n-* [Parallelization in Rust with fork-join and\n-  friends](http://publications.lib.chalmers.se/records/fulltext/219016/219016.pdf). Linus\n-  Farnstrand's master's thesis.\n-* [Session Types for\n-  Rust](http://munksgaard.me/papers/laumann-munksgaard-larsen.pdf). Philip\n-  Munksgaard's master's thesis. Research for Servo.\n-* [Ownership is Theft: Experiences Building an Embedded OS in Rust - Amit Levy, et. al.](http://amitlevy.com/papers/tock-plos2015.pdf)\n-* [You can't spell trust without Rust](https://raw.githubusercontent.com/Gankro/thesis/master/thesis.pdf). Alexis Beingessner's master's thesis."}, {"sha": "a6e396571c685f9b05fa8b96c786568201cab8b8", "filename": "src/doc/book/src/borrow-and-asref.md", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fborrow-and-asref.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fborrow-and-asref.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fborrow-and-asref.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,93 +0,0 @@\n-# Borrow and AsRef\n-\n-The [`Borrow`][borrow] and [`AsRef`][asref] traits are very similar, but\n-different. Here\u2019s a quick refresher on what these two traits mean.\n-\n-[borrow]: ../std/borrow/trait.Borrow.html\n-[asref]: ../std/convert/trait.AsRef.html\n-\n-# Borrow\n-\n-The `Borrow` trait is used when you\u2019re writing a data structure, and you want to\n-use either an owned or borrowed type as synonymous for some purpose.\n-\n-For example, [`HashMap`][hashmap] has a [`get` method][get] which uses `Borrow`:\n-\n-```rust,ignore\n-fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>\n-    where K: Borrow<Q>,\n-          Q: Hash + Eq\n-```\n-\n-[hashmap]: ../std/collections/struct.HashMap.html\n-[get]: ../std/collections/struct.HashMap.html#method.get\n-\n-This signature is pretty complicated. The `K` parameter is what we\u2019re interested\n-in here. It refers to a parameter of the `HashMap` itself:\n-\n-```rust,ignore\n-struct HashMap<K, V, S = RandomState> {\n-```\n-\n-The `K` parameter is the type of _key_ the `HashMap` uses. So, looking at\n-the signature of `get()` again, we can use `get()` when the key implements\n-`Borrow<Q>`. That way, we can make a `HashMap` which uses `String` keys,\n-but use `&str`s when we\u2019re searching:\n-\n-```rust\n-use std::collections::HashMap;\n-\n-let mut map = HashMap::new();\n-map.insert(\"Foo\".to_string(), 42);\n-\n-assert_eq!(map.get(\"Foo\"), Some(&42));\n-```\n-\n-This is because the standard library has `impl Borrow<str> for String`.\n-\n-For most types, when you want to take an owned or borrowed type, a `&T` is\n-enough. But one area where `Borrow` is effective is when there\u2019s more than one\n-kind of borrowed value. This is especially true of references and slices: you\n-can have both an `&T` or a `&mut T`. If we wanted to accept both of these types,\n-`Borrow` is up for it:\n-\n-```rust\n-use std::borrow::Borrow;\n-use std::fmt::Display;\n-\n-fn foo<T: Borrow<i32> + Display>(a: T) {\n-    println!(\"a is borrowed: {}\", a);\n-}\n-\n-let mut i = 5;\n-\n-foo(&i);\n-foo(&mut i);\n-```\n-\n-This will print out `a is borrowed: 5` twice.\n-\n-# AsRef\n-\n-The `AsRef` trait is a conversion trait. It\u2019s used for converting some value to\n-a reference in generic code. Like this:\n-\n-```rust\n-let s = \"Hello\".to_string();\n-\n-fn foo<T: AsRef<str>>(s: T) {\n-    let slice = s.as_ref();\n-}\n-```\n-\n-# Which should I use?\n-\n-We can see how they\u2019re kind of the same: they both deal with owned and borrowed\n-versions of some type. However, they\u2019re a bit different.\n-\n-Choose `Borrow` when you want to abstract over different kinds of borrowing, or\n-when you\u2019re building a data structure that treats owned and borrowed values in\n-equivalent ways, such as hashing and comparison.\n-\n-Choose `AsRef` when you want to convert something to a reference directly, and\n-you\u2019re writing generic code."}, {"sha": "26cd718475eab896f06f97a57428b47568f8afc1", "filename": "src/doc/book/src/casting-between-types.md", "status": "removed", "additions": 0, "deletions": 204, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fcasting-between-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fcasting-between-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fcasting-between-types.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,204 +0,0 @@\n-# Casting Between Types\n-\n-Rust, with its focus on safety, provides two different ways of casting\n-different types between each other. The first, `as`, is for safe casts.\n-In contrast, `transmute` allows for arbitrary casting, and is one of the\n-most dangerous features of Rust!\n-\n-# Coercion\n-\n-Coercion between types is implicit and has no syntax of its own, but can\n-be spelled out with [`as`](#explicit-coercions).\n-\n-Coercion occurs in `let`, `const`, and `static` statements; in\n-function call arguments; in field values in struct initialization; and in a\n-function result.\n-\n-The most common case of coercion is removing mutability from a reference:\n-\n-* `&mut T` to `&T`\n-\n-An analogous conversion is to remove mutability from a\n-[raw pointer](raw-pointers.html):\n-\n-* `*mut T` to `*const T`\n-\n-References can also be coerced to raw pointers:\n-\n-* `&T` to `*const T`\n-\n-* `&mut T` to `*mut T`\n-\n-Custom coercions may be defined using [`Deref`](deref-coercions.html).\n-\n-Coercion is transitive.\n-\n-# `as`\n-\n-The `as` keyword does safe casting:\n-\n-```rust\n-let x: i32 = 5;\n-\n-let y = x as i64;\n-```\n-\n-There are three major categories of safe cast: explicit coercions, casts\n-between numeric types, and pointer casts.\n-\n-Casting is not transitive: even if `e as U1 as U2` is a valid\n-expression, `e as U2` is not necessarily so (in fact it will only be valid if\n-`U1` coerces to `U2`).\n-\n-\n-## Explicit coercions\n-\n-A cast `e as U` is valid if `e` has type `T` and `T` *coerces* to `U`.\n-\n-## Numeric casts\n-\n-A cast `e as U` is also valid in any of the following cases:\n-\n-* `e` has type `T` and `T` and `U` are any numeric types; *numeric-cast*\n-* `e` is a C-like enum (with no data attached to the variants),\n-   and `U` is an integer type; *enum-cast*\n-* `e` has type `bool` or `char` and `U` is an integer type; *prim-int-cast*\n-* `e` has type `u8` and `U` is `char`; *u8-char-cast*\n-\n-For example\n-\n-```rust\n-let one = true as u8;\n-let at_sign = 64 as char;\n-let two_hundred = -56i8 as u8;\n-```\n-\n-The semantics of numeric casts are:\n-\n-* Casting between two integers of the same size (e.g. i32 -> u32) is a no-op\n-* Casting from a larger integer to a smaller integer (e.g. u32 -> u8) will\n-  truncate\n-* Casting from a smaller integer to a larger integer (e.g. u8 -> u32) will\n-    * zero-extend if the source is unsigned\n-    * sign-extend if the source is signed\n-* Casting from a float to an integer will round the float towards zero\n-    * **[NOTE: currently this will cause Undefined Behavior if the rounded\n-      value cannot be represented by the target integer type][float-int]**.\n-      This includes Inf and NaN. This is a bug and will be fixed.\n-* Casting from an integer to float will produce the floating point\n-  representation of the integer, rounded if necessary (rounding strategy\n-  unspecified)\n-* Casting from an f32 to an f64 is perfect and lossless\n-* Casting from an f64 to an f32 will produce the closest possible value\n-  (rounding strategy unspecified)\n-    * **[NOTE: currently this will cause Undefined Behavior if the value\n-      is finite but larger or smaller than the largest or smallest finite\n-      value representable by f32][float-float]**. This is a bug and will\n-      be fixed.\n-\n-[float-int]: https://github.com/rust-lang/rust/issues/10184\n-[float-float]: https://github.com/rust-lang/rust/issues/15536\n-\n-## Pointer casts\n-\n-Perhaps surprisingly, it is safe to cast [raw pointers](raw-pointers.html) to and\n-from integers, and to cast between pointers to different types subject to\n-some constraints. It is only unsafe to dereference the pointer:\n-\n-```rust\n-let a = 300 as *const char; // `a` is a pointer to location 300.\n-let b = a as u32;\n-```\n-\n-`e as U` is a valid pointer cast in any of the following cases:\n-\n-* `e` has type `*T`, `U` has type `*U_0`, and either `U_0: Sized` or\n-  `unsize_kind(T) == unsize_kind(U_0)`; a *ptr-ptr-cast*\n-\n-* `e` has type `*T` and `U` is a numeric type, while `T: Sized`; *ptr-addr-cast*\n-\n-* `e` is an integer and `U` is `*U_0`, while `U_0: Sized`; *addr-ptr-cast*\n-\n-* `e` has type `&[T; n]` and `U` is `*const T`; *array-ptr-cast*\n-\n-* `e` is a function pointer type and `U` has type `*T`,\n-  while `T: Sized`; *fptr-ptr-cast*\n-\n-* `e` is a function pointer type and `U` is an integer; *fptr-addr-cast*\n-\n-\n-# `transmute`\n-\n-`as` only allows safe casting, and will for example reject an attempt to\n-cast four bytes into a `u32`:\n-\n-```rust,ignore\n-let a = [0u8, 0u8, 0u8, 0u8];\n-\n-let b = a as u32; // Four u8s makes a u32.\n-```\n-\n-This errors with:\n-\n-```text\n-error: non-scalar cast: `[u8; 4]` as `u32`\n-let b = a as u32; // Four u8s makes a u32.\n-        ^~~~~~~~\n-```\n-\n-This is a \u2018non-scalar cast\u2019 because we have multiple values here: the four\n-elements of the array. These kinds of casts are very dangerous, because they\n-make assumptions about the way that multiple underlying structures are\n-implemented. For this, we need something more dangerous.\n-\n-The `transmute` function is very simple, but very scary. It tells Rust to treat\n-a value of one type as though it were another type. It does this regardless of\n-the typechecking system, and completely trusts you.\n-\n-In our previous example, we know that an array of four `u8`s represents a `u32`\n-properly, and so we want to do the cast. Using `transmute` instead of `as`,\n-Rust lets us:\n-\n-```rust\n-use std::mem;\n-\n-fn main() {\n-    unsafe {\n-        let a = [0u8, 1u8, 0u8, 0u8];\n-        let b = mem::transmute::<[u8; 4], u32>(a);\n-        println!(\"{}\", b); // 256\n-        // Or, more concisely:\n-        let c: u32 = mem::transmute(a);\n-        println!(\"{}\", c); // 256\n-    }\n-}\n-```\n-\n-We have to wrap the operation in an `unsafe` block for this to compile\n-successfully. Technically, only the `mem::transmute` call itself needs to be in\n-the block, but it's nice in this case to enclose everything related, so you\n-know where to look. In this case, the details about `a` are also important, and\n-so they're in the block. You'll see code in either style, sometimes the context\n-is too far away, and wrapping all of the code in `unsafe` isn't a great idea.\n-\n-While `transmute` does very little checking, it will at least make sure that\n-the types are the same size. This errors:\n-\n-```rust,ignore\n-use std::mem;\n-\n-unsafe {\n-    let a = [0u8, 0u8, 0u8, 0u8];\n-\n-    let b = mem::transmute::<[u8; 4], u64>(a);\n-}\n-```\n-\n-with:\n-\n-```text\n-error: transmute called with differently sized types: [u8; 4] (32 bits) to u64\n-(64 bits)\n-```\n-\n-Other than that, you're on your own!"}, {"sha": "b743fda354692a44400c2c21ae0fb71c2d5a30d5", "filename": "src/doc/book/src/chapter_1.md", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fchapter_1.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fchapter_1.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fchapter_1.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1 +0,0 @@\n-# Chapter 1"}, {"sha": "89dd09e67048121341a50438354ef9618312fdc4", "filename": "src/doc/book/src/choosing-your-guarantees.md", "status": "removed", "additions": 0, "deletions": 360, "changes": 360, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fchoosing-your-guarantees.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fchoosing-your-guarantees.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fchoosing-your-guarantees.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,360 +0,0 @@\n-# Choosing your Guarantees\n-\n-One important feature of Rust is that it lets us control the costs and guarantees\n-of a program.\n-\n-There are various &ldquo;wrapper type&rdquo; abstractions in the Rust standard library which embody\n-a multitude of tradeoffs between cost, ergonomics, and guarantees. Many let one choose between\n-run time and compile time enforcement. This section will explain a few selected abstractions in\n-detail.\n-\n-Before proceeding, it is highly recommended that one reads about [ownership][ownership] and\n-[borrowing][borrowing] in Rust.\n-\n-[ownership]: ownership.html\n-[borrowing]: references-and-borrowing.html\n-\n-# Basic pointer types\n-\n-## `Box<T>`\n-\n-[`Box<T>`][box] is an &ldquo;owned&rdquo; pointer, or a &ldquo;box&rdquo;. While it can hand\n-out references to the contained data, it is the only owner of the data. In particular, consider\n-the following:\n-\n-```rust\n-let x = Box::new(1);\n-let y = x;\n-// `x` is no longer accessible here.\n-```\n-\n-Here, the box was _moved_ into `y`. As `x` no longer owns it, the compiler will no longer allow the\n-programmer to use `x` after this. A box can similarly be moved _out_ of a function by returning it.\n-\n-When a box (that hasn't been moved) goes out of scope, destructors are run. These destructors take\n-care of deallocating the inner data.\n-\n-This is a zero-cost abstraction for dynamic allocation. If you want to allocate some memory on the\n-heap and safely pass around a pointer to that memory, this is ideal. Note that you will only be\n-allowed to share references to this by the regular borrowing rules, checked at compile time.\n-\n-[box]: ../std/boxed/struct.Box.html\n-\n-## `&T` and `&mut T`\n-\n-These are immutable and mutable references respectively. They follow the &ldquo;read-write lock&rdquo;\n-pattern, such that one may either have only one mutable reference to some data, or any number of\n-immutable ones, but not both. This guarantee is enforced at compile time, and has no visible cost at\n-runtime. In most cases these two pointer types suffice for sharing cheap references between sections\n-of code.\n-\n-These pointers cannot be copied in such a way that they outlive the lifetime associated with them.\n-\n-## `*const T` and `*mut T`\n-\n-These are C-like raw pointers with no lifetime or ownership attached to them. They point to\n-some location in memory with no other restrictions. The only guarantee that these provide is that\n-they cannot be dereferenced except in code marked `unsafe`.\n-\n-These are useful when building safe, low cost abstractions like `Vec<T>`, but should be avoided in\n-safe code.\n-\n-## `Rc<T>`\n-\n-This is the first wrapper we will cover that has a runtime cost.\n-\n-[`Rc<T>`][rc] is a reference counted pointer. In other words, this lets us have multiple \"owning\"\n-pointers to the same data, and the data will be dropped (destructors will be run) when all pointers\n-are out of scope.\n-\n-Internally, it contains a shared &ldquo;reference count&rdquo; (also called &ldquo;refcount&rdquo;),\n-which is incremented each time the `Rc` is cloned, and decremented each time one of the `Rc`s goes\n-out of scope. The main responsibility of `Rc<T>` is to ensure that destructors are called for shared\n-data.\n-\n-The internal data here is immutable, and if a cycle of references is created, the data will be\n-leaked. If we want data that doesn't leak when there are cycles, we need a garbage collector.\n-\n-#### Guarantees\n-\n-The main guarantee provided here is that the data will not be destroyed until all references to it\n-are out of scope.\n-\n-This should be used when we wish to dynamically allocate and share some data (read-only) between\n-various portions of your program, where it is not certain which portion will finish using the pointer\n-last. It's a viable alternative to `&T` when `&T` is either impossible to statically check for\n-correctness, or creates extremely unergonomic code where the programmer does not wish to spend the\n-development cost of working with.\n-\n-This pointer is _not_ thread safe, and Rust will not let it be sent or shared with other threads.\n-This lets one avoid the cost of atomics in situations where they are unnecessary.\n-\n-There is a sister smart pointer to this one, `Weak<T>`. This is a non-owning, but also non-borrowed,\n-smart pointer. It is also similar to `&T`, but it is not restricted in lifetime&mdash;a `Weak<T>`\n-can be held on to forever. However, it is possible that an attempt to access the inner data may fail\n-and return `None`, since this can outlive the owned `Rc`s. This is useful for cyclic\n-data structures and other things.\n-\n-#### Cost\n-\n-As far as memory goes, `Rc<T>` is a single allocation, though it will allocate two extra words (i.e.\n-two `usize` values) as compared to a regular `Box<T>` (for \"strong\" and \"weak\" refcounts).\n-\n-`Rc<T>` has the computational cost of incrementing/decrementing the refcount whenever it is cloned\n-or goes out of scope respectively. Note that a clone will not do a deep copy, rather it will simply\n-increment the inner reference count and return a copy of the `Rc<T>`.\n-\n-[rc]: ../std/rc/struct.Rc.html\n-\n-# Cell types\n-\n-`Cell`s provide interior mutability. In other words, they contain data which can be manipulated even\n-if the type cannot be obtained in a mutable form (for example, when it is behind an `&`-ptr or\n-`Rc<T>`).\n-\n-[The documentation for the `cell` module has a pretty good explanation for these][cell-mod].\n-\n-These types are _generally_ found in struct fields, but they may be found elsewhere too.\n-\n-## `Cell<T>`\n-\n-[`Cell<T>`][cell] is a type that provides zero-cost interior mutability by moving data in and\n-out of the cell.\n-Since the compiler knows that all the data owned by the contained value is on the stack, there's\n-no worry of leaking any data behind references (or worse!) by simply replacing the data.\n-\n-It is still possible to violate your own invariants using this wrapper, so be careful when using it.\n-If a field is wrapped in `Cell`, it's a nice indicator that the chunk of data is mutable and may not\n-stay the same between the time you first read it and when you intend to use it.\n-\n-```rust\n-use std::cell::Cell;\n-\n-let x = Cell::new(1);\n-let y = &x;\n-let z = &x;\n-x.set(2);\n-y.set(3);\n-z.set(4);\n-println!(\"{}\", x.get());\n-```\n-\n-Note that here we were able to mutate the same value from various immutable references.\n-\n-This has the same runtime cost as the following:\n-\n-```rust,ignore\n-let mut x = 1;\n-let y = &mut x;\n-let z = &mut x;\n-x = 2;\n-*y = 3;\n-*z = 4;\n-println!(\"{}\", x);\n-```\n-\n-but it has the added benefit of actually compiling successfully.\n-\n-#### Guarantees\n-\n-This relaxes the &ldquo;no aliasing with mutability&rdquo; restriction in places where it's\n-unnecessary. However, this also relaxes the guarantees that the restriction provides; so if your\n-invariants depend on data stored within `Cell`, you should be careful.\n-\n-This is useful for mutating primitives and other types when there is no easy way of\n-doing it in line with the static rules of `&` and `&mut`.\n-\n-`Cell` does not let you obtain interior references to the data, which makes it safe to freely\n-mutate.\n-\n-#### Cost\n-\n-There is no runtime cost to using `Cell<T>`, however if you are using it to wrap larger\n-structs, it might be worthwhile to instead wrap individual fields in `Cell<T>` since each write is\n-otherwise a full copy of the struct.\n-\n-\n-## `RefCell<T>`\n-\n-[`RefCell<T>`][refcell] also provides interior mutability, but doesn't move data in and out of the\n-cell.\n-\n-However, it has a runtime cost. `RefCell<T>` enforces the read-write lock pattern at runtime (it's\n-like a single-threaded mutex), unlike `&T`/`&mut T` which do so at compile time. This is done by the\n-`borrow()` and `borrow_mut()` functions, which modify an internal reference count and return smart\n-pointers which can be dereferenced immutably and mutably respectively. The refcount is restored when\n-the smart pointers go out of scope. With this system, we can dynamically ensure that there are never\n-any other borrows active when a mutable borrow is active. If the programmer attempts to make such a\n-borrow, the thread will panic.\n-\n-```rust\n-use std::cell::RefCell;\n-\n-let x = RefCell::new(vec![1,2,3,4]);\n-{\n-    println!(\"{:?}\", *x.borrow())\n-}\n-\n-{\n-    let mut my_ref = x.borrow_mut();\n-    my_ref.push(1);\n-}\n-```\n-\n-Similar to `Cell`, this is mainly useful for situations where it's hard or impossible to satisfy the\n-borrow checker. Generally we know that such mutations won't happen in a nested form, but it's good\n-to check.\n-\n-For large, complicated programs, it becomes useful to put some things in `RefCell`s to make things\n-simpler. For example, a lot of the maps in the `ctxt` struct in the Rust compiler internals\n-are inside this wrapper. These are only modified once (during creation, which is not right after\n-initialization) or a couple of times in well-separated places. However, since this struct is\n-pervasively used everywhere, juggling mutable and immutable pointers would be hard (perhaps\n-impossible) and probably form a soup of `&`-ptrs which would be hard to extend. On the other hand,\n-the `RefCell` provides a cheap (not zero-cost) way of safely accessing these. In the future, if\n-someone adds some code that attempts to modify the cell when it's already borrowed, it will cause a\n-(usually deterministic) panic which can be traced back to the offending borrow.\n-\n-Similarly, in Servo's DOM there is a lot of mutation, most of which is local to a DOM type, but some\n-of which crisscrosses the DOM and modifies various things. Using `RefCell` and `Cell` to guard all\n-mutation lets us avoid worrying about mutability everywhere, and it simultaneously highlights the\n-places where mutation is _actually_ happening.\n-\n-Note that `RefCell` should be avoided if a mostly simple solution is possible with `&` pointers.\n-\n-#### Guarantees\n-\n-`RefCell` relaxes the _static_ restrictions preventing aliased mutation, and replaces them with\n-_dynamic_ ones. As such the guarantees have not changed.\n-\n-#### Cost\n-\n-`RefCell` does not allocate, but it contains an additional \"borrow state\"\n-indicator (one word in size) along with the data.\n-\n-At runtime each borrow causes a modification/check of the refcount.\n-\n-[cell-mod]: ../std/cell/index.html\n-[cell]: ../std/cell/struct.Cell.html\n-[refcell]: ../std/cell/struct.RefCell.html\n-\n-# Synchronous types\n-\n-Many of the types above cannot be used in a threadsafe manner. Particularly, `Rc<T>` and\n-`RefCell<T>`, which both use non-atomic reference counts (_atomic_ reference counts are those which\n-can be incremented from multiple threads without causing a data race), cannot be used this way. This\n-makes them cheaper to use, but we need thread safe versions of these too. They exist, in the form of\n-`Arc<T>` and `Mutex<T>`/`RwLock<T>`\n-\n-Note that the non-threadsafe types _cannot_ be sent between threads, and this is checked at compile\n-time.\n-\n-There are many useful wrappers for concurrent programming in the [sync][sync] module, but only the\n-major ones will be covered below.\n-\n-[sync]: ../std/sync/index.html\n-\n-## `Arc<T>`\n-\n-[`Arc<T>`][arc] is a version of `Rc<T>` that uses an atomic reference count (hence, \"Arc\").\n-This can be sent freely between threads.\n-\n-C++'s `shared_ptr` is similar to `Arc`, however in the case of C++ the inner data is always mutable.\n-For semantics similar to that from C++, we should use `Arc<Mutex<T>>`, `Arc<RwLock<T>>`, or\n-`Arc<UnsafeCell<T>>`[^4] (`UnsafeCell<T>` is a cell type that can be used to hold any data and has\n-no runtime cost, but accessing it requires `unsafe` blocks). The last one should only be used if we\n-are certain that the usage won't cause any memory unsafety. Remember that writing to a struct is not\n-an atomic operation, and many functions like `vec.push()` can reallocate internally and cause unsafe\n-behavior, so even monotonicity may not be enough to justify `UnsafeCell`.\n-\n-[^4]: `Arc<UnsafeCell<T>>` actually won't compile since `UnsafeCell<T>` isn't `Send` or `Sync`, but we can wrap it in a type and implement `Send`/`Sync` for it manually to get `Arc<Wrapper<T>>` where `Wrapper` is `struct Wrapper<T>(UnsafeCell<T>)`.\n-\n-#### Guarantees\n-\n-Like `Rc`, this provides the (thread safe) guarantee that the destructor for the internal data will\n-be run when the last `Arc` goes out of scope (barring any cycles).\n-\n-#### Cost\n-\n-This has the added cost of using atomics for changing the refcount (which will happen whenever it is\n-cloned or goes out of scope). When sharing data from an `Arc` in a single thread, it is preferable\n-to share `&` pointers whenever possible.\n-\n-[arc]: ../std/sync/struct.Arc.html\n-\n-## `Mutex<T>` and `RwLock<T>`\n-\n-[`Mutex<T>`][mutex] and [`RwLock<T>`][rwlock] provide mutual-exclusion via RAII guards (guards are\n-objects which maintain some state, like a lock, until their destructor is called). For both of\n-these, the mutex is opaque until we call `lock()` on it, at which point the thread will block\n-until a lock can be acquired, and then a guard will be returned. This guard can be used to access\n-the inner data (mutably), and the lock will be released when the guard goes out of scope.\n-\n-```rust,ignore\n-{\n-    let guard = mutex.lock();\n-    // `guard` dereferences mutably to the inner type.\n-    *guard += 1;\n-} // Lock is released when destructor runs.\n-```\n-\n-\n-`RwLock` has the added benefit of being efficient for multiple reads. It is always safe to have\n-multiple readers to shared data as long as there are no writers; and `RwLock` lets readers acquire a\n-\"read lock\". Such locks can be acquired concurrently and are kept track of via a reference count.\n-Writers must obtain a \"write lock\" which can only be obtained when all readers have gone out of\n-scope.\n-\n-#### Guarantees\n-\n-Both of these provide safe shared mutability across threads, however they are prone to deadlocks.\n-Some level of additional protocol safety can be obtained via the type system.\n-\n-#### Costs\n-\n-These use internal atomic-like types to maintain the locks, which are pretty costly (they can block\n-all memory reads across processors till they're done). Waiting on these locks can also be slow when\n-there's a lot of concurrent access happening.\n-\n-[rwlock]: ../std/sync/struct.RwLock.html\n-[mutex]: ../std/sync/struct.Mutex.html\n-[sessions]: https://github.com/Munksgaard/rust-sessions\n-\n-# Composition\n-\n-A common gripe when reading Rust code is with types like `Rc<RefCell<Vec<T>>>` (or even more\n-complicated compositions of such types). It's not always clear what the composition does, or why the\n-author chose one like this (and when one should be using such a composition in one's own code)\n-\n-Usually, it's a case of composing together the guarantees that you need, without paying for stuff\n-that is unnecessary.\n-\n-For example, `Rc<RefCell<T>>` is one such composition. `Rc<T>` itself can't be dereferenced mutably;\n-because `Rc<T>` provides sharing and shared mutability can lead to unsafe behavior, so we put\n-`RefCell<T>` inside to get dynamically verified shared mutability. Now we have shared mutable data,\n-but it's shared in a way that there can only be one mutator (and no readers) or multiple readers.\n-\n-Now, we can take this a step further, and have `Rc<RefCell<Vec<T>>>` or `Rc<Vec<RefCell<T>>>`. These\n-are both shareable, mutable vectors, but they're not the same.\n-\n-With the former, the `RefCell<T>` is wrapping the `Vec<T>`, so the `Vec<T>` in its entirety is\n-mutable. At the same time, there can only be one mutable borrow of the whole `Vec` at a given time.\n-This means that your code cannot simultaneously work on different elements of the vector from\n-different `Rc` handles. However, we are able to push and pop from the `Vec<T>` at will. This is\n-similar to a `&mut Vec<T>` with the borrow checking done at runtime.\n-\n-With the latter, the borrowing is of individual elements, but the overall vector is immutable. Thus,\n-we can independently borrow separate elements, but we cannot push or pop from the vector. This is\n-similar to a `&mut [T]`[^3], but, again, the borrow checking is at runtime.\n-\n-In concurrent programs, we have a similar situation with `Arc<Mutex<T>>`, which provides shared\n-mutability and ownership.\n-\n-When reading code that uses these, go in step by step and look at the guarantees/costs provided.\n-\n-When choosing a composed type, we must do the reverse; figure out which guarantees we want, and at\n-which point of the composition we need them. For example, if there is a choice between\n-`Vec<RefCell<T>>` and `RefCell<Vec<T>>`, we should figure out the tradeoffs as done above and pick\n-one.\n-\n-[^3]: `&[T]` and `&mut [T]` are _slices_; they consist of a pointer and a length and can refer to a portion of a vector or array. `&mut [T]` can have its elements mutated, however its length cannot be touched."}, {"sha": "5426ed0ff4c9c2e4985e2007daaba4bc590103e3", "filename": "src/doc/book/src/closures.md", "status": "removed", "additions": 0, "deletions": 552, "changes": 552, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fclosures.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,552 +0,0 @@\n-# Closures\n-\n-Sometimes it is useful to wrap up a function and _free variables_ for better\n-clarity and reuse. The free variables that can be used come from the\n-enclosing scope and are \u2018closed over\u2019 when used in the function. From this, we\n-get the name \u2018closures\u2019 and Rust provides a really great implementation of\n-them, as we\u2019ll see.\n-\n-# Syntax\n-\n-Closures look like this:\n-\n-```rust\n-let plus_one = |x: i32| x + 1;\n-\n-assert_eq!(2, plus_one(1));\n-```\n-\n-We create a binding, `plus_one`, and assign it to a closure. The closure\u2019s\n-arguments go between the pipes (`|`), and the body is an expression, in this\n-case, `x + 1`. Remember that `{ }` is an expression, so we can have multi-line\n-closures too:\n-\n-```rust\n-let plus_two = |x| {\n-    let mut result: i32 = x;\n-\n-    result += 1;\n-    result += 1;\n-\n-    result\n-};\n-\n-assert_eq!(4, plus_two(2));\n-```\n-\n-You\u2019ll notice a few things about closures that are a bit different from regular\n-named functions defined with `fn`. The first is that we did not need to\n-annotate the types of arguments the closure takes or the values it returns. We\n-can:\n-\n-```rust\n-let plus_one = |x: i32| -> i32 { x + 1 };\n-\n-assert_eq!(2, plus_one(1));\n-```\n-\n-But we don\u2019t have to. Why is this? Basically, it was chosen for ergonomic\n-reasons. While specifying the full type for named functions is helpful with\n-things like documentation and type inference, the full type signatures of\n-closures are rarely documented since they\u2019re anonymous, and they don\u2019t cause\n-the kinds of error-at-a-distance problems that inferring named function types\n-can.\n-\n-The second is that the syntax is similar, but a bit different. I\u2019ve added\n-spaces here for easier comparison:\n-\n-```rust\n-fn  plus_one_v1   (x: i32) -> i32 { x + 1 }\n-let plus_one_v2 = |x: i32| -> i32 { x + 1 };\n-let plus_one_v3 = |x: i32|          x + 1  ;\n-```\n-\n-Small differences, but they\u2019re similar.\n-\n-# Closures and their environment\n-\n-The environment for a closure can include bindings from its enclosing scope in\n-addition to parameters and local bindings. It looks like this:\n-\n-```rust\n-let num = 5;\n-let plus_num = |x: i32| x + num;\n-\n-assert_eq!(10, plus_num(5));\n-```\n-\n-This closure, `plus_num`, refers to a `let` binding in its scope: `num`. More\n-specifically, it borrows the binding. If we do something that would conflict\n-with that binding, we get an error. Like this one:\n-\n-```rust,ignore\n-let mut num = 5;\n-let plus_num = |x: i32| x + num;\n-\n-let y = &mut num;\n-```\n-\n-Which errors with:\n-\n-```text\n-error: cannot borrow `num` as mutable because it is also borrowed as immutable\n-    let y = &mut num;\n-                 ^~~\n-note: previous borrow of `num` occurs here due to use in closure; the immutable\n-  borrow prevents subsequent moves or mutable borrows of `num` until the borrow\n-  ends\n-    let plus_num = |x| x + num;\n-                   ^~~~~~~~~~~\n-note: previous borrow ends here\n-fn main() {\n-    let mut num = 5;\n-    let plus_num = |x| x + num;\n-\n-    let y = &mut num;\n-}\n-^\n-```\n-\n-A verbose yet helpful error message! As it says, we can\u2019t take a mutable borrow\n-on `num` because the closure is already borrowing it. If we let the closure go\n-out of scope, we can:\n-\n-```rust\n-let mut num = 5;\n-{\n-    let plus_num = |x: i32| x + num;\n-\n-} // `plus_num` goes out of scope; borrow of `num` ends.\n-\n-let y = &mut num;\n-```\n-\n-If your closure requires it, however, Rust will take ownership and move\n-the environment instead. This doesn\u2019t work:\n-\n-```rust,ignore\n-let nums = vec![1, 2, 3];\n-\n-let takes_nums = || nums;\n-\n-println!(\"{:?}\", nums);\n-```\n-\n-We get this error:\n-\n-```text\n-note: `nums` moved into closure environment here because it has type\n-  `[closure(()) -> collections::vec::Vec<i32>]`, which is non-copyable\n-let takes_nums = || nums;\n-                 ^~~~~~~\n-```\n-\n-`Vec<T>` has ownership over its contents, and therefore, when we refer to it\n-in our closure, we have to take ownership of `nums`. It\u2019s the same as if we\u2019d\n-passed `nums` to a function that took ownership of it.\n-\n-## `move` closures\n-\n-We can force our closure to take ownership of its environment with the `move`\n-keyword:\n-\n-```rust\n-let num = 5;\n-\n-let owns_num = move |x: i32| x + num;\n-```\n-\n-Now, even though the keyword is `move`, the variables follow normal move semantics.\n-In this case, `5` implements `Copy`, and so `owns_num` takes ownership of a copy\n-of `num`. So what\u2019s the difference?\n-\n-```rust\n-let mut num = 5;\n-\n-{\n-    let mut add_num = |x: i32| num += x;\n-\n-    add_num(5);\n-}\n-\n-assert_eq!(10, num);\n-```\n-\n-So in this case, our closure took a mutable reference to `num`, and then when\n-we called `add_num`, it mutated the underlying value, as we\u2019d expect. We also\n-needed to declare `add_num` as `mut` too, because we\u2019re mutating its\n-environment.\n-\n-If we change to a `move` closure, it\u2019s different:\n-\n-```rust\n-let mut num = 5;\n-\n-{\n-    let mut add_num = move |x: i32| num += x;\n-\n-    add_num(5);\n-}\n-\n-assert_eq!(5, num);\n-```\n-\n-We only get `5`. Rather than taking a mutable borrow out on our `num`, we took\n-ownership of a copy.\n-\n-Another way to think about `move` closures: they give a closure its own stack\n-frame.  Without `move`, a closure may be tied to the stack frame that created\n-it, while a `move` closure is self-contained. This means that you cannot\n-generally return a non-`move` closure from a function, for example.\n-\n-But before we talk about taking and returning closures, we should talk some\n-more about the way that closures are implemented. As a systems language, Rust\n-gives you tons of control over what your code does, and closures are no\n-different.\n-\n-# Closure implementation\n-\n-Rust\u2019s implementation of closures is a bit different than other languages. They\n-are effectively syntax sugar for traits. You\u2019ll want to make sure to have read\n-the [traits][traits] section before this one, as well as the section on [trait\n-objects][trait-objects].\n-\n-[traits]: traits.html\n-[trait-objects]: trait-objects.html\n-\n-Got all that? Good.\n-\n-The key to understanding how closures work under the hood is something a bit\n-strange: Using `()` to call a function, like `foo()`, is an overloadable\n-operator. From this, everything else clicks into place. In Rust, we use the\n-trait system to overload operators. Calling functions is no different. We have\n-three separate traits to overload with:\n-\n-```rust\n-# #![feature(unboxed_closures)]\n-# mod foo {\n-pub trait Fn<Args> : FnMut<Args> {\n-    extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n-}\n-\n-pub trait FnMut<Args> : FnOnce<Args> {\n-    extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n-}\n-\n-pub trait FnOnce<Args> {\n-    type Output;\n-\n-    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n-}\n-# }\n-```\n-\n-You\u2019ll notice a few differences between these traits, but a big one is `self`:\n-`Fn` takes `&self`, `FnMut` takes `&mut self`, and `FnOnce` takes `self`. This\n-covers all three kinds of `self` via the usual method call syntax. But we\u2019ve\n-split them up into three traits, rather than having a single one. This gives us\n-a large amount of control over what kind of closures we can take.\n-\n-The `|| {}` syntax for closures is sugar for these three traits. Rust will\n-generate a struct for the environment, `impl` the appropriate trait, and then\n-use it.\n-\n-# Taking closures as arguments\n-\n-Now that we know that closures are traits, we already know how to accept and\n-return closures: the same as any other trait!\n-\n-This also means that we can choose static vs dynamic dispatch as well. First,\n-let\u2019s write a function which takes something callable, calls it, and returns\n-the result:\n-\n-```rust\n-fn call_with_one<F>(some_closure: F) -> i32\n-    where F: Fn(i32) -> i32 {\n-\n-    some_closure(1)\n-}\n-\n-let answer = call_with_one(|x| x + 2);\n-\n-assert_eq!(3, answer);\n-```\n-\n-We pass our closure, `|x| x + 2`, to `call_with_one`. It does what it\n-suggests: it calls the closure, giving it `1` as an argument.\n-\n-Let\u2019s examine the signature of `call_with_one` in more depth:\n-\n-```rust\n-fn call_with_one<F>(some_closure: F) -> i32\n-#    where F: Fn(i32) -> i32 {\n-#    some_closure(1) }\n-```\n-\n-We take one parameter, and it has the type `F`. We also return an `i32`. This part\n-isn\u2019t interesting. The next part is:\n-\n-```rust\n-# fn call_with_one<F>(some_closure: F) -> i32\n-    where F: Fn(i32) -> i32 {\n-#   some_closure(1) }\n-```\n-\n-Because `Fn` is a trait, we can use it as a bound for our generic type. In\n-this case, our closure takes an `i32` as an argument and returns an `i32`, and\n-so the generic bound we use is `Fn(i32) -> i32`.\n-\n-There\u2019s one other key point here: because we\u2019re bounding a generic with a\n-trait, this will get monomorphized, and therefore, we\u2019ll be doing static\n-dispatch into the closure. That\u2019s pretty neat. In many languages, closures are\n-inherently heap allocated, and will always involve dynamic dispatch. In Rust,\n-we can stack allocate our closure environment, and statically dispatch the\n-call. This happens quite often with iterators and their adapters, which often\n-take closures as arguments.\n-\n-Of course, if we want dynamic dispatch, we can get that too. A trait object\n-handles this case, as usual:\n-\n-```rust\n-fn call_with_one(some_closure: &Fn(i32) -> i32) -> i32 {\n-    some_closure(1)\n-}\n-\n-let answer = call_with_one(&|x| x + 2);\n-\n-assert_eq!(3, answer);\n-```\n-\n-Now we take a trait object, a `&Fn`. And we have to make a reference\n-to our closure when we pass it to `call_with_one`, so we use `&||`.\n-\n-A quick note about closures that use explicit lifetimes. Sometimes you might have a closure\n-that takes a reference like so:\n-\n-```rust\n-fn call_with_ref<F>(some_closure:F) -> i32\n-    where F: Fn(&i32) -> i32 {\n-\n-    let value = 0;\n-    some_closure(&value)\n-}\n-```\n-\n-Normally you can specify the lifetime of the parameter to our closure. We\n-could annotate it on the function declaration:\n-\n-```rust,ignore\n-fn call_with_ref<'a, F>(some_closure:F) -> i32\n-    where F: Fn(&'a i32) -> i32 {\n-```\n-\n-However, this presents a problem in our case. When a function has an explicit\n-lifetime parameter, that lifetime must be at least as long as the *entire*\n-call to that function.  The borrow checker will complain that `value` doesn't\n-live long enough, because it is only in scope after its declaration inside the\n-function body.\n-\n-What we need is a closure that can borrow its argument only for its own\n-invocation scope, not for the outer function's scope.  In order to say that,\n-we can use Higher-Ranked Trait Bounds with the `for<...>` syntax:\n-\n-```ignore\n-fn call_with_ref<F>(some_closure:F) -> i32\n-    where F: for<'a> Fn(&'a i32) -> i32 {\n-```\n-\n-This lets the Rust compiler find the minimum lifetime to invoke our closure and\n-satisfy the borrow checker's rules. Our function then compiles and executes as we\n-expect.\n-\n-```rust\n-fn call_with_ref<F>(some_closure:F) -> i32\n-    where F: for<'a> Fn(&'a i32) -> i32 {\n-\n-    let value = 0;\n-    some_closure(&value)\n-}\n-```\n-\n-# Function pointers and closures\n-\n-A function pointer is kind of like a closure that has no environment. As such,\n-you can pass a function pointer to any function expecting a closure argument,\n-and it will work:\n-\n-```rust\n-fn call_with_one(some_closure: &Fn(i32) -> i32) -> i32 {\n-    some_closure(1)\n-}\n-\n-fn add_one(i: i32) -> i32 {\n-    i + 1\n-}\n-\n-let f = add_one;\n-\n-let answer = call_with_one(&f);\n-\n-assert_eq!(2, answer);\n-```\n-\n-In this example, we don\u2019t strictly need the intermediate variable `f`,\n-the name of the function works just fine too:\n-\n-```rust,ignore\n-let answer = call_with_one(&add_one);\n-```\n-\n-# Returning closures\n-\n-It\u2019s very common for functional-style code to return closures in various\n-situations. If you try to return a closure, you may run into an error. At\n-first, it may seem strange, but we\u2019ll figure it out. Here\u2019s how you\u2019d probably\n-try to return a closure from a function:\n-\n-```rust,ignore\n-fn factory() -> (Fn(i32) -> i32) {\n-    let num = 5;\n-\n-    |x| x + num\n-}\n-\n-let f = factory();\n-\n-let answer = f(1);\n-assert_eq!(6, answer);\n-```\n-\n-This gives us these long, related errors:\n-\n-```text\n-error: the trait bound `core::ops::Fn(i32) -> i32 : core::marker::Sized` is not satisfied [E0277]\n-fn factory() -> (Fn(i32) -> i32) {\n-                ^~~~~~~~~~~~~~~~\n-note: `core::ops::Fn(i32) -> i32` does not have a constant size known at compile-time\n-fn factory() -> (Fn(i32) -> i32) {\n-                ^~~~~~~~~~~~~~~~\n-error: the trait bound `core::ops::Fn(i32) -> i32 : core::marker::Sized` is not satisfied [E0277]\n-let f = factory();\n-    ^\n-note: `core::ops::Fn(i32) -> i32` does not have a constant size known at compile-time\n-let f = factory();\n-    ^\n-```\n-\n-In order to return something from a function, Rust needs to know what\n-size the return type is. But since `Fn` is a trait, it could be various\n-things of various sizes: many different types can implement `Fn`. An easy\n-way to give something a size is to take a reference to it, as references\n-have a known size. So we\u2019d write this:\n-\n-```rust,ignore\n-fn factory() -> &(Fn(i32) -> i32) {\n-    let num = 5;\n-\n-    |x| x + num\n-}\n-\n-let f = factory();\n-\n-let answer = f(1);\n-assert_eq!(6, answer);\n-```\n-\n-But we get another error:\n-\n-```text\n-error: missing lifetime specifier [E0106]\n-fn factory() -> &(Fn(i32) -> i32) {\n-                ^~~~~~~~~~~~~~~~~\n-```\n-\n-Right. Because we have a reference, we need to give it a lifetime. But\n-our `factory()` function takes no arguments, so\n-[elision](lifetimes.html#lifetime-elision) doesn\u2019t kick in here. Then what\n-choices do we have? Try `'static`:\n-\n-```rust,ignore\n-fn factory() -> &'static (Fn(i32) -> i32) {\n-    let num = 5;\n-\n-    |x| x + num\n-}\n-\n-let f = factory();\n-\n-let answer = f(1);\n-assert_eq!(6, answer);\n-```\n-\n-But we get another error:\n-\n-```text\n-error: mismatched types:\n- expected `&'static core::ops::Fn(i32) -> i32`,\n-    found `[closure@<anon>:7:9: 7:20]`\n-(expected &-ptr,\n-    found closure) [E0308]\n-         |x| x + num\n-         ^~~~~~~~~~~\n-\n-```\n-\n-This error is letting us know that we don\u2019t have a `&'static Fn(i32) -> i32`,\n-we have a `[closure@<anon>:7:9: 7:20]`. Wait, what?\n-\n-Because each closure generates its own environment `struct` and implementation\n-of `Fn` and friends, these types are anonymous. They exist solely for\n-this closure. So Rust shows them as `closure@<anon>`, rather than some\n-autogenerated name.\n-\n-The error also points out that the return type is expected to be a reference,\n-but what we are trying to return is not. Further, we cannot directly assign a\n-`'static` lifetime to an object. So we'll take a different approach and return\n-a \u2018trait object\u2019 by `Box`ing up the `Fn`. This _almost_ works:\n-\n-```rust,ignore\n-fn factory() -> Box<Fn(i32) -> i32> {\n-    let num = 5;\n-\n-    Box::new(|x| x + num)\n-}\n-\n-let f = factory();\n-\n-let answer = f(1);\n-assert_eq!(6, answer);\n-```\n-\n-There\u2019s just one last problem:\n-\n-```text\n-error: closure may outlive the current function, but it borrows `num`,\n-which is owned by the current function [E0373]\n-Box::new(|x| x + num)\n-         ^~~~~~~~~~~\n-```\n-\n-Well, as we discussed before, closures borrow their environment. And in this\n-case, our environment is based on a stack-allocated `5`, the `num` variable\n-binding. So the borrow has a lifetime of the stack frame. So if we returned\n-this closure, the function call would be over, the stack frame would go away,\n-and our closure is capturing an environment of garbage memory! With one last\n-fix, we can make this work:\n-\n-```rust\n-fn factory() -> Box<Fn(i32) -> i32> {\n-    let num = 5;\n-\n-    Box::new(move |x| x + num)\n-}\n-\n-let f = factory();\n-\n-let answer = f(1);\n-assert_eq!(6, answer);\n-```\n-\n-By making the inner closure a `move Fn`, we create a new stack frame for our\n-closure. By `Box`ing it up, we\u2019ve given it a known size, allowing it to\n-escape our stack frame."}, {"sha": "0e68ab218e843719a688504b232896d9e9de5321", "filename": "src/doc/book/src/comments.md", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fcomments.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fcomments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fcomments.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,59 +0,0 @@\n-# Comments\n-\n-Now that we have some functions, it\u2019s a good idea to learn about comments.\n-Comments are notes that you leave to other programmers to help explain things\n-about your code. The compiler mostly ignores them.\n-\n-Rust has two kinds of comments that you should care about: *line comments*\n-and *doc comments*.\n-\n-```rust\n-// Line comments are anything after \u2018//\u2019 and extend to the end of the line.\n-\n-let x = 5; // This is also a line comment.\n-\n-// If you have a long explanation for something, you can put line comments next\n-// to each other. Put a space between the // and your comment so that it\u2019s\n-// more readable.\n-```\n-\n-The other kind of comment is a doc comment. Doc comments use `///` instead of\n-`//`, and support Markdown notation inside:\n-\n-```rust\n-/// Adds one to the number given.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// let five = 5;\n-///\n-/// assert_eq!(6, add_one(5));\n-/// # fn add_one(x: i32) -> i32 {\n-/// #     x + 1\n-/// # }\n-/// ```\n-fn add_one(x: i32) -> i32 {\n-    x + 1\n-}\n-```\n-\n-There is another style of doc comment, `//!`, to comment containing items (e.g.\n-crates, modules or functions), instead of the items following it. Commonly used\n-inside crates root (lib.rs) or modules root (mod.rs):\n-\n-```\n-//! # The Rust Standard Library\n-//!\n-//! The Rust Standard Library provides the essential runtime\n-//! functionality for building portable Rust software.\n-```\n-\n-When writing doc comments, providing some examples of usage is very, very\n-helpful. You\u2019ll notice we\u2019ve used a new macro here: `assert_eq!`. This compares\n-two values, and `panic!`s if they\u2019re not equal to each other. It\u2019s very helpful\n-in documentation. There\u2019s another macro, `assert!`, which `panic!`s if the\n-value passed to it is `false`.\n-\n-You can use the [`rustdoc`](documentation.html) tool to generate HTML documentation\n-from these doc comments, and also to run the code examples as tests!"}, {"sha": "c05d808a947400202e8faa643807690c24123e8f", "filename": "src/doc/book/src/compiler-plugins.md", "status": "removed", "additions": 0, "deletions": 253, "changes": 253, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fcompiler-plugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fcompiler-plugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fcompiler-plugins.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,253 +0,0 @@\n-# Compiler Plugins\n-\n-## Introduction\n-\n-`rustc` can load compiler plugins, which are user-provided libraries that\n-extend the compiler's behavior with new syntax extensions, lint checks, etc.\n-\n-A plugin is a dynamic library crate with a designated *registrar* function that\n-registers extensions with `rustc`. Other crates can load these extensions using\n-the crate attribute `#![plugin(...)]`.  See the\n-`rustc_plugin` documentation for more about the\n-mechanics of defining and loading a plugin.\n-\n-If present, arguments passed as `#![plugin(foo(... args ...))]` are not\n-interpreted by rustc itself.  They are provided to the plugin through the\n-`Registry`'s `args` method.\n-\n-In the vast majority of cases, a plugin should *only* be used through\n-`#![plugin]` and not through an `extern crate` item.  Linking a plugin would\n-pull in all of libsyntax and librustc as dependencies of your crate.  This is\n-generally unwanted unless you are building another plugin.  The\n-`plugin_as_library` lint checks these guidelines.\n-\n-The usual practice is to put compiler plugins in their own crate, separate from\n-any `macro_rules!` macros or ordinary Rust code meant to be used by consumers\n-of a library.\n-\n-# Syntax extensions\n-\n-Plugins can extend Rust's syntax in various ways. One kind of syntax extension\n-is the procedural macro. These are invoked the same way as [ordinary\n-macros](macros.html), but the expansion is performed by arbitrary Rust\n-code that manipulates syntax trees at\n-compile time.\n-\n-Let's write a plugin\n-[`roman_numerals.rs`](https://github.com/rust-lang/rust/blob/master/src/test/run-pass-fulldeps/auxiliary/roman_numerals.rs)\n-that implements Roman numeral integer literals.\n-\n-```rust,ignore\n-#![crate_type=\"dylib\"]\n-#![feature(plugin_registrar, rustc_private)]\n-\n-extern crate syntax;\n-extern crate rustc;\n-extern crate rustc_plugin;\n-\n-use syntax::parse::token;\n-use syntax::tokenstream::TokenTree;\n-use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n-use syntax::ext::build::AstBuilder;  // A trait for expr_usize.\n-use syntax::ext::quote::rt::Span;\n-use rustc_plugin::Registry;\n-\n-fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n-        -> Box<MacResult + 'static> {\n-\n-    static NUMERALS: &'static [(&'static str, usize)] = &[\n-        (\"M\", 1000), (\"CM\", 900), (\"D\", 500), (\"CD\", 400),\n-        (\"C\",  100), (\"XC\",  90), (\"L\",  50), (\"XL\",  40),\n-        (\"X\",   10), (\"IX\",   9), (\"V\",   5), (\"IV\",   4),\n-        (\"I\",    1)];\n-\n-    if args.len() != 1 {\n-        cx.span_err(\n-            sp,\n-            &format!(\"argument should be a single identifier, but got {} arguments\", args.len()));\n-        return DummyResult::any(sp);\n-    }\n-\n-    let text = match args[0] {\n-        TokenTree::Token(_, token::Ident(s)) => s.to_string(),\n-        _ => {\n-            cx.span_err(sp, \"argument should be a single identifier\");\n-            return DummyResult::any(sp);\n-        }\n-    };\n-\n-    let mut text = &*text;\n-    let mut total = 0;\n-    while !text.is_empty() {\n-        match NUMERALS.iter().find(|&&(rn, _)| text.starts_with(rn)) {\n-            Some(&(rn, val)) => {\n-                total += val;\n-                text = &text[rn.len()..];\n-            }\n-            None => {\n-                cx.span_err(sp, \"invalid Roman numeral\");\n-                return DummyResult::any(sp);\n-            }\n-        }\n-    }\n-\n-    MacEager::expr(cx.expr_usize(sp, total))\n-}\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_macro(\"rn\", expand_rn);\n-}\n-```\n-\n-Then we can use `rn!()` like any other macro:\n-\n-```rust,ignore\n-#![feature(plugin)]\n-#![plugin(roman_numerals)]\n-\n-fn main() {\n-    assert_eq!(rn!(MMXV), 2015);\n-}\n-```\n-\n-The advantages over a simple `fn(&str) -> u32` are:\n-\n-* The (arbitrarily complex) conversion is done at compile time.\n-* Input validation is also performed at compile time.\n-* It can be extended to allow use in patterns, which effectively gives\n-  a way to define new literal syntax for any data type.\n-\n-In addition to procedural macros, you can define new\n-[`derive`](../reference/attributes.html#derive)-like attributes and other kinds of\n-extensions.  See `Registry::register_syntax_extension` and the `SyntaxExtension`\n-enum.  For a more involved macro example, see\n-[`regex_macros`](https://github.com/rust-lang/regex/blob/master/regex_macros/src/lib.rs).\n-\n-\n-## Tips and tricks\n-\n-Some of the [macro debugging tips](macros.html#debugging-macro-code) are applicable.\n-\n-You can use `syntax::parse` to turn token trees into\n-higher-level syntax elements like expressions:\n-\n-```rust,ignore\n-fn expand_foo(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n-        -> Box<MacResult+'static> {\n-\n-    let mut parser = cx.new_parser_from_tts(args);\n-\n-    let expr: P<Expr> = parser.parse_expr();\n-```\n-\n-Looking through [`libsyntax` parser\n-code](https://github.com/rust-lang/rust/blob/master/src/libsyntax/parse/parser.rs)\n-will give you a feel for how the parsing infrastructure works.\n-\n-Keep the `Span`s of everything you parse, for better error reporting. You can\n-wrap `Spanned` around your custom data structures.\n-\n-Calling `ExtCtxt::span_fatal` will immediately abort compilation. It's better to\n-instead call `ExtCtxt::span_err` and return `DummyResult` so that the compiler\n-can continue and find further errors.\n-\n-To print syntax fragments for debugging, you can use `span_note` together with\n-`syntax::print::pprust::*_to_string`.\n-\n-The example above produced an integer literal using `AstBuilder::expr_usize`.\n-As an alternative to the `AstBuilder` trait, `libsyntax` provides a set of\n-quasiquote macros. They are undocumented and very rough around the edges.\n-However, the implementation may be a good starting point for an improved\n-quasiquote as an ordinary plugin library.\n-\n-\n-# Lint plugins\n-\n-Plugins can extend [Rust's lint\n-infrastructure](../reference/attributes.html#lint-check-attributes) with\n-additional checks for code style, safety, etc. Now let's write a plugin\n-[`lint_plugin_test.rs`](https://github.com/rust-lang/rust/blob/master/src/test/run-pass-fulldeps/auxiliary/lint_plugin_test.rs)\n-that warns about any item named `lintme`.\n-\n-```rust,ignore\n-#![feature(plugin_registrar)]\n-#![feature(box_syntax, rustc_private)]\n-\n-extern crate syntax;\n-\n-// Load rustc as a plugin to get macros\n-#[macro_use]\n-extern crate rustc;\n-extern crate rustc_plugin;\n-\n-use rustc::lint::{EarlyContext, LintContext, LintPass, EarlyLintPass,\n-                  EarlyLintPassObject, LintArray};\n-use rustc_plugin::Registry;\n-use syntax::ast;\n-\n-declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n-\n-struct Pass;\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(TEST_LINT)\n-    }\n-}\n-\n-impl EarlyLintPass for Pass {\n-    fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n-        if it.ident.name.as_str() == \"lintme\" {\n-            cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\");\n-        }\n-    }\n-}\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_early_lint_pass(box Pass as EarlyLintPassObject);\n-}\n-```\n-\n-Then code like\n-\n-```rust,ignore\n-#![plugin(lint_plugin_test)]\n-\n-fn lintme() { }\n-```\n-\n-will produce a compiler warning:\n-\n-```txt\n-foo.rs:4:1: 4:16 warning: item is named 'lintme', #[warn(test_lint)] on by default\n-foo.rs:4 fn lintme() { }\n-         ^~~~~~~~~~~~~~~\n-```\n-\n-The components of a lint plugin are:\n-\n-* one or more `declare_lint!` invocations, which define static `Lint` structs;\n-\n-* a struct holding any state needed by the lint pass (here, none);\n-\n-* a `LintPass`\n-  implementation defining how to check each syntax element. A single\n-  `LintPass` may call `span_lint` for several different `Lint`s, but should\n-  register them all through the `get_lints` method.\n-\n-Lint passes are syntax traversals, but they run at a late stage of compilation\n-where type information is available. `rustc`'s [built-in\n-lints](https://github.com/rust-lang/rust/blob/master/src/librustc/lint/builtin.rs)\n-mostly use the same infrastructure as lint plugins, and provide examples of how\n-to access type information.\n-\n-Lints defined by plugins are controlled by the usual [attributes and compiler\n-flags](../reference/attributes.html#lint-check-attributes), e.g.\n-`#[allow(test_lint)]` or `-A test-lint`. These identifiers are derived from the\n-first argument to `declare_lint!`, with appropriate case and punctuation\n-conversion.\n-\n-You can run `rustc -W help foo.rs` to see a list of lints known to `rustc`,\n-including those provided by plugins loaded by `foo.rs`."}, {"sha": "afed379fe471ad8e16cd006ec3b5c0bd7b699c41", "filename": "src/doc/book/src/concurrency.md", "status": "removed", "additions": 0, "deletions": 465, "changes": 465, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fconcurrency.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,465 +0,0 @@\n-# Concurrency\n-\n-Concurrency and parallelism are incredibly important topics in computer\n-science, and are also a hot topic in industry today. Computers are gaining more\n-and more cores, yet many programmers aren't prepared to fully utilize them.\n-\n-Rust's memory safety features also apply to its concurrency story. Even\n-concurrent Rust programs must be memory safe, having no data races. Rust's type\n-system is up to the task, and gives you powerful ways to reason about\n-concurrent code at compile time.\n-\n-Before we talk about the concurrency features that come with Rust, it's important\n-to understand something: Rust is low-level enough that the vast majority of\n-this is provided by the standard library, not by the language. This means that\n-if you don't like some aspect of the way Rust handles concurrency, you can\n-implement an alternative way of doing things.\n-[mio](https://github.com/carllerche/mio) is a real-world example of this\n-principle in action.\n-\n-## Background: `Send` and `Sync`\n-\n-Concurrency is difficult to reason about. In Rust, we have a strong, static\n-type system to help us reason about our code. As such, Rust gives us two traits\n-to help us make sense of code that can possibly be concurrent.\n-\n-### `Send`\n-\n-The first trait we're going to talk about is\n-[`Send`](../std/marker/trait.Send.html). When a type `T` implements `Send`, it\n-indicates that something of this type is able to have ownership transferred\n-safely between threads.\n-\n-This is important to enforce certain restrictions. For example, if we have a\n-channel connecting two threads, we would want to be able to send some data\n-down the channel and to the other thread. Therefore, we'd ensure that `Send` was\n-implemented for that type.\n-\n-In the opposite way, if we were wrapping a library with [FFI][ffi] that isn't\n-thread-safe, we wouldn't want to implement `Send`, and so the compiler will help\n-us enforce that it can't leave the current thread.\n-\n-[ffi]: ffi.html\n-\n-### `Sync`\n-\n-The second of these traits is called [`Sync`](../std/marker/trait.Sync.html).\n-When a type `T` implements `Sync`, it indicates that something\n-of this type has no possibility of introducing memory unsafety when used from\n-multiple threads concurrently through shared references. This implies that\n-types which don't have [interior mutability](mutability.html) are inherently\n-`Sync`, which includes simple primitive types (like `u8`) and aggregate types\n-containing them.\n-\n-For sharing references across threads, Rust provides a wrapper type called\n-`Arc<T>`. `Arc<T>` implements `Send` and `Sync` if and only if `T` implements\n-both `Send` and `Sync`. For example, an object of type `Arc<RefCell<U>>` cannot\n-be transferred across threads because\n-[`RefCell`](choosing-your-guarantees.html#refcellt) does not implement\n-`Sync`, consequently `Arc<RefCell<U>>` would not implement `Send`.\n-\n-These two traits allow you to use the type system to make strong guarantees\n-about the properties of your code under concurrency. Before we demonstrate\n-why, we need to learn how to create a concurrent Rust program in the first\n-place!\n-\n-## Threads\n-\n-Rust's standard library provides a library for threads, which allow you to\n-run Rust code in parallel. Here's a basic example of using `std::thread`:\n-\n-```rust\n-use std::thread;\n-\n-fn main() {\n-    thread::spawn(|| {\n-        println!(\"Hello from a thread!\");\n-    });\n-}\n-```\n-\n-The `thread::spawn()` method accepts a [closure](closures.html), which is executed in a\n-new thread. It returns a handle to the thread, that can be used to\n-wait for the child thread to finish and extract its result:\n-\n-```rust\n-use std::thread;\n-\n-fn main() {\n-    let handle = thread::spawn(|| {\n-        \"Hello from a thread!\"\n-    });\n-\n-    println!(\"{}\", handle.join().unwrap());\n-}\n-```\n-\n-As closures can capture variables from their environment, we can also try to\n-bring some data into the other thread:\n-\n-```rust,ignore\n-use std::thread;\n-\n-fn main() {\n-    let x = 1;\n-    thread::spawn(|| {\n-        println!(\"x is {}\", x);\n-    });\n-}\n-```\n-\n-However, this gives us an error:\n-\n-```text\n-5:19: 7:6 error: closure may outlive the current function, but it\n-                 borrows `x`, which is owned by the current function\n-...\n-5:19: 7:6 help: to force the closure to take ownership of `x` (and any other referenced variables),\n-          use the `move` keyword, as shown:\n-      thread::spawn(move || {\n-          println!(\"x is {}\", x);\n-      });\n-```\n-\n-This is because by default closures capture variables by reference, and thus the\n-closure only captures a _reference to `x`_. This is a problem, because the\n-thread may outlive the scope of `x`, leading to a dangling pointer.\n-\n-To fix this, we use a `move` closure as mentioned in the error message. `move`\n-closures are explained in depth [here](closures.html#move-closures); basically\n-they move variables from their environment into themselves.\n-\n-```rust\n-use std::thread;\n-\n-fn main() {\n-    let x = 1;\n-    thread::spawn(move || {\n-        println!(\"x is {}\", x);\n-    });\n-}\n-```\n-\n-Many languages have the ability to execute threads, but it's wildly unsafe.\n-There are entire books about how to prevent errors that occur from shared\n-mutable state. Rust helps out with its type system here as well, by preventing\n-data races at compile time. Let's talk about how you actually share things\n-between threads.\n-\n-## Safe Shared Mutable State\n-\n-Due to Rust's type system, we have a concept that sounds like a lie: \"safe\n-shared mutable state.\" Many programmers agree that shared mutable state is\n-very, very bad.\n-\n-Someone once said this:\n-\n-> Shared mutable state is the root of all evil. Most languages attempt to deal\n-> with this problem through the 'mutable' part, but Rust deals with it by\n-> solving the 'shared' part.\n-\n-The same [ownership system](ownership.html) that helps prevent using pointers\n-incorrectly also helps rule out data races, one of the worst kinds of\n-concurrency bugs.\n-\n-As an example, here is a Rust program that would have a data race in many\n-languages. It will not compile:\n-\n-```rust,ignore\n-use std::thread;\n-use std::time::Duration;\n-\n-fn main() {\n-    let mut data = vec![1, 2, 3];\n-\n-    for i in 0..3 {\n-        thread::spawn(move || {\n-            data[0] += i;\n-        });\n-    }\n-\n-    thread::sleep(Duration::from_millis(50));\n-}\n-```\n-\n-This gives us an error:\n-\n-```text\n-8:17 error: capture of moved value: `data`\n-        data[0] += i;\n-        ^~~~\n-```\n-\n-Rust knows this wouldn't be safe! If we had a reference to `data` in each\n-thread, and the thread takes ownership of the reference, we'd have three owners!\n-`data` gets moved out of `main` in the first call to `spawn()`, so subsequent\n-calls in the loop cannot use this variable.\n-\n-So, we need some type that lets us have more than one owning reference to a\n-value. Usually, we'd use `Rc<T>` for this, which is a reference counted type\n-that provides shared ownership. It has some runtime bookkeeping that keeps track\n-of the number of references to it, hence the \"reference count\" part of its name.\n-\n-Calling `clone()` on an `Rc<T>` will return a new owned reference and bump the\n-internal reference count. We create one of these for each thread:\n-\n-\n-```rust,ignore\n-use std::thread;\n-use std::time::Duration;\n-use std::rc::Rc;\n-\n-fn main() {\n-    let mut data = Rc::new(vec![1, 2, 3]);\n-\n-    for i in 0..3 {\n-        // Create a new owned reference:\n-        let data_ref = data.clone();\n-\n-        // Use it in a thread:\n-        thread::spawn(move || {\n-            data_ref[0] += i;\n-        });\n-    }\n-\n-    thread::sleep(Duration::from_millis(50));\n-}\n-```\n-\n-This won't work, however, and will give us the error:\n-\n-```text\n-13:9: 13:22 error: the trait bound `alloc::rc::Rc<collections::vec::Vec<i32>> : core::marker::Send`\n-            is not satisfied\n-...\n-13:9: 13:22 note: `alloc::rc::Rc<collections::vec::Vec<i32>>`\n-            cannot be sent between threads safely\n-```\n-\n-As the error message mentions, `Rc` cannot be sent between threads safely. This\n-is because the internal reference count is not maintained in a thread safe\n-matter and can have a data race.\n-\n-To solve this, we'll use `Arc<T>`, Rust's standard atomic reference count type.\n-\n-The Atomic part means `Arc<T>` can safely be accessed from multiple threads.\n-To do this the compiler guarantees that mutations of the internal count use\n-indivisible operations which can't have data races.\n-\n-In essence, `Arc<T>` is a type that lets us share ownership of data _across\n-threads_.\n-\n-\n-```rust,ignore\n-use std::thread;\n-use std::sync::Arc;\n-use std::time::Duration;\n-\n-fn main() {\n-    let mut data = Arc::new(vec![1, 2, 3]);\n-\n-    for i in 0..3 {\n-        let data = data.clone();\n-        thread::spawn(move || {\n-            data[0] += i;\n-        });\n-    }\n-\n-    thread::sleep(Duration::from_millis(50));\n-}\n-```\n-\n-Similarly to last time, we use `clone()` to create a new owned handle.\n-This handle is then moved into the new thread.\n-\n-And... still gives us an error.\n-\n-```text\n-<anon>:11:24 error: cannot borrow immutable borrowed content as mutable\n-<anon>:11                    data[0] += i;\n-                             ^~~~\n-```\n-\n-`Arc<T>` by default has immutable contents. It allows the _sharing_ of data\n-between threads, but shared mutable data is unsafe\u2014and when threads are\n-involved\u2014can cause data races!\n-\n-\n-Usually when we wish to make something in an immutable position mutable, we use\n-`Cell<T>` or `RefCell<T>` which allow safe mutation via runtime checks or\n-otherwise (see also: [Choosing Your Guarantees](choosing-your-guarantees.html)).\n-However, similar to `Rc`, these are not thread safe. If we try using these, we\n-will get an error about these types not being `Sync`, and the code will fail to\n-compile.\n-\n-It looks like we need some type that allows us to safely mutate a shared value\n-across threads, for example a type that can ensure only one thread at a time is\n-able to mutate the value inside it at any one time.\n-\n-For that, we can use the `Mutex<T>` type!\n-\n-Here's the working version:\n-\n-```rust\n-use std::sync::{Arc, Mutex};\n-use std::thread;\n-use std::time::Duration;\n-\n-fn main() {\n-    let data = Arc::new(Mutex::new(vec![1, 2, 3]));\n-\n-    for i in 0..3 {\n-        let data = data.clone();\n-        thread::spawn(move || {\n-            let mut data = data.lock().unwrap();\n-            data[0] += i;\n-        });\n-    }\n-\n-    thread::sleep(Duration::from_millis(50));\n-}\n-```\n-\n-Note that the value of `i` is bound (copied) to the closure and not shared\n-among the threads.\n-\n-We're \"locking\" the mutex here. A mutex (short for \"mutual exclusion\"), as\n-mentioned, only allows one thread at a time to access a value. When we wish to\n-access the value, we use `lock()` on it. This will \"lock\" the mutex, and no\n-other thread will be able to lock it (and hence, do anything with the value)\n-until we're done with it. If a thread attempts to lock a mutex which is already\n-locked, it will wait until the other thread releases the lock.\n-\n-The lock \"release\" here is implicit; when the result of the lock (in this case,\n-`data`) goes out of scope, the lock is automatically released.\n-\n-Note that [`lock`](../std/sync/struct.Mutex.html#method.lock) method of\n-[`Mutex`](../std/sync/struct.Mutex.html) has this signature:\n-\n-```rust,ignore\n-fn lock(&self) -> LockResult<MutexGuard<T>>\n-```\n-\n-and because `Send` is not implemented for `MutexGuard<T>`, the guard cannot\n-cross thread boundaries, ensuring thread-locality of lock acquire and release.\n-\n-Let's examine the body of the thread more closely:\n-\n-```rust\n-# use std::sync::{Arc, Mutex};\n-# use std::thread;\n-# use std::time::Duration;\n-# fn main() {\n-#     let data = Arc::new(Mutex::new(vec![1, 2, 3]));\n-#     for i in 0..3 {\n-#         let data = data.clone();\n-thread::spawn(move || {\n-    let mut data = data.lock().unwrap();\n-    data[0] += i;\n-});\n-#     }\n-#     thread::sleep(Duration::from_millis(50));\n-# }\n-```\n-\n-First, we call `lock()`, which acquires the mutex's lock. Because this may fail,\n-it returns a `Result<T, E>`, and because this is just an example, we `unwrap()`\n-it to get a reference to the data. Real code would have more robust error handling\n-here. We're then free to mutate it, since we have the lock.\n-\n-Lastly, while the threads are running, we wait on a short timer. But\n-this is not ideal: we may have picked a reasonable amount of time to\n-wait but it's more likely we'll either be waiting longer than\n-necessary or not long enough, depending on just how much time the\n-threads actually take to finish computing when the program runs.\n-\n-A more precise alternative to the timer would be to use one of the\n-mechanisms provided by the Rust standard library for synchronizing\n-threads with each other. Let's talk about one of them: channels.\n-\n-## Channels\n-\n-Here's a version of our code that uses channels for synchronization, rather\n-than waiting for a specific time:\n-\n-```rust\n-use std::sync::{Arc, Mutex};\n-use std::thread;\n-use std::sync::mpsc;\n-\n-fn main() {\n-    let data = Arc::new(Mutex::new(0));\n-\n-    // `tx` is the \"transmitter\" or \"sender\".\n-    // `rx` is the \"receiver\".\n-    let (tx, rx) = mpsc::channel();\n-\n-    for _ in 0..10 {\n-        let (data, tx) = (data.clone(), tx.clone());\n-\n-        thread::spawn(move || {\n-            let mut data = data.lock().unwrap();\n-            *data += 1;\n-\n-            tx.send(()).unwrap();\n-        });\n-    }\n-\n-    for _ in 0..10 {\n-        rx.recv().unwrap();\n-    }\n-}\n-```\n-\n-We use the `mpsc::channel()` method to construct a new channel. We `send`\n-a simple `()` down the channel, and then wait for ten of them to come back.\n-\n-While this channel is sending a generic signal, we can send any data that\n-is `Send` over the channel!\n-\n-```rust\n-use std::thread;\n-use std::sync::mpsc;\n-\n-fn main() {\n-    let (tx, rx) = mpsc::channel();\n-\n-    for i in 0..10 {\n-        let tx = tx.clone();\n-\n-        thread::spawn(move || {\n-            let answer = i * i;\n-\n-            tx.send(answer).unwrap();\n-        });\n-    }\n-\n-    for _ in 0..10 {\n-        println!(\"{}\", rx.recv().unwrap());\n-    }\n-}\n-```\n-\n-Here we create 10 threads, asking each to calculate the square of a number (`i`\n-at the time of `spawn()`), and then `send()` back the answer over the channel.\n-\n-\n-## Panics\n-\n-A `panic!` will crash the currently executing thread. You can use Rust's\n-threads as a simple isolation mechanism:\n-\n-```rust\n-use std::thread;\n-\n-let handle = thread::spawn(move || {\n-    panic!(\"oops!\");\n-});\n-\n-let result = handle.join();\n-\n-assert!(result.is_err());\n-```\n-\n-`Thread.join()` gives us a `Result` back, which allows us to check if the thread\n-has panicked or not."}, {"sha": "0562e9fc430f68737a46c6d26ede8b9fbd01bd2f", "filename": "src/doc/book/src/conditional-compilation.md", "status": "removed", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fconditional-compilation.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fconditional-compilation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fconditional-compilation.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,91 +0,0 @@\n-# Conditional Compilation\n-\n-Rust has a special attribute, `#[cfg]`, which allows you to compile code\n-based on a flag passed to the compiler. It has two forms:\n-\n-```rust\n-#[cfg(foo)]\n-# fn foo() {}\n-\n-#[cfg(bar = \"baz\")]\n-# fn bar() {}\n-```\n-\n-They also have some helpers:\n-\n-```rust\n-#[cfg(any(unix, windows))]\n-# fn foo() {}\n-\n-#[cfg(all(unix, target_pointer_width = \"32\"))]\n-# fn bar() {}\n-\n-#[cfg(not(foo))]\n-# fn not_foo() {}\n-```\n-\n-These can nest arbitrarily:\n-\n-```rust\n-#[cfg(any(not(unix), all(target_os=\"macos\", target_arch = \"powerpc\")))]\n-# fn foo() {}\n-```\n-\n-As for how to enable or disable these switches, if you\u2019re using Cargo,\n-they get set in the [`[features]` section][features] of your `Cargo.toml`:\n-\n-[features]: http://doc.crates.io/manifest.html#the-features-section\n-\n-```toml\n-[features]\n-# no features by default\n-default = []\n-\n-# Add feature \"foo\" here, then you can use it. \n-# Our \"foo\" feature depends on nothing else.\n-foo = []\n-```\n-\n-When you do this, Cargo passes along a flag to `rustc`:\n-\n-```text\n---cfg feature=\"${feature_name}\"\n-```\n-\n-The sum of these `cfg` flags will determine which ones get activated, and\n-therefore, which code gets compiled. Let\u2019s take this code:\n-\n-```rust\n-#[cfg(feature = \"foo\")]\n-mod foo {\n-}\n-```\n-\n-If we compile it with `cargo build --features \"foo\"`, it will send the `--cfg\n-feature=\"foo\"` flag to `rustc`, and the output will have the `mod foo` in it.\n-If we compile it with a regular `cargo build`, no extra flags get passed on,\n-and so, no `foo` module will exist.\n-\n-# cfg_attr\n-\n-You can also set another attribute based on a `cfg` variable with `cfg_attr`:\n-\n-```rust\n-#[cfg_attr(a, b)]\n-# fn foo() {}\n-```\n-\n-Will be the same as `#[b]` if `a` is set by `cfg` attribute, and nothing otherwise.\n-\n-# cfg!\n-\n-The `cfg!` macro lets you use these kinds of flags elsewhere in your code, too:\n-\n-```rust\n-if cfg!(target_os = \"macos\") || cfg!(target_os = \"ios\") {\n-    println!(\"Think Different!\");\n-}\n-```\n-\n-These will be replaced by a `true` or `false` at compile-time, depending on the\n-configuration settings."}, {"sha": "66a48566bd7c4256a39210c2a73f5d042f4539e2", "filename": "src/doc/book/src/const-and-static.md", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fconst-and-static.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fconst-and-static.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fconst-and-static.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,83 +0,0 @@\n-# const and static\n-\n-Rust has a way of defining constants with the `const` keyword:\n-\n-```rust\n-const N: i32 = 5;\n-```\n-\n-Unlike [`let`][let] bindings, you must annotate the type of a `const`.\n-\n-[let]: variable-bindings.html\n-\n-Constants live for the entire lifetime of a program. More specifically,\n-constants in Rust have no fixed address in memory. This is because they\u2019re\n-effectively inlined to each place that they\u2019re used. References to the same\n-constant are not necessarily guaranteed to refer to the same memory address for\n-this reason.\n-\n-# `static`\n-\n-Rust provides a \u2018global variable\u2019 sort of facility in static items. They\u2019re\n-similar to constants, but static items aren\u2019t inlined upon use. This means that\n-there is only one instance for each value, and it\u2019s at a fixed location in\n-memory.\n-\n-Here\u2019s an example:\n-\n-```rust\n-static N: i32 = 5;\n-```\n-\n-Unlike [`let`][let] bindings, you must annotate the type of a `static`.\n-\n-Statics live for the entire lifetime of a program, and therefore any\n-reference stored in a static has a [`'static` lifetime][lifetimes]:\n-\n-```rust\n-static NAME: &'static str = \"Steve\";\n-```\n-\n-[lifetimes]: lifetimes.html\n-\n-## Mutability\n-\n-You can introduce mutability with the `mut` keyword:\n-\n-```rust\n-static mut N: i32 = 5;\n-```\n-\n-Because this is mutable, one thread could be updating `N` while another is\n-reading it, causing memory unsafety. As such both accessing and mutating a\n-`static mut` is [`unsafe`][unsafe], and so must be done in an `unsafe` block:\n-\n-```rust\n-# static mut N: i32 = 5;\n-\n-unsafe {\n-    N += 1;\n-\n-    println!(\"N: {}\", N);\n-}\n-```\n-\n-[unsafe]: unsafe.html\n-\n-Furthermore, any type stored in a `static` must be `Sync`, and must not have\n-a [`Drop`][drop] implementation.\n-\n-[drop]: drop.html\n-\n-# Initializing\n-\n-Both `const` and `static` have requirements for giving them a value. They must\n-be given a value that\u2019s a constant expression. In other words, you cannot use\n-the result of a function call or anything similarly complex or at runtime.\n-\n-# Which construct should I use?\n-\n-Almost always, if you can choose between the two, choose `const`. It\u2019s pretty\n-rare that you actually want a memory location associated with your constant,\n-and using a `const` allows for optimizations like constant propagation not only\n-in your crate but downstream crates."}, {"sha": "84f5fac044e0e9604db602c43e6e97388c634c33", "filename": "src/doc/book/src/crates-and-modules.md", "status": "removed", "additions": 0, "deletions": 593, "changes": 593, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fcrates-and-modules.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fcrates-and-modules.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fcrates-and-modules.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,593 +0,0 @@\n-# Crates and Modules\n-\n-When a project starts getting large, it\u2019s considered good software\n-engineering practice to split it up into a bunch of smaller pieces, and then\n-fit them together. It is also important to have a well-defined interface, so\n-that some of your functionality is private, and some is public. To facilitate\n-these kinds of things, Rust has a module system.\n-\n-# Basic terminology: Crates and Modules\n-\n-Rust has two distinct terms that relate to the module system: \u2018crate\u2019 and\n-\u2018module\u2019. A crate is synonymous with a \u2018library\u2019 or \u2018package\u2019 in other\n-languages. Hence \u201cCargo\u201d as the name of Rust\u2019s package management tool: you\n-ship your crates to others with Cargo. Crates can produce an executable or a\n-library, depending on the project.\n-\n-Each crate has an implicit *root module* that contains the code for that crate.\n-You can then define a tree of sub-modules under that root module. Modules allow\n-you to partition your code within the crate itself.\n-\n-As an example, let\u2019s make a *phrases* crate, which will give us various phrases\n-in different languages. To keep things simple, we\u2019ll stick to \u2018greetings\u2019 and\n-\u2018farewells\u2019 as two kinds of phrases, and use English and Japanese (\u65e5\u672c\u8a9e) as\n-two languages for those phrases to be in. We\u2019ll use this module layout:\n-\n-```text\n-                                    +-----------+\n-                                +---| greetings |\n-                  +---------+   |   +-----------+\n-              +---| english |---+\n-              |   +---------+   |   +-----------+\n-              |                 +---| farewells |\n-+---------+   |                     +-----------+\n-| phrases |---+\n-+---------+   |                     +-----------+\n-              |                 +---| greetings |\n-              |   +----------+  |   +-----------+\n-              +---| japanese |--+\n-                  +----------+  |   +-----------+\n-                                +---| farewells |\n-                                    +-----------+\n-```\n-\n-In this example, `phrases` is the name of our crate. All of the rest are\n-modules.  You can see that they form a tree, branching out from the crate\n-*root*, which is the root of the tree: `phrases` itself.\n-\n-Now that we have a plan, let\u2019s define these modules in code. To start,\n-generate a new crate with Cargo:\n-\n-```bash\n-$ cargo new phrases\n-$ cd phrases\n-```\n-\n-If you remember, this generates a simple project for us:\n-\n-```bash\n-$ tree .\n-.\n-\u251c\u2500\u2500 Cargo.toml\n-\u2514\u2500\u2500 src\n-    \u2514\u2500\u2500 lib.rs\n-\n-1 directory, 2 files\n-```\n-\n-`src/lib.rs` is our crate root, corresponding to the `phrases` in our diagram\n-above.\n-\n-# Defining Modules\n-\n-To define each of our modules, we use the `mod` keyword. Let\u2019s make our\n-`src/lib.rs` look like this:\n-\n-```rust\n-mod english {\n-    mod greetings {\n-    }\n-\n-    mod farewells {\n-    }\n-}\n-\n-mod japanese {\n-    mod greetings {\n-    }\n-\n-    mod farewells {\n-    }\n-}\n-```\n-\n-After the `mod` keyword, you give the name of the module. Module names follow\n-the conventions for other Rust identifiers: `lower_snake_case`. The contents of\n-each module are within curly braces (`{}`).\n-\n-Within a given `mod`, you can declare sub-`mod`s. We can refer to sub-modules\n-with double-colon (`::`) notation: our four nested modules are\n-`english::greetings`, `english::farewells`, `japanese::greetings`, and\n-`japanese::farewells`. Because these sub-modules are namespaced under their\n-parent module, the names don\u2019t conflict: `english::greetings` and\n-`japanese::greetings` are distinct, even though their names are both\n-`greetings`.\n-\n-Because this crate does not have a `main()` function, and is called `lib.rs`,\n-Cargo will build this crate as a library:\n-\n-```bash\n-$ cargo build\n-   Compiling phrases v0.0.1 (file:///home/you/projects/phrases)\n-$ ls target/debug\n-build  deps  examples  libphrases-a7448e02a0468eaa.rlib  native\n-```\n-\n-`libphrases-<hash>.rlib` is the compiled crate. Before we see how to use this\n-crate from another crate, let\u2019s break it up into multiple files.\n-\n-# Multiple File Crates\n-\n-If each crate were just one file, these files would get very large. It\u2019s often\n-easier to split up crates into multiple files, and Rust supports this in two\n-ways.\n-\n-Instead of declaring a module like this:\n-\n-```rust,ignore\n-mod english {\n-    // Contents of our module go here.\n-}\n-```\n-\n-We can instead declare our module like this:\n-\n-```rust,ignore\n-mod english;\n-```\n-\n-If we do that, Rust will expect to find either a `english.rs` file, or a\n-`english/mod.rs` file with the contents of our module.\n-\n-Note that in these files, you don\u2019t need to re-declare the module: that\u2019s\n-already been done with the initial `mod` declaration.\n-\n-Using these two techniques, we can break up our crate into two directories and\n-seven files:\n-\n-```bash\n-$ tree .\n-.\n-\u251c\u2500\u2500 Cargo.lock\n-\u251c\u2500\u2500 Cargo.toml\n-\u251c\u2500\u2500 src\n-\u2502\u00a0\u00a0 \u251c\u2500\u2500 english\n-\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 farewells.rs\n-\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 greetings.rs\n-\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mod.rs\n-\u2502\u00a0\u00a0 \u251c\u2500\u2500 japanese\n-\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 farewells.rs\n-\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 greetings.rs\n-\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mod.rs\n-\u2502\u00a0\u00a0 \u2514\u2500\u2500 lib.rs\n-\u2514\u2500\u2500 target\n-    \u2514\u2500\u2500 debug\n-        \u251c\u2500\u2500 build\n-        \u251c\u2500\u2500 deps\n-        \u251c\u2500\u2500 examples\n-        \u251c\u2500\u2500 libphrases-a7448e02a0468eaa.rlib\n-        \u2514\u2500\u2500 native\n-```\n-\n-`src/lib.rs` is our crate root, and looks like this:\n-\n-```rust,ignore\n-mod english;\n-mod japanese;\n-```\n-\n-These two declarations tell Rust to look for either `src/english.rs` and\n-`src/japanese.rs`, or `src/english/mod.rs` and `src/japanese/mod.rs`, depending\n-on our preference. In this case, because our modules have sub-modules, we\u2019ve\n-chosen the second. Both `src/english/mod.rs` and `src/japanese/mod.rs` look\n-like this:\n-\n-```rust,ignore\n-mod greetings;\n-mod farewells;\n-```\n-\n-Again, these declarations tell Rust to look for either\n-`src/english/greetings.rs`, `src/english/farewells.rs`,\n-`src/japanese/greetings.rs` and `src/japanese/farewells.rs` or\n-`src/english/greetings/mod.rs`, `src/english/farewells/mod.rs`,\n-`src/japanese/greetings/mod.rs` and\n-`src/japanese/farewells/mod.rs`. Because these sub-modules don\u2019t have\n-their own sub-modules, we\u2019ve chosen to make them\n-`src/english/greetings.rs`, `src/english/farewells.rs`,\n-`src/japanese/greetings.rs` and `src/japanese/farewells.rs`. Whew!\n-\n-The contents of `src/english/greetings.rs`,\n-`src/english/farewells.rs`, `src/japanese/greetings.rs` and\n-`src/japanese/farewells.rs` are all empty at the moment. Let\u2019s add\n-some functions.\n-\n-Put this in `src/english/greetings.rs`:\n-\n-```rust\n-fn hello() -> String {\n-    \"Hello!\".to_string()\n-}\n-```\n-\n-Put this in `src/english/farewells.rs`:\n-\n-```rust\n-fn goodbye() -> String {\n-    \"Goodbye.\".to_string()\n-}\n-```\n-\n-Put this in `src/japanese/greetings.rs`:\n-\n-```rust\n-fn hello() -> String {\n-    \"\u3053\u3093\u306b\u3061\u306f\".to_string()\n-}\n-```\n-\n-Of course, you can copy and paste this from this web page, or type\n-something else. It\u2019s not important that you actually put \u2018konnichiwa\u2019 to learn\n-about the module system.\n-\n-Put this in `src/japanese/farewells.rs`:\n-\n-```rust\n-fn goodbye() -> String {\n-    \"\u3055\u3088\u3046\u306a\u3089\".to_string()\n-}\n-```\n-\n-(This is \u2018Say\u014dnara\u2019, if you\u2019re curious.)\n-\n-Now that we have some functionality in our crate, let\u2019s try to use it from\n-another crate.\n-\n-# Importing External Crates\n-\n-We have a library crate. Let\u2019s make an executable crate that imports and uses\n-our library.\n-\n-Make a `src/main.rs` and put this in it (it won\u2019t quite compile yet):\n-\n-```rust,ignore\n-extern crate phrases;\n-\n-fn main() {\n-    println!(\"Hello in English: {}\", phrases::english::greetings::hello());\n-    println!(\"Goodbye in English: {}\", phrases::english::farewells::goodbye());\n-\n-    println!(\"Hello in Japanese: {}\", phrases::japanese::greetings::hello());\n-    println!(\"Goodbye in Japanese: {}\", phrases::japanese::farewells::goodbye());\n-}\n-```\n-\n-The `extern crate` declaration tells Rust that we need to compile and link to\n-the `phrases` crate. We can then use `phrases`\u2019 modules in this one. As we\n-mentioned earlier, you can use double colons to refer to sub-modules and the\n-functions inside of them.\n-\n-(Note: when importing a crate that has dashes in its name \"like-this\", which is\n-not a valid Rust identifier, it will be converted by changing the dashes to\n-underscores, so you would write `extern crate like_this;`.)\n-\n-Also, Cargo assumes that `src/main.rs` is the crate root of a binary crate,\n-rather than a library crate. Our package now has two crates: `src/lib.rs` and\n-`src/main.rs`. This pattern is quite common for executable crates: most\n-functionality is in a library crate, and the executable crate uses that\n-library. This way, other programs can also use the library crate, and it\u2019s also\n-a nice separation of concerns.\n-\n-This doesn\u2019t quite work yet, though. We get four errors that look similar to\n-this:\n-\n-```bash\n-$ cargo build\n-   Compiling phrases v0.0.1 (file:///home/you/projects/phrases)\n-src/main.rs:4:38: 4:72 error: function `hello` is private\n-src/main.rs:4     println!(\"Hello in English: {}\", phrases::english::greetings::hello());\n-                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-note: in expansion of format_args!\n-<std macros>:2:25: 2:58 note: expansion site\n-<std macros>:1:1: 2:62 note: in expansion of print!\n-<std macros>:3:1: 3:54 note: expansion site\n-<std macros>:1:1: 3:58 note: in expansion of println!\n-phrases/src/main.rs:4:5: 4:76 note: expansion site\n-```\n-\n-By default, everything is private in Rust. Let\u2019s talk about this in some more\n-depth.\n-\n-# Exporting a Public Interface\n-\n-Rust allows you to precisely control which aspects of your interface are\n-public, and so private is the default. To make things public, you use the `pub`\n-keyword. Let\u2019s focus on the `english` module first, so let\u2019s reduce our `src/main.rs`\n-to only this:\n-\n-```rust,ignore\n-extern crate phrases;\n-\n-fn main() {\n-    println!(\"Hello in English: {}\", phrases::english::greetings::hello());\n-    println!(\"Goodbye in English: {}\", phrases::english::farewells::goodbye());\n-}\n-```\n-\n-In our `src/lib.rs`, let\u2019s add `pub` to the `english` module declaration:\n-\n-```rust,ignore\n-pub mod english;\n-mod japanese;\n-```\n-\n-And in our `src/english/mod.rs`, let\u2019s make both `pub`:\n-\n-```rust,ignore\n-pub mod greetings;\n-pub mod farewells;\n-```\n-\n-In our `src/english/greetings.rs`, let\u2019s add `pub` to our `fn` declaration:\n-\n-```rust,ignore\n-pub fn hello() -> String {\n-    \"Hello!\".to_string()\n-}\n-```\n-\n-And also in `src/english/farewells.rs`:\n-\n-```rust,ignore\n-pub fn goodbye() -> String {\n-    \"Goodbye.\".to_string()\n-}\n-```\n-\n-Now, our crate compiles, albeit with warnings about not using the `japanese`\n-functions:\n-\n-```bash\n-$ cargo run\n-   Compiling phrases v0.0.1 (file:///home/you/projects/phrases)\n-src/japanese/greetings.rs:1:1: 3:2 warning: function is never used: `hello`, #[warn(dead_code)] on by default\n-src/japanese/greetings.rs:1 fn hello() -> String {\n-src/japanese/greetings.rs:2     \"\u3053\u3093\u306b\u3061\u306f\".to_string()\n-src/japanese/greetings.rs:3 }\n-src/japanese/farewells.rs:1:1: 3:2 warning: function is never used: `goodbye`, #[warn(dead_code)] on by default\n-src/japanese/farewells.rs:1 fn goodbye() -> String {\n-src/japanese/farewells.rs:2     \"\u3055\u3088\u3046\u306a\u3089\".to_string()\n-src/japanese/farewells.rs:3 }\n-     Running `target/debug/phrases`\n-Hello in English: Hello!\n-Goodbye in English: Goodbye.\n-```\n-\n-`pub` also applies to `struct`s and their member fields. In keeping with Rust\u2019s\n-tendency toward safety, simply making a `struct` public won't automatically\n-make its members public: you must mark the fields individually with `pub`.\n-\n-Now that our functions are public, we can use them. Great! However, typing out\n-`phrases::english::greetings::hello()` is very long and repetitive. Rust has\n-another keyword for importing names into the current scope, so that you can\n-refer to them with shorter names. Let\u2019s talk about `use`.\n-\n-# Importing Modules with `use`\n-\n-Rust has a `use` keyword, which allows us to import names into our local scope.\n-Let\u2019s change our `src/main.rs` to look like this:\n-\n-```rust,ignore\n-extern crate phrases;\n-\n-use phrases::english::greetings;\n-use phrases::english::farewells;\n-\n-fn main() {\n-    println!(\"Hello in English: {}\", greetings::hello());\n-    println!(\"Goodbye in English: {}\", farewells::goodbye());\n-}\n-```\n-\n-The two `use` lines import each module into the local scope, so we can refer to\n-the functions by a much shorter name. By convention, when importing functions, it\u2019s\n-considered best practice to import the module, rather than the function directly. In\n-other words, you _can_ do this:\n-\n-```rust,ignore\n-extern crate phrases;\n-\n-use phrases::english::greetings::hello;\n-use phrases::english::farewells::goodbye;\n-\n-fn main() {\n-    println!(\"Hello in English: {}\", hello());\n-    println!(\"Goodbye in English: {}\", goodbye());\n-}\n-```\n-\n-But it is not idiomatic. This is significantly more likely to introduce a\n-naming conflict. In our short program, it\u2019s not a big deal, but as it grows, it\n-becomes a problem. If we have conflicting names, Rust will give a compilation\n-error. For example, if we made the `japanese` functions public, and tried to do\n-this:\n-\n-```rust,ignore\n-extern crate phrases;\n-\n-use phrases::english::greetings::hello;\n-use phrases::japanese::greetings::hello;\n-\n-fn main() {\n-    println!(\"Hello in English: {}\", hello());\n-    println!(\"Hello in Japanese: {}\", hello());\n-}\n-```\n-\n-Rust will give us a compile-time error:\n-\n-```text\n-   Compiling phrases v0.0.1 (file:///home/you/projects/phrases)\n-src/main.rs:4:5: 4:40 error: a value named `hello` has already been imported in this module [E0252]\n-src/main.rs:4 use phrases::japanese::greetings::hello;\n-                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-error: aborting due to previous error\n-Could not compile `phrases`.\n-```\n-\n-If we\u2019re importing multiple names from the same module, we don\u2019t have to type it out\n-twice. Instead of this:\n-\n-```rust,ignore\n-use phrases::english::greetings;\n-use phrases::english::farewells;\n-```\n-\n-We can use this shortcut:\n-\n-```rust,ignore\n-use phrases::english::{greetings, farewells};\n-```\n-\n-## Re-exporting with `pub use`\n-\n-You don\u2019t only use `use` to shorten identifiers. You can also use it inside of your crate\n-to re-export a function inside another module. This allows you to present an external\n-interface that may not directly map to your internal code organization.\n-\n-Let\u2019s look at an example. Modify your `src/main.rs` to read like this:\n-\n-```rust,ignore\n-extern crate phrases;\n-\n-use phrases::english::{greetings,farewells};\n-use phrases::japanese;\n-\n-fn main() {\n-    println!(\"Hello in English: {}\", greetings::hello());\n-    println!(\"Goodbye in English: {}\", farewells::goodbye());\n-\n-    println!(\"Hello in Japanese: {}\", japanese::hello());\n-    println!(\"Goodbye in Japanese: {}\", japanese::goodbye());\n-}\n-```\n-\n-Then, modify your `src/lib.rs` to make the `japanese` mod public:\n-\n-```rust,ignore\n-pub mod english;\n-pub mod japanese;\n-```\n-\n-Next, make the two functions public, first in `src/japanese/greetings.rs`:\n-\n-```rust,ignore\n-pub fn hello() -> String {\n-    \"\u3053\u3093\u306b\u3061\u306f\".to_string()\n-}\n-```\n-\n-And then in `src/japanese/farewells.rs`:\n-\n-```rust,ignore\n-pub fn goodbye() -> String {\n-    \"\u3055\u3088\u3046\u306a\u3089\".to_string()\n-}\n-```\n-\n-Finally, modify your `src/japanese/mod.rs` to read like this:\n-\n-```rust,ignore\n-pub use self::greetings::hello;\n-pub use self::farewells::goodbye;\n-\n-mod greetings;\n-mod farewells;\n-```\n-\n-The `pub use` declaration brings the function into scope at this part of our\n-module hierarchy. Because we\u2019ve `pub use`d this inside of our `japanese`\n-module, we now have a `phrases::japanese::hello()` function and a\n-`phrases::japanese::goodbye()` function, even though the code for them lives in\n-`phrases::japanese::greetings::hello()` and\n-`phrases::japanese::farewells::goodbye()`. Our internal organization doesn\u2019t\n-define our external interface.\n-\n-Here we have a `pub use` for each function we want to bring into the\n-`japanese` scope. We could alternatively use the wildcard syntax to include\n-everything from `greetings` into the current scope: `pub use self::greetings::*`.\n-\n-What about the `self`? Well, by default, `use` declarations are absolute paths,\n-starting from your crate root. `self` makes that path relative to your current\n-place in the hierarchy instead. There\u2019s one more special form of `use`: you can\n-`use super::` to reach one level up the tree from your current location. Some\n-people like to think of `self` as `.` and `super` as `..`, from many shells\u2019\n-display for the current directory and the parent directory.\n-\n-Outside of `use`, paths are relative: `foo::bar()` refers to a function inside\n-of `foo` relative to where we are. If that\u2019s prefixed with `::`, as in\n-`::foo::bar()`, it refers to a different `foo`, an absolute path from your\n-crate root.\n-\n-This will build and run:\n-\n-```bash\n-$ cargo run\n-   Compiling phrases v0.0.1 (file:///home/you/projects/phrases)\n-     Running `target/debug/phrases`\n-Hello in English: Hello!\n-Goodbye in English: Goodbye.\n-Hello in Japanese: \u3053\u3093\u306b\u3061\u306f\n-Goodbye in Japanese: \u3055\u3088\u3046\u306a\u3089\n-```\n-\n-## Complex imports\n-\n-Rust offers several advanced options that can add compactness and\n-convenience to your `extern crate` and `use` statements. Here is an example:\n-\n-```rust,ignore\n-extern crate phrases as sayings;\n-\n-use sayings::japanese::greetings as ja_greetings;\n-use sayings::japanese::farewells::*;\n-use sayings::english::{self, greetings as en_greetings, farewells as en_farewells};\n-\n-fn main() {\n-    println!(\"Hello in English; {}\", en_greetings::hello());\n-    println!(\"And in Japanese: {}\", ja_greetings::hello());\n-    println!(\"Goodbye in English: {}\", english::farewells::goodbye());\n-    println!(\"Again: {}\", en_farewells::goodbye());\n-    println!(\"And in Japanese: {}\", goodbye());\n-}\n-```\n-\n-What's going on here?\n-\n-First, both `extern crate` and `use` allow renaming the thing that is being\n-imported. So the crate is still called \"phrases\", but here we will refer\n-to it as \"sayings\". Similarly, the first `use` statement pulls in the\n-`japanese::greetings` module from the crate, but makes it available as\n-`ja_greetings` as opposed to simply `greetings`. This can help to avoid\n-ambiguity when importing similarly-named items from different places.\n-\n-The second `use` statement uses a star glob to bring in all public symbols from\n-the `sayings::japanese::farewells` module. As you can see we can later refer to\n-the Japanese `goodbye` function with no module qualifiers. This kind of glob\n-should be used sparingly. It\u2019s worth noting that it only imports the public\n-symbols, even if the code doing the globbing is in the same module.\n-\n-The third `use` statement bears more explanation. It's using \"brace expansion\"\n-globbing to compress three `use` statements into one (this sort of syntax\n-may be familiar if you've written Linux shell scripts before). The\n-uncompressed form of this statement would be:\n-\n-```rust,ignore\n-use sayings::english;\n-use sayings::english::greetings as en_greetings;\n-use sayings::english::farewells as en_farewells;\n-```\n-\n-As you can see, the curly brackets compress `use` statements for several items\n-under the same path, and in this context `self` refers back to that path.\n-Note: The curly brackets cannot be nested or mixed with star globbing."}, {"sha": "8552a7c8b3425b56da83a615759af64c9f0288e5", "filename": "src/doc/book/src/deref-coercions.md", "status": "removed", "additions": 0, "deletions": 119, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fderef-coercions.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fderef-coercions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fderef-coercions.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,119 +0,0 @@\n-# `Deref` coercions\n-\n-The standard library provides a special trait, [`Deref`][deref]. It\u2019s normally\n-used to overload `*`, the dereference operator:\n-\n-```rust\n-use std::ops::Deref;\n-\n-struct DerefExample<T> {\n-    value: T,\n-}\n-\n-impl<T> Deref for DerefExample<T> {\n-    type Target = T;\n-\n-    fn deref(&self) -> &T {\n-        &self.value\n-    }\n-}\n-\n-fn main() {\n-    let x = DerefExample { value: 'a' };\n-    assert_eq!('a', *x);\n-}\n-```\n-\n-[deref]: ../std/ops/trait.Deref.html\n-\n-This is useful for writing custom pointer types. However, there\u2019s a language\n-feature related to `Deref`: \u2018deref coercions\u2019. Here\u2019s the rule: If you have a\n-type `U`, and it implements `Deref<Target=T>`, values of `&U` will\n-automatically coerce to a `&T`. Here\u2019s an example:\n-\n-```rust\n-fn foo(s: &str) {\n-    // Borrow a string for a second.\n-}\n-\n-// String implements Deref<Target=str>.\n-let owned = \"Hello\".to_string();\n-\n-// Therefore, this works:\n-foo(&owned);\n-```\n-\n-Using an ampersand in front of a value takes a reference to it. So `owned` is a\n-`String`, `&owned` is an `&String`, and since `impl Deref<Target=str> for\n-String`, `&String` will deref to `&str`, which `foo()` takes.\n-\n-That\u2019s it. This rule is one of the only places in which Rust does an automatic\n-conversion for you, but it adds a lot of flexibility. For example, the `Rc<T>`\n-type implements `Deref<Target=T>`, so this works:\n-\n-```rust\n-use std::rc::Rc;\n-\n-fn foo(s: &str) {\n-    // Borrow a string for a second.\n-}\n-\n-// String implements Deref<Target=str>.\n-let owned = \"Hello\".to_string();\n-let counted = Rc::new(owned);\n-\n-// Therefore, this works:\n-foo(&counted);\n-```\n-\n-All we\u2019ve done is wrap our `String` in an `Rc<T>`. But we can now pass the\n-`Rc<String>` around anywhere we\u2019d have a `String`. The signature of `foo`\n-didn\u2019t change, but works just as well with either type. This example has two\n-conversions: `&Rc<String>` to `&String` and then `&String` to `&str`. Rust will do\n-this as many times as possible until the types match.\n-\n-Another very common implementation provided by the standard library is:\n-\n-```rust\n-fn foo(s: &[i32]) {\n-    // Borrow a slice for a second.\n-}\n-\n-// Vec<T> implements Deref<Target=[T]>.\n-let owned = vec![1, 2, 3];\n-\n-foo(&owned);\n-```\n-\n-Vectors can `Deref` to a slice.\n-\n-## Deref and method calls\n-\n-`Deref` will also kick in when calling a method. Consider the following\n-example.\n-\n-```rust\n-struct Foo;\n-\n-impl Foo {\n-    fn foo(&self) { println!(\"Foo\"); }\n-}\n-\n-let f = &&Foo;\n-\n-f.foo();\n-```\n-\n-Even though `f` is a `&&Foo` and `foo` takes `&self`, this works. That\u2019s\n-because these things are the same:\n-\n-```rust,ignore\n-f.foo();\n-(&f).foo();\n-(&&f).foo();\n-(&&&&&&&&f).foo();\n-```\n-\n-A value of type `&&&&&&&&&&&&&&&&Foo` can still have methods defined on `Foo`\n-called, because the compiler will insert as many * operations as necessary to\n-get it right. And since it\u2019s inserting `*`s, that uses `Deref`."}, {"sha": "176a7e508c0ac651e39ae099a5c07dd61cc6737f", "filename": "src/doc/book/src/documentation.md", "status": "removed", "additions": 0, "deletions": 655, "changes": 655, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fdocumentation.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,655 +0,0 @@\n-# Documentation\n-\n-Documentation is an important part of any software project, and it's\n-first-class in Rust. Let's talk about the tooling Rust gives you to\n-document your project.\n-\n-## About `rustdoc`\n-\n-The Rust distribution includes a tool, `rustdoc`, that generates documentation.\n-`rustdoc` is also used by Cargo through `cargo doc`.\n-\n-Documentation can be generated in two ways: from source code, and from\n-standalone Markdown files.\n-\n-## Documenting source code\n-\n-The primary way of documenting a Rust project is through annotating the source\n-code. You can use documentation comments for this purpose:\n-\n-```rust,ignore\n-/// Constructs a new `Rc<T>`.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// use std::rc::Rc;\n-///\n-/// let five = Rc::new(5);\n-/// ```\n-pub fn new(value: T) -> Rc<T> {\n-    // Implementation goes here.\n-}\n-```\n-\n-This code generates documentation that looks [like this][rc-new]. I've left the\n-implementation out, with a regular comment in its place.\n-\n-The first thing to notice about this annotation is that it uses\n-`///` instead of `//`. The triple slash\n-indicates a documentation comment.\n-\n-Documentation comments are written in Markdown.\n-\n-Rust keeps track of these comments, and uses them when generating\n-documentation. This is important when documenting things like enums:\n-\n-```rust\n-/// The `Option` type. See [the module level documentation](index.html) for more.\n-enum Option<T> {\n-    /// No value\n-    None,\n-    /// Some value `T`\n-    Some(T),\n-}\n-```\n-\n-The above works, but this does not:\n-\n-```rust,ignore\n-/// The `Option` type. See [the module level documentation](index.html) for more.\n-enum Option<T> {\n-    None, /// No value\n-    Some(T), /// Some value `T`\n-}\n-```\n-\n-You'll get an error:\n-\n-```text\n-hello.rs:4:1: 4:2 error: expected ident, found `}`\n-hello.rs:4 }\n-           ^\n-```\n-\n-This [unfortunate error](https://github.com/rust-lang/rust/issues/22547) is\n-correct; documentation comments apply to the thing after them, and there's\n-nothing after that last comment.\n-\n-[rc-new]: ../std/rc/struct.Rc.html#method.new\n-\n-### Writing documentation comments\n-\n-Anyway, let's cover each part of this comment in detail:\n-\n-```rust\n-/// Constructs a new `Rc<T>`.\n-# fn foo() {}\n-```\n-\n-The first line of a documentation comment should be a short summary of its\n-functionality. One sentence. Just the basics. High level.\n-\n-```rust\n-///\n-/// Other details about constructing `Rc<T>`s, maybe describing complicated\n-/// semantics, maybe additional options, all kinds of stuff.\n-///\n-# fn foo() {}\n-```\n-\n-Our original example had just a summary line, but if we had more things to say,\n-we could have added more explanation in a new paragraph.\n-\n-#### Special sections\n-\n-Next, are special sections. These are indicated with a header, `#`. There\n-are four kinds of headers that are commonly used. They aren't special syntax,\n-just convention, for now.\n-\n-```rust\n-/// # Panics\n-# fn foo() {}\n-```\n-\n-Unrecoverable misuses of a function (i.e. programming errors) in Rust are\n-usually indicated by panics, which kill the whole current thread at the very\n-least. If your function has a non-trivial contract like this, that is\n-detected/enforced by panics, documenting it is very important.\n-\n-```rust\n-/// # Errors\n-# fn foo() {}\n-```\n-\n-If your function or method returns a `Result<T, E>`, then describing the\n-conditions under which it returns `Err(E)` is a nice thing to do. This is\n-slightly less important than `Panics`, because failure is encoded into the type\n-system, but it's still a good thing to do.\n-\n-```rust\n-/// # Safety\n-# fn foo() {}\n-```\n-\n-If your function is `unsafe`, you should explain which invariants the caller is\n-responsible for upholding.\n-\n-```rust\n-/// # Examples\n-///\n-/// ```\n-/// use std::rc::Rc;\n-///\n-/// let five = Rc::new(5);\n-/// ```\n-# fn foo() {}\n-```\n-\n-Fourth, `Examples`. Include one or more examples of using your function or\n-method, and your users will love you for it. These examples go inside of\n-code block annotations, which we'll talk about in a moment, and can have\n-more than one section:\n-\n-```rust\n-/// # Examples\n-///\n-/// Simple `&str` patterns:\n-///\n-/// ```\n-/// let v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\n-/// assert_eq!(v, vec![\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n-/// ```\n-///\n-/// More complex patterns with a lambda:\n-///\n-/// ```\n-/// let v: Vec<&str> = \"abc1def2ghi\".split(|c: char| c.is_numeric()).collect();\n-/// assert_eq!(v, vec![\"abc\", \"def\", \"ghi\"]);\n-/// ```\n-# fn foo() {}\n-```\n-\n-#### Code block annotations\n-\n-To write some Rust code in a comment, use the triple graves:\n-\n-```rust\n-/// ```\n-/// println!(\"Hello, world\");\n-/// ```\n-# fn foo() {}\n-```\n-\n-This will add code highlighting. If you are only showing plain text, put `text`\n-instead of `rust` after the triple graves (see below).\n-\n-## Documentation as tests\n-\n-Let's discuss our sample example documentation:\n-\n-```rust\n-/// ```\n-/// println!(\"Hello, world\");\n-/// ```\n-# fn foo() {}\n-```\n-\n-You'll notice that you don't need a `fn main()` or anything here. `rustdoc` will\n-automatically add a `main()` wrapper around your code, using heuristics to attempt\n-to put it in the right place. For example:\n-\n-```rust\n-/// ```\n-/// use std::rc::Rc;\n-///\n-/// let five = Rc::new(5);\n-/// ```\n-# fn foo() {}\n-```\n-\n-This will end up testing:\n-\n-```rust\n-fn main() {\n-    use std::rc::Rc;\n-    let five = Rc::new(5);\n-}\n-```\n-\n-Here's the full algorithm rustdoc uses to preprocess examples:\n-\n-1. Any leading `#![foo]` attributes are left intact as crate attributes.\n-2. Some common `allow` attributes are inserted, including\n-   `unused_variables`, `unused_assignments`, `unused_mut`,\n-   `unused_attributes`, and `dead_code`. Small examples often trigger\n-   these lints.\n-3. If the example does not contain `extern crate`, then `extern crate\n-   <mycrate>;` is inserted (note the lack of `#[macro_use]`).\n-4. Finally, if the example does not contain `fn main`, the remainder of the\n-   text is wrapped in `fn main() { your_code }`.\n-\n-This generated `fn main` can be a problem! If you have `extern crate` or a `mod`\n-statements in the example code that are referred to by `use` statements, they will\n-fail to resolve unless you include at least `fn main() {}` to inhibit step 4.\n-`#[macro_use] extern crate` also does not work except at the crate root, so when\n-testing macros an explicit `main` is always required. It doesn't have to clutter\n-up your docs, though -- keep reading!\n-\n-Sometimes this algorithm isn't enough, though. For example, all of these code samples\n-with `///` we've been talking about? The raw text:\n-\n-```text\n-/// Some documentation.\n-# fn foo() {}\n-```\n-\n-looks different than the output:\n-\n-```rust\n-/// Some documentation.\n-# fn foo() {}\n-```\n-\n-Yes, that's right: you can add lines that start with `# `, and they will\n-be hidden from the output, but will be used when compiling your code. You\n-can use this to your advantage. In this case, documentation comments need\n-to apply to some kind of function, so if I want to show you just a\n-documentation comment, I need to add a little function definition below\n-it. At the same time, it's only there to satisfy the compiler, so hiding\n-it makes the example more clear. You can use this technique to explain\n-longer examples in detail, while still preserving the testability of your\n-documentation.\n-\n-For example, imagine that we wanted to document this code:\n-\n-```rust\n-let x = 5;\n-let y = 6;\n-println!(\"{}\", x + y);\n-```\n-\n-We might want the documentation to end up looking like this:\n-\n-> First, we set `x` to five:\n->\n-> ```rust\n-> let x = 5;\n-> # let y = 6;\n-> # println!(\"{}\", x + y);\n-> ```\n->\n-> Next, we set `y` to six:\n->\n-> ```rust\n-> # let x = 5;\n-> let y = 6;\n-> # println!(\"{}\", x + y);\n-> ```\n->\n-> Finally, we print the sum of `x` and `y`:\n->\n-> ```rust\n-> # let x = 5;\n-> # let y = 6;\n-> println!(\"{}\", x + y);\n-> ```\n-\n-To keep each code block testable, we want the whole program in each block, but\n-we don't want the reader to see every line every time.  Here's what we put in\n-our source code:\n-\n-```text\n-    First, we set `x` to five:\n-\n-    ```rust\n-    let x = 5;\n-    # let y = 6;\n-    # println!(\"{}\", x + y);\n-    ```\n-\n-    Next, we set `y` to six:\n-\n-    ```rust\n-    # let x = 5;\n-    let y = 6;\n-    # println!(\"{}\", x + y);\n-    ```\n-\n-    Finally, we print the sum of `x` and `y`:\n-\n-    ```rust\n-    # let x = 5;\n-    # let y = 6;\n-    println!(\"{}\", x + y);\n-    ```\n-```\n-\n-By repeating all parts of the example, you can ensure that your example still\n-compiles, while only showing the parts that are relevant to that part of your\n-explanation.\n-\n-### Documenting macros\n-\n-Here\u2019s an example of documenting a macro:\n-\n-```rust\n-/// Panic with a given message unless an expression evaluates to true.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// # #[macro_use] extern crate foo;\n-/// # fn main() {\n-/// panic_unless!(1 + 1 == 2, \u201cMath is broken.\u201d);\n-/// # }\n-/// ```\n-///\n-/// ```rust,should_panic\n-/// # #[macro_use] extern crate foo;\n-/// # fn main() {\n-/// panic_unless!(true == false, \u201cI\u2019m broken.\u201d);\n-/// # }\n-/// ```\n-#[macro_export]\n-macro_rules! panic_unless {\n-    ($condition:expr, $($rest:expr),+) => ({ if ! $condition { panic!($($rest),+); } });\n-}\n-# fn main() {}\n-```\n-\n-You\u2019ll note three things: we need to add our own `extern crate` line, so that\n-we can add the `#[macro_use]` attribute. Second, we\u2019ll need to add our own\n-`main()` as well (for reasons discussed above). Finally, a judicious use of\n-`#` to comment out those two things, so they don\u2019t show up in the output.\n-\n-Another case where the use of `#` is handy is when you want to ignore\n-error handling. Lets say you want the following,\n-\n-```rust,ignore\n-/// use std::io;\n-/// let mut input = String::new();\n-/// try!(io::stdin().read_line(&mut input));\n-```\n-\n-The problem is that `try!` returns a `Result<T, E>` and test functions\n-don't return anything so this will give a mismatched types error.\n-\n-```rust,ignore\n-/// A doc test using try!\n-///\n-/// ```\n-/// use std::io;\n-/// # fn foo() -> io::Result<()> {\n-/// let mut input = String::new();\n-/// try!(io::stdin().read_line(&mut input));\n-/// # Ok(())\n-/// # }\n-/// ```\n-# fn foo() {}\n-```\n-\n-You can get around this by wrapping the code in a function. This catches\n-and swallows the `Result<T, E>` when running tests on the docs. This\n-pattern appears regularly in the standard library.\n-\n-### Running documentation tests\n-\n-To run the tests, either:\n-\n-```bash\n-$ rustdoc --test path/to/my/crate/root.rs\n-# or\n-$ cargo test\n-```\n-\n-That's right, `cargo test` tests embedded documentation too. **However,\n-`cargo test` will not test binary crates, only library ones.** This is\n-due to the way `rustdoc` works: it links against the library to be tested,\n-but with a binary, there\u2019s nothing to link to.\n-\n-There are a few more annotations that are useful to help `rustdoc` do the right\n-thing when testing your code:\n-\n-```rust\n-/// ```rust,ignore\n-/// fn foo() {\n-/// ```\n-# fn foo() {}\n-```\n-\n-The `ignore` directive tells Rust to ignore your code. This is almost never\n-what you want, as it's the most generic. Instead, consider annotating it\n-with `text` if it's not code, or using `#`s to get a working example that\n-only shows the part you care about.\n-\n-```rust\n-/// ```rust,should_panic\n-/// assert!(false);\n-/// ```\n-# fn foo() {}\n-```\n-\n-`should_panic` tells `rustdoc` that the code should compile correctly, but\n-not actually pass as a test.\n-\n-```rust\n-/// ```rust,no_run\n-/// loop {\n-///     println!(\"Hello, world\");\n-/// }\n-/// ```\n-# fn foo() {}\n-```\n-\n-The `no_run` attribute will compile your code, but not run it. This is\n-important for examples such as \"Here's how to retrieve a web page,\"\n-which you would want to ensure compiles, but might be run in a test\n-environment that has no network access.\n-\n-### Documenting modules\n-\n-Rust has another kind of doc comment, `//!`. This comment doesn't document the next item, but the enclosing item. In other words:\n-\n-```rust\n-mod foo {\n-    //! This is documentation for the `foo` module.\n-    //!\n-    //! # Examples\n-\n-    // ...\n-}\n-```\n-\n-This is where you'll see `//!` used most often: for module documentation. If\n-you have a module in `foo.rs`, you'll often open its code and see this:\n-\n-```rust\n-//! A module for using `foo`s.\n-//!\n-//! The `foo` module contains a lot of useful functionality blah blah blah...\n-```\n-\n-### Crate documentation\n-\n-Crates can be documented by placing an inner doc comment (`//!`) at the\n-beginning of the crate root, aka `lib.rs`:\n-\n-```rust\n-//! This is documentation for the `foo` crate.\n-//!\n-//! The foo crate is meant to be used for bar.\n-```\n-\n-### Documentation comment style\n-\n-Check out [RFC 505][rfc505] for full conventions around the style and format of\n-documentation.\n-\n-[rfc505]: https://github.com/rust-lang/rfcs/blob/master/text/0505-api-comment-conventions.md\n-\n-## Other documentation\n-\n-All of this behavior works in non-Rust source files too. Because comments\n-are written in Markdown, they're often `.md` files.\n-\n-When you write documentation in Markdown files, you don't need to prefix\n-the documentation with comments. For example:\n-\n-```rust\n-/// # Examples\n-///\n-/// ```\n-/// use std::rc::Rc;\n-///\n-/// let five = Rc::new(5);\n-/// ```\n-# fn foo() {}\n-```\n-\n-is:\n-\n-~~~markdown\n-# Examples\n-\n-```\n-use std::rc::Rc;\n-\n-let five = Rc::new(5);\n-```\n-~~~\n-\n-when it's in a Markdown file. There is one wrinkle though: Markdown files need\n-to have a title like this:\n-\n-```markdown\n-% The title\n-\n-This is the example documentation.\n-```\n-\n-This `%` line needs to be the very first line of the file.\n-\n-## `doc` attributes\n-\n-At a deeper level, documentation comments are syntactic sugar for documentation\n-attributes:\n-\n-```rust\n-/// this\n-# fn foo() {}\n-\n-#[doc=\"this\"]\n-# fn bar() {}\n-```\n-\n-are the same, as are these:\n-\n-```rust\n-//! this\n-\n-#![doc=\"this\"]\n-```\n-\n-You won't often see this attribute used for writing documentation, but it\n-can be useful when changing some options, or when writing a macro.\n-\n-### Re-exports\n-\n-`rustdoc` will show the documentation for a public re-export in both places:\n-\n-```rust,ignore\n-extern crate foo;\n-\n-pub use foo::bar;\n-```\n-\n-This will create documentation for `bar` both inside the documentation for the\n-crate `foo`, as well as the documentation for your crate. It will use the same\n-documentation in both places.\n-\n-This behavior can be suppressed with `no_inline`:\n-\n-```rust,ignore\n-extern crate foo;\n-\n-#[doc(no_inline)]\n-pub use foo::bar;\n-```\n-\n-## Missing documentation\n-\n-Sometimes you want to make sure that every single public thing in your project\n-is documented, especially when you are working on a library. Rust allows you to\n-to generate warnings or errors, when an item is missing documentation.\n-To generate warnings you use `warn`:\n-\n-```rust,ignore\n-#![warn(missing_docs)]\n-```\n-\n-And to generate errors you use `deny`:\n-\n-```rust,ignore\n-#![deny(missing_docs)]\n-```\n-\n-There are cases where you want to disable these warnings/errors to explicitly\n-leave something undocumented. This is done by using `allow`:\n-\n-```rust\n-#[allow(missing_docs)]\n-struct Undocumented;\n-```\n-\n-You might even want to hide items from the documentation completely:\n-\n-```rust\n-#[doc(hidden)]\n-struct Hidden;\n-```\n-\n-### Controlling HTML\n-\n-You can control a few aspects of the HTML that `rustdoc` generates through the\n-`#![doc]` version of the attribute:\n-\n-```rust,ignore\n-#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-       html_favicon_url = \"https://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"https://doc.rust-lang.org/\")]\n-```\n-\n-This sets a few different options, with a logo, favicon, and a root URL.\n-\n-### Configuring documentation tests\n-\n-You can also configure the way that `rustdoc` tests your documentation examples\n-through the `#![doc(test(..))]` attribute.\n-\n-```rust\n-#![doc(test(attr(allow(unused_variables), deny(warnings))))]\n-```\n-\n-This allows unused variables within the examples, but will fail the test for any\n-other lint warning thrown.\n-\n-## Generation options\n-\n-`rustdoc` also contains a few other options on the command line, for further customization:\n-\n-- `--html-in-header FILE`: includes the contents of FILE at the end of the\n-  `<head>...</head>` section.\n-- `--html-before-content FILE`: includes the contents of FILE directly after\n-  `<body>`, before the rendered content (including the search bar).\n-- `--html-after-content FILE`: includes the contents of FILE after all the rendered content.\n-\n-## Security note\n-\n-The Markdown in documentation comments is placed without processing into\n-the final webpage. Be careful with literal HTML:\n-\n-```rust\n-/// <script>alert(document.cookie)</script>\n-# fn foo() {}\n-```"}, {"sha": "53c507eba3f78b744d4391bf9afd9da460bf9fbf", "filename": "src/doc/book/src/drop.md", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fdrop.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fdrop.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fdrop.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,67 +0,0 @@\n-# Drop\n-\n-Now that we\u2019ve discussed traits, let\u2019s talk about a particular trait provided\n-by the Rust standard library, [`Drop`][drop]. The `Drop` trait provides a way\n-to run some code when a value goes out of scope. For example:\n-\n-[drop]: ../std/ops/trait.Drop.html\n-\n-```rust\n-struct HasDrop;\n-\n-impl Drop for HasDrop {\n-    fn drop(&mut self) {\n-        println!(\"Dropping!\");\n-    }\n-}\n-\n-fn main() {\n-    let x = HasDrop;\n-\n-    // Do stuff.\n-\n-} // `x` goes out of scope here.\n-```\n-\n-When `x` goes out of scope at the end of `main()`, the code for `Drop` will\n-run. `Drop` has one method, which is also called `drop()`. It takes a mutable\n-reference to `self`.\n-\n-That\u2019s it! The mechanics of `Drop` are very simple, but there are some\n-subtleties. For example, values are dropped in the opposite order they are\n-declared. Here\u2019s another example:\n-\n-```rust\n-struct Firework {\n-    strength: i32,\n-}\n-\n-impl Drop for Firework {\n-    fn drop(&mut self) {\n-        println!(\"BOOM times {}!!!\", self.strength);\n-    }\n-}\n-\n-fn main() {\n-    let firecracker = Firework { strength: 1 };\n-    let tnt = Firework { strength: 100 };\n-}\n-```\n-\n-This will output:\n-\n-```text\n-BOOM times 100!!!\n-BOOM times 1!!!\n-```\n-\n-The `tnt` goes off before the `firecracker` does, because it was declared\n-afterwards. Last in, first out.\n-\n-So what is `Drop` good for? Generally, `Drop` is used to clean up any resources\n-associated with a `struct`. For example, the [`Arc<T>` type][arc] is a\n-reference-counted type. When `Drop` is called, it will decrement the reference\n-count, and if the total number of references is zero, will clean up the\n-underlying value.\n-\n-[arc]: ../std/sync/struct.Arc.html"}, {"sha": "ce2dfe4eae27e5d3db0a5d2ecbb82c23436e8f2f", "filename": "src/doc/book/src/effective-rust.md", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Feffective-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Feffective-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Feffective-rust.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,8 +0,0 @@\n-# Effective Rust\n-\n-So you\u2019ve learned how to write some Rust code. But there\u2019s a difference between\n-writing *any* Rust code and writing *good* Rust code.\n-\n-This chapter consists of relatively independent tutorials which show you how to\n-take your Rust to the next level. Common patterns and standard library features\n-will be introduced. Read these sections in any order of your choosing."}, {"sha": "9cf5e6bfa21aca3f48731134bd4f66ece8f29421", "filename": "src/doc/book/src/enums.md", "status": "removed", "additions": 0, "deletions": 107, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fenums.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fenums.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fenums.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,107 +0,0 @@\n-# Enums\n-\n-An `enum` in Rust is a type that represents data that is one of\n-several possible variants. Each variant in the `enum` can optionally\n-have data associated with it:\n-\n-```rust\n-enum Message {\n-    Quit,\n-    ChangeColor(i32, i32, i32),\n-    Move { x: i32, y: i32 },\n-    Write(String),\n-}\n-```\n-\n-The syntax for defining variants resembles the syntaxes used to define structs:\n-you can have variants with no data (like unit-like structs), variants with named\n-data, and variants with unnamed data (like tuple structs). Unlike\n-separate struct definitions, however, an `enum` is a single type. A\n-value of the enum can match any of the variants. For this reason, an\n-enum is sometimes called a \u2018sum type\u2019: the set of possible values of the\n-enum is the sum of the sets of possible values for each variant.\n-\n-We use the `::` syntax to use the name of each variant: they\u2019re scoped by the name\n-of the `enum` itself. This allows both of these to work:\n-\n-```rust\n-# enum Message {\n-#     Move { x: i32, y: i32 },\n-# }\n-let x: Message = Message::Move { x: 3, y: 4 };\n-\n-enum BoardGameTurn {\n-    Move { squares: i32 },\n-    Pass,\n-}\n-\n-let y: BoardGameTurn = BoardGameTurn::Move { squares: 1 };\n-```\n-\n-Both variants are named `Move`, but since they\u2019re scoped to the name of\n-the enum, they can both be used without conflict.\n-\n-A value of an `enum` type contains information about which variant it is,\n-in addition to any data associated with that variant. This is sometimes\n-referred to as a \u2018tagged union\u2019, since the data includes a \u2018tag\u2019\n-indicating what type it is. The compiler uses this information to\n-enforce that you\u2019re accessing the data in the enum safely. For instance,\n-you can\u2019t simply try to destructure a value as if it were one of the\n-possible variants:\n-\n-```rust,ignore\n-fn process_color_change(msg: Message) {\n-    let Message::ChangeColor(r, g, b) = msg; // This causes a compile-time error.\n-}\n-```\n-\n-Not supporting these operations may seem rather limiting, but it\u2019s a limitation\n-which we can overcome. There are two ways: by implementing equality ourselves,\n-or by pattern matching variants with [`match`][match] expressions, which you\u2019ll\n-learn in the next section. We don\u2019t know enough about Rust to implement\n-equality yet, but we\u2019ll find out in the [`traits`][traits] section.\n-\n-[match]: match.html\n-[traits]: traits.html\n-\n-# Constructors as functions\n-\n-An `enum` constructor can also be used like a function. For example:\n-\n-```rust\n-# enum Message {\n-# Write(String),\n-# }\n-let m = Message::Write(\"Hello, world\".to_string());\n-```\n-\n-is the same as\n-\n-```rust\n-# enum Message {\n-# Write(String),\n-# }\n-fn foo(x: String) -> Message {\n-    Message::Write(x)\n-}\n-\n-let x = foo(\"Hello, world\".to_string());\n-```\n-\n-This is not immediately useful to us, but when we get to\n-[`closures`][closures], we\u2019ll talk about passing functions as arguments to\n-other functions. For example, with [`iterators`][iterators], we can do this\n-to convert a vector of `String`s into a vector of `Message::Write`s:\n-\n-```rust\n-# enum Message {\n-# Write(String),\n-# }\n-\n-let v = vec![\"Hello\".to_string(), \"World\".to_string()];\n-\n-let v1: Vec<Message> = v.into_iter().map(Message::Write).collect();\n-```\n-\n-[closures]: closures.html\n-[iterators]: iterators.html"}, {"sha": "c823c32a135bb272ad08328185a2d85f7928e7c0", "filename": "src/doc/book/src/error-handling.md", "status": "removed", "additions": 0, "deletions": 2213, "changes": 2213, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ferror-handling.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,2213 +0,0 @@\n-# Error Handling\n-\n-Like most programming languages, Rust encourages the programmer to handle\n-errors in a particular way. Generally speaking, error handling is divided into\n-two broad categories: exceptions and return values. Rust opts for return\n-values.\n-\n-In this section, we intend to provide a comprehensive treatment of how to deal\n-with errors in Rust. More than that, we will attempt to introduce error handling\n-one piece at a time so that you'll come away with a solid working knowledge of\n-how everything fits together.\n-\n-When done na\u00efvely, error handling in Rust can be verbose and annoying. This\n-section will explore those stumbling blocks and demonstrate how to use the\n-standard library to make error handling concise and ergonomic.\n-\n-# Table of Contents\n-\n-This section is very long, mostly because we start at the very beginning with\n-sum types and combinators, and try to motivate the way Rust does error handling\n-incrementally. As such, programmers with experience in other expressive type\n-systems may want to jump around.\n-\n-* [The Basics](#the-basics)\n-    * [Unwrapping explained](#unwrapping-explained)\n-    * [The `Option` type](#the-option-type)\n-        * [Composing `Option<T>` values](#composing-optiont-values)\n-    * [The `Result` type](#the-result-type)\n-        * [Parsing integers](#parsing-integers)\n-        * [The `Result` type alias idiom](#the-result-type-alias-idiom)\n-    * [A brief interlude: unwrapping isn't evil](#a-brief-interlude-unwrapping-isnt-evil)\n-* [Working with multiple error types](#working-with-multiple-error-types)\n-    * [Composing `Option` and `Result`](#composing-option-and-result)\n-    * [The limits of combinators](#the-limits-of-combinators)\n-    * [Early returns](#early-returns)\n-    * [The `try!` macro](#the-try-macro)\n-    * [Defining your own error type](#defining-your-own-error-type)\n-* [Standard library traits used for error handling](#standard-library-traits-used-for-error-handling)\n-    * [The `Error` trait](#the-error-trait)\n-    * [The `From` trait](#the-from-trait)\n-    * [The real `try!` macro](#the-real-try-macro)\n-    * [Composing custom error types](#composing-custom-error-types)\n-    * [Advice for library writers](#advice-for-library-writers)\n-* [Case study: A program to read population data](#case-study-a-program-to-read-population-data)\n-    * [Initial setup](#initial-setup)\n-    * [Argument parsing](#argument-parsing)\n-    * [Writing the logic](#writing-the-logic)\n-    * [Error handling with `Box<Error>`](#error-handling-with-boxerror)\n-    * [Reading from stdin](#reading-from-stdin)\n-    * [Error handling with a custom type](#error-handling-with-a-custom-type)\n-    * [Adding functionality](#adding-functionality)\n-* [The short story](#the-short-story)\n-\n-# The Basics\n-\n-You can think of error handling as using *case analysis* to determine whether\n-a computation was successful or not. As you will see, the key to ergonomic error\n-handling is reducing the amount of explicit case analysis the programmer has to\n-do while keeping code composable.\n-\n-Keeping code composable is important, because without that requirement, we\n-could [`panic`](../std/macro.panic.html) whenever we\n-come across something unexpected. (`panic` causes the current task to unwind,\n-and in most cases, the entire program aborts.) Here's an example:\n-\n-```rust,should_panic\n-// Guess a number between 1 and 10.\n-// If it matches the number we had in mind, return `true`. Else, return `false`.\n-fn guess(n: i32) -> bool {\n-    if n < 1 || n > 10 {\n-        panic!(\"Invalid number: {}\", n);\n-    }\n-    n == 5\n-}\n-\n-fn main() {\n-    guess(11);\n-}\n-```\n-\n-If you try running this code, the program will crash with a message like this:\n-\n-```text\n-thread 'main' panicked at 'Invalid number: 11', src/bin/panic-simple.rs:5\n-```\n-\n-Here's another example that is slightly less contrived. A program that accepts\n-an integer as an argument, doubles it and prints it.\n-\n-<span id=\"code-unwrap-double\"></span>\n-\n-```rust,should_panic\n-use std::env;\n-\n-fn main() {\n-    let mut argv = env::args();\n-    let arg: String = argv.nth(1).unwrap(); // error 1\n-    let n: i32 = arg.parse().unwrap(); // error 2\n-    println!(\"{}\", 2 * n);\n-}\n-```\n-\n-If you give this program zero arguments (error 1) or if the first argument\n-isn't an integer (error 2), the program will panic just like in the first\n-example.\n-\n-You can think of this style of error handling as similar to a bull running\n-through a china shop. The bull will get to where it wants to go, but it will\n-trample everything in the process.\n-\n-## Unwrapping explained\n-\n-In the previous example, we claimed\n-that the program would simply panic if it reached one of the two error\n-conditions, yet, the program does not include an explicit call to `panic` like\n-the first example. This is because the\n-panic is embedded in the calls to `unwrap`.\n-\n-To \u201cunwrap\u201d something in Rust is to say, \u201cGive me the result of the\n-computation, and if there was an error, panic and stop the program.\u201d\n-It would be better if we showed the code for unwrapping because it is so\n-simple, but to do that, we will first need to explore the `Option` and `Result`\n-types. Both of these types have a method called `unwrap` defined on them.\n-\n-### The `Option` type\n-\n-The `Option` type is [defined in the standard library][5]:\n-\n-```rust\n-enum Option<T> {\n-    None,\n-    Some(T),\n-}\n-```\n-\n-The `Option` type is a way to use Rust's type system to express the\n-*possibility of absence*. Encoding the possibility of absence into the type\n-system is an important concept because it will cause the compiler to force the\n-programmer to handle that absence. Let's take a look at an example that tries\n-to find a character in a string:\n-\n-<span id=\"code-option-ex-string-find\"></span>\n-\n-```rust\n-// Searches `haystack` for the Unicode character `needle`. If one is found, the\n-// byte offset of the character is returned. Otherwise, `None` is returned.\n-fn find(haystack: &str, needle: char) -> Option<usize> {\n-    for (offset, c) in haystack.char_indices() {\n-        if c == needle {\n-            return Some(offset);\n-        }\n-    }\n-    None\n-}\n-```\n-\n-Notice that when this function finds a matching character, it doesn't only\n-return the `offset`. Instead, it returns `Some(offset)`. `Some` is a variant or\n-a *value constructor* for the `Option` type. You can think of it as a function\n-with the type `fn<T>(value: T) -> Option<T>`. Correspondingly, `None` is also a\n-value constructor, except it has no arguments. You can think of `None` as a\n-function with the type `fn<T>() -> Option<T>`.\n-\n-This might seem like much ado about nothing, but this is only half of the\n-story. The other half is *using* the `find` function we've written. Let's try\n-to use it to find the extension in a file name.\n-\n-```rust\n-# fn find(haystack: &str, needle: char) -> Option<usize> { haystack.find(needle) }\n-fn main() {\n-    let file_name = \"foobar.rs\";\n-    match find(file_name, '.') {\n-        None => println!(\"No file extension found.\"),\n-        Some(i) => println!(\"File extension: {}\", &file_name[i+1..]),\n-    }\n-}\n-```\n-\n-This code uses [pattern matching][1] to do *case\n-analysis* on the `Option<usize>` returned by the `find` function. In fact, case\n-analysis is the only way to get at the value stored inside an `Option<T>`. This\n-means that you, as the programmer, must handle the case when an `Option<T>` is\n-`None` instead of `Some(t)`.\n-\n-But wait, what about `unwrap`, which we used [previously](#code-unwrap-double)?\n-There was no case analysis there! Instead, the case analysis was put inside the\n-`unwrap` method for you. You could define it yourself if you want:\n-\n-<span id=\"code-option-def-unwrap\"></span>\n-\n-```rust\n-enum Option<T> {\n-    None,\n-    Some(T),\n-}\n-\n-impl<T> Option<T> {\n-    fn unwrap(self) -> T {\n-        match self {\n-            Option::Some(val) => val,\n-            Option::None =>\n-              panic!(\"called `Option::unwrap()` on a `None` value\"),\n-        }\n-    }\n-}\n-```\n-\n-The `unwrap` method *abstracts away the case analysis*. This is precisely the thing\n-that makes `unwrap` ergonomic to use. Unfortunately, that `panic!` means that\n-`unwrap` is not composable: it is the bull in the china shop.\n-\n-### Composing `Option<T>` values\n-\n-In an [example from before](#code-option-ex-string-find),\n-we saw how to use `find` to discover the extension in a file name. Of course,\n-not all file names have a `.` in them, so it's possible that the file name has\n-no extension. This *possibility of absence* is encoded into the types using\n-`Option<T>`. In other words, the compiler will force us to address the\n-possibility that an extension does not exist. In our case, we only print out a\n-message saying as such.\n-\n-Getting the extension of a file name is a pretty common operation, so it makes\n-sense to put it into a function:\n-\n-```rust\n-# fn find(haystack: &str, needle: char) -> Option<usize> { haystack.find(needle) }\n-// Returns the extension of the given file name, where the extension is defined\n-// as all characters following the first `.`.\n-// If `file_name` has no `.`, then `None` is returned.\n-fn extension_explicit(file_name: &str) -> Option<&str> {\n-    match find(file_name, '.') {\n-        None => None,\n-        Some(i) => Some(&file_name[i+1..]),\n-    }\n-}\n-```\n-\n-(Pro-tip: don't use this code. Use the\n-[`extension`](../std/path/struct.Path.html#method.extension)\n-method in the standard library instead.)\n-\n-The code stays simple, but the important thing to notice is that the type of\n-`find` forces us to consider the possibility of absence. This is a good thing\n-because it means the compiler won't let us accidentally forget about the case\n-where a file name doesn't have an extension. On the other hand, doing explicit\n-case analysis like we've done in `extension_explicit` every time can get a bit\n-tiresome.\n-\n-In fact, the case analysis in `extension_explicit` follows a very common\n-pattern: *map* a function on to the value inside of an `Option<T>`, unless the\n-option is `None`, in which case, return `None`.\n-\n-Rust has parametric polymorphism, so it is very easy to define a combinator\n-that abstracts this pattern:\n-\n-<span id=\"code-option-map\"></span>\n-\n-```rust\n-fn map<F, T, A>(option: Option<T>, f: F) -> Option<A> where F: FnOnce(T) -> A {\n-    match option {\n-        None => None,\n-        Some(value) => Some(f(value)),\n-    }\n-}\n-```\n-\n-Indeed, `map` is [defined as a method][2] on `Option<T>` in the standard library.\n-As a method, it has a slightly different signature: methods take `self`, `&self`,\n-or `&mut self` as their first argument.\n-\n-Armed with our new combinator, we can rewrite our `extension_explicit` method\n-to get rid of the case analysis:\n-\n-```rust\n-# fn find(haystack: &str, needle: char) -> Option<usize> { haystack.find(needle) }\n-// Returns the extension of the given file name, where the extension is defined\n-// as all characters following the first `.`.\n-// If `file_name` has no `.`, then `None` is returned.\n-fn extension(file_name: &str) -> Option<&str> {\n-    find(file_name, '.').map(|i| &file_name[i+1..])\n-}\n-```\n-\n-One other pattern we commonly find is assigning a default value to the case\n-when an `Option` value is `None`. For example, maybe your program assumes that\n-the extension of a file is `rs` even if none is present. As you might imagine,\n-the case analysis for this is not specific to file extensions - it can work\n-with any `Option<T>`:\n-\n-```rust\n-fn unwrap_or<T>(option: Option<T>, default: T) -> T {\n-    match option {\n-        None => default,\n-        Some(value) => value,\n-    }\n-}\n-```\n-\n-Like with `map` above, the standard library implementation is a method instead\n-of a free function.\n-\n-The trick here is that the default value must have the same type as the value\n-that might be inside the `Option<T>`. Using it is dead simple in our case:\n-\n-```rust\n-# fn find(haystack: &str, needle: char) -> Option<usize> {\n-#     for (offset, c) in haystack.char_indices() {\n-#         if c == needle {\n-#             return Some(offset);\n-#         }\n-#     }\n-#     None\n-# }\n-#\n-# fn extension(file_name: &str) -> Option<&str> {\n-#     find(file_name, '.').map(|i| &file_name[i+1..])\n-# }\n-fn main() {\n-    assert_eq!(extension(\"foobar.csv\").unwrap_or(\"rs\"), \"csv\");\n-    assert_eq!(extension(\"foobar\").unwrap_or(\"rs\"), \"rs\");\n-}\n-```\n-\n-(Note that `unwrap_or` is [defined as a method][3] on `Option<T>` in the\n-standard library, so we use that here instead of the free-standing function we\n-defined above. Don't forget to check out the more general [`unwrap_or_else`][4]\n-method.)\n-\n-There is one more combinator that we think is worth paying special attention to:\n-`and_then`. It makes it easy to compose distinct computations that admit the\n-*possibility of absence*. For example, much of the code in this section is\n-about finding an extension given a file name. In order to do this, you first\n-need the file name which is typically extracted from a file *path*. While most\n-file paths have a file name, not *all* of them do. For example, `.`, `..` or\n-`/`.\n-\n-So, we are tasked with the challenge of finding an extension given a file\n-*path*. Let's start with explicit case analysis:\n-\n-```rust\n-# fn extension(file_name: &str) -> Option<&str> { None }\n-fn file_path_ext_explicit(file_path: &str) -> Option<&str> {\n-    match file_name(file_path) {\n-        None => None,\n-        Some(name) => match extension(name) {\n-            None => None,\n-            Some(ext) => Some(ext),\n-        }\n-    }\n-}\n-\n-fn file_name(file_path: &str) -> Option<&str> {\n-  // Implementation elided.\n-  unimplemented!()\n-}\n-```\n-\n-You might think that we could use the `map` combinator to reduce the case\n-analysis, but its type doesn't quite fit...\n-\n-```rust,ignore\n-fn file_path_ext(file_path: &str) -> Option<&str> {\n-    file_name(file_path).map(|x| extension(x)) // This causes a compilation error.\n-}\n-```\n-\n-The `map` function here wraps the value returned by the `extension` function\n-inside an `Option<_>` and since the `extension` function itself returns an\n-`Option<&str>` the expression `file_name(file_path).map(|x| extension(x))`\n-actually returns an `Option<Option<&str>>`.\n-\n-But since `file_path_ext` just returns `Option<&str>` (and not\n-`Option<Option<&str>>`) we get a compilation error.\n-\n-The result of the function taken by map as input is *always* [rewrapped with\n-`Some`](#code-option-map). Instead, we need something like `map`, but which\n-allows the caller to return a `Option<_>` directly without wrapping it in\n-another `Option<_>`.\n-\n-Its generic implementation is even simpler than `map`:\n-\n-```rust\n-fn and_then<F, T, A>(option: Option<T>, f: F) -> Option<A>\n-        where F: FnOnce(T) -> Option<A> {\n-    match option {\n-        None => None,\n-        Some(value) => f(value),\n-    }\n-}\n-```\n-\n-Now we can rewrite our `file_path_ext` function without explicit case analysis:\n-\n-```rust\n-# fn extension(file_name: &str) -> Option<&str> { None }\n-# fn file_name(file_path: &str) -> Option<&str> { None }\n-fn file_path_ext(file_path: &str) -> Option<&str> {\n-    file_name(file_path).and_then(extension)\n-}\n-```\n-\n-Side note: Since `and_then` essentially works like `map` but returns an\n-`Option<_>` instead of an `Option<Option<_>>` it is known as `flatmap` in some\n-other languages.\n-\n-The `Option` type has many other combinators [defined in the standard\n-library][5]. It is a good idea to skim this list and familiarize\n-yourself with what's available\u2014they can often reduce case analysis\n-for you. Familiarizing yourself with these combinators will pay\n-dividends because many of them are also defined (with similar\n-semantics) for `Result`, which we will talk about next.\n-\n-Combinators make using types like `Option` ergonomic because they reduce\n-explicit case analysis. They are also composable because they permit the caller\n-to handle the possibility of absence in their own way. Methods like `unwrap`\n-remove choices because they will panic if `Option<T>` is `None`.\n-\n-## The `Result` type\n-\n-The `Result` type is also\n-[defined in the standard library][6]:\n-\n-<span id=\"code-result-def\"></span>\n-\n-```rust\n-enum Result<T, E> {\n-    Ok(T),\n-    Err(E),\n-}\n-```\n-\n-The `Result` type is a richer version of `Option`. Instead of expressing the\n-possibility of *absence* like `Option` does, `Result` expresses the possibility\n-of *error*. Usually, the *error* is used to explain why the execution of some\n-computation failed. This is a strictly more general form of `Option`. Consider\n-the following type alias, which is semantically equivalent to the real\n-`Option<T>` in every way:\n-\n-```rust\n-type Option<T> = Result<T, ()>;\n-```\n-\n-This fixes the second type parameter of `Result` to always be `()` (pronounced\n-\u201cunit\u201d or \u201cempty tuple\u201d). Exactly one value inhabits the `()` type: `()`. (Yup,\n-the type and value level terms have the same notation!)\n-\n-The `Result` type is a way of representing one of two possible outcomes in a\n-computation. By convention, one outcome is meant to be expected or \u201c`Ok`\u201d while\n-the other outcome is meant to be unexpected or \u201c`Err`\u201d.\n-\n-Just like `Option`, the `Result` type also has an\n-[`unwrap` method\n-defined][7]\n-in the standard library. Let's define it:\n-\n-```rust\n-# enum Result<T, E> { Ok(T), Err(E) }\n-impl<T, E: ::std::fmt::Debug> Result<T, E> {\n-    fn unwrap(self) -> T {\n-        match self {\n-            Result::Ok(val) => val,\n-            Result::Err(err) =>\n-              panic!(\"called `Result::unwrap()` on an `Err` value: {:?}\", err),\n-        }\n-    }\n-}\n-```\n-\n-This is effectively the same as our [definition for\n-`Option::unwrap`](#code-option-def-unwrap), except it includes the\n-error value in the `panic!` message. This makes debugging easier, but\n-it also requires us to add a [`Debug`][8] constraint on the `E` type\n-parameter (which represents our error type). Since the vast majority\n-of types should satisfy the `Debug` constraint, this tends to work out\n-in practice. (`Debug` on a type simply means that there's a reasonable\n-way to print a human readable description of values with that type.)\n-\n-OK, let's move on to an example.\n-\n-### Parsing integers\n-\n-The Rust standard library makes converting strings to integers dead simple.\n-It's so easy in fact, that it is very tempting to write something like the\n-following:\n-\n-```rust\n-fn double_number(number_str: &str) -> i32 {\n-    2 * number_str.parse::<i32>().unwrap()\n-}\n-\n-fn main() {\n-    let n: i32 = double_number(\"10\");\n-    assert_eq!(n, 20);\n-}\n-```\n-\n-At this point, you should be skeptical of calling `unwrap`. For example, if\n-the string doesn't parse as a number, you'll get a panic:\n-\n-```text\n-thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: ParseIntError { kind: InvalidDigit }', /home/rustbuild/src/rust-buildbot/slave/beta-dist-rustc-linux/build/src/libcore/result.rs:729\n-```\n-\n-This is rather unsightly, and if this happened inside a library you're\n-using, you might be understandably annoyed. Instead, we should try to\n-handle the error in our function and let the caller decide what to\n-do. This means changing the return type of `double_number`. But to\n-what? Well, that requires looking at the signature of the [`parse`\n-method][9] in the standard library:\n-\n-```rust,ignore\n-impl str {\n-    fn parse<F: FromStr>(&self) -> Result<F, F::Err>;\n-}\n-```\n-\n-Hmm. So we at least know that we need to use a `Result`. Certainly, it's\n-possible that this could have returned an `Option`. After all, a string either\n-parses as a number or it doesn't, right? That's certainly a reasonable way to\n-go, but the implementation internally distinguishes *why* the string didn't\n-parse as an integer. (Whether it's an empty string, an invalid digit, too big\n-or too small.) Therefore, using a `Result` makes sense because we want to\n-provide more information than simply \u201cabsence.\u201d We want to say *why* the\n-parsing failed. You should try to emulate this line of reasoning when faced\n-with a choice between `Option` and `Result`. If you can provide detailed error\n-information, then you probably should. (We'll see more on this later.)\n-\n-OK, but how do we write our return type? The `parse` method as defined\n-above is generic over all the different number types defined in the\n-standard library. We could (and probably should) also make our\n-function generic, but let's favor explicitness for the moment. We only\n-care about `i32`, so we need to [find its implementation of\n-`FromStr`](../std/primitive.i32.html) (do a `CTRL-F` in your browser\n-for \u201cFromStr\u201d) and look at its [associated type][10] `Err`. We did\n-this so we can find the concrete error type. In this case, it's\n-[`std::num::ParseIntError`](../std/num/struct.ParseIntError.html).\n-Finally, we can rewrite our function:\n-\n-```rust\n-use std::num::ParseIntError;\n-\n-fn double_number(number_str: &str) -> Result<i32, ParseIntError> {\n-    match number_str.parse::<i32>() {\n-        Ok(n) => Ok(2 * n),\n-        Err(err) => Err(err),\n-    }\n-}\n-\n-fn main() {\n-    match double_number(\"10\") {\n-        Ok(n) => assert_eq!(n, 20),\n-        Err(err) => println!(\"Error: {:?}\", err),\n-    }\n-}\n-```\n-\n-This is a little better, but now we've written a lot more code! The case\n-analysis has once again bitten us.\n-\n-Combinators to the rescue! Just like `Option`, `Result` has lots of combinators\n-defined as methods. There is a large intersection of common combinators between\n-`Result` and `Option`. In particular, `map` is part of that intersection:\n-\n-```rust\n-use std::num::ParseIntError;\n-\n-fn double_number(number_str: &str) -> Result<i32, ParseIntError> {\n-    number_str.parse::<i32>().map(|n| 2 * n)\n-}\n-\n-fn main() {\n-    match double_number(\"10\") {\n-        Ok(n) => assert_eq!(n, 20),\n-        Err(err) => println!(\"Error: {:?}\", err),\n-    }\n-}\n-```\n-\n-The usual suspects are all there for `Result`, including\n-[`unwrap_or`](../std/result/enum.Result.html#method.unwrap_or) and\n-[`and_then`](../std/result/enum.Result.html#method.and_then).\n-Additionally, since `Result` has a second type parameter, there are\n-combinators that affect only the error type, such as\n-[`map_err`](../std/result/enum.Result.html#method.map_err) (instead of\n-`map`) and [`or_else`](../std/result/enum.Result.html#method.or_else)\n-(instead of `and_then`).\n-\n-### The `Result` type alias idiom\n-\n-In the standard library, you may frequently see types like\n-`Result<i32>`. But wait, [we defined `Result`](#code-result-def) to\n-have two type parameters. How can we get away with only specifying\n-one? The key is to define a `Result` type alias that *fixes* one of\n-the type parameters to a particular type. Usually the fixed type is\n-the error type. For example, our previous example parsing integers\n-could be rewritten like this:\n-\n-```rust\n-use std::num::ParseIntError;\n-use std::result;\n-\n-type Result<T> = result::Result<T, ParseIntError>;\n-\n-fn double_number(number_str: &str) -> Result<i32> {\n-    unimplemented!();\n-}\n-```\n-\n-Why would we do this? Well, if we have a lot of functions that could return\n-`ParseIntError`, then it's much more convenient to define an alias that always\n-uses `ParseIntError` so that we don't have to write it out all the time.\n-\n-The most prominent place this idiom is used in the standard library is\n-with [`io::Result`](../std/io/type.Result.html). Typically, one writes\n-`io::Result<T>`, which makes it clear that you're using the `io`\n-module's type alias instead of the plain definition from\n-`std::result`. (This idiom is also used for\n-[`fmt::Result`](../std/fmt/type.Result.html).)\n-\n-## A brief interlude: unwrapping isn't evil\n-\n-If you've been following along, you might have noticed that I've taken a pretty\n-hard line against calling methods like `unwrap` that could `panic` and abort\n-your program. *Generally speaking*, this is good advice.\n-\n-However, `unwrap` can still be used judiciously. What exactly justifies use of\n-`unwrap` is somewhat of a grey area and reasonable people can disagree. I'll\n-summarize some of my *opinions* on the matter.\n-\n-* **In examples and quick 'n' dirty code.** Sometimes you're writing examples\n-  or a quick program, and error handling simply isn't important. Beating the\n-  convenience of `unwrap` can be hard in such scenarios, so it is very\n-  appealing.\n-* **When panicking indicates a bug in the program.** When the invariants of\n-  your code should prevent a certain case from happening (like, say, popping\n-  from an empty stack), then panicking can be permissible. This is because it\n-  exposes a bug in your program. This can be explicit, like from an `assert!`\n-  failing, or it could be because your index into an array was out of bounds.\n-\n-This is probably not an exhaustive list. Moreover, when using an\n-`Option`, it is often better to use its\n-[`expect`](../std/option/enum.Option.html#method.expect)\n-method. `expect` does exactly the same thing as `unwrap`, except it\n-prints a message you give to `expect`. This makes the resulting panic\n-a bit nicer to deal with, since it will show your message instead of\n-\u201ccalled unwrap on a `None` value.\u201d\n-\n-My advice boils down to this: use good judgment. There's a reason why the words\n-\u201cnever do X\u201d or \u201cY is considered harmful\u201d don't appear in my writing. There are\n-trade offs to all things, and it is up to you as the programmer to determine\n-what is acceptable for your use cases. My goal is only to help you evaluate\n-trade offs as accurately as possible.\n-\n-Now that we've covered the basics of error handling in Rust, and\n-explained unwrapping, let's start exploring more of the standard\n-library.\n-\n-# Working with multiple error types\n-\n-Thus far, we've looked at error handling where everything was either an\n-`Option<T>` or a `Result<T, SomeError>`. But what happens when you have both an\n-`Option` and a `Result`? Or what if you have a `Result<T, Error1>` and a\n-`Result<T, Error2>`? Handling *composition of distinct error types* is the next\n-challenge in front of us, and it will be the major theme throughout the rest of\n-this section.\n-\n-## Composing `Option` and `Result`\n-\n-So far, I've talked about combinators defined for `Option` and combinators\n-defined for `Result`. We can use these combinators to compose results of\n-different computations without doing explicit case analysis.\n-\n-Of course, in real code, things aren't always as clean. Sometimes you have a\n-mix of `Option` and `Result` types. Must we resort to explicit case analysis,\n-or can we continue using combinators?\n-\n-For now, let's revisit one of the first examples in this section:\n-\n-```rust,should_panic\n-use std::env;\n-\n-fn main() {\n-    let mut argv = env::args();\n-    let arg: String = argv.nth(1).unwrap(); // error 1\n-    let n: i32 = arg.parse().unwrap(); // error 2\n-    println!(\"{}\", 2 * n);\n-}\n-```\n-\n-Given our new found knowledge of `Option`, `Result` and their various\n-combinators, we should try to rewrite this so that errors are handled properly\n-and the program doesn't panic if there's an error.\n-\n-The tricky aspect here is that `argv.nth(1)` produces an `Option` while\n-`arg.parse()` produces a `Result`. These aren't directly composable. When faced\n-with both an `Option` and a `Result`, the solution is *usually* to convert the\n-`Option` to a `Result`. In our case, the absence of a command line parameter\n-(from `env::args()`) means the user didn't invoke the program correctly. We\n-could use a `String` to describe the error. Let's try:\n-\n-<span id=\"code-error-double-string\"></span>\n-\n-```rust\n-use std::env;\n-\n-fn double_arg(mut argv: env::Args) -> Result<i32, String> {\n-    argv.nth(1)\n-        .ok_or(\"Please give at least one argument\".to_owned())\n-        .and_then(|arg| arg.parse::<i32>().map_err(|err| err.to_string()))\n-        .map(|n| 2 * n)\n-}\n-\n-fn main() {\n-    match double_arg(env::args()) {\n-        Ok(n) => println!(\"{}\", n),\n-        Err(err) => println!(\"Error: {}\", err),\n-    }\n-}\n-```\n-\n-There are a couple new things in this example. The first is the use of the\n-[`Option::ok_or`](../std/option/enum.Option.html#method.ok_or)\n-combinator. This is one way to convert an `Option` into a `Result`. The\n-conversion requires you to specify what error to use if `Option` is `None`.\n-Like the other combinators we've seen, its definition is very simple:\n-\n-```rust\n-fn ok_or<T, E>(option: Option<T>, err: E) -> Result<T, E> {\n-    match option {\n-        Some(val) => Ok(val),\n-        None => Err(err),\n-    }\n-}\n-```\n-\n-The other new combinator used here is\n-[`Result::map_err`](../std/result/enum.Result.html#method.map_err).\n-This is like `Result::map`, except it maps a function on to the *error*\n-portion of a `Result` value. If the `Result` is an `Ok(...)` value, then it is\n-returned unmodified.\n-\n-We use `map_err` here because it is necessary for the error types to remain\n-the same (because of our use of `and_then`). Since we chose to convert the\n-`Option<String>` (from `argv.nth(1)`) to a `Result<String, String>`, we must\n-also convert the `ParseIntError` from `arg.parse()` to a `String`.\n-\n-## The limits of combinators\n-\n-Doing IO and parsing input is a very common task, and it's one that I\n-personally have done a lot of in Rust. Therefore, we will use (and continue to\n-use) IO and various parsing routines to exemplify error handling.\n-\n-Let's start simple. We are tasked with opening a file, reading all of its\n-contents and converting its contents to a number. Then we multiply it by `2`\n-and print the output.\n-\n-Although I've tried to convince you not to use `unwrap`, it can be useful\n-to first write your code using `unwrap`. It allows you to focus on your problem\n-instead of the error handling, and it exposes the points where proper error\n-handling need to occur. Let's start there so we can get a handle on the code,\n-and then refactor it to use better error handling.\n-\n-```rust,should_panic\n-use std::fs::File;\n-use std::io::Read;\n-use std::path::Path;\n-\n-fn file_double<P: AsRef<Path>>(file_path: P) -> i32 {\n-    let mut file = File::open(file_path).unwrap(); // error 1\n-    let mut contents = String::new();\n-    file.read_to_string(&mut contents).unwrap(); // error 2\n-    let n: i32 = contents.trim().parse().unwrap(); // error 3\n-    2 * n\n-}\n-\n-fn main() {\n-    let doubled = file_double(\"foobar\");\n-    println!(\"{}\", doubled);\n-}\n-```\n-\n-(N.B. The `AsRef<Path>` is used because those are the\n-[same bounds used on\n-`std::fs::File::open`](../std/fs/struct.File.html#method.open).\n-This makes it ergonomic to use any kind of string as a file path.)\n-\n-There are three different errors that can occur here:\n-\n-1. A problem opening the file.\n-2. A problem reading data from the file.\n-3. A problem parsing the data as a number.\n-\n-The first two problems are described via the\n-[`std::io::Error`](../std/io/struct.Error.html) type. We know this\n-because of the return types of\n-[`std::fs::File::open`](../std/fs/struct.File.html#method.open) and\n-[`std::io::Read::read_to_string`](../std/io/trait.Read.html#method.read_to_string).\n-(Note that they both use the [`Result` type alias\n-idiom](#the-result-type-alias-idiom) described previously. If you\n-click on the `Result` type, you'll [see the type\n-alias](../std/io/type.Result.html), and consequently, the underlying\n-`io::Error` type.)  The third problem is described by the\n-[`std::num::ParseIntError`](../std/num/struct.ParseIntError.html)\n-type. The `io::Error` type in particular is *pervasive* throughout the\n-standard library. You will see it again and again.\n-\n-Let's start the process of refactoring the `file_double` function. To make this\n-function composable with other components of the program, it should *not* panic\n-if any of the above error conditions are met. Effectively, this means that the\n-function should *return an error* if any of its operations fail. Our problem is\n-that the return type of `file_double` is `i32`, which does not give us any\n-useful way of reporting an error. Thus, we must start by changing the return\n-type from `i32` to something else.\n-\n-The first thing we need to decide: should we use `Option` or `Result`? We\n-certainly could use `Option` very easily. If any of the three errors occur, we\n-could simply return `None`. This will work *and it is better than panicking*,\n-but we can do a lot better. Instead, we should pass some detail about the error\n-that occurred. Since we want to express the *possibility of error*, we should\n-use `Result<i32, E>`. But what should `E` be? Since two *different* types of\n-errors can occur, we need to convert them to a common type. One such type is\n-`String`. Let's see how that impacts our code:\n-\n-```rust\n-use std::fs::File;\n-use std::io::Read;\n-use std::path::Path;\n-\n-fn file_double<P: AsRef<Path>>(file_path: P) -> Result<i32, String> {\n-    File::open(file_path)\n-         .map_err(|err| err.to_string())\n-         .and_then(|mut file| {\n-              let mut contents = String::new();\n-              file.read_to_string(&mut contents)\n-                  .map_err(|err| err.to_string())\n-                  .map(|_| contents)\n-         })\n-         .and_then(|contents| {\n-              contents.trim().parse::<i32>()\n-                      .map_err(|err| err.to_string())\n-         })\n-         .map(|n| 2 * n)\n-}\n-\n-fn main() {\n-    match file_double(\"foobar\") {\n-        Ok(n) => println!(\"{}\", n),\n-        Err(err) => println!(\"Error: {}\", err),\n-    }\n-}\n-```\n-\n-This code looks a bit hairy. It can take quite a bit of practice before code\n-like this becomes easy to write. The way we write it is by *following the\n-types*. As soon as we changed the return type of `file_double` to\n-`Result<i32, String>`, we had to start looking for the right combinators. In\n-this case, we only used three different combinators: `and_then`, `map` and\n-`map_err`.\n-\n-`and_then` is used to chain multiple computations where each computation could\n-return an error. After opening the file, there are two more computations that\n-could fail: reading from the file and parsing the contents as a number.\n-Correspondingly, there are two calls to `and_then`.\n-\n-`map` is used to apply a function to the `Ok(...)` value of a `Result`. For\n-example, the very last call to `map` multiplies the `Ok(...)` value (which is\n-an `i32`) by `2`. If an error had occurred before that point, this operation\n-would have been skipped because of how `map` is defined.\n-\n-`map_err` is the trick that makes all of this work. `map_err` is like\n-`map`, except it applies a function to the `Err(...)` value of a `Result`. In\n-this case, we want to convert all of our errors to one type: `String`. Since\n-both `io::Error` and `num::ParseIntError` implement `ToString`, we can call the\n-`to_string()` method to convert them.\n-\n-With all of that said, the code is still hairy. Mastering use of combinators is\n-important, but they have their limits. Let's try a different approach: early\n-returns.\n-\n-## Early returns\n-\n-I'd like to take the code from the previous section and rewrite it using *early\n-returns*. Early returns let you exit the function early. We can't return early\n-in `file_double` from inside another closure, so we'll need to revert back to\n-explicit case analysis.\n-\n-```rust\n-use std::fs::File;\n-use std::io::Read;\n-use std::path::Path;\n-\n-fn file_double<P: AsRef<Path>>(file_path: P) -> Result<i32, String> {\n-    let mut file = match File::open(file_path) {\n-        Ok(file) => file,\n-        Err(err) => return Err(err.to_string()),\n-    };\n-    let mut contents = String::new();\n-    if let Err(err) = file.read_to_string(&mut contents) {\n-        return Err(err.to_string());\n-    }\n-    let n: i32 = match contents.trim().parse() {\n-        Ok(n) => n,\n-        Err(err) => return Err(err.to_string()),\n-    };\n-    Ok(2 * n)\n-}\n-\n-fn main() {\n-    match file_double(\"foobar\") {\n-        Ok(n) => println!(\"{}\", n),\n-        Err(err) => println!(\"Error: {}\", err),\n-    }\n-}\n-```\n-\n-Reasonable people can disagree over whether this code is better than the code\n-that uses combinators, but if you aren't familiar with the combinator approach,\n-this code looks simpler to read to me. It uses explicit case analysis with\n-`match` and `if let`. If an error occurs, it simply stops executing the\n-function and returns the error (by converting it to a string).\n-\n-Isn't this a step backwards though? Previously, we said that the key to\n-ergonomic error handling is reducing explicit case analysis, yet we've reverted\n-back to explicit case analysis here. It turns out, there are *multiple* ways to\n-reduce explicit case analysis. Combinators aren't the only way.\n-\n-## The `try!` macro\n-\n-A cornerstone of error handling in Rust is the `try!` macro. The `try!` macro\n-abstracts case analysis like combinators, but unlike combinators, it also\n-abstracts *control flow*. Namely, it can abstract the *early return* pattern\n-seen above.\n-\n-Here is a simplified definition of a `try!` macro:\n-\n-<span id=\"code-try-def-simple\"></span>\n-\n-```rust\n-macro_rules! try {\n-    ($e:expr) => (match $e {\n-        Ok(val) => val,\n-        Err(err) => return Err(err),\n-    });\n-}\n-```\n-\n-(The [real definition](../std/macro.try.html) is a bit more\n-sophisticated. We will address that later.)\n-\n-Using the `try!` macro makes it very easy to simplify our last example. Since\n-it does the case analysis and the early return for us, we get tighter code that\n-is easier to read:\n-\n-```rust\n-use std::fs::File;\n-use std::io::Read;\n-use std::path::Path;\n-\n-fn file_double<P: AsRef<Path>>(file_path: P) -> Result<i32, String> {\n-    let mut file = try!(File::open(file_path).map_err(|e| e.to_string()));\n-    let mut contents = String::new();\n-    try!(file.read_to_string(&mut contents).map_err(|e| e.to_string()));\n-    let n = try!(contents.trim().parse::<i32>().map_err(|e| e.to_string()));\n-    Ok(2 * n)\n-}\n-\n-fn main() {\n-    match file_double(\"foobar\") {\n-        Ok(n) => println!(\"{}\", n),\n-        Err(err) => println!(\"Error: {}\", err),\n-    }\n-}\n-```\n-\n-The `map_err` calls are still necessary given\n-[our definition of `try!`](#code-try-def-simple).\n-This is because the error types still need to be converted to `String`.\n-The good news is that we will soon learn how to remove those `map_err` calls!\n-The bad news is that we will need to learn a bit more about a couple important\n-traits in the standard library before we can remove the `map_err` calls.\n-\n-## Defining your own error type\n-\n-Before we dive into some of the standard library error traits, I'd like to wrap\n-up this section by removing the use of `String` as our error type in the\n-previous examples.\n-\n-Using `String` as we did in our previous examples is convenient because it's\n-easy to convert errors to strings, or even make up your own errors as strings\n-on the spot. However, using `String` for your errors has some downsides.\n-\n-The first downside is that the error messages tend to clutter your\n-code. It's possible to define the error messages elsewhere, but unless\n-you're unusually disciplined, it is very tempting to embed the error\n-message into your code. Indeed, we did exactly this in a [previous\n-example](#code-error-double-string).\n-\n-The second and more important downside is that `String`s are *lossy*. That is,\n-if all errors are converted to strings, then the errors we pass to the caller\n-become completely opaque. The only reasonable thing the caller can do with a\n-`String` error is show it to the user. Certainly, inspecting the string to\n-determine the type of error is not robust. (Admittedly, this downside is far\n-more important inside of a library as opposed to, say, an application.)\n-\n-For example, the `io::Error` type embeds an\n-[`io::ErrorKind`](../std/io/enum.ErrorKind.html),\n-which is *structured data* that represents what went wrong during an IO\n-operation. This is important because you might want to react differently\n-depending on the error. (e.g., A `BrokenPipe` error might mean quitting your\n-program gracefully while a `NotFound` error might mean exiting with an error\n-code and showing an error to the user.) With `io::ErrorKind`, the caller can\n-examine the type of an error with case analysis, which is strictly superior\n-to trying to tease out the details of an error inside of a `String`.\n-\n-Instead of using a `String` as an error type in our previous example of reading\n-an integer from a file, we can define our own error type that represents errors\n-with *structured data*. We endeavor to not drop information from underlying\n-errors in case the caller wants to inspect the details.\n-\n-The ideal way to represent *one of many possibilities* is to define our own\n-sum type using `enum`. In our case, an error is either an `io::Error` or a\n-`num::ParseIntError`, so a natural definition arises:\n-\n-```rust\n-use std::io;\n-use std::num;\n-\n-// We derive `Debug` because all types should probably derive `Debug`.\n-// This gives us a reasonable human readable description of `CliError` values.\n-#[derive(Debug)]\n-enum CliError {\n-    Io(io::Error),\n-    Parse(num::ParseIntError),\n-}\n-```\n-\n-Tweaking our code is very easy. Instead of converting errors to strings, we\n-simply convert them to our `CliError` type using the corresponding value\n-constructor:\n-\n-```rust\n-# #[derive(Debug)]\n-# enum CliError { Io(::std::io::Error), Parse(::std::num::ParseIntError) }\n-use std::fs::File;\n-use std::io::Read;\n-use std::path::Path;\n-\n-fn file_double<P: AsRef<Path>>(file_path: P) -> Result<i32, CliError> {\n-    let mut file = try!(File::open(file_path).map_err(CliError::Io));\n-    let mut contents = String::new();\n-    try!(file.read_to_string(&mut contents).map_err(CliError::Io));\n-    let n: i32 = try!(contents.trim().parse().map_err(CliError::Parse));\n-    Ok(2 * n)\n-}\n-\n-fn main() {\n-    match file_double(\"foobar\") {\n-        Ok(n) => println!(\"{}\", n),\n-        Err(err) => println!(\"Error: {:?}\", err),\n-    }\n-}\n-```\n-\n-The only change here is switching `map_err(|e| e.to_string())` (which converts\n-errors to strings) to `map_err(CliError::Io)` or `map_err(CliError::Parse)`.\n-The *caller* gets to decide the level of detail to report to the user. In\n-effect, using a `String` as an error type removes choices from the caller while\n-using a custom `enum` error type like `CliError` gives the caller all of the\n-conveniences as before in addition to *structured data* describing the error.\n-\n-A rule of thumb is to define your own error type, but a `String` error type\n-will do in a pinch, particularly if you're writing an application. If you're\n-writing a library, defining your own error type should be strongly preferred so\n-that you don't remove choices from the caller unnecessarily.\n-\n-# Standard library traits used for error handling\n-\n-The standard library defines two integral traits for error handling:\n-[`std::error::Error`](../std/error/trait.Error.html) and\n-[`std::convert::From`](../std/convert/trait.From.html). While `Error`\n-is designed specifically for generically describing errors, the `From`\n-trait serves a more general role for converting values between two\n-distinct types.\n-\n-## The `Error` trait\n-\n-The `Error` trait is [defined in the standard\n-library](../std/error/trait.Error.html):\n-\n-```rust\n-use std::fmt::{Debug, Display};\n-\n-trait Error: Debug + Display {\n-  /// A short description of the error.\n-  fn description(&self) -> &str;\n-\n-  /// The lower level cause of this error, if any.\n-  fn cause(&self) -> Option<&Error> { None }\n-}\n-```\n-\n-This trait is super generic because it is meant to be implemented for *all*\n-types that represent errors. This will prove useful for writing composable code\n-as we'll see later. Otherwise, the trait allows you to do at least the\n-following things:\n-\n-* Obtain a `Debug` representation of the error.\n-* Obtain a user-facing `Display` representation of the error.\n-* Obtain a short description of the error (via the `description` method).\n-* Inspect the causal chain of an error, if one exists (via the `cause` method).\n-\n-The first two are a result of `Error` requiring impls for both `Debug` and\n-`Display`. The latter two are from the two methods defined on `Error`. The\n-power of `Error` comes from the fact that all error types impl `Error`, which\n-means errors can be existentially quantified as a\n-[trait object](../book/trait-objects.html).\n-This manifests as either `Box<Error>` or `&Error`. Indeed, the `cause` method\n-returns an `&Error`, which is itself a trait object. We'll revisit the\n-`Error` trait's utility as a trait object later.\n-\n-For now, it suffices to show an example implementing the `Error` trait. Let's\n-use the error type we defined in the\n-[previous section](#defining-your-own-error-type):\n-\n-```rust\n-use std::io;\n-use std::num;\n-\n-// We derive `Debug` because all types should probably derive `Debug`.\n-// This gives us a reasonable human readable description of `CliError` values.\n-#[derive(Debug)]\n-enum CliError {\n-    Io(io::Error),\n-    Parse(num::ParseIntError),\n-}\n-```\n-\n-This particular error type represents the possibility of two types of errors\n-occurring: an error dealing with I/O or an error converting a string to a\n-number. The error could represent as many error types as you want by adding new\n-variants to the `enum` definition.\n-\n-Implementing `Error` is pretty straight-forward. It's mostly going to be a lot\n-explicit case analysis.\n-\n-```rust,ignore\n-use std::error;\n-use std::fmt;\n-\n-impl fmt::Display for CliError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            // Both underlying errors already impl `Display`, so we defer to\n-            // their implementations.\n-            CliError::Io(ref err) => write!(f, \"IO error: {}\", err),\n-            CliError::Parse(ref err) => write!(f, \"Parse error: {}\", err),\n-        }\n-    }\n-}\n-\n-impl error::Error for CliError {\n-    fn description(&self) -> &str {\n-        // Both underlying errors already impl `Error`, so we defer to their\n-        // implementations.\n-        match *self {\n-            CliError::Io(ref err) => err.description(),\n-            CliError::Parse(ref err) => err.description(),\n-        }\n-    }\n-\n-    fn cause(&self) -> Option<&error::Error> {\n-        match *self {\n-            // N.B. Both of these implicitly cast `err` from their concrete\n-            // types (either `&io::Error` or `&num::ParseIntError`)\n-            // to a trait object `&Error`. This works because both error types\n-            // implement `Error`.\n-            CliError::Io(ref err) => Some(err),\n-            CliError::Parse(ref err) => Some(err),\n-        }\n-    }\n-}\n-```\n-\n-We note that this is a very typical implementation of `Error`: match on your\n-different error types and satisfy the contracts defined for `description` and\n-`cause`.\n-\n-## The `From` trait\n-\n-The `std::convert::From` trait is\n-[defined in the standard\n-library](../std/convert/trait.From.html):\n-\n-<span id=\"code-from-def\"></span>\n-\n-```rust\n-trait From<T> {\n-    fn from(T) -> Self;\n-}\n-```\n-\n-Deliciously simple, yes? `From` is very useful because it gives us a generic\n-way to talk about conversion *from* a particular type `T` to some other type\n-(in this case, \u201csome other type\u201d is the subject of the impl, or `Self`).\n-The crux of `From` is the\n-[set of implementations provided by the standard\n-library](../std/convert/trait.From.html).\n-\n-Here are a few simple examples demonstrating how `From` works:\n-\n-```rust\n-let string: String = From::from(\"foo\");\n-let bytes: Vec<u8> = From::from(\"foo\");\n-let cow: ::std::borrow::Cow<str> = From::from(\"foo\");\n-```\n-\n-OK, so `From` is useful for converting between strings. But what about errors?\n-It turns out, there is one critical impl:\n-\n-```rust,ignore\n-impl<'a, E: Error + 'a> From<E> for Box<Error + 'a>\n-```\n-\n-This impl says that for *any* type that impls `Error`, we can convert it to a\n-trait object `Box<Error>`. This may not seem terribly surprising, but it is\n-useful in a generic context.\n-\n-Remember the two errors we were dealing with previously? Specifically,\n-`io::Error` and `num::ParseIntError`. Since both impl `Error`, they work with\n-`From`:\n-\n-```rust\n-use std::error::Error;\n-use std::fs;\n-use std::io;\n-use std::num;\n-\n-// We have to jump through some hoops to actually get error values:\n-let io_err: io::Error = io::Error::last_os_error();\n-let parse_err: num::ParseIntError = \"not a number\".parse::<i32>().unwrap_err();\n-\n-// OK, here are the conversions:\n-let err1: Box<Error> = From::from(io_err);\n-let err2: Box<Error> = From::from(parse_err);\n-```\n-\n-There is a really important pattern to recognize here. Both `err1` and `err2`\n-have the *same type*. This is because they are existentially quantified types,\n-or trait objects. In particular, their underlying type is *erased* from the\n-compiler's knowledge, so it truly sees `err1` and `err2` as exactly the same.\n-Additionally, we constructed `err1` and `err2` using precisely the same\n-function call: `From::from`. This is because `From::from` is overloaded on both\n-its argument and its return type.\n-\n-This pattern is important because it solves a problem we had earlier: it gives\n-us a way to reliably convert errors to the same type using the same function.\n-\n-Time to revisit an old friend; the `try!` macro.\n-\n-## The real `try!` macro\n-\n-Previously, we presented this definition of `try!`:\n-\n-```rust\n-macro_rules! try {\n-    ($e:expr) => (match $e {\n-        Ok(val) => val,\n-        Err(err) => return Err(err),\n-    });\n-}\n-```\n-\n-This is not its real definition. Its real definition is\n-[in the standard library](../std/macro.try.html):\n-\n-<span id=\"code-try-def\"></span>\n-\n-```rust\n-macro_rules! try {\n-    ($e:expr) => (match $e {\n-        Ok(val) => val,\n-        Err(err) => return Err(::std::convert::From::from(err)),\n-    });\n-}\n-```\n-\n-There's one tiny but powerful change: the error value is passed through\n-`From::from`. This makes the `try!` macro a lot more powerful because it gives\n-you automatic type conversion for free.\n-\n-Armed with our more powerful `try!` macro, let's take a look at code we wrote\n-previously to read a file and convert its contents to an integer:\n-\n-```rust\n-use std::fs::File;\n-use std::io::Read;\n-use std::path::Path;\n-\n-fn file_double<P: AsRef<Path>>(file_path: P) -> Result<i32, String> {\n-    let mut file = try!(File::open(file_path).map_err(|e| e.to_string()));\n-    let mut contents = String::new();\n-    try!(file.read_to_string(&mut contents).map_err(|e| e.to_string()));\n-    let n = try!(contents.trim().parse::<i32>().map_err(|e| e.to_string()));\n-    Ok(2 * n)\n-}\n-```\n-\n-Earlier, we promised that we could get rid of the `map_err` calls. Indeed, all\n-we have to do is pick a type that `From` works with. As we saw in the previous\n-section, `From` has an impl that lets it convert any error type into a\n-`Box<Error>`:\n-\n-```rust\n-use std::error::Error;\n-use std::fs::File;\n-use std::io::Read;\n-use std::path::Path;\n-\n-fn file_double<P: AsRef<Path>>(file_path: P) -> Result<i32, Box<Error>> {\n-    let mut file = try!(File::open(file_path));\n-    let mut contents = String::new();\n-    try!(file.read_to_string(&mut contents));\n-    let n = try!(contents.trim().parse::<i32>());\n-    Ok(2 * n)\n-}\n-```\n-\n-We are getting very close to ideal error handling. Our code has very little\n-overhead as a result from error handling because the `try!` macro encapsulates\n-three things simultaneously:\n-\n-1. Case analysis.\n-2. Control flow.\n-3. Error type conversion.\n-\n-When all three things are combined, we get code that is unencumbered by\n-combinators, calls to `unwrap` or case analysis.\n-\n-There's one little nit left: the `Box<Error>` type is *opaque*. If we\n-return a `Box<Error>` to the caller, the caller can't (easily) inspect\n-underlying error type. The situation is certainly better than `String`\n-because the caller can call methods like\n-[`description`](../std/error/trait.Error.html#tymethod.description)\n-and [`cause`](../std/error/trait.Error.html#method.cause), but the\n-limitation remains: `Box<Error>` is opaque. (N.B. This isn't entirely\n-true because Rust does have runtime reflection, which is useful in\n-some scenarios that are [beyond the scope of this\n-section](https://crates.io/crates/error).)\n-\n-It's time to revisit our custom `CliError` type and tie everything together.\n-\n-## Composing custom error types\n-\n-In the last section, we looked at the real `try!` macro and how it does\n-automatic type conversion for us by calling `From::from` on the error value.\n-In particular, we converted errors to `Box<Error>`, which works, but the type\n-is opaque to callers.\n-\n-To fix this, we use the same remedy that we're already familiar with: a custom\n-error type. Once again, here is the code that reads the contents of a file and\n-converts it to an integer:\n-\n-```rust\n-use std::fs::File;\n-use std::io::{self, Read};\n-use std::num;\n-use std::path::Path;\n-\n-// We derive `Debug` because all types should probably derive `Debug`.\n-// This gives us a reasonable human readable description of `CliError` values.\n-#[derive(Debug)]\n-enum CliError {\n-    Io(io::Error),\n-    Parse(num::ParseIntError),\n-}\n-\n-fn file_double_verbose<P: AsRef<Path>>(file_path: P) -> Result<i32, CliError> {\n-    let mut file = try!(File::open(file_path).map_err(CliError::Io));\n-    let mut contents = String::new();\n-    try!(file.read_to_string(&mut contents).map_err(CliError::Io));\n-    let n: i32 = try!(contents.trim().parse().map_err(CliError::Parse));\n-    Ok(2 * n)\n-}\n-```\n-\n-Notice that we still have the calls to `map_err`. Why? Well, recall the\n-definitions of [`try!`](#code-try-def) and [`From`](#code-from-def). The\n-problem is that there is no `From` impl that allows us to convert from error\n-types like `io::Error` and `num::ParseIntError` to our own custom `CliError`.\n-Of course, it is easy to fix this! Since we defined `CliError`, we can impl\n-`From` with it:\n-\n-```rust\n-# #[derive(Debug)]\n-# enum CliError { Io(io::Error), Parse(num::ParseIntError) }\n-use std::io;\n-use std::num;\n-\n-impl From<io::Error> for CliError {\n-    fn from(err: io::Error) -> CliError {\n-        CliError::Io(err)\n-    }\n-}\n-\n-impl From<num::ParseIntError> for CliError {\n-    fn from(err: num::ParseIntError) -> CliError {\n-        CliError::Parse(err)\n-    }\n-}\n-```\n-\n-All these impls are doing is teaching `From` how to create a `CliError` from\n-other error types. In our case, construction is as simple as invoking the\n-corresponding value constructor. Indeed, it is *typically* this easy.\n-\n-We can finally rewrite `file_double`:\n-\n-```rust\n-# use std::io;\n-# use std::num;\n-# enum CliError { Io(::std::io::Error), Parse(::std::num::ParseIntError) }\n-# impl From<io::Error> for CliError {\n-#     fn from(err: io::Error) -> CliError { CliError::Io(err) }\n-# }\n-# impl From<num::ParseIntError> for CliError {\n-#     fn from(err: num::ParseIntError) -> CliError { CliError::Parse(err) }\n-# }\n-\n-use std::fs::File;\n-use std::io::Read;\n-use std::path::Path;\n-\n-fn file_double<P: AsRef<Path>>(file_path: P) -> Result<i32, CliError> {\n-    let mut file = try!(File::open(file_path));\n-    let mut contents = String::new();\n-    try!(file.read_to_string(&mut contents));\n-    let n: i32 = try!(contents.trim().parse());\n-    Ok(2 * n)\n-}\n-```\n-\n-The only thing we did here was remove the calls to `map_err`. They are no\n-longer needed because the `try!` macro invokes `From::from` on the error value.\n-This works because we've provided `From` impls for all the error types that\n-could appear.\n-\n-If we modified our `file_double` function to perform some other operation, say,\n-convert a string to a float, then we'd need to add a new variant to our error\n-type:\n-\n-```rust\n-use std::io;\n-use std::num;\n-\n-enum CliError {\n-    Io(io::Error),\n-    ParseInt(num::ParseIntError),\n-    ParseFloat(num::ParseFloatError),\n-}\n-```\n-\n-And add a new `From` impl:\n-\n-```rust\n-# enum CliError {\n-#     Io(::std::io::Error),\n-#     ParseInt(num::ParseIntError),\n-#     ParseFloat(num::ParseFloatError),\n-# }\n-\n-use std::num;\n-\n-impl From<num::ParseFloatError> for CliError {\n-    fn from(err: num::ParseFloatError) -> CliError {\n-        CliError::ParseFloat(err)\n-    }\n-}\n-```\n-\n-And that's it!\n-\n-## Advice for library writers\n-\n-If your library needs to report custom errors, then you should\n-probably define your own error type. It's up to you whether or not to\n-expose its representation (like\n-[`ErrorKind`](../std/io/enum.ErrorKind.html)) or keep it hidden (like\n-[`ParseIntError`](../std/num/struct.ParseIntError.html)). Regardless\n-of how you do it, it's usually good practice to at least provide some\n-information about the error beyond its `String`\n-representation. But certainly, this will vary depending on use cases.\n-\n-At a minimum, you should probably implement the\n-[`Error`](../std/error/trait.Error.html)\n-trait. This will give users of your library some minimum flexibility for\n-[composing errors](#the-real-try-macro). Implementing the `Error` trait also\n-means that users are guaranteed the ability to obtain a string representation\n-of an error (because it requires impls for both `fmt::Debug` and\n-`fmt::Display`).\n-\n-Beyond that, it can also be useful to provide implementations of `From` on your\n-error types. This allows you (the library author) and your users to\n-[compose more detailed errors](#composing-custom-error-types). For example,\n-[`csv::Error`](http://burntsushi.net/rustdoc/csv/enum.Error.html)\n-provides `From` impls for both `io::Error` and `byteorder::Error`.\n-\n-Finally, depending on your tastes, you may also want to define a\n-[`Result` type alias](#the-result-type-alias-idiom), particularly if your\n-library defines a single error type. This is used in the standard library\n-for [`io::Result`](../std/io/type.Result.html)\n-and [`fmt::Result`](../std/fmt/type.Result.html).\n-\n-# Case study: A program to read population data\n-\n-This section was long, and depending on your background, it might be\n-rather dense. While there is plenty of example code to go along with\n-the prose, most of it was specifically designed to be pedagogical. So,\n-we're going to do something new: a case study.\n-\n-For this, we're going to build up a command line program that lets you\n-query world population data. The objective is simple: you give it a location\n-and it will tell you the population. Despite the simplicity, there is a lot\n-that can go wrong!\n-\n-The data we'll be using comes from the [Data Science\n-Toolkit][11]. I've prepared some data from it for this exercise. You\n-can either grab the [world population data][12] (41MB gzip compressed,\n-145MB uncompressed) or only the [US population data][13] (2.2MB gzip\n-compressed, 7.2MB uncompressed).\n-\n-Up until now, we've kept the code limited to Rust's standard library. For a real\n-task like this though, we'll want to at least use something to parse CSV data,\n-parse the program arguments and decode that stuff into Rust types automatically. For that, we'll use the\n-[`csv`](https://crates.io/crates/csv),\n-and [`rustc-serialize`](https://crates.io/crates/rustc-serialize) crates.\n-\n-## Initial setup\n-\n-We're not going to spend a lot of time on setting up a project with\n-Cargo because it is already covered well in [the Cargo\n-section](getting-started.html#hello-cargo) and [Cargo's documentation][14].\n-\n-To get started from scratch, run `cargo new --bin city-pop` and make sure your\n-`Cargo.toml` looks something like this:\n-\n-```text\n-[package]\n-name = \"city-pop\"\n-version = \"0.1.0\"\n-authors = [\"Andrew Gallant <jamslam@gmail.com>\"]\n-\n-[[bin]]\n-name = \"city-pop\"\n-\n-[dependencies]\n-csv = \"0.*\"\n-rustc-serialize = \"0.*\"\n-getopts = \"0.*\"\n-```\n-\n-You should already be able to run:\n-\n-```text\n-cargo build --release\n-./target/release/city-pop\n-# Outputs: Hello, world!\n-```\n-\n-## Argument parsing\n-\n-Let's get argument parsing out of the way. We won't go into too much\n-detail on Getopts, but there is [some good documentation][15]\n-describing it. The short story is that Getopts generates an argument\n-parser and a help message from a vector of options (The fact that it\n-is a vector is hidden behind a struct and a set of methods). Once the\n-parsing is done, the parser returns a struct that records matches\n-for defined options, and remaining \"free\" arguments.\n-From there, we can get information about the flags, for\n-instance, whether they were passed in, and what arguments they\n-had. Here's our program with the appropriate `extern crate`\n-statements, and the basic argument setup for Getopts:\n-\n-```rust,ignore\n-extern crate getopts;\n-extern crate rustc_serialize;\n-\n-use getopts::Options;\n-use std::env;\n-\n-fn print_usage(program: &str, opts: Options) {\n-    println!(\"{}\", opts.usage(&format!(\"Usage: {} [options] <data-path> <city>\", program)));\n-}\n-\n-fn main() {\n-    let args: Vec<String> = env::args().collect();\n-    let program = &args[0];\n-\n-    let mut opts = Options::new();\n-    opts.optflag(\"h\", \"help\", \"Show this usage message.\");\n-\n-    let matches = match opts.parse(&args[1..]) {\n-        Ok(m)  => { m }\n-        Err(e) => { panic!(e.to_string()) }\n-    };\n-    if matches.opt_present(\"h\") {\n-        print_usage(&program, opts);\n-        return;\n-    }\n-    let data_path = &matches.free[0];\n-    let city: &str = &matches.free[1];\n-\n-    // Do stuff with information.\n-}\n-```\n-\n-First, we get a vector of the arguments passed into our program. We\n-then store the first one, knowing that it is our program's name. Once\n-that's done, we set up our argument flags, in this case a simplistic\n-help message flag. Once we have the argument flags set up, we use\n-`Options.parse` to parse the argument vector (starting from index one,\n-because index 0 is the program name). If this was successful, we\n-assign matches to the parsed object, if not, we panic. Once past that,\n-we test if the user passed in the help flag, and if so print the usage\n-message. The option help messages are constructed by Getopts, so all\n-we have to do to print the usage message is tell it what we want it to\n-print for the program name and template. If the user has not passed in\n-the help flag, we assign the proper variables to their corresponding\n-arguments.\n-\n-## Writing the logic\n-\n-We all write code differently, but error handling is usually the last thing we\n-want to think about. This isn't great for the overall design of a program, but\n-it can be useful for rapid prototyping. Because Rust forces us to be explicit\n-about error handling (by making us call `unwrap`), it is easy to see which\n-parts of our program can cause errors.\n-\n-In this case study, the logic is really simple. All we need to do is parse the\n-CSV data given to us and print out a field in matching rows. Let's do it. (Make\n-sure to add `extern crate csv;` to the top of your file.)\n-\n-```rust,ignore\n-use std::fs::File;\n-\n-// This struct represents the data in each row of the CSV file.\n-// Type based decoding absolves us of a lot of the nitty gritty error\n-// handling, like parsing strings as integers or floats.\n-#[derive(Debug, RustcDecodable)]\n-struct Row {\n-    country: String,\n-    city: String,\n-    accent_city: String,\n-    region: String,\n-\n-    // Not every row has data for the population, latitude or longitude!\n-    // So we express them as `Option` types, which admits the possibility of\n-    // absence. The CSV parser will fill in the correct value for us.\n-    population: Option<u64>,\n-    latitude: Option<f64>,\n-    longitude: Option<f64>,\n-}\n-\n-fn print_usage(program: &str, opts: Options) {\n-    println!(\"{}\", opts.usage(&format!(\"Usage: {} [options] <data-path> <city>\", program)));\n-}\n-\n-fn main() {\n-    let args: Vec<String> = env::args().collect();\n-    let program = &args[0];\n-\n-    let mut opts = Options::new();\n-    opts.optflag(\"h\", \"help\", \"Show this usage message.\");\n-\n-    let matches = match opts.parse(&args[1..]) {\n-        Ok(m)  => { m }\n-        Err(e) => { panic!(e.to_string()) }\n-    };\n-\n-    if matches.opt_present(\"h\") {\n-        print_usage(&program, opts);\n-        return;\n-    }\n-\n-    let data_path = &matches.free[0];\n-    let city: &str = &matches.free[1];\n-\n-    let file = File::open(data_path).unwrap();\n-    let mut rdr = csv::Reader::from_reader(file);\n-\n-    for row in rdr.decode::<Row>() {\n-        let row = row.unwrap();\n-\n-        if row.city == city {\n-            println!(\"{}, {}: {:?}\",\n-                row.city, row.country,\n-                row.population.expect(\"population count\"));\n-        }\n-    }\n-}\n-```\n-\n-Let's outline the errors. We can start with the obvious: the three places that\n-`unwrap` is called:\n-\n-1. [`File::open`](../std/fs/struct.File.html#method.open)\n-   can return an\n-   [`io::Error`](../std/io/struct.Error.html).\n-2. [`csv::Reader::decode`](http://burntsushi.net/rustdoc/csv/struct.Reader.html#method.decode)\n-   decodes one record at a time, and\n-   [decoding a\n-   record](http://burntsushi.net/rustdoc/csv/struct.DecodedRecords.html)\n-   (look at the `Item` associated type on the `Iterator` impl)\n-   can produce a\n-   [`csv::Error`](http://burntsushi.net/rustdoc/csv/enum.Error.html).\n-3. If `row.population` is `None`, then calling `expect` will panic.\n-\n-Are there any others? What if we can't find a matching city? Tools like `grep`\n-will return an error code, so we probably should too. So we have logic errors\n-specific to our problem, IO errors and CSV parsing errors. We're going to\n-explore two different ways to approach handling these errors.\n-\n-I'd like to start with `Box<Error>`. Later, we'll see how defining our own\n-error type can be useful.\n-\n-## Error handling with `Box<Error>`\n-\n-`Box<Error>` is nice because it *just works*. You don't need to define your own\n-error types and you don't need any `From` implementations. The downside is that\n-since `Box<Error>` is a trait object, it *erases the type*, which means the\n-compiler can no longer reason about its underlying type.\n-\n-[Previously](#the-limits-of-combinators) we started refactoring our code by\n-changing the type of our function from `T` to `Result<T, OurErrorType>`. In\n-this case, `OurErrorType` is only `Box<Error>`. But what's `T`? And can we add\n-a return type to `main`?\n-\n-The answer to the second question is no, we can't. That means we'll need to\n-write a new function. But what is `T`? The simplest thing we can do is to\n-return a list of matching `Row` values as a `Vec<Row>`. (Better code would\n-return an iterator, but that is left as an exercise to the reader.)\n-\n-Let's refactor our code into its own function, but keep the calls to `unwrap`.\n-Note that we opt to handle the possibility of a missing population count by\n-simply ignoring that row.\n-\n-```rust,ignore\n-use std::path::Path;\n-\n-struct Row {\n-    // This struct remains unchanged.\n-}\n-\n-struct PopulationCount {\n-    city: String,\n-    country: String,\n-    // This is no longer an `Option` because values of this type are only\n-    // constructed if they have a population count.\n-    count: u64,\n-}\n-\n-fn print_usage(program: &str, opts: Options) {\n-    println!(\"{}\", opts.usage(&format!(\"Usage: {} [options] <data-path> <city>\", program)));\n-}\n-\n-fn search<P: AsRef<Path>>(file_path: P, city: &str) -> Vec<PopulationCount> {\n-    let mut found = vec![];\n-    let file = File::open(file_path).unwrap();\n-    let mut rdr = csv::Reader::from_reader(file);\n-    for row in rdr.decode::<Row>() {\n-        let row = row.unwrap();\n-        match row.population {\n-            None => { } // Skip it.\n-            Some(count) => if row.city == city {\n-                found.push(PopulationCount {\n-                    city: row.city,\n-                    country: row.country,\n-                    count: count,\n-                });\n-            },\n-        }\n-    }\n-    found\n-}\n-\n-fn main() {\n-    let args: Vec<String> = env::args().collect();\n-    let program = &args[0];\n-\n-    let mut opts = Options::new();\n-    opts.optflag(\"h\", \"help\", \"Show this usage message.\");\n-\n-    let matches = match opts.parse(&args[1..]) {\n-        Ok(m)  => { m }\n-        Err(e) => { panic!(e.to_string()) }\n-    };\n-\n-    if matches.opt_present(\"h\") {\n-        print_usage(&program, opts);\n-        return;\n-    }\n-\n-    let data_path = &matches.free[0];\n-    let city: &str = &matches.free[1];\n-\n-    for pop in search(data_path, city) {\n-        println!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);\n-    }\n-}\n-\n-```\n-\n-While we got rid of one use of `expect` (which is a nicer variant of `unwrap`),\n-we still should handle the absence of any search results.\n-\n-To convert this to proper error handling, we need to do the following:\n-\n-1. Change the return type of `search` to be `Result<Vec<PopulationCount>,\n-   Box<Error>>`.\n-2. Use the [`try!` macro](#code-try-def) so that errors are returned to the\n-   caller instead of panicking the program.\n-3. Handle the error in `main`.\n-\n-Let's try it:\n-\n-```rust,ignore\n-use std::error::Error;\n-\n-// The rest of the code before this is unchanged.\n-\n-fn search<P: AsRef<Path>>\n-         (file_path: P, city: &str)\n-         -> Result<Vec<PopulationCount>, Box<Error>> {\n-    let mut found = vec![];\n-    let file = try!(File::open(file_path));\n-    let mut rdr = csv::Reader::from_reader(file);\n-    for row in rdr.decode::<Row>() {\n-        let row = try!(row);\n-        match row.population {\n-            None => { } // Skip it.\n-            Some(count) => if row.city == city {\n-                found.push(PopulationCount {\n-                    city: row.city,\n-                    country: row.country,\n-                    count: count,\n-                });\n-            },\n-        }\n-    }\n-    if found.is_empty() {\n-        Err(From::from(\"No matching cities with a population were found.\"))\n-    } else {\n-        Ok(found)\n-    }\n-}\n-```\n-\n-Instead of `x.unwrap()`, we now have `try!(x)`. Since our function returns a\n-`Result<T, E>`, the `try!` macro will return early from the function if an\n-error occurs.\n-\n-At the end of `search` we also convert a plain string to an error type \n-by using the [corresponding `From` impls](../std/convert/trait.From.html):\n-\n-```rust,ignore\n-// We are making use of this impl in the code above, since we call `From::from`\n-// on a `&'static str`.\n-impl<'a> From<&'a str> for Box<Error>\n-\n-// But this is also useful when you need to allocate a new string for an\n-// error message, usually with `format!`.\n-impl From<String> for Box<Error>\n-```\n-\n-Since `search` now returns a `Result<T, E>`, `main` should use case analysis\n-when calling `search`:\n-\n-```rust,ignore\n-...\n-    match search(data_path, city) {\n-        Ok(pops) => {\n-            for pop in pops {\n-                println!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);\n-            }\n-        }\n-        Err(err) => println!(\"{}\", err)\n-    }\n-...\n-```\n-\n-Now that we've seen how to do proper error handling with `Box<Error>`, let's\n-try a different approach with our own custom error type. But first, let's take\n-a quick break from error handling and add support for reading from `stdin`.\n-\n-## Reading from stdin\n-\n-In our program, we accept a single file for input and do one pass over the\n-data. This means we probably should be able to accept input on stdin. But maybe\n-we like the current format too\u2014so let's have both!\n-\n-Adding support for stdin is actually quite easy. There are only three things we\n-have to do:\n-\n-1. Tweak the program arguments so that a single parameter\u2014the\n-   city\u2014can be accepted while the population data is read from stdin.\n-2. Modify the program so that an option `-f` can take the file, if it\n-    is not passed into stdin.\n-3. Modify the `search` function to take an *optional* file path. When `None`,\n-   it should know to read from stdin.\n-\n-First, here's the new usage:\n-\n-```rust,ignore\n-fn print_usage(program: &str, opts: Options) {\n-    println!(\"{}\", opts.usage(&format!(\"Usage: {} [options] <city>\", program)));\n-}\n-```\n-Of course we need to adapt the argument handling code:\n-\n-```rust,ignore\n-...\n-    let mut opts = Options::new();\n-    opts.optopt(\"f\", \"file\", \"Choose an input file, instead of using STDIN.\", \"NAME\");\n-    opts.optflag(\"h\", \"help\", \"Show this usage message.\");\n-    ...\n-    let data_path = matches.opt_str(\"f\");\n-\n-    let city = if !matches.free.is_empty() {\n-        &matches.free[0]\n-    } else {\n-        print_usage(&program, opts);\n-        return;\n-    };\n-\n-    match search(&data_path, city) {\n-        Ok(pops) => {\n-            for pop in pops {\n-                println!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);\n-            }\n-        }\n-        Err(err) => println!(\"{}\", err)\n-    }\n-...\n-```\n-\n-We've made the user experience a bit nicer by showing the usage message,\n-instead of a panic from an out-of-bounds index, when `city`, the\n-remaining free argument, is not present.\n-\n-Modifying `search` is slightly trickier. The `csv` crate can build a\n-parser out of\n-[any type that implements `io::Read`](http://burntsushi.net/rustdoc/csv/struct.Reader.html#method.from_reader).\n-But how can we use the same code over both types? There's actually a\n-couple ways we could go about this. One way is to write `search` such\n-that it is generic on some type parameter `R` that satisfies\n-`io::Read`. Another way is to use trait objects:\n-\n-```rust,ignore\n-use std::io;\n-\n-// The rest of the code before this is unchanged.\n-\n-fn search<P: AsRef<Path>>\n-         (file_path: &Option<P>, city: &str)\n-         -> Result<Vec<PopulationCount>, Box<Error>> {\n-    let mut found = vec![];\n-    let input: Box<io::Read> = match *file_path {\n-        None => Box::new(io::stdin()),\n-        Some(ref file_path) => Box::new(try!(File::open(file_path))),\n-    };\n-    let mut rdr = csv::Reader::from_reader(input);\n-    // The rest remains unchanged!\n-}\n-```\n-\n-## Error handling with a custom type\n-\n-Previously, we learned how to\n-[compose errors using a custom error type](#composing-custom-error-types).\n-We did this by defining our error type as an `enum` and implementing `Error`\n-and `From`.\n-\n-Since we have three distinct errors (IO, CSV parsing and not found), let's\n-define an `enum` with three variants:\n-\n-```rust,ignore\n-#[derive(Debug)]\n-enum CliError {\n-    Io(io::Error),\n-    Csv(csv::Error),\n-    NotFound,\n-}\n-```\n-\n-And now for impls on `Display` and `Error`:\n-\n-```rust,ignore\n-use std::fmt;\n-\n-impl fmt::Display for CliError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            CliError::Io(ref err) => err.fmt(f),\n-            CliError::Csv(ref err) => err.fmt(f),\n-            CliError::NotFound => write!(f, \"No matching cities with a \\\n-                                             population were found.\"),\n-        }\n-    }\n-}\n-\n-impl Error for CliError {\n-    fn description(&self) -> &str {\n-        match *self {\n-            CliError::Io(ref err) => err.description(),\n-            CliError::Csv(ref err) => err.description(),\n-            CliError::NotFound => \"not found\",\n-        }\n-    }\n-\n-    fn cause(&self) -> Option<&Error> {\n-        match *self {\n-            CliError::Io(ref err) => Some(err),\n-            CliError::Csv(ref err) => Some(err),\n-            // Our custom error doesn't have an underlying cause,\n-            // but we could modify it so that it does.\n-            CliError::NotFound => None,\n-        }\n-    }\n-}\n-```\n-\n-Before we can use our `CliError` type in our `search` function, we need to\n-provide a couple `From` impls. How do we know which impls to provide? Well,\n-we'll need to convert from both `io::Error` and `csv::Error` to `CliError`.\n-Those are the only external errors, so we'll only need two `From` impls for\n-now:\n-\n-```rust,ignore\n-impl From<io::Error> for CliError {\n-    fn from(err: io::Error) -> CliError {\n-        CliError::Io(err)\n-    }\n-}\n-\n-impl From<csv::Error> for CliError {\n-    fn from(err: csv::Error) -> CliError {\n-        CliError::Csv(err)\n-    }\n-}\n-```\n-\n-The `From` impls are important because of how\n-[`try!` is defined](#code-try-def). In particular, if an error occurs,\n-`From::from` is called on the error, which in this case, will convert it to our\n-own error type `CliError`.\n-\n-With the `From` impls done, we only need to make two small tweaks to our\n-`search` function: the return type and the \u201cnot found\u201d error. Here it is in\n-full:\n-\n-```rust,ignore\n-fn search<P: AsRef<Path>>\n-         (file_path: &Option<P>, city: &str)\n-         -> Result<Vec<PopulationCount>, CliError> {\n-    let mut found = vec![];\n-    let input: Box<io::Read> = match *file_path {\n-        None => Box::new(io::stdin()),\n-        Some(ref file_path) => Box::new(try!(File::open(file_path))),\n-    };\n-    let mut rdr = csv::Reader::from_reader(input);\n-    for row in rdr.decode::<Row>() {\n-        let row = try!(row);\n-        match row.population {\n-            None => { } // Skip it.\n-            Some(count) => if row.city == city {\n-                found.push(PopulationCount {\n-                    city: row.city,\n-                    country: row.country,\n-                    count: count,\n-                });\n-            },\n-        }\n-    }\n-    if found.is_empty() {\n-        Err(CliError::NotFound)\n-    } else {\n-        Ok(found)\n-    }\n-}\n-```\n-\n-No other changes are necessary.\n-\n-## Adding functionality\n-\n-Writing generic code is great, because generalizing stuff is cool, and\n-it can then be useful later. But sometimes, the juice isn't worth the\n-squeeze. Look at what we just did in the previous step:\n-\n-1. Defined a new error type.\n-2. Added impls for `Error`, `Display` and two for `From`.\n-\n-The big downside here is that our program didn't improve a whole lot.\n-There is quite a bit of overhead to representing errors with `enum`s,\n-especially in short programs like this.\n-\n-*One* useful aspect of using a custom error type like we've done here is that\n-the `main` function can now choose to handle errors differently. Previously,\n-with `Box<Error>`, it didn't have much of a choice: just print the message.\n-We're still doing that here, but what if we wanted to, say, add a `--quiet`\n-flag? The `--quiet` flag should silence any verbose output.\n-\n-Right now, if the program doesn't find a match, it will output a message saying\n-so. This can be a little clumsy, especially if you intend for the program to\n-be used in shell scripts.\n-\n-So let's start by adding the flags. Like before, we need to tweak the usage\n-string and add a flag to the Option variable. Once we've done that, Getopts does the rest:\n-\n-```rust,ignore\n-...\n-    let mut opts = Options::new();\n-    opts.optopt(\"f\", \"file\", \"Choose an input file, instead of using STDIN.\", \"NAME\");\n-    opts.optflag(\"h\", \"help\", \"Show this usage message.\");\n-    opts.optflag(\"q\", \"quiet\", \"Silences errors and warnings.\");\n-...\n-```\n-\n-Now we only need to implement our \u201cquiet\u201d functionality. This requires us to\n-tweak the case analysis in `main`:\n-\n-```rust,ignore\n-use std::process;\n-...\n-    match search(&data_path, city) {\n-        Err(CliError::NotFound) if matches.opt_present(\"q\") => process::exit(1),\n-        Err(err) => panic!(\"{}\", err),\n-        Ok(pops) => for pop in pops {\n-            println!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);\n-        }\n-    }\n-...\n-```\n-\n-Certainly, we don't want to be quiet if there was an IO error or if the data\n-failed to parse. Therefore, we use case analysis to check if the error type is\n-`NotFound` *and* if `--quiet` has been enabled. If the search failed, we still\n-quit with an exit code (following `grep`'s convention).\n-\n-If we had stuck with `Box<Error>`, then it would be pretty tricky to implement\n-the `--quiet` functionality.\n-\n-This pretty much sums up our case study. From here, you should be ready to go\n-out into the world and write your own programs and libraries with proper error\n-handling.\n-\n-# The Short Story\n-\n-Since this section is long, it is useful to have a quick summary for error\n-handling in Rust. These are some good \u201crules of thumb.\" They are emphatically\n-*not* commandments. There are probably good reasons to break every one of these\n-heuristics!\n-\n-* If you're writing short example code that would be overburdened by error\n-  handling, it's probably fine to use `unwrap` (whether that's\n-  [`Result::unwrap`](../std/result/enum.Result.html#method.unwrap),\n-  [`Option::unwrap`](../std/option/enum.Option.html#method.unwrap)\n-  or preferably\n-  [`Option::expect`](../std/option/enum.Option.html#method.expect)).\n-  Consumers of your code should know to use proper error handling. (If they\n-  don't, send them here!)\n-* If you're writing a quick 'n' dirty program, don't feel ashamed if you use\n-  `unwrap`. Be warned: if it winds up in someone else's hands, don't be\n-  surprised if they are agitated by poor error messages!\n-* If you're writing a quick 'n' dirty program and feel ashamed about panicking\n-  anyway, then use either a `String` or a `Box<Error>` for your\n-  error type.\n-* Otherwise, in a program, define your own error types with appropriate\n-  [`From`](../std/convert/trait.From.html)\n-  and\n-  [`Error`](../std/error/trait.Error.html)\n-  impls to make the [`try!`](../std/macro.try.html)\n-  macro more ergonomic.\n-* If you're writing a library and your code can produce errors, define your own\n-  error type and implement the\n-  [`std::error::Error`](../std/error/trait.Error.html)\n-  trait. Where appropriate, implement\n-  [`From`](../std/convert/trait.From.html) to make both\n-  your library code and the caller's code easier to write. (Because of Rust's\n-  coherence rules, callers will not be able to impl `From` on your error type,\n-  so your library should do it.)\n-* Learn the combinators defined on\n-  [`Option`](../std/option/enum.Option.html)\n-  and\n-  [`Result`](../std/result/enum.Result.html).\n-  Using them exclusively can be a bit tiring at times, but I've personally\n-  found a healthy mix of `try!` and combinators to be quite appealing.\n-  `and_then`, `map` and `unwrap_or` are my favorites.\n-\n-[1]: ../book/patterns.html\n-[2]: ../std/option/enum.Option.html#method.map\n-[3]: ../std/option/enum.Option.html#method.unwrap_or\n-[4]: ../std/option/enum.Option.html#method.unwrap_or_else\n-[5]: ../std/option/enum.Option.html\n-[6]: ../std/result/index.html\n-[7]: ../std/result/enum.Result.html#method.unwrap\n-[8]: ../std/fmt/trait.Debug.html\n-[9]: ../std/primitive.str.html#method.parse\n-[10]: ../book/associated-types.html\n-[11]: https://github.com/petewarden/dstkdata\n-[12]: http://burntsushi.net/stuff/worldcitiespop.csv.gz\n-[13]: http://burntsushi.net/stuff/uscitiespop.csv.gz\n-[14]: http://doc.crates.io/guide.html\n-[15]: http://doc.rust-lang.org/getopts/getopts/index.html"}, {"sha": "3dd9aa3885bc0f84c710f924fd7bc0ffc5dc1c30", "filename": "src/doc/book/src/ffi.md", "status": "removed", "additions": 0, "deletions": 767, "changes": 767, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fffi.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,767 +0,0 @@\n-# Foreign Function Interface\n-\n-# Introduction\n-\n-This guide will use the [snappy](https://github.com/google/snappy)\n-compression/decompression library as an introduction to writing bindings for\n-foreign code. Rust is currently unable to call directly into a C++ library, but\n-snappy includes a C interface (documented in\n-[`snappy-c.h`](https://github.com/google/snappy/blob/master/snappy-c.h)).\n-\n-## A note about libc\n-\n-Many of these examples use [the `libc` crate][libc], which provides various\n-type definitions for C types, among other things. If you\u2019re trying these\n-examples yourself, you\u2019ll need to add `libc` to your `Cargo.toml`:\n-\n-```toml\n-[dependencies]\n-libc = \"0.2.0\"\n-```\n-\n-[libc]: https://crates.io/crates/libc\n-\n-and add `extern crate libc;` to your crate root.\n-\n-## Calling foreign functions\n-\n-The following is a minimal example of calling a foreign function which will\n-compile if snappy is installed:\n-\n-```rust,no_run\n-# #![feature(libc)]\n-extern crate libc;\n-use libc::size_t;\n-\n-#[link(name = \"snappy\")]\n-extern {\n-    fn snappy_max_compressed_length(source_length: size_t) -> size_t;\n-}\n-\n-fn main() {\n-    let x = unsafe { snappy_max_compressed_length(100) };\n-    println!(\"max compressed length of a 100 byte buffer: {}\", x);\n-}\n-```\n-\n-The `extern` block is a list of function signatures in a foreign library, in\n-this case with the platform's C ABI. The `#[link(...)]` attribute is used to\n-instruct the linker to link against the snappy library so the symbols are\n-resolved.\n-\n-Foreign functions are assumed to be unsafe so calls to them need to be wrapped\n-with `unsafe {}` as a promise to the compiler that everything contained within\n-truly is safe. C libraries often expose interfaces that aren't thread-safe, and\n-almost any function that takes a pointer argument isn't valid for all possible\n-inputs since the pointer could be dangling, and raw pointers fall outside of\n-Rust's safe memory model.\n-\n-When declaring the argument types to a foreign function, the Rust compiler\n-cannot check if the declaration is correct, so specifying it correctly is part\n-of keeping the binding correct at runtime.\n-\n-The `extern` block can be extended to cover the entire snappy API:\n-\n-```rust,no_run\n-# #![feature(libc)]\n-extern crate libc;\n-use libc::{c_int, size_t};\n-\n-#[link(name = \"snappy\")]\n-extern {\n-    fn snappy_compress(input: *const u8,\n-                       input_length: size_t,\n-                       compressed: *mut u8,\n-                       compressed_length: *mut size_t) -> c_int;\n-    fn snappy_uncompress(compressed: *const u8,\n-                         compressed_length: size_t,\n-                         uncompressed: *mut u8,\n-                         uncompressed_length: *mut size_t) -> c_int;\n-    fn snappy_max_compressed_length(source_length: size_t) -> size_t;\n-    fn snappy_uncompressed_length(compressed: *const u8,\n-                                  compressed_length: size_t,\n-                                  result: *mut size_t) -> c_int;\n-    fn snappy_validate_compressed_buffer(compressed: *const u8,\n-                                         compressed_length: size_t) -> c_int;\n-}\n-# fn main() {}\n-```\n-\n-# Creating a safe interface\n-\n-The raw C API needs to be wrapped to provide memory safety and make use of higher-level concepts\n-like vectors. A library can choose to expose only the safe, high-level interface and hide the unsafe\n-internal details.\n-\n-Wrapping the functions which expect buffers involves using the `slice::raw` module to manipulate Rust\n-vectors as pointers to memory. Rust's vectors are guaranteed to be a contiguous block of memory. The\n-length is the number of elements currently contained, and the capacity is the total size in elements of\n-the allocated memory. The length is less than or equal to the capacity.\n-\n-```rust\n-# #![feature(libc)]\n-# extern crate libc;\n-# use libc::{c_int, size_t};\n-# unsafe fn snappy_validate_compressed_buffer(_: *const u8, _: size_t) -> c_int { 0 }\n-# fn main() {}\n-pub fn validate_compressed_buffer(src: &[u8]) -> bool {\n-    unsafe {\n-        snappy_validate_compressed_buffer(src.as_ptr(), src.len() as size_t) == 0\n-    }\n-}\n-```\n-\n-The `validate_compressed_buffer` wrapper above makes use of an `unsafe` block, but it makes the\n-guarantee that calling it is safe for all inputs by leaving off `unsafe` from the function\n-signature.\n-\n-The `snappy_compress` and `snappy_uncompress` functions are more complex, since a buffer has to be\n-allocated to hold the output too.\n-\n-The `snappy_max_compressed_length` function can be used to allocate a vector with the maximum\n-required capacity to hold the compressed output. The vector can then be passed to the\n-`snappy_compress` function as an output parameter. An output parameter is also passed to retrieve\n-the true length after compression for setting the length.\n-\n-```rust\n-# #![feature(libc)]\n-# extern crate libc;\n-# use libc::{size_t, c_int};\n-# unsafe fn snappy_compress(a: *const u8, b: size_t, c: *mut u8,\n-#                           d: *mut size_t) -> c_int { 0 }\n-# unsafe fn snappy_max_compressed_length(a: size_t) -> size_t { a }\n-# fn main() {}\n-pub fn compress(src: &[u8]) -> Vec<u8> {\n-    unsafe {\n-        let srclen = src.len() as size_t;\n-        let psrc = src.as_ptr();\n-\n-        let mut dstlen = snappy_max_compressed_length(srclen);\n-        let mut dst = Vec::with_capacity(dstlen as usize);\n-        let pdst = dst.as_mut_ptr();\n-\n-        snappy_compress(psrc, srclen, pdst, &mut dstlen);\n-        dst.set_len(dstlen as usize);\n-        dst\n-    }\n-}\n-```\n-\n-Decompression is similar, because snappy stores the uncompressed size as part of the compression\n-format and `snappy_uncompressed_length` will retrieve the exact buffer size required.\n-\n-```rust\n-# #![feature(libc)]\n-# extern crate libc;\n-# use libc::{size_t, c_int};\n-# unsafe fn snappy_uncompress(compressed: *const u8,\n-#                             compressed_length: size_t,\n-#                             uncompressed: *mut u8,\n-#                             uncompressed_length: *mut size_t) -> c_int { 0 }\n-# unsafe fn snappy_uncompressed_length(compressed: *const u8,\n-#                                      compressed_length: size_t,\n-#                                      result: *mut size_t) -> c_int { 0 }\n-# fn main() {}\n-pub fn uncompress(src: &[u8]) -> Option<Vec<u8>> {\n-    unsafe {\n-        let srclen = src.len() as size_t;\n-        let psrc = src.as_ptr();\n-\n-        let mut dstlen: size_t = 0;\n-        snappy_uncompressed_length(psrc, srclen, &mut dstlen);\n-\n-        let mut dst = Vec::with_capacity(dstlen as usize);\n-        let pdst = dst.as_mut_ptr();\n-\n-        if snappy_uncompress(psrc, srclen, pdst, &mut dstlen) == 0 {\n-            dst.set_len(dstlen as usize);\n-            Some(dst)\n-        } else {\n-            None // SNAPPY_INVALID_INPUT\n-        }\n-    }\n-}\n-```\n-\n-Then, we can add some tests to show how to use them.\n-\n-```rust\n-# #![feature(libc)]\n-# extern crate libc;\n-# use libc::{c_int, size_t};\n-# unsafe fn snappy_compress(input: *const u8,\n-#                           input_length: size_t,\n-#                           compressed: *mut u8,\n-#                           compressed_length: *mut size_t)\n-#                           -> c_int { 0 }\n-# unsafe fn snappy_uncompress(compressed: *const u8,\n-#                             compressed_length: size_t,\n-#                             uncompressed: *mut u8,\n-#                             uncompressed_length: *mut size_t)\n-#                             -> c_int { 0 }\n-# unsafe fn snappy_max_compressed_length(source_length: size_t) -> size_t { 0 }\n-# unsafe fn snappy_uncompressed_length(compressed: *const u8,\n-#                                      compressed_length: size_t,\n-#                                      result: *mut size_t)\n-#                                      -> c_int { 0 }\n-# unsafe fn snappy_validate_compressed_buffer(compressed: *const u8,\n-#                                             compressed_length: size_t)\n-#                                             -> c_int { 0 }\n-# fn main() { }\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-\n-    #[test]\n-    fn valid() {\n-        let d = vec![0xde, 0xad, 0xd0, 0x0d];\n-        let c: &[u8] = &compress(&d);\n-        assert!(validate_compressed_buffer(c));\n-        assert!(uncompress(c) == Some(d));\n-    }\n-\n-    #[test]\n-    fn invalid() {\n-        let d = vec![0, 0, 0, 0];\n-        assert!(!validate_compressed_buffer(&d));\n-        assert!(uncompress(&d).is_none());\n-    }\n-\n-    #[test]\n-    fn empty() {\n-        let d = vec![];\n-        assert!(!validate_compressed_buffer(&d));\n-        assert!(uncompress(&d).is_none());\n-        let c = compress(&d);\n-        assert!(validate_compressed_buffer(&c));\n-        assert!(uncompress(&c) == Some(d));\n-    }\n-}\n-```\n-\n-# Destructors\n-\n-Foreign libraries often hand off ownership of resources to the calling code.\n-When this occurs, we must use Rust's destructors to provide safety and guarantee\n-the release of these resources (especially in the case of panic).\n-\n-For more about destructors, see the [Drop trait](../std/ops/trait.Drop.html).\n-\n-# Callbacks from C code to Rust functions\n-\n-Some external libraries require the usage of callbacks to report back their\n-current state or intermediate data to the caller.\n-It is possible to pass functions defined in Rust to an external library.\n-The requirement for this is that the callback function is marked as `extern`\n-with the correct calling convention to make it callable from C code.\n-\n-The callback function can then be sent through a registration call\n-to the C library and afterwards be invoked from there.\n-\n-A basic example is:\n-\n-Rust code:\n-\n-```rust,no_run\n-extern fn callback(a: i32) {\n-    println!(\"I'm called from C with value {0}\", a);\n-}\n-\n-#[link(name = \"extlib\")]\n-extern {\n-   fn register_callback(cb: extern fn(i32)) -> i32;\n-   fn trigger_callback();\n-}\n-\n-fn main() {\n-    unsafe {\n-        register_callback(callback);\n-        trigger_callback(); // Triggers the callback.\n-    }\n-}\n-```\n-\n-C code:\n-\n-```c\n-typedef void (*rust_callback)(int32_t);\n-rust_callback cb;\n-\n-int32_t register_callback(rust_callback callback) {\n-    cb = callback;\n-    return 1;\n-}\n-\n-void trigger_callback() {\n-  cb(7); // Will call callback(7) in Rust.\n-}\n-```\n-\n-In this example Rust's `main()` will call `trigger_callback()` in C,\n-which would, in turn, call back to `callback()` in Rust.\n-\n-\n-## Targeting callbacks to Rust objects\n-\n-The former example showed how a global function can be called from C code.\n-However it is often desired that the callback is targeted to a special\n-Rust object. This could be the object that represents the wrapper for the\n-respective C object.\n-\n-This can be achieved by passing a raw pointer to the object down to the\n-C library. The C library can then include the pointer to the Rust object in\n-the notification. This will allow the callback to unsafely access the\n-referenced Rust object.\n-\n-Rust code:\n-\n-```rust,no_run\n-#[repr(C)]\n-struct RustObject {\n-    a: i32,\n-    // Other members...\n-}\n-\n-extern \"C\" fn callback(target: *mut RustObject, a: i32) {\n-    println!(\"I'm called from C with value {0}\", a);\n-    unsafe {\n-        // Update the value in RustObject with the value received from the callback:\n-        (*target).a = a;\n-    }\n-}\n-\n-#[link(name = \"extlib\")]\n-extern {\n-   fn register_callback(target: *mut RustObject,\n-                        cb: extern fn(*mut RustObject, i32)) -> i32;\n-   fn trigger_callback();\n-}\n-\n-fn main() {\n-    // Create the object that will be referenced in the callback:\n-    let mut rust_object = Box::new(RustObject { a: 5 });\n-\n-    unsafe {\n-        register_callback(&mut *rust_object, callback);\n-        trigger_callback();\n-    }\n-}\n-```\n-\n-C code:\n-\n-```c\n-typedef void (*rust_callback)(void*, int32_t);\n-void* cb_target;\n-rust_callback cb;\n-\n-int32_t register_callback(void* callback_target, rust_callback callback) {\n-    cb_target = callback_target;\n-    cb = callback;\n-    return 1;\n-}\n-\n-void trigger_callback() {\n-  cb(cb_target, 7); // Will call callback(&rustObject, 7) in Rust.\n-}\n-```\n-\n-## Asynchronous callbacks\n-\n-In the previously given examples the callbacks are invoked as a direct reaction\n-to a function call to the external C library.\n-The control over the current thread is switched from Rust to C to Rust for the\n-execution of the callback, but in the end the callback is executed on the\n-same thread that called the function which triggered the callback.\n-\n-Things get more complicated when the external library spawns its own threads\n-and invokes callbacks from there.\n-In these cases access to Rust data structures inside the callbacks is\n-especially unsafe and proper synchronization mechanisms must be used.\n-Besides classical synchronization mechanisms like mutexes, one possibility in\n-Rust is to use channels (in `std::sync::mpsc`) to forward data from the C\n-thread that invoked the callback into a Rust thread.\n-\n-If an asynchronous callback targets a special object in the Rust address space\n-it is also absolutely necessary that no more callbacks are performed by the\n-C library after the respective Rust object gets destroyed.\n-This can be achieved by unregistering the callback in the object's\n-destructor and designing the library in a way that guarantees that no\n-callback will be performed after deregistration.\n-\n-# Linking\n-\n-The `link` attribute on `extern` blocks provides the basic building block for\n-instructing rustc how it will link to native libraries. There are two accepted\n-forms of the link attribute today:\n-\n-* `#[link(name = \"foo\")]`\n-* `#[link(name = \"foo\", kind = \"bar\")]`\n-\n-In both of these cases, `foo` is the name of the native library that we're\n-linking to, and in the second case `bar` is the type of native library that the\n-compiler is linking to. There are currently three known types of native\n-libraries:\n-\n-* Dynamic - `#[link(name = \"readline\")]`\n-* Static - `#[link(name = \"my_build_dependency\", kind = \"static\")]`\n-* Frameworks - `#[link(name = \"CoreFoundation\", kind = \"framework\")]`\n-\n-Note that frameworks are only available on macOS targets.\n-\n-The different `kind` values are meant to differentiate how the native library\n-participates in linkage. From a linkage perspective, the Rust compiler creates\n-two flavors of artifacts: partial (rlib/staticlib) and final (dylib/binary).\n-Native dynamic library and framework dependencies are propagated to the final\n-artifact boundary, while static library dependencies are not propagated at\n-all, because the static libraries are integrated directly into the subsequent\n-artifact.\n-\n-A few examples of how this model can be used are:\n-\n-* A native build dependency. Sometimes some C/C++ glue is needed when writing\n-  some Rust code, but distribution of the C/C++ code in a library format is\n-  a burden. In this case, the code will be archived into `libfoo.a` and then the\n-  Rust crate would declare a dependency via `#[link(name = \"foo\", kind =\n-  \"static\")]`.\n-\n-  Regardless of the flavor of output for the crate, the native static library\n-  will be included in the output, meaning that distribution of the native static\n-  library is not necessary.\n-\n-* A normal dynamic dependency. Common system libraries (like `readline`) are\n-  available on a large number of systems, and often a static copy of these\n-  libraries cannot be found. When this dependency is included in a Rust crate,\n-  partial targets (like rlibs) will not link to the library, but when the rlib\n-  is included in a final target (like a binary), the native library will be\n-  linked in.\n-\n-On macOS, frameworks behave with the same semantics as a dynamic library.\n-\n-# Unsafe blocks\n-\n-Some operations, like dereferencing raw pointers or calling functions that have been marked\n-unsafe are only allowed inside unsafe blocks. Unsafe blocks isolate unsafety and are a promise to\n-the compiler that the unsafety does not leak out of the block.\n-\n-Unsafe functions, on the other hand, advertise it to the world. An unsafe function is written like\n-this:\n-\n-```rust\n-unsafe fn kaboom(ptr: *const i32) -> i32 { *ptr }\n-```\n-\n-This function can only be called from an `unsafe` block or another `unsafe` function.\n-\n-# Accessing foreign globals\n-\n-Foreign APIs often export a global variable which could do something like track\n-global state. In order to access these variables, you declare them in `extern`\n-blocks with the `static` keyword:\n-\n-```rust,no_run\n-# #![feature(libc)]\n-extern crate libc;\n-\n-#[link(name = \"readline\")]\n-extern {\n-    static rl_readline_version: libc::c_int;\n-}\n-\n-fn main() {\n-    println!(\"You have readline version {} installed.\",\n-             unsafe { rl_readline_version as i32 });\n-}\n-```\n-\n-Alternatively, you may need to alter global state provided by a foreign\n-interface. To do this, statics can be declared with `mut` so we can mutate\n-them.\n-\n-```rust,no_run\n-# #![feature(libc)]\n-extern crate libc;\n-\n-use std::ffi::CString;\n-use std::ptr;\n-\n-#[link(name = \"readline\")]\n-extern {\n-    static mut rl_prompt: *const libc::c_char;\n-}\n-\n-fn main() {\n-    let prompt = CString::new(\"[my-awesome-shell] $\").unwrap();\n-    unsafe {\n-        rl_prompt = prompt.as_ptr();\n-\n-        println!(\"{:?}\", rl_prompt);\n-\n-        rl_prompt = ptr::null();\n-    }\n-}\n-```\n-\n-Note that all interaction with a `static mut` is unsafe, both reading and\n-writing. Dealing with global mutable state requires a great deal of care.\n-\n-# Foreign calling conventions\n-\n-Most foreign code exposes a C ABI, and Rust uses the platform's C calling convention by default when\n-calling foreign functions. Some foreign functions, most notably the Windows API, use other calling\n-conventions. Rust provides a way to tell the compiler which convention to use:\n-\n-```rust\n-# #![feature(libc)]\n-extern crate libc;\n-\n-#[cfg(all(target_os = \"win32\", target_arch = \"x86\"))]\n-#[link(name = \"kernel32\")]\n-#[allow(non_snake_case)]\n-extern \"stdcall\" {\n-    fn SetEnvironmentVariableA(n: *const u8, v: *const u8) -> libc::c_int;\n-}\n-# fn main() { }\n-```\n-\n-This applies to the entire `extern` block. The list of supported ABI constraints\n-are:\n-\n-* `stdcall`\n-* `aapcs`\n-* `cdecl`\n-* `fastcall`\n-* `vectorcall`\n-This is currently hidden behind the `abi_vectorcall` gate and is subject to change.\n-* `Rust`\n-* `rust-intrinsic`\n-* `system`\n-* `C`\n-* `win64`\n-* `sysv64`\n-\n-Most of the abis in this list are self-explanatory, but the `system` abi may\n-seem a little odd. This constraint selects whatever the appropriate ABI is for\n-interoperating with the target's libraries. For example, on win32 with a x86\n-architecture, this means that the abi used would be `stdcall`. On x86_64,\n-however, windows uses the `C` calling convention, so `C` would be used. This\n-means that in our previous example, we could have used `extern \"system\" { ... }`\n-to define a block for all windows systems, not only x86 ones.\n-\n-# Interoperability with foreign code\n-\n-Rust guarantees that the layout of a `struct` is compatible with the platform's\n-representation in C only if the `#[repr(C)]` attribute is applied to it.\n-`#[repr(C, packed)]` can be used to lay out struct members without padding.\n-`#[repr(C)]` can also be applied to an enum.\n-\n-Rust's owned boxes (`Box<T>`) use non-nullable pointers as handles which point\n-to the contained object. However, they should not be manually created because\n-they are managed by internal allocators. References can safely be assumed to be\n-non-nullable pointers directly to the type.  However, breaking the borrow\n-checking or mutability rules is not guaranteed to be safe, so prefer using raw\n-pointers (`*`) if that's needed because the compiler can't make as many\n-assumptions about them.\n-\n-Vectors and strings share the same basic memory layout, and utilities are\n-available in the `vec` and `str` modules for working with C APIs. However,\n-strings are not terminated with `\\0`. If you need a NUL-terminated string for\n-interoperability with C, you should use the `CString` type in the `std::ffi`\n-module.\n-\n-The [`libc` crate on crates.io][libc] includes type aliases and function\n-definitions for the C standard library in the `libc` module, and Rust links\n-against `libc` and `libm` by default.\n-\n-# Variadic functions\n-\n-In C, functions can be 'variadic', meaning they accept a variable number of arguments. This can\n-be achieved in Rust by specifying `...` within the argument list of a foreign function declaration:\n-\n-```no_run\n-extern {\n-    fn foo(x: i32, ...);\n-}\n-\n-fn main() {\n-    unsafe {\n-        foo(10, 20, 30, 40, 50);\n-    }\n-}\n-```\n-\n-Normal Rust functions can *not* be variadic:\n-\n-```ignore\n-// This will not compile\n-\n-fn foo(x: i32, ...) { }\n-```\n-\n-# The \"nullable pointer optimization\"\n-\n-Certain Rust types are defined to never be `null`. This includes references (`&T`,\n-`&mut T`), boxes (`Box<T>`), and function pointers (`extern \"abi\" fn()`). When\n-interfacing with C, pointers that might be `null` are often used, which would seem to\n-require some messy `transmute`s and/or unsafe code to handle conversions to/from Rust types.\n-However, the language provides a workaround.\n-\n-As a special case, an `enum` is eligible for the \"nullable pointer optimization\" if it contains\n-exactly two variants, one of which contains no data and the other contains a field of one of the\n-non-nullable types listed above.  This means no extra space is required for a discriminant; rather,\n-the empty variant is represented by putting a `null` value into the non-nullable field. This is\n-called an \"optimization\", but unlike other optimizations it is guaranteed to apply to eligible\n-types.\n-\n-The most common type that takes advantage of the nullable pointer optimization is `Option<T>`,\n-where `None` corresponds to `null`. So `Option<extern \"C\" fn(c_int) -> c_int>` is a correct way\n-to represent a nullable function pointer using the C ABI (corresponding to the C type\n-`int (*)(int)`).\n-\n-Here is a contrived example. Let's say some C library has a facility for registering a\n-callback, which gets called in certain situations. The callback is passed a function pointer\n-and an integer and it is supposed to run the function with the integer as a parameter. So\n-we have function pointers flying across the FFI boundary in both directions.\n-\n-```rust\n-# #![feature(libc)]\n-extern crate libc;\n-use libc::c_int;\n-\n-# #[cfg(hidden)]\n-extern \"C\" {\n-    /// Registers the callback.\n-    fn register(cb: Option<extern \"C\" fn(Option<extern \"C\" fn(c_int) -> c_int>, c_int) -> c_int>);\n-}\n-# unsafe fn register(_: Option<extern \"C\" fn(Option<extern \"C\" fn(c_int) -> c_int>,\n-#                                            c_int) -> c_int>)\n-# {}\n-\n-/// This fairly useless function receives a function pointer and an integer\n-/// from C, and returns the result of calling the function with the integer.\n-/// In case no function is provided, it squares the integer by default.\n-extern \"C\" fn apply(process: Option<extern \"C\" fn(c_int) -> c_int>, int: c_int) -> c_int {\n-    match process {\n-        Some(f) => f(int),\n-        None    => int * int\n-    }\n-}\n-\n-fn main() {\n-    unsafe {\n-        register(Some(apply));\n-    }\n-}\n-```\n-\n-And the code on the C side looks like this:\n-\n-```c\n-void register(void (*f)(void (*)(int), int)) {\n-    ...\n-}\n-```\n-\n-No `transmute` required!\n-\n-# Calling Rust code from C\n-\n-You may wish to compile Rust code in a way so that it can be called from C. This is\n-fairly easy, but requires a few things:\n-\n-```rust\n-#[no_mangle]\n-pub extern fn hello_rust() -> *const u8 {\n-    \"Hello, world!\\0\".as_ptr()\n-}\n-# fn main() {}\n-```\n-\n-The `extern` makes this function adhere to the C calling convention, as\n-discussed above in \"[Foreign Calling\n-Conventions](ffi.html#foreign-calling-conventions)\". The `no_mangle`\n-attribute turns off Rust's name mangling, so that it is easier to link to.\n-\n-# FFI and panics\n-\n-It\u2019s important to be mindful of `panic!`s when working with FFI. A `panic!`\n-across an FFI boundary is undefined behavior. If you\u2019re writing code that may\n-panic, you should run it in a closure with [`catch_unwind`]:\n-\n-```rust\n-use std::panic::catch_unwind;\n-\n-#[no_mangle]\n-pub extern fn oh_no() -> i32 {\n-    let result = catch_unwind(|| {\n-        panic!(\"Oops!\");\n-    });\n-    match result {\n-        Ok(_) => 0,\n-        Err(_) => 1,\n-    }\n-}\n-\n-fn main() {}\n-```\n-\n-Please note that [`catch_unwind`] will only catch unwinding panics, not\n-those who abort the process. See the documentation of [`catch_unwind`]\n-for more information.\n-\n-[`catch_unwind`]: ../std/panic/fn.catch_unwind.html\n-\n-# Representing opaque structs\n-\n-Sometimes, a C library wants to provide a pointer to something, but not let you\n-know the internal details of the thing it wants. The simplest way is to use a\n-`void *` argument:\n-\n-```c\n-void foo(void *arg);\n-void bar(void *arg);\n-```\n-\n-We can represent this in Rust with the `c_void` type:\n-\n-```rust\n-# #![feature(libc)]\n-extern crate libc;\n-\n-extern \"C\" {\n-    pub fn foo(arg: *mut libc::c_void);\n-    pub fn bar(arg: *mut libc::c_void);\n-}\n-# fn main() {}\n-```\n-\n-This is a perfectly valid way of handling the situation. However, we can do a bit\n-better. To solve this, some C libraries will instead create a `struct`, where\n-the details and memory layout of the struct are private. This gives some amount\n-of type safety. These structures are called \u2018opaque\u2019. Here\u2019s an example, in C:\n-\n-```c\n-struct Foo; /* Foo is a structure, but its contents are not part of the public interface */\n-struct Bar;\n-void foo(struct Foo *arg);\n-void bar(struct Bar *arg);\n-```\n-\n-To do this in Rust, let\u2019s create our own opaque types with `enum`:\n-\n-```rust\n-pub enum Foo {}\n-pub enum Bar {}\n-\n-extern \"C\" {\n-    pub fn foo(arg: *mut Foo);\n-    pub fn bar(arg: *mut Bar);\n-}\n-# fn main() {}\n-```\n-\n-By using an `enum` with no variants, we create an opaque type that we can\u2019t\n-instantiate, as it has no variants. But because our `Foo` and `Bar` types are\n-different, we\u2019ll get type safety between the two of them, so we cannot\n-accidentally pass a pointer to `Foo` to `bar()`."}, {"sha": "96c8e9f5d683423aca4aafef93b7c9aec840ff19", "filename": "src/doc/book/src/functions.md", "status": "removed", "additions": 0, "deletions": 336, "changes": 336, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Ffunctions.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Ffunctions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ffunctions.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,336 +0,0 @@\n-# Functions\n-\n-Every Rust program has at least one function, the `main` function:\n-\n-```rust\n-fn main() {\n-}\n-```\n-\n-This is the simplest possible function declaration. As we mentioned before,\n-`fn` says \u2018this is a function\u2019, followed by the name, some parentheses because\n-this function takes no arguments, and then some curly braces to indicate the\n-body. Here\u2019s a function named `foo`:\n-\n-```rust\n-fn foo() {\n-}\n-```\n-\n-So, what about taking arguments? Here\u2019s a function that prints a number:\n-\n-```rust\n-fn print_number(x: i32) {\n-    println!(\"x is: {}\", x);\n-}\n-```\n-\n-Here\u2019s a complete program that uses `print_number`:\n-\n-```rust\n-fn main() {\n-    print_number(5);\n-}\n-\n-fn print_number(x: i32) {\n-    println!(\"x is: {}\", x);\n-}\n-```\n-\n-As you can see, function arguments work very similar to `let` declarations:\n-you add a type to the argument name, after a colon.\n-\n-Here\u2019s a complete program that adds two numbers together and prints them:\n-\n-```rust\n-fn main() {\n-    print_sum(5, 6);\n-}\n-\n-fn print_sum(x: i32, y: i32) {\n-    println!(\"sum is: {}\", x + y);\n-}\n-```\n-\n-You separate arguments with a comma, both when you call the function, as well\n-as when you declare it.\n-\n-Unlike `let`, you _must_ declare the types of function arguments. This does\n-not work:\n-\n-```rust,ignore\n-fn print_sum(x, y) {\n-    println!(\"sum is: {}\", x + y);\n-}\n-```\n-\n-You get this error:\n-\n-```text\n-expected one of `!`, `:`, or `@`, found `)`\n-fn print_sum(x, y) {\n-```\n-\n-This is a deliberate design decision. While full-program inference is possible,\n-languages which have it, like Haskell, often suggest that documenting your\n-types explicitly is a best-practice. We agree that forcing functions to declare\n-types while allowing for inference inside of function bodies is a wonderful\n-sweet spot between full inference and no inference.\n-\n-What about returning a value? Here\u2019s a function that adds one to an integer:\n-\n-```rust\n-fn add_one(x: i32) -> i32 {\n-    x + 1\n-}\n-```\n-\n-Rust functions return exactly one value, and you declare the type after an\n-\u2018arrow\u2019, which is a dash (`-`) followed by a greater-than sign (`>`). The last\n-line of a function determines what it returns. You\u2019ll note the lack of a\n-semicolon here. If we added it in:\n-\n-```rust,ignore\n-fn add_one(x: i32) -> i32 {\n-    x + 1;\n-}\n-```\n-\n-We would get an error:\n-\n-```text\n-error: not all control paths return a value\n-fn add_one(x: i32) -> i32 {\n-     x + 1;\n-}\n-\n-help: consider removing this semicolon:\n-     x + 1;\n-          ^\n-```\n-\n-This reveals two interesting things about Rust: it is an expression-based\n-language, and semicolons are different from semicolons in other \u2018curly brace\n-and semicolon\u2019-based languages. These two things are related.\n-\n-## Expressions vs. Statements\n-\n-Rust is primarily an expression-based language. There are only two kinds of\n-statements, and everything else is an expression.\n-\n-So what's the difference? Expressions return a value, and statements do not.\n-That\u2019s why we end up with \u2018not all control paths return a value\u2019 here: the\n-statement `x + 1;` doesn\u2019t return a value. There are two kinds of statements in\n-Rust: \u2018declaration statements\u2019 and \u2018expression statements\u2019. Everything else is\n-an expression. Let\u2019s talk about declaration statements first.\n-\n-In some languages, variable bindings can be written as expressions, not\n-statements. Like Ruby:\n-\n-```ruby\n-x = y = 5\n-```\n-\n-In Rust, however, using `let` to introduce a binding is _not_ an expression. The\n-following will produce a compile-time error:\n-\n-```rust,ignore\n-let x = (let y = 5); // Expected identifier, found keyword `let`.\n-```\n-\n-The compiler is telling us here that it was expecting to see the beginning of\n-an expression, and a `let` can only begin a statement, not an expression.\n-\n-Note that assigning to an already-bound variable (e.g. `y = 5`) is still an\n-expression, although its value is not particularly useful. Unlike other\n-languages where an assignment evaluates to the assigned value (e.g. `5` in the\n-previous example), in Rust the value of an assignment is an empty tuple `()`\n-because the assigned value can have [only one owner](ownership.html), and any\n-other returned value would be too surprising:\n-\n-```rust\n-let mut y = 5;\n-\n-let x = (y = 6);  // `x` has the value `()`, not `6`.\n-```\n-\n-The second kind of statement in Rust is the *expression statement*. Its\n-purpose is to turn any expression into a statement. In practical terms, Rust's\n-grammar expects statements to follow other statements. This means that you use\n-semicolons to separate expressions from each other. This means that Rust\n-looks a lot like most other languages that require you to use semicolons\n-at the end of every line, and you will see semicolons at the end of almost\n-every line of Rust code you see.\n-\n-What is this exception that makes us say \"almost\"? You saw it already, in this\n-code:\n-\n-```rust\n-fn add_one(x: i32) -> i32 {\n-    x + 1\n-}\n-```\n-\n-Our function claims to return an `i32`, but with a semicolon, it would return\n-`()` instead. Rust realizes this probably isn\u2019t what we want, and suggests\n-removing the semicolon in the error we saw before.\n-\n-## Early returns\n-\n-But what about early returns? Rust does have a keyword for that, `return`:\n-\n-```rust\n-fn foo(x: i32) -> i32 {\n-    return x;\n-\n-    // We never run this code!\n-    x + 1\n-}\n-```\n-\n-Using a `return` as the last line of a function works, but is considered poor\n-style:\n-\n-```rust\n-fn foo(x: i32) -> i32 {\n-    return x + 1;\n-}\n-```\n-\n-The previous definition without `return` may look a bit strange if you haven\u2019t\n-worked in an expression-based language before, but it becomes intuitive over\n-time.\n-\n-## Diverging functions\n-\n-Rust has some special syntax for \u2018diverging functions\u2019, which are functions that\n-do not return:\n-\n-```rust\n-fn diverges() -> ! {\n-    panic!(\"This function never returns!\");\n-}\n-```\n-\n-`panic!` is a macro, similar to `println!()` that we\u2019ve already seen. Unlike\n-`println!()`, `panic!()` causes the current thread of execution to crash with\n-the given message. Because this function will cause a crash, it will never\n-return, and so it has the type \u2018`!`\u2019, which is read \u2018diverges\u2019.\n-\n-If you add a main function that calls `diverges()` and run it, you\u2019ll get\n-some output that looks like this:\n-\n-```text\n-thread \u2018main\u2019 panicked at \u2018This function never returns!\u2019, hello.rs:2\n-```\n-\n-If you want more information, you can get a backtrace by setting the\n-`RUST_BACKTRACE` environment variable:\n-\n-```text\n-$ RUST_BACKTRACE=1 ./diverges\n-thread 'main' panicked at 'This function never returns!', hello.rs:2\n-Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n-stack backtrace:\n-  hello::diverges\n-        at ./hello.rs:2\n-  hello::main\n-        at ./hello.rs:6\n-```\n-\n-If you want the complete backtrace and filenames:\n-\n-```text\n-$ RUST_BACKTRACE=full ./diverges\n-thread 'main' panicked at 'This function never returns!', hello.rs:2\n-stack backtrace:\n-   1:     0x7f402773a829 - sys::backtrace::write::h0942de78b6c02817K8r\n-   2:     0x7f402773d7fc - panicking::on_panic::h3f23f9d0b5f4c91bu9w\n-   3:     0x7f402773960e - rt::unwind::begin_unwind_inner::h2844b8c5e81e79558Bw\n-   4:     0x7f4027738893 - rt::unwind::begin_unwind::h4375279447423903650\n-   5:     0x7f4027738809 - diverges::h2266b4c4b850236beaa\n-   6:     0x7f40277389e5 - main::h19bb1149c2f00ecfBaa\n-   7:     0x7f402773f514 - rt::unwind::try::try_fn::h13186883479104382231\n-   8:     0x7f402773d1d8 - __rust_try\n-   9:     0x7f402773f201 - rt::lang_start::ha172a3ce74bb453aK5w\n-  10:     0x7f4027738a19 - main\n-  11:     0x7f402694ab44 - __libc_start_main\n-  12:     0x7f40277386c8 - <unknown>\n-  13:                0x0 - <unknown>\n-```\n-\n-If you need to override an already set `RUST_BACKTRACE`, \n-in cases when you cannot just unset the variable, \n-then set it to `0` to avoid getting a backtrace. \n-Any other value (even no value at all) turns on backtrace.\n-\n-```text\n-$ export RUST_BACKTRACE=1\n-...\n-$ RUST_BACKTRACE=0 ./diverges \n-thread 'main' panicked at 'This function never returns!', hello.rs:2\n-note: Run with `RUST_BACKTRACE=1` for a backtrace.\n-```\n-\n-`RUST_BACKTRACE` also works with Cargo\u2019s `run` command:\n-\n-```text\n-$ RUST_BACKTRACE=full cargo run\n-     Running `target/debug/diverges`\n-thread 'main' panicked at 'This function never returns!', hello.rs:2\n-stack backtrace:\n-   1:     0x7f402773a829 - sys::backtrace::write::h0942de78b6c02817K8r\n-   2:     0x7f402773d7fc - panicking::on_panic::h3f23f9d0b5f4c91bu9w\n-   3:     0x7f402773960e - rt::unwind::begin_unwind_inner::h2844b8c5e81e79558Bw\n-   4:     0x7f4027738893 - rt::unwind::begin_unwind::h4375279447423903650\n-   5:     0x7f4027738809 - diverges::h2266b4c4b850236beaa\n-   6:     0x7f40277389e5 - main::h19bb1149c2f00ecfBaa\n-   7:     0x7f402773f514 - rt::unwind::try::try_fn::h13186883479104382231\n-   8:     0x7f402773d1d8 - __rust_try\n-   9:     0x7f402773f201 - rt::lang_start::ha172a3ce74bb453aK5w\n-  10:     0x7f4027738a19 - main\n-  11:     0x7f402694ab44 - __libc_start_main\n-  12:     0x7f40277386c8 - <unknown>\n-  13:                0x0 - <unknown>\n-```\n-\n-A diverging function can be used as any type:\n-\n-```rust,should_panic\n-# fn diverges() -> ! {\n-#    panic!(\"This function never returns!\");\n-# }\n-let x: i32 = diverges();\n-let x: String = diverges();\n-```\n-\n-## Function pointers\n-\n-We can also create variable bindings which point to functions:\n-\n-```rust\n-let f: fn(i32) -> i32;\n-```\n-\n-`f` is a variable binding which points to a function that takes an `i32` as\n-an argument and returns an `i32`. For example:\n-\n-```rust\n-fn plus_one(i: i32) -> i32 {\n-    i + 1\n-}\n-\n-// Without type inference:\n-let f: fn(i32) -> i32 = plus_one;\n-\n-// With type inference:\n-let f = plus_one;\n-```\n-\n-We can then use `f` to call the function:\n-\n-```rust\n-# fn plus_one(i: i32) -> i32 { i + 1 }\n-# let f = plus_one;\n-let six = f(5);\n-```"}, {"sha": "d02cd776d00e3a48c4fce6de90f77bff9caaaf4d", "filename": "src/doc/book/src/generics.md", "status": "removed", "additions": 0, "deletions": 190, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fgenerics.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fgenerics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fgenerics.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,190 +0,0 @@\n-# Generics\n-\n-Sometimes, when writing a function or data type, we may want it to work for\n-multiple types of arguments. In Rust, we can do this with generics.\n-Generics are called \u2018parametric polymorphism\u2019 in type theory,\n-which means that they are types or functions that have multiple forms (\u2018poly\u2019\n-is multiple, \u2018morph\u2019 is form) over a given parameter (\u2018parametric\u2019).\n-\n-Anyway, enough type theory, let\u2019s check out some generic code. Rust\u2019s\n-standard library provides a type, `Option<T>`, that\u2019s generic:\n-\n-```rust\n-enum Option<T> {\n-    Some(T),\n-    None,\n-}\n-```\n-\n-The `<T>` part, which you\u2019ve seen a few times before, indicates that this is\n-a generic data type. Inside the declaration of our `enum`, wherever we see a `T`,\n-we substitute that type for the same type used in the generic. Here\u2019s an\n-example of using `Option<T>`, with some extra type annotations:\n-\n-```rust\n-let x: Option<i32> = Some(5);\n-```\n-\n-In the type declaration, we say `Option<i32>`. Note how similar this looks to\n-`Option<T>`. So, in this particular `Option`, `T` has the value of `i32`. On\n-the right-hand side of the binding, we make a `Some(T)`, where `T` is `5`.\n-Since that\u2019s an `i32`, the two sides match, and Rust is happy. If they didn\u2019t\n-match, we\u2019d get an error:\n-\n-```rust,ignore\n-let x: Option<f64> = Some(5);\n-// error: mismatched types: expected `core::option::Option<f64>`,\n-// found `core::option::Option<_>` (expected f64 but found integral variable)\n-```\n-\n-That doesn\u2019t mean we can\u2019t make `Option<T>`s that hold an `f64`! They have\n-to match up:\n-\n-```rust\n-let x: Option<i32> = Some(5);\n-let y: Option<f64> = Some(5.0f64);\n-```\n-\n-This is just fine. One definition, multiple uses.\n-\n-Generics don\u2019t have to only be generic over one type. Consider another type from Rust\u2019s standard library that\u2019s similar, `Result<T, E>`:\n-\n-```rust\n-enum Result<T, E> {\n-    Ok(T),\n-    Err(E),\n-}\n-```\n-\n-This type is generic over _two_ types: `T` and `E`. By the way, the capital letters\n-can be any letter you\u2019d like. We could define `Result<T, E>` as:\n-\n-```rust\n-enum Result<A, Z> {\n-    Ok(A),\n-    Err(Z),\n-}\n-```\n-\n-if we wanted to. Convention says that the first generic parameter should be\n-`T`, for \u2018type\u2019, and that we use `E` for \u2018error\u2019. Rust doesn\u2019t care, however.\n-\n-The `Result<T, E>` type is intended to be used to return the result of a\n-computation, and to have the ability to return an error if it didn\u2019t work out.\n-\n-## Generic functions\n-\n-We can write functions that take generic types with a similar syntax:\n-\n-```rust\n-fn takes_anything<T>(x: T) {\n-    // Do something with `x`.\n-}\n-```\n-\n-The syntax has two parts: the `<T>` says \u201cthis function is generic over one\n-type, `T`\u201d, and the `x: T` says \u201cx has the type `T`.\u201d\n-\n-Multiple arguments can have the same generic type:\n-\n-```rust\n-fn takes_two_of_the_same_things<T>(x: T, y: T) {\n-    // ...\n-}\n-```\n-\n-We could write a version that takes multiple types:\n-\n-```rust\n-fn takes_two_things<T, U>(x: T, y: U) {\n-    // ...\n-}\n-```\n-\n-## Generic structs\n-\n-You can store a generic type in a `struct` as well:\n-\n-```rust\n-struct Point<T> {\n-    x: T,\n-    y: T,\n-}\n-\n-let int_origin = Point { x: 0, y: 0 };\n-let float_origin = Point { x: 0.0, y: 0.0 };\n-```\n-\n-Similar to functions, the `<T>` is where we declare the generic parameters,\n-and we then use `x: T` in the type declaration, too.\n-\n-When you want to add an implementation for the generic `struct`, you\n-declare the type parameter after the `impl`:\n-\n-```rust\n-# struct Point<T> {\n-#     x: T,\n-#     y: T,\n-# }\n-#\n-impl<T> Point<T> {\n-    fn swap(&mut self) {\n-        std::mem::swap(&mut self.x, &mut self.y);\n-    }\n-}\n-```\n-\n-So far you\u2019ve seen generics that take absolutely any type. These are useful in\n-many cases: you\u2019ve already seen `Option<T>`, and later you\u2019ll meet universal\n-container types like [`Vec<T>`][Vec]. On the other hand, often you want to\n-trade that flexibility for increased expressive power. Read about [trait\n-bounds][traits] to see why and how.\n-\n-## Resolving ambiguities\n-\n-Most of the time when generics are involved, the compiler can infer the\n-generic parameters automatically:\n-\n-```rust\n-// v must be a Vec<T> but we don't know what T is yet\n-let mut v = Vec::new();\n-// v just got a bool value, so T must be bool!\n-v.push(true);\n-// Debug-print v\n-println!(\"{:?}\", v);\n-```\n-\n-Sometimes though, the compiler needs a little help. For example, had we\n-omitted the last line, we would get a compile error:\n-\n-```rust,ignore\n-let v = Vec::new();\n-//      ^^^^^^^^ cannot infer type for `T`\n-//\n-// note: type annotations or generic parameter binding required\n-println!(\"{:?}\", v);\n-```\n-\n-We can solve this using either a type annotation:\n-\n-```rust\n-let v: Vec<bool> = Vec::new();\n-println!(\"{:?}\", v);\n-```\n-\n-or by binding the generic parameter `T` via the so-called\n-[\u2018turbofish\u2019][turbofish] `::<>` syntax:\n-\n-```rust\n-let v = Vec::<bool>::new();\n-println!(\"{:?}\", v);\n-```\n-\n-The second approach is useful in situations where we don\u2019t want to bind the\n-result to a variable. It can also be used to bind generic parameters in\n-functions or methods. See [Iterators \u00a7 Consumers](iterators.html#consumers)\n-for an example.\n-\n-[traits]: traits.html\n-[Vec]: ../std/vec/struct.Vec.html\n-[turbofish]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect"}, {"sha": "06ea24fef3c1d66beb0b2f0ebd59847c9a0636a4", "filename": "src/doc/book/src/getting-started.md", "status": "removed", "additions": 0, "deletions": 550, "changes": 550, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fgetting-started.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,550 +0,0 @@\n-# Getting Started\n-\n-This first chapter of the book will get us going with Rust and its tooling.\n-First, we\u2019ll install Rust. Then, the classic \u2018Hello World\u2019 program. Finally,\n-we\u2019ll talk about Cargo, Rust\u2019s build system and package manager.\n-\n-We\u2019ll be showing off a number of commands using a terminal, and those lines all\n-start with `$`. You don't need to type in the `$`s, they are there to indicate\n-the start of each command. We\u2019ll see many tutorials and examples around the web\n-that follow this convention: `$` for commands run as our regular user, and `#`\n-for commands we should be running as an administrator.\n-\n-# Installing Rust\n-\n-The first step to using Rust is to install it. Generally speaking, you\u2019ll need\n-an Internet connection to run the commands in this section, as we\u2019ll be\n-downloading Rust from the Internet.\n-\n-The Rust compiler runs on, and compiles to, a great number of platforms, but is\n-best supported on Linux, Mac, and Windows, on the x86 and x86-64 CPU\n-architecture. There are official builds of the Rust compiler and standard\n-library for these platforms and more. [For full details on Rust platform support\n-see the website][platform-support].\n-\n-[platform-support]: https://forge.rust-lang.org/platform-support.html\n-\n-## Installing Rust\n-\n-All you need to do on Unix systems like Linux and macOS is open a\n-terminal and type this:\n-\n-```bash\n-$ curl https://sh.rustup.rs -sSf | sh\n-```\n-\n-It will download a script, and start the installation. If everything\n-goes well, you\u2019ll see this appear:\n-\n-```text\n-Rust is installed now. Great! \n-```\n-\n-Installing on Windows is nearly as easy: download and run\n-[rustup-init.exe]. It will start the installation in a console and\n-present the above message on success.\n-\n-For other installation options and information, visit the [install]\n-page of the Rust website.\n-\n-[rustup-init.exe]: https://win.rustup.rs\n-[install]: https://www.rust-lang.org/install.html\n-\n-## Uninstalling\n-\n-Uninstalling Rust is as easy as installing it:\n-\n-```bash\n-$ rustup self uninstall\n-```\n-\n-## Troubleshooting\n-\n-If we've got Rust installed, we can open up a shell, and type this:\n-\n-```bash\n-$ rustc --version\n-```\n-\n-You should see the version number, commit hash, and commit date.\n-\n-If you do, Rust has been installed successfully! Congrats!\n-\n-If you don't, that probably means that the `PATH` environment variable\n-doesn't include Cargo's binary directory, `~/.cargo/bin` on Unix, or\n-`%USERPROFILE%\\.cargo\\bin` on Windows. This is the directory where\n-Rust development tools live, and most Rust developers keep it in their\n-`PATH` environment variable, which makes it possible to run `rustc` on\n-the command line. Due to differences in operating systems, command\n-shells, and bugs in installation, you may need to restart your shell,\n-log out of the system, or configure `PATH` manually as appropriate for\n-your operating environment.\n-\n-Rust does not do its own linking, and so you\u2019ll need to have a linker\n-installed. Doing so will depend on your specific system. For\n-Linux-based systems, Rust will attempt to call `cc` for linking. On\n-`windows-msvc` (Rust built on Windows with Microsoft Visual Studio),\n-this depends on having [Microsoft Visual C++ Build Tools][msvbt]\n-installed. These do not need to be in `%PATH%` as `rustc` will find\n-them automatically. In general, if you have your linker in a\n-non-traditional location you can call `rustc \n-linker=/path/to/cc`, where `/path/to/cc` should point to your linker path.\n-\n-[msvbt]: http://landinghub.visualstudio.com/visual-cpp-build-tools\n-\n-If you are still stuck, there are a number of places where we can get\n-help. The easiest is\n-[the #rust-beginners IRC channel on irc.mozilla.org][irc-beginners] \n-and for general discussion\n-[the #rust IRC channel on irc.mozilla.org][irc], which we \n-can access through [Mibbit][mibbit]. Then we'll be chatting with other\n-Rustaceans (a silly nickname we call ourselves) who can help us out. Other great\n-resources include [the user\u2019s forum][users] and [Stack Overflow][stackoverflow].\n-\n-[irc-beginners]: irc://irc.mozilla.org/#rust-beginners\n-[irc]: irc://irc.mozilla.org/#rust\n-[mibbit]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust-beginners,%23rust\n-[users]: https://users.rust-lang.org/\n-[stackoverflow]: http://stackoverflow.com/questions/tagged/rust\n-\n-This installer also installs a copy of the documentation locally, so we can\n-read it offline. It's only a `rustup doc` away!\n-\n-# Hello, world!\n-\n-Now that you have Rust installed, we'll help you write your first Rust program.\n-It's traditional when learning a new language to write a little program to\n-print the text \u201cHello, world!\u201d to the screen, and in this section, we'll follow\n-that tradition.\n-\n-The nice thing about starting with such a simple program is that you can\n-quickly verify that your compiler is installed, and that it's working properly.\n-Printing information to the screen is also a pretty common thing to do, so\n-practicing it early on is good.\n-\n-> Note: This book assumes basic familiarity with the command line. Rust itself\n-> makes no specific demands about your editing, tooling, or where your code\n-> lives, so if you prefer an IDE to the command line, that's an option. You may\n-> want to check out [SolidOak], which was built specifically with Rust in mind.\n-> There are a number of extensions in development by the community, and the\n-> Rust team ships plugins for [various editors]. Configuring your editor or\n-> IDE is out of the scope of this tutorial, so check the documentation for your\n-> specific setup.\n-\n-[SolidOak]: https://github.com/oakes/SolidOak\n-[various editors]: https://github.com/rust-lang/rust/blob/master/src/etc/CONFIGS.md\n-\n-## Creating a Project File\n-\n-First, make a file to put your Rust code in. Rust doesn't care where your code\n-lives, but for this book, I suggest making a *projects* directory in your home\n-directory, and keeping all your projects there. Open a terminal and enter the\n-following commands to make a directory for this particular project:\n-\n-```bash\n-$ mkdir ~/projects\n-$ cd ~/projects\n-$ mkdir hello_world\n-$ cd hello_world\n-```\n-\n-> Note: If you\u2019re on Windows and not using PowerShell, the `~` may not work.\n-> Consult the documentation for your shell for more details.\n-\n-## Writing and Running a Rust Program\n-\n-We need to create a source file for our Rust program. Rust files always end\n-in a *.rs* extension. If you are using more than one word in your filename,\n-use an underscore to separate them; for example, you would use\n-*my_program.rs* rather than *myprogram.rs*.\n-\n-Now, make a new file and call it *main.rs*. Open the file and type\n-the following code:\n-\n-```rust\n-fn main() {\n-    println!(\"Hello, world!\");\n-}\n-```\n-\n-Save the file, and go back to your terminal window. On Linux or macOS, enter the\n-following commands:\n-\n-```bash\n-$ rustc main.rs\n-$ ./main\n-Hello, world!\n-```\n-\n-In Windows, replace `main` with `main.exe`. Regardless of your operating\n-system, you should see the string `Hello, world!` print to the terminal. If you\n-did, then congratulations! You've officially written a Rust program. That makes\n-you a Rust programmer! Welcome.\n-\n-## Anatomy of a Rust Program\n-\n-Now, let\u2019s go over what just happened in your \"Hello, world!\" program in\n-detail. Here's the first piece of the puzzle:\n-\n-```rust\n-fn main() {\n-\n-}\n-```\n-\n-These lines define a *function* in Rust. The `main` function is special: it's\n-the beginning of every Rust program. The first line says, \u201cI\u2019m declaring a\n-function named `main` that takes no arguments and returns nothing.\u201d If there\n-were arguments, they would go inside the parentheses (`(` and `)`), and because\n-we aren\u2019t returning anything from this function, we can omit the return type\n-entirely.\n-\n-Also note that the function body is wrapped in curly braces (`{` and `}`). Rust\n-requires these around all function bodies. It's considered good style to put\n-the opening curly brace on the same line as the function declaration, with one\n-space in between.\n-\n-Inside the `main()` function:\n-\n-```rust\n-    println!(\"Hello, world!\");\n-```\n-\n-This line does all of the work in this little program: it prints text to the\n-screen. There are a number of details that are important here. The first is\n-that it\u2019s indented with four spaces, not tabs.\n-\n-The second important part is the `println!()` line. This is calling a Rust\n-*[macro]*, which is how metaprogramming is done in Rust. If it were calling a\n-function instead, it would look like this: `println()` (without the !). We'll\n-discuss Rust macros in more detail later, but for now you only need to\n-know that when you see a `!` that means that you\u2019re calling a macro instead of\n-a normal function.\n-\n-\n-[macro]: macros.html\n-\n-Next is `\"Hello, world!\"` which is a *string*. Strings are a surprisingly\n-complicated topic in a systems programming language, and this is a *[statically\n-allocated]* string. We pass this string as an argument to `println!`, which\n-prints the string to the screen. Easy enough!\n-\n-[statically allocated]: the-stack-and-the-heap.html\n-\n-The line ends with a semicolon (`;`). Rust is an *[expression-oriented\n-language]*, which means that most things are expressions, rather than\n-statements. The `;` indicates that this expression is over, and the next one is\n-ready to begin. Most lines of Rust code end with a `;`.\n-\n-[expression-oriented language]: glossary.html#expression-oriented-language\n-\n-## Compiling and Running Are Separate Steps\n-\n-In \"Writing and Running a Rust Program\", we showed you how to run a newly\n-created program. We'll break that process down and examine each step now.\n-\n-Before running a Rust program, you have to compile it. You can use the Rust\n-compiler by entering the `rustc` command and passing it the name of your source\n-file, like this:\n-\n-```bash\n-$ rustc main.rs\n-```\n-\n-If you come from a C or C++ background, you'll notice that this is similar to\n-`gcc` or `clang`. After compiling successfully, Rust should output a binary\n-executable, which you can see on Linux or macOS by entering the `ls` command in\n-your shell as follows:\n-\n-```bash\n-$ ls\n-main  main.rs\n-```\n-\n-On Windows, you'd enter:\n-\n-```bash\n-$ dir\n-main.exe\n-main.rs\n-```\n-\n-This shows we have two files: the source code, with an `.rs` extension, and the\n-executable (`main.exe` on Windows, `main` everywhere else). All that's left to\n-do from here is run the `main` or `main.exe` file, like this:\n-\n-```bash\n-$ ./main  # or .\\main.exe on Windows\n-```\n-\n-If *main.rs* were your \"Hello, world!\" program, this would print `Hello,\n-world!` to your terminal.\n-\n-If you come from a dynamic language like Ruby, Python, or JavaScript, you may\n-not be used to compiling and running a program being separate steps. Rust is an\n-*ahead-of-time compiled* language, which means that you can compile a program,\n-give it to someone else, and they can run it even without Rust installed. If\n-you give someone a `.rb` or `.py` or `.js` file, on the other hand, they need\n-to have a Ruby, Python, or JavaScript implementation installed (respectively),\n-but you only need one command to both compile and run your program. Everything\n-is a tradeoff in language design.\n-\n-Just compiling with `rustc` is fine for simple programs, but as your project\n-grows, you'll want to be able to manage all of the options your project has,\n-and make it easy to share your code with other people and projects. Next, I'll\n-introduce you to a tool called Cargo, which will help you write real-world Rust\n-programs.\n-\n-# Hello, Cargo!\n-\n-Cargo is Rust\u2019s build system and package manager, and Rustaceans use Cargo to\n-manage their Rust projects. Cargo manages three things: building your code,\n-downloading the libraries your code depends on, and building those libraries.\n-We call libraries your code needs \u2018dependencies\u2019 since your code depends on\n-them.\n-\n-The simplest Rust programs don\u2019t have any dependencies, so right now, you'd\n-only use the first part of its functionality. As you write more complex Rust\n-programs, you\u2019ll want to add dependencies, and if you start off using Cargo,\n-that will be a lot easier to do.\n-\n-As the vast, vast majority of Rust projects use Cargo, we will assume that\n-you\u2019re using it for the rest of the book. Cargo comes installed with Rust\n-itself, if you used the official installers. If you installed Rust through some\n-other means, you can check if you have Cargo installed by typing:\n-\n-```bash\n-$ cargo --version\n-```\n-\n-Into a terminal. If you see a version number, great! If you see an error like\n-\u2018`command not found`\u2019, then you should look at the documentation for the system\n-in which you installed Rust, to determine if Cargo is separate.\n-\n-## Converting to Cargo\n-\n-Let\u2019s convert the Hello World program to Cargo. To Cargo-fy a project, you need\n-to do three things:\n-\n-1. Put your source file in the right directory.\n-2. Get rid of the old executable (`main.exe` on Windows, `main` everywhere\n-   else).\n-3. Make a Cargo configuration file.\n-\n-Let's get started!\n-\n-### Creating a Source Directory and Removing the Old Executable\n-\n-First, go back to your terminal, move to your *hello_world* directory, and\n-enter the following commands:\n-\n-```bash\n-$ mkdir src\n-$ mv main.rs src/main.rs # or 'move main.rs src/main.rs' on Windows\n-$ rm main  # or 'del main.exe' on Windows\n-```\n-\n-Cargo expects your source files to live inside a *src* directory, so do that\n-first. This leaves the top-level project directory (in this case,\n-*hello_world*) for READMEs, license information, and anything else not related\n-to your code. In this way, using Cargo helps you keep your projects nice and\n-tidy. There's a place for everything, and everything is in its place.\n-\n-Now, move *main.rs* into the *src* directory, and delete the compiled file you\n-created with `rustc`. As usual, replace `main` with `main.exe` if you're on\n-Windows.\n-\n-This example retains `main.rs` as the source filename because it's creating an\n-executable. If you wanted to make a library instead, you'd name the file\n-`lib.rs`. This convention is used by Cargo to successfully compile your\n-projects, but it can be overridden if you wish.\n-\n-### Creating a Configuration File\n-\n-Next, create a new file inside your *hello_world* directory, and call it\n-`Cargo.toml`.\n-\n-Make sure to capitalize the `C` in `Cargo.toml`, or Cargo won't know what to do\n-with the configuration file.\n-\n-This file is in the *[TOML]* (Tom's Obvious, Minimal Language) format. TOML is\n-similar to INI, but has some extra goodies, and is used as Cargo\u2019s\n-configuration format.\n-\n-[TOML]: https://github.com/toml-lang/toml\n-\n-Inside this file, type the following information:\n-\n-```toml\n-[package]\n-\n-name = \"hello_world\"\n-version = \"0.0.1\"\n-authors = [ \"Your name <you@example.com>\" ]\n-```\n-\n-The first line, `[package]`, indicates that the following statements are\n-configuring a package. As we add more information to this file, we\u2019ll add other\n-sections, but for now, we only have the package configuration.\n-\n-The other three lines set the three bits of configuration that Cargo needs to\n-know to compile your program: its name, what version it is, and who wrote it.\n-\n-Once you've added this information to the *Cargo.toml* file, save it to finish\n-creating the configuration file.\n-\n-## Building and Running a Cargo Project\n-\n-With your *Cargo.toml* file in place in your project's root directory, you\n-should be ready to build and run your Hello World program! To do so, enter the\n-following commands:\n-\n-```bash\n-$ cargo build\n-   Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)\n-$ ./target/debug/hello_world\n-Hello, world!\n-```\n-\n-Bam! If all goes well, `Hello, world!` should print to the terminal once more.\n-\n-You just built a project with `cargo build` and ran it with\n-`./target/debug/hello_world`, but you can actually do both in one step with\n-`cargo run` as follows:\n-\n-```bash\n-$ cargo run\n-     Running `target/debug/hello_world`\n-Hello, world!\n-```\n-\n-The `run` command comes in handy when you need to rapidly iterate on a\n-project.\n-\n-Notice that this example didn\u2019t re-build the project. Cargo figured out that\n-the file hasn\u2019t changed, and so it just ran the binary. If you'd modified your\n-source code, Cargo would have rebuilt the project before running it, and you\n-would have seen something like this:\n-\n-```bash\n-$ cargo run\n-   Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)\n-     Running `target/debug/hello_world`\n-Hello, world!\n-```\n-\n-Cargo checks to see if any of your project\u2019s files have been modified, and only\n-rebuilds your project if they\u2019ve changed since the last time you built it.\n-\n-With simple projects, Cargo doesn't bring a whole lot over just using `rustc`,\n-but it will become useful in the future. This is especially true when you start\n-using crates; these are synonymous with a \u2018library\u2019 or \u2018package\u2019 in other\n-programming languages. For complex projects composed of multiple crates, it\u2019s\n-much easier to let Cargo coordinate the build. Using Cargo, you can run `cargo\n-build`, and it should work the right way.\n-\n-### Building for Release\n-\n-When your project is ready for release, you can use `cargo build\n---release` to compile your project with optimizations. These optimizations make\n-your Rust code run faster, but turning them on makes your program take longer\n-to compile. This is why there are two different profiles, one for development,\n-and one for building the final program you\u2019ll give to a user.\n-\n-### What Is That `Cargo.lock`?\n-\n-Running `cargo build` also causes Cargo to create a new file called\n-*Cargo.lock*, which looks like this:\n-\n-```toml\n-[root]\n-name = \"hello_world\"\n-version = \"0.0.1\"\n-```\n-\n-Cargo uses the *Cargo.lock* file to keep track of dependencies in your\n-application. This is the Hello World project's *Cargo.lock* file. This project\n-doesn't have dependencies, so the file is a bit sparse. Realistically, you\n-won't ever need to touch this file yourself; just let Cargo handle it.\n-\n-That\u2019s it! If you've been following along, you should have successfully built\n-`hello_world` with Cargo.\n-\n-Even though the project is simple, it now uses much of the real tooling you\u2019ll\n-use for the rest of your Rust career. In fact, you can expect to start\n-virtually all Rust projects with some variation on the following commands:\n-\n-```bash\n-$ git clone someurl.com/foo\n-$ cd foo\n-$ cargo build\n-```\n-\n-## Making A New Cargo Project the Easy Way\n-\n-You don\u2019t have to go through that previous process every time you want to start\n-a new project! Cargo can quickly make a bare-bones project directory that you\n-can start developing in right away.\n-\n-To start a new project with Cargo, enter `cargo new` at the command line:\n-\n-```bash\n-$ cargo new hello_world --bin\n-```\n-\n-This command passes `--bin` because the goal is to get straight to making an\n-executable application, as opposed to a library. Executables are often called\n-*binaries* (as in `/usr/bin`, if you\u2019re on a Unix system).\n-\n-Cargo has generated two files and one directory for us: a `Cargo.toml` and a\n-*src* directory with a *main.rs* file inside. These should look familiar,\n-they\u2019re exactly what we created by hand, above.\n-\n-This output is all you need to get started. First, open `Cargo.toml`. It should\n-look something like this:\n-\n-```toml\n-[package]\n-\n-name = \"hello_world\"\n-version = \"0.1.0\"\n-authors = [\"Your Name <you@example.com>\"]\n-\n-[dependencies]\n-```\n-\n-Do not worry about the `[dependencies]` line, we will come back to it later.\n-\n-Cargo has populated *Cargo.toml* with reasonable defaults based on the arguments\n-you gave it and your `git` global configuration. You may notice that Cargo has\n-also initialized the `hello_world` directory as a `git` repository.\n-\n-Here\u2019s what should be in `src/main.rs`:\n-\n-```rust\n-fn main() {\n-    println!(\"Hello, world!\");\n-}\n-```\n-\n-Cargo has generated a \"Hello World!\" for you, and you\u2019re ready to start coding!\n-\n-> Note: If you want to look at Cargo in more detail, check out the official [Cargo\n-guide], which covers all of its features.\n-\n-[Cargo guide]: http://doc.crates.io/guide.html\n-\n-# Closing Thoughts\n-\n-This chapter covered the basics that will serve you well through the rest of\n-this book, and the rest of your time with Rust. Now that you\u2019ve got the tools\n-down, we'll cover more about the Rust language itself.\n-\n-You have two options: Dive into a project with \u2018[Tutorial: Guessing Game][guessinggame]\u2019, or\n-start from the bottom and work your way up with \u2018[Syntax and\n-Semantics][syntax]\u2019. More experienced systems programmers will probably prefer\n-\u2018Tutorial: Guessing Game\u2019, while those from dynamic backgrounds may enjoy either. Different\n-people learn differently! Choose whatever\u2019s right for you.\n-\n-[guessinggame]: guessing-game.html\n-[syntax]: syntax-and-semantics.html"}, {"sha": "b17b89633f356406ef9e003f2ea453b64fcba0d7", "filename": "src/doc/book/src/glossary.md", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fglossary.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fglossary.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fglossary.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,85 +0,0 @@\n-# Glossary\n-\n-Not every Rustacean has a background in systems programming, nor in computer\n-science, so we've added explanations of terms that might be unfamiliar.\n-\n-### Abstract Syntax Tree\n-\n-When a compiler is compiling your program, it does a number of different things.\n-One of the things that it does is turn the text of your program into an\n-\u2018abstract syntax tree\u2019, or \u2018AST\u2019. This tree is a representation of the structure\n-of your program. For example, `2 + 3` can be turned into a tree:\n-\n-```text\n-  +\n- / \\\n-2   3\n-```\n-\n-And `2 + (3 * 4)` would look like this:\n-\n-```text\n-  +\n- / \\\n-2   *\n-   / \\\n-  3   4\n-```\n-\n-### Arity\n-\n-Arity refers to the number of arguments a function or operation takes.\n-\n-```rust\n-let x = (2, 3);\n-let y = (4, 6);\n-let z = (8, 2, 6);\n-```\n-\n-In the example above `x` and `y` have arity 2. `z` has arity 3.\n-\n-### Bounds\n-\n-Bounds are constraints on a type or [trait][traits]. For example, if a bound\n-is placed on the argument a function takes, types passed to that function\n-must abide by that constraint.\n-\n-[traits]: traits.html\n-\n-### Combinators\n-\n-Combinators are higher-order functions that apply only functions and\n-earlier defined combinators to provide a result from its arguments. \n-They can be used to manage control flow in a modular fashion.\n-\n-### DST (Dynamically Sized Type)\n-\n-A type without a statically known size or alignment. ([more info][link])\n-\n-[link]: ../nomicon/exotic-sizes.html#dynamically-sized-types-dsts\n-\n-### Expression\n-\n-In computer programming, an expression is a combination of values, constants,\n-variables, operators and functions that evaluate to a single value. For example,\n-`2 + (3 * 4)` is an expression that returns the value 14. It is worth noting\n-that expressions can have side-effects. For example, a function included in an\n-expression might perform actions other than simply returning a value.\n-\n-### Expression-Oriented Language\n-\n-In early programming languages, [expressions][expression] and\n-[statements][statement] were two separate syntactic categories: expressions had\n-a value and statements did things. However, later languages blurred this\n-distinction, allowing expressions to do things and statements to have a value.\n-In an expression-oriented language, (nearly) every statement is an expression\n-and therefore returns a value. Consequently, these expression statements can\n-themselves form part of larger expressions.\n-\n-[expression]: glossary.html#expression\n-[statement]: glossary.html#statement\n-\n-### Statement\n-\n-In computer programming, a statement is the smallest standalone element of a\n-programming language that commands a computer to perform an action."}, {"sha": "bbb43b4a9ef4bac098bf9917fe59db3e091048d8", "filename": "src/doc/book/src/guessing-game.md", "status": "removed", "additions": 0, "deletions": 1010, "changes": 1010, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,1010 +0,0 @@\n-# Guessing Game\n-\n-Let\u2019s learn some Rust! For our first project, we\u2019ll implement a classic\n-beginner programming problem: the guessing game. Here\u2019s how it works: Our\n-program will generate a random integer between one and a hundred. It will then\n-prompt us to enter a guess. Upon entering our guess, it will tell us if we\u2019re\n-too low or too high. Once we guess correctly, it will congratulate us. Sounds\n-good?\n-\n-Along the way, we\u2019ll learn a little bit about Rust. The next chapter, \u2018Syntax\n-and Semantics\u2019, will dive deeper into each part.\n-\n-# Set up\n-\n-Let\u2019s set up a new project. Go to your projects directory. Remember how we had\n-to create our directory structure and a `Cargo.toml` for `hello_world`? Cargo\n-has a command that does that for us. Let\u2019s give it a shot:\n-\n-```bash\n-$ cd ~/projects\n-$ cargo new guessing_game --bin\n-     Created binary (application) `guessing_game` project\n-$ cd guessing_game\n-```\n-\n-We pass the name of our project to `cargo new`, and then the `--bin` flag,\n-since we\u2019re making a binary, rather than a library.\n-\n-Check out the generated `Cargo.toml`:\n-\n-```toml\n-[package]\n-\n-name = \"guessing_game\"\n-version = \"0.1.0\"\n-authors = [\"Your Name <you@example.com>\"]\n-```\n-\n-Cargo gets this information from your environment. If it\u2019s not correct, go ahead\n-and fix that.\n-\n-Finally, Cargo generated a \u2018Hello, world!\u2019 for us. Check out `src/main.rs`:\n-\n-```rust\n-fn main() {\n-    println!(\"Hello, world!\");\n-}\n-```\n-\n-Let\u2019s try compiling what Cargo gave us:\n-\n-```{bash}\n-$ cargo build\n-   Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n-    Finished debug [unoptimized + debuginfo] target(s) in 0.53 secs\n-```\n-\n-Excellent! Open up your `src/main.rs` again. We\u2019ll be writing all of\n-our code in this file.\n-\n-Remember the `run` command from last chapter? Try it out again here:\n-\n-```bash\n-$ cargo run\n-   Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n-    Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs\n-     Running `target/debug/guessing_game`\n-Hello, world!\n-```\n-\n-Great! Our game is just the kind of project `run` is good for: we need\n-to quickly test each iteration before moving on to the next one.\n-\n-# Processing a Guess\n-\n-Let\u2019s get to it! The first thing we need to do for our guessing game is\n-allow our player to input a guess. Put this in your `src/main.rs`:\n-\n-```rust,no_run\n-use std::io;\n-\n-fn main() {\n-    println!(\"Guess the number!\");\n-\n-    println!(\"Please input your guess.\");\n-\n-    let mut guess = String::new();\n-\n-    io::stdin().read_line(&mut guess)\n-        .expect(\"Failed to read line\");\n-\n-    println!(\"You guessed: {}\", guess);\n-}\n-```\n-\n-There\u2019s a lot here! Let\u2019s go over it, bit by bit.\n-\n-```rust,ignore\n-use std::io;\n-```\n-\n-We\u2019ll need to take user input, and then print the result as output. As such, we\n-need the `io` library from the standard library. Rust only imports a few things\n-by default into every program, [the \u2018prelude\u2019][prelude]. If it\u2019s not in the\n-prelude, you\u2019ll have to `use` it directly. There is also a second \u2018prelude\u2019, the\n-[`io` prelude][ioprelude], which serves a similar function: you import it, and it\n-imports a number of useful, `io`-related things.\n-\n-[prelude]: ../std/prelude/index.html\n-[ioprelude]: ../std/io/prelude/index.html\n-\n-```rust,ignore\n-fn main() {\n-```\n-\n-As you\u2019ve seen before, the `main()` function is the entry point into your\n-program. The `fn` syntax declares a new function, the `()`s indicate that\n-there are no arguments, and `{` starts the body of the function. Because\n-we didn\u2019t include a return type, it\u2019s assumed to be `()`, an empty\n-[tuple][tuples].\n-\n-[tuples]: primitive-types.html#tuples\n-\n-```rust,ignore\n-    println!(\"Guess the number!\");\n-\n-    println!(\"Please input your guess.\");\n-```\n-\n-We previously learned that `println!()` is a [macro][macros] that\n-prints a [string][strings] to the screen.\n-\n-[macros]: macros.html\n-[strings]: strings.html\n-\n-```rust,ignore\n-    let mut guess = String::new();\n-```\n-\n-Now we\u2019re getting interesting! There\u2019s a lot going on in this little line.\n-The first thing to notice is that this is a [let statement][let], which is\n-used to create \u2018variable bindings\u2019. They take this form:\n-\n-```rust,ignore\n-let foo = bar;\n-```\n-\n-[let]: variable-bindings.html\n-\n-This will create a new binding named `foo`, and bind it to the value `bar`. In\n-many languages, this is called a \u2018variable\u2019, but Rust\u2019s variable bindings have\n-a few tricks up their sleeves.\n-\n-For example, they\u2019re [immutable][immutable] by default. That\u2019s why our example\n-uses `mut`: it makes a binding mutable, rather than immutable. `let` doesn\u2019t\n-take a name on the left hand side of the assignment, it actually accepts a\n-\u2018[pattern][patterns]\u2019. We\u2019ll use patterns later. It\u2019s easy enough\n-to use for now:\n-\n-```rust\n-let foo = 5; // `foo` is immutable.\n-let mut bar = 5; // `bar` is mutable.\n-```\n-\n-[immutable]: mutability.html\n-[patterns]: patterns.html\n-\n-Oh, and `//` will start a comment, until the end of the line. Rust ignores\n-everything in [comments][comments].\n-\n-[comments]: comments.html\n-\n-So now we know that `let mut guess` will introduce a mutable binding named\n-`guess`, but we have to look at the other side of the `=` for what it\u2019s\n-bound to: `String::new()`.\n-\n-`String` is a string type, provided by the standard library. A\n-[`String`][string] is a growable, UTF-8 encoded bit of text.\n-\n-[string]: ../std/string/struct.String.html\n-\n-The `::new()` syntax uses `::` because this is an \u2018associated function\u2019 of\n-a particular type. That is to say, it\u2019s associated with `String` itself,\n-rather than a particular instance of a `String`. Some languages call this a\n-\u2018static method\u2019.\n-\n-This function is named `new()`, because it creates a new, empty `String`.\n-You\u2019ll find a `new()` function on many types, as it\u2019s a common name for making\n-a new value of some kind.\n-\n-Let\u2019s move forward:\n-\n-```rust,ignore\n-    io::stdin().read_line(&mut guess)\n-        .expect(\"Failed to read line\");\n-```\n-\n-That\u2019s a lot more! Let\u2019s go bit-by-bit. The first line has two parts. Here\u2019s\n-the first:\n-\n-```rust,ignore\n-io::stdin()\n-```\n-\n-Remember how we `use`d `std::io` on the first line of the program? We\u2019re now\n-calling an associated function on it. If we didn\u2019t `use std::io`, we could\n-have written this line as `std::io::stdin()`.\n-\n-This particular function returns a handle to the standard input for your\n-terminal. More specifically, a [std::io::Stdin][iostdin].\n-\n-[iostdin]: ../std/io/struct.Stdin.html\n-\n-The next part will use this handle to get input from the user:\n-\n-```rust,ignore\n-.read_line(&mut guess)\n-```\n-\n-Here, we call the [`read_line`][read_line] method on our handle.\n-[Methods][method] are like associated functions, but are only available on a\n-particular instance of a type, rather than the type itself. We\u2019re also passing\n-one argument to `read_line()`: `&mut guess`.\n-\n-[read_line]: ../std/io/struct.Stdin.html#method.read_line\n-[method]: method-syntax.html\n-\n-Remember how we bound `guess` above? We said it was mutable. However,\n-`read_line` doesn\u2019t take a `String` as an argument: it takes a `&mut String`.\n-Rust has a feature called \u2018[references][references]\u2019, which allows you to have\n-multiple references to one piece of data, which can reduce copying. References\n-are a complex feature, as one of Rust\u2019s major selling points is how safe and\n-easy it is to use references. We don\u2019t need to know a lot of those details to\n-finish our program right now, though. For now, all we need to know is that\n-like `let` bindings, references are immutable by default. Hence, we need to\n-write `&mut guess`, rather than `&guess`.\n-\n-Why does `read_line()` take a mutable reference to a string? Its job is\n-to take what the user types into standard input, and place that into a\n-string. So it takes that string as an argument, and in order to add\n-the input, it needs to be mutable.\n-\n-[references]: references-and-borrowing.html\n-\n-But we\u2019re not quite done with this line of code, though. While it\u2019s\n-a single line of text, it\u2019s only the first part of the single logical line of\n-code:\n-\n-```rust,ignore\n-        .expect(\"Failed to read line\");\n-```\n-\n-When you call a method with the `.foo()` syntax, you may introduce a newline\n-and other whitespace. This helps you split up long lines. We _could_ have\n-done:\n-\n-```rust,ignore\n-    io::stdin().read_line(&mut guess).expect(\"Failed to read line\");\n-```\n-\n-But that gets hard to read. So we\u2019ve split it up, two lines for two method\n-calls. We already talked about `read_line()`, but what about `expect()`? Well,\n-we already mentioned that `read_line()` puts what the user types into the `&mut\n-String` we pass it. But it also returns a value: in this case, an\n-[`io::Result`][ioresult]. Rust has a number of types named `Result` in its\n-standard library: a generic [`Result`][result], and then specific versions for\n-sub-libraries, like `io::Result`.\n-\n-[ioresult]: ../std/io/type.Result.html\n-[result]: ../std/result/enum.Result.html\n-\n-The purpose of these `Result` types is to encode error handling information.\n-Values of the `Result` type, like any type, have methods defined on them. In\n-this case, `io::Result` has an [`expect()` method][expect] that takes a value\n-it\u2019s called on, and if it isn\u2019t a successful one, [`panic!`][panic]s with a\n-message you passed it. A `panic!` like this will cause our program to crash,\n-displaying the message.\n-\n-[expect]: ../std/result/enum.Result.html#method.expect\n-[panic]: error-handling.html\n-\n-If we do not call `expect()`, our program will compile, but\n-we\u2019ll get a warning:\n-\n-```bash\n-$ cargo build\n-   Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n-warning: unused result which must be used, #[warn(unused_must_use)] on by default\n-  --> src/main.rs:10:5\n-   |\n-10 |     io::stdin().read_line(&mut guess);\n-   |     ^\n-\n-    Finished debug [unoptimized + debuginfo] target(s) in 0.42 secs\n-```\n-\n-Rust warns us that we haven\u2019t used the `Result` value. This warning comes from\n-a special annotation that `io::Result` has. Rust is trying to tell you that\n-you haven\u2019t handled a possible error. The right way to suppress the error is\n-to actually write error handling. Luckily, if we want to crash if there\u2019s\n-a problem, we can use `expect()`. If we can recover from the\n-error somehow, we\u2019d do something else, but we\u2019ll save that for a future\n-project.\n-\n-There\u2019s only one line of this first example left:\n-\n-```rust,ignore\n-    println!(\"You guessed: {}\", guess);\n-}\n-```\n-\n-This prints out the string we saved our input in. The `{}`s are a placeholder,\n-and so we pass it `guess` as an argument. If we had multiple `{}`s, we would\n-pass multiple arguments:\n-\n-```rust\n-let x = 5;\n-let y = 10;\n-\n-println!(\"x and y: {} and {}\", x, y);\n-```\n-\n-Easy.\n-\n-Anyway, that\u2019s the tour. We can run what we have with `cargo run`:\n-\n-```bash\n-$ cargo run\n-   Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n-    Finished debug [unoptimized + debuginfo] target(s) in 0.44 secs\n-     Running `target/debug/guessing_game`\n-Guess the number!\n-Please input your guess.\n-6\n-You guessed: 6\n-```\n-\n-All right! Our first part is done: we can get input from the keyboard,\n-and then print it back out.\n-\n-# Generating a secret number\n-\n-Next, we need to generate a secret number. Rust does not yet include random\n-number functionality in its standard library. The Rust team does, however,\n-provide a [`rand` crate][randcrate]. A \u2018crate\u2019 is a package of Rust code.\n-We\u2019ve been building a \u2018binary crate\u2019, which is an executable. `rand` is a\n-\u2018library crate\u2019, which contains code that\u2019s intended to be used with other\n-programs.\n-\n-[randcrate]: https://crates.io/crates/rand\n-\n-Using external crates is where Cargo really shines. Before we can write\n-the code using `rand`, we need to modify our `Cargo.toml`. Open it up, and\n-add these few lines at the bottom:\n-\n-```toml\n-[dependencies]\n-\n-rand=\"0.3.0\"\n-```\n-\n-The `[dependencies]` section of `Cargo.toml` is like the `[package]` section:\n-everything that follows it is part of it, until the next section starts.\n-Cargo uses the dependencies section to know what dependencies on external\n-crates you have, and what versions you require. In this case, we\u2019ve specified version `0.3.0`,\n-which Cargo understands to be any release that\u2019s compatible with this specific version.\n-Cargo understands [Semantic Versioning][semver], which is a standard for writing version\n-numbers. A bare number like above is actually shorthand for `^0.3.0`,\n-meaning \"anything compatible with 0.3.0\".\n-If we wanted to use only `0.3.0` exactly, we could say `rand=\"=0.3.0\"`\n-(note the two equal signs).\n-We could also use a range of versions.\n-[Cargo\u2019s documentation][cargodoc] contains more details.\n-\n-[semver]: http://semver.org\n-[cargodoc]: http://doc.crates.io/specifying-dependencies.html\n-\n-Now, without changing any of our code, let\u2019s build our project:\n-\n-```bash\n-$ cargo build\n-    Updating registry `https://github.com/rust-lang/crates.io-index`\n- Downloading rand v0.3.14\n- Downloading libc v0.2.17\n-   Compiling libc v0.2.17\n-   Compiling rand v0.3.14\n-   Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n-    Finished debug [unoptimized + debuginfo] target(s) in 5.88 secs\n-```\n-\n-(You may see different versions, of course.)\n-\n-Lots of new output! Now that we have an external dependency, Cargo fetches the\n-latest versions of everything from the registry, which is a copy of data from\n-[Crates.io][cratesio]. Crates.io is where people in the Rust ecosystem\n-post their open source Rust projects for others to use.\n-\n-[cratesio]: https://crates.io\n-\n-After updating the registry, Cargo checks our `[dependencies]` and downloads\n-any we don\u2019t have yet. In this case, while we only said we wanted to depend on\n-`rand`, we\u2019ve also grabbed a copy of `libc`. This is because `rand` depends on\n-`libc` to work. After downloading them, it compiles them, and then compiles\n-our project.\n-\n-If we run `cargo build` again, we\u2019ll get different output:\n-\n-```bash\n-$ cargo build\n-    Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs\n-```\n-\n-That\u2019s right, nothing was done! Cargo knows that our project has been built, and that\n-all of its dependencies are built, and so there\u2019s no reason to do all that\n-stuff. With nothing to do, it simply exits. If we open up `src/main.rs` again,\n-make a trivial change, and then save it again, we\u2019ll only see two lines:\n-\n-```bash\n-$ cargo build\n-   Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n-    Finished debug [unoptimized + debuginfo] target(s) in 0.45 secs\n-```\n-\n-So, we told Cargo we wanted any `0.3.x` version of `rand`, and so it fetched the latest\n-version at the time this was written, `v0.3.14`. But what happens when next\n-week, version `v0.3.15` comes out, with an important bugfix? While getting\n-bugfixes is important, what if `0.3.15` contains a regression that breaks our\n-code?\n-\n-The answer to this problem is the `Cargo.lock` file you\u2019ll now find in your\n-project directory. When you build your project for the first time, Cargo\n-figures out all of the versions that fit your criteria, and then writes them\n-to the `Cargo.lock` file. When you build your project in the future, Cargo\n-will see that the `Cargo.lock` file exists, and then use that specific version\n-rather than do all the work of figuring out versions again. This lets you\n-have a repeatable build automatically. In other words, we\u2019ll stay at `0.3.14`\n-until we explicitly upgrade, and so will anyone who we share our code with,\n-thanks to the lock file.\n-\n-What about when we _do_ want to use `v0.3.15`? Cargo has another command,\n-`update`, which says \u2018ignore the lock, figure out all the latest versions that\n-fit what we\u2019ve specified. If that works, write those versions out to the lock\n-file\u2019. But, by default, Cargo will only look for versions larger than `0.3.0`\n-and smaller than `0.4.0`. If we want to move to `0.4.x`, we\u2019d have to update\n-the `Cargo.toml` directly. When we do, the next time we `cargo build`, Cargo\n-will update the index and re-evaluate our `rand` requirements.\n-\n-There\u2019s a lot more to say about [Cargo][doccargo] and [its\n-ecosystem][doccratesio], but for now, that\u2019s all we need to know. Cargo makes\n-it really easy to re-use libraries, and so Rustaceans tend to write smaller\n-projects which are assembled out of a number of sub-packages.\n-\n-[doccargo]: http://doc.crates.io\n-[doccratesio]: http://doc.crates.io/crates-io.html\n-\n-Let\u2019s get on to actually _using_ `rand`. Here\u2019s our next step:\n-\n-```rust,ignore\n-extern crate rand;\n-\n-use std::io;\n-use rand::Rng;\n-\n-fn main() {\n-    println!(\"Guess the number!\");\n-\n-    let secret_number = rand::thread_rng().gen_range(1, 101);\n-\n-    println!(\"The secret number is: {}\", secret_number);\n-\n-    println!(\"Please input your guess.\");\n-\n-    let mut guess = String::new();\n-\n-    io::stdin().read_line(&mut guess)\n-        .expect(\"Failed to read line\");\n-\n-    println!(\"You guessed: {}\", guess);\n-}\n-```\n-\n-The first thing we\u2019ve done is change the first line. It now says\n-`extern crate rand`. Because we declared `rand` in our `[dependencies]`, we\n-can use `extern crate` to let Rust know we\u2019ll be making use of it. This also\n-does the equivalent of a `use rand;` as well, so we can make use of anything\n-in the `rand` crate by prefixing it with `rand::`.\n-\n-Next, we added another `use` line: `use rand::Rng`. We\u2019re going to use a\n-method in a moment, and it requires that `Rng` be in scope to work. The basic\n-idea is this: methods are defined on something called \u2018traits\u2019, and for the\n-method to work, it needs the trait to be in scope. For more about the\n-details, read the [traits][traits] section.\n-\n-[traits]: traits.html\n-\n-There are two other lines we added, in the middle:\n-\n-```rust,ignore\n-    let secret_number = rand::thread_rng().gen_range(1, 101);\n-\n-    println!(\"The secret number is: {}\", secret_number);\n-```\n-\n-We use the `rand::thread_rng()` function to get a copy of the random number\n-generator, which is local to the particular [thread][concurrency] of execution\n-we\u2019re in. Because we `use rand::Rng`\u2019d above, it has a `gen_range()` method\n-available. This method takes two arguments, and generates a number between\n-them. It\u2019s inclusive on the lower bound, but exclusive on the upper bound,\n-so we need `1` and `101` to get a number ranging from one to a hundred.\n-\n-[concurrency]: concurrency.html\n-\n-The second line prints out the secret number. This is useful while\n-we\u2019re developing our program, so we can easily test it out. But we\u2019ll be\n-deleting it for the final version. It\u2019s not much of a game if it prints out\n-the answer when you start it up!\n-\n-Try running our new program a few times:\n-\n-```bash\n-$ cargo run\n-   Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n-    Finished debug [unoptimized + debuginfo] target(s) in 0.55 secs\n-     Running `target/debug/guessing_game`\n-Guess the number!\n-The secret number is: 7\n-Please input your guess.\n-4\n-You guessed: 4\n-$ cargo run\n-    Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs\n-     Running `target/debug/guessing_game`\n-Guess the number!\n-The secret number is: 83\n-Please input your guess.\n-5\n-You guessed: 5\n-```\n-\n-Great! Next up: comparing our guess to the secret number.\n-\n-# Comparing guesses\n-\n-Now that we\u2019ve got user input, let\u2019s compare our guess to the secret number.\n-Here\u2019s our next step, though it doesn\u2019t quite compile yet:\n-\n-```rust,ignore\n-extern crate rand;\n-\n-use std::io;\n-use std::cmp::Ordering;\n-use rand::Rng;\n-\n-fn main() {\n-    println!(\"Guess the number!\");\n-\n-    let secret_number = rand::thread_rng().gen_range(1, 101);\n-\n-    println!(\"The secret number is: {}\", secret_number);\n-\n-    println!(\"Please input your guess.\");\n-\n-    let mut guess = String::new();\n-\n-    io::stdin().read_line(&mut guess)\n-        .expect(\"Failed to read line\");\n-\n-    println!(\"You guessed: {}\", guess);\n-\n-    match guess.cmp(&secret_number) {\n-        Ordering::Less    => println!(\"Too small!\"),\n-        Ordering::Greater => println!(\"Too big!\"),\n-        Ordering::Equal   => println!(\"You win!\"),\n-    }\n-}\n-```\n-\n-A few new bits here. The first is another `use`. We bring a type called\n-`std::cmp::Ordering` into scope. Then, five new lines at the bottom that use\n-it:\n-\n-```rust,ignore\n-match guess.cmp(&secret_number) {\n-    Ordering::Less    => println!(\"Too small!\"),\n-    Ordering::Greater => println!(\"Too big!\"),\n-    Ordering::Equal   => println!(\"You win!\"),\n-}\n-```\n-\n-The `cmp()` method can be called on anything that can be compared, and it\n-takes a reference to the thing you want to compare it to. It returns the\n-`Ordering` type we `use`d earlier. We use a [`match`][match] statement to\n-determine exactly what kind of `Ordering` it is. `Ordering` is an\n-[`enum`][enum], short for \u2018enumeration\u2019, which looks like this:\n-\n-```rust\n-enum Foo {\n-    Bar,\n-    Baz,\n-}\n-```\n-\n-[match]: match.html\n-[enum]: enums.html\n-\n-With this definition, anything of type `Foo` can be either a\n-`Foo::Bar` or a `Foo::Baz`. We use the `::` to indicate the\n-namespace for a particular `enum` variant.\n-\n-The [`Ordering`][ordering] `enum` has three possible variants: `Less`, `Equal`,\n-and `Greater`. The `match` statement takes a value of a type, and lets you\n-create an \u2018arm\u2019 for each possible value. Since we have three types of\n-`Ordering`, we have three arms:\n-\n-```rust,ignore\n-match guess.cmp(&secret_number) {\n-    Ordering::Less    => println!(\"Too small!\"),\n-    Ordering::Greater => println!(\"Too big!\"),\n-    Ordering::Equal   => println!(\"You win!\"),\n-}\n-```\n-\n-[ordering]: ../std/cmp/enum.Ordering.html\n-\n-If it\u2019s `Less`, we print `Too small!`, if it\u2019s `Greater`, `Too big!`, and if\n-`Equal`, `You win!`. `match` is really useful, and is used often in Rust.\n-\n-I did mention that this won\u2019t quite compile yet, though. Let\u2019s try it:\n-\n-```bash\n-$ cargo build\n-   Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n-error[E0308]: mismatched types\n-  --> src/main.rs:23:21\n-   |\n-23 |     match guess.cmp(&secret_number) {\n-   |                     ^^^^^^^^^^^^^^ expected struct `std::string::String`, found integral variable\n-   |\n-   = note: expected type `&std::string::String`\n-   = note:    found type `&{integer}`\n-\n-error: aborting due to previous error\n-\n-error: Could not compile `guessing_game`.\n-\n-To learn more, run the command again with --verbose.\n-```\n-\n-Whew! This is a big error. The core of it is that we have \u2018mismatched types\u2019.\n-Rust has a strong, static type system. However, it also has type inference.\n-When we wrote `let guess = String::new()`, Rust was able to infer that `guess`\n-should be a `String`, and so it doesn\u2019t make us write out the type. And with\n-our `secret_number`, there are a number of types which can have a value\n-between one and a hundred: `i32`, a thirty-two-bit number, or `u32`, an\n-unsigned thirty-two-bit number, or `i64`, a sixty-four-bit number or others.\n-So far, that hasn\u2019t mattered, and so Rust defaults to an `i32`. However, here,\n-Rust doesn\u2019t know how to compare the `guess` and the `secret_number`. They\n-need to be the same type. Ultimately, we want to convert the `String` we\n-read as input into a real number type, for comparison. We can do that\n-with two more lines. Here\u2019s our new program:\n-\n-```rust,ignore\n-extern crate rand;\n-\n-use std::io;\n-use std::cmp::Ordering;\n-use rand::Rng;\n-\n-fn main() {\n-    println!(\"Guess the number!\");\n-\n-    let secret_number = rand::thread_rng().gen_range(1, 101);\n-\n-    println!(\"The secret number is: {}\", secret_number);\n-\n-    println!(\"Please input your guess.\");\n-\n-    let mut guess = String::new();\n-\n-    io::stdin().read_line(&mut guess)\n-        .expect(\"Failed to read line\");\n-\n-    let guess: u32 = guess.trim().parse()\n-        .expect(\"Please type a number!\");\n-\n-    println!(\"You guessed: {}\", guess);\n-\n-    match guess.cmp(&secret_number) {\n-        Ordering::Less    => println!(\"Too small!\"),\n-        Ordering::Greater => println!(\"Too big!\"),\n-        Ordering::Equal   => println!(\"You win!\"),\n-    }\n-}\n-```\n-\n-The new two lines:\n-\n-```rust,ignore\n-    let guess: u32 = guess.trim().parse()\n-        .expect(\"Please type a number!\");\n-```\n-\n-Wait a minute, I thought we already had a `guess`? We do, but Rust allows us\n-to \u2018shadow\u2019 the previous `guess` with a new one. This is often used in this\n-exact situation, where `guess` starts as a `String`, but we want to convert it\n-to an `u32`. Shadowing lets us re-use the `guess` name, rather than forcing us\n-to come up with two unique names like `guess_str` and `guess`, or something\n-else.\n-\n-We bind `guess` to an expression that looks like something we wrote earlier:\n-\n-```rust,ignore\n-guess.trim().parse()\n-```\n-\n-Here, `guess` refers to the old `guess`, the one that was a `String` with our\n-input in it. The `trim()` method on `String`s will eliminate any white space at\n-the beginning and end of our string. This is important, as we had to press the\n-\u2018return\u2019 key to satisfy `read_line()`. This means that if we type `5` and hit\n-return, `guess` looks like this: `5\\n`. The `\\n` represents \u2018newline\u2019, the\n-enter key. `trim()` gets rid of this, leaving our string with only the `5`. The\n-[`parse()` method on strings][parse] parses a string into some kind of number.\n-Since it can parse a variety of numbers, we need to give Rust a hint as to the\n-exact type of number we want. Hence, `let guess: u32`. The colon (`:`) after\n-`guess` tells Rust we\u2019re going to annotate its type. `u32` is an unsigned,\n-thirty-two bit integer. Rust has [a number of built-in number types][number],\n-but we\u2019ve chosen `u32`. It\u2019s a good default choice for a small positive number.\n-\n-[parse]: ../std/primitive.str.html#method.parse\n-[number]: primitive-types.html#numeric-types\n-\n-Just like `read_line()`, our call to `parse()` could cause an error. What if\n-our string contained `A\ud83d\udc4d%`? There\u2019d be no way to convert that to a number. As\n-such, we\u2019ll do the same thing we did with `read_line()`: use the `expect()`\n-method to crash if there\u2019s an error.\n-\n-Let\u2019s try our program out!\n-\n-```bash\n-$ cargo run\n-   Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n-    Finished debug [unoptimized + debuginfo] target(s) in 0.57 secs\n-     Running `target/guessing_game`\n-Guess the number!\n-The secret number is: 58\n-Please input your guess.\n-  76\n-You guessed: 76\n-Too big!\n-```\n-\n-Nice! You can see I even added spaces before my guess, and it still figured\n-out that I guessed 76. Run the program a few times, and verify that guessing\n-the number works, as well as guessing a number too small.\n-\n-Now we\u2019ve got most of the game working, but we can only make one guess. Let\u2019s\n-change that by adding loops!\n-\n-# Looping\n-\n-The `loop` keyword gives us an infinite loop. Let\u2019s add that in:\n-\n-```rust,ignore\n-extern crate rand;\n-\n-use std::io;\n-use std::cmp::Ordering;\n-use rand::Rng;\n-\n-fn main() {\n-    println!(\"Guess the number!\");\n-\n-    let secret_number = rand::thread_rng().gen_range(1, 101);\n-\n-    println!(\"The secret number is: {}\", secret_number);\n-\n-    loop {\n-        println!(\"Please input your guess.\");\n-\n-        let mut guess = String::new();\n-\n-        io::stdin().read_line(&mut guess)\n-            .expect(\"Failed to read line\");\n-\n-        let guess: u32 = guess.trim().parse()\n-            .expect(\"Please type a number!\");\n-\n-        println!(\"You guessed: {}\", guess);\n-\n-        match guess.cmp(&secret_number) {\n-            Ordering::Less    => println!(\"Too small!\"),\n-            Ordering::Greater => println!(\"Too big!\"),\n-            Ordering::Equal   => println!(\"You win!\"),\n-        }\n-    }\n-}\n-```\n-\n-And try it out. But wait, didn\u2019t we just add an infinite loop? Yup. Remember\n-our discussion about `parse()`? If we give a non-number answer, we\u2019ll `panic!`\n-and quit. Observe:\n-\n-```bash\n-$ cargo run\n-   Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n-    Finished debug [unoptimized + debuginfo] target(s) in 0.58 secs\n-     Running `target/guessing_game`\n-Guess the number!\n-The secret number is: 59\n-Please input your guess.\n-45\n-You guessed: 45\n-Too small!\n-Please input your guess.\n-60\n-You guessed: 60\n-Too big!\n-Please input your guess.\n-59\n-You guessed: 59\n-You win!\n-Please input your guess.\n-quit\n-thread 'main' panicked at 'Please type a number!'\n-```\n-\n-Ha! `quit` actually quits. As does any other non-number input. Well, this is\n-suboptimal to say the least. First, let\u2019s actually quit when you win the game:\n-\n-```rust,ignore\n-extern crate rand;\n-\n-use std::io;\n-use std::cmp::Ordering;\n-use rand::Rng;\n-\n-fn main() {\n-    println!(\"Guess the number!\");\n-\n-    let secret_number = rand::thread_rng().gen_range(1, 101);\n-\n-    println!(\"The secret number is: {}\", secret_number);\n-\n-    loop {\n-        println!(\"Please input your guess.\");\n-\n-        let mut guess = String::new();\n-\n-        io::stdin().read_line(&mut guess)\n-            .expect(\"Failed to read line\");\n-\n-        let guess: u32 = guess.trim().parse()\n-            .expect(\"Please type a number!\");\n-\n-        println!(\"You guessed: {}\", guess);\n-\n-        match guess.cmp(&secret_number) {\n-            Ordering::Less    => println!(\"Too small!\"),\n-            Ordering::Greater => println!(\"Too big!\"),\n-            Ordering::Equal   => {\n-                println!(\"You win!\");\n-                break;\n-            }\n-        }\n-    }\n-}\n-```\n-\n-By adding the `break` line after the `You win!`, we\u2019ll exit the loop when we\n-win. Exiting the loop also means exiting the program, since it\u2019s the last\n-thing in `main()`. We have only one more tweak to make: when someone inputs a\n-non-number, we don\u2019t want to quit, we want to ignore it. We can do that\n-like this:\n-\n-```rust,ignore\n-extern crate rand;\n-\n-use std::io;\n-use std::cmp::Ordering;\n-use rand::Rng;\n-\n-fn main() {\n-    println!(\"Guess the number!\");\n-\n-    let secret_number = rand::thread_rng().gen_range(1, 101);\n-\n-    println!(\"The secret number is: {}\", secret_number);\n-\n-    loop {\n-        println!(\"Please input your guess.\");\n-\n-        let mut guess = String::new();\n-\n-        io::stdin().read_line(&mut guess)\n-            .expect(\"Failed to read line\");\n-\n-        let guess: u32 = match guess.trim().parse() {\n-            Ok(num) => num,\n-            Err(_) => continue,\n-        };\n-\n-        println!(\"You guessed: {}\", guess);\n-\n-        match guess.cmp(&secret_number) {\n-            Ordering::Less    => println!(\"Too small!\"),\n-            Ordering::Greater => println!(\"Too big!\"),\n-            Ordering::Equal   => {\n-                println!(\"You win!\");\n-                break;\n-            }\n-        }\n-    }\n-}\n-```\n-\n-These are the lines that changed:\n-\n-```rust,ignore\n-let guess: u32 = match guess.trim().parse() {\n-    Ok(num) => num,\n-    Err(_) => continue,\n-};\n-```\n-This is how you generally move from \u2018crash on error\u2019 to \u2018actually handle the\n-error\u2019, by switching from `expect()` to a `match` statement. A `Result` is\n-returned by `parse()`, this is an `enum`  like `Ordering`, but in this case,\n-each variant has some data associated with it: `Ok` is a success, and `Err` is a\n-failure. Each contains more information: the successfully parsed integer, or an\n-error type. In this case, we `match` on `Ok(num)`, which sets the name `num` to\n-the unwrapped `Ok` value (the integer), and then we  return it on the\n-right-hand side. In the `Err` case, we don\u2019t care what kind of error it is, so\n-we just use the catch all `_` instead of a name. This catches everything that\n-isn't `Ok`, and `continue` lets us move to the next iteration of the loop; in\n-effect, this enables us to ignore all errors and continue with our program.\n-\n-Now we should be good! Let\u2019s try:\n-\n-```bash\n-$ cargo run\n-   Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n-    Finished debug [unoptimized + debuginfo] target(s) in 0.57 secs\n-     Running `target/guessing_game`\n-Guess the number!\n-The secret number is: 61\n-Please input your guess.\n-10\n-You guessed: 10\n-Too small!\n-Please input your guess.\n-99\n-You guessed: 99\n-Too big!\n-Please input your guess.\n-foo\n-Please input your guess.\n-61\n-You guessed: 61\n-You win!\n-```\n-\n-Awesome! With one tiny last tweak, we have finished the guessing game. Can you\n-think of what it is? That\u2019s right, we don\u2019t want to print out the secret\n-number. It was good for testing, but it kind of ruins the game. Here\u2019s our\n-final source:\n-\n-```rust,ignore\n-extern crate rand;\n-\n-use std::io;\n-use std::cmp::Ordering;\n-use rand::Rng;\n-\n-fn main() {\n-    println!(\"Guess the number!\");\n-\n-    let secret_number = rand::thread_rng().gen_range(1, 101);\n-\n-    loop {\n-        println!(\"Please input your guess.\");\n-\n-        let mut guess = String::new();\n-\n-        io::stdin().read_line(&mut guess)\n-            .expect(\"Failed to read line\");\n-\n-        let guess: u32 = match guess.trim().parse() {\n-            Ok(num) => num,\n-            Err(_) => continue,\n-        };\n-\n-        println!(\"You guessed: {}\", guess);\n-\n-        match guess.cmp(&secret_number) {\n-            Ordering::Less    => println!(\"Too small!\"),\n-            Ordering::Greater => println!(\"Too big!\"),\n-            Ordering::Equal   => {\n-                println!(\"You win!\");\n-                break;\n-            }\n-        }\n-    }\n-}\n-```\n-\n-# Complete!\n-\n-This project showed you a lot: `let`, `match`, methods, associated\n-functions, using external crates, and more.\n-\n-At this point, you have successfully built the Guessing Game! Congratulations!"}, {"sha": "9eeac3d687ebfaa85398977c0c32421a9383e481", "filename": "src/doc/book/src/if-let.md", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fif-let.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fif-let.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fif-let.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,84 +0,0 @@\n-# if let\n-\n-`if let` permits [patterns][patterns] matching within the condition of an [if][if] statement.\n-This allows us to reduce the overhead of certain kinds of [pattern][patterns] matches\n-and express them in a more convenient way.  \n-\n-For example, let\u2019s say we have some sort of `Option<T>`. We want to call a function\n-on it if it\u2019s `Some<T>`, but do nothing if it\u2019s `None`. That looks like this:\n-\n-```rust\n-# let option = Some(5);\n-# fn foo(x: i32) { }\n-match option {\n-    Some(x) => { foo(x) },\n-    None => {},\n-}\n-```\n-\n-We don\u2019t have to use `match` here, for example, we could use `if`:\n-\n-```rust\n-# let option = Some(5);\n-# fn foo(x: i32) { }\n-if option.is_some() {\n-    let x = option.unwrap();\n-    foo(x);\n-}\n-```\n-\n-Neither of these options is particularly appealing. We can use `if let` to\n-do the same thing in a nicer way:\n-\n-```rust\n-# let option = Some(5);\n-# fn foo(x: i32) { }\n-if let Some(x) = option {\n-    foo(x);\n-}\n-```\n-\n-If a [pattern][patterns] matches successfully, it binds any appropriate parts of\n-the value to the identifiers in the pattern, then evaluates the expression. If\n-the pattern doesn\u2019t match, nothing happens.\n-\n-If you want to do something else when the pattern does not match, you can\n-use `else`:\n-\n-```rust\n-# let option = Some(5);\n-# fn foo(x: i32) { }\n-# fn bar() { }\n-if let Some(x) = option {\n-    foo(x);\n-} else {\n-    bar();\n-}\n-```\n-\n-## `while let`\n-\n-In a similar fashion, `while let` can be used when you want to conditionally\n-loop  as long as a value matches a certain pattern. It turns code like this:\n-\n-```rust\n-let mut v = vec![1, 3, 5, 7, 11];\n-loop {\n-    match v.pop() {\n-        Some(x) =>  println!(\"{}\", x),\n-        None => break,\n-    }\n-}\n-```\n-\n-Into code like this:\n-\n-```rust\n-let mut v = vec![1, 3, 5, 7, 11];\n-while let Some(x) = v.pop() {\n-    println!(\"{}\", x);\n-}\n-```\n-\n-[patterns]: patterns.html\n-[if]: if.html"}, {"sha": "d74503757bc48c154222abbd8d9a07747d2811d9", "filename": "src/doc/book/src/if.md", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fif.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fif.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fif.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,73 +0,0 @@\n-# if\n-\n-Rust\u2019s take on `if` is not particularly complex, but it\u2019s much more like the\n-`if` you\u2019ll find in a dynamically typed language than in a more traditional\n-systems language. So let\u2019s talk about it, to make sure you grasp the nuances.\n-\n-`if` is a specific form of a more general concept, the \u2018branch\u2019, whose name comes\n-from a branch in a tree: a decision point, where depending on a choice,\n-multiple paths can be taken.\n-\n-In the case of `if`, there is one choice that leads down two paths:\n-\n-```rust\n-let x = 5;\n-\n-if x == 5 {\n-    println!(\"x is five!\");\n-}\n-```\n-\n-If we changed the value of `x` to something else, this line would not print.\n-More specifically, if the expression after the `if` evaluates to `true`, then\n-the block is executed. If it\u2019s `false`, then it is not.\n-\n-If you want something to happen in the `false` case, use an `else`:\n-\n-```rust\n-let x = 5;\n-\n-if x == 5 {\n-    println!(\"x is five!\");\n-} else {\n-    println!(\"x is not five :(\");\n-}\n-```\n-\n-If there is more than one case, use an `else if`:\n-\n-```rust\n-let x = 5;\n-\n-if x == 5 {\n-    println!(\"x is five!\");\n-} else if x == 6 {\n-    println!(\"x is six!\");\n-} else {\n-    println!(\"x is not five or six :(\");\n-}\n-```\n-\n-This is all pretty standard. However, you can also do this:\n-\n-```rust\n-let x = 5;\n-\n-let y = if x == 5 {\n-    10\n-} else {\n-    15\n-}; // y: i32\n-```\n-\n-Which we can (and probably should) write like this:\n-\n-```rust\n-let x = 5;\n-\n-let y = if x == 5 { 10 } else { 15 }; // y: i32\n-```\n-\n-This works because `if` is an expression. The value of the expression is the\n-value of the last expression in whichever branch was chosen. An `if` without an\n-`else` always results in `()` as the value."}, {"sha": "8ee6c0828ad6b7253a507a56c224749566d7b307", "filename": "src/doc/book/src/iterators.md", "status": "removed", "additions": 0, "deletions": 344, "changes": 344, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fiterators.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,344 +0,0 @@\n-# Iterators\n-\n-Let's talk about loops.\n-\n-Remember Rust's `for` loop? Here's an example:\n-\n-```rust\n-for x in 0..10 {\n-    println!(\"{}\", x);\n-}\n-```\n-\n-Now that you know more Rust, we can talk in detail about how this works.\n-Ranges (the `0..10`) are 'iterators'. An iterator is something that we can\n-call the `.next()` method on repeatedly, and it gives us a sequence of things.\n-\n-(By the way, a range with two dots like `0..10` is inclusive on the left (so it\n-starts at 0) and exclusive on the right (so it ends at 9). A mathematician\n-would write \"[0, 10)\". To get a range that goes all the way up to 10 you can\n-write `0...10`.)\n-\n-Like this:\n-\n-```rust\n-let mut range = 0..10;\n-\n-loop {\n-    match range.next() {\n-        Some(x) => {\n-            println!(\"{}\", x);\n-        },\n-        None => { break }\n-    }\n-}\n-```\n-\n-We make a mutable binding to the range, which is our iterator. We then `loop`,\n-with an inner `match`. This `match` is used on the result of `range.next()`,\n-which gives us a reference to the next value of the iterator. `next` returns an\n-`Option<i32>`, in this case, which will be `Some(i32)` when we have a value and\n-`None` once we run out. If we get `Some(i32)`, we print it out, and if we get\n-`None`, we `break` out of the loop.\n-\n-This code sample is basically the same as our `for` loop version. The `for`\n-loop is a handy way to write this `loop`/`match`/`break` construct.\n-\n-`for` loops aren't the only thing that uses iterators, however. Writing your\n-own iterator involves implementing the `Iterator` trait. While doing that is\n-outside of the scope of this guide, Rust provides a number of useful iterators\n-to accomplish various tasks. But first, a few notes about limitations of ranges.\n-\n-Ranges are very primitive, and we often can use better alternatives. Consider the\n-following Rust anti-pattern: using ranges to emulate a C-style `for` loop. Let\u2019s\n-suppose you needed to iterate over the contents of a vector. You may be tempted\n-to write this:\n-\n-```rust\n-let nums = vec![1, 2, 3];\n-\n-for i in 0..nums.len() {\n-    println!(\"{}\", nums[i]);\n-}\n-```\n-\n-This is strictly worse than using an actual iterator. You can iterate over vectors\n-directly, so write this:\n-\n-```rust\n-let nums = vec![1, 2, 3];\n-\n-for num in &nums {\n-    println!(\"{}\", num);\n-}\n-```\n-\n-There are two reasons for this. First, this more directly expresses what we\n-mean. We iterate through the entire vector, rather than iterating through\n-indexes, and then indexing the vector. Second, this version is more efficient:\n-the first version will have extra bounds checking because it used indexing,\n-`nums[i]`. But since we yield a reference to each element of the vector in turn\n-with the iterator, there's no bounds checking in the second example. This is\n-very common with iterators: we can ignore unnecessary bounds checks, but still\n-know that we're safe.\n-\n-There's another detail here that's not 100% clear because of how `println!`\n-works. `num` is actually of type `&i32`. That is, it's a reference to an `i32`,\n-not an `i32` itself. `println!` handles the dereferencing for us, so we don't\n-see it. This code works fine too:\n-\n-```rust\n-let nums = vec![1, 2, 3];\n-\n-for num in &nums {\n-    println!(\"{}\", *num);\n-}\n-```\n-\n-Now we're explicitly dereferencing `num`. Why does `&nums` give us\n-references?  Firstly, because we explicitly asked it to with\n-`&`. Secondly, if it gave us the data itself, we would have to be its\n-owner, which would involve making a copy of the data and giving us the\n-copy. With references, we're only borrowing a reference to the data,\n-and so it's only passing a reference, without needing to do the move.\n-\n-So, now that we've established that ranges are often not what you want, let's\n-talk about what you do want instead.\n-\n-There are three broad classes of things that are relevant here: iterators,\n-*iterator adaptors*, and *consumers*. Here's some definitions:\n-\n-* *iterators* give you a sequence of values.\n-* *iterator adaptors* operate on an iterator, producing a new iterator with a\n-  different output sequence.\n-* *consumers* operate on an iterator, producing some final set of values.\n-\n-Let's talk about consumers first, since you've already seen an iterator, ranges.\n-\n-## Consumers\n-\n-A *consumer* operates on an iterator, returning some kind of value or values.\n-The most common consumer is `collect()`. This code doesn't quite compile,\n-but it shows the intention:\n-\n-```rust,ignore\n-let one_to_one_hundred = (1..101).collect();\n-```\n-\n-As you can see, we call `collect()` on our iterator. `collect()` takes\n-as many values as the iterator will give it, and returns a collection\n-of the results. So why won't this compile? Rust can't determine what\n-type of things you want to collect, and so you need to let it know.\n-Here's the version that does compile:\n-\n-```rust\n-let one_to_one_hundred = (1..101).collect::<Vec<i32>>();\n-```\n-\n-If you remember, the [`::<>` syntax](generics.html#resolving-ambiguities)\n-allows us to give a type hint that tells the compiler we want a vector of\n-integers. You don't always need to use the whole type, though. Using a `_`\n-will let you provide a partial hint:\n-\n-```rust\n-let one_to_one_hundred = (1..101).collect::<Vec<_>>();\n-```\n-\n-This says \"Collect into a `Vec<T>`, please, but infer what the `T` is for me.\"\n-`_` is sometimes called a \"type placeholder\" for this reason.\n-\n-`collect()` is the most common consumer, but there are others too. `find()`\n-is one:\n-\n-```rust\n-let greater_than_forty_two = (0..100)\n-                             .find(|x| *x > 42);\n-\n-match greater_than_forty_two {\n-    Some(_) => println!(\"Found a match!\"),\n-    None => println!(\"No match found :(\"),\n-}\n-```\n-\n-`find` takes a closure, and works on a reference to each element of an\n-iterator. This closure returns `true` if the element is the element we're\n-looking for, and `false` otherwise. `find` returns the first element satisfying\n-the specified predicate. Because we might not find a matching element, `find`\n-returns an `Option` rather than the element itself.\n-\n-Another important consumer is `fold`. Here's what it looks like:\n-\n-```rust\n-let sum = (1..4).fold(0, |sum, x| sum + x);\n-```\n-\n-`fold()` is a consumer that looks like this:\n-`fold(base, |accumulator, element| ...)`. It takes two arguments: the first\n-is an element called the *base*. The second is a closure that itself takes two\n-arguments: the first is called the *accumulator*, and the second is an\n-*element*. Upon each iteration, the closure is called, and the result is the\n-value of the accumulator on the next iteration. On the first iteration, the\n-base is the value of the accumulator.\n-\n-Okay, that's a bit confusing. Let's examine the values of all of these things\n-in this iterator:\n-\n-| base | accumulator | element | closure result |\n-|------|-------------|---------|----------------|\n-| 0    | 0           | 1       | 1              |\n-| 0    | 1           | 2       | 3              |\n-| 0    | 3           | 3       | 6              |\n-\n-We called `fold()` with these arguments:\n-\n-```rust\n-# (1..4)\n-.fold(0, |sum, x| sum + x);\n-```\n-\n-So, `0` is our base, `sum` is our accumulator, and `x` is our element.  On the\n-first iteration, we set `sum` to `0`, and `x` is the first element of `nums`,\n-`1`. We then add `sum` and `x`, which gives us `0 + 1 = 1`. On the second\n-iteration, that value becomes our accumulator, `sum`, and the element is\n-the second element of the array, `2`. `1 + 2 = 3`, and so that becomes\n-the value of the accumulator for the last iteration. On that iteration,\n-`x` is the last element, `3`, and `3 + 3 = 6`, which is our final\n-result for our sum. `1 + 2 + 3 = 6`, and that's the result we got.\n-\n-Whew. `fold` can be a bit strange the first few times you see it, but once it\n-clicks, you can use it all over the place. Any time you have a list of things,\n-and you want a single result, `fold` is appropriate.\n-\n-Consumers are important due to one additional property of iterators we haven't\n-talked about yet: laziness. Let's talk some more about iterators, and you'll\n-see why consumers matter.\n-\n-## Iterators\n-\n-As we've said before, an iterator is something that we can call the\n-`.next()` method on repeatedly, and it gives us a sequence of things.\n-Because you need to call the method, this means that iterators\n-can be *lazy* and not generate all of the values upfront. This code,\n-for example, does not actually generate the numbers `1-99`, instead\n-creating a value that merely represents the sequence:\n-\n-```rust\n-let nums = 1..100;\n-```\n-\n-Since we didn't do anything with the range, it didn't generate the sequence.\n-Let's add the consumer:\n-\n-```rust\n-let nums = (1..100).collect::<Vec<i32>>();\n-```\n-\n-Now, `collect()` will require that the range gives it some numbers, and so\n-it will do the work of generating the sequence.\n-\n-Ranges are one of two basic iterators that you'll see. The other is `iter()`.\n-`iter()` can turn a vector into a simple iterator that gives you each element\n-in turn:\n-\n-```rust\n-let nums = vec![1, 2, 3];\n-\n-for num in nums.iter() {\n-   println!(\"{}\", num);\n-}\n-```\n-\n-These two basic iterators should serve you well. There are some more\n-advanced iterators, including ones that are infinite.\n-\n-That's enough about iterators. Iterator adaptors are the last concept\n-we need to talk about with regards to iterators. Let's get to it!\n-\n-## Iterator adaptors\n-\n-*Iterator adaptors* take an iterator and modify it somehow, producing\n-a new iterator. The simplest one is called `map`:\n-\n-```rust,ignore\n-(1..100).map(|x| x + 1);\n-```\n-\n-`map` is called upon another iterator, and produces a new iterator where each\n-element reference has the closure it's been given as an argument called on it.\n-So this would give us the numbers from `2-100`. Well, almost! If you\n-compile the example, you'll get a warning:\n-\n-```text\n-warning: unused result which must be used: iterator adaptors are lazy and\n-         do nothing unless consumed, #[warn(unused_must_use)] on by default\n-(1..100).map(|x| x + 1);\n- ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-```\n-\n-Laziness strikes again! That closure will never execute. This example\n-doesn't print any numbers:\n-\n-```rust,ignore\n-(1..100).map(|x| println!(\"{}\", x));\n-```\n-\n-If you are trying to execute a closure on an iterator for its side effects,\n-use `for` instead.\n-\n-There are tons of interesting iterator adaptors. `take(n)` will return an\n-iterator over the next `n` elements of the original iterator. Let's try it out\n-with an infinite iterator:\n-\n-```rust\n-for i in (1..).take(5) {\n-    println!(\"{}\", i);\n-}\n-```\n-\n-This will print\n-\n-```text\n-1\n-2\n-3\n-4\n-5\n-```\n-\n-`filter()` is an adapter that takes a closure as an argument. This closure\n-returns `true` or `false`. The new iterator `filter()` produces\n-only the elements that the closure returns `true` for:\n-\n-```rust\n-for i in (1..100).filter(|&x| x % 2 == 0) {\n-    println!(\"{}\", i);\n-}\n-```\n-\n-This will print all of the even numbers between one and a hundred.\n-(Note that, unlike `map`, the closure passed to `filter` is passed a reference\n-to the element instead of the element itself. The filter predicate here uses\n-the `&x` pattern to extract the integer. The filter closure is passed a\n-reference because it returns `true` or `false` instead of the element,\n-so the `filter` implementation must retain ownership to put the elements\n-into the newly constructed iterator.)\n-\n-You can chain all three things together: start with an iterator, adapt it\n-a few times, and then consume the result. Check it out:\n-\n-```rust\n-(1..)\n-    .filter(|&x| x % 2 == 0)\n-    .filter(|&x| x % 3 == 0)\n-    .take(5)\n-    .collect::<Vec<i32>>();\n-```\n-\n-This will give you a vector containing `6`, `12`, `18`, `24`, and `30`.\n-\n-This is just a small taste of what iterators, iterator adaptors, and consumers\n-can help you with. There are a number of really useful iterators, and you can\n-write your own as well. Iterators provide a safe, efficient way to manipulate\n-all kinds of lists. They're a little unusual at first, but if you play with\n-them, you'll get hooked. For a full list of the different iterators and\n-consumers, check out the [iterator module documentation](../std/iter/index.html)."}, {"sha": "042d9af9717d052a705f8f183bb4e998add2b0d4", "filename": "src/doc/book/src/lifetimes.md", "status": "removed", "additions": 0, "deletions": 428, "changes": 428, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Flifetimes.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,428 +0,0 @@\n-# Lifetimes\n-\n-This is the last of three sections presenting Rust\u2019s ownership system. This is one of\n-Rust\u2019s most distinct and compelling features, with which Rust developers should\n-become quite acquainted. Ownership is how Rust achieves its largest goal,\n-memory safety. There are a few distinct concepts, each with its own chapter:\n-\n-* [ownership][ownership], the key concept\n-* [borrowing][borrowing], and their associated feature \u2018references\u2019\n-* lifetimes, which you\u2019re reading now\n-\n-These three chapters are related, and in order. You\u2019ll need all three to fully\n-understand the ownership system.\n-\n-[ownership]: ownership.html\n-[borrowing]: references-and-borrowing.html\n-\n-# Meta\n-\n-Before we get to the details, two important notes about the ownership system.\n-\n-Rust has a focus on safety and speed. It accomplishes these goals through many\n-\u2018zero-cost abstractions\u2019, which means that in Rust, abstractions cost as little\n-as possible in order to make them work. The ownership system is a prime example\n-of a zero-cost abstraction. All of the analysis we\u2019ll talk about in this guide\n-is _done at compile time_. You do not pay any run-time cost for any of these\n-features.\n-\n-However, this system does have a certain cost: learning curve. Many new users\n-to Rust experience something we like to call \u2018fighting with the borrow\n-checker\u2019, where the Rust compiler refuses to compile a program that the author\n-thinks is valid. This often happens because the programmer\u2019s mental model of\n-how ownership should work doesn\u2019t match the actual rules that Rust implements.\n-You probably will experience similar things at first. There is good news,\n-however: more experienced Rust developers report that once they work with the\n-rules of the ownership system for a period of time, they fight the borrow\n-checker less and less.\n-\n-With that in mind, let\u2019s learn about lifetimes.\n-\n-# Lifetimes\n-\n-Lending out a reference to a resource that someone else owns can be\n-complicated. For example, imagine this set of operations:\n-\n-1. I acquire a handle to some kind of resource.\n-2. I lend you a reference to the resource.\n-3. I decide I\u2019m done with the resource, and deallocate it, while you still have\n-  your reference.\n-4. You decide to use the resource.\n-\n-Uh oh! Your reference is pointing to an invalid resource. This is called a\n-dangling pointer or \u2018use after free\u2019, when the resource is memory. A small\n-example of such a situation would be:\n-\n-```rust,compile_fail\n-let r;              // Introduce reference: `r`.\n-{\n-    let i = 1;      // Introduce scoped value: `i`.\n-    r = &i;         // Store reference of `i` in `r`.\n-}                   // `i` goes out of scope and is dropped.\n-\n-println!(\"{}\", r);  // `r` still refers to `i`.\n-```\n-\n-To fix this, we have to make sure that step four never happens after step\n-three. In the small example above the Rust compiler is able to report the issue\n-as it can see the lifetimes of the various values in the function.\n-\n-When we have a function that takes arguments by reference the situation becomes\n-more complex. Consider the following example:\n-\n-```rust,compile_fail,E0106\n-fn skip_prefix(line: &str, prefix: &str) -> &str {\n-    // ...\n-#   line\n-}\n-\n-let line = \"lang:en=Hello World!\";\n-let lang = \"en\";\n-\n-let v;\n-{\n-    let p = format!(\"lang:{}=\", lang);  // -+ `p` comes into scope.\n-    v = skip_prefix(line, p.as_str());  //  |\n-}                                       // -+ `p` goes out of scope.\n-println!(\"{}\", v);\n-```\n-\n-Here we have a function `skip_prefix` which takes two `&str` references\n-as parameters and returns a single `&str` reference. We call it\n-by passing in references to `line` and `p`: Two variables with different\n-lifetimes. Now the safety of the `println!`-line depends on whether the\n-reference returned by `skip_prefix` function references the still living\n-`line` or the already dropped `p` string.\n-\n-Because of the above ambiguity, Rust will refuse to compile the example\n-code. To get it to compile we need to tell the compiler more about the\n-lifetimes of the references. This can be done by making the lifetimes\n-explicit in the function declaration:\n-\n-```rust\n-fn skip_prefix<'a, 'b>(line: &'a str, prefix: &'b str) -> &'a str {\n-    // ...\n-#   line\n-}\n-```\n-\n-Let's examine the changes without going too deep into the syntax for now -\n-we'll get to that later. The first change was adding the `<'a, 'b>` after the\n-method name. This introduces two lifetime parameters: `'a` and `'b`. Next, each\n-reference in the function signature was associated with one of the lifetime\n-parameters by adding the lifetime name after the `&`. This tells the compiler\n-how the lifetimes between different references are related.\n-\n-As a result the compiler is now able to deduce that the return value of\n-`skip_prefix` has the same lifetime as the `line` parameter, which makes the `v`\n-reference safe to use even after the `p` goes out of scope in the original\n-example.\n-\n-In addition to the compiler being able to validate the usage of `skip_prefix`\n-return value, it can also ensure that the implementation follows the contract\n-established by the function declaration. This is useful especially when you are\n-implementing traits that are introduced [later in the book][traits].\n-\n-**Note** It's important to understand that lifetime annotations are\n-_descriptive_, not _prescriptive_. This means that how long a reference is valid\n-is determined by the code, not by the annotations. The annotations, however,\n-give information about lifetimes to the compiler that uses them to check the\n-validity of references. The compiler can do so without annotations in simple\n-cases, but needs the programmer's support in complex scenarios.\n-\n-[traits]: traits.html\n-\n-# Syntax\n-\n-The `'a` reads \u2018the lifetime a\u2019. Technically, every reference has some lifetime\n-associated with it, but the compiler lets you elide (i.e. omit, see\n-[\"Lifetime Elision\"][lifetime-elision] below) them in common cases. Before we\n-get to that, though, let\u2019s look at a short example with explicit lifetimes:\n-\n-[lifetime-elision]: #lifetime-elision\n-\n-```rust,ignore\n-fn bar<'a>(...)\n-```\n-\n-We previously talked a little about [function syntax][functions], but we didn\u2019t\n-discuss the `<>`s after a function\u2019s name. A function can have \u2018generic\n-parameters\u2019 between the `<>`s, of which lifetimes are one kind. We\u2019ll discuss\n-other kinds of generics [later in the book][generics], but for now, let\u2019s\n-focus on the lifetimes aspect.\n-\n-[functions]: functions.html\n-[generics]: generics.html\n-\n-We use `<>` to declare our lifetimes. This says that `bar` has one lifetime,\n-`'a`. If we had two reference parameters with different lifetimes, it would\n-look like this:\n-\n-\n-```rust,ignore\n-fn bar<'a, 'b>(...)\n-```\n-\n-Then in our parameter list, we use the lifetimes we\u2019ve named:\n-\n-```rust,ignore\n-...(x: &'a i32)\n-```\n-\n-If we wanted a `&mut` reference, we\u2019d do this:\n-\n-```rust,ignore\n-...(x: &'a mut i32)\n-```\n-\n-If you compare `&mut i32` to `&'a mut i32`, they\u2019re the same, it\u2019s that\n-the lifetime `'a` has snuck in between the `&` and the `mut i32`. We read `&mut\n-i32` as \u2018a mutable reference to an `i32`\u2019 and `&'a mut i32` as \u2018a mutable\n-reference to an `i32` with the lifetime `'a`\u2019.\n-\n-# In `struct`s\n-\n-You\u2019ll also need explicit lifetimes when working with [`struct`][structs]s that\n-contain references:\n-\n-```rust\n-struct Foo<'a> {\n-    x: &'a i32,\n-}\n-\n-fn main() {\n-    let y = &5; // This is the same as `let _y = 5; let y = &_y;`.\n-    let f = Foo { x: y };\n-\n-    println!(\"{}\", f.x);\n-}\n-```\n-\n-[structs]: structs.html\n-\n-As you can see, `struct`s can also have lifetimes. In a similar way to functions,\n-\n-```rust\n-struct Foo<'a> {\n-# x: &'a i32,\n-# }\n-```\n-\n-declares a lifetime, and\n-\n-```rust\n-# struct Foo<'a> {\n-x: &'a i32,\n-# }\n-```\n-\n-uses it. So why do we need a lifetime here? We need to ensure that any reference\n-to a `Foo` cannot outlive the reference to an `i32` it contains.\n-\n-## `impl` blocks\n-\n-Let\u2019s implement a method on `Foo`:\n-\n-```rust\n-struct Foo<'a> {\n-    x: &'a i32,\n-}\n-\n-impl<'a> Foo<'a> {\n-    fn x(&self) -> &'a i32 { self.x }\n-}\n-\n-fn main() {\n-    let y = &5; // This is the same as `let _y = 5; let y = &_y;`.\n-    let f = Foo { x: y };\n-\n-    println!(\"x is: {}\", f.x());\n-}\n-```\n-\n-As you can see, we need to declare a lifetime for `Foo` in the `impl` line. We repeat\n-`'a` twice, like on functions: `impl<'a>` defines a lifetime `'a`, and `Foo<'a>`\n-uses it.\n-\n-## Multiple lifetimes\n-\n-If you have multiple references, you can use the same lifetime multiple times:\n-\n-```rust\n-fn x_or_y<'a>(x: &'a str, y: &'a str) -> &'a str {\n-#    x\n-# }\n-```\n-\n-This says that `x` and `y` both are alive for the same scope, and that the\n-return value is also alive for that scope. If you wanted `x` and `y` to have\n-different lifetimes, you can use multiple lifetime parameters:\n-\n-```rust\n-fn x_or_y<'a, 'b>(x: &'a str, y: &'b str) -> &'a str {\n-#    x\n-# }\n-```\n-\n-In this example, `x` and `y` have different valid scopes, but the return value\n-has the same lifetime as `x`.\n-\n-## Thinking in scopes\n-\n-A way to think about lifetimes is to visualize the scope that a reference is\n-valid for. For example:\n-\n-```rust\n-fn main() {\n-    let y = &5;     // -+ `y` comes into scope.\n-                    //  |\n-    // Stuff...     //  |\n-                    //  |\n-}                   // -+ `y` goes out of scope.\n-```\n-\n-Adding in our `Foo`:\n-\n-```rust\n-struct Foo<'a> {\n-    x: &'a i32,\n-}\n-\n-fn main() {\n-    let y = &5;           // -+ `y` comes into scope.\n-    let f = Foo { x: y }; // -+ `f` comes into scope.\n-                          //  |\n-    // Stuff...           //  |\n-                          //  |\n-}                         // -+ `f` and `y` go out of scope.\n-```\n-\n-Our `f` lives within the scope of `y`, so everything works. What if it didn\u2019t?\n-This code won\u2019t work:\n-\n-```rust,ignore\n-struct Foo<'a> {\n-    x: &'a i32,\n-}\n-\n-fn main() {\n-    let x;                    // -+ `x` comes into scope.\n-                              //  |\n-    {                         //  |\n-        let y = &5;           // ---+ `y` comes into scope.\n-        let f = Foo { x: y }; // ---+ `f` comes into scope.\n-        x = &f.x;             //  | | This causes an error.\n-    }                         // ---+ `f` and y go out of scope.\n-                              //  |\n-    println!(\"{}\", x);        //  |\n-}                             // -+ `x` goes out of scope.\n-```\n-\n-Whew! As you can see here, the scopes of `f` and `y` are smaller than the scope\n-of `x`. But when we do `x = &f.x`, we make `x` a reference to something that\u2019s\n-about to go out of scope.\n-\n-Named lifetimes are a way of giving these scopes a name. Giving something a\n-name is the first step towards being able to talk about it.\n-\n-## 'static\n-\n-The lifetime named \u2018static\u2019 is a special lifetime. It signals that something\n-has the lifetime of the entire program. Most Rust programmers first come across\n-`'static` when dealing with strings:\n-\n-```rust\n-let x: &'static str = \"Hello, world.\";\n-```\n-\n-String literals have the type `&'static str` because the reference is always\n-alive: they are baked into the data segment of the final binary. Another\n-example are globals:\n-\n-```rust\n-static FOO: i32 = 5;\n-let x: &'static i32 = &FOO;\n-```\n-\n-This adds an `i32` to the data segment of the binary, and `x` is a reference\n-to it.\n-\n-## Lifetime Elision\n-\n-Rust supports powerful local type inference in the bodies of functions, but it\n-deliberately does not perform any reasoning about types for item signatures. \n-However, for ergonomic reasons, a very restricted secondary inference algorithm called \n-\u201clifetime elision\u201d does apply when judging lifetimes. Lifetime elision is concerned solely with inferring \n-lifetime parameters using three easily memorizable and unambiguous rules. This means lifetime elision \n-acts as a shorthand for writing an item signature, while not hiding\n-away the actual types involved as full local inference would if applied to it.\n-\n-When talking about lifetime elision, we use the terms *input lifetime* and\n-*output lifetime*. An *input lifetime* is a lifetime associated with a parameter\n-of a function, and an *output lifetime* is a lifetime associated with the return\n-value of a function. For example, this function has an input lifetime:\n-\n-```rust,ignore\n-fn foo<'a>(bar: &'a str)\n-```\n-\n-This one has an output lifetime:\n-\n-```rust,ignore\n-fn foo<'a>() -> &'a str\n-```\n-\n-This one has a lifetime in both positions:\n-\n-```rust,ignore\n-fn foo<'a>(bar: &'a str) -> &'a str\n-```\n-\n-Here are the three rules:\n-\n-* Each elided lifetime in a function\u2019s arguments becomes a distinct lifetime\n-  parameter.\n-\n-* If there is exactly one input lifetime, elided or not, that lifetime is\n-  assigned to all elided lifetimes in the return values of that function.\n-\n-* If there are multiple input lifetimes, but one of them is `&self` or `&mut\n-  self`, the lifetime of `self` is assigned to all elided output lifetimes.\n-\n-Otherwise, it is an error to elide an output lifetime.\n-\n-### Examples\n-\n-Here are some examples of functions with elided lifetimes.  We\u2019ve paired each\n-example of an elided lifetime with its expanded form.\n-\n-```rust,ignore\n-fn print(s: &str); // elided\n-fn print<'a>(s: &'a str); // expanded\n-\n-fn debug(lvl: u32, s: &str); // elided\n-fn debug<'a>(lvl: u32, s: &'a str); // expanded\n-```\n-\n-In the preceding example, `lvl` doesn\u2019t need a lifetime because it\u2019s not a\n-reference (`&`). Only things relating to references (such as a `struct`\n-which contains a reference) need lifetimes.\n-\n-```rust,ignore\n-fn substr(s: &str, until: u32) -> &str; // elided\n-fn substr<'a>(s: &'a str, until: u32) -> &'a str; // expanded\n-\n-fn get_str() -> &str; // ILLEGAL, no inputs\n-\n-fn frob(s: &str, t: &str) -> &str; // ILLEGAL, two inputs\n-fn frob<'a, 'b>(s: &'a str, t: &'b str) -> &str; // Expanded: Output lifetime is ambiguous\n-\n-fn get_mut(&mut self) -> &mut T; // elided\n-fn get_mut<'a>(&'a mut self) -> &'a mut T; // expanded\n-\n-fn args<T: ToCStr>(&mut self, args: &[T]) -> &mut Command; // elided\n-fn args<'a, 'b, T: ToCStr>(&'a mut self, args: &'b [T]) -> &'a mut Command; // expanded\n-\n-fn new(buf: &mut [u8]) -> BufWriter; // elided\n-fn new<'a>(buf: &'a mut [u8]) -> BufWriter<'a>; // expanded\n-```"}, {"sha": "b7658d57a9e16c36d854a7aaf159d6044399a8ba", "filename": "src/doc/book/src/loops.md", "status": "removed", "additions": 0, "deletions": 211, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Floops.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Floops.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Floops.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,211 +0,0 @@\n-# Loops\n-\n-Rust currently provides three approaches to performing some kind of iterative activity. They are: `loop`, `while` and `for`. Each approach has its own set of uses.\n-\n-## loop\n-\n-The infinite `loop` is the simplest form of loop available in Rust. Using the keyword `loop`, Rust provides a way to loop indefinitely until some terminating statement is reached. Rust's infinite `loop`s look like this:\n-\n-```rust,ignore\n-loop {\n-    println!(\"Loop forever!\");\n-}\n-```\n-\n-## while\n-\n-Rust also has a `while` loop. It looks like this:\n-\n-```rust\n-let mut x = 5; // mut x: i32\n-let mut done = false; // mut done: bool\n-\n-while !done {\n-    x += x - 3;\n-\n-    println!(\"{}\", x);\n-\n-    if x % 5 == 0 {\n-        done = true;\n-    }\n-}\n-```\n-\n-`while` loops are the correct choice when you\u2019re not sure how many times\n-you need to loop.\n-\n-If you need an infinite loop, you may be tempted to write this:\n-\n-```rust,ignore\n-while true {\n-```\n-\n-However, `loop` is far better suited to handle this case:\n-\n-```rust,ignore\n-loop {\n-```\n-\n-Rust\u2019s control-flow analysis treats this construct differently than a `while\n-true`, since we know that it will always loop. In general, the more information\n-we can give to the compiler, the better it can do with safety and code\n-generation, so you should always prefer `loop` when you plan to loop\n-infinitely.\n-\n-## for\n-\n-The `for` loop is used to loop a particular number of times. Rust\u2019s `for` loops\n-work a bit differently than in other systems languages, however. Rust\u2019s `for`\n-loop doesn\u2019t look like this \u201cC-style\u201d `for` loop:\n-\n-```c\n-for (x = 0; x < 10; x++) {\n-    printf( \"%d\\n\", x );\n-}\n-```\n-\n-Instead, it looks like this:\n-\n-```rust\n-for x in 0..10 {\n-    println!(\"{}\", x); // x: i32\n-}\n-```\n-\n-In slightly more abstract terms,\n-\n-```rust,ignore\n-for var in expression {\n-    code\n-}\n-```\n-\n-The expression is an item that can be converted into an [iterator] using\n-[`IntoIterator`]. The iterator gives back a series of elements. Each element is\n-one iteration of the loop. That value is then bound to the name `var`, which is\n-valid for the loop body. Once the body is over, the next value is fetched from\n-the iterator, and we loop another time. When there are no more values, the `for`\n-loop is over.\n-\n-[iterator]: iterators.html\n-[`IntoIterator`]: ../std/iter/trait.IntoIterator.html\n-\n-In our example, `0..10` is an expression that takes a start and an end position,\n-and gives an iterator over those values. The upper bound is exclusive, though,\n-so our loop will print `0` through `9`, not `10`.\n-\n-Rust does not have the \u201cC-style\u201d `for` loop on purpose. Manually controlling\n-each element of the loop is complicated and error prone, even for experienced C\n-developers.\n-\n-### Enumerate\n-\n-When you need to keep track of how many times you have already looped, you can\n-use the `.enumerate()` function.\n-\n-#### On ranges:\n-\n-```rust\n-for (index, value) in (5..10).enumerate() {\n-    println!(\"index = {} and value = {}\", index, value);\n-}\n-```\n-\n-Outputs:\n-\n-```text\n-index = 0 and value = 5\n-index = 1 and value = 6\n-index = 2 and value = 7\n-index = 3 and value = 8\n-index = 4 and value = 9\n-```\n-\n-Don't forget to add the parentheses around the range.\n-\n-#### On iterators:\n-\n-```rust\n-let lines = \"hello\\nworld\".lines();\n-\n-for (linenumber, line) in lines.enumerate() {\n-    println!(\"{}: {}\", linenumber, line);\n-}\n-```\n-\n-Outputs:\n-\n-```text\n-0: hello\n-1: world\n-```\n-\n-## Ending iteration early\n-\n-Let\u2019s take a look at that `while` loop we had earlier:\n-\n-```rust\n-let mut x = 5;\n-let mut done = false;\n-\n-while !done {\n-    x += x - 3;\n-\n-    println!(\"{}\", x);\n-\n-    if x % 5 == 0 {\n-        done = true;\n-    }\n-}\n-```\n-\n-We had to keep a dedicated `mut` boolean variable binding, `done`, to know\n-when we should exit out of the loop. Rust has two keywords to help us with\n-modifying iteration: `break` and `continue`.\n-\n-In this case, we can write the loop in a better way with `break`:\n-\n-```rust\n-let mut x = 5;\n-\n-loop {\n-    x += x - 3;\n-\n-    println!(\"{}\", x);\n-\n-    if x % 5 == 0 { break; }\n-}\n-```\n-\n-We now loop forever with `loop` and use `break` to break out early. Issuing an explicit `return` statement will also serve to terminate the loop early.\n-\n-`continue` is similar, but instead of ending the loop, it goes to the next\n-iteration. This will only print the odd numbers:\n-\n-```rust\n-for x in 0..10 {\n-    if x % 2 == 0 { continue; }\n-\n-    println!(\"{}\", x);\n-}\n-```\n-\n-## Loop labels\n-\n-You may also encounter situations where you have nested loops and need to\n-specify which one your `break` or `continue` statement is for. Like most\n-other languages, by default a `break` or `continue` will apply to innermost\n-loop. In a situation where you would like to `break` or `continue` for one\n-of the outer loops, you can use labels to specify which loop the `break` or\n- `continue` statement applies to. This will only print when both `x` and `y` are\n- odd:\n-\n-```rust\n-'outer: for x in 0..10 {\n-    'inner: for y in 0..10 {\n-        if x % 2 == 0 { continue 'outer; } // Continues the loop over `x`.\n-        if y % 2 == 0 { continue 'inner; } // Continues the loop over `y`.\n-        println!(\"x: {}, y: {}\", x, y);\n-    }\n-}\n-```"}, {"sha": "fa8e8975a5b01bf4c90507df3de6f7a0e597f6e4", "filename": "src/doc/book/src/macros.md", "status": "removed", "additions": 0, "deletions": 763, "changes": 763, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,763 +0,0 @@\n-# Macros\n-\n-By now you\u2019ve learned about many of the tools Rust provides for abstracting and\n-reusing code. These units of code reuse have a rich semantic structure. For\n-example, functions have a type signature, type parameters have trait bounds,\n-and overloaded functions must belong to a particular trait.\n-\n-This structure means that Rust\u2019s core abstractions have powerful compile-time\n-correctness checking. But this comes at the price of reduced flexibility. If\n-you visually identify a pattern of repeated code, you may find it\u2019s difficult\n-or cumbersome to express that pattern as a generic function, a trait, or\n-anything else within Rust\u2019s semantics.\n-\n-Macros allow us to abstract at a syntactic level. A macro invocation is\n-shorthand for an \"expanded\" syntactic form. This expansion happens early in\n-compilation, before any static checking. As a result, macros can capture many\n-patterns of code reuse that Rust\u2019s core abstractions cannot.\n-\n-The drawback is that macro-based code can be harder to understand, because\n-fewer of the built-in rules apply. Like an ordinary function, a well-behaved\n-macro can be used without understanding its implementation. However, it can be\n-difficult to design a well-behaved macro!  Additionally, compiler errors in\n-macro code are harder to interpret, because they describe problems in the\n-expanded code, not the source-level form that developers use.\n-\n-These drawbacks make macros something of a \"feature of last resort\". That\u2019s not\n-to say that macros are bad; they are part of Rust because sometimes they\u2019re\n-needed for truly concise, well-abstracted code. Just keep this tradeoff in\n-mind.\n-\n-# Defining a macro\n-\n-You may have seen the `vec!` macro, used to initialize a [vector][vector] with\n-any number of elements.\n-\n-[vector]: vectors.html\n-\n-```rust\n-let x: Vec<u32> = vec![1, 2, 3];\n-# assert_eq!(x, [1, 2, 3]);\n-```\n-\n-This can\u2019t be an ordinary function, because it takes any number of arguments.\n-But we can imagine it as syntactic shorthand for\n-\n-```rust\n-let x: Vec<u32> = {\n-    let mut temp_vec = Vec::new();\n-    temp_vec.push(1);\n-    temp_vec.push(2);\n-    temp_vec.push(3);\n-    temp_vec\n-};\n-# assert_eq!(x, [1, 2, 3]);\n-```\n-\n-We can implement this shorthand, using a macro: [^actual]\n-\n-[^actual]: The actual definition of `vec!` in libcollections differs from the\n-           one presented here, for reasons of efficiency and reusability.\n-\n-```rust\n-macro_rules! vec {\n-    ( $( $x:expr ),* ) => {\n-        {\n-            let mut temp_vec = Vec::new();\n-            $(\n-                temp_vec.push($x);\n-            )*\n-            temp_vec\n-        }\n-    };\n-}\n-# fn main() {\n-#     assert_eq!(vec![1,2,3], [1, 2, 3]);\n-# }\n-```\n-\n-Whoa, that\u2019s a lot of new syntax! Let\u2019s break it down.\n-\n-```rust,ignore\n-macro_rules! vec { ... }\n-```\n-\n-This says we\u2019re defining a macro named `vec`, much as `fn vec` would define a\n-function named `vec`. In prose, we informally write a macro\u2019s name with an\n-exclamation point, e.g. `vec!`. The exclamation point is part of the invocation\n-syntax and serves to distinguish a macro from an ordinary function.\n-\n-## Matching\n-\n-The macro is defined through a series of rules, which are pattern-matching\n-cases. Above, we had\n-\n-```rust,ignore\n-( $( $x:expr ),* ) => { ... };\n-```\n-\n-This is like a `match` expression arm, but the matching happens on Rust syntax\n-trees, at compile time. The semicolon is optional on the last (here, only)\n-case. The \"pattern\" on the left-hand side of `=>` is known as a \u2018matcher\u2019.\n-These have [their own little grammar] within the language.\n-\n-[their own little grammar]: ../reference/macros.html\n-\n-The matcher `$x:expr` will match any Rust expression, binding that syntax tree\n-to the \u2018metavariable\u2019 `$x`. The identifier `expr` is a \u2018fragment specifier\u2019;\n-the full possibilities are enumerated later in this chapter.\n-Surrounding the matcher with `$(...),*` will match zero or more expressions,\n-separated by commas.\n-\n-Aside from the special matcher syntax, any Rust tokens that appear in a matcher\n-must match exactly. For example,\n-\n-```rust,ignore\n-macro_rules! foo {\n-    (x => $e:expr) => (println!(\"mode X: {}\", $e));\n-    (y => $e:expr) => (println!(\"mode Y: {}\", $e));\n-}\n-\n-fn main() {\n-    foo!(y => 3);\n-}\n-```\n-\n-will print\n-\n-```text\n-mode Y: 3\n-```\n-\n-With\n-\n-```rust,ignore\n-foo!(z => 3);\n-```\n-\n-we get the compiler error\n-\n-```text\n-error: no rules expected the token `z`\n-```\n-\n-## Expansion\n-\n-The right-hand side of a macro rule is ordinary Rust syntax, for the most part.\n-But we can splice in bits of syntax captured by the matcher. From the original\n-example:\n-\n-```rust,ignore\n-$(\n-    temp_vec.push($x);\n-)*\n-```\n-\n-Each matched expression `$x` will produce a single `push` statement in the\n-macro expansion. The repetition in the expansion proceeds in \"lockstep\" with\n-repetition in the matcher (more on this in a moment).\n-\n-Because `$x` was already declared as matching an expression, we don\u2019t repeat\n-`:expr` on the right-hand side. Also, we don\u2019t include a separating comma as\n-part of the repetition operator. Instead, we have a terminating semicolon\n-within the repeated block.\n-\n-Another detail: the `vec!` macro has *two* pairs of braces on the right-hand\n-side. They are often combined like so:\n-\n-```rust,ignore\n-macro_rules! foo {\n-    () => {{\n-        ...\n-    }}\n-}\n-```\n-\n-The outer braces are part of the syntax of `macro_rules!`. In fact, you can use\n-`()` or `[]` instead. They simply delimit the right-hand side as a whole.\n-\n-The inner braces are part of the expanded syntax. Remember, the `vec!` macro is\n-used in an expression context. To write an expression with multiple statements,\n-including `let`-bindings, we use a block. If your macro expands to a single\n-expression, you don\u2019t need this extra layer of braces.\n-\n-Note that we never *declared* that the macro produces an expression. In fact,\n-this is not determined until we use the macro as an expression. With care, you\n-can write a macro whose expansion works in several contexts. For example,\n-shorthand for a data type could be valid as either an expression or a pattern.\n-\n-## Repetition\n-\n-The repetition operator follows two principal rules:\n-\n-1. `$(...)*` walks through one \"layer\" of repetitions, for all of the `$name`s\n-   it contains, in lockstep, and\n-2. each `$name` must be under at least as many `$(...)*`s as it was matched\n-   against. If it is under more, it\u2019ll be duplicated, as appropriate.\n-\n-This baroque macro illustrates the duplication of variables from outer\n-repetition levels.\n-\n-```rust\n-macro_rules! o_O {\n-    (\n-        $(\n-            $x:expr; [ $( $y:expr ),* ]\n-        );*\n-    ) => {\n-        &[ $($( $x + $y ),*),* ]\n-    }\n-}\n-\n-fn main() {\n-    let a: &[i32]\n-        = o_O!(10; [1, 2, 3];\n-               20; [4, 5, 6]);\n-\n-    assert_eq!(a, [11, 12, 13, 24, 25, 26]);\n-}\n-```\n-\n-That\u2019s most of the matcher syntax. These examples use `$(...)*`, which is a\n-\"zero or more\" match. Alternatively you can write `$(...)+` for a \"one or\n-more\" match. Both forms optionally include a separator, which can be any token\n-except `+` or `*`.\n-\n-This system is based on\n-\"[Macro-by-Example](https://www.cs.indiana.edu/ftp/techreports/TR206.pdf)\"\n-(PDF link).\n-\n-# Hygiene\n-\n-Some languages implement macros using simple text substitution, which leads to\n-various problems. For example, this C program prints `13` instead of the\n-expected `25`.\n-\n-```text\n-#define FIVE_TIMES(x) 5 * x\n-\n-int main() {\n-    printf(\"%d\\n\", FIVE_TIMES(2 + 3));\n-    return 0;\n-}\n-```\n-\n-After expansion we have `5 * 2 + 3`, and multiplication has greater precedence\n-than addition. If you\u2019ve used C macros a lot, you probably know the standard\n-idioms for avoiding this problem, as well as five or six others. In Rust, we\n-don\u2019t have to worry about it.\n-\n-```rust\n-macro_rules! five_times {\n-    ($x:expr) => (5 * $x);\n-}\n-\n-fn main() {\n-    assert_eq!(25, five_times!(2 + 3));\n-}\n-```\n-\n-The metavariable `$x` is parsed as a single expression node, and keeps its\n-place in the syntax tree even after substitution.\n-\n-Another common problem in macro systems is \u2018variable capture\u2019. Here\u2019s a C\n-macro using a block with multiple statements.\n-\n-```text\n-#define LOG(msg) do { \\\n-    int state = get_log_state(); \\\n-    if (state > 0) { \\\n-        printf(\"log(%d): %s\\n\", state, msg); \\\n-    } \\\n-} while (0)\n-```\n-\n-Here\u2019s a simple use case that goes terribly wrong:\n-\n-```text\n-const char *state = \"reticulating splines\";\n-LOG(state);\n-```\n-\n-This expands to\n-\n-```text\n-const char *state = \"reticulating splines\";\n-do {\n-    int state = get_log_state();\n-    if (state > 0) {\n-        printf(\"log(%d): %s\\n\", state, state);\n-    }\n-} while (0);\n-```\n-\n-The second variable named `state` shadows the first one.  This is a problem\n-because the print statement should refer to both of them.\n-\n-The equivalent Rust macro has the desired behavior.\n-\n-```rust\n-# fn get_log_state() -> i32 { 3 }\n-macro_rules! log {\n-    ($msg:expr) => {{\n-        let state: i32 = get_log_state();\n-        if state > 0 {\n-            println!(\"log({}): {}\", state, $msg);\n-        }\n-    }};\n-}\n-\n-fn main() {\n-    let state: &str = \"reticulating splines\";\n-    log!(state);\n-}\n-```\n-\n-This works because Rust has a [hygienic macro system]. Each macro expansion\n-happens in a distinct \u2018syntax context\u2019, and each variable is tagged with the\n-syntax context where it was introduced. It\u2019s as though the variable `state`\n-inside `main` is painted a different \"color\" from the variable `state` inside\n-the macro, and therefore they don\u2019t conflict.\n-\n-[hygienic macro system]: https://en.wikipedia.org/wiki/Hygienic_macro\n-\n-This also restricts the ability of macros to introduce new bindings at the\n-invocation site. Code such as the following will not work:\n-\n-```rust,ignore\n-macro_rules! foo {\n-    () => (let x = 3;);\n-}\n-\n-fn main() {\n-    foo!();\n-    println!(\"{}\", x);\n-}\n-```\n-\n-Instead you need to pass the variable name into the invocation, so that it\u2019s\n-tagged with the right syntax context.\n-\n-```rust\n-macro_rules! foo {\n-    ($v:ident) => (let $v = 3;);\n-}\n-\n-fn main() {\n-    foo!(x);\n-    println!(\"{}\", x);\n-}\n-```\n-\n-This holds for `let` bindings and loop labels, but not for [items][items].\n-So the following code does compile:\n-\n-```rust\n-macro_rules! foo {\n-    () => (fn x() { });\n-}\n-\n-fn main() {\n-    foo!();\n-    x();\n-}\n-```\n-\n-[items]: ../reference/items.html\n-\n-# Recursive macros\n-\n-A macro\u2019s expansion can include more macro invocations, including invocations\n-of the very same macro being expanded.  These recursive macros are useful for\n-processing tree-structured input, as illustrated by this (simplistic) HTML\n-shorthand:\n-\n-```rust\n-# #![allow(unused_must_use)]\n-macro_rules! write_html {\n-    ($w:expr, ) => (());\n-\n-    ($w:expr, $e:tt) => (write!($w, \"{}\", $e));\n-\n-    ($w:expr, $tag:ident [ $($inner:tt)* ] $($rest:tt)*) => {{\n-        write!($w, \"<{}>\", stringify!($tag));\n-        write_html!($w, $($inner)*);\n-        write!($w, \"</{}>\", stringify!($tag));\n-        write_html!($w, $($rest)*);\n-    }};\n-}\n-\n-fn main() {\n-#   // FIXME(#21826)\n-    use std::fmt::Write;\n-    let mut out = String::new();\n-\n-    write_html!(&mut out,\n-        html[\n-            head[title[\"Macros guide\"]]\n-            body[h1[\"Macros are the best!\"]]\n-        ]);\n-\n-    assert_eq!(out,\n-        \"<html><head><title>Macros guide</title></head>\\\n-         <body><h1>Macros are the best!</h1></body></html>\");\n-}\n-```\n-\n-# Debugging macro code\n-\n-To see the results of expanding macros, run `rustc --pretty expanded`. The\n-output represents a whole crate, so you can also feed it back in to `rustc`,\n-which will sometimes produce better error messages than the original\n-compilation. Note that the `--pretty expanded` output may have a different\n-meaning if multiple variables of the same name (but different syntax contexts)\n-are in play in the same scope. In this case `--pretty expanded,hygiene` will\n-tell you about the syntax contexts.\n-\n-`rustc` provides two syntax extensions that help with macro debugging. For now,\n-they are unstable and require feature gates.\n-\n-* `log_syntax!(...)` will print its arguments to standard output, at compile\n-  time, and \"expand\" to nothing.\n-\n-* `trace_macros!(true)` will enable a compiler message every time a macro is\n-  expanded. Use `trace_macros!(false)` later in expansion to turn it off.\n-\n-# Syntactic requirements\n-\n-Even when Rust code contains un-expanded macros, it can be parsed as a full\n-[syntax tree][ast]. This property can be very useful for editors and other\n-tools that process code. It also has a few consequences for the design of\n-Rust\u2019s macro system.\n-\n-[ast]: glossary.html#abstract-syntax-tree\n-\n-One consequence is that Rust must determine, when it parses a macro invocation,\n-whether the macro stands in for\n-\n-* zero or more items,\n-* zero or more methods,\n-* an expression,\n-* a statement, or\n-* a pattern.\n-\n-A macro invocation within a block could stand for some items, or for an\n-expression / statement. Rust uses a simple rule to resolve this ambiguity. A\n-macro invocation that stands for items must be either\n-\n-* delimited by curly braces, e.g. `foo! { ... }`, or\n-* terminated by a semicolon, e.g. `foo!(...);`\n-\n-Another consequence of pre-expansion parsing is that the macro invocation must\n-consist of valid Rust tokens. Furthermore, parentheses, brackets, and braces\n-must be balanced within a macro invocation. For example, `foo!([)` is\n-forbidden. This allows Rust to know where the macro invocation ends.\n-\n-More formally, the macro invocation body must be a sequence of \u2018token trees\u2019.\n-A token tree is defined recursively as either\n-\n-* a sequence of token trees surrounded by matching `()`, `[]`, or `{}`, or\n-* any other single token.\n-\n-Within a matcher, each metavariable has a \u2018fragment specifier\u2019, identifying\n-which syntactic form it matches.\n-\n-* `ident`: an identifier. Examples: `x`; `foo`.\n-* `path`: a qualified name. Example: `T::SpecialA`.\n-* `expr`: an expression. Examples: `2 + 2`; `if true { 1 } else { 2 }`; `f(42)`.\n-* `ty`: a type. Examples: `i32`; `Vec<(char, String)>`; `&T`.\n-* `pat`: a pattern. Examples: `Some(t)`; `(17, 'a')`; `_`.\n-* `stmt`: a single statement. Example: `let x = 3`.\n-* `block`: a brace-delimited sequence of statements and optionally an expression. Example:\n-  `{ log(error, \"hi\"); return 12; }`.\n-* `item`: an [item][item]. Examples: `fn foo() { }`; `struct Bar;`.\n-* `meta`: a \"meta item\", as found in attributes. Example: `cfg(target_os = \"windows\")`.\n-* `tt`: a single token tree.\n-\n-There are additional rules regarding the next token after a metavariable:\n-\n-* `expr` and `stmt` variables may only be followed by one of: `=> , ;`\n-* `ty` and `path` variables may only be followed by one of: `=> , = | ; : > [ { as where`\n-* `pat` variables may only be followed by one of: `=> , = | if in`\n-* Other variables may be followed by any token.\n-\n-These rules provide some flexibility for Rust\u2019s syntax to evolve without\n-breaking existing macros.\n-\n-The macro system does not deal with parse ambiguity at all. For example, the\n-grammar `$($i:ident)* $e:expr` will always fail to parse, because the parser would\n-be forced to choose between parsing `$i` and parsing `$e`. Changing the\n-invocation syntax to put a distinctive token in front can solve the problem. In\n-this case, you can write `$(I $i:ident)* E $e:expr`.\n-\n-[item]: ../reference/items.html\n-\n-# Scoping and macro import/export\n-\n-Macros are expanded at an early stage in compilation, before name resolution.\n-One downside is that scoping works differently for macros, compared to other\n-constructs in the language.\n-\n-Definition and expansion of macros both happen in a single depth-first,\n-lexical-order traversal of a crate\u2019s source. So a macro defined at module scope\n-is visible to any subsequent code in the same module, which includes the body\n-of any subsequent child `mod` items.\n-\n-A macro defined within the body of a single `fn`, or anywhere else not at\n-module scope, is visible only within that item.\n-\n-If a module has the `macro_use` attribute, its macros are also visible in its\n-parent module after the child\u2019s `mod` item. If the parent also has `macro_use`\n-then the macros will be visible in the grandparent after the parent\u2019s `mod`\n-item, and so forth.\n-\n-The `macro_use` attribute can also appear on `extern crate`. In this context\n-it controls which macros are loaded from the external crate, e.g.\n-\n-```rust,ignore\n-#[macro_use(foo, bar)]\n-extern crate baz;\n-```\n-\n-If the attribute is given simply as `#[macro_use]`, all macros are loaded. If\n-there is no `#[macro_use]` attribute then no macros are loaded. Only macros\n-defined with the `#[macro_export]` attribute may be loaded.\n-\n-To load a crate\u2019s macros without linking it into the output, use `#[no_link]`\n-as well.\n-\n-An example:\n-\n-```rust\n-macro_rules! m1 { () => (()) }\n-\n-// Visible here: `m1`.\n-\n-mod foo {\n-    // Visible here: `m1`.\n-\n-    #[macro_export]\n-    macro_rules! m2 { () => (()) }\n-\n-    // Visible here: `m1`, `m2`.\n-}\n-\n-// Visible here: `m1`.\n-\n-macro_rules! m3 { () => (()) }\n-\n-// Visible here: `m1`, `m3`.\n-\n-#[macro_use]\n-mod bar {\n-    // Visible here: `m1`, `m3`.\n-\n-    macro_rules! m4 { () => (()) }\n-\n-    // Visible here: `m1`, `m3`, `m4`.\n-}\n-\n-// Visible here: `m1`, `m3`, `m4`.\n-# fn main() { }\n-```\n-\n-When this library is loaded with `#[macro_use] extern crate`, only `m2` will\n-be imported.\n-\n-The Rust Reference has a [listing of macro-related\n-attributes](../reference/attributes.html#macro-related-attributes).\n-\n-# The variable `$crate`\n-\n-A further difficulty occurs when a macro is used in multiple crates. Say that\n-`mylib` defines\n-\n-```rust\n-pub fn increment(x: u32) -> u32 {\n-    x + 1\n-}\n-\n-#[macro_export]\n-macro_rules! inc_a {\n-    ($x:expr) => ( ::increment($x) )\n-}\n-\n-#[macro_export]\n-macro_rules! inc_b {\n-    ($x:expr) => ( ::mylib::increment($x) )\n-}\n-# fn main() { }\n-```\n-\n-`inc_a` only works within `mylib`, while `inc_b` only works outside the\n-library. Furthermore, `inc_b` will break if the user imports `mylib` under\n-another name.\n-\n-Rust does not (yet) have a hygiene system for crate references, but it does\n-provide a simple workaround for this problem. Within a macro imported from a\n-crate named `foo`, the special macro variable `$crate` will expand to `::foo`.\n-By contrast, when a macro is defined and then used in the same crate, `$crate`\n-will expand to nothing. This means we can write\n-\n-```rust\n-#[macro_export]\n-macro_rules! inc {\n-    ($x:expr) => ( $crate::increment($x) )\n-}\n-# fn main() { }\n-```\n-\n-to define a single macro that works both inside and outside our library. The\n-function name will expand to either `::increment` or `::mylib::increment`.\n-\n-To keep this system simple and correct, `#[macro_use] extern crate ...` may\n-only appear at the root of your crate, not inside `mod`.\n-\n-# The deep end\n-\n-The introductory chapter mentioned recursive macros, but it did not give the\n-full story. Recursive macros are useful for another reason: Each recursive\n-invocation gives you another opportunity to pattern-match the macro\u2019s\n-arguments.\n-\n-As an extreme example, it is possible, though hardly advisable, to implement\n-the [Bitwise Cyclic Tag](https://esolangs.org/wiki/Bitwise_Cyclic_Tag) automaton\n-within Rust\u2019s macro system.\n-\n-```rust\n-macro_rules! bct {\n-    // cmd 0:  d ... => ...\n-    (0, $($ps:tt),* ; $_d:tt)\n-        => (bct!($($ps),*, 0 ; ));\n-    (0, $($ps:tt),* ; $_d:tt, $($ds:tt),*)\n-        => (bct!($($ps),*, 0 ; $($ds),*));\n-\n-    // cmd 1p:  1 ... => 1 ... p\n-    (1, $p:tt, $($ps:tt),* ; 1)\n-        => (bct!($($ps),*, 1, $p ; 1, $p));\n-    (1, $p:tt, $($ps:tt),* ; 1, $($ds:tt),*)\n-        => (bct!($($ps),*, 1, $p ; 1, $($ds),*, $p));\n-\n-    // cmd 1p:  0 ... => 0 ...\n-    (1, $p:tt, $($ps:tt),* ; $($ds:tt),*)\n-        => (bct!($($ps),*, 1, $p ; $($ds),*));\n-\n-    // Halt on empty data string:\n-    ( $($ps:tt),* ; )\n-        => (());\n-}\n-```\n-\n-Exercise: use macros to reduce duplication in the above definition of the\n-`bct!` macro.\n-\n-# Common macros\n-\n-Here are some common macros you\u2019ll see in Rust code.\n-\n-## panic!\n-\n-This macro causes the current thread to panic. You can give it a message\n-to panic with:\n-\n-```rust,should_panic\n-panic!(\"oh no!\");\n-```\n-\n-## vec!\n-\n-The `vec!` macro is used throughout the book, so you\u2019ve probably seen it\n-already. It creates `Vec<T>`s with ease:\n-\n-```rust\n-let v = vec![1, 2, 3, 4, 5];\n-```\n-\n-It also lets you make vectors with repeating values. For example, a hundred\n-zeroes:\n-\n-```rust\n-let v = vec![0; 100];\n-```\n-\n-## assert! and assert_eq!\n-\n-These two macros are used in tests. `assert!` takes a boolean. `assert_eq!`\n-takes two values and checks them for equality. `true` passes, `false` `panic!`s.\n-Like this:\n-\n-```rust,should_panic\n-// A-ok!\n-\n-assert!(true);\n-assert_eq!(5, 3 + 2);\n-\n-// Nope :(\n-\n-assert!(5 < 3);\n-assert_eq!(5, 3);\n-```\n-\n-## try!\n-\n-`try!` is used for error handling. It takes something that can return a\n-`Result<T, E>`, and gives `T` if it\u2019s a `Ok<T>`, and `return`s with the\n-`Err(E)` if it\u2019s that. Like this:\n-\n-```rust,no_run\n-use std::fs::File;\n-\n-fn foo() -> std::io::Result<()> {\n-    let f = try!(File::create(\"foo.txt\"));\n-\n-    Ok(())\n-}\n-```\n-\n-This is cleaner than doing this:\n-\n-```rust,no_run\n-use std::fs::File;\n-\n-fn foo() -> std::io::Result<()> {\n-    let f = File::create(\"foo.txt\");\n-\n-    let f = match f {\n-        Ok(t) => t,\n-        Err(e) => return Err(e),\n-    };\n-\n-    Ok(())\n-}\n-```\n-\n-## unreachable!\n-\n-This macro is used when you think some code should never execute:\n-\n-```rust\n-if false {\n-    unreachable!();\n-}\n-```\n-\n-Sometimes, the compiler may make you have a different branch that you know\n-will never, ever run. In these cases, use this macro, so that if you end\n-up wrong, you\u2019ll get a `panic!` about it.\n-\n-```rust\n-let x: Option<i32> = None;\n-\n-match x {\n-    Some(_) => unreachable!(),\n-    None => println!(\"I know x is None!\"),\n-}\n-```\n-\n-## unimplemented!\n-\n-The `unimplemented!` macro can be used when you\u2019re trying to get your functions\n-to typecheck, and don\u2019t want to worry about writing out the body of the\n-function. One example of this situation is implementing a trait with multiple\n-required methods, where you want to tackle one at a time. Define the others\n-as `unimplemented!` until you\u2019re ready to write them."}, {"sha": "b1e26a9c9d3cd2665b01c2c84ebf3fab63a3cef3", "filename": "src/doc/book/src/match.md", "status": "removed", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fmatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fmatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fmatch.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,100 +0,0 @@\n-# Match\n-\n-Often, a simple [`if`][if]/`else` isn\u2019t enough, because you have more than two\n-possible options. Also, conditions can get quite complex. Rust\n-has a keyword, `match`, that allows you to replace complicated `if`/`else`\n-groupings with something more powerful. Check it out:\n-\n-```rust\n-let x = 5;\n-\n-match x {\n-    1 => println!(\"one\"),\n-    2 => println!(\"two\"),\n-    3 => println!(\"three\"),\n-    4 => println!(\"four\"),\n-    5 => println!(\"five\"),\n-    _ => println!(\"something else\"),\n-}\n-```\n-\n-[if]: if.html\n-\n-`match` takes an expression and then branches based on its value. Each \u2018arm\u2019 of\n-the branch is of the form `val => expression`. When the value matches, that arm\u2019s\n-expression will be evaluated. It\u2019s called `match` because of the term \u2018pattern\n-matching\u2019, which `match` is an implementation of. There\u2019s a [separate section on\n-patterns][patterns] that covers all the patterns that are possible here.\n-\n-[patterns]: patterns.html\n-\n-One of the many advantages of `match` is it enforces \u2018exhaustiveness checking\u2019.\n-For example if we remove the last arm with the underscore `_`, the compiler will\n-give us an error:\n-\n-```text\n-error: non-exhaustive patterns: `_` not covered\n-```\n-\n-Rust is telling us that we forgot some value. The compiler infers from `x` that it\n-can have any 32bit integer value; for example -2,147,483,648 to 2,147,483,647. The `_` acts \n-as a 'catch-all', and will catch all possible values that *aren't* specified in \n-an arm of `match`. As you can see in the previous example, we provide `match` \n-arms for integers 1-5, if `x` is 6 or any other value, then it is caught by `_`.\n-\n-`match` is also an expression, which means we can use it on the right-hand\n-side of a `let` binding or directly where an expression is used:\n-\n-```rust\n-let x = 5;\n-\n-let number = match x {\n-    1 => \"one\",\n-    2 => \"two\",\n-    3 => \"three\",\n-    4 => \"four\",\n-    5 => \"five\",\n-    _ => \"something else\",\n-};\n-```\n-\n-Sometimes it\u2019s a nice way of converting something from one type to another; in\n-this example the integers are converted to `String`.\n-\n-# Matching on enums\n-\n-Another important use of the `match` keyword is to process the possible\n-variants of an enum:\n-\n-```rust\n-enum Message {\n-    Quit,\n-    ChangeColor(i32, i32, i32),\n-    Move { x: i32, y: i32 },\n-    Write(String),\n-}\n-\n-fn quit() { /* ... */ }\n-fn change_color(r: i32, g: i32, b: i32) { /* ... */ }\n-fn move_cursor(x: i32, y: i32) { /* ... */ }\n-\n-fn process_message(msg: Message) {\n-    match msg {\n-        Message::Quit => quit(),\n-        Message::ChangeColor(r, g, b) => change_color(r, g, b),\n-        Message::Move { x, y: new_name_for_y } => move_cursor(x, new_name_for_y),\n-        Message::Write(s) => println!(\"{}\", s),\n-    };\n-}\n-```\n-\n-Again, the Rust compiler checks exhaustiveness, so it demands that you\n-have a match arm for every variant of the enum. If you leave one off, it\n-will give you a compile-time error unless you use `_` or provide all possible\n-arms.\n-\n-Unlike the previous uses of `match`, you can\u2019t use the normal `if`\n-statement to do this. You can use the [`if let`][if-let] statement,\n-which can be seen as an abbreviated form of `match`.\n-\n-[if-let]: if-let.html"}, {"sha": "0404a5c992ba304460602b8a72b040806e681d02", "filename": "src/doc/book/src/method-syntax.md", "status": "removed", "additions": 0, "deletions": 259, "changes": 259, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fmethod-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fmethod-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fmethod-syntax.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,259 +0,0 @@\n-# Method Syntax\n-\n-Functions are great, but if you want to call a bunch of them on some data, it\n-can be awkward. Consider this code:\n-\n-```rust,ignore\n-baz(bar(foo));\n-```\n-\n-We would read this left-to-right, and so we see \u2018baz bar foo\u2019. But this isn\u2019t the\n-order that the functions would get called in, that\u2019s inside-out: \u2018foo bar baz\u2019.\n-Wouldn\u2019t it be nice if we could do this instead?\n-\n-```rust,ignore\n-foo.bar().baz();\n-```\n-\n-Luckily, as you may have guessed with the leading question, you can! Rust provides\n-the ability to use this \u2018method call syntax\u2019 via the `impl` keyword.\n-\n-# Method calls\n-\n-Here\u2019s how it works:\n-\n-```rust\n-struct Circle {\n-    x: f64,\n-    y: f64,\n-    radius: f64,\n-}\n-\n-impl Circle {\n-    fn area(&self) -> f64 {\n-        std::f64::consts::PI * (self.radius * self.radius)\n-    }\n-}\n-\n-fn main() {\n-    let c = Circle { x: 0.0, y: 0.0, radius: 2.0 };\n-    println!(\"{}\", c.area());\n-}\n-```\n-\n-This will print `12.566371`.\n-\n-We\u2019ve made a `struct` that represents a circle. We then write an `impl` block,\n-and inside it, define a method, `area`.\n-\n-Methods take a special first parameter, of which there are three variants:\n-`self`, `&self`, and `&mut self`. You can think of this first parameter as\n-being the `foo` in `foo.bar()`. The three variants correspond to the three\n-kinds of things `foo` could be: `self` if it\u2019s a value on the stack,\n-`&self` if it\u2019s a reference, and `&mut self` if it\u2019s a mutable reference.\n-Because we took the `&self` parameter to `area`, we can use it like any\n-other parameter. Because we know it\u2019s a `Circle`, we can access the `radius`\n-like we would with any other `struct`.\n-\n-We should default to using `&self`, as you should prefer borrowing over taking\n-ownership, as well as taking immutable references over mutable ones. Here\u2019s an\n-example of all three variants:\n-\n-```rust\n-struct Circle {\n-    x: f64,\n-    y: f64,\n-    radius: f64,\n-}\n-\n-impl Circle {\n-    fn reference(&self) {\n-       println!(\"taking self by reference!\");\n-    }\n-\n-    fn mutable_reference(&mut self) {\n-       println!(\"taking self by mutable reference!\");\n-    }\n-\n-    fn takes_ownership(self) {\n-       println!(\"taking ownership of self!\");\n-    }\n-}\n-```\n-\n-You can use as many `impl` blocks as you\u2019d like. The previous example could\n-have also been written like this:\n-\n-```rust\n-struct Circle {\n-    x: f64,\n-    y: f64,\n-    radius: f64,\n-}\n-\n-impl Circle {\n-    fn reference(&self) {\n-       println!(\"taking self by reference!\");\n-    }\n-}\n-\n-impl Circle {\n-    fn mutable_reference(&mut self) {\n-       println!(\"taking self by mutable reference!\");\n-    }\n-}\n-\n-impl Circle {\n-    fn takes_ownership(self) {\n-       println!(\"taking ownership of self!\");\n-    }\n-}\n-```\n-\n-# Chaining method calls\n-\n-So, now we know how to call a method, such as `foo.bar()`. But what about our\n-original example, `foo.bar().baz()`? This is called \u2018method chaining\u2019. Let\u2019s\n-look at an example:\n-\n-```rust\n-struct Circle {\n-    x: f64,\n-    y: f64,\n-    radius: f64,\n-}\n-\n-impl Circle {\n-    fn area(&self) -> f64 {\n-        std::f64::consts::PI * (self.radius * self.radius)\n-    }\n-\n-    fn grow(&self, increment: f64) -> Circle {\n-        Circle { x: self.x, y: self.y, radius: self.radius + increment }\n-    }\n-}\n-\n-fn main() {\n-    let c = Circle { x: 0.0, y: 0.0, radius: 2.0 };\n-    println!(\"{}\", c.area());\n-\n-    let d = c.grow(2.0).area();\n-    println!(\"{}\", d);\n-}\n-```\n-\n-Check the return type:\n-\n-```rust\n-# struct Circle;\n-# impl Circle {\n-fn grow(&self, increment: f64) -> Circle {\n-# Circle } }\n-```\n-\n-We say we\u2019re returning a `Circle`. With this method, we can grow a new\n-`Circle` to any arbitrary size.\n-\n-# Associated functions\n-\n-You can also define associated functions that do not take a `self` parameter.\n-Here\u2019s a pattern that\u2019s very common in Rust code:\n-\n-```rust\n-struct Circle {\n-    x: f64,\n-    y: f64,\n-    radius: f64,\n-}\n-\n-impl Circle {\n-    fn new(x: f64, y: f64, radius: f64) -> Circle {\n-        Circle {\n-            x: x,\n-            y: y,\n-            radius: radius,\n-        }\n-    }\n-}\n-\n-fn main() {\n-    let c = Circle::new(0.0, 0.0, 2.0);\n-}\n-```\n-\n-This \u2018associated function\u2019 builds a new `Circle` for us. Note that associated\n-functions are called with the `Struct::function()` syntax, rather than the\n-`ref.method()` syntax. Some other languages call associated functions \u2018static\n-methods\u2019.\n-\n-# Builder Pattern\n-\n-Let\u2019s say that we want our users to be able to create `Circle`s, but we will\n-allow them to only set the properties they care about. Otherwise, the `x`\n-and `y` attributes will be `0.0`, and the `radius` will be `1.0`. Rust doesn\u2019t\n-have method overloading, named arguments, or variable arguments. We employ\n-the builder pattern instead. It looks like this:\n-\n-```rust\n-struct Circle {\n-    x: f64,\n-    y: f64,\n-    radius: f64,\n-}\n-\n-impl Circle {\n-    fn area(&self) -> f64 {\n-        std::f64::consts::PI * (self.radius * self.radius)\n-    }\n-}\n-\n-struct CircleBuilder {\n-    x: f64,\n-    y: f64,\n-    radius: f64,\n-}\n-\n-impl CircleBuilder {\n-    fn new() -> CircleBuilder {\n-        CircleBuilder { x: 0.0, y: 0.0, radius: 1.0, }\n-    }\n-\n-    fn x(&mut self, coordinate: f64) -> &mut CircleBuilder {\n-        self.x = coordinate;\n-        self\n-    }\n-\n-    fn y(&mut self, coordinate: f64) -> &mut CircleBuilder {\n-        self.y = coordinate;\n-        self\n-    }\n-\n-    fn radius(&mut self, radius: f64) -> &mut CircleBuilder {\n-        self.radius = radius;\n-        self\n-    }\n-\n-    fn finalize(&self) -> Circle {\n-        Circle { x: self.x, y: self.y, radius: self.radius }\n-    }\n-}\n-\n-fn main() {\n-    let c = CircleBuilder::new()\n-                .x(1.0)\n-                .y(2.0)\n-                .radius(2.0)\n-                .finalize();\n-\n-    println!(\"area: {}\", c.area());\n-    println!(\"x: {}\", c.x);\n-    println!(\"y: {}\", c.y);\n-}\n-```\n-\n-What we\u2019ve done here is make another `struct`, `CircleBuilder`. We\u2019ve defined our\n-builder methods on it. We\u2019ve also defined our `area()` method on `Circle`. We\n-also made one more method on `CircleBuilder`: `finalize()`. This method creates\n-our final `Circle` from the builder. Now, we\u2019ve used the type system to enforce\n-our concerns: we can use the methods on `CircleBuilder` to constrain making\n-`Circle`s in any way we choose."}, {"sha": "fa7a259392a7e6af0ca22da903749bd54269a90e", "filename": "src/doc/book/src/mutability.md", "status": "removed", "additions": 0, "deletions": 181, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fmutability.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fmutability.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fmutability.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,181 +0,0 @@\n-# Mutability\n-\n-Mutability, the ability to change something, works a bit differently in Rust\n-than in other languages. The first aspect of mutability is its non-default\n-status:\n-\n-```rust,ignore\n-let x = 5;\n-x = 6; // Error!\n-```\n-\n-We can introduce mutability with the `mut` keyword:\n-\n-```rust\n-let mut x = 5;\n-\n-x = 6; // No problem!\n-```\n-\n-This is a mutable [variable binding][vb]. When a binding is mutable, it means\n-you\u2019re allowed to change what the binding points to. So in the above example,\n-it\u2019s not so much that the value at `x` is changing, but that the binding\n-changed from one `i32` to another.\n-\n-[vb]: variable-bindings.html\n-\n-You can also create a [reference][ref] to it, using `&x`, but if you want to use the reference to change it, you will need a mutable reference:\n-\n-```rust\n-let mut x = 5;\n-let y = &mut x;\n-```\n-\n-[ref]: references-and-borrowing.html\n-\n-`y` is an immutable binding to a mutable reference, which means that you can\u2019t bind 'y' to something else (`y = &mut z`), but `y` can be used to bind `x` to something else (`*y = 5`). A subtle distinction.\n-\n-Of course, if you need both:\n-\n-```rust\n-let mut x = 5;\n-let mut y = &mut x;\n-```\n-\n-Now `y` can be bound to another value, and the value it\u2019s referencing can be\n-changed.\n-\n-It\u2019s important to note that `mut` is part of a [pattern][pattern], so you\n-can do things like this:\n-\n-```rust\n-let (mut x, y) = (5, 6);\n-\n-fn foo(mut x: i32) {\n-# }\n-```\n-\n-Note that here, the `x` is mutable, but not the `y`.\n-\n-[pattern]: patterns.html\n-\n-# Interior vs. Exterior Mutability\n-\n-However, when we say something is \u2018immutable\u2019 in Rust, that doesn\u2019t mean that\n-it\u2019s not able to be changed: we are referring to its \u2018exterior mutability\u2019 that\n-in this case is immutable. Consider, for example, [`Arc<T>`][arc]:\n-\n-```rust\n-use std::sync::Arc;\n-\n-let x = Arc::new(5);\n-let y = x.clone();\n-```\n-\n-[arc]: ../std/sync/struct.Arc.html\n-\n-When we call `clone()`, the `Arc<T>` needs to update the reference count. Yet\n-we\u2019ve not used any `mut`s here, `x` is an immutable binding, and we didn\u2019t take\n-`&mut 5` or anything. So what gives?\n-\n-To understand this, we have to go back to the core of Rust\u2019s guiding\n-philosophy, memory safety, and the mechanism by which Rust guarantees it, the\n-[ownership][ownership] system, and more specifically, [borrowing][borrowing]:\n-\n-> You may have one or the other of these two kinds of borrows, but not both at\n-> the same time:\n->\n-> * one or more references (`&T`) to a resource,\n-> * exactly one mutable reference (`&mut T`).\n-\n-[ownership]: ownership.html\n-[borrowing]: references-and-borrowing.html#borrowing\n-\n-So, that\u2019s the real definition of \u2018immutability\u2019: is this safe to have two\n-pointers to? In `Arc<T>`\u2019s case, yes: the mutation is entirely contained inside\n-the structure itself. It\u2019s not user facing. For this reason, it hands out `&T`\n-with `clone()`. If it handed out `&mut T`s, though, that would be a problem.\n-\n-Other types, like the ones in the [`std::cell`][stdcell] module, have the\n-opposite: interior mutability. For example:\n-\n-```rust\n-use std::cell::RefCell;\n-\n-let x = RefCell::new(42);\n-\n-let y = x.borrow_mut();\n-```\n-\n-[stdcell]: ../std/cell/index.html\n-\n-RefCell hands out `&mut` references to what\u2019s inside of it with the\n-`borrow_mut()` method. Isn\u2019t that dangerous? What if we do:\n-\n-```rust,ignore\n-use std::cell::RefCell;\n-\n-let x = RefCell::new(42);\n-\n-let y = x.borrow_mut();\n-let z = x.borrow_mut();\n-# (y, z);\n-```\n-\n-This will in fact panic, at runtime. This is what `RefCell` does: it enforces\n-Rust\u2019s borrowing rules at runtime, and `panic!`s if they\u2019re violated. This\n-allows us to get around another aspect of Rust\u2019s mutability rules. Let\u2019s talk\n-about it first.\n-\n-## Field-level mutability\n-\n-Mutability is a property of either a borrow (`&mut`) or a binding (`let mut`).\n-This means that, for example, you cannot have a [`struct`][struct] with\n-some fields mutable and some immutable:\n-\n-```rust,ignore\n-struct Point {\n-    x: i32,\n-    mut y: i32, // Nope.\n-}\n-```\n-\n-The mutability of a struct is in its binding:\n-\n-```rust,ignore\n-struct Point {\n-    x: i32,\n-    y: i32,\n-}\n-\n-let mut a = Point { x: 5, y: 6 };\n-\n-a.x = 10;\n-\n-let b = Point { x: 5, y: 6};\n-\n-b.x = 10; // Error: cannot assign to immutable field `b.x`.\n-```\n-\n-[struct]: structs.html\n-\n-However, by using [`Cell<T>`][cell], you can emulate field-level mutability:\n-\n-```rust\n-use std::cell::Cell;\n-\n-struct Point {\n-    x: i32,\n-    y: Cell<i32>,\n-}\n-\n-let point = Point { x: 5, y: Cell::new(6) };\n-\n-point.y.set(7);\n-\n-println!(\"y: {:?}\", point.y);\n-```\n-\n-[cell]: ../std/cell/struct.Cell.html\n-\n-This will print `y: Cell { value: 7 }`. We\u2019ve successfully updated `y`."}, {"sha": "a69cd6adb3b1ff242b23d480fe077ad067505121", "filename": "src/doc/book/src/operators-and-overloading.md", "status": "removed", "additions": 0, "deletions": 135, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Foperators-and-overloading.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Foperators-and-overloading.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Foperators-and-overloading.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,135 +0,0 @@\n-# Operators and Overloading\n-\n-Rust allows for a limited form of operator overloading. There are certain\n-operators that are able to be overloaded. To support a particular operator\n-between types, there\u2019s a specific trait that you can implement, which then\n-overloads the operator.\n-\n-For example, the `+` operator can be overloaded with the `Add` trait:\n-\n-```rust\n-use std::ops::Add;\n-\n-#[derive(Debug)]\n-struct Point {\n-    x: i32,\n-    y: i32,\n-}\n-\n-impl Add for Point {\n-    type Output = Point;\n-\n-    fn add(self, other: Point) -> Point {\n-        Point { x: self.x + other.x, y: self.y + other.y }\n-    }\n-}\n-\n-fn main() {\n-    let p1 = Point { x: 1, y: 0 };\n-    let p2 = Point { x: 2, y: 3 };\n-\n-    let p3 = p1 + p2;\n-\n-    println!(\"{:?}\", p3);\n-}\n-```\n-\n-In `main`, we can use `+` on our two `Point`s, since we\u2019ve implemented\n-`Add<Output=Point>` for `Point`.\n-\n-There are a number of operators that can be overloaded this way, and all of\n-their associated traits live in the [`std::ops`][stdops] module. Check out its\n-documentation for the full list.\n-\n-[stdops]: ../std/ops/index.html\n-\n-Implementing these traits follows a pattern. Let\u2019s look at [`Add`][add] in more\n-detail:\n-\n-```rust\n-# mod foo {\n-pub trait Add<RHS = Self> {\n-    type Output;\n-\n-    fn add(self, rhs: RHS) -> Self::Output;\n-}\n-# }\n-```\n-\n-[add]: ../std/ops/trait.Add.html\n-\n-There\u2019s three types in total involved here: the type you `impl Add` for, `RHS`,\n-which defaults to `Self`, and `Output`. For an expression `let z = x + y`, `x`\n-is the `Self` type, `y` is the RHS, and `z` is the `Self::Output` type.\n-\n-```rust\n-# struct Point;\n-# use std::ops::Add;\n-impl Add<i32> for Point {\n-    type Output = f64;\n-\n-    fn add(self, rhs: i32) -> f64 {\n-        // Add an i32 to a Point and get an f64.\n-# 1.0\n-    }\n-}\n-```\n-\n-will let you do this:\n-\n-```rust,ignore\n-let p: Point = // ...\n-let x: f64 = p + 2i32;\n-```\n-\n-# Using operator traits in generic structs\n-\n-Now that we know how operator traits are defined, we can define our `HasArea`\n-trait and `Square` struct from the [traits chapter][traits] more generically:\n-\n-[traits]: traits.html\n-\n-```rust\n-use std::ops::Mul;\n-\n-trait HasArea<T> {\n-    fn area(&self) -> T;\n-}\n-\n-struct Square<T> {\n-    x: T,\n-    y: T,\n-    side: T,\n-}\n-\n-impl<T> HasArea<T> for Square<T>\n-        where T: Mul<Output=T> + Copy {\n-    fn area(&self) -> T {\n-        self.side * self.side\n-    }\n-}\n-\n-fn main() {\n-    let s = Square {\n-        x: 0.0f64,\n-        y: 0.0f64,\n-        side: 12.0f64,\n-    };\n-\n-    println!(\"Area of s: {}\", s.area());\n-}\n-```\n-\n-For `HasArea` and `Square`, we declare a type parameter `T` and replace\n-`f64` with it. The `impl` needs more involved modifications:\n-\n-```rust,ignore\n-impl<T> HasArea<T> for Square<T>\n-        where T: Mul<Output=T> + Copy { ... }\n-```\n-\n-The `area` method requires that we can multiply the sides, so we declare that\n-type `T` must implement `std::ops::Mul`. Like `Add`, mentioned above, `Mul`\n-itself takes an `Output` parameter: since we know that numbers don't change\n-type when multiplied, we also set it to `T`. `T` must also support copying, so\n-Rust doesn't try to move `self.side` into the return value."}, {"sha": "21ebd6333f7101bd2d2d28db0d5fa013b3606369", "filename": "src/doc/book/src/ownership.md", "status": "removed", "additions": 0, "deletions": 295, "changes": 295, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fownership.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,295 +0,0 @@\n-# Ownership\n-\n-This is the first of three sections presenting Rust\u2019s ownership system. This is one of\n-Rust\u2019s most distinct and compelling features, with which Rust developers should\n-become quite acquainted. Ownership is how Rust achieves its largest goal,\n-memory safety. There are a few distinct concepts, each with its own\n-chapter:\n-\n-* ownership, which you\u2019re reading now\n-* [borrowing][borrowing], and their associated feature \u2018references\u2019\n-* [lifetimes][lifetimes], an advanced concept of borrowing\n-\n-These three chapters are related, and in order. You\u2019ll need all three to fully\n-understand the ownership system.\n-\n-[borrowing]: references-and-borrowing.html\n-[lifetimes]: lifetimes.html\n-\n-# Meta\n-\n-Before we get to the details, two important notes about the ownership system.\n-\n-Rust has a focus on safety and speed. It accomplishes these goals through many\n-\u2018zero-cost abstractions\u2019, which means that in Rust, abstractions cost as little\n-as possible in order to make them work. The ownership system is a prime example\n-of a zero-cost abstraction. All of the analysis we\u2019ll talk about in this guide\n-is _done at compile time_. You do not pay any run-time cost for any of these\n-features.\n-\n-However, this system does have a certain cost: learning curve. Many new users\n-to Rust experience something we like to call \u2018fighting with the borrow\n-checker\u2019, where the Rust compiler refuses to compile a program that the author\n-thinks is valid. This often happens because the programmer\u2019s mental model of\n-how ownership should work doesn\u2019t match the actual rules that Rust implements.\n-You probably will experience similar things at first. There is good news,\n-however: more experienced Rust developers report that once they work with the\n-rules of the ownership system for a period of time, they fight the borrow\n-checker less and less.\n-\n-With that in mind, let\u2019s learn about ownership.\n-\n-# Ownership\n-\n-[Variable bindings][bindings] have a property in Rust: they \u2018have ownership\u2019\n-of what they\u2019re bound to. This means that when a binding goes out of scope,\n-Rust will free the bound resources. For example:\n-\n-```rust\n-fn foo() {\n-    let v = vec![1, 2, 3];\n-}\n-```\n-\n-When `v` comes into scope, a new [vector][vectors] is created on [the stack][stack],\n-and it allocates space on [the heap][heap] for its elements. When `v` goes out\n-of scope at the end of `foo()`, Rust will clean up everything related to the\n-vector, even the heap-allocated memory. This happens deterministically, at the\n-end of the scope.\n-\n-We covered [vectors] in the previous chapter; we use them\n-here as an example of a type that allocates space on the heap at runtime. They\n-behave like [arrays], except their size may change by `push()`ing more\n-elements onto them.\n-\n-Vectors have a [generic type][generics] `Vec<T>`, so in this example `v` will have type\n-`Vec<i32>`. We'll cover [generics] in detail in a later chapter.\n-\n-[arrays]: primitive-types.html#arrays\n-[vectors]: vectors.html\n-[heap]: the-stack-and-the-heap.html#the-heap\n-[stack]: the-stack-and-the-heap.html#the-stack\n-[bindings]: variable-bindings.html\n-[generics]: generics.html\n-\n-# Move semantics\n-\n-There\u2019s some more subtlety here, though: Rust ensures that there is _exactly\n-one_ binding to any given resource. For example, if we have a vector, we can\n-assign it to another binding:\n-\n-```rust\n-let v = vec![1, 2, 3];\n-\n-let v2 = v;\n-```\n-\n-But, if we try to use `v` afterwards, we get an error:\n-\n-```rust,ignore\n-let v = vec![1, 2, 3];\n-\n-let v2 = v;\n-\n-println!(\"v[0] is: {}\", v[0]);\n-```\n-\n-It looks like this:\n-\n-```text\n-error: use of moved value: `v`\n-println!(\"v[0] is: {}\", v[0]);\n-                        ^\n-```\n-\n-A similar thing happens if we define a function which takes ownership, and\n-try to use something after we\u2019ve passed it as an argument:\n-\n-```rust,ignore\n-fn take(v: Vec<i32>) {\n-    // What happens here isn\u2019t important.\n-}\n-\n-let v = vec![1, 2, 3];\n-\n-take(v);\n-\n-println!(\"v[0] is: {}\", v[0]);\n-```\n-\n-Same error: \u2018use of moved value\u2019. When we transfer ownership to something else,\n-we say that we\u2019ve \u2018moved\u2019 the thing we refer to. You don\u2019t need some sort of\n-special annotation here, it\u2019s the default thing that Rust does.\n-\n-## The details\n-\n-The reason that we cannot use a binding after we\u2019ve moved it is subtle, but\n-important.\n-\n-When we write code like this:\n-\n-```rust\n-let x = 10;\n-```\n-\n-Rust allocates memory for an integer [i32] on the [stack][sh], copies the bit\n-pattern representing the value of 10 to the allocated memory and binds the\n-variable name x to this memory region for future reference.\n-\n-[i32]: primitive-types.html#numeric-types\n-\n-Now consider the following code fragment:\n-\n-```rust\n-let v = vec![1, 2, 3];\n-\n-let mut v2 = v;\n-```\n-\n-The first line allocates memory for the vector object `v` on the stack like\n-it does for `x` above. But in addition to that it also allocates some memory\n-on the [heap][sh] for the actual data (`[1, 2, 3]`). Rust copies the address\n-of this heap allocation to an internal pointer, which is part of the vector\n-object placed on the stack (let's call it the data pointer).\n-\n-It is worth pointing out (even at the risk of stating the obvious) that the\n-vector object and its data live in separate memory regions instead of being a\n-single contiguous memory allocation (due to reasons we will not go into at\n-this point of time). These two parts of the vector (the one on the stack and\n-one on the heap) must agree with each other at all times with regards to\n-things like the length, capacity, etc.\n-\n-When we move `v` to `v2`, Rust actually does a bitwise copy of the vector\n-object `v` into the stack allocation represented by `v2`. This shallow copy\n-does not create a copy of the heap allocation containing the actual data.\n-Which means that there would be two pointers to the contents of the vector\n-both pointing to the same memory allocation on the heap. It would violate\n-Rust\u2019s safety guarantees by introducing a data race if one could access both\n-`v` and `v2` at the same time.\n-\n-For example if we truncated the vector to just two elements through `v2`:\n-\n-```rust\n-# let v = vec![1, 2, 3];\n-# let mut v2 = v;\n-v2.truncate(2);\n-```\n-\n-and `v` were still accessible we'd end up with an invalid vector since `v`\n-would not know that the heap data has been truncated. Now, the part of the\n-vector `v` on the stack does not agree with the corresponding part on the\n-heap. `v` still thinks there are three elements in the vector and will\n-happily let us access the non existent element `v[2]` but as you might\n-already know this is a recipe for disaster. Especially because it might lead\n-to a segmentation fault or worse allow an unauthorized user to read from\n-memory to which they don't have access.\n-\n-This is why Rust forbids using `v` after we\u2019ve done the move.\n-\n-[sh]: the-stack-and-the-heap.html\n-\n-It\u2019s also important to note that optimizations may remove the actual copy of\n-the bytes on the stack, depending on circumstances. So it may not be as\n-inefficient as it initially seems.\n-\n-## `Copy` types\n-\n-We\u2019ve established that when ownership is transferred to another binding, you\n-cannot use the original binding. However, there\u2019s a [trait][traits] that changes this\n-behavior, and it\u2019s called `Copy`. We haven\u2019t discussed traits yet, but for now,\n-you can think of them as an annotation to a particular type that adds extra\n-behavior. For example:\n-\n-```rust\n-let v = 1;\n-\n-let v2 = v;\n-\n-println!(\"v is: {}\", v);\n-```\n-\n-In this case, `v` is an `i32`, which implements the `Copy` trait. This means\n-that, just like a move, when we assign `v` to `v2`, a copy of the data is made.\n-But, unlike a move, we can still use `v` afterward. This is because an `i32`\n-has no pointers to data somewhere else, copying it is a full copy.\n-\n-All primitive types implement the `Copy` trait and their ownership is\n-therefore not moved like one would assume, following the \u2018ownership rules\u2019.\n-To give an example, the two following snippets of code only compile because the\n-`i32` and `bool` types implement the `Copy` trait.\n-\n-```rust\n-fn main() {\n-    let a = 5;\n-\n-    let _y = double(a);\n-    println!(\"{}\", a);\n-}\n-\n-fn double(x: i32) -> i32 {\n-    x * 2\n-}\n-```\n-\n-```rust\n-fn main() {\n-    let a = true;\n-\n-    let _y = change_truth(a);\n-    println!(\"{}\", a);\n-}\n-\n-fn change_truth(x: bool) -> bool {\n-    !x\n-}\n-```\n-\n-If we had used types that do not implement the `Copy` trait,\n-we would have gotten a compile error because we tried to use a moved value.\n-\n-```text\n-error: use of moved value: `a`\n-println!(\"{}\", a);\n-               ^\n-```\n-\n-We will discuss how to make your own types `Copy` in the [traits][traits]\n-section.\n-\n-[traits]: traits.html\n-\n-# More than ownership\n-\n-Of course, if we had to hand ownership back with every function we wrote:\n-\n-```rust\n-fn foo(v: Vec<i32>) -> Vec<i32> {\n-    // Do stuff with `v`.\n-\n-    // Hand back ownership.\n-    v\n-}\n-```\n-\n-This would get very tedious. It gets worse the more things we want to take ownership of:\n-\n-```rust\n-fn foo(v1: Vec<i32>, v2: Vec<i32>) -> (Vec<i32>, Vec<i32>, i32) {\n-    // Do stuff with `v1` and `v2`.\n-\n-    // Hand back ownership, and the result of our function.\n-    (v1, v2, 42)\n-}\n-\n-let v1 = vec![1, 2, 3];\n-let v2 = vec![1, 2, 3];\n-\n-let (v1, v2, answer) = foo(v1, v2);\n-```\n-\n-Ugh! The return type, return line, and calling the function gets way more\n-complicated.\n-\n-Luckily, Rust offers a feature which helps us solve this problem.\n-It\u2019s called borrowing and is the topic of the next section!\n-"}, {"sha": "1983927085c148291e3a1095ddcb247c3c8b0a3a", "filename": "src/doc/book/src/patterns.md", "status": "removed", "additions": 0, "deletions": 411, "changes": 411, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fpatterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fpatterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fpatterns.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,411 +0,0 @@\n-# Patterns\n-\n-Patterns are quite common in Rust. We use them in [variable\n-bindings][bindings], [match expressions][match], and other places, too. Let\u2019s go\n-on a whirlwind tour of all of the things patterns can do!\n-\n-[bindings]: variable-bindings.html\n-[match]: match.html\n-\n-A quick refresher: you can match against literals directly, and `_` acts as an\n-\u2018any\u2019 case:\n-\n-```rust\n-let x = 1;\n-\n-match x {\n-    1 => println!(\"one\"),\n-    2 => println!(\"two\"),\n-    3 => println!(\"three\"),\n-    _ => println!(\"anything\"),\n-}\n-```\n-\n-This prints `one`.\n-\n-It's possible to create a binding for the value in the any case:\n-\n-```rust\n-let x = 1;\n-\n-match x {\n-    y => println!(\"x: {} y: {}\", x, y),\n-}\n-```\n-\n-This prints:\n-\n-```text\n-x: 1 y: 1\n-```\n-\n-Note it is an error to have both a catch-all `_` and a catch-all binding in the same match block:\n-\n-```rust\n-let x = 1;\n-\n-match x {\n-    y => println!(\"x: {} y: {}\", x, y),\n-    _ => println!(\"anything\"), // this causes an error as it is unreachable\n-}\n-```\n-\n-There\u2019s one pitfall with patterns: like anything that introduces a new binding,\n-they introduce shadowing. For example:\n-\n-```rust\n-let x = 1;\n-let c = 'c';\n-\n-match c {\n-    x => println!(\"x: {} c: {}\", x, c),\n-}\n-\n-println!(\"x: {}\", x)\n-```\n-\n-This prints:\n-\n-```text\n-x: c c: c\n-x: 1\n-```\n-\n-In other words, `x =>` matches the pattern and introduces a new binding named\n-`x`. This new binding is in scope for the match arm and takes on the value of\n-`c`. Notice that the value of `x` outside the scope of the match has no bearing\n-on the value of `x` within it. Because we already have a binding named `x`, this\n-new `x` shadows it.\n-\n-# Multiple patterns\n-\n-You can match multiple patterns with `|`:\n-\n-```rust\n-let x = 1;\n-\n-match x {\n-    1 | 2 => println!(\"one or two\"),\n-    3 => println!(\"three\"),\n-    _ => println!(\"anything\"),\n-}\n-```\n-\n-This prints `one or two`.\n-\n-# Destructuring\n-\n-If you have a compound data type, like a [`struct`][struct], you can destructure it\n-inside of a pattern:\n-\n-```rust\n-struct Point {\n-    x: i32,\n-    y: i32,\n-}\n-\n-let origin = Point { x: 0, y: 0 };\n-\n-match origin {\n-    Point { x, y } => println!(\"({},{})\", x, y),\n-}\n-```\n-\n-[struct]: structs.html\n-\n-We can use `:` to give a value a different name.\n-\n-```rust\n-struct Point {\n-    x: i32,\n-    y: i32,\n-}\n-\n-let origin = Point { x: 0, y: 0 };\n-\n-match origin {\n-    Point { x: x1, y: y1 } => println!(\"({},{})\", x1, y1),\n-}\n-```\n-\n-If we only care about some of the values, we don\u2019t have to give them all names:\n-\n-```rust\n-struct Point {\n-    x: i32,\n-    y: i32,\n-}\n-\n-let point = Point { x: 2, y: 3 };\n-\n-match point {\n-    Point { x, .. } => println!(\"x is {}\", x),\n-}\n-```\n-\n-This prints `x is 2`.\n-\n-You can do this kind of match on any member, not only the first:\n-\n-```rust\n-struct Point {\n-    x: i32,\n-    y: i32,\n-}\n-\n-let point = Point { x: 2, y: 3 };\n-\n-match point {\n-    Point { y, .. } => println!(\"y is {}\", y),\n-}\n-```\n-\n-This prints `y is 3`.\n-\n-This \u2018destructuring\u2019 behavior works on any compound data type, like\n-[tuples][tuples] or [enums][enums].\n-\n-[tuples]: primitive-types.html#tuples\n-[enums]: enums.html\n-\n-# Ignoring bindings\n-\n-You can use `_` in a pattern to disregard the type and value.\n-For example, here\u2019s a `match` against a `Result<T, E>`:\n-\n-```rust\n-# let some_value: Result<i32, &'static str> = Err(\"There was an error\");\n-match some_value {\n-    Ok(value) => println!(\"got a value: {}\", value),\n-    Err(_) => println!(\"an error occurred\"),\n-}\n-```\n-\n-In the first arm, we bind the value inside the `Ok` variant to `value`. But\n-in the `Err` arm, we use `_` to disregard the specific error, and print\n-a general error message.\n-\n-`_` is valid in any pattern that creates a binding. This can be useful to\n-ignore parts of a larger structure:\n-\n-```rust\n-fn coordinate() -> (i32, i32, i32) {\n-    // Generate and return some sort of triple tuple.\n-# (1, 2, 3)\n-}\n-\n-let (x, _, z) = coordinate();\n-```\n-\n-Here, we bind the first and last element of the tuple to `x` and `z`, but\n-ignore the middle element.\n-\n-It\u2019s worth noting that using `_` never binds the value in the first place,\n-which means that the value does not move:\n-\n-```rust\n-let tuple: (u32, String) = (5, String::from(\"five\"));\n-\n-// Here, tuple is moved, because the String moved:\n-let (x, _s) = tuple;\n-\n-// The next line would give \"error: use of partially moved value: `tuple`\".\n-// println!(\"Tuple is: {:?}\", tuple);\n-\n-// However,\n-\n-let tuple = (5, String::from(\"five\"));\n-\n-// Here, tuple is _not_ moved, as the String was never moved, and u32 is Copy:\n-let (x, _) = tuple;\n-\n-// That means this works:\n-println!(\"Tuple is: {:?}\", tuple);\n-```\n-\n-This also means that any temporary variables will be dropped at the end of the\n-statement:\n-\n-```rust\n-// Here, the String created will be dropped immediately, as it\u2019s not bound:\n-\n-let _ = String::from(\"  hello  \").trim();\n-```\n-\n-You can also use `..` in a pattern to disregard multiple values:\n-\n-```rust\n-enum OptionalTuple {\n-    Value(i32, i32, i32),\n-    Missing,\n-}\n-\n-let x = OptionalTuple::Value(5, -2, 3);\n-\n-match x {\n-    OptionalTuple::Value(..) => println!(\"Got a tuple!\"),\n-    OptionalTuple::Missing => println!(\"No such luck.\"),\n-}\n-```\n-\n-This prints `Got a tuple!`.\n-\n-# ref and ref mut\n-\n-If you want to get a [reference][ref], use the `ref` keyword:\n-\n-```rust\n-let x = 5;\n-\n-match x {\n-    ref r => println!(\"Got a reference to {}\", r),\n-}\n-```\n-\n-This prints `Got a reference to 5`.\n-\n-[ref]: references-and-borrowing.html\n-\n-Here, the `r` inside the `match` has the type `&i32`. In other words, the `ref`\n-keyword _creates_ a reference, for use in the pattern. If you need a mutable\n-reference, `ref mut` will work in the same way:\n-\n-```rust\n-let mut x = 5;\n-\n-match x {\n-    ref mut mr => println!(\"Got a mutable reference to {}\", mr),\n-}\n-```\n-\n-# Ranges\n-\n-You can match a range of values with `...`:\n-\n-```rust\n-let x = 1;\n-\n-match x {\n-    1 ... 5 => println!(\"one through five\"),\n-    _ => println!(\"anything\"),\n-}\n-```\n-\n-This prints `one through five`.\n-\n-Ranges are mostly used with integers and `char`s:\n-\n-```rust\n-let x = '\ud83d\udc85';\n-\n-match x {\n-    'a' ... 'j' => println!(\"early letter\"),\n-    'k' ... 'z' => println!(\"late letter\"),\n-    _ => println!(\"something else\"),\n-}\n-```\n-\n-This prints `something else`.\n-\n-# Bindings\n-\n-You can bind values to names with `@`:\n-\n-```rust\n-let x = 1;\n-\n-match x {\n-    e @ 1 ... 5 => println!(\"got a range element {}\", e),\n-    _ => println!(\"anything\"),\n-}\n-```\n-\n-This prints `got a range element 1`. This is useful when you want to\n-do a complicated match of part of a data structure:\n-\n-```rust\n-#[derive(Debug)]\n-struct Person {\n-    name: Option<String>,\n-}\n-\n-let name = \"Steve\".to_string();\n-let x: Option<Person> = Some(Person { name: Some(name) });\n-match x {\n-    Some(Person { name: ref a @ Some(_), .. }) => println!(\"{:?}\", a),\n-    _ => {}\n-}\n-```\n-\n-This prints `Some(\"Steve\")`: we\u2019ve bound the inner `name` to `a`.\n-\n-If you use `@` with `|`, you need to make sure the name is bound in each part\n-of the pattern:\n-\n-```rust\n-let x = 5;\n-\n-match x {\n-    e @ 1 ... 5 | e @ 8 ... 10 => println!(\"got a range element {}\", e),\n-    _ => println!(\"anything\"),\n-}\n-```\n-\n-# Guards\n-\n-You can introduce \u2018match guards\u2019 with `if`:\n-\n-```rust\n-enum OptionalInt {\n-    Value(i32),\n-    Missing,\n-}\n-\n-let x = OptionalInt::Value(5);\n-\n-match x {\n-    OptionalInt::Value(i) if i > 5 => println!(\"Got an int bigger than five!\"),\n-    OptionalInt::Value(..) => println!(\"Got an int!\"),\n-    OptionalInt::Missing => println!(\"No such luck.\"),\n-}\n-```\n-\n-This prints `Got an int!`.\n-\n-If you\u2019re using `if` with multiple patterns, the `if` applies to both sides:\n-\n-```rust\n-let x = 4;\n-let y = false;\n-\n-match x {\n-    4 | 5 if y => println!(\"yes\"),\n-    _ => println!(\"no\"),\n-}\n-```\n-\n-This prints `no`, because the `if` applies to the whole of `4 | 5`, and not to\n-only the `5`. In other words, the precedence of `if` behaves like this:\n-\n-```text\n-(4 | 5) if y => ...\n-```\n-\n-not this:\n-\n-```text\n-4 | (5 if y) => ...\n-```\n-\n-# Mix and Match\n-\n-Whew! That\u2019s a lot of different ways to match things, and they can all be\n-mixed and matched, depending on what you\u2019re doing:\n-\n-```rust,ignore\n-match x {\n-    Foo { x: Some(ref name), y: None } => ...\n-}\n-```\n-\n-Patterns are very powerful. Make good use of them."}, {"sha": "8fd3d17c15e57f5a90a59ed14f6bfb016b9cbd5d", "filename": "src/doc/book/src/primitive-types.md", "status": "removed", "additions": 0, "deletions": 305, "changes": 305, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fprimitive-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fprimitive-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fprimitive-types.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,305 +0,0 @@\n-# Primitive Types\n-\n-The Rust language has a number of types that are considered \u2018primitive\u2019. This\n-means that they\u2019re built-in to the language. Rust is structured in such a way\n-that the standard library also provides a number of useful types built on top\n-of these ones, as well, but these are the most primitive.\n-\n-# Booleans\n-\n-Rust has a built-in boolean type, named `bool`. It has two values, `true` and `false`:\n-\n-```rust\n-let x = true;\n-\n-let y: bool = false;\n-```\n-\n-A common use of booleans is in [`if` conditionals][if].\n-\n-[if]: if.html\n-\n-You can find more documentation for `bool`s [in the standard library\n-documentation][bool].\n-\n-[bool]: ../std/primitive.bool.html\n-\n-# `char`\n-\n-The `char` type represents a single Unicode scalar value. You can create `char`s\n-with a single tick: (`'`)\n-\n-```rust\n-let x = 'x';\n-let two_hearts = '\ud83d\udc95';\n-```\n-\n-Unlike some other languages, this means that Rust\u2019s `char` is not a single byte,\n-but four.\n-\n-You can find more documentation for `char`s [in the standard library\n-documentation][char].\n-\n-[char]: ../std/primitive.char.html\n-\n-# Numeric types\n-\n-Rust has a variety of numeric types in a few categories: signed and unsigned,\n-fixed and variable, floating-point and integer.\n-\n-These types consist of two parts: the category, and the size. For example,\n-`u16` is an unsigned type with sixteen bits of size. More bits lets you have\n-bigger numbers.\n-\n-If a number literal has nothing to cause its type to be inferred, it defaults:\n-\n-```rust\n-let x = 42; // `x` has type `i32`.\n-\n-let y = 1.0; // `y` has type `f64`.\n-```\n-\n-Here\u2019s a list of the different numeric types, with links to their documentation\n-in the standard library:\n-\n-* [i8](../std/primitive.i8.html)\n-* [i16](../std/primitive.i16.html)\n-* [i32](../std/primitive.i32.html)\n-* [i64](../std/primitive.i64.html)\n-* [u8](../std/primitive.u8.html)\n-* [u16](../std/primitive.u16.html)\n-* [u32](../std/primitive.u32.html)\n-* [u64](../std/primitive.u64.html)\n-* [isize](../std/primitive.isize.html)\n-* [usize](../std/primitive.usize.html)\n-* [f32](../std/primitive.f32.html)\n-* [f64](../std/primitive.f64.html)\n-\n-Let\u2019s go over them by category:\n-\n-## Signed and Unsigned\n-\n-Integer types come in two varieties: signed and unsigned. To understand the\n-difference, let\u2019s consider a number with four bits of size. A signed, four-bit\n-number would let you store numbers from `-8` to `+7`. Signed numbers use\n-\u201ctwo\u2019s complement representation\u201d. An unsigned four bit number, since it does\n-not need to store negatives, can store values from `0` to `+15`.\n-\n-Unsigned types use a `u` for their category, and signed types use `i`. The `i`\n-is for \u2018integer\u2019. So `u8` is an eight-bit unsigned number, and `i8` is an\n-eight-bit signed number.\n-\n-## Fixed-size types\n-\n-Fixed-size types have a specific number of bits in their representation. Valid\n-bit sizes are `8`, `16`, `32`, and `64`. So, `u32` is an unsigned, 32-bit integer,\n-and `i64` is a signed, 64-bit integer.\n-\n-## Variable-size types\n-\n-Rust also provides types whose particular size depends on the underlying machine\n-architecture. Their range is sufficient to express the size of any collection, so\n-these types have \u2018size\u2019 as the category. They come in signed and unsigned varieties\n-which account for two types: `isize` and `usize`.\n-\n-## Floating-point types\n-\n-Rust also has two floating point types: `f32` and `f64`. These correspond to\n-IEEE-754 single and double precision numbers.\n-\n-# Arrays\n-\n-Like many programming languages, Rust has list types to represent a sequence of\n-things. The most basic is the *array*, a fixed-size list of elements of the\n-same type. By default, arrays are immutable.\n-\n-```rust\n-let a = [1, 2, 3]; // a: [i32; 3]\n-let mut m = [1, 2, 3]; // m: [i32; 3]\n-```\n-\n-Arrays have type `[T; N]`. We\u2019ll talk about this `T` notation [in the generics\n-section][generics]. The `N` is a compile-time constant, for the length of the\n-array.\n-\n-There\u2019s a shorthand for initializing each element of an array to the same\n-value. In this example, each element of `a` will be initialized to `0`:\n-\n-```rust\n-let a = [0; 20]; // a: [i32; 20]\n-```\n-\n-You can get the number of elements in an array `a` with `a.len()`:\n-\n-```rust\n-let a = [1, 2, 3];\n-\n-println!(\"a has {} elements\", a.len());\n-```\n-\n-You can access a particular element of an array with *subscript notation*:\n-\n-```rust\n-let names = [\"Graydon\", \"Brian\", \"Niko\"]; // names: [&str; 3]\n-\n-println!(\"The second name is: {}\", names[1]);\n-```\n-\n-Subscripts start at zero, like in most programming languages, so the first name\n-is `names[0]` and the second name is `names[1]`. The above example prints\n-`The second name is: Brian`. If you try to use a subscript that is not in the\n-array, you will get an error: array access is bounds-checked at run-time. Such\n-errant access is the source of many bugs in other systems programming\n-languages.\n-\n-You can find more documentation for `array`s [in the standard library\n-documentation][array].\n-\n-[array]: ../std/primitive.array.html\n-\n-# Slices\n-\n-A \u2018slice\u2019 is a reference to (or \u201cview\u201d into) another data structure. They are\n-useful for allowing safe, efficient access to a portion of an array without\n-copying. For example, you might want to reference only one line of a file read\n-into memory. By nature, a slice is not created directly, but from an existing\n-variable binding. Slices have a defined length, and can be mutable or immutable.\n-\n-Internally, slices are represented as a pointer to the beginning of the data\n-and a length.\n-\n-## Slicing syntax\n-\n-You can use a combo of `&` and `[]` to create a slice from various things. The\n-`&` indicates that slices are similar to [references], which we will cover in\n-detail later in this section. The `[]`s, with a range, let you define the\n-length of the slice:\n-\n-```rust\n-let a = [0, 1, 2, 3, 4];\n-let complete = &a[..]; // A slice containing all of the elements in `a`.\n-let middle = &a[1..4]; // A slice of `a`: only the elements `1`, `2`, and `3`.\n-```\n-\n-Slices have type `&[T]`. We\u2019ll talk about that `T` when we cover\n-[generics][generics].\n-\n-[generics]: generics.html\n-\n-You can find more documentation for slices [in the standard library\n-documentation][slice].\n-\n-[slice]: ../std/primitive.slice.html\n-\n-# `str`\n-\n-Rust\u2019s `str` type is the most primitive string type. As an [unsized type][dst],\n-it\u2019s not very useful by itself, but becomes useful when placed behind a\n-reference, like `&str`. We'll elaborate further when we cover\n-[Strings][strings] and [references].\n-\n-[dst]: unsized-types.html\n-[strings]: strings.html\n-[references]: references-and-borrowing.html\n-\n-You can find more documentation for `str` [in the standard library\n-documentation][str].\n-\n-[str]: ../std/primitive.str.html\n-\n-# Tuples\n-\n-A tuple is an ordered list of fixed size. Like this:\n-\n-```rust\n-let x = (1, \"hello\");\n-```\n-\n-The parentheses and commas form this two-length tuple. Here\u2019s the same code, but\n-with the type annotated:\n-\n-```rust\n-let x: (i32, &str) = (1, \"hello\");\n-```\n-\n-As you can see, the type of a tuple looks like the tuple, but with each\n-position having a type name rather than the value. Careful readers will also\n-note that tuples are heterogeneous: we have an `i32` and a `&str` in this tuple.\n-In systems programming languages, strings are a bit more complex than in other\n-languages. For now, read `&str` as a *string slice*, and we\u2019ll learn more\n-soon.\n-\n-You can assign one tuple into another, if they have the same contained types\n-and [arity]. Tuples have the same arity when they have the same length.\n-\n-[arity]: glossary.html#arity\n-\n-```rust\n-let mut x = (1, 2); // x: (i32, i32)\n-let y = (2, 3); // y: (i32, i32)\n-\n-x = y;\n-```\n-\n-You can access the fields in a tuple through a *destructuring let*. Here\u2019s\n-an example:\n-\n-```rust\n-let (x, y, z) = (1, 2, 3);\n-\n-println!(\"x is {}\", x);\n-```\n-\n-Remember [before][let] when I said the left-hand side of a `let` statement was more\n-powerful than assigning a binding? Here we are. We can put a pattern on\n-the left-hand side of the `let`, and if it matches up to the right-hand side,\n-we can assign multiple bindings at once. In this case, `let` \u201cdestructures\u201d\n-or \u201cbreaks up\u201d the tuple, and assigns the bits to three bindings.\n-\n-[let]: variable-bindings.html\n-\n-This pattern is very powerful, and we\u2019ll see it repeated more later.\n-\n-You can disambiguate a single-element tuple from a value in parentheses with a\n-comma:\n-\n-```rust\n-(0,); // A single-element tuple.\n-(0); // A zero in parentheses.\n-```\n-\n-## Tuple Indexing\n-\n-You can also access fields of a tuple with indexing syntax:\n-\n-\n-```rust\n-let tuple = (1, 2, 3);\n-\n-let x = tuple.0;\n-let y = tuple.1;\n-let z = tuple.2;\n-\n-println!(\"x is {}\", x);\n-```\n-\n-Like array indexing, it starts at zero, but unlike array indexing, it uses a\n-`.`, rather than `[]`s.\n-\n-You can find more documentation for tuples [in the standard library\n-documentation][tuple].\n-\n-[tuple]: ../std/primitive.tuple.html\n-\n-# Functions\n-\n-Functions also have a type! They look like this:\n-\n-```rust\n-fn foo(x: i32) -> i32 { x }\n-\n-let x: fn(i32) -> i32 = foo;\n-```\n-\n-In this case, `x` is a \u2018function pointer\u2019 to a function that takes an `i32` and\n-returns an `i32`."}, {"sha": "e02b5a6cdd79b8c27ad66bf7c675bd71c47880e5", "filename": "src/doc/book/src/procedural-macros.md", "status": "removed", "additions": 0, "deletions": 286, "changes": 286, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,286 +0,0 @@\n-# Procedural Macros (and custom Derive)\n-\n-As you've seen throughout the rest of the book, Rust provides a mechanism\n-called \"derive\" that lets you implement traits easily. For example,\n-\n-```rust\n-#[derive(Debug)]\n-struct Point {\n-    x: i32,\n-    y: i32,\n-}\n-```\n-\n-is a lot simpler than\n-\n-```rust\n-struct Point {\n-    x: i32,\n-    y: i32,\n-}\n-\n-use std::fmt;\n-\n-impl fmt::Debug for Point {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"Point {{ x: {}, y: {} }}\", self.x, self.y)\n-    }\n-}\n-```\n-\n-Rust includes several traits that you can derive, but it also lets you define\n-your own. We can accomplish this task through a feature of Rust called\n-\"procedural macros.\" Eventually, procedural macros will allow for all sorts of\n-advanced metaprogramming in Rust, but today, they're only for custom derive.\n-\n-Let's build a very simple trait, and derive it with custom derive.\n-\n-## Hello World\n-\n-So the first thing we need to do is start a new crate for our project.\n-\n-```bash\n-$ cargo new --bin hello-world\n-```\n-\n-All we want is to be able to call `hello_world()` on a derived type. Something\n-like this:\n-\n-```rust,ignore\n-#[derive(HelloWorld)]\n-struct Pancakes;\n-\n-fn main() {\n-    Pancakes::hello_world();\n-}\n-```\n-\n-With some kind of nice output, like `Hello, World! My name is Pancakes.`. \n-\n-Let's go ahead and write up what we think our macro will look like from a user\n-perspective. In `src/main.rs` we write:\n-\n-```rust,ignore\n-#[macro_use]\n-extern crate hello_world_derive;\n-\n-trait HelloWorld {\n-    fn hello_world();\n-}\n-\n-#[derive(HelloWorld)]\n-struct FrenchToast;\n-\n-#[derive(HelloWorld)]\n-struct Waffles;\n-\n-fn main() {\n-    FrenchToast::hello_world();\n-    Waffles::hello_world();\n-}\n-```\n-\n-Great. So now we just need to actually write the procedural macro. At the\n-moment, procedural macros need to be in their own crate. Eventually, this\n-restriction may be lifted, but for now, it's required. As such, there's a\n-convention; for a crate named `foo`, a custom derive procedural macro is called\n-`foo-derive`. Let's start a new crate called `hello-world-derive` inside our\n-`hello-world` project.\n-\n-```bash\n-$ cargo new hello-world-derive\n-```\n-\n-To make sure that our `hello-world` crate is able to find this new crate we've\n-created, we'll add it to our toml:\n-\n-```toml\n-[dependencies]\n-hello-world-derive = { path = \"hello-world-derive\" }\n-```\n-\n-As for the source of our `hello-world-derive` crate, here's an example:\n-\n-```rust,ignore\n-extern crate proc_macro;\n-extern crate syn;\n-#[macro_use]\n-extern crate quote;\n-\n-use proc_macro::TokenStream;\n-\n-#[proc_macro_derive(HelloWorld)]\n-pub fn hello_world(input: TokenStream) -> TokenStream {\n-    // Construct a string representation of the type definition\n-    let s = input.to_string();\n-    \n-    // Parse the string representation\n-    let ast = syn::parse_macro_input(&s).unwrap();\n-\n-    // Build the impl\n-    let gen = impl_hello_world(&ast);\n-    \n-    // Return the generated impl\n-    gen.parse().unwrap()\n-}\n-```\n-\n-So there is a lot going on here. We have introduced two new crates: [`syn`] and\n-[`quote`]. As you may have noticed, `input: TokenSteam` is immediately converted\n-to a `String`. This `String` is a string representation of the Rust code for which\n-we are deriving `HelloWorld`. At the moment, the only thing you can do with a\n-`TokenStream` is convert it to a string. A richer API will exist in the future.\n-\n-So what we really need is to be able to _parse_ Rust code into something\n-usable. This is where `syn` comes to play. `syn` is a crate for parsing Rust\n-code. The other crate we've introduced is `quote`. It's essentially the dual of\n-`syn` as it will make generating Rust code really easy. We could write this\n-stuff on our own, but it's much simpler to use these libraries. Writing a full\n-parser for Rust code is no simple task.\n-\n-[`syn`]: https://crates.io/crates/syn\n-[`quote`]: https://crates.io/crates/quote\n-\n-The comments seem to give us a pretty good idea of our overall strategy. We\n-are going to take a `String` of the Rust code for the type we are deriving, parse\n-it using `syn`, construct the implementation of `hello_world` (using `quote`),\n-then pass it back to Rust compiler.\n-\n-One last note: you'll see some `unwrap()`s there. If you want to provide an\n-error for a procedural macro, then you should `panic!` with the error message.\n-In this case, we're keeping it as simple as possible.\n-\n-Great, so let's write `impl_hello_world(&ast)`.\n-\n-```rust,ignore\n-fn impl_hello_world(ast: &syn::MacroInput) -> quote::Tokens {\n-    let name = &ast.ident;\n-    quote! {\n-        impl HelloWorld for #name {\n-            fn hello_world() {\n-                println!(\"Hello, World! My name is {}\", stringify!(#name));\n-            }\n-        }\n-    }\n-}\n-```\n-\n-So this is where quotes comes in. The `ast` argument is a struct that gives us\n-a representation of our type (which can be either a `struct` or an `enum`).\n-Check out the [docs](https://docs.rs/syn/0.10.5/syn/struct.MacroInput.html),\n-there is some useful information there. We are able to get the name of the\n-type using `ast.ident`. The `quote!` macro lets us write up the Rust code\n-that we wish to return and convert it into `Tokens`. `quote!` lets us use some\n-really cool templating mechanics; we simply write `#name` and `quote!` will\n-replace it with the variable named `name`. You can even do some repetition\n-similar to regular macros work. You should check out the\n-[docs](https://docs.rs/quote) for a good introduction.\n-\n-So I think that's it. Oh, well, we do need to add dependencies for `syn` and\n-`quote` in the `cargo.toml` for `hello-world-derive`.\n-\n-```toml\n-[dependencies]\n-syn = \"0.10.5\"\n-quote = \"0.3.10\"\n-```\n-\n-That should be it. Let's try to compile `hello-world`.\n-\n-```bash\n-error: the `#[proc_macro_derive]` attribute is only usable with crates of the `proc-macro` crate type\n- --> hello-world-derive/src/lib.rs:8:3\n-  |\n-8 | #[proc_macro_derive(HelloWorld)]\n-  |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-```\n-\n-Oh, so it appears that we need to declare that our `hello-world-derive` crate is\n-a `proc-macro` crate type. How do we do this? Like this:\n-\n-```toml\n-[lib]\n-proc-macro = true\n-```\n-\n-Ok so now, let's compile `hello-world`. Executing `cargo run` now yields:\n-\n-```bash\n-Hello, World! My name is FrenchToast\n-Hello, World! My name is Waffles\n-```\n-\n-We've done it!\n-\n-## Custom Attributes\n-\n-In some cases it might make sense to allow users some kind of configuration.\n-For example, the user might want to overwrite the name that is printed in the `hello_world()` method.\n-\n-This can be achieved with custom attributes:\n-\n-```rust,ignore\n-#[derive(HelloWorld)]\n-#[HelloWorldName = \"the best Pancakes\"]\n-struct Pancakes;\n-\n-fn main() {\n-    Pancakes::hello_world();\n-}\n-```\n-\n-If we try to compile this though, the compiler will respond with an error:\n-\n-```bash\n-error: The attribute `HelloWorldName` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-```\n-\n-The compiler needs to know that we're handling this attribute and to not respond with an error.\n-This is done in the `hello-world-derive` crate by adding `attributes` to the `proc_macro_derive` attribute:\n-\n-```rust,ignore\n-#[proc_macro_derive(HelloWorld, attributes(HelloWorldName))]\n-pub fn hello_world(input: TokenStream) -> TokenStream \n-```\n-\n-Multiple attributes can be specified that way.\n-\n-## Raising Errors\n-\n-Let's assume that we do not want to accept enums as input to our custom derive method.\n-\n-This condition can be easily checked with the help of `syn`. \n-But how do we tell the user, that we do not accept enums?\n-The idiomatic way to report errors in procedural macros is to panic:\n-\n-```rust,ignore\n-fn impl_hello_world(ast: &syn::MacroInput) -> quote::Tokens {\n-    let name = &ast.ident;\n-    // Check if derive(HelloWorld) was specified for a struct\n-    if let syn::Body::Struct(_) = ast.body {\n-        // Yes, this is a struct\n-        quote! {\n-            impl HelloWorld for #name {\n-                fn hello_world() {\n-                    println!(\"Hello, World! My name is {}\", stringify!(#name));\n-                }\n-            }\n-        }\n-    } else {\n-        //Nope. This is an Enum. We cannot handle these!\n-       panic!(\"#[derive(HelloWorld)] is only defined for structs, not for enums!\");\n-    }\n-}\n-```\n-\n-If a user now tries to derive `HelloWorld` from an enum they will be greeted with following, hopefully helpful, error:\n-\n-```bash\n-error: custom derive attribute panicked\n-  --> src/main.rs\n-   |\n-   | #[derive(HelloWorld)]\n-   |          ^^^^^^^^^^\n-   |\n-   = help: message: #[derive(HelloWorld)] is only defined for structs, not for enums!\n-```"}, {"sha": "1f75665f4b8c36ebde4386a7e5b434a6cee16888", "filename": "src/doc/book/src/raw-pointers.md", "status": "removed", "additions": 0, "deletions": 121, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fraw-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fraw-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fraw-pointers.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,121 +0,0 @@\n-# Raw Pointers\n-\n-Rust has a number of different smart pointer types in its standard library, but\n-there are two types that are extra-special. Much of Rust\u2019s safety comes from\n-compile-time checks, but raw pointers don\u2019t have such guarantees, and are\n-[unsafe][unsafe] to use.\n-\n-`*const T` and `*mut T` are called \u2018raw pointers\u2019 in Rust. Sometimes, when\n-writing certain kinds of libraries, you\u2019ll need to get around Rust\u2019s safety\n-guarantees for some reason. In this case, you can use raw pointers to implement\n-your library, while exposing a safe interface for your users. For example, `*`\n-pointers are allowed to alias, allowing them to be used to write\n-shared-ownership types, and even thread-safe shared memory types (the `Rc<T>`\n-and `Arc<T>` types are both implemented entirely in Rust).\n-\n-Here are some things to remember about raw pointers that are different than\n-other pointer types. They:\n-\n-- are not guaranteed to point to valid memory and are not even\n-  guaranteed to be non-NULL (unlike both `Box` and `&`);\n-- do not have any automatic clean-up, unlike `Box`, and so require\n-  manual resource management;\n-- are plain-old-data, that is, they don't move ownership, again unlike\n-  `Box`, hence the Rust compiler cannot protect against bugs like\n-  use-after-free;\n-- lack any form of lifetimes, unlike `&`, and so the compiler cannot\n-  reason about dangling pointers; and\n-- have no guarantees about aliasing or mutability other than mutation\n-  not being allowed directly through a `*const T`.\n-\n-# Basics\n-\n-Creating a raw pointer is perfectly safe:\n-\n-```rust\n-let x = 5;\n-let raw = &x as *const i32;\n-\n-let mut y = 10;\n-let raw_mut = &mut y as *mut i32;\n-```\n-\n-However, dereferencing one is not. This won\u2019t work:\n-\n-```rust,ignore\n-let x = 5;\n-let raw = &x as *const i32;\n-\n-println!(\"raw points at {}\", *raw);\n-```\n-\n-It gives this error:\n-\n-```text\n-error: dereference of raw pointer requires unsafe function or block [E0133]\n-     println!(\"raw points at {}\", *raw);\n-                                  ^~~~\n-```\n-\n-When you dereference a raw pointer, you\u2019re taking responsibility that it\u2019s not\n-pointing somewhere that would be incorrect. As such, you need `unsafe`:\n-\n-```rust\n-let x = 5;\n-let raw = &x as *const i32;\n-\n-let points_at = unsafe { *raw };\n-\n-println!(\"raw points at {}\", points_at);\n-```\n-\n-For more operations on raw pointers, see [their API documentation][rawapi].\n-\n-[unsafe]: unsafe.html\n-[rawapi]: ../std/primitive.pointer.html\n-\n-# FFI\n-\n-Raw pointers are useful for FFI: Rust\u2019s `*const T` and `*mut T` are similar to\n-C\u2019s `const T*` and `T*`, respectively. For more about this use, consult the\n-[FFI chapter][ffi].\n-\n-[ffi]: ffi.html\n-\n-# References and raw pointers\n-\n-At runtime, a raw pointer `*` and a reference pointing to the same piece of\n-data have an identical representation. In fact, an `&T` reference will\n-implicitly coerce to an `*const T` raw pointer in safe code and similarly for\n-the `mut` variants (both coercions can be performed explicitly with,\n-respectively, `value as *const T` and `value as *mut T`).\n-\n-Going the opposite direction, from `*const` to a reference `&`, is not safe. A\n-`&T` is always valid, and so, at a minimum, the raw pointer `*const T` has to\n-point to a valid instance of type `T`. Furthermore, the resulting pointer must\n-satisfy the aliasing and mutability laws of references. The compiler assumes\n-these properties are true for any references, no matter how they are created,\n-and so any conversion from raw pointers is asserting that they hold. The\n-programmer *must* guarantee this.\n-\n-The recommended method for the conversion is:\n-\n-```rust\n-// Explicit cast:\n-let i: u32 = 1;\n-let p_imm: *const u32 = &i as *const u32;\n-\n-// Implicit coercion:\n-let mut m: u32 = 2;\n-let p_mut: *mut u32 = &mut m;\n-\n-unsafe {\n-    let ref_imm: &u32 = &*p_imm;\n-    let ref_mut: &mut u32 = &mut *p_mut;\n-}\n-```\n-\n-The `&*x` dereferencing style is preferred to using a `transmute`. The latter\n-is far more powerful than necessary, and the more restricted operation is\n-harder to use incorrectly; for example, it requires that `x` is a pointer\n-(unlike `transmute`)."}, {"sha": "f01aa45385acf4ea6eef3fac12565396095dc3f4", "filename": "src/doc/book/src/references-and-borrowing.md", "status": "removed", "additions": 0, "deletions": 411, "changes": 411, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Freferences-and-borrowing.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Freferences-and-borrowing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Freferences-and-borrowing.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,411 +0,0 @@\n-# References and Borrowing\n-\n-This is the second of three sections presenting Rust\u2019s ownership system. This is one of\n-Rust\u2019s most distinct and compelling features, with which Rust developers should\n-become quite acquainted. Ownership is how Rust achieves its largest goal,\n-memory safety. There are a few distinct concepts, each with its own\n-chapter:\n-\n-* [ownership][ownership], the key concept\n-* borrowing, which you\u2019re reading now\n-* [lifetimes][lifetimes], an advanced concept of borrowing\n-\n-These three chapters are related, and in order. You\u2019ll need all three to fully\n-understand the ownership system.\n-\n-[ownership]: ownership.html\n-[lifetimes]: lifetimes.html\n-\n-# Meta\n-\n-Before we get to the details, two important notes about the ownership system.\n-\n-Rust has a focus on safety and speed. It accomplishes these goals through many\n-\u2018zero-cost abstractions\u2019, which means that in Rust, abstractions cost as little\n-as possible in order to make them work. The ownership system is a prime example\n-of a zero-cost abstraction. All of the analysis we\u2019ll talk about in this guide\n-is _done at compile time_. You do not pay any run-time cost for any of these\n-features.\n-\n-However, this system does have a certain cost: learning curve. Many new users\n-to Rust experience something we like to call \u2018fighting with the borrow\n-checker\u2019, where the Rust compiler refuses to compile a program that the author\n-thinks is valid. This often happens because the programmer\u2019s mental model of\n-how ownership should work doesn\u2019t match the actual rules that Rust implements.\n-You probably will experience similar things at first. There is good news,\n-however: more experienced Rust developers report that once they work with the\n-rules of the ownership system for a period of time, they fight the borrow\n-checker less and less.\n-\n-With that in mind, let\u2019s learn about borrowing.\n-\n-# Borrowing\n-\n-At the end of the [ownership][ownership] section, we had a nasty function that looked\n-like this:\n-\n-```rust\n-fn foo(v1: Vec<i32>, v2: Vec<i32>) -> (Vec<i32>, Vec<i32>, i32) {\n-    // Do stuff with `v1` and `v2`.\n-\n-    // Hand back ownership, and the result of our function.\n-    (v1, v2, 42)\n-}\n-\n-let v1 = vec![1, 2, 3];\n-let v2 = vec![1, 2, 3];\n-\n-let (v1, v2, answer) = foo(v1, v2);\n-```\n-\n-This is not idiomatic Rust, however, as it doesn\u2019t take advantage of borrowing. Here\u2019s\n-the first step:\n-\n-```rust\n-fn foo(v1: &Vec<i32>, v2: &Vec<i32>) -> i32 {\n-    // Do stuff with `v1` and `v2`.\n-\n-    // Return the answer.\n-    42\n-}\n-\n-let v1 = vec![1, 2, 3];\n-let v2 = vec![1, 2, 3];\n-\n-let answer = foo(&v1, &v2);\n-\n-// We can use `v1` and `v2` here!\n-```\n-\n-A more concrete example:\n-\n-```rust\n-fn main() {\n-    // Don't worry if you don't understand how `fold` works, the point here is that an immutable reference is borrowed.\n-    fn sum_vec(v: &Vec<i32>) -> i32 {\n-        return v.iter().fold(0, |a, &b| a + b);\n-    }\n-    // Borrow two vectors and sum them.\n-    // This kind of borrowing does not allow mutation through the borrowed reference.\n-    fn foo(v1: &Vec<i32>, v2: &Vec<i32>) -> i32 {\n-        // Do stuff with `v1` and `v2`.\n-        let s1 = sum_vec(v1);\n-        let s2 = sum_vec(v2);\n-        // Return the answer.\n-        s1 + s2\n-    }\n-\n-    let v1 = vec![1, 2, 3];\n-    let v2 = vec![4, 5, 6];\n-\n-    let answer = foo(&v1, &v2);\n-    println!(\"{}\", answer);\n-}\n-```\n-\n-Instead of taking `Vec<i32>`s as our arguments, we take a reference:\n-`&Vec<i32>`. And instead of passing `v1` and `v2` directly, we pass `&v1` and\n-`&v2`. We call the `&T` type a \u2018reference\u2019, and rather than owning the resource,\n-it borrows ownership. A binding that borrows something does not deallocate the\n-resource when it goes out of scope. This means that after the call to `foo()`,\n-we can use our original bindings again.\n-\n-References are immutable, like bindings. This means that inside of `foo()`,\n-the vectors can\u2019t be changed at all:\n-\n-```rust,ignore\n-fn foo(v: &Vec<i32>) {\n-     v.push(5);\n-}\n-\n-let v = vec![];\n-\n-foo(&v);\n-```\n-\n-will give us this error:\n-\n-```text\n-error: cannot borrow immutable borrowed content `*v` as mutable\n-v.push(5);\n-^\n-```\n-\n-Pushing a value mutates the vector, and so we aren\u2019t allowed to do it.\n-\n-# &mut references\n-\n-There\u2019s a second kind of reference: `&mut T`. A \u2018mutable reference\u2019 allows you\n-to mutate the resource you\u2019re borrowing. For example:\n-\n-```rust\n-let mut x = 5;\n-{\n-    let y = &mut x;\n-    *y += 1;\n-}\n-println!(\"{}\", x);\n-```\n-\n-This will print `6`. We make `y` a mutable reference to `x`, then add one to\n-the thing `y` points at. You\u2019ll notice that `x` had to be marked `mut` as well.\n-If it wasn\u2019t, we couldn\u2019t take a mutable borrow to an immutable value.\n-\n-You'll also notice we added an asterisk (`*`) in front of `y`, making it `*y`,\n-this is because `y` is a `&mut` reference. You'll need to use asterisks to\n-access the contents of a reference as well.\n-\n-Otherwise, `&mut` references are like references. There _is_ a large\n-difference between the two, and how they interact, though. You can tell\n-something is fishy in the above example, because we need that extra scope, with\n-the `{` and `}`. If we remove them, we get an error:\n-\n-```text\n-error: cannot borrow `x` as immutable because it is also borrowed as mutable\n-    println!(\"{}\", x);\n-                   ^\n-note: previous borrow of `x` occurs here; the mutable borrow prevents\n-subsequent moves, borrows, or modification of `x` until the borrow ends\n-        let y = &mut x;\n-                     ^\n-note: previous borrow ends here\n-fn main() {\n-\n-}\n-^\n-```\n-\n-As it turns out, there are rules.\n-\n-# The Rules\n-\n-Here are the rules for borrowing in Rust:\n-\n-First, any borrow must last for a scope no greater than that of the owner.\n-Second, you may have one or the other of these two kinds of borrows, but not\n-both at the same time:\n-\n-* one or more references (`&T`) to a resource,\n-* exactly one mutable reference (`&mut T`).\n-\n-\n-You may notice that this is very similar to, though not exactly the same as,\n-the definition of a data race:\n-\n-> There is a \u2018data race\u2019 when two or more pointers access the same memory\n-> location at the same time, where at least one of them is writing, and the\n-> operations are not synchronized.\n-\n-With references, you may have as many as you\u2019d like, since none of them are\n-writing. However, as we can only have one `&mut` at a time, it is impossible to\n-have a data race. This is how Rust prevents data races at compile time: we\u2019ll\n-get errors if we break the rules.\n-\n-With this in mind, let\u2019s consider our example again.\n-\n-## Thinking in scopes\n-\n-Here\u2019s the code:\n-\n-```rust,ignore\n-fn main() {\n-    let mut x = 5;\n-    let y = &mut x;\n-\n-    *y += 1;\n-\n-    println!(\"{}\", x);\n-}\n-```\n-\n-This code gives us this error:\n-\n-```text\n-error: cannot borrow `x` as immutable because it is also borrowed as mutable\n-    println!(\"{}\", x);\n-                   ^\n-```\n-\n-This is because we\u2019ve violated the rules: we have a `&mut T` pointing to `x`,\n-and so we aren\u2019t allowed to create any `&T`s. It's one or the other. The note\n-hints at how to think about this problem:\n-\n-```text\n-note: previous borrow ends here\n-fn main() {\n-\n-}\n-^\n-```\n-\n-In other words, the mutable borrow is held through the rest of our example. What\n-we want is for the mutable borrow by `y` to end so that the resource can be\n-returned to the owner, `x`. `x` can then provide an immutable borrow to `println!`.\n-In Rust, borrowing is tied to the scope that the borrow is valid for. And our\n-scopes look like this:\n-\n-```rust,ignore\n-fn main() {\n-    let mut x = 5;\n-\n-    let y = &mut x;    // -+ &mut borrow of `x` starts here.\n-                       //  |\n-    *y += 1;           //  |\n-                       //  |\n-    println!(\"{}\", x); // -+ - Try to borrow `x` here.\n-}                      // -+ &mut borrow of `x` ends here.\n-                       \n-```\n-\n-The scopes conflict: we can\u2019t make an `&x` while `y` is in scope.\n-\n-So when we add the curly braces:\n-\n-```rust\n-let mut x = 5;\n-\n-{\n-    let y = &mut x; // -+ &mut borrow starts here.\n-    *y += 1;        //  |\n-}                   // -+ ... and ends here.\n-\n-println!(\"{}\", x);  // <- Try to borrow `x` here.\n-```\n-\n-There\u2019s no problem. Our mutable borrow goes out of scope before we create an\n-immutable one. So scope is the key to seeing how long a borrow lasts for.\n-\n-## Issues borrowing prevents\n-\n-Why have these restrictive rules? Well, as we noted, these rules prevent data\n-races. What kinds of issues do data races cause? Here are a few.\n-\n-### Iterator invalidation\n-\n-One example is \u2018iterator invalidation\u2019, which happens when you try to mutate a\n-collection that you\u2019re iterating over. Rust\u2019s borrow checker prevents this from\n-happening:\n-\n-```rust\n-let mut v = vec![1, 2, 3];\n-\n-for i in &v {\n-    println!(\"{}\", i);\n-}\n-```\n-\n-This prints out one through three. As we iterate through the vector, we\u2019re\n-only given references to the elements. And `v` is itself borrowed as immutable,\n-which means we can\u2019t change it while we\u2019re iterating:\n-\n-```rust,ignore\n-let mut v = vec![1, 2, 3];\n-\n-for i in &v {\n-    println!(\"{}\", i);\n-    v.push(34);\n-}\n-```\n-\n-Here\u2019s the error:\n-\n-```text\n-error: cannot borrow `v` as mutable because it is also borrowed as immutable\n-    v.push(34);\n-    ^\n-note: previous borrow of `v` occurs here; the immutable borrow prevents\n-subsequent moves or mutable borrows of `v` until the borrow ends\n-for i in &v {\n-          ^\n-note: previous borrow ends here\n-for i in &v {\n-    println!(\u201c{}\u201d, i);\n-    v.push(34);\n-}\n-^\n-```\n-\n-We can\u2019t modify `v` because it\u2019s borrowed by the loop.\n-\n-### Use after free\n-\n-References must not live longer than the resource they refer to. Rust will\n-check the scopes of your references to ensure that this is true.\n-\n-If Rust didn\u2019t check this property, we could accidentally use a reference\n-which was invalid. For example:\n-\n-```rust,ignore\n-let y: &i32;\n-{\n-    let x = 5;\n-    y = &x;\n-}\n-\n-println!(\"{}\", y);\n-```\n-\n-We get this error:\n-\n-```text\n-error: `x` does not live long enough\n-    y = &x;\n-         ^\n-note: reference must be valid for the block suffix following statement 0 at\n-2:16...\n-let y: &i32;\n-{\n-    let x = 5;\n-    y = &x;\n-}\n-\n-note: ...but borrowed value is only valid for the block suffix following\n-statement 0 at 4:18\n-    let x = 5;\n-    y = &x;\n-}\n-```\n-\n-In other words, `y` is only valid for the scope where `x` exists. As soon as\n-`x` goes away, it becomes invalid to refer to it. As such, the error says that\n-the borrow \u2018doesn\u2019t live long enough\u2019 because it\u2019s not valid for the right\n-amount of time.\n-\n-The same problem occurs when the reference is declared _before_ the variable it\n-refers to. This is because resources within the same scope are freed in the\n-opposite order they were declared:\n-\n-```rust,ignore\n-let y: &i32;\n-let x = 5;\n-y = &x;\n-\n-println!(\"{}\", y);\n-```\n-\n-We get this error:\n-\n-```text\n-error: `x` does not live long enough\n-y = &x;\n-     ^\n-note: reference must be valid for the block suffix following statement 0 at\n-2:16...\n-    let y: &i32;\n-    let x = 5;\n-    y = &x;\n-\n-    println!(\"{}\", y);\n-}\n-\n-note: ...but borrowed value is only valid for the block suffix following\n-statement 1 at 3:14\n-    let x = 5;\n-    y = &x;\n-\n-    println!(\"{}\", y);\n-}\n-```\n-\n-In the above example, `y` is declared before `x`, meaning that `y` lives longer\n-than `x`, which is not allowed."}, {"sha": "af89ca8348424a6b2636631f71fc302892d0b55e", "filename": "src/doc/book/src/release-channels.md", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Frelease-channels.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Frelease-channels.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Frelease-channels.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,68 +0,0 @@\n-# Release Channels\n-\n-The Rust project uses a concept called \u2018release channels\u2019 to manage releases.\n-It\u2019s important to understand this process to choose which version of Rust\n-your project should use.\n-\n-# Overview\n-\n-There are three channels for Rust releases:\n-\n-* Nightly\n-* Beta\n-* Stable\n-\n-New nightly releases are created once a day. Every six weeks, the latest\n-nightly release is promoted to \u2018Beta\u2019. At that point, it will only receive\n-patches to fix serious errors. Six weeks later, the beta is promoted to\n-\u2018Stable\u2019, and becomes the next release of `1.x`.\n-\n-This process happens in parallel. So every six weeks, on the same day,\n-nightly goes to beta, beta goes to stable. When `1.x` is released, at\n-the same time, `1.(x + 1)-beta` is released, and the nightly becomes the\n-first version of `1.(x + 2)-nightly`.\n-\n-# Choosing a version\n-\n-Generally speaking, unless you have a specific reason, you should be using the\n-stable release channel. These releases are intended for a general audience.\n-\n-However, depending on your interest in Rust, you may choose to use nightly\n-instead. The basic tradeoff is this: in the nightly channel, you can use\n-unstable, new Rust features. However, unstable features are subject to change,\n-and so any new nightly release may break your code. If you use the stable\n-release, you cannot use experimental features, but the next release of Rust\n-will not cause significant issues through breaking changes.\n-\n-# Helping the ecosystem through CI\n-\n-What about beta? We encourage all Rust users who use the stable release channel\n-to also test against the beta channel in their continuous integration systems.\n-This will help alert the team in case there\u2019s an accidental regression.\n-\n-Additionally, testing against nightly can catch regressions even sooner, and so\n-if you don\u2019t mind a third build, we\u2019d appreciate testing against all channels.\n-\n-As an example, many Rust programmers use [Travis](https://travis-ci.org/) to\n-test their crates, which is free for open source projects. Travis [supports\n-Rust directly][travis], and you can use a `.travis.yml` file like this to\n-test on all channels:\n-\n-```yaml\n-language: rust\n-rust:\n-  - nightly\n-  - beta\n-  - stable\n-\n-matrix:\n-  allow_failures:\n-    - rust: nightly\n-```\n-\n-[travis]: http://docs.travis-ci.com/user/languages/rust/\n-\n-With this configuration, Travis will test all three channels, but if something\n-breaks on nightly, it won\u2019t fail your build. A similar configuration is\n-recommended for any CI system, check the documentation of the one you\u2019re\n-using for more details."}, {"sha": "ffc9d2b6976843fc312741d969e0fb5a33dc89e7", "filename": "src/doc/book/src/strings.md", "status": "removed", "additions": 0, "deletions": 195, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fstrings.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fstrings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fstrings.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,195 +0,0 @@\n-# Strings\n-\n-Strings are an important concept for any programmer to master. Rust\u2019s string\n-handling system is a bit different from other languages, due to its systems\n-focus. Any time you have a data structure of variable size, things can get\n-tricky, and strings are a re-sizable data structure. That being said, Rust\u2019s\n-strings also work differently than in some other systems languages, such as C.\n-\n-Let\u2019s dig into the details. A \u2018string\u2019 is a sequence of Unicode scalar values\n-encoded as a stream of UTF-8 bytes. All strings are guaranteed to be a valid\n-encoding of UTF-8 sequences. Additionally, unlike some systems languages,\n-strings are not NUL-terminated and can contain NUL bytes.\n-\n-Rust has two main types of strings: `&str` and `String`. Let\u2019s talk about\n-`&str` first. These are called \u2018string slices\u2019. A string slice has a fixed\n-size, and cannot be mutated. It is a reference to a sequence of UTF-8 bytes.\n-\n-```rust\n-let greeting = \"Hello there.\"; // greeting: &'static str\n-```\n-\n-`\"Hello there.\"` is a string literal and its type is `&'static str`. A string\n-literal is a string slice that is statically allocated, meaning that it\u2019s saved\n-inside our compiled program, and exists for the entire duration it runs. The\n-`greeting` binding is a reference to this statically allocated string. Any\n-function expecting a string slice will also accept a string literal.\n-\n-String literals can span multiple lines. There are two forms. The first will\n-include the newline and the leading spaces:\n-\n-```rust\n-let s = \"foo\n-    bar\";\n-\n-assert_eq!(\"foo\\n    bar\", s);\n-```\n-\n-The second, with a `\\`, trims the spaces and the newline:\n-\n-```rust\n-let s = \"foo\\\n-    bar\";\n-\n-assert_eq!(\"foobar\", s);\n-```\n-\n-Note that you normally cannot access a `str` directly, but only through a `&str`\n-reference. This is because `str` is an unsized type which requires additional\n-runtime information to be usable. For more information see the chapter on\n-[unsized types][ut].\n-\n-Rust has more than only `&str`s though. A `String` is a heap-allocated string.\n-This string is growable, and is also guaranteed to be UTF-8. `String`s are\n-commonly created by converting from a string slice using the `to_string`\n-method.\n-\n-```rust\n-let mut s = \"Hello\".to_string(); // mut s: String\n-println!(\"{}\", s);\n-\n-s.push_str(\", world.\");\n-println!(\"{}\", s);\n-```\n-\n-`String`s will coerce into `&str` with an `&`:\n-\n-```rust\n-fn takes_slice(slice: &str) {\n-    println!(\"Got: {}\", slice);\n-}\n-\n-fn main() {\n-    let s = \"Hello\".to_string();\n-    takes_slice(&s);\n-}\n-```\n-\n-This coercion does not happen for functions that accept one of `&str`\u2019s traits\n-instead of `&str`. For example, [`TcpStream::connect`][connect] has a parameter\n-of type `ToSocketAddrs`. A `&str` is okay but a `String` must be explicitly\n-converted using `&*`.\n-\n-```rust,no_run\n-use std::net::TcpStream;\n-\n-TcpStream::connect(\"192.168.0.1:3000\"); // Parameter is of type &str.\n-\n-let addr_string = \"192.168.0.1:3000\".to_string();\n-TcpStream::connect(&*addr_string); // Convert `addr_string` to &str.\n-```\n-\n-Viewing a `String` as a `&str` is cheap, but converting the `&str` to a\n-`String` involves allocating memory. No reason to do that unless you have to!\n-\n-## Indexing\n-\n-Because strings are valid UTF-8, they do not support indexing:\n-\n-```rust,ignore\n-let s = \"hello\";\n-\n-println!(\"The first letter of s is {}\", s[0]); // ERROR!!!\n-```\n-\n-Usually, access to a vector with `[]` is very fast. But, because each character\n-in a UTF-8 encoded string can be multiple bytes, you have to walk over the\n-string to find the n\u1d57\u02b0 letter of a string. This is a significantly more\n-expensive operation, and we don\u2019t want to be misleading. Furthermore, \u2018letter\u2019\n-isn\u2019t something defined in Unicode, exactly. We can choose to look at a string as\n-individual bytes, or as codepoints:\n-\n-```rust\n-let hachiko = \"\u5fe0\u72ac\u30cf\u30c1\u516c\";\n-\n-for b in hachiko.as_bytes() {\n-    print!(\"{}, \", b);\n-}\n-\n-println!(\"\");\n-\n-for c in hachiko.chars() {\n-    print!(\"{}, \", c);\n-}\n-\n-println!(\"\");\n-```\n-\n-This prints:\n-\n-```text\n-229, 191, 160, 231, 138, 172, 227, 131, 143, 227, 131, 129, 229, 133, 172,\n-\u5fe0, \u72ac, \u30cf, \u30c1, \u516c,\n-```\n-\n-As you can see, there are more bytes than `char`s.\n-\n-You can get something similar to an index like this:\n-\n-```rust\n-# let hachiko = \"\u5fe0\u72ac\u30cf\u30c1\u516c\";\n-let dog = hachiko.chars().nth(1); // Kinda like `hachiko[1]`.\n-```\n-\n-This emphasizes that we have to walk from the beginning of the list of `chars`.\n-\n-## Slicing\n-\n-You can get a slice of a string with the slicing syntax:\n-\n-```rust\n-let dog = \"hachiko\";\n-let hachi = &dog[0..5];\n-```\n-\n-But note that these are _byte_ offsets, not _character_ offsets. So\n-this will fail at runtime:\n-\n-```rust,should_panic\n-let dog = \"\u5fe0\u72ac\u30cf\u30c1\u516c\";\n-let hachi = &dog[0..2];\n-```\n-\n-with this error:\n-\n-```text\n-thread 'main' panicked at 'byte index 2 is not a char boundary; it is inside '\u5fe0'\n-(bytes 0..3) of `\u5fe0\u72ac\u30cf\u30c1\u516c`'\n-```\n-\n-## Concatenation\n-\n-If you have a `String`, you can concatenate a `&str` to the end of it:\n-\n-```rust\n-let hello = \"Hello \".to_string();\n-let world = \"world!\";\n-\n-let hello_world = hello + world;\n-```\n-\n-But if you have two `String`s, you need an `&`:\n-\n-```rust\n-let hello = \"Hello \".to_string();\n-let world = \"world!\".to_string();\n-\n-let hello_world = hello + &world;\n-```\n-\n-This is because `&String` can automatically coerce to a `&str`. This is a\n-feature called \u2018[`Deref` coercions][dc]\u2019.\n-\n-[ut]: unsized-types.html\n-[dc]: deref-coercions.html\n-[connect]: ../std/net/struct.TcpStream.html#method.connect"}, {"sha": "3efa4f0e0a8d85898551218a9e9212d305e0d58b", "filename": "src/doc/book/src/structs.md", "status": "removed", "additions": 0, "deletions": 279, "changes": 279, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fstructs.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fstructs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fstructs.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,279 +0,0 @@\n-# Structs\n-\n-`struct`s are a way of creating more complex data types. For example, if we were\n-doing calculations involving coordinates in 2D space, we would need both an `x`\n-and a `y` value:\n-\n-```rust\n-let origin_x = 0;\n-let origin_y = 0;\n-```\n-\n-A `struct` lets us combine these two into a single, unified datatype with `x`\n-and `y` as field labels:\n-\n-```rust\n-struct Point {\n-    x: i32,\n-    y: i32,\n-}\n-\n-fn main() {\n-    let origin = Point { x: 0, y: 0 }; // origin: Point\n-\n-    println!(\"The origin is at ({}, {})\", origin.x, origin.y);\n-}\n-```\n-\n-There\u2019s a lot going on here, so let\u2019s break it down. We declare a `struct` with\n-the `struct` keyword, and then with a name. By convention, `struct`s begin with\n-a capital letter and are camel cased: `PointInSpace`, not `Point_In_Space`.\n-\n-We can create an instance of our `struct` via `let`, as usual, but we use a `key:\n-value` style syntax to set each field. The order doesn\u2019t need to be the same as\n-in the original declaration.\n-\n-Finally, because fields have names, we can access them through dot\n-notation: `origin.x`.\n-\n-The values in `struct`s are immutable by default, like other bindings in Rust.\n-Use `mut` to make them mutable:\n-\n-```rust\n-struct Point {\n-    x: i32,\n-    y: i32,\n-}\n-\n-fn main() {\n-    let mut point = Point { x: 0, y: 0 };\n-\n-    point.x = 5;\n-\n-    println!(\"The point is at ({}, {})\", point.x, point.y);\n-}\n-```\n-\n-This will print `The point is at (5, 0)`.\n-\n-Rust does not support field mutability at the language level, so you cannot\n-write something like this:\n-\n-```rust,ignore\n-struct Point {\n-    mut x: i32, // This causes an error.\n-    y: i32,\n-}\n-```\n-\n-Mutability is a property of the binding, not of the structure itself. If you\u2019re\n-used to field-level mutability, this may seem strange at first, but it\n-significantly simplifies things. It even lets you make things mutable on a temporary\n-basis:\n-\n-```rust,ignore\n-struct Point {\n-    x: i32,\n-    y: i32,\n-}\n-\n-fn main() {\n-    let mut point = Point { x: 0, y: 0 };\n-\n-    point.x = 5;\n-\n-    let point = point; // `point` is now immutable.\n-\n-    point.y = 6; // This causes an error.\n-}\n-```\n-\n-Your structure can still contain `&mut` references, which will let\n-you do some kinds of mutation:\n-\n-```rust\n-struct Point {\n-    x: i32,\n-    y: i32,\n-}\n-\n-struct PointRef<'a> {\n-    x: &'a mut i32,\n-    y: &'a mut i32,\n-}\n-\n-fn main() {\n-    let mut point = Point { x: 0, y: 0 };\n-\n-    {\n-        let r = PointRef { x: &mut point.x, y: &mut point.y };\n-\n-        *r.x = 5;\n-        *r.y = 6;\n-    }\n-\n-    assert_eq!(5, point.x);\n-    assert_eq!(6, point.y);\n-}\n-```\n-\n-Initialization of a data structure (struct, enum, union) can be simplified when\n-fields of the data structure are initialized with variables of the same\n-names as the fields.\n-\n-```\n-#[derive(Debug)]\n-struct Person<'a> {\n-    name: &'a str,\n-    age: u8\n-}\n-\n-fn main() {\n-    // Create struct with field init shorthand\n-    let name = \"Peter\";\n-    let age = 27;\n-    let peter = Person { name, age };\n-\n-    // Debug-print struct\n-    println!(\"{:?}\", peter);\n-}\n-```\n-\n-# Update syntax\n-\n-A `struct` can include `..` to indicate that you want to use a copy of some\n-other `struct` for some of the values. For example:\n-\n-```rust\n-struct Point3d {\n-    x: i32,\n-    y: i32,\n-    z: i32,\n-}\n-\n-let mut point = Point3d { x: 0, y: 0, z: 0 };\n-point = Point3d { y: 1, .. point };\n-```\n-\n-This gives `point` a new `y`, but keeps the old `x` and `z` values. It doesn\u2019t\n-have to be the same `struct` either, you can use this syntax when making new\n-ones, and it will copy the values you don\u2019t specify:\n-\n-```rust\n-# struct Point3d {\n-#     x: i32,\n-#     y: i32,\n-#     z: i32,\n-# }\n-let origin = Point3d { x: 0, y: 0, z: 0 };\n-let point = Point3d { z: 1, x: 2, .. origin };\n-```\n-\n-# Tuple structs\n-\n-Rust has another data type that\u2019s like a hybrid between a [tuple][tuple] and a\n-`struct`, called a \u2018tuple struct\u2019. Tuple structs have a name, but their fields\n-don't. They are declared with the `struct` keyword, and then with a name\n-followed by a tuple:\n-\n-[tuple]: primitive-types.html#tuples\n-\n-```rust\n-struct Color(i32, i32, i32);\n-struct Point(i32, i32, i32);\n-\n-let black = Color(0, 0, 0);\n-let origin = Point(0, 0, 0);\n-```\n-\n-Here, `black` and `origin` are not the same type, even though they contain the\n-same values.\n-\n-The members of a tuple struct may be accessed by dot notation or destructuring\n-`let`, just like regular tuples:\n-\n-```rust\n-# struct Color(i32, i32, i32);\n-# struct Point(i32, i32, i32);\n-# let black = Color(0, 0, 0);\n-# let origin = Point(0, 0, 0);\n-let black_r = black.0;\n-let Point(_, origin_y, origin_z) = origin;\n-```\n-\n-Patterns like `Point(_, origin_y, origin_z)` are also used in\n-[match expressions][match].\n-\n-One case when a tuple struct is very useful is when it has only one element.\n-We call this the \u2018newtype\u2019 pattern, because it allows you to create a new type\n-that is distinct from its contained value and also expresses its own semantic\n-meaning:\n-\n-```rust\n-struct Inches(i32);\n-\n-let length = Inches(10);\n-\n-let Inches(integer_length) = length;\n-println!(\"length is {} inches\", integer_length);\n-```\n-\n-As above, you can extract the inner integer type through a destructuring `let`.\n-In this case, the `let Inches(integer_length)` assigns `10` to `integer_length`.\n-We could have used dot notation to do the same thing:\n-\n-```rust\n-# struct Inches(i32);\n-# let length = Inches(10);\n-let integer_length = length.0;\n-```\n-\n-It's always possible to use a `struct` instead of a tuple struct, and can be\n-clearer. We could write `Color` and `Point` like this instead:\n-\n-```rust\n-struct Color {\n-    red: i32,\n-    blue: i32,\n-    green: i32,\n-}\n-\n-struct Point {\n-    x: i32,\n-    y: i32,\n-    z: i32,\n-}\n-```\n-\n-Good names are important, and while values in a tuple struct can be\n-referenced with dot notation as well, a `struct` gives us actual names,\n-rather than positions.\n-\n-[match]: match.html\n-\n-# Unit-like structs\n-\n-You can define a `struct` with no members at all:\n-\n-```rust,compile_fail,E0423\n-struct Electron {} // Use empty braces...\n-struct Proton;     // ...or just a semicolon.\n-\n-// Use the same notation when creating an instance.\n-let x = Electron {};\n-let y = Proton;\n-let z = Electron; // Error\n-```\n-\n-Such a `struct` is called \u2018unit-like\u2019 because it resembles the empty\n-tuple, `()`, sometimes called \u2018unit\u2019. Like a tuple struct, it defines a\n-new type.\n-\n-This is rarely useful on its own (although sometimes it can serve as a\n-marker type), but in combination with other features, it can become\n-useful. For instance, a library may ask you to create a structure that\n-implements a certain [trait][trait] to handle events. If you don\u2019t have\n-any data you need to store in the structure, you can create a\n-unit-like `struct`.\n-\n-[trait]: traits.html"}, {"sha": "aa4c1251024de218ac7787a6249ae81f0669e2d0", "filename": "src/doc/book/src/syntax-and-semantics.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-and-semantics.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-and-semantics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-and-semantics.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,10 +0,0 @@\n-# Syntax and Semantics\n-\n-This chapter breaks Rust down into small chunks, one for each concept.\n-\n-If you\u2019d like to learn Rust from the bottom up, reading this in order is a\n-great way to do that.\n-\n-These sections also form a reference for each concept, so if you\u2019re reading\n-another tutorial and find something confusing, you can find it explained\n-somewhere in here."}, {"sha": "a06520f4ac2f31769eb18f95615e9944da7baad3", "filename": "src/doc/book/src/syntax-index.md", "status": "removed", "additions": 0, "deletions": 253, "changes": 253, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-index.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-index.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-index.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,253 +0,0 @@\n-# Syntax Index\n-\n-## Keywords\n-\n-* `as`: primitive casting, or disambiguating the specific trait containing an item.  See [Casting Between Types (`as`)], [Universal Function Call Syntax (Angle-bracket Form)], [Associated Types].\n-* `break`: break out of loop.  See [Loops (Ending Iteration Early)].\n-* `const`: constant items and constant raw pointers.  See [`const` and `static`], [Raw Pointers].\n-* `continue`: continue to next loop iteration.  See [Loops (Ending Iteration Early)].\n-* `crate`: external crate linkage.  See [Crates and Modules (Importing External Crates)].\n-* `else`: fallback for `if` and `if let` constructs.  See [`if`], [`if let`].\n-* `enum`: defining enumeration.  See [Enums].\n-* `extern`: external crate, function, and variable linkage.  See [Crates and Modules (Importing External Crates)], [Foreign Function Interface].\n-* `false`: boolean false literal.  See [Primitive Types (Booleans)].\n-* `fn`: function definition and function pointer types.  See [Functions].\n-* `for`: iterator loop, part of trait `impl` syntax, and higher-ranked lifetime syntax.  See [Loops (`for`)], [Method Syntax].\n-* `if`: conditional branching.  See [`if`], [`if let`].\n-* `impl`: inherent and trait implementation blocks.  See [Method Syntax].\n-* `in`: part of `for` loop syntax.  See [Loops (`for`)].\n-* `let`: variable binding.  See [Variable Bindings].\n-* `loop`: unconditional, infinite loop.  See [Loops (`loop`)].\n-* `match`: pattern matching.  See [Match].\n-* `mod`: module declaration.  See [Crates and Modules (Defining Modules)].\n-* `move`: part of closure syntax.  See [Closures (`move` closures)].\n-* `mut`: denotes mutability in pointer types and pattern bindings.  See [Mutability].\n-* `pub`: denotes public visibility in `struct` fields, `impl` blocks, and modules.  See [Crates and Modules (Exporting a Public Interface)].\n-* `ref`: by-reference binding.  See [Patterns (`ref` and `ref mut`)].\n-* `return`: return from function.  See [Functions (Early Returns)].\n-* `Self`: implementor type alias.  See [Traits].\n-* `self`: method subject.  See [Method Syntax (Method Calls)].\n-* `static`: global variable.  See [`const` and `static` (`static`)].\n-* `struct`: structure definition.  See [Structs].\n-* `trait`: trait definition.  See [Traits].\n-* `true`: boolean true literal.  See [Primitive Types (Booleans)].\n-* `type`: type alias, and associated type definition.  See [`type` Aliases], [Associated Types].\n-* `unsafe`: denotes unsafe code, functions, traits, and implementations.  See [Unsafe].\n-* `use`: import symbols into scope.  See [Crates and Modules (Importing Modules with `use`)].\n-* `where`: type constraint clauses.  See [Traits (`where` clause)].\n-* `while`: conditional loop.  See [Loops (`while`)].\n-\n-## Operators and Symbols\n-\n-* `!` (`ident!(\u2026)`, `ident!{\u2026}`, `ident![\u2026]`): denotes macro expansion.  See [Macros].\n-* `!` (`!expr`): bitwise or logical complement.  Overloadable (`Not`).\n-* `!=` (`var != expr`): nonequality comparison.  Overloadable (`PartialEq`).\n-* `%` (`expr % expr`): arithmetic remainder.  Overloadable (`Rem`).\n-* `%=` (`var %= expr`): arithmetic remainder & assignment. Overloadable (`RemAssign`).\n-* `&` (`expr & expr`): bitwise and.  Overloadable (`BitAnd`).\n-* `&` (`&expr`, `&mut expr`): borrow.  See [References and Borrowing].\n-* `&` (`&type`, `&mut type`, `&'a type`, `&'a mut type`): borrowed pointer type.  See [References and Borrowing].\n-* `&=` (`var &= expr`): bitwise and & assignment. Overloadable (`BitAndAssign`).\n-* `&&` (`expr && expr`): logical and.\n-* `*` (`expr * expr`): arithmetic multiplication.  Overloadable (`Mul`).\n-* `*` (`*expr`): dereference.\n-* `*` (`*const type`, `*mut type`): raw pointer.  See [Raw Pointers].\n-* `*=` (`var *= expr`): arithmetic multiplication & assignment. Overloadable (`MulAssign`).\n-* `+` (`expr + expr`): arithmetic addition.  Overloadable (`Add`).\n-* `+` (`trait + trait`, `'a + trait`): compound type constraint.  See [Traits (Multiple Trait Bounds)].\n-* `+=` (`var += expr`): arithmetic addition & assignment. Overloadable (`AddAssign`).\n-* `,`: argument and element separator.  See [Attributes], [Functions], [Structs], [Generics], [Match], [Closures], [Crates and Modules (Importing Modules with `use`)].\n-* `-` (`expr - expr`): arithmetic subtraction.  Overloadable (`Sub`).\n-* `-` (`- expr`): arithmetic negation.  Overloadable (`Neg`).\n-* `-=` (`var -= expr`): arithmetic subtraction & assignment. Overloadable (`SubAssign`).\n-* `->` (`fn(\u2026) -> type`, `|\u2026| -> type`): function and closure return type.  See [Functions], [Closures].\n-* `.` (`expr.ident`): member access.  See [Structs], [Method Syntax].\n-* `..` (`..`, `expr..`, `..expr`, `expr..expr`): right-exclusive range literal.\n-* `..` (`..expr`): struct literal update syntax.  See [Structs (Update syntax)].\n-* `..` (`variant(x, ..)`, `struct_type { x, .. }`): \"and the rest\" pattern binding.  See [Patterns (Ignoring bindings)].\n-* `...` (`...expr`, `expr...expr`) *in an expression*: inclusive range expression. See [Iterators].\n-* `...` (`expr...expr`) *in a pattern*: inclusive range pattern.  See [Patterns (Ranges)].\n-* `/` (`expr / expr`): arithmetic division.  Overloadable (`Div`).\n-* `/=` (`var /= expr`): arithmetic division & assignment. Overloadable (`DivAssign`).\n-* `:` (`pat: type`, `ident: type`): constraints.  See [Variable Bindings], [Functions], [Structs], [Traits].\n-* `:` (`ident: expr`): struct field initializer.  See [Structs].\n-* `:` (`'a: loop {\u2026}`): loop label.  See [Loops (Loops Labels)].\n-* `;`: statement and item terminator.\n-* `;` (`[\u2026; len]`): part of fixed-size array syntax.  See [Primitive Types (Arrays)].\n-* `<<` (`expr << expr`): left-shift.  Overloadable (`Shl`).\n-* `<<=` (`var <<= expr`): left-shift & assignment. Overloadable (`ShlAssign`).\n-* `<` (`expr < expr`): less-than comparison.  Overloadable (`PartialOrd`).\n-* `<=` (`var <= expr`): less-than or equal-to comparison.  Overloadable (`PartialOrd`).\n-* `=` (`var = expr`, `ident = type`): assignment/equivalence.  See [Variable Bindings], [`type` Aliases], generic parameter defaults.\n-* `==` (`var == expr`): equality comparison.  Overloadable (`PartialEq`).\n-* `=>` (`pat => expr`): part of match arm syntax.  See [Match].\n-* `>` (`expr > expr`): greater-than comparison.  Overloadable (`PartialOrd`).\n-* `>=` (`var >= expr`): greater-than or equal-to comparison.  Overloadable (`PartialOrd`).\n-* `>>` (`expr >> expr`): right-shift.  Overloadable (`Shr`).\n-* `>>=` (`var >>= expr`): right-shift & assignment. Overloadable (`ShrAssign`).\n-* `@` (`ident @ pat`): pattern binding.  See [Patterns (Bindings)].\n-* `^` (`expr ^ expr`): bitwise exclusive or.  Overloadable (`BitXor`).\n-* `^=` (`var ^= expr`): bitwise exclusive or & assignment. Overloadable (`BitXorAssign`).\n-* `|` (`expr | expr`): bitwise or.  Overloadable (`BitOr`).\n-* `|` (`pat | pat`): pattern alternatives.  See [Patterns (Multiple patterns)].\n-* `|` (`|\u2026| expr`): closures.  See [Closures].\n-* `|=` (`var |= expr`): bitwise or & assignment. Overloadable (`BitOrAssign`).\n-* `||` (`expr || expr`): logical or.\n-* `_`: \"ignored\" pattern binding (see [Patterns (Ignoring bindings)]). Also used to make integer-literals readable (see [Reference (Integer literals)]).\n-* `?` (`expr?`): Error propagation. Returns early when `Err(_)` is encountered, unwraps otherwise. Similar to the [`try!` macro].\n-\n-## Other Syntax\n-\n-<!-- Various bits of standalone stuff. -->\n-\n-* `'ident`: named lifetime or loop label.  See [Lifetimes], [Loops (Loops Labels)].\n-* `\u2026u8`, `\u2026i32`, `\u2026f64`, `\u2026usize`, \u2026: numeric literal of specific type.\n-* `\"\u2026\"`: string literal.  See [Strings].\n-* `r\"\u2026\"`, `r#\"\u2026\"#`, `r##\"\u2026\"##`, \u2026: raw string literal, escape characters are not processed. See [Reference (Raw String Literals)].\n-* `b\"\u2026\"`: byte string literal, constructs a `[u8]` instead of a string. See [Reference (Byte String Literals)].\n-* `br\"\u2026\"`, `br#\"\u2026\"#`, `br##\"\u2026\"##`, \u2026: raw byte string literal, combination of raw and byte string literal. See [Reference (Raw Byte String Literals)].\n-* `'\u2026'`: character literal.  See [Primitive Types (`char`)].\n-* `b'\u2026'`: ASCII byte literal.\n-* `|\u2026| expr`: closure.  See [Closures].\n-\n-<!-- Path-related syntax -->\n-\n-* `ident::ident`: path.  See [Crates and Modules (Defining Modules)].\n-* `::path`: path relative to the crate root (*i.e.* an explicitly absolute path).  See [Crates and Modules (Re-exporting with `pub use`)].\n-* `self::path`: path relative to the current module (*i.e.* an explicitly relative path).  See [Crates and Modules (Re-exporting with `pub use`)].\n-* `super::path`: path relative to the parent of the current module.  See [Crates and Modules (Re-exporting with `pub use`)].\n-* `type::ident`, `<type as trait>::ident`: associated constants, functions, and types.  See [Associated Types].\n-* `<type>::\u2026`: associated item for a type which cannot be directly named (*e.g.* `<&T>::\u2026`, `<[T]>::\u2026`, *etc.*).  See [Associated Types].\n-* `trait::method(\u2026)`: disambiguating a method call by naming the trait which defines it. See [Universal Function Call Syntax].\n-* `type::method(\u2026)`: disambiguating a method call by naming the type for which it's defined. See [Universal Function Call Syntax].\n-* `<type as trait>::method(\u2026)`: disambiguating a method call by naming the trait _and_ type. See [Universal Function Call Syntax (Angle-bracket Form)].\n-\n-<!-- Generics -->\n-\n-* `path<\u2026>` (*e.g.* `Vec<u8>`): specifies parameters to generic type *in a type*.  See [Generics].\n-* `path::<\u2026>`, `method::<\u2026>` (*e.g.* `\"42\".parse::<i32>()`): specifies parameters to generic type, function, or method *in an expression*.  See [Generics \u00a7 Resolving ambiguities](generics.html#resolving-ambiguities).\n-* `fn ident<\u2026> \u2026`: define generic function.  See [Generics].\n-* `struct ident<\u2026> \u2026`: define generic structure.  See [Generics].\n-* `enum ident<\u2026> \u2026`: define generic enumeration.  See [Generics].\n-* `impl<\u2026> \u2026`: define generic implementation.\n-* `for<\u2026> type`: higher-ranked lifetime bounds.\n-* `type<ident=type>` (*e.g.* `Iterator<Item=T>`): a generic type where one or more associated types have specific assignments.  See [Associated Types].\n-\n-<!-- Constraints -->\n-\n-* `T: U`: generic parameter `T` constrained to types that implement `U`.  See [Traits].\n-* `T: 'a`: generic type `T` must outlive lifetime `'a`. When we say that a type 'outlives' the lifetime, we mean that it cannot transitively contain any references with lifetimes shorter than `'a`.\n-* `T : 'static`: The generic type `T` contains no borrowed references other than `'static` ones.\n-* `'b: 'a`: generic lifetime `'b` must outlive lifetime `'a`.\n-* `T: ?Sized`: allow generic type parameter to be a dynamically-sized type.  See [Unsized Types (`?Sized`)].\n-* `'a + trait`, `trait + trait`: compound type constraint.  See [Traits (Multiple Trait Bounds)].\n-\n-<!-- Macros and attributes -->\n-\n-* `#[meta]`: outer attribute.  See [Attributes].\n-* `#![meta]`: inner attribute.  See [Attributes].\n-* `$ident`: macro substitution.  See [Macros].\n-* `$ident:kind`: macro capture.  See [Macros].\n-* `$(\u2026)\u2026`: macro repetition.  See [Macros].\n-\n-<!-- Comments -->\n-\n-* `//`: line comment.  See [Comments].\n-* `//!`: inner line doc comment.  See [Comments].\n-* `///`: outer line doc comment.  See [Comments].\n-* `/*\u2026*/`: block comment.  See [Comments].\n-* `/*!\u2026*/`: inner block doc comment.  See [Comments].\n-* `/**\u2026*/`: outer block doc comment.  See [Comments].\n-\n-<!-- Special types -->\n-\n-* `!`: always empty Never type.  See [Diverging Functions].\n-\n-<!-- Various things involving parens and tuples -->\n-\n-* `()`: empty tuple (*a.k.a.* unit), both literal and type.\n-* `(expr)`: parenthesized expression.\n-* `(expr,)`: single-element tuple expression.  See [Primitive Types (Tuples)].\n-* `(type,)`: single-element tuple type.  See [Primitive Types (Tuples)].\n-* `(expr, \u2026)`: tuple expression.  See [Primitive Types (Tuples)].\n-* `(type, \u2026)`: tuple type.  See [Primitive Types (Tuples)].\n-* `expr(expr, \u2026)`: function call expression.  Also used to initialize tuple `struct`s and tuple `enum` variants.  See [Functions].\n-* `ident!(\u2026)`, `ident!{\u2026}`, `ident![\u2026]`: macro invocation.  See [Macros].\n-* `expr.0`, `expr.1`, \u2026: tuple indexing.  See [Primitive Types (Tuple Indexing)].\n-\n-<!-- Bracey things -->\n-\n-* `{\u2026}`: block expression.\n-* `Type {\u2026}`: `struct` literal.  See [Structs].\n-\n-<!-- Brackety things -->\n-\n-* `[\u2026]`: array literal.  See [Primitive Types (Arrays)].\n-* `[expr; len]`: array literal containing `len` copies of `expr`.  See [Primitive Types (Arrays)].\n-* `[type; len]`: array type containing `len` instances of `type`.  See [Primitive Types (Arrays)].\n-* `expr[expr]`: collection indexing.  Overloadable (`Index`, `IndexMut`).\n-* `expr[..]`, `expr[a..]`, `expr[..b]`, `expr[a..b]`: collection indexing pretending to be collection slicing, using `Range`, `RangeFrom`, `RangeTo`, `RangeFull` as the \"index\".\n-\n-[`const` and `static` (`static`)]: const-and-static.html#static\n-[`const` and `static`]: const-and-static.html\n-[`if let`]: if-let.html\n-[`if`]: if.html\n-[`type` Aliases]: type-aliases.html\n-[Associated Types]: associated-types.html\n-[Attributes]: attributes.html\n-[Casting Between Types (`as`)]: casting-between-types.html#as\n-[Closures (`move` closures)]: closures.html#move-closures\n-[Closures]: closures.html\n-[Comments]: comments.html\n-[Crates and Modules (Defining Modules)]: crates-and-modules.html#defining-modules\n-[Crates and Modules (Exporting a Public Interface)]: crates-and-modules.html#exporting-a-public-interface\n-[Crates and Modules (Importing External Crates)]: crates-and-modules.html#importing-external-crates\n-[Crates and Modules (Importing Modules with `use`)]: crates-and-modules.html#importing-modules-with-use\n-[Crates and Modules (Re-exporting with `pub use`)]: crates-and-modules.html#re-exporting-with-pub-use\n-[Diverging Functions]: functions.html#diverging-functions\n-[Enums]: enums.html\n-[Foreign Function Interface]: ffi.html\n-[Functions (Early Returns)]: functions.html#early-returns\n-[Functions]: functions.html\n-[Generics]: generics.html\n-[Iterators]: iterators.html\n-[`try!` macro]: error-handling.html#the-try-macro\n-[Lifetimes]: lifetimes.html\n-[Loops (`for`)]: loops.html#for\n-[Loops (`loop`)]: loops.html#loop\n-[Loops (`while`)]: loops.html#while\n-[Loops (Ending Iteration Early)]: loops.html#ending-iteration-early\n-[Loops (Loops Labels)]: loops.html#loop-labels\n-[Macros]: macros.html\n-[Match]: match.html\n-[Method Syntax (Method Calls)]: method-syntax.html#method-calls\n-[Method Syntax]: method-syntax.html\n-[Mutability]: mutability.html\n-[Operators and Overloading]: operators-and-overloading.html\n-[Patterns (`ref` and `ref mut`)]: patterns.html#ref-and-ref-mut\n-[Patterns (Bindings)]: patterns.html#bindings\n-[Patterns (Ignoring bindings)]: patterns.html#ignoring-bindings\n-[Patterns (Multiple patterns)]: patterns.html#multiple-patterns\n-[Patterns (Ranges)]: patterns.html#ranges\n-[Primitive Types (`char`)]: primitive-types.html#char\n-[Primitive Types (Arrays)]: primitive-types.html#arrays\n-[Primitive Types (Booleans)]: primitive-types.html#booleans\n-[Primitive Types (Tuple Indexing)]: primitive-types.html#tuple-indexing\n-[Primitive Types (Tuples)]: primitive-types.html#tuples\n-[Raw Pointers]: raw-pointers.html\n-[Reference (Byte String Literals)]: ../reference/tokens.html/#byte-string-literals\n-[Reference (Integer literals)]: ../reference/tokens.html#integer-literals\n-[Reference (Raw Byte String Literals)]: ../reference/tokens.html#raw-byte-string-literals\n-[Reference (Raw String Literals)]: ../reference/tokens.html#raw-string-literals\n-[References and Borrowing]: references-and-borrowing.html\n-[Strings]: strings.html\n-[Structs (Update syntax)]: structs.html#update-syntax\n-[Structs]: structs.html\n-[Traits (`where` clause)]: traits.html#where-clause\n-[Traits (Multiple Trait Bounds)]: traits.html#multiple-trait-bounds\n-[Traits]: traits.html\n-[Universal Function Call Syntax]: ufcs.html\n-[Universal Function Call Syntax (Angle-bracket Form)]: ufcs.html#angle-bracket-form\n-[Unsafe]: unsafe.html\n-[Unsized Types (`?Sized`)]: unsized-types.html#sized\n-[Variable Bindings]: variable-bindings.html"}, {"sha": "b4f580fcdfbef2db0ffb8a0fd605ff569afa8531", "filename": "src/doc/book/src/testing.md", "status": "removed", "additions": 0, "deletions": 633, "changes": 633, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ftesting.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,633 +0,0 @@\n-# Testing\n-\n-> Program testing can be a very effective way to show the presence of bugs, but\n-> it is hopelessly inadequate for showing their absence.\n->\n-> Edsger W. Dijkstra, \"The Humble Programmer\" (1972)\n-\n-Let's talk about how to test Rust code. What we will not be talking about is\n-the right way to test Rust code. There are many schools of thought regarding\n-the right and wrong way to write tests. All of these approaches use the same\n-basic tools, and so we'll show you the syntax for using them.\n-\n-# The `test` attribute\n-\n-At its simplest, a test in Rust is a function that's annotated with the `test`\n-attribute. Let's make a new project with Cargo called `adder`:\n-\n-```bash\n-$ cargo new adder\n-$ cd adder\n-```\n-\n-Cargo will automatically generate a simple test when you make a new project.\n-Here's the contents of `src/lib.rs`:\n-\n-```rust,ignore\n-# // The next line exists to trick play.rust-lang.org into running our code as a\n-# // test:\n-# // fn main\n-#\n-#[cfg(test)]\n-mod tests {\n-    #[test]\n-    fn it_works() {\n-    }\n-}\n-```\n-\n-For now, let's remove the `mod` bit, and focus on just the function:\n-\n-```rust,ignore\n-# // The next line exists to trick play.rust-lang.org into running our code as a\n-# // test:\n-# // fn main\n-#\n-#[test]\n-fn it_works() {\n-}\n-```\n-\n-Note the `#[test]`. This attribute indicates that this is a test function. It\n-currently has no body. That's good enough to pass! We can run the tests with\n-`cargo test`:\n-\n-```bash\n-$ cargo test\n-   Compiling adder v0.1.0 (file:///home/you/projects/adder)\n-    Finished debug [unoptimized + debuginfo] target(s) in 0.15 secs\n-     Running target/debug/deps/adder-941f01916ca4a642\n-\n-running 1 test\n-test it_works ... ok\n-\n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n-\n-   Doc-tests adder\n-\n-running 0 tests\n-\n-test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n-```\n-\n-Cargo compiled and ran our tests. There are two sets of output here: one\n-for the test we wrote, and another for documentation tests. We'll talk about\n-those later. For now, see this line:\n-\n-```text\n-test it_works ... ok\n-```\n-\n-Note the `it_works`. This comes from the name of our function:\n-\n-```rust\n-# fn main() {\n-fn it_works() {\n-}\n-# }\n-```\n-\n-We also get a summary line:\n-\n-```text\n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n-```\n-\n-So why does our do-nothing test pass? Any test which doesn't `panic!` passes,\n-and any test that does `panic!` fails. Let's make our test fail:\n-\n-```rust,ignore\n-# // The next line exists to trick play.rust-lang.org into running our code as a\n-# // test:\n-# // fn main\n-#\n-#[test]\n-fn it_works() {\n-    assert!(false);\n-}\n-```\n-\n-`assert!` is a macro provided by Rust which takes one argument: if the argument\n-is `true`, nothing happens. If the argument is `false`, it will `panic!`. Let's\n-run our tests again:\n-\n-```bash\n-$ cargo test\n-   Compiling adder v0.1.0 (file:///home/you/projects/adder)\n-    Finished debug [unoptimized + debuginfo] target(s) in 0.17 secs\n-     Running target/debug/deps/adder-941f01916ca4a642\n-\n-running 1 test\n-test it_works ... FAILED\n-\n-failures:\n-\n----- it_works stdout ----\n-        thread 'it_works' panicked at 'assertion failed: false', src/lib.rs:5\n-note: Run with `RUST_BACKTRACE=1` for a backtrace.\n-\n-\n-failures:\n-    it_works\n-\n-test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured\n-\n-error: test failed\n-```\n-\n-Rust indicates that our test failed:\n-\n-```text\n-test it_works ... FAILED\n-```\n-\n-And that's reflected in the summary line:\n-\n-```text\n-test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured\n-```\n-\n-We also get a non-zero status code. We can use `$?` on macOS and Linux:\n-\n-```bash\n-$ echo $?\n-101\n-```\n-\n-On Windows, if you\u2019re using `cmd`:\n-\n-```bash\n-> echo %ERRORLEVEL%\n-```\n-\n-And if you\u2019re using PowerShell:\n-\n-```bash\n-> echo $LASTEXITCODE # the code itself\n-> echo $? # a boolean, fail or succeed\n-```\n-\n-This is useful if you want to integrate `cargo test` into other tooling.\n-\n-We can invert our test's failure with another attribute: `should_panic`:\n-\n-```rust,ignore\n-# // The next line exists to trick play.rust-lang.org into running our code as a\n-# // test:\n-# // fn main\n-#\n-#[test]\n-#[should_panic]\n-fn it_works() {\n-    assert!(false);\n-}\n-```\n-\n-This test will now succeed if we `panic!` and fail if we complete. Let's try it:\n-\n-```bash\n-$ cargo test\n-   Compiling adder v0.1.0 (file:///home/you/projects/adder)\n-    Finished debug [unoptimized + debuginfo] target(s) in 0.17 secs\n-     Running target/debug/deps/adder-941f01916ca4a642\n-\n-running 1 test\n-test it_works ... ok\n-\n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n-\n-   Doc-tests adder\n-\n-running 0 tests\n-\n-test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n-```\n-\n-Rust provides another macro, `assert_eq!`, that compares two arguments for\n-equality:\n-\n-```rust,ignore\n-# // The next line exists to trick play.rust-lang.org into running our code as a\n-# // test:\n-# // fn main\n-#\n-#[test]\n-#[should_panic]\n-fn it_works() {\n-    assert_eq!(\"Hello\", \"world\");\n-}\n-```\n-\n-Does this test pass or fail? Because of the `should_panic` attribute, it\n-passes:\n-\n-```bash\n-$ cargo test\n-   Compiling adder v0.1.0 (file:///home/you/projects/adder)\n-    Finished debug [unoptimized + debuginfo] target(s) in 0.21 secs\n-     Running target/debug/deps/adder-941f01916ca4a642\n-\n-running 1 test\n-test it_works ... ok\n-\n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n-\n-   Doc-tests adder\n-\n-running 0 tests\n-\n-test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n-```\n-\n-`should_panic` tests can be fragile, as it's hard to guarantee that the test\n-didn't fail for an unexpected reason. To help with this, an optional `expected`\n-parameter can be added to the `should_panic` attribute. The test harness will\n-make sure that the failure message contains the provided text. A safer version\n-of the example above would be:\n-\n-```rust,ignore\n-# // The next line exists to trick play.rust-lang.org into running our code as a\n-# // test:\n-# // fn main\n-#\n-#[test]\n-#[should_panic(expected = \"assertion failed\")]\n-fn it_works() {\n-    assert_eq!(\"Hello\", \"world\");\n-}\n-```\n-\n-That's all there is to the basics! Let's write one 'real' test:\n-\n-```rust,ignore\n-# // The next line exists to trick play.rust-lang.org into running our code as a\n-# // test:\n-# // fn main\n-#\n-pub fn add_two(a: i32) -> i32 {\n-    a + 2\n-}\n-\n-#[test]\n-fn it_works() {\n-    assert_eq!(4, add_two(2));\n-}\n-```\n-\n-This is a very common use of `assert_eq!`: call some function with\n-some known arguments and compare it to the expected output.\n-\n-# The `ignore` attribute\n-\n-Sometimes a few specific tests can be very time-consuming to execute. These\n-can be disabled by default by using the `ignore` attribute:\n-\n-```rust,ignore\n-# // The next line exists to trick play.rust-lang.org into running our code as a\n-# // test:\n-# // fn main\n-#\n-pub fn add_two(a: i32) -> i32 {\n-    a + 2\n-}\n-\n-#[test]\n-fn it_works() {\n-    assert_eq!(4, add_two(2));\n-}\n-\n-#[test]\n-#[ignore]\n-fn expensive_test() {\n-    // Code that takes an hour to run...\n-}\n-```\n-\n-Now we run our tests and see that `it_works` is run, but `expensive_test` is\n-not:\n-\n-```bash\n-$ cargo test\n-   Compiling adder v0.1.0 (file:///home/you/projects/adder)\n-    Finished debug [unoptimized + debuginfo] target(s) in 0.20 secs\n-     Running target/debug/deps/adder-941f01916ca4a642\n-\n-running 2 tests\n-test expensive_test ... ignored\n-test it_works ... ok\n-\n-test result: ok. 1 passed; 0 failed; 1 ignored; 0 measured\n-\n-   Doc-tests adder\n-\n-running 0 tests\n-\n-test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n-```\n-\n-The expensive tests can be run explicitly using `cargo test -- --ignored`:\n-\n-```bash\n-$ cargo test -- --ignored\n-    Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs\n-     Running target/debug/deps/adder-941f01916ca4a642\n-\n-running 1 test\n-test expensive_test ... ok\n-\n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n-\n-   Doc-tests adder\n-\n-running 0 tests\n-\n-test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n-```\n-\n-The `--ignored` argument is an argument to the test binary, and not to Cargo,\n-which is why the command is `cargo test -- --ignored`.\n-\n-# The `tests` module\n-\n-There is one way in which our existing example is not idiomatic: it's\n-missing the `tests` module. You might have noticed this test module was\n-present in the code that was initially generated with `cargo new` but\n-was missing from our last example. Let's explain what this does.\n-\n-The idiomatic way of writing our example looks like this:\n-\n-```rust,ignore\n-# // The next line exists to trick play.rust-lang.org into running our code as a\n-# // test:\n-# // fn main\n-#\n-pub fn add_two(a: i32) -> i32 {\n-    a + 2\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::add_two;\n-\n-    #[test]\n-    fn it_works() {\n-        assert_eq!(4, add_two(2));\n-    }\n-}\n-```\n-\n-There's a few changes here. The first is the introduction of a `mod tests` with\n-a `cfg` attribute. The module allows us to group all of our tests together, and\n-to also define helper functions if needed, that don't become a part of the rest\n-of our crate. The `cfg` attribute only compiles our test code if we're\n-currently trying to run the tests. This can save compile time, and also ensures\n-that our tests are entirely left out of a normal build.\n-\n-The second change is the `use` declaration. Because we're in an inner module,\n-we need to bring the tested function into scope. This can be annoying if you have\n-a large module, and so this is a common use of globs. Let's change our\n-`src/lib.rs` to make use of it:\n-\n-```rust,ignore\n-# // The next line exists to trick play.rust-lang.org into running our code as a\n-# // test:\n-# // fn main\n-#\n-pub fn add_two(a: i32) -> i32 {\n-    a + 2\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-\n-    #[test]\n-    fn it_works() {\n-        assert_eq!(4, add_two(2));\n-    }\n-}\n-```\n-\n-Note the different `use` line. Now we run our tests:\n-\n-```bash\n-$ cargo test\n-    Updating registry `https://github.com/rust-lang/crates.io-index`\n-   Compiling adder v0.1.0 (file:///home/you/projects/adder)\n-     Running target/debug/deps/adder-91b3e234d4ed382a\n-\n-running 1 test\n-test tests::it_works ... ok\n-\n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n-\n-   Doc-tests adder\n-\n-running 0 tests\n-\n-test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n-```\n-\n-It works!\n-\n-The current convention is to use the `tests` module to hold your \"unit-style\"\n-tests. Anything that tests one small bit of functionality makes sense to\n-go here. But what about \"integration-style\" tests instead? For that, we have\n-the `tests` directory.\n-\n-# The `tests` directory\n-\n-Each file in `tests/*.rs` directory is treated as an individual crate.\n-To write an integration test, let's make a `tests` directory and\n-put a `tests/integration_test.rs` file inside with this as its contents:\n-\n-```rust,ignore\n-# // The next line exists to trick play.rust-lang.org into running our code as a\n-# // test:\n-# // fn main\n-#\n-# // Sadly, this code will not work in play.rust-lang.org, because we have no\n-# // crate adder to import. You'll need to try this part on your own machine.\n-extern crate adder;\n-\n-#[test]\n-fn it_works() {\n-    assert_eq!(4, adder::add_two(2));\n-}\n-```\n-\n-This looks similar to our previous tests, but slightly different. We now have\n-an `extern crate adder` at the top. This is because each test in the `tests`\n-directory is an entirely separate crate, and so we need to import our library.\n-This is also why `tests` is a suitable place to write integration-style tests:\n-they use the library like any other consumer of it would.\n-\n-Let's run them:\n-\n-```bash\n-$ cargo test\n-   Compiling adder v0.1.0 (file:///home/you/projects/adder)\n-     Running target/debug/deps/adder-91b3e234d4ed382a\n-\n-running 1 test\n-test tests::it_works ... ok\n-\n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n-\n-     Running target/debug/integration_test-68064b69521c828a\n-\n-running 1 test\n-test it_works ... ok\n-\n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n-\n-   Doc-tests adder\n-\n-running 0 tests\n-\n-test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n-```\n-\n-Now we have three sections: our previous test is also run, as well as our new\n-one.\n-\n-Cargo will ignore files in subdirectories of the `tests/` directory.\n-Therefore shared modules in integrations tests are possible.\n-For example `tests/common/mod.rs` is not separately compiled by cargo but can\n-be imported in every test with `mod common;`\n-\n-That's all there is to the `tests` directory. The `tests` module isn't needed\n-here, since the whole thing is focused on tests.\n-\n-Note, when building integration tests, cargo will not pass the `test` attribute\n-to the compiler. It means that all parts in `cfg(test)` won't be included in\n-the build used in your integration tests.\n-\n-Let's finally check out that third section: documentation tests.\n-\n-# Documentation tests\n-\n-Nothing is better than documentation with examples. Nothing is worse than\n-examples that don't actually work, because the code has changed since the\n-documentation has been written. To this end, Rust supports automatically\n-running examples in your documentation (**note:** this only works in library\n-crates, not binary crates). Here's a fleshed-out `src/lib.rs` with examples:\n-\n-```rust,ignore\n-# // The next line exists to trick play.rust-lang.org into running our code as a\n-# // test:\n-# // fn main\n-#\n-//! The `adder` crate provides functions that add numbers to other numbers.\n-//!\n-//! # Examples\n-//!\n-//! ```\n-//! assert_eq!(4, adder::add_two(2));\n-//! ```\n-\n-/// This function adds two to its argument.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// use adder::add_two;\n-///\n-/// assert_eq!(4, add_two(2));\n-/// ```\n-pub fn add_two(a: i32) -> i32 {\n-    a + 2\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-\n-    #[test]\n-    fn it_works() {\n-        assert_eq!(4, add_two(2));\n-    }\n-}\n-```\n-\n-Note the module-level documentation with `//!` and the function-level\n-documentation with `///`. Rust's documentation supports Markdown in comments,\n-and so triple graves mark code blocks. It is conventional to include the\n-`# Examples` section, exactly like that, with examples following.\n-\n-Let's run the tests again:\n-\n-```bash\n-$ cargo test\n-   Compiling adder v0.1.0. (file:///home/you/projects/adder)\n-     Running target/debug/deps/adder-91b3e234d4ed382a\n-\n-running 1 test\n-test tests::it_works ... ok\n-\n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n-\n-     Running target/debug/integration_test-68064b69521c828a\n-\n-running 1 test\n-test it_works ... ok\n-\n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n-\n-   Doc-tests adder\n-\n-running 2 tests\n-test add_two_0 ... ok\n-test _0 ... ok\n-\n-test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured\n-```\n-\n-Now we have all three kinds of tests running! Note the names of the\n-documentation tests: the `_0` is generated for the module test, and `add_two_0`\n-for the function test. These will auto increment with names like `add_two_1` as\n-you add more examples.\n-\n-We haven\u2019t covered all of the details with writing documentation tests. For more,\n-please see the [Documentation chapter](documentation.html).\n-\n-# Testing and concurrency\n-\n-It is important to note that tests are run concurrently using threads. For this\n-reason, care should be taken to ensure your tests do not depend on each-other,\n-or on any shared state. \"Shared state\" can also include the environment, such\n-as the current working directory, or environment variables.\n-\n-If this is an issue it is possible to control this concurrency, either by\n-setting the environment variable `RUST_TEST_THREADS`, or by passing the argument\n-`--test-threads` to the tests:\n-\n-```bash\n-$ RUST_TEST_THREADS=1 cargo test   # Run tests with no concurrency\n-...\n-$ cargo test -- --test-threads=1   # Same as above\n-...\n-```\n-\n-# Test output\n-\n-By default Rust's test library captures and discards output to standard\n-out/error, e.g. output from `println!()`. This too can be controlled using the\n-environment or a switch:\n-\n-\n-```bash\n-$ RUST_TEST_NOCAPTURE=1 cargo test   # Preserve stdout/stderr\n-...\n-$ cargo test -- --nocapture          # Same as above\n-...\n-```\n-\n-However a better method avoiding capture is to use logging rather than raw\n-output. Rust has a [standard logging API][log], which provides a frontend to\n-multiple logging implementations. This can be used in conjunction with the\n-default [env_logger] to output any debugging information in a manner that can be\n-controlled at runtime.\n-\n-[log]: https://crates.io/crates/log\n-[env_logger]: https://crates.io/crates/env_logger"}, {"sha": "6866505df1310e8de0d3d6c2e441e988fd8aaf82", "filename": "src/doc/book/src/the-stack-and-the-heap.md", "status": "removed", "additions": 0, "deletions": 583, "changes": 583, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fthe-stack-and-the-heap.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fthe-stack-and-the-heap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fthe-stack-and-the-heap.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,583 +0,0 @@\n-# The Stack and the Heap\n-\n-As a systems language, Rust operates at a low level. If you\u2019re coming from a\n-high-level language, there are some aspects of systems programming that you may\n-not be familiar with. The most important one is how memory works, with a stack\n-and a heap. If you\u2019re familiar with how C-like languages use stack allocation,\n-this chapter will be a refresher. If you\u2019re not, you\u2019ll learn about this more\n-general concept, but with a Rust-y focus.\n-\n-As with most things, when learning about them, we\u2019ll use a simplified model to\n-start. This lets you get a handle on the basics, without getting bogged down\n-with details which are, for now, irrelevant. The examples we\u2019ll use aren\u2019t 100%\n-accurate, but are representative for the level we\u2019re trying to learn at right\n-now. Once you have the basics down, learning more about how allocators are\n-implemented, virtual memory, and other advanced topics will reveal the leaks in\n-this particular abstraction.\n-\n-# Memory management\n-\n-These two terms are about memory management. The stack and the heap are\n-abstractions that help you determine when to allocate and deallocate memory.\n-\n-Here\u2019s a high-level comparison:\n-\n-The stack is very fast, and is where memory is allocated in Rust by default.\n-But the allocation is local to a function call, and is limited in size. The\n-heap, on the other hand, is slower, and is explicitly allocated by your\n-program. But it\u2019s effectively unlimited in size, and is globally accessible.\n-Note this meaning of heap, which allocates arbitrary-sized blocks of memory in arbitrary\n-order, is quite different from the heap data structure.  \n-\n-# The Stack\n-\n-Let\u2019s talk about this Rust program:\n-\n-```rust\n-fn main() {\n-    let x = 42;\n-}\n-```\n-\n-This program has one variable binding, `x`. This memory needs to be allocated\n-from somewhere. Rust \u2018stack allocates\u2019 by default, which means that basic\n-values \u2018go on the stack\u2019. What does that mean?\n-\n-Well, when a function gets called, some memory gets allocated for all of its\n-local variables and some other information. This is called a \u2018stack frame\u2019, and\n-for the purpose of this tutorial, we\u2019re going to ignore the extra information\n-and only consider the local variables we\u2019re allocating. So in this case, when\n-`main()` is run, we\u2019ll allocate a single 32-bit integer for our stack frame.\n-This is automatically handled for you, as you can see; we didn\u2019t have to write\n-any special Rust code or anything.\n-\n-When the function exits, its stack frame gets deallocated. This happens\n-automatically as well.\n-\n-That\u2019s all there is for this simple program. The key thing to understand here\n-is that stack allocation is very, very fast. Since we know all the local\n-variables we have ahead of time, we can grab the memory all at once. And since\n-we\u2019ll throw them all away at the same time as well, we can get rid of it very\n-fast too.\n-\n-The downside is that we can\u2019t keep values around if we need them for longer\n-than a single function. We also haven\u2019t talked about what the word, \u2018stack\u2019,\n-means. To do that, we need a slightly more complicated example:\n-\n-```rust\n-fn foo() {\n-    let y = 5;\n-    let z = 100;\n-}\n-\n-fn main() {\n-    let x = 42;\n-\n-    foo();\n-}\n-```\n-\n-This program has three variables total: two in `foo()`, one in `main()`. Just\n-as before, when `main()` is called, a single integer is allocated for its stack\n-frame. But before we can show what happens when `foo()` is called, we need to\n-visualize what\u2019s going on with memory. Your operating system presents a view of\n-memory to your program that\u2019s pretty simple: a huge list of addresses, from 0\n-to a large number, representing how much RAM your computer has. For example, if\n-you have a gigabyte of RAM, your addresses go from `0` to `1,073,741,823`. That\n-number comes from 2<sup>30</sup>, the number of bytes in a gigabyte. [^gigabyte]\n-\n-[^gigabyte]: \u2018Gigabyte\u2019 can mean two things: 10<sup>9</sup>, or 2<sup>30</sup>. The IEC standard resolved this by stating that \u2018gigabyte\u2019 is 10<sup>9</sup>, and \u2018gibibyte\u2019 is 2<sup>30</sup>. However, very few people use this terminology, and rely on context to differentiate. We follow in that tradition here.\n-\n-This memory is kind of like a giant array: addresses start at zero and go\n-up to the final number. So here\u2019s a diagram of our first stack frame:\n-\n-| Address | Name | Value |\n-|---------|------|-------|\n-| 0       | x    | 42    |\n-\n-We\u2019ve got `x` located at address `0`, with the value `42`.\n-\n-When `foo()` is called, a new stack frame is allocated:\n-\n-| Address | Name | Value |\n-|---------|------|-------|\n-| 2       | z    | 100   |\n-| 1       | y    | 5     |\n-| 0       | x    | 42    |\n-\n-Because `0` was taken by the first frame, `1` and `2` are used for `foo()`\u2019s\n-stack frame. It grows upward, the more functions we call.\n-\n-\n-There are some important things we have to take note of here. The numbers 0, 1,\n-and 2 are all solely for illustrative purposes, and bear no relationship to the\n-address values the computer will use in reality. In particular, the series of\n-addresses are in reality going to be separated by some number of bytes that\n-separate each address, and that separation may even exceed the size of the\n-value being stored.\n-\n-After `foo()` is over, its frame is deallocated:\n-\n-| Address | Name | Value |\n-|---------|------|-------|\n-| 0       | x    | 42    |\n-\n-And then, after `main()`, even this last value goes away. Easy!\n-\n-It\u2019s called a \u2018stack\u2019 because it works like a stack of dinner plates: the first\n-plate you put down is the last plate to pick back up. Stacks are sometimes\n-called \u2018last in, first out queues\u2019 for this reason, as the last value you put\n-on the stack is the first one you retrieve from it.\n-\n-Let\u2019s try a three-deep example:\n-\n-```rust\n-fn italic() {\n-    let i = 6;\n-}\n-\n-fn bold() {\n-    let a = 5;\n-    let b = 100;\n-    let c = 1;\n-\n-    italic();\n-}\n-\n-fn main() {\n-    let x = 42;\n-\n-    bold();\n-}\n-```\n-\n-We have some kooky function names to make the diagrams clearer.\n-\n-Okay, first, we call `main()`:\n-\n-| Address | Name | Value |\n-|---------|------|-------|\n-| 0       | x    | 42    |\n-\n-Next up, `main()` calls `bold()`:\n-\n-| Address | Name | Value |\n-|---------|------|-------|\n-| **3**   | **c**|**1**  |\n-| **2**   | **b**|**100**|\n-| **1**   | **a**| **5** |\n-| 0       | x    | 42    |\n-\n-And then `bold()` calls `italic()`:\n-\n-| Address | Name | Value |\n-|---------|------|-------|\n-| *4*     | *i*  | *6*   |\n-| **3**   | **c**|**1**  |\n-| **2**   | **b**|**100**|\n-| **1**   | **a**| **5** |\n-| 0       | x    | 42    |\n-\n-Whew! Our stack is growing tall.\n-\n-After `italic()` is over, its frame is deallocated, leaving only `bold()` and\n-`main()`:\n-\n-| Address | Name | Value |\n-|---------|------|-------|\n-| **3**   | **c**|**1**  |\n-| **2**   | **b**|**100**|\n-| **1**   | **a**| **5** |\n-| 0       | x    | 42    |\n-\n-And then `bold()` ends, leaving only `main()`:\n-\n-| Address | Name | Value |\n-|---------|------|-------|\n-| 0       | x    | 42    |\n-\n-And then we\u2019re done. Getting the hang of it? It\u2019s like piling up dishes: you\n-add to the top, you take away from the top.\n-\n-# The Heap\n-\n-Now, this works pretty well, but not everything can work like this. Sometimes,\n-you need to pass some memory between different functions, or keep it alive for\n-longer than a single function\u2019s execution. For this, we can use the heap.\n-\n-In Rust, you can allocate memory on the heap with the [`Box<T>` type][box].\n-Here\u2019s an example:\n-\n-```rust\n-fn main() {\n-    let x = Box::new(5);\n-    let y = 42;\n-}\n-```\n-\n-[box]: ../std/boxed/index.html\n-\n-Here\u2019s what happens in memory when `main()` is called:\n-\n-| Address | Name | Value  |\n-|---------|------|--------|\n-| 1       | y    | 42     |\n-| 0       | x    | ?????? |\n-\n-We allocate space for two variables on the stack. `y` is `42`, as it always has\n-been, but what about `x`? Well, `x` is a `Box<i32>`, and boxes allocate memory\n-on the heap. The actual value of the box is a structure which has a pointer to\n-\u2018the heap\u2019. When we start executing the function, and `Box::new()` is called,\n-it allocates some memory for the heap, and puts `5` there. The memory now looks\n-like this:\n-\n-| Address              | Name | Value                  |\n-|----------------------|------|------------------------|\n-| (2<sup>30</sup>) - 1 |      | 5                      |\n-| ...                  | ...  | ...                    |\n-| 1                    | y    | 42                     |\n-| 0                    | x    | \u2192 (2<sup>30</sup>) - 1 |\n-\n-We have (2<sup>30</sup>) - 1 addresses in our hypothetical computer with 1GB of RAM. And since\n-our stack grows from zero, the easiest place to allocate memory is from the\n-other end. So our first value is at the highest place in memory. And the value\n-of the struct at `x` has a [raw pointer][rawpointer] to the place we\u2019ve\n-allocated on the heap, so the value of `x` is (2<sup>30</sup>) - 1, the memory\n-location we\u2019ve asked for.\n-\n-[rawpointer]: raw-pointers.html\n-\n-We haven\u2019t really talked too much about what it actually means to allocate and\n-deallocate memory in these contexts. Getting into very deep detail is out of\n-the scope of this tutorial, but what\u2019s important to point out here is that\n-the heap isn\u2019t a stack that grows from the opposite end. We\u2019ll have an\n-example of this later in the book, but because the heap can be allocated and\n-freed in any order, it can end up with \u2018holes\u2019. Here\u2019s a diagram of the memory\n-layout of a program which has been running for a while now:\n-\n-\n-| Address              | Name | Value                  |\n-|----------------------|------|------------------------|\n-| (2<sup>30</sup>) - 1 |      | 5                      |\n-| (2<sup>30</sup>) - 2 |      |                        |\n-| (2<sup>30</sup>) - 3 |      |                        |\n-| (2<sup>30</sup>) - 4 |      | 42                     |\n-| ...                  | ...  | ...                    |\n-| 2                    | z    | \u2192 (2<sup>30</sup>) - 4 |\n-| 1                    | y    | 42                     |\n-| 0                    | x    | \u2192 (2<sup>30</sup>) - 1 |\n-\n-In this case, we\u2019ve allocated four things on the heap, but deallocated two of\n-them. There\u2019s a gap between (2<sup>30</sup>) - 1 and (2<sup>30</sup>) - 4 which isn\u2019t\n-currently being used. The specific details of how and why this happens depends\n-on what kind of strategy you use to manage the heap. Different programs can use\n-different \u2018memory allocators\u2019, which are libraries that manage this for you.\n-Rust programs use [jemalloc][jemalloc] for this purpose.\n-\n-[jemalloc]: http://www.canonware.com/jemalloc/\n-\n-Anyway, back to our example. Since this memory is on the heap, it can stay\n-alive longer than the function which allocates the box. In this case, however,\n-it doesn\u2019t.[^moving] When the function is over, we need to free the stack frame\n-for `main()`. `Box<T>`, though, has a trick up its sleeve: [Drop][drop]. The\n-implementation of `Drop` for `Box` deallocates the memory that was allocated\n-when it was created. Great! So when `x` goes away, it first frees the memory\n-allocated on the heap:\n-\n-| Address | Name | Value  |\n-|---------|------|--------|\n-| 1       | y    | 42     |\n-| 0       | x    | ?????? |\n-\n-[drop]: drop.html\n-[^moving]: We can make the memory live longer by transferring ownership,\n-           sometimes called \u2018moving out of the box\u2019. More complex examples will\n-           be covered later.\n-\n-\n-And then the stack frame goes away, freeing all of our memory.\n-\n-# Arguments and borrowing\n-\n-We\u2019ve got some basic examples with the stack and the heap going, but what about\n-function arguments and borrowing? Here\u2019s a small Rust program:\n-\n-```rust\n-fn foo(i: &i32) {\n-    let z = 42;\n-}\n-\n-fn main() {\n-    let x = 5;\n-    let y = &x;\n-\n-    foo(y);\n-}\n-```\n-\n-When we enter `main()`, memory looks like this:\n-\n-| Address | Name | Value  |\n-|---------|------|--------|\n-| 1       | y    | \u2192 0    |\n-| 0       | x    | 5      |\n-\n-`x` is a plain old `5`, and `y` is a reference to `x`. So its value is the\n-memory location that `x` lives at, which in this case is `0`.\n-\n-What about when we call `foo()`, passing `y` as an argument?\n-\n-| Address | Name | Value  |\n-|---------|------|--------|\n-| 3       | z    | 42     |\n-| 2       | i    | \u2192 0    |\n-| 1       | y    | \u2192 0    |\n-| 0       | x    | 5      |\n-\n-Stack frames aren\u2019t only for local bindings, they\u2019re for arguments too. So in\n-this case, we need to have both `i`, our argument, and `z`, our local variable\n-binding. `i` is a copy of the argument, `y`. Since `y`\u2019s value is `0`, so is\n-`i`\u2019s.\n-\n-This is one reason why borrowing a variable doesn\u2019t deallocate any memory: the\n-value of a reference is a pointer to a memory location. If we got rid of\n-the underlying memory, things wouldn\u2019t work very well.\n-\n-# A complex example\n-\n-Okay, let\u2019s go through this complex program step-by-step:\n-\n-```rust\n-fn foo(x: &i32) {\n-    let y = 10;\n-    let z = &y;\n-\n-    baz(z);\n-    bar(x, z);\n-}\n-\n-fn bar(a: &i32, b: &i32) {\n-    let c = 5;\n-    let d = Box::new(5);\n-    let e = &d;\n-\n-    baz(e);\n-}\n-\n-fn baz(f: &i32) {\n-    let g = 100;\n-}\n-\n-fn main() {\n-    let h = 3;\n-    let i = Box::new(20);\n-    let j = &h;\n-\n-    foo(j);\n-}\n-```\n-\n-First, we call `main()`:\n-\n-| Address              | Name | Value                  |\n-|----------------------|------|------------------------|\n-| (2<sup>30</sup>) - 1 |      | 20                     |\n-| ...                  | ...  | ...                    |\n-| 2                    | j    | \u2192 0                    |\n-| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n-| 0                    | h    | 3                      |\n-\n-We allocate memory for `j`, `i`, and `h`. `i` is on the heap, and so has a\n-value pointing there.\n-\n-Next, at the end of `main()`, `foo()` gets called:\n-\n-| Address              | Name | Value                  |\n-|----------------------|------|------------------------|\n-| (2<sup>30</sup>) - 1 |      | 20                     |\n-| ...                  | ...  | ...                    |\n-| 5                    | z    | \u2192 4                    |\n-| 4                    | y    | 10                     |\n-| 3                    | x    | \u2192 0                    |\n-| 2                    | j    | \u2192 0                    |\n-| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n-| 0                    | h    | 3                      |\n-\n-Space gets allocated for `x`, `y`, and `z`. The argument `x` has the same value\n-as `j`, since that\u2019s what we passed it in. It\u2019s a pointer to the `0` address,\n-since `j` points at `h`.\n-\n-Next, `foo()` calls `baz()`, passing `z`:\n-\n-| Address              | Name | Value                  |\n-|----------------------|------|------------------------|\n-| (2<sup>30</sup>) - 1 |      | 20                     |\n-| ...                  | ...  | ...                    |\n-| 7                    | g    | 100                    |\n-| 6                    | f    | \u2192 4                    |\n-| 5                    | z    | \u2192 4                    |\n-| 4                    | y    | 10                     |\n-| 3                    | x    | \u2192 0                    |\n-| 2                    | j    | \u2192 0                    |\n-| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n-| 0                    | h    | 3                      |\n-\n-We\u2019ve allocated memory for `f` and `g`. `baz()` is very short, so when it\u2019s\n-over, we get rid of its stack frame:\n-\n-| Address              | Name | Value                  |\n-|----------------------|------|------------------------|\n-| (2<sup>30</sup>) - 1 |      | 20                     |\n-| ...                  | ...  | ...                    |\n-| 5                    | z    | \u2192 4                    |\n-| 4                    | y    | 10                     |\n-| 3                    | x    | \u2192 0                    |\n-| 2                    | j    | \u2192 0                    |\n-| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n-| 0                    | h    | 3                      |\n-\n-Next, `foo()` calls `bar()` with `x` and `z`:\n-\n-| Address              | Name | Value                  |\n-|----------------------|------|------------------------|\n-| (2<sup>30</sup>) - 1 |      | 20                     |\n-| (2<sup>30</sup>) - 2 |      | 5                      |\n-| ...                  | ...  | ...                    |\n-| 10                   | e    | \u2192 9                    |\n-| 9                    | d    | \u2192 (2<sup>30</sup>) - 2 |\n-| 8                    | c    | 5                      |\n-| 7                    | b    | \u2192 4                    |\n-| 6                    | a    | \u2192 0                    |\n-| 5                    | z    | \u2192 4                    |\n-| 4                    | y    | 10                     |\n-| 3                    | x    | \u2192 0                    |\n-| 2                    | j    | \u2192 0                    |\n-| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n-| 0                    | h    | 3                      |\n-\n-We end up allocating another value on the heap, and so we have to subtract one\n-from (2<sup>30</sup>) - 1. It\u2019s easier to write that than `1,073,741,822`. In any\n-case, we set up the variables as usual.\n-\n-At the end of `bar()`, it calls `baz()`:\n-\n-| Address              | Name | Value                  |\n-|----------------------|------|------------------------|\n-| (2<sup>30</sup>) - 1 |      | 20                     |\n-| (2<sup>30</sup>) - 2 |      | 5                      |\n-| ...                  | ...  | ...                    |\n-| 12                   | g    | 100                    |\n-| 11                   | f    | \u2192 (2<sup>30</sup>) - 2 |\n-| 10                   | e    | \u2192 9                    |\n-| 9                    | d    | \u2192 (2<sup>30</sup>) - 2 |\n-| 8                    | c    | 5                      |\n-| 7                    | b    | \u2192 4                    |\n-| 6                    | a    | \u2192 0                    |\n-| 5                    | z    | \u2192 4                    |\n-| 4                    | y    | 10                     |\n-| 3                    | x    | \u2192 0                    |\n-| 2                    | j    | \u2192 0                    |\n-| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n-| 0                    | h    | 3                      |\n-\n-With this, we\u2019re at our deepest point! Whew! Congrats for following along this\n-far.\n-\n-After `baz()` is over, we get rid of `f` and `g`:\n-\n-| Address              | Name | Value                  |\n-|----------------------|------|------------------------|\n-| (2<sup>30</sup>) - 1 |      | 20                     |\n-| (2<sup>30</sup>) - 2 |      | 5                      |\n-| ...                  | ...  | ...                    |\n-| 10                   | e    | \u2192 9                    |\n-| 9                    | d    | \u2192 (2<sup>30</sup>) - 2 |\n-| 8                    | c    | 5                      |\n-| 7                    | b    | \u2192 4                    |\n-| 6                    | a    | \u2192 0                    |\n-| 5                    | z    | \u2192 4                    |\n-| 4                    | y    | 10                     |\n-| 3                    | x    | \u2192 0                    |\n-| 2                    | j    | \u2192 0                    |\n-| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n-| 0                    | h    | 3                      |\n-\n-Next, we return from `bar()`. `d` in this case is a `Box<T>`, so it also frees\n-what it points to: (2<sup>30</sup>) - 2.\n-\n-| Address              | Name | Value                  |\n-|----------------------|------|------------------------|\n-| (2<sup>30</sup>) - 1 |      | 20                     |\n-| ...                  | ...  | ...                    |\n-| 5                    | z    | \u2192 4                    |\n-| 4                    | y    | 10                     |\n-| 3                    | x    | \u2192 0                    |\n-| 2                    | j    | \u2192 0                    |\n-| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n-| 0                    | h    | 3                      |\n-\n-And after that, `foo()` returns:\n-\n-| Address              | Name | Value                  |\n-|----------------------|------|------------------------|\n-| (2<sup>30</sup>) - 1 |      | 20                     |\n-| ...                  | ...  | ...                    |\n-| 2                    | j    | \u2192 0                    |\n-| 1                    | i    | \u2192 (2<sup>30</sup>) - 1 |\n-| 0                    | h    | 3                      |\n-\n-And then, finally, `main()`, which cleans the rest up. When `i` is `Drop`ped,\n-it will clean up the last of the heap too.\n-\n-# What do other languages do?\n-\n-Most languages with a garbage collector heap-allocate by default. This means\n-that every value is boxed. There are a number of reasons why this is done, but\n-they\u2019re out of scope for this tutorial. There are some possible optimizations\n-that don\u2019t make it true 100% of the time, too. Rather than relying on the stack\n-and `Drop` to clean up memory, the garbage collector deals with the heap\n-instead.\n-\n-# Which to use?\n-\n-So if the stack is faster and easier to manage, why do we need the heap? A big\n-reason is that Stack-allocation alone means you only have 'Last In First Out (LIFO)' semantics for\n-reclaiming storage. Heap-allocation is strictly more general, allowing storage\n-to be taken from and returned to the pool in arbitrary order, but at a\n-complexity cost.\n-\n-Generally, you should prefer stack allocation, and so, Rust stack-allocates by\n-default. The LIFO model of the stack is simpler, at a fundamental level. This\n-has two big impacts: runtime efficiency and semantic impact.\n-\n-## Runtime Efficiency\n-\n-Managing the memory for the stack is trivial: The machine\n-increments or decrements a single value, the so-called \u201cstack pointer\u201d.\n-Managing memory for the heap is non-trivial: heap-allocated memory is freed at\n-arbitrary points, and each block of heap-allocated memory can be of arbitrary\n-size, so the memory manager must generally work much harder to\n-identify memory for reuse.\n-\n-If you\u2019d like to dive into this topic in greater detail, [this paper][wilson]\n-is a great introduction.\n-\n-[wilson]: http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.143.4688\n-\n-## Semantic impact\n-\n-Stack-allocation impacts the Rust language itself, and thus the developer\u2019s\n-mental model. The LIFO semantics is what drives how the Rust language handles\n-automatic memory management. Even the deallocation of a uniquely-owned\n-heap-allocated box can be driven by the stack-based LIFO semantics, as\n-discussed throughout this chapter. The flexibility (i.e. expressiveness) of non\n-LIFO-semantics means that in general the compiler cannot automatically infer at\n-compile-time where memory should be freed; it has to rely on dynamic protocols,\n-potentially from outside the language itself, to drive deallocation (reference\n-counting, as used by `Rc<T>` and `Arc<T>`, is one example of this).\n-\n-When taken to the extreme, the increased expressive power of heap allocation\n-comes at the cost of either significant runtime support (e.g. in the form of a\n-garbage collector) or significant programmer effort (in the form of explicit\n-memory management calls that require verification not provided by the Rust\n-compiler)."}, {"sha": "a77d5fe93b524716326bd566fd0b0ab4c987b9f8", "filename": "src/doc/book/src/trait-objects.md", "status": "removed", "additions": 0, "deletions": 335, "changes": 335, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Ftrait-objects.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Ftrait-objects.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ftrait-objects.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,335 +0,0 @@\n-# Trait Objects\n-\n-When code involves polymorphism, there needs to be a mechanism to determine\n-which specific version is actually run. This is called \u2018dispatch\u2019. There are\n-two major forms of dispatch: static dispatch and dynamic dispatch. While Rust\n-favors static dispatch, it also supports dynamic dispatch through a mechanism\n-called \u2018trait objects\u2019.\n-\n-## Background\n-\n-For the rest of this chapter, we\u2019ll need a trait and some implementations.\n-Let\u2019s make a simple one, `Foo`. It has one method that is expected to return a\n-`String`.\n-\n-```rust\n-trait Foo {\n-    fn method(&self) -> String;\n-}\n-```\n-\n-We\u2019ll also implement this trait for `u8` and `String`:\n-\n-```rust\n-# trait Foo { fn method(&self) -> String; }\n-impl Foo for u8 {\n-    fn method(&self) -> String { format!(\"u8: {}\", *self) }\n-}\n-\n-impl Foo for String {\n-    fn method(&self) -> String { format!(\"string: {}\", *self) }\n-}\n-```\n-\n-\n-## Static dispatch\n-\n-We can use this trait to perform static dispatch with trait bounds:\n-\n-```rust\n-# trait Foo { fn method(&self) -> String; }\n-# impl Foo for u8 { fn method(&self) -> String { format!(\"u8: {}\", *self) } }\n-# impl Foo for String { fn method(&self) -> String { format!(\"string: {}\", *self) } }\n-fn do_something<T: Foo>(x: T) {\n-    x.method();\n-}\n-\n-fn main() {\n-    let x = 5u8;\n-    let y = \"Hello\".to_string();\n-\n-    do_something(x);\n-    do_something(y);\n-}\n-```\n-\n-Rust uses \u2018monomorphization\u2019 to perform static dispatch here. This means that\n-Rust will create a special version of `do_something()` for both `u8` and\n-`String`, and then replace the call sites with calls to these specialized\n-functions. In other words, Rust generates something like this:\n-\n-```rust\n-# trait Foo { fn method(&self) -> String; }\n-# impl Foo for u8 { fn method(&self) -> String { format!(\"u8: {}\", *self) } }\n-# impl Foo for String { fn method(&self) -> String { format!(\"string: {}\", *self) } }\n-fn do_something_u8(x: u8) {\n-    x.method();\n-}\n-\n-fn do_something_string(x: String) {\n-    x.method();\n-}\n-\n-fn main() {\n-    let x = 5u8;\n-    let y = \"Hello\".to_string();\n-\n-    do_something_u8(x);\n-    do_something_string(y);\n-}\n-```\n-\n-This has a great upside: static dispatch allows function calls to be\n-inlined because the callee is known at compile time, and inlining is\n-the key to good optimization. Static dispatch is fast, but it comes at\n-a tradeoff: \u2018code bloat\u2019, due to many copies of the same function\n-existing in the binary, one for each type.\n-\n-Furthermore, compilers aren\u2019t perfect and may \u201coptimize\u201d code to become slower.\n-For example, functions inlined too eagerly will bloat the instruction cache\n-(cache rules everything around us). This is part of the reason that `#[inline]`\n-and `#[inline(always)]` should be used carefully, and one reason why using a\n-dynamic dispatch is sometimes more efficient.\n-\n-However, the common case is that it is more efficient to use static dispatch,\n-and one can always have a thin statically-dispatched wrapper function that does\n-a dynamic dispatch, but not vice versa, meaning static calls are more flexible.\n-The standard library tries to be statically dispatched where possible for this\n-reason.\n-\n-## Dynamic dispatch\n-\n-Rust provides dynamic dispatch through a feature called \u2018trait objects\u2019. Trait\n-objects, like `&Foo` or `Box<Foo>`, are normal values that store a value of\n-*any* type that implements the given trait, where the precise type can only be\n-known at runtime.\n-\n-A trait object can be obtained from a pointer to a concrete type that\n-implements the trait by *casting* it (e.g. `&x as &Foo`) or *coercing* it\n-(e.g. using `&x` as an argument to a function that takes `&Foo`).\n-\n-These trait object coercions and casts also work for pointers like `&mut T` to\n-`&mut Foo` and `Box<T>` to `Box<Foo>`, but that\u2019s all at the moment. Coercions\n-and casts are identical.\n-\n-This operation can be seen as \u2018erasing\u2019 the compiler\u2019s knowledge about the\n-specific type of the pointer, and hence trait objects are sometimes referred to\n-as \u2018type erasure\u2019.\n-\n-Coming back to the example above, we can use the same trait to perform dynamic\n-dispatch with trait objects by casting:\n-\n-```rust\n-# trait Foo { fn method(&self) -> String; }\n-# impl Foo for u8 { fn method(&self) -> String { format!(\"u8: {}\", *self) } }\n-# impl Foo for String { fn method(&self) -> String { format!(\"string: {}\", *self) } }\n-fn do_something(x: &Foo) {\n-    x.method();\n-}\n-\n-fn main() {\n-    let x = 5u8;\n-    do_something(&x as &Foo);\n-}\n-```\n-\n-or by coercing:\n-\n-```rust\n-# trait Foo { fn method(&self) -> String; }\n-# impl Foo for u8 { fn method(&self) -> String { format!(\"u8: {}\", *self) } }\n-# impl Foo for String { fn method(&self) -> String { format!(\"string: {}\", *self) } }\n-fn do_something(x: &Foo) {\n-    x.method();\n-}\n-\n-fn main() {\n-    let x = \"Hello\".to_string();\n-    do_something(&x);\n-}\n-```\n-\n-A function that takes a trait object is not specialized to each of the types\n-that implements `Foo`: only one copy is generated, often (but not always)\n-resulting in less code bloat. However, this comes at the cost of requiring\n-slower virtual function calls, and effectively inhibiting any chance of\n-inlining and related optimizations from occurring.\n-\n-### Why pointers?\n-\n-Rust does not put things behind a pointer by default, unlike many managed\n-languages, so types can have different sizes. Knowing the size of the value at\n-compile time is important for things like passing it as an argument to a\n-function, moving it about on the stack and allocating (and deallocating) space\n-on the heap to store it.\n-\n-For `Foo`, we would need to have a value that could be at least either a\n-`String` (24 bytes) or a `u8` (1 byte), as well as any other type for which\n-dependent crates may implement `Foo` (any number of bytes at all). There\u2019s no\n-way to guarantee that this last point can work if the values are stored without\n-a pointer, because those other types can be arbitrarily large.\n-\n-Putting the value behind a pointer means the size of the value is not relevant\n-when we are tossing a trait object around, only the size of the pointer itself.\n-\n-### Representation\n-\n-The methods of the trait can be called on a trait object via a special record\n-of function pointers traditionally called a \u2018vtable\u2019 (created and managed by\n-the compiler).\n-\n-Trait objects are both simple and complicated: their core representation and\n-layout is quite straight-forward, but there are some curly error messages and\n-surprising behaviors to discover.\n-\n-Let\u2019s start simple, with the runtime representation of a trait object. The\n-`std::raw` module contains structs with layouts that are the same as the\n-complicated built-in types, [including trait objects][stdraw]:\n-\n-```rust\n-# mod foo {\n-pub struct TraitObject {\n-    pub data: *mut (),\n-    pub vtable: *mut (),\n-}\n-# }\n-```\n-\n-[stdraw]: ../std/raw/struct.TraitObject.html\n-\n-That is, a trait object like `&Foo` consists of a \u2018data\u2019 pointer and a \u2018vtable\u2019\n-pointer.\n-\n-The data pointer addresses the data (of some unknown type `T`) that the trait\n-object is storing, and the vtable pointer points to the vtable (\u2018virtual method\n-table\u2019) corresponding to the implementation of `Foo` for `T`.\n-\n-\n-A vtable is essentially a struct of function pointers, pointing to the concrete\n-piece of machine code for each method in the implementation. A method call like\n-`trait_object.method()` will retrieve the correct pointer out of the vtable and\n-then do a dynamic call of it. For example:\n-\n-```rust,ignore\n-struct FooVtable {\n-    destructor: fn(*mut ()),\n-    size: usize,\n-    align: usize,\n-    method: fn(*const ()) -> String,\n-}\n-\n-// u8:\n-\n-fn call_method_on_u8(x: *const ()) -> String {\n-    // The compiler guarantees that this function is only called\n-    // with `x` pointing to a u8.\n-    let byte: &u8 = unsafe { &*(x as *const u8) };\n-\n-    byte.method()\n-}\n-\n-static Foo_for_u8_vtable: FooVtable = FooVtable {\n-    destructor: /* compiler magic */,\n-    size: 1,\n-    align: 1,\n-\n-    // Cast to a function pointer:\n-    method: call_method_on_u8 as fn(*const ()) -> String,\n-};\n-\n-\n-// String:\n-\n-fn call_method_on_String(x: *const ()) -> String {\n-    // The compiler guarantees that this function is only called\n-    // with `x` pointing to a String.\n-    let string: &String = unsafe { &*(x as *const String) };\n-\n-    string.method()\n-}\n-\n-static Foo_for_String_vtable: FooVtable = FooVtable {\n-    destructor: /* compiler magic */,\n-    // Values for a 64-bit computer, halve them for 32-bit ones.\n-    size: 24,\n-    align: 8,\n-\n-    method: call_method_on_String as fn(*const ()) -> String,\n-};\n-```\n-\n-The `destructor` field in each vtable points to a function that will clean up\n-any resources of the vtable\u2019s type: for `u8` it is trivial, but for `String` it\n-will free the memory. This is necessary for owning trait objects like\n-`Box<Foo>`, which need to clean-up both the `Box` allocation as well as the\n-internal type when they go out of scope. The `size` and `align` fields store\n-the size of the erased type, and its alignment requirements.\n-\n-Suppose we\u2019ve got some values that implement `Foo`. The explicit form of\n-construction and use of `Foo` trait objects might look a bit like (ignoring the\n-type mismatches: they\u2019re all pointers anyway):\n-\n-```rust,ignore\n-let a: String = \"foo\".to_string();\n-let x: u8 = 1;\n-\n-// let b: &Foo = &a;\n-let b = TraitObject {\n-    // Store the data:\n-    data: &a,\n-    // Store the methods:\n-    vtable: &Foo_for_String_vtable\n-};\n-\n-// let y: &Foo = x;\n-let y = TraitObject {\n-    // Store the data:\n-    data: &x,\n-    // Store the methods:\n-    vtable: &Foo_for_u8_vtable\n-};\n-\n-// b.method();\n-(b.vtable.method)(b.data);\n-\n-// y.method();\n-(y.vtable.method)(y.data);\n-```\n-\n-## Object Safety\n-\n-Not every trait can be used to make a trait object. For example, vectors implement\n-`Clone`, but if we try to make a trait object:\n-\n-```rust,ignore\n-let v = vec![1, 2, 3];\n-let o = &v as &Clone;\n-```\n-\n-We get an error:\n-\n-```text\n-error: cannot convert to a trait object because trait `core::clone::Clone` is not object-safe [E0038]\n-let o = &v as &Clone;\n-        ^~\n-note: the trait cannot require that `Self : Sized`\n-let o = &v as &Clone;\n-        ^~\n-```\n-\n-The error says that `Clone` is not \u2018object-safe\u2019. Only traits that are\n-object-safe can be made into trait objects. A trait is object-safe if both of\n-these are true:\n-\n-* the trait does not require that `Self: Sized`\n-* all of its methods are object-safe\n-\n-So what makes a method object-safe? Each method must require that `Self: Sized`\n-or all of the following:\n-\n-* must not have any type parameters\n-* must not use `Self`\n-\n-Whew! As we can see, almost all of these rules talk about `Self`. A good intuition\n-is \u201cexcept in special circumstances, if your trait\u2019s method uses `Self`, it is not\n-object-safe.\u201d"}, {"sha": "19a133f84b0b6ffee92eaf55645bfc1989e4263b", "filename": "src/doc/book/src/traits.md", "status": "removed", "additions": 0, "deletions": 551, "changes": 551, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ftraits.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,551 +0,0 @@\n-# Traits\n-\n-A trait is a language feature that tells the Rust compiler about\n-functionality a type must provide.\n-\n-Recall the `impl` keyword, used to call a function with [method\n-syntax][methodsyntax]:\n-\n-```rust\n-struct Circle {\n-    x: f64,\n-    y: f64,\n-    radius: f64,\n-}\n-\n-impl Circle {\n-    fn area(&self) -> f64 {\n-        std::f64::consts::PI * (self.radius * self.radius)\n-    }\n-}\n-```\n-\n-[methodsyntax]: method-syntax.html\n-\n-Traits are similar, except that we first define a trait with a method\n-signature, then implement the trait for a type. In this example, we implement the trait `HasArea` for `Circle`:\n-\n-```rust\n-struct Circle {\n-    x: f64,\n-    y: f64,\n-    radius: f64,\n-}\n-\n-trait HasArea {\n-    fn area(&self) -> f64;\n-}\n-\n-impl HasArea for Circle {\n-    fn area(&self) -> f64 {\n-        std::f64::consts::PI * (self.radius * self.radius)\n-    }\n-}\n-```\n-\n-As you can see, the `trait` block looks very similar to the `impl` block,\n-but we don\u2019t define a body, only a type signature. When we `impl` a trait,\n-we use `impl Trait for Item`, rather than only `impl Item`.\n-\n-`Self` may be used in a type annotation to refer to an instance of the type\n-implementing this trait passed as a parameter. `Self`, `&Self` or `&mut Self`\n-may be used depending on the level of ownership required.\n-\n-```rust\n-struct Circle {\n-    x: f64,\n-    y: f64,\n-    radius: f64,\n-}\n-\n-trait HasArea {\n-    fn area(&self) -> f64;\n-\n-    fn is_larger(&self, &Self) -> bool;\n-}\n-\n-impl HasArea for Circle {\n-    fn area(&self) -> f64 {\n-        std::f64::consts::PI * (self.radius * self.radius)\n-    }\n-\n-    fn is_larger(&self, other: &Self) -> bool {\n-        self.area() > other.area()\n-    }\n-}\n-```\n-\n-## Trait bounds on generic functions\n-\n-Traits are useful because they allow a type to make certain promises about its\n-behavior. Generic functions can exploit this to constrain, or [bound][bounds], the types they\n-accept. Consider this function, which does not compile:\n-\n-[bounds]: glossary.html#bounds\n-\n-```rust,ignore\n-fn print_area<T>(shape: T) {\n-    println!(\"This shape has an area of {}\", shape.area());\n-}\n-```\n-\n-Rust complains:\n-\n-```text\n-error: no method named `area` found for type `T` in the current scope\n-```\n-\n-Because `T` can be any type, we can\u2019t be sure that it implements the `area`\n-method. But we can add a trait bound to our generic `T`, ensuring\n-that it does:\n-\n-```rust\n-# trait HasArea {\n-#     fn area(&self) -> f64;\n-# }\n-fn print_area<T: HasArea>(shape: T) {\n-    println!(\"This shape has an area of {}\", shape.area());\n-}\n-```\n-\n-The syntax `<T: HasArea>` means \u201cany type that implements the `HasArea` trait.\u201d\n-Because traits define function type signatures, we can be sure that any type\n-which implements `HasArea` will have an `.area()` method.\n-\n-Here\u2019s an extended example of how this works:\n-\n-```rust\n-trait HasArea {\n-    fn area(&self) -> f64;\n-}\n-\n-struct Circle {\n-    x: f64,\n-    y: f64,\n-    radius: f64,\n-}\n-\n-impl HasArea for Circle {\n-    fn area(&self) -> f64 {\n-        std::f64::consts::PI * (self.radius * self.radius)\n-    }\n-}\n-\n-struct Square {\n-    x: f64,\n-    y: f64,\n-    side: f64,\n-}\n-\n-impl HasArea for Square {\n-    fn area(&self) -> f64 {\n-        self.side * self.side\n-    }\n-}\n-\n-fn print_area<T: HasArea>(shape: T) {\n-    println!(\"This shape has an area of {}\", shape.area());\n-}\n-\n-fn main() {\n-    let c = Circle {\n-        x: 0.0f64,\n-        y: 0.0f64,\n-        radius: 1.0f64,\n-    };\n-\n-    let s = Square {\n-        x: 0.0f64,\n-        y: 0.0f64,\n-        side: 1.0f64,\n-    };\n-\n-    print_area(c);\n-    print_area(s);\n-}\n-```\n-\n-This program outputs:\n-\n-```text\n-This shape has an area of 3.141593\n-This shape has an area of 1\n-```\n-\n-As you can see, `print_area` is now generic, but also ensures that we have\n-passed in the correct types. If we pass in an incorrect type:\n-\n-```rust,ignore\n-print_area(5);\n-```\n-\n-We get a compile-time error:\n-\n-```text\n-error: the trait bound `_ : HasArea` is not satisfied [E0277]\n-```\n-\n-## Trait bounds on generic structs\n-\n-Your generic structs can also benefit from trait bounds. All you need to\n-do is append the bound when you declare type parameters. Here is a new\n-type `Rectangle<T>` and its operation `is_square()`:\n-\n-```rust\n-struct Rectangle<T> {\n-    x: T,\n-    y: T,\n-    width: T,\n-    height: T,\n-}\n-\n-impl<T: PartialEq> Rectangle<T> {\n-    fn is_square(&self) -> bool {\n-        self.width == self.height\n-    }\n-}\n-\n-fn main() {\n-    let mut r = Rectangle {\n-        x: 0,\n-        y: 0,\n-        width: 47,\n-        height: 47,\n-    };\n-\n-    assert!(r.is_square());\n-\n-    r.height = 42;\n-    assert!(!r.is_square());\n-}\n-```\n-\n-`is_square()` needs to check that the sides are equal, so the sides must be of\n-a type that implements the [`core::cmp::PartialEq`][PartialEq] trait:\n-\n-```rust,ignore\n-impl<T: PartialEq> Rectangle<T> { ... }\n-```\n-\n-Now, a rectangle can be defined in terms of any type that can be compared for\n-equality.\n-\n-[PartialEq]: ../core/cmp/trait.PartialEq.html\n-\n-Here we defined a new struct `Rectangle` that accepts numbers of any\n-precision\u2014really, objects of pretty much any type\u2014as long as they can be\n-compared for equality. Could we do the same for our `HasArea` structs, `Square`\n-and `Circle`? Yes, but they need multiplication, and to work with that we need\n-to know more about [operator traits][operators-and-overloading].\n-\n-[operators-and-overloading]: operators-and-overloading.html\n-\n-# Rules for implementing traits\n-\n-So far, we\u2019ve only added trait implementations to structs, but you can\n-implement a trait for any type such as `f32`:\n-\n-```rust\n-trait ApproxEqual {\n-    fn approx_equal(&self, other: &Self) -> bool;\n-}\n-impl ApproxEqual for f32 {\n-    fn approx_equal(&self, other: &Self) -> bool {\n-        // Appropriate for `self` and `other` being close to 1.0.\n-        (self - other).abs() <= ::std::f32::EPSILON\n-    }\n-}\n-\n-println!(\"{}\", 1.0.approx_equal(&1.00000001));\n-```\n-\n-This may seem like the Wild West, but there are two restrictions around\n-implementing traits that prevent this from getting out of hand. The first is\n-that if the trait isn\u2019t defined in your scope, it doesn\u2019t apply. Here\u2019s an\n-example: the standard library provides a [`Write`][write] trait which adds\n-extra functionality to `File`s, for doing file I/O. By default, a `File`\n-won\u2019t have its methods:\n-\n-[write]: ../std/io/trait.Write.html\n-\n-```rust,ignore\n-let mut f = std::fs::File::create(\"foo.txt\").expect(\"Couldn\u2019t create foo.txt\");\n-let buf = b\"whatever\"; // buf: &[u8; 8], a byte string literal.\n-let result = f.write(buf);\n-# result.unwrap(); // Ignore the error.\n-```\n-\n-Here\u2019s the error:\n-\n-```text\n-error: type `std::fs::File` does not implement any method in scope named `write`\n-let result = f.write(buf);\n-               ^~~~~~~~~~\n-```\n-\n-We need to `use` the `Write` trait first:\n-\n-```rust,no_run\n-use std::io::Write;\n-\n-let mut f = std::fs::File::create(\"foo.txt\").expect(\"Couldn\u2019t create foo.txt\");\n-let buf = b\"whatever\";\n-let result = f.write(buf);\n-# result.unwrap(); // Ignore the error.\n-```\n-\n-This will compile without error.\n-\n-This means that even if someone does something bad like add methods to `i32`,\n-it won\u2019t affect you, unless you `use` that trait.\n-\n-There\u2019s one more restriction on implementing traits: either the trait\n-or the type you\u2019re implementing it for must be defined by you. Or more\n-precisely, one of them must be defined in the same crate as the `impl`\n-you're writing. For more on Rust's module and package system, see the\n-chapter on [crates and modules][cm].\n-\n-So, we could implement the `HasArea` type for `i32`, because we defined\n-`HasArea` in our code. But if we tried to implement `ToString`, a trait\n-provided by Rust, for `i32`, we could not, because neither the trait nor\n-the type are defined in our crate.\n-\n-One last thing about traits: generic functions with a trait bound use\n-\u2018monomorphization\u2019 (mono: one, morph: form), so they are statically dispatched.\n-What\u2019s that mean? Check out the chapter on [trait objects][to] for more details.\n-\n-[cm]: crates-and-modules.html\n-[to]: trait-objects.html\n-\n-# Multiple trait bounds\n-\n-You\u2019ve seen that you can bound a generic type parameter with a trait:\n-\n-```rust\n-fn foo<T: Clone>(x: T) {\n-    x.clone();\n-}\n-```\n-\n-If you need more than one bound, you can use `+`:\n-\n-```rust\n-use std::fmt::Debug;\n-\n-fn foo<T: Clone + Debug>(x: T) {\n-    x.clone();\n-    println!(\"{:?}\", x);\n-}\n-```\n-\n-`T` now needs to be both `Clone` as well as `Debug`.\n-\n-# Where clause\n-\n-Writing functions with only a few generic types and a small number of trait\n-bounds isn\u2019t too bad, but as the number increases, the syntax gets increasingly\n-awkward:\n-\n-```rust\n-use std::fmt::Debug;\n-\n-fn foo<T: Clone, K: Clone + Debug>(x: T, y: K) {\n-    x.clone();\n-    y.clone();\n-    println!(\"{:?}\", y);\n-}\n-```\n-\n-The name of the function is on the far left, and the parameter list is on the\n-far right. The bounds are getting in the way.\n-\n-Rust has a solution, and it\u2019s called a \u2018`where` clause\u2019:\n-\n-```rust\n-use std::fmt::Debug;\n-\n-fn foo<T: Clone, K: Clone + Debug>(x: T, y: K) {\n-    x.clone();\n-    y.clone();\n-    println!(\"{:?}\", y);\n-}\n-\n-fn bar<T, K>(x: T, y: K) where T: Clone, K: Clone + Debug {\n-    x.clone();\n-    y.clone();\n-    println!(\"{:?}\", y);\n-}\n-\n-fn main() {\n-    foo(\"Hello\", \"world\");\n-    bar(\"Hello\", \"world\");\n-}\n-```\n-\n-`foo()` uses the syntax we showed earlier, and `bar()` uses a `where` clause.\n-All you need to do is leave off the bounds when defining your type parameters,\n-and then add `where` after the parameter list. For longer lists, whitespace can\n-be added:\n-\n-```rust\n-use std::fmt::Debug;\n-\n-fn bar<T, K>(x: T, y: K)\n-    where T: Clone,\n-          K: Clone + Debug {\n-\n-    x.clone();\n-    y.clone();\n-    println!(\"{:?}\", y);\n-}\n-```\n-\n-This flexibility can add clarity in complex situations.\n-\n-`where` is also more powerful than the simpler syntax. For example:\n-\n-```rust\n-trait ConvertTo<Output> {\n-    fn convert(&self) -> Output;\n-}\n-\n-impl ConvertTo<i64> for i32 {\n-    fn convert(&self) -> i64 { *self as i64 }\n-}\n-\n-// Can be called with T == i32.\n-fn normal<T: ConvertTo<i64>>(x: &T) -> i64 {\n-    x.convert()\n-}\n-\n-// Can be called with T == i64.\n-fn inverse<T>(x: i32) -> T\n-        // This is using ConvertTo as if it were \"ConvertTo<i64>\".\n-        where i32: ConvertTo<T> {\n-    x.convert()\n-}\n-```\n-\n-This shows off the additional feature of `where` clauses: they allow bounds\n-on the left-hand side not only of type parameters `T`, but also of types (`i32` in this case). In this example, `i32` must implement\n-`ConvertTo<T>`. Rather than defining what `i32` is (since that's obvious), the\n-`where` clause here constrains `T`.\n-\n-# Default methods\n-\n-A default method can be added to a trait definition if it is already known how a typical implementor will define a method. For example, `is_invalid()` is defined as the opposite of `is_valid()`:\n-\n-```rust\n-trait Foo {\n-    fn is_valid(&self) -> bool;\n-\n-    fn is_invalid(&self) -> bool { !self.is_valid() }\n-}\n-```\n-\n-Implementors of the `Foo` trait need to implement `is_valid()` but not `is_invalid()` due to the added default behavior. This default behavior can still be overridden as in:\n-\n-```rust\n-# trait Foo {\n-#     fn is_valid(&self) -> bool;\n-#\n-#     fn is_invalid(&self) -> bool { !self.is_valid() }\n-# }\n-struct UseDefault;\n-\n-impl Foo for UseDefault {\n-    fn is_valid(&self) -> bool {\n-        println!(\"Called UseDefault.is_valid.\");\n-        true\n-    }\n-}\n-\n-struct OverrideDefault;\n-\n-impl Foo for OverrideDefault {\n-    fn is_valid(&self) -> bool {\n-        println!(\"Called OverrideDefault.is_valid.\");\n-        true\n-    }\n-\n-    fn is_invalid(&self) -> bool {\n-        println!(\"Called OverrideDefault.is_invalid!\");\n-        true // Overrides the expected value of `is_invalid()`.\n-    }\n-}\n-\n-let default = UseDefault;\n-assert!(!default.is_invalid()); // Prints \"Called UseDefault.is_valid.\"\n-\n-let over = OverrideDefault;\n-assert!(over.is_invalid()); // Prints \"Called OverrideDefault.is_invalid!\"\n-```\n-\n-# Inheritance\n-\n-Sometimes, implementing a trait requires implementing another trait:\n-\n-```rust\n-trait Foo {\n-    fn foo(&self);\n-}\n-\n-trait FooBar : Foo {\n-    fn foobar(&self);\n-}\n-```\n-\n-Implementors of `FooBar` must also implement `Foo`, like this:\n-\n-```rust\n-# trait Foo {\n-#     fn foo(&self);\n-# }\n-# trait FooBar : Foo {\n-#     fn foobar(&self);\n-# }\n-struct Baz;\n-\n-impl Foo for Baz {\n-    fn foo(&self) { println!(\"foo\"); }\n-}\n-\n-impl FooBar for Baz {\n-    fn foobar(&self) { println!(\"foobar\"); }\n-}\n-```\n-\n-If we forget to implement `Foo`, Rust will tell us:\n-\n-```text\n-error: the trait bound `main::Baz : main::Foo` is not satisfied [E0277]\n-```\n-\n-# Deriving\n-\n-Implementing traits like `Debug` and `Default` repeatedly can become\n-quite tedious. For that reason, Rust provides an [attribute][attributes] that\n-allows you to let Rust automatically implement traits for you:\n-\n-```rust\n-#[derive(Debug)]\n-struct Foo;\n-\n-fn main() {\n-    println!(\"{:?}\", Foo);\n-}\n-```\n-\n-[attributes]: attributes.html\n-\n-However, deriving is limited to a certain set of traits:\n-\n-- [`Clone`](../core/clone/trait.Clone.html)\n-- [`Copy`](../core/marker/trait.Copy.html)\n-- [`Debug`](../core/fmt/trait.Debug.html)\n-- [`Default`](../core/default/trait.Default.html)\n-- [`Eq`](../core/cmp/trait.Eq.html)\n-- [`Hash`](../core/hash/trait.Hash.html)\n-- [`Ord`](../core/cmp/trait.Ord.html)\n-- [`PartialEq`](../core/cmp/trait.PartialEq.html)\n-- [`PartialOrd`](../core/cmp/trait.PartialOrd.html)"}, {"sha": "1bd0f78e36853143cf391b91957ef653c1ed20a9", "filename": "src/doc/book/src/type-aliases.md", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Ftype-aliases.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Ftype-aliases.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ftype-aliases.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,78 +0,0 @@\n-# Type Aliases\n-\n-The `type` keyword lets you declare an alias of another type:\n-\n-```rust\n-type Name = String;\n-```\n-\n-You can then use this type as if it were a real type:\n-\n-```rust\n-type Name = String;\n-\n-let x: Name = \"Hello\".to_string();\n-```\n-\n-Note, however, that this is an _alias_, not a new type entirely. In other\n-words, because Rust is strongly typed, you\u2019d expect a comparison between two\n-different types to fail:\n-\n-```rust,ignore\n-let x: i32 = 5;\n-let y: i64 = 5;\n-\n-if x == y {\n-   // ...\n-}\n-```\n-\n-this gives\n-\n-```text\n-error: mismatched types:\n- expected `i32`,\n-    found `i64`\n-(expected i32,\n-    found i64) [E0308]\n-     if x == y {\n-             ^\n-```\n-\n-But, if we had an alias:\n-\n-```rust\n-type Num = i32;\n-\n-let x: i32 = 5;\n-let y: Num = 5;\n-\n-if x == y {\n-   // ...\n-}\n-```\n-\n-This compiles without error. Values of a `Num` type are the same as a value of\n-type `i32`, in every way. You can use [tuple struct] to really get a new type.\n-\n-[tuple struct]: structs.html#tuple-structs\n-\n-You can also use type aliases with generics:\n-\n-```rust\n-use std::result;\n-\n-enum ConcreteError {\n-    Foo,\n-    Bar,\n-}\n-\n-type Result<T> = result::Result<T, ConcreteError>;\n-```\n-\n-This creates a specialized version of the `Result` type, which always has a\n-`ConcreteError` for the `E` part of `Result<T, E>`. This is commonly used\n-in the standard library to create custom errors for each subsection. For\n-example, [io::Result][ioresult].\n-\n-[ioresult]: ../std/io/type.Result.html"}, {"sha": "016ecc70976574d33b5e4b06c476c1745c5a1e49", "filename": "src/doc/book/src/ufcs.md", "status": "removed", "additions": 0, "deletions": 136, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fufcs.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fufcs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fufcs.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,136 +0,0 @@\n-# Universal Function Call Syntax\n-\n-Sometimes, functions can have the same names. Consider this code:\n-\n-```rust\n-trait Foo {\n-    fn f(&self);\n-}\n-\n-trait Bar {\n-    fn f(&self);\n-}\n-\n-struct Baz;\n-\n-impl Foo for Baz {\n-    fn f(&self) { println!(\"Baz\u2019s impl of Foo\"); }\n-}\n-\n-impl Bar for Baz {\n-    fn f(&self) { println!(\"Baz\u2019s impl of Bar\"); }\n-}\n-\n-let b = Baz;\n-```\n-\n-If we were to try to call `b.f()`, we\u2019d get an error:\n-\n-```text\n-error: multiple applicable methods in scope [E0034]\n-b.f();\n-  ^~~\n-note: candidate #1 is defined in an impl of the trait `main::Foo` for the type\n-`main::Baz`\n-    fn f(&self) { println!(\"Baz\u2019s impl of Foo\"); }\n-    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-note: candidate #2 is defined in an impl of the trait `main::Bar` for the type\n-`main::Baz`\n-    fn f(&self) { println!(\"Baz\u2019s impl of Bar\"); }\n-    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-```\n-\n-We need a way to disambiguate which method we need. This feature is called\n-\u2018universal function call syntax\u2019, and it looks like this:\n-\n-```rust\n-# trait Foo {\n-#     fn f(&self);\n-# }\n-# trait Bar {\n-#     fn f(&self);\n-# }\n-# struct Baz;\n-# impl Foo for Baz {\n-#     fn f(&self) { println!(\"Baz\u2019s impl of Foo\"); }\n-# }\n-# impl Bar for Baz {\n-#     fn f(&self) { println!(\"Baz\u2019s impl of Bar\"); }\n-# }\n-# let b = Baz;\n-Foo::f(&b);\n-Bar::f(&b);\n-```\n-\n-Let\u2019s break it down.\n-\n-```rust,ignore\n-Foo::\n-Bar::\n-```\n-\n-These halves of the invocation are the types of the two traits: `Foo` and\n-`Bar`. This is what ends up actually doing the disambiguation between the two:\n-Rust calls the one from the trait name you use.\n-\n-```rust,ignore\n-f(&b)\n-```\n-\n-When we call a method like `b.f()` using [method syntax][methodsyntax], Rust\n-will automatically borrow `b` if `f()` takes `&self`. In this case, Rust will\n-not, and so we need to pass an explicit `&b`.\n-\n-[methodsyntax]: method-syntax.html\n-\n-# Angle-bracket Form\n-\n-The form of UFCS we just talked about:\n-\n-```rust,ignore\n-Trait::method(args);\n-```\n-\n-Is a short-hand. There\u2019s an expanded form of this that\u2019s needed in some\n-situations:\n-\n-```rust,ignore\n-<Type as Trait>::method(args);\n-```\n-\n-The `<>::` syntax is a means of providing a type hint. The type goes inside\n-the `<>`s. In this case, the type is `Type as Trait`, indicating that we want\n-`Trait`\u2019s version of `method` to be called here. The `as Trait` part is\n-optional if it\u2019s not ambiguous. Same with the angle brackets, hence the\n-shorter form.\n-\n-Here\u2019s an example of using the longer form.\n-\n-```rust\n-trait Foo {\n-    fn foo() -> i32;\n-}\n-\n-struct Bar;\n-\n-impl Bar {\n-    fn foo() -> i32 {\n-        20\n-    }\n-}\n-\n-impl Foo for Bar {\n-    fn foo() -> i32 {\n-        10\n-    }\n-}\n-\n-fn main() {\n-    assert_eq!(10, <Bar as Foo>::foo());\n-    assert_eq!(20, Bar::foo());\n-}\n-```\n-\n-Using the angle bracket syntax lets you call the trait method instead of the\n-inherent one."}, {"sha": "9bf59fe2abdc37d22820d6331ba661755b009ec3", "filename": "src/doc/book/src/unsafe.md", "status": "removed", "additions": 0, "deletions": 142, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Funsafe.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,142 +0,0 @@\n-# Unsafe\n-\n-Rust\u2019s main draw is its powerful static guarantees about behavior. But safety\n-checks are conservative by nature: there are some programs that are actually\n-safe, but the compiler is not able to verify this is true. To write these kinds\n-of programs, we need to tell the compiler to relax its restrictions a bit. For\n-this, Rust has a keyword, `unsafe`. Code using `unsafe` has fewer restrictions\n-than normal code does.\n-\n-Let\u2019s go over the syntax, and then we\u2019ll talk semantics. `unsafe` is used in\n-four contexts. The first one is to mark a function as unsafe:\n-\n-```rust\n-unsafe fn danger_will_robinson() {\n-    // Scary stuff...\n-}\n-```\n-\n-All functions called from [FFI][ffi] must be marked as `unsafe`, for example.\n-The second use of `unsafe` is an unsafe block:\n-\n-[ffi]: ffi.html\n-\n-```rust\n-unsafe {\n-    // Scary stuff...\n-}\n-```\n-\n-The third is for unsafe traits:\n-\n-```rust\n-unsafe trait Scary { }\n-```\n-\n-And the fourth is for `impl`ementing one of those traits:\n-\n-```rust\n-# unsafe trait Scary { }\n-unsafe impl Scary for i32 {}\n-```\n-\n-It\u2019s important to be able to explicitly delineate code that may have bugs that\n-cause big problems. If a Rust program segfaults, you can be sure the cause is\n-related to something marked `unsafe`.\n-\n-# What does \u2018safe\u2019 mean?\n-\n-Safe, in the context of Rust, means \u2018doesn\u2019t do anything unsafe\u2019. It\u2019s also\n-important to know that there are certain behaviors that are probably not\n-desirable in your code, but are expressly _not_ unsafe:\n-\n-* Deadlocks\n-* Leaks of memory or other resources\n-* Exiting without calling destructors\n-* Integer overflow\n-\n-Rust cannot prevent all kinds of software problems. Buggy code can and will be\n-written in Rust. These things aren\u2019t great, but they don\u2019t qualify as `unsafe`\n-specifically.\n-\n-In addition, the following are all undefined behaviors in Rust, and must be\n-avoided, even when writing `unsafe` code:\n-\n-* Data races\n-* Dereferencing a NULL/dangling raw pointer\n-* Reads of [undef][undef] (uninitialized) memory\n-* Breaking the [pointer aliasing rules][aliasing] with raw pointers.\n-* `&mut T` and `&T` follow LLVM\u2019s scoped [noalias][noalias] model, except if\n-  the `&T` contains an `UnsafeCell<U>`. Unsafe code must not violate these\n-  aliasing guarantees.\n-* Mutating an immutable value/reference without `UnsafeCell<U>`\n-* Invoking undefined behavior via compiler intrinsics:\n-  * Indexing outside of the bounds of an object with `std::ptr::offset`\n-    (`offset` intrinsic), with\n-    the exception of one byte past the end which is permitted.\n-  * Using `std::ptr::copy_nonoverlapping_memory` (`memcpy32`/`memcpy64`\n-    intrinsics) on overlapping buffers\n-* Invalid values in primitive types, even in private fields/locals:\n-  * NULL/dangling references or boxes\n-  * A value other than `false` (0) or `true` (1) in a `bool`\n-  * A discriminant in an `enum` not included in its type definition\n-  * A value in a `char` which is a surrogate or above `char::MAX`\n-  * Non-UTF-8 byte sequences in a `str`\n-* Unwinding into Rust from foreign code or unwinding from Rust into foreign\n-  code.\n-\n-[noalias]: http://llvm.org/docs/LangRef.html#noalias\n-[undef]: http://llvm.org/docs/LangRef.html#undefined-values\n-[aliasing]: http://llvm.org/docs/LangRef.html#pointer-aliasing-rules\n-\n-# Unsafe Superpowers\n-\n-In both unsafe functions and unsafe blocks, Rust will let you do three things\n-that you normally can not do. Just three. Here they are:\n-\n-1. Access or update a [static mutable variable][static].\n-2. Dereference a raw pointer.\n-3. Call unsafe functions. This is the most powerful ability.\n-\n-That\u2019s it. It\u2019s important that `unsafe` does not, for example, \u2018turn off the\n-borrow checker\u2019. Adding `unsafe` to some random Rust code doesn\u2019t change its\n-semantics, it won\u2019t start accepting anything. But it will let you write\n-things that _do_ break some of the rules.\n-\n-You will also encounter the `unsafe` keyword when writing bindings to foreign\n-(non-Rust) interfaces. You're encouraged to write a safe, native Rust interface\n-around the methods provided by the library.\n-\n-Let\u2019s go over the basic three abilities listed, in order.\n-\n-## Access or update a `static mut`\n-\n-Rust has a feature called \u2018`static mut`\u2019 which allows for mutable global state.\n-Doing so can cause a data race, and as such is inherently not safe. For more\n-details, see the [static][static] section of the book.\n-\n-[static]: const-and-static.html#static\n-\n-## Dereference a raw pointer\n-\n-Raw pointers let you do arbitrary pointer arithmetic, and can cause a number of\n-different memory safety and security issues. In some senses, the ability to\n-dereference an arbitrary pointer is one of the most dangerous things you can\n-do. For more on raw pointers, see [their section of the book][rawpointers].\n-\n-[rawpointers]: raw-pointers.html\n-\n-## Call unsafe functions\n-\n-This last ability works with both aspects of `unsafe`: you can only call\n-functions marked `unsafe` from inside an unsafe block.\n-\n-This ability is powerful and varied. Rust exposes some [compiler\n-intrinsics][intrinsics] as unsafe functions, and some unsafe functions bypass\n-safety checks, trading safety for speed.\n-\n-I\u2019ll repeat again: even though you _can_ do arbitrary things in unsafe blocks\n-and functions doesn\u2019t mean you should. The compiler will act as though you\u2019re\n-upholding its invariants, so be careful!\n-\n-[intrinsics]: ../unstable-book/intrinsics.html"}, {"sha": "2d090925d51f6cc7d4aa38a44e4d9b114003099c", "filename": "src/doc/book/src/unsized-types.md", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Funsized-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Funsized-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Funsized-types.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,61 +0,0 @@\n-# Unsized Types\n-\n-Most types have a particular size, in bytes, that is knowable at compile time.\n-For example, an `i32` is thirty-two bits big, or four bytes. However, there are\n-some types which are useful to express, but do not have a defined size. These are\n-called \u2018unsized\u2019 or \u2018dynamically sized\u2019 types. One example is `[T]`. This type\n-represents a certain number of `T` in sequence. But we don\u2019t know how many\n-there are, so the size is not known.\n-\n-Rust understands a few of these types, but they have some restrictions. There\n-are three:\n-\n-1. We can only manipulate an instance of an unsized type via a pointer. An\n-   `&[T]` works fine, but a `[T]` does not.\n-2. Variables and arguments cannot have dynamically sized types.\n-3. Only the last field in a `struct` may have a dynamically sized type; the\n-   other fields must not. Enum variants must not have dynamically sized types as\n-   data.\n-\n-So why bother? Well, because `[T]` can only be used behind a pointer, if we\n-didn\u2019t have language support for unsized types, it would be impossible to write\n-this:\n-\n-```rust,ignore\n-impl Foo for str {\n-```\n-\n-or\n-\n-```rust,ignore\n-impl<T> Foo for [T] {\n-```\n-\n-Instead, you would have to write:\n-\n-```rust,ignore\n-impl Foo for &str {\n-```\n-\n-Meaning, this implementation would only work for [references][ref], and not\n-other types of pointers. With the `impl for str`, all pointers, including (at\n-some point, there are some bugs to fix first) user-defined custom smart\n-pointers, can use this `impl`.\n-\n-[ref]: references-and-borrowing.html\n-\n-# ?Sized\n-\n-If you want to write a function that accepts a dynamically sized type, you\n-can use the special bound syntax, `?Sized`:\n-\n-```rust\n-struct Foo<T: ?Sized> {\n-    f: T,\n-}\n-```\n-\n-This `?Sized`, read as \u201cT may or may not be `Sized`\u201d, which allows us to match\n-both sized and unsized types. All generic type parameters implicitly\n-have the `Sized` bound, so the `?Sized` can be used to opt-out of the implicit\n-bound."}, {"sha": "709d10f4e47913dd63ad669e1a6e7484e5984d8e", "filename": "src/doc/book/src/using-rust-without-the-standard-library.md", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fusing-rust-without-the-standard-library.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fusing-rust-without-the-standard-library.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fusing-rust-without-the-standard-library.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,42 +0,0 @@\n-# Using Rust Without the Standard Library\n-\n-Rust\u2019s standard library provides a lot of useful functionality, but assumes\n-support for various features of its host system: threads, networking, heap\n-allocation, and others. There are systems that do not have these features,\n-however, and Rust can work with those too! To do so, we tell Rust that we\n-don\u2019t want to use the standard library via an attribute: `#![no_std]`.\n-\n-> Note: This feature is technically stable, but there are some caveats. For\n-> one, you can build a `#![no_std]` _library_ on stable, but not a _binary_.\n-> For details on binaries without the standard library, see [the nightly\n-> chapter on 'lang items'](../unstable-book/lang-items.html#using-libc)\n-\n-To use `#![no_std]`, add it to your crate root:\n-\n-```rust,ignore\n-#![no_std]\n-\n-fn plus_one(x: i32) -> i32 {\n-    x + 1\n-}\n-```\n-\n-Much of the functionality that\u2019s exposed in the standard library is also\n-available via the [`core` crate](../core/index.html). When we\u2019re using the\n-standard library, Rust automatically brings `std` into scope, allowing you to\n-use its features without an explicit import. By the same token, when using\n-`#![no_std]`, Rust will bring `core` into scope for you, as well as [its\n-prelude](../core/prelude/v1/index.html). This means that a lot of code will Just\n-Work:\n-\n-```rust,ignore\n-#![no_std]\n-\n-fn may_fail(failure: bool) -> Result<(), &'static str> {\n-    if failure {\n-        Err(\"this didn\u2019t work!\")\n-    } else {\n-        Ok(())\n-    }\n-}\n-```"}, {"sha": "d6aa8b1acb72fd6c480d2e845661397e51d2b446", "filename": "src/doc/book/src/variable-bindings.md", "status": "removed", "additions": 0, "deletions": 256, "changes": 256, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fvariable-bindings.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fvariable-bindings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fvariable-bindings.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,256 +0,0 @@\n-# Variable Bindings\n-\n-Virtually every non-'Hello World\u2019 Rust program uses *variable bindings*. They\n-bind some value to a name, so it can be used later. `let` is\n-used to introduce a binding, like this:\n-\n-```rust\n-fn main() {\n-    let x = 5;\n-}\n-```\n-\n-Putting `fn main() {` in each example is a bit tedious, so we\u2019ll leave that out\n-in the future. If you\u2019re following along, make sure to edit your `main()`\n-function, rather than leaving it off. Otherwise, you\u2019ll get an error.\n-\n-# Patterns\n-\n-In many languages, a variable binding would be called a *variable*, but Rust\u2019s\n-variable bindings have a few tricks up their sleeves. For example the\n-left-hand side of a `let` statement is a \u2018[pattern][pattern]\u2019, not a\n-variable name. This means we can do things like:\n-\n-```rust\n-let (x, y) = (1, 2);\n-```\n-\n-After this statement is evaluated, `x` will be one, and `y` will be two.\n-Patterns are really powerful, and have [their own section][pattern] in the\n-book. We don\u2019t need those features for now, so we\u2019ll keep this in the back\n-of our minds as we go forward.\n-\n-[pattern]: patterns.html\n-\n-# Type annotations\n-\n-Rust is a statically typed language, which means that we specify our types up\n-front, and they\u2019re checked at compile time. So why does our first example\n-compile? Well, Rust has this thing called \u2018type inference\u2019. If it can figure\n-out what the type of something is, Rust doesn\u2019t require you to explicitly type\n-it out.\n-\n-We can add the type if we want to, though. Types come after a colon (`:`):\n-\n-```rust\n-let x: i32 = 5;\n-```\n-\n-If I asked you to read this out loud to the rest of the class, you\u2019d say \u201c`x`\n-is a binding with the type `i32` and the value `5`.\u201d\n-\n-In this case we chose to represent `x` as a 32-bit signed integer. Rust has\n-many different primitive integer types. They begin with `i` for signed integers\n-and `u` for unsigned integers. The possible integer sizes are 8, 16, 32, and 64\n-bits.\n-\n-In future examples, we may annotate the type in a comment. The examples will\n-look like this:\n-\n-```rust\n-fn main() {\n-    let x = 5; // x: i32\n-}\n-```\n-\n-Note the similarities between this annotation and the syntax you use with\n-`let`. Including these kinds of comments is not idiomatic Rust, but we'll\n-occasionally include them to help you understand what the types that Rust\n-infers are.\n-\n-# Mutability\n-\n-By default, bindings are *immutable*. This code will not compile:\n-\n-```rust,ignore\n-let x = 5;\n-x = 10;\n-```\n-\n-It will give you this error:\n-\n-```text\n-error: re-assignment of immutable variable `x`\n-     x = 10;\n-     ^~~~~~~\n-```\n-\n-If you want a binding to be mutable, you can use `mut`:\n-\n-```rust\n-let mut x = 5; // mut x: i32\n-x = 10;\n-```\n-\n-There is no single reason that bindings are immutable by default, but we can\n-think about it through one of Rust\u2019s primary focuses: safety. If you forget to\n-say `mut`, the compiler will catch it, and let you know that you have mutated\n-something you may not have intended to mutate. If bindings were mutable by\n-default, the compiler would not be able to tell you this. If you _did_ intend\n-mutation, then the solution is quite easy: add `mut`.\n-\n-There are other good reasons to avoid mutable state when possible, but they\u2019re\n-out of the scope of this guide. In general, you can often avoid explicit\n-mutation, and so it is preferable in Rust. That said, sometimes, mutation is\n-what you need, so it\u2019s not forbidden.\n-\n-# Initializing bindings\n-\n-Rust variable bindings have one more aspect that differs from other languages:\n-bindings are required to be initialized with a value before you're allowed to\n-use them.\n-\n-Let\u2019s try it out. Change your `src/main.rs` file to look like this:\n-\n-```rust\n-fn main() {\n-    let x: i32;\n-\n-    println!(\"Hello world!\");\n-}\n-```\n-\n-You can use `cargo build` on the command line to build it. You\u2019ll get a\n-warning, but it will still print \"Hello, world!\":\n-\n-```text\n-   Compiling hello_world v0.0.1 (file:///home/you/projects/hello_world)\n-src/main.rs:2:9: 2:10 warning: unused variable: `x`, #[warn(unused_variables)]\n-   on by default\n-src/main.rs:2     let x: i32;\n-                      ^\n-```\n-\n-Rust warns us that we never use the variable binding, but since we never use\n-it, no harm, no foul. Things change if we try to actually use this `x`,\n-however. Let\u2019s do that. Change your program to look like this:\n-\n-```rust,ignore\n-fn main() {\n-    let x: i32;\n-\n-    println!(\"The value of x is: {}\", x);\n-}\n-```\n-\n-And try to build it. You\u2019ll get an error:\n-\n-```bash\n-$ cargo build\n-   Compiling hello_world v0.0.1 (file:///home/you/projects/hello_world)\n-src/main.rs:4:39: 4:40 error: use of possibly uninitialized variable: `x`\n-src/main.rs:4     println!(\"The value of x is: {}\", x);\n-                                                    ^\n-note: in expansion of format_args!\n-<std macros>:2:23: 2:77 note: expansion site\n-<std macros>:1:1: 3:2 note: in expansion of println!\n-src/main.rs:4:5: 4:42 note: expansion site\n-error: aborting due to previous error\n-Could not compile `hello_world`.\n-```\n-\n-Rust will not let us use a value that has not been initialized.\n-\n-Let us take a minute to talk about this stuff we've added to `println!`.\n-\n-If you include two curly braces (`{}`, some call them moustaches...) in your\n-string to print, Rust will interpret this as a request to interpolate some sort\n-of value. *String interpolation* is a computer science term that means \"stick\n-in the middle of a string.\" We add a comma, and then `x`, to indicate that we\n-want `x` to be the value we\u2019re interpolating. The comma is used to separate\n-arguments we pass to functions and macros, if you\u2019re passing more than one.\n-\n-When you use the curly braces, Rust will attempt to display the value in a\n-meaningful way by checking out its type. If you want to specify the format in a\n-more detailed manner, there are a [wide number of options available][format].\n-For now, we'll stick to the default: integers aren't very complicated to\n-print.\n-\n-[format]: ../std/fmt/index.html\n-\n-# Scope and shadowing\n-\n-Let\u2019s get back to bindings. Variable bindings have a scope - they are\n-constrained to live in the block they were defined in. A block is a collection\n-of statements enclosed by `{` and `}`. Function definitions are also blocks!\n-In the following example we define two variable bindings, `x` and `y`, which\n-live in different blocks. `x` can be accessed from inside the `fn main() {}`\n-block, while `y` can be accessed only from inside the inner block:\n-\n-```rust,ignore\n-fn main() {\n-    let x: i32 = 17;\n-    {\n-        let y: i32 = 3;\n-        println!(\"The value of x is {} and value of y is {}\", x, y);\n-    }\n-    println!(\"The value of x is {} and value of y is {}\", x, y); // This won't work.\n-}\n-```\n-\n-The first `println!` would print \"The value of x is 17 and the value of y is\n-3\", but this example cannot be compiled successfully, because the second\n-`println!` cannot access the value of `y`, since it is not in scope anymore.\n-Instead we get this error:\n-\n-```bash\n-$ cargo build\n-   Compiling hello v0.1.0 (file:///home/you/projects/hello_world)\n-main.rs:7:62: 7:63 error: unresolved name `y`. Did you mean `x`? [E0425]\n-main.rs:7     println!(\"The value of x is {} and value of y is {}\", x, y); // This won't work.\n-                                                                       ^\n-note: in expansion of format_args!\n-<std macros>:2:25: 2:56 note: expansion site\n-<std macros>:1:1: 2:62 note: in expansion of print!\n-<std macros>:3:1: 3:54 note: expansion site\n-<std macros>:1:1: 3:58 note: in expansion of println!\n-main.rs:7:5: 7:65 note: expansion site\n-main.rs:7:62: 7:63 help: run `rustc --explain E0425` to see a detailed explanation\n-error: aborting due to previous error\n-Could not compile `hello`.\n-\n-To learn more, run the command again with --verbose.\n-```\n-\n-Additionally, variable bindings can be shadowed. This means that a later\n-variable binding with the same name as another binding that is currently in\n-scope will override the previous binding.\n-\n-```rust\n-let x: i32 = 8;\n-{\n-    println!(\"{}\", x); // Prints \"8\".\n-    let x = 12;\n-    println!(\"{}\", x); // Prints \"12\".\n-}\n-println!(\"{}\", x); // Prints \"8\".\n-let x =  42;\n-println!(\"{}\", x); // Prints \"42\".\n-```\n-\n-Shadowing and mutable bindings may appear as two sides of the same coin, but\n-they are two distinct concepts that can't always be used interchangeably. For\n-one, shadowing enables us to rebind a name to a value of a different type. It\n-is also possible to change the mutability of a binding. Note that shadowing a \n-name does not alter or destroy the value it was bound to, and the value will\n-continue to exist until it goes out of scope, even if it is no longer accessible\n-by any means.\n-\n-```rust\n-let mut x: i32 = 1;\n-x = 7;\n-let x = x; // `x` is now immutable and is bound to `7`.\n-\n-let y = 4;\n-let y = \"I can also be bound to text!\"; // `y` is now of a different type.\n-```"}, {"sha": "aff078718dfb1311726529cb5199d7c2001d8288", "filename": "src/doc/book/src/vectors.md", "status": "removed", "additions": 0, "deletions": 156, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fvectors.md", "raw_url": "https://github.com/rust-lang/rust/raw/42cfdc1955e7585caa61d6c9fd5553a2acf8ed86/src%2Fdoc%2Fbook%2Fsrc%2Fvectors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fvectors.md?ref=42cfdc1955e7585caa61d6c9fd5553a2acf8ed86", "patch": "@@ -1,156 +0,0 @@\n-# Vectors\n-\n-A \u2018vector\u2019 is a dynamic or \u2018growable\u2019 array, implemented as the standard\n-library type [`Vec<T>`][vec]. The `T` means that we can have vectors\n-of any type (see the chapter on [generics][generic] for more).\n-Vectors always allocate their data on the heap.\n-You can create them with the `vec!` macro:\n-\n-```rust\n-let v = vec![1, 2, 3, 4, 5]; // v: Vec<i32>\n-```\n-\n-(Notice that unlike the `println!` macro we\u2019ve used in the past, we use square\n-brackets `[]` with `vec!` macro. Rust allows you to use either in either\n-situation, this is just convention.)\n-\n-There\u2019s an alternate form of `vec!` for repeating an initial value:\n-\n-```rust\n-let v = vec![0; 10]; // A vector of ten zeroes.\n-```\n-\n-Vectors store their contents as contiguous arrays of `T` on the heap. This means\n-that they must be able to know the size of `T` at compile time (that is, how\n-many bytes are needed to store a `T`?). The size of some things can't be known\n-at compile time. For these you'll have to store a pointer to that thing:\n-thankfully, the [`Box`][box] type works perfectly for this.\n-\n-## Accessing elements\n-\n-To get the value at a particular index in the vector, we use `[]`s:\n-\n-```rust\n-let v = vec![1, 2, 3, 4, 5];\n-\n-println!(\"The third element of v is {}\", v[2]);\n-```\n-\n-The indices count from `0`, so the third element is `v[2]`.\n-\n-It\u2019s also important to note that you must index with the `usize` type:\n-\n-```rust,ignore\n-let v = vec![1, 2, 3, 4, 5];\n-\n-let i: usize = 0;\n-let j: i32 = 0;\n-\n-// Works:\n-v[i];\n-\n-// Doesn\u2019t:\n-v[j];\n-```\n-\n-Indexing with a non-`usize` type gives an error that looks like this:\n-\n-```text\n-error: the trait bound `collections::vec::Vec<_> : core::ops::Index<i32>`\n-is not satisfied [E0277]\n-v[j];\n-^~~~\n-note: the type `collections::vec::Vec<_>` cannot be indexed by `i32`\n-error: aborting due to previous error\n-```\n-\n-There\u2019s a lot of punctuation in that message, but the core of it makes sense:\n-you cannot index with an `i32`.\n-\n-## Out-of-bounds Access\n-\n-If you try to access an index that doesn\u2019t exist:\n-\n-```rust,ignore\n-let v = vec![1, 2, 3];\n-println!(\"Item 7 is {}\", v[7]);\n-```\n-\n-then the current thread will [panic] with a message like this:\n-\n-```text\n-thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 7'\n-```\n-\n-If you want to handle out-of-bounds errors without panicking, you can use\n-methods like [`get`][get] or [`get_mut`][get_mut] that return `None` when\n-given an invalid index:\n-\n-```rust\n-let v = vec![1, 2, 3];\n-match v.get(7) {\n-    Some(x) => println!(\"Item 7 is {}\", x),\n-    None => println!(\"Sorry, this vector is too short.\")\n-}\n-```\n-\n-## Iterating\n-\n-Once you have a vector, you can iterate through its elements with `for`. There\n-are three versions:\n-\n-```rust\n-let mut v = vec![1, 2, 3, 4, 5];\n-\n-for i in &v {\n-    println!(\"A reference to {}\", i);\n-}\n-\n-for i in &mut v {\n-    println!(\"A mutable reference to {}\", i);\n-}\n-\n-for i in v {\n-    println!(\"Take ownership of the vector and its element {}\", i);\n-}\n-```\n-\n-Note: You cannot use the vector again once you have iterated by taking ownership of the vector.\n-You can iterate the vector multiple times by taking a reference to the vector whilst iterating.\n-For example, the following code does not compile.\n-\n-```rust,ignore\n-let v = vec![1, 2, 3, 4, 5];\n-\n-for i in v {\n-    println!(\"Take ownership of the vector and its element {}\", i);\n-}\n-\n-for i in v {\n-    println!(\"Take ownership of the vector and its element {}\", i);\n-}\n-```\n-\n-Whereas the following works perfectly,\n-\n-```rust\n-let v = vec![1, 2, 3, 4, 5];\n-\n-for i in &v {\n-    println!(\"This is a reference to {}\", i);\n-}\n-\n-for i in &v {\n-    println!(\"This is a reference to {}\", i);\n-}\n-```\n-\n-Vectors have many more useful methods, which you can read about in [their\n-API documentation][vec].\n-\n-[vec]: ../std/vec/index.html\n-[box]: ../std/boxed/index.html\n-[generic]: generics.html\n-[panic]: concurrency.html#panics\n-[get]: ../std/vec/struct.Vec.html#method.get\n-[get_mut]: ../std/vec/struct.Vec.html#method.get_mut"}, {"sha": "516549972d61c8946542d1a34afeae97167ff77b", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=14b5d5658733d6428b983be6060db16bd5ba5c60", "patch": "@@ -1 +1 @@\n-Subproject commit 2d23ea601f017c106a2303094ee1c57ba856d246\n+Subproject commit 516549972d61c8946542d1a34afeae97167ff77b"}, {"sha": "3a1872e18ddb8a6968594016964fa4f8a5569522", "filename": "src/doc/unstable-book/src/plugin.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin.md?ref=14b5d5658733d6428b983be6060db16bd5ba5c60", "patch": "@@ -137,7 +137,7 @@ of extensions.  See `Registry::register_syntax_extension` and the\n \n ## Tips and tricks\n \n-Some of the [macro debugging tips](../book/macros.html#debugging-macro-code) are applicable.\n+Some of the [macro debugging tips](../book/first-edition/macros.html#debugging-macro-code) are applicable.\n \n You can use `syntax::parse` to turn token trees into\n higher-level syntax elements like expressions:"}, {"sha": "28f6d97756f2c4c0f2808d49de7b461edf7ec876", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=14b5d5658733d6428b983be6060db16bd5ba5c60", "patch": "@@ -102,7 +102,7 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// [downgrade]: struct.Arc.html#method.downgrade\n /// [upgrade]: struct.Weak.html#method.upgrade\n /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-/// [assoc]: ../../book/method-syntax.html#associated-functions\n+/// [assoc]: ../../book/first-edition/method-syntax.html#associated-functions\n ///\n /// # Examples\n ///"}, {"sha": "561ccaa5ef5ca6c0c8f4e78c58591b7bdd4cfc4b", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=14b5d5658733d6428b983be6060db16bd5ba5c60", "patch": "@@ -215,7 +215,7 @@\n //! [downgrade]: struct.Rc.html#method.downgrade\n //! [upgrade]: struct.Weak.html#method.upgrade\n //! [`None`]: ../../std/option/enum.Option.html#variant.None\n-//! [assoc]: ../../book/method-syntax.html#associated-functions\n+//! [assoc]: ../../book/first-edition/method-syntax.html#associated-functions\n //! [mutability]: ../../std/cell/index.html#introducing-mutability-inside-of-something-immutable\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "19e69ca296d8f4ea5221c0d9a6b45fb5e7f0c4f8", "filename": "src/libcore/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=14b5d5658733d6428b983be6060db16bd5ba5c60", "patch": "@@ -94,7 +94,7 @@ pub const MAX: char = '\\u{10ffff}';\n ///\n /// [`char`]: ../../std/primitive.char.html\n /// [`u32`]: ../../std/primitive.u32.html\n-/// [`as`]: ../../book/casting-between-types.html#as\n+/// [`as`]: ../../book/first-edition/casting-between-types.html#as\n ///\n /// For an unsafe version of this function which ignores these checks, see\n /// [`from_u32_unchecked`].\n@@ -146,7 +146,7 @@ pub fn from_u32(i: u32) -> Option<char> {\n ///\n /// [`char`]: ../../std/primitive.char.html\n /// [`u32`]: ../../std/primitive.u32.html\n-/// [`as`]: ../../book/casting-between-types.html#as\n+/// [`as`]: ../../book/first-edition/casting-between-types.html#as\n ///\n /// # Safety\n ///"}, {"sha": "fb98e43aa614b302f0ddf9707ebbaecde04585f1", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=14b5d5658733d6428b983be6060db16bd5ba5c60", "patch": "@@ -409,7 +409,7 @@ pub trait Iterator {\n     /// If you're doing some sort of looping for a side effect, it's considered\n     /// more idiomatic to use [`for`] than `map()`.\n     ///\n-    /// [`for`]: ../../book/loops.html#for\n+    /// [`for`]: ../../book/first-edition/loops.html#for\n     ///\n     /// # Examples\n     ///\n@@ -1306,7 +1306,7 @@ pub trait Iterator {\n     /// use a `for` loop with a list of things to build up a result. Those\n     /// can be turned into `fold()`s:\n     ///\n-    /// [`for`]: ../../book/loops.html#for\n+    /// [`for`]: ../../book/first-edition/loops.html#for\n     ///\n     /// ```\n     /// let numbers = [1, 2, 3, 4, 5];"}, {"sha": "f5cf3724d0711d8183e685a02d08878f37ad3e95", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=14b5d5658733d6428b983be6060db16bd5ba5c60", "patch": "@@ -164,7 +164,7 @@ pub use intrinsics::transmute;\n /// [uninit]: fn.uninitialized.html\n /// [clone]: ../clone/trait.Clone.html\n /// [swap]: fn.swap.html\n-/// [FFI]: ../../book/ffi.html\n+/// [FFI]: ../../book/first-edition/ffi.html\n /// [box]: ../../std/boxed/struct.Box.html\n /// [into_raw]: ../../std/boxed/struct.Box.html#method.into_raw\n /// [ub]: ../../reference/behavior-considered-undefined.html\n@@ -199,7 +199,7 @@ pub fn size_of<T>() -> usize {\n /// then `size_of_val` can be used to get the dynamically-known size.\n ///\n /// [slice]: ../../std/primitive.slice.html\n-/// [trait object]: ../../book/trait-objects.html\n+/// [trait object]: ../../book/first-edition/trait-objects.html\n ///\n /// # Examples\n ///\n@@ -317,7 +317,7 @@ pub fn align_of_val<T: ?Sized>(val: &T) -> usize {\n /// many of the same caveats.\n ///\n /// [uninit]: fn.uninitialized.html\n-/// [FFI]: ../../book/ffi.html\n+/// [FFI]: ../../book/first-edition/ffi.html\n /// [ub]: ../../reference/behavior-considered-undefined.html\n ///\n /// # Examples\n@@ -343,7 +343,7 @@ pub unsafe fn zeroed<T>() -> T {\n /// This is useful for [FFI] functions and initializing arrays sometimes,\n /// but should generally be avoided.\n ///\n-/// [FFI]: ../../book/ffi.html\n+/// [FFI]: ../../book/first-edition/ffi.html\n ///\n /// # Undefined behavior\n ///\n@@ -525,7 +525,7 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n /// it will not release any borrows, as borrows are based on lexical scope.\n ///\n /// This effectively does nothing for\n-/// [types which implement `Copy`](../../book/ownership.html#copy-types),\n+/// [types which implement `Copy`](../../book/first-edition/ownership.html#copy-types),\n /// e.g. integers. Such values are copied and _then_ moved into the function,\n /// so the value persists after this function call.\n ///"}, {"sha": "a95f05227fb8b1b38ef596cdacaae5744569c1f7", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=14b5d5658733d6428b983be6060db16bd5ba5c60", "patch": "@@ -25,7 +25,7 @@\n /// Book][moreinfo] contains more details about the precise nature of\n /// these internals.\n ///\n-/// [moreinfo]: ../../book/trait-objects.html#representation\n+/// [moreinfo]: ../../book/first-edition/trait-objects.html#representation\n ///\n /// `TraitObject` is guaranteed to match layouts, but it is not the\n /// type of trait objects (e.g. the fields are not directly accessible"}, {"sha": "3da5d4b94dd08ce8c2fca1a39aff6be3eb49cb5f", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=14b5d5658733d6428b983be6060db16bd5ba5c60", "patch": "@@ -174,7 +174,7 @@\n //! [slice]: primitive.slice.html\n //! [`atomic`]: sync/atomic/index.html\n //! [`collections`]: collections/index.html\n-//! [`for`]: ../book/loops.html#for\n+//! [`for`]: ../book/first-edition/loops.html#for\n //! [`format!`]: macro.format.html\n //! [`fs`]: fs/index.html\n //! [`io`]: io/index.html\n@@ -189,14 +189,14 @@\n //! [`sync`]: sync/index.html\n //! [`thread`]: thread/index.html\n //! [`use std::env`]: env/index.html\n-//! [`use`]: ../book/crates-and-modules.html#importing-modules-with-use\n-//! [crate root]: ../book/crates-and-modules.html#basic-terminology-crates-and-modules\n+//! [`use`]: ../book/first-edition/crates-and-modules.html#importing-modules-with-use\n+//! [crate root]: ../book/first-edition/crates-and-modules.html#basic-terminology-crates-and-modules\n //! [crates.io]: https://crates.io\n-//! [deref coercions]: ../book/deref-coercions.html\n+//! [deref coercions]: ../book/first-edition/deref-coercions.html\n //! [files]: fs/struct.File.html\n //! [multithreading]: thread/index.html\n //! [other]: #what-is-in-the-standard-library-documentation\n-//! [primitive types]: ../book/primitive-types.html\n+//! [primitive types]: ../book/first-edition/primitive-types.html\n \n #![crate_name = \"std\"]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "c738dc9440614d02fff181fd47ee83df8fd6f44c", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=14b5d5658733d6428b983be6060db16bd5ba5c60", "patch": "@@ -29,7 +29,7 @@\n /// ```\n ///\n /// [`assert!`]: macro.assert.html\n-/// [`if`]: ../book/if.html\n+/// [`if`]: ../book/first-edition/if.html\n /// [`BitAnd`]: ops/trait.BitAnd.html\n /// [`BitOr`]: ops/trait.BitOr.html\n /// [`Not`]: ops/trait.Not.html\n@@ -490,7 +490,7 @@ mod prim_str { }\n /// assert_eq!(tuple.2, 'c');\n /// ```\n ///\n-/// For more about tuples, see [the book](../book/primitive-types.html#tuples).\n+/// For more about tuples, see [the book](../book/first-edition/primitive-types.html#tuples).\n ///\n /// # Trait implementations\n ///"}, {"sha": "8c4eb728b7561d5bdd026cf06273660cc08aaabe", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b5d5658733d6428b983be6060db16bd5ba5c60/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=14b5d5658733d6428b983be6060db16bd5ba5c60", "patch": "@@ -122,6 +122,12 @@ fn check(cache: &mut Cache,\n         return None;\n     }\n \n+    // ignore handlebars files as they use {{}} to build links, we only\n+    // want to test the generated files\n+    if file.extension().and_then(|s| s.to_str()) == Some(\"hbs\") {\n+        return None;\n+    }\n+\n     // Unfortunately we're not 100% full of valid links today to we need a few\n     // whitelists to get this past `make check` today.\n     // FIXME(#32129)"}]}