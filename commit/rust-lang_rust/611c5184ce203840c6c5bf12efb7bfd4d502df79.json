{"sha": "611c5184ce203840c6c5bf12efb7bfd4d502df79", "node_id": "C_kwDOAAsO6NoAKDYxMWM1MTg0Y2UyMDM4NDBjNmM1YmYxMmVmYjdiZmQ0ZDUwMmRmNzk", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-15T19:36:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-15T19:36:09Z"}, "message": "Merge pull request #1341 from bjorn3/build_sysroot_cleanup\n\nRefactor sysroot building", "tree": {"sha": "20d508e07416f23e37a41c3d9227eb3f4ffcf913", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20d508e07416f23e37a41c3d9227eb3f4ffcf913"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/611c5184ce203840c6c5bf12efb7bfd4d502df79", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjxFWpCRBK7hj4Ov3rIwAAdrgIAJHEoGzbkRIRXu1Gq4GBef/K\n46DQ8HNaMAcJYUK8YGH3RTXsaYZv7CvHutz800VjqRw/2te5Fuo6pt8UqhoRkGWO\nOBeLpfRAygEeV4itFns+SdvlBYvO146tvqIuEWO9y/SqnHO32v6H5x7eaV2nVdZu\nv6b1StXcq/2VXhqBEhKtQMo6sej6CwbRwxf//PxTNz7Wuqo22KvGdpEqIOa7Iwhm\nfpZbiRjlKkHQ7c9EaC0EnhsVggf8mdEHuJ13lBdHbC5WnoKjN3UsN+bFhqQMC4w8\ns4qMryErVoRtDJj37FW8/2GynRuJCSwhIQoBXLLfMxGloAhbRP4zJ9g4brLPxq0=\n=7Zu+\n-----END PGP SIGNATURE-----\n", "payload": "tree 20d508e07416f23e37a41c3d9227eb3f4ffcf913\nparent b31b74e8fb45800e9f86c84b1f78e36bf76c498c\nparent 0f4df8fb0e56f7ac157fba4c4209f520ba7fba79\nauthor bjorn3 <17426603+bjorn3@users.noreply.github.com> 1673811369 +0100\ncommitter GitHub <noreply@github.com> 1673811369 +0100\n\nMerge pull request #1341 from bjorn3/build_sysroot_cleanup\n\nRefactor sysroot building"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/611c5184ce203840c6c5bf12efb7bfd4d502df79", "html_url": "https://github.com/rust-lang/rust/commit/611c5184ce203840c6c5bf12efb7bfd4d502df79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/611c5184ce203840c6c5bf12efb7bfd4d502df79/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b31b74e8fb45800e9f86c84b1f78e36bf76c498c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b31b74e8fb45800e9f86c84b1f78e36bf76c498c", "html_url": "https://github.com/rust-lang/rust/commit/b31b74e8fb45800e9f86c84b1f78e36bf76c498c"}, {"sha": "0f4df8fb0e56f7ac157fba4c4209f520ba7fba79", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4df8fb0e56f7ac157fba4c4209f520ba7fba79", "html_url": "https://github.com/rust-lang/rust/commit/0f4df8fb0e56f7ac157fba4c4209f520ba7fba79"}], "stats": {"total": 314, "additions": 172, "deletions": 142}, "files": [{"sha": "1181c935b8389e10ed817f83a3ff4d65b4c6b061", "filename": ".github/workflows/main.yml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/611c5184ce203840c6c5bf12efb7bfd4d502df79/.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/611c5184ce203840c6c5bf12efb7bfd4d502df79/.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fmain.yml?ref=611c5184ce203840c6c5bf12efb7bfd4d502df79", "patch": "@@ -77,7 +77,6 @@ jobs:\n       run: |\n         sudo apt-get update\n         sudo apt-get install -y gcc-mingw-w64-x86-64 wine-stable\n-        rustup target add x86_64-pc-windows-gnu\n \n     - name: Install AArch64 toolchain and qemu\n       if: matrix.os == 'ubuntu-latest' && matrix.env.TARGET_TRIPLE == 'aarch64-unknown-linux-gnu'"}, {"sha": "01d44dafbdd17ac4e2c8b4412ecc695e318c1277", "filename": "build_system/bench.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/611c5184ce203840c6c5bf12efb7bfd4d502df79/build_system%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/611c5184ce203840c6c5bf12efb7bfd4d502df79/build_system%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbench.rs?ref=611c5184ce203840c6c5bf12efb7bfd4d502df79", "patch": "@@ -4,7 +4,7 @@ use std::path::Path;\n \n use super::path::{Dirs, RelPath};\n use super::prepare::GitRepo;\n-use super::rustc_info::{get_file_name, get_wrapper_file_name};\n+use super::rustc_info::get_file_name;\n use super::utils::{hyperfine_command, is_ci, spawn_and_wait, CargoProject, Compiler};\n \n pub(crate) static SIMPLE_RAYTRACER_REPO: GitRepo = GitRepo::github(\n@@ -51,7 +51,8 @@ fn benchmark_simple_raytracer(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n         .unwrap();\n \n     eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer\");\n-    let cargo_clif = RelPath::DIST.to_path(dirs).join(get_wrapper_file_name(\"cargo-clif\", \"bin\"));\n+    let cargo_clif =\n+        RelPath::DIST.to_path(dirs).join(get_file_name(\"cargo_clif\", \"bin\").replace('_', \"-\"));\n     let manifest_path = SIMPLE_RAYTRACER.manifest_path(dirs);\n     let target_dir = SIMPLE_RAYTRACER.target_dir(dirs);\n "}, {"sha": "f52d34ffcd63f872918e3d8dd9b3569b5ac32f70", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 168, "deletions": 112, "changes": 280, "blob_url": "https://github.com/rust-lang/rust/blob/611c5184ce203840c6c5bf12efb7bfd4d502df79/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/611c5184ce203840c6c5bf12efb7bfd4d502df79/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=611c5184ce203840c6c5bf12efb7bfd4d502df79", "patch": "@@ -1,18 +1,15 @@\n use std::fs;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use std::process::{self, Command};\n \n use super::path::{Dirs, RelPath};\n-use super::rustc_info::{\n-    get_file_name, get_rustc_version, get_toolchain_name, get_wrapper_file_name,\n-};\n+use super::rustc_info::{get_file_name, get_rustc_version, get_toolchain_name};\n use super::utils::{spawn_and_wait, try_hard_link, CargoProject, Compiler};\n use super::SysrootKind;\n \n static DIST_DIR: RelPath = RelPath::DIST;\n static BIN_DIR: RelPath = RelPath::DIST.join(\"bin\");\n static LIB_DIR: RelPath = RelPath::DIST.join(\"lib\");\n-static RUSTLIB_DIR: RelPath = LIB_DIR.join(\"rustlib\");\n \n pub(crate) fn build_sysroot(\n     dirs: &Dirs,\n@@ -39,145 +36,169 @@ pub(crate) fn build_sysroot(\n         LIB_DIR\n     }\n     .to_path(dirs)\n-    .join(get_file_name(\"rustc_codegen_cranelift\", \"dylib\"));\n+    .join(cg_clif_dylib_src.file_name().unwrap());\n     try_hard_link(cg_clif_dylib_src, &cg_clif_dylib_path);\n \n     // Build and copy rustc and cargo wrappers\n+    let wrapper_base_name = get_file_name(\"____\", \"bin\");\n+    let toolchain_name = get_toolchain_name();\n     for wrapper in [\"rustc-clif\", \"rustdoc-clif\", \"cargo-clif\"] {\n-        let wrapper_name = get_wrapper_file_name(wrapper, \"bin\");\n+        let wrapper_name = wrapper_base_name.replace(\"____\", wrapper);\n \n         let mut build_cargo_wrapper_cmd = Command::new(&bootstrap_host_compiler.rustc);\n         build_cargo_wrapper_cmd\n-            .env(\"TOOLCHAIN_NAME\", get_toolchain_name())\n+            .env(\"TOOLCHAIN_NAME\", toolchain_name.clone())\n             .arg(RelPath::SCRIPTS.to_path(dirs).join(&format!(\"{wrapper}.rs\")))\n             .arg(\"-o\")\n             .arg(DIST_DIR.to_path(dirs).join(wrapper_name))\n-            .arg(\"-g\");\n+            .arg(\"-Cstrip=debuginfo\");\n         spawn_and_wait(build_cargo_wrapper_cmd);\n     }\n \n-    let default_sysroot = super::rustc_info::get_default_sysroot(&bootstrap_host_compiler.rustc);\n+    let host = build_sysroot_for_triple(\n+        dirs,\n+        channel,\n+        bootstrap_host_compiler.clone(),\n+        &cg_clif_dylib_path,\n+        sysroot_kind,\n+    );\n+    host.install_into_sysroot(&DIST_DIR.to_path(dirs));\n \n-    let host_rustlib_lib =\n-        RUSTLIB_DIR.to_path(dirs).join(&bootstrap_host_compiler.triple).join(\"lib\");\n-    let target_rustlib_lib = RUSTLIB_DIR.to_path(dirs).join(&target_triple).join(\"lib\");\n-    fs::create_dir_all(&host_rustlib_lib).unwrap();\n-    fs::create_dir_all(&target_rustlib_lib).unwrap();\n-\n-    if target_triple == \"x86_64-pc-windows-gnu\" {\n-        if !default_sysroot.join(\"lib\").join(\"rustlib\").join(&target_triple).join(\"lib\").exists() {\n-            eprintln!(\n-                \"The x86_64-pc-windows-gnu target needs to be installed first before it is possible \\\n-                to compile a sysroot for it.\",\n-            );\n-            process::exit(1);\n-        }\n-        for file in fs::read_dir(\n-            default_sysroot.join(\"lib\").join(\"rustlib\").join(&target_triple).join(\"lib\"),\n+    if !is_native {\n+        build_sysroot_for_triple(\n+            dirs,\n+            channel,\n+            {\n+                let mut bootstrap_target_compiler = bootstrap_host_compiler.clone();\n+                bootstrap_target_compiler.triple = target_triple.clone();\n+                bootstrap_target_compiler.set_cross_linker_and_runner();\n+                bootstrap_target_compiler\n+            },\n+            &cg_clif_dylib_path,\n+            sysroot_kind,\n         )\n-        .unwrap()\n-        {\n-            let file = file.unwrap().path();\n-            if file.extension().map_or(true, |ext| ext.to_str().unwrap() != \"o\") {\n-                continue; // only copy object files\n-            }\n-            try_hard_link(&file, target_rustlib_lib.join(file.file_name().unwrap()));\n-        }\n+        .install_into_sysroot(&DIST_DIR.to_path(dirs));\n     }\n \n-    match sysroot_kind {\n-        SysrootKind::None => {} // Nothing to do\n-        SysrootKind::Llvm => {\n-            for file in fs::read_dir(\n-                default_sysroot\n-                    .join(\"lib\")\n-                    .join(\"rustlib\")\n-                    .join(&bootstrap_host_compiler.triple)\n-                    .join(\"lib\"),\n-            )\n-            .unwrap()\n-            {\n-                let file = file.unwrap().path();\n-                let file_name_str = file.file_name().unwrap().to_str().unwrap();\n-                if (file_name_str.contains(\"rustc_\")\n-                    && !file_name_str.contains(\"rustc_std_workspace_\")\n-                    && !file_name_str.contains(\"rustc_demangle\"))\n-                    || file_name_str.contains(\"chalk\")\n-                    || file_name_str.contains(\"tracing\")\n-                    || file_name_str.contains(\"regex\")\n-                {\n-                    // These are large crates that are part of the rustc-dev component and are not\n-                    // necessary to run regular programs.\n-                    continue;\n-                }\n-                try_hard_link(&file, host_rustlib_lib.join(file.file_name().unwrap()));\n-            }\n-\n-            if !is_native {\n-                for file in fs::read_dir(\n-                    default_sysroot.join(\"lib\").join(\"rustlib\").join(&target_triple).join(\"lib\"),\n-                )\n-                .unwrap()\n-                {\n-                    let file = file.unwrap().path();\n-                    try_hard_link(&file, target_rustlib_lib.join(file.file_name().unwrap()));\n-                }\n-            }\n-        }\n-        SysrootKind::Clif => {\n-            build_clif_sysroot_for_triple(\n-                dirs,\n-                channel,\n-                bootstrap_host_compiler.clone(),\n-                &cg_clif_dylib_path,\n-            );\n-\n-            if !is_native {\n-                build_clif_sysroot_for_triple(\n-                    dirs,\n-                    channel,\n-                    {\n-                        let mut bootstrap_target_compiler = bootstrap_host_compiler.clone();\n-                        bootstrap_target_compiler.triple = target_triple.clone();\n-                        bootstrap_target_compiler.set_cross_linker_and_runner();\n-                        bootstrap_target_compiler\n-                    },\n-                    &cg_clif_dylib_path,\n-                );\n-            }\n-\n-            // Copy std for the host to the lib dir. This is necessary for the jit mode to find\n-            // libstd.\n-            for file in fs::read_dir(host_rustlib_lib).unwrap() {\n-                let file = file.unwrap().path();\n-                let filename = file.file_name().unwrap().to_str().unwrap();\n-                if filename.contains(\"std-\") && !filename.contains(\".rlib\") {\n-                    try_hard_link(&file, LIB_DIR.to_path(dirs).join(file.file_name().unwrap()));\n-                }\n-            }\n+    // Copy std for the host to the lib dir. This is necessary for the jit mode to find\n+    // libstd.\n+    for lib in host.libs {\n+        let filename = lib.file_name().unwrap().to_str().unwrap();\n+        if filename.contains(\"std-\") && !filename.contains(\".rlib\") {\n+            try_hard_link(&lib, LIB_DIR.to_path(dirs).join(lib.file_name().unwrap()));\n         }\n     }\n \n-    let mut target_compiler = Compiler::clif_with_triple(&dirs, target_triple);\n+    let mut target_compiler = {\n+        let dirs: &Dirs = &dirs;\n+        let rustc_clif =\n+            RelPath::DIST.to_path(&dirs).join(wrapper_base_name.replace(\"____\", \"rustc-clif\"));\n+        let rustdoc_clif =\n+            RelPath::DIST.to_path(&dirs).join(wrapper_base_name.replace(\"____\", \"rustdoc-clif\"));\n+\n+        Compiler {\n+            cargo: bootstrap_host_compiler.cargo.clone(),\n+            rustc: rustc_clif.clone(),\n+            rustdoc: rustdoc_clif.clone(),\n+            rustflags: String::new(),\n+            rustdocflags: String::new(),\n+            triple: target_triple,\n+            runner: vec![],\n+        }\n+    };\n     if !is_native {\n         target_compiler.set_cross_linker_and_runner();\n     }\n     target_compiler\n }\n \n+struct SysrootTarget {\n+    triple: String,\n+    libs: Vec<PathBuf>,\n+}\n+\n+impl SysrootTarget {\n+    fn install_into_sysroot(&self, sysroot: &Path) {\n+        if self.libs.is_empty() {\n+            return;\n+        }\n+\n+        let target_rustlib_lib = sysroot.join(\"lib\").join(\"rustlib\").join(&self.triple).join(\"lib\");\n+        fs::create_dir_all(&target_rustlib_lib).unwrap();\n+\n+        for lib in &self.libs {\n+            try_hard_link(lib, target_rustlib_lib.join(lib.file_name().unwrap()));\n+        }\n+    }\n+}\n+\n pub(crate) static ORIG_BUILD_SYSROOT: RelPath = RelPath::SOURCE.join(\"build_sysroot\");\n pub(crate) static BUILD_SYSROOT: RelPath = RelPath::DOWNLOAD.join(\"sysroot\");\n pub(crate) static SYSROOT_RUSTC_VERSION: RelPath = BUILD_SYSROOT.join(\"rustc_version\");\n pub(crate) static SYSROOT_SRC: RelPath = BUILD_SYSROOT.join(\"sysroot_src\");\n pub(crate) static STANDARD_LIBRARY: CargoProject =\n     CargoProject::new(&BUILD_SYSROOT, \"build_sysroot\");\n+pub(crate) static RTSTARTUP_SYSROOT: RelPath = RelPath::BUILD.join(\"rtstartup\");\n \n+#[must_use]\n+fn build_sysroot_for_triple(\n+    dirs: &Dirs,\n+    channel: &str,\n+    compiler: Compiler,\n+    cg_clif_dylib_path: &Path,\n+    sysroot_kind: SysrootKind,\n+) -> SysrootTarget {\n+    match sysroot_kind {\n+        SysrootKind::None => build_rtstartup(dirs, &compiler)\n+            .unwrap_or(SysrootTarget { triple: compiler.triple, libs: vec![] }),\n+        SysrootKind::Llvm => build_llvm_sysroot_for_triple(compiler),\n+        SysrootKind::Clif => {\n+            build_clif_sysroot_for_triple(dirs, channel, compiler, &cg_clif_dylib_path)\n+        }\n+    }\n+}\n+\n+#[must_use]\n+fn build_llvm_sysroot_for_triple(compiler: Compiler) -> SysrootTarget {\n+    let default_sysroot = super::rustc_info::get_default_sysroot(&compiler.rustc);\n+\n+    let mut target_libs = SysrootTarget { triple: compiler.triple, libs: vec![] };\n+\n+    for entry in fs::read_dir(\n+        default_sysroot.join(\"lib\").join(\"rustlib\").join(&target_libs.triple).join(\"lib\"),\n+    )\n+    .unwrap()\n+    {\n+        let entry = entry.unwrap();\n+        if entry.file_type().unwrap().is_dir() {\n+            continue;\n+        }\n+        let file = entry.path();\n+        let file_name_str = file.file_name().unwrap().to_str().unwrap();\n+        if (file_name_str.contains(\"rustc_\")\n+            && !file_name_str.contains(\"rustc_std_workspace_\")\n+            && !file_name_str.contains(\"rustc_demangle\"))\n+            || file_name_str.contains(\"chalk\")\n+            || file_name_str.contains(\"tracing\")\n+            || file_name_str.contains(\"regex\")\n+        {\n+            // These are large crates that are part of the rustc-dev component and are not\n+            // necessary to run regular programs.\n+            continue;\n+        }\n+        target_libs.libs.push(file);\n+    }\n+\n+    target_libs\n+}\n+\n+#[must_use]\n fn build_clif_sysroot_for_triple(\n     dirs: &Dirs,\n     channel: &str,\n     mut compiler: Compiler,\n     cg_clif_dylib_path: &Path,\n-) {\n+) -> SysrootTarget {\n     match fs::read_to_string(SYSROOT_RUSTC_VERSION.to_path(dirs)) {\n         Err(e) => {\n             eprintln!(\"Failed to get rustc version for patched sysroot source: {}\", e);\n@@ -196,6 +217,14 @@ fn build_clif_sysroot_for_triple(\n         }\n     }\n \n+    let mut target_libs = SysrootTarget { triple: compiler.triple.clone(), libs: vec![] };\n+\n+    if let Some(rtstartup_target_libs) = build_rtstartup(dirs, &compiler) {\n+        rtstartup_target_libs.install_into_sysroot(&RTSTARTUP_SYSROOT.to_path(dirs));\n+\n+        target_libs.libs.extend(rtstartup_target_libs.libs);\n+    }\n+\n     let build_dir = STANDARD_LIBRARY.target_dir(dirs).join(&compiler.triple).join(channel);\n \n     if !super::config::get_bool(\"keep_sysroot\") {\n@@ -209,7 +238,9 @@ fn build_clif_sysroot_for_triple(\n     // Build sysroot\n     let mut rustflags = \" -Zforce-unstable-if-unmarked -Cpanic=abort\".to_string();\n     rustflags.push_str(&format!(\" -Zcodegen-backend={}\", cg_clif_dylib_path.to_str().unwrap()));\n-    rustflags.push_str(&format!(\" --sysroot={}\", DIST_DIR.to_path(dirs).to_str().unwrap()));\n+    // Necessary for MinGW to find rsbegin.o and rsend.o\n+    rustflags\n+        .push_str(&format!(\" --sysroot={}\", RTSTARTUP_SYSROOT.to_path(dirs).to_str().unwrap()));\n     if channel == \"release\" {\n         rustflags.push_str(\" -Zmir-opt-level=3\");\n     }\n@@ -221,7 +252,6 @@ fn build_clif_sysroot_for_triple(\n     build_cmd.env(\"__CARGO_DEFAULT_LIB_METADATA\", \"cg_clif\");\n     spawn_and_wait(build_cmd);\n \n-    // Copy all relevant files to the sysroot\n     for entry in fs::read_dir(build_dir.join(\"deps\")).unwrap() {\n         let entry = entry.unwrap();\n         if let Some(ext) = entry.path().extension() {\n@@ -231,9 +261,35 @@ fn build_clif_sysroot_for_triple(\n         } else {\n             continue;\n         };\n-        try_hard_link(\n-            entry.path(),\n-            RUSTLIB_DIR.to_path(dirs).join(&compiler.triple).join(\"lib\").join(entry.file_name()),\n-        );\n+        target_libs.libs.push(entry.path());\n+    }\n+\n+    target_libs\n+}\n+\n+fn build_rtstartup(dirs: &Dirs, compiler: &Compiler) -> Option<SysrootTarget> {\n+    if !compiler.triple.ends_with(\"windows-gnu\") {\n+        return None;\n+    }\n+\n+    RTSTARTUP_SYSROOT.ensure_fresh(dirs);\n+\n+    let rtstartup_src = SYSROOT_SRC.to_path(dirs).join(\"library\").join(\"rtstartup\");\n+    let mut target_libs = SysrootTarget { triple: compiler.triple.clone(), libs: vec![] };\n+\n+    for file in [\"rsbegin\", \"rsend\"] {\n+        let obj = RTSTARTUP_SYSROOT.to_path(dirs).join(format!(\"{file}.o\"));\n+        let mut build_rtstartup_cmd = Command::new(&compiler.rustc);\n+        build_rtstartup_cmd\n+            .arg(\"--target\")\n+            .arg(&compiler.triple)\n+            .arg(\"--emit=obj\")\n+            .arg(\"-o\")\n+            .arg(&obj)\n+            .arg(rtstartup_src.join(format!(\"{file}.rs\")));\n+        spawn_and_wait(build_rtstartup_cmd);\n+        target_libs.libs.push(obj.clone());\n     }\n+\n+    Some(target_libs)\n }"}, {"sha": "a70453b4422898e31f0030f1613cf7877260e481", "filename": "build_system/rustc_info.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/611c5184ce203840c6c5bf12efb7bfd4d502df79/build_system%2Frustc_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/611c5184ce203840c6c5bf12efb7bfd4d502df79/build_system%2Frustc_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Frustc_info.rs?ref=611c5184ce203840c6c5bf12efb7bfd4d502df79", "patch": "@@ -93,12 +93,3 @@ pub(crate) fn get_file_name(crate_name: &str, crate_type: &str) -> String {\n     assert!(file_name.contains(crate_name));\n     file_name\n }\n-\n-/// Similar to `get_file_name`, but converts any dashes (`-`) in the `crate_name` to\n-/// underscores (`_`). This is specially made for the rustc and cargo wrappers\n-/// which have a dash in the name, and that is not allowed in a crate name.\n-pub(crate) fn get_wrapper_file_name(crate_name: &str, crate_type: &str) -> String {\n-    let crate_name = crate_name.replace('-', \"_\");\n-    let wrapper_name = get_file_name(&crate_name, crate_type);\n-    wrapper_name.replace('_', \"-\")\n-}"}, {"sha": "21bfb1b1f00f58454461b87ae1de1e67efd32a27", "filename": "build_system/utils.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/611c5184ce203840c6c5bf12efb7bfd4d502df79/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/611c5184ce203840c6c5bf12efb7bfd4d502df79/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=611c5184ce203840c6c5bf12efb7bfd4d502df79", "patch": "@@ -5,7 +5,7 @@ use std::path::{Path, PathBuf};\n use std::process::{self, Command, Stdio};\n \n use super::path::{Dirs, RelPath};\n-use super::rustc_info::{get_cargo_path, get_rustc_path, get_rustdoc_path, get_wrapper_file_name};\n+use super::rustc_info::{get_cargo_path, get_rustc_path, get_rustdoc_path};\n \n #[derive(Clone, Debug)]\n pub(crate) struct Compiler {\n@@ -31,23 +31,6 @@ impl Compiler {\n         }\n     }\n \n-    pub(crate) fn clif_with_triple(dirs: &Dirs, triple: String) -> Compiler {\n-        let rustc_clif =\n-            RelPath::DIST.to_path(&dirs).join(get_wrapper_file_name(\"rustc-clif\", \"bin\"));\n-        let rustdoc_clif =\n-            RelPath::DIST.to_path(&dirs).join(get_wrapper_file_name(\"rustdoc-clif\", \"bin\"));\n-\n-        Compiler {\n-            cargo: get_cargo_path(),\n-            rustc: rustc_clif.clone(),\n-            rustdoc: rustdoc_clif.clone(),\n-            rustflags: String::new(),\n-            rustdocflags: String::new(),\n-            triple,\n-            runner: vec![],\n-        }\n-    }\n-\n     pub(crate) fn set_cross_linker_and_runner(&mut self) {\n         match self.triple.as_str() {\n             \"aarch64-unknown-linux-gnu\" => {"}]}