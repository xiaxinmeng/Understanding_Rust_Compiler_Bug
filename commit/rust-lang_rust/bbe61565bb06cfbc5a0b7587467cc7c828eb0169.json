{"sha": "bbe61565bb06cfbc5a0b7587467cc7c828eb0169", "node_id": "C_kwDOAAsO6NoAKGJiZTYxNTY1YmIwNmNmYmM1YTBiNzU4NzQ2N2NjN2M4MjhlYjAxNjk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-11T23:31:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-11T23:31:24Z"}, "message": "Merge #11683\n\n11683: fix: Stop wrapping ConstParam's default values in ConstArg r=Veykril a=steven-joruk\n\nI came across this problem while implementing the assist for inlining type aliases. This was causing `ConstParam::default_val` to always return `None` for block expressions. The `const_arg_path` test was actually testing const params so I've updated that.\r\n\r\nThe only code that uses `default_val` right now is  the `extract_function` assist. I couldn't figure out how to hit the affected code path, if someone can give me hint I'll add a test.\r\n\r\nThis test in my WIP branch fails without this:\r\n```rust\r\n    #[test]\r\n    fn param_expression() {\r\n        check_assist(\r\n            inline_type_alias,\r\n            r#\"\r\ntype A<const N: usize = { 1 }> = [u32; N];\r\nfn main() {\r\n    let a: $0A;\r\n}\r\n\"#,\r\n            r#\"\r\ntype A<const N: usize = { 1 }> = [u32; N];\r\nfn main() {\r\n    let a: [u32; { 1 }];\r\n}\r\n\"#,\r\n        );\r\n    }\r\n```\n\nCo-authored-by: Steven Joruk <steven@joruk.com>", "tree": {"sha": "27acf38f35af9500e2ea958418d344c6e3b219e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27acf38f35af9500e2ea958418d344c6e3b219e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbe61565bb06cfbc5a0b7587467cc7c828eb0169", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiK9vMCRBK7hj4Ov3rIwAAZUcIAB2nrBmCFz+IV9BT8l6v3/jx\n5QdAa66kumEfC8z2uBc6XRHfpR2RPaRnigXDWDtRNSY7Ti2/+DDLsYkNR50BhhuN\ns3d01ygWahKQNIyHJ52DupOBHmSP2+dxg6avW4x+Kws6oDwRzQpRJ/qb9uc/OOOA\nirvv3fnQ83pJ382k0U+XV4PwJTVfvjW4+AOcgquklz6gio8IDRY5BJhKdCEc3XA0\nr4x2h5Cnf2I7O5RsEHhzwOiw8vpCmQfn7+dxSIJdWI6aiYpQKabFOUccdOIDRPv0\n8C/ismw8tJDknbnWsljnKwMgA/mnT74VIiHgkqmD+h22Z0twcAE2hTTVMuJPDdI=\n=/s4Q\n-----END PGP SIGNATURE-----\n", "payload": "tree 27acf38f35af9500e2ea958418d344c6e3b219e6\nparent 224a255c5a7c75efb5567fc38b3772c5dbb094c4\nparent 8a284306765512367c64a3c070648f560ed5bacf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1647041484 +0000\ncommitter GitHub <noreply@github.com> 1647041484 +0000\n\nMerge #11683\n\n11683: fix: Stop wrapping ConstParam's default values in ConstArg r=Veykril a=steven-joruk\n\nI came across this problem while implementing the assist for inlining type aliases. This was causing `ConstParam::default_val` to always return `None` for block expressions. The `const_arg_path` test was actually testing const params so I've updated that.\r\n\r\nThe only code that uses `default_val` right now is  the `extract_function` assist. I couldn't figure out how to hit the affected code path, if someone can give me hint I'll add a test.\r\n\r\nThis test in my WIP branch fails without this:\r\n```rust\r\n    #[test]\r\n    fn param_expression() {\r\n        check_assist(\r\n            inline_type_alias,\r\n            r#\"\r\ntype A<const N: usize = { 1 }> = [u32; N];\r\nfn main() {\r\n    let a: $0A;\r\n}\r\n\"#,\r\n            r#\"\r\ntype A<const N: usize = { 1 }> = [u32; N];\r\nfn main() {\r\n    let a: [u32; { 1 }];\r\n}\r\n\"#,\r\n        );\r\n    }\r\n```\n\nCo-authored-by: Steven Joruk <steven@joruk.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbe61565bb06cfbc5a0b7587467cc7c828eb0169", "html_url": "https://github.com/rust-lang/rust/commit/bbe61565bb06cfbc5a0b7587467cc7c828eb0169", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbe61565bb06cfbc5a0b7587467cc7c828eb0169/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "224a255c5a7c75efb5567fc38b3772c5dbb094c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/224a255c5a7c75efb5567fc38b3772c5dbb094c4", "html_url": "https://github.com/rust-lang/rust/commit/224a255c5a7c75efb5567fc38b3772c5dbb094c4"}, {"sha": "8a284306765512367c64a3c070648f560ed5bacf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a284306765512367c64a3c070648f560ed5bacf", "html_url": "https://github.com/rust-lang/rust/commit/8a284306765512367c64a3c070648f560ed5bacf"}], "stats": {"total": 98, "additions": 69, "deletions": 29}, "files": [{"sha": "948873ae2daf7468b04a8edbbc0fbd3122eb145d", "filename": "crates/parser/src/grammar/generic_args.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bbe61565bb06cfbc5a0b7587467cc7c828eb0169/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe61565bb06cfbc5a0b7587467cc7c828eb0169/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs?ref=bbe61565bb06cfbc5a0b7587467cc7c828eb0169", "patch": "@@ -72,28 +72,24 @@ fn lifetime_arg(p: &mut Parser) {\n     m.complete(p, LIFETIME_ARG);\n }\n \n-// test const_arg\n-// type T = S<92>;\n-pub(super) fn const_arg(p: &mut Parser) {\n-    let m = p.start();\n+pub(super) fn const_arg_expr(p: &mut Parser) {\n+    // The tests in here are really for `const_arg`, which wraps the content\n+    // CONST_ARG.\n     match p.current() {\n         // test const_arg_block\n         // type T = S<{90 + 2}>;\n         T!['{'] => {\n             expressions::block_expr(p);\n-            m.complete(p, CONST_ARG);\n         }\n         // test const_arg_literal\n         // type T = S<\"hello\", 0xdeadbeef>;\n         k if k.is_literal() => {\n             expressions::literal(p);\n-            m.complete(p, CONST_ARG);\n         }\n         // test const_arg_bool_literal\n         // type T = S<true>;\n         T![true] | T![false] => {\n             expressions::literal(p);\n-            m.complete(p, CONST_ARG);\n         }\n         // test const_arg_negative_number\n         // type T = S<-92>;\n@@ -102,19 +98,24 @@ pub(super) fn const_arg(p: &mut Parser) {\n             p.bump(T![-]);\n             expressions::literal(p);\n             lm.complete(p, PREFIX_EXPR);\n-            m.complete(p, CONST_ARG);\n         }\n-        // test const_arg_path\n-        // struct S<const N: u32 = u32::MAX>;\n         _ => {\n+            // This shouldn't be hit by `const_arg`\n             let lm = p.start();\n             paths::use_path(p);\n             lm.complete(p, PATH_EXPR);\n-            m.complete(p, CONST_ARG);\n         }\n     }\n }\n \n+// test const_arg\n+// type T = S<92>;\n+pub(super) fn const_arg(p: &mut Parser) {\n+    let m = p.start();\n+    const_arg_expr(p);\n+    m.complete(p, CONST_ARG);\n+}\n+\n fn type_arg(p: &mut Parser) {\n     let m = p.start();\n     types::type_(p);"}, {"sha": "fbd514078d4f057d43948f7cc546eb6afc9c41a4", "filename": "crates/parser/src/grammar/generic_params.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbe61565bb06cfbc5a0b7587467cc7c828eb0169/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe61565bb06cfbc5a0b7587467cc7c828eb0169/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_params.rs?ref=bbe61565bb06cfbc5a0b7587467cc7c828eb0169", "patch": "@@ -79,10 +79,16 @@ fn const_param(p: &mut Parser, m: Marker) {\n     }\n \n     if p.at(T![=]) {\n-        // test const_param_defaults\n+        // test const_param_default_literal\n         // struct A<const N: i32 = -1>;\n         p.bump(T![=]);\n-        generic_args::const_arg(p);\n+\n+        // test const_param_default_expression\n+        // struct A<const N: i32 = { 1 }>;\n+\n+        // test const_param_default_path\n+        // struct A<const N: i32 = i32::MAX>;\n+        generic_args::const_arg_expr(p);\n     }\n \n     m.complete(p, CONST_PARAM);"}, {"sha": "ee075f3e50f317440006dd74f71ac1f755c94600", "filename": "crates/parser/test_data/parser/inline/ok/0188_const_arg_path.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/224a255c5a7c75efb5567fc38b3772c5dbb094c4/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0188_const_arg_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/224a255c5a7c75efb5567fc38b3772c5dbb094c4/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0188_const_arg_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0188_const_arg_path.rs?ref=224a255c5a7c75efb5567fc38b3772c5dbb094c4", "patch": "@@ -1 +0,0 @@\n-struct S<const N: u32 = u32::MAX>;"}, {"sha": "11002bf98d01f3d8a35f9cbca2d8f2f33a7aa5e5", "filename": "crates/parser/test_data/parser/inline/ok/0188_const_param_default_path.rast", "status": "renamed", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bbe61565bb06cfbc5a0b7587467cc7c828eb0169/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0188_const_param_default_path.rast", "raw_url": "https://github.com/rust-lang/rust/raw/bbe61565bb06cfbc5a0b7587467cc7c828eb0169/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0188_const_param_default_path.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0188_const_param_default_path.rast?ref=bbe61565bb06cfbc5a0b7587467cc7c828eb0169", "patch": "@@ -3,7 +3,7 @@ SOURCE_FILE\n     STRUCT_KW \"struct\"\n     WHITESPACE \" \"\n     NAME\n-      IDENT \"S\"\n+      IDENT \"A\"\n     GENERIC_PARAM_LIST\n       L_ANGLE \"<\"\n       CONST_PARAM\n@@ -17,21 +17,20 @@ SOURCE_FILE\n           PATH\n             PATH_SEGMENT\n               NAME_REF\n-                IDENT \"u32\"\n+                IDENT \"i32\"\n         WHITESPACE \" \"\n         EQ \"=\"\n         WHITESPACE \" \"\n-        CONST_ARG\n-          PATH_EXPR\n+        PATH_EXPR\n+          PATH\n             PATH\n-              PATH\n-                PATH_SEGMENT\n-                  NAME_REF\n-                    IDENT \"u32\"\n-              COLON2 \"::\"\n               PATH_SEGMENT\n                 NAME_REF\n-                  IDENT \"MAX\"\n+                  IDENT \"i32\"\n+            COLON2 \"::\"\n+            PATH_SEGMENT\n+              NAME_REF\n+                IDENT \"MAX\"\n       R_ANGLE \">\"\n     SEMICOLON \";\"\n   WHITESPACE \"\\n\"", "previous_filename": "crates/parser/test_data/parser/inline/ok/0188_const_arg_path.rast"}, {"sha": "f3da43ca06cbd0b5e76356e641c53997a16d6be9", "filename": "crates/parser/test_data/parser/inline/ok/0188_const_param_default_path.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbe61565bb06cfbc5a0b7587467cc7c828eb0169/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0188_const_param_default_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe61565bb06cfbc5a0b7587467cc7c828eb0169/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0188_const_param_default_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0188_const_param_default_path.rs?ref=bbe61565bb06cfbc5a0b7587467cc7c828eb0169", "patch": "@@ -0,0 +1 @@\n+struct A<const N: i32 = i32::MAX>;"}, {"sha": "0607ff54fbb7c505a0ba446481e08935cea5189b", "filename": "crates/parser/test_data/parser/inline/ok/0199_const_param_default_expression.rast", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bbe61565bb06cfbc5a0b7587467cc7c828eb0169/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0199_const_param_default_expression.rast", "raw_url": "https://github.com/rust-lang/rust/raw/bbe61565bb06cfbc5a0b7587467cc7c828eb0169/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0199_const_param_default_expression.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0199_const_param_default_expression.rast?ref=bbe61565bb06cfbc5a0b7587467cc7c828eb0169", "patch": "@@ -0,0 +1,34 @@\n+SOURCE_FILE\n+  STRUCT\n+    STRUCT_KW \"struct\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"A\"\n+    GENERIC_PARAM_LIST\n+      L_ANGLE \"<\"\n+      CONST_PARAM\n+        CONST_KW \"const\"\n+        WHITESPACE \" \"\n+        NAME\n+          IDENT \"N\"\n+        COLON \":\"\n+        WHITESPACE \" \"\n+        PATH_TYPE\n+          PATH\n+            PATH_SEGMENT\n+              NAME_REF\n+                IDENT \"i32\"\n+        WHITESPACE \" \"\n+        EQ \"=\"\n+        WHITESPACE \" \"\n+        BLOCK_EXPR\n+          STMT_LIST\n+            L_CURLY \"{\"\n+            WHITESPACE \" \"\n+            LITERAL\n+              INT_NUMBER \"1\"\n+            WHITESPACE \" \"\n+            R_CURLY \"}\"\n+      R_ANGLE \">\"\n+    SEMICOLON \";\"\n+  WHITESPACE \"\\n\""}, {"sha": "551bde0b00862689de7e56015b8505925a1af7d6", "filename": "crates/parser/test_data/parser/inline/ok/0199_const_param_default_expression.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbe61565bb06cfbc5a0b7587467cc7c828eb0169/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0199_const_param_default_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe61565bb06cfbc5a0b7587467cc7c828eb0169/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0199_const_param_default_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0199_const_param_default_expression.rs?ref=bbe61565bb06cfbc5a0b7587467cc7c828eb0169", "patch": "@@ -0,0 +1 @@\n+struct A<const N: i32 = { 1 }>;"}, {"sha": "8e52313651ce0fb6c6eeb971dcebe206c2ee9c2b", "filename": "crates/parser/test_data/parser/inline/ok/0200_const_param_default_literal.rast", "status": "renamed", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbe61565bb06cfbc5a0b7587467cc7c828eb0169/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0200_const_param_default_literal.rast", "raw_url": "https://github.com/rust-lang/rust/raw/bbe61565bb06cfbc5a0b7587467cc7c828eb0169/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0200_const_param_default_literal.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0200_const_param_default_literal.rast?ref=bbe61565bb06cfbc5a0b7587467cc7c828eb0169", "patch": "@@ -21,11 +21,10 @@ SOURCE_FILE\n         WHITESPACE \" \"\n         EQ \"=\"\n         WHITESPACE \" \"\n-        CONST_ARG\n-          PREFIX_EXPR\n-            MINUS \"-\"\n-            LITERAL\n-              INT_NUMBER \"1\"\n+        PREFIX_EXPR\n+          MINUS \"-\"\n+          LITERAL\n+            INT_NUMBER \"1\"\n       R_ANGLE \">\"\n     SEMICOLON \";\"\n   WHITESPACE \"\\n\"", "previous_filename": "crates/parser/test_data/parser/inline/ok/0165_const_param_defaults.rast"}, {"sha": "879ecffa75d3a89e322e5cbae4e74e274392a710", "filename": "crates/parser/test_data/parser/inline/ok/0200_const_param_default_literal.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bbe61565bb06cfbc5a0b7587467cc7c828eb0169/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0200_const_param_default_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbe61565bb06cfbc5a0b7587467cc7c828eb0169/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0200_const_param_default_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0200_const_param_default_literal.rs?ref=bbe61565bb06cfbc5a0b7587467cc7c828eb0169", "previous_filename": "crates/parser/test_data/parser/inline/ok/0165_const_param_defaults.rs"}]}