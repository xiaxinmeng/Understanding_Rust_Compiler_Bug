{"sha": "09efaaf0764ddfd366bf6627533ecd1ea6ffb234", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZWZhYWYwNzY0ZGRmZDM2NmJmNjYyNzUzM2VjZDFlYTZmZmIyMzQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-10T02:41:24Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-15T06:46:24Z"}, "message": "Use `s::u::p::expr_precedence` and fix message\n\n - Use `syntax::util::parser::expr_precedence` to determine wether\n   parenthesis are needed around the casting target.\n - Update message to not incorrectly mention rounding on `.into()`\n   suggestions, as those types that do have that implemented will never\n   round.", "tree": {"sha": "4090b3600132cd94b26b60a56a7b8562df1281af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4090b3600132cd94b26b60a56a7b8562df1281af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09efaaf0764ddfd366bf6627533ecd1ea6ffb234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09efaaf0764ddfd366bf6627533ecd1ea6ffb234", "html_url": "https://github.com/rust-lang/rust/commit/09efaaf0764ddfd366bf6627533ecd1ea6ffb234", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09efaaf0764ddfd366bf6627533ecd1ea6ffb234/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "509ea8efc630d4e329dc2a440a2c0fc2a3fea236", "url": "https://api.github.com/repos/rust-lang/rust/commits/509ea8efc630d4e329dc2a440a2c0fc2a3fea236", "html_url": "https://github.com/rust-lang/rust/commit/509ea8efc630d4e329dc2a440a2c0fc2a3fea236"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "d43d681c9259528fc62cbac3b11cd63b3abb07c7", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/09efaaf0764ddfd366bf6627533ecd1ea6ffb234/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09efaaf0764ddfd366bf6627533ecd1ea6ffb234/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=09efaaf0764ddfd366bf6627533ecd1ea6ffb234", "patch": "@@ -15,6 +15,7 @@ use rustc::infer::InferOk;\n use rustc::traits::ObligationCause;\n \n use syntax::ast;\n+use syntax::util::parser::{expr_precedence, AssocOp};\n use syntax_pos::{self, Span};\n use rustc::hir;\n use rustc::hir::print;\n@@ -335,10 +336,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // For now, don't suggest casting with `as`.\n         let can_cast = false;\n \n-        let needs_paren = match expr.node {\n-            hir::ExprBinary(..) => true,\n-            _ => false,\n-        };\n+        let needs_paren = expr_precedence(expr) < (AssocOp::As.precedence() as i8);\n \n         if let Ok(src) = self.tcx.sess.codemap().span_to_snippet(expr.span) {\n             let msg = format!(\"you can cast an `{}` to `{}`\", checked_ty, expected_ty);\n@@ -508,11 +506,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     true\n                 }\n                 (&ty::TyFloat(ref exp), &ty::TyUint(ref found)) => {\n+                    // if `found` is `None` (meaning found is `usize`), don't suggest `.into()`\n                     if exp.bit_width() > found.bit_width().unwrap_or(256) {\n                         err.span_suggestion(expr.span,\n                                             &format!(\"{}, producing the floating point \\\n-                                                      representation of the integer, rounded if \\\n-                                                      necessary\",\n+                                                      representation of the integer\",\n                                                       msg),\n                                             into_suggestion);\n                     } else if can_cast {\n@@ -526,11 +524,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     true\n                 }\n                 (&ty::TyFloat(ref exp), &ty::TyInt(ref found)) => {\n+                    // if `found` is `None` (meaning found is `isize`), don't suggest `.into()`\n                     if exp.bit_width() > found.bit_width().unwrap_or(256) {\n                         err.span_suggestion(expr.span,\n                                             &format!(\"{}, producing the floating point \\\n-                                                      representation of the integer, rounded if \\\n-                                                      necessary\",\n+                                                      representation of the integer\",\n                                                       msg),\n                                             into_suggestion);\n                     } else if can_cast {"}, {"sha": "0ce3d087f350927d1048489aeb202938b5d86488", "filename": "src/test/ui/suggestions/numeric-cast.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/09efaaf0764ddfd366bf6627533ecd1ea6ffb234/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09efaaf0764ddfd366bf6627533ecd1ea6ffb234/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.stderr?ref=09efaaf0764ddfd366bf6627533ecd1ea6ffb234", "patch": "@@ -723,7 +723,7 @@ error[E0308]: mismatched types\n     |\n 272 |     foo::<f64>(x_u32);\n     |                ^^^^^ expected f64, found u32\n-help: you can cast an `u32` to `f64`, producing the floating point representation of the integer, rounded if necessary\n+help: you can cast an `u32` to `f64`, producing the floating point representation of the integer\n     |\n 272 |     foo::<f64>(x_u32.into());\n     |                ^^^^^^^^^^^^\n@@ -733,7 +733,7 @@ error[E0308]: mismatched types\n     |\n 274 |     foo::<f64>(x_u16);\n     |                ^^^^^ expected f64, found u16\n-help: you can cast an `u16` to `f64`, producing the floating point representation of the integer, rounded if necessary\n+help: you can cast an `u16` to `f64`, producing the floating point representation of the integer\n     |\n 274 |     foo::<f64>(x_u16.into());\n     |                ^^^^^^^^^^^^\n@@ -743,7 +743,7 @@ error[E0308]: mismatched types\n     |\n 276 |     foo::<f64>(x_u8);\n     |                ^^^^ expected f64, found u8\n-help: you can cast an `u8` to `f64`, producing the floating point representation of the integer, rounded if necessary\n+help: you can cast an `u8` to `f64`, producing the floating point representation of the integer\n     |\n 276 |     foo::<f64>(x_u8.into());\n     |                ^^^^^^^^^^^\n@@ -765,7 +765,7 @@ error[E0308]: mismatched types\n     |\n 282 |     foo::<f64>(x_i32);\n     |                ^^^^^ expected f64, found i32\n-help: you can cast an `i32` to `f64`, producing the floating point representation of the integer, rounded if necessary\n+help: you can cast an `i32` to `f64`, producing the floating point representation of the integer\n     |\n 282 |     foo::<f64>(x_i32.into());\n     |                ^^^^^^^^^^^^\n@@ -775,7 +775,7 @@ error[E0308]: mismatched types\n     |\n 284 |     foo::<f64>(x_i16);\n     |                ^^^^^ expected f64, found i16\n-help: you can cast an `i16` to `f64`, producing the floating point representation of the integer, rounded if necessary\n+help: you can cast an `i16` to `f64`, producing the floating point representation of the integer\n     |\n 284 |     foo::<f64>(x_i16.into());\n     |                ^^^^^^^^^^^^\n@@ -785,7 +785,7 @@ error[E0308]: mismatched types\n     |\n 286 |     foo::<f64>(x_i8);\n     |                ^^^^ expected f64, found i8\n-help: you can cast an `i8` to `f64`, producing the floating point representation of the integer, rounded if necessary\n+help: you can cast an `i8` to `f64`, producing the floating point representation of the integer\n     |\n 286 |     foo::<f64>(x_i8.into());\n     |                ^^^^^^^^^^^\n@@ -823,7 +823,7 @@ error[E0308]: mismatched types\n     |\n 298 |     foo::<f32>(x_u16);\n     |                ^^^^^ expected f32, found u16\n-help: you can cast an `u16` to `f32`, producing the floating point representation of the integer, rounded if necessary\n+help: you can cast an `u16` to `f32`, producing the floating point representation of the integer\n     |\n 298 |     foo::<f32>(x_u16.into());\n     |                ^^^^^^^^^^^^\n@@ -833,7 +833,7 @@ error[E0308]: mismatched types\n     |\n 300 |     foo::<f32>(x_u8);\n     |                ^^^^ expected f32, found u8\n-help: you can cast an `u8` to `f32`, producing the floating point representation of the integer, rounded if necessary\n+help: you can cast an `u8` to `f32`, producing the floating point representation of the integer\n     |\n 300 |     foo::<f32>(x_u8.into());\n     |                ^^^^^^^^^^^\n@@ -861,7 +861,7 @@ error[E0308]: mismatched types\n     |\n 308 |     foo::<f32>(x_i16);\n     |                ^^^^^ expected f32, found i16\n-help: you can cast an `i16` to `f32`, producing the floating point representation of the integer, rounded if necessary\n+help: you can cast an `i16` to `f32`, producing the floating point representation of the integer\n     |\n 308 |     foo::<f32>(x_i16.into());\n     |                ^^^^^^^^^^^^\n@@ -871,7 +871,7 @@ error[E0308]: mismatched types\n     |\n 310 |     foo::<f32>(x_i8);\n     |                ^^^^ expected f32, found i8\n-help: you can cast an `i8` to `f32`, producing the floating point representation of the integer, rounded if necessary\n+help: you can cast an `i8` to `f32`, producing the floating point representation of the integer\n     |\n 310 |     foo::<f32>(x_i8.into());\n     |                ^^^^^^^^^^^"}]}