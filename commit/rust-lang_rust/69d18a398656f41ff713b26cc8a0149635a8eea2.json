{"sha": "69d18a398656f41ff713b26cc8a0149635a8eea2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZDE4YTM5ODY1NmY0MWZmNzEzYjI2Y2M4YTAxNDk2MzVhOGVlYTI=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-06-06T20:13:52Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-01-11T02:53:29Z"}, "message": "Make more passes incremental", "tree": {"sha": "8731c660d4e1662fcbc24f0fb18598592adf4f45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8731c660d4e1662fcbc24f0fb18598592adf4f45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69d18a398656f41ff713b26cc8a0149635a8eea2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69d18a398656f41ff713b26cc8a0149635a8eea2", "html_url": "https://github.com/rust-lang/rust/commit/69d18a398656f41ff713b26cc8a0149635a8eea2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69d18a398656f41ff713b26cc8a0149635a8eea2/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2d381d39d282c0586d50ea7d7a431ffd5ddb3fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d381d39d282c0586d50ea7d7a431ffd5ddb3fb", "html_url": "https://github.com/rust-lang/rust/commit/c2d381d39d282c0586d50ea7d7a431ffd5ddb3fb"}], "stats": {"total": 280, "additions": 246, "deletions": 34}, "files": [{"sha": "427fe51e6ff9cc6ccfc48586f3d026ad311b8532", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=69d18a398656f41ff713b26cc8a0149635a8eea2", "patch": "@@ -472,6 +472,12 @@ define_dep_nodes!( <'tcx>\n     [] UnsafetyCheckResult(DefId),\n     [] UnsafeDeriveOnReprPacked(DefId),\n \n+    [] CheckModAttrs(DefId),\n+    [] CheckModLoops(DefId),\n+    [] CheckModUnstableApiUsage(DefId),\n+    [] CheckModItemTypes(DefId),\n+    [] CollectModItemTypes(DefId),\n+\n     [] Reachability,\n     [] MirKeys,\n     [eval_always] CrateVariances,"}, {"sha": "2cce8e0f9c9dda2f28dd0c8de8de509ae871d4bb", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=69d18a398656f41ff713b26cc8a0149635a8eea2", "patch": "@@ -4,9 +4,14 @@\n //! conflicts between multiple such attributes attached to the same\n //! item.\n \n+\n+use ty::TyCtxt;\n+use ty::query::Providers;\n+use ty::query::queries;\n+\n use hir;\n+use hir::def_id::DefId;\n use hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use ty::TyCtxt;\n use std::fmt::{self, Display};\n use syntax_pos::Span;\n \n@@ -364,8 +369,9 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckAttrVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let mut checker = CheckAttrVisitor { tcx };\n-    tcx.hir().krate().visit_all_item_likes(&mut checker.as_deep_visitor());\n+    for &module in tcx.hir().krate().modules.keys() {\n+        queries::check_mod_attrs::ensure(tcx, tcx.hir().local_def_id(module));\n+    }\n }\n \n fn is_c_like_enum(item: &hir::Item) -> bool {\n@@ -381,3 +387,17 @@ fn is_c_like_enum(item: &hir::Item) -> bool {\n         false\n     }\n }\n+\n+pub fn check_mod_attrs<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n+    tcx.hir().visit_module_item_likes(\n+        module_def_id,\n+        &mut CheckAttrVisitor { tcx }.as_deep_visitor()\n+    );\n+}\n+\n+pub(crate) fn provide(providers: &mut Providers<'_>) {\n+    *providers = Providers {\n+        check_mod_attrs,\n+        ..*providers\n+    };\n+}"}, {"sha": "868072b2fa7bf9642308ff2823c7dce5b46f5c74", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=69d18a398656f41ff713b26cc8a0149635a8eea2", "patch": "@@ -1,4 +1,5 @@\n use ty;\n+use ty::TyCtxt;\n use hir::map::definitions::FIRST_FREE_HIGH_DEF_INDEX;\n use rustc_data_structures::indexed_vec::Idx;\n use serialize;\n@@ -247,6 +248,14 @@ impl DefId {\n     pub fn to_local(self) -> LocalDefId {\n         LocalDefId::from_def_id(self)\n     }\n+\n+    pub fn describe_as_module(&self, tcx: TyCtxt<'_, '_, '_>) -> String {\n+        if self.is_local() && self.index == CRATE_DEF_INDEX {\n+            format!(\"top-level module\")\n+        } else {\n+            format!(\"module `{}`\", tcx.item_path_str(*self))\n+        }\n+    }\n }\n \n impl serialize::UseSpecializedEncodable for DefId {}"}, {"sha": "6957c97931b079c2aba9a6a730e2019b15650f0e", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=69d18a398656f41ff713b26cc8a0149635a8eea2", "patch": "@@ -48,7 +48,7 @@ use session::config::nightly_options;\n use util::common::FN_OUTPUT_NAME;\n use util::nodemap::{DefIdMap, NodeMap};\n \n-use std::collections::BTreeMap;\n+use std::collections::{BTreeSet, BTreeMap};\n use std::fmt::Debug;\n use std::mem;\n use smallvec::SmallVec;\n@@ -90,6 +90,8 @@ pub struct LoweringContext<'a> {\n     trait_impls: BTreeMap<DefId, Vec<NodeId>>,\n     trait_auto_impl: BTreeMap<DefId, NodeId>,\n \n+    modules: BTreeMap<NodeId, hir::ModuleItems>,\n+\n     is_generator: bool,\n \n     catch_scopes: Vec<NodeId>,\n@@ -124,6 +126,8 @@ pub struct LoweringContext<'a> {\n     // needs to be created for it.\n     in_scope_lifetimes: Vec<Ident>,\n \n+    current_module: NodeId,\n+\n     type_def_lifetime_params: DefIdMap<usize>,\n \n     current_hir_id_owner: Vec<(DefIndex, u32)>,\n@@ -228,12 +232,14 @@ pub fn lower_crate(\n         bodies: BTreeMap::new(),\n         trait_impls: BTreeMap::new(),\n         trait_auto_impl: BTreeMap::new(),\n+        modules: BTreeMap::new(),\n         exported_macros: Vec::new(),\n         catch_scopes: Vec::new(),\n         loop_scopes: Vec::new(),\n         is_in_loop_condition: false,\n         anonymous_lifetime_mode: AnonymousLifetimeMode::PassThrough,\n         type_def_lifetime_params: Default::default(),\n+        current_module: CRATE_NODE_ID,\n         current_hir_id_owner: vec![(CRATE_DEF_INDEX, 0)],\n         item_local_id_counters: Default::default(),\n         node_id_to_hir_id: IndexVec::new(),\n@@ -356,6 +362,15 @@ impl<'a> LoweringContext<'a> {\n         }\n \n         impl<'lcx, 'interner> Visitor<'lcx> for MiscCollector<'lcx, 'interner> {\n+            fn visit_mod(&mut self, m: &'lcx Mod, _s: Span, _attrs: &[Attribute], n: NodeId) {\n+                self.lctx.modules.insert(n, hir::ModuleItems {\n+                    items: BTreeSet::new(),\n+                    trait_items: BTreeSet::new(),\n+                    impl_items: BTreeSet::new(),\n+                });\n+                visit::walk_mod(self, m);\n+            }\n+\n             fn visit_item(&mut self, item: &'lcx Item) {\n                 self.lctx.allocate_hir_id_counter(item.id, item);\n \n@@ -414,11 +429,18 @@ impl<'a> LoweringContext<'a> {\n         }\n \n         impl<'lcx, 'interner> Visitor<'lcx> for ItemLowerer<'lcx, 'interner> {\n+            fn visit_mod(&mut self, m: &'lcx Mod, _s: Span, _attrs: &[Attribute], n: NodeId) {\n+                let old = self.lctx.current_module;\n+                self.lctx.current_module = n;\n+                visit::walk_mod(self, m);\n+                self.lctx.current_module = old;\n+            }\n+\n             fn visit_item(&mut self, item: &'lcx Item) {\n                 let mut item_lowered = true;\n                 self.lctx.with_hir_id_owner(item.id, |lctx| {\n                     if let Some(hir_item) = lctx.lower_item(item) {\n-                        lctx.items.insert(item.id, hir_item);\n+                        lctx.insert_item(item.id, hir_item);\n                     } else {\n                         item_lowered = false;\n                     }\n@@ -451,6 +473,7 @@ impl<'a> LoweringContext<'a> {\n                     let id = hir::TraitItemId { node_id: item.id };\n                     let hir_item = lctx.lower_trait_item(item);\n                     lctx.trait_items.insert(id, hir_item);\n+                    lctx.modules.get_mut(&lctx.current_module).unwrap().trait_items.insert(id);\n                 });\n \n                 visit::walk_trait_item(self, item);\n@@ -461,6 +484,7 @@ impl<'a> LoweringContext<'a> {\n                     let id = hir::ImplItemId { node_id: item.id };\n                     let hir_item = lctx.lower_impl_item(item);\n                     lctx.impl_items.insert(id, hir_item);\n+                    lctx.modules.get_mut(&lctx.current_module).unwrap().impl_items.insert(id);\n                 });\n                 visit::walk_impl_item(self, item);\n             }\n@@ -492,9 +516,15 @@ impl<'a> LoweringContext<'a> {\n             body_ids,\n             trait_impls: self.trait_impls,\n             trait_auto_impl: self.trait_auto_impl,\n+            modules: self.modules,\n         }\n     }\n \n+    fn insert_item(&mut self, id: NodeId, item: hir::Item) {\n+        self.items.insert(id, item);\n+        self.modules.get_mut(&self.current_module).unwrap().items.insert(id);\n+    }\n+\n     fn allocate_hir_id_counter<T: Debug>(&mut self, owner: NodeId, debug: &T) -> LoweredNodeId {\n         if self.item_local_id_counters.insert(owner, 0).is_some() {\n             bug!(\n@@ -1370,7 +1400,7 @@ impl<'a> LoweringContext<'a> {\n             // Insert the item into the global list. This usually happens\n             // automatically for all AST items. But this existential type item\n             // does not actually exist in the AST.\n-            lctx.items.insert(exist_ty_id.node_id, exist_ty_item);\n+            lctx.insert_item(exist_ty_id.node_id, exist_ty_item);\n \n             // `impl Trait` now just becomes `Foo<'a, 'b, ..>`.\n             hir::TyKind::Def(hir::ItemId { id: exist_ty_id.node_id }, lifetimes)\n@@ -3026,7 +3056,7 @@ impl<'a> LoweringContext<'a> {\n                         };\n                         let vis = respan(vis.span, vis_kind);\n \n-                        this.items.insert(\n+                        this.insert_item(\n                             new_id.node_id,\n                             hir::Item {\n                                 id: new_id.node_id,\n@@ -3133,7 +3163,7 @@ impl<'a> LoweringContext<'a> {\n                         };\n                         let vis = respan(vis.span, vis_kind);\n \n-                        this.items.insert(\n+                        this.insert_item(\n                             new_id,\n                             hir::Item {\n                                 id: new_id,"}, {"sha": "925a5fb85b81b2a5e9f35f59243148756ee878db", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=69d18a398656f41ff713b26cc8a0149635a8eea2", "patch": "@@ -119,6 +119,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                 trait_impls: _,\n                 trait_auto_impl: _,\n                 body_ids: _,\n+                modules: _,\n             } = *krate;\n \n             alloc_hir_dep_nodes("}, {"sha": "0d55b4fdb74b8ce509c44bb11aba2c90629a5499", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=69d18a398656f41ff713b26cc8a0149635a8eea2", "patch": "@@ -17,6 +17,7 @@ use syntax::ext::base::MacroKind;\n use syntax_pos::{Span, DUMMY_SP};\n \n use hir::*;\n+use hir::itemlikevisit::ItemLikeVisitor;\n use hir::print::Nested;\n use util::nodemap::FxHashMap;\n \n@@ -506,6 +507,35 @@ impl<'hir> Map<'hir> {\n         &self.forest.krate.attrs\n     }\n \n+    pub fn visit_module_item_likes<V>(&self, module: DefId, visitor: &mut V)\n+        where V: ItemLikeVisitor<'hir>\n+    {\n+        let node_id = self.as_local_node_id(module).unwrap();\n+\n+        // Read the module so we'll be re-executed if new items\n+        // appear immediately under in the module. If some new item appears\n+        // in some nested item in the module, we'll be re-executed due to the reads\n+        // in the loops below\n+        self.read(node_id);\n+\n+        let module = &self.forest.krate.modules[&node_id];\n+\n+        for id in &module.items {\n+            self.read(*id);\n+            visitor.visit_item(&self.forest.krate.items[id]);\n+        }\n+\n+        for id in &module.trait_items {\n+            self.read(id.node_id);\n+            visitor.visit_trait_item(&self.forest.krate.trait_items[id]);\n+        }\n+\n+        for id in &module.impl_items {\n+            self.read(id.node_id);\n+            visitor.visit_impl_item(&self.forest.krate.impl_items[id]);\n+        }\n+    }\n+\n     /// Retrieve the Node corresponding to `id`, panicking if it cannot\n     /// be found.\n     pub fn get(&self, id: NodeId) -> Node<'hir> {"}, {"sha": "fc4bd05476f6ceb4662949ca44111a491411eb71", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=69d18a398656f41ff713b26cc8a0149635a8eea2", "patch": "@@ -33,7 +33,7 @@ use rustc_data_structures::sync::{ParallelIterator, par_iter, Send, Sync, scope}\n use rustc_data_structures::thin_vec::ThinVec;\n \n use serialize::{self, Encoder, Encodable, Decoder, Decodable};\n-use std::collections::BTreeMap;\n+use std::collections::{BTreeSet, BTreeMap};\n use std::fmt;\n \n /// HIR doesn't commit to a concrete storage type and has its own alias for a vector.\n@@ -676,6 +676,15 @@ pub struct WhereEqPredicate {\n     pub rhs_ty: P<Ty>,\n }\n \n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub struct ModuleItems {\n+    // Use BTreeSets here so items are in the same order as in the\n+    // list of all items in Crate\n+    pub items: BTreeSet<NodeId>,\n+    pub trait_items: BTreeSet<TraitItemId>,\n+    pub impl_items: BTreeSet<ImplItemId>,\n+}\n+\n /// The top-level data structure that stores the entire contents of\n /// the crate currently being compiled.\n ///\n@@ -708,6 +717,10 @@ pub struct Crate {\n     /// in the crate, you should iterate over this list rather than the keys\n     /// of bodies.\n     pub body_ids: Vec<BodyId>,\n+\n+    /// A list of modules written out in the order in which they\n+    /// appear in the crate. This includes the main crate module.\n+    pub modules: BTreeMap<NodeId, ModuleItems>,\n }\n \n impl Crate {\n@@ -2408,6 +2421,7 @@ pub type GlobMap = NodeMap<FxHashSet<Name>>;\n \n \n pub fn provide(providers: &mut Providers<'_>) {\n+    check_attr::provide(providers);\n     providers.describe_def = map::describe_def;\n }\n "}, {"sha": "ad275ff2faac8c010ee1c0d2f665d93145988923", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=69d18a398656f41ff713b26cc8a0149635a8eea2", "patch": "@@ -8,6 +8,8 @@ use hir::{self, Item, Generics, StructField, Variant, HirId};\n use hir::def::Def;\n use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use ty::query::Providers;\n+use ty::query::queries;\n use middle::privacy::AccessLevels;\n use session::{DiagnosticMessageId, Session};\n use syntax::symbol::Symbol;\n@@ -454,11 +456,23 @@ impl<'a, 'tcx> Index<'tcx> {\n     }\n }\n \n+pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+    for &module in tcx.hir().krate().modules.keys() {\n+        queries::check_mod_unstable_api_usage::ensure(tcx, tcx.hir().local_def_id(module));\n+    }\n+}\n+\n /// Cross-references the feature names of unstable APIs with enabled\n /// features and possibly prints errors.\n-pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let mut checker = Checker { tcx };\n-    tcx.hir().krate().visit_all_item_likes(&mut checker.as_deep_visitor());\n+pub fn check_mod_unstable_api_usage<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n+    tcx.hir().visit_module_item_likes(module_def_id, &mut Checker { tcx }.as_deep_visitor());\n+}\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    *providers = Providers {\n+        check_mod_unstable_api_usage,\n+        ..*providers\n+    };\n }\n \n /// Check whether an item marked with `deprecated(since=\"X\")` is currently"}, {"sha": "ca5d1f6bd32036525e1d8fce04381f751a366bfe", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=69d18a398656f41ff713b26cc8a0149635a8eea2", "patch": "@@ -68,11 +68,56 @@ impl<'tcx, M: QueryAccessors<'tcx, Key=DefId>> QueryDescription<'tcx> for M {\n             format!(\"processing `{}`\", tcx.item_path_str(def_id)).into()\n         } else {\n             let name = unsafe { ::std::intrinsics::type_name::<M>() };\n-            format!(\"processing `{}` applied to `{:?}`\", name, def_id).into()\n+            format!(\"processing {:?} with query `{}`\", def_id, name).into()\n         }\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::check_mod_attrs<'tcx> {\n+    fn describe(\n+        tcx: TyCtxt<'_, '_, '_>,\n+        key: DefId,\n+    ) -> Cow<'static, str> {\n+        format!(\"checking attributes in {}\", key.describe_as_module(tcx)).into()\n+    }\n+}\n+\n+impl<'tcx> QueryDescription<'tcx> for queries::check_mod_unstable_api_usage<'tcx> {\n+    fn describe(\n+        tcx: TyCtxt<'_, '_, '_>,\n+        key: DefId,\n+    ) -> Cow<'static, str> {\n+        format!(\"checking for unstable API usage in {}\", key.describe_as_module(tcx)).into()\n+    }\n+}\n+\n+impl<'tcx> QueryDescription<'tcx> for queries::check_mod_loops<'tcx> {\n+    fn describe(\n+        tcx: TyCtxt<'_, '_, '_>,\n+        key: DefId,\n+    ) -> Cow<'static, str> {\n+        format!(\"checking loops in {}\", key.describe_as_module(tcx)).into()\n+    }\n+}\n+\n+impl<'tcx> QueryDescription<'tcx> for queries::check_mod_item_types<'tcx> {\n+    fn describe(\n+        tcx: TyCtxt<'_, '_, '_>,\n+        key: DefId,\n+    ) -> Cow<'static, str> {\n+        format!(\"checking item types in {}\", key.describe_as_module(tcx)).into()\n+    }\n+}\n+\n+impl<'tcx> QueryDescription<'tcx> for queries::collect_mod_item_types<'tcx> {\n+    fn describe(\n+        tcx: TyCtxt<'_, '_, '_>,\n+        key: DefId,\n+    ) -> Cow<'static, str> {\n+        format!(\"collecting item types in {}\", key.describe_as_module(tcx)).into()\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::normalize_projection_ty<'tcx> {\n     fn describe(\n         _tcx: TyCtxt<'_, '_, '_>,"}, {"sha": "39d76ceed9507fc7930e038193562438b40197a0", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=69d18a398656f41ff713b26cc8a0149635a8eea2", "patch": "@@ -254,6 +254,18 @@ define_queries! { <'tcx>\n     },\n \n     Other {\n+        /// Checks the attributes in the module\n+        [] fn check_mod_attrs: CheckModAttrs(DefId) -> (),\n+\n+        [] fn check_mod_unstable_api_usage: CheckModUnstableApiUsage(DefId) -> (),\n+\n+        /// Checks the loops in the module\n+        [] fn check_mod_loops: CheckModLoops(DefId) -> (),\n+\n+        [] fn check_mod_item_types: CheckModItemTypes(DefId) -> (),\n+\n+        [] fn collect_mod_item_types: CollectModItemTypes(DefId) -> (),\n+\n         /// Caches CoerceUnsized kinds for impls on custom types.\n         [] fn coerce_unsized_info: CoerceUnsizedInfo(DefId)\n             -> ty::adjustment::CoerceUnsizedInfo,"}, {"sha": "af23bf3c5901f1fd2ae6210a26e7224530bd7c8e", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=69d18a398656f41ff713b26cc8a0149635a8eea2", "patch": "@@ -1262,6 +1262,11 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::MirBorrowCheck => { force!(mir_borrowck, def_id!()); }\n         DepKind::UnsafetyCheckResult => { force!(unsafety_check_result, def_id!()); }\n         DepKind::UnsafeDeriveOnReprPacked => { force!(unsafe_derive_on_repr_packed, def_id!()); }\n+        DepKind::CheckModAttrs => { force!(check_mod_attrs, def_id!()); }\n+        DepKind::CheckModLoops => { force!(check_mod_loops, def_id!()); }\n+        DepKind::CheckModUnstableApiUsage => { force!(check_mod_unstable_api_usage, def_id!()); }\n+        DepKind::CheckModItemTypes => { force!(check_mod_item_types, def_id!()); }\n+        DepKind::CollectModItemTypes => { force!(collect_mod_item_types, def_id!()); }\n         DepKind::Reachability => { force!(reachable_set, LOCAL_CRATE); }\n         DepKind::MirKeys => { force!(mir_keys, LOCAL_CRATE); }\n         DepKind::CrateVariances => { force!(crate_variances, LOCAL_CRATE); }"}, {"sha": "380f9afd68de6d2c2ff7c12cc7a95047aa2a719f", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=69d18a398656f41ff713b26cc8a0149635a8eea2", "patch": "@@ -1167,6 +1167,7 @@ pub fn default_provide(providers: &mut ty::query::Providers) {\n     typeck::provide(providers);\n     ty::provide(providers);\n     traits::provide(providers);\n+    stability::provide(providers);\n     reachable::provide(providers);\n     rustc_passes::provide(providers);\n     rustc_traits::provide(providers);\n@@ -1218,8 +1219,6 @@ where\n     sess.proc_macro_decls_static\n         .set(proc_macro_decls::find(&hir_map));\n \n-    time(sess, \"loop checking\", || loops::check_crate(sess, &hir_map));\n-\n     let mut local_providers = ty::query::Providers::default();\n     default_provide(&mut local_providers);\n     codegen_backend.provide(&mut local_providers);\n@@ -1247,7 +1246,9 @@ where\n         |tcx| {\n             // Do some initialization of the DepGraph that can only be done with the\n             // tcx available.\n-            rustc_incremental::dep_graph_tcx_init(tcx);\n+            time(sess, \"dep graph tcx init\", || rustc_incremental::dep_graph_tcx_init(tcx));\n+\n+            time(sess, \"loop checking\", || loops::check_crate(tcx));\n \n             time(sess, \"attribute checking\", || {\n                 hir::check_attr::check_crate(tcx)"}, {"sha": "829d4b34cf77922cf55acb7127ea71f55905ab7d", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=69d18a398656f41ff713b26cc8a0149635a8eea2", "patch": "@@ -38,4 +38,5 @@ __build_diagnostic_array! { librustc_passes, DIAGNOSTICS }\n \n pub fn provide(providers: &mut Providers) {\n     rvalue_promotion::provide(providers);\n+    loops::provide(providers);\n }"}, {"sha": "712fa84ccd9479b443ab8d6954810b4cf8a194e1", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=69d18a398656f41ff713b26cc8a0149635a8eea2", "patch": "@@ -2,6 +2,10 @@ use self::Context::*;\n \n use rustc::session::Session;\n \n+use rustc::ty::query::Providers;\n+use rustc::ty::query::queries;\n+use rustc::ty::TyCtxt;\n+use rustc::hir::def_id::DefId;\n use rustc::hir::map::Map;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::{self, Node, Destination};\n@@ -42,28 +46,32 @@ struct CheckLoopVisitor<'a, 'hir: 'a> {\n     cx: Context,\n }\n \n-pub fn check_crate(sess: &Session, map: &Map) {\n-    let krate = map.krate();\n-    krate.visit_all_item_likes(&mut CheckLoopVisitor {\n-        sess,\n-        hir_map: map,\n+pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+    for &module in tcx.hir().krate().modules.keys() {\n+        queries::check_mod_loops::ensure(tcx, tcx.hir().local_def_id(module));\n+    }\n+}\n+\n+pub fn check_mod_loops<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n+    tcx.hir().visit_module_item_likes(module_def_id, &mut CheckLoopVisitor {\n+        sess: &tcx.sess,\n+        hir_map: &tcx.hir(),\n         cx: Normal,\n     }.as_deep_visitor());\n }\n \n+pub(crate) fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n+        check_mod_loops,\n+        ..*providers\n+    };\n+}\n+\n impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'hir> {\n         NestedVisitorMap::OnlyBodies(&self.hir_map)\n     }\n \n-    fn visit_item(&mut self, i: &'hir hir::Item) {\n-        self.with_context(Normal, |v| intravisit::walk_item(v, i));\n-    }\n-\n-    fn visit_impl_item(&mut self, i: &'hir hir::ImplItem) {\n-        self.with_context(Normal, |v| intravisit::walk_impl_item(v, i));\n-    }\n-\n     fn visit_anon_const(&mut self, c: &'hir hir::AnonConst) {\n         self.with_context(AnonConst, |v| intravisit::walk_anon_const(v, c));\n     }"}, {"sha": "d008c80267ccb48ab840c1605b19b26dfc72c2bc", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=69d18a398656f41ff713b26cc8a0149635a8eea2", "patch": "@@ -109,6 +109,7 @@ use rustc::ty::{\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::query::Providers;\n+use rustc::ty::query::queries;\n use rustc::ty::subst::{UnpackedKind, Subst, Substs, UserSelfTy, UserSubsts};\n use rustc::ty::util::{Representability, IntTypeExt, Discr};\n use rustc::ty::layout::VariantIdx;\n@@ -700,10 +701,16 @@ pub fn check_wf_new<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Result<(), ErrorRe\n \n pub fn check_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Result<(), ErrorReported> {\n     tcx.sess.track_errors(|| {\n-        tcx.hir().krate().visit_all_item_likes(&mut CheckItemTypesVisitor { tcx });\n+        for &module in tcx.hir().krate().modules.keys() {\n+            queries::check_mod_item_types::ensure(tcx, tcx.hir().local_def_id(module));\n+        }\n     })\n }\n \n+fn check_mod_item_types<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n+    tcx.hir().visit_module_item_likes(module_def_id, &mut CheckItemTypesVisitor { tcx });\n+}\n+\n pub fn check_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Result<(), CompileIncomplete> {\n     tcx.typeck_item_bodies(LOCAL_CRATE)\n }\n@@ -742,6 +749,7 @@ pub fn provide(providers: &mut Providers) {\n         check_item_well_formed,\n         check_trait_item_well_formed,\n         check_impl_item_well_formed,\n+        check_mod_item_types,\n         ..*providers\n     };\n }"}, {"sha": "9bdc0bdc2e92677a74dcf60619b3d8e08d3563d7", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d18a398656f41ff713b26cc8a0149635a8eea2/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=69d18a398656f41ff713b26cc8a0149635a8eea2", "patch": "@@ -22,6 +22,7 @@ use middle::resolve_lifetime as rl;\n use middle::weak_lang_items;\n use rustc::mir::mono::Linkage;\n use rustc::ty::query::Providers;\n+use rustc::ty::query::queries;\n use rustc::ty::subst::Substs;\n use rustc::ty::util::Discr;\n use rustc::ty::util::IntTypeExt;\n@@ -55,10 +56,16 @@ struct OnlySelfBounds(bool);\n // Main entry point\n \n pub fn collect_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let mut visitor = CollectItemTypesVisitor { tcx };\n-    tcx.hir()\n-       .krate()\n-       .visit_all_item_likes(&mut visitor.as_deep_visitor());\n+    for &module in tcx.hir().krate().modules.keys() {\n+        queries::collect_mod_item_types::ensure(tcx, tcx.hir().local_def_id(module));\n+    }\n+}\n+\n+fn collect_mod_item_types<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n+    tcx.hir().visit_module_item_likes(\n+        module_def_id,\n+        &mut CollectItemTypesVisitor { tcx }.as_deep_visitor()\n+    );\n }\n \n pub fn provide(providers: &mut Providers) {\n@@ -77,6 +84,7 @@ pub fn provide(providers: &mut Providers) {\n         impl_polarity,\n         is_foreign_item,\n         codegen_fn_attrs,\n+        collect_mod_item_types,\n         ..*providers\n     };\n }"}]}