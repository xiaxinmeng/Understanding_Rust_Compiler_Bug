{"sha": "867582eb9710b08e88d45ca8d2a452efd3233fea", "node_id": "C_kwDOAAsO6NoAKDg2NzU4MmViOTcxMGIwOGU4OGQ0NWNhOGQyYTQ1MmVmZDMyMzNmZWE", "commit": {"author": {"name": "Yiming Lei", "email": "yiming.lei@futurewei.com", "date": "2022-11-16T18:13:51Z"}, "committer": {"name": "Yiming Lei", "email": "yiming.lei@futurewei.com", "date": "2022-11-17T17:01:27Z"}, "message": "detect () to avoid redundant <> suggestion for type\nfix #104379", "tree": {"sha": "50cc46dcf11880b303e4f4936f40ffa429829b1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50cc46dcf11880b303e4f4936f40ffa429829b1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/867582eb9710b08e88d45ca8d2a452efd3233fea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/867582eb9710b08e88d45ca8d2a452efd3233fea", "html_url": "https://github.com/rust-lang/rust/commit/867582eb9710b08e88d45ca8d2a452efd3233fea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/867582eb9710b08e88d45ca8d2a452efd3233fea/comments", "author": null, "committer": null, "parents": [{"sha": "63c748ee23ab7b6706655146f5b7c7f579811803", "url": "https://api.github.com/repos/rust-lang/rust/commits/63c748ee23ab7b6706655146f5b7c7f579811803", "html_url": "https://github.com/rust-lang/rust/commit/63c748ee23ab7b6706655146f5b7c7f579811803"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "5ab1581b6e0f210f2dd99c3f7d58c9a78a084c05", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/867582eb9710b08e88d45ca8d2a452efd3233fea/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867582eb9710b08e88d45ca8d2a452efd3233fea/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=867582eb9710b08e88d45ca8d2a452efd3233fea", "patch": "@@ -1926,12 +1926,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         | ty::Str\n                         | ty::Projection(_)\n                         | ty::Param(_) => format!(\"{deref_ty}\"),\n-                        // we need to test something like  <&[_]>::len\n+                        // we need to test something like  <&[_]>::len or <(&[u32])>::len\n                         // and Vec::function();\n-                        // <&[_]>::len doesn't need an extra \"<>\" between\n+                        // <&[_]>::len or <&[u32]>::len doesn't need an extra \"<>\" between\n                         // but for Adt type like Vec::function()\n                         // we would suggest <[_]>::function();\n-                        _ if self.tcx.sess.source_map().span_wrapped_by_angle_bracket(ty.span)  => format!(\"{deref_ty}\"),\n+                        _ if self.tcx.sess.source_map().span_wrapped_by_angle_or_parentheses(ty.span)  => format!(\"{deref_ty}\"),\n                         _ => format!(\"<{deref_ty}>\"),\n                     };\n                     err.span_suggestion_verbose("}, {"sha": "e8d129d733c1e340c10b76bbc28cb2e3b3646c08", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/867582eb9710b08e88d45ca8d2a452efd3233fea/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867582eb9710b08e88d45ca8d2a452efd3233fea/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=867582eb9710b08e88d45ca8d2a452efd3233fea", "patch": "@@ -753,22 +753,29 @@ impl SourceMap {\n         }\n     }\n \n-    /// Given a 'Span', tries to tell if the next character is '>'\n-    /// and the previous charactoer is '<' after skipping white space\n-    /// return true if wrapped by '<>'\n-    pub fn span_wrapped_by_angle_bracket(&self, span: Span) -> bool {\n+    /// Given a 'Span', tries to tell if it's wrapped by \"<>\" or \"()\"\n+    /// the algorithm searches if the next character is '>' or ')' after skipping white space\n+    /// then searches the previous charactoer to match '<' or '(' after skipping white space\n+    /// return true if wrapped by '<>' or '()'\n+    pub fn span_wrapped_by_angle_or_parentheses(&self, span: Span) -> bool {\n         self.span_to_source(span, |src, start_index, end_index| {\n             if src.get(start_index..end_index).is_none() {\n                 return Ok(false);\n             }\n             // test the right side to match '>' after skipping white space\n             let end_src = &src[end_index..];\n             let mut i = 0;\n+            let mut found_right_parentheses = false;\n+            let mut found_right_angle = false;\n             while let Some(cc) = end_src.chars().nth(i) {\n                 if cc == ' ' {\n                     i = i + 1;\n                 } else if cc == '>' {\n                     // found > in the right;\n+                    found_right_angle = true;\n+                    break;\n+                } else if cc == ')' {\n+                    found_right_parentheses = true;\n                     break;\n                 } else {\n                     // failed to find '>' return false immediately\n@@ -786,6 +793,16 @@ impl SourceMap {\n                     i = i - 1;\n                 } else if cc == '<' {\n                     // found < in the left\n+                    if !found_right_angle {\n+                        // skip something like \"(< )>\"\n+                        return Ok(false);\n+                    }\n+                    break;\n+                } else if cc == '(' {\n+                    if !found_right_parentheses {\n+                        // skip something like \"<(>)\"\n+                        return Ok(false);\n+                    }\n                     break;\n                 } else {\n                     // failed to find '<' return false immediately"}, {"sha": "7cd76286a929efbf054860ce2e3561a8ad9b1148", "filename": "src/test/ui/type/issue-103271.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/867582eb9710b08e88d45ca8d2a452efd3233fea/src%2Ftest%2Fui%2Ftype%2Fissue-103271.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867582eb9710b08e88d45ca8d2a452efd3233fea/src%2Ftest%2Fui%2Ftype%2Fissue-103271.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-103271.rs?ref=867582eb9710b08e88d45ca8d2a452efd3233fea", "patch": "@@ -7,4 +7,12 @@ fn main() {\n         let x: &u32 = item;\n         assert_eq!(x, &1);\n     }\n+    let iter_fun2 = <(&[u32])>::iter;\n+    //~^ no function or associated item named `iter` found for reference `&[u32]` in the current scope [E0599]\n+    //~| function or associated item not found in `&[u32]`\n+    //~| HELP the function `iter` is implemented on `[u32]`\n+    for item2 in iter_fun2(&[1,1]) {\n+        let x: &u32 = item2;\n+        assert_eq!(x, &1);\n+    }\n }"}, {"sha": "f4dac51b2b47852a6c4dd8dd7a640f454a544806", "filename": "src/test/ui/type/issue-103271.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/867582eb9710b08e88d45ca8d2a452efd3233fea/src%2Ftest%2Fui%2Ftype%2Fissue-103271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/867582eb9710b08e88d45ca8d2a452efd3233fea/src%2Ftest%2Fui%2Ftype%2Fissue-103271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-103271.stderr?ref=867582eb9710b08e88d45ca8d2a452efd3233fea", "patch": "@@ -9,6 +9,17 @@ help: the function `iter` is implemented on `[u32]`\n LL |     let iter_fun = <[u32]>::iter;\n    |                     ~~~~~\n \n-error: aborting due to previous error\n+error[E0599]: no function or associated item named `iter` found for reference `&[u32]` in the current scope\n+  --> $DIR/issue-103271.rs:10:33\n+   |\n+LL |     let iter_fun2 = <(&[u32])>::iter;\n+   |                                 ^^^^ function or associated item not found in `&[u32]`\n+   |\n+help: the function `iter` is implemented on `[u32]`\n+   |\n+LL |     let iter_fun2 = <([u32])>::iter;\n+   |                       ~~~~~\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0599`."}]}