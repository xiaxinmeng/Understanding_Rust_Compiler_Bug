{"sha": "815d3ba88307e4f8d1e4f1b2da09746877ff3ecf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNWQzYmE4ODMwN2U0ZjhkMWU0ZjFiMmRhMDk3NDY4NzdmZjNlY2Y=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-19T23:01:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-19T23:01:39Z"}, "message": "Rollup merge of #60895 - chandde:master, r=alexcrichton\n\nEnable thumbv7a-pc-windows-msvc target build end to end in rust/master\n\nWith this PR, plus another commit https://github.com/rust-lang-nursery/compiler-builtins/commit/cf98161da7ed5217b6031796f0f60b4dd07148a4, I'm able to build the target thumbv7a-pc-windows-msvc successfully, and I'm able to use the stage2 artifacts to build arm32 projects. The commit in compiler_builtins is in release 0.1.14, the current cargo.lock in rust master still uses 0.1.12, so I bumped the compiler_builtins version in cargo.lock to 0.1.15\n\nThe command I used to build rust\n```\nc:\\python27\\python.exe x.py build --host x86_64-pc-windows-msvc --build x86_64-pc-windows-msvc --target thumbv7a-pc-windows-msvc --verbose\n```\n\n**Changes**\n1. update cargolock to use compiler_builtins 0.1.15\n2. handle libunwind in libtest for thumv7a the same as what we have for aarch64\n3. in llvm codegen add a field in CodegenContext to carry the arch, so later in create_msvc_imps function, the arch can be used to check against \"x86\", instead of 32 pointer width. Apparently Thumv7a is handled differently than x86.\n\n**Background**\nI'm from Microsoft working on enabling Azure IoTEdge on ARM32 Windows IoTCore, Azure IoTEdge has a component called IoTEdged written in rust as a NT service running on Windows, so we need to enable rust on thumbv7a in order to have full IoTEdge. My colleague had made some heavy lifting and we've been using our private toolchain to build IoTEdged in our devops pipeline, because at that time we cannot build thumbv7a target end to end successfully. This change is a followup to enable the end to end build for thumbv7a-pc-windows-msvc target.\n\n**Next step**\nI'll submit more changes to have this target built nightly in rust/master, to achieve the same availability for aarch64-pc-windows-msvc, indexed here https://rust-lang.github.io/rustup-components-history/aarch64-pc-windows-msvc.html and can be manually installed. **Please do share what takes to make this happen, is there a formal process I need to follow\\?**", "tree": {"sha": "e4dec3b8bdecf22674039eae1e505db86c8f7d5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4dec3b8bdecf22674039eae1e505db86c8f7d5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/815d3ba88307e4f8d1e4f1b2da09746877ff3ecf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc4eBUCRBK7hj4Ov3rIwAAdHIIADsqiLipsC8OGZEjJ4YSE0QL\nKhiEdtP93GCDYBWywuceYLzDOAn0gVN1910I6CQrdCpxVEZLJUXd4fpl+LpU3K6a\nRhVGQplWXP6YrjSuZNml+qtEP/L4cItjEVX831sbJcGiBId3iLmPB5R0lTnXWr53\nyzKdspyezjTpl2DJ4qE7cygLHgsb00jYMZuXI8vdayL9eCNN7+Sh7CfplY3dsLzQ\nmpIGllgZiEWW/RFKcLzo+UjxiFySacDLfKNonJ0b9pDzvVTUiiYzONVDgli7enbl\nuilRj+QwXSEOX7i+PAccwugijdDjQTBQd2gKFHQ6xrP3q9hYhVK5bWDUWgPvaPI=\n=LjrP\n-----END PGP SIGNATURE-----\n", "payload": "tree e4dec3b8bdecf22674039eae1e505db86c8f7d5b\nparent 5c84d779b2a52519b72a2ba0dd492e2a7eb6552e\nparent 759921e2a0ec87211a0a54ab628f5ba5fbe6e578\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558306899 +0200\ncommitter GitHub <noreply@github.com> 1558306899 +0200\n\nRollup merge of #60895 - chandde:master, r=alexcrichton\n\nEnable thumbv7a-pc-windows-msvc target build end to end in rust/master\n\nWith this PR, plus another commit https://github.com/rust-lang-nursery/compiler-builtins/commit/cf98161da7ed5217b6031796f0f60b4dd07148a4, I'm able to build the target thumbv7a-pc-windows-msvc successfully, and I'm able to use the stage2 artifacts to build arm32 projects. The commit in compiler_builtins is in release 0.1.14, the current cargo.lock in rust master still uses 0.1.12, so I bumped the compiler_builtins version in cargo.lock to 0.1.15\n\nThe command I used to build rust\n```\nc:\\python27\\python.exe x.py build --host x86_64-pc-windows-msvc --build x86_64-pc-windows-msvc --target thumbv7a-pc-windows-msvc --verbose\n```\n\n**Changes**\n1. update cargolock to use compiler_builtins 0.1.15\n2. handle libunwind in libtest for thumv7a the same as what we have for aarch64\n3. in llvm codegen add a field in CodegenContext to carry the arch, so later in create_msvc_imps function, the arch can be used to check against \"x86\", instead of 32 pointer width. Apparently Thumv7a is handled differently than x86.\n\n**Background**\nI'm from Microsoft working on enabling Azure IoTEdge on ARM32 Windows IoTCore, Azure IoTEdge has a component called IoTEdged written in rust as a NT service running on Windows, so we need to enable rust on thumbv7a in order to have full IoTEdge. My colleague had made some heavy lifting and we've been using our private toolchain to build IoTEdged in our devops pipeline, because at that time we cannot build thumbv7a target end to end successfully. This change is a followup to enable the end to end build for thumbv7a-pc-windows-msvc target.\n\n**Next step**\nI'll submit more changes to have this target built nightly in rust/master, to achieve the same availability for aarch64-pc-windows-msvc, indexed here https://rust-lang.github.io/rustup-components-history/aarch64-pc-windows-msvc.html and can be manually installed. **Please do share what takes to make this happen, is there a formal process I need to follow\\?**\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/815d3ba88307e4f8d1e4f1b2da09746877ff3ecf", "html_url": "https://github.com/rust-lang/rust/commit/815d3ba88307e4f8d1e4f1b2da09746877ff3ecf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/815d3ba88307e4f8d1e4f1b2da09746877ff3ecf/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c84d779b2a52519b72a2ba0dd492e2a7eb6552e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c84d779b2a52519b72a2ba0dd492e2a7eb6552e", "html_url": "https://github.com/rust-lang/rust/commit/5c84d779b2a52519b72a2ba0dd492e2a7eb6552e"}, {"sha": "759921e2a0ec87211a0a54ab628f5ba5fbe6e578", "url": "https://api.github.com/repos/rust-lang/rust/commits/759921e2a0ec87211a0a54ab628f5ba5fbe6e578", "html_url": "https://github.com/rust-lang/rust/commit/759921e2a0ec87211a0a54ab628f5ba5fbe6e578"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "66ba95810a62516a109462f740955fed5c54afb8", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/815d3ba88307e4f8d1e4f1b2da09746877ff3ecf/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/815d3ba88307e4f8d1e4f1b2da09746877ff3ecf/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=815d3ba88307e4f8d1e4f1b2da09746877ff3ecf", "patch": "@@ -795,10 +795,10 @@ fn create_msvc_imps(\n         return\n     }\n     // The x86 ABI seems to require that leading underscores are added to symbol\n-    // names, so we need an extra underscore on 32-bit. There's also a leading\n+    // names, so we need an extra underscore on x86. There's also a leading\n     // '\\x01' here which disables LLVM's symbol mangling (e.g., no extra\n     // underscores added in front).\n-    let prefix = if cgcx.target_pointer_width == \"32\" {\n+    let prefix = if cgcx.target_arch == \"x86\" {\n         \"\\x01__imp__\"\n     } else {\n         \"\\x01__imp_\""}, {"sha": "1c793996c83db65cc1cc2960546f358197812253", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/815d3ba88307e4f8d1e4f1b2da09746877ff3ecf/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/815d3ba88307e4f8d1e4f1b2da09746877ff3ecf/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=815d3ba88307e4f8d1e4f1b2da09746877ff3ecf", "patch": "@@ -248,6 +248,7 @@ pub struct CodegenContext<B: WriteBackendMethods> {\n     pub tm_factory: TargetMachineFactory<B>,\n     pub msvc_imps_needed: bool,\n     pub target_pointer_width: String,\n+    pub target_arch: String,\n     pub debuginfo: config::DebugInfo,\n \n     // Number of cgus excluding the allocator/metadata modules\n@@ -1103,6 +1104,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         total_cgus,\n         msvc_imps_needed: msvc_imps_needed(tcx),\n         target_pointer_width: tcx.sess.target.target.target_pointer_width.clone(),\n+        target_arch: tcx.sess.target.target.arch.clone(),\n         debuginfo: tcx.sess.opts.debuginfo,\n         assembler_cmd,\n     };"}, {"sha": "7f7db2a21251ac8864bcc07faf4a30001c2d6634", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/815d3ba88307e4f8d1e4f1b2da09746877ff3ecf/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/815d3ba88307e4f8d1e4f1b2da09746877ff3ecf/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=815d3ba88307e4f8d1e4f1b2da09746877ff3ecf", "patch": "@@ -37,12 +37,13 @@ extern crate libc;\n use term;\n \n // FIXME(#54291): rustc and/or LLVM don't yet support building with panic-unwind\n-//                on aarch64-pc-windows-msvc, so we don't link libtest against\n-//                libunwind (for the time being), even though it means that\n-//                libtest won't be fully functional on this platform.\n+//                on aarch64-pc-windows-msvc, or thumbv7a-pc-windows-msvc\n+//                so we don't link libtest against libunwind (for the time being)\n+//                even though it means that libtest won't be fully functional on\n+//                these platforms.\n //\n // See also: https://github.com/rust-lang/rust/issues/54190#issuecomment-422904437\n-#[cfg(not(all(windows, target_arch = \"aarch64\")))]\n+#[cfg(not(all(windows, any(target_arch = \"aarch64\", target_arch = \"arm\"))))]\n extern crate panic_unwind;\n \n pub use self::ColorConfig::*;"}]}