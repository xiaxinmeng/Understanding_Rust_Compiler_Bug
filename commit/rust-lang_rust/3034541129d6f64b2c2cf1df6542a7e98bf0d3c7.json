{"sha": "3034541129d6f64b2c2cf1df6542a7e98bf0d3c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMzQ1NDExMjlkNmY2NGIyYzJjZjFkZjY1NDJhN2U5OGJmMGQzYzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-09T13:07:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-09T13:07:07Z"}, "message": "Auto merge of #27897 - sfackler:cursor-box-slice, r=alexcrichton", "tree": {"sha": "29e0e2af81d8c4d11c1eecacba688e8f898ab7f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29e0e2af81d8c4d11c1eecacba688e8f898ab7f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3034541129d6f64b2c2cf1df6542a7e98bf0d3c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3034541129d6f64b2c2cf1df6542a7e98bf0d3c7", "html_url": "https://github.com/rust-lang/rust/commit/3034541129d6f64b2c2cf1df6542a7e98bf0d3c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3034541129d6f64b2c2cf1df6542a7e98bf0d3c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c14609035d1780d4a8a3ca7b4fdf93046299ab4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c14609035d1780d4a8a3ca7b4fdf93046299ab4a", "html_url": "https://github.com/rust-lang/rust/commit/c14609035d1780d4a8a3ca7b4fdf93046299ab4a"}, {"sha": "6b244d54e6a316f6b0c13c49097454ec71f14d7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b244d54e6a316f6b0c13c49097454ec71f14d7e", "html_url": "https://github.com/rust-lang/rust/commit/6b244d54e6a316f6b0c13c49097454ec71f14d7e"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "7bca5359690ec66f7adf0af6b67c58d866864f73", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3034541129d6f64b2c2cf1df6542a7e98bf0d3c7/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3034541129d6f64b2c2cf1df6542a7e98bf0d3c7/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=3034541129d6f64b2c2cf1df6542a7e98bf0d3c7", "patch": "@@ -265,6 +265,16 @@ impl Write for Cursor<Vec<u8>> {\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n \n+#[stable(feature = \"cursor_box_slice\", since = \"1.5.0\")]\n+impl Write for Cursor<Box<[u8]>> {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        let pos = cmp::min(self.pos, self.inner.len() as u64);\n+        let amt = try!((&mut self.inner[(pos as usize)..]).write(buf));\n+        self.pos += amt as u64;\n+        Ok(amt)\n+    }\n+    fn flush(&mut self) -> io::Result<()> { Ok(()) }\n+}\n \n #[cfg(test)]\n mod tests {\n@@ -292,6 +302,24 @@ mod tests {\n         assert_eq!(&writer.get_ref()[..], b);\n     }\n \n+    #[test]\n+    fn test_box_slice_writer() {\n+        let mut writer = Cursor::new(vec![0u8; 9].into_boxed_slice());\n+        assert_eq!(writer.position(), 0);\n+        assert_eq!(writer.write(&[0]).unwrap(), 1);\n+        assert_eq!(writer.position(), 1);\n+        assert_eq!(writer.write(&[1, 2, 3]).unwrap(), 3);\n+        assert_eq!(writer.write(&[4, 5, 6, 7]).unwrap(), 4);\n+        assert_eq!(writer.position(), 8);\n+        assert_eq!(writer.write(&[]).unwrap(), 0);\n+        assert_eq!(writer.position(), 8);\n+\n+        assert_eq!(writer.write(&[8, 9]).unwrap(), 1);\n+        assert_eq!(writer.write(&[10]).unwrap(), 0);\n+        let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8];\n+        assert_eq!(&**writer.get_ref(), b);\n+    }\n+\n     #[test]\n     fn test_buf_writer() {\n         let mut buf = [0 as u8; 9];\n@@ -373,6 +401,28 @@ mod tests {\n         assert_eq!(reader.read(&mut buf).unwrap(), 0);\n     }\n \n+    #[test]\n+    fn test_boxed_slice_reader() {\n+        let mut reader = Cursor::new(vec!(0, 1, 2, 3, 4, 5, 6, 7).into_boxed_slice());\n+        let mut buf = [];\n+        assert_eq!(reader.read(&mut buf).unwrap(), 0);\n+        assert_eq!(reader.position(), 0);\n+        let mut buf = [0];\n+        assert_eq!(reader.read(&mut buf).unwrap(), 1);\n+        assert_eq!(reader.position(), 1);\n+        let b: &[_] = &[0];\n+        assert_eq!(buf, b);\n+        let mut buf = [0; 4];\n+        assert_eq!(reader.read(&mut buf).unwrap(), 4);\n+        assert_eq!(reader.position(), 5);\n+        let b: &[_] = &[1, 2, 3, 4];\n+        assert_eq!(buf, b);\n+        assert_eq!(reader.read(&mut buf).unwrap(), 3);\n+        let b: &[_] = &[5, 6, 7];\n+        assert_eq!(&buf[..3], b);\n+        assert_eq!(reader.read(&mut buf).unwrap(), 0);\n+    }\n+\n     #[test]\n     fn read_to_end() {\n         let mut reader = Cursor::new(vec!(0, 1, 2, 3, 4, 5, 6, 7));\n@@ -459,6 +509,10 @@ mod tests {\n         let mut r = Cursor::new(&mut buf[..]);\n         assert_eq!(r.seek(SeekFrom::Start(10)).unwrap(), 10);\n         assert_eq!(r.write(&[3]).unwrap(), 0);\n+\n+        let mut r = Cursor::new(vec![10].into_boxed_slice());\n+        assert_eq!(r.seek(SeekFrom::Start(10)).unwrap(), 10);\n+        assert_eq!(r.write(&[3]).unwrap(), 0);\n     }\n \n     #[test]\n@@ -473,6 +527,9 @@ mod tests {\n         let mut buf = [0];\n         let mut r = Cursor::new(&mut buf[..]);\n         assert!(r.seek(SeekFrom::End(-2)).is_err());\n+\n+        let mut r = Cursor::new(vec!(10).into_boxed_slice());\n+        assert!(r.seek(SeekFrom::End(-2)).is_err());\n     }\n \n     #[test]"}]}