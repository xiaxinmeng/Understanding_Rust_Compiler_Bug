{"sha": "461cbe42d03f55ac331ce9ce23108681411b04f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MWNiZTQyZDAzZjU1YWMzMzFjZTljZTIzMTA4NjgxNDExYjA0ZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-02T00:15:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-02T00:15:06Z"}, "message": "Auto merge of #81557 - GuillaumeGomez:primitive-search, r=ollie27\n\nFix primitive search in parameters and returned values\n\nPart of #60485.\nFixes #74780.\n\nReplacing #74879.\n\ncc `@camelid` `@jyn514` `@CraftSpider`\nr? `@ollie27`", "tree": {"sha": "ce6f25c873dc7bf51fcf3ed4fc1b35d34127d9f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce6f25c873dc7bf51fcf3ed4fc1b35d34127d9f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/461cbe42d03f55ac331ce9ce23108681411b04f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/461cbe42d03f55ac331ce9ce23108681411b04f5", "html_url": "https://github.com/rust-lang/rust/commit/461cbe42d03f55ac331ce9ce23108681411b04f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/461cbe42d03f55ac331ce9ce23108681411b04f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4e3570db4c007089035b833cc20c7fc2f8cb32f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4e3570db4c007089035b833cc20c7fc2f8cb32f", "html_url": "https://github.com/rust-lang/rust/commit/d4e3570db4c007089035b833cc20c7fc2f8cb32f"}, {"sha": "c013f2a735989a4407201eaaafcba3844ef1846e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c013f2a735989a4407201eaaafcba3844ef1846e", "html_url": "https://github.com/rust-lang/rust/commit/c013f2a735989a4407201eaaafcba3844ef1846e"}], "stats": {"total": 75, "additions": 61, "deletions": 14}, "files": [{"sha": "e509ec3f0213f8b4ca4fd099a2d80e5f38262145", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/461cbe42d03f55ac331ce9ce23108681411b04f5/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/461cbe42d03f55ac331ce9ce23108681411b04f5/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=461cbe42d03f55ac331ce9ce23108681411b04f5", "patch": "@@ -1301,6 +1301,7 @@ crate enum TypeKind {\n     Attr,\n     Derive,\n     TraitAlias,\n+    Primitive,\n }\n \n crate trait GetDefId {\n@@ -1403,6 +1404,16 @@ impl Type {\n         matches!(self, Type::Generic(_))\n     }\n \n+    crate fn is_primitive(&self) -> bool {\n+        match self {\n+            Self::Primitive(_) => true,\n+            Self::BorrowedRef { ref type_, .. } | Self::RawPointer(_, ref type_) => {\n+                type_.is_primitive()\n+            }\n+            _ => false,\n+        }\n+    }\n+\n     crate fn projection(&self) -> Option<(&Type, DefId, Symbol)> {\n         let (self_, trait_, name) = match self {\n             QPath { self_type, trait_, name } => (self_type, trait_, name),"}, {"sha": "e380d4672d05580765c23ec0592938a93bb15416", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/461cbe42d03f55ac331ce9ce23108681411b04f5/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/461cbe42d03f55ac331ce9ce23108681411b04f5/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=461cbe42d03f55ac331ce9ce23108681411b04f5", "patch": "@@ -171,11 +171,20 @@ crate fn get_real_types(\n     cx: &DocContext<'_>,\n     recurse: i32,\n ) -> FxHashSet<(Type, TypeKind)> {\n+    fn insert(res: &mut FxHashSet<(Type, TypeKind)>, cx: &DocContext<'_>, ty: Type) {\n+        if let Some(kind) = ty.def_id().map(|did| cx.tcx.def_kind(did).clean(cx)) {\n+            res.insert((ty, kind));\n+        } else if ty.is_primitive() {\n+            // This is a primitive, let's store it as such.\n+            res.insert((ty, TypeKind::Primitive));\n+        }\n+    }\n     let mut res = FxHashSet::default();\n     if recurse >= 10 {\n         // FIXME: remove this whole recurse thing when the recursion bug is fixed\n         return res;\n     }\n+\n     if arg.is_full_generic() {\n         let arg_s = Symbol::intern(&arg.print(&cx.cache).to_string());\n         if let Some(where_pred) = generics.where_predicates.iter().find(|g| match g {\n@@ -194,11 +203,7 @@ crate fn get_real_types(\n                             if !adds.is_empty() {\n                                 res.extend(adds);\n                             } else if !ty.is_full_generic() {\n-                                if let Some(kind) =\n-                                    ty.def_id().map(|did| cx.tcx.def_kind(did).clean(cx))\n-                                {\n-                                    res.insert((ty, kind));\n-                                }\n+                                insert(&mut res, cx, ty);\n                             }\n                         }\n                     }\n@@ -212,26 +217,22 @@ crate fn get_real_types(\n                     if !adds.is_empty() {\n                         res.extend(adds);\n                     } else if !ty.is_full_generic() {\n-                        if let Some(kind) = ty.def_id().map(|did| cx.tcx.def_kind(did).clean(cx)) {\n-                            res.insert((ty.clone(), kind));\n-                        }\n+                        insert(&mut res, cx, ty);\n                     }\n                 }\n             }\n         }\n     } else {\n-        if let Some(kind) = arg.def_id().map(|did| cx.tcx.def_kind(did).clean(cx)) {\n-            res.insert((arg.clone(), kind));\n-        }\n+        insert(&mut res, cx, arg.clone());\n         if let Some(gens) = arg.generics() {\n             for gen in gens.iter() {\n                 if gen.is_full_generic() {\n                     let adds = get_real_types(generics, gen, cx, recurse + 1);\n                     if !adds.is_empty() {\n                         res.extend(adds);\n                     }\n-                } else if let Some(kind) = gen.def_id().map(|did| cx.tcx.def_kind(did).clean(cx)) {\n-                    res.insert((gen.clone(), kind));\n+                } else {\n+                    insert(&mut res, cx, gen.clone());\n                 }\n             }\n         }"}, {"sha": "7922a1ffa062e41442e278b81cd4c6d874c22673", "filename": "src/librustdoc/formats/item_type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/461cbe42d03f55ac331ce9ce23108681411b04f5/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/461cbe42d03f55ac331ce9ce23108681411b04f5/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fitem_type.rs?ref=461cbe42d03f55ac331ce9ce23108681411b04f5", "patch": "@@ -119,6 +119,7 @@ impl From<clean::TypeKind> for ItemType {\n             clean::TypeKind::Attr => ItemType::ProcAttribute,\n             clean::TypeKind::Derive => ItemType::ProcDerive,\n             clean::TypeKind::TraitAlias => ItemType::TraitAlias,\n+            clean::TypeKind::Primitive => ItemType::Primitive,\n         }\n     }\n }"}, {"sha": "74a770b9548530d9b4caa460f8da31639aec6b6a", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/461cbe42d03f55ac331ce9ce23108681411b04f5/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/461cbe42d03f55ac331ce9ce23108681411b04f5/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=461cbe42d03f55ac331ce9ce23108681411b04f5", "patch": "@@ -78,7 +78,7 @@ crate fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n                 desc: item.doc_value().map_or_else(String::new, |s| short_markdown_summary(&s)),\n                 parent: Some(did),\n                 parent_idx: None,\n-                search_type: get_index_search_type(&item, None),\n+                search_type: get_index_search_type(&item, Some(cache)),\n             });\n             for alias in item.attrs.get_doc_aliases() {\n                 cache"}, {"sha": "918f7099918de004fb86493d71b4698ee8fbaf31", "filename": "src/test/rustdoc-js/primitive.js", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/461cbe42d03f55ac331ce9ce23108681411b04f5/src%2Ftest%2Frustdoc-js%2Fprimitive.js", "raw_url": "https://github.com/rust-lang/rust/raw/461cbe42d03f55ac331ce9ce23108681411b04f5/src%2Ftest%2Frustdoc-js%2Fprimitive.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fprimitive.js?ref=461cbe42d03f55ac331ce9ce23108681411b04f5", "patch": "@@ -0,0 +1,25 @@\n+// exact-check\n+\n+const QUERY = [\n+    \"i32\",\n+    \"str\",\n+    \"TotoIsSomewhere\",\n+];\n+\n+const EXPECTED = [\n+    {\n+        'in_args': [\n+            { 'path': 'primitive', 'name': 'foo' },\n+        ],\n+    },\n+    {\n+        'returned': [\n+            { 'path': 'primitive', 'name': 'foo' },\n+        ],\n+    },\n+    {\n+        'others': [],\n+        'in_args': [],\n+        'returned': [],\n+    },\n+];"}, {"sha": "2b30ccf15203eb42b720a354ebcc35df6e2e6c88", "filename": "src/test/rustdoc-js/primitive.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/461cbe42d03f55ac331ce9ce23108681411b04f5/src%2Ftest%2Frustdoc-js%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/461cbe42d03f55ac331ce9ce23108681411b04f5/src%2Ftest%2Frustdoc-js%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fprimitive.rs?ref=461cbe42d03f55ac331ce9ce23108681411b04f5", "patch": "@@ -0,0 +1,5 @@\n+pub fn foo(i: i32) -> &'static str {\n+    \"hello\"\n+}\n+\n+pub fn foo2<TotoIsSomewhere>(i: &TotoIsSomewhere, j: TotoIsSomewhere) {}"}, {"sha": "c21277de3351387937bb8775a54ff3efe50228e9", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/461cbe42d03f55ac331ce9ce23108681411b04f5/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/461cbe42d03f55ac331ce9ce23108681411b04f5/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=461cbe42d03f55ac331ce9ce23108681411b04f5", "patch": "@@ -203,6 +203,10 @@ function betterLookingDiff(entry, data) {\n         if (!entry.hasOwnProperty(key)) {\n             continue;\n         }\n+        if (!data || !data.hasOwnProperty(key)) {\n+            output += '-' + spaces + contentToDiffLine(key, entry[key]) + '\\n';\n+            continue;\n+        }\n         let value = data[key];\n         if (value !== entry[key]) {\n             output += '-' + spaces + contentToDiffLine(key, entry[key]) + '\\n';"}]}