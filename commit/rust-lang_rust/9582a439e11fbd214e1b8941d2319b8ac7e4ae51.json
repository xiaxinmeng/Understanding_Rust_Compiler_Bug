{"sha": "9582a439e11fbd214e1b8941d2319b8ac7e4ae51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ODJhNDM5ZTExZmJkMjE0ZTFiODk0MWQyMzE5YjhhYzdlNGFlNTE=", "commit": {"author": {"name": "Jeremy A. Kolb", "email": "jkolb@ara.com", "date": "2019-01-22T21:28:02Z"}, "committer": {"name": "Jeremy A. Kolb", "email": "jkolb@ara.com", "date": "2019-01-22T21:28:02Z"}, "message": "Simplify CallInfo label and documentation", "tree": {"sha": "c85be9bea6e8ca0e89eeea8363875f3e6bdef7d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c85be9bea6e8ca0e89eeea8363875f3e6bdef7d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9582a439e11fbd214e1b8941d2319b8ac7e4ae51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9582a439e11fbd214e1b8941d2319b8ac7e4ae51", "html_url": "https://github.com/rust-lang/rust/commit/9582a439e11fbd214e1b8941d2319b8ac7e4ae51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9582a439e11fbd214e1b8941d2319b8ac7e4ae51/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc6898acd108feabab94ec86b7e1cd33b1133eb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc6898acd108feabab94ec86b7e1cd33b1133eb9", "html_url": "https://github.com/rust-lang/rust/commit/cc6898acd108feabab94ec86b7e1cd33b1133eb9"}], "stats": {"total": 47, "additions": 7, "deletions": 40}, "files": [{"sha": "798fb7c1356dd9d0959408a11ea6c33872017562", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 7, "deletions": 40, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9582a439e11fbd214e1b8941d2319b8ac7e4ae51/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9582a439e11fbd214e1b8941d2319b8ac7e4ae51/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=9582a439e11fbd214e1b8941d2319b8ac7e4ae51", "patch": "@@ -1,5 +1,3 @@\n-use std::cmp::{max, min};\n-\n use ra_db::SyntaxDatabase;\n use ra_syntax::{\n     AstNode, SyntaxNode, TextUnit, TextRange,\n@@ -107,32 +105,23 @@ impl<'a> FnCallNode<'a> {\n \n impl CallInfo {\n     fn new(node: &ast::FnDef) -> Option<Self> {\n-        let mut doc = None;\n-\n-        // Strip the body out for the label.\n-        let mut label: String = if let Some(body) = node.body() {\n+        let label: String = if let Some(body) = node.body() {\n             let body_range = body.syntax().range();\n             let label: String = node\n                 .syntax()\n                 .children()\n-                .filter(|child| !child.range().is_subrange(&body_range))\n+                .filter(|child| !child.range().is_subrange(&body_range)) // Filter out body\n+                .filter(|child| ast::Comment::cast(child).is_none()) // Filter out doc comments\n                 .map(|node| node.text().to_string())\n                 .collect();\n             label\n         } else {\n             node.syntax().text().to_string()\n         };\n \n-        if let Some((comment_range, docs)) = extract_doc_comments(node) {\n-            let comment_range = comment_range\n-                .checked_sub(node.syntax().range().start())\n-                .unwrap();\n-            let start = comment_range.start().to_usize();\n-            let end = comment_range.end().to_usize();\n-\n-            // Remove the comment from the label\n-            label.replace_range(start..end, \"\");\n-\n+        let mut doc = None;\n+        let docs = node.doc_comment_text();\n+        if !docs.is_empty() {\n             // Massage markdown\n             let mut processed_lines = Vec::new();\n             let mut in_code_block = false;\n@@ -150,9 +139,7 @@ impl CallInfo {\n                 processed_lines.push(line);\n             }\n \n-            if !processed_lines.is_empty() {\n-                doc = Some(processed_lines.join(\"\\n\"));\n-            }\n+            doc = Some(processed_lines.join(\"\\n\"));\n         }\n \n         Some(CallInfo {\n@@ -164,26 +151,6 @@ impl CallInfo {\n     }\n }\n \n-fn extract_doc_comments(node: &ast::FnDef) -> Option<(TextRange, String)> {\n-    if node.doc_comments().count() == 0 {\n-        return None;\n-    }\n-\n-    let comment_text = node.doc_comment_text();\n-\n-    let (begin, end) = node\n-        .doc_comments()\n-        .map(|comment| comment.syntax().range())\n-        .map(|range| (range.start().to_usize(), range.end().to_usize()))\n-        .fold((std::usize::MAX, std::usize::MIN), |acc, range| {\n-            (min(acc.0, range.0), max(acc.1, range.1))\n-        });\n-\n-    let range = TextRange::from_to(TextUnit::from_usize(begin), TextUnit::from_usize(end));\n-\n-    Some((range, comment_text))\n-}\n-\n fn param_list(node: &ast::FnDef) -> Vec<String> {\n     let mut res = vec![];\n     if let Some(param_list) = node.param_list() {"}]}