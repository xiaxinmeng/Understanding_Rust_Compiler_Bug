{"sha": "2703e74440138de340ba1a09ab80f442cedaf647", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MDNlNzQ0NDAxMzhkZTM0MGJhMWEwOWFiODBmNDQyY2VkYWY2NDc=", "commit": {"author": {"name": "letheed", "email": "letheed@outlook.com", "date": "2017-12-11T15:16:44Z"}, "committer": {"name": "letheed", "email": "letheed@outlook.com", "date": "2017-12-11T15:22:02Z"}, "message": "Disable cast_lossless on const items", "tree": {"sha": "2125b2da81120c373bc61617a6a8464517cfdb0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2125b2da81120c373bc61617a6a8464517cfdb0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2703e74440138de340ba1a09ab80f442cedaf647", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2703e74440138de340ba1a09ab80f442cedaf647", "html_url": "https://github.com/rust-lang/rust/commit/2703e74440138de340ba1a09ab80f442cedaf647", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2703e74440138de340ba1a09ab80f442cedaf647/comments", "author": {"login": "letheed", "id": 5330692, "node_id": "MDQ6VXNlcjUzMzA2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5330692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/letheed", "html_url": "https://github.com/letheed", "followers_url": "https://api.github.com/users/letheed/followers", "following_url": "https://api.github.com/users/letheed/following{/other_user}", "gists_url": "https://api.github.com/users/letheed/gists{/gist_id}", "starred_url": "https://api.github.com/users/letheed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/letheed/subscriptions", "organizations_url": "https://api.github.com/users/letheed/orgs", "repos_url": "https://api.github.com/users/letheed/repos", "events_url": "https://api.github.com/users/letheed/events{/privacy}", "received_events_url": "https://api.github.com/users/letheed/received_events", "type": "User", "site_admin": false}, "committer": {"login": "letheed", "id": 5330692, "node_id": "MDQ6VXNlcjUzMzA2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5330692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/letheed", "html_url": "https://github.com/letheed", "followers_url": "https://api.github.com/users/letheed/followers", "following_url": "https://api.github.com/users/letheed/following{/other_user}", "gists_url": "https://api.github.com/users/letheed/gists{/gist_id}", "starred_url": "https://api.github.com/users/letheed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/letheed/subscriptions", "organizations_url": "https://api.github.com/users/letheed/orgs", "repos_url": "https://api.github.com/users/letheed/repos", "events_url": "https://api.github.com/users/letheed/events{/privacy}", "received_events_url": "https://api.github.com/users/letheed/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5f0273f53f06f19da441e3cedc2ba69300cf568", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f0273f53f06f19da441e3cedc2ba69300cf568", "html_url": "https://github.com/rust-lang/rust/commit/f5f0273f53f06f19da441e3cedc2ba69300cf568"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "903c1cd4c9bcc5fd528c54ae4a06106bc776bdab", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2703e74440138de340ba1a09ab80f442cedaf647/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2703e74440138de340ba1a09ab80f442cedaf647/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=2703e74440138de340ba1a09ab80f442cedaf647", "patch": "@@ -13,7 +13,7 @@ use syntax::ast::{FloatTy, IntTy, UintTy};\n use syntax::attr::IntType;\n use syntax::codemap::Span;\n use syntax::errors::DiagnosticBuilder;\n-use utils::{comparisons, higher, in_external_macro, in_macro, last_path_segment, match_def_path, match_path,\n+use utils::{comparisons, higher, in_constant, in_external_macro, in_macro, last_path_segment, match_def_path, match_path,\n             multispan_sugg, opt_def_id, same_tys, snippet, snippet_opt, span_help_and_lint, span_lint,\n             span_lint_and_sugg, span_lint_and_then, type_size};\n use utils::paths;\n@@ -608,6 +608,8 @@ fn should_strip_parens(op: &Expr, snip: &str) -> bool {\n }\n \n fn span_lossless_lint(cx: &LateContext, expr: &Expr, op: &Expr, cast_from: Ty, cast_to: Ty) {\n+    // Do not suggest using From in consts/statics until it is valid to do so (see #2267).\n+    if in_constant(cx, expr.id) { return }\n     // The suggestion is to use a function call, so if the original expression\n     // has parens on the outside, they are no longer needed.\n     let opt = snippet_opt(cx, op.span);"}]}