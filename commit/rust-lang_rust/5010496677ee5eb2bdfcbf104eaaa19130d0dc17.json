{"sha": "5010496677ee5eb2bdfcbf104eaaa19130d0dc17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMTA0OTY2NzdlZTVlYjJiZGZjYmYxMDRlYWFhMTkxMzBkMGRjMTc=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2017-11-26T20:28:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-13T11:03:26Z"}, "message": "Check Aggregate predicates", "tree": {"sha": "f1b050c38eeffc0e85f6b88b46bbf93a55582ed4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1b050c38eeffc0e85f6b88b46bbf93a55582ed4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5010496677ee5eb2bdfcbf104eaaa19130d0dc17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5010496677ee5eb2bdfcbf104eaaa19130d0dc17", "html_url": "https://github.com/rust-lang/rust/commit/5010496677ee5eb2bdfcbf104eaaa19130d0dc17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5010496677ee5eb2bdfcbf104eaaa19130d0dc17/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9159262d161cd64d828f7821dca5e07926e34f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9159262d161cd64d828f7821dca5e07926e34f2", "html_url": "https://github.com/rust-lang/rust/commit/c9159262d161cd64d828f7821dca5e07926e34f2"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "19c22d7017dc00be18ecb36f99b7d51f3a74555a", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5010496677ee5eb2bdfcbf104eaaa19130d0dc17/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5010496677ee5eb2bdfcbf104eaaa19130d0dc17/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=5010496677ee5eb2bdfcbf104eaaa19130d0dc17", "patch": "@@ -1168,6 +1168,8 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     ) {\n         let tcx = self.tcx();\n \n+        self.prove_aggregate_predicates(aggregate_kind, location);\n+\n         match aggregate_kind {\n             // tuple rvalue field type is always the type of the op. Nothing to check here.\n             AggregateKind::Tuple => return,\n@@ -1235,6 +1237,31 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn prove_aggregate_predicates(\n+        &mut self,\n+        aggregate_kind: &AggregateKind<'tcx>,\n+        location: Location,\n+    ) {\n+        let tcx = self.tcx();\n+\n+        let instantiated_predicates = match aggregate_kind {\n+            AggregateKind::Adt(def, _, substs, _) => {\n+                tcx.predicates_of(def.did).instantiate(tcx, substs)\n+            }\n+\n+            AggregateKind::Closure(def_id, substs) |\n+            AggregateKind::Generator(def_id, substs, _) => {\n+                tcx.predicates_of(*def_id).instantiate(tcx, substs.substs)\n+            }\n+\n+            AggregateKind::Array(_) |\n+            AggregateKind::Tuple => ty::InstantiatedPredicates::empty(),\n+        };\n+\n+        let predicates = self.normalize(&instantiated_predicates.predicates, location);\n+        self.prove_predicates(&predicates, location);\n+    }\n+\n     fn prove_trait_ref(&mut self, trait_ref: ty::TraitRef<'tcx>, location: Location) {\n         self.prove_predicates(\n             &["}, {"sha": "0c4fd5dead3f9dc2a5de8ffa23fbddc30c27f2dd", "filename": "src/test/compile-fail/nll/where_clauses_in_structs.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5010496677ee5eb2bdfcbf104eaaa19130d0dc17/src%2Ftest%2Fcompile-fail%2Fnll%2Fwhere_clauses_in_structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5010496677ee5eb2bdfcbf104eaaa19130d0dc17/src%2Ftest%2Fcompile-fail%2Fnll%2Fwhere_clauses_in_structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Fwhere_clauses_in_structs.rs?ref=5010496677ee5eb2bdfcbf104eaaa19130d0dc17", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z borrowck=mir -Z nll\n+\n+#![allow(dead_code)]\n+\n+use std::cell::Cell;\n+\n+struct Foo<'a: 'b, 'b> {\n+    x: Cell<&'a u32>,\n+    y: Cell<&'b u32>,\n+}\n+\n+fn bar<'a, 'b>(x: Cell<&'a u32>, y: Cell<&'b u32>) {\n+    Foo { x, y };\n+    //~^ ERROR free region `'_#1r` does not outlive free region `'_#2r`\n+    //~| WARNING not reporting region error due to -Znll\n+}\n+\n+fn main() {}"}]}