{"sha": "f1b86baf8453733c72e196ce2c08b4d85e94d81a", "node_id": "C_kwDOAAsO6NoAKGYxYjg2YmFmODQ1MzczM2M3MmUxOTZjZTJjMDhiNGQ4NWU5NGQ4MWE", "commit": {"author": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2023-04-22T23:22:39Z"}, "committer": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2023-04-22T23:29:23Z"}, "message": "Use pointer reads for better codegen in debug mode", "tree": {"sha": "2fa33b9ae0b4655b6213ab75c69838fa8b43d98c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fa33b9ae0b4655b6213ab75c69838fa8b43d98c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1b86baf8453733c72e196ce2c08b4d85e94d81a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1b86baf8453733c72e196ce2c08b4d85e94d81a", "html_url": "https://github.com/rust-lang/rust/commit/f1b86baf8453733c72e196ce2c08b4d85e94d81a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1b86baf8453733c72e196ce2c08b4d85e94d81a/comments", "author": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52833ccbe88ed98b73d0ccd7299f2a667439bb4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/52833ccbe88ed98b73d0ccd7299f2a667439bb4b", "html_url": "https://github.com/rust-lang/rust/commit/52833ccbe88ed98b73d0ccd7299f2a667439bb4b"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "e054d483ca5d22768a7e8ad06a0f7dc8c6766353", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1b86baf8453733c72e196ce2c08b4d85e94d81a/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b86baf8453733c72e196ce2c08b4d85e94d81a/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=f1b86baf8453733c72e196ce2c08b4d85e94d81a", "patch": "@@ -2,7 +2,6 @@\n #![feature(\n     const_ptr_read,\n     const_refs_to_cell,\n-    const_transmute_copy,\n     convert_float_to_int,\n     decl_macro,\n     intra_doc_pointers,"}, {"sha": "a38d701588ce05693a28ac4954b238cdf758743c", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1b86baf8453733c72e196ce2c08b4d85e94d81a/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b86baf8453733c72e196ce2c08b4d85e94d81a/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=f1b86baf8453733c72e196ce2c08b4d85e94d81a", "patch": "@@ -163,21 +163,31 @@ where\n     /// Converts an array to a SIMD vector.\n     pub const fn from_array(array: [T; LANES]) -> Self {\n         // SAFETY: Transmuting between `Simd<T, LANES>` and `[T; LANES]`\n-        // is always valid.\n+        // is always valid. We need to use `read_unaligned` here, since\n+        // the array may have a lower alignment than the vector.\n+        //\n+        // FIXME: We currently use a pointer read instead of `transmute_copy` because\n+        // it results in better codegen with optimizations disabled, but we should\n+        // probably just use `transmute` once that works on const generic types.\n         //\n         // NOTE: This deliberately doesn't just use `Self(array)`, see the comment\n         // on the struct definition for details.\n-        unsafe { core::mem::transmute_copy(&array) }\n+        unsafe { (&array as *const [T; LANES] as *const Self).read_unaligned() }\n     }\n \n     /// Converts a SIMD vector to an array.\n     pub const fn to_array(self) -> [T; LANES] {\n         // SAFETY: Transmuting between `Simd<T, LANES>` and `[T; LANES]`\n-        // is always valid.\n+        // is always valid. No need to use `read_unaligned` here, since\n+        // the vector never has a lower alignment than the array.\n+        //\n+        // FIXME: We currently use a pointer read instead of `transmute_copy` because\n+        // it results in better codegen with optimizations disabled, but we should\n+        // probably just use `transmute` once that works on const generic types.\n         //\n         // NOTE: This deliberately doesn't just use `self.0`, see the comment\n         // on the struct definition for details.\n-        unsafe { core::mem::transmute_copy(&self) }\n+        unsafe { (&self as *const Self as *const [T; LANES]).read() }\n     }\n \n     /// Converts a slice to a SIMD vector containing `slice[..LANES]`."}]}