{"sha": "d9e3d2a5314258e2b8adc86c1ded34c4995fcd67", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZTNkMmE1MzE0MjU4ZTJiOGFkYzg2YzFkZWQzNGM0OTk1ZmNkNjc=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-03T20:31:39Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-04T19:04:03Z"}, "message": "Make euclidean division `const`\n\nCo-Authored-By: 9999years <rbt@sent.as>", "tree": {"sha": "c5f2875481097e23402b482c22105e0fa1e4ff1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5f2875481097e23402b482c22105e0fa1e4ff1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9e3d2a5314258e2b8adc86c1ded34c4995fcd67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e3d2a5314258e2b8adc86c1ded34c4995fcd67", "html_url": "https://github.com/rust-lang/rust/commit/d9e3d2a5314258e2b8adc86c1ded34c4995fcd67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9e3d2a5314258e2b8adc86c1ded34c4995fcd67/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "126ad2b813010447807b0593a80bc6c04962e7ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/126ad2b813010447807b0593a80bc6c04962e7ea", "html_url": "https://github.com/rust-lang/rust/commit/126ad2b813010447807b0593a80bc6c04962e7ea"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "4fc7caa62b5cd0871e9f09837f58428f08930db1", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9e3d2a5314258e2b8adc86c1ded34c4995fcd67/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e3d2a5314258e2b8adc86c1ded34c4995fcd67/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=d9e3d2a5314258e2b8adc86c1ded34c4995fcd67", "patch": "@@ -72,6 +72,7 @@\n #![feature(concat_idents)]\n #![feature(const_alloc_layout)]\n #![feature(const_if_match)]\n+#![feature(const_int_euclidean)]\n #![feature(const_panic)]\n #![feature(const_fn_union)]\n #![feature(const_generics)]"}, {"sha": "ede568da3e5bdbed2cbac47483cc6a7559bc21a4", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d9e3d2a5314258e2b8adc86c1ded34c4995fcd67/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e3d2a5314258e2b8adc86c1ded34c4995fcd67/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=d9e3d2a5314258e2b8adc86c1ded34c4995fcd67", "patch": "@@ -802,10 +802,11 @@ assert_eq!(\", stringify!($SelfT), \"::min_value().checked_div_euclid(-1), None);\n assert_eq!((1\", stringify!($SelfT), \").checked_div_euclid(0), None);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_div_euclid(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_div_euclid(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 || (self == Self::min_value() && rhs == -1) {\n                     None\n                 } else {\n@@ -860,10 +861,11 @@ assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(0), None);\n assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem_euclid(-1), None);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_rem_euclid(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_rem_euclid(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 || (self == Self::min_value() && rhs == -1) {\n                     None\n                 } else {\n@@ -1298,10 +1300,11 @@ assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euclid(10), 10);\n assert_eq!((-128i8).wrapping_div_euclid(-1), -128);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn wrapping_div_euclid(self, rhs: Self) -> Self {\n+            pub const fn wrapping_div_euclid(self, rhs: Self) -> Self {\n                 self.overflowing_div_euclid(rhs).0\n             }\n         }\n@@ -1356,10 +1359,11 @@ assert_eq!(100\", stringify!($SelfT), \".wrapping_rem_euclid(10), 0);\n assert_eq!((-128i8).wrapping_rem_euclid(-1), 0);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn wrapping_rem_euclid(self, rhs: Self) -> Self {\n+            pub const fn wrapping_rem_euclid(self, rhs: Self) -> Self {\n                 self.overflowing_rem_euclid(rhs).0\n             }\n         }\n@@ -1669,9 +1673,10 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_div_euclid(-1), (\", stringi\n ```\"),\n             #[inline]\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            pub fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n+            pub const fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n                 if self == Self::min_value() && rhs == -1 {\n                     (self, true)\n                 } else {\n@@ -1736,10 +1741,11 @@ assert_eq!(5\", stringify!($SelfT), \".overflowing_rem_euclid(2), (1, false));\n assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_rem_euclid(-1), (0, true));\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n+            pub const fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n                 if self == Self::min_value() && rhs == -1 {\n                     (0, true)\n                 } else {\n@@ -1981,11 +1987,12 @@ assert_eq!((-a).div_euclid(b), -2); // -7 >= 4 * -2\n assert_eq!((-a).div_euclid(-b), 2); // -7 >= -4 * 2\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n-            pub fn div_euclid(self, rhs: Self) -> Self {\n+            pub const fn div_euclid(self, rhs: Self) -> Self {\n                 let q = self / rhs;\n                 if self % rhs < 0 {\n                     return if rhs > 0 { q - 1 } else { q + 1 }\n@@ -2020,11 +2027,12 @@ assert_eq!(a.rem_euclid(-b), 3);\n assert_eq!((-a).rem_euclid(-b), 1);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n-            pub fn rem_euclid(self, rhs: Self) -> Self {\n+            pub const fn rem_euclid(self, rhs: Self) -> Self {\n                 let r = self % rhs;\n                 if r < 0 {\n                     if rhs < 0 {\n@@ -2939,10 +2947,11 @@ assert_eq!(128\", stringify!($SelfT), \".checked_div_euclid(2), Some(64));\n assert_eq!(1\", stringify!($SelfT), \".checked_div_euclid(0), None);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_div_euclid(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_div_euclid(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 {\n                     None\n                 } else {\n@@ -2992,10 +3001,11 @@ assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(2), Some(1));\n assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(0), None);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_rem_euclid(self, rhs: Self) -> Option<Self> {\n+            pub const fn checked_rem_euclid(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 {\n                     None\n                 } else {\n@@ -3315,10 +3325,11 @@ Basic usage:\n assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euclid(10), 10);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn wrapping_div_euclid(self, rhs: Self) -> Self {\n+            pub const fn wrapping_div_euclid(self, rhs: Self) -> Self {\n                 self / rhs\n             }\n         }\n@@ -3366,10 +3377,11 @@ Basic usage:\n assert_eq!(100\", stringify!($SelfT), \".wrapping_rem_euclid(10), 0);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn wrapping_rem_euclid(self, rhs: Self) -> Self {\n+            pub const fn wrapping_rem_euclid(self, rhs: Self) -> Self {\n                 self % rhs\n             }\n         }\n@@ -3645,9 +3657,10 @@ assert_eq!(5\", stringify!($SelfT), \".overflowing_div_euclid(2), (2, false));\n ```\"),\n             #[inline]\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            pub fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n+            pub const fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n                 (self / rhs, false)\n             }\n         }\n@@ -3704,9 +3717,10 @@ assert_eq!(5\", stringify!($SelfT), \".overflowing_rem_euclid(2), (1, false));\n ```\"),\n             #[inline]\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            pub fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n+            pub const fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n                 (self % rhs, false)\n             }\n         }\n@@ -3897,11 +3911,12 @@ Basic usage:\n assert_eq!(7\", stringify!($SelfT), \".div_euclid(4), 1); // or any other integer type\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n-            pub fn div_euclid(self, rhs: Self) -> Self {\n+            pub const fn div_euclid(self, rhs: Self) -> Self {\n                 self / rhs\n             }\n         }\n@@ -3926,11 +3941,12 @@ Basic usage:\n assert_eq!(7\", stringify!($SelfT), \".rem_euclid(4), 3); // or any other integer type\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_euclidean\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n-            pub fn rem_euclid(self, rhs: Self) -> Self {\n+            pub const fn rem_euclid(self, rhs: Self) -> Self {\n                 self % rhs\n             }\n         }"}]}