{"sha": "1f90b04cd6cd492260a5e4230da6128037b5461b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOTBiMDRjZDZjZDQ5MjI2MGE1ZTQyMzBkYTYxMjgwMzdiNTQ2MWI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-21T12:35:48Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-21T12:35:48Z"}, "message": "Fix float -> u/i128 cast\n\nThe original test casts were optimized away by rustc,\nso cg_clif never saw them.\n\ncc #668", "tree": {"sha": "fc9d6ba5d80646a1a17edc98953c81c156e02d30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc9d6ba5d80646a1a17edc98953c81c156e02d30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f90b04cd6cd492260a5e4230da6128037b5461b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f90b04cd6cd492260a5e4230da6128037b5461b", "html_url": "https://github.com/rust-lang/rust/commit/1f90b04cd6cd492260a5e4230da6128037b5461b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f90b04cd6cd492260a5e4230da6128037b5461b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2d6705fe2e7eb51e3d3cf7421da8513ad1e948e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d6705fe2e7eb51e3d3cf7421da8513ad1e948e", "html_url": "https://github.com/rust-lang/rust/commit/b2d6705fe2e7eb51e3d3cf7421da8513ad1e948e"}], "stats": {"total": 90, "additions": 62, "deletions": 28}, "files": [{"sha": "71b2a34b61d56051366c5f3e2c0c93fa7955efc6", "filename": "example/std_example.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1f90b04cd6cd492260a5e4230da6128037b5461b/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f90b04cd6cd492260a5e4230da6128037b5461b/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=1f90b04cd6cd492260a5e4230da6128037b5461b", "patch": "@@ -56,15 +56,18 @@ fn main() {\n     assert_eq!(353985398u128 * 932490u128, 330087843781020u128);\n \n     // Check that all u/i128 <-> float casts work correctly.\n-    assert_eq!(100u128 as f32, 100.0);\n-    assert_eq!(100u128 as f64, 100.0);\n-    assert_eq!(100.0f32 as u128, 100);\n-    assert_eq!(100.0f64 as u128, 100);\n-    assert_eq!(100i128 as f32, 100.0);\n-    assert_eq!(100i128 as f64, 100.0);\n-    assert_eq!(100.0f32 as i128, 100);\n-    assert_eq!(100.0f64 as i128, 100);\n-\n+    let houndred_u128 = 100u128;\n+    let houndred_i128 = 100i128;\n+    let houndred_f32 = 100.0f32;\n+    let houndred_f64 = 100.0f64;\n+    assert_eq!(houndred_u128 as f32, 100.0);\n+    assert_eq!(houndred_u128 as f64, 100.0);\n+    assert_eq!(houndred_f32 as u128, 100);\n+    assert_eq!(houndred_f64 as u128, 100);\n+    assert_eq!(houndred_i128 as f32, 100.0);\n+    assert_eq!(houndred_i128 as f64, 100.0);\n+    assert_eq!(houndred_f32 as i128, 100);\n+    assert_eq!(houndred_f64 as i128, 100);\n \n     let _a = 1u32 << 2u8;\n "}, {"sha": "1285bf8c00cab0ee518a0a86846e8d41db3e94da", "filename": "src/cast.rs", "status": "modified", "additions": 50, "deletions": 19, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/1f90b04cd6cd492260a5e4230da6128037b5461b/src%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f90b04cd6cd492260a5e4230da6128037b5461b/src%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcast.rs?ref=1f90b04cd6cd492260a5e4230da6128037b5461b", "patch": "@@ -55,17 +55,6 @@ pub fn clif_int_or_float_cast(\n ) -> Value {\n     let from_ty = fx.bcx.func.dfg.value_type(from);\n \n-    macro call_float_cvt_intrinsic($fmt:literal, $sign_name:literal, $from_ty:expr, $to_ty:expr) {\n-        let intrinsic_sign_name = if from_signed { \"\" } else { $sign_name };\n-        let intrinsic_float_name = match to_ty {\n-            types::F32 => \"s\",\n-            types::F64 => \"d\",\n-            _ => unreachable!(\"{:?}\", to_ty),\n-        };\n-        let intrinsic_name = format!($fmt, sign=intrinsic_sign_name, flt=intrinsic_float_name);\n-        return fx.easy_call(&intrinsic_name, &[CValue::by_val(from, fx.layout_of($from_ty))], $to_ty).load_scalar(fx);\n-    }\n-\n     if from_ty.is_int() && to_ty.is_int() {\n         // int-like -> int-like\n         clif_intcast(\n@@ -81,16 +70,37 @@ pub fn clif_int_or_float_cast(\n             // __float  tidf: i128 -> f64\n             // __floatuntisf: u128 -> f32\n             // __floatuntidf: u128 -> f64\n-            call_float_cvt_intrinsic!(\"__float{sign}ti{flt}f\", \"un\", if from_signed {\n+\n+            let name = format!(\"__float{sign}ti{flt}f\",\n+                sign=if from_signed {\n+                    \"\"\n+                } else {\n+                    \"un\"\n+                },\n+                flt=match to_ty {\n+                    types::F32 => \"s\",\n+                    types::F64 => \"d\",\n+                    _ => unreachable!(\"{:?}\", to_ty),\n+                },\n+            );\n+\n+            let from_rust_ty = if from_signed {\n                 fx.tcx.types.i128\n             } else {\n                 fx.tcx.types.u128\n-            },\n-            match to_ty {\n+            };\n+\n+            let to_rust_ty = match to_ty {\n                 types::F32 => fx.tcx.types.f32,\n                 types::F64 => fx.tcx.types.f64,\n                 _ => unreachable!(),\n-            });\n+            };\n+\n+            return fx.easy_call(\n+                &name,\n+                &[CValue::by_val(from, fx.layout_of(from_rust_ty))],\n+                to_rust_ty,\n+            ).load_scalar(fx);\n         }\n \n         // int-like -> float\n@@ -106,16 +116,37 @@ pub fn clif_int_or_float_cast(\n             // __fix   dfti: f64 -> i128\n             // __fixunssfti: f32 -> u128\n             // __fixunsdfti: f64 -> u128\n-            call_float_cvt_intrinsic!(\"__fix{sign}{flt}fti\", \"uns\", match from_ty {\n+\n+            let name = format!(\"__fix{sign}{flt}fti\",\n+                sign=if to_signed {\n+                    \"\"\n+                } else {\n+                    \"uns\"\n+                },\n+                flt=match from_ty {\n+                    types::F32 => \"s\",\n+                    types::F64 => \"d\",\n+                    _ => unreachable!(\"{:?}\", to_ty),\n+                },\n+            );\n+\n+            let from_rust_ty = match from_ty {\n                 types::F32 => fx.tcx.types.f32,\n                 types::F64 => fx.tcx.types.f64,\n                 _ => unreachable!(),\n-            },\n-            if to_signed {\n+            };\n+\n+            let to_rust_ty = if to_signed {\n                 fx.tcx.types.i128\n             } else {\n                 fx.tcx.types.u128\n-            });\n+            };\n+\n+            return fx.easy_call(\n+                &name,\n+                &[CValue::by_val(from, fx.layout_of(from_rust_ty))],\n+                to_rust_ty,\n+            ).load_scalar(fx);\n         }\n \n         // float -> int-like"}]}