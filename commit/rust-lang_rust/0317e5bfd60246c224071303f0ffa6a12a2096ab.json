{"sha": "0317e5bfd60246c224071303f0ffa6a12a2096ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMTdlNWJmZDYwMjQ2YzIyNDA3MTMwM2YwZmZhNmExMmEyMDk2YWI=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-30T15:04:57Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-30T15:04:57Z"}, "message": "Address more review comments", "tree": {"sha": "009161edd8201a193910daca622b1006b4e794ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/009161edd8201a193910daca622b1006b4e794ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0317e5bfd60246c224071303f0ffa6a12a2096ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmCzqZkACgkQtAh+UQ6Y\nsWRr8xAAmcLpKlUEnu8LZp3GE4D3GZZwEC+860c5Q6/hM+wn4tJ0wXGUJD4pNbId\nFgg6DIukKZ78G5oDos/WeXdOyBsKi3SyU3xYSNSO/Ete/ZD/hXpabaJwAX8XUYwQ\nnN4LWIgKjqOxPirXVEYTeJFQGkGZRYGNoy2wBvfik7Qa1j7bwwwErZ1W6UA3K065\ndEgtFNX7ZhqdyYc4qcRWbK8Rtawsk+HvF18E/3ALGolmD8Pla1L2dG/xeaPJLQ0U\nfiJZBftACm6HdI64vmreX6cxZF/7jvB87ZpVZgB02hJlzLrsexKb4wKXFtevYswn\nZk4plI8ZmslqsMNDp5pLader9/uXHfX+P5opqASc8k7inVf1BjLxg8pjb9Ut5AcD\nbp5f8lrBekS9qYP5QyngTQpG4+h+Hz+uydxM71Zd3WKkEhdFkuPCY1fuS0SlWc5s\nGbEbW8ZACKlQVPGsFp0kdfE4tAqNTTko0XmSOcDsbvavZ3oz8JeF+b6aOUTwJxCb\nIS+b99Kyc15JeilAwbcdXhe67a/3s2J1o9zNoWEPqhENMaGm+K5Nd+IGX5jFerCM\nq+1DNXOzW6NqqzAoIB/0FR6pS3MlDAwnj/tV7cheQNc7jY31ThYDrK+sLuM+bByc\n5VY1+V4X0Ao1QUdnMsiK+8NaBlmVwqiJU1N1sCk8VeQ8Bsyiscc=\n=UWXt\n-----END PGP SIGNATURE-----", "payload": "tree 009161edd8201a193910daca622b1006b4e794ce\nparent 20f1b2a969f6d61f5f8bf4d7877d30c66e22e70f\nauthor Aaron Hill <aa1ronham@gmail.com> 1622387097 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1622387097 -0500\n\nAddress more review comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0317e5bfd60246c224071303f0ffa6a12a2096ab", "html_url": "https://github.com/rust-lang/rust/commit/0317e5bfd60246c224071303f0ffa6a12a2096ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0317e5bfd60246c224071303f0ffa6a12a2096ab/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20f1b2a969f6d61f5f8bf4d7877d30c66e22e70f", "url": "https://api.github.com/repos/rust-lang/rust/commits/20f1b2a969f6d61f5f8bf4d7877d30c66e22e70f", "html_url": "https://github.com/rust-lang/rust/commit/20f1b2a969f6d61f5f8bf4d7877d30c66e22e70f"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "ed633b5e17f4b024110c754924a662be68d72d49", "filename": "src/machine.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0317e5bfd60246c224071303f0ffa6a12a2096ab/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0317e5bfd60246c224071303f0ffa6a12a2096ab/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=0317e5bfd60246c224071303f0ffa6a12a2096ab", "patch": "@@ -8,7 +8,6 @@ use std::num::NonZeroU64;\n use std::time::Instant;\n \n use log::trace;\n-use measureme::{DetachedTiming, EventId, Profiler, StringId};\n use rand::rngs::StdRng;\n use rand::SeedableRng;\n \n@@ -47,7 +46,16 @@ pub struct FrameData<'tcx> {\n     /// If `measureme` profiling is enabled, holds timing information\n     /// for the start of this frame. When we finish executing this frame,\n     /// we use this to register a completed event with `measureme`.\n-    pub timing: Option<DetachedTiming>,\n+    pub timing: Option<measureme::DetachedTiming>,\n+}\n+\n+impl<'tcx> std::fmt::Debug for FrameData<'tcx> {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        f.debug_struct(\"FrameData\")\n+            .field(\"call_id\", &self.call_id)\n+            .field(\"catch_unwind\", &self.catch_unwind)\n+            .finish()\n+    }\n }\n \n /// Extra memory kinds\n@@ -278,20 +286,19 @@ pub struct Evaluator<'mir, 'tcx> {\n \n     /// The `measureme` profiler used to record timing information about\n     /// the emulated program.\n-    profiler: Option<Profiler>,\n+    profiler: Option<measureme::Profiler>,\n     /// Used with `profiler` to cache the `StringId`s for event names\n     /// uesd with `measureme`.\n-    string_cache: FxHashMap<String, StringId>,\n+    string_cache: FxHashMap<String, measureme::StringId>,\n }\n \n impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n     pub(crate) fn new(config: &MiriConfig, layout_cx: LayoutCx<'tcx, TyCtxt<'tcx>>) -> Self {\n         let layouts =\n             PrimitiveLayouts::new(layout_cx).expect(\"Couldn't get layouts of primitive types\");\n-        let profiler = config\n-            .measureme_out\n-            .as_ref()\n-            .map(|out| Profiler::new(out).expect(\"Couldn't create `measureme` profiler\"));\n+        let profiler = config.measureme_out.as_ref().map(|out| {\n+            measureme::Profiler::new(out).expect(\"Couldn't create `measureme` profiler\")\n+        });\n         Evaluator {\n             // `env_vars` could be initialized properly here if `Memory` were available before\n             // calling this method.\n@@ -619,7 +626,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n \n             Some(profiler.start_recording_interval_event_detached(\n                 *name,\n-                EventId::from_label(*name),\n+                measureme::EventId::from_label(*name),\n                 ecx.get_active_thread().to_u32(),\n             ))\n         } else {"}, {"sha": "b1da7f340fce3daea8dbd418eb588ac0a1126e66", "filename": "src/shims/panic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0317e5bfd60246c224071303f0ffa6a12a2096ab/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0317e5bfd60246c224071303f0ffa6a12a2096ab/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=0317e5bfd60246c224071303f0ffa6a12a2096ab", "patch": "@@ -119,6 +119,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, StackPopJump> {\n         let this = self.eval_context_mut();\n \n+        trace!(\"handle_stack_pop(extra = {:?}, unwinding = {})\", extra, unwinding);\n         if let Some(stacked_borrows) = &this.memory.extra.stacked_borrows {\n             stacked_borrows.borrow_mut().end_call(extra.call_id);\n         }"}]}