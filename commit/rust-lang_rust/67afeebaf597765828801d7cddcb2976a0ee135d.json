{"sha": "67afeebaf597765828801d7cddcb2976a0ee135d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YWZlZWJhZjU5Nzc2NTgyODgwMWQ3Y2RkY2IyOTc2YTBlZTEzNWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-25T16:19:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-25T16:19:21Z"}, "message": "Merge #4137\n\n4137: Prefer core/alloc paths on #![no_std] r=matklad a=jonas-schievink\n\n\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "02b8ad1160ca41bb2a70b142d4fbfcab2e7e7281", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02b8ad1160ca41bb2a70b142d4fbfcab2e7e7281"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67afeebaf597765828801d7cddcb2976a0ee135d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepGMJCRBK7hj4Ov3rIwAAdHIIAHh6Gtbu3TfYktTuZ7aEO92W\nl6TYaOFr/sr0N9bQQJM89esTg668JQXQZ+gMXwKfLKecEgbXsv2wJFSx2WLNZnpL\nC5VKMODVVyo2Z8sZDiUemB2DYPSFQbofArK0LSgtBuScLAL1nWgeFu9wmAnkENG7\nBR+z6mc8aEQt4YkWXm+r5v4M8LaKWorZyzXR3W9q8rJPmqoyUiqpZCJ7Mz5dB7Tj\n/6r6AQjnB0ytpqQ+ZMswrGSd02cRiq3gkh4oX2EnLA5a03w/qAMDdcwSienG4im9\n8avqe11/HYfslAULMecBCKOW6EVlQwo8VHbWic37ofbd/zc21/J9B6bAos45Lr4=\n=9hx/\n-----END PGP SIGNATURE-----\n", "payload": "tree 02b8ad1160ca41bb2a70b142d4fbfcab2e7e7281\nparent fc57358efda7c028cbe8a438446cce5f540f48ca\nparent 3cf2c3b943a5b373dbd333622c16f3d606fdb6ab\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587831561 +0000\ncommitter GitHub <noreply@github.com> 1587831561 +0000\n\nMerge #4137\n\n4137: Prefer core/alloc paths on #![no_std] r=matklad a=jonas-schievink\n\n\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67afeebaf597765828801d7cddcb2976a0ee135d", "html_url": "https://github.com/rust-lang/rust/commit/67afeebaf597765828801d7cddcb2976a0ee135d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67afeebaf597765828801d7cddcb2976a0ee135d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc57358efda7c028cbe8a438446cce5f540f48ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc57358efda7c028cbe8a438446cce5f540f48ca", "html_url": "https://github.com/rust-lang/rust/commit/fc57358efda7c028cbe8a438446cce5f540f48ca"}, {"sha": "3cf2c3b943a5b373dbd333622c16f3d606fdb6ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf2c3b943a5b373dbd333622c16f3d606fdb6ab", "html_url": "https://github.com/rust-lang/rust/commit/3cf2c3b943a5b373dbd333622c16f3d606fdb6ab"}], "stats": {"total": 101, "additions": 87, "deletions": 14}, "files": [{"sha": "5a86af8ba3788124f6937f4010625576455a5194", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/67afeebaf597765828801d7cddcb2976a0ee135d/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67afeebaf597765828801d7cddcb2976a0ee135d/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=67afeebaf597765828801d7cddcb2976a0ee135d", "patch": "@@ -13,7 +13,8 @@ use ra_syntax::{\n use tt::Subtree;\n \n use crate::{\n-    db::DefDatabase, path::ModPath, src::HasChildSource, src::HasSource, AdtId, AttrDefId, Lookup,\n+    db::DefDatabase, nameres::ModuleSource, path::ModPath, src::HasChildSource, src::HasSource,\n+    AdtId, AttrDefId, Lookup,\n };\n \n #[derive(Default, Debug, Clone, PartialEq, Eq)]\n@@ -37,11 +38,19 @@ impl Attrs {\n         match def {\n             AttrDefId::ModuleId(module) => {\n                 let def_map = db.crate_def_map(module.krate);\n-                let src = match def_map[module.local_id].declaration_source(db) {\n-                    Some(it) => it,\n-                    None => return Attrs::default(),\n-                };\n-                Attrs::from_attrs_owner(db, src.as_ref().map(|it| it as &dyn AttrsOwner))\n+                let mod_data = &def_map[module.local_id];\n+                match mod_data.declaration_source(db) {\n+                    Some(it) => {\n+                        Attrs::from_attrs_owner(db, it.as_ref().map(|it| it as &dyn AttrsOwner))\n+                    }\n+                    None => Attrs::from_attrs_owner(\n+                        db,\n+                        mod_data.definition_source(db).as_ref().map(|src| match src {\n+                            ModuleSource::SourceFile(file) => file as &dyn AttrsOwner,\n+                            ModuleSource::Module(module) => module as &dyn AttrsOwner,\n+                        }),\n+                    ),\n+                }\n             }\n             AttrDefId::FieldId(it) => {\n                 let src = it.parent.child_source(db);\n@@ -106,7 +115,9 @@ pub struct Attr {\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum AttrInput {\n+    /// `#[attr = \"string\"]`\n     Literal(SmolStr),\n+    /// `#[attr(subtree)]`\n     TokenTree(Subtree),\n }\n "}, {"sha": "70dcb03e6e3761f220e6426df09fdb9f6664419b", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 70, "deletions": 8, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/67afeebaf597765828801d7cddcb2976a0ee135d/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67afeebaf597765828801d7cddcb2976a0ee135d/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=67afeebaf597765828801d7cddcb2976a0ee135d", "patch": "@@ -19,7 +19,7 @@ impl ModPath {\n \n     // When std library is present, paths starting with `std::`\n     // should be preferred over paths starting with `core::` and `alloc::`\n-    fn should_start_with_std(&self) -> bool {\n+    fn can_start_with_std(&self) -> bool {\n         self.segments\n             .first()\n             .filter(|&first_segment| {\n@@ -132,6 +132,9 @@ fn find_path_inner(\n     }\n \n     // - otherwise, look for modules containing (reexporting) it and import it from one of those\n+    let crate_root = ModuleId { local_id: def_map.root, krate: from.krate };\n+    let crate_attrs = db.attrs(crate_root.into());\n+    let prefer_no_std = crate_attrs.by_key(\"no_std\").exists();\n     let importable_locations = find_importable_locations(db, item, from);\n     let mut best_path = None;\n     let mut best_path_len = max_len;\n@@ -147,21 +150,32 @@ fn find_path_inner(\n         };\n         path.segments.push(name);\n \n-        let new_path =\n-            if let Some(best_path) = best_path { select_best_path(best_path, path) } else { path };\n+        let new_path = if let Some(best_path) = best_path {\n+            select_best_path(best_path, path, prefer_no_std)\n+        } else {\n+            path\n+        };\n         best_path_len = new_path.len();\n         best_path = Some(new_path);\n     }\n     best_path\n }\n \n-fn select_best_path(old_path: ModPath, new_path: ModPath) -> ModPath {\n-    if old_path.starts_with_std() && new_path.should_start_with_std() {\n+fn select_best_path(old_path: ModPath, new_path: ModPath, prefer_no_std: bool) -> ModPath {\n+    if old_path.starts_with_std() && new_path.can_start_with_std() {\n         tested_by!(prefer_std_paths);\n-        old_path\n-    } else if new_path.starts_with_std() && old_path.should_start_with_std() {\n+        if prefer_no_std {\n+            new_path\n+        } else {\n+            old_path\n+        }\n+    } else if new_path.starts_with_std() && old_path.can_start_with_std() {\n         tested_by!(prefer_std_paths);\n-        new_path\n+        if prefer_no_std {\n+            old_path\n+        } else {\n+            new_path\n+        }\n     } else if new_path.len() < old_path.len() {\n         new_path\n     } else {\n@@ -512,6 +526,54 @@ mod tests {\n         check_found_path(code, \"std::sync::Arc\");\n     }\n \n+    #[test]\n+    fn prefer_alloc_paths_over_std() {\n+        covers!(prefer_std_paths);\n+        let code = r#\"\n+        //- /main.rs crate:main deps:alloc,std\n+        #![no_std]\n+\n+        <|>\n+\n+        //- /std.rs crate:std deps:alloc\n+\n+        pub mod sync {\n+            pub use alloc::sync::Arc;\n+        }\n+\n+        //- /zzz.rs crate:alloc\n+\n+        pub mod sync {\n+            pub struct Arc;\n+        }\n+        \"#;\n+        check_found_path(code, \"alloc::sync::Arc\");\n+    }\n+\n+    #[test]\n+    fn prefer_core_paths_over_std() {\n+        covers!(prefer_std_paths);\n+        let code = r#\"\n+        //- /main.rs crate:main deps:core,std\n+        #![no_std]\n+\n+        <|>\n+\n+        //- /std.rs crate:std deps:core\n+\n+        pub mod fmt {\n+            pub use core::fmt::Error;\n+        }\n+\n+        //- /zzz.rs crate:core\n+\n+        pub mod fmt {\n+            pub struct Error;\n+        }\n+        \"#;\n+        check_found_path(code, \"core::fmt::Error\");\n+    }\n+\n     #[test]\n     fn prefer_shorter_paths_if_not_alloc() {\n         let code = r#\""}]}