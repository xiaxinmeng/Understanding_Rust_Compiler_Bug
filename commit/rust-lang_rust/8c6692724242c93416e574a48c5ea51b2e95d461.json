{"sha": "8c6692724242c93416e574a48c5ea51b2e95d461", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNjY5MjcyNDI0MmM5MzQxNmU1NzRhNDhjNWVhNTFiMmU5NWQ0NjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-13T00:27:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-13T00:27:15Z"}, "message": "auto merge of #19664 : tbu-/rust/pr_oibit2_fix, r=Gankro\n\nThese probably happened during the merge of the commit that made `Copy` opt-in.\r\n\r\nAlso, convert the last occurence of `/**` to `///` in `src/libstd/num/strconv.rs`", "tree": {"sha": "cea3de66ab91fd8f6fc81413717aefcb33fa046d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cea3de66ab91fd8f6fc81413717aefcb33fa046d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c6692724242c93416e574a48c5ea51b2e95d461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c6692724242c93416e574a48c5ea51b2e95d461", "html_url": "https://github.com/rust-lang/rust/commit/8c6692724242c93416e574a48c5ea51b2e95d461", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c6692724242c93416e574a48c5ea51b2e95d461/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffc111889e93bcd38222d9d74a70fdc26a78fcb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffc111889e93bcd38222d9d74a70fdc26a78fcb5", "html_url": "https://github.com/rust-lang/rust/commit/ffc111889e93bcd38222d9d74a70fdc26a78fcb5"}, {"sha": "deabeb02765c25078256de444b741a32b7864b98", "url": "https://api.github.com/repos/rust-lang/rust/commits/deabeb02765c25078256de444b741a32b7864b98", "html_url": "https://github.com/rust-lang/rust/commit/deabeb02765c25078256de444b741a32b7864b98"}], "stats": {"total": 53, "additions": 21, "deletions": 32}, "files": [{"sha": "81488b99b67890b0bd90f0e2e7ed20264de0bc2e", "filename": "src/librustc_trans/trans/value.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c6692724242c93416e574a48c5ea51b2e95d461/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c6692724242c93416e574a48c5ea51b2e95d461/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs?ref=8c6692724242c93416e574a48c5ea51b2e95d461", "patch": "@@ -130,9 +130,6 @@ pub struct Use(UseRef);\n \n impl Copy for Use {}\n \n-/**\n- * Wrapper for LLVM UseRef\n- */\n impl Use {\n     pub fn get(&self) -> UseRef {\n         let Use(v) = *self; v"}, {"sha": "c41f55d567ff6cb529d85bb030d89af7ab269f0d", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8c6692724242c93416e574a48c5ea51b2e95d461/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c6692724242c93416e574a48c5ea51b2e95d461/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=8c6692724242c93416e574a48c5ea51b2e95d461", "patch": "@@ -74,31 +74,25 @@ pub enum SignFormat {\n \n impl Copy for SignFormat {}\n \n-/**\n- * Converts an integral number to its string representation as a byte vector.\n- * This is meant to be a common base implementation for all integral string\n- * conversion functions like `to_string()` or `to_str_radix()`.\n- *\n- * # Arguments\n- * - `num`           - The number to convert. Accepts any number that\n- *                     implements the numeric traits.\n- * - `radix`         - Base to use. Accepts only the values 2-36.\n- * - `sign`          - How to emit the sign. Options are:\n- *     - `SignNone`: No sign at all. Basically emits `abs(num)`.\n- *     - `SignNeg`:  Only `-` on negative values.\n- *     - `SignAll`:  Both `+` on positive, and `-` on negative numbers.\n- * - `f`             - a callback which will be invoked for each ascii character\n- *                     which composes the string representation of this integer\n- *\n- * # Return value\n- * A tuple containing the byte vector, and a boolean flag indicating\n- * whether it represents a special value like `inf`, `-inf`, `NaN` or not.\n- * It returns a tuple because there can be ambiguity between a special value\n- * and a number representation at higher bases.\n- *\n- * # Failure\n- * - Fails if `radix` < 2 or `radix` > 36.\n- */\n+/// Converts an integral number to its string representation as a byte vector.\n+/// This is meant to be a common base implementation for all integral string\n+/// conversion functions like `to_string()` or `to_str_radix()`.\n+///\n+/// # Arguments\n+///\n+/// - `num`           - The number to convert. Accepts any number that\n+///                     implements the numeric traits.\n+/// - `radix`         - Base to use. Accepts only the values 2-36.\n+/// - `sign`          - How to emit the sign. Options are:\n+///     - `SignNone`: No sign at all. Basically emits `abs(num)`.\n+///     - `SignNeg`:  Only `-` on negative values.\n+///     - `SignAll`:  Both `+` on positive, and `-` on negative numbers.\n+/// - `f`             - a callback which will be invoked for each ascii character\n+///                     which composes the string representation of this integer\n+///\n+/// # Panics\n+///\n+/// - Panics if `radix` < 2 or `radix` > 36.\n fn int_to_str_bytes_common<T: Int>(num: T, radix: uint, sign: SignFormat, f: |u8|) {\n     assert!(2 <= radix && radix <= 36);\n \n@@ -415,10 +409,8 @@ pub fn float_to_str_bytes_common<T: Float>(\n     (buf, false)\n }\n \n-/**\n- * Converts a number to its string representation. This is a wrapper for\n- * `to_str_bytes_common()`, for details see there.\n- */\n+/// Converts a number to its string representation. This is a wrapper for\n+/// `to_str_bytes_common()`, for details see there.\n #[inline]\n pub fn float_to_str_common<T: Float>(\n         num: T, radix: uint, negative_zero: bool,"}]}