{"sha": "f83c118f429574832c7b0cf792135d908f41aa9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4M2MxMThmNDI5NTc0ODMyYzdiMGNmNzkyMTM1ZDkwOGY0MWFhOWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-18T17:19:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-18T17:19:44Z"}, "message": "auto merge of #7833 : blake2-ppc/rust/hashmap-consume, r=alexcrichton\n\nUpdated all users of HashMap, HashSet ::consume() to use\r\n.consume_iter().\r\n\r\nSince .consume_iter() takes the map or set by value, it needs awkward\r\nextra code to in librusti's use of @mut HashMap, where the map value can\r\nnot be directly moved out.\r\n\r\nAddresses issue #7719", "tree": {"sha": "6a38c5eb66b67b08a8570c0065330ca3554f98c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a38c5eb66b67b08a8570c0065330ca3554f98c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f83c118f429574832c7b0cf792135d908f41aa9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f83c118f429574832c7b0cf792135d908f41aa9d", "html_url": "https://github.com/rust-lang/rust/commit/f83c118f429574832c7b0cf792135d908f41aa9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f83c118f429574832c7b0cf792135d908f41aa9d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "559d2ef925fdf82e34022358e0cc182aaeea8b21", "url": "https://api.github.com/repos/rust-lang/rust/commits/559d2ef925fdf82e34022358e0cc182aaeea8b21", "html_url": "https://github.com/rust-lang/rust/commit/559d2ef925fdf82e34022358e0cc182aaeea8b21"}, {"sha": "7ef9e722b8a499cd0b84ab175a366cbe536a86e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ef9e722b8a499cd0b84ab175a366cbe536a86e4", "html_url": "https://github.com/rust-lang/rust/commit/7ef9e722b8a499cd0b84ab175a366cbe536a86e4"}], "stats": {"total": 107, "additions": 33, "deletions": 74}, "files": [{"sha": "5602964245f37a357b7b88eff6a781105c098b0c", "filename": "src/libextra/json.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f83c118f429574832c7b0cf792135d908f41aa9d/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83c118f429574832c7b0cf792135d908f41aa9d/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=f83c118f429574832c7b0cf792135d908f41aa9d", "patch": "@@ -1086,9 +1086,8 @@ impl serialize::Decoder for Decoder {\n         debug!(\"read_map()\");\n         let len = match self.stack.pop() {\n             Object(obj) => {\n-                let mut obj = obj;\n                 let len = obj.len();\n-                do obj.consume |key, value| {\n+                for obj.consume().advance |(key, value)| {\n                     self.stack.push(value);\n                     self.stack.push(String(key));\n                 }"}, {"sha": "de2125c2e0ebe4604e09bcc46cb487fa182a973f", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f83c118f429574832c7b0cf792135d908f41aa9d/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83c118f429574832c7b0cf792135d908f41aa9d/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=f83c118f429574832c7b0cf792135d908f41aa9d", "patch": "@@ -154,7 +154,7 @@ Available lint options:\n \"));\n \n     let lint_dict = lint::get_lint_dict();\n-    let mut lint_dict = lint_dict.consume_iter()\n+    let mut lint_dict = lint_dict.consume()\n                                  .transform(|(k, v)| (v, k))\n                                  .collect::<~[(lint::LintSpec, &'static str)]>();\n     lint_dict.qsort();"}, {"sha": "276ad74e1d3a98fec37dd7a73952072d47028471", "filename": "src/librusti/program.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f83c118f429574832c7b0cf792135d908f41aa9d/src%2Flibrusti%2Fprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83c118f429574832c7b0cf792135d908f41aa9d/src%2Flibrusti%2Fprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Fprogram.rs?ref=f83c118f429574832c7b0cf792135d908f41aa9d", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::cast;\n+use std::util;\n use std::hashmap::HashMap;\n use std::local_data;\n \n@@ -165,7 +166,8 @@ impl Program {\n             None => {}\n         }\n \n-        do self.newvars.consume |name, var| {\n+        let newvars = util::replace(&mut self.newvars, HashMap::new());\n+        for newvars.consume().advance |(name, var)| {\n             self.local_vars.insert(name, var);\n         }\n \n@@ -230,7 +232,8 @@ impl Program {\n     /// it updates this cache with the new values of each local variable.\n     pub fn consume_cache(&mut self) {\n         let map = local_data::pop(tls_key).expect(\"tls is empty\");\n-        do map.consume |name, value| {\n+        let cons_map = util::replace(map, HashMap::new());\n+        for cons_map.consume().advance |(name, value)| {\n             match self.local_vars.find_mut(&name) {\n                 Some(v) => { v.data = (*value).clone(); }\n                 None => { fail!(\"unknown variable %s\", name) }\n@@ -341,7 +344,8 @@ impl Program {\n         }\n \n         // I'm not an @ pointer, so this has to be done outside.\n-        do newvars.consume |k, v| {\n+        let cons_newvars = util::replace(newvars, HashMap::new());\n+        for cons_newvars.consume().advance |(k, v)| {\n             self.newvars.insert(k, v);\n         }\n "}, {"sha": "068db8805e8da5604012f740201ac14c2b3381af", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 20, "deletions": 64, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/f83c118f429574832c7b0cf792135d908f41aa9d/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83c118f429574832c7b0cf792135d908f41aa9d/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=f83c118f429574832c7b0cf792135d908f41aa9d", "patch": "@@ -438,31 +438,6 @@ impl<K: Hash + Eq, V> HashMap<K, V> {\n         self.mangle(k, v, |_k,a| a, |k,v,_a| f(k,v))\n     }\n \n-    /// Calls a function on each element of a hash map, destroying the hash\n-    /// map in the process.\n-    pub fn consume(&mut self, f: &fn(K, V)) {\n-        let buckets = replace(&mut self.buckets,\n-                              vec::from_fn(INITIAL_CAPACITY, |_| None));\n-        self.size = 0;\n-\n-        for buckets.consume_iter().advance |bucket| {\n-            match bucket {\n-                None => {},\n-                Some(Bucket{key, value, _}) => {\n-                    f(key, value)\n-                }\n-            }\n-        }\n-    }\n-\n-    /// Creates a consuming iterator, that is, one that moves each key-value\n-    /// pair out of the map in arbitrary order. The map cannot be used after\n-    /// calling this.\n-    pub fn consume_iter(self) -> HashMapConsumeIterator<K, V> {\n-        // `consume_rev_iter` is more efficient than `consume_iter` for vectors\n-        HashMapConsumeIterator {iter: self.buckets.consume_rev_iter()}\n-    }\n-\n     /// Retrieves a value for the given key, failing if the key is not\n     /// present.\n     pub fn get<'a>(&'a self, k: &K) -> &'a V {\n@@ -522,6 +497,15 @@ impl<K: Hash + Eq, V> HashMap<K, V> {\n     pub fn mut_iter<'a>(&'a mut self) -> HashMapMutIterator<'a, K, V> {\n         HashMapMutIterator { iter: self.buckets.mut_iter() }\n     }\n+\n+    /// Creates a consuming iterator, that is, one that moves each key-value\n+    /// pair out of the map in arbitrary order. The map cannot be used after\n+    /// calling this.\n+    pub fn consume(self) -> HashMapConsumeIterator<K, V> {\n+        // `consume_rev_iter` is more efficient than `consume_iter` for vectors\n+        HashMapConsumeIterator {iter: self.buckets.consume_rev_iter()}\n+    }\n+\n }\n \n impl<K: Hash + Eq, V: Clone> HashMap<K, V> {\n@@ -761,19 +745,6 @@ impl<T:Hash + Eq> HashSet<T> {\n         self.map.reserve_at_least(n)\n     }\n \n-    /// Consumes all of the elements in the set, emptying it out\n-    pub fn consume(&mut self, f: &fn(T)) {\n-        self.map.consume(|k, _| f(k))\n-    }\n-\n-    /// Creates a consuming iterator, that is, one that moves each value out\n-    /// of the set in arbitrary order. The set cannot be used after calling\n-    /// this.\n-    pub fn consume_iter(self) -> HashSetConsumeIterator<T> {\n-        // `consume_rev_iter` is more efficient than `consume_iter` for vectors\n-        HashSetConsumeIterator {iter: self.map.buckets.consume_rev_iter()}\n-    }\n-\n     /// Returns true if the hash set contains a value equivalent to the\n     /// given query value.\n     pub fn contains_equiv<Q:Hash + Equiv<T>>(&self, value: &Q) -> bool {\n@@ -786,6 +757,14 @@ impl<T:Hash + Eq> HashSet<T> {\n         HashSetIterator { iter: self.map.buckets.iter() }\n     }\n \n+    /// Creates a consuming iterator, that is, one that moves each value out\n+    /// of the set in arbitrary order. The set cannot be used after calling\n+    /// this.\n+    pub fn consume(self) -> HashSetConsumeIterator<T> {\n+        // `consume_rev_iter` is more efficient than `consume_iter` for vectors\n+        HashSetConsumeIterator {iter: self.map.buckets.consume_rev_iter()}\n+    }\n+\n     /// Visit the values representing the difference\n     pub fn difference_iter<'a>(&'a self, other: &'a HashSet<T>)\n         -> SetAlgebraIter<'a, T> {\n@@ -975,29 +954,6 @@ mod test_map {\n \n     #[test]\n     fn test_consume() {\n-        let mut m = HashMap::new();\n-        assert!(m.insert(1, 2));\n-        assert!(m.insert(2, 3));\n-        let mut m2 = HashMap::new();\n-        do m.consume |k, v| {\n-            m2.insert(k, v);\n-        }\n-        assert_eq!(m.len(), 0);\n-        assert_eq!(m2.len(), 2);\n-        assert_eq!(m2.get(&1), &2);\n-        assert_eq!(m2.get(&2), &3);\n-    }\n-\n-    #[test]\n-    fn test_consume_still_usable() {\n-        let mut m = HashMap::new();\n-        assert!(m.insert(1, 2));\n-        do m.consume |_, _| {}\n-        assert!(m.insert(1, 2));\n-    }\n-\n-    #[test]\n-    fn test_consume_iter() {\n         let hm = {\n             let mut hm = HashMap::new();\n \n@@ -1007,7 +963,7 @@ mod test_map {\n             hm\n         };\n \n-        let v = hm.consume_iter().collect::<~[(char, int)]>();\n+        let v = hm.consume().collect::<~[(char, int)]>();\n         assert!([('a', 1), ('b', 2)] == v || [('b', 2), ('a', 1)] == v);\n     }\n \n@@ -1293,7 +1249,7 @@ mod test_set {\n     }\n \n     #[test]\n-    fn test_consume_iter() {\n+    fn test_consume() {\n         let hs = {\n             let mut hs = HashSet::new();\n \n@@ -1303,7 +1259,7 @@ mod test_set {\n             hs\n         };\n \n-        let v = hs.consume_iter().collect::<~[char]>();\n+        let v = hs.consume().collect::<~[char]>();\n         assert!(['a', 'b'] == v || ['b', 'a'] == v);\n     }\n }"}, {"sha": "f5dfa1feb9b1346922e9cfa49eaacc498676ed44", "filename": "src/libstd/unstable/weak_task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f83c118f429574832c7b0cf792135d908f41aa9d/src%2Flibstd%2Funstable%2Fweak_task.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83c118f429574832c7b0cf792135d908f41aa9d/src%2Flibstd%2Funstable%2Fweak_task.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fweak_task.rs?ref=f83c118f429574832c7b0cf792135d908f41aa9d", "patch": "@@ -122,7 +122,7 @@ fn run_weak_task_service(port: Port<ServiceMsg>) {\n         }\n     }\n \n-    do shutdown_map.consume |_, shutdown_chan| {\n+    for shutdown_map.consume().advance |(_, shutdown_chan)| {\n         // Weak task may have already exited\n         shutdown_chan.send(());\n     }"}, {"sha": "8a0d9bcead0fb1d27984ced1d5c8d0da6f9e16a6", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f83c118f429574832c7b0cf792135d908f41aa9d/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83c118f429574832c7b0cf792135d908f41aa9d/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=f83c118f429574832c7b0cf792135d908f41aa9d", "patch": "@@ -96,9 +96,9 @@ fn make_graph(N: uint, edges: ~[(node_id, node_id)]) -> graph {\n         }\n     }\n \n-    do graph.consume_iter().transform |mut v| {\n+    do graph.consume_iter().transform |v| {\n         let mut vec = ~[];\n-        do v.consume |i| {\n+        for v.consume().advance |i| {\n             vec.push(i);\n         }\n         vec\n@@ -119,7 +119,7 @@ fn gen_search_keys(graph: &[~[node_id]], n: uint) -> ~[node_id] {\n         }\n     }\n     let mut vec = ~[];\n-    do keys.consume |i| {\n+    for keys.consume().advance |i| {\n         vec.push(i);\n     }\n     return vec;"}]}