{"sha": "8444e1628cd5e2d7229b3176cb5b248271defe22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NDRlMTYyOGNkNWUyZDcyMjliMzE3NmNiNWIyNDgyNzFkZWZlMjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-15T18:41:50Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-16T01:32:33Z"}, "message": "move DIAGNOSTICS usage to rustc_driver", "tree": {"sha": "804e8211f47a7f722baec02f9f1a1447595a2b79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/804e8211f47a7f722baec02f9f1a1447595a2b79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8444e1628cd5e2d7229b3176cb5b248271defe22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8444e1628cd5e2d7229b3176cb5b248271defe22", "html_url": "https://github.com/rust-lang/rust/commit/8444e1628cd5e2d7229b3176cb5b248271defe22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8444e1628cd5e2d7229b3176cb5b248271defe22/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bd30ce2aac40c7698aa4a1b9520aa649ff2d1c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bd30ce2aac40c7698aa4a1b9520aa649ff2d1c5", "html_url": "https://github.com/rust-lang/rust/commit/1bd30ce2aac40c7698aa4a1b9520aa649ff2d1c5"}], "stats": {"total": 93, "additions": 40, "deletions": 53}, "files": [{"sha": "9094461067bc3e7d973f0a0796e47ed684311ced", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8444e1628cd5e2d7229b3176cb5b248271defe22/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8444e1628cd5e2d7229b3176cb5b248271defe22/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8444e1628cd5e2d7229b3176cb5b248271defe22", "patch": "@@ -3519,6 +3519,7 @@ dependencies = [\n  \"rustc\",\n  \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n+ \"rustc_error_codes\",\n  \"rustc_errors\",\n  \"rustc_interface\",\n  \"rustc_lint\",\n@@ -3592,7 +3593,6 @@ dependencies = [\n  \"rustc_codegen_ssa\",\n  \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n- \"rustc_error_codes\",\n  \"rustc_errors\",\n  \"rustc_incremental\",\n  \"rustc_lint\","}, {"sha": "63ff92b5ecb63f68f6ad90847f64f219f947e4b6", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=8444e1628cd5e2d7229b3176cb5b248271defe22", "patch": "@@ -1039,12 +1039,11 @@ pub fn build_session_with_source_map(\n \n     let external_macro_backtrace = sopts.debugging_opts.external_macro_backtrace;\n \n-    let emitter = match diagnostics_output {\n-        DiagnosticOutput::Default => default_emitter(&sopts, registry, &source_map, None),\n-        DiagnosticOutput::Raw(write) => {\n-            default_emitter(&sopts, registry, &source_map, Some(write))\n-        }\n+    let write_dest = match diagnostics_output {\n+        DiagnosticOutput::Default => None,\n+        DiagnosticOutput::Raw(write) => Some(write),\n     };\n+    let emitter = default_emitter(&sopts, registry, &source_map, write_dest);\n \n     let diagnostic_handler = errors::Handler::with_emitter_and_flags(\n         emitter,"}, {"sha": "ff673e52b60c2e786a32306dbb0e50bd4d8dd1af", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=8444e1628cd5e2d7229b3176cb5b248271defe22", "patch": "@@ -26,6 +26,7 @@ rustc_plugin = { path = \"../librustc_plugin/deprecated\" } # To get this in the s\n rustc_plugin_impl = { path = \"../librustc_plugin\" }\n rustc_save_analysis = { path = \"../librustc_save_analysis\" }\n rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n+rustc_error_codes = { path = \"../librustc_error_codes\" }\n rustc_interface = { path = \"../librustc_interface\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_resolve = { path = \"../librustc_resolve\" }"}, {"sha": "ef638464adce9b8074292899ab2308bdf2462983", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=8444e1628cd5e2d7229b3176cb5b248271defe22", "patch": "@@ -40,7 +40,7 @@ use rustc::ty::TyCtxt;\n use rustc::util::common::{set_time_depth, time, print_time_passes_entry, ErrorReported};\n use rustc_metadata::locator;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n-use errors::PResult;\n+use errors::{PResult, registry::Registry};\n use rustc_interface::interface;\n use rustc_interface::util::get_codegen_sysroot;\n use rustc_data_structures::sync::SeqCst;\n@@ -140,6 +140,10 @@ impl Callbacks for TimePassesCallbacks {\n     }\n }\n \n+pub fn diagnostics_registry() -> Registry {\n+    Registry::new(&rustc_error_codes::DIAGNOSTICS)\n+}\n+\n // Parse args and run the compiler. This is the primary entry point for rustc.\n // See comments on CompilerCalls below for details about the callbacks argument.\n // The FileLoader provides a way to load files from sources other than the file system.\n@@ -182,13 +186,14 @@ pub fn run_compiler(\n             lint_caps: Default::default(),\n             register_lints: None,\n             override_queries: None,\n+            registry: diagnostics_registry(),\n         };\n         callbacks.config(&mut config);\n         config\n     };\n \n     if let Some(ref code) = matches.opt_str(\"explain\") {\n-        handle_explain(code, sopts.error_format);\n+        handle_explain(diagnostics_registry(), code, sopts.error_format);\n         return Ok(());\n     }\n \n@@ -261,6 +266,7 @@ pub fn run_compiler(\n         lint_caps: Default::default(),\n         register_lints: None,\n         override_queries: None,\n+        registry: diagnostics_registry(),\n     };\n \n     callbacks.config(&mut config);\n@@ -510,15 +516,13 @@ fn stdout_isatty() -> bool {\n     }\n }\n \n-fn handle_explain(code: &str,\n-                  output: ErrorOutputType) {\n-    let descriptions = rustc_interface::util::diagnostics_registry();\n+fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n     let normalised = if code.starts_with(\"E\") {\n         code.to_string()\n     } else {\n         format!(\"E{0:0>4}\", code)\n     };\n-    match descriptions.find_description(&normalised) {\n+    match registry.find_description(&normalised) {\n         Some(ref description) => {\n             let mut is_in_code_block = false;\n             let mut text = String::new();"}, {"sha": "428cecf13a3b01beedea67c5eb77f0f4a70d41dc", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=8444e1628cd5e2d7229b3176cb5b248271defe22", "patch": "@@ -7,8 +7,7 @@\n // Error messages' format must follow the RFC 1567 available here:\n // https://github.com/rust-lang/rfcs/pull/1567\n \n-crate::register_diagnostics! {\n-\n+register_diagnostics! {\n E0001: include_str!(\"./error_codes/E0001.md\"),\n E0002: include_str!(\"./error_codes/E0002.md\"),\n E0004: include_str!(\"./error_codes/E0004.md\"),"}, {"sha": "14210fd69ad51b81a7432cdd64118723fb4f9665", "filename": "src/librustc_error_codes/lib.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustc_error_codes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustc_error_codes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Flib.rs?ref=8444e1628cd5e2d7229b3176cb5b248271defe22", "patch": "@@ -1,19 +1,14 @@\n-//! This library is used to gather all error codes into one place. The goal\n-//! being to make their maintenance easier.\n+//! This library is used to gather all error codes into one place,\n+//! the goal being to make their maintenance easier.\n \n-#[macro_export]\n macro_rules! register_diagnostics {\n-    ($($ecode:ident: $message:expr,)*) => (\n-        $crate::register_diagnostics!{$($ecode:$message,)* ;}\n-    );\n-\n     ($($ecode:ident: $message:expr,)* ; $($code:ident,)*) => (\n         pub static DIAGNOSTICS: &[(&str, &str)] = &[\n             $( (stringify!($ecode), $message), )*\n         ];\n \n         $(\n-            pub const $ecode: &str = $message;\n+            pub const $ecode: () = ();\n         )*\n         $(\n             pub const $code: () = ();"}, {"sha": "de59882bbdf957f851818b73de4ea98d2c97962c", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=8444e1628cd5e2d7229b3176cb5b248271defe22", "patch": "@@ -34,7 +34,6 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_plugin = { path = \"../librustc_plugin\", package = \"rustc_plugin_impl\" }\n rustc_privacy = { path = \"../librustc_privacy\" }\n rustc_resolve = { path = \"../librustc_resolve\" }\n-rustc_error_codes = { path = \"../librustc_error_codes\" }\n tempfile = \"3.0.5\"\n once_cell = \"1\"\n "}, {"sha": "c153de7103ac2cba88a02ba60d1e81c7903ac76d", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=8444e1628cd5e2d7229b3176cb5b248271defe22", "patch": "@@ -11,6 +11,7 @@ use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::OnDrop;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n+use rustc_errors::registry::Registry;\n use rustc_parse::new_parser_from_source_str;\n use rustc::ty;\n use std::path::PathBuf;\n@@ -141,19 +142,24 @@ pub struct Config {\n     /// The second parameter is local providers and the third parameter is external providers.\n     pub override_queries:\n         Option<fn(&Session, &mut ty::query::Providers<'_>, &mut ty::query::Providers<'_>)>,\n+\n+    /// Registry of diagnostics codes.\n+    pub registry: Registry,\n }\n \n-pub fn run_compiler_in_existing_thread_pool<F, R>(config: Config, f: F) -> R\n-where\n-    F: FnOnce(&Compiler) -> R,\n-{\n+pub fn run_compiler_in_existing_thread_pool<R>(\n+    config: Config,\n+    f: impl FnOnce(&Compiler) -> R,\n+) -> R {\n+    let registry = &config.registry;\n     let (sess, codegen_backend, source_map) = util::create_session(\n         config.opts,\n         config.crate_cfg,\n         config.diagnostic_output,\n         config.file_loader,\n         config.input_path.clone(),\n         config.lint_caps,\n+        registry.clone(),\n     );\n \n     let compiler = Compiler {\n@@ -171,17 +177,13 @@ where\n     };\n \n     let _sess_abort_error = OnDrop(|| {\n-        compiler.sess.diagnostic().print_error_count(&util::diagnostics_registry());\n+        compiler.sess.diagnostic().print_error_count(registry);\n     });\n \n     f(&compiler)\n }\n \n-pub fn run_compiler<F, R>(mut config: Config, f: F) -> R\n-where\n-    F: FnOnce(&Compiler) -> R + Send,\n-    R: Send,\n-{\n+pub fn run_compiler<R: Send>(mut config: Config, f: impl FnOnce(&Compiler) -> R + Send) -> R {\n     let stderr = config.stderr.take();\n     util::spawn_thread_pool(\n         config.opts.edition,\n@@ -191,11 +193,7 @@ where\n     )\n }\n \n-pub fn default_thread_pool<F, R>(edition: edition::Edition, f: F) -> R\n-where\n-    F: FnOnce() -> R + Send,\n-    R: Send,\n-{\n+pub fn default_thread_pool<R: Send>(edition: edition::Edition, f: impl FnOnce() -> R + Send) -> R {\n     // the 1 here is duplicating code in config.opts.debugging_opts.threads\n     // which also defaults to 1; it ultimately doesn't matter as the default\n     // isn't threaded, and just ignores this parameter"}, {"sha": "2b4320c04e6e5d3cab8405c76385257bd88319d4", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=8444e1628cd5e2d7229b3176cb5b248271defe22", "patch": "@@ -15,7 +15,6 @@ use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc_errors::registry::Registry;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n use rustc_resolve::{self, Resolver};\n-use rustc_error_codes;\n use std::env;\n use std::env::consts::{DLL_PREFIX, DLL_SUFFIX};\n use std::io::{self, Write};\n@@ -37,15 +36,6 @@ use syntax_pos::edition::Edition;\n #[cfg(not(parallel_compiler))]\n use std::{thread, panic};\n \n-pub fn diagnostics_registry() -> Registry {\n-    let mut all_errors = Vec::new();\n-    all_errors.extend_from_slice(&rustc_error_codes::DIAGNOSTICS);\n-    // FIXME: need to figure out a way to get these back in here\n-    // all_errors.extend_from_slice(get_codegen_backend(sess).diagnostics());\n-\n-    Registry::new(&all_errors)\n-}\n-\n /// Adds `target_feature = \"...\"` cfgs for a variety of platform\n /// specific features (SSE, NEON etc.).\n ///\n@@ -77,9 +67,8 @@ pub fn create_session(\n     file_loader: Option<Box<dyn FileLoader + Send + Sync + 'static>>,\n     input_path: Option<PathBuf>,\n     lint_caps: FxHashMap<lint::LintId, lint::Level>,\n+    descriptions: Registry,\n ) -> (Lrc<Session>, Lrc<Box<dyn CodegenBackend>>, Lrc<SourceMap>) {\n-    let descriptions = diagnostics_registry();\n-\n     let loader = file_loader.unwrap_or(box RealFileLoader);\n     let source_map = Lrc::new(SourceMap::with_file_loader(\n         loader,"}, {"sha": "d6f67514394520d217e4f0de072c40d6c401d774", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=8444e1628cd5e2d7229b3176cb5b248271defe22", "patch": "@@ -21,7 +21,6 @@ use syntax::feature_gate::UnstableFeatures;\n use syntax::json::JsonEmitter;\n use syntax::symbol::sym;\n use syntax_pos::DUMMY_SP;\n-use errors;\n use errors::emitter::{Emitter, EmitterWriter};\n \n use std::cell::RefCell;\n@@ -341,6 +340,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         lint_caps,\n         register_lints: None,\n         override_queries: None,\n+        registry: rustc_driver::diagnostics_registry(),\n     };\n \n     interface::run_compiler_in_existing_thread_pool(config, |compiler| {"}, {"sha": "8bfaf98f0867e053dc6b28e8cc479977933e4f6a", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=8444e1628cd5e2d7229b3176cb5b248271defe22", "patch": "@@ -23,8 +23,9 @@ extern crate getopts;\n extern crate env_logger;\n extern crate rustc;\n extern crate rustc_data_structures;\n-extern crate rustc_index;\n extern crate rustc_driver;\n+extern crate rustc_error_codes;\n+extern crate rustc_index;\n extern crate rustc_resolve;\n extern crate rustc_lint;\n extern crate rustc_interface;"}, {"sha": "98e18d666f1500c3906c408af38b6f453353c4b6", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=8444e1628cd5e2d7229b3176cb5b248271defe22", "patch": "@@ -80,6 +80,7 @@ pub fn run(options: Options) -> i32 {\n         lint_caps: Default::default(),\n         register_lints: None,\n         override_queries: None,\n+        registry: rustc_driver::diagnostics_registry(),\n     };\n \n     let mut test_args = options.test_args.clone();"}, {"sha": "f9ecff2abaa839c2349fcdb27d6f7ca2512b503f", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8444e1628cd5e2d7229b3176cb5b248271defe22/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=8444e1628cd5e2d7229b3176cb5b248271defe22", "patch": "@@ -2,7 +2,7 @@\n \n extern crate rustc;\n extern crate rustc_interface;\n-extern crate rustc_driver as _;\n+extern crate rustc_driver;\n extern crate syntax;\n \n use rustc::session::DiagnosticOutput;\n@@ -61,6 +61,7 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n         lint_caps: Default::default(),\n         register_lints: None,\n         override_queries: None,\n+        registry: rustc_driver::diagnostics_registry(),\n     };\n \n     interface::run_compiler(config, |compiler| {"}]}