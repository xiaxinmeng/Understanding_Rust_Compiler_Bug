{"sha": "b5218ba6ad05f0c5a31575b2fe59949b3dc25129", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MjE4YmE2YWQwNWYwYzVhMzE1NzViMmZlNTk5NDliM2RjMjUxMjk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T00:35:29Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:23Z"}, "message": "librustc: De-`@mut` `monomorphized` in the crate context", "tree": {"sha": "0e98340346c8cd07b423ed0e0188a20fe648f5d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e98340346c8cd07b423ed0e0188a20fe648f5d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5218ba6ad05f0c5a31575b2fe59949b3dc25129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5218ba6ad05f0c5a31575b2fe59949b3dc25129", "html_url": "https://github.com/rust-lang/rust/commit/b5218ba6ad05f0c5a31575b2fe59949b3dc25129", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5218ba6ad05f0c5a31575b2fe59949b3dc25129/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a0450c67d81c6969fa43c01d37a2f196b7d58ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a0450c67d81c6969fa43c01d37a2f196b7d58ce", "html_url": "https://github.com/rust-lang/rust/commit/6a0450c67d81c6969fa43c01d37a2f196b7d58ce"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "56fcbaadbe9fd1dfeb43e9dbca57a39c148c5aec", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5218ba6ad05f0c5a31575b2fe59949b3dc25129/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5218ba6ad05f0c5a31575b2fe59949b3dc25129/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=b5218ba6ad05f0c5a31575b2fe59949b3dc25129", "patch": "@@ -27,6 +27,7 @@ use middle::trans::type_::Type;\n \n use util::sha2::Sha256;\n \n+use std::cell::RefCell;\n use std::c_str::ToCStr;\n use std::hashmap::{HashMap, HashSet};\n use std::local_data;\n@@ -68,7 +69,7 @@ pub struct CrateContext {\n      // that is generated\n      non_inlineable_statics: HashSet<ast::NodeId>,\n      // Cache instances of monomorphized functions\n-     monomorphized: HashMap<mono_id, ValueRef>,\n+     monomorphized: RefCell<HashMap<mono_id, ValueRef>>,\n      monomorphizing: HashMap<ast::DefId, uint>,\n      // Cache generated vtables\n      vtables: HashMap<(ty::t, mono_id), ValueRef>,\n@@ -199,7 +200,7 @@ impl CrateContext {\n                   external: HashMap::new(),\n                   external_srcs: HashMap::new(),\n                   non_inlineable_statics: HashSet::new(),\n-                  monomorphized: HashMap::new(),\n+                  monomorphized: RefCell::new(HashMap::new()),\n                   monomorphizing: HashMap::new(),\n                   vtables: HashMap::new(),\n                   const_cstr_cache: HashMap::new(),"}, {"sha": "229a98055c8a8cee6db429bdc300c1dd4323790e", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b5218ba6ad05f0c5a31575b2fe59949b3dc25129/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5218ba6ad05f0c5a31575b2fe59949b3dc25129/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=b5218ba6ad05f0c5a31575b2fe59949b3dc25129", "patch": "@@ -76,13 +76,16 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n            psubsts.repr(ccx.tcx),\n            hash_id);\n \n-    match ccx.monomorphized.find(&hash_id) {\n-      Some(&val) => {\n-        debug!(\"leaving monomorphic fn {}\",\n-               ty::item_path_str(ccx.tcx, fn_id));\n-        return (val, must_cast);\n-      }\n-      None => ()\n+    {\n+        let monomorphized = ccx.monomorphized.borrow();\n+        match monomorphized.get().find(&hash_id) {\n+          Some(&val) => {\n+            debug!(\"leaving monomorphic fn {}\",\n+                   ty::item_path_str(ccx.tcx, fn_id));\n+            return (val, must_cast);\n+          }\n+          None => ()\n+        }\n     }\n \n     let tpt = ty::lookup_item_type(ccx.tcx, fn_id);\n@@ -201,7 +204,8 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n \n     let mk_lldecl = || {\n         let lldecl = decl_internal_rust_fn(ccx, f.sig.inputs, f.sig.output, s);\n-        ccx.monomorphized.insert(hash_id, lldecl);\n+        let mut monomorphized = ccx.monomorphized.borrow_mut();\n+        monomorphized.get().insert(hash_id, lldecl);\n         lldecl\n     };\n "}]}