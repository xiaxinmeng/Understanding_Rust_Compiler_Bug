{"sha": "2932638d3450d6e9e0d45ff8b5304cc971fe55ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MzI2MzhkMzQ1MGQ2ZTllMGQ0NWZmOGI1MzA0Y2M5NzFmZTU1YWQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-08-10T23:56:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-10T23:56:36Z"}, "message": "Rollup merge of #75316 - alexcrichton:fix-wasm-simd, r=oli-obk\n\nDon't try to use wasm intrinsics on vectors\n\nThis commit fixes an issue with #74695 where the fptosi and fptoui\nspecializations on wasm were accidentally used on vector types by the\n`simd_cast` intrinsic. This issue showed up as broken CI for the stdsimd\ncrate. Here this commit simply skips the specialization on vector kinds\nflowing into `fpto{s,u}i`.", "tree": {"sha": "78d9ad2b69f00b9dc891efede9ca11eda26c1cea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78d9ad2b69f00b9dc891efede9ca11eda26c1cea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2932638d3450d6e9e0d45ff8b5304cc971fe55ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfMd60CRBK7hj4Ov3rIwAAdHIIAE4tAhb1XdRCQMGLS914L1z4\nxcRKPj4xZZdM/LgieAMHrdiTy8Es+grFajo17MCowjul34g3C/smw+QBDYnpPhPu\n8faKsjxNjM99SjXCxmlBCMYi5Ym08ErRYzgQHEAJQD8xJsDeH8M1RhorMgTAGLtg\nQFBvhngAX6pyqdOatXWRZOAbHb+8C+CwUjxU6+Fkcm7MRpqHI0R2Zw4T2++Vehg4\nJG0tXcSdgolQd1Shxcy6vckaXjUqNEVsIuoflB27ZquAWuwvGGHccOwx8kn01meU\n1tT4kOQVVIRHAolyc9ru+/ySsUNgTIfWO0Rgw9crZ1+vwE2zLEe13nv0sDWN6Bw=\n=KWfM\n-----END PGP SIGNATURE-----\n", "payload": "tree 78d9ad2b69f00b9dc891efede9ca11eda26c1cea\nparent 992988bbc563150ee97b9df1bbff45c73eda50ea\nparent b21a3de35f4841ce4f5f7cd997faf9531ea998f2\nauthor Dylan DPC <dylan.dpc@gmail.com> 1597103796 +0200\ncommitter GitHub <noreply@github.com> 1597103796 +0200\n\nRollup merge of #75316 - alexcrichton:fix-wasm-simd, r=oli-obk\n\nDon't try to use wasm intrinsics on vectors\n\nThis commit fixes an issue with #74695 where the fptosi and fptoui\nspecializations on wasm were accidentally used on vector types by the\n`simd_cast` intrinsic. This issue showed up as broken CI for the stdsimd\ncrate. Here this commit simply skips the specialization on vector kinds\nflowing into `fpto{s,u}i`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2932638d3450d6e9e0d45ff8b5304cc971fe55ad", "html_url": "https://github.com/rust-lang/rust/commit/2932638d3450d6e9e0d45ff8b5304cc971fe55ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2932638d3450d6e9e0d45ff8b5304cc971fe55ad/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "992988bbc563150ee97b9df1bbff45c73eda50ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/992988bbc563150ee97b9df1bbff45c73eda50ea", "html_url": "https://github.com/rust-lang/rust/commit/992988bbc563150ee97b9df1bbff45c73eda50ea"}, {"sha": "b21a3de35f4841ce4f5f7cd997faf9531ea998f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b21a3de35f4841ce4f5f7cd997faf9531ea998f2", "html_url": "https://github.com/rust-lang/rust/commit/b21a3de35f4841ce4f5f7cd997faf9531ea998f2"}], "stats": {"total": 55, "additions": 31, "deletions": 24}, "files": [{"sha": "a0f4311b33a26c410289e08f32ec1e1cb63f230b", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/2932638d3450d6e9e0d45ff8b5304cc971fe55ad/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2932638d3450d6e9e0d45ff8b5304cc971fe55ad/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=2932638d3450d6e9e0d45ff8b5304cc971fe55ad", "patch": "@@ -728,20 +728,25 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         // codegen. Note that this has a semantic difference in that the\n         // intrinsic can trap whereas `fptoui` never traps. That difference,\n         // however, is handled by `fptosui_may_trap` above.\n+        //\n+        // Note that we skip the wasm intrinsics for vector types where `fptoui`\n+        // must be used instead.\n         if self.wasm_and_missing_nontrapping_fptoint() {\n             let src_ty = self.cx.val_ty(val);\n-            let float_width = self.cx.float_width(src_ty);\n-            let int_width = self.cx.int_width(dest_ty);\n-            let name = match (int_width, float_width) {\n-                (32, 32) => Some(\"llvm.wasm.trunc.unsigned.i32.f32\"),\n-                (32, 64) => Some(\"llvm.wasm.trunc.unsigned.i32.f64\"),\n-                (64, 32) => Some(\"llvm.wasm.trunc.unsigned.i64.f32\"),\n-                (64, 64) => Some(\"llvm.wasm.trunc.unsigned.i64.f64\"),\n-                _ => None,\n-            };\n-            if let Some(name) = name {\n-                let intrinsic = self.get_intrinsic(name);\n-                return self.call(intrinsic, &[val], None);\n+            if self.cx.type_kind(src_ty) != TypeKind::Vector {\n+                let float_width = self.cx.float_width(src_ty);\n+                let int_width = self.cx.int_width(dest_ty);\n+                let name = match (int_width, float_width) {\n+                    (32, 32) => Some(\"llvm.wasm.trunc.unsigned.i32.f32\"),\n+                    (32, 64) => Some(\"llvm.wasm.trunc.unsigned.i32.f64\"),\n+                    (64, 32) => Some(\"llvm.wasm.trunc.unsigned.i64.f32\"),\n+                    (64, 64) => Some(\"llvm.wasm.trunc.unsigned.i64.f64\"),\n+                    _ => None,\n+                };\n+                if let Some(name) = name {\n+                    let intrinsic = self.get_intrinsic(name);\n+                    return self.call(intrinsic, &[val], None);\n+                }\n             }\n         }\n         unsafe { llvm::LLVMBuildFPToUI(self.llbuilder, val, dest_ty, UNNAMED) }\n@@ -750,18 +755,20 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     fn fptosi(&mut self, val: &'ll Value, dest_ty: &'ll Type) -> &'ll Value {\n         if self.wasm_and_missing_nontrapping_fptoint() {\n             let src_ty = self.cx.val_ty(val);\n-            let float_width = self.cx.float_width(src_ty);\n-            let int_width = self.cx.int_width(dest_ty);\n-            let name = match (int_width, float_width) {\n-                (32, 32) => Some(\"llvm.wasm.trunc.signed.i32.f32\"),\n-                (32, 64) => Some(\"llvm.wasm.trunc.signed.i32.f64\"),\n-                (64, 32) => Some(\"llvm.wasm.trunc.signed.i64.f32\"),\n-                (64, 64) => Some(\"llvm.wasm.trunc.signed.i64.f64\"),\n-                _ => None,\n-            };\n-            if let Some(name) = name {\n-                let intrinsic = self.get_intrinsic(name);\n-                return self.call(intrinsic, &[val], None);\n+            if self.cx.type_kind(src_ty) != TypeKind::Vector {\n+                let float_width = self.cx.float_width(src_ty);\n+                let int_width = self.cx.int_width(dest_ty);\n+                let name = match (int_width, float_width) {\n+                    (32, 32) => Some(\"llvm.wasm.trunc.signed.i32.f32\"),\n+                    (32, 64) => Some(\"llvm.wasm.trunc.signed.i32.f64\"),\n+                    (64, 32) => Some(\"llvm.wasm.trunc.signed.i64.f32\"),\n+                    (64, 64) => Some(\"llvm.wasm.trunc.signed.i64.f64\"),\n+                    _ => None,\n+                };\n+                if let Some(name) = name {\n+                    let intrinsic = self.get_intrinsic(name);\n+                    return self.call(intrinsic, &[val], None);\n+                }\n             }\n         }\n         unsafe { llvm::LLVMBuildFPToSI(self.llbuilder, val, dest_ty, UNNAMED) }"}]}