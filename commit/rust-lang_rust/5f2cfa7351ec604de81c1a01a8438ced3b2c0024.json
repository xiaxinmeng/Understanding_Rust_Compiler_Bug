{"sha": "5f2cfa7351ec604de81c1a01a8438ced3b2c0024", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMmNmYTczNTFlYzYwNGRlODFjMWEwMWE4NDM4Y2VkM2IyYzAwMjQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-18T19:44:50Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-18T19:57:00Z"}, "message": "rustc: Add an operation field to compare glue with ==, <=, and < modes", "tree": {"sha": "c526b2a32b727a8fb027db30e15e3d790368cd0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c526b2a32b727a8fb027db30e15e3d790368cd0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f2cfa7351ec604de81c1a01a8438ced3b2c0024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f2cfa7351ec604de81c1a01a8438ced3b2c0024", "html_url": "https://github.com/rust-lang/rust/commit/5f2cfa7351ec604de81c1a01a8438ced3b2c0024", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f2cfa7351ec604de81c1a01a8438ced3b2c0024/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9657e5d2d34e38387863c0ce6d6bdb44b6a1159c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9657e5d2d34e38387863c0ce6d6bdb44b6a1159c", "html_url": "https://github.com/rust-lang/rust/commit/9657e5d2d34e38387863c0ce6d6bdb44b6a1159c"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "f43e74ef2eb8b0efc37e4b1f883d676694ca4961", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f2cfa7351ec604de81c1a01a8438ced3b2c0024/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f2cfa7351ec604de81c1a01a8438ced3b2c0024/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=5f2cfa7351ec604de81c1a01a8438ced3b2c0024", "patch": "@@ -1,3 +1,4 @@\n+// FIXME: Most of these should be uints.\n \n const int rc_base_field_refcnt = 0;\n \n@@ -42,6 +43,10 @@ const int tydesc_field_is_stateful = 9;\n const int tydesc_field_cmp_glue = 10;\n const int n_tydesc_fields = 11;\n \n+const uint cmp_glue_op_eq = 0u;\n+const uint cmp_glue_op_lt = 1u;\n+const uint cmp_glue_op_le = 2u;\n+\n \n const int obj_field_vtbl = 0;\n const int obj_field_box = 1;"}, {"sha": "d07896782c8105882b2f23ce72d5c4bf64adf344", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5f2cfa7351ec604de81c1a01a8438ced3b2c0024/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f2cfa7351ec604de81c1a01a8438ced3b2c0024/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=5f2cfa7351ec604de81c1a01a8438ced3b2c0024", "patch": "@@ -374,12 +374,13 @@ fn T_tydesc(type_names tn) -> TypeRef {\n                                      T_ptr(T_nil()),\n                                      tydescpp,\n                                      pvoid), T_void()));\n-    auto cmp_glue_fn_ty = T_ptr(T_fn(vec(T_ptr(T_nil()),\n+    auto cmp_glue_fn_ty = T_ptr(T_fn(vec(T_ptr(T_i8()),\n                                          T_taskptr(tn),\n                                          T_ptr(T_nil()),\n                                          tydescpp,\n                                          pvoid,\n-                                         pvoid), T_void()));\n+                                         pvoid,\n+                                         T_i8()), T_void()));\n     auto tydesc = T_struct(vec(tydescpp,          // first_param\n                                T_int(),           // size\n                                T_int(),           // align\n@@ -1658,7 +1659,7 @@ fn declare_tydesc(@local_ctxt cx, @ty.t t) {\n \n tag make_generic_glue_helper_fn {\n     mgghf_single(val_and_ty_fn);\n-    mgghf_pair(val_pair_and_ty_fn);\n+    mgghf_cmp;\n }\n \n // declare_tydesc() above must have been called first.\n@@ -1670,8 +1671,7 @@ fn define_tydesc(@local_ctxt cx, @ty.t t, vec[uint] ty_params) {\n     make_generic_glue(cx, t, info.take_glue, mgghf_single(tg), ty_params);\n     auto dg = make_drop_glue;\n     make_generic_glue(cx, t, info.drop_glue, mgghf_single(dg), ty_params);\n-    auto cg = make_cmp_glue;\n-    make_generic_glue(cx, t, info.cmp_glue, mgghf_pair(cg), ty_params);\n+    make_generic_glue(cx, t, info.cmp_glue, mgghf_cmp, ty_params);\n }\n \n fn declare_generic_glue(@local_ctxt cx,\n@@ -1731,10 +1731,13 @@ fn make_generic_glue(@local_ctxt cx,\n             case (mgghf_single(?single_fn)) {\n                 re = single_fn(bcx, llval0, t);\n             }\n-            case (mgghf_pair(?pair_fn)) {\n+            case (mgghf_cmp) {\n                 auto llrawptr1 = llvm.LLVMGetParam(llfn, 5u);\n                 auto llval1 = bcx.build.BitCast(llrawptr0, llty);\n-                re = pair_fn(bcx, llval0, llval1, t);\n+\n+                auto llcmpval = llvm.LLVMGetParam(llfn, 6u);\n+\n+                re = make_cmp_glue(bcx, llval0, llval1, t, llcmpval);\n             }\n         }\n     } else {\n@@ -1982,8 +1985,8 @@ fn decr_refcnt_and_if_zero(@block_ctxt cx,\n     ret res(next_cx, phi);\n }\n \n-fn make_cmp_glue(@block_ctxt cx, ValueRef v0, ValueRef v1, @ty.t t)\n-        -> result {\n+fn make_cmp_glue(@block_ctxt cx, ValueRef v0, ValueRef v1, @ty.t t,\n+        ValueRef llop) -> result {\n     ret res(cx, C_nil());   // TODO\n }\n "}]}