{"sha": "624a9b73113bdacc6a92d2d2b0704735093fae3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNGE5YjczMTEzYmRhY2M2YTkyZDJkMmIwNzA0NzM1MDkzZmFlM2M=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-28T05:17:06Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-10T09:20:55Z"}, "message": "Avoid building multiple reduced graphs for a crate\nthat is referenced by multiple `extern crate` items.", "tree": {"sha": "5f4799f43a4ef2d7d48444afca05831179fa4d53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f4799f43a4ef2d7d48444afca05831179fa4d53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/624a9b73113bdacc6a92d2d2b0704735093fae3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/624a9b73113bdacc6a92d2d2b0704735093fae3c", "html_url": "https://github.com/rust-lang/rust/commit/624a9b73113bdacc6a92d2d2b0704735093fae3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/624a9b73113bdacc6a92d2d2b0704735093fae3c/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0e13dc5ba7a8f91ba564c84c62032735bbdc918", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0e13dc5ba7a8f91ba564c84c62032735bbdc918", "html_url": "https://github.com/rust-lang/rust/commit/b0e13dc5ba7a8f91ba564c84c62032735bbdc918"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "d987930544e2ba2c29a52f36f8d606c6789b1e62", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/624a9b73113bdacc6a92d2d2b0704735093fae3c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/624a9b73113bdacc6a92d2d2b0704735093fae3c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=624a9b73113bdacc6a92d2d2b0704735093fae3c", "patch": "@@ -24,7 +24,7 @@ use {resolve_error, resolve_struct_error, ResolutionError};\n \n use rustc::middle::cstore::LoadedMacros;\n use rustc::hir::def::*;\n-use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n+use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId};\n use rustc::ty;\n use rustc::util::nodemap::FxHashMap;\n \n@@ -233,14 +233,7 @@ impl<'b> Resolver<'b> {\n                 // n.b. we don't need to look at the path option here, because cstore already did\n                 let crate_id = self.session.cstore.extern_mod_stmt_cnum(item.id);\n                 let module = if let Some(crate_id) = crate_id {\n-                    let def_id = DefId {\n-                        krate: crate_id,\n-                        index: CRATE_DEF_INDEX,\n-                    };\n-                    let module = self.arenas.alloc_module(ModuleS {\n-                        populated: Cell::new(false),\n-                        ..ModuleS::new(Some(parent), ModuleKind::Def(Def::Mod(def_id), name))\n-                    });\n+                    let module = self.get_extern_crate_root(crate_id);\n                     let binding = (module, sp, ty::Visibility::Public).to_name_binding();\n                     let binding = self.arenas.alloc_name_binding(binding);\n                     let directive = self.arenas.alloc_import_directive(ImportDirective {\n@@ -504,6 +497,17 @@ impl<'b> Resolver<'b> {\n         }\n     }\n \n+    fn get_extern_crate_root(&mut self, cnum: CrateNum) -> Module<'b> {\n+        let def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n+        let arenas = self.arenas;\n+        *self.extern_crate_roots.entry(cnum).or_insert_with(|| {\n+            arenas.alloc_module(ModuleS {\n+                populated: Cell::new(false),\n+                ..ModuleS::new(None, ModuleKind::Def(Def::Mod(def_id), keywords::Invalid.name()))\n+            })\n+        })\n+    }\n+\n     /// Ensures that the reduced graph rooted at the given external module\n     /// is built, building it if it is not.\n     pub fn populate_module_if_necessary(&mut self, module: Module<'b>) {"}, {"sha": "b16b61b46b83d41d6a0aaebe3bac4999546a55e3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/624a9b73113bdacc6a92d2d2b0704735093fae3c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/624a9b73113bdacc6a92d2d2b0704735093fae3c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=624a9b73113bdacc6a92d2d2b0704735093fae3c", "patch": "@@ -1083,6 +1083,7 @@ pub struct Resolver<'a> {\n     // There will be an anonymous module created around `g` with the ID of the\n     // entry block for `f`.\n     module_map: NodeMap<Module<'a>>,\n+    extern_crate_roots: FxHashMap<CrateNum, Module<'a>>,\n \n     // Whether or not to print error messages. Can be set to true\n     // when getting additional info for error message suggestions,\n@@ -1276,6 +1277,7 @@ impl<'a> Resolver<'a> {\n             export_map: NodeMap(),\n             trait_map: NodeMap(),\n             module_map: module_map,\n+            extern_crate_roots: FxHashMap(),\n \n             emit_errors: true,\n             make_glob_map: make_glob_map == MakeGlobMap::Yes,"}]}