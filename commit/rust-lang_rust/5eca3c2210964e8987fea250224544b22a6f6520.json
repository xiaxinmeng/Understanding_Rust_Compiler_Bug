{"sha": "5eca3c2210964e8987fea250224544b22a6f6520", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlY2EzYzIyMTA5NjRlODk4N2ZlYTI1MDIyNDU0NGIyMmE2ZjY1MjA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-27T22:44:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-27T23:45:54Z"}, "message": "parser: More refactoring of restricted value name checking", "tree": {"sha": "f86f7ddf144c75a301cdaacbf4ee1da36838e81b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f86f7ddf144c75a301cdaacbf4ee1da36838e81b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eca3c2210964e8987fea250224544b22a6f6520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eca3c2210964e8987fea250224544b22a6f6520", "html_url": "https://github.com/rust-lang/rust/commit/5eca3c2210964e8987fea250224544b22a6f6520", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eca3c2210964e8987fea250224544b22a6f6520/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21dc41649bc48cea25dd498c3e11d6f9c50f0aee", "url": "https://api.github.com/repos/rust-lang/rust/commits/21dc41649bc48cea25dd498c3e11d6f9c50f0aee", "html_url": "https://github.com/rust-lang/rust/commit/21dc41649bc48cea25dd498c3e11d6f9c50f0aee"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "8bf388f3d4078a78af3ea1fb6a851dbabef2ff2e", "filename": "src/librustsyntax/parse/common.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5eca3c2210964e8987fea250224544b22a6f6520/src%2Flibrustsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eca3c2210964e8987fea250224544b22a6f6520/src%2Flibrustsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fcommon.rs?ref=5eca3c2210964e8987fea250224544b22a6f6520", "patch": "@@ -95,14 +95,18 @@ fn check_restricted_keywords(p: parser) {\n     alt p.token {\n       token::IDENT(_, false) {\n         let w = token_to_str(p.reader, p.token);\n-        if is_restricted_keyword(p, w) {\n-            p.fatal(\"found `\" + w + \"` in expression position\");\n-        }\n+        check_restricted_keywords_(p, w);\n       }\n       _ { }\n     }\n }\n \n+fn check_restricted_keywords_(p: parser, w: ast::ident) {\n+    if is_restricted_keyword(p, w) {\n+        p.fatal(\"found `\" + w + \"` in restricted position\");\n+    }\n+}\n+\n fn expect_gt(p: parser) {\n     if p.token == token::GT {\n         p.bump();"}, {"sha": "890e59cbb140bb9e0f876662e65ba9d44cedc9d3", "filename": "src/librustsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5eca3c2210964e8987fea250224544b22a6f6520/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eca3c2210964e8987fea250224544b22a6f6520/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fparser.rs?ref=5eca3c2210964e8987fea250224544b22a6f6520", "patch": "@@ -1384,7 +1384,11 @@ fn parse_pat(p: parser) -> @ast::pat {\n             }\n \n             let lo1 = p.last_span.lo;\n-            let fieldname = parse_ident(p);\n+            let fieldname = if p.look_ahead(1u) == token::COLON {\n+                parse_ident(p)\n+            } else {\n+                parse_value_ident(p)\n+            };\n             let hi1 = p.last_span.lo;\n             let fieldpath = ast_util::ident_to_path(mk_sp(lo1, hi1),\n                                           fieldname);\n@@ -1393,9 +1397,6 @@ fn parse_pat(p: parser) -> @ast::pat {\n                 p.bump();\n                 subpat = parse_pat(p);\n             } else {\n-                if is_restricted_keyword(p, fieldname) {\n-                    p.fatal(\"found `\" + fieldname + \"` in binding position\");\n-                }\n                 subpat = @{id: p.get_id(),\n                            node: ast::pat_ident(fieldpath, none),\n                            span: mk_sp(lo, hi)};\n@@ -2147,9 +2148,7 @@ fn parse_item_enum(p: parser, attrs: [ast::attribute]) -> @ast::item {\n     let mut variants: [ast::variant] = [];\n     // Newtype syntax\n     if p.token == token::EQ {\n-        if is_restricted_keyword(p, id) {\n-            p.fatal(\"found `\" + id + \"` in enum constructor position\");\n-        }\n+        check_restricted_keywords_(p, id);\n         p.bump();\n         let ty = parse_ty(p, false);\n         expect(p, token::SEMI);"}, {"sha": "fa744c6823d2f3099ed3e01a0ed3d730f79548ec", "filename": "src/test/compile-fail/bad-value-ident-false.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5eca3c2210964e8987fea250224544b22a6f6520/src%2Ftest%2Fcompile-fail%2Fbad-value-ident-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eca3c2210964e8987fea250224544b22a6f6520/src%2Ftest%2Fcompile-fail%2Fbad-value-ident-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-value-ident-false.rs?ref=5eca3c2210964e8987fea250224544b22a6f6520", "patch": "@@ -1,2 +1,2 @@\n-fn false() { } //! ERROR found `false` in expression position\n+fn false() { } //! ERROR found `false` in restricted position\n fn main() { }\n\\ No newline at end of file"}, {"sha": "9a4a155c97d49688b5d2a8c010c81e9b4b192282", "filename": "src/test/compile-fail/bad-value-ident-true.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5eca3c2210964e8987fea250224544b22a6f6520/src%2Ftest%2Fcompile-fail%2Fbad-value-ident-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eca3c2210964e8987fea250224544b22a6f6520/src%2Ftest%2Fcompile-fail%2Fbad-value-ident-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-value-ident-true.rs?ref=5eca3c2210964e8987fea250224544b22a6f6520", "patch": "@@ -1,2 +1,2 @@\n-fn true() { } //! ERROR found `true` in expression position\n+fn true() { } //! ERROR found `true` in restricted position\n fn main() { }\n\\ No newline at end of file"}, {"sha": "2a9f5838c85c8f6d53993a54c6f4a9a0185923b6", "filename": "src/test/compile-fail/restricted-keyword1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5eca3c2210964e8987fea250224544b22a6f6520/src%2Ftest%2Fcompile-fail%2Frestricted-keyword1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eca3c2210964e8987fea250224544b22a6f6520/src%2Ftest%2Fcompile-fail%2Frestricted-keyword1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frestricted-keyword1.rs?ref=5eca3c2210964e8987fea250224544b22a6f6520", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:found `let` in binding position\n+// error-pattern:found `let` in restricted position\n \n fn main() {\n     alt true {"}, {"sha": "665700386b8ddf97ffd50da126648508ad286899", "filename": "src/test/compile-fail/restricted-keyword2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5eca3c2210964e8987fea250224544b22a6f6520/src%2Ftest%2Fcompile-fail%2Frestricted-keyword2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eca3c2210964e8987fea250224544b22a6f6520/src%2Ftest%2Fcompile-fail%2Frestricted-keyword2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frestricted-keyword2.rs?ref=5eca3c2210964e8987fea250224544b22a6f6520", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:found `let` in enum constructor position\n+// error-pattern:found `let` in restricted position\n \n fn main() {\n     enum let = int;"}]}