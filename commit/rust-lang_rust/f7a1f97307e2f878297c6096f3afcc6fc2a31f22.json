{"sha": "f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YTFmOTczMDdlMmY4NzgyOTdjNjA5NmYzYWZjYzZmYzJhMzFmMjI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-03T18:34:04Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-15T16:06:58Z"}, "message": "Change E0758 to E0759 to avoid conflict with #72912", "tree": {"sha": "7f7c2ee1f1aef5465de5753e89908ddf7375ba21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f7c2ee1f1aef5465de5753e89908ddf7375ba21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "html_url": "https://github.com/rust-lang/rust/commit/f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e31367de6b5ed3878711cdd1761828587b9639fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e31367de6b5ed3878711cdd1761828587b9639fb", "html_url": "https://github.com/rust-lang/rust/commit/e31367de6b5ed3878711cdd1761828587b9639fb"}], "stats": {"total": 144, "additions": 106, "deletions": 38}, "files": [{"sha": "99ef226f94aaeba79ba54f86f629c160374d4c44", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "patch": "@@ -439,6 +439,7 @@ E0752: include_str!(\"./error_codes/E0752.md\"),\n E0753: include_str!(\"./error_codes/E0753.md\"),\n E0754: include_str!(\"./error_codes/E0754.md\"),\n E0758: include_str!(\"./error_codes/E0758.md\"),\n+E0759: include_str!(\"./error_codes/E0759.md\"),\n E0760: include_str!(\"./error_codes/E0760.md\"),\n E0761: include_str!(\"./error_codes/E0761.md\"),\n E0762: include_str!(\"./error_codes/E0762.md\"),"}, {"sha": "a74759bdf634b0c5deb874b8269468d5d2981507", "filename": "src/librustc_error_codes/error_codes/E0759.md", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Flibrustc_error_codes%2Ferror_codes%2FE0759.md", "raw_url": "https://github.com/rust-lang/rust/raw/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Flibrustc_error_codes%2Ferror_codes%2FE0759.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0759.md?ref=f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "patch": "@@ -0,0 +1,67 @@\n+A `'static` requirement in a return type involving a trait is not fulfilled.\n+\n+Erroneous code examples:\n+\n+```compile_fail,E0759\n+use std::fmt::Debug;\n+\n+fn foo(x: &i32) -> impl Debug {\n+    x\n+}\n+```\n+\n+```compile_fail,E0759\n+# use std::fmt::Debug;\n+fn bar(x: &i32) -> Box<dyn Debug> {\n+    Box::new(x)\n+}\n+```\n+\n+These examples have the same semantics as the following:\n+\n+```compile_fail,E0759\n+# use std::fmt::Debug;\n+fn foo(x: &i32) -> impl Debug + 'static {\n+    x\n+}\n+```\n+\n+```compile_fail,E0759\n+# use std::fmt::Debug;\n+fn bar(x: &i32) -> Box<dyn Debug + 'static> {\n+    Box::new(x)\n+}\n+```\n+\n+Both [`dyn Trait`] and [`impl Trait`] in return types have a an implicit\n+`'static` requirement, meaning that the value implementing them that is being\n+returned has to be either a `'static` borrow or an owned value.\n+\n+In order to change the requirement from `'static` to be a lifetime derived from\n+its arguments, you can add an explicit bound, either to an anonymous lifetime\n+`'_` or some appropriate named lifetime.\n+\n+```\n+# use std::fmt::Debug;\n+fn foo(x: &i32) -> impl Debug + '_ {\n+    x\n+}\n+fn bar(x: &i32) -> Box<dyn Debug + '_> {\n+    Box::new(x)\n+}\n+```\n+\n+These are equivalent to the following explicit lifetime annotations:\n+\n+```\n+# use std::fmt::Debug;\n+fn foo<'a>(x: &'a i32) -> impl Debug + 'a {\n+    x\n+}\n+fn bar<'a>(x: &'a i32) -> Box<dyn Debug + 'a> {\n+    Box::new(x)\n+}\n+```\n+\n+[`dyn Trait`]: https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n+[`impl Trait`]: https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits"}, {"sha": "853a414290704401323b76d7a1554f0060ef2757", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                     let mut err = struct_span_err!(\n                         self.tcx().sess,\n                         sp,\n-                        E0758,\n+                        E0759,\n                         \"cannot infer an appropriate lifetime\"\n                     );\n                     err.span_label("}, {"sha": "0f58b158904db0a2fb3aa8fdb2e5c935c07e2707", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "patch": "@@ -1,4 +1,4 @@\n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/issue-62097.rs:12:31\n    |\n LL |     pub async fn run_dummy_fn(&self) {\n@@ -11,4 +11,4 @@ LL |         foo(|| self.bar()).await;\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0758`.\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "e1fa4f02b6fcf770f2585118eae9c58c507983f4", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "patch": "@@ -1,4 +1,4 @@\n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:3:35\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n@@ -16,7 +16,7 @@ help: to declare that the `impl Trait` captures data from argument `x`, you can\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                                 ^^^^\n \n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:6:44\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n@@ -34,7 +34,7 @@ help: to declare that the `impl Trait` captures data from argument `x`, you can\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                          ^^^^\n \n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:9:46\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n@@ -56,7 +56,7 @@ help: alternatively, add an explicit `'static` bound to this reference\n LL | fn elided2(x: &'static i32) -> impl Copy + 'static { x }\n    |               ^^^^^^^^^^^^\n \n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:12:55\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n@@ -86,7 +86,7 @@ LL | fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n    |               |\n    |               help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n \n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:33:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n@@ -123,7 +123,7 @@ LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n    |                                 |\n    |                                 help: consider adding an explicit lifetime bound...: `T: 'static +`\n \n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:18:50\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n@@ -136,7 +136,7 @@ help: to declare that the trait object captures data from argument `x`, you can\n LL | fn elided3(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n    |                                      ^^^^\n \n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:21:59\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n@@ -149,7 +149,7 @@ help: to declare that the trait object captures data from argument `x`, you can\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n    |                                               ^^^^\n \n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:24:60\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n@@ -166,7 +166,7 @@ help: alternatively, add an explicit `'static` bound to this reference\n LL | fn elided4(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |               ^^^^^^^^^^^^\n \n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:27:69\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n@@ -183,5 +183,5 @@ LL | fn explicit4<'a>(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x)\n \n error: aborting due to 12 previous errors\n \n-Some errors have detailed explanations: E0310, E0621, E0623, E0758.\n+Some errors have detailed explanations: E0310, E0621, E0623, E0759.\n For more information about an error, try `rustc --explain E0310`."}, {"sha": "df0db6e4fc6df927297d9793d271390de5bc21dd", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "patch": "@@ -1,4 +1,4 @@\n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/static-return-lifetime-infered.rs:7:16\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n@@ -18,7 +18,7 @@ help: to declare that the `impl Trait` captures data from argument `self`, you c\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                                           ^^^^\n \n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/static-return-lifetime-infered.rs:11:16\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n@@ -40,4 +40,4 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0758`.\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "919594fc9af4b434967d1975e1a23b41346c5f6e", "filename": "src/test/ui/issues/issue-16922.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr?ref=f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "patch": "@@ -1,4 +1,4 @@\n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/issue-16922.rs:4:14\n    |\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n@@ -13,4 +13,4 @@ LL | fn foo<T: Any>(value: &T) -> Box<dyn Any + '_> {\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0758`.\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "1b1e0d9610724b6e83c1a48c19e2a0ff427fb158", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr?ref=f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "patch": "@@ -1,4 +1,4 @@\n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/object-lifetime-default-from-box-error.rs:18:5\n    |\n LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n@@ -23,5 +23,5 @@ LL |     ss.r = b;\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0621, E0758.\n+Some errors have detailed explanations: E0621, E0759.\n For more information about an error, try `rustc --explain E0621`."}, {"sha": "7f5a3a47976c7d38f812fa9fb9a1232657dd2a1c", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "patch": "@@ -1,4 +1,4 @@\n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/region-object-lifetime-in-coercion.rs:8:46\n    |\n LL | fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n@@ -15,7 +15,7 @@ help: alternatively, add an explicit `'static` bound to this reference\n LL | fn a(v: &'static [u8]) -> Box<dyn Foo + 'static> {\n    |         ^^^^^^^^^^^^^\n \n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/region-object-lifetime-in-coercion.rs:13:14\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n@@ -32,7 +32,7 @@ help: alternatively, add an explicit `'static` bound to this reference\n LL | fn b(v: &'static [u8]) -> Box<dyn Foo + 'static> {\n    |         ^^^^^^^^^^^^^\n \n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/region-object-lifetime-in-coercion.rs:19:14\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n@@ -79,5 +79,5 @@ LL |     Box::new(v)\n \n error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0495, E0758.\n+Some errors have detailed explanations: E0495, E0759.\n For more information about an error, try `rustc --explain E0495`."}, {"sha": "114e4052aae09b63159cc61e3899af7c0e982403", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "patch": "@@ -1,4 +1,4 @@\n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/regions-close-object-into-object-2.rs:10:11\n    |\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n@@ -17,4 +17,4 @@ LL | fn g<'a, T: 'static>(v: std::boxed::Box<(dyn A<T> + 'static)>) -> Box<dyn X\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0758`.\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "850d81940791fd168afbe9224765cf642bbaaf61", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "patch": "@@ -1,4 +1,4 @@\n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/regions-close-object-into-object-4.rs:10:11\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n@@ -17,4 +17,4 @@ LL | fn i<'a, T, U>(v: std::boxed::Box<(dyn A<U> + 'static)>) -> Box<dyn X + 'st\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0758`.\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "67eee3bb6e28127bbd8db3417d40386340b6a38f", "filename": "src/test/ui/regions/regions-proc-bound-capture.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr?ref=f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "patch": "@@ -1,4 +1,4 @@\n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/regions-proc-bound-capture.rs:9:14\n    |\n LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n@@ -18,4 +18,4 @@ LL | fn static_proc(x: &'static isize) -> Box<dyn FnMut() -> (isize) + 'static>\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0758`.\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "88bd990b1e81b095e1c01ce8da9f0802b787ff90", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "patch": "@@ -1,4 +1,4 @@\n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:16\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n@@ -9,4 +9,4 @@ LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0758`.\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "2e10ab3d3f9b84a8c1802524008ab8020e311bd2", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "patch": "@@ -1,4 +1,4 @@\n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:44\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n@@ -18,4 +18,4 @@ LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0758`.\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "9ab060328537b56b08f0f3dcf6b023edfcd3fea5", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "patch": "@@ -6,7 +6,7 @@ LL | fn baz<G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |        |\n    |        help: consider introducing lifetime `'a` here: `'a,`\n \n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/missing-lifetimes-in-signature.rs:19:5\n    |\n LL |   fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n@@ -125,5 +125,5 @@ LL | fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n \n error: aborting due to 7 previous errors\n \n-Some errors have detailed explanations: E0261, E0309, E0621, E0758.\n+Some errors have detailed explanations: E0261, E0309, E0621, E0759.\n For more information about an error, try `rustc --explain E0261`."}, {"sha": "dda5de431d30944e4e0f9a1f4f6c5c221773c609", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7a1f97307e2f878297c6096f3afcc6fc2a31f22/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=f7a1f97307e2f878297c6096f3afcc6fc2a31f22", "patch": "@@ -1,4 +1,4 @@\n-error[E0758]: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/dyn-trait-underscore.rs:8:20\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n@@ -14,4 +14,4 @@ LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T> + '_> {\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0758`.\n+For more information about this error, try `rustc --explain E0759`."}]}