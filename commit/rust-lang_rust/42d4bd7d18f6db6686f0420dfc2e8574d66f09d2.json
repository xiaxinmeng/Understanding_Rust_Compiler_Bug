{"sha": "42d4bd7d18f6db6686f0420dfc2e8574d66f09d2", "node_id": "C_kwDOAAsO6NoAKDQyZDRiZDdkMThmNmRiNjY4NmYwNDIwZGZjMmU4NTc0ZDY2ZjA5ZDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-13T16:50:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-13T16:50:33Z"}, "message": "Auto merge of #107924 - eggyal:move_fold_visit_traits_to_type_lib_with_trait_alias, r=oli-obk\n\nMove folding & visiting traits into type library\n\nThis is a rework of #107712, following feedback on that PR.\n\nIn particular, this version uses trait aliases to reduce the API churn for trait consumers.  Doing so requires a workaround for #107747 until its fix in #107803 is merged into the stage0 compiler; this workaround, which uses conditional compilation based on the `bootstrap` configuration predicate, sits in dedicated commit b409329c for ease of reversion.\n\nThe possibility of the `rustc_middle` crate retaining its own distinct versions of each folding/visiting trait, blanket-implemented on all types that implement the respective trait in the type library, was also explored: however since this would necessitate making each `rustc_middle` trait a subtrait of the respective type library trait (so that such blanket implementations can delegate their generic methods), no benefit would be gained.\n\nr? types", "tree": {"sha": "30ac12490f2a7bc875fcfeba5d67d38b32257ab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30ac12490f2a7bc875fcfeba5d67d38b32257ab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42d4bd7d18f6db6686f0420dfc2e8574d66f09d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42d4bd7d18f6db6686f0420dfc2e8574d66f09d2", "html_url": "https://github.com/rust-lang/rust/commit/42d4bd7d18f6db6686f0420dfc2e8574d66f09d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42d4bd7d18f6db6686f0420dfc2e8574d66f09d2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3077fbc090049d9ac3c6299e5e3c08da09f2e08", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3077fbc090049d9ac3c6299e5e3c08da09f2e08", "html_url": "https://github.com/rust-lang/rust/commit/b3077fbc090049d9ac3c6299e5e3c08da09f2e08"}, {"sha": "340d9e818a5139c842edf7859cd3aba9361f4e08", "url": "https://api.github.com/repos/rust-lang/rust/commits/340d9e818a5139c842edf7859cd3aba9361f4e08", "html_url": "https://github.com/rust-lang/rust/commit/340d9e818a5139c842edf7859cd3aba9361f4e08"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "e9dc7351b58ef317b3047b81adfcb0d1effc60f8", "filename": "clippy_utils/src/mir/possible_borrower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42d4bd7d18f6db6686f0420dfc2e8574d66f09d2/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d4bd7d18f6db6686f0420dfc2e8574d66f09d2/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs?ref=42d4bd7d18f6db6686f0420dfc2e8574d66f09d2", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_lint::LateContext;\n use rustc_middle::mir::{self, visit::Visitor as _, Mutability};\n-use rustc_middle::ty::{self, visit::TypeVisitor};\n+use rustc_middle::ty::{self, visit::ir::TypeVisitor, TyCtxt};\n use rustc_mir_dataflow::{impls::MaybeStorageLive, Analysis, ResultsCursor};\n use std::borrow::Cow;\n use std::ops::ControlFlow;\n@@ -136,7 +136,7 @@ impl<'a, 'b, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'b,\n \n struct ContainsRegion;\n \n-impl TypeVisitor<'_> for ContainsRegion {\n+impl TypeVisitor<TyCtxt<'_>> for ContainsRegion {\n     type BreakTy = ();\n \n     fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "c785d89e28012f880709f266a8e577759aad6945", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42d4bd7d18f6db6686f0420dfc2e8574d66f09d2/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d4bd7d18f6db6686f0420dfc2e8574d66f09d2/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=42d4bd7d18f6db6686f0420dfc2e8574d66f09d2", "patch": "@@ -17,7 +17,7 @@ use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::{\n     self, AdtDef, AliasTy, AssocKind, Binder, BoundRegion, DefIdTree, FnSig, IntTy, List, ParamEnv, Predicate,\n-    PredicateKind, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy,\n+    PredicateKind, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, ir::TypeVisitor, UintTy,\n     VariantDef, VariantDiscr,\n };\n use rustc_middle::ty::{GenericArg, GenericArgKind};\n@@ -838,7 +838,7 @@ pub fn for_each_top_level_late_bound_region<B>(\n         index: u32,\n         f: F,\n     }\n-    impl<'tcx, B, F: FnMut(BoundRegion) -> ControlFlow<B>> TypeVisitor<'tcx> for V<F> {\n+    impl<'tcx, B, F: FnMut(BoundRegion) -> ControlFlow<B>> TypeVisitor<TyCtxt<'tcx>> for V<F> {\n         type BreakTy = B;\n         fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let RegionKind::ReLateBound(idx, bound) = r.kind() && idx.as_u32() == self.index {"}]}