{"sha": "fb0793c610d99857820721f58456920e9e0bc240", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMDc5M2M2MTBkOTk4NTc4MjA3MjFmNTg0NTY5MjBlOWUwYmMyNDA=", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-06-14T23:57:21Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-06-14T23:57:21Z"}, "message": "Add some comments to librustc_typeck/check/callee.rs", "tree": {"sha": "971671ec18bd75013142dfbea6bd59138a2c9333", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/971671ec18bd75013142dfbea6bd59138a2c9333"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb0793c610d99857820721f58456920e9e0bc240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0793c610d99857820721f58456920e9e0bc240", "html_url": "https://github.com/rust-lang/rust/commit/fb0793c610d99857820721f58456920e9e0bc240", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb0793c610d99857820721f58456920e9e0bc240/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5393a2995bcea9a927c23d88a921c55bea886771", "url": "https://api.github.com/repos/rust-lang/rust/commits/5393a2995bcea9a927c23d88a921c55bea886771", "html_url": "https://github.com/rust-lang/rust/commit/5393a2995bcea9a927c23d88a921c55bea886771"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "f86b7f07b7fc48b46293dfe4e9877c0c1b5985fb", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fb0793c610d99857820721f58456920e9e0bc240/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0793c610d99857820721f58456920e9e0bc240/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=fb0793c610d99857820721f58456920e9e0bc240", "patch": "@@ -220,21 +220,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let method = self.register_infer_ok_obligations(ok);\n                 let mut autoref = None;\n                 if borrow {\n-                    if let ty::Ref(region, _, mutbl) = method.sig.inputs()[0].kind {\n-                        let mutbl = match mutbl {\n-                            hir::Mutability::Not => AutoBorrowMutability::Not,\n-                            hir::Mutability::Mut => AutoBorrowMutability::Mut {\n-                                // For initial two-phase borrow\n-                                // deployment, conservatively omit\n-                                // overloaded function call ops.\n-                                allow_two_phase_borrow: AllowTwoPhase::No,\n-                            },\n-                        };\n-                        autoref = Some(Adjustment {\n-                            kind: Adjust::Borrow(AutoBorrow::Ref(region, mutbl)),\n-                            target: method.sig.inputs()[0],\n-                        });\n-                    }\n+                    // Check for &self vs &mut self in the method signature. Since this is either\n+                    // the Fn or FnMut trait, it should be one of those.\n+                    let (region, mutbl) = if let ty::Ref(r, _, mutbl) = method.sig.inputs()[0].kind\n+                    {\n+                        (r, mutbl)\n+                    } else {\n+                        span_bug!(call_expr.span, \"input to call/call_mut is not a ref?\");\n+                    };\n+\n+                    let mutbl = match mutbl {\n+                        hir::Mutability::Not => AutoBorrowMutability::Not,\n+                        hir::Mutability::Mut => AutoBorrowMutability::Mut {\n+                            // For initial two-phase borrow\n+                            // deployment, conservatively omit\n+                            // overloaded function call ops.\n+                            allow_two_phase_borrow: AllowTwoPhase::No,\n+                        },\n+                    };\n+                    autoref = Some(Adjustment {\n+                        kind: Adjust::Borrow(AutoBorrow::Ref(region, mutbl)),\n+                        target: method.sig.inputs()[0],\n+                    });\n                 }\n                 return Some((autoref, method));\n             }"}]}