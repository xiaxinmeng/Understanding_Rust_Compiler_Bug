{"sha": "fe5d84d2aada20f6dd5798725eb5f203344403d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNWQ4NGQyYWFkYTIwZjZkZDU3OTg3MjVlYjVmMjAzMzQ0NDAzZDk=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-04T16:26:30Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-04T16:43:25Z"}, "message": "Simplify", "tree": {"sha": "92ef048e248141133181677c03d7ee6dd57b80c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92ef048e248141133181677c03d7ee6dd57b80c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe5d84d2aada20f6dd5798725eb5f203344403d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe5d84d2aada20f6dd5798725eb5f203344403d9", "html_url": "https://github.com/rust-lang/rust/commit/fe5d84d2aada20f6dd5798725eb5f203344403d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe5d84d2aada20f6dd5798725eb5f203344403d9/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a591ede2e21807f23013fde9d63ee0af04d6faf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a591ede2e21807f23013fde9d63ee0af04d6faf3", "html_url": "https://github.com/rust-lang/rust/commit/a591ede2e21807f23013fde9d63ee0af04d6faf3"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "81969bc693101162d4527073ca5f5a726ab7c1b9", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe5d84d2aada20f6dd5798725eb5f203344403d9/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe5d84d2aada20f6dd5798725eb5f203344403d9/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=fe5d84d2aada20f6dd5798725eb5f203344403d9", "patch": "@@ -354,7 +354,7 @@ impl PatternFolder<'tcx> for LiteralExpander<'tcx> {\n }\n \n impl<'tcx> Pat<'tcx> {\n-    fn is_wildcard(&self) -> bool {\n+    pub(super) fn is_wildcard(&self) -> bool {\n         match *self.kind {\n             PatKind::Binding { subpattern: None, .. } | PatKind::Wild => true,\n             _ => false,"}, {"sha": "8156cfe7ab51d044e4be3a4d85b0782edf957b5f", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fe5d84d2aada20f6dd5798725eb5f203344403d9/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe5d84d2aada20f6dd5798725eb5f203344403d9/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=fe5d84d2aada20f6dd5798725eb5f203344403d9", "patch": "@@ -466,34 +466,29 @@ fn check_exhaustive<'p, 'tcx>(\n     };\n     // In the case of an empty match, replace the '`_` not covered' diagnostic with something more\n     // informative.\n+    let mut err;\n     if is_empty_match && !non_empty_enum {\n-        let mut err = create_e0004(\n+        err = create_e0004(\n             cx.tcx.sess,\n             sp,\n             format!(\"non-exhaustive patterns: type `{}` is non-empty\", scrut_ty),\n         );\n-        err.help(\n-            \"ensure that all possible cases are being handled, \\\n-             possibly by adding wildcards or more match arms\",\n+    } else {\n+        let joined_patterns = joined_uncovered_patterns(&witnesses);\n+        err = create_e0004(\n+            cx.tcx.sess,\n+            sp,\n+            format!(\"non-exhaustive patterns: {} not covered\", joined_patterns),\n         );\n-        adt_defined_here(cx, &mut err, scrut_ty, &[]);\n-        err.emit();\n-        return;\n-    }\n+        err.span_label(sp, pattern_not_covered_label(&witnesses, &joined_patterns));\n+    };\n \n-    let joined_patterns = joined_uncovered_patterns(&witnesses);\n-    let mut err = create_e0004(\n-        cx.tcx.sess,\n-        sp,\n-        format!(\"non-exhaustive patterns: {} not covered\", joined_patterns),\n-    );\n-    err.span_label(sp, pattern_not_covered_label(&witnesses, &joined_patterns));\n     adt_defined_here(cx, &mut err, scrut_ty, &witnesses);\n     err.help(\n         \"ensure that all possible cases are being handled, \\\n          possibly by adding wildcards or more match arms\",\n-    )\n-    .emit();\n+    );\n+    err.emit();\n }\n \n fn joined_uncovered_patterns(witnesses: &[super::Pat<'_>]) -> String {"}]}