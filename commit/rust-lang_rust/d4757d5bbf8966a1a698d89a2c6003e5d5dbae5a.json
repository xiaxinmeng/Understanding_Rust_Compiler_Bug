{"sha": "d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NzU3ZDViYmY4OTY2YTFhNjk4ZDg5YTJjNjAwM2U1ZDVkYmFlNWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-29T03:32:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-29T03:32:51Z"}, "message": "Rollup merge of #63961 - JohnTitor:improve-require-lang-item, r=estebank\n\nAdd Option<Span> to `require_lang_item`\n\nFixes #63954\n\nI'm not sure where to take `Some(span)` or something so I use `None` in many places.\nr? @estebank", "tree": {"sha": "8f19d4e19279c8a212eccc3d3b8b91c2d2992dc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f19d4e19279c8a212eccc3d3b8b91c2d2992dc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdZ0djCRBK7hj4Ov3rIwAAdHIIAFev4ECcrfzPm5v9D/0DjoJ9\ndXe9W3TXfnGR7aP2+HvN2UIm4ELcVqvmczelmrPDAw/Jmi4gpM4QrDSqwkTPtcPO\n2lExfPLfJOIqcdsxLnI2htvuPRx0FTyPEt+CiN43m/tL3+EcrwafMOK8uuNlTO9d\nniowgoPXaiyXuiyVz8yuWoz7EjIv3wYKTsZL/RFv4RhSxk80A/ScLQxtdhypWxgj\nxp3pvyF3h/wMaFzo3DwAhkEqKjUQpmPfJHmmKMu+BQtl8aGnp0tOT2OBQxhHoai0\nuTikxTyGUN9zw6v0SE/VZnwKSqWeC/zbQakIJQL0Yvoqpsog1oJi0yPMyJxfTCo=\n=W75l\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f19d4e19279c8a212eccc3d3b8b91c2d2992dc3\nparent 99d271f400b602f79c5f0527bf688ffacf485a7e\nparent ede7a777c08658ec54abea504da0e46cd0fb5e5b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567049571 +0200\ncommitter GitHub <noreply@github.com> 1567049571 +0200\n\nRollup merge of #63961 - JohnTitor:improve-require-lang-item, r=estebank\n\nAdd Option<Span> to `require_lang_item`\n\nFixes #63954\n\nI'm not sure where to take `Some(span)` or something so I use `None` in many places.\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "html_url": "https://github.com/rust-lang/rust/commit/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99d271f400b602f79c5f0527bf688ffacf485a7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/99d271f400b602f79c5f0527bf688ffacf485a7e", "html_url": "https://github.com/rust-lang/rust/commit/99d271f400b602f79c5f0527bf688ffacf485a7e"}, {"sha": "ede7a777c08658ec54abea504da0e46cd0fb5e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ede7a777c08658ec54abea504da0e46cd0fb5e5b", "html_url": "https://github.com/rust-lang/rust/commit/ede7a777c08658ec54abea504da0e46cd0fb5e5b"}], "stats": {"total": 70, "additions": 42, "deletions": 28}, "files": [{"sha": "cc28567e2fc9ee3eaa7d19257c7bf839d0392e6c", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "patch": "@@ -1460,7 +1460,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n         }\n \n-        let copy_def_id = self.tcx.require_lang_item(lang_items::CopyTraitLangItem);\n+        let copy_def_id = self.tcx.require_lang_item(lang_items::CopyTraitLangItem, None);\n \n         // this can get called from typeck (by euv), and moves_by_default\n         // rightly refuses to work with inference variables, but"}, {"sha": "334c06618bb2826a0c9f978c767ee79af68b20bb", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "patch": "@@ -381,9 +381,13 @@ language_item_table! {\n impl<'tcx> TyCtxt<'tcx> {\n     /// Returns the `DefId` for a given `LangItem`.\n     /// If not found, fatally abort compilation.\n-    pub fn require_lang_item(&self, lang_item: LangItem) -> DefId {\n+    pub fn require_lang_item(&self, lang_item: LangItem, span: Option<Span>) -> DefId {\n         self.lang_items().require(lang_item).unwrap_or_else(|msg| {\n-            self.sess.fatal(&msg)\n+            if let Some(span) = span {\n+                self.sess.span_fatal(span, &msg)\n+            } else {\n+                self.sess.fatal(&msg)\n+            }\n         })\n     }\n }"}, {"sha": "217c887d5254eb66bcee93b126fb557500af9db7", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "patch": "@@ -3513,7 +3513,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                 // We can only make objects from sized types.\n                 let tr = ty::TraitRef {\n-                    def_id: tcx.require_lang_item(lang_items::SizedTraitLangItem),\n+                    def_id: tcx.require_lang_item(lang_items::SizedTraitLangItem, None),\n                     substs: tcx.mk_substs_trait(source, &[]),\n                 };\n                 nested.push(predicate_to_obligation(tr.to_predicate()));"}, {"sha": "c0d86a79882efb5ad221c46ba166d79bd181b3d1", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "patch": "@@ -2385,13 +2385,13 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let def_id = self.require_lang_item(lang_items::OwnedBoxLangItem);\n+        let def_id = self.require_lang_item(lang_items::OwnedBoxLangItem, None);\n         self.mk_generic_adt(def_id, ty)\n     }\n \n     #[inline]\n     pub fn mk_maybe_uninit(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let def_id = self.require_lang_item(lang_items::MaybeUninitLangItem);\n+        let def_id = self.require_lang_item(lang_items::MaybeUninitLangItem, None);\n         self.mk_generic_adt(def_id, ty)\n     }\n "}, {"sha": "a26fa72f330410180080ffa6f143e1be1819e210", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "patch": "@@ -327,7 +327,7 @@ impl<'tcx> Instance<'tcx> {\n     }\n \n     pub fn resolve_drop_in_place(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> ty::Instance<'tcx> {\n-        let def_id = tcx.require_lang_item(DropInPlaceFnLangItem);\n+        let def_id = tcx.require_lang_item(DropInPlaceFnLangItem, None);\n         let substs = tcx.intern_substs(&[ty.into()]);\n         Instance::resolve(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap()\n     }"}, {"sha": "90b3b7ebb06350fca4cecdd7e70f564604a98fed", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "patch": "@@ -2588,12 +2588,12 @@ impl<'tcx> ClosureKind {\n \n     pub fn trait_did(&self, tcx: TyCtxt<'tcx>) -> DefId {\n         match *self {\n-            ClosureKind::Fn => tcx.require_lang_item(FnTraitLangItem),\n+            ClosureKind::Fn => tcx.require_lang_item(FnTraitLangItem, None),\n             ClosureKind::FnMut => {\n-                tcx.require_lang_item(FnMutTraitLangItem)\n+                tcx.require_lang_item(FnMutTraitLangItem, None)\n             }\n             ClosureKind::FnOnce => {\n-                tcx.require_lang_item(FnOnceTraitLangItem)\n+                tcx.require_lang_item(FnOnceTraitLangItem, None)\n             }\n         }\n     }"}, {"sha": "7a77418050cdb5100e7cae724b0af7db311cfbd1", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "patch": "@@ -998,7 +998,7 @@ impl<'tcx> ty::TyS<'tcx> {\n \n fn is_copy_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n     let (param_env, ty) = query.into_parts();\n-    let trait_def_id = tcx.require_lang_item(lang_items::CopyTraitLangItem);\n+    let trait_def_id = tcx.require_lang_item(lang_items::CopyTraitLangItem, None);\n     tcx.infer_ctxt()\n         .enter(|infcx| traits::type_known_to_meet_bound_modulo_regions(\n             &infcx,\n@@ -1011,7 +1011,7 @@ fn is_copy_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n \n fn is_sized_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n     let (param_env, ty) = query.into_parts();\n-    let trait_def_id = tcx.require_lang_item(lang_items::SizedTraitLangItem);\n+    let trait_def_id = tcx.require_lang_item(lang_items::SizedTraitLangItem, None);\n     tcx.infer_ctxt()\n         .enter(|infcx| traits::type_known_to_meet_bound_modulo_regions(\n             &infcx,\n@@ -1024,7 +1024,7 @@ fn is_sized_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n \n fn is_freeze_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n     let (param_env, ty) = query.into_parts();\n-    let trait_def_id = tcx.require_lang_item(lang_items::FreezeTraitLangItem);\n+    let trait_def_id = tcx.require_lang_item(lang_items::FreezeTraitLangItem, None);\n     tcx.infer_ctxt()\n         .enter(|infcx| traits::type_known_to_meet_bound_modulo_regions(\n             &infcx,"}, {"sha": "d6de217f79c29c7086a8dc86d6140ddd1122dcef", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "patch": "@@ -221,7 +221,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         if !subty.has_escaping_bound_vars() {\n             let cause = self.cause(cause);\n             let trait_ref = ty::TraitRef {\n-                def_id: self.infcx.tcx.require_lang_item(lang_items::SizedTraitLangItem),\n+                def_id: self.infcx.tcx.require_lang_item(lang_items::SizedTraitLangItem, None),\n                 substs: self.infcx.tcx.mk_substs_trait(subty, &[]),\n             };\n             self.out.push(traits::Obligation::new(cause, self.param_env, trait_ref.to_predicate()));"}, {"sha": "4acbe0356b47cb174cdbe581ce83071af9de4e86", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "patch": "@@ -456,7 +456,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n         let arg_argv = param_argv;\n \n         let (start_fn, args) = if use_start_lang_item {\n-            let start_def_id = cx.tcx().require_lang_item(StartFnLangItem);\n+            let start_def_id = cx.tcx().require_lang_item(StartFnLangItem, None);\n             let start_fn = callee::resolve_and_get_fn(\n                 cx,\n                 start_def_id,"}, {"sha": "d5890d00ea80fb8384c8e5fd7803377eae9c557b", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "patch": "@@ -443,7 +443,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             _ => bug!(\"non_scalar_compare called on non-reference type: {}\", ty),\n         };\n \n-        let eq_def_id = self.hir.tcx().require_lang_item(EqTraitLangItem);\n+        let eq_def_id = self.hir.tcx().require_lang_item(EqTraitLangItem, None);\n         let method = self.hir.trait_method(eq_def_id, sym::eq, deref_ty, &[deref_ty.into()]);\n \n         let bool_ty = self.hir.bool_ty();"}, {"sha": "a77421ce15008011058ce3a83241cd2f24c0f257", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "patch": "@@ -1752,7 +1752,10 @@ impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants<'tcx> {\n                 fulfillment_cx.register_bound(&infcx,\n                                               param_env,\n                                               ty,\n-                                              tcx.require_lang_item(lang_items::SyncTraitLangItem),\n+                                              tcx.require_lang_item(\n+                                                  lang_items::SyncTraitLangItem,\n+                                                  Some(body.span)\n+                                              ),\n                                               cause);\n                 if let Err(err) = fulfillment_cx.select_all_or_error(&infcx) {\n                     infcx.report_fulfillment_errors(&err, None, false);"}, {"sha": "f3e03e7f81daa89c9f5c09bfeb8135c85e92403c", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "patch": "@@ -897,7 +897,10 @@ where\n     ) -> BasicBlock {\n         let tcx = self.tcx();\n         let unit_temp = Place::from(self.new_temp(tcx.mk_unit()));\n-        let free_func = tcx.require_lang_item(lang_items::BoxFreeFnLangItem);\n+        let free_func = tcx.require_lang_item(\n+            lang_items::BoxFreeFnLangItem,\n+            Some(self.source_info.span)\n+        );\n         let args = adt.variants[VariantIdx::new(0)].fields.iter().enumerate().map(|(i, f)| {\n             let field = Field::new(i);\n             let field_ty = f.ty(self.tcx(), substs);"}, {"sha": "55e7a10f1aaa4d107293d292767c225f775e538e", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "patch": "@@ -649,7 +649,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn type_is_known_to_be_sized_modulo_regions(&self, ty: Ty<'tcx>, span: Span) -> bool {\n-        let lang_item = self.tcx.require_lang_item(lang_items::SizedTraitLangItem);\n+        let lang_item = self.tcx.require_lang_item(lang_items::SizedTraitLangItem, None);\n         traits::type_known_to_meet_bound_modulo_regions(self, self.param_env, ty, lang_item, span)\n     }\n }"}, {"sha": "e9370429f3f55af945ce61df84dbe81854068ec4", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "patch": "@@ -266,7 +266,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let trait_ref = projection.to_poly_trait_ref(tcx);\n \n         let is_fn = tcx.lang_items().fn_trait_kind(trait_ref.def_id()).is_some();\n-        let gen_trait = tcx.require_lang_item(lang_items::GeneratorTraitLangItem);\n+        let gen_trait = tcx.require_lang_item(lang_items::GeneratorTraitLangItem, cause_span);\n         let is_gen = gen_trait == trait_ref.def_id();\n         if !is_fn && !is_gen {\n             debug!(\"deduce_sig_from_projection: not fn or generator\");"}, {"sha": "01fda54b1eaaadf6831761c6400fba920879259a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "patch": "@@ -2622,7 +2622,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                  span: Span,\n                                  code: traits::ObligationCauseCode<'tcx>)\n     {\n-        let lang_item = self.tcx.require_lang_item(lang_items::SizedTraitLangItem);\n+        let lang_item = self.tcx.require_lang_item(lang_items::SizedTraitLangItem, None);\n         self.require_type_meets(ty, span, code, lang_item);\n     }\n "}, {"sha": "f95b3e44bf0f7012374d358e5c7002c0c3f37378", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "patch": "@@ -287,7 +287,7 @@ fn check_type_defn<'tcx, F>(\n                 let last = idx == variant.fields.len() - 1;\n                 fcx.register_bound(\n                     field.ty,\n-                    fcx.tcx.require_lang_item(lang_items::SizedTraitLangItem),\n+                    fcx.tcx.require_lang_item(lang_items::SizedTraitLangItem, None),\n                     traits::ObligationCause::new(\n                         field.span,\n                         fcx.body_id,\n@@ -375,7 +375,7 @@ fn check_item_type(\n         if forbid_unsized {\n             fcx.register_bound(\n                 item_ty,\n-                fcx.tcx.require_lang_item(lang_items::SizedTraitLangItem),\n+                fcx.tcx.require_lang_item(lang_items::SizedTraitLangItem, None),\n                 traits::ObligationCause::new(ty_span, fcx.body_id, traits::MiscObligation),\n             );\n         }"}, {"sha": "516be99ed6aad1196879b574edb6030bf1a5d0c2", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "patch": "@@ -464,7 +464,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         // it is *not* required (i.e., '?Sized')\n         let sized_trait = self.cx\n             .tcx\n-            .require_lang_item(lang_items::SizedTraitLangItem);\n+            .require_lang_item(lang_items::SizedTraitLangItem, None);\n \n         let mut replacer = RegionReplacer {\n             vid_to_region: &vid_to_region,\n@@ -777,9 +777,9 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     fn is_fn_ty(&self, tcx: TyCtxt<'_>, ty: &Type) -> bool {\n         match &ty {\n             &&Type::ResolvedPath { ref did, .. } => {\n-                *did == tcx.require_lang_item(lang_items::FnTraitLangItem)\n-                    || *did == tcx.require_lang_item(lang_items::FnMutTraitLangItem)\n-                    || *did == tcx.require_lang_item(lang_items::FnOnceTraitLangItem)\n+                *did == tcx.require_lang_item(lang_items::FnTraitLangItem, None)\n+                    || *did == tcx.require_lang_item(lang_items::FnMutTraitLangItem, None)\n+                    || *did == tcx.require_lang_item(lang_items::FnOnceTraitLangItem, None)\n             }\n             _ => false,\n         }"}, {"sha": "49711551132638829779090ae34b732f1ec04c9e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "patch": "@@ -1037,7 +1037,7 @@ pub enum GenericBound {\n \n impl GenericBound {\n     fn maybe_sized(cx: &DocContext<'_>) -> GenericBound {\n-        let did = cx.tcx.require_lang_item(lang_items::SizedTraitLangItem);\n+        let did = cx.tcx.require_lang_item(lang_items::SizedTraitLangItem, None);\n         let empty = cx.tcx.intern_substs(&[]);\n         let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n             Some(did), false, vec![], empty);"}, {"sha": "fa13bf0b12719050bb268f8014248e718bc62c1d", "filename": "src/test/ui/lang-item-missing-generator.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Ftest%2Fui%2Flang-item-missing-generator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a/src%2Ftest%2Fui%2Flang-item-missing-generator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-item-missing-generator.stderr?ref=d4757d5bbf8966a1a698d89a2c6003e5d5dbae5a", "patch": "@@ -1,4 +1,8 @@\n error: requires `generator` lang_item\n+  --> $DIR/lang-item-missing-generator.rs:15:17\n+   |\n+LL | pub fn abc() -> impl FnOnce(f32) {\n+   |                 ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}