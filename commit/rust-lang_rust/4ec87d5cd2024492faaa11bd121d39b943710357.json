{"sha": "4ec87d5cd2024492faaa11bd121d39b943710357", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYzg3ZDVjZDIwMjQ0OTJmYWFhMTFiZDEyMWQzOWI5NDM3MTAzNTc=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-12-06T02:37:35Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-12-12T21:36:25Z"}, "message": "Remove some `debug!` statements.\n\nBecause I am tired of looking at them.", "tree": {"sha": "44bf68b3855938a1c50e9378c64d3ca101251d91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44bf68b3855938a1c50e9378c64d3ca101251d91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ec87d5cd2024492faaa11bd121d39b943710357", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec87d5cd2024492faaa11bd121d39b943710357", "html_url": "https://github.com/rust-lang/rust/commit/4ec87d5cd2024492faaa11bd121d39b943710357", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ec87d5cd2024492faaa11bd121d39b943710357/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d550445e2b650ec198ef1c6de19612f0dc6287e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d550445e2b650ec198ef1c6de19612f0dc6287e", "html_url": "https://github.com/rust-lang/rust/commit/7d550445e2b650ec198ef1c6de19612f0dc6287e"}], "stats": {"total": 20, "additions": 1, "deletions": 19}, "files": [{"sha": "0f893252671579433495e7b02066265169a8029d", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4ec87d5cd2024492faaa11bd121d39b943710357/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec87d5cd2024492faaa11bd121d39b943710357/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=4ec87d5cd2024492faaa11bd121d39b943710357", "patch": "@@ -329,10 +329,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n         match self.active_cache.entry(obligation.as_predicate().clone()) {\n             Entry::Occupied(o) => {\n-                let index = *o.get();\n-                debug!(\"register_obligation_at({:?}, {:?}) - duplicate of {:?}!\",\n-                       obligation, parent, index);\n-                let node = &mut self.nodes[index];\n+                let node = &mut self.nodes[*o.get()];\n                 if let Some(parent_index) = parent {\n                     // If the node is already in `active_cache`, it has already\n                     // had its chance to be marked with a parent. So if it's\n@@ -349,9 +346,6 @@ impl<O: ForestObligation> ObligationForest<O> {\n                 }\n             }\n             Entry::Vacant(v) => {\n-                debug!(\"register_obligation_at({:?}, {:?}) - ok, new index is {}\",\n-                       obligation, parent, self.nodes.len());\n-\n                 let obligation_tree_id = match parent {\n                     Some(parent_index) => self.nodes[parent_index].obligation_tree_id,\n                     None => self.obligation_tree_id_generator.next().unwrap(),\n@@ -431,8 +425,6 @@ impl<O: ForestObligation> ObligationForest<O> {\n                                   -> Outcome<O, P::Error>\n         where P: ObligationProcessor<Obligation=O>\n     {\n-        debug!(\"process_obligations(len={})\", self.nodes.len());\n-\n         self.gen += 1;\n \n         let mut errors = vec![];\n@@ -450,8 +442,6 @@ impl<O: ForestObligation> ObligationForest<O> {\n         while index < self.nodes.len() {\n             let node = &mut self.nodes[index];\n \n-            debug!(\"process_obligations: node {} == {:?}\", index, node);\n-\n             // `processor.process_obligation` can modify the predicate within\n             // `node.obligation`, and that predicate is the key used for\n             // `self.active_cache`. This means that `self.active_cache` can get\n@@ -463,8 +453,6 @@ impl<O: ForestObligation> ObligationForest<O> {\n             }\n             let result = processor.process_obligation(&mut node.obligation);\n \n-            debug!(\"process_obligations: node {} got result {:?}\", index, result);\n-\n             match result {\n                 ProcessResult::Unchanged => {\n                     // No change in state.\n@@ -511,8 +499,6 @@ impl<O: ForestObligation> ObligationForest<O> {\n         self.process_cycles(processor);\n         let completed = self.compress(do_completed);\n \n-        debug!(\"process_obligations: complete\");\n-\n         Outcome {\n             completed,\n             errors,\n@@ -593,8 +579,6 @@ impl<O: ForestObligation> ObligationForest<O> {\n     {\n         let mut stack = vec![];\n \n-        debug!(\"process_cycles()\");\n-\n         for (index, node) in self.nodes.iter().enumerate() {\n             // For some benchmarks this state test is extremely hot. It's a win\n             // to handle the no-op cases immediately to avoid the cost of the\n@@ -606,8 +590,6 @@ impl<O: ForestObligation> ObligationForest<O> {\n             }\n         }\n \n-        debug!(\"process_cycles: complete\");\n-\n         debug_assert!(stack.is_empty());\n     }\n "}]}