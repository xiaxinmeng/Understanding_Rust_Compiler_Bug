{"sha": "7de48419ee8f9ae0a41503e5e104709ea39bfe85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZTQ4NDE5ZWU4ZjlhZTBhNDE1MDNlNWUxMDQ3MDllYTM5YmZlODU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-25T23:53:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-26T17:20:15Z"}, "message": "syntax: Permit visibility on tuple fields\n\nThis change is in preparation for #8122. Nothing is currently done with these\nvisibility qualifiers, they are just parsed and accepted by the compiler.\n\nRFC: 0004-private-fields", "tree": {"sha": "6362ff55ac160b1f880eb9a405f3152574e23d1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6362ff55ac160b1f880eb9a405f3152574e23d1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7de48419ee8f9ae0a41503e5e104709ea39bfe85", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7de48419ee8f9ae0a41503e5e104709ea39bfe85", "html_url": "https://github.com/rust-lang/rust/commit/7de48419ee8f9ae0a41503e5e104709ea39bfe85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7de48419ee8f9ae0a41503e5e104709ea39bfe85/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "104aaa44e8506cfaf2c00d6ca35dce93a8228545", "url": "https://api.github.com/repos/rust-lang/rust/commits/104aaa44e8506cfaf2c00d6ca35dce93a8228545", "html_url": "https://github.com/rust-lang/rust/commit/104aaa44e8506cfaf2c00d6ca35dce93a8228545"}], "stats": {"total": 51, "additions": 30, "deletions": 21}, "files": [{"sha": "0ea47d28551127e709ff1378c1301328806cbee0", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=7de48419ee8f9ae0a41503e5e104709ea39bfe85", "patch": "@@ -1019,10 +1019,11 @@ pub fn get_struct_fields(intr: @IdentInterner, cdata: Cmd, id: ast::NodeId)\n     });\n     reader::tagged_docs(item, tag_item_unnamed_field, |an_item| {\n         let did = item_def_id(an_item, cdata);\n+        let f = item_family(an_item);\n         result.push(ty::field_ty {\n             name: special_idents::unnamed_field.name,\n             id: did,\n-            vis: ast::Inherited,\n+            vis: struct_field_family_to_visibility(f),\n         });\n         true\n     });"}, {"sha": "be1a7abe51d02302d586f396006c4cbca68c490a", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=7de48419ee8f9ae0a41503e5e104709ea39bfe85", "patch": "@@ -310,8 +310,9 @@ fn encode_struct_fields(ebml_w: &mut writer::Encoder,\n                encode_def_id(ebml_w, local_def(f.node.id));\n                ebml_w.end_tag();\n             }\n-            UnnamedField => {\n+            UnnamedField(vis) => {\n                 ebml_w.start_tag(tag_item_unnamed_field);\n+                encode_struct_field_family(ebml_w, vis);\n                 encode_def_id(ebml_w, local_def(f.node.id));\n                 ebml_w.end_tag();\n             }\n@@ -513,8 +514,7 @@ fn each_auxiliary_node_id(item: @Item, callback: |NodeId| -> bool) -> bool {\n             // If this is a newtype struct, return the constructor.\n             match struct_def.ctor_id {\n                 Some(ctor_id) if struct_def.fields.len() > 0 &&\n-                        struct_def.fields.get(0).node.kind ==\n-                        ast::UnnamedField => {\n+                        struct_def.fields.get(0).node.kind.is_unnamed() => {\n                     continue_ = callback(ctor_id);\n                 }\n                 _ => {}\n@@ -690,7 +690,7 @@ fn encode_info_for_struct(ecx: &EncodeContext,\n     for field in fields.iter() {\n         let (nm, vis) = match field.node.kind {\n             NamedField(nm, vis) => (nm, vis),\n-            UnnamedField => (special_idents::unnamed_field, Inherited)\n+            UnnamedField(vis) => (special_idents::unnamed_field, vis)\n         };\n \n         let id = field.node.id;"}, {"sha": "0680a7132a0198ade68eb68ac18375060245ad88", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=7de48419ee8f9ae0a41503e5e104709ea39bfe85", "patch": "@@ -1005,7 +1005,7 @@ impl<'a> SanePrivacyVisitor<'a> {\n                         tcx.sess.span_err(f.span, \"unnecessary `priv` \\\n                                                    visibility\");\n                     }\n-                    ast::NamedField(..) | ast::UnnamedField => {}\n+                    ast::NamedField(..) | ast::UnnamedField(..) => {}\n                 }\n             }\n         };\n@@ -1102,7 +1102,7 @@ impl<'a> SanePrivacyVisitor<'a> {\n             for f in def.fields.iter() {\n                match f.node.kind {\n                     ast::NamedField(_, p) => check_inherited(f.span, p),\n-                    ast::UnnamedField => {}\n+                    ast::UnnamedField(..) => {}\n                 }\n             }\n         };"}, {"sha": "cdc74f37327c6813a8a999022aa760e089c360dd", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7de48419ee8f9ae0a41503e5e104709ea39bfe85", "patch": "@@ -3900,7 +3900,7 @@ impl VariantInfo {\n                 let arg_names = fields.iter().map(|field| {\n                     match field.node.kind {\n                         NamedField(ident, _) => ident,\n-                        UnnamedField => cx.sess.bug(\n+                        UnnamedField(..) => cx.sess.bug(\n                             \"enum_variants: all fields in struct must have a name\")\n                     }\n                 }).collect();\n@@ -4264,11 +4264,11 @@ fn struct_field_tys(fields: &[StructField]) -> Vec<field_ty> {\n                     vis: visibility,\n                 }\n             }\n-            UnnamedField => {\n+            UnnamedField(visibility) => {\n                 field_ty {\n                     name: syntax::parse::token::special_idents::unnamed_field.name,\n                     id: ast_util::local_def(field.node.id),\n-                    vis: ast::Public,\n+                    vis: visibility,\n                 }\n             }\n         }"}, {"sha": "22449a93357c79eaf4413cd7b9d43722fe9aa726", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=7de48419ee8f9ae0a41503e5e104709ea39bfe85", "patch": "@@ -695,8 +695,7 @@ pub fn convert_struct(ccx: &CrateCtxt,\n                 write_ty_to_tcx(tcx, ctor_id, selfty);\n \n                 tcx.tcache.borrow_mut().insert(local_def(ctor_id), tpt);\n-            } else if struct_def.fields.get(0).node.kind ==\n-                    ast::UnnamedField {\n+            } else if struct_def.fields.get(0).node.kind.is_unnamed() {\n                 // Tuple-like.\n                 let inputs = struct_def.fields.map(\n                         |field| tcx.tcache.borrow().get("}, {"sha": "a7d458df0cf85f1e40eb40e4fd3fc0339025bab7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7de48419ee8f9ae0a41503e5e104709ea39bfe85", "patch": "@@ -1080,7 +1080,16 @@ pub type StructField = Spanned<StructField_>;\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub enum StructFieldKind {\n     NamedField(Ident, Visibility),\n-    UnnamedField // element of a tuple-like struct\n+    UnnamedField(Visibility), // element of a tuple-like struct\n+}\n+\n+impl StructFieldKind {\n+    pub fn is_unnamed(&self) -> bool {\n+        match *self {\n+            UnnamedField(..) => true,\n+            NamedField(..) => false,\n+        }\n+    }\n }\n \n #[deriving(Eq, TotalEq, Encodable, Decodable, Hash)]"}, {"sha": "3dbd10b625c3d828a26cf1d5f7e0cb9a49098331", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=7de48419ee8f9ae0a41503e5e104709ea39bfe85", "patch": "@@ -290,8 +290,7 @@ pub fn split_trait_methods(trait_methods: &[TraitMethod])\n \n pub fn struct_field_visibility(field: ast::StructField) -> Visibility {\n     match field.node.kind {\n-        ast::NamedField(_, visibility) => visibility,\n-        ast::UnnamedField => ast::Public\n+        ast::NamedField(_, v) | ast::UnnamedField(v) => v\n     }\n }\n "}, {"sha": "9c1d6a1d5ca2fd2a83e5025fb0a985c87f11feab", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=7de48419ee8f9ae0a41503e5e104709ea39bfe85", "patch": "@@ -1007,7 +1007,7 @@ impl<'a> TraitDef<'a> {\n             let sp = self.set_expn_info(cx, field.span);\n             match field.node.kind {\n                 ast::NamedField(ident, _) => named_idents.push((ident, sp)),\n-                ast::UnnamedField => just_spans.push(sp),\n+                ast::UnnamedField(..) => just_spans.push(sp),\n             }\n         }\n \n@@ -1061,8 +1061,8 @@ impl<'a> TraitDef<'a> {\n                     struct_type = Record;\n                     Some(ident)\n                 }\n-                ast::UnnamedField if (struct_type == Unknown ||\n-                                      struct_type == Tuple) => {\n+                ast::UnnamedField(..) if (struct_type == Unknown ||\n+                                          struct_type == Tuple) => {\n                     struct_type = Tuple;\n                     None\n                 }"}, {"sha": "9b12987361e4ed49ec1f7fe0edb67ee3028a0a20", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7de48419ee8f9ae0a41503e5e104709ea39bfe85", "patch": "@@ -3985,7 +3985,7 @@ impl<'a> Parser<'a> {\n                 let attrs = p.parse_outer_attributes();\n                 let lo = p.span.lo;\n                 let struct_field_ = ast::StructField_ {\n-                    kind: UnnamedField,\n+                    kind: UnnamedField(p.parse_visibility()),\n                     id: ast::DUMMY_NODE_ID,\n                     ty: p.parse_ty(false),\n                     attrs: attrs,"}, {"sha": "e1d6f821ba9e5ded84f088f6f469d90046ca17a5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de48419ee8f9ae0a41503e5e104709ea39bfe85/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7de48419ee8f9ae0a41503e5e104709ea39bfe85", "patch": "@@ -743,7 +743,8 @@ impl<'a> State<'a> {\n                     |s, field| {\n                         match field.node.kind {\n                             ast::NamedField(..) => fail!(\"unexpected named field\"),\n-                            ast::UnnamedField => {\n+                            ast::UnnamedField(vis) => {\n+                                try!(s.print_visibility(vis));\n                                 try!(s.maybe_print_comment(field.span.lo));\n                                 s.print_type(field.node.ty)\n                             }\n@@ -762,7 +763,7 @@ impl<'a> State<'a> {\n \n             for field in struct_def.fields.iter() {\n                 match field.node.kind {\n-                    ast::UnnamedField => fail!(\"unexpected unnamed field\"),\n+                    ast::UnnamedField(..) => fail!(\"unexpected unnamed field\"),\n                     ast::NamedField(ident, visibility) => {\n                         try!(self.hardbreak_if_not_bol());\n                         try!(self.maybe_print_comment(field.span.lo));"}]}