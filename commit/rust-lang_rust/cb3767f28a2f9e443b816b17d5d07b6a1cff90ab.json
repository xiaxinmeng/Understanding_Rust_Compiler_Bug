{"sha": "cb3767f28a2f9e443b816b17d5d07b6a1cff90ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMzc2N2YyOGEyZjllNDQzYjgxNmIxN2Q1ZDA3YjZhMWNmZjkwYWI=", "commit": {"author": {"name": "Martin Asquino", "email": "martin.asquino@gmail.com", "date": "2019-11-04T13:33:10Z"}, "committer": {"name": "Martin Asquino", "email": "martin.asquino@gmail.com", "date": "2019-11-04T21:16:35Z"}, "message": "HirDatabase stored attributes", "tree": {"sha": "ffae5e26ef1b5e96a41a6aff40e9a17c5179aeb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffae5e26ef1b5e96a41a6aff40e9a17c5179aeb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb3767f28a2f9e443b816b17d5d07b6a1cff90ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3767f28a2f9e443b816b17d5d07b6a1cff90ab", "html_url": "https://github.com/rust-lang/rust/commit/cb3767f28a2f9e443b816b17d5d07b6a1cff90ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb3767f28a2f9e443b816b17d5d07b6a1cff90ab/comments", "author": {"login": "martskins", "id": 4250565, "node_id": "MDQ6VXNlcjQyNTA1NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/4250565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martskins", "html_url": "https://github.com/martskins", "followers_url": "https://api.github.com/users/martskins/followers", "following_url": "https://api.github.com/users/martskins/following{/other_user}", "gists_url": "https://api.github.com/users/martskins/gists{/gist_id}", "starred_url": "https://api.github.com/users/martskins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martskins/subscriptions", "organizations_url": "https://api.github.com/users/martskins/orgs", "repos_url": "https://api.github.com/users/martskins/repos", "events_url": "https://api.github.com/users/martskins/events{/privacy}", "received_events_url": "https://api.github.com/users/martskins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "martskins", "id": 4250565, "node_id": "MDQ6VXNlcjQyNTA1NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/4250565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martskins", "html_url": "https://github.com/martskins", "followers_url": "https://api.github.com/users/martskins/followers", "following_url": "https://api.github.com/users/martskins/following{/other_user}", "gists_url": "https://api.github.com/users/martskins/gists{/gist_id}", "starred_url": "https://api.github.com/users/martskins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martskins/subscriptions", "organizations_url": "https://api.github.com/users/martskins/orgs", "repos_url": "https://api.github.com/users/martskins/repos", "events_url": "https://api.github.com/users/martskins/events{/privacy}", "received_events_url": "https://api.github.com/users/martskins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc2d75d0f88bdcb1b3e20db36decb6ee6eca517a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2d75d0f88bdcb1b3e20db36decb6ee6eca517a", "html_url": "https://github.com/rust-lang/rust/commit/cc2d75d0f88bdcb1b3e20db36decb6ee6eca517a"}], "stats": {"total": 125, "additions": 111, "deletions": 14}, "files": [{"sha": "c29c2448e701e1c55575d7c5d3d4438208ff5020", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb3767f28a2f9e443b816b17d5d07b6a1cff90ab/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3767f28a2f9e443b816b17d5d07b6a1cff90ab/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=cb3767f28a2f9e443b816b17d5d07b6a1cff90ab", "patch": "@@ -2,6 +2,7 @@\n \n pub(crate) mod src;\n pub(crate) mod docs;\n+pub(crate) mod attrs;\n \n use std::sync::Arc;\n "}, {"sha": "f7db36b6681491a8ca6f9147809586a41c891dec", "filename": "crates/ra_hir/src/code_model/attrs.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/cb3767f28a2f9e443b816b17d5d07b6a1cff90ab/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3767f28a2f9e443b816b17d5d07b6a1cff90ab/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fattrs.rs?ref=cb3767f28a2f9e443b816b17d5d07b6a1cff90ab", "patch": "@@ -0,0 +1,92 @@\n+//! FIXME: write short doc here\n+\n+use crate::{\n+    db::{AstDatabase, DefDatabase, HirDatabase},\n+    Adt, Const, Enum, EnumVariant, FieldSource, Function, HasSource, MacroDef, Module, Static,\n+    Struct, StructField, Trait, TypeAlias, Union,\n+};\n+use hir_def::attr::Attr;\n+use hir_expand::hygiene::Hygiene;\n+use ra_syntax::ast;\n+use std::sync::Arc;\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum AttrDef {\n+    Module(Module),\n+    StructField(StructField),\n+    Adt(Adt),\n+    Function(Function),\n+    EnumVariant(EnumVariant),\n+    Static(Static),\n+    Const(Const),\n+    Trait(Trait),\n+    TypeAlias(TypeAlias),\n+    MacroDef(MacroDef),\n+}\n+\n+impl_froms!(\n+    AttrDef: Module,\n+    StructField,\n+    Adt(Struct, Enum, Union),\n+    EnumVariant,\n+    Static,\n+    Const,\n+    Function,\n+    Trait,\n+    TypeAlias,\n+    MacroDef\n+);\n+\n+pub trait Attrs {\n+    fn attrs(&self, db: &impl HirDatabase) -> Option<Arc<[Attr]>>;\n+}\n+\n+pub(crate) fn attributes_query(\n+    db: &(impl DefDatabase + AstDatabase),\n+    def: AttrDef,\n+) -> Option<Arc<[Attr]>> {\n+    match def {\n+        AttrDef::Module(it) => {\n+            let src = it.declaration_source(db)?;\n+            let hygiene = Hygiene::new(db, src.file_id);\n+            Attr::from_attrs_owner(&src.ast, &hygiene)\n+        }\n+        AttrDef::StructField(it) => match it.source(db).ast {\n+            FieldSource::Named(named) => {\n+                let src = it.source(db);\n+                let hygiene = Hygiene::new(db, src.file_id);\n+                Attr::from_attrs_owner(&named, &hygiene)\n+            }\n+            FieldSource::Pos(..) => None,\n+        },\n+        AttrDef::Adt(it) => match it {\n+            Adt::Struct(it) => attrs_from_ast(it, db),\n+            Adt::Enum(it) => attrs_from_ast(it, db),\n+            Adt::Union(it) => attrs_from_ast(it, db),\n+        },\n+        AttrDef::EnumVariant(it) => attrs_from_ast(it, db),\n+        AttrDef::Static(it) => attrs_from_ast(it, db),\n+        AttrDef::Const(it) => attrs_from_ast(it, db),\n+        AttrDef::Function(it) => attrs_from_ast(it, db),\n+        AttrDef::Trait(it) => attrs_from_ast(it, db),\n+        AttrDef::TypeAlias(it) => attrs_from_ast(it, db),\n+        AttrDef::MacroDef(it) => attrs_from_ast(it, db),\n+    }\n+}\n+\n+fn attrs_from_ast<T, D>(node: T, db: &D) -> Option<Arc<[Attr]>>\n+where\n+    T: HasSource,\n+    T::Ast: ast::AttrsOwner,\n+    D: DefDatabase + AstDatabase,\n+{\n+    let src = node.source(db);\n+    let hygiene = Hygiene::new(db, src.file_id);\n+    Attr::from_attrs_owner(&src.ast, &hygiene)\n+}\n+\n+impl<T: Into<AttrDef> + Copy> Attrs for T {\n+    fn attrs(&self, db: &impl HirDatabase) -> Option<Arc<[Attr]>> {\n+        db.attrs((*self).into())\n+    }\n+}"}, {"sha": "799cc02095956fec5d2f539c0a76f93ff9ea00ea", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb3767f28a2f9e443b816b17d5d07b6a1cff90ab/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3767f28a2f9e443b816b17d5d07b6a1cff90ab/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=cb3767f28a2f9e443b816b17d5d07b6a1cff90ab", "patch": "@@ -2,6 +2,7 @@\n \n use std::sync::Arc;\n \n+use hir_def::attr::Attr;\n use ra_db::salsa;\n use ra_syntax::SmolStr;\n \n@@ -75,6 +76,9 @@ pub trait DefDatabase: HirDebugDatabase + DefDatabase2 {\n \n     #[salsa::invoke(crate::code_model::docs::documentation_query)]\n     fn documentation(&self, def: crate::DocDef) -> Option<crate::Documentation>;\n+\n+    #[salsa::invoke(crate::code_model::attrs::attributes_query)]\n+    fn attrs(&self, def: crate::AttrDef) -> Option<Arc<[Attr]>>;\n }\n \n #[salsa::query_group(HirDatabaseStorage)]"}, {"sha": "4003f0b7a1be1e994dd4014593c01447436b7252", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb3767f28a2f9e443b816b17d5d07b6a1cff90ab/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3767f28a2f9e443b816b17d5d07b6a1cff90ab/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=cb3767f28a2f9e443b816b17d5d07b6a1cff90ab", "patch": "@@ -61,6 +61,7 @@ use crate::{ids::MacroFileKind, resolve::Resolver};\n pub use crate::{\n     adt::VariantDef,\n     code_model::{\n+        attrs::{AttrDef, Attrs},\n         docs::{DocDef, Docs, Documentation},\n         src::{HasBodySource, HasSource},\n         Adt, AssocItem, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,"}, {"sha": "d861303b75e13163e29a2b4ea8a2549be086b727", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cb3767f28a2f9e443b816b17d5d07b6a1cff90ab/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3767f28a2f9e443b816b17d5d07b6a1cff90ab/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=cb3767f28a2f9e443b816b17d5d07b6a1cff90ab", "patch": "@@ -1,8 +1,8 @@\n //! This modules takes care of rendering various definitions as completion items.\n \n-use hir::{db::HirDatabase, Docs, HasSource, HirDisplay, ScopeDef, Ty, TypeWalk};\n+use hir::{db::HirDatabase, Attrs, Docs, HasSource, HirDisplay, ScopeDef, Ty, TypeWalk};\n use join_to_string::join;\n-use ra_syntax::ast::{AttrsOwner, NameOwner};\n+use ra_syntax::ast::NameOwner;\n use test_utils::tested_by;\n \n use crate::completion::{\n@@ -18,11 +18,7 @@ impl Completions {\n         field: hir::StructField,\n         substs: &hir::Substs,\n     ) {\n-        let ast_node = field.source(ctx.db).ast;\n-        let is_deprecated = match ast_node {\n-            hir::FieldSource::Named(m) => is_deprecated(m),\n-            hir::FieldSource::Pos(m) => is_deprecated(m),\n-        };\n+        let is_deprecated = is_deprecated(field, ctx.db);\n         CompletionItem::new(\n             CompletionKind::Reference,\n             ctx.source_range(),\n@@ -185,7 +181,7 @@ impl Completions {\n             CompletionItem::new(CompletionKind::Reference, ctx.source_range(), &macro_declaration)\n                 .kind(CompletionItemKind::Macro)\n                 .set_documentation(docs.clone())\n-                .set_deprecated(is_deprecated(ast_node))\n+                .set_deprecated(is_deprecated(macro_, ctx.db))\n                 .detail(detail);\n \n         builder = if ctx.use_item_syntax.is_some() {\n@@ -218,7 +214,7 @@ impl Completions {\n                     CompletionItemKind::Function\n                 })\n                 .set_documentation(func.docs(ctx.db))\n-                .set_deprecated(is_deprecated(ast_node))\n+                .set_deprecated(is_deprecated(func, ctx.db))\n                 .detail(detail);\n \n         // Add `<>` for generic types\n@@ -250,7 +246,7 @@ impl Completions {\n         CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.text().to_string())\n             .kind(CompletionItemKind::Const)\n             .set_documentation(constant.docs(ctx.db))\n-            .set_deprecated(is_deprecated(ast_node))\n+            .set_deprecated(is_deprecated(constant, ctx.db))\n             .detail(detail)\n             .add_to(self);\n     }\n@@ -266,13 +262,13 @@ impl Completions {\n         CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.text().to_string())\n             .kind(CompletionItemKind::TypeAlias)\n             .set_documentation(type_alias.docs(ctx.db))\n-            .set_deprecated(is_deprecated(type_def))\n+            .set_deprecated(is_deprecated(type_alias, ctx.db))\n             .detail(detail)\n             .add_to(self);\n     }\n \n     pub(crate) fn add_enum_variant(&mut self, ctx: &CompletionContext, variant: hir::EnumVariant) {\n-        let is_deprecated = is_deprecated(variant.source(ctx.db).ast);\n+        let is_deprecated = is_deprecated(variant, ctx.db);\n         let name = match variant.name(ctx.db) {\n             Some(it) => it,\n             None => return,\n@@ -291,8 +287,11 @@ impl Completions {\n     }\n }\n \n-fn is_deprecated(node: impl AttrsOwner) -> bool {\n-    node.attrs().filter_map(|x| x.simple_name()).any(|x| x == \"deprecated\")\n+fn is_deprecated(node: impl Attrs, db: &impl HirDatabase) -> bool {\n+    match node.attrs(db) {\n+        None => false,\n+        Some(attrs) => attrs.iter().any(|x| x.is_simple_atom(\"deprecated\")),\n+    }\n }\n \n fn has_non_default_type_params(def: hir::GenericDef, db: &db::RootDatabase) -> bool {"}]}