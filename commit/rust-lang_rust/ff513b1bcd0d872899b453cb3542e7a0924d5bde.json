{"sha": "ff513b1bcd0d872899b453cb3542e7a0924d5bde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNTEzYjFiY2QwZDg3Mjg5OWI0NTNjYjM1NDJlN2EwOTI0ZDViZGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-28T00:49:35Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-28T00:49:35Z"}, "message": "libcore: Replace a bunch of \"== None\" with \".is_none()\".\n\nGenerally, \"== None\" calls into the shape glue, and it's also more useful.", "tree": {"sha": "c38e2cdfb96ff3be34ae0b74e8df94bec4bc18c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c38e2cdfb96ff3be34ae0b74e8df94bec4bc18c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff513b1bcd0d872899b453cb3542e7a0924d5bde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff513b1bcd0d872899b453cb3542e7a0924d5bde", "html_url": "https://github.com/rust-lang/rust/commit/ff513b1bcd0d872899b453cb3542e7a0924d5bde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff513b1bcd0d872899b453cb3542e7a0924d5bde/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2dcd7663a976f02675c72561eb377ecc263bd9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2dcd7663a976f02675c72561eb377ecc263bd9b", "html_url": "https://github.com/rust-lang/rust/commit/f2dcd7663a976f02675c72561eb377ecc263bd9b"}], "stats": {"total": 160, "additions": 80, "deletions": 80}, "files": [{"sha": "8b9a93269a474e3c0d346396b9951db04b44d47d", "filename": "src/libcore/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=ff513b1bcd0d872899b453cb3542e7a0924d5bde", "patch": "@@ -230,8 +230,8 @@ fn test_to_digit() {\n     assert to_digit('z', 36u) == Some(35u);\n     assert to_digit('Z', 36u) == Some(35u);\n \n-    assert to_digit(' ', 10u) == None;\n-    assert to_digit('$', 36u) == None;\n+    assert to_digit(' ', 10u).is_none();\n+    assert to_digit('$', 36u).is_none();\n }\n \n #[test]"}, {"sha": "1c56587434be6e4231983cbe433ab66bf4455d99", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=ff513b1bcd0d872899b453cb3542e7a0924d5bde", "patch": "@@ -779,7 +779,7 @@ mod tests {\n         l.assert_consistent(); l.remove(two);\n         l.assert_consistent(); l.remove(three);\n         l.assert_consistent(); l.remove(one); // Twenty-three is number one!\n-        l.assert_consistent(); assert l.peek() == None;\n+        l.assert_consistent(); assert l.peek().is_none();\n         l.assert_consistent(); assert l.is_empty();\n     }\n     #[test]"}, {"sha": "a0929f57081808f1b3d6114ae3cf4186aec9ad34", "filename": "src/libcore/float.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=ff513b1bcd0d872899b453cb3542e7a0924d5bde", "patch": "@@ -457,16 +457,16 @@ fn test_from_str() {\n        None => fail\n    }\n \n-   assert from_str(~\"\") == None;\n-   assert from_str(~\"x\") == None;\n-   assert from_str(~\" \") == None;\n-   assert from_str(~\"   \") == None;\n-   assert from_str(~\"e\") == None;\n-   assert from_str(~\"E\") == None;\n-   assert from_str(~\"E1\") == None;\n-   assert from_str(~\"1e1e1\") == None;\n-   assert from_str(~\"1e1.1\") == None;\n-   assert from_str(~\"1e1-1\") == None;\n+   assert from_str(~\"\").is_none();\n+   assert from_str(~\"x\").is_none();\n+   assert from_str(~\" \").is_none();\n+   assert from_str(~\"   \").is_none();\n+   assert from_str(~\"e\").is_none();\n+   assert from_str(~\"E\").is_none();\n+   assert from_str(~\"E1\").is_none();\n+   assert from_str(~\"1e1e1\").is_none();\n+   assert from_str(~\"1e1.1\").is_none();\n+   assert from_str(~\"1e1-1\").is_none();\n }\n \n #[test]"}, {"sha": "2f32376e7154de3063cfaa481cc845f8b2a4df4e", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=ff513b1bcd0d872899b453cb3542e7a0924d5bde", "patch": "@@ -193,8 +193,8 @@ fn test_from_str() {\n     assert from_str(~\"-123456789\") == Some(-123456789 as T);\n     assert from_str(~\"-00100\") == Some(-100 as T);\n \n-    assert from_str(~\" \") == None;\n-    assert from_str(~\"x\") == None;\n+    assert from_str(~\" \").is_none();\n+    assert from_str(~\"x\").is_none();\n }\n \n // FIXME: Has alignment issues on windows and 32-bit linux (#2609)\n@@ -220,8 +220,8 @@ fn test_parse_buf() {\n     assert parse_buf(to_bytes(~\"-z\"), 36u) == Some(-35 as T);\n     assert parse_buf(to_bytes(~\"-Z\"), 36u) == Some(-35 as T);\n \n-    assert parse_buf(to_bytes(~\"Z\"), 35u) == None;\n-    assert parse_buf(to_bytes(~\"-9\"), 2u) == None;\n+    assert parse_buf(to_bytes(~\"Z\"), 35u).is_none();\n+    assert parse_buf(to_bytes(~\"-9\"), 2u).is_none();\n }\n \n #[test]"}, {"sha": "503f0f3b1abc2e1e59ee7eb4344d2482fe7bce65", "filename": "src/libcore/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=ff513b1bcd0d872899b453cb3542e7a0924d5bde", "patch": "@@ -931,7 +931,7 @@ mod tests {\n         assert os::homedir() == Some(Path(\"/home/MountainView\"));\n \n         setenv(~\"HOME\", ~\"\");\n-        assert os::homedir() == None;\n+        assert os::homedir().is_none();\n \n         option::iter(oldhome, |s| setenv(~\"HOME\", s));\n     }\n@@ -946,7 +946,7 @@ mod tests {\n         setenv(~\"HOME\", ~\"\");\n         setenv(~\"USERPROFILE\", ~\"\");\n \n-        assert os::homedir() == None;\n+        assert os::homedir().is_none();\n \n         setenv(~\"HOME\", ~\"/home/MountainView\");\n         assert os::homedir() == Some(Path(\"/home/MountainView\"));"}, {"sha": "235dd686a1db656dc0b76943bdc219ae6ddabe24", "filename": "src/libcore/path2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Fpath2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Fpath2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath2.rs?ref=ff513b1bcd0d872899b453cb3542e7a0924d5bde", "patch": "@@ -506,8 +506,8 @@ mod windows {\n \n     #[test]\n     fn test_extract_unc_prefixes() {\n-        assert extract_unc_prefix(\"\\\\\\\\\") == None;\n-        assert extract_unc_prefix(\"\\\\\\\\hi\") == None;\n+        assert extract_unc_prefix(\"\\\\\\\\\").is_none();\n+        assert extract_unc_prefix(\"\\\\\\\\hi\").is_none();\n         assert extract_unc_prefix(\"\\\\\\\\hi\\\\\") == Some((~\"hi\", ~\"\\\\\"));\n         assert extract_unc_prefix(\"\\\\\\\\hi\\\\there\") ==\n             Some((~\"hi\", ~\"\\\\there\"));\n@@ -517,7 +517,7 @@ mod windows {\n \n     #[test]\n     fn test_extract_drive_prefixes() {\n-        assert extract_drive_prefix(\"c\") == None;\n+        assert extract_drive_prefix(\"c\").is_none();\n         assert extract_drive_prefix(\"c:\") == Some((~\"c\", ~\"\"));\n         assert extract_drive_prefix(\"d:\") == Some((~\"d\", ~\"\"));\n         assert extract_drive_prefix(\"z:\") == Some((~\"z\", ~\"\"));"}, {"sha": "87c554dd7033309d48055b018521f70733017417", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=ff513b1bcd0d872899b453cb3542e7a0924d5bde", "patch": "@@ -1027,7 +1027,7 @@ struct PortSet<T: send> : recv<T> {\n         // aliasable mutable memory.\n         let mut ports = ~[];\n         ports <-> self.ports;\n-        while result == None && ports.len() > 0 {\n+        while result.is_none() && ports.len() > 0 {\n             let i = wait_many(ports);\n             match move ports[i].try_recv() {\n                 Some(move m) => {\n@@ -1153,7 +1153,7 @@ fn recv_one<T: send>(+port: port_one<T>) -> T {\n fn try_recv_one<T: send> (+port: port_one<T>) -> Option<T> {\n     let message = try_recv(port);\n \n-    if message == None { None }\n+    if message.is_none() { None }\n     else {\n         let oneshot::send(message) = option::unwrap(message);\n         Some(message)"}, {"sha": "753bdd87fa1f9ea9b925f6ec9f6c36a69a82c61a", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=ff513b1bcd0d872899b453cb3542e7a0924d5bde", "patch": "@@ -408,7 +408,7 @@ mod tests {\n     #[test]\n     fn choose_option() {\n         let r = rand::Rng();\n-        assert r.choose_option(~[]) == None::<int>;\n+        assert r.choose_option(~[]).is_none();\n         assert r.choose_option(~[1, 1, 1]) == Some(1);\n     }\n \n@@ -431,7 +431,7 @@ mod tests {\n             {weight: 0u, item: 42},\n             {weight: 1u, item: 43}\n         ]) == Some(43);\n-        assert r.choose_weighted_option(~[]) == None::<int>;\n+        assert r.choose_weighted_option(~[]).is_none();\n     }\n \n     #[test]"}, {"sha": "b0cbf559fec64c26850b2efdb020df8d2db8486b", "filename": "src/libcore/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=ff513b1bcd0d872899b453cb3542e7a0924d5bde", "patch": "@@ -2195,7 +2195,7 @@ mod tests {\n         assert rfind_char(~\"hello\", 'l') == Some(3u);\n         assert rfind_char(~\"hello\", 'o') == Some(4u);\n         assert rfind_char(~\"hello\", 'h') == Some(0u);\n-        assert rfind_char(~\"hello\", 'z') == None;\n+        assert rfind_char(~\"hello\", 'z').is_none();\n         assert rfind_char(~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", '\u534e') == Some(30u);\n     }\n \n@@ -2393,15 +2393,15 @@ mod tests {\n     #[test]\n     fn test_find_str() {\n         // byte positions\n-        assert find_str(~\"banana\", ~\"apple pie\") == None;\n+        assert find_str(~\"banana\", ~\"apple pie\").is_none();\n         assert find_str(~\"\", ~\"\") == Some(0u);\n \n         let data = ~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n         assert find_str(data, ~\"\")     == Some(0u);\n         assert find_str(data, ~\"\u0e1b\u0e23\u0e30\u0e40\") == Some( 0u);\n         assert find_str(data, ~\"\u0e30\u0e40\")   == Some( 6u);\n         assert find_str(data, ~\"\u4e2d\u534e\") == Some(27u);\n-        assert find_str(data, ~\"\u0e44\u0e17\u534e\") == None;\n+        assert find_str(data, ~\"\u0e44\u0e17\u534e\").is_none();\n     }\n \n     #[test]\n@@ -2412,7 +2412,7 @@ mod tests {\n         let data = ~\"abcabc\";\n         assert find_str_between(data, ~\"ab\", 0u, 6u) == Some(0u);\n         assert find_str_between(data, ~\"ab\", 2u, 6u) == Some(3u);\n-        assert find_str_between(data, ~\"ab\", 2u, 4u) == None;\n+        assert find_str_between(data, ~\"ab\", 2u, 4u).is_none();\n \n         let mut data = ~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n         data += data;"}, {"sha": "86d182152b71e2d7ff8431d8a532bd5cea176bc4", "filename": "src/libcore/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=ff513b1bcd0d872899b453cb3542e7a0924d5bde", "patch": "@@ -2090,7 +2090,7 @@ fn test_tls_multitask() unsafe {\n     fn my_key(+_x: @~str) { }\n     local_data_set(my_key, @~\"parent data\");\n     do task::spawn unsafe {\n-        assert local_data_get(my_key) == None; // TLS shouldn't carry over.\n+        assert local_data_get(my_key).is_none(); // TLS shouldn't carry over.\n         local_data_set(my_key, @~\"child data\");\n         assert *(local_data_get(my_key).get()) == ~\"child data\";\n         // should be cleaned up for us\n@@ -2115,7 +2115,7 @@ fn test_tls_pop() unsafe {\n     local_data_set(my_key, @~\"weasel\");\n     assert *(local_data_pop(my_key).get()) == ~\"weasel\";\n     // Pop must remove the data from the map.\n-    assert local_data_pop(my_key) == None;\n+    assert local_data_pop(my_key).is_none();\n }\n \n #[test]"}, {"sha": "e36d0744b2c342a64e5781e4cd2a2373b8507316", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=ff513b1bcd0d872899b453cb3542e7a0924d5bde", "patch": "@@ -259,9 +259,9 @@ fn test_from_str() {\n     assert from_str(~\"123456789\") == Some(123456789u as T);\n     assert from_str(~\"00100\") == Some(100u as T);\n \n-    assert from_str(~\"\") == None;\n-    assert from_str(~\" \") == None;\n-    assert from_str(~\"x\") == None;\n+    assert from_str(~\"\").is_none();\n+    assert from_str(~\" \").is_none();\n+    assert from_str(~\"x\").is_none();\n }\n \n #[test]\n@@ -275,8 +275,8 @@ fn test_parse_buf() {\n     assert parse_buf(to_bytes(~\"ffff\"), 16u) == Some(65535u as T);\n     assert parse_buf(to_bytes(~\"z\"), 36u) == Some(35u as T);\n \n-    assert parse_buf(to_bytes(~\"Z\"), 10u) == None;\n-    assert parse_buf(to_bytes(~\"_\"), 2u) == None;\n+    assert parse_buf(to_bytes(~\"Z\"), 10u).is_none();\n+    assert parse_buf(to_bytes(~\"_\"), 2u).is_none();\n }\n \n #[test]"}, {"sha": "edf154a2db54645158d5102a6eb3a6800273f385", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff513b1bcd0d872899b453cb3542e7a0924d5bde/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=ff513b1bcd0d872899b453cb3542e7a0924d5bde", "patch": "@@ -2029,7 +2029,7 @@ mod tests {\n     #[test]\n     fn test_last() {\n         let mut n = last_opt(~[]);\n-        assert (n == None);\n+        assert (n.is_none());\n         n = last_opt(~[1, 2, 3]);\n         assert (n == Some(3));\n         n = last_opt(~[1, 2, 3, 4, 5]);\n@@ -2393,173 +2393,173 @@ mod tests {\n \n     #[test]\n     fn test_position_elem() {\n-        assert position_elem(~[], 1) == None;\n+        assert position_elem(~[], 1).is_none();\n \n         let v1 = ~[1, 2, 3, 3, 2, 5];\n         assert position_elem(v1, 1) == Some(0u);\n         assert position_elem(v1, 2) == Some(1u);\n         assert position_elem(v1, 5) == Some(5u);\n-        assert position_elem(v1, 4) == None;\n+        assert position_elem(v1, 4).is_none();\n     }\n \n     #[test]\n     fn test_position() {\n         fn less_than_three(&&i: int) -> bool { return i < 3; }\n         fn is_eighteen(&&i: int) -> bool { return i == 18; }\n \n-        assert position(~[], less_than_three) == None;\n+        assert position(~[], less_than_three).is_none();\n \n         let v1 = ~[5, 4, 3, 2, 1];\n         assert position(v1, less_than_three) == Some(3u);\n-        assert position(v1, is_eighteen) == None;\n+        assert position(v1, is_eighteen).is_none();\n     }\n \n     #[test]\n     fn test_position_between() {\n-        assert position_between(~[], 0u, 0u, f) == None;\n+        assert position_between(~[], 0u, 0u, f).is_none();\n \n         fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n         let mut v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n-        assert position_between(v, 0u, 0u, f) == None;\n-        assert position_between(v, 0u, 1u, f) == None;\n+        assert position_between(v, 0u, 0u, f).is_none();\n+        assert position_between(v, 0u, 1u, f).is_none();\n         assert position_between(v, 0u, 2u, f) == Some(1u);\n         assert position_between(v, 0u, 3u, f) == Some(1u);\n         assert position_between(v, 0u, 4u, f) == Some(1u);\n \n-        assert position_between(v, 1u, 1u, f) == None;\n+        assert position_between(v, 1u, 1u, f).is_none();\n         assert position_between(v, 1u, 2u, f) == Some(1u);\n         assert position_between(v, 1u, 3u, f) == Some(1u);\n         assert position_between(v, 1u, 4u, f) == Some(1u);\n \n-        assert position_between(v, 2u, 2u, f) == None;\n-        assert position_between(v, 2u, 3u, f) == None;\n+        assert position_between(v, 2u, 2u, f).is_none();\n+        assert position_between(v, 2u, 3u, f).is_none();\n         assert position_between(v, 2u, 4u, f) == Some(3u);\n \n-        assert position_between(v, 3u, 3u, f) == None;\n+        assert position_between(v, 3u, 3u, f).is_none();\n         assert position_between(v, 3u, 4u, f) == Some(3u);\n \n-        assert position_between(v, 4u, 4u, f) == None;\n+        assert position_between(v, 4u, 4u, f).is_none();\n     }\n \n     #[test]\n     fn test_find() {\n-        assert find(~[], f) == None;\n+        assert find(~[], f).is_none();\n \n         fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n         fn g(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'd' }\n         let mut v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n         assert find(v, f) == Some((1, 'b'));\n-        assert find(v, g) == None;\n+        assert find(v, g).is_none();\n     }\n \n     #[test]\n     fn test_find_between() {\n-        assert find_between(~[], 0u, 0u, f) == None;\n+        assert find_between(~[], 0u, 0u, f).is_none();\n \n         fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n         let mut v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n-        assert find_between(v, 0u, 0u, f) == None;\n-        assert find_between(v, 0u, 1u, f) == None;\n+        assert find_between(v, 0u, 0u, f).is_none();\n+        assert find_between(v, 0u, 1u, f).is_none();\n         assert find_between(v, 0u, 2u, f) == Some((1, 'b'));\n         assert find_between(v, 0u, 3u, f) == Some((1, 'b'));\n         assert find_between(v, 0u, 4u, f) == Some((1, 'b'));\n \n-        assert find_between(v, 1u, 1u, f) == None;\n+        assert find_between(v, 1u, 1u, f).is_none();\n         assert find_between(v, 1u, 2u, f) == Some((1, 'b'));\n         assert find_between(v, 1u, 3u, f) == Some((1, 'b'));\n         assert find_between(v, 1u, 4u, f) == Some((1, 'b'));\n \n-        assert find_between(v, 2u, 2u, f) == None;\n-        assert find_between(v, 2u, 3u, f) == None;\n+        assert find_between(v, 2u, 2u, f).is_none();\n+        assert find_between(v, 2u, 3u, f).is_none();\n         assert find_between(v, 2u, 4u, f) == Some((3, 'b'));\n \n-        assert find_between(v, 3u, 3u, f) == None;\n+        assert find_between(v, 3u, 3u, f).is_none();\n         assert find_between(v, 3u, 4u, f) == Some((3, 'b'));\n \n-        assert find_between(v, 4u, 4u, f) == None;\n+        assert find_between(v, 4u, 4u, f).is_none();\n     }\n \n     #[test]\n     fn test_rposition() {\n-        assert find(~[], f) == None;\n+        assert find(~[], f).is_none();\n \n         fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n         fn g(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'd' }\n         let mut v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n         assert position(v, f) == Some(1u);\n-        assert position(v, g) == None;\n+        assert position(v, g).is_none();\n     }\n \n     #[test]\n     fn test_rposition_between() {\n-        assert rposition_between(~[], 0u, 0u, f) == None;\n+        assert rposition_between(~[], 0u, 0u, f).is_none();\n \n         fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n         let mut v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n-        assert rposition_between(v, 0u, 0u, f) == None;\n-        assert rposition_between(v, 0u, 1u, f) == None;\n+        assert rposition_between(v, 0u, 0u, f).is_none();\n+        assert rposition_between(v, 0u, 1u, f).is_none();\n         assert rposition_between(v, 0u, 2u, f) == Some(1u);\n         assert rposition_between(v, 0u, 3u, f) == Some(1u);\n         assert rposition_between(v, 0u, 4u, f) == Some(3u);\n \n-        assert rposition_between(v, 1u, 1u, f) == None;\n+        assert rposition_between(v, 1u, 1u, f).is_none();\n         assert rposition_between(v, 1u, 2u, f) == Some(1u);\n         assert rposition_between(v, 1u, 3u, f) == Some(1u);\n         assert rposition_between(v, 1u, 4u, f) == Some(3u);\n \n-        assert rposition_between(v, 2u, 2u, f) == None;\n-        assert rposition_between(v, 2u, 3u, f) == None;\n+        assert rposition_between(v, 2u, 2u, f).is_none();\n+        assert rposition_between(v, 2u, 3u, f).is_none();\n         assert rposition_between(v, 2u, 4u, f) == Some(3u);\n \n-        assert rposition_between(v, 3u, 3u, f) == None;\n+        assert rposition_between(v, 3u, 3u, f).is_none();\n         assert rposition_between(v, 3u, 4u, f) == Some(3u);\n \n-        assert rposition_between(v, 4u, 4u, f) == None;\n+        assert rposition_between(v, 4u, 4u, f).is_none();\n     }\n \n     #[test]\n     fn test_rfind() {\n-        assert rfind(~[], f) == None;\n+        assert rfind(~[], f).is_none();\n \n         fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n         fn g(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'd' }\n         let mut v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n         assert rfind(v, f) == Some((3, 'b'));\n-        assert rfind(v, g) == None;\n+        assert rfind(v, g).is_none();\n     }\n \n     #[test]\n     fn test_rfind_between() {\n-        assert rfind_between(~[], 0u, 0u, f) == None;\n+        assert rfind_between(~[], 0u, 0u, f).is_none();\n \n         fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n         let mut v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n-        assert rfind_between(v, 0u, 0u, f) == None;\n-        assert rfind_between(v, 0u, 1u, f) == None;\n+        assert rfind_between(v, 0u, 0u, f).is_none();\n+        assert rfind_between(v, 0u, 1u, f).is_none();\n         assert rfind_between(v, 0u, 2u, f) == Some((1, 'b'));\n         assert rfind_between(v, 0u, 3u, f) == Some((1, 'b'));\n         assert rfind_between(v, 0u, 4u, f) == Some((3, 'b'));\n \n-        assert rfind_between(v, 1u, 1u, f) == None;\n+        assert rfind_between(v, 1u, 1u, f).is_none();\n         assert rfind_between(v, 1u, 2u, f) == Some((1, 'b'));\n         assert rfind_between(v, 1u, 3u, f) == Some((1, 'b'));\n         assert rfind_between(v, 1u, 4u, f) == Some((3, 'b'));\n \n-        assert rfind_between(v, 2u, 2u, f) == None;\n-        assert rfind_between(v, 2u, 3u, f) == None;\n+        assert rfind_between(v, 2u, 2u, f).is_none();\n+        assert rfind_between(v, 2u, 3u, f).is_none();\n         assert rfind_between(v, 2u, 4u, f) == Some((3, 'b'));\n \n-        assert rfind_between(v, 3u, 3u, f) == None;\n+        assert rfind_between(v, 3u, 3u, f).is_none();\n         assert rfind_between(v, 3u, 4u, f) == Some((3, 'b'));\n \n-        assert rfind_between(v, 4u, 4u, f) == None;\n+        assert rfind_between(v, 4u, 4u, f).is_none();\n     }\n \n     #[test]"}]}