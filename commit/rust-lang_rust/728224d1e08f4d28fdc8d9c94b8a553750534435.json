{"sha": "728224d1e08f4d28fdc8d9c94b8a553750534435", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyODIyNGQxZTA4ZjRkMjhmZGM4ZDljOTRiOGE1NTM3NTA1MzQ0MzU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-01-05T18:27:51Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-14T22:40:03Z"}, "message": "Show inferred opaque types with `#[rustc_regions]`", "tree": {"sha": "8487a032e060eb19f03873269372580e712b7b88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8487a032e060eb19f03873269372580e712b7b88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/728224d1e08f4d28fdc8d9c94b8a553750534435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/728224d1e08f4d28fdc8d9c94b8a553750534435", "html_url": "https://github.com/rust-lang/rust/commit/728224d1e08f4d28fdc8d9c94b8a553750534435", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/728224d1e08f4d28fdc8d9c94b8a553750534435/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f23bca79d44642b7a6af11f288216a4828a7b530", "url": "https://api.github.com/repos/rust-lang/rust/commits/f23bca79d44642b7a6af11f288216a4828a7b530", "html_url": "https://github.com/rust-lang/rust/commit/f23bca79d44642b7a6af11f288216a4828a7b530"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "f9db62e0a3a42321058069d51ae7aa5d8d38ed49", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/728224d1e08f4d28fdc8d9c94b8a553750534435/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728224d1e08f4d28fdc8d9c94b8a553750534435/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=728224d1e08f4d28fdc8d9c94b8a553750534435", "patch": "@@ -221,9 +221,17 @@ fn do_mir_borrowck<'a, 'tcx>(\n     // write unit-tests, as well as helping with debugging.\n     nll::dump_mir_results(infcx, MirSource::item(def_id), &body, &regioncx, &opt_closure_req);\n \n-    // We also have a `#[rustc_nll]` annotation that causes us to dump\n+    // We also have a `#[rustc_regions]` annotation that causes us to dump\n     // information.\n-    nll::dump_annotation(infcx, &body, def_id, &regioncx, &opt_closure_req, &mut errors_buffer);\n+    nll::dump_annotation(\n+        infcx,\n+        &body,\n+        def_id,\n+        &regioncx,\n+        &opt_closure_req,\n+        &opaque_type_values,\n+        &mut errors_buffer,\n+    );\n \n     // The various `flow_*` structures can be large. We drop `flow_inits` here\n     // so it doesn't overlap with the others below. This reduces peak memory"}, {"sha": "101d1856c38f2cf243577e88d1751ce9fc97dfbb", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/728224d1e08f4d28fdc8d9c94b8a553750534435/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728224d1e08f4d28fdc8d9c94b8a553750534435/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=728224d1e08f4d28fdc8d9c94b8a553750534435", "patch": "@@ -355,6 +355,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n     mir_def_id: DefId,\n     regioncx: &RegionInferenceContext<'tcx>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n+    opaque_type_values: &FxHashMap<DefId, ty::ResolvedOpaqueTy<'tcx>>,\n     errors_buffer: &mut Vec<Diagnostic>,\n ) {\n     let tcx = infcx.tcx;\n@@ -370,7 +371,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n     // viewing the intraprocedural state, the -Zdump-mir output is\n     // better.\n \n-    if let Some(closure_region_requirements) = closure_region_requirements {\n+    let mut err = if let Some(closure_region_requirements) = closure_region_requirements {\n         let mut err = tcx.sess.diagnostic().span_note_diag(body.span, \"external requirements\");\n \n         regioncx.annotate(tcx, &mut err);\n@@ -388,13 +389,19 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n         })\n         .unwrap();\n \n-        err.buffer(errors_buffer);\n+        err\n     } else {\n         let mut err = tcx.sess.diagnostic().span_note_diag(body.span, \"no external requirements\");\n         regioncx.annotate(tcx, &mut err);\n \n-        err.buffer(errors_buffer);\n+        err\n+    };\n+\n+    if !opaque_type_values.is_empty() {\n+        err.note(&format!(\"Inferred opaque type values:\\n{:#?}\", opaque_type_values));\n     }\n+\n+    err.buffer(errors_buffer);\n }\n \n fn for_each_region_constraint("}, {"sha": "6c073b3d2c8dc03c360c856f8332eaac55a3356b", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/728224d1e08f4d28fdc8d9c94b8a553750534435/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728224d1e08f4d28fdc8d9c94b8a553750534435/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=728224d1e08f4d28fdc8d9c94b8a553750534435", "patch": "@@ -1226,6 +1226,15 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                          revealed_ty={:?}\",\n                         output_ty, opaque_type_map, revealed_ty\n                     );\n+                    // Make sure that the inferred types are well-formed. I'm\n+                    // not entirely sure this is needed (the HIR type check\n+                    // didn't do this) but it seems sensible to prevent opaque\n+                    // types hiding ill-formed types.\n+                    obligations.obligations.push(traits::Obligation::new(\n+                        ObligationCause::dummy(),\n+                        param_env,\n+                        ty::Predicate::WellFormed(revealed_ty),\n+                    ));\n                     obligations.add(\n                         infcx\n                             .at(&ObligationCause::dummy(), param_env)"}]}