{"sha": "2c870e40744b873bf3205af7b2057cf4f76c3d1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjODcwZTQwNzQ0Yjg3M2JmMzIwNWFmN2IyMDU3Y2Y0Zjc2YzNkMWY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2013-01-23T03:52:39Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2013-01-23T03:52:39Z"}, "message": "Merge pull request #4585 from thestinger/map\n\nmigrate LinearMap<T, ()> to LinearSet<T>", "tree": {"sha": "896565254bff1a0800c66f2a6f62449527d8dcdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/896565254bff1a0800c66f2a6f62449527d8dcdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c870e40744b873bf3205af7b2057cf4f76c3d1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c870e40744b873bf3205af7b2057cf4f76c3d1f", "html_url": "https://github.com/rust-lang/rust/commit/2c870e40744b873bf3205af7b2057cf4f76c3d1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c870e40744b873bf3205af7b2057cf4f76c3d1f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e31ebeadc1ad0e38cc726e6b4a6c990498c5e10b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e31ebeadc1ad0e38cc726e6b4a6c990498c5e10b", "html_url": "https://github.com/rust-lang/rust/commit/e31ebeadc1ad0e38cc726e6b4a6c990498c5e10b"}, {"sha": "9cdcd9bff930fd9fc0813418c63def0a06f2558a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cdcd9bff930fd9fc0813418c63def0a06f2558a", "html_url": "https://github.com/rust-lang/rust/commit/9cdcd9bff930fd9fc0813418c63def0a06f2558a"}], "stats": {"total": 42, "additions": 18, "deletions": 24}, "files": [{"sha": "b98c79f8d0e7c91a6c22349e6be2e41b0a97c519", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2c870e40744b873bf3205af7b2057cf4f76c3d1f/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c870e40744b873bf3205af7b2057cf4f76c3d1f/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=2c870e40744b873bf3205af7b2057cf4f76c3d1f", "patch": "@@ -44,7 +44,7 @@ use io;\n use libc::{size_t, uintptr_t};\n use option::{None, Option, Some};\n use ptr;\n-use send_map::linear::LinearMap;\n+use send_map::linear::LinearSet;\n use stackwalk;\n use sys;\n \n@@ -294,12 +294,6 @@ pub fn gc() {\n     }\n }\n \n-type RootSet = LinearMap<*Word,()>;\n-\n-fn RootSet() -> RootSet {\n-    LinearMap()\n-}\n-\n #[cfg(gc)]\n fn expect_sentinel() -> bool { true }\n \n@@ -337,13 +331,13 @@ pub fn cleanup_stack_for_failure() {\n             ptr::null()\n         };\n \n-        let mut roots = ~RootSet();\n+        let mut roots = LinearSet::new();\n         for walk_gc_roots(need_cleanup, sentinel) |root, tydesc| {\n             // Track roots to avoid double frees.\n-            if roots.find(&*root).is_some() {\n+            if roots.contains(&*root) {\n                 loop;\n             }\n-            roots.insert(*root, ());\n+            roots.insert(*root);\n \n             if ptr::is_null(tydesc) {\n                 // FIXME #4420: Destroy this box"}, {"sha": "788c4fdbd5e4f476eee6c335547428a4aff27320", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c870e40744b873bf3205af7b2057cf4f76c3d1f/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c870e40744b873bf3205af7b2057cf4f76c3d1f/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=2c870e40744b873bf3205af7b2057cf4f76c3d1f", "patch": "@@ -485,7 +485,7 @@ pub mod linear {\n         fn remove(&mut self, value: &T) -> bool { self.map.remove(value) }\n     }\n \n-    impl <T: Hash IterBytes Eq> LinearSet<T> {\n+    pub impl <T: Hash IterBytes Eq> LinearSet<T> {\n         /// Create an empty LinearSet\n         static fn new() -> LinearSet<T> { LinearSet{map: LinearMap()} }\n     }"}, {"sha": "2411bd896e710b78bd33b5e9f946b835c17cc37c", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c870e40744b873bf3205af7b2057cf4f76c3d1f/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c870e40744b873bf3205af7b2057cf4f76c3d1f/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=2c870e40744b873bf3205af7b2057cf4f76c3d1f", "patch": "@@ -96,21 +96,21 @@ macro_rules! move_it (\n     { $x:expr } => ( unsafe { let y = move *ptr::addr_of(&($x)); move y } )\n )\n \n-type TaskSet = send_map::linear::LinearMap<*rust_task,()>;\n+type TaskSet = send_map::linear::LinearSet<*rust_task>;\n \n fn new_taskset() -> TaskSet {\n-    send_map::linear::LinearMap()\n+    send_map::linear::LinearSet::new()\n }\n fn taskset_insert(tasks: &mut TaskSet, task: *rust_task) {\n-    let didnt_overwrite = tasks.insert(task, ());\n+    let didnt_overwrite = tasks.insert(task);\n     assert didnt_overwrite;\n }\n fn taskset_remove(tasks: &mut TaskSet, task: *rust_task) {\n     let was_present = tasks.remove(&task);\n     assert was_present;\n }\n pub fn taskset_each(tasks: &TaskSet, blk: fn(v: *rust_task) -> bool) {\n-    tasks.each_key(|k| blk(*k))\n+    tasks.each(|k| blk(*k))\n }\n \n // One of these per group of linked-failure tasks."}, {"sha": "3561ef4db7d496d810f4644710b8f87b65cc11d9", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c870e40744b873bf3205af7b2057cf4f76c3d1f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c870e40744b873bf3205af7b2057cf4f76c3d1f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=2c870e40744b873bf3205af7b2057cf4f76c3d1f", "patch": "@@ -30,7 +30,7 @@ use util::common::indenter;\n use util::ppaux::{expr_repr, region_to_str};\n \n use core::dvec;\n-use core::send_map::linear::LinearMap;\n+use core::send_map::linear::LinearSet;\n use core::vec;\n use std::map::HashMap;\n use syntax::ast::{m_const, m_imm, m_mutbl};\n@@ -73,15 +73,15 @@ enum gather_loan_ctxt = @{bccx: borrowck_ctxt,\n                           req_maps: req_maps,\n                           mut item_ub: ast::node_id,\n                           mut root_ub: ast::node_id,\n-                          mut ignore_adjustments: LinearMap<ast::node_id,()>};\n+                          mut ignore_adjustments: LinearSet<ast::node_id>};\n \n fn gather_loans(bccx: borrowck_ctxt, crate: @ast::crate) -> req_maps {\n     let glcx = gather_loan_ctxt(@{bccx: bccx,\n                                   req_maps: {req_loan_map: HashMap(),\n                                              pure_map: HashMap()},\n                                   mut item_ub: 0,\n                                   mut root_ub: 0,\n-                                  mut ignore_adjustments: LinearMap()});\n+                                  mut ignore_adjustments: LinearSet::new()});\n     let v = visit::mk_vt(@visit::Visitor {visit_expr: req_loans_in_expr,\n                                           visit_fn: req_loans_in_fn,\n                                           visit_stmt: add_stmt_to_map,\n@@ -126,7 +126,7 @@ fn req_loans_in_expr(ex: @ast::expr,\n            ex.id, pprust::expr_to_str(ex, tcx.sess.intr()));\n \n     // If this expression is borrowed, have to ensure it remains valid:\n-    if !self.ignore_adjustments.contains_key(&ex.id) {\n+    if !self.ignore_adjustments.contains(&ex.id) {\n         for tcx.adjustments.find(ex.id).each |adjustments| {\n             self.guarantee_adjustments(ex, *adjustments);\n         }\n@@ -221,7 +221,7 @@ fn req_loans_in_expr(ex: @ast::expr,\n \n         // FIXME (#3387): Total hack: Ignore adjustments for the left-hand\n         // side. Their regions will be inferred to be too large.\n-        self.ignore_adjustments.insert(rcvr.id, ());\n+        self.ignore_adjustments.insert(rcvr.id);\n \n         visit::visit_expr(ex, self, vt);\n       }"}, {"sha": "df82c32f35564f026a6a4c2c6155850624d02ec1", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c870e40744b873bf3205af7b2057cf4f76c3d1f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c870e40744b873bf3205af7b2057cf4f76c3d1f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=2c870e40744b873bf3205af7b2057cf4f76c3d1f", "patch": "@@ -693,18 +693,18 @@ impl CoherenceChecker {\n \n         let tcx = self.crate_context.tcx;\n \n-        let mut provided_names = send_map::linear::LinearMap();\n+        let mut provided_names = send_map::linear::LinearSet::new();\n         // Implemented methods\n         for uint::range(0, all_methods.len()) |i| {\n-            provided_names.insert(all_methods[i].ident, ());\n+            provided_names.insert(all_methods[i].ident);\n         }\n         // Default methods\n         for ty::provided_trait_methods(tcx, trait_did).each |ident| {\n-            provided_names.insert(*ident, ());\n+            provided_names.insert(*ident);\n         }\n \n         for (*ty::trait_methods(tcx, trait_did)).each |method| {\n-            if provided_names.contains_key(&method.ident) { loop; }\n+            if provided_names.contains(&method.ident) { loop; }\n \n             tcx.sess.span_err(trait_ref_span,\n                               fmt!(\"missing method `%s`\","}]}