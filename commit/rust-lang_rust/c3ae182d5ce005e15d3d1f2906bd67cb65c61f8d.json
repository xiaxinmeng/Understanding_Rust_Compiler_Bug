{"sha": "c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYWUxODJkNWNlMDA1ZTE1ZDNkMWYyOTA2YmQ2N2NiNjVjNjFmOGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-29T17:46:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-29T17:46:34Z"}, "message": "auto merge of #11754 : alexcrichton/rust/unused-result, r=brson\n\nThe general consensus is that we want to move away from conditions for I/O, and I propose a two-step plan for doing so:\r\n\r\n1. Warn about unused `Result` types. When all of I/O returns `Result`, it will require you inspect the return value for an error *only if* you have a result you want to look at. By default, for things like `write` returning `Result<(), Error>`, these will all go silently ignored. This lint will prevent blind ignorance of these return values, letting you know that there's something you should do about them.\r\n\r\n2. Implement a `try!` macro:\r\n\r\n```\r\nmacro_rules! try( ($e:expr) => (match $e { Ok(e) => e, Err(e) => return Err(e) }) )\r\n```\r\n\r\nWith these two tools combined, I feel that we get almost all the benefits of conditions. The first step (the lint) is a sanity check that you're not ignoring return values at callsites. The second step is to provide a convenience method of returning early out of a sequence of computations. After thinking about this for awhile, I don't think that we need the so-called \"do-notation\" in the compiler itself because I think it's just *too* specialized. Additionally, the `try!` macro is super lightweight, easy to understand, and works almost everywhere. As soon as you want to do something more fancy, my answer is \"use match\".\r\n\r\nBasically, with these two tools in action, I would be comfortable removing conditions. What do others think about this strategy?\r\n\r\n----\r\n\r\nThis PR specifically implements the `unused_result` lint. I actually added two lints, `unused_result` and `unused_must_use`, and the first commit has the rationale for why `unused_result` is turned off by default.", "tree": {"sha": "c45f623e349d8773561d27883dcdd7e60c627fa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c45f623e349d8773561d27883dcdd7e60c627fa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d", "html_url": "https://github.com/rust-lang/rust/commit/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1580f6d09f0cd990c3eed55b1d6181af3258791", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1580f6d09f0cd990c3eed55b1d6181af3258791", "html_url": "https://github.com/rust-lang/rust/commit/e1580f6d09f0cd990c3eed55b1d6181af3258791"}, {"sha": "c13a62593c218243b4d3b0e8be0b903c0315571b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c13a62593c218243b4d3b0e8be0b903c0315571b", "html_url": "https://github.com/rust-lang/rust/commit/c13a62593c218243b4d3b0e8be0b903c0315571b"}], "stats": {"total": 161, "additions": 133, "deletions": 28}, "files": [{"sha": "acab7ce3a91b4763b8615236ed0fabcf005fd6f1", "filename": "src/libnative/io/file.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Flibnative%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Flibnative%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile.rs?ref=c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d", "patch": "@@ -118,7 +118,10 @@ impl io::Reader for FileDesc {\n \n impl io::Writer for FileDesc {\n     fn write(&mut self, buf: &[u8]) {\n-        self.inner_write(buf);\n+        match self.inner_write(buf) {\n+            Ok(()) => {}\n+            Err(e) => { io::io_error::cond.raise(e); }\n+        }\n     }\n }\n \n@@ -276,7 +279,7 @@ impl rtio::RtioFileStream for FileDesc {\n                 _ => Ok(())\n             }\n         };\n-        self.seek(orig_pos as i64, io::SeekSet);\n+        let _ = self.seek(orig_pos as i64, io::SeekSet);\n         return ret;\n     }\n     #[cfg(unix)]\n@@ -383,12 +386,10 @@ impl rtio::RtioFileStream for CFile {\n     }\n \n     fn pread(&mut self, buf: &mut [u8], offset: u64) -> Result<int, IoError> {\n-        self.flush();\n-        self.fd.pread(buf, offset)\n+        self.flush().and_then(|()| self.fd.pread(buf, offset))\n     }\n     fn pwrite(&mut self, buf: &[u8], offset: u64) -> Result<(), IoError> {\n-        self.flush();\n-        self.fd.pwrite(buf, offset)\n+        self.flush().and_then(|()| self.fd.pwrite(buf, offset))\n     }\n     fn seek(&mut self, pos: i64, style: io::SeekStyle) -> Result<u64, IoError> {\n         let whence = match style {\n@@ -412,16 +413,13 @@ impl rtio::RtioFileStream for CFile {\n         }\n     }\n     fn fsync(&mut self) -> Result<(), IoError> {\n-        self.flush();\n-        self.fd.fsync()\n+        self.flush().and_then(|()| self.fd.fsync())\n     }\n     fn datasync(&mut self) -> Result<(), IoError> {\n-        self.flush();\n-        self.fd.fsync()\n+        self.flush().and_then(|()| self.fd.fsync())\n     }\n     fn truncate(&mut self, offset: i64) -> Result<(), IoError> {\n-        self.flush();\n-        self.fd.truncate(offset)\n+        self.flush().and_then(|()| self.fd.truncate(offset))\n     }\n }\n "}, {"sha": "13dd4298777c617db5bdf5cd1451cd49b55dd433", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d", "patch": "@@ -486,7 +486,7 @@ fn spawn_process_os(prog: &str, args: &[~str],\n                 (errno <<  8) as u8,\n                 (errno <<  0) as u8,\n             ];\n-            output.inner_write(bytes);\n+            assert!(output.inner_write(bytes).is_ok());\n             intrinsics::abort();\n         })\n     }"}, {"sha": "74759b467d4a797557932eb89fa39f4417139c79", "filename": "src/libnative/io/timer_helper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Flibnative%2Fio%2Ftimer_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Flibnative%2Fio%2Ftimer_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_helper.rs?ref=c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d", "patch": "@@ -101,7 +101,7 @@ mod imp {\n     }\n \n     pub fn signal(fd: libc::c_int) {\n-        FileDesc::new(fd, false).inner_write([0]);\n+        FileDesc::new(fd, false).inner_write([0]).unwrap();\n     }\n \n     pub fn close(fd: libc::c_int) {"}, {"sha": "bc005f2fe8dd3542b40ee033f900a20c16817b22", "filename": "src/libnative/io/timer_other.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Flibnative%2Fio%2Ftimer_other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Flibnative%2Fio%2Ftimer_other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_other.rs?ref=c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d", "patch": "@@ -187,7 +187,7 @@ fn helper(input: libc::c_int, messages: Port<Req>) {\n \n                 // drain the file descriptor\n                 let mut buf = [0];\n-                fd.inner_read(buf);\n+                fd.inner_read(buf).unwrap();\n             }\n \n             -1 if os::errno() == libc::EINTR as int => {}"}, {"sha": "1888b8578a0920952f35f1589b2933724f1e3b7f", "filename": "src/libnative/io/timer_timerfd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_timerfd.rs?ref=c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d", "patch": "@@ -98,15 +98,15 @@ fn helper(input: libc::c_int, messages: Port<Req>) {\n             if fd == input {\n                 let mut buf = [0, ..1];\n                 // drain the input file descriptor of its input\n-                FileDesc::new(fd, false).inner_read(buf);\n+                FileDesc::new(fd, false).inner_read(buf).unwrap();\n                 incoming = true;\n             } else {\n                 let mut bits = [0, ..8];\n                 // drain the timerfd of how many times its fired\n                 //\n                 // FIXME: should this perform a send() this number of\n                 //      times?\n-                FileDesc::new(fd, false).inner_read(bits);\n+                FileDesc::new(fd, false).inner_read(bits).unwrap();\n                 let remove = {\n                     match map.find(&fd).expect(\"fd unregistered\") {\n                         &(ref c, oneshot) => !c.try_send(()) || oneshot"}, {"sha": "42858416147e0cda89d604cdb114906e9f4ab983", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 73, "deletions": 7, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d", "patch": "@@ -105,6 +105,9 @@ pub enum Lint {\n     Experimental,\n     Unstable,\n \n+    UnusedMustUse,\n+    UnusedResult,\n+\n     Warnings,\n }\n \n@@ -356,12 +359,26 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         desc: \"unknown features found in crate-level #[feature] directives\",\n         default: deny,\n     }),\n-     (\"unknown_crate_type\",\n-     LintSpec {\n-         lint: UnknownCrateType,\n-         desc: \"unknown crate type found in #[crate_type] directive\",\n-         default: deny,\n-     }),\n+    (\"unknown_crate_type\",\n+    LintSpec {\n+        lint: UnknownCrateType,\n+        desc: \"unknown crate type found in #[crate_type] directive\",\n+        default: deny,\n+    }),\n+\n+    (\"unused_must_use\",\n+    LintSpec {\n+        lint: UnusedMustUse,\n+        desc: \"unused result of an type flagged as #[must_use]\",\n+        default: warn,\n+    }),\n+\n+    (\"unused_result\",\n+    LintSpec {\n+        lint: UnusedResult,\n+        desc: \"unused result of an expression in a statement\",\n+        default: allow,\n+    }),\n ];\n \n /*\n@@ -934,7 +951,7 @@ static other_attrs: &'static [&'static str] = &[\n     \"crate_map\", \"cfg\", \"doc\", \"export_name\", \"link_section\", \"no_freeze\",\n     \"no_mangle\", \"no_send\", \"static_assert\", \"unsafe_no_drop_flag\", \"packed\",\n     \"simd\", \"repr\", \"deriving\", \"unsafe_destructor\", \"link\", \"phase\",\n-    \"macro_export\",\n+    \"macro_export\", \"must_use\",\n \n     //mod-level\n     \"path\", \"link_name\", \"link_args\", \"nolink\", \"macro_escape\", \"no_implicit_prelude\",\n@@ -1016,6 +1033,54 @@ fn check_path_statement(cx: &Context, s: &ast::Stmt) {\n     }\n }\n \n+fn check_unused_result(cx: &Context, s: &ast::Stmt) {\n+    let expr = match s.node {\n+        ast::StmtSemi(expr, _) => expr,\n+        _ => return\n+    };\n+    let t = ty::expr_ty(cx.tcx, expr);\n+    match ty::get(t).sty {\n+        ty::ty_nil | ty::ty_bot | ty::ty_bool => return,\n+        _ => {}\n+    }\n+    match expr.node {\n+        ast::ExprRet(..) => return,\n+        _ => {}\n+    }\n+\n+    let t = ty::expr_ty(cx.tcx, expr);\n+    let mut warned = false;\n+    match ty::get(t).sty {\n+        ty::ty_struct(did, _) |\n+        ty::ty_enum(did, _) => {\n+            if ast_util::is_local(did) {\n+                match cx.tcx.items.get(did.node) {\n+                    ast_map::NodeItem(it, _) => {\n+                        if attr::contains_name(it.attrs, \"must_use\") {\n+                            cx.span_lint(UnusedMustUse, s.span,\n+                                         \"unused result which must be used\");\n+                            warned = true;\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            } else {\n+                csearch::get_item_attrs(cx.tcx.sess.cstore, did, |attrs| {\n+                    if attr::contains_name(attrs, \"must_use\") {\n+                        cx.span_lint(UnusedMustUse, s.span,\n+                                     \"unused result which must be used\");\n+                        warned = true;\n+                    }\n+                });\n+            }\n+        }\n+        _ => {}\n+    }\n+    if !warned {\n+        cx.span_lint(UnusedResult, s.span, \"unused result\");\n+    }\n+}\n+\n fn check_item_non_camel_case_types(cx: &Context, it: &ast::Item) {\n     fn is_camel_case(cx: ty::ctxt, ident: ast::Ident) -> bool {\n         let ident = cx.sess.str_of(ident);\n@@ -1478,6 +1543,7 @@ impl<'a> Visitor<()> for Context<'a> {\n \n     fn visit_stmt(&mut self, s: &ast::Stmt, _: ()) {\n         check_path_statement(self, s);\n+        check_unused_result(self, s);\n \n         visit::walk_stmt(self, s, ());\n     }"}, {"sha": "31afa7b5c7c80edf626bd6614fa101b4fcc50411", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d", "patch": "@@ -389,7 +389,7 @@ impl Drop for FileWatcher {\n                 }\n             }\n             rtio::CloseSynchronously => {\n-                execute_nop(|req, cb| unsafe {\n+                let _ = execute_nop(|req, cb| unsafe {\n                     uvll::uv_fs_close(self.loop_.handle, req, self.fd, cb)\n                 });\n             }"}, {"sha": "8904101dd05ed1ec6b02e4310bc2822a950f3278", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d", "patch": "@@ -175,7 +175,7 @@ impl File {\n     ///\n     /// This function will raise on the `io_error` condition on failure.\n     pub fn fsync(&mut self) {\n-        self.fd.fsync().map_err(|e| io_error::cond.raise(e));\n+        let _ = self.fd.fsync().map_err(|e| io_error::cond.raise(e));\n     }\n \n     /// This function is similar to `fsync`, except that it may not synchronize\n@@ -187,7 +187,7 @@ impl File {\n     ///\n     /// This function will raise on the `io_error` condition on failure.\n     pub fn datasync(&mut self) {\n-        self.fd.datasync().map_err(|e| io_error::cond.raise(e));\n+        let _ = self.fd.datasync().map_err(|e| io_error::cond.raise(e));\n     }\n \n     /// Either truncates or extends the underlying file, updating the size of\n@@ -203,7 +203,7 @@ impl File {\n     ///\n     /// On error, this function will raise on the `io_error` condition.\n     pub fn truncate(&mut self, size: i64) {\n-        self.fd.truncate(size).map_err(|e| io_error::cond.raise(e));\n+        let _ = self.fd.truncate(size).map_err(|e| io_error::cond.raise(e));\n     }\n \n     /// Tests whether this stream has reached EOF."}, {"sha": "c3618bad18ec4f8cb6af067e82b52f57df070adb", "filename": "src/libstd/result.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d", "patch": "@@ -20,6 +20,7 @@ use to_str::ToStr;\n \n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n #[deriving(Clone, DeepClone, Eq, Ord, TotalEq, TotalOrd, ToStr)]\n+#[must_use]\n pub enum Result<T, E> {\n     /// Contains the success value\n     Ok(T),"}, {"sha": "eaf4d7d94c454b65b99566839d51bb35e49eeea8", "filename": "src/test/compile-fail/unused-result.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Ftest%2Fcompile-fail%2Funused-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d/src%2Ftest%2Fcompile-fail%2Funused-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-result.rs?ref=c3ae182d5ce005e15d3d1f2906bd67cb65c61f8d", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deny(unused_result, unused_must_use)];\n+#[allow(dead_code)];\n+\n+#[must_use]\n+enum MustUse { Test }\n+\n+fn foo<T>() -> T { fail!() }\n+\n+fn bar() -> int { return foo::<int>(); }\n+fn baz() -> MustUse { return foo::<MustUse>(); }\n+\n+#[allow(unused_result)]\n+fn test() {\n+    foo::<int>();\n+    foo::<MustUse>(); //~ ERROR: unused result which must be used\n+}\n+\n+#[allow(unused_result, unused_must_use)]\n+fn test2() {\n+    foo::<int>();\n+    foo::<MustUse>();\n+}\n+\n+fn main() {\n+    foo::<int>(); //~ ERROR: unused result\n+    foo::<MustUse>(); //~ ERROR: unused result which must be used\n+\n+    let _ = foo::<int>();\n+    let _ = foo::<MustUse>();\n+}"}]}