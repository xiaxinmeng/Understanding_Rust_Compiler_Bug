{"sha": "2f893e458a20a159fcf93a9a5b0435ae3ed0a67e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmODkzZTQ1OGEyMGExNTlmY2Y5M2E5YTViMDQzNWFlM2VkMGE2N2U=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-21T21:25:52Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-21T21:25:52Z"}, "message": "review", "tree": {"sha": "0e4ac4a0a8f7c3fd078367315481a86022e7952c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e4ac4a0a8f7c3fd078367315481a86022e7952c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f893e458a20a159fcf93a9a5b0435ae3ed0a67e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f893e458a20a159fcf93a9a5b0435ae3ed0a67e", "html_url": "https://github.com/rust-lang/rust/commit/2f893e458a20a159fcf93a9a5b0435ae3ed0a67e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f893e458a20a159fcf93a9a5b0435ae3ed0a67e/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a493ced748e2e3e7390fc6f28640d23cb90e67b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a493ced748e2e3e7390fc6f28640d23cb90e67b", "html_url": "https://github.com/rust-lang/rust/commit/9a493ced748e2e3e7390fc6f28640d23cb90e67b"}], "stats": {"total": 54, "additions": 23, "deletions": 31}, "files": [{"sha": "97a13ee8e20e9ef0a91c56bc290a510e11b57fab", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f893e458a20a159fcf93a9a5b0435ae3ed0a67e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f893e458a20a159fcf93a9a5b0435ae3ed0a67e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=2f893e458a20a159fcf93a9a5b0435ae3ed0a67e", "patch": "@@ -23,6 +23,12 @@ pub enum ErrorHandled {\n     TooGeneric,\n }\n \n+impl From<ErrorReported> for ErrorHandled {\n+    fn from(err: ErrorReported) -> ErrorHandled {\n+        ErrorHandled::Reported(err)\n+    }\n+}\n+\n CloneTypeFoldableAndLiftImpls! {\n     ErrorHandled,\n }"}, {"sha": "0cfcaca9060336f2140a0e24d7f6e7647518047b", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2f893e458a20a159fcf93a9a5b0435ae3ed0a67e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f893e458a20a159fcf93a9a5b0435ae3ed0a67e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=2f893e458a20a159fcf93a9a5b0435ae3ed0a67e", "patch": "@@ -32,18 +32,15 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n ) -> Result<(), ErrorHandled> {\n     debug!(\"is_const_evaluatable({:?}, {:?})\", def, substs);\n     if infcx.tcx.features().const_evaluatable_checked {\n-        if let Some(ct) =\n-            AbstractConst::new(infcx.tcx, def, substs).map_err(ErrorHandled::Reported)?\n-        {\n+        if let Some(ct) = AbstractConst::new(infcx.tcx, def, substs)? {\n             for pred in param_env.caller_bounds() {\n                 match pred.skip_binders() {\n                     ty::PredicateAtom::ConstEvaluatable(b_def, b_substs) => {\n                         debug!(\"is_const_evaluatable: caller_bound={:?}, {:?}\", b_def, b_substs);\n                         if b_def == def && b_substs == substs {\n                             debug!(\"is_const_evaluatable: caller_bound ~~> ok\");\n                             return Ok(());\n-                        } else if AbstractConst::new(infcx.tcx, b_def, b_substs)\n-                            .map_err(ErrorHandled::Reported)?\n+                        } else if AbstractConst::new(infcx.tcx, b_def, b_substs)?\n                             .map_or(false, |b_ct| try_unify(infcx.tcx, ct, b_ct))\n                         {\n                             debug!(\"is_const_evaluatable: abstract_const ~~> ok\");\n@@ -153,14 +150,12 @@ struct AbstractConstBuilder<'a, 'tcx> {\n \n impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n     fn error(&mut self, span: Option<Span>, msg: &str) -> Result<!, ErrorReported> {\n-        let mut err =\n-            self.tcx.sess.struct_span_err(self.body.span, \"overly complex generic constant\");\n-        if let Some(span) = span {\n-            err.span_note(span, msg);\n-        } else {\n-            err.note(msg);\n-        }\n-        err.help(\"consider moving this anonymous constant into a `const` function\").emit();\n+        self.tcx\n+            .sess\n+            .struct_span_err(self.body.span, \"overly complex generic constant\")\n+            .span_label(span.unwrap_or(self.body.span), msg)\n+            .help(\"consider moving this anonymous constant into a `const` function\")\n+            .emit();\n \n         Err(ErrorReported)\n     }"}, {"sha": "9f0b7252e8326ff2893c633d2ea735670ed8de3c", "filename": "src/test/ui/const-generics/const_evaluatable_checked/closures.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f893e458a20a159fcf93a9a5b0435ae3ed0a67e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fclosures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f893e458a20a159fcf93a9a5b0435ae3ed0a67e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fclosures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fclosures.stderr?ref=2f893e458a20a159fcf93a9a5b0435ae3ed0a67e", "patch": "@@ -2,13 +2,10 @@ error: overly complex generic constant\n   --> $DIR/closures.rs:3:35\n    |\n LL | fn test<const N: usize>() -> [u8; N + (|| 42)()] {}\n-   |                                   ^^^^^^^^^^^^^\n+   |                                   ^^^^-------^^\n+   |                                       |\n+   |                                       unsupported rvalue\n    |\n-note: unsupported rvalue\n-  --> $DIR/closures.rs:3:39\n-   |\n-LL | fn test<const N: usize>() -> [u8; N + (|| 42)()] {}\n-   |                                       ^^^^^^^\n    = help: consider moving this anonymous constant into a `const` function\n \n error: aborting due to previous error"}, {"sha": "5749defb3e12c679227424fb7eef06d8bf66ad61", "filename": "src/test/ui/const-generics/const_evaluatable_checked/let-bindings.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2f893e458a20a159fcf93a9a5b0435ae3ed0a67e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Flet-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f893e458a20a159fcf93a9a5b0435ae3ed0a67e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Flet-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Flet-bindings.stderr?ref=2f893e458a20a159fcf93a9a5b0435ae3ed0a67e", "patch": "@@ -2,26 +2,20 @@ error: overly complex generic constant\n   --> $DIR/let-bindings.rs:6:68\n    |\n LL | fn test<const N: usize>() -> [u8; { let x = N; N + 1 }] where [u8; { let x = N; N + 1 }]: Default {\n-   |                                                                    ^^^^^^^^^^^^^^^^^^^^\n+   |                                                                    ^^^^^^-^^^^^^^^^^^^^\n+   |                                                                          |\n+   |                                                                          unsupported statement\n    |\n-note: unsupported statement\n-  --> $DIR/let-bindings.rs:6:74\n-   |\n-LL | fn test<const N: usize>() -> [u8; { let x = N; N + 1 }] where [u8; { let x = N; N + 1 }]: Default {\n-   |                                                                          ^\n    = help: consider moving this anonymous constant into a `const` function\n \n error: overly complex generic constant\n   --> $DIR/let-bindings.rs:6:35\n    |\n LL | fn test<const N: usize>() -> [u8; { let x = N; N + 1 }] where [u8; { let x = N; N + 1 }]: Default {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^\n+   |                                   ^^^^^^-^^^^^^^^^^^^^\n+   |                                         |\n+   |                                         unsupported statement\n    |\n-note: unsupported statement\n-  --> $DIR/let-bindings.rs:6:41\n-   |\n-LL | fn test<const N: usize>() -> [u8; { let x = N; N + 1 }] where [u8; { let x = N; N + 1 }]: Default {\n-   |                                         ^\n    = help: consider moving this anonymous constant into a `const` function\n \n error: aborting due to 2 previous errors"}]}