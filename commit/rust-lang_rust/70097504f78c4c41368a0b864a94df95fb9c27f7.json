{"sha": "70097504f78c4c41368a0b864a94df95fb9c27f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMDk3NTA0Zjc4YzRjNDEzNjhhMGI4NjRhOTRkZjk1ZmI5YzI3Zjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-17T18:10:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-17T18:10:55Z"}, "message": "hide root", "tree": {"sha": "c4034cab3c0d0b9488c0be538ae1d4c286570de9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4034cab3c0d0b9488c0be538ae1d4c286570de9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70097504f78c4c41368a0b864a94df95fb9c27f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70097504f78c4c41368a0b864a94df95fb9c27f7", "html_url": "https://github.com/rust-lang/rust/commit/70097504f78c4c41368a0b864a94df95fb9c27f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70097504f78c4c41368a0b864a94df95fb9c27f7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed7ae78c6fd9e508f6e959c6a164cf8481f6b377", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed7ae78c6fd9e508f6e959c6a164cf8481f6b377", "html_url": "https://github.com/rust-lang/rust/commit/ed7ae78c6fd9e508f6e959c6a164cf8481f6b377"}], "stats": {"total": 156, "additions": 91, "deletions": 65}, "files": [{"sha": "ae96a0d62dbe27c6d8d95430639945acc4e1d081", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=70097504f78c4c41368a0b864a94df95fb9c27f7", "patch": "@@ -26,7 +26,7 @@ use std::{\n };\n \n use libsyntax2::{\n-    TextUnit, TextRange, SyntaxRoot,\n+    TextUnit, TextRange, RefRoot,\n     ast::{self, AstNode, NameOwner},\n     SyntaxKind::*,\n };\n@@ -151,15 +151,15 @@ impl World {\n         Ok(vec![])\n     }\n \n-    fn index_resolve(&self, name_ref: ast::NameRef<&SyntaxRoot>) -> Vec<(FileId, FileSymbol)> {\n+    fn index_resolve(&self, name_ref: ast::NameRef<RefRoot>) -> Vec<(FileId, FileSymbol)> {\n         let name = name_ref.text();\n         let mut query = Query::new(name.to_string());\n         query.exact();\n         query.limit(4);\n         self.world_symbols(query)\n     }\n \n-    fn resolve_module(&self, id: FileId, module: ast::Module<&SyntaxRoot>) -> Vec<(FileId, FileSymbol)> {\n+    fn resolve_module(&self, id: FileId, module: ast::Module<RefRoot>) -> Vec<(FileId, FileSymbol)> {\n         let name = match module.name() {\n             Some(name) => name.text(),\n             None => return Vec::new(),"}, {"sha": "bb6eb0d6188162bbbd72d1233f98895c0e28c17f", "filename": "crates/libeditor/src/code_actions.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs?ref=70097504f78c4c41368a0b864a94df95fb9c27f7", "patch": "@@ -2,8 +2,7 @@ use {TextUnit, File, EditBuilder, Edit};\n use libsyntax2::{\n     ast::{self, AstNode, AttrsOwner},\n     SyntaxKind::COMMA,\n-    SyntaxNodeRef,\n-    SyntaxRoot,\n+    SyntaxNodeRef, RefRoot,\n     algo::{\n         Direction, siblings,\n         find_leaf_at_offset, ancestors,\n@@ -71,7 +70,7 @@ fn non_trivia_sibling(node: SyntaxNodeRef, direction: Direction) -> Option<Synta\n         .find(|node| !node.kind().is_trivia())\n }\n \n-pub fn find_node<'a, N: AstNode<&'a SyntaxRoot>>(syntax: SyntaxNodeRef<'a>, offset: TextUnit) -> Option<N> {\n+pub fn find_node<'a, N: AstNode<RefRoot<'a>>>(syntax: SyntaxNodeRef<'a>, offset: TextUnit) -> Option<N> {\n     let leaves = find_leaf_at_offset(syntax, offset);\n     let leaf = leaves.clone()\n         .find(|leaf| !leaf.kind().is_trivia())"}, {"sha": "cf5bd2a412259af0365ac0e2d1449a2067f52c19", "filename": "crates/libeditor/src/symbols.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibeditor%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibeditor%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fsymbols.rs?ref=70097504f78c4c41368a0b864a94df95fb9c27f7", "patch": "@@ -1,6 +1,6 @@\n use smol_str::SmolStr;\n use libsyntax2::{\n-    SyntaxKind, SyntaxNodeRef, SyntaxRoot, AstNode,\n+    SyntaxKind, SyntaxNodeRef, AstNode, RefRoot,\n     ast::{self, NameOwner},\n     algo::{\n         visit::{visitor, Visitor},\n@@ -32,7 +32,7 @@ pub fn file_symbols(file: &ast::File) -> Vec<FileSymbol> {\n }\n \n fn to_symbol(node: SyntaxNodeRef) -> Option<FileSymbol> {\n-    fn decl<'a, N: NameOwner<&'a SyntaxRoot>>(node: N) -> Option<FileSymbol> {\n+    fn decl<'a, N: NameOwner<RefRoot<'a>>>(node: N) -> Option<FileSymbol> {\n         let name = node.name()?;\n         Some(FileSymbol {\n             name: name.text(),\n@@ -80,7 +80,7 @@ pub fn file_structure(file: &ast::File) -> Vec<StructureNode> {\n }\n \n fn structure_node(node: SyntaxNodeRef) -> Option<StructureNode> {\n-    fn decl<'a, N: NameOwner<&'a SyntaxRoot>>(node: N) -> Option<StructureNode> {\n+    fn decl<'a, N: NameOwner<RefRoot<'a>>>(node: N) -> Option<StructureNode> {\n         let name = node.name()?;\n         Some(StructureNode {\n             parent: None,"}, {"sha": "55eb72f5957fbbdcea0ae78f756c53dbcd367f62", "filename": "crates/libsyntax2/src/algo/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fvisit.rs?ref=70097504f78c4c41368a0b864a94df95fb9c27f7", "patch": "@@ -1,5 +1,5 @@\n use std::marker::PhantomData;\n-use {SyntaxNodeRef, AstNode, SyntaxRoot};\n+use {SyntaxNodeRef, AstNode, RefRoot};\n \n \n pub fn visitor<'a, T>() -> impl Visitor<'a, Output=T> {\n@@ -10,7 +10,7 @@ pub trait Visitor<'a>: Sized {\n     type Output;\n     fn accept(self, node: SyntaxNodeRef<'a>) -> Option<Self::Output>;\n     fn visit<N, F>(self, f: F) -> Vis<Self, N, F>\n-        where N: AstNode<&'a SyntaxRoot>,\n+        where N: AstNode<RefRoot<'a>>,\n               F: FnOnce(N) -> Self::Output,\n     {\n         Vis { inner: self, f, ph: PhantomData }\n@@ -40,7 +40,7 @@ pub struct Vis<V, N, F> {\n impl<'a, V, N, F> Visitor<'a> for Vis<V, N, F>\n     where\n         V: Visitor<'a>,\n-        N: AstNode<&'a SyntaxRoot>,\n+        N: AstNode<RefRoot<'a>>,\n         F: FnOnce(N) -> <V as Visitor<'a>>::Output,\n {\n     type Output = <V as Visitor<'a>>::Output;"}, {"sha": "4fc405c8af9ea0dcc67fe146a2084e4aa80ca94a", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=70097504f78c4c41368a0b864a94df95fb9c27f7", "patch": "@@ -1,13 +1,12 @@\n-use std::sync::Arc;\n use {\n     ast,\n-    SyntaxNode, SyntaxRoot, TreeRoot, AstNode,\n+    SyntaxNode, OwnedRoot, TreeRoot, AstNode,\n     SyntaxKind::*,\n };\n \n // ArrayType\n #[derive(Debug, Clone, Copy)]\n-pub struct ArrayType<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct ArrayType<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -25,7 +24,7 @@ impl<R: TreeRoot> ArrayType<R> {}\n \n // Attr\n #[derive(Debug, Clone, Copy)]\n-pub struct Attr<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct Attr<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -50,7 +49,7 @@ impl<R: TreeRoot> Attr<R> {\n \n // ConstDef\n #[derive(Debug, Clone, Copy)]\n-pub struct ConstDef<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct ConstDef<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -70,7 +69,7 @@ impl<R: TreeRoot> ConstDef<R> {}\n \n // DynTraitType\n #[derive(Debug, Clone, Copy)]\n-pub struct DynTraitType<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct DynTraitType<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -88,7 +87,7 @@ impl<R: TreeRoot> DynTraitType<R> {}\n \n // EnumDef\n #[derive(Debug, Clone, Copy)]\n-pub struct EnumDef<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct EnumDef<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -108,7 +107,7 @@ impl<R: TreeRoot> EnumDef<R> {}\n \n // File\n #[derive(Debug, Clone, Copy)]\n-pub struct File<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct File<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -132,7 +131,7 @@ impl<R: TreeRoot> File<R> {\n \n // FnDef\n #[derive(Debug, Clone, Copy)]\n-pub struct FnDef<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct FnDef<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -152,7 +151,7 @@ impl<R: TreeRoot> FnDef<R> {}\n \n // FnPointerType\n #[derive(Debug, Clone, Copy)]\n-pub struct FnPointerType<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct FnPointerType<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -170,7 +169,7 @@ impl<R: TreeRoot> FnPointerType<R> {}\n \n // ForType\n #[derive(Debug, Clone, Copy)]\n-pub struct ForType<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct ForType<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -188,7 +187,7 @@ impl<R: TreeRoot> ForType<R> {}\n \n // ImplItem\n #[derive(Debug, Clone, Copy)]\n-pub struct ImplItem<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct ImplItem<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -206,7 +205,7 @@ impl<R: TreeRoot> ImplItem<R> {}\n \n // ImplTraitType\n #[derive(Debug, Clone, Copy)]\n-pub struct ImplTraitType<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct ImplTraitType<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -224,7 +223,7 @@ impl<R: TreeRoot> ImplTraitType<R> {}\n \n // Module\n #[derive(Debug, Clone, Copy)]\n-pub struct Module<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct Module<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -244,7 +243,7 @@ impl<R: TreeRoot> Module<R> {}\n \n // Name\n #[derive(Debug, Clone, Copy)]\n-pub struct Name<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct Name<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -262,7 +261,7 @@ impl<R: TreeRoot> Name<R> {}\n \n // NameRef\n #[derive(Debug, Clone, Copy)]\n-pub struct NameRef<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct NameRef<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -280,7 +279,7 @@ impl<R: TreeRoot> NameRef<R> {}\n \n // NamedField\n #[derive(Debug, Clone, Copy)]\n-pub struct NamedField<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct NamedField<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -300,7 +299,7 @@ impl<R: TreeRoot> NamedField<R> {}\n \n // NeverType\n #[derive(Debug, Clone, Copy)]\n-pub struct NeverType<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct NeverType<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -318,7 +317,7 @@ impl<R: TreeRoot> NeverType<R> {}\n \n // NominalDef\n #[derive(Debug, Clone, Copy)]\n-pub enum NominalDef<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub enum NominalDef<R: TreeRoot = OwnedRoot> {\n     StructDef(StructDef<R>),\n     EnumDef(EnumDef<R>),\n }\n@@ -344,7 +343,7 @@ impl<R: TreeRoot> NominalDef<R> {}\n \n // ParenType\n #[derive(Debug, Clone, Copy)]\n-pub struct ParenType<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct ParenType<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -362,7 +361,7 @@ impl<R: TreeRoot> ParenType<R> {}\n \n // PathType\n #[derive(Debug, Clone, Copy)]\n-pub struct PathType<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct PathType<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -380,7 +379,7 @@ impl<R: TreeRoot> PathType<R> {}\n \n // PlaceholderType\n #[derive(Debug, Clone, Copy)]\n-pub struct PlaceholderType<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct PlaceholderType<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -398,7 +397,7 @@ impl<R: TreeRoot> PlaceholderType<R> {}\n \n // PointerType\n #[derive(Debug, Clone, Copy)]\n-pub struct PointerType<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct PointerType<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -416,7 +415,7 @@ impl<R: TreeRoot> PointerType<R> {}\n \n // ReferenceType\n #[derive(Debug, Clone, Copy)]\n-pub struct ReferenceType<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct ReferenceType<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -434,7 +433,7 @@ impl<R: TreeRoot> ReferenceType<R> {}\n \n // SliceType\n #[derive(Debug, Clone, Copy)]\n-pub struct SliceType<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct SliceType<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -452,7 +451,7 @@ impl<R: TreeRoot> SliceType<R> {}\n \n // StaticDef\n #[derive(Debug, Clone, Copy)]\n-pub struct StaticDef<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct StaticDef<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -472,7 +471,7 @@ impl<R: TreeRoot> StaticDef<R> {}\n \n // StructDef\n #[derive(Debug, Clone, Copy)]\n-pub struct StructDef<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct StructDef<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -498,7 +497,7 @@ impl<R: TreeRoot> StructDef<R> {\n \n // TokenTree\n #[derive(Debug, Clone, Copy)]\n-pub struct TokenTree<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct TokenTree<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -516,7 +515,7 @@ impl<R: TreeRoot> TokenTree<R> {}\n \n // TraitDef\n #[derive(Debug, Clone, Copy)]\n-pub struct TraitDef<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct TraitDef<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -536,7 +535,7 @@ impl<R: TreeRoot> TraitDef<R> {}\n \n // TupleType\n #[derive(Debug, Clone, Copy)]\n-pub struct TupleType<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct TupleType<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -554,7 +553,7 @@ impl<R: TreeRoot> TupleType<R> {}\n \n // TypeDef\n #[derive(Debug, Clone, Copy)]\n-pub struct TypeDef<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct TypeDef<R: TreeRoot = OwnedRoot> {\n     syntax: SyntaxNode<R>,\n }\n \n@@ -574,7 +573,7 @@ impl<R: TreeRoot> TypeDef<R> {}\n \n // TypeRef\n #[derive(Debug, Clone, Copy)]\n-pub enum TypeRef<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub enum TypeRef<R: TreeRoot = OwnedRoot> {\n     ParenType(ParenType<R>),\n     TupleType(TupleType<R>),\n     NeverType(NeverType<R>),"}, {"sha": "b52230e9cb748c97c27ab996014857787a5f2044", "filename": "crates/libsyntax2/src/ast/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs?ref=70097504f78c4c41368a0b864a94df95fb9c27f7", "patch": "@@ -1,12 +1,10 @@\n mod generated;\n \n-use std::sync::Arc;\n-\n use itertools::Itertools;\n use smol_str::SmolStr;\n \n use {\n-    SyntaxNode, SyntaxNodeRef, SyntaxRoot, TreeRoot, SyntaxError,\n+    SyntaxNode, SyntaxNodeRef, OwnedRoot, TreeRoot, SyntaxError,\n     SyntaxKind::*,\n };\n pub use self::generated::*;\n@@ -37,15 +35,15 @@ pub trait AttrsOwner<R: TreeRoot>: AstNode<R> {\n     }\n }\n \n-impl File<Arc<SyntaxRoot>> {\n+impl File<OwnedRoot> {\n     pub fn parse(text: &str) -> Self {\n         File::cast(::parse(text)).unwrap()\n     }\n }\n \n impl<R: TreeRoot> File<R> {\n     pub fn errors(&self) -> Vec<SyntaxError> {\n-        self.syntax().root.errors.clone()\n+        self.syntax().root.syntax_root().errors.clone()\n     }\n }\n "}, {"sha": "0e40fb65fbcd056263849e344058362f3b06ebdf", "filename": "crates/libsyntax2/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Flib.rs?ref=70097504f78c4c41368a0b864a94df95fb9c27f7", "patch": "@@ -45,7 +45,7 @@ pub use {\n     lexer::{tokenize, Token},\n     syntax_kinds::SyntaxKind,\n     text_unit::{TextRange, TextUnit},\n-    yellow::{SyntaxNode, SyntaxNodeRef, SyntaxRoot, TreeRoot, SyntaxError},\n+    yellow::{SyntaxNode, SyntaxNodeRef, OwnedRoot, RefRoot, TreeRoot, SyntaxError},\n };\n \n "}, {"sha": "4f60aa2a89c6708edc5cd20ff6d20684255de5eb", "filename": "crates/libsyntax2/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibsyntax2%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibsyntax2%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Futils.rs?ref=70097504f78c4c41368a0b864a94df95fb9c27f7", "patch": "@@ -1,13 +1,13 @@\n use std::fmt::Write;\n use {\n     algo::walk::{walk, WalkEvent},\n-    SyntaxNode,\n+    SyntaxNode, TreeRoot,\n };\n \n /// Parse a file and create a string representation of the resulting parse tree.\n pub fn dump_tree(syntax: &SyntaxNode) -> String {\n     let syntax = syntax.as_ref();\n-    let mut errors: Vec<_> = syntax.root.errors.iter().cloned().collect();\n+    let mut errors: Vec<_> = syntax.root.syntax_root().errors.iter().cloned().collect();\n     errors.sort_by_key(|e| e.offset);\n     let mut err_pos = 0;\n     let mut level = 0;"}, {"sha": "3c4510fe7fd1185fff75132856f8b102a310c6e9", "filename": "crates/libsyntax2/src/yellow/mod.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fmod.rs?ref=70097504f78c4c41368a0b864a94df95fb9c27f7", "patch": "@@ -4,7 +4,6 @@ mod red;\n mod syntax;\n \n use std::{\n-    ops::Deref,\n     sync::Arc,\n     ptr,\n };\n@@ -15,17 +14,48 @@ pub(crate) use self::{\n     red::RedNode,\n };\n \n-pub trait TreeRoot: Deref<Target=SyntaxRoot> + Clone + Send + Sync {}\n-\n #[derive(Debug)]\n pub struct SyntaxRoot {\n     red: RedNode,\n     pub(crate) errors: Vec<SyntaxError>,\n }\n \n-impl TreeRoot for Arc<SyntaxRoot> {}\n+pub trait TreeRoot: Clone + Send + Sync {\n+    fn borrowed(&self) -> RefRoot;\n+    fn owned(&self) -> OwnedRoot;\n+\n+    #[doc(hidden)]\n+    fn syntax_root(&self) -> &SyntaxRoot;\n+}\n+#[derive(Clone, Debug)]\n+pub struct OwnedRoot(Arc<SyntaxRoot>);\n+#[derive(Clone, Copy, Debug)]\n+pub struct RefRoot<'a>(&'a OwnedRoot); // TODO: shared_from_this instead of double indirection\n \n-impl<'a> TreeRoot for &'a SyntaxRoot {}\n+impl TreeRoot for OwnedRoot {\n+    fn borrowed(&self) -> RefRoot {\n+        RefRoot(&self)\n+    }\n+    fn owned(&self) -> OwnedRoot {\n+        self.clone()\n+    }\n+\n+    fn syntax_root(&self) -> &SyntaxRoot {\n+        &*self.0\n+    }\n+}\n+\n+impl<'a> TreeRoot for RefRoot<'a> {\n+    fn borrowed(&self) -> RefRoot {\n+        *self\n+    }\n+    fn owned(&self) -> OwnedRoot {\n+        self.0.clone()\n+    }\n+    fn syntax_root(&self) -> &SyntaxRoot {\n+        self.0.syntax_root()\n+    }\n+}\n \n impl SyntaxRoot {\n     pub(crate) fn new(green: GreenNode, errors: Vec<SyntaxError>) -> SyntaxRoot {"}, {"sha": "ef82ba408fc25ec7d0e43487daae41db3e3f2868", "filename": "crates/libsyntax2/src/yellow/syntax.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70097504f78c4c41368a0b864a94df95fb9c27f7/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs?ref=70097504f78c4c41368a0b864a94df95fb9c27f7", "patch": "@@ -3,14 +3,14 @@ use std::{fmt, sync::Arc};\n use smol_str::SmolStr;\n \n use {\n-    yellow::{RedNode, TreeRoot, SyntaxRoot, RedPtr},\n+    yellow::{RedNode, TreeRoot, SyntaxRoot, RedPtr, RefRoot, OwnedRoot},\n     SyntaxKind::{self, *},\n     TextRange, TextUnit,\n };\n \n \n #[derive(Clone, Copy)]\n-pub struct SyntaxNode<R: TreeRoot = Arc<SyntaxRoot>> {\n+pub struct SyntaxNode<R: TreeRoot = OwnedRoot> {\n     pub(crate) root: R,\n     // Guaranteed to not dangle, because `root` holds a\n     // strong reference to red's ancestor\n@@ -28,7 +28,7 @@ impl<R1: TreeRoot, R2: TreeRoot> PartialEq<SyntaxNode<R1>> for SyntaxNode<R2> {\n \n impl<R: TreeRoot> Eq for SyntaxNode<R> {}\n \n-pub type SyntaxNodeRef<'a> = SyntaxNode<&'a SyntaxRoot>;\n+pub type SyntaxNodeRef<'a> = SyntaxNode<RefRoot<'a>>;\n \n #[test]\n fn syntax_node_ref_is_copy() {\n@@ -42,18 +42,18 @@ pub struct SyntaxError {\n     pub offset: TextUnit,\n }\n \n-impl SyntaxNode<Arc<SyntaxRoot>> {\n+impl SyntaxNode<OwnedRoot> {\n     pub(crate) fn new_owned(root: SyntaxRoot) -> Self {\n-        let root = Arc::new(root);\n-        let red = RedPtr::new(&root.red);\n+        let root = OwnedRoot(Arc::new(root));\n+        let red = RedPtr::new(&root.syntax_root().red);\n         SyntaxNode { root, red }\n     }\n }\n \n impl<R: TreeRoot> SyntaxNode<R> {\n-    pub fn as_ref<'a>(&'a self) -> SyntaxNode<&'a SyntaxRoot> {\n+    pub fn as_ref<'a>(&'a self) -> SyntaxNode<RefRoot<'a>> {\n         SyntaxNode {\n-            root: &*self.root,\n+            root: self.root.borrowed(),\n             red: self.red,\n         }\n     }"}]}