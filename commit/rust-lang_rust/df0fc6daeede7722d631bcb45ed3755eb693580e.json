{"sha": "df0fc6daeede7722d631bcb45ed3755eb693580e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMGZjNmRhZWVkZTc3MjJkNjMxYmNiNDVlZDM3NTVlYjY5MzU4MGU=", "commit": {"author": {"name": "David Calavera", "email": "david.calavera@gmail.com", "date": "2021-02-12T18:24:16Z"}, "committer": {"name": "David Calavera", "email": "david.calavera@gmail.com", "date": "2021-06-09T16:27:11Z"}, "message": "Make symbols stripping work on MacOS X\n\nAs reported in the stabilization issue, MacOS' linker doesn't support the `-s` and `-S` flags to strip symbols anymore. However, the os ships a separated tool to perform these operations.\n\nThis change allows the compiler to use that tool after a target has been compiled to strip symbols.\n\nFor rationale, see: https://github.com/rust-lang/rust/issues/72110#issuecomment-641169818\nFor option selection, see: https://www.unix.com/man-page/osx/1/strip/\n\nSigned-off-by: David Calavera <david.calavera@gmail.com>", "tree": {"sha": "3ff1d215e3e6d32253247f4f5d3c590a17362d43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ff1d215e3e6d32253247f4f5d3c590a17362d43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df0fc6daeede7722d631bcb45ed3755eb693580e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df0fc6daeede7722d631bcb45ed3755eb693580e", "html_url": "https://github.com/rust-lang/rust/commit/df0fc6daeede7722d631bcb45ed3755eb693580e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df0fc6daeede7722d631bcb45ed3755eb693580e/comments", "author": {"login": "calavera", "id": 1050, "node_id": "MDQ6VXNlcjEwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calavera", "html_url": "https://github.com/calavera", "followers_url": "https://api.github.com/users/calavera/followers", "following_url": "https://api.github.com/users/calavera/following{/other_user}", "gists_url": "https://api.github.com/users/calavera/gists{/gist_id}", "starred_url": "https://api.github.com/users/calavera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calavera/subscriptions", "organizations_url": "https://api.github.com/users/calavera/orgs", "repos_url": "https://api.github.com/users/calavera/repos", "events_url": "https://api.github.com/users/calavera/events{/privacy}", "received_events_url": "https://api.github.com/users/calavera/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calavera", "id": 1050, "node_id": "MDQ6VXNlcjEwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calavera", "html_url": "https://github.com/calavera", "followers_url": "https://api.github.com/users/calavera/followers", "following_url": "https://api.github.com/users/calavera/following{/other_user}", "gists_url": "https://api.github.com/users/calavera/gists{/gist_id}", "starred_url": "https://api.github.com/users/calavera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calavera/subscriptions", "organizations_url": "https://api.github.com/users/calavera/orgs", "repos_url": "https://api.github.com/users/calavera/repos", "events_url": "https://api.github.com/users/calavera/events{/privacy}", "received_events_url": "https://api.github.com/users/calavera/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d9c2c92b834c430f102ea96f65119e37320776e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d9c2c92b834c430f102ea96f65119e37320776e", "html_url": "https://github.com/rust-lang/rust/commit/9d9c2c92b834c430f102ea96f65119e37320776e"}], "stats": {"total": 62, "additions": 49, "deletions": 13}, "files": [{"sha": "0e55cb32f1e1357b681876a120febe049351ba95", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/df0fc6daeede7722d631bcb45ed3755eb693580e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0fc6daeede7722d631bcb45ed3755eb693580e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=df0fc6daeede7722d631bcb45ed3755eb693580e", "patch": "@@ -5,7 +5,7 @@ use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::CrateNum;\n use rustc_middle::middle::cstore::{EncodedMetadata, LibSource};\n use rustc_middle::middle::dependency_format::Linkage;\n-use rustc_session::config::{self, CFGuard, CrateType, DebugInfo};\n+use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, Strip};\n use rustc_session::config::{OutputFilenames, OutputType, PrintRequest};\n use rustc_session::output::{check_file_is_writeable, invalid_output_for_target, out_filename};\n use rustc_session::search_paths::PathKind;\n@@ -717,14 +717,6 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         }\n     }\n \n-    fn escape_string(s: &[u8]) -> String {\n-        str::from_utf8(s).map(|s| s.to_owned()).unwrap_or_else(|_| {\n-            let mut x = \"Non-UTF-8 output: \".to_string();\n-            x.extend(s.iter().flat_map(|&b| ascii::escape_default(b)).map(char::from));\n-            x\n-        })\n-    }\n-\n     match prog {\n         Ok(prog) => {\n             if !prog.status.success() {\n@@ -866,6 +858,47 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         // ... and otherwise we're processing a `*.dwp` packed dwarf file.\n         SplitDebuginfo::Packed => link_dwarf_object(sess, &out_filename),\n     }\n+\n+    if sess.target.is_like_osx {\n+        if let Some(option) = osx_strip_opt(sess.opts.debugging_opts.strip) {\n+            strip_symbols_in_osx(sess, &out_filename, option);\n+        }\n+    }\n+}\n+\n+fn strip_symbols_in_osx<'a>(sess: &'a Session, out_filename: &Path, option: &str) {\n+    let prog = Command::new(\"strip\").arg(option).arg(out_filename).output();\n+    match prog {\n+        Ok(prog) => {\n+            if !prog.status.success() {\n+                let mut output = prog.stderr.clone();\n+                output.extend_from_slice(&prog.stdout);\n+                sess.struct_warn(&format!(\n+                    \"stripping debug info with `strip` failed: {}\",\n+                    prog.status\n+                ))\n+                .note(&escape_string(&output))\n+                .emit();\n+            }\n+        }\n+        Err(e) => sess.fatal(&format!(\"unable to run `strip`: {}\", e)),\n+    }\n+}\n+\n+fn osx_strip_opt<'a>(strip: Strip) -> Option<&'a str> {\n+    match strip {\n+        Strip::Debuginfo => Some(\"-S\"),\n+        Strip::Symbols => Some(\"-x\"),\n+        Strip::None => None,\n+    }\n+}\n+\n+fn escape_string(s: &[u8]) -> String {\n+    str::from_utf8(s).map(|s| s.to_owned()).unwrap_or_else(|_| {\n+        let mut x = \"Non-UTF-8 output: \".to_string();\n+        x.extend(s.iter().flat_map(|&b| ascii::escape_default(b)).map(char::from));\n+        x\n+    })\n }\n \n fn link_sanitizers(sess: &Session, crate_type: CrateType, linker: &mut dyn Linker) {"}, {"sha": "cd24d87505c1a101fa9df9e0ec2a6829abc408a7", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df0fc6daeede7722d631bcb45ed3755eb693580e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0fc6daeede7722d631bcb45ed3755eb693580e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=df0fc6daeede7722d631bcb45ed3755eb693580e", "patch": "@@ -482,15 +482,18 @@ impl<'a> Linker for GccLinker<'a> {\n     fn control_flow_guard(&mut self) {}\n \n     fn debuginfo(&mut self, strip: Strip) {\n+        // MacOS linker doesn't support stripping symbols directly anymore.\n+        if self.sess.target.is_like_osx {\n+            return;\n+        }\n+\n         match strip {\n             Strip::None => {}\n             Strip::Debuginfo => {\n-                // MacOS linker does not support longhand argument --strip-debug\n-                self.linker_arg(\"-S\");\n+                self.linker_arg(\"--strip-debug\");\n             }\n             Strip::Symbols => {\n-                // MacOS linker does not support longhand argument --strip-all\n-                self.linker_arg(\"-s\");\n+                self.linker_arg(\"--strip-all\");\n             }\n         }\n     }"}]}