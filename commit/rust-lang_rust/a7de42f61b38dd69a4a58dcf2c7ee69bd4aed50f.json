{"sha": "a7de42f61b38dd69a4a58dcf2c7ee69bd4aed50f", "node_id": "C_kwDOAAsO6NoAKGE3ZGU0MmY2MWIzOGRkNjlhNGE1OGRjZjJjN2VlNjliZDRhZWQ1MGY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-28T08:43:19Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-28T08:43:19Z"}, "message": "Use pull instead of push based model for getting dylib symbols in the jit\n\nThis avoids having to parse the dylibs to get all symbols and matches\nthe way the dynamic linker resolves symbols. Furthermore it fixes the\njit on Windows.", "tree": {"sha": "876a83c1b61be69ee1c274c00fb71a143d8164bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/876a83c1b61be69ee1c274c00fb71a143d8164bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7de42f61b38dd69a4a58dcf2c7ee69bd4aed50f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7de42f61b38dd69a4a58dcf2c7ee69bd4aed50f", "html_url": "https://github.com/rust-lang/rust/commit/a7de42f61b38dd69a4a58dcf2c7ee69bd4aed50f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7de42f61b38dd69a4a58dcf2c7ee69bd4aed50f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53f4bb935213a7d3f50a0317eac23cebe9bdab54", "url": "https://api.github.com/repos/rust-lang/rust/commits/53f4bb935213a7d3f50a0317eac23cebe9bdab54", "html_url": "https://github.com/rust-lang/rust/commit/53f4bb935213a7d3f50a0317eac23cebe9bdab54"}], "stats": {"total": 54, "additions": 18, "deletions": 36}, "files": [{"sha": "3f225b4efa2b11a7121bf275c94cdda3b0c64121", "filename": "build_system/tests.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7de42f61b38dd69a4a58dcf2c7ee69bd4aed50f/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7de42f61b38dd69a4a58dcf2c7ee69bd4aed50f/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=a7de42f61b38dd69a4a58dcf2c7ee69bd4aed50f", "patch": "@@ -465,8 +465,7 @@ impl TestRunner {\n         out_dir.push(\"out\");\n \n         let is_native = host_triple == target_triple;\n-        let jit_supported =\n-            target_triple.contains(\"x86_64\") && is_native && !host_triple.contains(\"windows\");\n+        let jit_supported = target_triple.contains(\"x86_64\") && is_native;\n \n         let mut rust_flags = env::var(\"RUSTFLAGS\").ok().unwrap_or(\"\".to_string());\n         let mut run_wrapper = Vec::new();"}, {"sha": "4ad859b6d83783017eb14c679b1f634748e24b54", "filename": "src/driver/jit.rs", "status": "modified", "additions": 17, "deletions": 34, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a7de42f61b38dd69a4a58dcf2c7ee69bd4aed50f/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7de42f61b38dd69a4a58dcf2c7ee69bd4aed50f/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=a7de42f61b38dd69a4a58dcf2c7ee69bd4aed50f", "patch": "@@ -67,13 +67,12 @@ fn create_jit_module(\n     hotswap: bool,\n ) -> (JITModule, CodegenCx) {\n     let crate_info = CrateInfo::new(tcx, \"dummy_target_cpu\".to_string());\n-    let imported_symbols = load_imported_symbols_for_jit(tcx.sess, crate_info);\n \n     let isa = crate::build_isa(tcx.sess, backend_config);\n     let mut jit_builder = JITBuilder::with_isa(isa, cranelift_module::default_libcall_names());\n     jit_builder.hotswap(hotswap);\n     crate::compiler_builtins::register_functions_for_jit(&mut jit_builder);\n-    jit_builder.symbols(imported_symbols);\n+    jit_builder.symbol_lookup_fn(dep_symbol_lookup_fn(tcx.sess, crate_info));\n     jit_builder.symbol(\"__clif_jit_fn\", clif_jit_fn as *const u8);\n     let mut jit_module = JITModule::new(jit_builder);\n \n@@ -286,10 +285,10 @@ fn jit_fn(instance_ptr: *const Instance<'static>, trampoline_ptr: *const u8) ->\n     })\n }\n \n-fn load_imported_symbols_for_jit(\n+fn dep_symbol_lookup_fn(\n     sess: &Session,\n     crate_info: CrateInfo,\n-) -> Vec<(String, *const u8)> {\n+) -> Box<dyn Fn(&str) -> Option<*const u8>> {\n     use rustc_middle::middle::dependency_format::Linkage;\n \n     let mut dylib_paths = Vec::new();\n@@ -316,39 +315,23 @@ fn load_imported_symbols_for_jit(\n         }\n     }\n \n-    let mut imported_symbols = Vec::new();\n-    for path in dylib_paths {\n-        use object::{Object, ObjectSymbol};\n-        let lib = libloading::Library::new(&path).unwrap();\n-        let obj = std::fs::read(path).unwrap();\n-        let obj = object::File::parse(&*obj).unwrap();\n-        imported_symbols.extend(obj.dynamic_symbols().filter_map(|symbol| {\n-            let name = symbol.name().unwrap().to_string();\n-            if name.is_empty() || !symbol.is_global() || symbol.is_undefined() {\n-                return None;\n-            }\n-            if name.starts_with(\"rust_metadata_\") {\n-                // The metadata is part of a section that is not loaded by the dynamic linker in\n-                // case of cg_llvm.\n-                return None;\n-            }\n-            let dlsym_name = if cfg!(target_os = \"macos\") {\n-                // On macOS `dlsym` expects the name without leading `_`.\n-                assert!(name.starts_with('_'), \"{:?}\", name);\n-                &name[1..]\n-            } else {\n-                &name\n-            };\n-            let symbol: libloading::Symbol<'_, *const u8> =\n-                unsafe { lib.get(dlsym_name.as_bytes()) }.unwrap();\n-            Some((name, *symbol))\n-        }));\n-        std::mem::forget(lib)\n-    }\n+    let imported_dylibs = Box::leak(\n+        dylib_paths\n+            .into_iter()\n+            .map(|path| libloading::Library::new(&path).unwrap())\n+            .collect::<Box<[_]>>(),\n+    );\n \n     sess.abort_if_errors();\n \n-    imported_symbols\n+    Box::new(move |sym_name| {\n+        for dylib in &*imported_dylibs {\n+            if let Ok(sym) = unsafe { dylib.get::<*const u8>(sym_name.as_bytes()) } {\n+                return Some(*sym);\n+            }\n+        }\n+        None\n+    })\n }\n \n fn codegen_shim<'tcx>("}]}