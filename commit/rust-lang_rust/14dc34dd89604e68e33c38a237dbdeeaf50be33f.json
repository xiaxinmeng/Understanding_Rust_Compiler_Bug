{"sha": "14dc34dd89604e68e33c38a237dbdeeaf50be33f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZGMzNGRkODk2MDRlNjhlMzNjMzhhMjM3ZGJkZWVhZjUwYmUzM2Y=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-05T11:07:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-05T11:07:03Z"}, "message": "Rollup merge of #72260 - csmoe:issue-69276, r=estebank\n\nSpell out `Self` in async function return\n\nCloses #69276\nr? @tmandry", "tree": {"sha": "6f1e09024a69e4edccd5d5e8af2d25086e410e76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f1e09024a69e4edccd5d5e8af2d25086e410e76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14dc34dd89604e68e33c38a237dbdeeaf50be33f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe2idXCRBK7hj4Ov3rIwAAdHIIAAOo1APVf081n1VVKygAn+/w\nEesl+jpykFjvgZHOzgGSiUA4bsZgSAu2swzgY4p4/CMDLbEiP/vK/KsWzawq/WOu\nvkASzP5fBIHWiQuidovj5RgYrPUhqNDwCIDRd6gSuA2CcQkTR82C6AgtEBPVg7pM\n7Qr9pYV+I/mJU62MwVCas2h1Cx3/tyrmFZRNt5ZEIHPmpp7qYNLGpVqfqeOpYr5q\ng/g6Tt4XQZ7I3B7NhVHAlnh+y95UjiQlqeu5G8XkvNorvGz8hok9HisM3BrpYQ1C\nha+96q9ggLe3Lty/LnPqLmKsWqZ4rZ9jBC1f8mJO2e8w5HvPToWGAFuRU7VJUD8=\n=Hgr+\n-----END PGP SIGNATURE-----\n", "payload": "tree 6f1e09024a69e4edccd5d5e8af2d25086e410e76\nparent 219380d840877de97b0e17674be7212ebc929d51\nparent 9be635306cdf06dde62e2c1ebaadcdc33f44f45c\nauthor Dylan DPC <dylan.dpc@gmail.com> 1591355223 +0200\ncommitter GitHub <noreply@github.com> 1591355223 +0200\n\nRollup merge of #72260 - csmoe:issue-69276, r=estebank\n\nSpell out `Self` in async function return\n\nCloses #69276\nr? @tmandry\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14dc34dd89604e68e33c38a237dbdeeaf50be33f", "html_url": "https://github.com/rust-lang/rust/commit/14dc34dd89604e68e33c38a237dbdeeaf50be33f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14dc34dd89604e68e33c38a237dbdeeaf50be33f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "219380d840877de97b0e17674be7212ebc929d51", "url": "https://api.github.com/repos/rust-lang/rust/commits/219380d840877de97b0e17674be7212ebc929d51", "html_url": "https://github.com/rust-lang/rust/commit/219380d840877de97b0e17674be7212ebc929d51"}, {"sha": "9be635306cdf06dde62e2c1ebaadcdc33f44f45c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be635306cdf06dde62e2c1ebaadcdc33f44f45c", "html_url": "https://github.com/rust-lang/rust/commit/9be635306cdf06dde62e2c1ebaadcdc33f44f45c"}], "stats": {"total": 139, "additions": 97, "deletions": 42}, "files": [{"sha": "7abe75a375a0bf819c85ce589ac1e3821664793d", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14dc34dd89604e68e33c38a237dbdeeaf50be33f/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14dc34dd89604e68e33c38a237dbdeeaf50be33f/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=14dc34dd89604e68e33c38a237dbdeeaf50be33f", "patch": "@@ -437,6 +437,7 @@ E0751: include_str!(\"./error_codes/E0751.md\"),\n E0752: include_str!(\"./error_codes/E0752.md\"),\n E0753: include_str!(\"./error_codes/E0753.md\"),\n E0754: include_str!(\"./error_codes/E0754.md\"),\n+E0760: include_str!(\"./error_codes/E0760.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "e1dcfefebcd762187aba9a1d49a0b44154696787", "filename": "src/librustc_error_codes/error_codes/E0760.md", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/14dc34dd89604e68e33c38a237dbdeeaf50be33f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0760.md", "raw_url": "https://github.com/rust-lang/rust/raw/14dc34dd89604e68e33c38a237dbdeeaf50be33f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0760.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0760.md?ref=14dc34dd89604e68e33c38a237dbdeeaf50be33f", "patch": "@@ -0,0 +1,32 @@\n+`async fn`/`impl trait` return type cannot contain a projection\n+or `Self` that references lifetimes from a parent scope.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0760,edition2018\n+struct S<'a>(&'a i32);\n+\n+impl<'a> S<'a> {\n+    async fn new(i: &'a i32) -> Self {\n+        S(&22)\n+    }\n+}\n+```\n+\n+To fix this error we need to spell out `Self` to `S<'a>`:\n+\n+```edition2018\n+struct S<'a>(&'a i32);\n+\n+impl<'a> S<'a> {\n+    async fn new(i: &'a i32) -> S<'a> {\n+        S(&22)\n+    }\n+}\n+```\n+\n+This will be allowed at some point in the future,\n+but the implementation is not yet complete.\n+See the [issue-61949] for this limitation.\n+\n+[issue-61949]: https://github.com/rust-lang/rust/issues/61949"}, {"sha": "634f2f78c70005f9735f9dd732aa77351cbb40a3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 58, "deletions": 38, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/14dc34dd89604e68e33c38a237dbdeeaf50be33f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14dc34dd89604e68e33c38a237dbdeeaf50be33f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=14dc34dd89604e68e33c38a237dbdeeaf50be33f", "patch": "@@ -1623,12 +1623,17 @@ fn check_opaque_for_inheriting_lifetimes(tcx: TyCtxt<'tcx>, def_id: LocalDefId,\n     struct ProhibitOpaqueVisitor<'tcx> {\n         opaque_identity_ty: Ty<'tcx>,\n         generics: &'tcx ty::Generics,\n+        ty: Option<Ty<'tcx>>,\n     };\n \n     impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n             debug!(\"check_opaque_for_inheriting_lifetimes: (visit_ty) t={:?}\", t);\n-            if t == self.opaque_identity_ty { false } else { t.super_visit_with(self) }\n+            if t != self.opaque_identity_ty && t.super_visit_with(self) {\n+                self.ty = Some(t);\n+                return true;\n+            }\n+            false\n         }\n \n         fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n@@ -1651,46 +1656,61 @@ fn check_opaque_for_inheriting_lifetimes(tcx: TyCtxt<'tcx>, def_id: LocalDefId,\n         }\n     }\n \n-    let prohibit_opaque = match item.kind {\n-        ItemKind::OpaqueTy(hir::OpaqueTy {\n-            origin: hir::OpaqueTyOrigin::AsyncFn | hir::OpaqueTyOrigin::FnReturn,\n-            ..\n-        }) => {\n-            let mut visitor = ProhibitOpaqueVisitor {\n-                opaque_identity_ty: tcx.mk_opaque(\n-                    def_id.to_def_id(),\n-                    InternalSubsts::identity_for_item(tcx, def_id.to_def_id()),\n-                ),\n-                generics: tcx.generics_of(def_id),\n-            };\n-            debug!(\"check_opaque_for_inheriting_lifetimes: visitor={:?}\", visitor);\n-\n-            tcx.predicates_of(def_id)\n-                .predicates\n-                .iter()\n-                .any(|(predicate, _)| predicate.visit_with(&mut visitor))\n-        }\n-        _ => false,\n-    };\n-\n-    debug!(\"check_opaque_for_inheriting_lifetimes: prohibit_opaque={:?}\", prohibit_opaque);\n-    if prohibit_opaque {\n-        let is_async = match item.kind {\n-            ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => match origin {\n-                hir::OpaqueTyOrigin::AsyncFn => true,\n-                _ => false,\n-            },\n-            _ => unreachable!(),\n+    if let ItemKind::OpaqueTy(hir::OpaqueTy {\n+        origin: hir::OpaqueTyOrigin::AsyncFn | hir::OpaqueTyOrigin::FnReturn,\n+        ..\n+    }) = item.kind\n+    {\n+        let mut visitor = ProhibitOpaqueVisitor {\n+            opaque_identity_ty: tcx.mk_opaque(\n+                def_id.to_def_id(),\n+                InternalSubsts::identity_for_item(tcx, def_id.to_def_id()),\n+            ),\n+            generics: tcx.generics_of(def_id),\n+            ty: None,\n         };\n+        let prohibit_opaque = tcx\n+            .predicates_of(def_id)\n+            .predicates\n+            .iter()\n+            .any(|(predicate, _)| predicate.visit_with(&mut visitor));\n+        debug!(\n+            \"check_opaque_for_inheriting_lifetimes: prohibit_opaque={:?}, visitor={:?}\",\n+            prohibit_opaque, visitor\n+        );\n \n-        tcx.sess.span_err(\n-            span,\n-            &format!(\n-            \"`{}` return type cannot contain a projection or `Self` that references lifetimes from \\\n+        if prohibit_opaque {\n+            let is_async = match item.kind {\n+                ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => match origin {\n+                    hir::OpaqueTyOrigin::AsyncFn => true,\n+                    _ => false,\n+                },\n+                _ => unreachable!(),\n+            };\n+\n+            let mut err = struct_span_err!(\n+                tcx.sess,\n+                span,\n+                E0760,\n+                \"`{}` return type cannot contain a projection or `Self` that references lifetimes from \\\n              a parent scope\",\n-            if is_async { \"async fn\" } else { \"impl Trait\" },\n-        ),\n-        );\n+                if is_async { \"async fn\" } else { \"impl Trait\" },\n+            );\n+\n+            if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(span) {\n+                if snippet == \"Self\" {\n+                    if let Some(ty) = visitor.ty {\n+                        err.span_suggestion(\n+                            span,\n+                            \"consider spelling out the type instead\",\n+                            format!(\"{:?}\", ty),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n+            }\n+            err.emit();\n+        }\n     }\n }\n "}, {"sha": "4eeef871c5bfc6ea8fa2811ed7a6353496402880", "filename": "src/test/ui/async-await/issue-61949-self-return-type.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14dc34dd89604e68e33c38a237dbdeeaf50be33f/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14dc34dd89604e68e33c38a237dbdeeaf50be33f/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr?ref=14dc34dd89604e68e33c38a237dbdeeaf50be33f", "patch": "@@ -1,8 +1,9 @@\n-error: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+error[E0760]: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n   --> $DIR/issue-61949-self-return-type.rs:11:40\n    |\n LL |     pub async fn new(_bar: &'a i32) -> Self {\n-   |                                        ^^^^\n+   |                                        ^^^^ help: consider spelling out the type instead: `Foo<'a>`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0760`."}, {"sha": "03aba10cc79b4a28468fb2fede535ac2102a3953", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14dc34dd89604e68e33c38a237dbdeeaf50be33f/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14dc34dd89604e68e33c38a237dbdeeaf50be33f/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=14dc34dd89604e68e33c38a237dbdeeaf50be33f", "patch": "@@ -21,7 +21,7 @@ help: consider constraining the associated type `<T as impl_trait::Trait>::Assoc\n LL |     fn foo_fail<T: Trait<Assoc = ()>>() -> impl FooLike<Output=T::Assoc> {\n    |                         ^^^^^^^^^^^^\n \n-error: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+error[E0760]: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n   --> $DIR/bound-normalization-fail.rs:43:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n@@ -43,4 +43,5 @@ LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output=T::\n \n error: aborting due to 3 previous errors; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0271`.\n+Some errors have detailed explanations: E0271, E0760.\n+For more information about an error, try `rustc --explain E0271`."}]}